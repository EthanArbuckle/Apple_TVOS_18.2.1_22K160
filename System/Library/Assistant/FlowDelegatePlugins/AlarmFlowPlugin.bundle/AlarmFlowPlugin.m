uint64_t sub_2538@<X0>(uint64_t a1@<X8>)
{
  return sub_254C(a1);
}

uint64_t sub_254C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_26B0(&qword_D8080);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_D3240 != -1) {
    swift_once(&qword_D3240, sub_A0E14);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_26F0(v5, (uint64_t)qword_D7FB8);
  v14 = (os_log_s *)Logger.logObject.getter(v6, v7, v8, v9, v10, v11, v12, v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)sub_1EFA4();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_0, v14, v15, "AlarmFlowPlugin: called findFlowForX()", v16, 2u);
    sub_16AA8((uint64_t)v16);
  }

  static AlarmFlowFactory.makeFlowFrom(parse:)();
  uint64_t v17 = type metadata accessor for FlowSearchResult(0LL);
  uint64_t v18 = sub_A1164((uint64_t)v4);
  return static FlowSearchResult.noFlow.getter(v18);
}

uint64_t sub_26B0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_26F0(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void static AlarmFlowFactory.makeFlowFrom(parse:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_26B0(&qword_D3788);
  sub_16AFC();
  __chkstk_darwin(v5);
  sub_16B30();
  uint64_t v7 = sub_31CA0(v6);
  uint64_t v8 = type metadata accessor for DirectInvocationUtils.Alarm.UserInfoKey(v7);
  sub_16D00(v8, (uint64_t)&v439);
  uint64_t v411 = v9;
  sub_16AFC();
  __chkstk_darwin(v10);
  sub_16B30();
  sub_16DCC(v11);
  sub_26B0(&qword_D7A40);
  sub_16AFC();
  __chkstk_darwin(v12);
  sub_16B30();
  uint64_t v14 = sub_31CA0(v13);
  os_log_type_t v15 = (void *)type metadata accessor for DirectInvocationUtils.Alarm.URI(v14);
  uint64_t v424 = *(v15 - 1);
  sub_16AFC();
  __chkstk_darwin(v16);
  sub_16B08();
  uint64_t v422 = v17;
  sub_16AF0();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v401 - v19;
  uint64_t v430 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v429 = *(void *)(v430 - 8);
  sub_16AFC();
  __chkstk_darwin(v21);
  sub_16B08();
  uint64_t v421 = v22;
  sub_16AF0();
  __chkstk_darwin(v23);
  sub_16BD8();
  uint64_t v420 = v24;
  sub_16AF0();
  uint64_t v26 = __chkstk_darwin(v25);
  v28 = (char *)&v401 - v27;
  __chkstk_darwin(v26);
  sub_16BF8();
  uint64_t v30 = sub_31CA0(v29);
  uint64_t v31 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(v30);
  sub_16D00(v31, (uint64_t)&v435);
  uint64_t v409 = v32;
  sub_16AFC();
  __chkstk_darwin(v33);
  sub_16B08();
  uint64_t v403 = v34;
  sub_16AF0();
  __chkstk_darwin(v35);
  sub_16BD8();
  uint64_t v404 = v36;
  sub_16AF0();
  __chkstk_darwin(v37);
  sub_16BD8();
  uint64_t v407 = v38;
  sub_16AF0();
  __chkstk_darwin(v39);
  sub_16BF8();
  uint64_t v41 = sub_31CA0(v40);
  uint64_t v42 = type metadata accessor for Siri_Nlu_External_UserParse(v41);
  sub_16D00(v42, (uint64_t)&v443);
  uint64_t v414 = v43;
  sub_16AFC();
  __chkstk_darwin(v44);
  sub_16B30();
  uint64_t v46 = sub_31CA0(v45);
  uint64_t v47 = type metadata accessor for USOParse(v46);
  sub_16D00(v47, (uint64_t)&v446);
  uint64_t v416 = v48;
  sub_16AFC();
  __chkstk_darwin(v49);
  sub_16B30();
  sub_16DCC(v50);
  sub_26B0(&qword_D7A48);
  sub_16AFC();
  __chkstk_darwin(v51);
  sub_16B30();
  uint64_t v53 = sub_31CA0(v52);
  uint64_t v54 = type metadata accessor for NamedParseTransformer(v53);
  sub_16D00(v54, (uint64_t)&v448);
  uint64_t v419 = v55;
  sub_16AFC();
  __chkstk_darwin(v56);
  sub_16B30();
  sub_16DCC(v57);
  sub_26B0((uint64_t *)&unk_D7A50);
  sub_16AFC();
  __chkstk_darwin(v58);
  sub_16B30();
  sub_16DCC(v59);
  sub_26B0(&qword_D6830);
  sub_16AFC();
  __chkstk_darwin(v60);
  sub_16B30();
  uint64_t v436 = v61;
  sub_26B0((uint64_t *)&unk_D7A60);
  sub_16AFC();
  __chkstk_darwin(v62);
  sub_16B30();
  uint64_t v431 = v63;
  sub_26B0(&qword_D6848);
  sub_16AFC();
  __chkstk_darwin(v64);
  sub_16B30();
  uint64_t v434 = v65;
  sub_26B0((uint64_t *)&unk_D7A70);
  sub_16AFC();
  __chkstk_darwin(v66);
  sub_16B08();
  uint64_t v432 = v67;
  sub_16AF0();
  __chkstk_darwin(v68);
  sub_16BD8();
  uint64_t v435 = v69;
  sub_16AF0();
  __chkstk_darwin(v70);
  sub_16BD8();
  uint64_t v438 = v71;
  sub_16AF0();
  __chkstk_darwin(v72);
  sub_16BF8();
  uint64_t v439 = v73;
  uint64_t v74 = type metadata accessor for NLIntent(0LL);
  uint64_t v440 = *(void *)(v74 - 8);
  uint64_t v441 = v74;
  sub_16AFC();
  __chkstk_darwin(v75);
  sub_16B08();
  uint64_t v437 = v76;
  sub_16AF0();
  __chkstk_darwin(v77);
  sub_16BF8();
  v442 = (_DWORD *)v78;
  uint64_t v79 = type metadata accessor for Parse(0LL);
  sub_95C44();
  __chkstk_darwin(v80);
  sub_16B08();
  v443 = (void *)v81;
  sub_16AF0();
  uint64_t v83 = __chkstk_darwin(v82);
  v85 = (char *)&v401 - v84;
  __chkstk_darwin(v83);
  v87 = (char *)&v401 - v86;
  if (qword_D3210 != -1) {
    swift_once(&qword_D3210, sub_98498);
  }
  v413 = v28;
  v425 = v20;
  uint64_t v88 = sub_16C80();
  v89 = (os_log_s *)sub_26F0(v88, (uint64_t)qword_D7A20);
  v444 = (_DWORD *)v2;
  uint64_t v90 = sub_9BE54((uint64_t)v87, v2);
  v433 = v89;
  Logger.logObject.getter(v90, v91, v92, v93, v94, v95, v96, v97);
  os_log_type_t v98 = sub_16C50();
  if (sub_16BA4(v98))
  {
    uint64_t v99 = sub_16AC4(12LL);
    v426 = v15;
    v100 = (uint8_t *)v99;
    uint64_t v101 = sub_16AC4(32LL);
    uint64_t v427 = v4;
    uint64_t v102 = v101;
    *(void *)&__int128 v447 = v101;
    *(_DWORD *)v100 = 136315138;
    v402 = v100 + 4;
    sub_9BE54((uint64_t)v85, (uint64_t)v87);
    uint64_t v103 = String.init<A>(describing:)(v85, v79);
    unint64_t v105 = v104;
    uint64_t v106 = sub_3D10(v103, v104, (uint64_t *)&v447);
    uint64_t v107 = sub_172D8(v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v107, v108, v402, v100 + 12);
    swift_bridgeObjectRelease(v105);
    v109 = *(uint8_t **)(v0 + 8);
    sub_9BD3C();
    sub_16BD0(&dword_0, v89, (os_log_type_t)v2, "AlarmFlowFactory: called makeFlowFrom() with parse %s", v100);
    sub_16BB4(v102);
    uint64_t v110 = v102;
    uint64_t v4 = v427;
    sub_16AA8(v110);
    uint64_t v111 = (uint64_t)v100;
    os_log_type_t v15 = v426;
    sub_16AA8(v111);
  }

  else
  {
    v109 = *(uint8_t **)(v0 + 8);
    sub_9BD3C();
  }

  v112 = v443;
  sub_9BE54((uint64_t)v443, (uint64_t)v444);
  uint64_t v113 = sub_9BE3C(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 88));
  if ((_DWORD)v113 == enum case for Parse.NLv3IntentOnly(_:))
  {
    v121 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 96);
    v444 = (_DWORD *)v79;
    sub_1704C((uint64_t)v112, v121);
    uint64_t v123 = v440;
    uint64_t v122 = v441;
    uint64_t v124 = (uint64_t)v442;
    sub_17620((uint64_t)v442, (uint64_t)v112, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v440 + 32));
    uint64_t v125 = v437;
    sub_17620(v437, v124, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v123 + 16));
    uint64_t v126 = type metadata accessor for AlarmNLIntent(0LL);
    sub_16D14(v126);
    sub_716E4(v125);
    uint64_t v127 = v439;
    sub_705F8(v439);
    uint64_t v128 = v438;
    sub_3F88(v127, v438, (uint64_t *)&unk_D7A70);
    uint64_t v129 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
    uint64_t v130 = sub_16BBC(v128, 1LL, v129);
    if (v140)
    {
      sub_7EC4(v128, (uint64_t *)&unk_D7A70);
      uint64_t v131 = v436;
    }

    else
    {
      uint64_t v136 = v431;
      TerminalElement.DateTimeValue.interval.getter(v130);
      uint64_t v137 = v136;
      uint64_t v138 = sub_9BF48();
      v139(v138);
      uint64_t v125 = type metadata accessor for TerminalElement.Interval(0LL);
      uint64_t v141 = sub_16BBC(v137, 1LL, v125);
      uint64_t v131 = v436;
      if (!v140)
      {
        uint64_t v189 = v434;
        TerminalElement.Interval.period.getter(v141);
        sub_175C0(v137, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v125 - 8) + 8LL));
        uint64_t v190 = type metadata accessor for TerminalElement.Period(0LL);
        sub_16BBC(v189, 1LL, v190);
        uint64_t v145 = v435;
        if (!v191)
        {
          v203 = &qword_D6848;
          uint64_t v204 = v189;
          goto LABEL_38;
        }

LABEL_16:
        sub_7EC4(v189, &qword_D6848);
        sub_3F88(v127, v145, (uint64_t *)&unk_D7A70);
        uint64_t v146 = sub_16BBC(v145, 1LL, v129);
        if (v140)
        {
          sub_9BDF0(v146, (uint64_t *)&unk_D7A70);
          uint64_t v147 = type metadata accessor for TerminalElement.Recurrence(0LL);
          sub_23050(v131, v148, v149, v147);
        }

        else
        {
          TerminalElement.DateTimeValue.recurrence.getter(v146);
          uint64_t v177 = sub_9BEC0();
          v178(v177);
          uint64_t v179 = type metadata accessor for TerminalElement.Recurrence(0LL);
          sub_16BBC(v131, 1LL, v179);
          if (!v180)
          {
            v203 = &qword_D6830;
            uint64_t v204 = v131;
            goto LABEL_38;
          }
        }

        sub_7EC4(v131, &qword_D6830);
        uint64_t v181 = v432;
        sub_3F88(v127, v432, (uint64_t *)&unk_D7A70);
        sub_16BBC(v181, 1LL, v129);
        if (v140)
        {
          v203 = (uint64_t *)&unk_D7A70;
          uint64_t v204 = v181;
        }

        else
        {
          sub_17944();
          TerminalElement.DateTimeValue.duration.getter(v182);
          uint64_t v183 = sub_9BEC0();
          uint64_t v184 = v125;
          v185(v183);
          uint64_t v186 = type metadata accessor for TerminalElement.Duration(0LL);
          uint64_t v188 = sub_16BBC(v184, 1LL, v186);
          if (!v187)
          {
            double v213 = COERCE_DOUBLE(TerminalElement.Duration.duration.getter(v188));
            uint64_t v215 = v214;
            uint64_t v216 = sub_175C0(v184, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v186 - 8) + 8LL));
            if ((v215 & 1) == 0 && v213 > 0.0)
            {
              sub_9BBDC(v216, v217, v218, v219, v220, v221, v222, v223, v401, (uint64_t)v402, v403, v404, v405);
              os_log_type_t v224 = sub_16C50();
              if (sub_16BA4(v224))
              {
                v225 = (_WORD *)sub_1EFA4();
                sub_16CE4(v225);
                sub_16B44( &dword_0,  *(os_log_s **)&v213,  (os_log_type_t)v186,  "Reforming qualified alarm nlv3 input to timers instead.",  (uint8_t *)v215);
                sub_16AA8(v215);
              }

              uint64_t v226 = v418;
              Transformer.init(transform:)(sub_9AEB0, 0LL, v444, v444);
              sub_17944();
              NamedParseTransformer.init(transformer:)(v226);
              uint64_t v227 = sub_9BF60();
              static FlowSearchResult.reform(transformer:exclude:)(v227);
              sub_16FD8();
              sub_16CC8(v186, *(uint64_t (**)(uint64_t, void))(v419 + 8));
              goto LABEL_40;
            }

LABEL_39:
            sub_72428();
            v206 = v205;
            sub_98520();

            sub_16FD8();
LABEL_40:
            sub_7EC4(v127, (uint64_t *)&unk_D7A70);
            v207 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
            uint64_t v208 = (uint64_t)v442;
            uint64_t v209 = v122;
LABEL_41:
            v207(v208, v209);
LABEL_42:
            uint64_t v210 = sub_9BD0C();
            uint64_t v211 = v4;
LABEL_43:
            uint64_t v212 = 0LL;
LABEL_44:
            sub_A40C(v211, v212, 1LL, v210);
            goto LABEL_45;
          }

          v203 = (uint64_t *)&unk_D7A50;
          uint64_t v204 = v184;
        }

  __break(1u);
  return result;
}

LABEL_38:
        sub_7EC4(v204, v203);
        goto LABEL_39;
      }

      sub_9BDF0(v141, (uint64_t *)&unk_D7A60);
    }

    uint64_t v189 = v434;
    uint64_t v142 = type metadata accessor for TerminalElement.Period(0LL);
    sub_23050(v189, v143, v144, v142);
    uint64_t v145 = v435;
    goto LABEL_16;
  }

  if ((_DWORD)v113 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_9BC3C();
    uint64_t v132 = *(void *)((char *)v112 + *(int *)(sub_26B0(&qword_D3768) + 48));
    uint64_t v133 = swift_retain(v132);
    v134 = (void *)Parse.ServerConversion.siriKitIntent.getter(v133);
    sub_98520();

    sub_16EBC(v132);
    uint64_t v135 = sub_9BD0C();
    sub_9BD54(v135);
    (*(void (**)(void *, uint64_t))(v440 + 8))(v112, v441);
    goto LABEL_45;
  }

  if ((_DWORD)v113 == enum case for Parse.directInvocation(_:))
  {
    sub_9BC3C();
    uint64_t v150 = v429;
    uint64_t v151 = v428;
    uint64_t v152 = v430;
    uint64_t v153 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(v429 + 32))(v428, v112, v430);
    uint64_t v154 = Parse.DirectInvocation.identifier.getter(v153);
    uint64_t v155 = v423;
    DirectInvocationUtils.Alarm.URI.init(rawValue:)(v154);
    uint64_t v156 = sub_16BBC(v155, 1LL, (uint64_t)v15);
    if (v140)
    {
      uint64_t v427 = v4;
      sub_9BDF0(v156, &qword_D7A40);
      uint64_t v157 = sub_9BF40(v421, v151);
      sub_9BBDC(v157, v158, v159, v160, v161, v162, v163, v164, v401, (uint64_t)v402, v403, v404, v405);
      sub_16D40();
      if (!sub_4AF34((os_log_s *)v15))
      {

        v287 = *(void (**)(uint64_t))(v150 + 8);
        uint64_t v288 = sub_9BF48();
        v287(v288);
        ((void (*)(uint64_t, uint64_t))v287)(v151, v152);
LABEL_90:
        uint64_t v210 = sub_9BD0C();
        uint64_t v211 = v427;
        uint64_t v212 = 1LL;
        goto LABEL_44;
      }

      v165 = (_DWORD *)sub_16AC4(12LL);
      uint64_t v166 = sub_16AC4(32LL);
      *(void *)&__int128 v447 = v166;
      _DWORD *v165 = 136315138;
      v167 = (void (*)(uint64_t, uint64_t))(v165 + 3);
      v444 = v165 + 1;
      uint64_t v168 = sub_9BE68();
      sub_9BF40(v168, v169);
      uint64_t v170 = sub_9BE48();
      uint64_t v172 = sub_9BD48(v170, v171);
      uint64_t v173 = sub_172D8(v172);
      sub_16F1C(v173, v174, (uint64_t)v444);
      sub_16EDC();
      sub_9BCF4();
      sub_9BC68(&dword_0, v175, v176, "Alarm domain received a direct invocation we don't support: %s");
      sub_16BB4(v166);
      sub_16AA8(v166);
      sub_16AA8((uint64_t)v165);
    }

    else
    {
      v228 = *(uint64_t (**)(char *, uint64_t, void *))(v424 + 32);
      v426 = v15;
      uint64_t v229 = v228(v425, v155, v15);
      sub_9BBDC(v229, v230, v231, v232, v233, v234, v235, v236, v401, (uint64_t)v402, v403, v404, v405);
      os_log_type_t v237 = sub_16B4C();
      if (sub_16ACC(v237))
      {
        v239 = (_WORD *)sub_1EFA4();
        sub_16BEC(v239);
        sub_16ADC(&dword_0, v240, v241, "Alarm domain: received known direct invocation");
        sub_16AA8(v150);
      }

      uint64_t v242 = v424;
      sub_9BCC0(v243, enum case for DirectInvocationUtils.Alarm.URI.stopAlarm(_:));
      uint64_t v244 = (uint64_t)v425;
      uint64_t v245 = sub_288D8((uint64_t)v425, v152);
      v246 = *(void (**)(uint64_t, uint64_t))(v242 + 8);
      uint64_t v247 = sub_9BE5C();
      if ((v245 & 1) != 0)
      {
        sub_996C0();
        sub_9BD68();
        sub_16FD8();
        v246(v244, v155);
        goto LABEL_55;
      }

      uint64_t v289 = Parse.DirectInvocation.userData.getter(v247);
      uint64_t v427 = v4;
      v444 = v246;
      if (v289)
      {
        uint64_t v245 = v289;
        uint64_t v290 = v411;
        uint64_t v291 = v410;
        uint64_t v292 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v411 + 104))( v410,  enum case for DirectInvocationUtils.Alarm.UserInfoKey.verb(_:),  v412);
        uint64_t v151 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v292);
        uint64_t v150 = v293;
        sub_1704C(v291, *(uint64_t (**)(uint64_t, uint64_t))(v290 + 8));
        sub_288F4(v151, v150, v245, &v447);
        swift_bridgeObjectRelease(v150);
        swift_bridgeObjectRelease(v245);
        if (v448)
        {
          swift_dynamicCast(&v445, &v447, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
          sub_9BEAC();
          if ((v294 & 1) != 0)
          {
            uint64_t v245 = v406;
            AlarmNLv4Constants.AlarmVerb.init(rawValue:)(v445);
            uint64_t v295 = v408;
            sub_16BBC(v245, 1LL, v408);
            if (!v140)
            {
              uint64_t v343 = sub_17620(v407, v245, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v409 + 32));
              sub_9BCC0(v343, enum case for DirectInvocationUtils.Alarm.URI.undo(_:));
              uint64_t v344 = (uint64_t)v425;
              uint64_t v345 = sub_9BF48();
              char v347 = sub_288D8(v345, v346);
              sub_9BE5C();
              if ((v347 & 1) != 0)
              {
                uint64_t v348 = v409;
                uint64_t v349 = v404;
                uint64_t v350 = v407;
                sub_17620(v404, v407, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v409 + 16));
                int v351 = sub_9BE3C(*(uint64_t (**)(uint64_t, uint64_t))(v348 + 88));
                uint64_t v352 = v295;
                if (v351 == enum case for AlarmNLv4Constants.AlarmVerb.create(_:))
                {
                  sub_9BDF8();
                  uint64_t v353 = sub_9BCA0();
                  type metadata accessor for RecreateDeletedAlarmsFlow(0LL);
                  sub_9BE10();
                  uint64_t v355 = sub_16D14(v354);
                  uint64_t v356 = sub_2C890(v353, v355);
                  sub_9BEE0(v356);
                  sub_9BAD8((unint64_t *)&unk_D7A90, type metadata accessor for RecreateDeletedAlarmsFlow);
                  sub_9BE00(v357);
                  sub_16FD8();
                  sub_9BEA0();
                  sub_17324();
                  sub_9BDC0();
                  uint64_t v359 = v350;
                }

                else
                {
                  if (v351 == enum case for AlarmNLv4Constants.AlarmVerb.delete(_:))
                  {
                    sub_9BDF8();
                    uint64_t v365 = sub_9BCA0();
                    type metadata accessor for UndoCreateAlarmFlow(0LL);
                    sub_9BE10();
                    v366 = type metadata accessor for UndoCreateAlarmFlow;
                    v368 = (void *)sub_16D14(v367);
                    v369 = sub_9B9DC(v365, v368);
                    sub_9BEE0((uint64_t)v369);
                    v370 = (unint64_t *)&unk_D7A88;
                  }

                  else
                  {
                    if (v351 != enum case for AlarmNLv4Constants.AlarmVerb.disable(_:)
                      && v351 != enum case for AlarmNLv4Constants.AlarmVerb.enable(_:))
                    {
                      uint64_t v398 = v407;
                      sub_9BE94();
                      v399 = *(void (**)(uint64_t, uint64_t))(v409 + 8);
                      v399(v398, v352);
                      sub_9BB30(v344);
                      sub_9BF7C(*(uint64_t (**)(uint64_t, void))(v150 + 8));
                      uint64_t v400 = sub_9BD0C();
                      sub_9BD54(v400);
                      v399(v349, v352);
                      goto LABEL_45;
                    }

                    sub_9BDF8();
                    uint64_t v391 = sub_9BCA0();
                    type metadata accessor for UndoChangeStatusFlow(0LL);
                    sub_9BE10();
                    v366 = type metadata accessor for UndoChangeStatusFlow;
                    v393 = (void *)sub_16D14(v392);
                    v394 = sub_446E4(v391, v393);
                    sub_9BEE0((uint64_t)v394);
                    v370 = (unint64_t *)&unk_D7A80;
                  }

                  sub_9BAD8(v370, v366);
                  sub_9BE00(v395);
                  sub_16FD8();
                  sub_9BEA0();
                  sub_17324();
                  sub_9BDC0();
                  uint64_t v359 = v407;
                }

                v358(v359, v295);
                sub_9BB30(v295);
                v207 = *(void (**)(uint64_t, uint64_t))(v344 + 8);
                goto LABEL_56;
              }

              uint64_t v360 = v409;
              uint64_t v361 = v405;
              (*(void (**)(uint64_t, void, uint64_t))(v409 + 104))( v405,  enum case for AlarmNLv4Constants.AlarmVerb.create(_:),  v295);
              uint64_t v362 = v407;
              uint64_t v363 = sub_288BC(v407, v361);
              sub_9BEFC();
              uint64_t v364 = v362;
              if ((v363 & 1) == 0)
              {
                uint64_t v371 = v403;
                uint64_t v372 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v360 + 16))(v403, v364, v295);
                sub_9BBDC(v372, v373, v374, v375, v376, v377, v378, v379, v401, (uint64_t)v402, v403, v404, v405);
                sub_9BEEC();
                if (sub_4AF34((os_log_s *)v363))
                {
                  v380 = (_DWORD *)sub_16AC4(12LL);
                  v443 = (void *)sub_16AC4(32LL);
                  *(void *)&__int128 v447 = v443;
                  _DWORD *v380 = 136315138;
                  v442 = v380 + 1;
                  uint64_t v381 = v405;
                  sub_1705C(v405, v371);
                  uint64_t v382 = String.init<A>(describing:)(v381, v295);
                  uint64_t v384 = sub_9BD48(v382, v383);
                  uint64_t v385 = sub_172D8(v384);
                  sub_16F1C(v385, v386, (uint64_t)v442);
                  sub_16EDC();
                  sub_9BE20(v371);
                  sub_9BC68(&dword_0, v387, v388, "Handling known direct invocation with verb %s");
                  uint64_t v389 = (uint64_t)v443;
                  sub_16BB4((uint64_t)v443);
                  sub_16AA8(v389);
                  sub_16AA8((uint64_t)v380);
                }

                else
                {
                  sub_9BE20(v371);
                }

                uint64_t v396 = v427;
                uint64_t v397 = v407;
                sub_9BE94();
                sub_9BE20(v397);
                sub_9BB30((uint64_t)v425);
                sub_9BF7C(*(uint64_t (**)(uint64_t, void))(v429 + 8));
                uint64_t v210 = sub_9BD0C();
                uint64_t v211 = v396;
                goto LABEL_43;
              }

              sub_99794();
              sub_9BD68();
              sub_16FD8();
              sub_9BEFC();
              sub_9BB30((uint64_t)v425);
LABEL_55:
              v207 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
LABEL_56:
              uint64_t v208 = v151;
              uint64_t v209 = v430;
              goto LABEL_41;
            }

            sub_7EC4(v245, &qword_D3788);
          }
        }

        else
        {
          sub_7EC4((uint64_t)&v447, (uint64_t *)&unk_D4860);
          sub_9BEAC();
        }
      }

      v319 = v413;
      uint64_t v320 = v430;
      uint64_t v321 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v150 + 16))(v413, v151, v430);
      sub_9BBDC(v321, v322, v323, v324, v325, v326, v327, v328, v401, (uint64_t)v402, v403, v404, v405);
      sub_16D40();
      if (!sub_4AF34((os_log_s *)v245))
      {

        v340 = *(void (**)(char *, uint64_t))(v150 + 8);
        v340(v319, v320);
        sub_9BB30((uint64_t)v425);
        v340((char *)v151, v320);
        goto LABEL_90;
      }

      v329 = (_DWORD *)sub_16AC4(12LL);
      uint64_t v330 = sub_16AC4(32LL);
      *(void *)&__int128 v447 = v330;
      _DWORD *v329 = 136315138;
      v167 = (void (*)(uint64_t, uint64_t))(v329 + 3);
      v443 = v329 + 1;
      uint64_t v331 = sub_9BE68();
      uint64_t v152 = v430;
      sub_9BF40(v331, v332);
      uint64_t v333 = sub_9BE48();
      uint64_t v335 = sub_9BD48(v333, v334);
      uint64_t v336 = sub_172D8(v335);
      sub_16F1C(v336, v337, (uint64_t)v443);
      sub_16EDC();
      sub_9BCF4();
      sub_9BC68(&dword_0, v338, v339, "Missing or incorrect value for 'verb' key on known directInvocation: %s");
      sub_16BB4(v330);
      sub_16AA8(v330);
      sub_16AA8((uint64_t)v329);

      sub_9BB30((uint64_t)v425);
    }

    v167(v428, v152);
    goto LABEL_90;
  }

  if ((_DWORD)v113 == enum case for Parse.NLv4IntentOnly(_:))
  {
    uint64_t v192 = sub_9BC3C();
    uint64_t v193 = *v112;
    sub_9BBDC(v192, v194, v195, v196, v197, v198, v199, v200, v401, (uint64_t)v402, v403, v404, v405);
    os_log_type_t v201 = sub_16C50();
    if (sub_16BA4(v201))
    {
      v202 = (_WORD *)sub_1EFA4();
      sub_16CE4(v202);
      sub_16B44(&dword_0, v89, (os_log_type_t)v2, "Alarm domain: Hitting SiriX code path", v109);
      sub_16AA8((uint64_t)v109);
    }

    sub_98954();
    swift_unknownObjectRelease(v193);
    goto LABEL_42;
  }

  if ((_DWORD)v113 == enum case for Parse.uso(_:))
  {
    sub_9BC3C();
    v248 = v112;
    uint64_t v249 = v416;
    uint64_t v250 = v415;
    uint64_t v251 = v417;
    uint64_t v252 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(v416 + 32))(v415, v248, v417);
    sub_9BBDC(v252, v253, v254, v255, v256, v257, v258, v259, v401, (uint64_t)v402, v403, v404, v405);
    os_log_type_t v260 = sub_16B4C();
    if (sub_16ACC(v260))
    {
      v261 = (_WORD *)sub_1EFA4();
      sub_16BEC(v261);
      sub_16ADC(&dword_0, v262, v263, "Alarm domain: Hitting SiriX code path (receiving UsoParse)");
      sub_16AA8(v2);
    }

    sub_17944();
    uint64_t v264 = USOParse.userParse.getter();
    v265 = (char *)Siri_Nlu_External_UserParse.firstUsoTask.getter(v264);
    uint64_t v266 = sub_16CC8(v2, *(uint64_t (**)(uint64_t, void))(v414 + 8));
    if (v265)
    {
      type metadata accessor for SiriEnvironment(0LL);
      static SiriEnvironment.default.getter();
      uint64_t v274 = SiriEnvironment.currentDevice.getter();
      sub_17324();
      uint64_t v275 = sub_98EF0(v265);
      uint64_t v276 = sub_16FFC();
      if ((v275 & 1) == 0)
      {
        uint64_t v308 = sub_99114((uint64_t)v265);
        if (!v308)
        {
          sub_17944();
          sub_256B8(v341);
          swift_retain(v265);
          sub_991B4();
          sub_16EBC((uint64_t)v265);
          sub_9BDC0();
          sub_16CC8(v274, v342);
          goto LABEL_84;
        }

        uint64_t v316 = v308;
        sub_9BBDC(v308, v309, v310, v311, v312, v313, v314, v315, v401, (uint64_t)v402, v403, v404, v405);
        os_log_type_t v317 = sub_16C50();
        if (sub_16C28(v317))
        {
          v318 = (uint8_t *)sub_1EFA4();
          *(_WORD *)v318 = 0;
          sub_16B44( &dword_0,  (os_log_s *)v275,  (os_log_type_t)v109,  "This is not supported nvl4 intent, use unsupportedFlow.",  v318);
          sub_16AA8((uint64_t)v318);
        }

        static FlowSearchResult.flow(_:)(v316);
        sub_16FD8();
        v307 = (char *)v316;
LABEL_83:
        swift_release(v307);
LABEL_84:
        (*(void (**)(uint64_t, uint64_t))(v249 + 8))(v250, v251);
        goto LABEL_42;
      }

      sub_9BBDC(v276, v277, v278, v279, v280, v281, v282, v283, v401, (uint64_t)v402, v403, v404, v405);
      os_log_type_t v284 = sub_16C50();
      if (sub_16BA4(v284))
      {
        v285 = (_WORD *)sub_1EFA4();
        sub_16CE4(v285);
        sub_16B44(&dword_0, (os_log_s *)v275, (os_log_type_t)v274, "tvOS shouldRejectTaskForATV() returned true!", v109);
        sub_16AA8((uint64_t)v109);
      }

      static FlowSearchResult.noFlow.getter(v286);
    }

    else
    {
      sub_9BBDC(v266, v267, v268, v269, v270, v271, v272, v273, v401, (uint64_t)v402, v403, v404, v405);
      os_log_type_t v303 = sub_16D40();
      if (sub_16ACC(v303))
      {
        v304 = (_WORD *)sub_1EFA4();
        sub_16BEC(v304);
        sub_16ADC(&dword_0, v305, v306, "UsoTask is empty! Calling searchAlarmFlow anyways");
        sub_16AA8(v2);
      }

      sub_98C74();
      sub_9BD68();
    }

    v307 = v265;
    goto LABEL_83;
  }

  sub_9BBDC(v113, v114, v115, v116, v117, v118, v119, v120, v401, (uint64_t)v402, v403, v404, v405);
  os_log_type_t v296 = sub_16D40();
  if (sub_16ACC(v296))
  {
    v297 = (_WORD *)sub_1EFA4();
    sub_16BEC(v297);
    sub_16ADC(&dword_0, v298, v299, "FlowPlugin is unable to consume the alarm intent. Exiting the flow.");
    sub_16AA8(v2);
  }

  uint64_t v300 = sub_9BD0C();
  sub_23050(v4, v301, v302, v300);
  sub_9BD3C();
LABEL_45:
  sub_16CB0();
}

    __break(1u);
LABEL_39:
    if (v2 < 0) {
      uint64_t v25 = v2;
    }
    else {
      uint64_t v25 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

      [v5 setAlarmSearchType:4];
      goto LABEL_14;
    }

    _s20HandleIntentStrategyVwxx_1(v123);
  }

  uso_NoEntity = (char *)sub_16D60();
  uint64_t v106 = static os_log_type_t.error.getter();
  if (sub_16D30(v106))
  {
    uint64_t v107 = (_WORD *)sub_1EFA4();
    sub_45838(v107);
    sub_56198(&dword_0, v108, v109, "NLv4TranslationParse: Dialog act is not a find alarm task, cannot support input");
    sub_16AA8((uint64_t)v1);
  }

  sub_56248(v110, "setAlarmSearchType:");
LABEL_43:
  sub_19594((uint64_t)v124, (uint64_t *)&unk_D4860);
  uint64_t v111 = v5;
  sub_16D60();
  v112 = sub_16C50();
  if (sub_16D30(v112))
  {
    uint64_t v113 = (_DWORD *)sub_16AC4(12LL);
    uint64_t v114 = (void *)sub_16AC4(8LL);
    *uint64_t v113 = 138412290;
    v124[0] = v111;
    uint64_t v115 = v111;
    sub_56268((uint64_t)v124);
    *uint64_t v114 = v111;

    sub_561F0(&dword_0, v116, v117, "Inited SearchAlarmIntent: %@");
    sub_26B0(&qword_D3858);
    sub_16BB4((uint64_t)v114);
    sub_16AA8((uint64_t)v114);
    sub_16AA8((uint64_t)v113);
  }

  else
  {
  }

  sub_16FD8();
  sub_19594((uint64_t)v125, (uint64_t *)&unk_D4860);
  return v111;
}

uint64_t sub_3D10(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v9 = sub_3DD8(v6, v7, v8, 1, a1, a2);
  uint64_t v10 = v15[0];
  if (v9)
  {
    uint64_t v11 = v9;
    ObjectType = (void *)swift_getObjectType(v9);
    v15[0] = v11;
    uint64_t v12 = *a3;
    if (*a3)
    {
      sub_3F2C((uint64_t)v15, *a3);
      *a3 = v12 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v15[0] = a1;
    v15[1] = a2;
    uint64_t v13 = *a3;
    if (*a3)
    {
      sub_3F2C((uint64_t)v15, *a3);
      *a3 = v13 + 32;
    }

    sub_45B94();
  }

  _s20HandleIntentStrategyVwxx_1(v15);
  return v10;
}

void *sub_3DD8(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_43D30((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_42F4(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

uint64_t sub_3F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t _s20HandleIntentStrategyVwxx_1(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void sub_3F88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_26B0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_17B50();
}

char *sub_3FC8()
{
  uint64_t v0 = sub_26B0(&qword_D6320);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v31 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  v28 = (char *)&v28 - v8;
  uint64_t v9 = dispatch thunk of UsoEntity_common_Alarm.attributes.getter(v7);
  if (!v9) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v10 = v9;
  if (!((unint64_t)v9 >> 62))
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v9);
    if (v11) {
      goto LABEL_4;
    }
LABEL_29:
    os_log_type_t v15 = (char *)&_swiftEmptyArrayStorage;
LABEL_30:
    swift_bridgeObjectRelease_n(v10, 2LL);
    return v15;
  }

  if (v9 >= 0) {
    uint64_t v27 = v9 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v27 = v9;
  }
  swift_bridgeObjectRetain(v9);
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v27);
  if (!v11) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t result = (char *)type metadata accessor for UsoEntity_appleAlarm_AlarmAttribute(0LL);
  if (v11 >= 1)
  {
    uint64_t v13 = result;
    uint64_t v14 = 0LL;
    unint64_t v29 = v10 & 0xC000000000000001LL;
    os_log_type_t v15 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v30 = v10;
    do
    {
      if (v29)
      {
        uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v10);
      }

      else
      {
        uint64_t v16 = *(void *)(v10 + 8 * v14 + 32);
        swift_retain(v16);
      }

      uint64_t v17 = dispatch thunk of CodeGenListEntry.entry.getter(&v32);
      uint64_t v18 = v32;
      if (v32)
      {
        uint64_t v19 = CodeGenBase.entity.getter(v17);
        swift_release(v18);
      }

      else
      {
        uint64_t v19 = 0LL;
      }

      static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&v33, v19, v13, v13);
      uint64_t v20 = swift_release(v19);
      uint64_t v21 = v33;
      if (v33)
      {
        dispatch thunk of UsoEntity_appleAlarm_AlarmAttribute.definedValue.getter(v20);
        swift_release(v16);
        uint64_t v22 = v21;
      }

      else
      {
        sub_A40C((uint64_t)v2, 1LL, 1LL, v3);
        uint64_t v22 = v16;
      }

      swift_release(v22);
      if (sub_16880((uint64_t)v2, 1LL, v3) == 1)
      {
        sub_7EC4((uint64_t)v2, &qword_D6320);
      }

      else
      {
        uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
        uint64_t v24 = v28;
        v23(v28, v2, v3);
        v23(v31, v24, v3);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
          os_log_type_t v15 = (char *)sub_6C750( 0,  *((void *)v15 + 2) + 1LL,  1,  (uint64_t)v15,  &qword_D6328,  (void (*)(void))&type metadata accessor for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues);
        }
        unint64_t v26 = *((void *)v15 + 2);
        unint64_t v25 = *((void *)v15 + 3);
        if (v26 >= v25 >> 1) {
          os_log_type_t v15 = (char *)sub_6C750( v25 > 1,  v26 + 1,  1,  (uint64_t)v15,  &qword_D6328,  (void (*)(void))&type metadata accessor for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues);
        }
        *((void *)v15 + 2) = v26 + 1;
        v23( &v15[((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
             + *(void *)(v4 + 72) * v26],
          v31,
          v3);
      }

      uint64_t v10 = v30;
      ++v14;
    }

    while (v11 != v14);
    goto LABEL_30;
  }

  __break(1u);
  return result;
}

void *sub_42F4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_4388(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_43E58(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_43E58((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_4388(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  uint64_t v5 = sub_43DF4(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  2,  1122LL,  0);
LABEL_15:
  __break(1u);
  return result;
}

void *sub_44FC(void *a1, char a2)
{
  uint64_t AlarmIntent = type metadata accessor for CreateAlarmIntent(0LL);
  uint64_t AlarmIntentResponse = type metadata accessor for CreateAlarmIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(AlarmIntent, AlarmIntentResponse);
  if (qword_D3178 != -1) {
    swift_once(&qword_D3178, sub_82958);
  }
  uint64_t v6 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)( qword_D84A8,  AlarmIntent,  AlarmIntentResponse);
  uint64_t v8 = v7;
  uint64_t v9 = sub_26B0(&qword_D7950);
  uint64_t v10 = RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v6, v8, v9);
  sub_19D68(v10, (uint64_t)v22);
  uint64_t v11 = _s18NeedsValueStrategyCMa();
  uint64_t v12 = swift_allocObject(v11, 56LL, 7LL);
  sub_46FC(v22, v12 + 16);
  *(void *)&v22[0] = v12;
  unint64_t v13 = sub_95CD4();
  uint64_t v14 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(v22, v11, v13);
  uint64_t v15 = RCHChildFlowProducersAsync.needsValueFlowProducer.setter(v14);
  sub_19D68(v15, (uint64_t)v23);
  unint64_t v16 = sub_4714();
  uint64_t v17 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)( v23,  &_s24UnsupportedValueStrategyVN_2,  v16);
  uint64_t v18 = RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v17);
  sub_19D68(v18, (uint64_t)v22 + 8);
  LOBYTE(v22[0]) = a2 & 1;
  unint64_t v19 = sub_95D14();
  uint64_t v20 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)( v22,  &_s20HandleIntentStrategyVN_0,  v19);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v20);
  swift_release(v12);
  _s20HandleIntentStrategyVwxx_1(a1);
  sub_47F8((uint64_t)v22);
  return sub_4834(v23);
}

uint64_t sub_4698(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t _s18NeedsValueStrategyCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCO15AlarmFlowPlugin11CreateAlarm18NeedsValueStrategy);
}

uint64_t sub_46FC(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_4714()
{
  unint64_t result = qword_D7960;
  if (!qword_D7960)
  {
    unint64_t result = swift_getWitnessTable(&unk_A614C, &_s24UnsupportedValueStrategyVN_2);
    atomic_store(result, (unint64_t *)&qword_D7960);
  }

  return result;
}

uint64_t _s20HandleIntentStrategyVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

__n128 _s20HandleIntentStrategyVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s20HandleIntentStrategyVwcp_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

__n128 _s20HandleIntentStrategyVwtk_0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_47F8(uint64_t a1)
{
  return a1;
}

uint64_t _s20HandleIntentStrategyVwxx_0(uint64_t a1)
{
  return _s20HandleIntentStrategyVwxx_1((void *)(a1 + 8));
}

void *sub_4834(void *a1)
{
  return a1;
}

uint64_t sub_486C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for HALAlarmDeviceContext(0LL);
  if (sub_16880((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_26B0(&qword_D37D0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    sub_A40C((uint64_t)v8, 0LL, 1LL, v10);
  }

  return a1;
}

void sub_4930(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_16974(a2);
    atomic_store(sub_755D8(v3), a1);
  }

  sub_17B50();
}

uint64_t sub_4964(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for HALAlarmDeviceContext(0LL);
  uint64_t result = sub_16880(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

uint64_t sub_49D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for Input(0LL);
  uint64_t v61 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_17390();
  uint64_t v59 = v9 - v8;
  uint64_t v10 = sub_26B0(&qword_D37A8);
  __chkstk_darwin(v10);
  sub_17390();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for Parse(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_17390();
  uint64_t v18 = v17 - v16;
  if (qword_D3218 != -1) {
    swift_once(&qword_D3218, sub_9C4D4);
  }
  uint64_t v60 = v7;
  uint64_t v19 = sub_16C80();
  sub_26F0(v19, (uint64_t)qword_D7C60);
  uint64_t v20 = (os_log_s *)sub_16D50();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v57 = v15;
    uint64_t v22 = v13;
    uint64_t v23 = a2;
    uint64_t v24 = a1;
    uint64_t v25 = v14;
    uint64_t v26 = v4;
    uint64_t v27 = (uint8_t *)sub_16AC4(2LL);
    *(_WORD *)uint64_t v27 = 0;
    sub_16B44(&dword_0, v20, v21, "Base AlarmIntents.FlowStrategy.actionForInput() called..", v27);
    uint64_t v28 = (uint64_t)v27;
    uint64_t v4 = v26;
    uint64_t v14 = v25;
    a1 = v24;
    a2 = v23;
    uint64_t v13 = v22;
    sub_16AA8(v28);
  }

  Input.parse.getter(v29);
  uint64_t v30 = *(void *)(a2 + 16);
  uint64_t v31 = v4 + *(int *)(a2 + 36);
  sub_137B0();
  char v33 = v32;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
  if ((v33 & 1) != 0)
  {
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v59, a1, v60);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v34, v35, v36, v37, v38, v39, v40, v41);
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = sub_16AC4(22LL);
      uint64_t v58 = sub_16AC4(64LL);
      uint64_t v63 = v30;
      v64[0] = v58;
      *(_DWORD *)uint64_t v44 = 136315394;
      uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v30);
      uint64_t v46 = String.init<A>(describing:)(&v63, MetatypeMetadata);
      uint64_t v63 = sub_3D10(v46, v47, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v44 + 4, v44 + 12);
      uint64_t v48 = sub_16D58();
      *(_WORD *)(v44 + 12) = 2080;
      Input.parse.getter(v48);
      uint64_t v49 = String.init<A>(describing:)(v18, v14);
      unint64_t v51 = v50;
      uint64_t v63 = sub_3D10(v49, v50, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v44 + 14, v44 + 22);
      swift_bridgeObjectRelease(v51);
      sub_9D060(*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
      sub_9D084( &dword_0,  v42,  v43,  "Current intent is incompatible with new input in makeIntentExecutionBehavior. Current Intent: %s, parse: %s");
      swift_arrayDestroy(v58, 2LL);
      sub_16AA8(v58);
      sub_16AA8(v44);
    }

    else
    {
      sub_9D060(*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
    }

    return static ActionForInput.ignore()();
  }

  else
  {
    uint64_t v52 = type metadata accessor for DecideAction.PromptExpectation(0LL);
    sub_A40C(v13, 1LL, 1LL, v52);
    sub_107C0( a1,  v30,  v31,  0LL,  v13,  v30,  v53,  v54,  v56,  v57,  v59,  v60,  v61,  a3,  v63,  v64[0],  v64[1],  v64[2],  v64[3],  v64[4]);
    return sub_9CFEC(v13);
  }
}

uint64_t sub_4D80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_26B0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_4DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0((uint64_t *)&unk_D4860);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_4E0C(uint64_t a1)
{
  uint64_t v3 = sub_26B0(&qword_D37D8);
  __chkstk_darwin(v3);
  sub_177D8();
  uint64_t v6 = v4 - v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v90 - v8;
  id v10 = [sub_56224() init];
  uint64_t v11 = qword_D30C0;
  id v12 = v10;
  if (v11 != -1) {
    swift_once(&qword_D30C0, sub_54140);
  }
  uint64_t v13 = sub_16C80();
  sub_26F0(v13, (uint64_t)qword_D5E20);
  uint64_t v14 = (os_log_s *)sub_16D50();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (sub_16ACC(v15))
  {
    uint64_t v16 = (uint8_t *)sub_1EFA4();
    *(_WORD *)uint64_t v16 = 0;
    sub_16B44(&dword_0, v14, (os_log_type_t)v1, "Making CreateAlarmIntent...", v16);
    sub_16AA8((uint64_t)v16);
  }

  uint64_t v17 = swift_retain(a1);
  static UsoTask_CodegenConverter.convert(task:)(v98, v17);
  uint64_t v18 = sub_17B94();
  uint64_t v20 = sub_561D0(v18, v19, (uint64_t *)&unk_D4860);
  if (v97)
  {
    uint64_t common_Alarm = type metadata accessor for UsoTask_create_common_Alarm(0LL);
    uint64_t v23 = sub_561C0(common_Alarm, v22, (uint64_t)&type metadata for Any + 8, common_Alarm);
    if ((v23 & 1) != 0)
    {
      uint64_t v25 = swift_retain(v95);
      dispatch thunk of Uso_VerbTemplate_Target.target.getter(v96, v25);
      sub_16FD8();
      uint64_t v26 = v96[0];
      if (v96[0])
      {
        uint64_t v27 = sub_562EC();
        uint64_t v28 = CodeGenBase.entity.getter(v27);
        sub_4AF44();
      }

      else
      {
        uint64_t v28 = 0LL;
      }

      LOBYTE(v1) = SiriReferenceResolutionResolver.hasReference(usoEntity:)(v28);
      uint64_t v48 = swift_release(v28);
      if ((v1 & 1) != 0)
      {
        uint64_t v1 = SiriReferenceResolutionResolver.getAlarmEntityFromDateTime()(v48);
        sub_16FD8();
        if (v1)
        {
          sub_4AF44();
          uint64_t v26 = v1;
LABEL_33:
          uint64_t v94 = a1;
          swift_retain_n(v26, 3LL);
          uint64_t v49 = (os_log_s *)sub_28734();
          os_log_type_t v50 = static os_log_type_t.default.getter();
          BOOL v51 = os_log_type_enabled(v49, v50);
          uint64_t v93 = v6;
          if (v51)
          {
            uint64_t v52 = sub_16AC4(12LL);
            id v92 = v12;
            uint64_t v53 = (uint8_t *)v52;
            uint64_t v54 = sub_16AC4(32LL);
            v96[0] = v54;
            *(_DWORD *)uint64_t v53 = 136315138;
            uint64_t v90 = v53 + 4;
            uint64_t v55 = dispatch thunk of UsoEntity_common_Alarm.endDateTime.getter(v54);
            uint64_t v95 = v55;
            uint64_t v56 = sub_26B0(&qword_D5E40);
            uint64_t v57 = Optional.debugDescription.getter(v56);
            uint64_t v91 = v9;
            unint64_t v59 = v58;
            swift_release(v55);
            uint64_t v95 = sub_3D10(v57, v59, v96);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v90, v53 + 12);
            sub_5625C();
            uint64_t v9 = v91;
            swift_bridgeObjectRelease(v59);
            sub_16BD0(&dword_0, v49, v50, "TARGET=> %s", v53);
            sub_16BB4(v54);
            sub_16AA8(v54);
            uint64_t v60 = (uint64_t)v53;
            id v12 = v92;
            sub_16AA8(v60);
          }

          else
          {

            sub_5625C();
          }

          uint64_t v61 = sub_54B8();
          uint64_t v62 = v94;
          if (v63)
          {
            NSString v64 = String._bridgeToObjectiveC()();
            uint64_t v61 = sub_16C48();
          }

          else
          {
            NSString v64 = 0LL;
          }

          sub_1718C(v61, "setLabel:");

          if (sub_562D0()
            && (uint64_t v65 = (void *)DateTime.asTimePoint(shouldUseInferredMeridiem:insertToEndTime:)(1, 0), sub_17324(), v65))
          {
            id v66 = [v65 startDateComponents];

            if (v66)
            {
              uint64_t v67 = v93;
              static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v66);

              uint64_t v68 = sub_2303C();
              uint64_t v69 = v67;
              uint64_t v70 = 0LL;
            }

            else
            {
              uint64_t v68 = sub_2303C();
              uint64_t v67 = v93;
              uint64_t v69 = v93;
              uint64_t v70 = 1LL;
            }

            sub_A40C(v69, v70, 1LL, v68);
            sub_5AA0(v67, (uint64_t)v9);
            sub_2303C();
            Class isa = 0LL;
            if (sub_16880((uint64_t)v9, 1LL, v68) != 1)
            {
              Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
              (*(void (**)(char *, uint64_t))(*(void *)(v68 - 8) + 8LL))(v9, v68);
            }
          }

          else
          {
            uint64_t v71 = sub_2303C();
            sub_A40C((uint64_t)v9, 1LL, 1LL, v71);
            Class isa = 0LL;
          }

          [v12 setTime:isa];

          uint64_t v78 = (void *)UsoEntity_common_Alarm.relativeOffsetInMinutes.getter();
          sub_1718C((uint64_t)v78, "setRelativeOffsetInMinutes:");

          sub_5AE8( v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  (uint64_t)v90,  (uint64_t)v91,  (uint64_t)v92,  v93,  v94,  v95,  v96[0],  v96[1],  v96[2],  v97,  v98[0],  v98[1],  v98[2],  v98[3]);
          sub_22EF0(v87, v12);

          sub_4AF44();
          swift_release(v62);
          uint64_t v88 = sub_562DC();
          uint64_t v89 = sub_561DC(v88);
          sub_562A4(v89, (uint64_t *)&unk_D4860);
          sub_4AF44();
          goto LABEL_54;
        }
      }

      else
      {
        sub_16FD8();
      }

      goto LABEL_32;
    }
  }

  else
  {
    uint64_t v23 = sub_56234(v20, (uint64_t *)&unk_D4860);
  }

  uint64_t v29 = sub_561D0(v23, v24, (uint64_t *)&unk_D4860);
  if (v97)
  {
    uint64_t v30 = sub_562E4();
    uint64_t v32 = sub_561C0(v30, v31, (uint64_t)&type metadata for Any + 8, v30);
    if ((v32 & 1) != 0)
    {
      uint64_t v34 = v95;
      sub_562EC();
      sub_5623C();
      uint64_t v35 = sub_4AF44();
      LOBYTE(v1) = v96[0];
      if (v96[0])
      {
        uint64_t v36 = dispatch thunk of UsoEntity_common_Alarm.endDateTime.getter(v35);
        sub_17324();
        sub_16FD8();
        if (v36) {
          goto LABEL_17;
        }
      }

      uint64_t v37 = sub_5623C();
      LOBYTE(v1) = v96[0];
      if (v96[0])
      {
        uint64_t v38 = dispatch thunk of UsoEntity_common_Alarm.recurringDateTime.getter(v37);
        sub_17324();
        if (v38)
        {
          sub_16FD8();
LABEL_17:
          sub_562EC();
          sub_5623C();
          sub_5625C();
          uint64_t v26 = v96[0];
LABEL_32:
          if (v26) {
            goto LABEL_33;
          }

          goto LABEL_47;
        }
      }

      uint64_t v42 = v34;
LABEL_46:
      swift_release(v42);
LABEL_47:
      uint64_t v73 = (os_log_s *)sub_28734();
      os_log_type_t v74 = static os_log_type_t.default.getter();
      if (sub_16ACC(v74))
      {
        uint64_t v75 = (uint8_t *)sub_1EFA4();
        *(_WORD *)uint64_t v75 = 0;
        sub_16B44(&dword_0, v73, (os_log_type_t)v1, "createAlarmTask has no target, should prompt for time.", v75);
        sub_16AA8((uint64_t)v75);
      }

      sub_17B94();
      uint64_t v76 = sub_562DC();
      uint64_t v77 = sub_561DC(v76);
      sub_562A4(v77, (uint64_t *)&unk_D4860);
      goto LABEL_54;
    }
  }

  else
  {
    uint64_t v32 = sub_56234(v29, (uint64_t *)&unk_D4860);
  }

  sub_561D0(v32, v33, (uint64_t *)&unk_D4860);
  if (v97)
  {
    uint64_t v39 = type metadata accessor for UsoTask_noVerb_uso_NoEntity(0LL);
    if ((sub_561C0(v39, v40, (uint64_t)&type metadata for Any + 8, v39) & 1) != 0)
    {
      uint64_t v41 = v95;

      uint64_t v42 = v41;
      goto LABEL_46;
    }
  }

  else
  {

    sub_56234(v43, (uint64_t *)&unk_D4860);
  }

  sub_28734();
  os_log_type_t v44 = sub_16D40();
  if (sub_16ACC(v44))
  {
    uint64_t v45 = (uint8_t *)sub_1EFA4();
    *(_WORD *)uint64_t v45 = 0;
    sub_16B44( &dword_0,  (os_log_s *)&type metadata for Any,  (os_log_type_t)v1,  "NLv4TranslationParse: Dialog act is not an UsoTask_create_common_Alarm",  v45);
    sub_16AA8((uint64_t)v45);
  }

  sub_17B94();

  uint64_t v46 = sub_562DC();
  uint64_t v47 = sub_561DC(v46);
  sub_562A4(v47, (uint64_t *)&unk_D4860);
LABEL_54:
  sub_16CB0();
}

uint64_t sub_54B8()
{
  uint64_t v45 = v2;
  uint64_t v46 = v3;
  uint64_t v4 = type metadata accessor for TemplatingText(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4);
  sub_16B30();
  uint64_t v37 = v5;
  sub_26B0(&qword_D40E8);
  sub_215E4();
  __chkstk_darwin(v6);
  sub_16B30();
  uint64_t v41 = v7;
  uint64_t v8 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  __chkstk_darwin(v8);
  sub_16B30();
  uint64_t v40 = v9;
  type metadata accessor for CATOption(0LL);
  sub_215E4();
  __chkstk_darwin(v10);
  sub_6D268();
  uint64_t v44 = sub_26B0(&qword_D5338);
  sub_215E4();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = ((uint64_t (*)(void))type metadata accessor for AppInstallUtil.Domain)(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_4AF90();
  uint64_t v16 = ((uint64_t (*)(void))type metadata accessor for AppInstallUtil)(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = ((uint64_t (*)(uint64_t))dispatch thunk of UsoEntity_common_Alarm.name.getter)(v18);
  if (v22)
  {
    unint64_t v23 = v22;
    uint64_t v24 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000LL) == 0) {
      uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
    }
    if (v24)
    {
      uint64_t countAndFlagsBits = String.labelCapitalization()()._countAndFlagsBits;
      swift_bridgeObjectRelease(v23);
      return countAndFlagsBits;
    }

    swift_bridgeObjectRelease(v22);
  }

  if ((sub_6B8EC() & 1) != 0)
  {
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))( v0,  enum case for AppInstallUtil.Domain.sleep(_:),  v14);
    uint64_t v26 = ((uint64_t (*)(uint64_t))AppInstallUtil.init(domain:))(v0);
    char v27 = ((uint64_t (*)(uint64_t))AppInstallUtil.isAppInstalled.getter)(v26);
    sub_172C8((uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
    if ((v27 & 1) == 0)
    {
      type metadata accessor for AlarmBaseCATs_Sync(0LL);
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)(v1, 0LL);
      sub_4B0C8();
      sub_17324();
      if (((uint64_t (*)(char *, uint64_t))swift_getEnumCaseMultiPayload)(v13, v44) == 1)
      {
        uint64_t v28 = &qword_D5338;
        uint64_t v29 = (uint64_t)v13;
      }

      else
      {
        uint64_t v30 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v40, v13, v43);
        uint64_t v31 = ((uint64_t (*)(uint64_t))TemplatingResult.sections.getter)(v30);
        uint64_t v32 = v41;
        sub_38F88(v31, v41);
        sub_16D58();
        uint64_t v33 = ((uint64_t (*)(void))type metadata accessor for TemplatingSection)(0LL);
        if (sub_16880(v32, 1LL, v33) != 1)
        {
          uint64_t v35 = v37;
          ((void (*)(void))TemplatingSection.content.getter)();
          uint64_t v36 = sub_172C8(v32, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8LL));
          uint64_t countAndFlagsBits = ((uint64_t (*)(uint64_t))TemplatingText.text.getter)(v36);
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v35, v39);
          sub_6D208();
          return countAndFlagsBits;
        }

        sub_6D208();
        uint64_t v28 = &qword_D40E8;
        uint64_t v29 = v32;
      }

      sub_7EC4(v29, v28);
    }
  }

  return 0LL;
}

#error "5988: call analysis failed (funcsize=141)"
void sub_5A34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v3 = sub_45B00(a1, a2, a3);
  sub_45CEC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_17B50();
}

void sub_5A60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_26B0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  sub_17B50();
}

uint64_t sub_5AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D37D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_5AE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  if (dispatch thunk of UsoEntity_common_Alarm.recurringDateTime.getter())
  {
    uint64_t v25 = sub_6D2AC();
    sub_17324();
  }

  else
  {
    uint64_t v25 = 0LL;
  }

  if (static DateTimeInferenceUtils.inferDateTime(from:anchorDate:)(v25, 0LL))
  {
    Class isa = DateTime.asDateComponentsRange()().super.isa;
    uint64_t v27 = (uint64_t)INDateComponentsRange.alarmRepeatSchedule.getter();

    if ((unint64_t)v27 >> 62)
    {
      if (v27 < 0) {
        uint64_t v46 = v27;
      }
      else {
        uint64_t v46 = v27 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v27);
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v46);
      sub_16C48();
    }

    else
    {
      uint64_t v28 = *(void *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFF8LL));
    }

    sub_16C48();
    if (v28)
    {
      Class v29 = DateTime.asDateComponentsRange()().super.isa;
      INDateComponentsRange.alarmRepeatSchedule.getter();
      sub_16FFC();
    }

    else
    {
      sub_5084C();
      sub_16FFC();
    }
  }

  else
  {
    if (qword_D30E0 != -1) {
      swift_once(&qword_D30E0, sub_6B8A4);
    }
    uint64_t v30 = sub_16C80();
    uint64_t v31 = sub_6D0C8(v30, (uint64_t)qword_D62F8);
    Logger.logObject.getter(v31, v32, v33, v34, v35, v36, v37, v38);
    os_log_type_t v39 = sub_16C50();
    if (os_log_type_enabled(v22, v39))
    {
      uint64_t v40 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v41 = sub_16AC4(32LL);
      a9 = v25;
      a10 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_retain(v25);
      uint64_t v42 = sub_26B0(&qword_D6310);
      uint64_t v43 = String.init<A>(describing:)(&a9, v42);
      unint64_t v45 = v44;
      a9 = sub_3D10(v43, v44, &a10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v40 + 4, v40 + 12);
      sub_1D750();
      swift_bridgeObjectRelease(v45);
      sub_16BD0(&dword_0, v22, v39, "Can NOT get recurringTime from recurringDateTime: %s", v40);
      sub_16BB4(v41);
      sub_16AA8(v41);
      sub_16AA8((uint64_t)v40);
    }

    else
    {

      sub_1D750();
    }
  }

  sub_16FD8();
  sub_6D0F4();
}

uint64_t sub_5D0C(uint64_t a1)
{
  uint64_t v4 = sub_1B5CC();
  if (!v1) {
    uint64_t v4 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(v4);
}

uint64_t sub_5D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_D7D3C);
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_5D0C;
  return sub_9C614(a1, v7, a3);
}

uint64_t sub_5DA4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t sub_5DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_D7D44);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_5DA4;
  return sub_9C51C(a1, a2, a3);
}

unint64_t sub_5E3C()
{
  unint64_t result = qword_D37F0;
  if (!qword_D37F0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_D37F0);
  }

  return result;
}

uint64_t sub_5E78(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_5EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_5F2C;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_5F30(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D5EF4);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24DC4;
  return sub_231D4(a1, a2);
}

uint64_t sub_5F84(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D5EDC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_5F2C;
  return sub_5FE4(a1, a2);
}

uint64_t sub_5FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D5EE4);
  *(void *)(v2 + 32) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_584C4;
  return sub_5675C(a1, a2);
}

void sub_6044()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_17390();
  uint64_t v6 = v5 - v4;
  NLContextUpdate.init()();
  unint64_t v30 = (unint64_t)&_swiftEmptyArrayStorage;
  if (!((unint64_t)v1 >> 62))
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
    sub_7BFBC();
    if (v7) {
      goto LABEL_3;
    }
LABEL_18:
    sub_45BCC();
    uint64_t v19 = &_swiftEmptyArrayStorage;
LABEL_19:
    uint64_t v21 = NLContextUpdate.applicationContextObjects.setter(v19);
    uint64_t v22 = UUID.init()(v21);
    uint64_t v23 = UUID.uuidString.getter(v22);
    uint64_t v25 = v24;
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
    __chkstk_darwin(v26);
    *(&v28 - 2) = v23;
    *(&v28 - 1) = v25;
    uint64_t v27 = sub_7BFBC();
    sub_79830(v27, (void (*)(uint64_t, id))sub_7BDA0);
    sub_16FF4();
    sub_45BCC();
    sub_7BF64();
    sub_16CB0();
    return;
  }

  if (v1 < 0) {
    uint64_t v20 = v1;
  }
  else {
    uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_7BFBC();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v20);
  if (!v7) {
    goto LABEL_18;
  }
LABEL_3:
  if (v7 >= 1)
  {
    uint64_t v29 = v2;
    for (uint64_t i = 0LL; i != v7; ++i)
    {
      if ((v1 & 0xC000000000000001LL) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
      }
      else {
        id v9 = *(id *)(v1 + 8 * i + 32);
      }
      uint64_t v10 = v9;
      uint64_t v11 = sub_6224();

      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        unint64_t v14 = *(void *)((char *)&dword_10 + (v30 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v13 = *(void *)((char *)&dword_18 + (v30 & 0xFFFFFFFFFFFFFF8LL));
        if (v14 >= v13 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1LL);
        }
        uint64_t v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
        specialized Array._endMutation()(v15, v16, v17, v18);
      }
    }

    sub_45BCC();
    uint64_t v19 = (void *)v30;
    uint64_t v2 = v29;
    goto LABEL_19;
  }

  __break(1u);
}

#error "62C8: call analysis failed (funcsize=200)"
void sub_6560( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  uint64_t v20;
  void *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  os_log_s *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  os_log_s *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  _WORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  sub_16D88();
  a19 = v23;
  a20 = v24;
  uint64_t v72 = v25;
  uint64_t v26 = type metadata accessor for AlarmInternalIdentifierPrefix(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v28 = sub_4AE98();
  uint64_t v29 = type metadata accessor for CharacterSet(v28);
  sub_17780();
  __chkstk_darwin(v30);
  sub_17390();
  uint64_t v33 = v32 - v31;
  uint64_t v35 = sub_4AFB0(v34, (SEL *)&selRef_identifier);
  uint64_t v37 = static AlarmID.alarmUUID(fromIdentifier:)(v35, v36);
  os_log_type_t v39 = v38;
  uint64_t v40 = sub_16D68();
  if (!v39)
  {
    if (qword_D3058 != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    BOOL v51 = sub_16C80();
    uint64_t v52 = (os_log_s *)sub_26F0(v51, (uint64_t)qword_D5308);
    uint64_t v53 = v21;
    uint64_t v42 = v52;
    Logger.logObject.getter(v53, v54, v55, v56, v57, v58, v59, v60);
    uint64_t v61 = sub_17714();
    if (!os_log_type_enabled(v52, v61))
    {

      goto LABEL_18;
    }

    uint64_t v22 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v62 = sub_16AC4(32LL);
    uint64_t v73 = v62;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v63 = sub_2257C(v53, (SEL *)&selRef_identifier);
    if (v64)
    {
      uint64_t v65 = v64;
    }

    else
    {
      uint64_t v63 = 0LL;
      uint64_t v65 = 0xE000000000000000LL;
    }

    uint64_t v75 = sub_3D10(v63, v65, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &a9, v22 + 4, v22 + 12);

    sub_16D68();
    sub_16BD0(&dword_0, v42, v61, "INAlarm+Additions Bad alarm identifier: %s", v22);
    sub_16BB4(v62);
    sub_16AA8(v62);
    goto LABEL_15;
  }

  uint64_t v73 = v37;
  os_log_type_t v74 = v39;
  static CharacterSet.urlPathAllowed.getter(v40);
  uint64_t v41 = sub_6898();
  uint64_t v42 = (os_log_s *)&v73;
  uint64_t v43 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v33, &type metadata for String, v41);
  unint64_t v45 = v44;
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v33, v29);
  sub_17900();
  if (!v45)
  {
    if (qword_D3058 != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    id v66 = sub_16C80();
    sub_16CD0(v66, (uint64_t)qword_D5308);
    uint64_t v67 = sub_17714();
    if (!sub_4AF34((os_log_s *)&v73)) {
      goto LABEL_16;
    }
    uint64_t v68 = (_WORD *)sub_16AC4(2LL);
    sub_16CE4(v68);
    sub_16B44(&dword_0, (os_log_s *)&v73, v67, "toAlarmId: Unable to add percent encoding to URL", v22);
LABEL_15:
    sub_16AA8((uint64_t)v22);
LABEL_16:

LABEL_18:
    uint64_t v69 = type metadata accessor for URL(0LL);
    sub_23050(v72, v70, v71, v69);
    goto LABEL_19;
  }

  uint64_t v46 = (*(uint64_t (**)(uint8_t *, void, uint64_t))(v27 + 104))( v22,  enum case for AlarmInternalIdentifierPrefix.idPrefix(_:),  v26);
  uint64_t v47 = AlarmInternalIdentifierPrefix.rawValue.getter(v46);
  uint64_t v49 = v48;
  (*(void (**)(uint8_t *, uint64_t))(v27 + 8))(v22, v26);
  uint64_t v73 = v47;
  os_log_type_t v74 = v49;
  swift_bridgeObjectRetain(v49);
  v50._uint64_t countAndFlagsBits = v43;
  v50._object = v45;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v45);
  URL.init(string:)(v73, v74);
  sub_16C48();
LABEL_19:
  sub_16CB0();
}

unint64_t sub_6898()
{
  unint64_t result = qword_D5368;
  if (!qword_D5368)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_D5368);
  }

  return result;
}

unint64_t sub_68D4()
{
  unint64_t result = qword_D5CB0;
  if (!qword_D5CB0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_D5CB0);
  }

  return result;
}

void sub_6910()
{
  int v74 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v76 = v11;
  sub_26B0(&qword_D5320);
  sub_215E4();
  __chkstk_darwin(v12);
  sub_4AE74();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v68 - v14;
  sub_26B0(&qword_D3A38);
  sub_215E4();
  __chkstk_darwin(v16);
  sub_177C0();
  uint64_t v17 = type metadata accessor for RREntity(0LL);
  sub_17780();
  __chkstk_darwin(v18);
  sub_16B30();
  uint64_t v75 = v19;
  uint64_t v20 = sub_6CF0();
  uint64_t v77 = v17;
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v72 = v0;
    uint64_t v73 = v8;
    uint64_t v69 = v3;
    uint64_t v70 = v10;
    uint64_t v71 = v6;
    v78[0] = sub_4AFB0(v20, (SEL *)&selRef_identifier);
    v78[1] = v22;
    uint64_t v23 = sub_26B0(&qword_D5328);
    uint64_t v24 = String.init<A>(describing:)(v78, v23);
    uint64_t v26 = v25;
    if (qword_D3168 != -1) {
      swift_once(&qword_D3168, sub_82874);
    }
    uint64_t v27 = qword_D8488;
    uint64_t v28 = qword_D8490;
    uint64_t v29 = type metadata accessor for GroupIdentifier(0LL);
    sub_A40C((uint64_t)v15, 1LL, 1LL, v29);
    uint64_t v30 = type metadata accessor for SiriAlarm(0LL);
    swift_bridgeObjectRetain(v28);
    swift_retain(v21);
    RREntity.init<A>(id:appBundleId:usoEntity:intentEntity:group:)(v24, v26, v27, v28, v21, v1, v15, v30);
    uint64_t v56 = v29;
    sub_4AF08();
    uint64_t v57 = v77;
    sub_4AE84(v58, v59, v60);
    uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 32);
    uint64_t v62 = v75;
    v61(v75, v2, v57);
    uint64_t v63 = v73;
    if (v73 && (v74 & 1) == 0)
    {
      swift_bridgeObjectRetain(v73);
      uint64_t v64 = v69;
      GroupIdentifier.init(id:seq:)(v70, v63, v71);
      sub_4AF08();
      sub_A40C(v65, v66, v67, v56);
      RREntity.group.setter(v64);
    }

    sub_17B94();
    uint64_t v55 = v76;
    v61(v76, v62, v57);
    uint64_t v54 = 0LL;
  }

  else
  {
    if (qword_D3058 != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    uint64_t v31 = sub_16C80();
    uint64_t v32 = (os_log_s *)sub_26F0(v31, (uint64_t)qword_D5308);
    id v33 = v1;
    Logger.logObject.getter(v33, v34, v35, v36, v37, v38, v39, v40);
    os_log_type_t v41 = sub_16D40();
    if (sub_4AF34(v32))
    {
      uint64_t v42 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v43 = sub_16AC4(32LL);
      v78[0] = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      id v44 = v33;
      id v45 = [v44 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      uint64_t v47 = v46;

      uint64_t v50 = sub_4AFE4(v48, v49, v78);
      uint64_t v51 = sub_4AF1C(v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v52, v53, v42 + 12);

      swift_bridgeObjectRelease(v47);
      sub_16BD0(&dword_0, v32, v41, "Fail to build rr entity from alarm %s", v42);
      uint64_t v54 = 1LL;
      sub_16BB4(v43);
      sub_16AA8(v43);
      sub_16AA8((uint64_t)v42);
    }

    else
    {

      uint64_t v54 = 1LL;
    }

    uint64_t v55 = v76;
  }

  sub_4AE84(v55, v54, 1LL);
  sub_16CB0();
}

uint64_t sub_6CF0()
{
  uint64_t v1 = static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)();
  sub_16FFC();
  if (!v1)
  {
    if (qword_D3058 != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    uint64_t v2 = sub_16C80();
    sub_26F0(v2, (uint64_t)qword_D5308);
    id v3 = v0;
    uint64_t v11 = (os_log_s *)sub_4AFDC((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v20, v21[0], v21[1], v21[2], v21[3]);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v14 = sub_16AC4(32LL);
      v21[0] = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_6E90();
      uint64_t v20 = v15;
      uint64_t v16 = type metadata accessor for UsoEntityBuilder_common_Alarm(0LL);
      uint64_t v17 = String.init<A>(describing:)(&v20, v16);
      uint64_t v20 = sub_3D10(v17, v18, v21);
      sub_17BB8((uint64_t)&v20, (uint64_t)v21, (uint64_t)(v13 + 4));

      sub_16C48();
      sub_16BD0(&dword_0, v11, v12, "Fail to build uso entity %s", v13);
      sub_16BB4(v14);
      sub_16AA8(v14);
      sub_16AA8((uint64_t)v13);
    }

    else
    {
    }
  }

  return v1;
}

void sub_6E90()
{
  id v3 = v0;
  sub_26B0(&qword_D37D8);
  sub_215E4();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  sub_4B018();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v61 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = sub_4AE60();
  uint64_t v13 = type metadata accessor for UsoEntityBuilder_common_Alarm(v12);
  uint64_t v14 = sub_16D14(v13);
  uint64_t v15 = UsoEntityBuilder_common_Alarm.init()();
  uint64_t v16 = sub_2257C(v3, (SEL *)&selRef_label);
  if (v17)
  {
    uint64_t v14 = v15;
    dispatch thunk of UsoEntityBuilder_common_Alarm.setName(value:)(v16, v17);
    sub_17900();
  }

  id v18 = sub_4B06C();
  if (v18)
  {
    uint64_t v14 = (uint64_t)v18;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v18);

    type metadata accessor for DateComponents(0LL);
    uint64_t v19 = (uint64_t)v11;
    uint64_t v20 = 0LL;
  }

  else
  {
    type metadata accessor for DateComponents(0LL);
    uint64_t v19 = sub_4AF5C();
  }

  sub_1D6F8(v19, v20);
  sub_5A34((uint64_t)v11, v2, &qword_D37D8);
  type metadata accessor for DateComponents(0LL);
  uint64_t v21 = sub_1D718(v2);
  if ((_DWORD)v21) {
    goto LABEL_7;
  }
  uint64_t v22 = DateComponents.hour.getter();
  uint64_t v14 = v23;
  sub_4AF3C(v22, &qword_D37D8);
  if ((v14 & 1) != 0) {
    goto LABEL_18;
  }
  id v24 = sub_4B06C();
  if (v24)
  {
    uint64_t v14 = (uint64_t)v24;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v24);

    uint64_t v25 = 0LL;
  }

  else
  {
    uint64_t v25 = 1LL;
  }

  sub_1D6F8((uint64_t)v7, v25);
  sub_5A34((uint64_t)v7, (uint64_t)v1, &qword_D37D8);
  uint64_t v21 = sub_1D718((uint64_t)v1);
  if ((_DWORD)v21)
  {
LABEL_7:
    sub_4AF3C(v21, &qword_D37D8);
LABEL_18:
    if (qword_D3058 != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    uint64_t v58 = sub_16C80();
    sub_16CD0(v58, (uint64_t)qword_D5308);
    os_log_type_t v59 = sub_17714();
    if (sub_4AF34((os_log_s *)v14))
    {
      uint64_t v60 = (_WORD *)sub_16AC4(2LL);
      sub_16CE4(v60);
      sub_16B44( &dword_0,  (os_log_s *)v14,  v59,  "alarm.dateTime is nil. Failed to build alarm Uso Entity for RRaaS/NL!",  v1);
      sub_16AA8((uint64_t)v1);
    }

    goto LABEL_22;
  }

  uint64_t v26 = DateComponents.minute.getter();
  uint64_t v14 = v27;
  sub_16A3C((uint64_t)v1, &qword_D37D8);
  if ((v14 & 1) != 0) {
    goto LABEL_18;
  }
  uint64_t v28 = type metadata accessor for UsoEntityBuilder_common_Integer(0LL);
  sub_16D14(v28);
  uint64_t v29 = UsoEntityBuilder_common_Integer.init()();
  dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValue(value:)(v22);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  uint64_t v30 = UsoEntityBuilder_common_Integer.init()();
  dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValue(value:)(v26);
  uint64_t v31 = type metadata accessor for UsoEntityBuilder_common_Time24HourClock(0LL);
  sub_16D14(v31);
  uint64_t v32 = UsoEntityBuilder_common_Time24HourClock.init()();
  uint64_t v33 = swift_retain(v29);
  dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setHour(value:)( v33,  &protocol witness table for UsoEntityBuilder_common_Integer);
  sub_4AF88();
  uint64_t v34 = swift_retain(v30);
  dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setMinute(value:)( v34,  &protocol witness table for UsoEntityBuilder_common_Integer);
  sub_45B5C();
  uint64_t v35 = type metadata accessor for UsoEntityBuilder_common_DateTime(0LL);
  sub_16D14(v35);
  uint64_t v36 = UsoEntityBuilder_common_DateTime.init()();
  uint64_t v37 = swift_retain(v32);
  dispatch thunk of UsoEntityBuilder_common_DateTime.setTime(value:)( v37,  &protocol witness table for UsoEntityBuilder_common_Time24HourClock);
  sub_1D730();
  uint64_t v38 = swift_retain(v36);
  dispatch thunk of UsoEntityBuilder_common_Alarm.setEndDateTime(value:)( v38,  &protocol witness table for UsoEntityBuilder_common_DateTime);
  sub_4AF44();
  if (qword_D3058 != -1) {
    swift_once(&qword_D3058, sub_499FC);
  }
  uint64_t v39 = sub_16C80();
  sub_26F0(v39, (uint64_t)qword_D5308);
  uint64_t v40 = swift_retain_n(v15, 2LL);
  uint64_t v14 = Logger.logObject.getter(v40, v41, v42, v43, v44, v45, v46, v47);
  os_log_type_t v48 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v14, v48))
  {

    sub_16EBC(v15);
    sub_4AF44();
    sub_1D730();
    sub_45B5C();
    sub_4AF88();
    goto LABEL_23;
  }

  uint64_t v62 = v30;
  uint64_t v49 = sub_16AC4(12LL);
  uint64_t v61 = v29;
  uint64_t v50 = (uint8_t *)v49;
  uint64_t v51 = sub_16AC4(32LL);
  uint64_t v63 = v15;
  uint64_t v64 = v51;
  *(_DWORD *)uint64_t v50 = 136315138;
  sub_47DE4();
  uint64_t v52 = String.init<A>(describing:)(&v63, v13);
  unint64_t v54 = v53;
  uint64_t v55 = sub_3D10(v52, v53, &v64);
  uint64_t v56 = sub_4B078(v55);
  sub_17BB8(v56, v57, (uint64_t)(v50 + 4));
  sub_16EBC(v15);
  swift_bridgeObjectRelease(v54);
  sub_16BD0(&dword_0, (os_log_s *)v14, v48, "Returning alarmBuilder: %s", v50);
  sub_16BB4(v51);
  sub_16AA8(v51);
  sub_16AA8((uint64_t)v50);
  swift_release(v61);
  swift_release(v62);
  sub_1D730();
  sub_4AF44();
LABEL_22:

LABEL_23:
  sub_16CB0();
}

BOOL sub_7358(id a1, SEL a2)
{
  return 1;
}

unint64_t sub_7360(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_73C4(a1, a2, v5);
}

unint64_t sub_73C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

_OWORD *sub_74A4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_74B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  uint64_t v26 = v20;
  uint64_t v27 = type metadata accessor for Calendar(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  sub_22FFC();
  sub_26B0(&qword_D3820);
  sub_215E4();
  __chkstk_darwin(v29);
  uint64_t v30 = sub_4AE98();
  uint64_t v31 = (void *)type metadata accessor for Date(v30);
  uint64_t v32 = *(v31 - 1);
  __chkstk_darwin(v31);
  sub_4AEEC();
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v36 = (char *)&a9 - v35;
  uint64_t v37 = static Calendar.current.getter(v34);
  Date.init()(v37);
  sub_76A8(v22, v23, v26, v21);
  uint64_t v38 = *(void (**)(uint64_t, void *))(v32 + 8);
  v38(v23, v31);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v22, v27);
  sub_16BBC(v21, 1LL, (uint64_t)v31);
  if (v39)
  {
    sub_16A3C(v21, &qword_D3820);
    if (qword_D3058 != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    uint64_t v40 = sub_16C80();
    sub_16CD0(v40, (uint64_t)qword_D5308);
    os_log_type_t v41 = sub_16D40();
    if (sub_16ACC(v41))
    {
      uint64_t v42 = (_WORD *)sub_16AC4(2LL);
      *uint64_t v42 = 0;
      sub_16ADC(&dword_0, v43, v44, "Can't get nextFiringDate.");
      sub_16AA8((uint64_t)v42);
    }
  }

  else
  {
    sub_17A5C((uint64_t)v36, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 32));
    uint64_t v45 = type metadata accessor for DialogCalendar.Builder(0LL);
    sub_16D14(v45);
    DialogCalendar.Builder.init()();
    double v46 = Date.timeIntervalSince1970.getter();
    dispatch thunk of DialogCalendar.Builder.withSecs(_:)(*(void *)&v46, 0LL);
    uint64_t v47 = sub_4AF88();
    dispatch thunk of DialogCalendar.Builder.build()(v47);
    sub_45B5C();
    v38((uint64_t)v36, v31);
  }

  sub_16CB0();
}

void sub_76A8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v139 = a2;
  uint64_t v134 = a1;
  uint64_t v141 = a4;
  uint64_t v7 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v125 = *(void *)(v7 - 8);
  uint64_t v126 = v7;
  sub_16AFC();
  __chkstk_darwin(v8);
  sub_16B30();
  uint64_t v124 = v9;
  uint64_t v10 = sub_1D768();
  uint64_t v11 = type metadata accessor for Calendar.SearchDirection(v10);
  uint64_t v132 = *(void *)(v11 - 8);
  uint64_t v133 = v11;
  sub_16AFC();
  __chkstk_darwin(v12);
  uint64_t v14 = sub_85FBC(v13, (uint64_t)v119);
  uint64_t v15 = type metadata accessor for Calendar.RepeatedTimePolicy(v14);
  uint64_t v129 = *(void *)(v15 - 8);
  uint64_t v130 = v15;
  sub_16AFC();
  __chkstk_darwin(v16);
  uint64_t v17 = sub_85FDC();
  uint64_t v18 = type metadata accessor for Calendar.MatchingPolicy(v17);
  uint64_t v137 = *(void *)(v18 - 8);
  uint64_t v138 = v18;
  sub_16AFC();
  __chkstk_darwin(v19);
  sub_7556C();
  uint64_t v122 = sub_26B0(&qword_D3820);
  sub_16AFC();
  __chkstk_darwin(v20);
  sub_16B08();
  uint64_t v121 = v21;
  sub_16AF0();
  __chkstk_darwin(v22);
  uint64_t v127 = (uint64_t)&v119 - v23;
  sub_16AF0();
  __chkstk_darwin(v24);
  uint64_t v128 = (char *)&v119 - v25;
  sub_16AF0();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v119 - v27;
  uint64_t v29 = type metadata accessor for Date(0LL);
  uint64_t v136 = *(void *)(v29 - 8);
  sub_16AFC();
  __chkstk_darwin(v30);
  sub_16B08();
  uint64_t v123 = v31;
  sub_16AF0();
  __chkstk_darwin(v32);
  uint64_t v135 = (char *)&v119 - v33;
  sub_26B0(&qword_D37D8);
  sub_16AFC();
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v119 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = __chkstk_darwin(v35);
  uint64_t v40 = (char *)&v119 - v39;
  uint64_t v41 = __chkstk_darwin(v38);
  uint64_t v43 = (char *)&v119 - v42;
  __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v119 - v44;
  char v140 = a3;
  id v46 = [a3 dateTime];
  if (v46)
  {
    uint64_t v47 = v46;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v46);

    type metadata accessor for DateComponents(0LL);
    uint64_t v48 = (uint64_t)v43;
    uint64_t v49 = 0LL;
  }

  else
  {
    type metadata accessor for DateComponents(0LL);
    uint64_t v48 = (uint64_t)v43;
    uint64_t v49 = 1LL;
  }

  sub_17AE8(v48, v49);
  sub_5A60((uint64_t)v43, (uint64_t)v45, &qword_D37D8);
  type metadata accessor for DateComponents(0LL);
  uint64_t v120 = (void *)DateComponents.hour.getter();
  char v51 = v50;
  sub_7EC4((uint64_t)v45, &qword_D37D8);
  if ((v51 & 1) != 0) {
    goto LABEL_18;
  }
  id v52 = [v140 dateTime];
  if (v52)
  {
    unint64_t v53 = v52;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v52);

    uint64_t v54 = 0LL;
  }

  else
  {
    uint64_t v54 = 1LL;
  }

  sub_17AE8((uint64_t)v37, v54);
  sub_5A60((uint64_t)v37, (uint64_t)v40, &qword_D37D8);
  if (sub_86008((uint64_t)v40))
  {
    uint64_t v45 = v40;
LABEL_5:
    sub_7EC4((uint64_t)v45, &qword_D37D8);
LABEL_18:
    uint64_t v86 = v141;
    uint64_t v87 = v29;
LABEL_19:
    sub_A40C(v86, 1LL, 1LL, v87);
    return;
  }

  uint64_t v119 = (void *)DateComponents.minute.getter();
  char v56 = v55;
  sub_7EC4((uint64_t)v40, &qword_D37D8);
  if ((v56 & 1) != 0) {
    goto LABEL_18;
  }
  (*(void (**)(uint64_t, void, uint64_t))(v137 + 104))( v4,  enum case for Calendar.MatchingPolicy.nextTime(_:),  v138);
  uint64_t v57 = v129;
  uint64_t v58 = v130;
  (*(void (**)(uint64_t, void, uint64_t))(v129 + 104))( v5,  enum case for Calendar.RepeatedTimePolicy.first(_:),  v130);
  uint64_t v60 = v131;
  uint64_t v59 = v132;
  uint64_t v61 = v133;
  (*(void (**)(uint64_t, void, uint64_t))(v132 + 104))( v131,  enum case for Calendar.SearchDirection.forward(_:),  v133);
  uint64_t v62 = v134;
  Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)( v120,  v119,  0LL,  v139,  v4,  v5,  v60);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, v61);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v5, v58);
  sub_86014(v137);
  uint64_t v63 = v29;
  if (sub_16880((uint64_t)v28, 1LL, v29) == 1)
  {
    uint64_t v64 = v139;
    sub_7EC4((uint64_t)v28, &qword_D3820);
    uint64_t v65 = v136;
    if (qword_D3190 != -1) {
      swift_once(&qword_D3190, sub_85310);
    }
    uint64_t v66 = sub_16C80();
    sub_26F0(v66, (uint64_t)qword_D7160);
    uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v123, v64, v29);
    uint64_t v75 = (os_log_s *)Logger.logObject.getter(v67, v68, v69, v70, v71, v72, v73, v74);
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v78 = sub_16AC4(32LL);
      v142[0] = v78;
      *(_DWORD *)uint64_t v77 = 136315138;
      sub_16A6C( &qword_D3830,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter(v29, v79);
      unint64_t v82 = v81;
      uint64_t v83 = sub_3D10(v80, v81, v142);
      uint64_t v84 = sub_179F8(v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v84, v85, v77 + 4, v77 + 12);
      swift_bridgeObjectRelease(v82);
      sub_85FF8();
      _os_log_impl(&dword_0, v75, v76, "NextFiringDate: Unable to offset alarmBaseDate from now: %s", v77, 0xCu);
      swift_arrayDestroy(v78, 1LL);
      sub_16AA8(v78);
      sub_16AA8((uint64_t)v77);
    }

    else
    {
      sub_85FF8();
    }

    uint64_t v86 = v141;
    uint64_t v87 = v29;
    goto LABEL_19;
  }

  uint64_t v88 = v135;
  uint64_t v89 = v136;
  (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v135, v28, v29);
  sub_4ACEC(v140);
  uint64_t v91 = v90;
  unint64_t v92 = sub_85358(v62, v139, v120, v119, v90);
  swift_bridgeObjectRelease(v91);
  uint64_t v94 = v124;
  uint64_t v93 = v125;
  uint64_t v95 = v126;
  (*(void (**)(uint64_t, void, uint64_t))(v125 + 104))(v124, enum case for Calendar.Component.day(_:), v126);
  uint64_t v96 = (uint64_t)v128;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v94, v92, v88, 0LL);
  (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v94, v95);
  if (qword_D3190 != -1) {
    swift_once(&qword_D3190, sub_85310);
  }
  uint64_t v97 = sub_16C80();
  sub_26F0(v97, (uint64_t)qword_D7160);
  uint64_t v98 = v127;
  uint64_t v99 = sub_7EFC(v96, v127);
  uint64_t v107 = (os_log_s *)Logger.logObject.getter(v99, v100, v101, v102, v103, v104, v105, v106);
  os_log_type_t v108 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v107, v108))
  {
    v109 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v110 = sub_16AC4(32LL);
    v142[0] = v110;
    *(_DWORD *)v109 = 136315138;
    uint64_t v111 = v121;
    sub_7EFC(v98, v121);
    uint64_t v112 = String.init<A>(describing:)(v111, v122);
    uint64_t v113 = v98;
    unint64_t v115 = v114;
    uint64_t v116 = sub_3D10(v112, v114, v142);
    uint64_t v117 = sub_179F8(v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, v118, v109 + 4, v109 + 12);
    swift_bridgeObjectRelease(v115);
    sub_7EC4(v113, &qword_D3820);
    _os_log_impl(&dword_0, v107, v108, "NextFiringDate: %s", v109, 0xCu);
    swift_arrayDestroy(v110, 1LL);
    sub_16AA8(v110);
    sub_16AA8((uint64_t)v109);

    (*(void (**)(char *, uint64_t))(v136 + 8))(v135, v63);
  }

  else
  {

    sub_7EC4(v98, &qword_D3820);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v135, v63);
  }

  sub_5A60(v96, v141, &qword_D3820);
}

void sub_7EC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_26B0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_17B50();
}

uint64_t sub_7EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D3820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AlarmAlarm.Builder(uint64_t a1)
{
  return sub_8A38(a1, qword_D58C0, (uint64_t)&nominal type descriptor for AlarmAlarm.Builder);
}

uint64_t sub_7F58()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_label;
  uint64_t v2 = sub_1EC14();
  sub_A40C(v1, 1LL, 1LL, v2);
  *(void *)(v0 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_time) = 0LL;
  sub_50450(OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_formattedTimeString);
  sub_50450(OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_timeOnlyString);
  sub_50450(OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_meridian);
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_enabled) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_isRecurrent) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_isSleepAlarm) = 0;
  *(void *)(v0 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_days) = &_swiftEmptyArrayStorage;
  sub_50450(OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_labelForSnippetWithRecurrence);
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_isSetWitchingHoursForToday) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_isTomorrow) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_overrideTomorrowCalendarLogic) = 0;
  sub_50450(OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_action);
  sub_50450(OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_enableAction);
  sub_50450(OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_disableAction);
  sub_50450(OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_alarmIDString);
  return v0;
}

uint64_t sub_806C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D3A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

void *sub_80B4(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

void *sub_80D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_26B0(&qword_D3A08);
  __chkstk_darwin(v2);
  uint64_t v105 = (uint64_t)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = sub_26B0(&qword_D5338);
  __chkstk_darwin(v104);
  uint64_t v5 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v97 - v11;
  uint64_t v13 = type metadata accessor for CATOption(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_4ACEC(v1);
  if (!v17) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v18 = v17;
  uint64_t v103 = v10;
  uint64_t v100 = v7;
  uint64_t v101 = v12;
  type metadata accessor for AlarmBaseCATs_Async(0LL);
  uint64_t v19 = sub_26B0(&qword_D5340);
  uint64_t v20 = swift_allocObject( v19,  ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
        + *(void *)(v14 + 72),
          *(unsigned __int8 *)(v14 + 80) | 7LL);
  __int128 v99 = xmmword_A4880;
  *(_OWORD *)(v20 + 16) = xmmword_A4880;
  static CATOption.labelMode.getter();
  v106[0] = v20;
  unint64_t v21 = sub_4AD5C();
  uint64_t v22 = sub_26B0(&qword_D5350);
  unint64_t v23 = sub_4AD9C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v106, v22, v23, v13, v21);
  uint64_t v102 = CATWrapper.__allocating_init(options:globals:)(v16, 0LL);
  if (qword_D3058 != -1) {
    swift_once(&qword_D3058, sub_499FC);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  sub_26F0(v24, (uint64_t)qword_D5308);
  uint64_t v25 = swift_bridgeObjectRetain_n(v18, 6LL);
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v25, v26, v27, v28, v29, v30, v31, v32);
  os_log_type_t v34 = static os_log_type_t.default.getter();
  uint64_t v35 = &qword_D3000;
  uint64_t v36 = &off_D8000;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v98 = v6;
    uint64_t v37 = swift_slowAlloc(20LL, -1LL);
    *(_DWORD *)uint64_t v37 = 67109632;
    uint64_t v38 = sub_509A8(v18);
    sub_50DB4((uint64_t)v38);
    uint64_t v40 = v39;
    if (qword_D3080 != -1) {
      swift_once(&qword_D3080, sub_50B7C);
    }
    sub_50E40(v40, qword_D83C0);
    char v42 = v41;
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v40);
    LODWORD(v106[0]) = v42 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, (char *)v106 + 4, v37 + 4, v37 + 8);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v37 + 8) = 1024;
    uint64_t v43 = sub_509A8(v18);
    sub_50DB4((uint64_t)v43);
    uint64_t v45 = v44;
    if (qword_D3088 != -1) {
      swift_once(&qword_D3088, sub_50BA0);
    }
    sub_50E40(v45, qword_D83C8);
    char v47 = v46;
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v45);
    LODWORD(v106[0]) = v47 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, (char *)v106 + 4, v37 + 10, v37 + 14);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v37 + 14) = 1024;
    uint64_t v48 = sub_509A8(v18);
    sub_50DB4((uint64_t)v48);
    uint64_t v50 = v49;
    if (qword_D3090 != -1) {
      swift_once(&qword_D3090, sub_50BC4);
    }
    sub_50E40(v50, qword_D83D0);
    char v52 = v51;
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v50);
    LODWORD(v106[0]) = v52 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, (char *)v106 + 4, v37 + 16, v37 + 20);
    swift_bridgeObjectRelease(v18);
    _os_log_impl(&dword_0, v33, v34, "getDayOfWeekSpeakableArray, %{BOOL}d, %{BOOL}d, %{BOOL}d ", (uint8_t *)v37, 0x14u);
    swift_slowDealloc(v37, -1LL, -1LL);

    uint64_t v6 = v98;
    uint64_t v36 = &off_D8000;
    uint64_t v35 = &qword_D3000;
  }

  else
  {

    swift_bridgeObjectRelease_n(v18, 6LL);
  }

  uint64_t v54 = sub_509A8(v18);
  sub_50DB4((uint64_t)v54);
  uint64_t v56 = v55;
  uint64_t v58 = v102;
  uint64_t v57 = v103;
  if (v35[16] != -1) {
    swift_once(&qword_D3080, sub_50B7C);
  }
  sub_50E40(v56, (uint64_t)v36[120]);
  char v60 = v59;
  swift_bridgeObjectRelease(v56);
  if ((v60 & 1) == 0)
  {
    uint64_t v61 = sub_509A8(v18);
    sub_50DB4((uint64_t)v61);
    uint64_t v63 = v62;
    if (qword_D3088 != -1) {
      swift_once(&qword_D3088, sub_50BA0);
    }
    sub_50E40(v63, qword_D83C8);
    char v65 = v64;
    swift_bridgeObjectRelease(v63);
    if ((v65 & 1) == 0)
    {
      uint64_t v66 = sub_509A8(v18);
      sub_50DB4((uint64_t)v66);
      uint64_t v68 = v67;
      if (qword_D3090 != -1) {
        swift_once(&qword_D3090, sub_50BC4);
      }
      sub_50E40(v68, qword_D83D0);
      char v70 = v69;
      swift_bridgeObjectRelease(v68);
      if ((v70 & 1) == 0) {
        goto LABEL_29;
      }
    }
  }

  uint64_t v71 = sub_509A8(v18);
  sub_50DB4((uint64_t)v71);
  uint64_t v73 = v72;
  if (qword_D3090 != -1) {
    swift_once(&qword_D3090, sub_50BC4);
  }
  sub_50E40(v73, qword_D83D0);
  char v75 = v74;
  swift_bridgeObjectRelease(v73);
  os_log_type_t v76 = sub_509A8(v18);
  sub_50DB4((uint64_t)v76);
  uint64_t v78 = v77;
  sub_50E40(v77, (uint64_t)v36[120]);
  char v80 = v79;
  swift_bridgeObjectRelease(v78);
  unint64_t v81 = sub_509A8(v18);
  sub_50DB4((uint64_t)v81);
  uint64_t v83 = v82;
  if (qword_D3088 != -1) {
    swift_once(&qword_D3088, sub_50BA0);
  }
  sub_50E40(v83, qword_D83C8);
  char v85 = v84;
  swift_bridgeObjectRelease(v83);
  uint64_t v86 = v105;
  sub_A40C(v105, 1LL, 1LL, v6);
  sub_38644(0, 0, v75 & 1, v80 & 1, v85 & 1, v86);
  sub_16A3C(v86, &qword_D3A08);
  uint64_t v87 = Result<>.firstPrint.getter(v104);
  uint64_t v89 = v88;
  sub_16A3C((uint64_t)v5, &qword_D5338);
  if (v89)
  {
    String.toSpeakableString.getter(v87);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v89);
    uint64_t v90 = v100;
    uint64_t v91 = v101;
    unint64_t v92 = *(void (**)(char *, char *, uint64_t))(v100 + 32);
    v92(v101, v57, v6);
    uint64_t v93 = sub_26B0(&qword_D5360);
    uint64_t v94 = *(unsigned __int8 *)(v90 + 80);
    uint64_t v95 = (v94 + 32) & ~v94;
    unint64_t v53 = (void *)swift_allocObject(v93, v95 + *(void *)(v90 + 72), v94 | 7);
    *((_OWORD *)v53 + 1) = v99;
    v92((char *)v53 + v95, v91, v6);
  }

  else
  {
LABEL_29:
    swift_retain(v58);
    unint64_t v53 = sub_47E70(v18, v58, 0, 0);
    swift_bridgeObjectRelease(v18);
  }

  swift_release(v58);
  return v53;
}

uint64_t type metadata accessor for AlarmBaseCATs_Sync(uint64_t a1)
{
  uint64_t result = qword_D5370;
  if (!qword_D5370) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlarmBaseCATs_Sync);
  }
  return result;
}

uint64_t sub_88BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A748(a1, a2, a3);
}

uint64_t Array<A>.isWeekdays.getter(uint64_t a1)
{
  return sub_8928(a1, &qword_D3080, &qword_D83C0, (uint64_t)sub_50B7C);
}

uint64_t sub_8928(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = sub_509BC(a1);
  sub_50DB4((uint64_t)v7);
  uint64_t v9 = v8;
  if (*a2 != -1LL) {
    swift_once(a2, a4);
  }
  sub_50E40(v9, *a3);
  char v11 = v10;
  swift_bridgeObjectRelease(v9);
  return v11 & 1;
}

unint64_t sub_89A8()
{
  unint64_t result = qword_D5CD8;
  if (!qword_D5CD8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RepeatSchedule,  &type metadata for RepeatSchedule);
    atomic_store(result, (unint64_t *)&qword_D5CD8);
  }

  return result;
}

uint64_t Array<A>.isWeekends.getter(uint64_t a1)
{
  return sub_8928(a1, &qword_D3088, &qword_D83C8, (uint64_t)sub_50BA0);
}

uint64_t Array<A>.isEveryday.getter(uint64_t a1)
{
  return sub_8928(a1, &qword_D3090, &qword_D83D0, (uint64_t)sub_50BC4);
}

uint64_t sub_8A1C()
{
  uint64_t v0 = CATWrapper.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_8A38(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t type metadata accessor for AlarmAlarm(uint64_t a1)
{
  return sub_8A38(a1, qword_D5740, (uint64_t)&nominal type descriptor for AlarmAlarm);
}

void sub_8A7C(uint64_t a1)
{
  *(void *)(v1 + 16) = 0LL;
  uint64_t v4 = a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_label;
  sub_2D018(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_label, (uint64_t)v31);
  sub_504F4(v4);
  sub_504AC(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_label);
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_time);
  *(void *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_time) = v5;
  uint64_t v6 = a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_formattedTimeString;
  sub_2D018(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_formattedTimeString, (uint64_t)v30);
  sub_504F4(v6);
  sub_504AC(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_formattedTimeString);
  uint64_t v7 = a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_timeOnlyString;
  sub_2D018(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_timeOnlyString, (uint64_t)v29);
  sub_504F4(v7);
  sub_504AC(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_timeOnlyString);
  uint64_t v8 = a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_meridian;
  sub_2D018(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_meridian, (uint64_t)v28);
  sub_504F4(v8);
  sub_504AC(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_meridian);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_enabled) = *(_BYTE *)(a1
                                                                                    + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_enabled);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isRecurrent) = *(_BYTE *)(a1
                                                                                        + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_isRecurrent);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isSleepAlarm) = *(_BYTE *)(a1
                                                                                         + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_isSleepAlarm);
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_days);
  *(void *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_days) = v9;
  uint64_t v10 = a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_labelForSnippetWithRecurrence;
  sub_2D018(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_labelForSnippetWithRecurrence, (uint64_t)v27);
  sub_504F4(v10);
  sub_504AC(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_labelForSnippetWithRecurrence);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isSetWitchingHoursForToday) = *(_BYTE *)(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_isSetWitchingHoursForToday);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isTomorrow) = *(_BYTE *)(a1
                                                                                       + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_isTomorrow);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_overrideTomorrowCalendarLogic) = *(_BYTE *)(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_overrideTomorrowCalendarLogic);
  uint64_t v11 = a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_action;
  sub_2D018(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_action, (uint64_t)v26);
  sub_504F4(v11);
  sub_504AC(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_action);
  uint64_t v12 = a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_enableAction;
  sub_2D018(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_enableAction, (uint64_t)v25);
  sub_504F4(v12);
  sub_504AC(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_enableAction);
  uint64_t v13 = a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_disableAction;
  sub_2D018(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_disableAction, (uint64_t)v24);
  sub_504F4(v13);
  sub_504AC(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_disableAction);
  uint64_t v14 = a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_alarmIDString;
  sub_2D018(a1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_alarmIDString, (uint64_t)v23);
  sub_504F4(v14);
  sub_504AC(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_alarmIDString);
  swift_retain(v5);
  swift_bridgeObjectRetain(v9);
  if (!sub_8E3C())
  {
    uint64_t v15 = (void *)static Log.siriDialogEngine.getter();
    static os_log_type_t.error.getter();
    uint64_t v16 = sub_26B0(&qword_D5CA0);
    uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
    *(_OWORD *)(v17 + 16) = xmmword_A4880;
    uint64_t v22 = *(const char **)v1;
    uint64_t v18 = sub_26B0(&qword_D5CA8);
    uint64_t v19 = String.init<A>(describing:)(&v22, v18);
    uint64_t v21 = v20;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_68D4();
    *(void *)(v17 + 32) = v19;
    *(void *)(v17 + 40) = v21;
    os_log(_:dso:log:type:_:)("Building an instance of %s without all required inputs", v22);

    swift_bridgeObjectRelease(v17);
  }

  swift_release(a1);
  sub_21290();
}

uint64_t sub_8DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D3A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

BOOL sub_8E3C()
{
  uint64_t v7 = (char *)&v12 - v6;
  sub_503BC(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_formattedTimeString, (uint64_t)&v12 - v6);
  sub_1EC14();
  int v8 = sub_212FC((uint64_t)v7);
  sub_5037C((uint64_t)v7);
  if (v8 == 1) {
    return 0LL;
  }
  sub_504F4(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_timeOnlyString);
  int v9 = sub_212FC(v2);
  sub_5037C(v2);
  if (v9 == 1) {
    return 0LL;
  }
  sub_503BC(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_meridian, v0);
  BOOL v10 = sub_212FC(v0) != 1;
  sub_5037C(v0);
  return v10;
}

uint64_t sub_8F4C()
{
  return sub_4F8C8((void (*)(void))sub_4F4D8);
}

uint64_t sub_8F58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_26B0(&qword_D3BD0);
  uint64_t v9 = sub_38F80(v8, 368LL);
  *(_OWORD *)(v9 + 16) = xmmword_A5A70;
  *(void *)(v9 + 32) = 0x6D72616C61LL;
  *(void *)(v9 + 40) = 0xE500000000000000LL;
  if (a1)
  {
    uint64_t v10 = sub_47D54();
    uint64_t v11 = a1;
  }

  else
  {
    uint64_t v10 = sub_47E04();
    *(void *)(v9 + 56) = 0LL;
    *(void *)(v9 + 64) = 0LL;
  }

  *(void *)(v9 + 48) = v11;
  *(void *)(v9 + 72) = v10;
  *(void *)(v9 + 80) = 7368801LL;
  *(void *)(v9 + 88) = 0xE300000000000000LL;
  if (a2)
  {
    uint64_t v12 = sub_21638();
    uint64_t v13 = a2;
  }

  else
  {
    uint64_t v12 = sub_47E04();
    *(void *)(v9 + 104) = 0LL;
    *(void *)(v9 + 112) = 0LL;
  }

  *(void *)(v9 + 96) = v13;
  *(void *)(v9 + 120) = v12;
  *(void *)(v9 + 128) = 0xD000000000000015LL;
  sub_214E0();
  *(void *)(v9 + 136) = v14;
  *(_BYTE *)(v9 + 144) = a3 & 1;
  *(void *)(v9 + 168) = &type metadata for Bool;
  *(void *)(v9 + 176) = v15;
  sub_214E0();
  *(void *)(v9 + 184) = v16;
  *(_BYTE *)(v9 + 192) = BYTE1(a3) & 1;
  *(void *)(v9 + 216) = v18;
  *(void *)(v9 + 224) = v17;
  sub_214E0();
  *(void *)(v9 + 232) = v19;
  *(_BYTE *)(v9 + 240) = BYTE2(a3) & 1;
  *(void *)(v9 + 264) = v21;
  *(void *)(v9 + 272) = v20 | 3;
  sub_214C8();
  *(void *)(v9 + 280) = v22;
  *(_BYTE *)(v9 + 288) = HIBYTE(a3) & 1;
  sub_47E44();
  *(void *)(v9 + 312) = v24;
  *(void *)(v9 + 320) = v23;
  *(void *)(v9 + 328) = 0xEA00000000006D72LL;
  if (a4)
  {
    uint64_t v25 = sub_47D54();
    uint64_t v26 = a4;
  }

  else
  {
    uint64_t v25 = sub_47E04();
    *(void *)(v9 + 344) = 0LL;
    *(void *)(v9 + 352) = 0LL;
  }

  *(void *)(v9 + 336) = v26;
  *(void *)(v9 + 360) = v25;
  swift_retain(a2);
  sub_47E20();
  sub_47DE4();
  return v9;
}

uint64_t sub_90E8(void *a1)
{
  return sub_9108(a1);
}

uint64_t sub_9108(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_26B0(&qword_D5C80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_17390();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_80B4(a1, v10);
  unint64_t v12 = sub_9534();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AlarmAlarm.CodingKeys,  &type metadata for AlarmAlarm.CodingKeys,  v12,  v10,  v11);
  uint64_t v13 = v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_label;
  LOBYTE(v22) = 0;
  uint64_t v14 = type metadata accessor for SpeakableString(0LL);
  uint64_t v15 = sub_9570( &qword_D5C88,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
  sub_50498(v13, (uint64_t)&v22, v5, v14, v15);
  if (!v2)
  {
    uint64_t v22 = *(void *)(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_time);
    char v21 = 1;
    uint64_t v16 = type metadata accessor for DialogCalendar(0LL);
    uint64_t v17 = sub_9570( &qword_D5C90,  (uint64_t (*)(uint64_t))&type metadata accessor for DialogCalendar,  (uint64_t)&protocol conformance descriptor for DialogCalendar);
    sub_50498((uint64_t)&v22, (uint64_t)&v21, v5, v16, v17);
    sub_50420(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_formattedTimeString, 2);
    sub_50420(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_timeOnlyString, 3);
    sub_50420(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_meridian, 4);
    sub_50464(*(unsigned __int8 *)(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_enabled), 5);
    sub_50464(*(unsigned __int8 *)(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isRecurrent), 6);
    sub_50464(*(unsigned __int8 *)(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isSleepAlarm), 7);
    uint64_t v22 = *(void *)(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_days);
    char v21 = 8;
    uint64_t v18 = sub_26B0(&qword_D3BD8);
    uint64_t v19 = sub_9710( &qword_D5C98,  &qword_D5C88,  (uint64_t)&protocol conformance descriptor for SpeakableString,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, v18, v19);
    sub_50420(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_labelForSnippetWithRecurrence, 9);
    sub_50464(*(unsigned __int8 *)(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isSetWitchingHoursForToday), 10);
    sub_50464(*(unsigned __int8 *)(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isTomorrow), 11);
    sub_50464( *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_overrideTomorrowCalendarLogic),  12);
    sub_50420(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_action, 13);
    sub_50420(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_enableAction, 14);
    sub_50420(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_disableAction, 15);
    sub_50420(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_alarmIDString, 16);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_9480()
{
  unint64_t result = qword_D5CC8;
  if (!qword_D5CC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_A5F8C, &type metadata for AlarmAlarm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_D5CC8);
  }

  return result;
}

unint64_t sub_94BC()
{
  unint64_t result = qword_D5CC0;
  if (!qword_D5CC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_A5F64, &type metadata for AlarmAlarm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_D5CC0);
  }

  return result;
}

unint64_t sub_94F8()
{
  unint64_t result = qword_D5CB8;
  if (!qword_D5CB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_A602C, &type metadata for AlarmAlarm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_D5CB8);
  }

  return result;
}

unint64_t sub_9534()
{
  unint64_t result = qword_D5C60;
  if (!qword_D5C60)
  {
    unint64_t result = swift_getWitnessTable(&unk_A6054, &type metadata for AlarmAlarm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_D5C60);
  }

  return result;
}

uint64_t sub_9570(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for RecreateDeletedAlarmsFlow.RecreateAlarmError( _BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for AlarmAlarm.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEF) {
    return ((uint64_t (*)(void))((char *)&loc_960C + 4 * byte_A5E46[v4]))();
  }
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_9640 + 4 * byte_A5E41[v4]))();
}

uint64_t sub_9640(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_9648(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x9650LL);
  }
  return result;
}

uint64_t sub_965C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x9664LL);
  }
  *(_BYTE *)uint64_t result = a2 + 16;
  return result;
}

uint64_t sub_9668(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_9670(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for AlarmAlarm.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF0)
  {
    if (a2 + 16 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 16) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 17;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v5 = v6 - 17;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x23;
  int v5 = v6 - 35;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v5 = v6 - 14;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_9704()
{
  return sub_970C(*v0);
}

uint64_t sub_9710(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_16974(&qword_D3BD8);
    sub_9570(a2, (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

void sub_9794(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_97B4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v72 = a3;
  sub_26B0(&qword_D3A08);
  sub_215E4();
  __chkstk_darwin(v7);
  sub_16B08();
  uint64_t v70 = v8;
  sub_16AF0();
  __chkstk_darwin(v9);
  sub_16BD8();
  uint64_t v69 = v10;
  sub_16AF0();
  __chkstk_darwin(v11);
  sub_5066C();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v69 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v69 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  char v21 = (char *)&v69 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v69 - v23;
  __chkstk_darwin(v22);
  sub_50680();
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v69 - v26;
  BOOL v28 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000LL;
  if (v28 || (sub_50440(0x6C6562616CLL, 0xE500000000000000LL) & 1) != 0)
  {
    uint64_t v29 = sub_50544(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_label);
    sub_50638(v29);
    sub_1EC14();
    sub_5047C((uint64_t)v27);
    if (!v28) {
      goto LABEL_116;
    }
    uint64_t v30 = (uint64_t)v27;
    goto LABEL_9;
  }

  BOOL v32 = a1 == 1701669236 && a2 == 0xE400000000000000LL;
  if (!v32 && (sub_50440(1701669236LL, 0xE400000000000000LL) & 1) == 0)
  {
    uint64_t v35 = 0xD000000000000013LL;
    uint64_t v36 = "formattedTimeString";
    if (a1 == 0xD000000000000013LL && (sub_50594(), v28)
      || (sub_50440(v35, (unint64_t)(v36 - 32) | 0x8000000000000000LL) & 1) != 0)
    {
      uint64_t v37 = sub_50544(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_formattedTimeString);
      sub_504F4(v37);
      sub_1EC14();
      sub_5047C(v3);
      if (!v28) {
        goto LABEL_116;
      }
      uint64_t v30 = v3;
      goto LABEL_9;
    }

    BOOL v38 = a1 == 0x796C6E4F656D6974LL && a2 == 0xEE00676E69727453LL;
    if (v38 || (sub_50440(0x796C6E4F656D6974LL, 0xEE00676E69727453LL) & 1) != 0)
    {
      uint64_t v39 = sub_50544(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_timeOnlyString);
      sub_503BC(v39, (uint64_t)v24);
      uint64_t v40 = sub_1EC14();
      if (sub_16880((uint64_t)v24, 1LL, v40) != 1)
      {
        char v41 = v72;
        v72[3] = v40;
        sub_19558(v41);
        char v42 = *(void (**)(void))(*(void *)(v40 - 8) + 32LL);
LABEL_11:
        v42();
        return;
      }

      uint64_t v30 = (uint64_t)v24;
LABEL_9:
      sub_5037C(v30);
LABEL_10:
      uint64_t v31 = v72;
      *(_OWORD *)uint64_t v72 = 0u;
      *((_OWORD *)v31 + 1) = 0u;
      return;
    }

    BOOL v43 = a1 == 0x6E6169646972656DLL && a2 == 0xE800000000000000LL;
    if (v43 || (sub_50440(0x6E6169646972656DLL, 0xE800000000000000LL) & 1) != 0)
    {
      uint64_t v44 = sub_50544(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_meridian);
      sub_503BC(v44, (uint64_t)v21);
      sub_1EC14();
      sub_5047C((uint64_t)v21);
      if (!v28) {
        goto LABEL_116;
      }
      uint64_t v30 = (uint64_t)v21;
      goto LABEL_9;
    }

    BOOL v45 = a1 == 0x64656C62616E65LL && a2 == 0xE700000000000000LL;
    if (v45 || (sub_50440(0x64656C62616E65LL, 0xE700000000000000LL) & 1) != 0)
    {
      uint64_t v46 = OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_enabled;
    }

    else
    {
      BOOL v49 = a1 == 0x7272756365527369LL && a2 == 0xEB00000000746E65LL;
      if (v49 || (sub_50440(0x7272756365527369LL, 0xEB00000000746E65LL) & 1) != 0)
      {
        uint64_t v46 = OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isRecurrent;
      }

      else
      {
        BOOL v50 = a1 == 0x417065656C537369LL && a2 == 0xEC0000006D72616CLL;
        if (v50 || (sub_50440(0x417065656C537369LL, 0xEC0000006D72616CLL) & 1) != 0)
        {
          uint64_t v46 = OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isSleepAlarm;
        }

        else
        {
          BOOL v51 = a1 == 1937334628 && a2 == 0xE400000000000000LL;
          if (v51 || (sub_50440(1937334628LL, 0xE400000000000000LL) & 1) != 0)
          {
            uint64_t v52 = sub_26B0(&qword_D3BD8);
            uint64_t v53 = sub_50600(v52);
            swift_bridgeObjectRetain(v53);
            return;
          }

          uint64_t v54 = "labelForSnippetWithRecurrence";
          if (a1 == 0xD00000000000001DLL && (sub_50594(), v28)
            || (sub_50440(0xD00000000000001DLL, (unint64_t)(v54 - 32) | 0x8000000000000000LL) & 1) != 0)
          {
            uint64_t v55 = sub_50544(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_labelForSnippetWithRecurrence);
            sub_503BC(v55, (uint64_t)v18);
            sub_1EC14();
            sub_5047C((uint64_t)v18);
            if (!v28) {
              goto LABEL_116;
            }
            uint64_t v30 = (uint64_t)v18;
            goto LABEL_9;
          }

          uint64_t v56 = 0xD00000000000001ALL;
          uint64_t v57 = "isSetWitchingHoursForToday";
          if (a1 == 0xD00000000000001ALL && (sub_50594(), v28)
            || (sub_50440(v56, (unint64_t)(v57 - 32) | 0x8000000000000000LL) & 1) != 0)
          {
            uint64_t v46 = OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isSetWitchingHoursForToday;
          }

          else
          {
            BOOL v58 = a1 == 0x72726F6D6F547369LL && a2 == 0xEA0000000000776FLL;
            if (v58 || (sub_50440(0x72726F6D6F547369LL, 0xEA0000000000776FLL) & 1) != 0)
            {
              uint64_t v46 = OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isTomorrow;
            }

            else
            {
              char v59 = "overrideTomorrowCalendarLogic";
              if (a1 != 0xD00000000000001DLL || (sub_50594(), !v28))
              {
                if ((sub_50440(0xD00000000000001DLL, (unint64_t)(v59 - 32) | 0x8000000000000000LL) & 1) == 0)
                {
                  BOOL v60 = a1 == 0x6E6F69746361LL && a2 == 0xE600000000000000LL;
                  if (v60 || (sub_50440(0x6E6F69746361LL, 0xE600000000000000LL) & 1) != 0)
                  {
                    uint64_t v61 = sub_50544(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_action);
                    sub_503BC(v61, (uint64_t)v15);
                    sub_1EC14();
                    sub_5047C((uint64_t)v15);
                    if (!v28) {
                      goto LABEL_116;
                    }
                    uint64_t v30 = (uint64_t)v15;
                  }

                  else
                  {
                    BOOL v62 = a1 == 0x6341656C62616E65LL && a2 == 0xEC0000006E6F6974LL;
                    if (v62 || (sub_50440(0x6341656C62616E65LL, 0xEC0000006E6F6974LL) & 1) != 0)
                    {
                      uint64_t v63 = sub_50544(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_enableAction);
                      sub_503BC(v63, v4);
                      sub_1EC14();
                      sub_5047C(v4);
                      if (!v28) {
                        goto LABEL_116;
                      }
                      uint64_t v30 = v4;
                    }

                    else
                    {
                      BOOL v64 = a1 == 0x41656C6261736964LL && a2 == 0xED00006E6F697463LL;
                      if (v64 || (sub_50440(0x41656C6261736964LL, 0xED00006E6F697463LL) & 1) != 0)
                      {
                        uint64_t v65 = sub_50544(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_disableAction);
                        uint64_t v66 = v69;
                        sub_50638(v65);
                        sub_1EC14();
                        sub_5047C(v66);
                        if (!v28) {
                          goto LABEL_116;
                        }
                        uint64_t v30 = v69;
                      }

                      else
                      {
                        BOOL v67 = a1 == 0x5344496D72616C61LL && a2 == 0xED0000676E697274LL;
                        if (!v67 && (sub_50440(0x5344496D72616C61LL, 0xED0000676E697274LL) & 1) == 0) {
                          goto LABEL_10;
                        }
                        uint64_t v68 = v70;
                        sub_50638(v71 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_alarmIDString);
                        sub_1EC14();
                        sub_5047C(v68);
                        if (!v28)
                        {
LABEL_116:
                          sub_504C8();
                          sub_50588();
                          goto LABEL_11;
                        }

                        uint64_t v30 = v70;
                      }
                    }
                  }

                  goto LABEL_9;
                }
              }

              uint64_t v46 = OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_overrideTomorrowCalendarLogic;
            }
          }
        }
      }
    }

    char v47 = v72;
    char v48 = *(_BYTE *)(v71 + v46);
    v72[3] = &type metadata for Bool;
    *char v47 = v48;
    return;
  }

  if (!*(void *)(v71 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_time)) {
    goto LABEL_10;
  }
  uint64_t v33 = type metadata accessor for DialogCalendar(0LL);
  uint64_t v34 = sub_50600(v33);
  swift_retain(v34);
}

uint64_t sub_A044()
{
  return sub_4F8C8((void (*)(void))sub_A050);
}

uint64_t sub_A050()
{
  sub_504A4(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_label);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_time));
  sub_504A4(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_formattedTimeString);
  sub_504A4(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_timeOnlyString);
  sub_504A4(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_meridian);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_days));
  sub_504A4(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_labelForSnippetWithRecurrence);
  sub_504A4(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_action);
  sub_504A4(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_enableAction);
  sub_504A4(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_disableAction);
  sub_504A4(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_alarmIDString);
  return v0;
}

uint64_t sub_A0F8()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

void *sub_A11C(void *a1)
{
  uint64_t v2 = type metadata accessor for SearchAlarmIntent(0LL);
  uint64_t v3 = type metadata accessor for SearchAlarmIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(v2, v3);
  if (qword_D3178 != -1) {
    swift_once(&qword_D3178, sub_82958);
  }
  uint64_t v4 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(qword_D84A8, v2, v3);
  uint64_t v6 = v5;
  uint64_t v7 = sub_26B0(&qword_D7BB0);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v4, v6, v7);
  sub_4698((uint64_t)a1, (uint64_t)v14);
  unint64_t v8 = sub_A578();
  uint64_t v9 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)( v14,  &_s24UnsupportedValueStrategyVN_1,  v8);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v9);
  sub_4698((uint64_t)a1, (uint64_t)v13);
  unint64_t v10 = sub_A5B4();
  uint64_t v11 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:responseFlowProducer:)( v13,  &unk_D32F8,  0LL,  &_s20HandleIntentStrategyVN_2,  v10);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v11);
  _s20HandleIntentStrategyVwxx_1(a1);
  sub_A5F0(v13);
  return sub_A624(v14);
}

uint64_t sub_A25C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(sub_A274, 0LL, 0LL);
}

uint64_t sub_A274()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = [v1 alarmSearch];
  uint64_t v3 = sub_A658(v1);
  if (v3) {
    uint64_t v4 = (void *)v3;
  }
  else {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  uint64_t v5 = _s17ResultSetProviderCMa();
  swift_allocObject(v5, 88LL, 7LL);
  v0[3] = sub_7DCC0((uint64_t)v2, (uint64_t)v4);
  uint64_t v6 = (void *)swift_task_alloc(dword_D6D14);
  v0[4] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_A320;
  return sub_7DDB8();
}

uint64_t sub_A320(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 32);
  uint64_t v5 = *v2;
  *(void *)(v5 + 40) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_A3A8, 0LL, 0LL);
  }
  swift_release(*(void *)(v5 + 24));
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_A3A8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t variable initialization expression of RecreateDeletedAlarmsFlow.catFamily()
{
  return sub_A4D0((void (*)(void))type metadata accessor for CreateAlarmCATs_Async);
}

uint64_t variable initialization expression of RecreateDeletedAlarmsFlow.patternFamily()
{
  return sub_A4D0((void (*)(void))type metadata accessor for CreateAlarmCATPatternsExecutor);
}

void *variable initialization expression of RecreateDeletedAlarmsFlow.alarmSnapshots()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of CreateAlarmReformableFlow.state()
{
  return 0LL;
}

uint64_t sub_A40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t variable initialization expression of CreateAlarmReformableFlow.intent()
{
  return 0LL;
}

uint64_t variable initialization expression of UndoChangeStatusFlow.catFamily()
{
  return sub_A4D0((void (*)(void))type metadata accessor for ChangeAlarmStatusCATs_Async);
}

uint64_t variable initialization expression of UndoChangeStatusFlow.patternFamily()
{
  return sub_A4D0((void (*)(void))type metadata accessor for ChangeAlarmStatusCATPatternsExecutor);
}

uint64_t variable initialization expression of UndoChangeStatusFlow.modifyAllPatternFamily()
{
  return sub_A4D0((void (*)(void))type metadata accessor for ModifyAllCATPatternsExecutor);
}

uint64_t variable initialization expression of UndoChangeStatusFlow.operation@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for AlarmNLv4Constants.AlarmVerb.enable(_:);
  uint64_t v3 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t variable initialization expression of UndoChangeStatusFlow.failureReason()
{
  uint64_t v0 = sub_A6C0();
  return sub_A6B8(v0, v1, v2, v3);
}

uint64_t variable initialization expression of UndoCreateAlarmFlow.catFamily()
{
  return sub_A4D0((void (*)(void))type metadata accessor for DeleteAlarmCATs_Async);
}

uint64_t variable initialization expression of UndoCreateAlarmFlow.patternFamily()
{
  return sub_A4D0((void (*)(void))type metadata accessor for DeleteAlarmCATPatternsExecutor);
}

uint64_t variable initialization expression of UndoCreateAlarmFlow.errorPatternFamily()
{
  return sub_A4D0((void (*)(void))type metadata accessor for ErrorCATPatternsExecutor);
}

uint64_t sub_A4D0(void (*a1)(void))
{
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1(0LL);
  static CATOption.defaultMode.getter();
  return CATWrapper.__allocating_init(options:globals:)(v3, 0LL);
}

uint64_t variable initialization expression of UndoCreateAlarmFlow.alarmIdToDelete()
{
  return 0LL;
}

uint64_t variable initialization expression of UndoCreateAlarmFlow.followupPluginAction()
{
  uint64_t v0 = sub_A6C0();
  return sub_A6B8(v0, v1, v2, v3);
}

unint64_t sub_A578()
{
  unint64_t result = qword_D32F0;
  if (!qword_D32F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_A5CDC, &_s24UnsupportedValueStrategyVN_1);
    atomic_store(result, (unint64_t *)&qword_D32F0);
  }

  return result;
}

unint64_t sub_A5B4()
{
  unint64_t result = qword_D3300;
  if (!qword_D3300)
  {
    unint64_t result = swift_getWitnessTable(&unk_A70C8, &_s20HandleIntentStrategyVN_2);
    atomic_store(result, (unint64_t *)&qword_D3300);
  }

  return result;
}

void *sub_A5F0(void *a1)
{
  return a1;
}

void *sub_A624(void *a1)
{
  return a1;
}

uint64_t sub_A658(void *a1)
{
  id v1 = [a1 alarms];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for SiriAlarm(0LL);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_A6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_A40C(a1, a2, a3, a4);
}

uint64_t sub_A6C0()
{
  return v0;
}

uint64_t type metadata accessor for SearchAlarmCATs_Async(uint64_t a1)
{
  uint64_t result = qword_D3670;
  if (!qword_D3670) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchAlarmCATs_Async);
  }
  return result;
}

uint64_t sub_A70C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D8138);
}

uint64_t sub_A748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_26B0((uint64_t *)&unk_D36C0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A850(a1, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_A898(a1);
  return v13;
}

uint64_t sub_A848()
{
  return type metadata accessor for SearchAlarmCATs_Async(0LL);
}

uint64_t sub_A850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0((uint64_t *)&unk_D36C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_A898(uint64_t a1)
{
  uint64_t v2 = sub_26B0((uint64_t *)&unk_D36C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_A8D8(unsigned __int8 a1)
{
}

uint64_t sub_A954(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_A98C + 4 * byte_A46C8[a1]))( 0xD000000000000011LL,  0x80000000000A7FE0LL);
}

uint64_t sub_A98C()
{
  return 0x6D72616C61LL;
}

uint64_t sub_A9A0()
{
  return 0x6D69546D72616C61LL;
}

uint64_t sub_A9BC()
{
  return 0x64496D72616C61LL;
}

uint64_t sub_A9D4()
{
  return 0x62614C6D72616C61LL;
}

uint64_t sub_A9F0()
{
  return 0x6665526D72616C61LL;
}

uint64_t sub_AA14()
{
  return 0x7474416D72616C61LL;
}

uint64_t sub_AA38()
{
  return 0x77654E6D72616C61LL;
}

void sub_AA6C()
{
  v1._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
  v1._object = (void *)0xE700000000000000LL;
  String.append(_:)(v1);
  String.uppercased()();
  sub_AAFC();
  sub_AB0C();
  swift_bridgeObjectRelease(v0);
  sub_AAEC();
}

  ;
}

uint64_t sub_AAFC()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_AB0C()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_AB1C()
{
  uint64_t v0 = sub_16C80();
  sub_1688C(v0, qword_D36D0);
  sub_26F0(v0, (uint64_t)qword_D36D0);
  return static SiriTimeLog.alarmFlow.getter();
}

void sub_AB60()
{
  uint64_t v2 = v1;
  int v356 = v3;
  uint64_t v5 = v4;
  uint64_t v367 = v6;
  uint64_t v347 = type metadata accessor for DirectInvocationUtils.Alarm.UserInfoKey(0LL);
  uint64_t v346 = *(void *)(v347 - 8);
  sub_16AFC();
  __chkstk_darwin(v7);
  uint64_t v345 = (char *)&v320 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v358 = sub_16E50();
  v351[0] = *(void *)(v358 - 8);
  sub_16AFC();
  __chkstk_darwin(v9);
  sub_16AB4();
  __chkstk_darwin(v10);
  uint64_t v368 = (uint64_t)&v320 - v11;
  sub_16AF0();
  __chkstk_darwin(v12);
  sub_16BF8();
  uint64_t v352 = v13;
  uint64_t v359 = sub_17020();
  uint64_t v357 = *(void *)(v359 - 8);
  sub_16AFC();
  __chkstk_darwin(v14);
  sub_16AB4();
  __chkstk_darwin(v15);
  sub_16AB4();
  __chkstk_darwin(v16);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v17);
  sub_16BF8();
  uint64_t v354 = v18;
  uint64_t v335 = *(void *)(sub_16F04() - 8);
  sub_16AFC();
  __chkstk_darwin(v19);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v20);
  sub_16BF8();
  uint64_t v22 = sub_16E5C(v21);
  uint64_t v341 = *(void *)(v22 - 8);
  sub_16AFC();
  __chkstk_darwin(v23);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v24);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v25);
  sub_16AB4();
  __chkstk_darwin(v26);
  sub_16BF8();
  uint64_t v348 = v27;
  uint64_t v339 = sub_175B0();
  uint64_t v28 = *(void *)(v339 - 8);
  __chkstk_darwin(v339);
  sub_16AB4();
  __chkstk_darwin(v29);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v30);
  sub_16BF8();
  uint64_t v32 = sub_16F70(v31);
  sub_16D00(v32, (uint64_t)&v365);
  uint64_t v340 = v33;
  sub_16AFC();
  __chkstk_darwin(v34);
  sub_16DCC((uint64_t)&v320 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v336 = sub_26B0(&qword_D3780);
  sub_16AFC();
  __chkstk_darwin(v36);
  sub_16AB4();
  __chkstk_darwin(v37);
  sub_16DCC((uint64_t)&v320 - v38);
  sub_26B0(&qword_D3788);
  sub_16AFC();
  __chkstk_darwin(v39);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v40);
  sub_16AB4();
  __chkstk_darwin(v41);
  sub_16AB4();
  __chkstk_darwin(v42);
  sub_16AB4();
  __chkstk_darwin(v43);
  sub_16AB4();
  __chkstk_darwin(v44);
  sub_16BF8();
  sub_16DCC(v45);
  sub_26B0(&qword_D37D0);
  sub_16AFC();
  __chkstk_darwin(v46);
  sub_16B30();
  uint64_t v353 = v47;
  uint64_t v48 = sub_16EF8();
  uint64_t v364 = *(void *)(v48 - 8);
  uint64_t v365 = (os_log_s *)v48;
  sub_16AFC();
  __chkstk_darwin(v49);
  sub_16B08();
  uint64_t v355 = v50;
  sub_16AF0();
  __chkstk_darwin(v51);
  uint64_t v366 = (uint64_t)&v320 - v52;
  uint64_t v53 = sub_17144();
  v361[0] = *(void *)(v53 - 8);
  v361[1] = v53;
  sub_16AFC();
  __chkstk_darwin(v54);
  uint64_t v362 = (os_log_s *)((char *)&v320 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_16AF0();
  __chkstk_darwin(v56);
  uint64_t v360 = (uint64_t)&v320 - v57;
  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v58 = sub_16C80();
  char v59 = (uint8_t *)sub_26F0(v58, (uint64_t)qword_D36D0);
  BOOL v60 = (os_log_s *)sub_16D50();
  os_log_type_t v61 = static os_log_type_t.info.getter();
  if (sub_16D30(v61))
  {
    uint64_t v363 = v5;
    uint64_t v62 = sub_16AC4(12LL);
    uint64_t v338 = v22;
    uint64_t v63 = (uint8_t *)v62;
    uint64_t v64 = sub_16AC4(32LL);
    uint64_t v344 = v28;
    uint64_t v65 = v64;
    *(void *)&__int128 v371 = v64;
    *(_DWORD *)uint64_t v63 = 136315138;
    uint64_t v369 = v2;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v2);
    uint64_t v67 = sub_16F48(MetatypeMetadata, MetatypeMetadata);
    unint64_t v69 = v68;
    uint64_t v70 = sub_16B80(v67, v68);
    uint64_t v71 = sub_17064(v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v72, v73, v63 + 12);
    unint64_t v74 = v69;
    uint64_t v5 = v363;
    swift_bridgeObjectRelease(v74);
    sub_16BD0(&dword_0, v60, v0, "AlarmFlowUtils.decideActionForInput with intent type: %s", v63);
    sub_16BB4(v65);
    uint64_t v75 = v65;
    uint64_t v28 = v344;
    sub_16AA8(v75);
    uint64_t v76 = (uint64_t)v63;
    uint64_t v22 = v338;
    sub_16AA8(v76);
  }

  sub_C62C();
  uint64_t v77 = v368;
  if ((v78 & 1) != 0)
  {
    uint64_t v79 = v366;
    sub_17640();
    uint64_t v81 = v364;
    char v80 = v365;
    int v82 = (*(uint64_t (**)(uint64_t, os_log_s *))(v364 + 88))(v79, v365);
    if (v82 == enum case for Parse.NLv3IntentOnly(_:))
    {
      sub_172C8(v79, *(uint64_t (**)(uint64_t, uint64_t))(v81 + 96));
      goto LABEL_11;
    }

    if (v82 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
    {
      uint64_t v79 = v366;
      sub_172C8(v366, *(uint64_t (**)(uint64_t, uint64_t))(v81 + 96));
      uint64_t v83 = sub_26B0(&qword_D3768);
      swift_release(*(void *)(v79 + *(int *)(v83 + 48)));
LABEL_11:
      uint64_t v84 = v360;
      sub_172B0(v360, v79);
      char v85 = v362;
      sub_172B0((uint64_t)v362, v84);
      uint64_t v86 = sub_1713C();
      sub_16D14(v86);
      uint64_t v87 = sub_171DC();
      sub_172A8(v87);
      sub_16D60();
      os_log_type_t v88 = sub_176A8();
      if (sub_16E18(v85))
      {
        uint64_t v89 = sub_16AC4(12LL);
        uint64_t v366 = (uint64_t)v59;
        uint64_t v90 = (uint8_t *)v89;
        uint64_t v91 = sub_16AC4(32LL);
        uint64_t v363 = v5;
        sub_17B20(v91);
        uint64_t v320 = v2;
        sub_17898(4.8149e-34);
        sub_16A6C(&qword_D3770, type metadata accessor for AlarmNLIntent, (uint64_t)&unk_A6AEC);
        uint64_t v92 = sub_1714C();
        uint64_t v369 = sub_16B80(v92, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, &v370, v79, v2);
        sub_16EBC(v87);
        sub_16C48();
        sub_16BD0(&dword_0, v85, v88, "alarmNLIntent: %s", v90);
        sub_16BB4(v5);
        sub_16AA8(v5);
        sub_16AA8((uint64_t)v90);
      }

      else
      {

        sub_16EBC(v87);
      }

      sub_715D0();
      __asm { BR              X10 }
    }

    if (v82 == enum case for Parse.directInvocation(_:))
    {
      uint64_t v95 = *(uint64_t (**)(uint64_t, uint64_t))(v81 + 96);
      uint64_t v96 = v366;
      sub_172C8(v366, v95);
      uint64_t v97 = v351[0];
      uint64_t v98 = v352;
      uint64_t v99 = v358;
      sub_16E84(v352, v96, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v351[0] + 32LL));
      uint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16);
      v100(v77, v98, v99);
      sub_16D60();
      os_log_type_t v101 = sub_16B4C();
      if (sub_16C38(v101))
      {
        uint64_t v102 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v103 = sub_16AC4(32LL);
        uint64_t v366 = (uint64_t)v59;
        sub_1732C(v103);
        *(_DWORD *)uint64_t v102 = 136315138;
        uint64_t v104 = v342;
        uint64_t v105 = sub_17174();
        ((void (*)(uint64_t))v100)(v105);
        uint64_t v106 = String.init<A>(describing:)(v104, v358);
        uint64_t v108 = sub_16B80(v106, v107);
        uint64_t v109 = sub_172D8(v108);
        sub_16F1C(v109, v110, (uint64_t)(v102 + 4));
        sub_16EDC();
        sub_179A8();
        sub_16BD0( &dword_0,  v80,  (os_log_type_t)v28,  "[AlarmFlowUtils.decideActionForDisambiguationInput] Got directInvocation in input parse: %s",  v102);
        sub_16BB4((uint64_t)v59);
        uint64_t v98 = v352;
        sub_16AA8((uint64_t)v59);
        sub_16AA8((uint64_t)v102);
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v77, v99);
      }

      uint64_t v123 = Parse.DirectInvocation.userData.getter(v122);
      if (v123)
      {
        char v80 = (os_log_s *)v123;
        uint64_t v124 = v346;
        uint64_t v125 = sub_17214( enum case for DirectInvocationUtils.Alarm.UserInfoKey.alarmId(_:),  *(uint64_t (**)(void, uint64_t, void))(v346 + 104));
        uint64_t v126 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v125);
        uint64_t v28 = v127;
        sub_16EF0(v98, *(uint64_t (**)(uint64_t, uint64_t))(v124 + 8));
        sub_17280(v126, &v371);
        sub_16F40();
        uint64_t v128 = sub_16D58();
        if (v372[0])
        {
          if ((sub_16E08(v128, v129, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
          {
            swift_bridgeObjectRelease(v370);
            sub_17444();
LABEL_52:
            sub_179A8();
            goto LABEL_25;
          }
        }

        else
        {
          sub_1793C(v128, (uint64_t *)&unk_D4860);
        }
      }

      sub_16D60();
      os_log_type_t v168 = sub_16D40();
      if (sub_16ACC(v168))
      {
        uint64_t v169 = (_WORD *)sub_16AC4(2LL);
        sub_16BEC(v169);
        sub_16ADC( &dword_0,  v170,  v171,  "[AlarmFlowUtils.decideActionForDisambiguationInput] Direct invocation parse contains invalid alarm ID");
        sub_16AA8(v28);
      }

      sub_172C0();
      goto LABEL_52;
    }

    if (v82 == enum case for Parse.NLv4IntentOnly(_:))
    {
      uint64_t v111 = *(uint64_t (**)(uint64_t, uint64_t))(v81 + 96);
      uint64_t v112 = (uint64_t *)v366;
      sub_172C8(v366, v111);
      uint64_t v113 = *v112;
      if ((v356 & 1) != 0)
      {
        uint64_t v114 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted);
        sub_16C1C(v114);
        uint64_t v115 = v343;
        sub_17AB8();
        if (v116
          || (uint64_t v117 = objc_opt_self(&OBJC_CLASS___SIRINLUUserWantedToProceed), sub_16C1C(v117))
          || (uint64_t v118 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected), sub_16C1C(v118)))
        {
          sub_16D60();
          os_log_type_t v119 = sub_16C50();
          if (!sub_16BA4(v119))
          {
LABEL_120:

LABEL_121:
            sub_17444();
LABEL_122:
            sub_16DA0();
            goto LABEL_25;
          }

          uint64_t v120 = (_WORD *)sub_16AC4(2LL);
          sub_16CE4(v120);
          sub_16B44(&dword_0, (os_log_s *)v112, (os_log_type_t)v28, "User accepted the task, will handle.", v59);
          uint64_t v121 = (uint64_t)v59;
LABEL_119:
          sub_16AA8(v121);
          goto LABEL_120;
        }
      }

      else
      {
        uint64_t v152 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
        sub_16C1C(v152);
        uint64_t v115 = v343;
        sub_17AB8();
        if (v153)
        {
          sub_16D60();
          os_log_type_t v154 = sub_16C50();
          if (sub_16BA4(v154))
          {
            uint64_t v155 = (_WORD *)sub_16AC4(2LL);
            sub_16CE4(v155);
            sub_16B44(&dword_0, (os_log_s *)v112, (os_log_type_t)v28, "User cancelled the task.", v59);
            sub_16AA8((uint64_t)v59);
          }

          sub_178F0();
          goto LABEL_122;
        }
      }

      sub_17B58();
      uint64_t v179 = sub_17A20();
      uint64_t v344 = v28;
      uint64_t v368 = v113;
      if (v179)
      {
        sub_17944();
        sub_256B8(v180);
        sub_17324();
        uint64_t v181 = 0LL;
      }

      else
      {
        uint64_t v181 = 1LL;
        uint64_t v28 = v330;
      }

      sub_17510(v28, v181);
      sub_17620( v22,  enum case for AlarmNLv4Constants.AlarmVerb.noVerb(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v340 + 104));
      sub_17AE8(v22, 0LL);
      uint64_t v204 = v331;
      uint64_t v205 = v331 + *(int *)(v336 + 48);
      sub_16EC4(v28, v331);
      uint64_t v112 = (uint64_t *)v77;
      uint64_t v206 = v204;
      sub_3F88(v22, v205, &qword_D3788);
      uint64_t v207 = sub_17B88();
      sub_16BBC(v207, v208, (uint64_t)v112);
      if (v201)
      {
        uint64_t v210 = v112;
        uint64_t v112 = &qword_D3788;
        sub_16C78(v22);
        sub_16C78(v28);
        uint64_t v211 = (uint64_t)v210;
        uint64_t v206 = v331;
        uint64_t v212 = sub_16BBC(v205, 1LL, v211);
        if (v201)
        {
          sub_17054(v212, &qword_D3788);
          goto LABEL_112;
        }
      }

      else
      {
        uint64_t v213 = v204;
        uint64_t v214 = v323;
        sub_176C0(v213, v209, &qword_D3788);
        uint64_t v215 = sub_17830();
        sub_16BBC(v215, v216, (uint64_t)v112);
        if (!v217)
        {
          uint64_t v279 = v340;
          uint64_t v280 = v206;
          uint64_t v206 = v326;
          sub_17604(v326, v205, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v340 + 32));
          sub_16A6C( &qword_D4870,  (uint64_t (*)(uint64_t))&type metadata accessor for AlarmNLv4Constants.AlarmVerb,  (uint64_t)&protocol conformance descriptor for AlarmNLv4Constants.AlarmVerb);
          LODWORD(v366) = dispatch thunk of static Equatable.== infix(_:_:)(v214, v206, v112);
          char v281 = (char)v59;
          char v59 = *(uint8_t **)(v279 + 8);
          ((void (*)(uint64_t, uint64_t *))v59)(v206, v112);
          sub_178C0((uint64_t)v372);
          sub_178C0((uint64_t)&v359);
          ((void (*)(uint64_t, uint64_t *))v59)(v214, v112);
          LOBYTE(v59) = v281;
          uint64_t v282 = v280;
          uint64_t v115 = v343;
          sub_16A3C(v282, &qword_D3788);
          if ((v366 & 1) != 0)
          {
LABEL_112:
            sub_17274();
            sub_16D60();
            os_log_type_t v283 = sub_16C50();
            if (sub_16C28(v283))
            {
              os_log_type_t v284 = (uint8_t *)sub_16AC4(12LL);
              uint64_t v285 = sub_16AC4(32LL);
              sub_16E44(v285);
              sub_16D70(4.8149e-34);
              uint64_t v286 = sub_26B0(&qword_D3760);
              uint64_t v287 = sub_16D20(v286);
              uint64_t v289 = sub_16B80(v287, v288);
              sub_16C04(v289);
              sub_16F2C();
              sub_16D68();
              uint64_t v290 = "Received .noVerb in nlv4 firstUsoTask – handling: %s";
LABEL_118:
              sub_16BD0(&dword_0, (os_log_s *)v112, (os_log_type_t)v59, v290, v284);
              sub_16BB4(v206);
              sub_16AA8(v206);
              uint64_t v121 = (uint64_t)v284;
              goto LABEL_119;
            }

            goto LABEL_125;
          }

LABEL_114:
          sub_17640();
          uint64_t v291 = sub_175B8();
          sub_170F4( v291,  v292,  v293,  v294,  v295,  v296,  v297,  v298,  v320,  v321,  v322,  v323,  v324,  v325,  v326,  v327,  v328,  v329,  v330,  v331);
          uint64_t v112 = (uint64_t *)v299;
          sub_17054(v299, &qword_D37D0);
          sub_17790();
          if (!v112 || (uint64_t v300 = sub_17A14(), v112, !v300))
          {
            uint64_t v307 = v344;
            uint64_t v308 = v339;
            sub_16E84(v115, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v344 + 16));
            uint64_t v309 = (os_log_s *)sub_16D60();
            os_log_type_t v310 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v309, v310))
            {
              uint64_t v311 = sub_16AC4(22LL);
              uint64_t v366 = sub_16AC4(64LL);
              *(void *)&__int128 v371 = v366;
              *(_DWORD *)uint64_t v311 = 136315394;
              uint64_t v312 = sub_17358(v2);
              uint64_t v314 = sub_16B80(v312, v313);
              sub_170B4(v314);
              sub_16EDC();
              *(_WORD *)(v311 + 12) = 2080;
              sub_16A6C( (unint64_t *)&unk_D37B0,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
              uint64_t v316 = dispatch thunk of CustomStringConvertible.description.getter(v308, v315);
              uint64_t v318 = sub_16B80(v316, v317);
              sub_17378(v318);
              sub_16C48();
              sub_1702C(v115, *(uint64_t (**)(uint64_t, uint64_t))(v307 + 8));
              sub_1712C( &dword_0,  v309,  v310,  "Intent from parse does not match IntentType. Expected %s, received %s",  (uint8_t *)v311);
              uint64_t v319 = v366;
              sub_1726C(v366);
              sub_16AA8(v319);
              sub_16AA8(v311);
            }

            else
            {
              sub_1702C(v115, *(uint64_t (**)(uint64_t, uint64_t))(v307 + 8));
            }

            sub_172C0();
            goto LABEL_122;
          }

          sub_17274();
          sub_16D60();
          os_log_type_t v301 = sub_16C50();
          if (sub_16C28(v301))
          {
            os_log_type_t v284 = (uint8_t *)sub_16AC4(12LL);
            uint64_t v302 = sub_16AC4(32LL);
            sub_16E44(v302);
            sub_16D70(4.8149e-34);
            uint64_t v303 = sub_26B0(&qword_D3760);
            uint64_t v304 = sub_16D20(v303);
            uint64_t v306 = sub_16B80(v304, v305);
            sub_16C04(v306);
            sub_16F2C();
            sub_16D68();
            uint64_t v290 = "decideActionForInput decide handle userDialogAct: %s";
            goto LABEL_118;
          }

LABEL_125:
          sub_16F2C();
          goto LABEL_121;
        }

        sub_16DD8((uint64_t)v372);
        sub_16DD8((uint64_t)&v359);
        uint64_t v218 = sub_17748();
        uint64_t v212 = v219(v218, v112);
      }

      sub_17054(v212, &qword_D3780);
      goto LABEL_114;
    }

    if (v82 == enum case for Parse.uso(_:))
    {
      uint64_t v344 = v28;
      uint64_t v130 = v366;
      sub_172C8(v366, *(uint64_t (**)(uint64_t, uint64_t))(v81 + 96));
      sub_171E8();
      uint64_t v131 = sub_171F4();
      sub_16E84(v131, v130, v132);
      uint64_t v133 = v333;
      sub_17A30();
      uint64_t v134 = sub_176F4();
      sub_174C0((uint64_t)v133);
      uint64_t v135 = *(void *)(v134 + 16);
      if ((v356 & 1) != 0)
      {
        uint64_t v362 = (os_log_s *)v134;
        if (v135)
        {
          uint64_t v338 = v22;
          uint64_t v363 = v5;
          uint64_t v366 = (uint64_t)v59;
          sub_172F4();
          uint64_t v137 = (char *)v362 + v136;
          uint64_t v368 = *(void *)(v138 + 72);
          swift_bridgeObjectRetain(v362);
          uint64_t v320 = v2;
          while (1)
          {
            uint64_t v139 = sub_176A0(v354, (uint64_t)v137);
            char v140 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v139);
            uint64_t v141 = v349;
            uint64_t v142 = sub_176DC();
            uint64_t v144 = sub_176A0(v142, v143);
            char v145 = (v140 & 1) != 0 ? 1 : Siri_Nlu_External_UserDialogAct.hasWantedToProceed.getter(v144);
            uint64_t v146 = v359;
            sub_175C8(v141);
            uint64_t v147 = v350;
            uint64_t v148 = v354;
            uint64_t v149 = sub_176A0(v350, v354);
            if ((v145 & 1) != 0) {
              break;
            }
            char v150 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v149);
            sub_175C8(v147);
            sub_175C8(v148);
            if ((v150 & 1) != 0) {
              goto LABEL_106;
            }
            v137 += v368;
            --v135;
            uint64_t v2 = v320;
            if (!v135)
            {
              uint64_t v151 = sub_16C88((uint64_t)v362);
              char v59 = (uint8_t *)v366;
              goto LABEL_58;
            }
          }

          sub_175C8(v147);
          sub_175C8(v148);
LABEL_106:
          sub_16C88((uint64_t)v362);
          sub_17B48();
          os_log_type_t v275 = sub_16B4C();
          if (sub_16ACC(v275))
          {
            uint64_t v276 = (_WORD *)sub_16AC4(2LL);
            sub_16BEC(v276);
            sub_16ADC( &dword_0,  v277,  v278,  "USO parse userDialogActs contains hasAccepted, hasWantedToProceed or hasRejected; returning .handle() sinc"
              "e these are window actions");
            sub_16AA8(v146);
          }

          sub_17444();
LABEL_109:
          uint64_t v272 = sub_16EA8();
          uint64_t v274 = v338;
          goto LABEL_110;
        }

        uint64_t v182 = (uint64_t)v362;
      }

      else
      {
        uint64_t v172 = v359;
        if (v135)
        {
          uint64_t v338 = v22;
          uint64_t v362 = (os_log_s *)v134;
          uint64_t v363 = v5;
          sub_17304();
          uint64_t v368 = *(void *)(v173 + 72);
          sub_176C8();
          uint64_t v174 = v351[1];
          do
          {
            uint64_t v175 = sub_176E8();
            uint64_t v177 = sub_176A0(v175, v176);
            char v178 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v177);
            sub_175C0(v174, *(uint64_t (**)(uint64_t, uint64_t))(v357 + 8));
            if ((v178 & 1) != 0)
            {
              sub_16C88((uint64_t)v362);
              sub_16D60();
              os_log_type_t v220 = sub_16B4C();
              if (sub_16ACC(v220))
              {
                uint64_t v221 = (_WORD *)sub_16AC4(2LL);
                sub_16BEC(v221);
                sub_16ADC( &dword_0,  v222,  v223,  "USO parse userDialogActs contains hasRejected, and we're in a non-windowed config -- returning .cancel()!");
                sub_16AA8(v172);
              }

              sub_178F0();
              goto LABEL_109;
            }

            v133 += v368;
            --v135;
            uint64_t v172 = v359;
          }

          while (v135);
          uint64_t v151 = sub_16C88((uint64_t)v362);
LABEL_58:
          uint64_t v5 = v363;
          uint64_t v22 = v338;
LABEL_66:
          uint64_t v183 = v336;
          uint64_t v184 = v332;
          uint64_t v185 = v328;
          uint64_t v186 = USOParse.userParse.getter(v151);
          uint64_t v187 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v186);
          sub_174C0(v185);
          if (v187)
          {
            uint64_t v188 = v329;
            sub_256B8(v329);
            sub_17324();
            uint64_t v189 = 0LL;
          }

          else
          {
            uint64_t v189 = 1LL;
            uint64_t v188 = v329;
          }

          sub_17510(v188, v189);
          sub_17620( v184,  enum case for AlarmNLv4Constants.AlarmVerb.noVerb(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v340 + 104));
          sub_A40C(v184, 0LL, 1LL, v185);
          uint64_t v190 = v337;
          char v191 = (os_log_s *)(v337 + *(int *)(v183 + 48));
          uint64_t v192 = sub_17634();
          sub_3F88(v192, v193, &qword_D3788);
          sub_3F88(v184, (uint64_t)v191, &qword_D3788);
          uint64_t v194 = sub_17318();
          sub_16BBC(v194, v195, v185);
          if (v201)
          {
            sub_16C78(v184);
            uint64_t v197 = sub_17634();
            sub_16A3C(v197, v198);
            uint64_t v199 = sub_16BBC((uint64_t)v191, 1LL, v185);
            if (v201)
            {
              sub_17018(v199, &qword_D3788);
              goto LABEL_92;
            }
          }

          else
          {
            uint64_t v200 = v327;
            sub_176C0(v190, v196, &qword_D3788);
            sub_16BBC((uint64_t)v191, 1LL, v185);
            if (!v201)
            {
              sub_171E8();
              uint64_t v224 = v326;
              sub_17160(v326, v225);
              sub_16A6C( &qword_D4870,  (uint64_t (*)(uint64_t))&type metadata accessor for AlarmNLv4Constants.AlarmVerb,  (uint64_t)&protocol conformance descriptor for AlarmNLv4Constants.AlarmVerb);
              LODWORD(v368) = sub_178D8(v200, v224);
              char v191 = *(os_log_s **)(v340 + 8);
              ((void (*)(uint64_t, uint64_t))v191)(v224, v185);
              sub_16C78(v332);
              sub_16C78(v188);
              ((void (*)(uint64_t, uint64_t))v191)(v200, v185);
              uint64_t v184 = v344;
              sub_16C78(v337);
              if ((v368 & 1) != 0)
              {
LABEL_92:
                uint64_t v226 = v341;
                sub_17360((uint64_t)&v353);
                sub_16D60();
                os_log_type_t v227 = sub_16B4C();
                if (sub_16C38(v227))
                {
                  v228 = (uint8_t *)sub_16AC4(12LL);
                  uint64_t v229 = sub_16AC4(32LL);
                  sub_1732C(v229);
                  sub_16F80(4.8149e-34);
                  uint64_t v230 = sub_16F24(12LL);
                  uint64_t v369 = sub_16B80(v230, v231);
                  sub_16F1C((uint64_t)&v369, (uint64_t)&v370, v368);
                  sub_16EDC();
                  uint64_t v232 = *(void (**)(uint64_t, uint64_t))(v226 + 8);
                  sub_1755C(v188);
                  uint64_t v233 = "Received .noVerb in USO firstUsoTask – handling: %s";
LABEL_98:
                  sub_16BD0(&dword_0, v191, (os_log_type_t)v184, v233, v228);
                  sub_16BB4((uint64_t)v59);
                  sub_16AA8((uint64_t)v59);
                  sub_16AA8((uint64_t)v228);
LABEL_102:

                  sub_17444();
                  v232(v348, v22);
                  goto LABEL_25;
                }

                goto LABEL_101;
              }

LABEL_94:
              uint64_t v234 = v355;
              sub_17640();
              sub_175B8();
              uint64_t v235 = v353;
              uint64_t v236 = sub_17318();
              sub_17508(v236, v237, v238, v239);
              sub_CF8C( v234,  v235,  v240,  v241,  v242,  v243,  v244,  v245,  v320,  v321,  v322,  v323,  v324,  v325,  v326,  v327,  v328,  v329,  v330,  v331);
              char v191 = (os_log_s *)v246;
              sub_17018(v246, &qword_D37D0);
              sub_17ADC(v364);
              if (!v191 || (swift_dynamicCastUnknownClass(v191, v2), sub_174D0(), !v235))
              {
                uint64_t v251 = v325;
                uint64_t v252 = v339;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v184 + 16))(v325, v5, v339);
                uint64_t v253 = (os_log_s *)sub_16D60();
                os_log_type_t v254 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v253, v254))
                {
                  uint64_t v255 = sub_16AC4(22LL);
                  uint64_t v256 = sub_16AC4(64LL);
                  *(void *)&__int128 v371 = v256;
                  *(_DWORD *)uint64_t v255 = 136315394;
                  uint64_t v257 = sub_17358(v2);
                  uint64_t v259 = sub_16B80(v257, v258);
                  sub_17820(v259);
                  sub_17564(v260, v261);
                  sub_16FF4();
                  *(_WORD *)(v255 + 12) = 2080;
                  sub_16A6C( (unint64_t *)&unk_D37B0,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
                  uint64_t v263 = dispatch thunk of CustomStringConvertible.description.getter(v252, v262);
                  uint64_t v265 = sub_16B80(v263, v264);
                  uint64_t v266 = sub_177F8(v265);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(v266, v267, v268, v269);
                  sub_16C48();
                  uint64_t v270 = sub_17738();
                  sub_1704C(v270, v271);
                  sub_1712C( &dword_0,  v253,  v254,  "Intent from parse does not match IntentType. Expected %s, received %s",  (uint8_t *)v255);
                  sub_1726C(v256);
                  sub_16AA8(v256);
                  sub_16AA8(v255);
                }

                else
                {
                  sub_1704C(v251, *(uint64_t (**)(uint64_t, uint64_t))(v184 + 8));
                }

                sub_172C0();
                uint64_t v272 = sub_16EA8();
                uint64_t v274 = v22;
LABEL_110:
                v273(v272, v274);
                goto LABEL_25;
              }

              uint64_t v226 = v341;
              sub_17360((uint64_t)v351);
              sub_16D60();
              os_log_type_t v247 = sub_16B4C();
              if (sub_16C38(v247))
              {
                v228 = (uint8_t *)sub_16AC4(12LL);
                uint64_t v248 = sub_16AC4(32LL);
                sub_1732C(v248);
                sub_16F80(4.8149e-34);
                uint64_t v249 = sub_16F24(12LL);
                uint64_t v369 = sub_16B80(v249, v250);
                sub_16F1C((uint64_t)&v369, (uint64_t)&v370, v368);
                sub_16EDC();
                uint64_t v232 = *(void (**)(uint64_t, uint64_t))(v226 + 8);
                sub_1755C(v188);
                uint64_t v233 = "decideActionForInput decide handle userDialogAct: %s";
                goto LABEL_98;
              }

LABEL_101:
              uint64_t v232 = *(void (**)(uint64_t, uint64_t))(v226 + 8);
              v232(v188, v22);
              goto LABEL_102;
            }

            sub_16DD8((uint64_t)v361);
            sub_16ECC(v188);
            uint64_t v202 = sub_17748();
            uint64_t v199 = sub_1704C(v202, v203);
          }

          sub_17018(v199, &qword_D3780);
          uint64_t v184 = v344;
          goto LABEL_94;
        }

        uint64_t v182 = v134;
      }

      uint64_t v151 = swift_bridgeObjectRelease(v182);
      goto LABEL_66;
    }

    uint64_t v156 = v334;
    sub_16ED4(v334, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
    sub_16D60();
    os_log_type_t v157 = sub_16D40();
    if (sub_16CA0(v157))
    {
      uint64_t v158 = v28;
      uint64_t v159 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v160 = sub_16AC4(32LL);
      sub_16E44(v160);
      sub_17AA4(4.8149e-34);
      uint64_t v161 = v355;
      Input.parse.getter(v162);
      uint64_t v163 = v161;
      uint64_t v164 = v365;
      uint64_t v165 = sub_17760(v163);
      uint64_t v167 = sub_16B80(v165, v166);
      sub_171A8(v167);
      sub_16C48();
      sub_16E7C(v156, *(uint64_t (**)(uint64_t, uint64_t))(v158 + 8));
      sub_16BD0( &dword_0,  v80,  (os_log_type_t)v59,  "Received an unsupported parse for disambiguation window prompt: %s",  v159);
      sub_16BB4(v77);
      sub_16AA8(v77);
      sub_16AA8((uint64_t)v159);
    }

    else
    {
      sub_16E7C(v156, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));

      uint64_t v164 = v365;
    }

    sub_172C0();
    (*(void (**)(uint64_t, os_log_s *))(v364 + 8))(v366, v164);
  }

  else
  {
    sub_172C0();
  }

LABEL_25:
  sub_16CB0();
}

  sub_16CB0();
}

  __break(1u);
  return result;
}

    uint64_t v12 = (v17 - 1) & v17;
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }

void sub_C62C()
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_175B0();
  uint64_t v150 = *(void *)(v5 - 8);
  uint64_t v151 = v5;
  sub_16AFC();
  __chkstk_darwin(v6);
  sub_16B30();
  uint64_t v149 = v7;
  uint64_t v8 = sub_16E50();
  uint64_t v157 = *(void *)(v8 - 8);
  uint64_t v158 = v8;
  sub_16AFC();
  __chkstk_darwin(v9);
  sub_16B30();
  uint64_t v156 = v10;
  uint64_t v11 = (uint8_t *)sub_17020();
  uint64_t v163 = (uint8_t *)*((void *)v11 - 1);
  uint64_t v164 = v11;
  sub_16AFC();
  __chkstk_darwin(v12);
  sub_16B08();
  uint64_t v162 = v13;
  sub_16AF0();
  __chkstk_darwin(v14);
  sub_16BD8();
  uint64_t v159 = v15;
  sub_16AF0();
  __chkstk_darwin(v16);
  uint64_t v160 = (uint64_t)&v146 - v17;
  sub_16AF0();
  __chkstk_darwin(v18);
  sub_16BF8();
  uint64_t v161 = v19;
  uint64_t v152 = sub_16F04();
  uint64_t v148 = *(void *)(v152 - 8);
  sub_16AFC();
  __chkstk_darwin(v20);
  sub_16B08();
  uint64_t v147 = v21;
  sub_16AF0();
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v146 - v23;
  uint64_t v25 = sub_17134();
  uint64_t v154 = *(void *)(v25 - 8);
  uint64_t v155 = v25;
  sub_16AFC();
  __chkstk_darwin(v26);
  sub_16B30();
  uint64_t v153 = v27;
  sub_26B0(&qword_D3778);
  sub_16AFC();
  __chkstk_darwin(v28);
  uint64_t v29 = sub_17524();
  uint64_t v30 = type metadata accessor for Parse(v29);
  sub_17780();
  __chkstk_darwin(v31);
  sub_177D8();
  uint64_t v34 = v32 - v33;
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v146 - v36;
  sub_17144();
  sub_17770();
  __chkstk_darwin(v38);
  sub_17390();
  uint64_t v41 = (uint8_t *)(v40 - v39);
  Input.parse.getter();
  int v42 = (*(uint64_t (**)(char *, uint64_t))(v0 + 88))(v37, v30);
  if (v42 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_16E20();
  }

  else
  {
    if (v42 != enum case for Parse.NLv3IntentPlusServerConversion(_:))
    {
      if (v42 == enum case for Parse.directInvocation(_:))
      {
        sub_16E20();
        uint64_t v62 = v156;
        uint64_t v61 = v157;
        uint64_t v63 = sub_173E8();
        sub_17A5C(v63, v64, v65);
        static DirectInvocationUtils.isQuickStopDirectInvocation(_:)(v62);
        sub_172C8(v62, *(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
        goto LABEL_20;
      }

      if (v42 == enum case for Parse.NLv4IntentOnly(_:))
      {
        sub_16E20();
        uint64_t v66 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
        if (sub_16C1C(v66)
          || (uint64_t v67 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected), sub_16C1C(v67))
          || (uint64_t v68 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted), sub_16C1C(v68))
          || (uint64_t v69 = objc_opt_self(&OBJC_CLASS___SIRINLUUserWantedToProceed), sub_16C1C(v69)))
        {
          sub_16DA0();
          goto LABEL_20;
        }

        sub_17B58();
        uint64_t v142 = sub_17A20();
        if (v142)
        {
          sub_134D0(v142);
          sub_16DA0();
          sub_16FFC();
          goto LABEL_20;
        }

        if (qword_D2F80 != -1) {
          swift_once(&qword_D2F80, sub_AB1C);
        }
        uint64_t v143 = sub_16C80();
        sub_16CD0(v143, (uint64_t)qword_D36D0);
        os_log_type_t v144 = sub_16C50();
        if (!sub_16BA4(v144))
        {

          sub_16DA0();
          goto LABEL_20;
        }

        char v145 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v145);
        sub_16B44( &dword_0,  (os_log_s *)v4,  (os_log_type_t)v24,  "NLv4IntentOnly parse received is NOT valid alarm input: not able to get alarmTask",  v41);
        sub_16AA8((uint64_t)v41);
        sub_16DA0();
        goto LABEL_31;
      }

      if (v42 == enum case for Parse.uso(_:))
      {
        sub_16E20();
        uint64_t v87 = v153;
        uint64_t v88 = v154;
        sub_17338(v153, (uint64_t)v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 32));
        sub_17B0C();
        uint64_t v89 = sub_179DC();
        uint64_t v90 = *(void *)(v148 + 8);
        sub_17974();
        uint64_t v91 = *(void *)(v89 + 16);
        if (v91)
        {
          uint64_t v158 = v90;
          sub_179E4();
          uint64_t v93 = *(void *)(v92 + 72);
          uint64_t v94 = *(uint64_t (**)(uint64_t, uint64_t, uint8_t *))(v92 + 16);
          sub_16FD0();
          uint64_t v95 = v161;
          while (1)
          {
            uint64_t v96 = sub_17464(v95, (uint64_t)v24);
            char v97 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v96);
            uint64_t v98 = v160;
            uint64_t v99 = sub_17464(v160, v95);
            uint64_t v100 = (v97 & 1) != 0 ? 1LL : Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v99);
            uint64_t v101 = v159;
            uint64_t v102 = v98;
            uint64_t v103 = v164;
            sub_16DE4(v102);
            uint64_t v104 = v94(v101, v95, v103);
            if ((v100 & 1) != 0) {
              break;
            }
            uint64_t v100 = v101;
            char v105 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v104);
            uint64_t v106 = v101;
            char v107 = v105;
            sub_16DE4(v106);
            uint64_t v108 = sub_1746C();
            if ((v107 & 1) != 0) {
              goto LABEL_60;
            }
            char v109 = Siri_Nlu_External_UserDialogAct.hasWantedToProceed.getter(v108);
            sub_16DE4(v100);
            sub_16DE4(v95);
            if ((v109 & 1) != 0) {
              goto LABEL_61;
            }
            v24 += v93;
            if (!--v91)
            {
              sub_16C88(v89);
              uint64_t v87 = v153;
              uint64_t v88 = v154;
              goto LABEL_52;
            }
          }

          sub_16DE4(v101);
          sub_1746C();
LABEL_60:
          sub_16DE4(v100);
          sub_16DE4(v95);
LABEL_61:
          sub_16C88(v89);
          (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v153, v155);
          goto LABEL_20;
        }

        sub_16D58();
LABEL_52:
        uint64_t v134 = v147;
        uint64_t v135 = sub_17B0C();
        uint64_t v136 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v135);
        sub_17974();
        if (v136)
        {
          sub_134D0(v136);
          sub_16FD8();
          sub_16D0C(v87, *(uint64_t (**)(uint64_t, uint64_t))(v88 + 8));
          goto LABEL_20;
        }

        if (qword_D2F80 != -1) {
          swift_once(&qword_D2F80, sub_AB1C);
        }
        uint64_t v137 = sub_16C80();
        sub_16CD0(v137, (uint64_t)qword_D36D0);
        os_log_type_t v138 = sub_16B4C();
        if (sub_16ACC(v138))
        {
          uint64_t v139 = (_WORD *)sub_16AC4(2LL);
          sub_16BEC(v139);
          sub_16ADC( &dword_0,  v140,  v141,  "NLv4IntentOnly parse received is NOT valid alarm input: not able to get alarmTask");
          sub_16AA8(v134);
        }

        uint64_t v132 = sub_17660();
      }

      else
      {
        if (qword_D2F80 != -1) {
          swift_once(&qword_D2F80, sub_AB1C);
        }
        uint64_t v110 = sub_16C80();
        uint64_t v111 = (os_log_s *)sub_26F0(v110, (uint64_t)qword_D36D0);
        uint64_t v113 = v149;
        uint64_t v112 = v150;
        uint64_t v114 = sub_16ED4(v149, (uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v150 + 16));
        Logger.logObject.getter(v114, v115, v116, v117, v118, v119, v120, v121);
        os_log_type_t v122 = sub_176A8();
        if (os_log_type_enabled(v111, v122))
        {
          uint64_t v123 = (uint8_t *)sub_16AC4(12LL);
          uint64_t v124 = sub_16AC4(32LL);
          v165[0] = v124;
          *(_DWORD *)uint64_t v123 = 136315138;
          uint64_t v163 = v123 + 4;
          uint64_t v164 = v123;
          Input.parse.getter();
          uint64_t v125 = sub_17760(v34);
          uint64_t v127 = sub_3D10(v125, v126, v165);
          uint64_t v128 = sub_179F8(v127);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v128, v129, v163, v123 + 12);
          sub_16C48();
          (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v113, v151);
          uint64_t v130 = v164;
          sub_16BD0(&dword_0, v111, v122, "Parse received is NOT valid alarm input: %s", v164);
          sub_16BB4(v124);
          sub_16AA8(v124);
          sub_16AA8((uint64_t)v130);
        }

        else
        {
          sub_16E7C(v113, *(uint64_t (**)(uint64_t, uint64_t))(v112 + 8));
        }

        uint64_t v131 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
        uint64_t v132 = (uint64_t)v37;
        uint64_t v133 = v30;
      }

      v131(v132, v133);
      goto LABEL_20;
    }

    sub_16E20();
    uint64_t v43 = sub_26B0(&qword_D3768);
    swift_release(*(void *)&v37[*(int *)(v43 + 48)]);
  }

  uint64_t v44 = sub_173E8();
  uint64_t v47 = sub_16ED4(v44, v45, v46);
  NLIntent.domainNode.getter(v47);
  sub_16E7C((uint64_t)v41, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  uint64_t v48 = type metadata accessor for NonTerminalIntentNode(0LL);
  uint64_t v49 = sub_17B88();
  uint64_t v51 = sub_16BBC(v49, v50, v48);
  if (!v60)
  {
    uint64_t v57 = NonTerminalIntentNode.ontologyNodeName.getter(v51);
    uint64_t v59 = v58;
    sub_16D0C(v2, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8LL));
    BOOL v60 = v57 == 0x6D72616C61LL && v59 == 0xE500000000000000LL;
    if (v60 || (sub_17758(v57, v59, 0x6D72616C61LL, 0xE500000000000000LL) & 1) != 0)
    {
      sub_16D58();
      goto LABEL_20;
    }

    if (qword_D2F80 != -1) {
      swift_once(&qword_D2F80, sub_AB1C);
    }
    uint64_t v70 = sub_16C80();
    uint64_t v4 = (void *)sub_26F0(v70, (uint64_t)qword_D36D0);
    uint64_t v71 = sub_16FD0();
    Logger.logObject.getter(v71, v72, v73, v74, v75, v76, v77, v78);
    os_log_type_t v79 = sub_16C50();
    if (!sub_16D30(v79))
    {

      sub_16C88(v59);
      goto LABEL_20;
    }

    char v80 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v81 = sub_16AC4(32LL);
    v165[0] = v81;
    *(_DWORD *)char v80 = 136315138;
    uint64_t v82 = sub_16FD0();
    uint64_t v84 = sub_17458(v82, v83, v165);
    uint64_t v85 = sub_179F8(v84);
    sub_176B0(v85, v86, (uint64_t)(v80 + 4));
    sub_17578();
    sub_16BD0( &dword_0,  (os_log_s *)v4,  (os_log_type_t)0x61u,  "NLv3IntentPlusServerConversion parse received is NOT a valid alarm input: alarm flow received unexpected domain %s",  v80);
    sub_16BB4(v81);
    sub_16AA8(v81);
    sub_16AA8((uint64_t)v80);
LABEL_31:

    goto LABEL_20;
  }

  sub_17BA4(v51, &qword_D3778);
  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v52 = sub_16C80();
  sub_16CD0(v52, (uint64_t)qword_D36D0);
  os_log_type_t v53 = sub_16B4C();
  if (sub_16ACC(v53))
  {
    uint64_t v54 = (_WORD *)sub_16AC4(2LL);
    sub_16BEC(v54);
    sub_16ADC( &dword_0,  v55,  v56,  "NLv3IntentPlusServerConversion parse received is NOT a valid alarm input: domainNode in nlv3Intent is nil");
    sub_16AA8((uint64_t)v24);
  }

LABEL_20:
  sub_16CB0();
}

void sub_CF8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  v463 = v27;
  sub_26B0(&qword_D37D8);
  sub_16AFC();
  __chkstk_darwin(v28);
  sub_16B30();
  sub_16DCC(v29);
  sub_26B0(&qword_D37E0);
  sub_16AFC();
  __chkstk_darwin(v30);
  sub_16B30();
  sub_16DCC(v31);
  sub_26B0(&qword_D37E8);
  sub_16AFC();
  __chkstk_darwin(v32);
  uint64_t v34 = sub_17238(v33, v420);
  uint64_t v35 = type metadata accessor for Calendar(v34);
  sub_16D00(v35, (uint64_t)&v447);
  uint64_t v423 = v36;
  sub_16AFC();
  __chkstk_darwin(v37);
  sub_16B30();
  uint64_t v422 = v38;
  uint64_t v39 = type metadata accessor for DateComponents(0LL);
  sub_16D00(v39, (uint64_t)&v455);
  uint64_t v427 = v40;
  sub_16AFC();
  __chkstk_darwin(v41);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v42);
  sub_16BF8();
  sub_16DCC(v43);
  sub_26B0(&qword_D3788);
  sub_16AFC();
  __chkstk_darwin(v44);
  sub_16B30();
  uint64_t v46 = sub_16F70(v45);
  sub_16D00(v46, (uint64_t)&v465);
  uint64_t v436 = v47;
  sub_16AFC();
  __chkstk_darwin(v48);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v49);
  sub_16BF8();
  uint64_t v51 = sub_16E6C(v50);
  sub_16D00(v51, (uint64_t)&v467);
  uint64_t v441 = v52;
  sub_16AFC();
  __chkstk_darwin(v53);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v54);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v55);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v56);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v57);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v58);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v59);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v60);
  uint64_t v62 = sub_177E8((uint64_t)&v420 - v61);
  sub_16D00(v62, (uint64_t)&v472);
  uint64_t v450 = v63;
  sub_16AFC();
  __chkstk_darwin(v64);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v65);
  sub_16BF8();
  uint64_t v449 = v66;
  uint64_t v451 = sub_16E50();
  uint64_t v455 = *(void *)(v451 - 8);
  sub_16AFC();
  __chkstk_darwin(v67);
  sub_16AB4();
  __chkstk_darwin(v68);
  sub_16AB4();
  __chkstk_darwin(v69);
  sub_16AB4();
  __chkstk_darwin(v70);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v71);
  uint64_t v73 = (uint8_t *)&v420 - v72;
  uint64_t v74 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  sub_16D00(v74, (uint64_t)&v469[1]);
  v444[1] = v75;
  sub_16AFC();
  __chkstk_darwin(v76);
  sub_16B30();
  uint64_t v78 = sub_16E5C(v77);
  sub_16D00(v78, (uint64_t)&v470 + 8);
  uint64_t v446 = v79;
  sub_16AFC();
  __chkstk_darwin(v80);
  uint64_t v82 = sub_16DA8(v81, v420);
  uint64_t v83 = type metadata accessor for NLIntent(v82);
  sub_16D00(v83, (uint64_t)&a14);
  uint64_t v462 = v84;
  sub_16AFC();
  __chkstk_darwin(v85);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v86);
  sub_16AB4();
  __chkstk_darwin(v87);
  sub_16BF8();
  uint64_t v457 = v88;
  uint64_t v89 = sub_16EF8();
  sub_16D00(v89, (uint64_t)&a16);
  v464 = v90;
  sub_16AFC();
  __chkstk_darwin(v91);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v92);
  sub_16AB4();
  __chkstk_darwin(v93);
  uint64_t v95 = (char *)&v420 - v94;
  sub_26B0(&qword_D37D0);
  sub_16AFC();
  __chkstk_darwin(v96);
  sub_16AB4();
  __chkstk_darwin(v97);
  sub_175DC();
  __chkstk_darwin(v98);
  uint64_t v100 = (char *)&v420 - v99;
  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v101 = sub_16C80();
  uint64_t v102 = (uint8_t *)sub_26F0(v101, (uint64_t)qword_D36D0);
  v460 = v26;
  sub_176C0((uint64_t)v26, v103, &qword_D37D0);
  sub_1716C();
  os_log_type_t v104 = sub_16C50();
  BOOL v105 = sub_16D30(v104);
  if (v105)
  {
    uint64_t v106 = sub_16AC4(12LL);
    v453 = v102;
    uint64_t v102 = (uint8_t *)v106;
    uint64_t v107 = sub_16AC4(32LL);
    v456 = v73;
    uint64_t v108 = v107;
    *(void *)&__int128 v470 = v107;
    *(_DWORD *)uint64_t v102 = 136315138;
    sub_3F88((uint64_t)v100, v22, &qword_D37D0);
    uint64_t v109 = sub_172B8(v22);
    uint64_t v111 = sub_17420(v109, v110);
    uint64_t v112 = sub_16E8C(v111);
    uint64_t v20 = &type metadata for Any;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, v113, v102 + 4, v102 + 12);
    sub_16D68();
    sub_16A3C((uint64_t)v100, &qword_D37D0);
    sub_16BD0(&dword_0, v26, v21, "AlarmFlowUtils.makeIntentFromParse() called with halInfo %s.", v102);
    sub_16BB4(v108);
    uint64_t v114 = v108;
    uint64_t v73 = v456;
    sub_16AA8(v114);
    sub_178AC();
    sub_16AA8(v115);
  }

  else
  {
    sub_17BA4(v105, &qword_D37D0);
  }

  uint64_t v116 = v462;
  uint64_t v117 = v464;
  uint64_t v118 = v463;
  sub_17004((uint64_t)v95, (uint64_t)v463);
  int v119 = sub_16D48((uint64_t)v95, v117[11]);
  if (v119 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_16D48((uint64_t)v95, v117[12]);
    uint64_t v120 = v457;
    uint64_t v121 = v459;
    sub_16ED4(v457, (uint64_t)v95, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 32));
    uint64_t v122 = v458;
    sub_16ED4(v458, v120, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 16));
    uint64_t v123 = sub_1713C();
    sub_16D14(v123);
    uint64_t v124 = (os_log_s *)sub_716E4(v122);
    sub_72428();
    unint64_t v126 = v125;
    sub_715D0();
    uint64_t v127 = (void *)sub_1783C();
    if (!sub_34690(v127, v128, v129))
    {
      sub_16E7C(v120, *(uint64_t (**)(uint64_t, uint64_t))(v116 + 8));
      sub_16FFC();
      goto LABEL_62;
    }

    sub_1716C();
    os_log_type_t v130 = sub_16C50();
    if (sub_16C28(v130))
    {
      uint64_t v131 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)uint64_t v131 = 0;
      sub_16B44(&dword_0, v124, (os_log_type_t)v73, "Get a halIntent from NLv3IntentPlusServerConversion.", v131);
      sub_16AA8((uint64_t)v131);
    }

    sub_16FFC();

    goto LABEL_16;
  }

  if (v119 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v132 = (os_log_s *)v102;
    sub_16D48((uint64_t)v95, v117[12]);
    sub_26B0(&qword_D3768);
    uint64_t v120 = v454;
    uint64_t v121 = v459;
    sub_16ED4(v454, (uint64_t)v95, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 32));
    sub_16ED4(v458, v120, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 16));
    uint64_t v133 = sub_1713C();
    sub_16D14(v133);
    uint64_t v134 = sub_17A38();
    uint64_t v135 = (void *)Parse.ServerConversion.siriKitIntent.getter(v134);
    sub_715D0();
    if (!sub_34690(v135, (uint64_t)v460, v136 == 0))
    {
      sub_16E7C(v120, *(uint64_t (**)(uint64_t, uint64_t))(v116 + 8));
      sub_16FFC();
      swift_release(v134);
      goto LABEL_62;
    }

    sub_17A28();
    os_log_type_t v137 = sub_16B4C();
    if (sub_16ACC(v137))
    {
      os_log_type_t v138 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)os_log_type_t v138 = 0;
      sub_16B44(&dword_0, v132, (os_log_type_t)v134, "Get a halIntent from NLv3IntentPlusServerConversion.", v138);
      sub_16AA8((uint64_t)v138);
    }

    sub_16FFC();

    swift_release(v134);
LABEL_16:
    uint64_t v139 = *(void (**)(uint64_t, uint64_t))(v116 + 8);
    uint64_t v140 = v120;
LABEL_17:
    uint64_t v141 = v121;
LABEL_18:
    v139(v140, v141);
    goto LABEL_62;
  }

  if (v119 == enum case for Parse.directInvocation(_:))
  {
    v453 = v102;
    sub_16D48((uint64_t)v95, v117[12]);
    sub_171E8();
    uint64_t v142 = sub_173E8();
    uint64_t v121 = v451;
    uint64_t v145 = sub_16ED4(v142, v143, v144);
    v456 = v73;
    uint64_t v146 = Parse.DirectInvocation.identifier.getter(v145);
    uint64_t v148 = v147;
    uint64_t v149 = v450;
    uint64_t v150 = *(uint64_t (**)(void))(v450 + 104);
    sub_17AC4((uint64_t)&v471[8]);
    sub_17AB8();
    uint64_t v151 = v150();
    uint64_t v152 = DirectInvocationUtils.Alarm.URI.rawValue.getter(v151);
    uint64_t v154 = v153;
    uint64_t v155 = *(void (**)(uint64_t, char *))(v149 + 8);
    v155(v116, v95);
    BOOL v156 = v146 == v152 && v148 == (os_log_s *)v154;
    if (v156)
    {
      sub_16C88((uint64_t)v148);
    }

    else
    {
      sub_17628();
      LOBYTE(v160) = sub_17758(v157, v158, v159, v154);
      sub_16C48();
      uint64_t v161 = sub_16D58();
      if ((v160 & 1) == 0)
      {
        uint64_t v162 = (uint64_t)v456;
        uint64_t v163 = (uint64_t)v456;
        uint64_t v164 = Parse.DirectInvocation.userData.getter(v161);
        if (v164)
        {
          uint64_t v165 = v164;
          uint64_t v166 = v441;
          uint64_t v167 = sub_171F4();
          uint64_t v160 = v442;
          v463 = (void (*)(void, void, void))v168;
          uint64_t v169 = v168(v167);
          uint64_t v148 = (os_log_s *)DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v169);
          uint64_t v171 = v170;
          v464 = *(uint64_t (***)(uint64_t, uint64_t))(v166 + 8);
          ((void (*)(uint64_t, void *))v464)(v163, v160);
          sub_288F4((uint64_t)v148, v171, v165, &v470);
          uint64_t v172 = sub_17B9C();
          if (*(void *)&v471[8])
          {
            uint64_t v160 = &type metadata for Any;
            if ((sub_16CF0(v172, v173, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) == 0)
            {
              sub_16FF4();
              goto LABEL_57;
            }

            uint64_t v462 = v165;
            sub_17A50();
            uint64_t v174 = sub_17830();
            uint64_t v175 = v438;
            sub_16BBC(v174, v176, (uint64_t)v438);
            if (!v156)
            {
              uint64_t v226 = v436;
              uint64_t v227 = (uint64_t)v148;
              v228 = v437;
              sub_16E84((uint64_t)v437, v227, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v436 + 32));
              sub_16E84(v435, (uint64_t)v228, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v226 + 16));
              uint64_t v229 = sub_173E8();
              uint64_t v231 = v230(v229);
              if ((_DWORD)v231 != enum case for AlarmNLv4Constants.AlarmVerb.unknown(_:)
                && (_DWORD)v231 != enum case for AlarmNLv4Constants.AlarmVerb.checkExistence(_:))
              {
                if ((_DWORD)v231 == enum case for AlarmNLv4Constants.AlarmVerb.create(_:))
                {
                  uint64_t AlarmIntent = (objc_class *)type metadata accessor for CreateAlarmIntent(0LL);
                  id v252 = sub_17500(objc_allocWithZone(AlarmIntent));
                  uint64_t v253 = Parse.DirectInvocation.identifier.getter(v252);
                  uint64_t v255 = v254;
                  uint64_t v256 = v433;
                  uint64_t v257 = v452;
                  uint64_t v258 = ((uint64_t (*)(os_log_s *, void, uint64_t))v150)( v433,  enum case for DirectInvocationUtils.Alarm.URI.undo(_:),  v452);
                  uint64_t v259 = DirectInvocationUtils.Alarm.URI.rawValue.getter(v258);
                  uint64_t v261 = v260;
                  uint64_t v262 = sub_176E8();
                  ((void (*)(uint64_t))v155)(v262);
                  if (v253 == v259 && v255 == (void)v261)
                  {
                    sub_16C88(v255);
                    sub_178AC();
                  }

                  else
                  {
                    uint64_t v257 = sub_17758(v253, v255, v259, (uint64_t)v261);
                    swift_bridgeObjectRelease(v261);
                    sub_16F40();
                    sub_178AC();
                    if ((v257 & 1) == 0)
                    {
                      uint64_t v264 = v121;
                      uint64_t v265 = v455;
                      uint64_t v266 = *(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(v455 + 16);
                      uint64_t v267 = v431;
                      uint64_t v268 = v266(v431, v456, v264);
                      Logger.logObject.getter(v268, v269, v270, v271, v272, v273, v274, v275);
                      os_log_type_t v276 = sub_16B4C();
                      if (sub_16C38(v276))
                      {
                        uint64_t v277 = (uint8_t *)sub_16AC4(12LL);
                        uint64_t v278 = sub_16AC4(32LL);
                        *(void *)&__int128 v470 = v278;
                        *(_DWORD *)uint64_t v277 = 136315138;
                        v461 = v277 + 4;
                        uint64_t v279 = sub_179C8((uint64_t)v466);
                        ((void (*)(uint64_t))v266)(v279);
                        uint64_t v280 = sub_17760(v267);
                        uint64_t v282 = sub_17420(v280, v281);
                        uint64_t v283 = sub_16E8C(v282);
                        sub_16F1C(v283, v284, (uint64_t)v461);
                        sub_16D68();
                        uint64_t v285 = *(void (**)(uint64_t, uint64_t))(v455 + 8);
                        v285(v267, v264);
                        sub_16BD0( &dword_0,  (os_log_s *)v257,  (os_log_type_t)v255,  "Making CreateAlarmIntent from directionInvocation: %s",  v277);
                        sub_16BB4(v278);
                        sub_16AA8(v278);
                        sub_16AA8((uint64_t)v277);
                      }

                      else
                      {
                        uint64_t v285 = *(void (**)(uint64_t, uint64_t))(v265 + 8);
                        v285(v267, v264);
                      }

                      uint64_t v353 = (uint64_t (*)(uint64_t))v463;
                      v463(v432, enum case for DirectInvocationUtils.Alarm.UserInfoKey.hour(_:), v442);
                      sub_175EC();
                      uint64_t v354 = sub_17B6C();
                      uint64_t v355 = v464;
                      ((void (*)(uint64_t))v464)(v354);
                      sub_17340();
                      uint64_t v356 = sub_16C48();
                      if (*(void *)&v471[8])
                      {
                        if ((sub_16CF0( v356,  v357,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Int) & 1) != 0)
                        {
                          uint64_t v257 = v468;
                          uint64_t v358 = sub_175D0((uint64_t)&v448);
                          uint64_t v359 = v353(v358);
                          DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v359);
                          uint64_t v360 = sub_174AC();
                          ((void (*)(uint64_t))v355)(v360);
                          uint64_t v361 = sub_17A70();
                          sub_288F4(v361, v363, *(void *)(v362 - 256), v364);
                          uint64_t v365 = sub_16F40();
                          if (*(void *)&v471[8])
                          {
                            uint64_t v367 = sub_16CF0( v365,  v366,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Int);
                            if ((v367 & 1) != 0)
                            {
                              uint64_t v368 = v468;
                              uint64_t v369 = v422;
                              static Calendar.current.getter(v367);
                              uint64_t v370 = v421;
                              uint64_t v371 = v424;
                              sub_A40C(v421, 1LL, 1LL, v424);
                              type metadata accessor for TimeZone(0LL);
                              uint64_t v372 = sub_175D0((uint64_t)v444);
                              sub_17508(v372, 1LL, v373, v374);
                              uint64_t v375 = v428;
                              DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v370,  v285,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
                              DateComponents.hour.setter(v257, 0LL);
                              DateComponents.minute.setter(v368, 0LL);
                              sub_17338(v370, v369, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v423 + 16));
                              sub_A40C(v370, 0LL, 1LL, v371);
                              DateComponents.calendar.setter(v370);
                              uint64_t v376 = v426;
                              sub_176D0();
                              sub_1490C();
                              uint64_t v377 = sub_17830();
                              sub_16BBC(v377, v378, v429);
                              if (!v156)
                              {
                                sub_16CC8(v422, *(uint64_t (**)(uint64_t, void))(v423 + 8));
                                sub_16CC8(v428, *(uint64_t (**)(uint64_t, void))(v427 + 8));
                                goto LABEL_167;
                              }

                              sub_16F10();
                              sub_16A3C((uint64_t)v426, &qword_D37D8);
                              sub_16BE4();
                              os_log_type_t v379 = sub_16D40();
                              if (sub_16ACC(v379))
                              {
                                v380 = (_WORD *)sub_16AC4(2LL);
                                sub_16BEC(v380);
                                sub_16ADC( &dword_0,  v381,  v382,  "Failed to get next calendar date from directInvocation payload");
                                sub_16AA8(v368);
                              }

                              sub_16CC8(v422, *(uint64_t (**)(uint64_t, void))(v423 + 8));
                              sub_16CC8(v428, *(uint64_t (**)(uint64_t, void))(v427 + 8));
                              goto LABEL_166;
                            }
                          }

                          else
                          {
                            sub_17230(v365, (uint64_t *)&unk_D4860);
                          }

                          uint64_t v355 = v464;
                          uint64_t v353 = (uint64_t (*)(uint64_t))v463;
                        }
                      }

                      else
                      {
                        sub_17230(v356, (uint64_t *)&unk_D4860);
                      }

                      uint64_t v397 = (uint64_t)v442;
                      ((void (*)(uint64_t, void, void *))v353)( v430,  enum case for DirectInvocationUtils.Alarm.UserInfoKey.dateComponents(_:),  v442);
                      sub_175EC();
                      uint64_t v398 = sub_17B6C();
                      ((void (*)(uint64_t))v355)(v398);
                      sub_17340();
                      uint64_t v399 = sub_16C48();
                      if (*(void *)&v471[8])
                      {
                        if ((sub_16CF0( v399,  v400,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Data) & 1) != 0)
                        {
                          uint64_t v401 = type metadata accessor for JSONDecoder(0LL);
                          sub_16D14(v401);
                          uint64_t v402 = JSONDecoder.init()();
                          sub_16A6C( &qword_D37F8,  (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents,  (uint64_t)&protocol conformance descriptor for DateComponents);
                          sub_17628();
                          uint64_t v375 = v402;
                          dispatch thunk of JSONDecoder.decode<A>(_:from:)(v407, v403, v404, v405, v403, v406);
                          swift_release(v402);
                          sub_17B60();
                          v426 = (void *)v425;
LABEL_167:
                          sub_171E8();
                          uint64_t v413 = sub_171F4();
                          sub_176FC(v413, (uint64_t)v426, v414);
                          Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
                          sub_1718C((uint64_t)isa, "setTime:");

                          sub_17094(enum case for DirectInvocationUtils.Alarm.UserInfoKey.label(_:), (uint64_t)v445);
                          sub_175EC();
                          sub_173D0();
                          sub_288F4((uint64_t)isa, v375, v462, &v470);
                          sub_16C48();
                          uint64_t v416 = sub_16D58();
                          if (*(void *)&v471[8])
                          {
                            uint64_t v418 = sub_16CF0( v416,  v417,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String);
                            if ((v418 & 1) != 0)
                            {
                              NSString v419 = String._bridgeToObjectiveC()();
                              uint64_t v418 = sub_16C48();
LABEL_172:
                              sub_1718C(v418, "setLabel:");

                              sub_16CC8(v428, *(uint64_t (**)(uint64_t, void))(v427 + 8));
                              sub_16B54();
                              sub_17428((uint64_t)v456, (uint64_t)&v471[24]);
                              goto LABEL_62;
                            }
                          }

                          else
                          {
                            sub_17230(v416, (uint64_t *)&unk_D4860);
                          }

                          NSString v419 = 0LL;
                          goto LABEL_172;
                        }

                        sub_16F10();
                      }

                      else
                      {
                        uint64_t v408 = sub_16F10();
                        sub_17230(v408, (uint64_t *)&unk_D4860);
                      }

                      sub_16BE4();
                      os_log_type_t v409 = sub_16D40();
                      if (sub_16ACC(v409))
                      {
                        uint64_t v410 = (_WORD *)sub_16AC4(2LL);
                        sub_16BEC(v410);
                        sub_16ADC(&dword_0, v411, v412, "Unexpected type in userData of directInvocation");
                        sub_16AA8(v397);
                      }

LABEL_166:
                      sub_16B54();
                      sub_17428((uint64_t)v456, (uint64_t)&v471[24]);
                      goto LABEL_62;
                    }
                  }

                  sub_1716C();
                  os_log_type_t v295 = sub_16C50();
                  if (sub_16BA4(v295))
                  {
                    uint64_t v296 = (_WORD *)sub_16AC4(2LL);
                    sub_16CE4(v296);
                    sub_16B44( &dword_0,  v256,  (os_log_type_t)v255,  "Making CreateAlarmIntent from undo directInvocation",  v261);
                    sub_16AA8((uint64_t)v261);
                  }

                  sub_17B00((uint64_t)&v459);
                  uint64_t v297 = v442;
                  uint64_t v298 = sub_171D0();
                  DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v298);
                  uint64_t v300 = v299;
                  ((void (*)(uint64_t, void *))v464)(v259, v297);
                  uint64_t v301 = sub_17A70();
                  sub_288F4(v301, v303, *(void *)(v302 - 256), v304);
                  sub_16F40();
                  uint64_t v305 = sub_16C48();
                  if (*(void *)&v471[8])
                  {
                    if ((sub_16CF0(v305, v306, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data) & 1) != 0)
                    {
                      __int128 v307 = v468;
                      uint64_t v308 = type metadata accessor for JSONDecoder(0LL);
                      sub_16D14(v308);
                      JSONDecoder.init()();
                      uint64_t v309 = sub_26B0(&qword_D3800);
                      unint64_t v310 = sub_16910();
                      uint64_t v311 = v309;
                      uint64_t v312 = v309;
                      uint64_t v300 = 0LL;
                      dispatch thunk of JSONDecoder.decode<A>(_:from:)( &v470,  v311,  v307,  *((void *)&v307 + 1),  v312,  v310);
                      sub_17324();
                      sub_38F94(v470, (uint64_t)&v465);
                      sub_16C48();
                      sub_169F4((uint64_t)&v465, (uint64_t)&v468);
                      if (*((void *)&v469[0] + 1))
                      {
                        __int128 v470 = v468;
                        *(_OWORD *)v471 = v469[0];
                        *(_OWORD *)&v471[9] = *(_OWORD *)((char *)v469 + 9);
                        sub_22750(&v470);
                        sub_17430();

                        sub_16B54();
                        uint64_t v395 = sub_16EA8();
                        sub_16E7C(v395, v396);
                        goto LABEL_62;
                      }

                      sub_17430();
                      sub_17294();
                      sub_178AC();
                      goto LABEL_102;
                    }
                  }

                  else
                  {
                    sub_17230(v305, (uint64_t *)&unk_D4860);
                  }

                  sub_17294();
LABEL_102:
                  sub_1716C();
                  os_log_type_t v333 = sub_16D40();
                  if (sub_16ACC(v333))
                  {
                    uint64_t v334 = (_WORD *)sub_16AC4(2LL);
                    sub_16BEC(v334);
                    sub_16ADC(&dword_0, v335, v336, "Missing alarmSnapshot in userData from directInvocation");
                    sub_16AA8(v300);
                  }

                  sub_16B54();
                  uint64_t v211 = *(void (**)(uint64_t))(v253 + 8);
                  uint64_t v210 = (uint64_t)AlarmIntent;
                  goto LABEL_53;
                }

                if ((_DWORD)v231 == enum case for AlarmNLv4Constants.AlarmVerb.delete(_:))
                {
                  sub_16BE4();
                  os_log_type_t v286 = sub_16B4C();
                  if (sub_16ACC(v286))
                  {
                    uint64_t v287 = (_WORD *)sub_16AC4(2LL);
                    sub_16BEC(v287);
                    sub_16ADC(&dword_0, v288, v289, "Making DeleteAlarmIntent from directInvocation");
                    sub_16AA8((uint64_t)&type metadata for Any);
                  }

                  sub_177A0();
                  uint64_t v291 = v290;
                  sub_16F40();
                  if (v291)
                  {
                    id v292 = objc_allocWithZone((Class)type metadata accessor for DeleteAlarmIntent(0LL));
                    sub_17500(v292);
                    sub_17200();
                    id v293 = sub_16E30();
                    uint64_t v294 = sub_16D58();
                    sub_17180(v294, "setAlarmSearch:");

                    sub_175C0((uint64_t)v437, *(uint64_t (**)(uint64_t, uint64_t))(v436 + 8));
                    uint64_t v140 = sub_16EA8();
                    goto LABEL_17;
                  }

                  goto LABEL_140;
                }

                if ((_DWORD)v231 == enum case for AlarmNLv4Constants.AlarmVerb.disable(_:))
                {
LABEL_91:
                  Logger.logObject.getter(v231, v232, v233, v234, v235, v236, v237, v238);
                  os_log_type_t v313 = sub_16B4C();
                  if (sub_16ACC(v313))
                  {
                    uint64_t v314 = (_WORD *)sub_16AC4(2LL);
                    sub_16BEC(v314);
                    sub_16ADC(&dword_0, v315, v316, "Making disable ChangeAlarmStatusIntent from directInvocation");
                    sub_16AA8((uint64_t)&type metadata for Any);
                  }

                  sub_177B0();
                  if (v317)
                  {
                    id v318 = objc_allocWithZone((Class)sub_17704());
                    sub_17500(v318);
                    sub_17200();
                    id v319 = sub_16E30();
                    uint64_t v320 = sub_16D58();
                    sub_17180(v320, "setAlarmSearch:");

                    [v175 setOperation:2];
                    uint64_t v321 = sub_171D0();
                    DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v321);
                    uint64_t v323 = v322;
                    uint64_t v324 = sub_17660();
                    ((void (*)(uint64_t))v464)(v324);
                    sub_174EC();
                    sub_16C48();
                    uint64_t v325 = sub_1743C();
                    if (*(void *)&v471[8])
                    {
                      if ((sub_16CF0(v325, v326, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Bool) & 1) != 0)
                      {
                        sub_16BE4();
                        os_log_type_t v327 = sub_16C50();
                        if (sub_16BA4(v327))
                        {
                          uint64_t v328 = (float *)sub_16AC4(8LL);
                          sub_170D4(v328, 1.5047e-36);
                          sub_17590(&dword_0, v329, v330, "Setting handleSilently = %{BOOL}d");
                          sub_16AA8((uint64_t)v328);
                        }

                        sub_17B80(v331, (unint64_t *)&qword_D37F0, &OBJC_CLASS___NSNumber_ptr);
                        Class v332 = sub_17A44().super.super.isa;
                        sub_1718C((uint64_t)v332, "setHandleSilently:");
                      }

                      uint64_t v121 = v451;
                    }

                    else
                    {
                      sub_17230(v325, (uint64_t *)&unk_D4860);
                    }

                    sub_17294();
                    sub_16B54();
                    uint64_t v139 = *(void (**)(uint64_t, uint64_t))(v171 + 8);
                    uint64_t v140 = v166;
                    goto LABEL_17;
                  }

                  sub_1743C();
LABEL_140:
                  sub_1702C((uint64_t)v437, *(uint64_t (**)(uint64_t, uint64_t))(v436 + 8));
                  uint64_t v210 = sub_16EA8();
                  goto LABEL_53;
                }

                if ((_DWORD)v231 == enum case for AlarmNLv4Constants.AlarmVerb.enable(_:))
                {
LABEL_106:
                  Logger.logObject.getter(v231, v232, v233, v234, v235, v236, v237, v238);
                  os_log_type_t v337 = sub_16B4C();
                  if (sub_16ACC(v337))
                  {
                    uint64_t v338 = (_WORD *)sub_16AC4(2LL);
                    sub_16BEC(v338);
                    sub_16ADC(&dword_0, v339, v340, "Making enable ChangeAlarmStatusIntent from directInvocation");
                    sub_16AA8((uint64_t)&type metadata for Any);
                  }

                  sub_177B0();
                  if (v341)
                  {
                    id v342 = objc_allocWithZone((Class)sub_17704());
                    sub_17500(v342);
                    sub_17200();
                    id v343 = sub_16E30();
                    uint64_t v344 = sub_16D58();
                    sub_17180(v344, "setAlarmSearch:");

                    [v175 setOperation:1];
                    sub_17094(enum case for DirectInvocationUtils.Alarm.UserInfoKey.handleSilently(_:), (uint64_t)&v449);
                    sub_175EC();
                    sub_173D0();
                    sub_174EC();
                    sub_16C48();
                    uint64_t v345 = sub_1743C();
                    if (*(void *)&v471[8])
                    {
                      if ((sub_16CF0(v345, v346, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Bool) & 1) != 0)
                      {
                        sub_16BE4();
                        os_log_type_t v347 = sub_16C50();
                        if (sub_16BA4(v347))
                        {
                          uint64_t v348 = (float *)sub_16AC4(8LL);
                          sub_170D4(v348, 1.5047e-36);
                          sub_17590(&dword_0, v349, v350, "Setting handleSilently = %{BOOL}d");
                          sub_16AA8((uint64_t)v348);
                        }

                        sub_17B80(v351, (unint64_t *)&qword_D37F0, &OBJC_CLASS___NSNumber_ptr);
                        Class v352 = sub_17A44().super.super.isa;
                        sub_1718C((uint64_t)v352, "setHandleSilently:");
                      }

                      goto LABEL_155;
                    }

                    goto LABEL_154;
                  }

                  sub_1743C();
LABEL_147:
                  sub_16B54();
                  uint64_t v210 = sub_173A0();
                  goto LABEL_53;
                }

                if ((_DWORD)v231 != enum case for AlarmNLv4Constants.AlarmVerb.read(_:)
                  && (_DWORD)v231 != enum case for AlarmNLv4Constants.AlarmVerb.request(_:)
                  && (_DWORD)v231 != enum case for AlarmNLv4Constants.AlarmVerb.snooze(_:)
                  && (_DWORD)v231 != enum case for AlarmNLv4Constants.AlarmVerb.summarise(_:))
                {
                  if ((_DWORD)v231 == enum case for AlarmNLv4Constants.AlarmVerb.update(_:))
                  {
                    sub_16BE4();
                    os_log_type_t v386 = sub_16B4C();
                    if (sub_16ACC(v386))
                    {
                      uint64_t v387 = (_WORD *)sub_16AC4(2LL);
                      sub_16BEC(v387);
                      sub_16ADC(&dword_0, v388, v389, "Making update UpdateAlarmIntent from directInvocation");
                      sub_16AA8((uint64_t)&type metadata for Any);
                    }

                    sub_177A0();
                    uint64_t v391 = v390;
                    sub_16F40();
                    if (v391)
                    {
                      id v392 = objc_allocWithZone((Class)type metadata accessor for UpdateAlarmIntent(0LL));
                      sub_17500(v392);
                      sub_17200();
                      id v393 = sub_16E30();
                      uint64_t v394 = sub_16D58();
                      sub_17180(v394, "setAlarmSearch:");

LABEL_155:
                      sub_16B54();
                      uint64_t v140 = sub_173A0();
                      goto LABEL_18;
                    }

                    goto LABEL_147;
                  }

                  uint64_t v121 = v451;
                  uint64_t v175 = v438;
                  if ((_DWORD)v231 != enum case for AlarmNLv4Constants.AlarmVerb.noVerb(_:))
                  {
                    if ((_DWORD)v231 == enum case for AlarmNLv4Constants.AlarmVerb.close(_:)) {
                      goto LABEL_91;
                    }
                    if ((_DWORD)v231 != enum case for AlarmNLv4Constants.AlarmVerb.resume(_:))
                    {
                      if ((_DWORD)v231 == enum case for AlarmNLv4Constants.AlarmVerb.stop(_:)) {
                        goto LABEL_91;
                      }
                      uint64_t v345 = _diagnoseUnexpectedEnumCase<A>(type:)(v438, v438);
                      __break(1u);
LABEL_154:
                      sub_17230(v345, (uint64_t *)&unk_D4860);
                      goto LABEL_155;
                    }

                    goto LABEL_106;
                  }
                }
              }

              sub_16F10();
              uint64_t v240 = v434;
              uint64_t v241 = (uint64_t)v456;
              sub_1705C(v434, (uint64_t)v456);
              sub_16BE4();
              os_log_type_t v242 = sub_16D40();
              if (sub_16C38(v242))
              {
                uint64_t v243 = (uint8_t *)sub_16AC4(12LL);
                uint64_t v244 = sub_16AC4(32LL);
                *(void *)&__int128 v470 = v244;
                *(_DWORD *)uint64_t v243 = 136315138;
                uint64_t v245 = sub_17AC4((uint64_t)v466);
                sub_1705C(v245, v240);
                uint64_t v246 = sub_16F24(v241);
                uint64_t v248 = sub_17420(v246, v247);
                uint64_t v249 = sub_16E8C(v248);
                sub_16F1C(v249, v250, (uint64_t)(v243 + 4));
                sub_16EDC();
                sub_1755C(v240);
                sub_16BD0( &dword_0,  (os_log_s *)v228,  (os_log_type_t)&type metadata for Any,  "Received unhandled verb in directInvocation in FlowStrategy: %s",  v243);
                sub_16BB4(v244);
                sub_16AA8(v244);
                sub_16AA8((uint64_t)v243);

                sub_16B54();
                goto LABEL_59;
              }

              sub_173C0(v240);
              sub_1702C((uint64_t)v437, *(uint64_t (**)(uint64_t, uint64_t))(v436 + 8));
              uint64_t v225 = v241;
              goto LABEL_61;
            }

            sub_16F10();
            uint64_t v177 = &qword_D3788;
            char v178 = v148;
          }

          else
          {
            sub_16FF4();
            uint64_t v177 = (uint64_t *)&unk_D4860;
            char v178 = (os_log_s *)&v470;
          }

          sub_16A3C((uint64_t)v178, v177);
        }

LABEL_57:
        uint64_t v212 = v455;
        uint64_t v213 = v443;
        sub_1705C(v443, v162);
        sub_16BE4();
        os_log_type_t v214 = sub_16D40();
        if (sub_16C38(v214))
        {
          uint64_t v215 = (uint8_t *)sub_16AC4(12LL);
          uint64_t v216 = sub_16AC4(32LL);
          *(void *)&__int128 v470 = v216;
          *(_DWORD *)uint64_t v215 = 136315138;
          v464 = (uint64_t (**)(uint64_t, uint64_t))(v215 + 4);
          uint64_t v217 = v439;
          sub_1705C(v439, v213);
          uint64_t v218 = sub_16F24(v217);
          uint64_t v220 = sub_17420(v218, v219);
          uint64_t v221 = sub_16E8C(v220);
          sub_16F1C(v221, v222, (uint64_t)v464);
          sub_16EDC();
          uint64_t v223 = *(void (**)(uint64_t))(v212 + 8);
          uint64_t v224 = sub_17174();
          v223(v224);
          sub_16BD0( &dword_0,  v148,  (os_log_type_t)v160,  "Received unexpected directInvocation in FlowStrategy: %s",  v215);
          sub_16BB4(v216);
          sub_16AA8(v216);
          sub_16AA8((uint64_t)v215);

LABEL_59:
          sub_1755C((uint64_t)v456);
          goto LABEL_62;
        }

        sub_173C0(v213);
        uint64_t v225 = v162;
LABEL_61:
        sub_173C0(v225);
        goto LABEL_62;
      }
    }

    sub_16EE4((uint64_t)v460, &qword_D37D0, (uint64_t)v471);
    uint64_t v182 = sub_175B8();
    uint64_t v183 = sub_17318();
    uint64_t v185 = sub_16BBC(v183, v184, v182);
    uint64_t v186 = (uint64_t)v456;
    if (v156)
    {
      uint64_t v187 = sub_16E7C((uint64_t)v456, *(uint64_t (**)(uint64_t, uint64_t))(v455 + 8));
      sub_17018(v187, &qword_D37D0);
      goto LABEL_62;
    }

    HALAlarmDeviceContext.toDismissAlarmIntent.getter(v185);
    sub_16E7C(v186, *(uint64_t (**)(uint64_t, uint64_t))(v455 + 8));
    uint64_t v140 = sub_176E8();
    goto LABEL_18;
  }

  if (v119 == enum case for Parse.NLv4IntentOnly(_:))
  {
    sub_16D48((uint64_t)v95, v117[12]);
    uint64_t v179 = sub_1783C();
    sub_53F40(v179, v180);
    if (v181)
    {
      sub_16DA0();
    }

    else
    {
      sub_1716C();
      os_log_type_t v204 = sub_17714();
      if (sub_16BA4(v204))
      {
        uint64_t v205 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v205);
        sub_16B44(&dword_0, v26, (os_log_type_t)v20, "Failed to parse alarm intent from userDialogAct", v73);
        sub_16AA8((uint64_t)v73);
      }

      sub_16DA0();
    }
  }

  else
  {
    if (v119 == enum case for Parse.uso(_:))
    {
      sub_16D48((uint64_t)v95, v117[12]);
      sub_17338(v445[1], (uint64_t)v95, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v446 + 32));
      sub_1771C();
      os_log_type_t v188 = sub_1783C();
      sub_54044(v188, v189);
      uint64_t v191 = v190;
      uint64_t v192 = sub_17738();
      sub_16CC8(v192, v193);
      if (v191)
      {
        uint64_t v140 = sub_174AC();
        goto LABEL_18;
      }

      sub_1716C();
      os_log_type_t v206 = sub_16D40();
      if (sub_16ACC(v206))
      {
        uint64_t v207 = (_WORD *)sub_16AC4(2LL);
        sub_16BEC(v207);
        sub_16ADC(&dword_0, v208, v209, "Failed to parse alarm intent from userDialogAct");
        sub_16AA8((uint64_t)v20);
      }

      uint64_t v210 = sub_174AC();
LABEL_53:
      v211(v210);
      goto LABEL_62;
    }

    uint64_t v194 = sub_17AC4((uint64_t)&v468 + 8);
    sub_17004(v194, (uint64_t)v118);
    sub_1716C();
    os_log_type_t v195 = sub_16D40();
    if (sub_16CA0(v195))
    {
      uint64_t v196 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v197 = sub_16AC4(32LL);
      *(void *)&__int128 v470 = v197;
      *(_DWORD *)uint64_t v196 = 136315138;
      v463 = (void (*)(void, void, void))(v196 + 4);
      uint64_t v198 = v440;
      sub_17004(v440, v116);
      uint64_t v199 = sub_17A0C(v198);
      uint64_t v201 = sub_17420(v199, v200);
      uint64_t v202 = sub_16E8C(v201);
      sub_17B18(v202, v203, (uint64_t)v463);
      sub_16D68();
      sub_174C8(v116);
      sub_16BD0(&dword_0, (os_log_s *)v118, (os_log_type_t)v73, "Received an unsupported input: %s", v196);
      sub_16BB4(v197);
      sub_16AA8(v197);
      sub_16AA8((uint64_t)v196);
    }

    else
    {
      sub_174C8(v116);
    }

    sub_174C8((uint64_t)v95);
  }

LABEL_62:
  sub_16CB0();
}

void sub_EF6C()
{
  os_log_type_t v3 = v2;
  uint64_t v110 = v4;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v108 = *(void *)(v5 - 8);
  uint64_t v109 = v5;
  sub_16AFC();
  __chkstk_darwin(v6);
  uint64_t v102 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_16AF0();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v101 - v9;
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v103 = *(void *)(v11 - 8);
  uint64_t v104 = v11;
  sub_16AFC();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_17134();
  uint64_t v106 = *(void *)(v15 - 8);
  uint64_t v107 = v15;
  sub_16AFC();
  __chkstk_darwin(v16);
  sub_16B30();
  uint64_t v105 = v17;
  sub_16EF8();
  sub_17770();
  __chkstk_darwin(v18);
  sub_17390();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = (uint8_t *)sub_17144();
  uint64_t v23 = *((void *)v22 - 1);
  __chkstk_darwin(v22);
  sub_17540();
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v101 - v26;
  Input.parse.getter(v25);
  int v28 = sub_16D48(v21, v1[11]);
  if (v28 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_16D48(v21, v1[12]);
LABEL_5:
    uint64_t v30 = *(void (**)(uint64_t))(v23 + 32);
    uint64_t v31 = sub_17174();
    v30(v31);
    ((void (*)(uint64_t, char *, uint8_t *))v30)(v0, v27, v22);
    uint64_t v32 = sub_1713C();
    sub_16D14(v32);
    uint64_t v33 = sub_171DC();
    if (qword_D2F80 != -1) {
      swift_once(&qword_D2F80, sub_AB1C);
    }
    uint64_t v34 = sub_16C80();
    sub_26F0(v34, (uint64_t)qword_D36D0);
    uint64_t v35 = sub_172A8(v33);
    Logger.logObject.getter(v35, v36, v37, v38, v39, v40, v41, v42);
    os_log_type_t v43 = sub_16B4C();
    if (os_log_type_enabled((os_log_t)v30, v43))
    {
      uint64_t v44 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v45 = sub_16AC4(32LL);
      uint64_t v111 = v33;
      uint64_t v112 = v45;
      *(_DWORD *)uint64_t v44 = 136315138;
      sub_16A6C(&qword_D3770, type metadata accessor for AlarmNLIntent, (uint64_t)&unk_A6AEC);
      uint64_t v46 = NLIntentWrapper.description.getter(v32);
      uint64_t v111 = sub_17414(v46, v47);
      sub_17BB8((uint64_t)&v111, (uint64_t)&v112, (uint64_t)(v44 + 4));
      sub_16EBC(v33);
      sub_16C48();
      sub_16BD0(&dword_0, (os_log_s *)v30, v43, "validateCancellation: %s", v44);
      sub_16BB4(v45);
      sub_16AA8(v45);
      sub_16AA8((uint64_t)v44);
    }

    else
    {

      sub_16EBC(v33);
    }

    uint64_t v48 = v110;
    sub_715D0();
    sub_17888();
    if (v49)
    {
      sub_17034();
      uint64_t v54 = sub_17830();
      sub_A40C(v54, v55, 1LL, v56);
      sub_16FFC();
      goto LABEL_32;
    }

    static ActionForInput.cancel()();
    sub_16FFC();
    uint64_t v51 = sub_17034();
    uint64_t v52 = v48;
    goto LABEL_12;
  }

  if (v28 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_16D48(v21, v1[12]);
    uint64_t v29 = sub_26B0(&qword_D3768);
    sub_178CC(v29);
    goto LABEL_5;
  }

  if (v28 == enum case for Parse.directInvocation(_:)) {
    goto LABEL_31;
  }
  if (v28 != enum case for Parse.NLv4IntentOnly(_:))
  {
    if (v28 == enum case for Parse.uso(_:))
    {
      sub_16D48(v21, v1[12]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 32))(v105, v21, v107);
      sub_17A30();
      uint64_t v63 = sub_176F4();
      sub_17AD0(v103);
      uint64_t v64 = *(void *)(v63 + 16);
      if (v64)
      {
        sub_17304();
        uint64_t v66 = *(void *)(v65 + 72);
        uint64_t v67 = *(uint64_t (**)(uint64_t))(v65 + 16);
        uint64_t v104 = v63;
        sub_176C8();
        uint64_t v68 = (uint64_t)v14;
        uint64_t v69 = v64;
        do
        {
          uint64_t v70 = sub_1766C();
          uint64_t v72 = sub_17464(v70, v71);
          char v73 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v72);
          uint64_t v74 = *(void (**)(char *, uint64_t))(v108 + 8);
          sub_173C8((uint64_t)v10);
          if ((v73 & 1) != 0)
          {
            sub_16C88(v104);
            if (qword_D2F80 != -1) {
              swift_once(&qword_D2F80, sub_AB1C);
            }
            uint64_t v89 = sub_16C80();
            sub_16CD0(v89, (uint64_t)qword_D36D0);
            os_log_type_t v90 = sub_16B4C();
            BOOL v91 = sub_16ACC(v90);
            uint64_t v92 = v110;
            if (v91)
            {
              uint64_t v93 = (_WORD *)sub_16AC4(2LL);
              sub_16BEC(v93);
              sub_16ADC( &dword_0,  v94,  v95,  "validateCancellation: USO parse userDialogActs contains hasRejected; returning .cancel()");
              sub_16AA8(v68);
            }

            static ActionForInput.cancel()();
            sub_1725C();
            uint64_t v51 = sub_17034();
            uint64_t v52 = v92;
            goto LABEL_12;
          }

          v68 += v66;
          --v69;
        }

        while (v69);
        uint64_t v75 = v104;
        sub_17B9C();
        swift_bridgeObjectRetain(v75);
        uint64_t v76 = v109;
        uint64_t v77 = v110;
        uint64_t v78 = v102;
        while (1)
        {
          uint64_t v79 = sub_179B4();
          uint64_t v80 = v67(v79);
          char v81 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v80);
          v74(v78, v76);
          if ((v81 & 1) != 0) {
            break;
          }
          v14 += v66;
          if (!--v64)
          {
            sub_16C88(v75);
            goto LABEL_41;
          }
        }

        sub_16C88(v75);
        if (qword_D2F80 != -1) {
          swift_once(&qword_D2F80, sub_AB1C);
        }
        uint64_t v96 = sub_16C80();
        sub_16CD0(v96, (uint64_t)qword_D36D0);
        os_log_type_t v97 = sub_16B4C();
        if (sub_16ACC(v97))
        {
          uint64_t v98 = (_WORD *)sub_16AC4(2LL);
          sub_16BEC(v98);
          sub_16ADC( &dword_0,  v99,  v100,  "validateCancellation: USO parse userDialogActs contains hasCancelled; returning .cancel()");
          sub_16AA8(v76);
        }

        static ActionForInput.cancel()();
        sub_1725C();
        uint64_t v51 = sub_17034();
        uint64_t v52 = v77;
        goto LABEL_12;
      }

      sub_16C48();
      uint64_t v77 = v110;
LABEL_41:
      sub_1725C();
      uint64_t v51 = sub_17034();
      uint64_t v52 = v77;
      goto LABEL_48;
    }

LABEL_31:
    uint64_t v82 = sub_17034();
    sub_17508(v110, 1LL, v83, v82);
    sub_16D48(v21, v1[1]);
    goto LABEL_32;
  }

  sub_16D48(v21, v1[12]);
  uint64_t v57 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected);
  if (!sub_1700C(v57))
  {
    uint64_t v84 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
    uint64_t v85 = sub_1700C(v84);
    uint64_t v58 = v110;
    if (v85)
    {
      if (qword_D2F80 != -1) {
        swift_once(&qword_D2F80, sub_AB1C);
      }
      uint64_t v86 = sub_16C80();
      sub_16CD0(v86, (uint64_t)qword_D36D0);
      os_log_type_t v87 = sub_16B4C();
      if (!sub_16ACC(v87)) {
        goto LABEL_39;
      }
      uint64_t v88 = (_WORD *)sub_16AC4(2LL);
      sub_16CE4(v88);
      uint64_t v62 = "validateCancellation: Received UserDialogAct - UserCancelled";
      goto LABEL_38;
    }

    sub_17658();
    uint64_t v51 = sub_17034();
    uint64_t v52 = v58;
LABEL_48:
    uint64_t v53 = 1LL;
    goto LABEL_13;
  }

  uint64_t v58 = v110;
  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v59 = sub_16C80();
  sub_16CD0(v59, (uint64_t)qword_D36D0);
  os_log_type_t v60 = sub_16B4C();
  if (!sub_16ACC(v60)) {
    goto LABEL_39;
  }
  uint64_t v61 = (_WORD *)sub_16AC4(2LL);
  sub_16CE4(v61);
  uint64_t v62 = "validateCancellation: Received UserDialogAct - UserRejected";
LABEL_38:
  sub_16B44(&dword_0, (os_log_s *)v14, v3, v62, v22);
  sub_16AA8((uint64_t)v22);
LABEL_39:

  static ActionForInput.cancel()();
  sub_17658();
  uint64_t v51 = sub_17034();
  uint64_t v52 = v58;
LABEL_12:
  uint64_t v53 = 0LL;
LABEL_13:
  sub_17508(v52, v53, v50, v51);
LABEL_32:
  sub_16CB0();
}

void sub_F6B8()
{
  uint64_t v306 = v2;
  uint64_t v307 = v3;
  char v5 = v4;
  uint64_t v297 = v6;
  uint64_t v301 = v7;
  uint64_t v281 = sub_175B0();
  uint64_t v280 = *(void *)(v281 - 8);
  sub_16AFC();
  __chkstk_darwin(v8);
  sub_16DCC((uint64_t)v268 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_26B0(&qword_D36E8);
  sub_16AFC();
  __chkstk_darwin(v10);
  uint64_t v12 = sub_16DA8(v11, v268[0]);
  uint64_t v13 = ((uint64_t (*)(uint64_t))type metadata accessor for ButtonOption)(v12);
  sub_16D00(v13, (uint64_t)&v301);
  uint64_t v269 = v14;
  sub_16AFC();
  __chkstk_darwin(v15);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v16);
  sub_16BF8();
  uint64_t v278 = sub_16E6C(v17);
  uint64_t v277 = *(void *)(v278 - 8);
  sub_16AFC();
  __chkstk_darwin(v18);
  sub_16DCC((uint64_t)v268 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_26B0((uint64_t *)&unk_D36F0);
  sub_16AFC();
  __chkstk_darwin(v20);
  sub_16B30();
  uint64_t v287 = v21;
  uint64_t v22 = sub_173F4();
  uint64_t v284 = *(void *)(v22 - 8);
  sub_16AFC();
  __chkstk_darwin(v23);
  sub_16AB4();
  __chkstk_darwin(v24);
  sub_16BF8();
  uint64_t v282 = v25;
  uint64_t v288 = sub_16E50();
  uint64_t v290 = *(void *)(v288 - 8);
  sub_16AFC();
  __chkstk_darwin(v26);
  sub_16AB4();
  __chkstk_darwin(v27);
  sub_16AB4();
  __chkstk_darwin(v28);
  uint64_t v289 = (char *)v268 - v29;
  uint64_t v30 = sub_17020();
  uint64_t v292 = *(void *)(v30 - 8);
  uint64_t v293 = v30;
  sub_16AFC();
  __chkstk_darwin(v31);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v32);
  sub_16AB4();
  __chkstk_darwin(v33);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v34);
  sub_16BF8();
  uint64_t v291 = v35;
  uint64_t v36 = sub_16F04();
  sub_16D00(v36, (uint64_t)&v305);
  uint64_t v275 = v37;
  sub_16AFC();
  __chkstk_darwin(v38);
  sub_16B30();
  uint64_t v40 = sub_16E5C(v39);
  uint64_t v41 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  sub_17390();
  uint64_t v44 = v43 - v42;
  uint64_t v45 = type metadata accessor for Parse(0LL);
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v298 = (uint8_t *)v45;
  uint64_t v299 = (uint8_t *)v46;
  sub_16AFC();
  __chkstk_darwin(v47);
  sub_16AB4();
  __chkstk_darwin(v48);
  sub_16BF8();
  uint64_t v300 = v49;
  uint64_t v50 = sub_17144();
  uint64_t v295 = *(void *)(v50 - 8);
  uint64_t v296 = v50;
  sub_16AFC();
  __chkstk_darwin(v51);
  sub_16B08();
  uint64_t v294 = (os_log_s *)v52;
  sub_16AF0();
  __chkstk_darwin(v53);
  sub_16BF8();
  uint64_t v55 = v54;
  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v56 = sub_16C80();
  uint64_t v57 = (os_log_s *)sub_26F0(v56, (uint64_t)qword_D36D0);
  sub_16D50();
  os_log_type_t v58 = sub_16C50();
  if (sub_16C28(v58))
  {
    uint64_t v59 = (uint8_t *)sub_16AC4(2LL);
    v268[0] = v22;
    char v60 = v5;
    uint64_t v61 = v41;
    uint64_t v62 = v44;
    uint64_t v63 = v40;
    uint64_t v64 = v57;
    uint64_t v65 = v59;
    *(_WORD *)uint64_t v59 = 0;
    sub_16B44(&dword_0, v0, v1, "AlarmFlowUtils.validateConfirmation(input:isRoomConfirmation:)", v59);
    uint64_t v66 = (uint64_t)v65;
    uint64_t v57 = v64;
    uint64_t v40 = v63;
    uint64_t v44 = v62;
    uint64_t v41 = v61;
    char v5 = v60;
    uint64_t v22 = v268[0];
    sub_16AA8(v66);
  }

  if ((v5 & 1) == 0)
  {
    uint64_t v72 = v300;
    uint64_t v73 = (uint64_t)v297;
    Input.parse.getter(v67);
    uint64_t v74 = v298;
    uint64_t v75 = (uint64_t)v299;
    uint64_t v76 = sub_174AC();
    int v78 = v77(v76);
    if (v78 == enum case for Parse.NLv3IntentOnly(_:))
    {
      (*(void (**)(uint64_t, uint8_t *))(v75 + 96))(v72, v74);
LABEL_13:
      sub_172B0(v55, v72);
      uint64_t v80 = v294;
      sub_172B0((uint64_t)v294, v55);
      uint64_t v81 = sub_1713C();
      sub_16D14(v81);
      uint64_t v82 = sub_171DC();
      sub_172A8(v82);
      sub_16D60();
      os_log_type_t v83 = sub_176A8();
      if (sub_16E18(v80))
      {
        uint64_t v84 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v85 = sub_16AC4(32LL);
        sub_17B20(v85);
        *(_DWORD *)uint64_t v84 = 136315138;
        uint64_t v302 = v82;
        sub_16A6C(&qword_D3770, type metadata accessor for AlarmNLIntent, (uint64_t)&unk_A6AEC);
        uint64_t v86 = sub_1714C();
        uint64_t v88 = sub_16B80(v86, v87);
        uint64_t v89 = sub_17988(v88);
        sub_17BB8(v89, v90, v91);
        sub_16EBC(v82);
        sub_16C48();
        sub_16BD0(&dword_0, v80, v83, "validateConfirmation: %s", v84);
        sub_16BB4(v40);
        sub_16AA8(v40);
        sub_16AA8((uint64_t)v84);
      }

      else
      {

        sub_16EBC(v82);
      }

      sub_715D0();
      sub_17888();
      if (v93)
      {
        if (v92) {
          sub_17480();
        }
        else {
          sub_172D0();
        }
      }

      else
      {
        sub_17488();
      }

      sub_16FD8();
      goto LABEL_31;
    }

    if (v78 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
    {
      uint64_t v72 = v300;
      (*((void (**)(uint64_t, uint8_t *))v299 + 12))(v300, v74);
      uint64_t v79 = sub_26B0(&qword_D3768);
      sub_178CC(v79);
      goto LABEL_13;
    }

    if (v78 == enum case for Parse.directInvocation(_:))
    {
      uint64_t v297 = v57;
      sub_16D0C(v300, *((uint64_t (**)(uint64_t, uint64_t))v299 + 12));
      uint64_t v94 = (uint64_t)v289;
      uint64_t v95 = v290;
      uint64_t v96 = sub_179B4();
      uint64_t v97 = v288;
      v98(v96);
      uint64_t v99 = v287;
      ((void (*)(uint64_t))static DirectInvocationUtils.siriKitConfirmationResponse(_:))(v94);
      uint64_t v100 = sub_16BBC((uint64_t)v99, 1LL, v22);
      if (!v101)
      {
        uint64_t v135 = v284;
        uint64_t v136 = v282;
        sub_174B8(v282, (uint64_t)v99, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v284 + 32));
        uint64_t v137 = v283;
        sub_174B8(v283, v136, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 16));
        int v138 = (*(uint64_t (**)(uint64_t, uint64_t))(v135 + 88))(v137, v22);
        if (v138 == enum case for ConfirmationResponse.confirmed(_:))
        {
          sub_172D0();
        }

        else
        {
          if (v138 != enum case for ConfirmationResponse.rejected(_:))
          {
            sub_1720C();
            os_log_type_t v189 = sub_16D40();
            if (sub_16ACC(v189))
            {
              uint64_t v190 = (_WORD *)sub_16AC4(2LL);
              sub_16BEC(v190);
              sub_16ADC( &dword_0,  v191,  v192,  "validateConfirmation: Received an unknown, unhandled SiriKit confirmation, returning .ignore() for interaction");
              sub_16AA8(v22);
            }

            sub_17480();
            uint64_t v193 = *(void (**)(uint64_t))(v135 + 8);
            uint64_t v194 = sub_1766C();
            v193(v194);
            sub_16D48(v94, *(uint64_t (**)(uint64_t, uint64_t))(v95 + 8));
            sub_17924();
            goto LABEL_31;
          }

          sub_17488();
        }

        sub_175C0(v136, *(uint64_t (**)(uint64_t, uint64_t))(v135 + 8));
        uint64_t v172 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
        goto LABEL_57;
      }

      sub_1784C(v100, (uint64_t *)&unk_D36F0);
      uint64_t v103 = Parse.DirectInvocation.userData.getter(v102);
      uint64_t v104 = v285;
      if (v103)
      {
        uint64_t v99 = (void *)v103;
        uint64_t v105 = v277;
        uint64_t v106 = v276;
        os_log_type_t v107 = v278;
        uint64_t v108 = sub_17620( v276,  enum case for DirectInvocationUtils.Alarm.UserInfoKey.buttonPressed(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v277 + 104));
        uint64_t v109 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v108);
        LOBYTE(v22) = v110;
        sub_1704C(v106, *(uint64_t (**)(uint64_t, uint64_t))(v105 + 8));
        sub_17280(v109, &v304);
        sub_16F40();
        uint64_t v111 = sub_16D58();
        if (v305)
        {
          if ((sub_16E08(v111, v112, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
          {
            LOBYTE(v22) = v302;
            uint64_t v99 = v303;
            sub_16FD0();
            uint64_t v113 = v270;
            sub_17968();
            uint64_t v114 = sub_17318();
            uint64_t v115 = v271;
            sub_16BBC(v114, v116, v271);
            if (!v101)
            {
              sub_171E8();
              uint64_t v228 = sub_175F4();
              sub_16E84(v228, (uint64_t)v113, v229);
              sub_16FD0();
              sub_1720C();
              os_log_type_t v230 = sub_16C50();
              if (sub_16D30(v230))
              {
                uint64_t v232 = (uint8_t *)sub_16AC4(12LL);
                uint64_t v233 = sub_16AC4(32LL);
                sub_17A98(v233);
                *(_DWORD *)uint64_t v232 = 136315138;
                uint64_t v234 = sub_16FD0();
                uint64_t v236 = sub_17458(v234, v235, (uint64_t *)&v304);
                uint64_t v237 = sub_1707C(v236);
                uint64_t v94 = (uint64_t)v289;
                uint64_t v105 = v268[3];
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v237, v238, v239, v232 + 12);
                sub_17578();
                sub_16BD0( &dword_0,  v113,  v107,  "validateConfirmation: Received confirmation directInvocation, buttonPressed: %s",  v232);
                sub_16BB4(v115);
                uint64_t v240 = v115;
                uint64_t v115 = v271;
                sub_16AA8(v240);
                sub_16AA8((uint64_t)v232);
              }

              else
              {

                sub_16C88((uint64_t)v99);
              }

              uint64_t v254 = v290;
              uint64_t v255 = v269;
              sub_17810( enum case for ButtonOption.yes(_:),  *(uint64_t (**)(void, uint64_t, uint64_t))(v269 + 104));
              uint64_t v256 = sub_17660();
              char v258 = sub_287D4(v256, v257);
              uint64_t v259 = *(void (**)(uint64_t))(v255 + 8);
              uint64_t v260 = sub_173E8();
              v259(v260);
              if ((v258 & 1) != 0) {
                sub_172D0();
              }
              else {
                sub_17488();
              }
              ((void (*)(uint64_t, uint64_t))v259)(v105, v115);
              uint64_t v172 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
LABEL_57:
              uint64_t v173 = v94;
              uint64_t v174 = v97;
LABEL_88:
              v172(v173, v174);
              goto LABEL_31;
            }

            uint64_t v117 = sub_16D58();
            sub_17018(v117, &qword_D36E8);
            uint64_t v95 = v290;
            uint64_t v104 = v285;
          }

          else
          {
            uint64_t v95 = v290;
          }
        }

        else
        {
          sub_1793C(v111, (uint64_t *)&unk_D4860);
        }
      }

      uint64_t v196 = *(void (**)(uint64_t))(v95 + 16);
      uint64_t v197 = sub_17174();
      v196(v197);
      sub_1720C();
      os_log_type_t v198 = sub_16B4C();
      if (sub_16C38(v198))
      {
        uint64_t v199 = v104;
        unint64_t v200 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v300 = sub_16AC4(32LL);
        *(void *)&__int128 v304 = v300;
        *(_DWORD *)unint64_t v200 = 136315138;
        uint64_t v299 = v200 + 4;
        uint64_t v201 = v94;
        uint64_t v202 = v274;
        uint64_t v203 = sub_174AC();
        v196(v203);
        uint64_t v204 = v202;
        uint64_t v94 = v201;
        uint64_t v205 = sub_17A0C(v204);
        uint64_t v207 = sub_16B80(v205, v206);
        uint64_t v208 = sub_172D8(v207);
        sub_16F1C(v208, v209, (uint64_t)v299);
        sub_16EDC();
        sub_176B8(v199);
        sub_16BD0( &dword_0,  (os_log_s *)v99,  (os_log_type_t)v22,  "validateConfirmation: Request was not cancelled by user. Proceed with directInvocation %s",  v200);
        uint64_t v210 = v300;
        sub_16BB4(v300);
        sub_16AA8(v210);
        sub_16AA8((uint64_t)v200);
      }

      else
      {
        sub_176B8(v104);
      }

      sub_172D0();
      sub_176B8(v94);
      goto LABEL_31;
    }

    if (v78 != enum case for Parse.NLv4IntentOnly(_:))
    {
      if (v78 != enum case for Parse.uso(_:))
      {
        sub_176FC(v279, v73, *(uint64_t (**)(uint64_t, uint64_t, void))(v280 + 16));
        sub_17A28();
        os_log_type_t v175 = sub_16D40();
        if (sub_16CA0(v175))
        {
          uint64_t v176 = (uint8_t *)sub_16AC4(12LL);
          uint64_t v177 = sub_16AC4(32LL);
          uint64_t v178 = v279;
          uint64_t v179 = sub_16E44(v177);
          *(_DWORD *)uint64_t v176 = 136315138;
          uint64_t v180 = v272;
          Input.parse.getter(v179);
          uint64_t v181 = v298;
          uint64_t v182 = sub_16F24(v180);
          uint64_t v184 = sub_16B80(v182, v183);
          uint64_t v185 = sub_17064(v184);
          sub_176B0(v185, v186, v187);
          sub_16C48();
          sub_16CC8(v178, *(uint64_t (**)(uint64_t, void))(v280 + 8));
          sub_16BD0( &dword_0,  v57,  (os_log_type_t)v74,  "validateConfirmation: Received unsupported parse for confirmation: %s",  v176);
          sub_16BB4(v55);
          sub_16AA8(v55);
          sub_16AA8((uint64_t)v176);

          uint64_t v188 = v300;
        }

        else
        {
          sub_16CC8(v279, *(uint64_t (**)(uint64_t, void))(v280 + 8));

          uint64_t v188 = v300;
          uint64_t v181 = v298;
        }

        uint64_t v195 = (uint64_t)v299;
        sub_17480();
        (*(void (**)(uint64_t, uint8_t *))(v195 + 8))(v188, v181);
        goto LABEL_31;
      }

      sub_16D0C(v300, *((uint64_t (**)(uint64_t, uint64_t))v299 + 12));
      uint64_t v299 = (uint8_t *)v41;
      uint64_t v139 = sub_17634();
      v140(v139);
      sub_17944();
      USOParse.userParse.getter();
      uint64_t v141 = sub_179DC();
      sub_16CC8(v22, *(uint64_t (**)(uint64_t, void))(v275 + 8));
      uint64_t v142 = *(void *)(v141 + 16);
      if (!v142)
      {
        sub_16C48();
LABEL_75:
        sub_17480();
        (*((void (**)(uint64_t, uint64_t))v299 + 1))(v44, v40);
        goto LABEL_31;
      }

      uint64_t v296 = v44;
      uint64_t v297 = v57;
      uint64_t v298 = (uint8_t *)v40;
      sub_17304();
      uint64_t v144 = *(void *)(v143 + 72);
      uint64_t v145 = *(uint64_t (**)(void))(v143 + 16);
      uint64_t v300 = v141;
      sub_176C8();
      uint64_t v146 = v57;
      uint64_t v295 = v142;
      uint64_t v147 = v273;
      uint64_t v148 = v291;
      while (1)
      {
        uint64_t v149 = sub_176D0();
        uint64_t v151 = sub_17004(v149, v150);
        char v152 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v151);
        uint64_t v153 = *(void (**)(uint64_t, uint64_t))(v292 + 8);
        sub_174C0(v148);
        if ((v152 & 1) != 0) {
          break;
        }
        uint64_t v146 = (os_log_s *)((char *)v146 + v144);
        if (!--v142)
        {
          uint64_t v154 = v300;
          sub_16FF4();
          sub_1791C();
          uint64_t v155 = v57;
          uint64_t v156 = v295;
          while (1)
          {
            uint64_t v157 = sub_1795C();
            uint64_t v159 = sub_17004(v157, v158);
            char v160 = Siri_Nlu_External_UserDialogAct.hasWantedToProceed.getter(v159);
            sub_174C0(v147);
            if ((v160 & 1) != 0) {
              break;
            }
            uint64_t v155 = (os_log_s *)((char *)v155 + v144);
            if (!--v156)
            {
              sub_16FF4();
              sub_1791C();
              uint64_t v161 = v57;
              uint64_t v162 = v295;
              uint64_t v163 = v286;
              do
              {
                uint64_t v164 = sub_176DC();
                uint64_t v166 = sub_17004(v164, v165);
                uint64_t v167 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v166);
                sub_174C0(v163);
                if ((v167 & 1) != 0)
                {
                  sub_16C88(v154);
                  sub_1720C();
                  os_log_type_t v261 = sub_16B4C();
                  if (!sub_16ACC(v261)) {
                    goto LABEL_104;
                  }
                  uint64_t v262 = (_WORD *)sub_16AC4(2LL);
                  sub_16BEC(v262);
                  uint64_t v265 = "validateConfirmation: USO parse userDialogActs contains hasRejected; returning .cancel()";
                  goto LABEL_103;
                }

                uint64_t v161 = (os_log_s *)((char *)v161 + v144);
                --v162;
              }

              while (v162);
              sub_16FF4();
              sub_1791C();
              uint64_t v168 = v268[1];
              uint64_t v167 = v295;
              uint64_t v169 = v293;
              while (1)
              {
                sub_17628();
                uint64_t v170 = v145();
                char v171 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v170);
                v153(v168, v169);
                if ((v171 & 1) != 0) {
                  break;
                }
                uint64_t v57 = (os_log_s *)((char *)v57 + v144);
                if (!--v167)
                {
                  sub_16C88(v154);
                  uint64_t v40 = (uint64_t)v298;
                  uint64_t v44 = v296;
                  goto LABEL_75;
                }
              }

              sub_16C88(v154);
              sub_1720C();
              os_log_type_t v266 = sub_16B4C();
              if (sub_16ACC(v266))
              {
                uint64_t v267 = (_WORD *)sub_16AC4(2LL);
                sub_16BEC(v267);
                uint64_t v265 = "validateConfirmation: USO parse userDialogActs contains hasCancelled; returning .cancel()";
LABEL_103:
                sub_16ADC(&dword_0, v263, v264, v265);
                sub_16AA8(v167);
              }

LABEL_104:
              sub_17488();
              goto LABEL_87;
            }
          }

          sub_16C88(v154);
          sub_1720C();
          os_log_type_t v241 = sub_16B4C();
          if (!sub_16ACC(v241)) {
            goto LABEL_86;
          }
          os_log_type_t v242 = (_WORD *)sub_16AC4(2LL);
          sub_16BEC(v242);
          uint64_t v215 = "validateConfirmation: USO parse userDialogActs contains hasWantedToProceed; returning .handle()";
          goto LABEL_85;
        }
      }

      sub_16C88(v300);
      sub_1720C();
      os_log_type_t v211 = sub_16B4C();
      if (!sub_16ACC(v211)) {
        goto LABEL_86;
      }
      uint64_t v212 = (_WORD *)sub_16AC4(2LL);
      sub_16BEC(v212);
      uint64_t v215 = "validateConfirmation: USO parse userDialogActs contains hasAccepted; returning .handle()";
LABEL_85:
      sub_16ADC(&dword_0, v213, v214, v215);
      sub_16AA8(v147);
LABEL_86:

      sub_172D0();
LABEL_87:
      uint64_t v174 = (uint64_t)v298;
      uint64_t v172 = (void (*)(uint64_t, uint64_t))*((void *)v299 + 1);
      uint64_t v173 = v296;
      goto LABEL_88;
    }

    sub_16D0C(v300, *((uint64_t (**)(uint64_t, uint64_t))v299 + 12));
    uint64_t v118 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted);
    if (sub_16C1C(v118) || (uint64_t v119 = objc_opt_self(&OBJC_CLASS___SIRINLUUserWantedToProceed), sub_16C1C(v119)))
    {
      uint64_t v120 = sub_17274();
      Logger.logObject.getter(v120, v121, v122, v123, v124, v125, v126, v127);
      os_log_type_t v128 = sub_16C50();
      if (sub_16C28(v128))
      {
        int v129 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v130 = sub_16AC4(32LL);
        sub_16E44(v130);
        sub_16D70(4.8149e-34);
        uint64_t v131 = sub_26B0(&qword_D3760);
        uint64_t v132 = sub_16D20(v131);
        uint64_t v134 = sub_16B80(v132, v133);
        sub_16C04(v134);
        sub_16F2C();
        sub_16D68();
        sub_16BD0(&dword_0, v57, (os_log_type_t)v74, "validateConfirmation: Received UserDialogAct - %s", v129);
        sub_16BB4(v55);
        sub_16AA8(v55);
        sub_16AA8((uint64_t)v129);
      }

      else
      {

        sub_16F2C();
      }

      sub_172D0();
      goto LABEL_62;
    }

    uint64_t v216 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected);
    uint64_t v217 = sub_16C1C(v216);
    if (v217)
    {
      Logger.logObject.getter(v217, v218, v219, v220, v221, v222, v223, v224);
      os_log_type_t v225 = sub_16C50();
      if (sub_16BA4(v225))
      {
        uint64_t v226 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v226);
        uint64_t v227 = "validateConfirmation: Received UserDialogAct - UserRejected";
LABEL_92:
        sub_16B44(&dword_0, v57, (os_log_type_t)v22, v227, v74);
        sub_16AA8((uint64_t)v74);
      }
    }

    else
    {
      uint64_t v243 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
      uint64_t v244 = sub_16C1C(v243);
      if (!v244)
      {
        sub_17480();
        goto LABEL_62;
      }

      Logger.logObject.getter(v244, v245, v246, v247, v248, v249, v250, v251);
      os_log_type_t v252 = sub_16C50();
      if (sub_16BA4(v252))
      {
        uint64_t v253 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v253);
        uint64_t v227 = "validateConfirmation: Received UserDialogAct - UserCancelled";
        goto LABEL_92;
      }
    }

    sub_17488();
LABEL_62:
    sub_16DA0();
LABEL_31:
    sub_16CB0();
    return;
  }

  sub_17A28();
  os_log_type_t v68 = sub_16B4C();
  if (sub_16ACC(v68))
  {
    uint64_t v69 = (_WORD *)sub_16AC4(2LL);
    sub_16BEC(v69);
    sub_16ADC(&dword_0, v70, v71, "Searching for room confirmation, which alarms doesn't support");
    sub_16AA8(v22);
  }

  static ActionForInput.ignore()();
}

void sub_107C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v641 = v24;
  uint64_t v649 = v25;
  int v597 = v26;
  v616[1] = v27;
  uint64_t v650 = v28;
  uint64_t v645 = v29;
  sub_26B0(&qword_D36E8);
  sub_16AFC();
  __chkstk_darwin(v30);
  uint64_t v32 = sub_17238(v31, v572);
  uint64_t v33 = type metadata accessor for ButtonOption(v32);
  sub_16D00(v33, (uint64_t)&v621);
  uint64_t v594 = v34;
  sub_16AFC();
  __chkstk_darwin(v35);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v36);
  sub_16BF8();
  uint64_t v38 = sub_16E6C(v37);
  sub_16D00(v38, (uint64_t)&v628);
  uint64_t v603 = v39;
  sub_16AFC();
  __chkstk_darwin(v40);
  sub_16B30();
  sub_16DCC(v41);
  sub_26B0((uint64_t *)&unk_D36F0);
  sub_16AFC();
  __chkstk_darwin(v42);
  v611 = (char *)&v572 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = sub_173F4();
  sub_16D00(v44, (uint64_t)&v637);
  uint64_t v608 = v45;
  sub_16AFC();
  __chkstk_darwin(v46);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v47);
  sub_16BF8();
  uint64_t v607 = v48;
  uint64_t v49 = sub_16E50();
  sub_16D00(v49, (uint64_t)&v640);
  uint64_t v613 = v50;
  sub_16AFC();
  __chkstk_darwin(v51);
  sub_16B30();
  v614[0] = v52;
  uint64_t v619 = sub_17020();
  uint64_t v620 = *(void *)(v619 - 8);
  sub_16AFC();
  __chkstk_darwin(v53);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v54);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v55);
  sub_16BF8();
  uint64_t v618 = v56;
  uint64_t v57 = sub_16F04();
  sub_16D00(v57, (uint64_t)&v629);
  uint64_t v600 = v58;
  sub_16AFC();
  __chkstk_darwin(v59);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v60);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v61);
  sub_16BF8();
  uint64_t v63 = sub_16E5C(v62);
  sub_16D00(v63, (uint64_t)v634);
  uint64_t v605 = v64;
  sub_16AFC();
  __chkstk_darwin(v65);
  sub_177D8();
  uint64_t v68 = v66 - v67;
  __chkstk_darwin(v69);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v70);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v71);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v72);
  sub_16BF8();
  uint64_t v610 = v73;
  uint64_t v74 = sub_175B0();
  sub_16D00(v74, (uint64_t)&v625);
  uint64_t v602 = v75;
  sub_16AFC();
  __chkstk_darwin(v76);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v77);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v78);
  sub_16BF8();
  uint64_t v80 = sub_16F70(v79);
  sub_16D00(v80, (uint64_t)&v617);
  uint64_t v589 = v81;
  sub_16AFC();
  __chkstk_darwin(v82);
  sub_16B30();
  sub_16DCC(v83);
  uint64_t v588 = sub_26B0(&qword_D3780);
  sub_16AFC();
  __chkstk_darwin(v84);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v85);
  sub_16BF8();
  sub_16DCC(v86);
  sub_26B0(&qword_D3788);
  sub_16AFC();
  __chkstk_darwin(v87);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v88);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v89);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v90);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v91);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v92);
  sub_16BF8();
  uint64_t v579 = v93;
  uint64_t v94 = sub_16EF8();
  v625 = *(uint64_t (***)(uint64_t, uint64_t))(v94 - 8);
  sub_16AFC();
  __chkstk_darwin(v95);
  sub_16AB4();
  __chkstk_darwin(v96);
  sub_16BF8();
  v627 = (void (*)(uint64_t, uint64_t))v97;
  uint64_t v630 = sub_17144();
  uint64_t v629 = *(void *)(v630 - 8);
  sub_16AFC();
  __chkstk_darwin(v98);
  sub_16AB4();
  __chkstk_darwin(v99);
  sub_16BF8();
  uint64_t v628 = v100;
  uint64_t v642 = sub_17034();
  uint64_t v624 = *(void *)(v642 - 8);
  sub_16AFC();
  __chkstk_darwin(v101);
  sub_16B30();
  sub_16DCC(v102);
  uint64_t v633 = sub_26B0((uint64_t *)&off_D3790);
  sub_16AFC();
  __chkstk_darwin(v103);
  sub_16B30();
  uint64_t v640 = v104;
  sub_26B0((uint64_t *)&unk_D4850);
  sub_16AFC();
  __chkstk_darwin(v105);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v106);
  sub_16BD8();
  v637 = (void *)v107;
  sub_16AF0();
  __chkstk_darwin(v108);
  sub_16BF8();
  uint64_t v639 = v109;
  uint64_t v110 = type metadata accessor for DecideAction.PromptExpectation(0LL);
  uint64_t v646 = *(void *)(v110 - 8);
  sub_16AFC();
  __chkstk_darwin(v111);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v112);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v113);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v114);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v115);
  sub_16AB4();
  __chkstk_darwin(v116);
  sub_16AB4();
  __chkstk_darwin(v117);
  sub_16BF8();
  sub_16DCC(v118);
  uint64_t v119 = sub_26B0(&qword_D37A0);
  sub_16AFC();
  __chkstk_darwin(v120);
  sub_16AB4();
  __chkstk_darwin(v121);
  uint64_t v636 = (uint64_t)&v572 - v122;
  sub_16AF0();
  __chkstk_darwin(v123);
  sub_16BD8();
  uint64_t v644 = v124;
  sub_16AF0();
  __chkstk_darwin(v125);
  v648 = (uint64_t *)((char *)&v572 - v126);
  sub_26B0(&qword_D37A8);
  sub_16AFC();
  __chkstk_darwin(v127);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v128);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v129);
  sub_16AB4();
  __chkstk_darwin(v130);
  sub_16AB4();
  __chkstk_darwin(v131);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v132);
  sub_16AB4();
  __chkstk_darwin(v133);
  sub_16AB4();
  __chkstk_darwin(v134);
  sub_16BD8();
  uint64_t v647 = v135;
  sub_16AF0();
  __chkstk_darwin(v136);
  sub_175DC();
  __chkstk_darwin(v137);
  sub_16BD8();
  uint64_t v643 = v138;
  sub_16AF0();
  __chkstk_darwin(v139);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v140);
  sub_16BF8();
  uint64_t v142 = v141;
  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v143 = sub_16C80();
  v634[1] = sub_26F0(v143, (uint64_t)qword_D36D0);
  uint64_t v144 = (os_log_s *)sub_16D50();
  os_log_type_t v145 = static os_log_type_t.info.getter();
  BOOL v146 = sub_16D30(v145);
  uint64_t v626 = v94;
  uint64_t v585 = v68;
  if (v146)
  {
    uint64_t v631 = v110;
    uint64_t v147 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v148 = sub_16AC4(32LL);
    uint64_t v638 = v119;
    uint64_t v149 = v148;
    *(void *)&__int128 v653 = v148;
    *(_DWORD *)uint64_t v147 = 136315138;
    uint64_t v651 = v641;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v573 = v21;
    uint64_t v151 = sub_16F48(MetatypeMetadata, MetatypeMetadata);
    unint64_t v153 = v152;
    uint64_t v651 = sub_16B80(v151, v152);
    sub_17B18((uint64_t)&v651, (uint64_t)&v652, (uint64_t)(v147 + 4));
    unint64_t v154 = v153;
    uint64_t v110 = v631;
    swift_bridgeObjectRelease(v154);
    sub_16BD0(&dword_0, v144, v20, "AlarmFlowUtils.decideActionForInput with intent type: %s", v147);
    uint64_t v21 = v573;
    sub_16BB4(v149);
    uint64_t v155 = v149;
    uint64_t v119 = v638;
    sub_16AA8(v155);
    sub_16AA8((uint64_t)v147);
  }

  sub_C62C();
  uint64_t v156 = (uint64_t)v648;
  if ((v157 & 1) == 0) {
    goto LABEL_73;
  }
  uint64_t v158 = v142;
  uint64_t v159 = v647;
  int v160 = enum case for DecideAction.PromptExpectation.confirmation(_:);
  uint64_t v161 = *(uint64_t **)(v646 + 104);
  sub_17B2C(v158, enum case for DecideAction.PromptExpectation.confirmation(_:));
  sub_16F50(v158);
  uint64_t v163 = v156 + v162;
  sub_179C0(v649, v156);
  sub_179C0(v158, v163);
  uint64_t v164 = sub_16B88(v156);
  if (v168)
  {
    sub_17054(v164, &qword_D37A8);
    sub_16B88(v163);
    uint64_t v165 = v642;
    if (v168)
    {
      sub_16ECC((uint64_t)v648);
      sub_3F88(v649, v643, &qword_D37A8);
LABEL_30:
      sub_1784C(v166, &qword_D37A8);
      uint64_t v176 = enum case for DecideAction.PromptExpectation.roomConfirmation(_:);
      goto LABEL_31;
    }

    goto LABEL_14;
  }

  uint64_t v167 = v634[0];
  sub_3F88(v156, v634[0], &qword_D37A8);
  uint64_t v169 = sub_16B88(v163);
  if (v168)
  {
    sub_17054(v169, &qword_D37A8);
    sub_1702C(v167, *(uint64_t (**)(uint64_t, uint64_t))(v646 + 8));
    uint64_t v165 = v642;
LABEL_14:
    LODWORD(v573) = v160;
    sub_16A3C((uint64_t)v648, &qword_D37A0);
    uint64_t v199 = v643;
    sub_3F88(v649, v643, &qword_D37A8);
    goto LABEL_15;
  }

  LODWORD(v573) = v160;
  uint64_t v631 = v158;
  uint64_t v189 = v167;
  uint64_t v190 = v646;
  uint64_t v191 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v646 + 32);
  uint64_t v638 = v119;
  uint64_t v192 = v635;
  sub_16E84(v635, v163, v191);
  sub_16A6C( &qword_D37C0,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
  char v193 = sub_16FE8(v189, v192);
  uint64_t v194 = v110;
  uint64_t v195 = *(void (**)(uint64_t, uint64_t))(v190 + 8);
  uint64_t v196 = v192;
  uint64_t v119 = v638;
  uint64_t v159 = v647;
  v195(v196, v194);
  sub_16A3C(v631, &qword_D37A8);
  v195(v189, v194);
  uint64_t v110 = v194;
  uint64_t v197 = sub_1766C();
  sub_16A3C(v197, v198);
  uint64_t v199 = v643;
  sub_179C0(v649, v643);
  uint64_t v165 = v642;
  if ((v193 & 1) != 0) {
    goto LABEL_30;
  }
LABEL_15:
  LODWORD(v647) = enum case for DecideAction.PromptExpectation.roomConfirmation(_:);
  v648 = v161;
  ((void (*)(uint64_t))v161)(v21);
  sub_16F50(v21);
  uint64_t v170 = v644;
  uint64_t v172 = v644 + v171;
  sub_16EC4(v199, v644);
  uint64_t v173 = sub_174AC();
  sub_16EC4(v173, v174);
  sub_16B88(v170);
  if (v168)
  {
    sub_16C78(v21);
    sub_16C78(v199);
    sub_16B88(v172);
    if (v168)
    {
      sub_16A3C(v644, &qword_D37A8);
      uint64_t v176 = v647;
      goto LABEL_31;
    }

    goto LABEL_23;
  }

  uint64_t v177 = v21;
  uint64_t v178 = v159;
  sub_176C0(v644, v175, &qword_D37A8);
  sub_16B88(v172);
  if (v179)
  {
    sub_16A3C(v21, &qword_D37A8);
    sub_16A3C(v643, &qword_D37A8);
    sub_1702C(v159, *(uint64_t (**)(uint64_t, uint64_t))(v646 + 8));
LABEL_23:
    sub_16A3C(v644, &qword_D37A0);
    uint64_t v180 = v637;
    goto LABEL_24;
  }

  uint64_t v213 = v635;
  uint64_t v214 = sub_1787C();
  sub_16E84(v214, v215, v216);
  sub_16A6C( &qword_D37C0,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
  uint64_t v21 = sub_16FE8(v178, v213);
  uint64_t v217 = v213;
  uint64_t v176 = v647;
  sub_17124(v217);
  sub_16C78(v177);
  sub_16C78(v643);
  sub_17124(v178);
  uint64_t v165 = v642;
  sub_16C78(v644);
  uint64_t v180 = v637;
  if ((v21 & 1) != 0)
  {
LABEL_31:
    uint64_t v200 = sub_175D0((uint64_t)&a18);
    sub_17B2C(v200, v176);
    sub_16F50(v21);
    uint64_t v201 = v636;
    uint64_t v203 = v636 + v202;
    sub_16EC4(v649, v636);
    sub_16EC4(v21, v203);
    sub_16B88(v201);
    if (v168)
    {
      sub_16C78(v21);
      sub_16B88(v203);
    }

    else
    {
      sub_17BAC(v201, &qword_D37A8, (uint64_t)v654);
      uint64_t v205 = sub_16B88(v203);
      if (v204)
      {
        sub_172EC(v205, &qword_D37A8);
        sub_1702C(v156, *(uint64_t (**)(uint64_t, uint64_t))(v646 + 8));
      }

      else
      {
        uint64_t v218 = v635;
        sub_16E84(v635, v203, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v646 + 32));
        sub_16A6C( &qword_D37C0,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
        sub_16FE8(v156, v218);
        sub_17124(v218);
        sub_16C78(v21);
        sub_17124(v156);
      }
    }

    sub_16C78(v201);
    sub_F6B8();
    goto LABEL_74;
  }

LABEL_24:
  uint64_t v181 = v639;
  sub_EF6C();
  static ActionForInput.cancel()();
  sub_A40C((uint64_t)v180, 0LL, 1LL, v165);
  uint64_t v182 = v640 + *(int *)(v633 + 48);
  sub_3F88(v181, v640, (uint64_t *)&unk_D4850);
  uint64_t v183 = sub_176E8();
  sub_3F88(v183, v184, (uint64_t *)&unk_D4850);
  uint64_t v185 = sub_17B88();
  sub_16BBC(v185, v186, v165);
  if (v168)
  {
    uint64_t v187 = sub_176D0();
    sub_16A3C(v187, v188);
    sub_16A3C(v639, (uint64_t *)&unk_D4850);
    sub_16BBC(v182, 1LL, v165);
    if (v168)
    {
      sub_16A3C(v640, (uint64_t *)&unk_D4850);
      goto LABEL_51;
    }

    goto LABEL_40;
  }

  sub_3F88(v640, v632, (uint64_t *)&unk_D4850);
  sub_16BBC(v182, 1LL, v165);
  if (v206)
  {
    sub_16ECC((uint64_t)v637);
    sub_16ECC(v639);
    sub_1772C();
    sub_175C0(v632, v207);
LABEL_40:
    sub_16A3C(v640, (uint64_t *)&off_D3790);
    uint64_t v208 = v647;
    goto LABEL_41;
  }

  uint64_t v638 = v119;
  uint64_t v235 = v624;
  uint64_t v236 = sub_175F4();
  sub_174B8(v236, v182, v237);
  sub_16A6C( &qword_D37C8,  (uint64_t (*)(uint64_t))&type metadata accessor for ActionForInput,  (uint64_t)&protocol conformance descriptor for ActionForInput);
  uint64_t v238 = v632;
  uint64_t v21 = dispatch thunk of static Equatable.== infix(_:_:)(v632, v181, v165);
  uint64_t v239 = *(void (**)(uint64_t))(v235 + 8);
  uint64_t v119 = v638;
  uint64_t v240 = sub_1766C();
  v239(v240);
  uint64_t v180 = &unk_D4850;
  sub_16C78((uint64_t)v637);
  sub_16C78(v639);
  ((void (*)(uint64_t, uint64_t))v239)(v238, v165);
  sub_16C78(v640);
  uint64_t v208 = v647;
  if ((v21 & 1) == 0)
  {
LABEL_41:
    sub_17198();
    uint64_t v209 = v625;
    uint64_t v210 = v626;
    int v211 = sub_16D0C(v165, v625[11]);
    if (v211 == enum case for Parse.NLv3IntentOnly(_:))
    {
      uint64_t v631 = v110;
      sub_16D0C(v165, v209[12]);
      uint64_t v212 = v165;
      goto LABEL_48;
    }

    if (v211 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
    {
      uint64_t v631 = v110;
      uint64_t v219 = v209[12];
      uint64_t v212 = (uint64_t)v627;
      sub_16D0C((uint64_t)v627, v219);
      uint64_t v220 = sub_26B0(&qword_D3768);
      swift_release(*(void *)(v212 + *(int *)(v220 + 48)));
LABEL_48:
      uint64_t v221 = v212;
      uint64_t v222 = (os_log_s *)v630;
      sub_17A5C(v628, v221, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v629 + 32));
      uint64_t v223 = v623;
      uint64_t v224 = sub_17614();
      sub_17A5C(v224, v225, v226);
      uint64_t v227 = sub_1713C();
      sub_16D14(v227);
      uint64_t v228 = sub_716E4(v223);
      sub_172A8(v228);
      sub_16B74();
      uint64_t v229 = sub_16B4C();
      if (sub_16E18(v222))
      {
        os_log_type_t v230 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v231 = sub_16AC4(32LL);
        sub_17B20(v231);
        sub_17898(4.8149e-34);
        sub_16A6C(&qword_D3770, type metadata accessor for AlarmNLIntent, (uint64_t)&unk_A6AEC);
        uint64_t v232 = sub_1714C();
        uint64_t v651 = sub_16B80(v232, v233);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v651, &v652, v119, v21);
        sub_16EBC(v228);
        sub_16C48();
        sub_16BD0(&dword_0, v222, (os_log_type_t)v229, "alarmNLIntent: %s", v230);
        sub_16BB4(v181);
        sub_16AA8(v181);
        uint64_t v234 = (uint64_t)v230;
        uint64_t v210 = v626;
        sub_16AA8(v234);
      }

      else
      {

        sub_16EBC(v228);
      }

      uint64_t v248 = v631;
      sub_715D0();
      sub_17888();
      if (!v250)
      {
        sub_16C58();
        sub_16B74();
        os_log_type_t v251 = sub_16B4C();
        if (sub_16ACC(v251))
        {
          os_log_type_t v252 = (_WORD *)sub_16AC4(2LL);
          sub_16CE4(v252);
          sub_16B44(&dword_0, v222, (os_log_type_t)v228, "User cancel the alarm request.", (uint8_t *)v210);
          sub_16AA8(v210);
        }

        sub_1728C();
        goto LABEL_105;
      }

      if (v249)
      {
        sub_16C58();
        sub_17198();
        sub_174D8( v248,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  v572,  v573,  v574,  v575,  v576,  v577,  v578,  v579,  v580,  v581,  v582,  v583);
        uint64_t v293 = sub_17854();
        sub_16D0C(v293, v294);
        if (v222)
        {
          sub_17584();
          sub_174D0();
          if (v228)
          {
            sub_16B74();
            os_log_type_t v295 = sub_16B4C();
            if (sub_16ACC(v295))
            {
              uint64_t v296 = (_WORD *)sub_16AC4(2LL);
              sub_16CE4(v296);
              sub_16B44( &dword_0,  v222,  (os_log_type_t)v228,  "Request was not cancelled by user. Proceed.",  (uint8_t *)v210);
              sub_16AA8(v210);
            }

            sub_17044();
            goto LABEL_105;
          }
        }

        sub_16B74();
        os_log_type_t v310 = sub_16D40();
        if (!sub_16CA0(v310)) {
          goto LABEL_104;
        }
        uint64_t v311 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v312 = sub_16AC4(32LL);
        sub_16E44(v312);
        sub_1786C(4.8149e-34);
        uint64_t v313 = sub_17358(v641);
        uint64_t v651 = sub_16B80(v313, v314);
        sub_16C90(v651, (uint64_t)&v652);
        sub_16D68();
        sub_16BD0( &dword_0,  v222,  (os_log_type_t)v210,  "Flows stack receives unexpected intent type. Expecting: %s",  v311);
        sub_16BB4(v229);
        sub_16AA8(v229);
        uint64_t v258 = (uint64_t)v311;
      }

      else
      {
        sub_16EE4(v649, &qword_D37A8, (uint64_t)&v642);
        uint64_t v253 = sub_17318();
        sub_16BBC(v253, v254, v248);
        if (!v168)
        {
          uint64_t v315 = (os_log_s *)v646;
          sub_174B8(v609[2], v228, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v646 + 32));
          uint64_t v316 = v609[1];
          uint64_t v317 = sub_176D0();
          sub_174B8(v317, v318, v319);
          (*((void (**)(uint64_t, uint64_t))v315 + 11))(v316, v248);
          sub_17648();
          if (v320) {
            goto LABEL_125;
          }
          if (v321 == enum case for DecideAction.PromptExpectation.slot(_:))
          {
            sub_16C58();
            sub_16B74();
            os_log_type_t v322 = sub_16B4C();
            if (sub_16ACC(v322))
            {
              uint64_t v323 = (_WORD *)sub_16AC4(2LL);
              sub_16CE4(v323);
              sub_16B44( &dword_0,  v315,  (os_log_type_t)v316,  "User returned accepted for non-binary input. Ignoring.",  (uint8_t *)v210);
              sub_16AA8(v210);
            }

            sub_16FE0();
LABEL_128:
            sub_17B94();
            uint64_t v361 = sub_17614();
LABEL_215:
            v363(v361, v362);
            goto LABEL_74;
          }

          if (v321 == (_DWORD)v647)
          {
LABEL_125:
            sub_16C58();
            sub_16B74();
            os_log_type_t v359 = sub_16B4C();
            if (sub_16ACC(v359))
            {
              uint64_t v360 = (_WORD *)sub_16AC4(2LL);
              sub_16CE4(v360);
              sub_16B44(&dword_0, v315, (os_log_type_t)v316, "User accepted the task, will handle.", (uint8_t *)v210);
              sub_16AA8(v210);
            }

            sub_17044();
            goto LABEL_128;
          }

          uint64_t v570 = v248;
          for (uint64_t i = v248; ; uint64_t i = v210)
          {
LABEL_247:
            _diagnoseUnexpectedEnumCase<A>(type:)(v570, i);
            __break(1u);
LABEL_248:
            uint64_t v570 = v210;
          }
        }

        uint64_t v255 = sub_16C58();
        sub_17018(v255, &qword_D37A8);
        sub_16B74();
        os_log_type_t v256 = sub_16B4C();
        if (!sub_16ACC(v256))
        {
LABEL_104:

          sub_16FE0();
LABEL_105:
          sub_17B94();
          goto LABEL_74;
        }

        uint64_t v257 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v257);
        sub_16B44( &dword_0,  v222,  (os_log_type_t)v228,  "User returned accepted for non-prompt input. Ignoring.",  (uint8_t *)v210);
        uint64_t v258 = v210;
      }

      sub_16AA8(v258);
      goto LABEL_104;
    }

    if (v211 == enum case for Parse.directInvocation(_:))
    {
      uint64_t v265 = v209[12];
      os_log_type_t v266 = v627;
      sub_16D0C((uint64_t)v627, v265);
      uint64_t v267 = v613;
      uint64_t v268 = v614[0];
      uint64_t v269 = v614[1];
      sub_16ED4(v614[0], (uint64_t)v266, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v613 + 32));
      uint64_t v270 = (uint64_t)v611;
      static DirectInvocationUtils.siriKitConfirmationResponse(_:)(v268);
      uint64_t v271 = v612;
      sub_16BBC(v270, 1LL, v612);
      if (v168)
      {
        sub_16A3C(v270, (uint64_t *)&unk_D36F0);
      }

      else
      {
        uint64_t v324 = v608;
        uint64_t v165 = v607;
        uint64_t v325 = sub_1795C();
        sub_17604(v325, v326, v327);
        uint64_t v328 = v606;
        sub_17604(v606, v165, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v324 + 16));
        int v329 = (*(uint64_t (**)(uint64_t, uint64_t))(v324 + 88))(v328, v271);
        if (v329 == enum case for ConfirmationResponse.confirmed(_:))
        {
          sub_17044();
LABEL_121:
          (*(void (**)(uint64_t, uint64_t))(v324 + 8))(v165, v271);
LABEL_134:
          (*(void (**)(uint64_t, uint64_t))(v267 + 8))(v268, v269);
          goto LABEL_74;
        }

        if (v329 == enum case for ConfirmationResponse.rejected(_:))
        {
          sub_1728C();
          goto LABEL_121;
        }

        os_log_type_t v266 = *(void (**)(uint64_t, uint64_t))(v324 + 8);
        v266(v165, v271);
        uint64_t v272 = ((uint64_t (*)(uint64_t, uint64_t))v266)(v328, v271);
      }

      uint64_t v273 = Parse.DirectInvocation.userData.getter(v272);
      if (v273)
      {
        os_log_type_t v266 = (void (*)(uint64_t, uint64_t))v273;
        uint64_t v274 = v603;
        uint64_t v275 = sub_171F4();
        uint64_t v277 = v276(v275);
        uint64_t v278 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v277);
        uint64_t v165 = v279;
        sub_16EF0(v268, *(uint64_t (**)(uint64_t, uint64_t))(v274 + 8));
        sub_17280(v278, &v653);
        sub_16F40();
        uint64_t v280 = sub_16D58();
        if (!v654[1])
        {
          uint64_t v284 = (uint64_t *)&unk_D4860;
          uint64_t v285 = &v653;
LABEL_130:
          sub_16A3C((uint64_t)v285, v284);
          goto LABEL_131;
        }

        if ((sub_16E08(v280, v281, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
        {
          uint64_t v165 = v651;
          os_log_type_t v266 = v652;
          sub_16FD0();
          uint64_t v282 = v596;
          sub_17968();
          uint64_t v283 = (os_log_s *)v599[0];
          sub_16BBC(v282, 1LL, v599[0]);
          if (!v168)
          {
            sub_171E8();
            sub_17604(v595, v282, v406);
            sub_16FD0();
            sub_16B74();
            os_log_type_t v407 = sub_16C50();
            if (sub_16D30(v407))
            {
              os_log_type_t v409 = (uint8_t *)sub_16AC4(12LL);
              uint64_t v410 = sub_16AC4(32LL);
              sub_17A98(v410);
              *(_DWORD *)os_log_type_t v409 = 136315138;
              uint64_t v411 = sub_16FD0();
              uint64_t v413 = sub_17458(v411, v412, (uint64_t *)&v653);
              uint64_t v414 = sub_1707C(v413);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v414, v415, v416, v409 + 12);
              sub_17578();
              sub_16BD0( &dword_0,  v283,  (os_log_type_t)v208,  "Received confirmation directInvocation, buttonPressed: %s",  v409);
              sub_16BB4(v278);
              sub_16AA8(v278);
              sub_16AA8((uint64_t)v409);
            }

            else
            {

              sub_16C88((uint64_t)v266);
            }

            uint64_t v442 = v594;
            uint64_t v443 = v587;
            uint64_t v444 = v599[0];
            (*(void (**)(uint64_t, void, uint64_t))(v594 + 104))( v587,  enum case for ButtonOption.yes(_:),  v599[0]);
            uint64_t v445 = sub_17B00((uint64_t)&v618);
            char v446 = sub_287D4(v445, v443);
            uint64_t v447 = *(void (**)(uint64_t, uint64_t))(v442 + 8);
            v447(v443, v444);
            if ((v446 & 1) != 0) {
              sub_17044();
            }
            else {
              sub_1728C();
            }
            uint64_t v448 = sub_17614();
            ((void (*)(uint64_t))v447)(v448);
            uint64_t v361 = sub_1787C();
            goto LABEL_215;
          }

          sub_16D58();
          uint64_t v284 = &qword_D36E8;
          uint64_t v285 = (__int128 *)v282;
          goto LABEL_130;
        }
      }

    uint64_t v6 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    uint64_t v9 = v14;
  }

  uint64_t v15 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_36:
    swift_release(v3);
    sub_226F0(a1);
    return (uint64_t)v3;
  }

  uint64_t v13 = *(void *)(v29 + 8 * v15);
  if (v13)
  {
    uint64_t v14 = v9 + 5;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v14 >= v28) {
      goto LABEL_36;
    }
    uint64_t v13 = *(void *)(v29 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_24;
    }
  }

  static AlarmRepeatScheduleConstants.saturday.getter();
  sub_51ED0();
  sub_51EA0();
  if (v3) {
    sub_51E54(v8);
  }
  sub_51E80();
  sub_51EEC();
  if ((a1 & 0x40) != 0)
  {
LABEL_27:
    uint64_t v9 = static AlarmRepeatScheduleConstants.sunday.getter();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v11 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
    uint64_t v10 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
    if (v11 >= v10 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1LL);
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
    sub_51EEC();
  }

LABEL_131:
      sub_16B74();
      os_log_type_t v364 = sub_16B4C();
      if (sub_16ACC(v364))
      {
        uint64_t v365 = (_WORD *)sub_16AC4(2LL);
        sub_16BEC(v365);
        sub_16ADC(&dword_0, v366, v367, "Request was not cancelled by user. Proceed.");
        sub_16AA8(v165);
      }

      sub_17044();
      goto LABEL_134;
    }

    if (v211 == enum case for Parse.NLv4IntentOnly(_:))
    {
      uint64_t v303 = v209[12];
      __int128 v304 = (int *)v627;
      sub_16D0C((uint64_t)v627, v303);
      uint64_t v305 = *(void *)v304;
      uint64_t v306 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
      if (sub_1700C(v306) || (uint64_t v307 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected), sub_1700C(v307)))
      {
        sub_16B74();
        os_log_type_t v308 = sub_16B4C();
        if (sub_16ACC(v308))
        {
          uint64_t v309 = (_WORD *)sub_16AC4(2LL);
          sub_16CE4(v309);
          sub_16B44(&dword_0, (os_log_s *)v304, (os_log_type_t)v180, "User cancelled the task.", (uint8_t *)v210);
          sub_16AA8(v210);
        }

        sub_1728C();
        goto LABEL_100;
      }

      uint64_t v390 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted);
      uint64_t v391 = sub_1700C(v390);
      if (v391)
      {
        sub_16EE4(v649, &qword_D37A8, (uint64_t)v609);
        uint64_t v392 = sub_16B88((uint64_t)v180);
        if (!v168)
        {
          uint64_t v210 = v208;
          uint64_t v452 = (os_log_s *)v646;
          uint64_t v453 = v581;
          sub_16E84(v581, (uint64_t)v180, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v646 + 32));
          uint64_t v454 = v580;
          uint64_t v455 = sub_176D0();
          sub_16E84(v455, v456, v457);
          (*((void (**)(uint64_t, uint64_t))v452 + 11))(v454, v110);
          sub_17648();
          if (!v458)
          {
            if (v459 == enum case for DecideAction.PromptExpectation.slot(_:))
            {
              sub_16B74();
              os_log_type_t v460 = sub_16B4C();
              if (sub_16ACC(v460))
              {
                v461 = (_WORD *)sub_16AC4(2LL);
                sub_16CE4(v461);
                sub_16B44( &dword_0,  v452,  (os_log_type_t)v454,  "User returned accepted for non-binary input. Ignoring.",  (uint8_t *)v210);
                sub_16AA8(v210);
              }

              sub_16FE0();
LABEL_220:
              sub_17658();
              (*(void (**)(uint64_t, uint64_t))(v646 + 8))(v453, v110);
              goto LABEL_74;
            }

            if (v459 != (_DWORD)v210)
            {
              uint64_t v570 = v110;
              uint64_t i = v110;
              goto LABEL_247;
            }
          }

          sub_16B74();
          os_log_type_t v522 = sub_16B4C();
          if (sub_16ACC(v522))
          {
            v523 = (_WORD *)sub_16AC4(2LL);
            sub_16CE4(v523);
            sub_16B44(&dword_0, v452, (os_log_type_t)v454, "User accepted the task, will handle.", (uint8_t *)v210);
            sub_16AA8(v210);
          }

          sub_17044();
          goto LABEL_220;
        }

        sub_17018(v392, &qword_D37A8);
        sub_16B74();
        os_log_type_t v393 = sub_16B4C();
        if (!sub_16ACC(v393)) {
          goto LABEL_239;
        }
        uint64_t v394 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v394);
        sub_16B44( &dword_0,  (os_log_s *)v304,  (os_log_type_t)v180,  "User returned accepted for non-prompt input. Ignoring.",  (uint8_t *)v210);
        goto LABEL_237;
      }

      if ((v597 & 1) == 0) {
        goto LABEL_231;
      }
      uint64_t ObjectType = swift_getObjectType(v305);
      if (SIRINLUUserDialogAct.firstUsoTask.getter(ObjectType))
      {
        uint64_t v450 = v579;
        sub_256B8(v579);
        sub_17324();
        sub_17490();
      }

      else
      {
        sub_17490();
        uint64_t v450 = v579;
      }

      sub_17AE8(v450, v451);
      uint64_t v524 = v584;
      sub_17620( v584,  enum case for AlarmNLv4Constants.AlarmVerb.noVerb(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v589 + 104));
      sub_A40C(v524, 0LL, 1LL, v208);
      __int128 v304 = (int *)(v21 + v304[12]);
      uint64_t v525 = sub_17174();
      sub_16EC4(v525, v526);
      sub_16EC4(v524, (uint64_t)v304);
      sub_16BBC(v21, 1LL, v208);
      if (v168)
      {
        sub_16C78(v584);
        sub_16C78(v450);
        uint64_t v527 = sub_16BBC((uint64_t)v304, 1LL, v208);
        if (v168)
        {
          sub_172EC(v527, &qword_D3788);
          goto LABEL_242;
        }
      }

      else
      {
        sub_16EE4(v21, &qword_D3788, (uint64_t)v599);
        sub_16BBC((uint64_t)v304, 1LL, v208);
        if (!v528)
        {
          uint64_t v559 = v589;
          uint64_t v560 = v577;
          sub_17160(v577, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v589 + 32));
          sub_16A6C( &qword_D4870,  (uint64_t (*)(uint64_t))&type metadata accessor for AlarmNLv4Constants.AlarmVerb,  (uint64_t)&protocol conformance descriptor for AlarmNLv4Constants.AlarmVerb);
          __int128 v304 = (int *)&qword_D3788;
          char v561 = sub_178D8((uint64_t)&qword_D3788, v560);
          v562 = *(void (**)(uint64_t, uint64_t))(v559 + 8);
          v562(v560, v208);
          sub_16C78(v584);
          sub_16C78(v579);
          v562((uint64_t)&qword_D3788, v208);
          sub_16C78(v21);
          LOBYTE(v210) = v626;
          if ((v561 & 1) != 0)
          {
LABEL_242:
            sub_17950();
            sub_16B74();
            os_log_type_t v563 = sub_16B4C();
            if (sub_16CA0(v563))
            {
              v564 = (uint8_t *)sub_16AC4(12LL);
              uint64_t v565 = sub_16AC4(32LL);
              sub_16E44(v565);
              sub_173FC(4.8149e-34);
              uint64_t v566 = sub_26B0(&qword_D3760);
              uint64_t v567 = sub_16D20(v566);
              uint64_t v569 = sub_16B80(v567, v568);
              sub_16C04(v569);
              sub_16F38(v305);
              sub_16D68();
              sub_16BD0( &dword_0,  (os_log_s *)v304,  (os_log_type_t)v210,  "decideActionForInput decide handle disambiguation userDialogAct: %s",  v564);
              sub_16BB4(v208);
              sub_16AA8(v208);
              sub_16AA8((uint64_t)v564);

              goto LABEL_245;
            }

            goto LABEL_244;
          }

LABEL_231:
          uint64_t v529 = v617;
          uint64_t v530 = v650;
          Input.parse.getter(v391);
          sub_174D8( v529,  v531,  v532,  v533,  v534,  v535,  v536,  v537,  v572,  v573,  v574,  v575,  v576,  v577,  v578,  v579,  v580,  v581,  v582,  v583);
          __int128 v304 = v538;
          sub_1772C();
          sub_16D0C(v529, v539);
          if (!v304 || (sub_17584(), sub_174D0(), !v530))
          {
            uint64_t v548 = v602;
            uint64_t v549 = v575;
            sub_17BC0(v575, v650, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v602 + 16));
            sub_16B74();
            os_log_type_t v550 = sub_16D40();
            if (!sub_16E18((os_log_s *)v304))
            {
              sub_17158(v549, *(uint64_t (**)(uint64_t, uint64_t))(v548 + 8));
              goto LABEL_239;
            }

            uint64_t v210 = sub_16AC4(22LL);
            uint64_t v650 = sub_16AC4(64LL);
            *(void *)&__int128 v653 = v650;
            *(_DWORD *)uint64_t v210 = 136315394;
            uint64_t v551 = sub_17358(v641);
            uint64_t v553 = sub_16B80(v551, v552);
            sub_170B4(v553);
            sub_16EDC();
            *(_WORD *)(v210 + 12) = 2080;
            sub_16A6C( (unint64_t *)&unk_D37B0,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
            uint64_t v555 = sub_17690(v554);
            uint64_t v557 = sub_16B80(v555, v556);
            sub_17378(v557);
            sub_16C48();
            sub_17158(v549, *(uint64_t (**)(uint64_t, uint64_t))(v548 + 8));
            sub_1712C( &dword_0,  (os_log_s *)v304,  v550,  "Intent from parse does not match IntentType. Expected %s, received %s",  (uint8_t *)v210);
            uint64_t v558 = v650;
            sub_1726C(v650);
            sub_16AA8(v558);
LABEL_237:
            sub_16AA8(v210);
LABEL_239:

            sub_16FE0();
LABEL_100:
            sub_17658();
            goto LABEL_74;
          }

          sub_17950();
          sub_16B74();
          os_log_type_t v540 = sub_16B4C();
          if (sub_16CA0(v540))
          {
            v541 = (uint8_t *)sub_16AC4(12LL);
            uint64_t v542 = sub_16AC4(32LL);
            sub_16E44(v542);
            sub_173FC(4.8149e-34);
            uint64_t v543 = sub_26B0(&qword_D3760);
            uint64_t v544 = sub_16D20(v543);
            uint64_t v546 = sub_16B80(v544, v545);
            sub_16C04(v546);
            sub_16F38(v305);
            sub_16D68();
            sub_16BD0( &dword_0,  (os_log_s *)v304,  (os_log_type_t)v210,  "decideActionForInput decide handle userDialogAct: %s",  v541);
            sub_16BB4(v529);
            sub_16AA8(v529);
            sub_16AA8((uint64_t)v541);

LABEL_245:
            static ActionForInput.handle()(v547);
            goto LABEL_100;
          }

LABEL_244:
          uint64_t v547 = sub_16F38(v305);
          goto LABEL_245;
        }

        sub_16DD8((uint64_t)&v605);
        sub_16DD8((uint64_t)&v602);
        uint64_t v527 = sub_1704C((uint64_t)&qword_D3788, *(uint64_t (**)(uint64_t, uint64_t))(v589 + 8));
        LOBYTE(v210) = v626;
      }

      sub_172EC(v527, &qword_D3780);
      goto LABEL_231;
    }

    if (v211 != enum case for Parse.uso(_:))
    {
      uint64_t v346 = v602;
      uint64_t v347 = sub_17B34();
      v348(v347);
      sub_16B74();
      os_log_type_t v349 = sub_16D40();
      if (sub_16CA0(v349))
      {
        uint64_t v350 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v351 = sub_16AC4(32LL);
        *(void *)&__int128 v653 = v351;
        sub_17AA4(4.8149e-34);
        uint64_t v352 = v617;
        Input.parse.getter(v353);
        uint64_t v354 = v352;
        uint64_t v355 = v626;
        uint64_t v356 = sub_17760(v354);
        uint64_t v358 = sub_16B80(v356, v357);
        sub_171A8(v358);
        sub_16C48();
        sub_16D48(v21, *(uint64_t (**)(uint64_t, uint64_t))(v346 + 8));
        sub_16BD0(&dword_0, (os_log_s *)v209, (os_log_type_t)v210, "Received an unsupported parse: %s", v350);
        sub_16BB4(v351);
        sub_16AA8(v351);
        sub_16AA8((uint64_t)v350);
      }

      else
      {
        sub_16D48(v21, *(uint64_t (**)(uint64_t, uint64_t))(v346 + 8));

        uint64_t v355 = v626;
      }

      sub_16FE0();
      uint64_t v361 = sub_17738();
      uint64_t v362 = v355;
      goto LABEL_215;
    }

    uint64_t v330 = v209[12];
    uint64_t v331 = (uint64_t)v627;
    sub_16D0C((uint64_t)v627, v330);
    sub_171E8();
    uint64_t v332 = sub_171F4();
    sub_176FC(v332, v331, v333);
    uint64_t v334 = v599[2];
    sub_17A30();
    uint64_t v335 = sub_176F4();
    uint64_t v336 = *(void (**)(os_log_s *, void))(v600 + 8);
    sub_17428(v334, (uint64_t)&v629);
    uint64_t v337 = *(void *)(v335 + 16);
    if (v337)
    {
      uint64_t v631 = v110;
      sub_172F4();
      uint64_t v165 = v335 + v338;
      uint64_t v340 = *(void *)(v339 + 72);
      swift_bridgeObjectRetain(v335);
      uint64_t v341 = v615;
      uint64_t v342 = v618;
      while (1)
      {
        uint64_t v343 = sub_1703C(v342, v165);
        uint64_t v344 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v343);
        sub_17158(v342, *(uint64_t (**)(uint64_t, uint64_t))(v620 + 8));
        if ((v344 & 1) != 0) {
          break;
        }
        v165 += v340;
        if (!--v337)
        {
          uint64_t v345 = sub_16C88(v335);
          goto LABEL_139;
        }
      }

      sub_16C88(v335);
      sub_16EE4(v649, &qword_D37A8, (uint64_t)&v615);
      uint64_t v381 = sub_17318();
      uint64_t v210 = v631;
      uint64_t v383 = sub_16BBC(v381, v382, v631);
      if (v168)
      {
        sub_17018(v383, &qword_D37A8);
        sub_16B74();
        os_log_type_t v384 = sub_16B4C();
        BOOL v385 = sub_16ACC(v384);
        uint64_t v386 = v605;
        if (v385)
        {
          uint64_t v387 = (_WORD *)sub_16AC4(2LL);
          sub_16BEC(v387);
          sub_16ADC(&dword_0, v388, v389, "User returned accepted for non-prompt input. Ignoring.");
          sub_16AA8(v165);
        }

        sub_16FE0();
        uint64_t v363 = *(void (**)(uint64_t, uint64_t))(v386 + 8);
        goto LABEL_214;
      }

      NSString v419 = (uint64_t (**)(uint64_t, uint64_t))v646;
      uint64_t v420 = v586;
      sub_17338(v586, v342, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v646 + 32));
      uint64_t v421 = sub_171F4();
      sub_17338(v421, v420, v422);
      sub_16D0C(v342, v419[11]);
      sub_17648();
      uint64_t v432 = v605;
      if (!v423)
      {
        if ((_DWORD)v424 == enum case for DecideAction.PromptExpectation.slot(_:))
        {
          Logger.logObject.getter(v424, v425, v426, v427, v428, v429, v430, v431);
          os_log_type_t v433 = sub_16B4C();
          if (sub_16ACC(v433))
          {
            uint64_t v434 = (_WORD *)sub_16AC4(2LL);
            sub_16BEC(v434);
            sub_16ADC(&dword_0, v435, v436, "User returned accepted for non-binary input. Ignoring.");
            sub_16AA8(v165);
          }

          sub_16FE0();
LABEL_213:
          sub_16D0C(v420, *(uint64_t (**)(uint64_t, uint64_t))(v646 + 8));
          uint64_t v363 = *(void (**)(uint64_t, uint64_t))(v432 + 8);
LABEL_214:
          uint64_t v361 = v610;
          uint64_t v362 = v609[0];
          goto LABEL_215;
        }

        if ((_DWORD)v424 != (_DWORD)v647) {
          goto LABEL_248;
        }
      }

      Logger.logObject.getter(v424, v425, v426, v427, v428, v429, v430, v431);
      os_log_type_t v518 = sub_16B4C();
      if (sub_16ACC(v518))
      {
        v519 = (_WORD *)sub_16AC4(2LL);
        sub_16BEC(v519);
        sub_16ADC(&dword_0, v520, v521, "User accepted the task, will handle.");
        sub_16AA8(v165);
      }

      sub_17044();
      goto LABEL_213;
    }

    uint64_t v345 = sub_16D68();
    uint64_t v341 = v615;
LABEL_139:
    uint64_t v368 = v598;
    USOParse.userParse.getter(v345);
    uint64_t v369 = (uint64_t *)sub_176F4();
    sub_17428(v368, (uint64_t)&v629);
    uint64_t v370 = v369[2];
    if (v370)
    {
      sub_172F4();
      uint64_t v165 = (uint64_t)v369 + v371;
      uint64_t v373 = *(void *)(v372 + 72);
      v648 = v369;
      uint64_t v649 = v373;
      sub_176C8();
      uint64_t v374 = v593;
      uint64_t v375 = v619;
      while (1)
      {
        uint64_t v376 = sub_1703C(v374, v165);
        char v377 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v376);
        uint64_t v378 = sub_173E8();
        uint64_t v380 = sub_1703C(v378, v379);
        if ((v377 & 1) != 0) {
          break;
        }
        uint64_t v369 = (uint64_t *)v341;
        uint64_t v368 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v380);
        uint64_t v335 = *(void *)(v620 + 8);
        sub_16DE4(v341);
        sub_16DE4(v374);
        if ((v368 & 1) != 0) {
          goto LABEL_168;
        }
        v165 += v649;
        --v370;
        uint64_t v341 = v615;
        if (!v370)
        {
          sub_16C88((uint64_t)v648);
          goto LABEL_156;
        }
      }

      uint64_t v437 = *(void (**)(uint64_t, uint64_t))(v620 + 8);
      v437(v341, v375);
      v437(v374, v375);
LABEL_168:
      sub_16C88((uint64_t)v648);
      sub_16B74();
      os_log_type_t v438 = sub_16B4C();
      if (sub_16ACC(v438))
      {
        uint64_t v439 = (_WORD *)sub_16AC4(2LL);
        sub_16BEC(v439);
        sub_16ADC(&dword_0, v440, v441, "User cancelled/rejected the task, will cancel the request.");
        sub_16AA8(v165);
      }

      sub_1728C();
      sub_1772C();
      goto LABEL_214;
    }

    sub_16C48();
LABEL_156:
    uint64_t v395 = v605;
    uint64_t v396 = *(void (**)(uint64_t, uint64_t, void))(v605 + 16);
    uint64_t v397 = sub_175D0((uint64_t)v616);
    uint64_t v398 = (os_log_s *)v609[0];
    v396(v397, v610, v609[0]);
    if ((v597 & 1) != 0)
    {
      uint64_t v399 = v336;
      uint64_t v400 = v396;
      uint64_t v401 = sub_1771C();
      uint64_t v402 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v401);
      v399(v398, v604[1]);
      if (v402)
      {
        uint64_t v403 = v591;
        sub_256B8(v591);
        sub_17324();
        uint64_t v404 = 0LL;
        uint64_t v405 = v588;
      }

      else
      {
        uint64_t v404 = 1LL;
        uint64_t v405 = v588;
        uint64_t v403 = v591;
      }

      sub_17AF4(v403, v404);
      uint64_t v165 = v589;
      sub_17810( enum case for AlarmNLv4Constants.AlarmVerb.noVerb(_:),  *(uint64_t (**)(void, uint64_t, uint64_t))(v589 + 104));
      sub_17AF4(v341, 0LL);
      uint64_t v462 = v592;
      uint64_t v398 = (os_log_s *)(v592 + *(int *)(v405 + 48));
      uint64_t v369 = &qword_D3788;
      sub_16EC4(v403, v592);
      sub_16EC4(v341, (uint64_t)v398);
      sub_16B88(v462);
      if (v168)
      {
        sub_16C78(v341);
        sub_16C78(v403);
        uint64_t v463 = v609[0];
        uint64_t v369 = *(uint64_t **)(v395 + 8);
        ((void (*)(uint64_t, void))v369)(v335, v609[0]);
        sub_16B88((uint64_t)v398);
        if (v168)
        {
          sub_16A3C(v592, &qword_D3788);
          uint64_t v417 = v369;
          goto LABEL_203;
        }

        uint64_t v462 = v592;
        uint64_t v396 = v400;
        uint64_t v417 = v369;
      }

      else
      {
        sub_16EE4(v462, &qword_D3788, (uint64_t)v604);
        sub_16B88((uint64_t)v398);
        uint64_t v396 = v400;
        if (!v464)
        {
          uint64_t v341 = v462;
          uint64_t v506 = v335;
          uint64_t v335 = v577;
          uint64_t v507 = sub_179B4();
          sub_16E84(v507, v508, v509);
          sub_16A6C( &qword_D4870,  (uint64_t (*)(uint64_t))&type metadata accessor for AlarmNLv4Constants.AlarmVerb,  (uint64_t)&protocol conformance descriptor for AlarmNLv4Constants.AlarmVerb);
          uint64_t v398 = (os_log_s *)&qword_D3788;
          LODWORD(v649) = sub_16FE8((uint64_t)&qword_D3788, v335);
          uint64_t v165 = *(void *)(v165 + 8);
          sub_17124(v335);
          uint64_t v369 = &qword_D3788;
          sub_16C78(v590);
          sub_16C78(v591);
          uint64_t v417 = *(uint64_t **)(v395 + 8);
          uint64_t v510 = v506;
          uint64_t v463 = v609[0];
          ((void (*)(uint64_t, void))v417)(v510, v609[0]);
          sub_17124((uint64_t)&qword_D3788);
          sub_16C78(v341);
          if ((v649 & 1) != 0)
          {
LABEL_203:
            uint64_t v511 = sub_17908((uint64_t)&v601);
            sub_1703C(v511, v512);
            sub_16B74();
            os_log_type_t v513 = sub_16B4C();
            if (sub_16C38(v513))
            {
              v477 = (uint8_t *)sub_16AC4(12LL);
              uint64_t v514 = sub_16AC4(32LL);
              sub_1732C(v514);
              sub_16FA8(4.8149e-34);
              uint64_t v515 = sub_172B8(12LL);
              uint64_t v517 = sub_16B80(v515, v516);
              sub_16DEC(v517);
              sub_16EDC();
              sub_1744C();
              v482 = "decideActionForInput decide handle disambiguation UsoParse: %s";
              goto LABEL_205;
            }

            goto LABEL_206;
          }

LABEL_194:
          sub_17198();
          sub_174D8( v165,  v465,  v466,  v467,  v468,  v469,  v470,  v471,  v572,  v573,  v574,  v575,  v576,  v577,  v578,  v579,  v580,  v581,  v582,  v583);
          uint64_t v472 = sub_17854();
          sub_16CC8(v472, v473);
          if (!v398 || (sub_17584(), sub_174D0(), !v369))
          {
            uint64_t v483 = v602;
            uint64_t v484 = sub_17B34();
            sub_17A64(v484, v485, v486);
            sub_16B74();
            os_log_type_t v487 = sub_16D40();
            if (sub_16CA0(v487))
            {
              uint64_t v488 = sub_16AC4(22LL);
              uint64_t v489 = sub_16AC4(64LL);
              sub_16E44(v489);
              *(_DWORD *)uint64_t v488 = 136315394;
              uint64_t v490 = sub_17358(v641);
              uint64_t v492 = sub_16B80(v490, v491);
              sub_17820(v492);
              sub_17564(v493, v494);
              sub_16FF4();
              *(_WORD *)(v488 + 12) = 2080;
              sub_16A6C( (unint64_t *)&unk_D37B0,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
              uint64_t v496 = dispatch thunk of CustomStringConvertible.description.getter(v396, v495);
              uint64_t v498 = sub_16B80(v496, v497);
              uint64_t v499 = sub_177F8(v498);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v499, v500, v501, v502);
              sub_16C48();
              sub_1772C();
              sub_17158(v335, v503);
              sub_1712C( &dword_0,  v398,  (os_log_type_t)v341,  "Intent from parse does not match IntentType. Expected %s, received %s",  (uint8_t *)v488);
              sub_1726C(v395);
              sub_16AA8(v395);
              sub_16AA8(v488);
            }

            else
            {
              sub_16EF0(v335, *(uint64_t (**)(uint64_t, uint64_t))(v483 + 8));
            }

            sub_16FE0();
            uint64_t v504 = v610;
            uint64_t v505 = v609[0];
            goto LABEL_208;
          }

          uint64_t v474 = sub_17908((uint64_t)&v606);
          uint64_t v463 = v609[0];
          sub_1703C(v474, v475);
          sub_16B74();
          os_log_type_t v476 = sub_16B4C();
          if (sub_16C38(v476))
          {
            v477 = (uint8_t *)sub_16AC4(12LL);
            uint64_t v478 = sub_16AC4(32LL);
            sub_1732C(v478);
            sub_16FA8(4.8149e-34);
            uint64_t v479 = sub_172B8(12LL);
            uint64_t v481 = sub_16B80(v479, v480);
            sub_16DEC(v481);
            sub_16EDC();
            sub_1744C();
            v482 = "decideActionForInput decide handle userDialogAct: %s";
LABEL_205:
            sub_16BD0(&dword_0, v398, (os_log_type_t)v165, v482, v477);
            sub_16BB4(v341);
            sub_16AA8(v341);
            sub_16AA8((uint64_t)v477);
LABEL_207:

            sub_17044();
            uint64_t v504 = v610;
            uint64_t v505 = v463;
LABEL_208:
            ((void (*)(uint64_t, uint64_t))v417)(v504, v505);
            goto LABEL_74;
          }

LABEL_206:
          sub_1744C();
          goto LABEL_207;
        }

        uint64_t v398 = (os_log_s *)&qword_D3788;
        sub_16DD8((uint64_t)&v613);
        sub_16DD8((uint64_t)v614);
        uint64_t v417 = *(uint64_t **)(v395 + 8);
        sub_17428(v335, (uint64_t)v634);
        sub_1702C((uint64_t)&qword_D3788, *(uint64_t (**)(uint64_t, uint64_t))(v165 + 8));
      }

      sub_16A3C(v462, &qword_D3780);
      goto LABEL_194;
    }

    uint64_t v417 = *(uint64_t **)(v395 + 8);
    uint64_t v418 = sub_179B4();
    ((void (*)(uint64_t))v417)(v418);
    goto LABEL_194;
  }

      v11[237] = v853;
      v911 = (char *)sub_6758C();
      if (v911 == (_BYTE *)&dword_0 + 2)
      {
        if (v2165)
        {
          sub_66CDC();
          v913 = sub_45644();
        }

        else
        {
          v913 = *(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFF8LL));
          sub_16FD0();
        }

        LODWORD(v2165) = (_DWORD)v852;
        if (!v913)
        {
          v944 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_250:
          sub_16D58();
          v989 = *(os_log_s **)(v944 + 16);
          sub_1743C();
          if (v989)
          {
            sub_67530();
            LOBYTE(v39) = sub_58F48(v990);
            sub_9442C();
            sub_16FF4();
            sub_67414();
            sub_66D50(*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8));
          }

          sub_67194();
          SiriTimeFeatureFlagsImpl.isAlarmSmartEnabled()();
          sub_67180();
          if ((v944 & 1) != 0)
          {
            sub_6742C();
            v991 = sub_16FD0();
            sub_39018(v991);
            v993 = v992;
            v994 = sub_16D58();
            if (v993
              && (v995 = sub_66DE4(v994, "sleepAlarmAttribute"), sub_67130(), v852))
            {

              v996 = sub_671E4();
              sub_593A4(v996, v997, v998, v999);
              sub_675A0();
            }

            else
            {
              sub_59144(v2174);
              v993 = v1045;
              sub_16D58();
            }

            v11[255] = v993;
            sub_95D50();
            v1046 = (void *)swift_task_alloc(dword_D6914);
            v11[256] = v1046;
            sub_66CA0(v1046, (uint64_t)sub_5F708);
            sub_66F90();
            sub_75864(v1047, v1048, v1049, v1050, v1051, v1052, v1053, v1054);
          }

          else
          {
            v1000 = sub_66E9C();
            sub_6733C(v1000, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
            v1001 = sub_59654();
            sub_67008(v1001);
            v1002 = j__mach_absolute_time();
            sub_67280(v1002);
            if ((_DWORD)v2165)
            {
              v1003 = v11[143];
              sub_6742C();
              v1004 = sub_66E10();
              sub_67324(v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1141, v1200, v1259, v1319, v1378);
              v1012 = sub_16C50();
              v1013 = sub_16D30(v1012);
              v1014 = v11;
              v1015 = v11[137];
              v1016 = v1014[136];
              if (v1013)
              {
                v1017 = (uint8_t *)sub_66C68();
                sub_66B64(v1017);
                sub_671A8();
                sub_16EDC();
                sub_16B44( &dword_0,  v989,  (os_log_type_t)v1003,  "Hitting RF path for ChangeAlarmStatus, all alarms, large list.",  v1017);
                sub_16AA8((uint64_t)v1017);
              }

              else
              {
                swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
              }

              sub_6702C(*(uint64_t (**)(uint64_t, uint64_t))(v1015 + 8));
              sub_674B8();
              v1089 = sub_674DC();
              *(void *)&stru_7E0.flags = v1089;
              *(void *)(v1089 + 16) = v1016;
              *(void *)(v1089 + 24) = v2152;
              *(void *)&stru_7E0.reserved2 = swift_task_alloc(dword_D3CD4);
              sub_67484(0LL, (uint64_t)sub_5F9B0);
              sub_67044();
              sub_66F90();
              sub_1FA3C(v1090, v1091, v1092, v1093, v1094, v1095, v1096, v1097, a9);
            }

            else
            {
              v1065 = sub_66E10();
              sub_67324(v1065, v1066, v1067, v1068, v1069, v1070, v1071, v1072, v1141, v1200, v1259, v1319, v1378);
              v1073 = sub_16C50();
              v1074 = sub_286C4(v1073);
              v1075 = v11[137];
              if (v1074)
              {
                v1076 = (uint8_t *)sub_66C68();
                sub_66B64(v1076);
                uint64_t v11 = _swiftEmptyArrayStorage;
                sub_671BC();
                sub_67068();
                sub_16B44( &dword_0,  v989,  (os_log_type_t)v39,  "Hitting RF path for ChangeAlarmStatus, multiple alarms.",  v1076);
                sub_671F0();
              }

              else
              {
                swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
              }

              sub_66D50(*(uint64_t (**)(uint64_t, uint64_t))(v1075 + 8));
              sub_67478();
              v1107 = (void *)sub_674D0();
              v11[266] = v1107;
              sub_674A4(v1107);
              v1108 = (void *)swift_task_alloc(dword_D3CCC);
              v11[267] = v1108;
              *v1108 = v11;
              v1108[1] = sub_5FC14;
              v1109 = sub_66C2C((uint64_t)sub_65D20);
              sub_1F878(v1109, v1110, v1111, v1112, v1113, v1114, v1115, v1116);
            }
          }

          return;
        }

        uint64_t v39 = 0LL;
        v943 = v40 & 0xC000000000000001LL;
        v944 = (uint64_t)_swiftEmptyArrayStorage;
        while (1)
        {
          v945 = v943 ? (id)sub_67498() : sub_6756C();
          v852 = v945;
          v946 = (char *)v39 + 1;
          if (__OFADD__(v39, 1LL)) {
            break;
          }
          sub_6739C();

          uint64_t v32 = v2179;
          if (v2179)
          {
            v947 = v2178;
            if ((swift_isUniquelyReferenced_nonNull_native(v944) & 1) == 0)
            {
              v951 = sub_670E0();
              sub_6C684(v951, v952, v953, v944);
              v944 = v954;
            }

            v949 = *(void *)(v944 + 16);
            v948 = *(void *)(v944 + 24);
            v852 = (void *)(v949 + 1);
            if (v949 >= v948 >> 1)
            {
              sub_6C684(v948 > 1, v949 + 1, 1, v944);
              v944 = v955;
            }

            *(void *)(v944 + 16) = v852;
            v950 = v944 + 16 * v949;
            *(void *)(v950 + 32) = v947;
            *(void *)(v950 + 40) = v32;
            uint64_t v40 = v2174;
            uint64_t v11 = v2176;
          }

          uint64_t v39 = (uint64_t (**)(uint64_t, uint64_t))((char *)v39 + 1);
        }
      }

      else
      {
        if (v911 != (_BYTE *)&dword_0 + 1)
        {
          v914 = v11 + 19;
          v915 = v11[137];
          v916 = v2176[136];
          v917 = v2176[118];
          v918 = v2176[117];
          v919 = sub_66938();
          v2176[22] = v919;
          v2176[23] = &protocol witness table for ABCReport;
          v920 = sub_252A0();
          v921 = enum case for UnhandledAbortSubtype.unknownChangeAlarmOperation(_:);
          v922 = sub_67600();
          (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v922 - 8) + 104LL))(v920, v921, v922);
          (*(void (**)(void *, void, uint64_t))(*(void *)(v919 - 8) + 104LL))( v920,  enum case for ABCReport.unhandledAbort(_:),  v919);
          sub_66D48();
          _s20HandleIntentStrategyVwxx_1(v914);
          v2178 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(63LL, 1LL);
          v2179 = v923;
          v924._uint64_t countAndFlagsBits = 0xD000000000000033LL;
          v924._object = (void *)0x80000000000A95E0LL;
          String.append(_:)(v924);
          v925 = sub_6758C();
          ChangeAlarmStatusOperation.rawValue.getter(v925);
          sub_595B0();
          v926._uint64_t countAndFlagsBits = 0x6F707075736E7520LL;
          v926._object = (void *)0xEC00000064657472LL;
          DefaultStringInterpolation.appendLiteral(_:)(v926);
          v2175 = String.init(stringInterpolation:)(v2178, v2179);
          v928 = v927;
          v929 = sub_59654();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v915 + 16))(v917, v929, v916);
          sub_A40C(v917, 0LL, 1LL, v916);
          sub_24E48(v917, v918);
          v930 = sub_16880(v918, 1LL, v916);
          if ((_DWORD)v930 == 1)
          {
            sub_25254(v930, &qword_D4170);
          }

          else
          {
            v956 = sub_38F80((uint64_t)&unk_CC598, 33LL);
            *(void *)(v956 + 16) = "/Library/Caches/com.apple.xbs/Sources/SiriTime/AlarmFlowPlugin/Flows/ChangeAlarmSta"
                                     "tusFlow/ChangeAlarmStatus+HandledIntentStrategy.swift";
            *(void *)(v956 + 24) = 136LL;
            *(_BYTE *)(v956 + 32) = 2;
            v957 = sub_38F80((uint64_t)&unk_CC5C0, 32LL);
            *(void *)(v957 + 16) = sub_65C6C;
            *(void *)(v957 + 24) = v956;
            v958 = v957;
            v2161 = v957;
            v959 = sub_38F80((uint64_t)&unk_CC5E8, 24LL);
            *(void *)(v959 + 16) = 514LL;
            v960 = v959;
            v2159 = v959;
            v2173 = sub_38F80((uint64_t)&unk_CC610, 32LL);
            *(void *)(v2173 + 16) = v2175;
            *(void *)(v2173 + 24) = v928;
            swift_bridgeObjectRetain_n(v928, 2LL);
            v2149 = v956;
            v961 = sub_47DE4();
            v2168 = (os_log_s *)Logger.logObject.getter(v961, v962, v963, v964, v965, v966, v967, v968);
            v2121 = static os_log_type_t.error.getter();
            v969 = sub_38F80((uint64_t)&unk_CC638, 17LL);
            *(_BYTE *)(v969 + 16) = 32;
            v970 = v969;
            v2065 = v969;
            v2110 = sub_38F80((uint64_t)&unk_CC660, 17LL);
            *(_BYTE *)(v2110 + 16) = 8;
            v2150 = v928;
            v971 = sub_38F80((uint64_t)&unk_CC688, 32LL);
            *(void *)(v971 + 16) = sub_65C80;
            *(void *)(v971 + 24) = v958;
            v972 = sub_38F80((uint64_t)&unk_CC6B0, 32LL);
            *(void *)(v972 + 16) = sub_65CD0;
            *(void *)(v972 + 24) = v971;
            v973 = v972;
            v2151 = v972;
            v2153 = sub_38F80((uint64_t)&unk_CC6D8, 17LL);
            *(_BYTE *)(v2153 + 16) = 0;
            v2097 = sub_38F80((uint64_t)&unk_CC700, 17LL);
            *(_BYTE *)(v2097 + 16) = 8;
            v974 = sub_38F80((uint64_t)&unk_CC728, 32LL);
            *(void *)(v974 + 16) = sub_65C94;
            *(void *)(v974 + 24) = v960;
            v975 = sub_38F80((uint64_t)&unk_CC750, 32LL);
            *(void *)(v975 + 16) = sub_65CE8;
            *(void *)(v975 + 24) = v974;
            v976 = sub_38F80((uint64_t)&unk_CC778, 17LL);
            *(_BYTE *)(v976 + 16) = 32;
            v977 = v976;
            v2156 = v976;
            v2082 = sub_38F80((uint64_t)&unk_CC7A0, 17LL);
            *(_BYTE *)(v2082 + 16) = 8;
            v978 = sub_38F80((uint64_t)&unk_CC7C8, 32LL);
            *(void *)(v978 + 16) = sub_65CB8;
            *(void *)(v978 + 24) = v2173;
            v979 = sub_38F80((uint64_t)&unk_CC7F0, 32LL);
            *(void *)(v979 + 16) = sub_65E84;
            *(void *)(v979 + 24) = v978;
            v980 = sub_26B0(&qword_D5F70);
            v981 = sub_38F80(v980, 176LL);
            *(_OWORD *)(v981 + 16) = xmmword_A4B30;
            *(void *)(v981 + 32) = sub_65CC4;
            *(void *)(v981 + 40) = v970;
            *(void *)(v981 + 48) = sub_65E8C;
            *(void *)(v981 + 56) = v2110;
            *(void *)(v981 + 64) = sub_65CD8;
            *(void *)(v981 + 72) = v973;
            *(void *)(v981 + 80) = sub_65E8C;
            *(void *)(v981 + 88) = v2153;
            *(void *)(v981 + 96) = sub_65E8C;
            *(void *)(v981 + 104) = v2097;
            *(void *)(v981 + 112) = sub_65D10;
            *(void *)(v981 + 120) = v975;
            *(void *)(v981 + 128) = sub_65E8C;
            *(void *)(v981 + 136) = v977;
            *(void *)(v981 + 144) = sub_65E8C;
            *(void *)(v981 + 152) = v2082;
            *(void *)(v981 + 160) = sub_65E88;
            *(void *)(v981 + 168) = v979;
            swift_retain(v2161);
            v2137 = v971;
            sub_66AC0();
            swift_retain(v2159);
            swift_retain(v974);
            swift_retain(v2173);
            sub_67250();
            swift_retain(v2065);
            sub_21610();
            swift_retain(v2151);
            sub_670D8();
            sub_56290();
            v2148 = v975;
            sub_562EC();
            swift_retain(v2156);
            sub_47DE4();
            swift_retain(v979);
            sub_16FF4();
            v982 = v2121;
            if (os_log_type_enabled(v2168, v2121))
            {
              v983 = v2176;
              v984 = (uint8_t *)sub_16AC4(32LL);
              v2122 = sub_16AC4(64LL);
              v2178 = v2122;
              *(_WORD *)v984 = 770;
              v984[2] = 32;
              swift_release(v2065);
              v984[3] = 8;
              sub_17B94();
              v985 = sub_67230((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTime/AlarmFlowPlugin/Flows/ChangeAlarm"
                                        "StatusFlow/ChangeAlarmStatus+HandledIntentStrategy.swift");
              v2176[88] = sub_67228(v985, v986);
              sub_674E8((uint64_t)(v2176 + 88), (uint64_t)v2147, v987, (uint64_t)(v984 + 12));
              sub_16F40();
              swift_release(v2151);
              swift_release(v2137);
              sub_675F0();
              swift_release(v2149);
              v984[12] = 0;
              sub_675F8();
              v984[13] = 8;
              sub_45B5C();
              swift_release(v2159);
              *v2145 = 514LL;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v2145, v2176 + 88, v984 + 14, v984 + 22);
              swift_release(v974);
              swift_release(v2148);
              v984[22] = 32;
              swift_release(v2156);
              v984[23] = 8;
              sub_16FD8();
              sub_16FD0();
              *v2163 = sub_3D10(v2175, v2150, &v2178);
              sub_674E8((uint64_t)v2163, v2162, v988, (uint64_t)(v984 + 32));
              sub_16C88(v2150);
              sub_17324();
              swift_release(v978);
              swift_release(v2173);
              sub_67578(&dword_0, v2168, v982, "FatalError at %s:%lu - %s", v984);
              swift_arrayDestroy(v2122, 2LL);
              sub_16AA8(v2122);
              sub_16AA8((uint64_t)v984);

              v928 = v2150;
            }

            else
            {
              swift_release(v2159);
              swift_release(v974);

              swift_release(v2065);
              sub_17B94();
              swift_release(v2151);
              swift_release(v971);
              sub_675F0();
              swift_release(v2149);
              sub_675F8();
              sub_45B5C();
              swift_release(v2148);
              swift_release(v2156);
              sub_16FD8();
              sub_17324();
              swift_release(v978);
              sub_66884();
              sub_16FF4();
              v983 = v2176;
            }

            sub_19838(v983[137]);
          }

          static SiriKitLifecycle._logCrashToEventBus(_:)(v2175, v928);
          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v2175,  v928,  "/Library/Caches/com.apple.xbs/Sources/SiriTime/AlarmFlowPlugin/Flows/ChangeAlarmStatusFlow/ChangeAlarmStatus +HandledIntentStrategy.swift",  136LL,  2LL,  514LL,  0);
          goto LABEL_274;
        }

        if (v2165)
        {
          sub_66CDC();
          v912 = sub_45644();
        }

        else
        {
          v912 = *(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFF8LL));
          sub_16FD0();
        }

        LODWORD(v2165) = (_DWORD)v852;
        if (!v912)
        {
          v931 = _swiftEmptyArrayStorage;
LABEL_247:
          sub_16D58();
          if (v931[2])
          {
            sub_67530();
            sub_94238();
            sub_16EDC();
            sub_67414();
            sub_66D50(*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8));
          }

          else
          {
            sub_16EDC();
          }

          sub_67194();
          SiriTimeFeatureFlagsImpl.isAlarmSmartEnabled()();
          sub_67180();
          if ((v912 & 1) != 0)
          {
            sub_6742C();
            v1018 = sub_16FD0();
            sub_39018(v1018);
            v1020 = v1019;
            v1021 = sub_16D58();
            if (v1020
              && (v1022 = sub_66DE4(v1021, "sleepAlarmAttribute"), sub_67130(), v852))
            {

              v1023 = sub_671E4();
              sub_593A4(v1023, v1024, v1025, v1026);
              sub_675A0();
            }

            else
            {
              sub_59144(v2174);
              v1020 = v1055;
              sub_16D58();
            }

            v11[238] = v1020;
            sub_95D50();
            v1056 = (void *)swift_task_alloc(dword_D691C);
            v11[239] = v1056;
            sub_66CA0(v1056, (uint64_t)sub_5F0CC);
            sub_66F90();
            sub_75A58(v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064);
          }

          else
          {
            v1027 = sub_66E9C();
            sub_6733C(v1027, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
            v1028 = sub_59654();
            sub_67008(v1028);
            v1029 = j__mach_absolute_time();
            sub_67280(v1029);
            if ((_DWORD)v2165)
            {
              v1030 = v11[145];
              sub_6742C();
              v1031 = sub_66E10();
              sub_67324(v1031, v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1141, v1200, v1259, v1319, v1378);
              v1039 = sub_16C50();
              v1040 = sub_16D30(v1039);
              v1041 = v11;
              v1042 = v11[137];
              v1043 = v1041[136];
              if (v1040)
              {
                v1044 = (uint8_t *)sub_66C68();
                sub_66B64(v1044);
                sub_671A8();
                sub_16EDC();
                sub_16B44( &dword_0,  v853,  (os_log_type_t)v1030,  "Hitting RF path for ChangeAlarmStatus, all alarms, large list.",  v1044);
                sub_16AA8((uint64_t)v1044);
              }

              else
              {
                swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
              }

              sub_6702C(*(uint64_t (**)(uint64_t, uint64_t))(v1042 + 8));
              sub_674B8();
              v1098 = sub_674DC();
              *(void *)&stru_790.sectname[8] = v1098;
              *(void *)(v1098 + 16) = v1043;
              *(void *)(v1098 + 24) = v2152;
              *(void *)stru_790.segname = swift_task_alloc(dword_D3CE4);
              sub_67484((void *)0x435F415441445F5FLL, (uint64_t)sub_5F374);
              sub_67044();
              sub_66F90();
              sub_1FFDC(v1099, v1100, v1101, v1102, v1103, v1104, v1105, v1106, a9);
            }

            else
            {
              v1077 = sub_66E10();
              sub_67324(v1077, v1078, v1079, v1080, v1081, v1082, v1083, v1084, v1141, v1200, v1259, v1319, v1378);
              v1085 = sub_16C50();
              v1086 = sub_286C4(v1085);
              v1087 = v11[137];
              if (v1086)
              {
                v1088 = (uint8_t *)sub_66C68();
                sub_66B64(v1088);
                uint64_t v11 = _swiftEmptyArrayStorage;
                sub_671BC();
                sub_67068();
                sub_16B44( &dword_0,  v853,  (os_log_type_t)v39,  "Hitting RF path for ChangeAlarmStatus, multiple alarms.",  v1088);
                sub_671F0();
              }

              else
              {
                swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
              }

              sub_66D50(*(uint64_t (**)(uint64_t, uint64_t))(v1087 + 8));
              sub_67478();
              v1117 = (void *)sub_674D0();
              v11[249] = v1117;
              sub_674A4(v1117);
              v1118 = (void *)swift_task_alloc(dword_D3CDC);
              v11[250] = v1118;
              *v1118 = v11;
              v1118[1] = sub_5F5D8;
              v1119 = sub_66C2C((uint64_t)sub_65D6C);
              sub_1FE18(v1119, v1120, v1121, v1122, v1123, v1124, v1125, v1126);
            }
          }

          return;
        }

        uint64_t v39 = 0LL;
        v853 = (os_log_s *)(v40 & 0xC000000000000001LL);
        v931 = _swiftEmptyArrayStorage;
        while (1)
        {
          v932 = v853 ? (id)sub_67498() : sub_6756C();
          v852 = v932;
          v933 = (char *)v39 + 1;
          if (__OFADD__(v39, 1LL)) {
            break;
          }
          sub_6739C();

          uint64_t v32 = v2179;
          if (v2179)
          {
            v934 = v2178;
            if ((swift_isUniquelyReferenced_nonNull_native(v931) & 1) == 0)
            {
              v938 = sub_670E0();
              sub_6C684(v938, v939, v940, (uint64_t)v931);
              v931 = v941;
            }

            v936 = v931[2];
            v935 = v931[3];
            v852 = (void *)(v936 + 1);
            if (v936 >= v935 >> 1)
            {
              sub_6C684(v935 > 1, v936 + 1, 1, (uint64_t)v931);
              v931 = v942;
            }

            v931[2] = v852;
            v937 = &v931[2 * v936];
            v937[4] = v934;
            v937[5] = v32;
            uint64_t v40 = v2174;
            uint64_t v11 = v2176;
          }

          uint64_t v39 = (uint64_t (**)(uint64_t, uint64_t))((char *)v39 + 1);
        }

        __break(1u);
      }

      __break(1u);
      goto LABEL_291;
    }

    goto LABEL_150;
  }

  sub_66EE0();
  uint64_t v33 = sub_45644();
  sub_17B9C();
  if (!v33)
  {
LABEL_150:
    sub_17B9C();
    uint64_t v553 = sub_65BD4(v2169, (SEL *)&selRef_alarms);
    if (v553)
    {
      char v561 = (os_log_s *)v553;
      if ((unint64_t)v553 >> 62)
      {
        if (v553 >= 0) {
          v553 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        v562 = _CocoaArrayWrapper.endIndex.getter(v553);
      }

      else
      {
        v562 = *(void *)((char *)&dword_10 + (v553 & 0xFFFFFFFFFFFFFF8LL));
      }

      swift_bridgeObjectRelease(v561);
      os_log_type_t v563 = (char *)[v2169 operation];
      if (v563 == (_BYTE *)&dword_0 + 2)
      {
        sub_4AFDC(2LL, v564, v565, v566, v567, v568, v569, v570, v1141, v1200, v1259, v1319, v1378);
        v856 = sub_16C50();
        if (sub_16C28(v856))
        {
          v857 = (uint8_t *)sub_16AC4(2LL);
          *(_WORD *)v857 = 0;
          sub_16B44( &dword_0,  v561,  (os_log_type_t)v562,  "Hitting RF path for ChangeAlarmStatus, alarms already disabled.",  v857);
          sub_16AA8((uint64_t)v857);
        }

        sub_66F0C();
        sub_4574C(v858, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
        sub_251F0();
        v859 = mach_absolute_time();
        sub_6726C(v859);
        if (qword_D31E8 != -1) {
          swift_once(&qword_D31E8, sub_95DEC);
        }
        v860 = (void *)swift_task_alloc(dword_D7344);
        *(void *)(v562 + 1408) = v860;
        sub_67464(v860, (uint64_t)sub_5CEC0);
        sub_66A40();
        sub_88C84(v861);
        return;
      }

      if (v563 == (_BYTE *)&dword_0 + 1)
      {
        sub_4AFDC(1LL, v564, v565, v566, v567, v568, v569, v570, v1141, v1200, v1259, v1319, v1378);
        v571 = sub_16C50();
        if (sub_16C28(v571))
        {
          uint64_t v572 = (uint8_t *)sub_16AC4(2LL);
          *(_WORD *)uint64_t v572 = 0;
          sub_16B44( &dword_0,  v561,  (os_log_type_t)v562,  "Hitting RF path for ChangeAlarmStatus, alarms already enabled.",  v572);
          sub_16AA8((uint64_t)v572);
        }

        sub_66F0C();
        sub_4574C(v573, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
        sub_251F0();
        uint64_t v574 = mach_absolute_time();
        sub_6726C(v574);
        if (qword_D31E8 != -1) {
          swift_once(&qword_D31E8, sub_95DEC);
        }
        uint64_t v575 = (void *)swift_task_alloc(dword_D734C);
        *(void *)(v562 + 1368) = v575;
        sub_67464(v575, (uint64_t)sub_5CC98);
        sub_66A40();
        sub_88D7C(v576);
        return;
      }

      v862 = v11 + 14;
      uint64_t v286 = (os_log_s *)v11[136];
      v863 = v11[122];
      v864 = v11[121];
      v11[17] = sub_66938();
      v11[18] = &protocol witness table for ABCReport;
      sub_19558(v11 + 14);
      v865 = (void *)enum case for UnhandledAbortSubtype.unknownChangeAlarmOperation(_:);
      v866 = sub_67600();
      v867 = sub_66FD0(v866);
      sub_66648(v867, enum case for ABCReport.unhandledAbort(_:));
      static BarbaraWalters.stopThePresses(for:)(v862);
      _s20HandleIntentStrategyVwxx_1(v862);
      sub_67258();
      sub_67108();
      if (sub_16880(v864, 1LL, (uint64_t)v286) == 1)
      {
        sub_19594(v865[121], &qword_D4170);
      }

      else
      {
        sub_16D50();
        v874 = sub_17714();
        if (sub_1990C(v874))
        {
          v875 = v865 + 91;
          v876 = (uint64_t)(v865 + 92);
          v877 = sub_666A8();
          v878 = sub_16AC4(64LL);
          v2178 = v878;
          *(_DWORD *)v877 = 136315650;
          v879 = sub_67230((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTime/AlarmFlowPlugin/Flows/ChangeAlarmStat"
                                    "usFlow/ChangeAlarmStatus+HandledIntentStrategy.swift");
          v881 = v880;
          v2176[90] = sub_67228(v879, v880);
          v882 = v865 + 90;
          v883 = v865 + 91;
          v865 = v2176;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v882, v883, v877 + 4, v877 + 12);
          swift_bridgeObjectRelease(v881);
          *(_WORD *)(v877 + 12) = 2048;
          v2176[91] = 74LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v875, v876, v877 + 14, v877 + 22);
          *(_WORD *)(v877 + 22) = 2080;
          v2176[92] = sub_67214((uint64_t)"dledIntentStrategy.swift");
          sub_674E8(v876, (uint64_t)(v2176 + 93), v884, v877 + 32);
          sub_67578(&dword_0, v286, (os_log_type_t)v863, "FatalError at %s:%lu - %s", (uint8_t *)v877);
          sub_673BC();
          sub_16AA8(v878);
          sub_16AA8(v877);
        }

        sub_19838(v865[137]);
      }

      sub_67200((uint64_t)"dledIntentStrategy.swift");
      uint64_t v300 = 74LL;
      goto LABEL_197;
    }

    sub_4AFDC(0LL, v554, v555, v556, v557, v558, v559, v560, v1141, v1200, v1259, v1319, v1378);
    uint64_t v592 = sub_17714();
    if (sub_16C28(v592))
    {
      uint64_t v593 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)uint64_t v593 = 0;
      sub_16B44(&dword_0, v36, (os_log_type_t)v33, "Can NOT retrieve intent.alarms", v593);
      sub_16AA8((uint64_t)v593);
    }

    sub_67314();
    sub_26B0(&qword_D4190);
    uint64_t v594 = sub_58B68();
    uint64_t v595 = sub_25234(v594);
    sub_66980(v595, v596, v597, v598, v599, v600, v601, v602);

    unint64_t v552 = v37;
LABEL_165:
    swift_release(v552);
    (*(void (**)(uint64_t, unint64_t))(v37 + 8))(v33, v18);
    goto LABEL_166;
  }

  swift_bridgeObjectRetain(v31);
  uint64_t v38 = sub_45644();
  sub_17B9C();
  if (v38 != 1) {
    goto LABEL_160;
  }
  sub_67304();
  if (!sub_45644())
  {
    uint64_t v533 = sub_16C88(v33);
    sub_4AFDC(v533, v534, v535, v536, v537, v538, v539, v540, v1141, v1200, v1259, v1319, v1378);
    v541 = sub_17714();
    if (sub_16C28(v541))
    {
      uint64_t v542 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)uint64_t v542 = 0;
      sub_16B44(&dword_0, (os_log_s *)v2169, (os_log_type_t)v33, "Can NOT retrieve intentResponse.createdAlarm.", v542);
      sub_16AA8((uint64_t)v542);
    }

    sub_67314();
    sub_26B0(&qword_D4190);
    uint64_t v543 = sub_58B68();
    uint64_t v544 = sub_25234(v543);
    sub_66980(v544, v545, v546, v547, v548, v549, v550, v551);

    unint64_t v552 = v2160;
    goto LABEL_165;
  }

LABEL_51:
  uint64_t v241 = sub_175D0((uint64_t)&v650);
  sub_17B2C(v241, v242);
  sub_16F50(v21);
  uint64_t v243 = v622;
  uint64_t v245 = v622 + v244;
  sub_16EC4(v649, v622);
  sub_16EC4(v21, v245);
  uint64_t v246 = sub_16B88(v243);
  if (!v168)
  {
    sub_17BAC(v243, &qword_D37A8, (uint64_t)&v645);
    uint64_t v260 = sub_16B88(v245);
    if (!v259)
    {
      uint64_t v297 = v646;
      uint64_t v298 = v635;
      sub_16E84(v635, v245, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v646 + 32));
      sub_16A6C( &qword_D37C0,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
      uint64_t v245 = sub_16FE8(v181, v298);
      uint64_t v165 = *(void *)(v297 + 8);
      sub_17124(v298);
      sub_16C78(v21);
      sub_17124(v181);
      sub_16C78(v243);
      if ((v245 & 1) != 0) {
        goto LABEL_91;
      }
      goto LABEL_70;
    }

    sub_172EC(v260, &qword_D37A8);
    uint64_t v247 = sub_1702C(v181, *(uint64_t (**)(uint64_t, uint64_t))(v646 + 8));
LABEL_69:
    sub_17054(v247, &qword_D37A0);
LABEL_70:
    sub_16B74();
    os_log_type_t v261 = sub_16B4C();
    if (sub_16ACC(v261))
    {
      uint64_t v262 = (_WORD *)sub_16AC4(2LL);
      sub_16BEC(v262);
      sub_16ADC(&dword_0, v263, v264, "Received cancel input on non-confirmation, non-slot prompt input – .ignore()");
      sub_16AA8(v165);
    }

LABEL_73:
    sub_16FE0();
    goto LABEL_74;
  }

  sub_172EC(v246, &qword_D37A8);
  uint64_t v247 = sub_16B88(v245);
  if (!v168) {
    goto LABEL_69;
  }
  sub_17054(v247, &qword_D37A8);
LABEL_91:
  sub_16B74();
  os_log_type_t v299 = sub_16B4C();
  if (sub_16ACC(v299))
  {
    uint64_t v300 = (_WORD *)sub_16AC4(2LL);
    sub_16BEC(v300);
    sub_16ADC(&dword_0, v301, v302, "Received cancel input slow prompt input – .cancel()");
    sub_16AA8(v165);
  }

  sub_1728C();
LABEL_74:
  sub_16CB0();
}

uint64_t sub_134D0(uint64_t a1)
{
  if (v86)
  {
    sub_3F88((uint64_t)v85, (uint64_t)v84, (uint64_t *)&unk_D4860);
    uint64_t v3 = type metadata accessor for UsoTask_checkExistence_common_Alarm(0LL);
    uint64_t common_Alarm = type metadata accessor for UsoTask_create_common_Alarm(0LL);
    uint64_t v11 = type metadata accessor for UsoTask_delete_common_Alarm(0LL);
    uint64_t v15 = type metadata accessor for UsoTask_disable_common_Alarm(0LL);
    uint64_t v19 = type metadata accessor for UsoTask_enable_common_Alarm(0LL);
    uint64_t v23 = type metadata accessor for UsoTask_read_common_Alarm(0LL);
    uint64_t v27 = type metadata accessor for UsoTask_request_common_Alarm(0LL);
    uint64_t v31 = type metadata accessor for UsoTask_snooze_common_Alarm(0LL);
    uint64_t v35 = type metadata accessor for UsoTask_summarise_common_Alarm(0LL);
    uint64_t updated = type metadata accessor for UsoTask_update_common_Alarm(0LL);
    uint64_t v43 = type metadata accessor for UsoTask_noVerb_common_Alarm(0LL);
    uint64_t v47 = type metadata accessor for UsoTask_noVerb_uso_NoEntity(0LL);
    uint64_t started = type metadata accessor for UsoTask_start_uso_NoEntity(0LL);
    if (sub_16B1C(started, v52, v53, started, v54)
      || (uint64_t v55 = type metadata accessor for UsoTask_delete_uso_NoEntity(0LL),
          sub_16B1C(v55, v56, v57, v55, v58))
      || (uint64_t v59 = type metadata accessor for UsoTask_resume_uso_NoEntity(0LL),
          sub_16B1C(v59, v60, v61, v59, v62))
      || (uint64_t v63 = type metadata accessor for UsoTask_update_uso_NoEntity(0LL),
          sub_16B1C(v63, v64, v65, v63, v66))
      || (uint64_t uso_NoEntity = type metadata accessor for UsoTask_read_uso_NoEntity(0LL),
          os_log_type_t v1 = (char *)&type metadata for Any + 8,
          sub_16B1C(uso_NoEntity, v68, v69, uso_NoEntity, v70))
      || (uint64_t v71 = type metadata accessor for UsoTask_close_uso_NoEntity(0LL),
          sub_16B1C(v71, v72, v73, v71, v74))
      || (uint64_t v75 = type metadata accessor for UsoTask_stop_uso_NoEntity(0LL),
          swift_dynamicCast(&v83, v84, (char *)&type metadata for Any + 8, v75, 0LL)))
    {
LABEL_21:
      sub_16A3C((uint64_t)v87, (uint64_t *)&unk_D4860);
      swift_release(v83);
      _s20HandleIntentStrategyVwxx_1(v84);
      uint64_t v76 = 1LL;
      goto LABEL_28;
    }

    _s20HandleIntentStrategyVwxx_1(v84);
  }

  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v77 = sub_16C80();
  sub_16CD0(v77, (uint64_t)qword_D36D0);
  os_log_type_t v78 = sub_16D40();
  if (sub_16ACC(v78))
  {
    uint64_t v79 = (_WORD *)sub_16AC4(2LL);
    sub_16BEC(v79);
    sub_16ADC(&dword_0, v80, v81, "Alarm flow received non-alarm NLv4 parse");
    sub_16AA8(v2);
  }

  sub_16A3C((uint64_t)v87, (uint64_t *)&unk_D4860);
  uint64_t v76 = 0LL;
LABEL_28:
  sub_16A3C((uint64_t)v85, (uint64_t *)&unk_D4860);
  return v76;
}

void sub_137B0()
{
  uint64_t v4 = v3;
  uint64_t v247 = v5;
  uint64_t v244 = (os_log_s *)v6;
  sub_26B0(&qword_D3788);
  sub_16AFC();
  __chkstk_darwin(v7);
  uint64_t v9 = sub_16DA8(v8, v218[0]);
  uint64_t v10 = type metadata accessor for DirectInvocationUtils.Alarm.UserInfoKey(v9);
  sub_16D00(v10, (uint64_t)&v251 + 8);
  uint64_t v221 = v11;
  sub_16AFC();
  __chkstk_darwin(v12);
  sub_16B30();
  uint64_t v231 = sub_177E8(v13);
  uint64_t v230 = *(void *)(v231 - 8);
  sub_16AFC();
  __chkstk_darwin(v14);
  sub_16B30();
  uint64_t v229 = v15;
  uint64_t v232 = sub_16E50();
  sub_17780();
  __chkstk_darwin(v16);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v17);
  sub_16AB4();
  __chkstk_darwin(v18);
  uint64_t v236 = (uint64_t)v218 - v19;
  uint64_t v225 = sub_16F04();
  uint64_t v224 = *(void *)(v225 - 8);
  sub_16AFC();
  __chkstk_darwin(v20);
  uint64_t v228 = sub_16E5C((uint64_t)v218 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v227 = *(void *)(v228 - 8);
  sub_16AFC();
  __chkstk_darwin(v22);
  uint64_t v24 = sub_16F70((uint64_t)v218 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v239 = *(void *)(v24 - 8);
  sub_16AFC();
  __chkstk_darwin(v25);
  sub_16AB4();
  __chkstk_darwin(v26);
  uint64_t v234 = (uint8_t *)v218 - v27;
  sub_16AF0();
  __chkstk_darwin(v28);
  sub_16BD8();
  uint64_t v243 = v29;
  sub_16AF0();
  __chkstk_darwin(v30);
  uint64_t v238 = (uint8_t *)v218 - v31;
  sub_16AF0();
  __chkstk_darwin(v32);
  uint64_t v246 = (os_log_s *)((char *)v218 - v33);
  uint64_t v245 = sub_16EF8();
  sub_17770();
  __chkstk_darwin(v34);
  sub_16AB4();
  __chkstk_darwin(v35);
  sub_16AB4();
  __chkstk_darwin(v36);
  uint64_t v38 = (uint8_t *)v218 - v37;
  uint64_t v39 = sub_17144();
  uint64_t v240 = *(void *)(v39 - 8);
  uint64_t v241 = v39;
  sub_16AFC();
  __chkstk_darwin(v40);
  uint64_t v242 = (uint64_t)v218 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_16AF0();
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)v218 - v43;
  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v45 = sub_16C80();
  uint64_t v248 = (uint8_t *)sub_26F0(v45, (uint64_t)qword_D36D0);
  sub_16D50();
  os_log_type_t v46 = sub_16C50();
  uint64_t v47 = (uint8_t *)&type metadata for Any;
  if (os_log_type_enabled(v1, v46))
  {
    uint64_t v235 = (uint64_t (**)(uint64_t, uint64_t))v0;
    uint64_t v48 = sub_16AC4(12LL);
    uint64_t v237 = v4;
    uint64_t v49 = (uint8_t *)v48;
    uint64_t v50 = sub_16AC4(32LL);
    uint64_t v233 = v24;
    sub_16E44(v50);
    *(_DWORD *)uint64_t v49 = 136315138;
    sub_178E4();
    uint64_t v51 = sub_26B0(&qword_D3840);
    uint64_t v52 = sub_16F48(v51, v51);
    unint64_t v54 = v53;
    uint64_t v55 = sub_16B80(v52, v53);
    uint64_t v56 = sub_172D8(v55);
    uint64_t v47 = (uint8_t *)&type metadata for Any;
    sub_17BB8(v56, v57, (uint64_t)(v49 + 4));
    unint64_t v58 = v54;
    uint64_t v0 = (os_log_s *)v235;
    swift_bridgeObjectRelease(v58);
    sub_16BD0(&dword_0, v1, v46, "Testing for incompatible parse for current IntentType: %s", v49);
    sub_16BB4(v24);
    uint64_t v59 = v24;
    uint64_t v24 = v233;
    sub_16AA8(v59);
    uint64_t v60 = (uint64_t)v49;
    uint64_t v4 = v237;
    sub_16AA8(v60);
  }

  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v62 = v244;
  sub_17004((uint64_t)v38, (uint64_t)v244);
  int v63 = sub_16D48((uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 88));
  if (v63 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_16D48((uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
LABEL_9:
    uint64_t v65 = sub_17660();
    sub_172B0(v65, v66);
    os_log_type_t v67 = v242;
    sub_172B0(v242, (uint64_t)v44);
    uint64_t v68 = sub_1713C();
    sub_16D14(v68);
    uint64_t v69 = (os_log_s *)sub_17A38();
    sub_70238();
    uint64_t v71 = v243;
    if (v70 == 11)
    {
      sub_172A8((uint64_t)v69);
      sub_16EA0();
      os_log_type_t v72 = sub_16C50();
      if (sub_16C28(v72))
      {
        uint64_t v73 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v74 = sub_16AC4(32LL);
        sub_16E44(v74);
        *(_DWORD *)uint64_t v73 = 136315138;
        LOBYTE(v249) = *((_BYTE *)v69 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmVerb);
        uint64_t v75 = sub_26B0(&qword_D3848);
        uint64_t v76 = sub_16D20(v75);
        uint64_t v78 = sub_16B80(v76, v77);
        sub_16C04(v78);
        sub_16EBC((uint64_t)v69);
        sub_16D68();
        sub_16BD0(&dword_0, v69, v67, "nlv3 verb doesn't exist: %s", v73);
        sub_16BB4(v24);
        sub_16AA8(v24);
        sub_16AA8((uint64_t)v73);
        sub_16FD8();
      }

      else
      {

        swift_release_n(v69, 3LL);
      }

LABEL_27:
      type metadata accessor for CreateAlarmIntent(0LL);
      goto LABEL_44;
    }

    uint64_t v79 = v238;
    sub_6D314(v70);
    uint64_t v80 = v239;
    uint64_t v81 = v246;
    uint64_t v82 = sub_176DC();
    v83(v82);
    uint64_t v84 = *(void (**)(uint64_t))(v80 + 16);
    uint64_t v85 = sub_17634();
    v84(v85);
    sub_16EA0();
    os_log_type_t v86 = sub_16C50();
    if (sub_16C28(v86))
    {
      uint64_t v47 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v87 = sub_16AC4(32LL);
      uint64_t v237 = v4;
      sub_17A98(v87);
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v245 = (uint64_t)(v47 + 4);
      uint64_t v88 = (uint64_t)v234;
      sub_17004((uint64_t)v234, v71);
      uint64_t v89 = sub_17A0C(v88);
      uint64_t v91 = sub_16B80(v89, v90);
      uint64_t v92 = sub_17678(v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v92, v93, v94, v47 + 12);
      sub_16D68();
      uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v239 + 8);
      sub_178B8(v71);
      sub_16BD0(&dword_0, v81, (os_log_type_t)v79, "nlv3 using verb: %s", v47);
      sub_16BB4(v4);
      uint64_t v96 = v4;
      uint64_t v4 = v237;
      sub_16AA8(v96);
      sub_16AA8((uint64_t)v47);
    }

    else
    {
      uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
      sub_178B8(v71);
    }

    sub_53D18((uint64_t)v246, v4);
    if (!v129 || (uint64_t v130 = v129, v129 == v247))
    {
      sub_16EA0();
      os_log_type_t v146 = sub_16C50();
      if (sub_16BA4(v146))
      {
        uint64_t v147 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v147);
        sub_16B44(&dword_0, v81, (os_log_type_t)v47, "nlv3 parse generated unknown or matching intent type", v79);
        sub_16AA8((uint64_t)v79);
      }

      sub_16FD8();

      sub_178B8((uint64_t)v246);
    }

    else
    {
      sub_16EA0();
      os_log_type_t v131 = sub_16C50();
      if (sub_16C28(v131))
      {
        uint64_t v132 = sub_16AC4(22LL);
        uint64_t v133 = sub_16AC4(64LL);
        uint64_t v233 = v24;
        sub_16E44(v133);
        *(_DWORD *)uint64_t v132 = 136315394;
        sub_178E4();
        sub_26B0(&qword_D3840);
        uint64_t v134 = sub_16F24((uint64_t)&v249);
        uint64_t v136 = sub_16B80(v134, v135);
        uint64_t v137 = sub_17820(v136);
        sub_171C4(v137, v138 + 8, v139, v140);
        sub_17900();
        *(_WORD *)(v132 + 12) = 2080;
        uint64_t v249 = v130;
        uint64_t v141 = sub_16F24((uint64_t)&v249);
        uint64_t v249 = sub_16B80(v141, v142);
        sub_171C4(v249, (uint64_t)&v250, v143, v132 + 22);
        sub_16FF4();
        sub_1712C( &dword_0,  v81,  (os_log_type_t)v79,  "nlv3 incompatible parse expecting type %s, received %s",  (uint8_t *)v132);
        sub_1726C(v24);
        sub_16AA8(v24);
        sub_16AA8(v132);
        sub_16FD8();

        uint64_t v144 = (uint64_t)v246;
        uint64_t v145 = v233;
      }

      else
      {
        sub_16FD8();

        uint64_t v144 = (uint64_t)v246;
        uint64_t v145 = v24;
      }

      v95(v144, v145);
    }

    goto LABEL_44;
  }

  if (v63 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_16D48((uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    uint64_t v64 = sub_26B0(&qword_D3768);
    swift_release(*(void *)&v38[*(int *)(v64 + 48)]);
    goto LABEL_9;
  }

  if (v63 == enum case for Parse.directInvocation(_:))
  {
    sub_16D48((uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    uint64_t v235 = (uint64_t (**)(uint64_t, uint64_t))v0;
    uint64_t v97 = v236;
    uint64_t v98 = sub_176DC();
    uint64_t v99 = v232;
    uint64_t v101 = v100(v98);
    uint64_t v102 = Parse.DirectInvocation.identifier.getter(v101);
    uint64_t v104 = v103;
    uint64_t v105 = v230;
    uint64_t v106 = sub_171F4();
    uint64_t v108 = v107(v106);
    uint64_t v109 = DirectInvocationUtils.Alarm.URI.rawValue.getter(v108);
    uint64_t v111 = v110;
    sub_16E7C(v97, *(uint64_t (**)(uint64_t, uint64_t))(v105 + 8));
    BOOL v112 = v102 == v109 && v104 == (void *)v111;
    if (v112)
    {
      sub_16C88((uint64_t)v104);
    }

    else
    {
      sub_17628();
      uint64_t v102 = sub_17758(v113, v114, v115, v111);
      sub_17900();
      uint64_t v116 = sub_16D58();
      if ((v102 & 1) == 0)
      {
        uint64_t v117 = v236;
        uint64_t v118 = Parse.DirectInvocation.userData.getter(v116);
        if (!v118) {
          goto LABEL_71;
        }
        uint64_t v104 = (void *)v118;
        uint64_t v119 = v221;
        uint64_t v120 = sub_171F4();
        uint64_t v122 = v121(v120);
        uint64_t v123 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v122);
        uint64_t v102 = v124;
        sub_16D0C(v117, *(uint64_t (**)(uint64_t, uint64_t))(v119 + 8));
        sub_17280(v123, &v251);
        sub_16F40();
        uint64_t v125 = sub_16D58();
        if (v252)
        {
          sub_17A50();
          sub_16BBC((uint64_t)v104, 1LL, v24);
          if (!v112)
          {
            uint64_t v211 = v239;
            uint64_t v212 = v218[0];
            sub_17160(v218[0], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v239 + 32));
            sub_175A4();
            if (v213)
            {
              sub_1704C(v212, *(uint64_t (**)(uint64_t, uint64_t))(v211 + 8));
              sub_17158(v236, v235[1]);
              goto LABEL_44;
            }

            sub_16EA0();
            os_log_type_t v214 = sub_16B4C();
            if (sub_16ACC(v214))
            {
              uint64_t v215 = (_WORD *)sub_16AC4(2LL);
              sub_16BEC(v215);
              sub_16ADC( &dword_0,  v216,  v217,  "direct invocation parse generated unknown intent type, comparing to CreateAlarmIntent");
              sub_16AA8(v102);
            }

            sub_1704C(v212, *(uint64_t (**)(uint64_t, uint64_t))(v239 + 8));
            sub_17158(v236, v235[1]);
            goto LABEL_27;
          }

          uint64_t v127 = &qword_D3788;
          uint64_t v128 = (__int128 *)v104;
        }

        else
        {
          uint64_t v127 = (uint64_t *)&unk_D4860;
          uint64_t v128 = &v251;
        }

        sub_16A3C((uint64_t)v128, v127);
LABEL_71:
        uint64_t v199 = v235;
        uint64_t v198 = v236;
        uint64_t v200 = v222;
        uint64_t v201 = sub_1787C();
        sub_1703C(v201, v202);
        sub_16EA0();
        os_log_type_t v203 = sub_16D40();
        if (sub_16C38(v203))
        {
          char v204 = (uint8_t *)sub_16AC4(12LL);
          uint64_t v205 = sub_16AC4(32LL);
          sub_1732C(v205);
          *(_DWORD *)char v204 = 136315138;
          uint64_t v248 = v204 + 4;
          uint64_t v206 = v219;
          sub_1703C(v219, v200);
          uint64_t v207 = sub_172B8(v206);
          uint64_t v209 = sub_16B80(v207, v208);
          sub_16DEC(v209);
          sub_16EDC();
          uint64_t v210 = v199[1];
          v210(v200, v99);
          sub_16BD0( &dword_0,  (os_log_s *)v104,  (os_log_type_t)v102,  "Received unexpected directInvocation in FlowStrategy: %s",  v204);
          sub_16BB4(v198);
          sub_16AA8(v198);
          sub_16AA8((uint64_t)v204);

          v210(v236, v99);
        }

        else
        {

          sub_1760C(v200);
          sub_1760C(v198);
        }

        goto LABEL_44;
      }
    }

    sub_16EA0();
    os_log_type_t v163 = sub_16B4C();
    if (sub_16ACC(v163))
    {
      uint64_t v164 = (_WORD *)sub_16AC4(2LL);
      sub_16BEC(v164);
      sub_16ADC(&dword_0, v165, v166, "Received stop direct invocation, comparing to DismissAlarmHalIntent");
      sub_16AA8(v102);
    }

    sub_16EF0(v236, v235[1]);
    type metadata accessor for DismissAlarmHalIntent(0LL);
    goto LABEL_44;
  }

  if (v63 == enum case for Parse.NLv4IntentOnly(_:))
  {
    sub_16D48((uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    sub_17B58();
    uint64_t v148 = sub_17A20();
    if (v148)
    {
      LOBYTE(v47) = v148;
      uint64_t v38 = v234;
      uint64_t v62 = (os_log_s *)v148;
      sub_256B8((uint64_t)v234);
      sub_175A4();
      uint64_t v150 = v149;
      sub_1704C((uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t))(v239 + 8));
      if (v150 && v150 != v247)
      {
        sub_16EA0();
        os_log_type_t v151 = sub_16C50();
        if (sub_16D30(v151))
        {
          uint64_t v152 = sub_16AC4(22LL);
          uint64_t v248 = (uint8_t *)sub_16AC4(64LL);
          *(void *)&__int128 v251 = v248;
          *(_DWORD *)uint64_t v152 = 136315394;
          sub_178E4();
          sub_26B0(&qword_D3840);
          uint64_t v153 = sub_172B8((uint64_t)&v249);
          uint64_t v155 = sub_16B80(v153, v154);
          uint64_t v156 = sub_1707C(v155);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v156, v157, v158, v159);
          sub_17B9C();
          *(_WORD *)(v152 + 12) = 2080;
          uint64_t v249 = v150;
          uint64_t v160 = sub_172B8((uint64_t)&v249);
          uint64_t v249 = sub_16B80(v160, v161);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250, v152 + 14, v152 + 22);
          sub_16FF4();
          sub_1712C( &dword_0,  v62,  (os_log_type_t)v24,  "nlv4 incompatible parse expecting type %s, received %s",  (uint8_t *)v152);
          uint64_t v162 = (uint64_t)v248;
          sub_1726C((uint64_t)v248);
          sub_16AA8(v162);
          sub_16AA8(v152);
          sub_16DA0();
        }

        else
        {

          sub_16DA0();
        }

        sub_16FFC();
        goto LABEL_44;
      }

      sub_16FFC();
    }

    sub_16EA0();
    os_log_type_t v192 = sub_16C50();
    if (sub_16BA4(v192))
    {
      char v193 = (_WORD *)sub_16AC4(2LL);
      sub_16CE4(v193);
      sub_16B44(&dword_0, v62, (os_log_type_t)v47, "nlv4 parse generated unknown or matching intent type", v38);
      sub_16AA8((uint64_t)v38);
      sub_16DA0();
    }

    else
    {

      sub_16DA0();
    }

    goto LABEL_44;
  }

  if (v63 == enum case for Parse.uso(_:))
  {
    sub_16D48((uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    uint64_t v167 = v227;
    uint64_t v168 = v226;
    uint64_t v169 = sub_17A64(v226, (uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t, void))(v227 + 32));
    uint64_t v170 = v223;
    uint64_t v171 = USOParse.userParse.getter(v169);
    uint64_t v172 = (os_log_s *)Siri_Nlu_External_UserParse.firstUsoTask.getter(v171);
    sub_16CC8(v170, *(uint64_t (**)(uint64_t, void))(v224 + 8));
    if (v172)
    {
      uint64_t v173 = (uint64_t)v234;
      sub_256B8((uint64_t)v234);
      sub_175A4();
      uint64_t v174 = v24;
      uint64_t v176 = v175;
      (*(void (**)(uint64_t, uint64_t))(v239 + 8))(v173, v174);
      if (v176 && v176 != v247)
      {
        sub_16EA0();
        os_log_type_t v177 = sub_16C50();
        if (sub_16C28(v177))
        {
          uint64_t v178 = sub_16AC4(22LL);
          uint64_t v179 = sub_16AC4(64LL);
          sub_17A98(v179);
          *(_DWORD *)uint64_t v178 = 136315394;
          sub_178E4();
          sub_26B0(&qword_D3840);
          uint64_t v180 = sub_16F24((uint64_t)&v249);
          uint64_t v249 = sub_16B80(v180, v181);
          sub_171C4(v249, (uint64_t)&v250, v182, v178 + 12);
          sub_17900();
          *(_WORD *)(v178 + 12) = 2080;
          uint64_t v249 = v176;
          uint64_t v183 = sub_16F24((uint64_t)&v249);
          uint64_t v249 = sub_16B80(v183, v184);
          sub_171C4(v249, (uint64_t)&v250, v185, v178 + 22);
          sub_1743C();
          sub_1712C( &dword_0,  v172,  (os_log_type_t)v173,  "uso incompatible parse expecting type %s, received %s",  (uint8_t *)v178);
          sub_1726C(v4);
          sub_16AA8(v4);
          sub_16AA8(v178);

          sub_16FD8();
          (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v226, v228);
        }

        else
        {

          sub_16FD8();
          (*(void (**)(uint64_t, char *))(v167 + 8))(v168, v44);
        }

        goto LABEL_44;
      }

      sub_16FD8();
    }

    sub_16EA0();
    os_log_type_t v194 = sub_16B4C();
    if (sub_16ACC(v194))
    {
      uint64_t v195 = (_WORD *)sub_16AC4(2LL);
      sub_16BEC(v195);
      sub_16ADC(&dword_0, v196, v197, "uso parse generated unknown or matching intent type");
      sub_16AA8((uint64_t)&type metadata for Any);
    }

    sub_16EF0(v168, *(uint64_t (**)(uint64_t, uint64_t))(v167 + 8));
  }

  else
  {
    sub_17AB8();
    sub_17004(v4, (uint64_t)v62);
    sub_16EA0();
    os_log_type_t v186 = sub_16D40();
    if (sub_16E18(v0))
    {
      uint64_t v187 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v188 = sub_16AC4(32LL);
      sub_17B20(v188);
      *(_DWORD *)uint64_t v187 = 136315138;
      uint64_t v248 = v187 + 4;
      uint64_t v189 = v220;
      v61(v220, v4, v245);
      uint64_t v190 = String.init<A>(describing:)(v189, v245);
      uint64_t v249 = sub_16B80(v190, v191);
      sub_17B18((uint64_t)&v249, (uint64_t)&v250, (uint64_t)v248);
      sub_16D68();
      (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v245);
      sub_16BD0( &dword_0,  v0,  v186,  "Received a currently un-handled input for incompatibility check (add more parses): %s",  v187);
      sub_16BB4((uint64_t)v44);
      sub_16AA8((uint64_t)v44);
      sub_16AA8((uint64_t)v187);
    }

    else
    {
      sub_174C8(v4);
    }

    sub_174C8((uint64_t)v38);
  }

LABEL_44:
  sub_16CB0();
}

void sub_1490C()
{
  uint64_t v3 = v2;
  uint64_t v74 = v4;
  uint64_t v75 = v5;
  uint64_t v6 = type metadata accessor for Calendar.SearchDirection(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v72 = v6;
  uint64_t v73 = v7;
  sub_16AFC();
  __chkstk_darwin(v8);
  sub_17390();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for Calendar.RepeatedTimePolicy(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Calendar.MatchingPolicy(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v68 = v16;
  uint64_t v69 = v17;
  __chkstk_darwin(v16);
  sub_177C0();
  sub_26B0(&qword_D3820);
  sub_16AFC();
  __chkstk_darwin(v18);
  uint64_t v19 = sub_17524();
  uint64_t v20 = type metadata accessor for Date(v19);
  uint64_t v70 = *(void *)(v20 - 8);
  uint64_t v71 = v20;
  sub_16AFC();
  __chkstk_darwin(v21);
  sub_16B08();
  uint64_t v66 = v22;
  sub_16AF0();
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v66 - v25;
  __chkstk_darwin(v24);
  sub_16BF8();
  uint64_t v67 = v27;
  static DateTimeInferenceUtils.defaultAnchorDate.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))( v0,  enum case for Calendar.MatchingPolicy.strict(_:),  v16);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v15,  enum case for Calendar.RepeatedTimePolicy.first(_:),  v12);
  uint64_t v28 = v73;
  (*(void (**)(uint64_t, void, uint64_t))(v73 + 104))( v11,  enum case for Calendar.SearchDirection.forward(_:),  v72);
  uint64_t v29 = v74;
  uint64_t v74 = v3;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v26, v29, v0, v15, v11);
  sub_17158(v11, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
  uint64_t v30 = v70;
  uint64_t v31 = v71;
  sub_16E7C((uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  sub_17ADC(v69);
  sub_16DE4((uint64_t)v26);
  uint64_t v32 = sub_17B88();
  uint64_t v34 = sub_16BBC(v32, v33, v31);
  if (v35)
  {
    sub_17BA4(v34, &qword_D3820);
    uint64_t v36 = 1LL;
    uint64_t v37 = v75;
  }

  else
  {
    uint64_t v38 = v67;
    sub_17BC0(v67, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 32));
    if (qword_D2F80 != -1) {
      swift_once(&qword_D2F80, sub_AB1C);
    }
    uint64_t v39 = sub_16C80();
    sub_26F0(v39, (uint64_t)qword_D36D0);
    uint64_t v40 = v66;
    uint64_t v41 = sub_17BC0(v66, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16));
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v41, v42, v43, v44, v45, v46, v47, v48);
    os_log_type_t v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = v40;
      uint64_t v52 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v53 = sub_16AC4(32LL);
      uint64_t v77 = v53;
      *(_DWORD *)uint64_t v52 = 136315138;
      sub_16A6C( &qword_D3830,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v55 = sub_17690(v54);
      uint64_t v76 = sub_17414(v55, v56);
      uint64_t v38 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v52 + 4, v52 + 12);
      sub_16C48();
      sub_16DE4(v51);
      sub_16BD0(&dword_0, v49, v50, "Next date matching time: %s", v52);
      sub_16BB4(v53);
      sub_16AA8(v53);
      sub_16AA8((uint64_t)v52);
    }

    else
    {
      sub_16DE4(v40);
    }

    uint64_t v57 = sub_26B0(&qword_D3828);
    uint64_t v58 = *(void *)(type metadata accessor for Calendar.Component(0LL) - 8);
    uint64_t v59 = *(void *)(v58 + 72);
    uint64_t v60 = *(unsigned __int8 *)(v58 + 80);
    uint64_t v61 = (v60 + 32) & ~v60;
    uint64_t v62 = swift_allocObject(v57, v61 + 5 * v59, v60 | 7);
    *(_OWORD *)(v62 + 16) = xmmword_A4730;
    uint64_t v63 = v62 + v61;
    sub_174E4(v63, enum case for Calendar.Component.year(_:));
    sub_174E4(v63 + v59, enum case for Calendar.Component.month(_:));
    sub_174E4(v63 + 2 * v59, enum case for Calendar.Component.day(_:));
    sub_174E4(v63 + 3 * v59, enum case for Calendar.Component.hour(_:));
    sub_174E4(v63 + 4 * v59, enum case for Calendar.Component.minute(_:));
    sub_51034(v62);
    uint64_t v37 = v75;
    Calendar.dateComponents(_:from:)();
    sub_16D58();
    sub_16DE4(v38);
    uint64_t v36 = 0LL;
  }

  uint64_t v64 = type metadata accessor for DateComponents(0LL);
  sub_17508(v37, v36, v65, v64);
  sub_16CB0();
}

void *sub_14D94(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DirectInvocationUtils.Alarm.UserInfoKey(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v41 - v7;
  uint64_t v9 = enum case for DirectInvocationUtils.Alarm.UserInfoKey.alarmId(_:);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 104);
  uint64_t v11 = v10((char *)&v41 - v7, enum case for DirectInvocationUtils.Alarm.UserInfoKey.alarmId(_:), v2);
  uint64_t v12 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v11);
  uint64_t v14 = v13;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v8, v2);
  sub_288F4(v12, v14, a1, v43);
  swift_bridgeObjectRelease(v14);
  if (!v44)
  {
    sub_16A3C((uint64_t)v43, (uint64_t *)&unk_D4860);
LABEL_6:
    uint64_t v19 = v10(v6, v9, v2);
    uint64_t v20 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v19);
    uint64_t v22 = v21;
    v15(v6, v2);
    sub_288F4(v20, v22, a1, v43);
    swift_bridgeObjectRelease(v22);
    if (v44)
    {
    }

    else
    {
      sub_16A3C((uint64_t)v43, (uint64_t *)&unk_D4860);
    }

    goto LABEL_11;
  }

  uint64_t v16 = sub_26B0(&qword_D3838);
  uint64_t v17 = v41;
  if (v41[2])
  {
    uint64_t v18 = v41[4];
    swift_bridgeObjectRetain(v41[5]);
    swift_bridgeObjectRelease(v17);
    return (void *)v18;
  }

  swift_bridgeObjectRelease(v41);
LABEL_11:
  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  sub_26F0(v23, (uint64_t)qword_D36D0);
  uint64_t v24 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v24, v25, v26, v27, v28, v29, v30, v31);
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    v43[0] = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v36 = swift_bridgeObjectRetain(a1);
    uint64_t v37 = Dictionary.description.getter( v36,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v39 = v38;
    swift_bridgeObjectRelease(a1);
    uint64_t v41 = (void *)sub_3D10(v37, v39, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v39);
    _os_log_impl(&dword_0, v32, v33, "Unable to parse alarm ID from directInvocation.userData: %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  return 0LL;
}

void sub_1511C()
{
  uint64_t v3 = v2;
  id v51 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for SiriKitIntentHandler(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_177C0();
  sub_26B0(&qword_D37D0);
  sub_16AFC();
  __chkstk_darwin(v9);
  sub_177D8();
  sub_175DC();
  __chkstk_darwin(v10);
  uint64_t v12 = (os_log_s *)((char *)&v50 - v11);
  sub_3F88(v3, (uint64_t)&v50 - v11, &qword_D37D0);
  uint64_t v13 = sub_175B8();
  uint64_t v14 = sub_17318();
  uint64_t v16 = sub_16BBC(v14, v15, v13);
  if (v17)
  {
    sub_17018(v16, &qword_D37D0);
LABEL_10:
    if (qword_D2F80 != -1) {
      swift_once(&qword_D2F80, sub_AB1C);
    }
    uint64_t v24 = sub_16C80();
    sub_16CD0(v24, (uint64_t)qword_D36D0);
    os_log_type_t v25 = sub_16C50();
    if (os_log_type_enabled(v12, v25))
    {
      uint64_t v26 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)uint64_t v26 = 0;
      sub_16B44( &dword_0,  v12,  v25,  "makeIntentExecutionBehavior: No eligible devices for remote execution found. Continuing local execution.",  v26);
      sub_16AA8((uint64_t)v26);
    }

    type metadata accessor for SiriKitIntentExecutionBehavior(0LL);
    swift_retain(v6);
    id v27 = v51;
    uint64_t v28 = static AlarmIntentHandlerUtils.selectIntentHandlers(from:)(v51);
    sub_17B80(v28, &qword_D3850, &OBJC_CLASS___INIntent_ptr);
    id v29 = v27;
    uint64_t v30 = sub_173E8();
    SiriKitIntentHandler.init<A>(app:intentHandler:intent:)(v30);
    static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)(v0);
    sub_175C0(v0, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    goto LABEL_21;
  }

  uint64_t v18 = (void *)HALDeviceContext.remoteDevice.getter(v13);
  sub_1760C((uint64_t)v12);
  if (!v18) {
    goto LABEL_10;
  }
  uint64_t v19 = sub_17174();
  sub_3F88(v19, v20, v21);
  uint64_t v22 = sub_16BBC(v1, 1LL, v13);
  if (v17)
  {
    sub_172EC(v22, &qword_D37D0);
  }

  else
  {
    HALAlarmDeviceContext.remoteExecutionId.getter(v22);
    uint64_t v12 = v23;
    sub_1760C(v1);
    if (v12)
    {

      sub_16C48();
      goto LABEL_10;
    }
  }

  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v31 = sub_16C80();
  sub_26F0(v31, (uint64_t)qword_D36D0);
  id v32 = v18;
  id v33 = v51;
  id v34 = v32;
  id v35 = v33;
  Logger.logObject.getter(v35, v36, v37, v38, v39, v40, v41, v42);
  os_log_type_t v43 = sub_176A8();
  if (sub_178F8((os_log_s *)v32))
  {
    uint64_t v44 = sub_16AC4(22LL);
    uint64_t v45 = (void *)sub_16AC4(8LL);
    id v51 = (id)sub_16AC4(32LL);
    id v53 = v51;
    *(_DWORD *)uint64_t v44 = 136315394;
    uint64_t v46 = DeviceUnit.identifier.getter();
    uint64_t v52 = sub_17414(v46, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v44 + 4, v44 + 12);

    sub_16C48();
    *(_WORD *)(v44 + 12) = 2112;
    uint64_t v52 = (uint64_t)v35;
    id v48 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v44 + 14, v44 + 22);
    *uint64_t v45 = v35;

    sub_1712C( &dword_0,  (os_log_s *)v32,  v43,  "makeIntentExecutionBehavior: Handle on target device: %s, for intent: %@",  (uint8_t *)v44);
    sub_26B0(&qword_D3858);
    sub_16BB4((uint64_t)v45);
    sub_16AA8((uint64_t)v45);
    uint64_t v49 = (uint64_t)v51;
    sub_16BB4((uint64_t)v51);
    sub_16AA8(v49);
    sub_16AA8(v44);
  }

  else
  {
  }

  type metadata accessor for SiriKitIntentExecutionBehavior(0LL);
  static SiriKitIntentExecutionBehavior.remoteIntentExecution(targetDevice:)(v34);
  sub_174D0();
LABEL_21:
  sub_16CB0();
}

void sub_1552C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  os_log_type_t v25 = v24;
  uint64_t v320 = v26;
  uint64_t v27 = sub_175B0();
  sub_16D00(v27, (uint64_t)&v324);
  uint64_t v300 = v28;
  sub_16AFC();
  __chkstk_darwin(v29);
  sub_16B30();
  sub_16DCC(v30);
  sub_26B0(&qword_D36E8);
  sub_16AFC();
  __chkstk_darwin(v31);
  sub_16B30();
  os_log_type_t v295 = v32;
  uint64_t v296 = (uint8_t *)type metadata accessor for ButtonOption(0LL);
  uint64_t v293 = *((void *)v296 - 1);
  sub_16AFC();
  __chkstk_darwin(v33);
  sub_16AB4();
  __chkstk_darwin(v34);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v35);
  sub_16BF8();
  uint64_t v299 = sub_16E6C(v36);
  uint64_t v298 = *(void *)(v299 - 8);
  sub_16AFC();
  __chkstk_darwin(v37);
  sub_16DCC((uint64_t)&v292[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL)]);
  sub_26B0((uint64_t *)&unk_D36F0);
  sub_16AFC();
  __chkstk_darwin(v39);
  sub_16B30();
  uint64_t v307 = v40;
  uint64_t v309 = sub_16E50();
  uint64_t v306 = *(void *)(v309 - 8);
  sub_16AFC();
  __chkstk_darwin(v41);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v42);
  sub_16AB4();
  __chkstk_darwin(v43);
  sub_16AB4();
  __chkstk_darwin(v44);
  sub_16BF8();
  uint64_t v313 = v45;
  uint64_t v46 = (uint8_t *)type metadata accessor for SiriKitConfirmationState(0LL);
  uint64_t v318 = (uint8_t *)*((void *)v46 - 1);
  id v319 = v46;
  sub_16AFC();
  __chkstk_darwin(v47);
  uint64_t v317 = (void (*)(uint64_t))&v292[-((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_16AF0();
  __chkstk_darwin(v49);
  sub_16BF8();
  uint64_t v316 = v50;
  uint64_t v51 = sub_17020();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v314 = v51;
  uint64_t v315 = v52;
  sub_16AFC();
  __chkstk_darwin(v53);
  sub_16B08();
  uint64_t v308 = v54;
  sub_16AF0();
  __chkstk_darwin(v55);
  os_log_type_t v310 = &v292[-v56];
  sub_16AF0();
  __chkstk_darwin(v57);
  sub_16BD8();
  uint64_t v312 = v58;
  sub_16AF0();
  __chkstk_darwin(v59);
  uint64_t v311 = &v292[-v60];
  uint64_t v301 = sub_16F04();
  uint64_t v61 = *(void *)(v301 - 8);
  __chkstk_darwin(v301);
  sub_16AB4();
  __chkstk_darwin(v62);
  uint64_t v64 = &v292[-v63];
  uint64_t v305 = sub_17134();
  uint64_t v304 = *(void *)(v305 - 8);
  sub_16AFC();
  __chkstk_darwin(v65);
  sub_16B30();
  uint64_t v302 = v66;
  uint64_t v67 = (uint8_t *)sub_16EF8();
  sub_17780();
  __chkstk_darwin(v68);
  sub_16AB4();
  __chkstk_darwin(v69);
  uint64_t v71 = (uint64_t *)&v292[-v70];
  uint64_t v72 = sub_17144();
  uint64_t v73 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  sub_17540();
  uint64_t v75 = __chkstk_darwin(v74);
  uint64_t v77 = (uint64_t *)&v292[-v76];
  Input.parse.getter(v75);
  int v78 = sub_16D0C((uint64_t)v71, v20[11]);
  if (v78 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_16D0C((uint64_t)v71, v20[12]);
LABEL_5:
    uint64_t v80 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v73 + 32);
    v80(v77, v71, v72);
    v80(v21, v77, v72);
    uint64_t v81 = sub_1713C();
    sub_16D14(v81);
    uint64_t v82 = sub_171DC();
    if (qword_D2F80 != -1) {
      swift_once(&qword_D2F80, sub_AB1C);
    }
    uint64_t v83 = sub_16C80();
    sub_26F0(v83, (uint64_t)qword_D36D0);
    uint64_t v84 = sub_172A8(v82);
    uint64_t v92 = (os_log_s *)Logger.logObject.getter(v84, v85, v86, v87, v88, v89, v90, v91);
    os_log_type_t v93 = static os_log_type_t.default.getter();
    if (sub_178F8(v92))
    {
      uint64_t v94 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v95 = sub_16AC4(32LL);
      uint64_t v323 = (uint8_t *)v95;
      *(_DWORD *)uint64_t v94 = 136315138;
      uint64_t v321 = v82;
      sub_16A6C(&qword_D3770, type metadata accessor for AlarmNLIntent, (uint64_t)&unk_A6AEC);
      uint64_t v96 = sub_1714C();
      uint64_t v98 = sub_16B80(v96, v97);
      uint64_t v99 = sub_17988(v98);
      sub_16F1C(v99, v100, v101);
      sub_16EBC(v82);
      sub_16C48();
      sub_16BD0(&dword_0, v92, v93, "alarmNLIntent: %s", v94);
      sub_16BB4(v95);
      sub_16AA8(v95);
      sub_16AA8((uint64_t)v94);
    }

    else
    {

      sub_16EBC(v82);
    }

    uint64_t v102 = v316;
    sub_7165C();
    uint64_t v104 = (uint64_t)v317;
    uint64_t v103 = v318;
    (*((void (**)(void (*)(uint64_t), void, uint8_t *))v318 + 13))( v317,  enum case for SiriKitConfirmationState.confirmed(_:),  v319);
    char v105 = sub_287F0(v102, v104);
    sub_16FD8();
    uint64_t v106 = (void (*)(uint64_t))*((void *)v103 + 1);
    uint64_t v107 = sub_17614();
    v106(v107);
    sub_17924();
    uint64_t v108 = sub_173F4();
    uint64_t v109 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 104LL);
    if ((v105 & 1) != 0) {
      uint64_t v110 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
    }
    else {
      uint64_t v110 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
    }
    uint64_t v111 = *v110;
    uint64_t v112 = v320;
    goto LABEL_14;
  }

  if (v78 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_16D0C((uint64_t)v71, v20[12]);
    uint64_t v79 = sub_26B0(&qword_D3768);
    swift_release(*(uint64_t *)((char *)v71 + *(int *)(v79 + 48)));
    goto LABEL_5;
  }

  if (v78 != enum case for Parse.directInvocation(_:))
  {
    if (v78 != enum case for Parse.NLv4IntentOnly(_:))
    {
      if (v78 != enum case for Parse.uso(_:))
      {
        if (qword_D2F80 != -1) {
          swift_once(&qword_D2F80, sub_AB1C);
        }
        uint64_t v182 = sub_16C80();
        sub_26F0(v182, (uint64_t)qword_D36D0);
        uint64_t v183 = v300;
        uint64_t v184 = v297;
        uint64_t v185 = sub_16ED4(v297, (uint64_t)v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v300 + 16));
        char v193 = (os_log_s *)Logger.logObject.getter(v185, v186, v187, v188, v189, v190, v191, v192);
        os_log_type_t v194 = static os_log_type_t.error.getter();
        if (sub_16E18(v193))
        {
          uint64_t v195 = (uint8_t *)sub_16AC4(12LL);
          id v319 = (uint8_t *)sub_16AC4(32LL);
          uint64_t v323 = v319;
          *(_DWORD *)uint64_t v195 = 136315138;
          uint64_t v317 = (void (*)(uint64_t))(v195 + 4);
          uint64_t v318 = v195;
          sub_17944();
          Input.parse.getter(v196);
          uint64_t v197 = sub_1795C();
          uint64_t v199 = String.init<A>(describing:)(v197, v198);
          uint64_t v201 = sub_16B80(v199, v200);
          uint64_t v202 = sub_17678(v201);
          sub_176B0(v202, v203, v204);
          sub_16C48();
          sub_1772C();
          sub_16E7C(v184, v205);
          uint64_t v206 = v318;
          sub_16BD0(&dword_0, v193, v194, "Received not an supported input: %s", v318);
          uint64_t v207 = v319;
          sub_16BB4((uint64_t)v319);
          sub_16AA8((uint64_t)v207);
          sub_16AA8((uint64_t)v206);
        }

        else
        {
          sub_16E7C(v184, *(uint64_t (**)(uint64_t, uint64_t))(v183 + 8));
        }

        uint64_t v208 = enum case for ConfirmationResponse.rejected(_:);
        sub_173F4();
        uint64_t v209 = sub_17A84();
        v210(v209, v208);
        sub_16D0C((uint64_t)v71, v20[1]);
        goto LABEL_15;
      }

      sub_16D0C((uint64_t)v71, v20[12]);
      sub_171E8();
      uint64_t v163 = sub_176FC(v302, (uint64_t)v71, v162);
      uint64_t v164 = USOParse.userParse.getter(v163);
      uint64_t v165 = Siri_Nlu_External_UserParse.userDialogActs.getter(v164);
      sub_1799C((uint64_t)v64);
      uint64_t v166 = *(char **)(v165 + 16);
      if (v166)
      {
        sub_172F4();
        uint64_t v168 = v165 + v167;
        uint64_t v170 = *(void *)(v169 + 72);
        swift_bridgeObjectRetain(v165);
        uint64_t v171 = (uint64_t)v311;
        while (1)
        {
          uint64_t v172 = sub_1787C();
          uint64_t v174 = sub_1705C(v172, v173);
          char v175 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v174);
          uint64_t v176 = v312;
          uint64_t v177 = sub_1705C(v312, v171);
          if ((v175 & 1) != 0) {
            break;
          }
          char v178 = Siri_Nlu_External_UserDialogAct.hasWantedToProceed.getter(v177);
          sub_173C8(v176);
          sub_173C8(v171);
          if ((v178 & 1) != 0) {
            goto LABEL_72;
          }
          v168 += v170;
          --v166;
          uint64_t v179 = v314;
          uint64_t v180 = (uint64_t)v310;
          if (!v166)
          {
            sub_16C88(v165);
            goto LABEL_59;
          }
        }

        uint64_t v166 = *(char **)(v315 + 8);
        sub_173C0(v176);
        sub_173C0(v171);
LABEL_72:
        sub_16C88(v165);
        if (qword_D2F80 != -1) {
          swift_once(&qword_D2F80, sub_AB1C);
        }
        uint64_t v236 = sub_16C80();
        sub_16CD0(v236, (uint64_t)qword_D36D0);
        os_log_type_t v237 = sub_16B4C();
        BOOL v238 = sub_16ACC(v237);
        uint64_t v239 = v302;
        if (v238)
        {
          uint64_t v240 = (_WORD *)sub_16AC4(2LL);
          sub_16BEC(v240);
          sub_16ADC(&dword_0, v241, v242, "User accepted the task, will handle.");
          sub_16AA8(v165);
        }

        sub_16CC8(v239, *(uint64_t (**)(uint64_t, void))(v304 + 8));
        goto LABEL_77;
      }

      sub_16F40();
      uint64_t v179 = v314;
      uint64_t v180 = (uint64_t)v310;
LABEL_59:
      sub_17944();
      USOParse.userParse.getter(v219);
      uint64_t v220 = (void *)sub_179DC();
      sub_1799C(v165);
      uint64_t v221 = v220[2];
      uint64_t v222 = v308;
      if (v221)
      {
        sub_179E4();
        uint64_t v224 = *(void *)(v223 + 72);
        sub_16FD0();
        while (1)
        {
          uint64_t v225 = sub_17464(v180, v165);
          char v226 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v225);
          uint64_t v227 = sub_17464(v222, v180);
          if ((v226 & 1) != 0) {
            break;
          }
          char v228 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v227);
          uint64_t v229 = v222;
          uint64_t v230 = *(void (**)(uint64_t, uint64_t))(v315 + 8);
          v230(v229, v179);
          v230(v180, v179);
          if ((v228 & 1) != 0) {
            goto LABEL_81;
          }
          v165 += v224;
          --v221;
          uint64_t v222 = v308;
          if (!v221)
          {
            sub_16C88((uint64_t)v220);
            goto LABEL_86;
          }
        }

        char v259 = *(void (**)(uint64_t, uint64_t))(v315 + 8);
        v259(v222, v179);
        v259(v180, v179);
LABEL_81:
        sub_16C88((uint64_t)v220);
        if (qword_D2F80 != -1) {
          swift_once(&qword_D2F80, sub_AB1C);
        }
        uint64_t v260 = sub_16C80();
        sub_16CD0(v260, (uint64_t)qword_D36D0);
        os_log_type_t v261 = sub_16B4C();
        if (sub_16ACC(v261))
        {
          uint64_t v262 = (_WORD *)sub_16AC4(2LL);
          sub_16BEC(v262);
          sub_16ADC(&dword_0, v263, v264, "User cancelled/rejected the task, will cancel the request.");
          sub_16AA8(v165);
        }
      }

      else
      {
        sub_16D58();
      }

LABEL_86:
      uint64_t v265 = sub_17748();
      sub_16CC8(v265, v266);
LABEL_87:
      uint64_t v243 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
      goto LABEL_88;
    }

    sub_16D0C((uint64_t)v71, v20[12]);
    uint64_t v139 = *v71;
    uint64_t v140 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted);
    if (sub_16C1C(v140) || (uint64_t v141 = objc_opt_self(&OBJC_CLASS___SIRINLUUserWantedToProceed), sub_16C1C(v141)))
    {
      if (qword_D2F80 != -1) {
        swift_once(&qword_D2F80, sub_AB1C);
      }
      uint64_t v142 = sub_16C80();
      sub_16CD0(v142, (uint64_t)qword_D36D0);
      os_log_type_t v143 = sub_16C50();
      if (sub_16BA4(v143))
      {
        uint64_t v144 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v144);
        sub_16B44(&dword_0, v25, (os_log_type_t)v21, "Received UserDialogAct - UserAccepted", v67);
        sub_16AA8((uint64_t)v67);
        sub_16DA0();
      }

      else
      {

        sub_16DA0();
      }

LABEL_77:
      uint64_t v243 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
LABEL_88:
      uint64_t v267 = *v243;
      sub_173F4();
      uint64_t v112 = sub_17A84();
      uint64_t v111 = v267;
LABEL_14:
      v109(v112, v111, v108);
LABEL_15:
      sub_16CB0();
      return;
    }

    uint64_t v231 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected);
    if (sub_16C1C(v231))
    {
      if (qword_D2F80 != -1) {
        swift_once(&qword_D2F80, sub_AB1C);
      }
      uint64_t v232 = sub_16C80();
      sub_16CD0(v232, (uint64_t)qword_D36D0);
      os_log_type_t v233 = sub_16C50();
      if (sub_16BA4(v233))
      {
        uint64_t v234 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v234);
        uint64_t v235 = "Received UserDialogAct - UserRejected";
LABEL_94:
        sub_16B44(&dword_0, v25, (os_log_type_t)v21, v235, v67);
        uint64_t v272 = (uint64_t)v67;
LABEL_95:
        sub_16AA8(v272);
        sub_16DA0();

        goto LABEL_87;
      }
    }

    else
    {
      uint64_t v268 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
      if (!sub_16C1C(v268))
      {
        if (qword_D2F80 != -1) {
          swift_once(&qword_D2F80, sub_AB1C);
        }
        uint64_t v276 = sub_16C80();
        os_log_type_t v25 = (os_log_s *)sub_26F0(v276, (uint64_t)qword_D36D0);
        uint64_t v277 = sub_17274();
        Logger.logObject.getter(v277, v278, v279, v280, v281, v282, v283, v284);
        os_log_type_t v285 = sub_17714();
        if (!sub_16C28(v285))
        {

          swift_unknownObjectRelease_n(v139, 3LL);
          goto LABEL_87;
        }

        uint64_t v286 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v287 = sub_16AC4(32LL);
        sub_16E44(v287);
        sub_16D70(4.8149e-34);
        uint64_t v288 = sub_26B0(&qword_D3760);
        uint64_t v289 = sub_16D20(v288);
        uint64_t v291 = sub_16B80(v289, v290);
        sub_16C04(v291);
        sub_16F2C();
        sub_16D68();
        sub_16BD0(&dword_0, v25, (os_log_type_t)v67, "Received unsupported userDialogAct for confirmation: %s", v286);
        sub_16BB4((uint64_t)v77);
        sub_16AA8((uint64_t)v77);
        uint64_t v272 = (uint64_t)v286;
        goto LABEL_95;
      }

      if (qword_D2F80 != -1) {
        swift_once(&qword_D2F80, sub_AB1C);
      }
      uint64_t v269 = sub_16C80();
      sub_16CD0(v269, (uint64_t)qword_D36D0);
      os_log_type_t v270 = sub_16C50();
      if (sub_16BA4(v270))
      {
        uint64_t v271 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v271);
        uint64_t v235 = "Received UserDialogAct - UserCancelled";
        goto LABEL_94;
      }
    }

    sub_16DA0();
    goto LABEL_87;
  }

  sub_16D0C((uint64_t)v71, v20[12]);
  uint64_t v113 = v306;
  uint64_t v114 = v313;
  uint64_t v115 = v309;
  sub_16ED4(v313, (uint64_t)v71, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v306 + 32));
  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v116 = sub_16C80();
  uint64_t v117 = (uint8_t *)sub_26F0(v116, (uint64_t)qword_D36D0);
  uint64_t v118 = *(uint8_t **)(v113 + 16);
  uint64_t v119 = sub_17B00((uint64_t)&a18);
  uint64_t v120 = sub_17980(v119, v114);
  uint64_t v318 = v117;
  Logger.logObject.getter(v120, v121, v122, v123, v124, v125, v126, v127);
  os_log_type_t v128 = sub_16B4C();
  if (sub_16CA0(v128))
  {
    uint64_t v61 = 12LL;
    uint64_t v129 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v130 = sub_16AC4(32LL);
    id v319 = v118;
    uint64_t v131 = v130;
    uint64_t v323 = (uint8_t *)v130;
    sub_1786C(4.8149e-34);
    uint64_t v132 = sub_17AC4((uint64_t)&a17);
    ((void (*)(uint64_t, uint64_t *, uint64_t))v319)(v132, v77, v115);
    uint64_t v133 = sub_16F24(v72);
    unint64_t v135 = v134;
    uint64_t v321 = sub_16B80(v133, v134);
    uint64_t v136 = v114;
    uint64_t v114 = v313;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v321, &v322, 12LL, v136);
    unint64_t v137 = v135;
    uint64_t v115 = v309;
    swift_bridgeObjectRelease(v137);
    uint64_t v138 = *(uint8_t **)(v113 + 8);
    sub_173C8((uint64_t)v77);
    sub_16BD0(&dword_0, (os_log_s *)v20, (os_log_type_t)v67, "Handling direct invocation: %s", v129);
    sub_16BB4(v131);
    sub_16AA8(v131);
    sub_16AA8((uint64_t)v129);
  }

  else
  {
    uint64_t v138 = *(uint8_t **)(v113 + 8);
    sub_173C8((uint64_t)v77);
  }

  uint64_t v145 = v307;
  static DirectInvocationUtils.siriKitConfirmationResponse(_:)(v114);
  os_log_type_t v146 = (uint8_t *)sub_173F4();
  uint64_t v147 = sub_16BBC((uint64_t)v145, 1LL, (uint64_t)v146);
  if (!v148)
  {
    uint64_t v181 = sub_17174();
    ((void (*)(uint64_t))v138)(v181);
    sub_17160(v320, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*((void *)v146 - 1) + 32LL));
    goto LABEL_15;
  }

  sub_1784C(v147, (uint64_t *)&unk_D36F0);
  uint64_t v150 = Parse.DirectInvocation.userData.getter(v149);
  id v319 = v138;
  if (!v150) {
    goto LABEL_53;
  }
  uint64_t v145 = (os_log_s *)v150;
  uint64_t v151 = v298;
  uint64_t v152 = sub_17214( enum case for DirectInvocationUtils.Alarm.UserInfoKey.buttonPressed(_:),  *(uint64_t (**)(void, uint64_t, void))(v298 + 104));
  LOBYTE(v113) = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v152);
  uint64_t v67 = v153;
  sub_16EF0(v114, *(uint64_t (**)(uint64_t, uint64_t))(v151 + 8));
  uint64_t v154 = sub_1795C();
  sub_288F4(v154, v155, (uint64_t)v145, v156);
  swift_bridgeObjectRelease(v67);
  uint64_t v157 = sub_16D58();
  if (!v324)
  {
    sub_1793C(v157, (uint64_t *)&unk_D4860);
LABEL_53:
    uint64_t v211 = v303;
    sub_17980(v303, v114);
    sub_17B48();
    os_log_type_t v212 = sub_16D40();
    if (sub_16C38(v212))
    {
      uint64_t v213 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v214 = sub_16AC4(32LL);
      sub_1732C(v214);
      sub_1786C(4.8149e-34);
      uint64_t v318 = v146;
      uint64_t v215 = sub_17B00((uint64_t)&a17);
      sub_17980(v215, v211);
      uint64_t v216 = sub_16F24((uint64_t)v146);
      uint64_t v321 = sub_16B80(v216, v217);
      sub_16C90(v321, (uint64_t)&v322);
      sub_16D68();
      ((void (*)(uint64_t, uint64_t))v319)(v211, v115);
      sub_16BD0( &dword_0,  v145,  (os_log_type_t)v113,  "Received unsupported directInvocation for alarm confirmation: %s",  v213);
      sub_16BB4((uint64_t)v67);
      sub_16AA8((uint64_t)v67);
      sub_16AA8((uint64_t)v213);

      sub_176B8(v313);
      os_log_type_t v146 = v318;
    }

    else
    {

      ((void (*)(uint64_t, uint64_t))v319)(v211, v115);
      sub_173C0(v114);
    }

    goto LABEL_56;
  }

  if ((sub_16E08(v157, v158, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) == 0)
  {
LABEL_37:
    uint64_t v115 = v309;
    goto LABEL_53;
  }

  uint64_t v145 = v295;
  ButtonOption.init(rawValue:)(v321, v322);
  uint64_t v159 = sub_17830();
  uint64_t v67 = v296;
  uint64_t v161 = sub_16BBC(v159, v160, (uint64_t)v296);
  if (v148)
  {
    sub_1784C(v161, &qword_D36E8);
    goto LABEL_37;
  }

  uint64_t v244 = v293;
  uint64_t v245 = v294;
  sub_17338(v294, (uint64_t)v145, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v293 + 32));
  uint64_t v246 = sub_175F4();
  uint64_t v317 = v247;
  ((void (*)(uint64_t, uint64_t, uint8_t *))v247)(v246, v245, v67);
  sub_17B48();
  os_log_type_t v248 = sub_16B4C();
  if (sub_16CA0(v248))
  {
    uint64_t v250 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v318 = (uint8_t *)sub_16AC4(32LL);
    uint64_t v323 = v318;
    uint64_t v251 = v61;
    *(_DWORD *)uint64_t v250 = 136315138;
    uint64_t v252 = ButtonOption.rawValue.getter();
    uint64_t v254 = sub_16B80(v252, v253);
    uint64_t v255 = sub_17064(v254);
    uint64_t v245 = v294;
    sub_176B0(v255, v256, v257);
    sub_16C48();
    uint64_t v258 = (uint64_t)v296;
    sub_17768(v251);
    sub_16BD0(&dword_0, v145, (os_log_type_t)v67, "Received confirmation directionInvocation, buttonPressed: %s", v250);
    uint64_t v67 = v318;
    sub_16BB4((uint64_t)v318);
    sub_16AA8((uint64_t)v67);
    sub_16AA8((uint64_t)v250);
  }

  else
  {
    uint64_t v273 = v61;
    uint64_t v258 = (uint64_t)v296;
    sub_17768(v273);
  }

  uint64_t v274 = sub_179C8((uint64_t)&v318);
  v317(v274);
  int v275 = (*(uint64_t (**)(uint8_t *, uint64_t))(v244 + 88))(v67, v258);
  if (v275 == enum case for ButtonOption.yes(_:))
  {
    sub_17768(v245);
    sub_17930();
    uint64_t v218 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
    goto LABEL_57;
  }

  if (v275 == enum case for ButtonOption.cancel(_:))
  {
    sub_17768(v245);
    sub_17930();
LABEL_56:
    uint64_t v218 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
LABEL_57:
    (*(void (**)(uint64_t, void, uint8_t *))(*((void *)v146 - 1) + 104LL))(v320, *v218, v146);
    goto LABEL_15;
  }

  _diagnoseUnexpectedEnumCase<A>(type:)(v258, v258);
  __break(1u);
}

uint64_t sub_16880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t *sub_1688C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_168CC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_16910()
{
  unint64_t result = qword_D3808;
  if (!qword_D3808)
  {
    uint64_t v1 = sub_16974(&qword_D3800);
    sub_169B8();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_D3808);
  }

  return result;
}

uint64_t sub_16974(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_169B8()
{
  unint64_t result = qword_D3810;
  if (!qword_D3810)
  {
    unint64_t result = swift_getWitnessTable(&unk_A77BC, &type metadata for AlarmSnapshot);
    atomic_store(result, (unint64_t *)&qword_D3810);
  }

  return result;
}

uint64_t sub_169F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D3818);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_16A3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_26B0(a2);
  sub_17AD0(*(void *)(v2 - 8));
  sub_17B50();
}

void sub_16A6C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_17B50();
}

uint64_t sub_16AA8(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

void sub_16AB4()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_16AC4(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

BOOL sub_16ACC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_16ADC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

  ;
}

  ;
}

uint64_t sub_16B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v7 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v5, a4, 0LL);
}

  ;
}

void sub_16B44(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_16B4C()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_16B54()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 512) + 8LL))( *(void *)(v0 - 504),  *(void *)(v0 - 496));
}

uint64_t sub_16B74()
{
  return Logger.logObject.getter();
}

uint64_t sub_16B80(uint64_t a1, unint64_t a2)
{
  return sub_3D10(a1, a2, (uint64_t *)(v2 - 120));
}

uint64_t sub_16B88(uint64_t a1)
{
  return sub_16880(a1, 1LL, v1);
}

BOOL sub_16BA4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_16BB4(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

uint64_t sub_16BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_16880(a1, a2, a3);
}

void sub_16BD0(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

uint64_t sub_16BE4()
{
  return Logger.logObject.getter();
}

_WORD *sub_16BEC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

  ;
}

uint64_t sub_16C04(uint64_t a1)
{
  *(void *)(v4 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 136, v3 + 8, v2, v1);
}

uint64_t sub_16C1C(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

BOOL sub_16C28(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_16C38(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_16C48()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_16C50()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_16C58()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 328) + 8LL))( *(void *)(v0 - 336),  *(void *)(v0 - 320));
}

void sub_16C78(uint64_t a1)
{
}

uint64_t sub_16C80()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_16C88(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_16C90(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 136, a2, v3, v2);
}

BOOL sub_16CA0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_16CC8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 256));
}

uint64_t sub_16CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_26F0(a1, a2);
  return Logger.logObject.getter(v2, v3, v4, v5, v6, v7, v8, v9);
}

_WORD *sub_16CE4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_16CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v4 - 192, v4 - 144, a3, a4, 6LL);
}

uint64_t sub_16D00@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  return result;
}

uint64_t sub_16D0C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_16D14(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_16D20(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 136, a1);
}

BOOL sub_16D30(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_16D40()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_16D48@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_16D50()
{
  return Logger.logObject.getter();
}

uint64_t sub_16D58()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_16D60()
{
  return Logger.logObject.getter();
}

uint64_t sub_16D68()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_16D70(float a1)
{
  *uint64_t v2 = a1;
  *(void *)(v3 - 136) = v1;
  return swift_unknownObjectRetain(v1);
}

  ;
}

uint64_t sub_16DA0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_16DA8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 408) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return 0LL;
}

void sub_16DCC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

void sub_16DD8(uint64_t a1@<X8>)
{
}

uint64_t sub_16DE4(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_16DEC(uint64_t a1)
{
  *(void *)(v2 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 136, v2 - 128, *(void *)(v2 - 144), v1);
}

uint64_t sub_16E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v4 - 136, v4 - 120, a3, a4, 6LL);
}

BOOL sub_16E18(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_16E20()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v1, v2);
}

id sub_16E30()
{
  return sub_1B654(v1, v0);
}

uint64_t sub_16E44(uint64_t result)
{
  *(void *)(v1 - 120) = result;
  return result;
}

uint64_t sub_16E50()
{
  return type metadata accessor for Parse.DirectInvocation(0LL);
}

uint64_t sub_16E5C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for USOParse(0LL);
}

uint64_t sub_16E6C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for DirectInvocationUtils.Alarm.UserInfoKey(0LL);
}

uint64_t sub_16E7C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_16E84@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_16E8C(uint64_t a1)
{
  *(void *)(v1 - 192) = a1;
  return v1 - 192;
}

uint64_t sub_16EA0()
{
  return Logger.logObject.getter();
}

uint64_t sub_16EA8()
{
  return *(void *)(v0 - 320);
}

uint64_t sub_16EBC(uint64_t a1)
{
  return swift_release_n(a1, 2LL);
}

void sub_16EC4(uint64_t a1, uint64_t a2)
{
}

void sub_16ECC(uint64_t a1)
{
}

uint64_t sub_16ED4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_16EDC()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_16EE4(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_16EF0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_16EF8()
{
  return type metadata accessor for Parse(0LL);
}

uint64_t sub_16F04()
{
  return type metadata accessor for Siri_Nlu_External_UserParse(0LL);
}

uint64_t sub_16F10()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 272));
}

uint64_t sub_16F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_16F24(uint64_t a1)
{
  return String.init<A>(describing:)(a1, v1);
}

uint64_t sub_16F2C()
{
  return swift_unknownObjectRelease_n(v0, 2LL);
}

uint64_t sub_16F38(uint64_t a1)
{
  return swift_unknownObjectRelease_n(a1, 2LL);
}

uint64_t sub_16F40()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_16F48(uint64_t a1, uint64_t a2)
{
  return String.init<A>(describing:)(v2 - 136, a2);
}

uint64_t sub_16F50(uint64_t a1)
{
  return sub_A40C(a1, 0LL, 1LL, v1);
}

uint64_t sub_16F70@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
}

uint64_t sub_16F80(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v5 - 144) = v1 + 1;
  return v2(*(void *)(v5 - 544), v4, v3);
}

uint64_t sub_16FA8(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v5 - 144) = v1 + 1;
  return v3(*(void *)(v5 - 840), v2, v4);
}

uint64_t sub_16FD0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_16FD8()
{
  return swift_release(v0);
}

uint64_t sub_16FE0()
{
  return static ActionForInput.ignore()();
}

uint64_t sub_16FE8(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v2);
}

uint64_t sub_16FF4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_16FFC()
{
  return swift_release(v0);
}

uint64_t sub_17004(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1700C(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

void sub_17018(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_17020()
{
  return type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
}

uint64_t sub_1702C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_17034()
{
  return type metadata accessor for ActionForInput(0LL);
}

uint64_t sub_1703C(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_17044()
{
  return static ActionForInput.handle()();
}

uint64_t sub_1704C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_17054(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1705C(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_17064(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

uint64_t sub_1707C(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

uint64_t sub_17094@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void, uint64_t, void))(v2 - 264))( *(void *)(a2 - 256),  a1,  *(void *)(v2 - 456));
}

uint64_t sub_170B4(uint64_t a1)
{
  *(void *)(v3 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 136, v3 - 128, v1, v2 + 12);
}

uint64_t sub_170D4(float *a1, float a2)
{
  *a1 = a2;
  *(_DWORD *)(v4 - 144) = v2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 140, a1 + 1, (char *)a1 + v3);
}

void sub_170F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *(void *)(v21 - 272);
  sub_A40C(v22, 1LL, 1LL, a1);
  sub_CF8C(v20, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_17124(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_1712C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_17134()
{
  return type metadata accessor for USOParse(0LL);
}

uint64_t sub_1713C()
{
  return type metadata accessor for AlarmNLIntent(0LL);
}

uint64_t sub_17144()
{
  return type metadata accessor for NLIntent(0LL);
}

uint64_t sub_1714C()
{
  return NLIntentWrapper.description.getter(v0);
}

uint64_t sub_17158@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_17160@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_1716C()
{
  return Logger.logObject.getter();
}

uint64_t sub_17174()
{
  return v0;
}

id sub_17180(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

id sub_1718C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_17198()
{
  return Input.parse.getter();
}

uint64_t sub_171A8(uint64_t a1)
{
  *(void *)(v2 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 136, v2 - 128, *(void *)(v2 - 144), v1);
}

uint64_t sub_171C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 136, a2, v4, a4);
}

uint64_t sub_171D0()
{
  return (*(uint64_t (**)(void))(v0 - 264))();
}

uint64_t sub_171DC()
{
  return sub_716E4(v0);
}

  ;
}

uint64_t sub_171F4()
{
  return *(void *)(v0 - 256);
}

uint64_t sub_17200()
{
  return type metadata accessor for AlarmSearch(0LL);
}

uint64_t sub_1720C()
{
  return Logger.logObject.getter();
}

uint64_t sub_17214@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void, uint64_t, void)@<X8>)
{
  return a2(*(void *)(v2 - 344), a1, *(void *)(v2 - 328));
}

void sub_17230(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_17238@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 680) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return 0LL;
}

uint64_t sub_1725C()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 136) + 8LL))( *(void *)(v0 - 144),  *(void *)(v0 - 128));
}

uint64_t sub_1726C(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2LL);
}

uint64_t sub_17274()
{
  return swift_unknownObjectRetain_n(v0, 2LL);
}

double sub_17280@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_288F4(a1, v3, v2, a2);
}

uint64_t sub_1728C()
{
  return static ActionForInput.cancel()();
}

  ;
}

uint64_t sub_172A8(uint64_t a1)
{
  return swift_retain_n(a1, 2LL);
}

uint64_t sub_172B0(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_172B8(uint64_t a1)
{
  return String.init<A>(describing:)(a1, v1);
}

uint64_t sub_172C0()
{
  return static ActionForInput.ignore()();
}

uint64_t sub_172C8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_172D0()
{
  return static ActionForInput.handle()();
}

uint64_t sub_172D8(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

void sub_172EC(uint64_t a1, uint64_t *a2)
{
}

  ;
}

  ;
}

uint64_t sub_17318()
{
  return v0;
}

uint64_t sub_17324()
{
  return swift_release(v0);
}

uint64_t sub_1732C(uint64_t result)
{
  *(void *)(v1 - 120) = result;
  return result;
}

uint64_t sub_17338@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

double sub_17340()
{
  return sub_288F4(v0, v1, *(void *)(v2 - 272), (_OWORD *)(v2 - 144));
}

uint64_t sub_17358(uint64_t a1)
{
  return _typeName(_:qualified:)(a1, 0LL);
}

uint64_t sub_17360@<X0>(uint64_t a1@<X8>)
{
  return v2(*(void *)(a1 - 256), *(void *)(v3 - 320), v1);
}

uint64_t sub_17378(uint64_t a1)
{
  *(void *)(v4 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 136, v3, v2, v1 + 22);
}

  ;
}

uint64_t sub_173A0()
{
  return *(void *)(v0 - 320);
}

uint64_t sub_173C0(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_173C8(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_173D0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 256))(v1, v0);
}

uint64_t sub_173E8()
{
  return v0;
}

uint64_t sub_173F4()
{
  return type metadata accessor for ConfirmationResponse(0LL);
}

uint64_t sub_173FC(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v3 - 136) = v2;
  return swift_unknownObjectRetain(v2);
}

uint64_t sub_17414(uint64_t a1, unint64_t a2)
{
  return sub_3D10(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_17420(uint64_t a1, unint64_t a2)
{
  return sub_3D10(a1, a2, (uint64_t *)(v2 - 144));
}

uint64_t sub_17428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return v2(a1, *(void *)(a2 - 256));
}

uint64_t sub_17430()
{
  return sub_168CC(v1, v0);
}

uint64_t sub_1743C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_17444()
{
  return static ActionForInput.handle()();
}

uint64_t sub_1744C()
{
  return v2(v0, v1);
}

uint64_t sub_17458(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_3D10(v4, v3, a3);
}

uint64_t sub_17464(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1746C()
{
  return v0(*(void *)(v3 - 128), v2, v1);
}

uint64_t sub_17480()
{
  return static ActionForInput.ignore()();
}

uint64_t sub_17488()
{
  return static ActionForInput.cancel()();
}

  ;
}

uint64_t sub_174AC()
{
  return v0;
}

uint64_t sub_174B8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_174C0(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_174C8(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_174D0()
{
}

void sub_174D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

uint64_t sub_174E4(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

double sub_174EC()
{
  return sub_288F4(v0, v1, v2, (_OWORD *)(v3 - 144));
}

id sub_17500(void *a1)
{
  return [a1 *(SEL *)(v1 + 472)];
}

uint64_t sub_17508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_A40C(a1, a2, 1LL, a4);
}

uint64_t sub_17510(uint64_t a1, uint64_t a2)
{
  return sub_A40C(a1, a2, 1LL, *(void *)(v2 - 424));
}

uint64_t sub_17524()
{
  return 0LL;
}

  ;
}

uint64_t sub_1755C(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_17564@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 136, a2 + 8, v2, a1);
}

uint64_t sub_17578()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_17584()
{
  return swift_dynamicCastUnknownClass(v0, *(void *)(v1 - 216));
}

void sub_17590(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_175A4()
{
}

uint64_t sub_175B0()
{
  return type metadata accessor for Input(0LL);
}

uint64_t sub_175B8()
{
  return type metadata accessor for HALAlarmDeviceContext(0LL);
}

uint64_t sub_175C0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_175C8(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_175D0@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

  ;
}

uint64_t sub_175EC()
{
  return DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter();
}

uint64_t sub_175F4()
{
  return *(void *)(v0 - 424);
}

uint64_t sub_17604@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1760C(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_17614()
{
  return v0;
}

uint64_t sub_17620@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

uint64_t sub_17634()
{
  return v0;
}

uint64_t sub_17640()
{
  return Input.parse.getter();
}

  ;
}

uint64_t sub_17658()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_17660()
{
  return v0;
}

uint64_t sub_1766C()
{
  return v0;
}

uint64_t sub_17678(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

uint64_t sub_17690(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_176A0(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_176A8()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_176B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_176B8(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_176C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_176C8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_176D0()
{
  return v0;
}

uint64_t sub_176DC()
{
  return v0;
}

uint64_t sub_176E8()
{
  return v0;
}

uint64_t sub_176F4()
{
  return Siri_Nlu_External_UserParse.userDialogActs.getter();
}

uint64_t sub_176FC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void)@<X8>)
{
  return a3(a1, a2, *(void *)(v3 - 256));
}

uint64_t sub_17704()
{
  return type metadata accessor for ChangeAlarmStatusIntent(0LL);
}

uint64_t sub_17714()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1771C()
{
  return USOParse.userParse.getter();
}

  ;
}

uint64_t sub_17738()
{
  return v0;
}

uint64_t sub_17748()
{
  return v0;
}

uint64_t sub_17758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t sub_17760(uint64_t a1)
{
  return String.init<A>(describing:)(a1, v1);
}

uint64_t sub_17768(uint64_t a1)
{
  return v1(a1, v2);
}

  ;
}

  ;
}

uint64_t sub_17790()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 176) + 8LL))(v0, *(void *)(v1 - 168));
}

void *sub_177A0()
{
  return sub_14D94(*(void *)(v0 - 272));
}

void *sub_177B0()
{
  return sub_14D94(*(void *)(v0 - 272));
}

  ;
}

  ;
}

uint64_t sub_177E8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for DirectInvocationUtils.Alarm.URI(0LL);
}

uint64_t sub_177F8(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

uint64_t sub_17810@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void, uint64_t, uint64_t)@<X8>)
{
  return a2(*(void *)(v2 - 256), a1, v3);
}

uint64_t sub_17820(uint64_t result)
{
  *(void *)(v1 - 136) = result;
  return result;
}

uint64_t sub_17830()
{
  return v0;
}

uint64_t sub_1783C()
{
  return v0;
}

void sub_1784C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_17854()
{
  return v0;
}

void sub_1786C(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_1787C()
{
  return v0;
}

  ;
}

void sub_17898(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v3 - 136) = v2;
}

  ;
}

uint64_t sub_178B8(uint64_t a1)
{
  return v2(a1, v1);
}

void sub_178C0(uint64_t a1@<X8>)
{
}

uint64_t sub_178CC(uint64_t a1)
{
  return swift_release(*(void *)(v1 + *(int *)(a1 + 48)));
}

uint64_t sub_178D8(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v2);
}

void sub_178E4()
{
  *(void *)(v0 - 136) = *(void *)(v0 - 152);
}

uint64_t sub_178F0()
{
  return static ActionForInput.cancel()();
}

BOOL sub_178F8(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_17900()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_17908@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_1791C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_17924()
{
  return v0(v2, v1);
}

uint64_t sub_17930()
{
  return v2(v1, v0);
}

void sub_1793C(uint64_t a1, uint64_t *a2)
{
}

  ;
}

uint64_t sub_17950()
{
  return swift_unknownObjectRetain_n(v0, 2LL);
}

uint64_t sub_1795C()
{
  return v0;
}

uint64_t sub_17968()
{
  return ButtonOption.init(rawValue:)(v1, v0);
}

uint64_t sub_17974()
{
  return v1(v0, *(void *)(v2 - 208));
}

uint64_t sub_17980(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_17988(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

uint64_t sub_1799C(uint64_t a1)
{
  return v1(a1, *(void *)(v2 - 312));
}

uint64_t sub_179A8()
{
  return v2(v1, v0);
}

uint64_t sub_179B4()
{
  return v0;
}

void sub_179C0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_179C8@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_179DC()
{
  return Siri_Nlu_External_UserParse.userDialogActs.getter();
}

  ;
}

uint64_t sub_179F8(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_17A0C(uint64_t a1)
{
  return String.init<A>(describing:)(a1, v1);
}

uint64_t sub_17A14()
{
  return swift_dynamicCastUnknownClass(v0, v1);
}

uint64_t sub_17A20()
{
  return SIRINLUUserDialogAct.firstUsoTask.getter();
}

uint64_t sub_17A28()
{
  return Logger.logObject.getter();
}

uint64_t sub_17A30()
{
  return USOParse.userParse.getter();
}

uint64_t sub_17A38()
{
  return sub_716E4(v0);
}

NSNumber sub_17A44()
{
  return NSNumber.init(BOOLeanLiteral:)(v0);
}

uint64_t sub_17A50()
{
  return AlarmNLv4Constants.AlarmVerb.init(rawValue:)();
}

uint64_t sub_17A5C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_17A64@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void)@<X8>)
{
  return a3(a1, a2, *(void *)(v3 - 256));
}

uint64_t sub_17A70()
{
  return v0;
}

uint64_t sub_17A84()
{
  return *(void *)(v0 - 144);
}

uint64_t sub_17A98(uint64_t result)
{
  *(void *)(v1 - 120) = result;
  return result;
}

void sub_17AA4(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v2 - 144) = v1 + 1;
}

  ;
}

uint64_t sub_17AC4@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_17AD0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_17ADC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_17AE8(uint64_t a1, uint64_t a2)
{
  return sub_A40C(a1, a2, 1LL, v2);
}

uint64_t sub_17AF4(uint64_t a1, uint64_t a2)
{
  return sub_A40C(a1, a2, 1LL, v2);
}

uint64_t sub_17B00@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_17B0C()
{
  return USOParse.userParse.getter();
}

uint64_t sub_17B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_17B20(uint64_t result)
{
  *(void *)(v1 - 120) = result;
  return result;
}

uint64_t sub_17B2C(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_17B34()
{
  return *(void *)(v0 - 256);
}

uint64_t sub_17B48()
{
  return Logger.logObject.getter();
}

  ;
}

uint64_t sub_17B58()
{
  return swift_getObjectType(v0);
}

uint64_t sub_17B60()
{
  return sub_168CC(v0, v1);
}

uint64_t sub_17B6C()
{
  return v0;
}

uint64_t sub_17B80(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_5E78(0LL, a2, a3);
}

uint64_t sub_17B88()
{
  return v0;
}

uint64_t sub_17B94()
{
  return swift_release(v0);
}

uint64_t sub_17B9C()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_17BA4(uint64_t a1, uint64_t *a2)
{
}

void sub_17BAC(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_17BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_17BC0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void sub_17BC8(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v5)) {
      goto LABEL_3;
    }
LABEL_10:
    id v6 = 0LL;
    goto LABEL_11;
  }

  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  if (!v3) {
    goto LABEL_10;
  }
LABEL_3:
  sub_44080(0LL, (a1 & 0xC000000000000001LL) == 0, a1);
  if ((a1 & 0xC000000000000001LL) != 0) {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }
  else {
    id v4 = *(id *)(a1 + 32);
  }
  id v6 = v4;
LABEL_11:
  swift_bridgeObjectRelease(a1);
  [v1 setAlarm:v6];
}

void sub_17C90(uint64_t a1)
{
}

void sub_17CB0(uint64_t a1)
{
}

void sub_17CC8(uint64_t a1)
{
}

void sub_17CE8(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a2 setAlarms:isa];
}

uint64_t sub_17D44()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D3860);
  sub_26F0(v0, (uint64_t)qword_D3860);
  return static SiriTimeLog.alarmFlow.getter();
}

void sub_17D8C()
{
}

Swift::Int sub_17DB0()
{
  return Hasher._finalize()();
}

uint64_t static SiriAlarm.supportsSecureCoding.getter()
{
  return 1LL;
}

Swift::Int sub_17E00(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_17E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = sub_19884();
  v3[11] = sub_19884();
  v3[12] = sub_19884();
  uint64_t v5 = type metadata accessor for CATOption(0LL);
  v3[13] = sub_19754(*(void *)(v5 - 8));
  uint64_t v6 = sub_16C80();
  v3[14] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[15] = v7;
  v3[16] = sub_19754(v7);
  uint64_t v8 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[17] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[18] = v9;
  v3[19] = sub_19754(v9);
  uint64_t v10 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[20] = v10;
  v3[21] = *(void *)(v10 - 8);
  v3[22] = sub_19884();
  v3[23] = sub_19884();
  v3[24] = sub_19884();
  uint64_t v11 = type metadata accessor for NLContextUpdate(0LL);
  v3[25] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[26] = v12;
  v3[27] = sub_19754(v12);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_17F50()
{
  if (qword_D2F88 != -1) {
    swift_once(&qword_D2F88, sub_17D44);
  }
  unint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = sub_26F0(*(void *)(v0 + 112), (uint64_t)qword_D3860);
  id v3 = v1;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v3, v4, v5, v6, v7, v8, v9, v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  uint64_t v13 = (uint8_t *)v12;
  BOOL v14 = os_log_type_enabled(v11, v12);
  uint64_t v15 = *(void **)(v0 + 56);
  if (v14)
  {
    uint64_t v16 = (uint8_t *)sub_16AC4(12LL);
    *(_DWORD *)uint64_t v16 = 134217984;
    *(void *)(v0 + 32) = [v15 unsupportedReason];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v16 + 4, v16 + 12);

    _os_log_impl( &dword_0,  v11,  (os_log_type_t)v13,  "AlarmOutputFactory.makeUnsupportedValueOutput() called with unsupportedReason: %ld",  v16,  0xCu);
    sub_16AA8((uint64_t)v16);
  }

  else
  {
  }

  uint64_t v17 = SearchAlarmAlarmsUnsupportedReason.init(rawValue:)([*(id *)(v0 + 56) unsupportedReason]);
  if ((v18 & 1) == 0)
  {
    uint64_t v25 = v17;
    uint64_t v26 = NLContextUpdate.init()(v17);
    if (v25 == 1)
    {
      sub_19988();
      sub_1999C(v71);
      sub_19898();
      uint64_t v72 = mach_absolute_time();
      uint64_t v73 = sub_198AC(v72);
      if (v0 == -32) {
        uint64_t v74 = _swiftEmptyArrayStorage;
      }
      else {
        uint64_t v74 = (void *)sub_8487C(v73);
      }
      *(void *)(v0 + 272) = v74;
      sub_199B4();
      sub_199A8();
      uint64_t v41 = sub_1991C();
      *(void *)(v0 + 280) = v41;
      sub_198E0();
      uint64_t v85 = (void *)swift_task_alloc(v13);
      *(void *)(v0 + 288) = v85;
      uint64_t v86 = sub_185E0;
    }

    else
    {
      if (v25 == 2)
      {
        uint64_t v34 = *(void *)(v0 + 152);
        uint64_t v35 = *(void *)(v0 + 128);
        uint64_t v36 = *(void *)(v0 + 112);
        uint64_t v37 = *(void *)(v0 + 120);
        uint64_t v38 = *(void *)(v0 + 104);
        uint64_t v39 = *(void **)(v0 + 48);
        (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 144) + 104LL))( v34,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  *(void *)(v0 + 136));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v35, v2, v36);
        uint64_t v40 = mach_absolute_time();
        SiriTimeMeasurement.init(_:log:startTime:)(v34, v35, v40);
        type metadata accessor for ErrorCATPatternsExecutor(0LL);
        static CATOption.defaultMode.getter();
        uint64_t v41 = CATWrapper.__allocating_init(options:globals:)(v38, 0LL);
        *(void *)(v0 + 224) = v41;
        uint64_t v42 = unk_D3C8C;
        uint64_t v89 = (char *)&dword_D3C88 + dword_D3C88;
        id v43 = v39;
        uint64_t v44 = (void *)swift_task_alloc(v42);
        *(void *)(v0 + 232) = v44;
        *uint64_t v44 = v0;
        v44[1] = sub_18464;
        uint64_t v45 = *(void *)(v0 + 48);
        uint64_t v46 = _swiftEmptyArrayStorage;
        uint64_t v47 = 1LL;
        return ((uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))v89)(v47, v46, v41, v45);
      }

      uint64_t v75 = (os_log_s *)Logger.logObject.getter(v26, v27, v28, v29, v30, v31, v32, v33);
      os_log_type_t v76 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v89 = (char *)(v0 + 24);
        uint64_t v77 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v78 = sub_16AC4(32LL);
        uint64_t v91 = v78;
        *(_DWORD *)uint64_t v77 = 136315138;
        uint64_t v13 = v77 + 12;
        *(void *)(v0 + 16) = v25;
        uint64_t v79 = String.init<A>(describing:)(v0 + 16, &type metadata for SearchAlarmAlarmsUnsupportedReason);
        unint64_t v81 = v80;
        *(void *)(v0 + 24) = sub_3D10(v79, v80, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v77 + 4, v77 + 12);
        swift_bridgeObjectRelease(v81);
        _os_log_impl(&dword_0, v75, v76, "#Response Handling unknown SearchAlarmAlarmsUnsupportedReason: %s", v77, 0xCu);
        swift_arrayDestroy(v78, 1LL);
        sub_16AA8(v78);
        sub_16AA8((uint64_t)v77);
      }

      sub_19988();
      sub_1999C(v82);
      sub_19898();
      uint64_t v83 = mach_absolute_time();
      uint64_t v84 = sub_198AC(v83);
      if (v0 == -32) {
        uint64_t v74 = _swiftEmptyArrayStorage;
      }
      else {
        uint64_t v74 = (void *)sub_8487C(v84);
      }
      *(void *)(v0 + 328) = v74;
      sub_199B4();
      sub_199A8();
      uint64_t v41 = sub_1991C();
      *(void *)(v0 + 336) = v41;
      sub_198E0();
      uint64_t v85 = (void *)swift_task_alloc(v13);
      *(void *)(v0 + 344) = v85;
      uint64_t v86 = sub_18768;
    }

    void *v85 = v0;
    v85[1] = v86;
    uint64_t v45 = *(void *)(v0 + 48);
    uint64_t v47 = 0LL;
    uint64_t v46 = v74;
    return ((uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))v89)(v47, v46, v41, v45);
  }

  uint64_t v48 = (void *)Logger.logObject.getter(v17, v18, v19, v20, v21, v22, v23, v24);
  os_log_type_t v49 = static os_log_type_t.error.getter();
  if (sub_1990C(v49))
  {
    uint64_t v50 = (_WORD *)sub_16AC4(2LL);
    *uint64_t v50 = 0;
    sub_198C0(&dword_0, v51, v52, "AlarmOutputFactory.makeUnsupportedValueOutput got no error reason!");
    sub_16AA8((uint64_t)v50);
  }

  unint64_t v53 = sub_1951C();
  uint64_t v54 = swift_allocError(&type metadata for AlarmOutputFactory.TemplatingError, v53, 0LL, 0LL);
  swift_willThrow(v54, v55, v56, v57, v58, v59, v60, v61);
  uint64_t v90 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 216));
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  sub_19820();
  uint64_t v62 = sub_1987C();
  sub_19964(v62, v63, v64, v65, v66, v67, v68, v69, v87, v88, v90);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18464()
{
  v0[30] = v2;
  v0[31] = v1;
  sub_199C0(v3);
  swift_release(v0[28]);
  sub_19840();
  return sub_197B8();
}

uint64_t sub_184BC()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v0 + 256) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18518;
  sub_198FC();
  return sub_197F4();
}

uint64_t sub_18518()
{
  v0[33] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[30];
  sub_19838(v0[9]);

  sub_19840();
  return sub_19744();
}

#error "185C8: call analysis failed (funcsize=25)"
uint64_t sub_185E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_19810();
  sub_1992C();
  *(void *)(v0 + 296) = v2;
  *(void *)(v0 + 304) = v1;
  sub_199C0(v3);
  if (v1)
  {
    sub_16FFC();
    sub_16D58();
  }

  else
  {
    sub_16D58();
    sub_16FFC();
  }

  sub_19840();
  return sub_19744();
}

uint64_t sub_18644()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v0 + 312) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_186A0;
  sub_198FC();
  return sub_197F4();
}

uint64_t sub_186A0()
{
  v0[40] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[37];
  sub_19838(v0[9]);

  sub_19840();
  return sub_19744();
}

#error "18750: call analysis failed (funcsize=25)"
uint64_t sub_18768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_19810();
  sub_1992C();
  *(void *)(v0 + 352) = v2;
  *(void *)(v0 + 360) = v1;
  sub_199C0(v3);
  if (v1)
  {
    sub_16FFC();
    sub_16D58();
  }

  else
  {
    sub_16D58();
    sub_16FFC();
  }

  sub_19840();
  return sub_19744();
}

uint64_t sub_187CC()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v0 + 368) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18828;
  sub_198FC();
  return sub_197F4();
}

uint64_t sub_18828()
{
  v0[47] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[44];
  sub_19838(v0[9]);

  sub_19840();
  return sub_19744();
}

#error "18900: call analysis failed (funcsize=35)"
uint64_t sub_18918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  sub_1979C();
  uint64_t v1 = *(void *)(v0 + 208);
  sub_19838(*(void *)(v0 + 168));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_19720();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  sub_19820();
  sub_1987C();
  sub_19808();
  uint64_t v2 = (uint64_t (*)(void))sub_198D4();
  return sub_19704(v2);
}

uint64_t sub_18980()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_19838(*(void *)(v0 + 168));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_19720();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  sub_19820();
  sub_1987C();
  sub_19808();
  uint64_t v2 = (uint64_t (*)(void))sub_198D4();
  return sub_19704(v2);
}

uint64_t sub_189E8()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_19838(*(void *)(v0 + 168));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_19720();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  sub_19820();
  sub_1987C();
  sub_19808();
  uint64_t v2 = (uint64_t (*)(void))sub_198D4();
  return sub_19704(v2);
}

uint64_t sub_18A54()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_19838(*(void *)(v0 + 168));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_19720();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  sub_19820();
  sub_1987C();
  sub_19808();
  uint64_t v2 = (uint64_t (*)(void))sub_198D4();
  return sub_19704(v2);
}

uint64_t sub_18AC0()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_19838(*(void *)(v0 + 168));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_19720();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  sub_19820();
  sub_1987C();
  sub_19808();
  uint64_t v2 = (uint64_t (*)(void))sub_198D4();
  return sub_19704(v2);
}

uint64_t sub_18B2C()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_19838(*(void *)(v0 + 168));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_19720();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  sub_19820();
  sub_1987C();
  sub_19808();
  uint64_t v2 = (uint64_t (*)(void))sub_198D4();
  return sub_19704(v2);
}

uint64_t sub_18B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  v3[5] = sub_19754(*(void *)(v4 - 8));
  uint64_t v5 = sub_16C80();
  v3[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[7] = v6;
  v3[8] = sub_19754(v6);
  uint64_t v7 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[10] = v8;
  v3[11] = sub_19754(v8);
  uint64_t v9 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[13] = v10;
  v3[14] = sub_19754(v10);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_18C2C()
{
  if (qword_D2F88 != -1) {
    swift_once(&qword_D2F88, sub_17D44);
  }
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = sub_26F0(v4, (uint64_t)qword_D3860);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  uint64_t v7 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, v7);
  type metadata accessor for AlarmBaseCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  v0[15] = CATWrapper.__allocating_init(options:globals:)(v5, 0LL);
  uint64_t v8 = (void *)swift_task_alloc(dword_D7694);
  v0[16] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_18D38;
  return sub_90A48();
}

uint64_t sub_18D38(uint64_t a1)
{
  uint64_t v8 = (void *)*v2;
  uint64_t v4 = v8;
  sub_1996C(&v8);
  v4[17] = v1;
  swift_task_dealloc(v5);
  sub_16FFC();
  if (v1)
  {
    sub_19840();
    return sub_197B8();
  }

  else
  {
    v4[18] = a1;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v4[19] = v7;
    *uint64_t v7 = v2;
    v7[1] = sub_18DE8;
    return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v4[2],  v4[3],  v4[4],  v4[14],  0LL);
  }

uint64_t sub_18DE8()
{
  uint64_t v3 = *(void **)(*(void *)v1 + 144LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 16Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v2);

  sub_19840();
  return sub_197B8();
}

uint64_t sub_18E48()
{
  uint64_t v1 = (uint64_t (*)(void))sub_19958();
  return sub_198F4(v1);
}

uint64_t sub_18EA0()
{
  return sub_1984C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18EE0()
{
  return sub_1984C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  sub_19840();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_18F40()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = type metadata accessor for ApplicationContext(0LL);
  static ApplicationContext.shared.getter(v2);
  ApplicationContext.deviceState.getter(v0 + 2);
  sub_17324();
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  sub_80B4(v0 + 2, v3);
  char v5 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v3, v4);
  uint64_t v6 = type metadata accessor for ViewFactory(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  ViewFactory.init(ttsEnabled:)(v5 & 1);
  _s20HandleIntentStrategyVwxx_1(v0 + 2);
  uint64_t v7 = dispatch thunk of ViewFactory.makeUtteranceViews(template:listenAfterSpeaking:canUseServerTTS:)(v1, 0LL, 1LL);
  sub_17324();
  id v8 = [objc_allocWithZone(SAUIAddViews) init];
  uint64_t v9 = v8;
  v0[16] = v8;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v22 = v7;
    }
    else {
      uint64_t v22 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v23 = sub_17B80((uint64_t)v8, (unint64_t *)&qword_D38A8, &OBJC_CLASS___SAAceView_ptr);
    swift_bridgeObjectRetain(v7);
    uint64_t v12 = _bridgeCocoaArray<A>(_:)(v22, v23);
    swift_bridgeObjectRelease(v7);
  }

  else
  {
    uint64_t v10 = swift_bridgeObjectRetain(v7);
    uint64_t v11 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v10);
    sub_17B80(v11, (unint64_t *)&qword_D38A8, &OBJC_CLASS___SAAceView_ptr);
    uint64_t v12 = v7;
  }

  uint64_t v13 = v0[13];
  swift_bridgeObjectRelease(v7);
  uint64_t v14 = swift_bridgeObjectRetain(v13);
  sub_440A8(v14);
  sub_224A8(v12, v9);
  uint64_t v15 = DialogPhase.aceValue.getter();
  sub_22530(v15, v16, v9);
  static AceService.currentAsync.getter();
  uint64_t v17 = v0[10];
  uint64_t v18 = v0[11];
  sub_80B4(v0 + 7, v17);
  uint64_t v19 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
  v0[17] = v19;
  uint64_t v20 = sub_17B80((uint64_t)v19, &qword_D38B0, &OBJC_CLASS___SABaseCommand_ptr);
  *uint64_t v19 = v0;
  v19[1] = sub_19154;
  return AceServiceInvokerAsync.submit<A>(_:)(v9, v17, v20, v18);
}

uint64_t sub_19154(void *a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 136LL);
  *(void *)(*(void *)v2 + 144LL) = v1;
  swift_task_dealloc(v4);
  if (!v1) {

  }
  sub_19840();
  return sub_197B8();
}

uint64_t sub_191B8()
{
  if (qword_D2F88 != -1) {
    swift_once(&qword_D2F88, sub_17D44);
  }
  uint64_t v1 = sub_16C80();
  uint64_t v2 = sub_26F0(v1, (uint64_t)qword_D3860);
  uint64_t v10 = (void *)Logger.logObject.getter(v2, v3, v4, v5, v6, v7, v8, v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (sub_1990C(v11))
  {
    uint64_t v12 = (_WORD *)sub_16AC4(2LL);
    *uint64_t v12 = 0;
    sub_198C0(&dword_0, v13, v14, "generateCustomFlowOutput completed successfully.");
    sub_16AA8((uint64_t)v12);
  }

  uint64_t v15 = v0[15];
  uint64_t v16 = (void *)v0[16];
  uint64_t v18 = v0[13];
  uint64_t v17 = v0[14];

  uint64_t v19 = type metadata accessor for AlarmAnalyticsServiceImpl();
  swift_initStaticObject(v19, &unk_D3258);
  sub_216EC(v18, v15, v17);
  static ExecuteResponse.complete()();

  uint64_t v20 = (uint64_t (*)(void))sub_19958();
  return sub_198F4(v20);
}

uint64_t sub_192B4()
{
  _s20HandleIntentStrategyVwxx_1((void *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_192F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_26B0(&qword_D3890);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DialogPhase(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for AlarmAnalyticsServiceImpl();
  uint64_t inited = swift_initStaticObject(v15, &unk_D3258);
  static DialogPhase.completion.getter(inited, v17, v18, v19, v20, v21, v22);
  sub_216EC(a1, v3, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v23 = type metadata accessor for ApplicationContext(0LL);
  static ApplicationContext.shared.getter(v23);
  ApplicationContext.deviceState.getter(v36);
  uint64_t v24 = sub_17324();
  static ApplicationContext.shared.getter(v24);
  ApplicationContext.deviceState.getter(v33);
  sub_17324();
  uint64_t v25 = v34;
  uint64_t v26 = v35;
  sub_80B4(v33, v34);
  char v27 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v25, v26);
  uint64_t v28 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16LL))(v10, a2, v28);
  sub_A40C((uint64_t)v10, 0LL, 1LL, v28);
  uint64_t v29 = type metadata accessor for AceOutput(0LL);
  memset(v31, 0, sizeof(v31));
  uint64_t v32 = 0LL;
  a3[3] = v29;
  a3[4] = &protocol witness table for AceOutput;
  sub_19558(a3);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v4,  v36,  v27 & 1,  a1,  0LL,  1LL,  v10,  _swiftEmptyArrayStorage,  v31);
  sub_19594((uint64_t)v31, &qword_D3898);
  sub_19594((uint64_t)v10, &qword_D3890);
  _s20HandleIntentStrategyVwxx_1(v36);
  return _s20HandleIntentStrategyVwxx_1(v33);
}

unint64_t sub_1951C()
{
  unint64_t result = qword_D3888;
  if (!qword_D3888)
  {
    unint64_t result = swift_getWitnessTable(&unk_A483C, &type metadata for AlarmOutputFactory.TemplatingError);
    atomic_store(result, (unint64_t *)&qword_D3888);
  }

  return result;
}

void *sub_19558(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_19594(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_26B0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlarmOutputFactory.TemplatingError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AlarmOutputFactory.TemplatingError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_19664 + 4 * byte_A47A0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_19684 + 4 * byte_A47A5[v4]))();
  }
}

_BYTE *sub_19664(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_19684(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1968C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_19694(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1969C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_196A4(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AlarmOutputFactory.TemplatingError()
{
  return &type metadata for AlarmOutputFactory.TemplatingError;
}

unint64_t sub_196C8()
{
  unint64_t result = qword_D38B8;
  if (!qword_D38B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_A4814, &type metadata for AlarmOutputFactory.TemplatingError);
    atomic_store(result, (unint64_t *)&qword_D38B8);
  }

  return result;
}

uint64_t sub_19704(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_19720()
{
  return swift_task_dealloc(*(void *)(v0 + 216));
}

uint64_t sub_19744()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_19754@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_19764(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_19780@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_1978C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_19794()
{
  return swift_task_dealloc(v0);
}

  ;
}

uint64_t sub_197B8()
{
  return swift_task_switch();
}

uint64_t sub_197C0()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_197C8()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 168) + 8LL))(v0, *(void *)(v1 + 160));
}

uint64_t sub_197F4()
{
  return ((uint64_t (*)(void))PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:))();
}

uint64_t sub_19800()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_19808()
{
  return swift_task_dealloc(v0);
}

void sub_19810()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_19820()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_19828()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_19830()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_19838@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

  ;
}

uint64_t sub_1984C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_19860()
{
  return (*(uint64_t (**)(void, void))(v0[13] + 8LL))(v0[14], v0[12]);
}

uint64_t sub_1987C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_19884()
{
  return swift_task_alloc(v0);
}

uint64_t sub_1988C()
{
  return swift_task_switch();
}

uint64_t sub_19898()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_198AC(uint64_t a1)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, a1);
}

void sub_198C0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_198D4()
{
  return *(void *)(v0 + 8);
}

id sub_198E0()
{
  return v0;
}

uint64_t sub_198F4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_198FC()
{
  return *(void *)(v0 + 40);
}

BOOL sub_1990C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1991C()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

void sub_1992C()
{
  *(void *)(v1 - 8) = *v0;
}

  ;
}

uint64_t sub_19958()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_19964( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_task_dealloc(a11);
}

void sub_1996C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_19978( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

uint64_t sub_19980( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

  ;
}

uint64_t sub_1999C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 104))(v1);
}

uint64_t sub_199A8()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_199B4()
{
  return type metadata accessor for ErrorCATPatternsExecutor(0LL);
}

uint64_t sub_199C0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

void *sub_199C8(void *a1)
{
  uint64_t updated = type metadata accessor for UpdateAlarmIntent(0LL);
  uint64_t v3 = type metadata accessor for UpdateAlarmIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(updated, v3);
  if (qword_D3178 != -1) {
    swift_once(&qword_D3178, sub_82958);
  }
  uint64_t v4 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(qword_D84A8, updated, v3);
  uint64_t v6 = v5;
  uint64_t v7 = sub_26B0(&qword_D7B30);
  uint64_t v8 = RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v4, v6, v7);
  sub_19D68(v8, (uint64_t)v24);
  uint64_t v9 = _s18NeedsValueStrategyCMa_0();
  uint64_t v10 = swift_allocObject(v9, 56LL, 7LL);
  sub_46FC(v24, v10 + 16);
  *(void *)&v24[0] = v10;
  unint64_t v11 = sub_19BF8();
  uint64_t v12 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(v24, v9, v11);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter(v12);
  uint64_t v13 = sub_26B0(&qword_D38D0);
  unint64_t v14 = sub_19C38();
  uint64_t v15 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A, B>(_:)(&unk_D38C8, 0LL, v13, v3, v14);
  uint64_t v16 = RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v15);
  sub_19D68(v16, (uint64_t)v24);
  unint64_t v17 = sub_19C7C();
  uint64_t v18 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)( v24,  &_s24UnsupportedValueStrategyVN_3,  v17);
  uint64_t v19 = RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v18);
  sub_19D68(v19, (uint64_t)v23);
  unint64_t v20 = sub_19CB8();
  uint64_t v21 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)( v23,  &_s20HandleIntentStrategyVN,  v20);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v21);
  swift_release(v10);
  _s20HandleIntentStrategyVwxx_1(a1);
  sub_19CF4(v23);
  return sub_19D28(v24);
}

void sub_19B84(uint64_t a1)
{
}

uint64_t sub_19B98(void *a1, uint64_t a2)
{
  *a1 = v4;
  return sub_19D5C(*(uint64_t (**)(void))(v2 + 8));
}

unint64_t sub_19BF8()
{
  unint64_t result = qword_D38C0;
  if (!qword_D38C0)
  {
    uint64_t v1 = _s18NeedsValueStrategyCMa_0();
    unint64_t result = swift_getWitnessTable(&unk_A754C, v1);
    atomic_store(result, (unint64_t *)&qword_D38C0);
  }

  return result;
}

unint64_t sub_19C38()
{
  unint64_t result = qword_D38D8;
  if (!qword_D38D8)
  {
    uint64_t v1 = sub_16974(&qword_D38D0);
    unint64_t result = swift_getWitnessTable(&unk_A5878, v1);
    atomic_store(result, (unint64_t *)&qword_D38D8);
  }

  return result;
}

unint64_t sub_19C7C()
{
  unint64_t result = qword_D38E0;
  if (!qword_D38E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_A7D1C, &_s24UnsupportedValueStrategyVN_3);
    atomic_store(result, (unint64_t *)&qword_D38E0);
  }

  return result;
}

unint64_t sub_19CB8()
{
  unint64_t result = qword_D38E8;
  if (!qword_D38E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_A4D38, &_s20HandleIntentStrategyVN);
    atomic_store(result, (unint64_t *)&qword_D38E8);
  }

  return result;
}

void *sub_19CF4(void *a1)
{
  return a1;
}

void *sub_19D28(void *a1)
{
  return a1;
}

uint64_t sub_19D5C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_19D68(uint64_t a1, uint64_t a2)
{
  return sub_4698(v2, a2);
}

void *sub_19D70(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for HALAlarmDeviceContext(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for SiriTimeCrossDeviceAnalytics(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  }

  return v4;
}

uint64_t sub_19E4C(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for HALAlarmDeviceContext(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for SiriTimeCrossDeviceAnalytics(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

uint64_t sub_19EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for HALAlarmDeviceContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for SiriTimeCrossDeviceAnalytics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  return a1;
}

void *sub_19F64(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HALAlarmDeviceContext(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for SiriTimeCrossDeviceAnalytics(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

void *sub_19FF8(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        unint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

uint64_t sub_1A160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for HALAlarmDeviceContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for SiriTimeCrossDeviceAnalytics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_1A200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for HALAlarmDeviceContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for SiriTimeCrossDeviceAnalytics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_1A2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A2B0);
}

uint64_t sub_1A2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_175B8();
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v9 = type metadata accessor for SiriTimeCrossDeviceAnalytics(0LL);
      uint64_t v10 = *(int *)(a3 + 24);
    }

    return sub_16880(a1 + v10, a2, v9);
  }

uint64_t sub_1A344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A350);
}

uint64_t sub_1A350(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_175B8();
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v9 = type metadata accessor for SiriTimeCrossDeviceAnalytics(0LL);
      uint64_t v10 = *(int *)(a4 + 24);
    }

    return sub_A40C(v5 + v10, a2, a2, v9);
  }

  return result;
}

uint64_t _s10descrCB129O20HandleIntentStrategyVMa(uint64_t a1)
{
  uint64_t result = qword_D3960;
  if (!qword_D3960) {
    return swift_getSingletonMetadata(a1, &_s10descrCB129O20HandleIntentStrategyVMn);
  }
  return result;
}

uint64_t sub_1A418(uint64_t a1)
{
  v5[0] = "(";
  uint64_t result = type metadata accessor for HALAlarmDeviceContext(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for SiriTimeCrossDeviceAnalytics(319LL);
    if (v4 <= 0x3F)
    {
      v5[2] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1A4A8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D38F0);
  sub_26F0(v0, (uint64_t)qword_D38F0);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_1A4F0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_26B0(&qword_D37D0);
  v3[5] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return sub_1988C();
}

uint64_t sub_1A548()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = v2 + *(int *)(sub_1B644() + 20);
  uint64_t v4 = sub_175B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(v1, v3, v4);
  sub_A40C(v1, 0LL, 1LL, v4);
  sub_1511C();
  uint64_t v6 = v5;
  sub_1B538(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_1A5F0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_1A608, 0LL, 0LL);
}

uint64_t sub_1A608()
{
  uint64_t v1 = (void *)HALAlarmDeviceContext.device.getter();
  SiriTimeCrossDeviceAnalytics.logSharedAnalyticsStarted(selectedDevice:)();

  type metadata accessor for EmptyOutput(0LL);
  static EmptyOutput.instance.getter();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A678(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = type metadata accessor for CrossDeviceCommandExecution.Result(0LL);
  v3[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v3[14] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[15] = v7;
  v3[16] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v3[17] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[18] = v9;
  v3[19] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[20] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[21] = v11;
  v3[22] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[23] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[24] = v13;
  v3[25] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NLContextUpdate(0LL);
  v3[26] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[27] = v15;
  v3[28] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1A7A4, 0LL, 0LL);
}

uint64_t sub_1A7A4()
{
  if (qword_D2F90 != -1) {
    swift_once(&qword_D2F90, sub_1A4A8);
  }
  uint64_t v1 = sub_26F0(*(void *)(v0 + 136), (uint64_t)qword_D38F0);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v1, v2, v3, v4, v5, v6, v7, v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "DismissAlarm.HandleIntentStrategy.makeIntentHandledResponse() called.", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  *(void *)(v0 + 232) = sub_1B644();
  uint64_t v12 = sub_175B8();
  char v13 = HALDeviceContext.shouldDismissSilently.getter(v12, &protocol witness table for HALAlarmDeviceContext);
  *(_BYTE *)(v0 + 288) = v13 & 1;
  uint64_t v14 = sub_26B0(&qword_D39F8);
  uint64_t v15 = (void *)IntentResolutionRecord.intent.getter(v14);
  uint64_t v16 = sub_1B47C(v15);
  if (!v17) {
    goto LABEL_8;
  }
  uint64_t v18 = v16;
  uint64_t v19 = v17;
  unint64_t v20 = (void *)HALDeviceContext.remoteDevice.getter(v12);

  if (v20)
  {
    uint64_t v16 = swift_bridgeObjectRelease(v19);
LABEL_8:
    NLContextUpdate.init()(v16);
    goto LABEL_10;
  }

  uint64_t v21 = sub_26B0((uint64_t *)&off_D3A00);
  uint64_t inited = swift_initStackObject(v21, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_A4880;
  *(void *)(inited + 32) = v18;
  *(void *)(inited + 40) = v19;
  sub_79710(inited);
  swift_setDeallocating(inited);
  sub_65AA0();
LABEL_10:
  uint64_t v23 = *(void *)(v0 + 176);
  uint64_t v24 = *(void *)(v0 + 152);
  uint64_t v25 = *(void *)(v0 + 136);
  uint64_t v26 = *(void *)(v0 + 144);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 168) + 104LL))( v23,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  *(void *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24, v1, v25);
  uint64_t v27 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v23, v24, v27);
  if (qword_D2FC0 != -1) {
    swift_once(&qword_D2FC0, sub_252DC);
  }
  uint64_t v28 = *(void *)(v0 + 80);
  uint64_t v29 = swift_task_alloc(32LL);
  *(void *)(v0 + 240) = v29;
  *(void *)(v29 + 16) = v28;
  uint64_t v30 = (void *)swift_task_alloc(dword_D71AC);
  *(void *)(v0 + 248) = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_1AA30;
  return sub_866CC(v13 & 1, (uint64_t)sub_1B4E8, v29);
}

uint64_t sub_1AA30(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 248LL);
  v3[32] = a1;
  v3[33] = v1;
  swift_task_dealloc(v4);
  swift_task_dealloc(v3[30]);
  if (v1) {
    uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1AC68;
  }
  else {
    uint64_t v5 = sub_1AAA4;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1AAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 272) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_1AB10;
  return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( *(void *)(v7 + 64),  *(void *)(v7 + 128),  *(void *)(v7 + 224),  *(void *)(v7 + 200),  *(unsigned __int8 *)(v7 + 288));
}

uint64_t sub_1AB10()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 272LL);
  *(void *)(*(void *)v1 + 28Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v2[32];
  (*(void (**)(void, void))(v2[15] + 8LL))(v2[16], v2[14]);

  if (v0) {
    uint64_t v5 = sub_1ACF0;
  }
  else {
    uint64_t v5 = sub_1AB94;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

#error "1AC40: call analysis failed (funcsize=53)"
#error "1ACB4: call analysis failed (funcsize=34)"
#error "1AD3C: call analysis failed (funcsize=34)"
uint64_t sub_1AD78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v2 = sub_26B0(&qword_D3A08);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v24 - v7;
  __chkstk_darwin(v6);
  os_log_type_t v10 = (char *)&v24 - v9;
  _s10descrCB129O20HandleIntentStrategyVMa(0LL);
  uint64_t v11 = type metadata accessor for HALAlarmDeviceContext(0LL);
  uint64_t v12 = HALDeviceContext.remoteDevice.getter(v11);
  if (v12)
  {
    char v13 = (void *)v12;
    DeviceUnit.dialogType.getter();

    uint64_t v14 = type metadata accessor for SpeakableString(0LL);
    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v14 = type metadata accessor for SpeakableString(0LL);
    uint64_t v15 = 1LL;
  }

  sub_A40C((uint64_t)v10, v15, 1LL, v14);
  uint64_t v16 = (int *)type metadata accessor for StopIntentHandledElsewhereParameters(0LL);
  sub_1B4F0((uint64_t)v10, a1 + v16[6]);
  uint64_t v17 = HALDeviceContext.remoteDevice.getter(v11);
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    DeviceUnit.room.getter();
  }

  else
  {
    uint64_t v19 = type metadata accessor for SpeakableString(0LL);
    sub_A40C((uint64_t)v8, 1LL, 1LL, v19);
  }

  sub_1B4F0((uint64_t)v8, a1 + v16[8]);
  unint64_t v20 = HALDeviceContext.remoteDevice.getter(v11);
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    DeviceUnit.deviceName.getter();
  }

  else
  {
    uint64_t v22 = type metadata accessor for SpeakableString(0LL);
    sub_A40C((uint64_t)v5, 1LL, 1LL, v22);
  }

  return sub_1B4F0((uint64_t)v5, a1 + v16[5]);
}

uint64_t sub_1AF54(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D39F4);
  *(void *)(v2 + 32) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1AFB4;
  return sub_1A678(a1, a2);
}

uint64_t sub_1AFB4()
{
  uint64_t v2 = *(void *)(*v1 + 32);
  uint64_t v3 = *v1;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return sub_1988C();
  }
  else {
    return sub_1B5EC(*(uint64_t (**)(void))(v3 + 8));
  }
}

uint64_t sub_1B010()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 24) = v1;
  sub_26B0(&qword_D4890);
  uint64_t v2 = static BarbaraWalters.logAndReturnError<A>(context:_:)(0xD00000000000005ELL, 0x80000000000A8000LL, v0 + 24);
  swift_willThrow(v2, v3, v4, v5, v6, v7, v8, v9);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1B578;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_1B120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1B578;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_1B19C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_D3A14);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1B578;
  return sub_1A5F0(a1);
}

uint64_t sub_1B1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D39EC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1B578;
  return sub_1AF54(a1, a2);
}

uint64_t sub_1B24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1B578;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_1B2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1B578;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_1B344(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_D7488 + dword_D7488);
  uint64_t v3 = (void *)swift_task_alloc(unk_D748C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1B3B8;
  return v5(a1);
}

uint64_t sub_1B3B8()
{
  return sub_1B5EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1B3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D3A1C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_5DA4;
  return sub_1A4F0(a1, a2);
}

unint64_t sub_1B43C()
{
  unint64_t result = qword_D39A8[0];
  if (!qword_D39A8[0])
  {
    uint64_t v1 = _s10descrCB129O20HandleIntentStrategyVMa(255LL);
    unint64_t result = swift_getWitnessTable(&unk_A48C0, v1);
    atomic_store(result, qword_D39A8);
  }

  return result;
}

uint64_t sub_1B47C(void *a1)
{
  id v2 = [a1 alarmId];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_1B4E8(uint64_t a1)
{
  return sub_1AD78(a1);
}

uint64_t sub_1B4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D3A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B538(uint64_t a1)
{
  uint64_t v2 = sub_26B0(&qword_D37D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1B57C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1B598()
{
  return (*(uint64_t (**)(void, void))(v0[24] + 8LL))(v0[25], v0[23]);
}

uint64_t sub_1B5CC()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_1B5EC(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_1B614( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, a9);
}

uint64_t sub_1B624()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1B634(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1B644()
{
  return _s10descrCB129O20HandleIntentStrategyVMa(0LL);
}

uint64_t sub_1B64C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_task_dealloc(a12);
}

id sub_1B654(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlarmSearch(0LL);
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
  swift_bridgeObjectRetain(a2);
  id v6 = sub_1D5F8(a1, a2, 0LL, 0xE000000000000000LL);
  sub_5E3C();
  Class isa = sub_1D75C().super.super.isa;
  [v6 setIncludeSleepAlarm:isa];

  return v6;
}

void sub_1B6E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Calendar.SearchDirection(0LL);
  uint64_t v81 = *(void *)(v2 - 8);
  uint64_t v82 = v2;
  sub_16AFC();
  __chkstk_darwin(v3);
  sub_16B30();
  uint64_t v80 = v4;
  uint64_t v5 = sub_1D768();
  uint64_t v6 = type metadata accessor for Calendar.RepeatedTimePolicy(v5);
  uint64_t v86 = *(void *)(v6 - 8);
  uint64_t v87 = v6;
  sub_16AFC();
  __chkstk_darwin(v7);
  sub_16B30();
  uint64_t v79 = v8;
  uint64_t v9 = sub_1D768();
  uint64_t v10 = type metadata accessor for Calendar.MatchingPolicy(v9);
  uint64_t v84 = *(void *)(v10 - 8);
  uint64_t v85 = v10;
  sub_16AFC();
  __chkstk_darwin(v11);
  sub_16B30();
  uint64_t v75 = v12;
  uint64_t v13 = sub_1D768();
  uint64_t v78 = type metadata accessor for Calendar(v13);
  uint64_t v76 = *(void *)(v78 - 8);
  sub_16AFC();
  __chkstk_darwin(v14);
  sub_17390();
  uint64_t v17 = v16 - v15;
  sub_26B0(&qword_D3820);
  sub_16AFC();
  __chkstk_darwin(v18);
  sub_16B30();
  uint64_t v77 = v19;
  uint64_t v20 = sub_1D768();
  uint64_t v83 = type metadata accessor for Date(v20);
  uint64_t v21 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  sub_177D8();
  uint64_t v24 = v22 - v23;
  __chkstk_darwin(v25);
  uint64_t v74 = (char *)&v72 - v26;
  sub_26B0(&qword_D37D8);
  sub_16AFC();
  __chkstk_darwin(v27);
  sub_177D8();
  uint64_t v30 = v28 - v29;
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v72 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v72 - v36;
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v72 - v38;
  uint64_t v40 = AlarmPeriod.rawValue.getter([v1 period]);
  if (v40 == AlarmPeriod.rawValue.getter(0LL))
  {
    id v41 = sub_1D724();
    if (v41)
    {
      uint64_t v42 = v41;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v41);

      type metadata accessor for DateComponents(0LL);
      uint64_t v43 = (uint64_t)v37;
      uint64_t v44 = 0LL;
    }

    else
    {
      type metadata accessor for DateComponents(0LL);
      uint64_t v43 = (uint64_t)v37;
      uint64_t v44 = 1LL;
    }

    sub_1D6F8(v43, v44);
    sub_5AA0((uint64_t)v37, (uint64_t)v39);
    type metadata accessor for DateComponents(0LL);
    uint64_t v45 = sub_1D718((uint64_t)v39);
    if ((_DWORD)v45)
    {
      uint64_t v46 = &qword_D37D8;
      uint64_t v47 = (uint64_t)v39;
    }

    else
    {
      uint64_t v73 = DateComponents.hour.getter(v45);
      char v49 = v48;
      sub_7EC4((uint64_t)v39, &qword_D37D8);
      if ((v49 & 1) != 0) {
        goto LABEL_8;
      }
      id v50 = sub_1D724();
      if (v50)
      {
        uint64_t v51 = v50;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v50);

        uint64_t v52 = 0LL;
      }

      else
      {
        uint64_t v52 = 1LL;
      }

      sub_1D6F8(v30, v52);
      sub_5AA0(v30, (uint64_t)v34);
      if (sub_1D718((uint64_t)v34))
      {
        uint64_t v46 = &qword_D37D8;
        uint64_t v47 = (uint64_t)v34;
      }

      else
      {
        uint64_t v53 = DateComponents.minute.getter();
        char v55 = v54;
        sub_7EC4((uint64_t)v34, &qword_D37D8);
        if ((v55 & 1) != 0) {
          goto LABEL_8;
        }
        uint64_t v57 = static Calendar.current.getter(v56);
        static DateTimeInferenceUtils.defaultAnchorDate.getter(v57);
        uint64_t v58 = v75;
        (*(void (**)(uint64_t, void, uint64_t))(v84 + 104))( v75,  enum case for Calendar.MatchingPolicy.nextTime(_:),  v85);
        uint64_t v59 = v79;
        (*(void (**)(uint64_t, void, uint64_t))(v86 + 104))( v79,  enum case for Calendar.RepeatedTimePolicy.first(_:),  v87);
        uint64_t v61 = v80;
        uint64_t v60 = v81;
        uint64_t v62 = v82;
        (*(void (**)(uint64_t, void, uint64_t))(v81 + 104))( v80,  enum case for Calendar.SearchDirection.forward(_:),  v82);
        uint64_t v63 = v77;
        Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)( v73,  v53,  0LL,  v24,  v58,  v59,  v61);
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v62);
        (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v59, v87);
        (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v58, v85);
        uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        uint64_t v65 = v24;
        uint64_t v66 = v83;
        v64(v65, v83);
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v17, v78);
        if (sub_16880(v63, 1LL, v66) != 1)
        {
          uint64_t v67 = v74;
          (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v74, v63, v66);
          uint64_t v68 = type metadata accessor for DialogCalendar.Builder(0LL);
          swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
          uint64_t v69 = DialogCalendar.Builder.init()();
          double v70 = Date.timeIntervalSince1970.getter();
          dispatch thunk of DialogCalendar.Builder.withSecs(_:)(*(void *)&v70, 0LL);
          uint64_t v71 = swift_release(v69);
          dispatch thunk of DialogCalendar.Builder.build()(v71);
          sub_17324();
          v64((uint64_t)v67, v66);
          goto LABEL_8;
        }

        uint64_t v46 = &qword_D3820;
        uint64_t v47 = v63;
      }
    }

    sub_7EC4(v47, v46);
  }

LABEL_8:
  sub_16CB0();
}

  v249[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (v19 < 1)
  {
    __break(1u);
  }

  else
  {
    os_log_type_t v248 = v0;
    uint64_t v243 = v0 + 2;
    uint64_t v246 = v2;
    uint64_t v0 = (void *)(v17 & 0xC000000000000001LL);
    swift_bridgeObjectRetain(v17);
    uint64_t v20 = 0LL;
    uint64_t v2 = &stru_D2000;
    do
    {
      if (v0) {
        uint64_t v21 = (id)sub_8CC48(v20);
      }
      else {
        uint64_t v21 = *(id *)(v17 + 8 * v20 + 32);
      }
      uint64_t v22 = v21;
      uint64_t v23 = [v21 sleepAlarmAttribute];

      if (v23)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
        uint64_t v25 = *(void *)(v249[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
        uint64_t v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v22);
        specialized ContiguousArray._endMutation()(v26);
      }

      else
      {
      }

      ++v20;
    }

    while (v19 != v20);
    sub_16F40();
    uint64_t v13 = v249[0];
    if ((v249[0] & 0x8000000000000000LL) == 0 && (v249[0] & 0x4000000000000000LL) == 0)
    {
      uint64_t v27 = *(void *)(v249[0] + 16);
      goto LABEL_20;
    }
  }

  uint64_t v203 = swift_bridgeObjectRetain(v13);
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v203);
  sub_17324();
LABEL_20:
  sub_17324();
  if (v27)
  {
    uint64_t v28 = v248[52];
    uint64_t v13 = v248[53];
    uint64_t v27 = v248[50];
    uint64_t v29 = v248[51];
    (*(void (**)(uint64_t, void, void))(v248[49] + 104LL))( v27,  enum case for AppInstallUtil.Domain.sleep(_:),  v248[48]);
    uint64_t v30 = AppInstallUtil.init(domain:)(v27);
    LOBYTE(v2_s20HandleIntentStrategyVwxx_1(v0 + 7) = AppInstallUtil.isAppInstalled.getter(v30);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v13, v29);
  }

  sub_6044();
  if (v18)
  {
    sub_8CBA4();
    uint64_t v31 = (os_log_s *)_CocoaArrayWrapper.endIndex.getter(v13);
    sub_16F40();
  }

  else
  {
    uint64_t v31 = *(os_log_s **)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFF8LL));
  }

  if ((uint64_t)v31 >= 2)
  {
    uint64_t v32 = sub_8CA2C();
    if (v32)
    {
      [v32 alarmReferenceType];
      sub_8CB9C();
      uint64_t v33 = AlarmReferenceType.rawValue.getter(v18);
      uint64_t v34 = v33 == AlarmReferenceType.rawValue.getter(3LL);
    }

    else
    {
      uint64_t v34 = 0;
    }

    uint64_t v74 = sub_8CA2C();
    if (v74)
    {
      sub_8CAEC(v74);
      sub_8CB9C();
      sub_8CC1C();
      AlarmPeriod.rawValue.getter(2LL);
      sub_8CC58();
    }

    uint64_t v75 = sub_8CA2C();
    if (v75)
    {
      sub_8CAEC(v75);
      sub_8CB9C();
      sub_8CC1C();
      AlarmPeriod.rawValue.getter(3LL);
      sub_8CC58();
    }

    uint64_t v76 = sub_8CA2C();
    if (v76)
    {
      sub_8CAEC(v76);
      sub_8CB9C();
      sub_8CC1C();
      AlarmPeriod.rawValue.getter(1LL);
      sub_8CC58();
    }

    uint64_t v77 = sub_8CA2C();
    if (v77)
    {
      sub_8CAEC(v77);
      sub_8CB9C();
      sub_8CC1C();
      AlarmPeriod.rawValue.getter(8LL);
      sub_8CC58();
    }

    uint64_t v78 = 0LL;
    v249[0] = (uint64_t)_swiftEmptyArrayStorage;
    do
    {
      if (v0) {
        uint64_t v79 = (id)sub_8CC48(v78);
      }
      else {
        uint64_t v79 = *(id *)(v17 + 8 * v78 + 32);
      }
      uint64_t v80 = v79;
      uint64_t v81 = [v79 v2[28].type];

      if (v81)
      {
      }

      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v82);
        uint64_t v83 = *(void *)(v249[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v83);
        uint64_t v84 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v83, v80);
        specialized ContiguousArray._endMutation()(v84);
      }

      ++v78;
    }

    while (v19 != v78);
    sub_16F40();
    uint64_t v85 = sub_8C360(v249[0]);
    swift_release(v249[0]);
    if (v85[2])
    {
      uint64_t v87 = v248[43];
      uint64_t v86 = v248[44];
      uint64_t v88 = v248[42];
      sub_94618();
      sub_16EDC();
      NLContextUpdate.set(undoDirectInvocation:)(v86);
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
    }

    else
    {
      sub_16EDC();
    }

    uint64_t v89 = v248[36];
    uint64_t v90 = v248[33];
    uint64_t v92 = v248[31];
    uint64_t v91 = v248[32];
    (*(void (**)(uint64_t, void, void))(v248[35] + 104LL))( v89,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v248[34]);
    (*(void (**)(uint64_t, __objc2_ivar *, uint64_t))(v91 + 16))(v90, v246, v92);
    os_log_type_t v93 = mach_absolute_time();
    uint64_t v94 = SiriTimeMeasurement.init(_:log:startTime:)(v89, v90, v93);
    uint64_t v102 = (os_log_s *)Logger.logObject.getter(v94, v95, v96, v97, v98, v99, v100, v101);
    uint64_t v103 = static os_log_type_t.info.getter();
    uint64_t v104 = sub_58BF4((os_log_type_t)v103);
    if (v34)
    {
      if (v104)
      {
        char v105 = (uint8_t *)sub_1EFA4();
        *(_WORD *)char v105 = 0;
        sub_16B44(&dword_0, v102, (os_log_type_t)v103, "Hitting RF path for delete all alarms", v105);
        sub_16AA8((uint64_t)v105);
      }

      if (qword_D3078 != -1) {
        swift_once(&qword_D3078, sub_506BC);
      }
      uint64_t v106 = qword_D83B8;
      sub_8CBD4((void *)v248[15]);
      uint64_t v107 = (void *)sub_8CB88((uint64_t)&unk_D5600);
      v248[55] = v107;
      *uint64_t v107 = v248;
      v107[1] = sub_8B764;
      uint64_t v250 = v106;
      sub_8CBB8();
      uint64_t v108 = v15;
    }

    else
    {
      if (v104)
      {
        uint64_t v109 = (uint8_t *)sub_1EFA4();
        *(_WORD *)uint64_t v109 = 0;
        sub_16B44(&dword_0, v102, (os_log_type_t)v103, "Hitting RF path for delete multiple alarms", v109);
        sub_16AA8((uint64_t)v109);
      }

      if (qword_D3070 != -1) {
        swift_once(&qword_D3070, sub_506A8);
      }
      uint64_t v110 = qword_D83B0;
      sub_8CBD4((void *)v248[15]);
      sub_8CC64((int *)&unk_D6AC8);
      uint64_t v111 = v15;
      uint64_t v112 = (void *)swift_task_alloc(v103);
      v248[57] = v112;
      uint64_t *v112 = v248;
      v112[1] = sub_8B818;
      uint64_t v250 = v110;
      uint64_t v251 = v111;
      sub_8CBB8();
      uint64_t v108 = v246;
    }

    __asm { BR              X8 }
  }

  if ((v27 & 1) == 0)
  {
    uint64_t v72 = sub_8CA2C();
    if (v72)
    {
      sub_319F4(v72);
      if (v73) {
        swift_bridgeObjectRelease(v73);
      }
    }

    uint64_t v113 = sub_A658(v15);
    if (!v113) {
      goto LABEL_102;
    }
    uint64_t v114 = v113;
    if ((unint64_t)v113 >> 62)
    {
      if (v113 >= 0) {
        v113 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      if (_CocoaArrayWrapper.endIndex.getter(v113)) {
        goto LABEL_75;
      }
    }

    else if (*(void *)((char *)&dword_10 + (v113 & 0xFFFFFFFFFFFFFF8LL)))
    {
LABEL_75:
      sub_44080(0LL, (v114 & 0xC000000000000001LL) == 0, v114);
      if ((v114 & 0xC000000000000001LL) != 0) {
        uint64_t v115 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v114);
      }
      else {
        uint64_t v115 = *(id *)(v114 + 32);
      }
      uint64_t v116 = v115;
      sub_16EDC();
      sub_4828C();
      uint64_t v118 = v117;
      v248[62] = v117;

      if (v118)
      {
        sub_44080(0LL, v0 == 0LL, v17);
        if (v0) {
          uint64_t v119 = (id)sub_8CC48(0LL);
        }
        else {
          uint64_t v119 = *(id *)(v17 + 32);
        }
        uint64_t v129 = v119;
        uint64_t v130 = (os_log_s *)v248[15];
        sub_16F40();
        uint64_t v131 = sub_26B0(&qword_D4188);
        uint64_t inited = swift_initStackObject(v131, v243);
        *(_OWORD *)(inited + 16) = xmmword_A4CD0;
        *(void *)(inited + 32) = v129;
        v249[0] = inited;
        specialized Array._endMutation()(inited, v133, v134, v135);
        uint64_t v136 = v129;
        unint64_t v137 = v130;
        uint64_t v138 = (uint8_t *)sub_8C360(v249[0]);
        swift_bridgeObjectRelease(v249[0]);
        if (*((void *)v138 + 2))
        {
          unint64_t v137 = (os_log_s *)v248[47];
          uint64_t v139 = v248[43];
          uint64_t v140 = v248[44];
          uint64_t v141 = v248[42];
          sub_94618();
          swift_bridgeObjectRelease(v138);
          NLContextUpdate.set(undoDirectInvocation:)(v140);

          uint64_t v142 = (*(uint64_t (**)(uint64_t, uint64_t))(v139 + 8))(v140, v141);
        }

        else
        {

          uint64_t v142 = swift_bridgeObjectRelease(v138);
        }

        sub_8CC50(v142, v143, v144, v145, v146, v147, v148, v149, v217, v222, v227, v232, v238);
        uint64_t v150 = sub_16C50();
        if (sub_16BA4(v150))
        {
          uint64_t v151 = (_WORD *)sub_1EFA4();
          sub_45454(v151);
          sub_16B44(&dword_0, v137, (os_log_type_t)v136, "RF path for deleting single alarm.", v138);
          sub_16AA8((uint64_t)v138);
        }

        uint64_t v152 = v248[35];
        uint64_t v153 = v248[36];
        uint64_t v155 = v248[33];
        uint64_t v154 = v248[34];
        uint64_t v156 = v248[32];
        uint64_t v157 = v248[31];

        (*(void (**)(uint64_t, void, uint64_t))(v152 + 104))( v153,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v154);
        (*(void (**)(uint64_t, __objc2_ivar *, uint64_t))(v156 + 16))(v155, v246, v157);
        uint64_t v158 = mach_absolute_time();
        SiriTimeMeasurement.init(_:log:startTime:)(v153, v155, v158);
        if (qword_D3070 != -1) {
          swift_once(&qword_D3070, sub_506A8);
        }
        sub_8CC64((int *)&unk_D6AD8);
        swift_retain(v118);
        uint64_t v159 = (void *)swift_task_alloc(v156);
        v248[63] = v159;
        *uint64_t v159 = v248;
        v159[1] = sub_8B9A4;
        sub_8CAD0();
        __asm { BR              X3 }
      }

      goto LABEL_102;
    }

    sub_16F40();
LABEL_102:
    uint64_t v204 = v248[47];
    uint64_t v205 = v248[46];
    uint64_t v206 = v248[45];
    sub_16F40();
    sub_26B0(&qword_D4190);
    uint64_t v207 = sub_24EA4();
    uint64_t v208 = sub_25234(v207);
    sub_8CBF8(v208, v209, v210, v211, v212, v213, v214, v215);

    uint64_t v216 = *(void (**)(uint64_t, uint64_t))(v205 + 8);
    uint64_t v0 = v248;
    v216(v204, v206);
LABEL_95:
    uint64_t v234 = v0[29];
    uint64_t v240 = v0[28];
    uint64_t v244 = v0[25];
    uint64_t v247 = v0[22];
    swift_task_dealloc();
    sub_19794();
    sub_197C0();
    sub_19830();
    sub_19828();
    sub_19820();
    sub_1987C();
    sub_19800();
    sub_1978C();
    uint64_t v170 = sub_19808();
    char v178 = sub_1B64C(v170, v171, v172, v173, v174, v175, v176, v177, v217, v222, v227, v234);
    uint64_t v186 = sub_25044(v178, v179, v180, v181, v182, v183, v184, v185, v219, v224, v229, v235, v240);
    os_log_type_t v194 = sub_2503C(v186, v187, v188, v189, v190, v191, v192, v193, v220, v225, v230, v236, v241, v244);
    sub_25218(v194, v195, v196, v197, v198, v199, v200, v201, v221, v226, v231, v237, v242, v245, v247);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_8CAD0();
    __asm { BR              X0 }
  }

  uint64_t v35 = sub_16F40();
  sub_8CC50(v35, v36, v37, v38, v39, v40, v41, v42, v217, v222, v227, v232, v238);
  uint64_t v43 = sub_16C50();
  uint64_t v44 = v248;
  if (sub_16BA4(v43))
  {
    uint64_t v45 = (_WORD *)sub_1EFA4();
    sub_45454(v45);
    sub_16B44(&dword_0, v31, (os_log_type_t)v17, "Delete sleep alarm is not supported, punch out.", (uint8_t *)v15);
    sub_16AA8((uint64_t)v15);
  }

  uint64_t v47 = v248[24];
  uint64_t v46 = (os_log_s *)v248[25];
  char v48 = (uint8_t *)v248[23];

  static SiriTimeFeatureFlagsImpl.instance.getter(v49);
  id v50 = v46;
  uint64_t v51 = SiriTimeFeatureFlagsImpl.isConfirmationsResponseFrameworkEnabled()();
  uint64_t v52 = sub_33420(*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8));
  sub_8CC50(v52, v53, v54, v55, v56, v57, v58, v59, v218, v223, v228, v233, v239);
  uint64_t v60 = sub_16C50();
  uint64_t v61 = sub_58BF4(v60);
  if (v51)
  {
    if (v61)
    {
      uint64_t v62 = (_WORD *)sub_1EFA4();
      sub_45454(v62);
      sub_16B44(&dword_0, v50, v60, "Hitting RF path for deleting sleep alarm.", v48);
      sub_16AA8((uint64_t)v48);
    }

    uint64_t v63 = v248[35];
    uint64_t v64 = v248[36];
    uint64_t v66 = v248[33];
    uint64_t v65 = v248[34];
    uint64_t v67 = v248[32];
    uint64_t v68 = v248[31];

    (*(void (**)(uint64_t, void, uint64_t))(v63 + 104))( v64,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v65);
    (*(void (**)(uint64_t, __objc2_ivar *, uint64_t))(v67 + 16))(v66, v246, v68);
    uint64_t v69 = mach_absolute_time();
    SiriTimeMeasurement.init(_:log:startTime:)(v64, v66, v69);
    if (qword_D3070 != -1) {
      swift_once(&qword_D3070, sub_506A8);
    }
    double v70 = (void *)sub_8CB88((uint64_t)&unk_D6AD0);
    v248[68] = v70;
    *double v70 = v248;
    v70[1] = sub_8BB44;
    sub_8CAD0();
    __asm { BR              X1 }
  }

  if (v61)
  {
    uint64_t v120 = (uint8_t *)sub_1EFA4();
    *(_WORD *)uint64_t v120 = 0;
    sub_16B44(&dword_0, v50, v60, "Hitting non-RF path for deleting sleep alarm.", v120);
    uint64_t v121 = (uint64_t)v120;
    uint64_t v44 = v248;
    sub_16AA8(v121);
  }

  uint64_t v122 = v44;
  uint64_t v123 = v44[50];
  uint64_t v124 = v122[48];
  uint64_t v125 = v122[49];

  (*(void (**)(uint64_t, void, uint64_t))(v125 + 104))( v123,  enum case for AppInstallUtil.Domain.sleep(_:),  v124);
  type metadata accessor for AlarmBaseCATs_Async(0LL);
  sub_8C9AC();
  uint64_t v126 = sub_8C9A0();
  v249[3] = (uint64_t)v50;
  v249[4] = sub_33264();
  v249[0] = v126;
  AppInstallDialogOutputUtil.init(domain:fallbackCAT:)(v123, v249);
  uint64_t v127 = (void *)swift_task_alloc(async function pointer to AppInstallDialogOutputUtil.makeLaunchAppView()[1]);
  v122[73] = v127;
  *uint64_t v127 = v122;
  v127[1] = sub_8BCE0;
  sub_8CAD0();
  return AppInstallDialogOutputUtil.makeLaunchAppView()();
}

uint64_t sub_1BB9C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D3A20);
  sub_26F0(v0, (uint64_t)qword_D3A20);
  return static SiriTimeLog.alarmFlow.getter();
}

void sub_1BBE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SiriReferenceResolutionResolver(0LL);
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v51 = v2;
  sub_16AFC();
  __chkstk_darwin(v3);
  sub_17390();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_17390();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = sub_26B0(&qword_D3A40);
  sub_16AFC();
  __chkstk_darwin(v13);
  sub_17390();
  uint64_t v16 = v15 - v14;
  sub_26B0(&qword_D3A48);
  sub_16AFC();
  __chkstk_darwin(v17);
  sub_177D8();
  uint64_t v20 = v18 - v19;
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v48 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v48 - v26;
  uint64_t v52 = a1;
  uint64_t v28 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter(v25);
  if (v28)
  {
    uint64_t v49 = v28;
    dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter();
    (*(void (**)(char *, void, uint64_t))(v8 + 104))( v24,  enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Next(_:),  v7);
    sub_A40C((uint64_t)v24, 0LL, 1LL, v7);
    uint64_t v29 = v16 + *(int *)(v12 + 48);
    sub_3F88((uint64_t)v27, v16, &qword_D3A48);
    sub_3F88((uint64_t)v24, v29, &qword_D3A48);
    sub_1D6DC(v16);
    if (v30)
    {
      sub_1D6D4((uint64_t)v24);
      sub_1D6D4((uint64_t)v27);
      sub_1D6DC(v29);
      if (v30)
      {
        sub_7EC4(v16, &qword_D3A48);
LABEL_12:
        if (qword_D2F98 != -1) {
          swift_once(&qword_D2F98, sub_1BB9C);
        }
        uint64_t v33 = sub_16C80();
        sub_26F0(v33, (uint64_t)qword_D3A20);
        sub_16D50();
        os_log_type_t v34 = sub_16B4C();
        if (sub_16ACC(v34))
        {
          uint64_t v35 = (_WORD *)sub_16AC4(2LL);
          *uint64_t v35 = 0;
          sub_16ADC(&dword_0, v36, v37, "Skipping SRR for .common_ListPosition_Next requests");
          sub_16AA8((uint64_t)v35);
        }

        swift_release(v49);
        goto LABEL_25;
      }
    }

    else
    {
      sub_3F88(v16, v20, &qword_D3A48);
      sub_1D6DC(v29);
      if (!v30)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v29, v7);
        sub_16A6C( &qword_D3A50,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_ListPosition.DefinedValues);
        char v31 = dispatch thunk of static Equatable.== infix(_:_:)(v20, v11, v7);
        uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
        v32(v11, v7);
        sub_1D6D4((uint64_t)v24);
        sub_1D6D4((uint64_t)v27);
        v32(v20, v7);
        sub_1D6D4(v16);
        if ((v31 & 1) != 0) {
          goto LABEL_12;
        }
        goto LABEL_17;
      }

      sub_7EC4((uint64_t)v24, &qword_D3A48);
      sub_7EC4((uint64_t)v27, &qword_D3A48);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v20, v7);
    }

    sub_7EC4(v16, &qword_D3A40);
LABEL_17:
    uint64_t v28 = swift_release(v49);
  }

  uint64_t v38 = static SiriReferenceResolutionResolver.shared.getter(v28);
  uint64_t v39 = (void *)CodeGenBase.entity.getter(v38);
  char v40 = SiriReferenceResolutionResolver.hasReference(usoEntity:)(v39);
  swift_release(v39);
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v6, v51);
  if ((v40 & 1) != 0)
  {
    uint64_t v42 = CodeGenBase.entity.getter(v41);
    sub_1C014(v42);
    sub_16FFC();
  }

  else
  {
    if (qword_D2F98 != -1) {
      swift_once(&qword_D2F98, sub_1BB9C);
    }
    uint64_t v43 = sub_16C80();
    sub_26F0(v43, (uint64_t)qword_D3A20);
    sub_16D50();
    os_log_type_t v44 = sub_16B4C();
    if (sub_16ACC(v44))
    {
      uint64_t v45 = (_WORD *)sub_16AC4(2LL);
      *uint64_t v45 = 0;
      sub_16ADC(&dword_0, v46, v47, "There's no referenceType or usoListPosition in uso graph. Skip calling SRR.");
      sub_16AA8((uint64_t)v45);
    }
  }

id sub_1C014(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SiriReferenceResolutionResolver(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v43[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_26B0(&qword_D3A38);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v43[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  static SiriReferenceResolutionResolver.shared.getter(v7);
  SiriReferenceResolutionResolver.resolveReferenceEntity(referenceEntity:)(a1);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v10 = type metadata accessor for RREntity(0LL);
  if (sub_16880((uint64_t)v9, 1LL, v10) == 1)
  {
    sub_7EC4((uint64_t)v9, &qword_D3A38);
LABEL_4:
    if (qword_D2F98 != -1) {
      swift_once(&qword_D2F98, sub_1BB9C);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_26F0(v12, (uint64_t)qword_D3A20);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v13, v14, v15, v16, v17, v18, v19, v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_0, v21, v22, "Resolved alarm from SRR is nil!", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    goto LABEL_8;
  }

  uint64_t v11 = type metadata accessor for SiriAlarm(0LL);
  uint64_t v26 = (void *)RREntity.convertData<A>(to:)(v11, v11);
  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  if (!v26) {
    goto LABEL_4;
  }
  uint64_t v21 = v26;
  sub_902E4(v21);
  if (v28)
  {
    uint64_t v29 = v27;
    uint64_t v30 = v28;
    type metadata accessor for AlarmSearch(0LL);
    id v24 = sub_1B654(v29, v30);

    swift_bridgeObjectRelease(v30);
    return v24;
  }

  if (qword_D2F98 != -1) {
    swift_once(&qword_D2F98, sub_1BB9C);
  }
  uint64_t v31 = type metadata accessor for Logger(0LL);
  uint64_t v32 = sub_26F0(v31, (uint64_t)qword_D3A20);
  char v40 = (os_log_s *)Logger.logObject.getter(v32, v33, v34, v35, v36, v37, v38, v39);
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl( &dword_0,  v40,  v41,  "Resolved alarm from SRR is not nil, but alarmId of the resolved alarm is nil!",  v42,  2u);
    swift_slowDealloc(v42, -1LL, -1LL);

    return 0LL;
  }

LABEL_8:
  return 0LL;
}

void sub_1C31C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_17390();
  uint64_t v6 = v5 - v4;
  static UsoTask_CodegenConverter.convert(task:)(&v131, a1);
  if (v133)
  {
    sub_74A4(&v131, v134);
    sub_3F2C((uint64_t)v134, (uint64_t)&v131);
    uint64_t common_Alarm = type metadata accessor for UsoTask_create_common_Alarm(0LL);
    if (sub_1D69C(common_Alarm, v8, v9, common_Alarm))
    {
      sub_1D6B0();
      sub_1D774();
      dispatch thunk of Uso_VerbTemplate_Target.target.getter(v11, v10);
LABEL_13:
      sub_16FFC();
      uint64_t v36 = v129;
      if (v129)
      {
        sub_6B074( 0LL,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v119,  v120,  v123,  v126,  v129,  v130,  v131,  *((uint64_t *)&v131 + 1),  v132,  v133,  v134[0],  v134[1]);
        sub_16FFC();
        uint64_t v37 = v36;
LABEL_15:
        swift_release(v37);
        _s20HandleIntentStrategyVwxx_1(v134);
LABEL_18:
        uint64_t v39 = (uint64_t *)&v131;
LABEL_19:
        _s20HandleIntentStrategyVwxx_1(v39);
        goto LABEL_20;
      }

      _s20HandleIntentStrategyVwxx_1(v134);
      uint64_t v38 = v2;
LABEL_17:
      swift_release(v38);
      goto LABEL_18;
    }

    uint64_t v18 = type metadata accessor for UsoTask_enable_common_Alarm(0LL);
    if (sub_1D69C(v18, v19, v20, v18)
      || (uint64_t v21 = type metadata accessor for UsoTask_disable_common_Alarm(0LL), sub_1D69C( v21,  v22,  v23,  v21))
      || (uint64_t v24 = type metadata accessor for UsoTask_delete_common_Alarm(0LL), sub_1D69C(v24, v25, v26, v24)))
    {
LABEL_12:
      sub_1D6B0();
      sub_1D774();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter(v28, v27);
      goto LABEL_13;
    }

    uint64_t updated = type metadata accessor for UsoTask_update_common_Alarm(0LL);
    if (sub_1D688(updated, v41, v42, updated))
    {
      sub_1D6B0();
      sub_1D780();
      sub_16FFC();
      if (v129)
      {
        uint64_t v43 = sub_57D0(0LL);
        sub_17324();
      }

      else
      {
        uint64_t v43 = 0LL;
      }

      swift_retain(v2);
      sub_1D780();
      sub_16FFC();
      if (v129)
      {
        sub_6B074( v43,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v119,  v120,  v123,  v126,  v129,  v130,  v131,  *((uint64_t *)&v131 + 1),  v132,  v133,  v134[0],  v134[1]);
        sub_16FFC();
        sub_17324();
        uint64_t v37 = v43;
        goto LABEL_15;
      }

      _s20HandleIntentStrategyVwxx_1(v134);
      sub_16FFC();
      uint64_t v38 = v43;
      goto LABEL_17;
    }

    type metadata accessor for UsoTask_noVerb_common_Alarm(0LL);
    if (sub_1D6BC())
    {
LABEL_25:
      sub_1D6B0();
      sub_1D774();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(v45, v44);
      goto LABEL_13;
    }

    uint64_t v46 = type metadata accessor for UsoTask_noVerb_uso_NoEntity(0LL);
    if (sub_1D688(v46, v47, v48, v46))
    {
      uint64_t v49 = swift_retain(v130);
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(&v129, v49);
      sub_1D730();
      uint64_t v50 = v129;
      if (v129)
      {
        type metadata accessor for AlarmSearch(0LL);
        uint64_t v51 = swift_retain(v50);
        uint64_t v52 = CodeGenBase.entity.getter(v51);
        swift_release(v50);
        sub_1C014(v52);
        sub_1D730();
        swift_release(v50);
        uint64_t v37 = v52;
        goto LABEL_15;
      }

      sub_1D730();
    }

    else
    {
      uint64_t v60 = type metadata accessor for UsoTask_summarise_common_Alarm(0LL);
      uint64_t v63 = type metadata accessor for UsoTask_checkExistence_common_Alarm(0LL);
      uint64_t v66 = type metadata accessor for UsoTask_request_common_Alarm(0LL);
      if (sub_1D688(v66, v67, v68, v66))
      {
        sub_1D6B0();
        sub_1D774();
        dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
        goto LABEL_13;
      }

      uint64_t v96 = type metadata accessor for UsoTask_read_common_Alarm(0LL);
    }

    _s20HandleIntentStrategyVwxx_1(&v131);
    uint64_t v69 = sub_1C9D0();
    if (v69)
    {
      id v70 = v69;
      sub_902E4(v70);
      if (v72)
      {
        uint64_t v73 = v71;
        uint64_t v74 = v72;
        if (qword_D2F98 != -1) {
          swift_once(&qword_D2F98, sub_1BB9C);
        }
        uint64_t v75 = sub_16C80();
        uint64_t v76 = (os_log_s *)sub_26F0(v75, (uint64_t)qword_D3A20);
        id v77 = v70;
        Logger.logObject.getter(v77, v78, v79, v80, v81, v82, v83, v84);
        os_log_type_t v85 = sub_16B4C();
        if (os_log_type_enabled(v76, v85))
        {
          uint64_t v127 = v73;
          uint64_t v86 = (uint8_t *)sub_16AC4(12LL);
          uint64_t v121 = sub_16AC4(32LL);
          *(void *)&__int128 v131 = v121;
          *(_DWORD *)uint64_t v86 = 136315138;
          id v87 = v77;
          id v88 = [v87 description];
          uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
          id v124 = v77;
          unint64_t v91 = v90;

          uint64_t v73 = v127;
          uint64_t v92 = sub_3D10(v89, v91, (uint64_t *)&v131);
          uint64_t v93 = sub_1D704(v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v93, v94, v86 + 4, v86 + 12);

          unint64_t v95 = v91;
          id v77 = v124;
          swift_bridgeObjectRelease(v95);
          _os_log_impl(&dword_0, v76, v85, "Found alarm reference from task: %s", v86, 0xCu);
          sub_1D744();
          sub_16AA8(v121);
          sub_16AA8((uint64_t)v86);
        }

        else
        {
        }

        sub_1B654(v73, v74);

        swift_bridgeObjectRelease(v74);
        uint64_t v39 = v134;
        goto LABEL_19;
      }
    }

    if (qword_D2F98 != -1) {
      swift_once(&qword_D2F98, sub_1BB9C);
    }
    uint64_t v99 = sub_16C80();
    sub_26F0(v99, (uint64_t)qword_D3A20);
    uint64_t v100 = swift_retain_n(a1, 2LL);
    uint64_t v108 = (os_log_s *)Logger.logObject.getter(v100, v101, v102, v103, v104, v105, v106, v107);
    os_log_type_t v109 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v108, v109))
    {
      uint64_t v110 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v128 = sub_16AC4(32LL);
      *(void *)&__int128 v131 = v128;
      *(_DWORD *)uint64_t v110 = 136315138;
      uint64_t v111 = v110 + 12;
      uint64_t v122 = v110 + 4;
      uint64_t v125 = v110;
      uint64_t v112 = sub_256B8(v6);
      uint64_t v113 = AlarmNLv4Constants.AlarmVerb.rawValue.getter(v112);
      unint64_t v115 = v114;
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
      uint64_t v116 = sub_3D10(v113, v115, (uint64_t *)&v131);
      uint64_t v117 = sub_1D704(v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, v118, v122, v111);
      sub_1D750();
      swift_bridgeObjectRelease(v115);
      _os_log_impl(&dword_0, v108, v109, "Unable to get alarmSearch from alarmTask. Verb is %s", v125, 0xCu);
      sub_1D744();
      sub_16AA8(v128);
      sub_16AA8((uint64_t)v125);
    }

    else
    {
      sub_1D750();
    }

    _s20HandleIntentStrategyVwxx_1(v134);
  }

  else
  {
    sub_7EC4((uint64_t)&v131, (uint64_t *)&unk_D4860);
    if (qword_D2F98 != -1) {
      swift_once(&qword_D2F98, sub_1BB9C);
    }
    uint64_t v12 = sub_16C80();
    sub_26F0(v12, (uint64_t)qword_D3A20);
    uint64_t v13 = (void *)sub_16D50();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (sub_16ACC(v14))
    {
      uint64_t v15 = (_WORD *)sub_16AC4(2LL);
      *uint64_t v15 = 0;
      sub_16ADC( &dword_0,  v16,  v17,  "NLv4TranslationParse: Dialog act is not a UsoTask_noVerb_common_Alarm or has no target, cannot support input");
      sub_16AA8((uint64_t)v15);
    }
  }

LABEL_20:
  sub_16CB0();
}

    uint64_t v7 = (v12 - 1) & v12;
  }

  uint64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v15;
  }

  uint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    uint64_t v3 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }

    uint64_t v13 = sub_16FD0();
    _CocoaArrayWrapper.endIndex.getter(v13);
    sub_16FD8();
    goto LABEL_19;
  }

  __break(1u);
}

void *sub_1C9D0()
{
  uint64_t v0 = UsoTask.alarmEntity.getter();
  if (!v0 || (v1 = v0, uint64_t v2 = sub_1CA54(), swift_release(v1), !v2))
  {
    uint64_t v3 = sub_258FC();
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = sub_1CCC0(v3);
      swift_release(v4);
      return v5;
    }

    return 0LL;
  }

  return (void *)v2;
}

uint64_t sub_1CA54()
{
  uint64_t v0 = sub_26B0(&qword_D3A38);
  __chkstk_darwin(v0);
  uint64_t v2 = &v29[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v3 = type metadata accessor for SiriReferenceResolutionResolver(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = CodeGenBase.entity.getter(v5);
  static SiriReferenceResolutionResolver.shared.getter(v8);
  uint64_t v9 = swift_retain(v8);
  char v10 = SiriReferenceResolutionResolver.hasReference(usoEntity:)(v9);
  swift_release(v8);
  uint64_t v11 = *(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8);
  uint64_t v12 = v11(v7, v3);
  if ((v10 & 1) != 0)
  {
    static SiriReferenceResolutionResolver.shared.getter(v12);
    SiriReferenceResolutionResolver.resolveReferenceEntity(referenceEntity:)(v8);
    v11(v7, v3);
    uint64_t v13 = type metadata accessor for RREntity(0LL);
    if (sub_16880((uint64_t)v2, 1LL, v13) == 1)
    {
      sub_7EC4((uint64_t)v2, &qword_D3A38);
    }

    else
    {
      uint64_t v14 = type metadata accessor for SiriAlarm(0LL);
      uint64_t v28 = RREntity.convertData<A>(to:)(v14, v14);
      (*(void (**)(_BYTE *, uint64_t))(*(void *)(v13 - 8) + 8LL))(v2, v13);
      if (v28)
      {
        swift_release(v8);
        return v28;
      }
    }
  }

  if (qword_D2F98 != -1) {
    swift_once(&qword_D2F98, sub_1BB9C);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_26F0(v15, (uint64_t)qword_D3A20);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v16, v17, v18, v19, v20, v21, v22, v23);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_0, v24, v25, "Resolved alarm from SRR is nil!", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_release(v8);
  }

  else
  {

    swift_release(v8);
  }

  return 0LL;
}

void *sub_1CCC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SiriReferenceResolutionResolver(0LL);
  uint64_t v79 = *(uint8_t **)(v2 - 8);
  uint64_t v80 = v2;
  __chkstk_darwin(v2);
  uint64_t v78 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_26B0(&qword_D3A38);
  __chkstk_darwin(v4);
  uint64_t v81 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_26B0(&qword_D3A58);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_26B0(&qword_D3A60);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v77 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v77 - v21;
  if (a1)
  {
    uint64_t v23 = CodeGenBase.entity.getter(v20);
    uint64_t v24 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
    if (v24)
    {
      uint64_t v25 = v24;
      dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter();
      swift_release(v25);
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v23 = 0LL;
  }

  sub_A40C((uint64_t)v22, 1LL, 1LL, v6);
LABEL_6:
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v19,  enum case for UsoEntity_common_ReferenceType.DefinedValues.common_ReferenceType_DefiniteReference(_:),  v6);
  sub_A40C((uint64_t)v19, 0LL, 1LL, v6);
  uint64_t v26 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_3F88((uint64_t)v22, (uint64_t)v12, &qword_D3A60);
  sub_3F88((uint64_t)v19, v26, &qword_D3A60);
  if (sub_16880((uint64_t)v12, 1LL, v6) == 1)
  {
    sub_7EC4((uint64_t)v19, &qword_D3A60);
    sub_7EC4((uint64_t)v22, &qword_D3A60);
    if (sub_16880(v26, 1LL, v6) == 1)
    {
      sub_7EC4((uint64_t)v12, &qword_D3A60);
      uint64_t v27 = v23;
      goto LABEL_13;
    }

    goto LABEL_11;
  }

  sub_3F88((uint64_t)v12, (uint64_t)v16, &qword_D3A60);
  if (sub_16880(v26, 1LL, v6) == 1)
  {
    sub_7EC4((uint64_t)v19, &qword_D3A60);
    sub_7EC4((uint64_t)v22, &qword_D3A60);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
LABEL_11:
    sub_7EC4((uint64_t)v12, &qword_D3A58);
    uint64_t v27 = v23;
LABEL_17:
    if (qword_D2F98 != -1) {
      swift_once(&qword_D2F98, sub_1BB9C);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_26F0(v38, (uint64_t)qword_D3A20);
    uint64_t v39 = swift_retain_n(v27, 2LL);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v39, v40, v41, v42, v43, v44, v45, v46);
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v82 = v27;
      uint64_t v83 = (char *)v50;
      *(_DWORD *)uint64_t v49 = 136315138;
      swift_retain(v27);
      uint64_t v51 = sub_26B0(&qword_D3A68);
      uint64_t v52 = String.init<A>(describing:)(&v82, v51);
      unint64_t v54 = v53;
      uint64_t v82 = sub_3D10(v52, v53, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v49 + 4, v49 + 12);
      swift_release_n(v27, 2LL);
      swift_bridgeObjectRelease(v54);
      _os_log_impl(&dword_0, v47, v48, "Failed to resolve NoEntity reference to Alarm reference: %s", v49, 0xCu);
      swift_arrayDestroy(v50, 1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_release(v27);
    }

    else
    {

      swift_release_n(v27, 3LL);
    }

    return 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v9, v26, v6);
  sub_16A6C( qword_D3A70,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_ReferenceType.DefinedValues);
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v9, v6);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  v29(v9, v6);
  sub_7EC4((uint64_t)v19, &qword_D3A60);
  sub_7EC4((uint64_t)v22, &qword_D3A60);
  v29(v16, v6);
  sub_7EC4((uint64_t)v12, &qword_D3A60);
  uint64_t v27 = v23;
  if ((v28 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v30 = type metadata accessor for UsoEntityBuilder_common_Alarm(0LL);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  uint64_t v31 = UsoEntityBuilder_common_Alarm.init()();
  uint64_t v32 = static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)();
  uint64_t v33 = swift_release(v31);
  if (!v32) {
    goto LABEL_17;
  }
  uint64_t v34 = v78;
  static SiriReferenceResolutionResolver.shared.getter(v33);
  uint64_t v35 = (uint64_t)v81;
  SiriReferenceResolutionResolver.resolveReferenceEntity(referenceEntity:)(v32);
  (*((void (**)(char *, uint64_t))v79 + 1))(v34, v80);
  uint64_t v36 = type metadata accessor for RREntity(0LL);
  if (sub_16880(v35, 1LL, v36) == 1)
  {
    swift_release(v32);
    sub_7EC4(v35, &qword_D3A38);
    goto LABEL_17;
  }

  uint64_t v37 = type metadata accessor for SiriAlarm(0LL);
  uint64_t v56 = (void *)RREntity.convertData<A>(to:)(v37, v37);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8LL))(v35, v36);
  if (!v56)
  {
    swift_release(v32);
    goto LABEL_17;
  }

  if (qword_D2F98 != -1) {
    swift_once(&qword_D2F98, sub_1BB9C);
  }
  uint64_t v57 = type metadata accessor for Logger(0LL);
  sub_26F0(v57, (uint64_t)qword_D3A20);
  id v58 = v56;
  uint64_t v66 = (os_log_s *)Logger.logObject.getter(v58, v59, v60, v61, v62, v63, v64, v65);
  os_log_type_t v67 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v81 = (char *)swift_slowAlloc(32LL, -1LL);
    uint64_t v83 = v81;
    *(_DWORD *)uint64_t v68 = 136315138;
    uint64_t v79 = v68 + 4;
    id v69 = v58;
    id v70 = [v69 description];
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    uint64_t v80 = v27;
    uint64_t v72 = v71;
    unint64_t v74 = v73;

    uint64_t v82 = sub_3D10(v72, v74, (uint64_t *)&v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v79, v68 + 12);

    swift_bridgeObjectRelease(v74);
    _os_log_impl( &dword_0,  v66,  v67,  "resolvedNoEntityReference: Resolved NoEntity reference %s from SRR. Using it to search alarm.",  v68,  0xCu);
    uint64_t v75 = v81;
    swift_arrayDestroy(v81, 1LL);
    swift_slowDealloc(v75, -1LL, -1LL);
    swift_slowDealloc(v68, -1LL, -1LL);

    swift_release(v32);
    uint64_t v76 = v80;
  }

  else
  {

    swift_release(v32);
    uint64_t v76 = v27;
  }

  swift_release(v76);
  return v56;
}

uint64_t sub_1D4B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_84E54(v1);
  if (v4)
  {
    uint64_t v5 = v4;
    String.toSpeakableString.getter(v3);
    swift_bridgeObjectRelease(v5);
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  return sub_A40C(a1, v6, 1LL, v7);
}

void sub_1D510()
{
}

void sub_1D528()
{
}

void sub_1D540(SEL *a1, void (*a2)(id), void *a3)
{
}

void sub_1D584()
{
  id v1 = [v0 includeSleepAlarm];
  sub_5E3C();
  v2.super.super.Class isa = sub_1D75C().super.super.isa;
  if (v1)
  {
    id v3 = v1;
    static NSObject.== infix(_:_:)(v3, v2.super.super.isa);
  }

  sub_1D738();
}

id sub_1D5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v7 = 0LL;
  }

  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v9 = [v4 initWithIdentifier:v7 displayString:v8];

  return v9;
}

uint64_t sub_1D688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 152, v5 - 144, v4, a4, 0LL);
}

uint64_t sub_1D69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 152, v5 - 144, v4, a4, 0LL);
}

uint64_t sub_1D6B0()
{
  return swift_retain(*(void *)(v0 - 152));
}

uint64_t sub_1D6BC()
{
  return swift_dynamicCast(v2 - 152, v2 - 144, v1, v0, 0LL);
}

void sub_1D6D4(uint64_t a1)
{
}

uint64_t sub_1D6DC(uint64_t a1)
{
  return sub_16880(a1, 1LL, v1);
}

uint64_t sub_1D6F8(uint64_t a1, uint64_t a2)
{
  return sub_A40C(a1, a2, 1LL, v2);
}

uint64_t sub_1D704(uint64_t a1)
{
  *(void *)(v1 - 152) = a1;
  return v1 - 152;
}

uint64_t sub_1D718(uint64_t a1)
{
  return sub_16880(a1, 1LL, v1);
}

id sub_1D724()
{
  return [v0 *(SEL *)(v1 + 584)];
}

uint64_t sub_1D730()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_1D744()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_1D750()
{
  return swift_release_n(v0, 2LL);
}

NSNumber sub_1D75C()
{
  return NSNumber.init(integerLiteral:)(1LL);
}

uint64_t sub_1D768()
{
  return 0LL;
}

  ;
}

uint64_t sub_1D780()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
}

uint64_t sub_1D78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

uint64_t type metadata accessor for AlarmIntents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D9E0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AlarmIntents);
}

uint64_t sub_1D7A0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }

uint64_t sub_1D828(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1D874 + 4 * byte_A4965[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1D8A8 + 4 * byte_A4960[v4]))();
}

uint64_t sub_1D8A8(uint64_t result)
{
  *(_BYTE *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_1D8B0(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1D8B8LL);
  }
  return result;
}

uint64_t sub_1D8C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1D8CCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1D8D0(uint64_t result)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_1D8D8(uint64_t result)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_1D8E4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D8EC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t type metadata accessor for AlarmIntents.FlowError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D9E0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AlarmIntents.FlowError);
}

uint64_t sub_1D900(uint64_t a1)
{
  return swift_getWitnessTable(&unk_A49E8, a1);
}

BOOL sub_1D910(char a1, char a2)
{
  return a1 == a2;
}

void sub_1D920(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_1D944(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_1D988(char *a1, char *a2)
{
  return sub_1D910(*a1, *a2);
}

Swift::Int sub_1D994()
{
  return sub_1D944(*v0);
}

void sub_1D99C(uint64_t a1)
{
}

Swift::Int sub_1D9A4(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1D9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t type metadata accessor for ErrorCATPatternsExecutor(uint64_t a1)
{
  return sub_8A38(a1, (uint64_t *)&unk_D3B78, (uint64_t)&nominal type descriptor for ErrorCATPatternsExecutor);
}

uint64_t sub_1DA20(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D8148);
}

uint64_t sub_1DA5C()
{
  uint64_t v1 = sub_26B0(&qword_D3A08);
  __chkstk_darwin(v1);
  sub_17390();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_26B0(&qword_D3BD0);
  uint64_t v6 = swift_allocObject(v5, 224LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_A4A50;
  BOOL v7 = (void *)(v6 + 48);
  *(void *)(v6 + 32) = 0x6C6562616CLL;
  *(void *)(v6 + 40) = 0xE500000000000000LL;
  sub_4D80(v0, v4, &qword_D3A08);
  uint64_t v8 = sub_1EC14();
  if (sub_16880(v4, 1LL, v8) == 1)
  {
    sub_19594(v4, &qword_D3A08);
    *(_OWORD *)BOOL v7 = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
  }

  else
  {
    *(void *)(v6 + 72) = v8;
    id v9 = sub_19558(v7);
    sub_1EC54((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL));
  }

  strcpy((char *)(v6 + 80), "noAlarmExists");
  *(_WORD *)(v6 + 94) = -4864;
  found = (int *)type metadata accessor for ErrorNotFoundParameters(0LL);
  *(_BYTE *)(v6 + 96) = *(_BYTE *)(v0 + found[5]);
  *(void *)(v6 + 120) = &type metadata for Bool;
  *(void *)(v6 + 128) = 0x6F43686372616573LL;
  *(void *)(v6 + 136) = 0xEF6E6F697469646ELL;
  uint64_t v11 = *(void *)(v0 + found[6]);
  uint64_t v12 = sub_26B0(&qword_D3BD8);
  *(void *)(v6 + 144) = v11;
  *(void *)(v6 + 168) = v12;
  *(void *)(v6 + 176) = 1701669236LL;
  *(void *)(v6 + 184) = 0xE400000000000000LL;
  uint64_t v13 = *(void *)(v0 + found[7]);
  if (v13)
  {
    uint64_t v14 = type metadata accessor for DialogCalendar(0LL);
  }

  else
  {
    uint64_t v14 = 0LL;
    *(void *)(v6 + 200) = 0LL;
    *(void *)(v6 + 208) = 0LL;
  }

  *(void *)(v6 + 192) = v13;
  *(void *)(v6 + 216) = v14;
  swift_bridgeObjectRetain(v11);
  swift_retain(v13);
  return v6;
}

uint64_t sub_1DC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_26B0(&qword_D3A08);
  v4[5] = sub_1EA3C(v5);
  uint64_t found = type metadata accessor for ErrorNotFoundParameters(0LL);
  v4[6] = found;
  v4[7] = sub_1EA3C(found);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_1DC88()
{
  uint64_t v2 = sub_1EBC0();
  sub_1EA98(v2);
  if (!v1)
  {
    uint64_t v4 = sub_1EC0C();
    goto LABEL_5;
  }

  sub_1EC0C();
  sub_1B6E0();
  uint64_t v4 = sub_1EC28(v3);
  if (!v5)
  {
LABEL_5:
    uint64_t v6 = 1LL;
    goto LABEL_6;
  }

  sub_1EC1C();
  uint64_t v4 = sub_16C48();
  uint64_t v6 = 0LL;
LABEL_6:
  sub_1EB0C(v4, v6);
  *(void *)(v0 + 64) = sub_1DA5C();
  BOOL v7 = (void *)sub_1EAF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 72) = v7;
  uint64_t v8 = sub_1EA60(v7, (uint64_t)sub_1DD14);
  return sub_1EB38(v8, v9, v10, v11);
}

uint64_t sub_1DD14()
{
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_1DD5C()
{
  sub_19808();
  swift_task_dealloc(v0);
  return (*(uint64_t (**)(void))(v2 + 8))(*(void *)(v2 + 88));
}

uint64_t sub_1DDA8()
{
  sub_19808();
  swift_task_dealloc(v0);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1DDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_26B0(&qword_D3A08);
  v4[5] = sub_1EA3C(v5);
  uint64_t found = type metadata accessor for ErrorNotFoundParameters(0LL);
  v4[6] = found;
  v4[7] = sub_1EA3C(found);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_1DE44()
{
  uint64_t v2 = sub_1EBC0();
  sub_1EA98(v2);
  if (!v1)
  {
    uint64_t v4 = sub_1EC0C();
    goto LABEL_5;
  }

  sub_1EC0C();
  sub_1B6E0();
  uint64_t v4 = sub_1EC28(v3);
  if (!v5)
  {
LABEL_5:
    uint64_t v6 = 1LL;
    goto LABEL_6;
  }

  sub_1EC1C();
  uint64_t v4 = sub_16C48();
  uint64_t v6 = 0LL;
LABEL_6:
  sub_1EB0C(v4, v6);
  *(void *)(v0 + 64) = sub_1DA5C();
  BOOL v7 = (void *)sub_1EAF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 72) = v7;
  uint64_t v8 = sub_1EA60(v7, (uint64_t)sub_1DED0);
  return sub_1EB38(v8, v9, v10, v11);
}

uint64_t sub_1DED0()
{
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_1DF18(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  *(_BYTE *)(v3 + 80) = a1;
  uint64_t found = type metadata accessor for ErrorNotFoundParameters(0LL);
  *(void *)(v3 + 32) = found;
  *(void *)(v3 + 40) = sub_1EA3C(found);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_1DF5C()
{
  uint64_t v1 = sub_1EC14();
  sub_1EB84(v1);
  *(void *)(v0 + 48) = sub_1DA5C();
  uint64_t v2 = (void *)sub_1EAF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = sub_1EB4C(v2, (uint64_t)sub_1DFBC);
  return sub_1EBFC(v3, v4, v5, v6);
}

uint64_t sub_1DFBC()
{
  if (!v1) {
    *(void *)(v2 + 72) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_1E004(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  *(_BYTE *)(v3 + 80) = a1;
  uint64_t found = type metadata accessor for ErrorNotFoundParameters(0LL);
  *(void *)(v3 + 32) = found;
  *(void *)(v3 + 40) = sub_1EA3C(found);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_1E048()
{
  uint64_t v1 = sub_1EC14();
  sub_1EB84(v1);
  *(void *)(v0 + 48) = sub_1DA5C();
  uint64_t v2 = (void *)sub_1EAF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = sub_1EB4C(v2, (uint64_t)sub_1E0A8);
  return sub_1EBFC(v3, v4, v5, v6);
}

uint64_t sub_1E0A8()
{
  if (!v1) {
    *(void *)(v2 + 72) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_1E0F0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 72));
}

uint64_t sub_1E128()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1E15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1E1AC(a1, a2, a3);
}

uint64_t sub_1E1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_17390();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_26B0((uint64_t *)&unk_D36C0);
  __chkstk_darwin(v11);
  sub_17390();
  uint64_t v14 = v13 - v12;
  sub_4D80(a1, v13 - v12, (uint64_t *)&unk_D36C0);
  sub_1EC54(v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  uint64_t v15 = CATWrapper.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_19594(a1, (uint64_t *)&unk_D36C0);
  return v15;
}

uint64_t sub_1E2A8()
{
  return type metadata accessor for ErrorCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for ErrorNotFoundParameters(uint64_t a1)
{
  return sub_8A38(a1, (uint64_t *)&unk_D3C40, (uint64_t)&nominal type descriptor for ErrorNotFoundParameters);
}

uint64_t sub_1E2C4(uint64_t a1)
{
  uint64_t found = type metadata accessor for ErrorNotFoundParameters(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(found - 8) + 8LL))(a1, found);
  return a1;
}

char *sub_1E300(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (sub_16880((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_26B0(&qword_D3A08);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
      sub_A40C((uint64_t)v4, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[6];
    v4[a3[5]] = *((_BYTE *)a2 + a3[5]);
    uint64_t v11 = *(uint64_t *)((char *)a2 + v10);
    *(void *)&v4[v10] = v11;
    uint64_t v12 = a3[7];
    uint64_t v9 = *(uint64_t *)((char *)a2 + v12);
    *(void *)&v4[v12] = v9;
    swift_bridgeObjectRetain(v11);
  }

  swift_retain(v9);
  return v4;
}

uint64_t sub_1E3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24)));
  return swift_release(*(void *)(a1 + *(int *)(a2 + 28)));
}

char *sub_1E464(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v9 = *(void *)&a2[v8];
  *(void *)&a1[v8] = v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = *(void *)&a2[v10];
  *(void *)&a1[v10] = v11;
  swift_bridgeObjectRetain(v9);
  swift_retain(v11);
  return a1;
}

char *sub_1E530(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_16880((uint64_t)a1, 1LL, v6);
  int v8 = sub_16880((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  a1[a3[5]] = a2[a3[5]];
  uint64_t v11 = a3[6];
  uint64_t v12 = *(void *)&a2[v11];
  uint64_t v13 = *(void *)&a1[v11];
  *(void *)&a1[v11] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = *(void *)&a1[v14];
  uint64_t v16 = *(void *)&a2[v14];
  *(void *)&a1[v14] = v16;
  swift_retain(v16);
  swift_release(v15);
  return a1;
}

char *sub_1E664(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

char *sub_1E724(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_16880((uint64_t)a1, 1LL, v6);
  int v8 = sub_16880((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v12 = *(void *)&a1[v11];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void *)&a1[v13];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  swift_release(v14);
  return a1;
}

uint64_t sub_1E844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E850);
}

uint64_t sub_1E850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_16880(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1E8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E8D8);
}

uint64_t sub_1E8D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_A40C(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + swift_release(*(void *)(v0 + 24)) = (a2 - 1);
  return result;
}

void sub_1E950(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = &unk_A4AE8;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_A4B00;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

void sub_1E9D8(uint64_t a1)
{
  if (!qword_D3C50)
  {
    uint64_t v2 = type metadata accessor for SpeakableString(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_D3C50);
    }
  }

uint64_t sub_1EA3C(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_1EA50()
{
  return swift_task_switch();
}

uint64_t sub_1EA60@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0x6F4E23726F727245LL;
}

uint64_t sub_1EA98(uint64_t a1)
{
  uint64_t result = sub_A40C(v2, 1LL, 1LL, a1);
  *(_BYTE *)(v2 + v1[5]) = v4;
  *(void *)(v2 + v1[6]) = v3;
  *(void *)(v2 + v1[7]) = 0LL;
  return result;
}

uint64_t sub_1EAD4()
{
  uint64_t v3 = *v1;
  char v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 80) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1EAF8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_1EB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = *(void *)(v3 + 40);
  sub_A40C(v5, a2, 1LL, v2);
  return sub_1B4F0(v5, v4);
}

uint64_t sub_1EB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1EB4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0x6F4E23726F727245LL;
}

uint64_t sub_1EB84(uint64_t a1)
{
  *(_BYTE *)(v2 + v3[5]) = v4;
  *(void *)(v2 + v3[6]) = v1;
  *(void *)(v2 + v3[7]) = 0LL;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1EBC0()
{
  return type metadata accessor for SpeakableString(0LL);
}

uint64_t sub_1EBD8()
{
  uint64_t v3 = *v1;
  char v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 56);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 64) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1EBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1EC0C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_1EC14()
{
  return type metadata accessor for SpeakableString(0LL);
}

uint64_t sub_1EC1C()
{
  return String.toSpeakableString.getter();
}

uint64_t sub_1EC28(uint64_t a1)
{
  *(void *)(v2 + vsub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = a1;
  return sub_84E54(v1);
}

uint64_t sub_1EC34(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = a4;
  *(void *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 96) = result;
  return result;
}

uint64_t sub_1EC44()
{
  return sub_1E2C4(*(void *)(v0 + 56));
}

uint64_t sub_1EC54@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_1EC60()
{
  return sub_1E2C4(*(void *)(v0 + 40));
}

uint64_t sub_1EC6C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D3CA0);
  sub_26F0(v0, (uint64_t)qword_D3CA0);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_1ECB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PluginAction(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a1 + 16)
    && (unint64_t v8 = sub_7360(0xD00000000000001CLL, 0x80000000000A8090LL), (v9 & 1) != 0)
    && (sub_3F2C(*(void *)(a1 + 56) + 32 * v8, (uint64_t)v28),
        (swift_dynamicCast(&v26, v28, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0))
  {
    uint64_t v11 = v26;
    unint64_t v10 = v27;
    sub_1EF38(v26, v27);
    PluginAction.init(data:)(v11, v10);
    if (qword_D2FA0 != -1) {
      swift_once(&qword_D2FA0, sub_1EC6C);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_26F0(v12, (uint64_t)qword_D3CA0);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v13, v14, v15, v16, v17, v18, v19, v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      *(_WORD *)sub_1EFA4() = 0;
      sub_1EF98(&dword_0, v21, v22, "Followup PluginAction available.");
      sub_1EF88();

      sub_1EF7C();
    }

    else
    {
      sub_1EF7C();
    }

    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
    uint64_t v23 = 0LL;
  }

  else
  {
    uint64_t v23 = 1LL;
  }

  return sub_A40C(a2, v23, 1LL, v4);
}

uint64_t sub_1EF38(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1EF7C()
{
  return sub_168CC(v1, v0);
}

uint64_t sub_1EF88()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

void sub_1EF98(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_1EFA4()
{
  return swift_slowAlloc(2LL, -1LL);
}

uint64_t type metadata accessor for ModifyAllCATPatternsExecutor(uint64_t a1)
{
  return sub_8A38(a1, (uint64_t *)&unk_D3CB8, (uint64_t)&nominal type descriptor for ModifyAllCATPatternsExecutor);
}

uint64_t sub_1EFC4(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D8158);
}

void sub_1F000(uint64_t (*a1)(void))
{
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v44 - v7;
  uint64_t v9 = sub_26B0(&qword_D3BD0);
  uint64_t v10 = swift_allocObject(v9, 704LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_A4B20;
  uint64_t v11 = (void *)(v10 + 48);
  sub_214C8();
  *(void *)(v12 + 32) = 0xD000000000000016LL;
  *(void *)(v12 + 40) = v13;
  sub_3F88(v1, (uint64_t)v8, &qword_D3A08);
  uint64_t v14 = sub_1EC14();
  sub_215B8((uint64_t)v8);
  if (v15)
  {
    sub_202D8((uint64_t)v8, &qword_D3A08);
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
  }

  else
  {
    *(void *)(v10 + 72) = v14;
    uint64_t v16 = sub_19558(v11);
    sub_17338( (uint64_t)v16,  (uint64_t)v8,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL));
  }

  *(void *)(v10 + 80) = 7368801LL;
  *(void *)(v10 + 88) = 0xE300000000000000LL;
  uint64_t v17 = (int *)a1(0LL);
  uint64_t v18 = *(void *)(v1 + v17[5]);
  if (v18)
  {
    uint64_t v19 = sub_21638();
    uint64_t v20 = v18;
  }

  else
  {
    uint64_t v20 = 0LL;
    uint64_t v19 = 0LL;
    *(void *)(v10 + 104) = 0LL;
    *(void *)(v10 + 112) = 0LL;
  }

  *(void *)(v10 + 96) = v20;
  *(void *)(v10 + 120) = v19;
  strcpy((char *)(v10 + 128), "hideSleepAlarm");
  *(_BYTE *)(v10 + 14sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = -18;
  *(_BYTE *)(v10 + 144) = *(_BYTE *)(v1 + v17[6]);
  *(void *)(v10 + 168) = &type metadata for Bool;
  *(void *)(v10 + 176) = 0x41646578694D7369LL;
  sub_21640();
  *(void *)(v10 + 184) = v21;
  *(_BYTE *)(v10 + 192) = *(_BYTE *)(v1 + v17[7]);
  *(void *)(v10 + 216) = v22;
  *(void *)(v10 + 224) = 0xD000000000000010LL;
  sub_214E0();
  *(void *)(v10 + 232) = v23;
  *(_BYTE *)(v10 + 240) = *(_BYTE *)(v1 + v17[8]);
  *(void *)(v10 + 264) = v24;
  *(void *)(v10 + 272) = 0xD000000000000018LL;
  sub_214E0();
  *(void *)(v10 + 280) = v25;
  *(_BYTE *)(v10 + 288) = *(_BYTE *)(v1 + v17[9]);
  *(void *)(v10 + 312) = v26;
  *(void *)(v10 + 320) = 0xD000000000000012LL;
  sub_214E0();
  *(void *)(v10 + 328) = v27;
  *(_BYTE *)(v10 + 336) = *(_BYTE *)(v1 + v17[10]);
  *(void *)(v10 + 360) = v28;
  *(void *)(v10 + 368) = 0xD000000000000016LL;
  sub_214E0();
  *(void *)(v10 + 376) = v29;
  *(_BYTE *)(v10 + 384) = *(_BYTE *)(v1 + v17[11]);
  *(void *)(v10 + 408) = v30;
  *(void *)(v10 + 416) = 0xD000000000000016LL;
  sub_214E0();
  *(void *)(v10 + 424) = v31;
  *(_BYTE *)(v10 + 432) = *(_BYTE *)(v1 + v17[12]);
  *(void *)(v10 + 456) = v32;
  *(void *)(v10 + 464) = 0xD000000000000017LL;
  sub_214E0();
  *(void *)(v10 + 472) = v33;
  *(_BYTE *)(v10 + 480) = *(_BYTE *)(v1 + v17[13]);
  *(void *)(v10 + 504) = v34;
  *(void *)(v10 + 512) = 0x736D657469LL;
  *(void *)(v10 + 520) = 0xE500000000000000LL;
  uint64_t v35 = *(void *)(v1 + v17[14]);
  *(void *)(v10 + 552) = sub_26B0(&qword_D3D28);
  *(void *)(v10 + 528) = v35;
  *(void *)(v10 + 560) = 0x616C417065656C73LL;
  *(void *)(v10 + 568) = 0xEA00000000006D72LL;
  uint64_t v36 = *(void *)(v1 + v17[15]);
  if (v36)
  {
    uint64_t v37 = type metadata accessor for AlarmAlarm(0LL);
    uint64_t v38 = v36;
  }

  else
  {
    uint64_t v38 = 0LL;
    uint64_t v37 = 0LL;
    *(_OWORD *)(v10 + 584) = 0u;
  }

  *(void *)(v10 + 576) = v38;
  *(void *)(v10 + 600) = v37;
  *(void *)(v10 + 608) = 0xD000000000000012LL;
  sub_214C8();
  *(void *)(v10 + 616) = v39;
  sub_3F88(v1 + v17[16], (uint64_t)v6, &qword_D3A08);
  sub_215B8((uint64_t)v6);
  if (v15)
  {
    sub_21610();
    swift_retain(v18);
    sub_21608();
    sub_202D8((uint64_t)v6, &qword_D3A08);
    *(_OWORD *)(v10 + 624) = 0u;
    *(_OWORD *)(v10 + 640) = 0u;
  }

  else
  {
    *(void *)(v10 + 648) = v14;
    uint64_t v40 = sub_19558((void *)(v10 + 624));
    sub_17338( (uint64_t)v40,  (uint64_t)v6,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL));
    sub_21610();
    swift_retain(v18);
    sub_21608();
  }

  *(void *)(v10 + 656) = 0xD000000000000011LL;
  sub_214C8();
  *(void *)(v10 + 664) = v41;
  uint64_t v42 = *(void *)(v1 + v17[17]);
  if (v42)
  {
    uint64_t v43 = type metadata accessor for DialogCalendar(0LL);
  }

  else
  {
    uint64_t v43 = 0LL;
    *(_OWORD *)(v10 + 680) = 0u;
  }

  *(void *)(v10 + 672) = v42;
  *(void *)(v10 + 696) = v43;
  swift_retain(v42);
  sub_16CB0();
}

void sub_1F410()
{
  uint64_t v2 = v1;
  sub_26B0(&qword_D3A08);
  sub_215E4();
  __chkstk_darwin(v3);
  sub_17390();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_26B0(&qword_D3BD0);
  uint64_t v8 = swift_allocObject(v7, 464LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_A4B30;
  sub_21640();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = *v0;
  *(void *)(v9 + 72) = &type metadata for Bool;
  *(void *)(v9 + 80) = 0xD000000000000010LL;
  sub_214C8();
  *(void *)(v12 + 88) = v13;
  *(_BYTE *)(v12 + 96) = v0[1];
  *(void *)(v12 + 120) = v14;
  *(void *)(v12 + 128) = 0xD000000000000018LL;
  sub_214C8();
  *(void *)(v15 + 136) = v16;
  *(_BYTE *)(v15 + 144) = v0[2];
  *(void *)(v15 + 168) = v17;
  *(void *)(v15 + 176) = 0xD000000000000012LL;
  sub_214C8();
  *(void *)(v18 + 184) = v19;
  *(_BYTE *)(v18 + 192) = v0[3];
  *(void *)(v18 + 216) = v20;
  *(void *)(v18 + 224) = 0xD000000000000016LL;
  *(void *)(v18 + 232) = 0x80000000000A8170LL;
  *(_BYTE *)(v18 + 240) = v0[4];
  *(void *)(v18 + 264) = v20;
  *(void *)(v18 + 272) = 0xD000000000000016LL;
  sub_214C8();
  *(void *)(v21 + 280) = v22;
  *(_BYTE *)(v21 + 288) = v0[5];
  *(void *)(v21 + 312) = v23;
  *(void *)(v21 + 320) = 0xD000000000000017LL;
  sub_214C8();
  *(void *)(v24 + 328) = v25;
  *(_BYTE *)(v24 + 336) = v0[6];
  uint64_t v26 = v24 + 384;
  *(void *)(v24 + 360) = v27;
  *(void *)(v24 + 368) = 0xD000000000000012LL;
  sub_214C8();
  *(void *)(v28 + 376) = v29;
  uint64_t v30 = v2(0LL);
  sub_3F88((uint64_t)&v0[*(int *)(v30 + 44)], v6, &qword_D3A08);
  uint64_t v31 = sub_1EC14();
  sub_215B8(v6);
  if (v32)
  {
    sub_202D8(v6, &qword_D3A08);
    *(_OWORD *)uint64_t v26 = 0u;
    *(_OWORD *)(v26 + 16) = 0u;
  }

  else
  {
    *(void *)(v8 + 408) = v31;
    uint64_t v33 = sub_19558((void *)v26);
    sub_17338((uint64_t)v33, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32LL));
  }

  sub_214E0();
  *(void *)(v8 + 416) = v34;
  *(void *)(v8 + 424) = v35;
  uint64_t v36 = *(void *)&v0[*(int *)(v30 + 48)];
  if (v36)
  {
    uint64_t v37 = type metadata accessor for DialogCalendar(0LL);
  }

  else
  {
    uint64_t v37 = 0LL;
    *(void *)(v8 + 440) = 0LL;
    *(void *)(v8 + 448) = 0LL;
  }

  *(void *)(v8 + 432) = v36;
  *(void *)(v8 + 456) = v37;
  swift_retain(v36);
  sub_21290();
}

uint64_t sub_1F644( char a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8, __int128 a9, uint64_t a10)
{
  *(void *)(v10 + 32) = a10;
  *(_OWORD *)(v10 + 16) = a9;
  *(_BYTE *)(v10 + 95) = a8;
  uint64_t v11 = sub_21308(a1, a2, a3, a4, a5, a6, a7);
  uint64_t v12 = type metadata accessor for ModifyAllDisableParameters(v11);
  *(void *)(v10 + 40) = v12;
  *(void *)(v10 + 48) = sub_1EA3C(v12);
  sub_19840();
  return sub_213FC();
}

#error "1F6E4: call analysis failed (funcsize=71)"
uint64_t sub_1F7C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_2126C();
  sub_16F40();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_1F810(uint64_t a1)
{
  uint64_t v1 = sub_21520();
  return sub_21260(v1, v2);
}

uint64_t sub_1F844(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_2168C();
  return sub_1B5EC(v1);
}

uint64_t sub_1F878(char a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8)
{
  uint64_t v9 = sub_21434(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = type metadata accessor for ModifyAllDisableParameters(v9);
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 56) = sub_1EA3C(v10);
  sub_19840();
  return sub_213FC();
}

uint64_t sub_1F8B4()
{
  uint64_t v29 = *(uint64_t (**)(uint64_t))(v0 + 24);
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 32);
  int v26 = *(unsigned __int8 *)(v0 + 102);
  char v28 = *(_BYTE *)(v0 + 103);
  int v25 = *(unsigned __int8 *)(v0 + 101);
  uint64_t v1 = sub_1EC14();
  uint64_t v9 = sub_2110C(v1, v2, v3, v4, v5, v6, v7, v8, v21, v23, v25, SHIWORD(v25), v26, SHIWORD(v26), v28);
  sub_21674(v9, v10, v11, v12, v13, v14, v15, v16, v22, v24, v27, v29);
  sub_1F000(type metadata accessor for ModifyAllDisableParameters);
  uint64_t v18 = v17;
  *(void *)(v0 + 64) = v17;
  uint64_t v19 = (void *)sub_21588((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 72) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_1F980;
  return sub_21488(0xD000000000000011LL, 0x80000000000A8270LL, v18, v30);
}

uint64_t sub_1F980()
{
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_1F9C8(uint64_t a1)
{
  return sub_21260(*(void *)(v1 + 88), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1FA04(uint64_t a1)
{
  return sub_1B5EC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1FA3C(char a1, char a2, char a3, char a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9)
{
  v10[3] = a9;
  v10[4] = v9;
  v10[2] = a8;
  uint64_t v11 = sub_21308(a1, a2, a3, a4, a5, a6, a7);
  uint64_t v12 = type metadata accessor for ModifyAllDisableConciseParameters(v11);
  v10[5] = v12;
  v10[6] = sub_1EA3C(v12);
  sub_19840();
  return sub_21530();
}

#error "1FAD8: call analysis failed (funcsize=41)"
uint64_t sub_1FB34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_2126C();
  sub_16F40();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_1FB7C(uint64_t a1)
{
  uint64_t v1 = sub_21520();
  return sub_21260(v1, v2);
}

uint64_t sub_1FBB0(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_2168C();
  return sub_1B5EC(v1);
}

uint64_t sub_1FBE4( char a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8, __int128 a9, uint64_t a10)
{
  *(void *)(v10 + 32) = a10;
  *(_OWORD *)(v10 + 16) = a9;
  *(_BYTE *)(v10 + 95) = a8;
  uint64_t v11 = sub_21308(a1, a2, a3, a4, a5, a6, a7);
  uint64_t v12 = type metadata accessor for ModifyAllEnableParameters(v11);
  *(void *)(v10 + 40) = v12;
  *(void *)(v10 + 48) = sub_1EA3C(v12);
  sub_19840();
  return sub_213FC();
}

#error "1FC84: call analysis failed (funcsize=71)"
uint64_t sub_1FD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_2126C();
  sub_16F40();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_1FDB0(uint64_t a1)
{
  uint64_t v1 = sub_21520();
  return sub_21260(v1, v2);
}

uint64_t sub_1FDE4(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_2168C();
  return sub_1B5EC(v1);
}

uint64_t sub_1FE18(char a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8)
{
  uint64_t v9 = sub_21434(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = type metadata accessor for ModifyAllEnableParameters(v9);
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 56) = sub_1EA3C(v10);
  sub_19840();
  return sub_213FC();
}

uint64_t sub_1FE54()
{
  uint64_t v29 = *(uint64_t (**)(uint64_t))(v0 + 24);
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 32);
  int v26 = *(unsigned __int8 *)(v0 + 102);
  char v28 = *(_BYTE *)(v0 + 103);
  int v25 = *(unsigned __int8 *)(v0 + 101);
  uint64_t v1 = sub_1EC14();
  uint64_t v9 = sub_2110C(v1, v2, v3, v4, v5, v6, v7, v8, v21, v23, v25, SHIWORD(v25), v26, SHIWORD(v26), v28);
  sub_21674(v9, v10, v11, v12, v13, v14, v15, v16, v22, v24, v27, v29);
  sub_1F000(type metadata accessor for ModifyAllEnableParameters);
  uint64_t v18 = v17;
  *(void *)(v0 + 64) = v17;
  uint64_t v19 = (void *)sub_21588((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 72) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_1FF20;
  return sub_21488(0xD000000000000010LL, 0x80000000000A8210LL, v18, v30);
}

uint64_t sub_1FF20()
{
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_1FF68(uint64_t a1)
{
  return sub_21260(*(void *)(v1 + 88), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1FFA4(uint64_t a1)
{
  return sub_1B5EC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1FFDC(char a1, char a2, char a3, char a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9)
{
  v10[3] = a9;
  v10[4] = v9;
  v10[2] = a8;
  uint64_t v11 = sub_21308(a1, a2, a3, a4, a5, a6, a7);
  uint64_t v12 = type metadata accessor for ModifyAllEnableConciseParameters(v11);
  v10[5] = v12;
  v10[6] = sub_1EA3C(v12);
  sub_19840();
  return sub_21530();
}

#error "20078: call analysis failed (funcsize=41)"
uint64_t sub_200D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_2126C();
  sub_16F40();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_2011C(uint64_t a1)
{
  uint64_t v1 = sub_21520();
  return sub_21260(v1, v2);
}

uint64_t sub_20150(uint64_t a1)
{
  uint64_t v1 = (uint64_t (*)(void))sub_2168C();
  return sub_1B5EC(v1);
}

void sub_20184(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_201D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_17390();
  uint64_t v10 = v9 - v8;
  sub_26B0((uint64_t *)&unk_D36C0);
  sub_215E4();
  __chkstk_darwin(v11);
  sub_17390();
  uint64_t v14 = v13 - v12;
  sub_3F88(a1, v13 - v12, (uint64_t *)&unk_D36C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  CATWrapper.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_202D8(a1, (uint64_t *)&unk_D36C0);
  sub_16CB0();
}

uint64_t sub_202BC()
{
  return type metadata accessor for ModifyAllCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for ModifyAllEnableConciseParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D3FC8, (uint64_t)&nominal type descriptor for ModifyAllEnableConciseParameters);
}

void sub_202D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_26B0(a2);
  sub_2153C(v2);
  sub_17B50();
}

uint64_t type metadata accessor for ModifyAllEnableParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D3F08, (uint64_t)&nominal type descriptor for ModifyAllEnableParameters);
}

void sub_20314(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_2153C(v2);
  sub_17B50();
}

uint64_t type metadata accessor for ModifyAllDisableConciseParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D3E58, (uint64_t)&nominal type descriptor for ModifyAllDisableConciseParameters);
}

uint64_t type metadata accessor for ModifyAllDisableParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D3D98, (uint64_t)&nominal type descriptor for ModifyAllDisableParameters);
}

uint64_t sub_2037C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_20388);
}

uint64_t sub_2038C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_20398);
}

uint64_t sub_203B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_203C4);
}

uint64_t sub_203C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_203D4);
}

void sub_203DC()
{
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = sub_2159C();
  }

  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_1EC14();
    if (sub_212FC(v1))
    {
      uint64_t v8 = sub_26B0(&qword_D3A08);
      sub_2135C(v8);
    }

    else
    {
      sub_2134C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
      sub_21250(v0);
    }

    sub_211B8();
    sub_21608();
    sub_21610();
    if (sub_212FC(v3))
    {
      uint64_t v10 = sub_26B0(&qword_D3A08);
      sub_21370(v10);
    }

    else
    {
      sub_2132C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL));
      sub_21250(v2);
    }

    uint64_t v11 = *(int *)(v6 + 68);
    uint64_t v9 = *(void *)(v1 + v11);
    *(void *)(v0 + v1sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v9;
  }

  swift_retain(v9);
  sub_21290();
}

uint64_t sub_2049C(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1EC14();
  swift_release(*(void *)(a1 + a2[5]));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[14]));
  swift_release(*(void *)(a1 + a2[15]));
  uint64_t v5 = a1 + a2[16];
  return sub_21508(*(void *)(a1 + a2[17]));
}

void sub_20538()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_1EC14();
  if (sub_212FC(v5))
  {
    uint64_t v9 = sub_26B0(&qword_D3A08);
    sub_2135C(v9);
  }

  else
  {
    sub_2134C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL));
    sub_21250(v7);
  }

  sub_211B8();
  sub_21608();
  sub_21610();
  if (sub_212FC(v1))
  {
    uint64_t v10 = sub_26B0(&qword_D3A08);
    sub_21370(v10);
  }

  else
  {
    sub_2132C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL));
    sub_21250(v0);
  }

  sub_2146C(*(int *)(v3 + 68));
  sub_21290();
}

void sub_205E8()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_1EC14();
  int v7 = sub_16880(v5, 1LL, v6);
  int v8 = sub_212FC(v3);
  if (v7)
  {
    if (!v8)
    {
      sub_2134C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_21250(v5);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    sub_16D0C(v5, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    sub_2135C(v10);
    goto LABEL_7;
  }

  sub_2134C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24));
LABEL_7:
  uint64_t v11 = v1[5];
  uint64_t v12 = *(void *)(v5 + v11);
  sub_2146C(v11);
  swift_release(v12);
  sub_214D4(v1[6]);
  sub_214D4(v1[7]);
  sub_214D4(v1[8]);
  sub_214D4(v1[9]);
  sub_214D4(v1[10]);
  sub_214D4(v1[11]);
  sub_214D4(v1[12]);
  sub_214D4(v1[13]);
  uint64_t v13 = v1[14];
  uint64_t v14 = *(void *)(v3 + v13);
  uint64_t v15 = *(void *)(v5 + v13);
  *(void *)(v5 + v1sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = v1[15];
  uint64_t v17 = *(void *)(v5 + v16);
  sub_2146C(v16);
  swift_release(v17);
  uint64_t v18 = v1[16];
  uint64_t v19 = v5 + v18;
  uint64_t v20 = v3 + v18;
  int v21 = sub_16880(v5 + v18, 1LL, v6);
  int v22 = sub_212FC(v20);
  if (!v21)
  {
    uint64_t v23 = *(void *)(v6 - 8);
    if (!v22)
    {
      sub_2132C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 24));
      goto LABEL_13;
    }

    sub_16D0C(v19, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    goto LABEL_12;
  }

  if (v22)
  {
LABEL_12:
    uint64_t v24 = sub_26B0(&qword_D3A08);
    sub_21370(v24);
    goto LABEL_13;
  }

  sub_2132C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
  sub_21250(v19);
LABEL_13:
  uint64_t v25 = v1[17];
  uint64_t v26 = *(void *)(v5 + v25);
  sub_2146C(v25);
  swift_release(v26);
  sub_21290();
}

void sub_20798(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1EC14();
  if (sub_212FC(a2))
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    sub_2135C(v7);
  }

  else
  {
    sub_2134C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_21250(a1);
  }

  uint64_t v8 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v9 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  uint64_t v10 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  uint64_t v11 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v1sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  uint64_t v14 = a1 + v13;
  if (sub_212FC(a2 + v13))
  {
    uint64_t v15 = sub_26B0(&qword_D3A08);
    sub_21370(v15);
  }

  else
  {
    sub_2132C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_21250(v14);
  }

  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  sub_214A4();
}

void sub_208B8()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_1EC14();
  int v7 = sub_16880(v5, 1LL, v6);
  int v8 = sub_212FC(v3);
  if (v7)
  {
    if (!v8)
    {
      sub_2134C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
      sub_21250(v5);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    sub_16D0C(v5, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    sub_2135C(v10);
    goto LABEL_7;
  }

  sub_2134C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 40));
LABEL_7:
  sub_21478(v1[5]);
  sub_214B4(v1[6]);
  sub_214B4(v1[8]);
  sub_214B4(v1[10]);
  sub_214B4(v1[12]);
  uint64_t v11 = v1[14];
  uint64_t v12 = *(void *)(v5 + v11);
  *(void *)(v5 + v1sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = *(void *)(v3 + v11);
  swift_bridgeObjectRelease(v12);
  sub_21478(v1[15]);
  uint64_t v13 = v1[16];
  uint64_t v14 = v5 + v13;
  uint64_t v15 = v3 + v13;
  int v16 = sub_16880(v5 + v13, 1LL, v6);
  int v17 = sub_212FC(v15);
  if (!v16)
  {
    uint64_t v18 = *(void *)(v6 - 8);
    if (!v17)
    {
      sub_2132C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 40));
      goto LABEL_13;
    }

    sub_16D0C(v14, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
    goto LABEL_12;
  }

  if (v17)
  {
LABEL_12:
    uint64_t v19 = sub_26B0(&qword_D3A08);
    sub_21370(v19);
    goto LABEL_13;
  }

  sub_2132C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
  sub_21250(v14);
LABEL_13:
  sub_21478(v1[17]);
  sub_21290();
}

uint64_t sub_20A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_20A28);
}

void sub_20A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_214FC(a1, a2, v4);
  }
  else {
    sub_1D738();
  }
}

uint64_t sub_20A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_20AA4);
}

void sub_20AA8()
{
  uint64_t v4 = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == v3)
  {
    sub_21514(v1, v0, v0, v4);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + 56)) = (v0 - 1);
    sub_1D738();
  }

void sub_20B04(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    v5[2] = &unk_A4BE8;
    void v5[3] = &unk_A4BE8;
    v5[4] = &unk_A4BE8;
    v5[5] = &unk_A4BE8;
    v5[6] = &unk_A4BE8;
    v5[7] = &unk_A4BE8;
    v5[8] = &unk_A4BE8;
    v5[9] = &unk_A4BE8;
    v5[0] = v4;
    v5[1] = "\b";
    v5[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[11] = "\b";
    v5[12] = v4;
    v5[13] = "\b";
    swift_initStructMetadata(a1, 256LL, 14LL, v5, a1 + 16);
  }

void sub_20BA0()
{
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = sub_2159C();
  }

  else
  {
    uint64_t v4 = v2;
    *(_DWORD *)uint64_t v0 = *(_DWORD *)v1;
    *(_BYTE *)(v0 + 4) = *(_BYTE *)(v1 + 4);
    *(_WORD *)(v0 + 5) = *(_WORD *)(v1 + 5);
    uint64_t v5 = sub_1EC14();
    if (sub_21408())
    {
      uint64_t v6 = sub_26B0(&qword_D3A08);
      sub_21384(v6);
    }

    else
    {
      sub_2133C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
      sub_21398();
    }

    uint64_t v8 = *(int *)(v4 + 48);
    uint64_t v7 = *(void *)(v1 + v8);
    *(void *)(v0 + v8) = v7;
  }

  swift_retain(v7);
  sub_214A4();
}

uint64_t sub_20C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = sub_1EC14();
  return sub_21508(*(void *)(a1 + *(int *)(a2 + 48)));
}

void sub_20C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  uint64_t v4 = sub_1EC14();
  if (sub_21408())
  {
    uint64_t v5 = sub_26B0(&qword_D3A08);
    sub_21384(v5);
  }

  else
  {
    sub_2133C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL));
    sub_21398();
  }

  sub_2146C(*(int *)(a3 + 48));
  sub_214A4();
}

void sub_20D1C()
{
  uint64_t v5 = sub_212A4(v3, v4);
  int v6 = sub_16880(v2, 1LL, v5);
  int v7 = sub_21408();
  if (!v6)
  {
    uint64_t v8 = *(void *)(v5 - 8);
    if (!v7)
    {
      sub_2133C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24));
      goto LABEL_7;
    }

    sub_215D4(v8);
    goto LABEL_6;
  }

  if (v7)
  {
LABEL_6:
    uint64_t v9 = sub_26B0(&qword_D3A08);
    sub_21384(v9);
    goto LABEL_7;
  }

  sub_2133C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
  sub_21398();
LABEL_7:
  uint64_t v10 = *(int *)(v1 + 48);
  uint64_t v11 = *(void *)(v0 + v10);
  sub_2146C(v10);
  swift_release(v11);
  sub_21290();
}

void sub_20DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  uint64_t v6 = sub_1EC14();
  if (sub_21408())
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    sub_21384(v7);
  }

  else
  {
    sub_2133C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_21398();
  }

  *(void *)(a1 + *(int *)(a3 + 48)) = *(void *)(a2 + *(int *)(a3 + 48));
  sub_214A4();
}

void sub_20E44()
{
  uint64_t v4 = sub_212A4(v2, v3);
  int v5 = sub_16880(v1, 1LL, v4);
  int v6 = sub_21408();
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      sub_2133C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 40));
      goto LABEL_7;
    }

    sub_215D4(v7);
    goto LABEL_6;
  }

  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_26B0(&qword_D3A08);
    sub_21384(v8);
    goto LABEL_7;
  }

  sub_2133C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL));
  sub_21398();
LABEL_7:
  sub_21478(*(int *)(v0 + 48));
  sub_21290();
}

uint64_t sub_20ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_20EDC);
}

void sub_20EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    sub_214FC(a1 + *(int *)(a3 + 44), a2, v6);
  }
  else {
    sub_1D738();
  }
}

uint64_t sub_20F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_20F68);
}

void sub_20F6C()
{
  uint64_t v4 = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == v3)
  {
    sub_21514(v1 + *(int *)(v2 + 44), v0, v0, v4);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + 48)) = v0;
    sub_1D738();
  }

void sub_20FCC(uint64_t a1)
{
  v4[0] = &unk_A4BE8;
  v4[1] = &unk_A4BE8;
  v4[2] = &unk_A4BE8;
  v4[3] = &unk_A4BE8;
  void v4[4] = &unk_A4BE8;
  v4[5] = &unk_A4BE8;
  v4[6] = &unk_A4BE8;
  sub_1E9D8(319LL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(void *)(v2 - 8) + 64LL;
    v4[8] = "\b";
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
  }

uint64_t sub_21054( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, __int16 a10, char a11, __int16 a12, char a13, __int16 a14, char a15, __int16 a16, char a17)
{
  *(void *)(v17 + v20[5]) = 0LL;
  *(_BYTE *)(v17 + v20[6]) = v21;
  *(_BYTE *)(v17 + v20[7]) = v19;
  *(_BYTE *)(v17 + v20[8]) = v22;
  *(_BYTE *)(v17 + v20[9]) = a9;
  *(_BYTE *)(v17 + v20[10]) = a11;
  *(_BYTE *)(v17 + v20[11]) = a13;
  *(_BYTE *)(v17 + v20[12]) = a15;
  *(_BYTE *)(v17 + v20[13]) = a17;
  *(void *)(v17 + v20[14]) = v18;
  *(void *)(v17 + v20[15]) = 0LL;
  *(void *)(v17 + v20[17]) = 0LL;
  return swift_bridgeObjectRetain(v18);
}

uint64_t sub_2110C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13, __int16 a14, char a15)
{
  *(void *)(v15 + v19[5]) = 0LL;
  *(_BYTE *)(v15 + v19[6]) = v22;
  *(_BYTE *)(v15 + v19[7]) = v21;
  *(_BYTE *)(v15 + v19[8]) = v16;
  *(_BYTE *)(v15 + v19[9]) = v20;
  *(_BYTE *)(v15 + v19[10]) = v18;
  *(_BYTE *)(v15 + v19[11]) = a11;
  *(_BYTE *)(v15 + v19[12]) = a13;
  *(_BYTE *)(v15 + v19[13]) = a15;
  *(void *)(v15 + v19[14]) = v17;
  *(void *)(v15 + v19[15]) = 0LL;
  *(void *)(v15 + v19[17]) = 0LL;
  return swift_bridgeObjectRetain(v17);
}

uint64_t sub_211B8()
{
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[6];
  uint64_t v5 = *(void *)(v1 + v3);
  *(void *)(v0 + vsub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = v5;
  *(_BYTE *)(v0 + v4) = *(_BYTE *)(v1 + v4);
  uint64_t v6 = v2[8];
  *(_BYTE *)(v0 + v2[7]) = *(_BYTE *)(v1 + v2[7]);
  *(_BYTE *)(v0 + v6) = *(_BYTE *)(v1 + v6);
  uint64_t v7 = v2[10];
  *(_BYTE *)(v0 + v2[9]) = *(_BYTE *)(v1 + v2[9]);
  *(_BYTE *)(v0 + v_s20HandleIntentStrategyVwxx_1(v0 + 7) = *(_BYTE *)(v1 + v7);
  uint64_t v8 = v2[12];
  *(_BYTE *)(v0 + v2[11]) = *(_BYTE *)(v1 + v2[11]);
  *(_BYTE *)(v0 + v8) = *(_BYTE *)(v1 + v8);
  uint64_t v9 = v2[14];
  *(_BYTE *)(v0 + v2[13]) = *(_BYTE *)(v1 + v2[13]);
  *(void *)(v0 + v9) = *(void *)(v1 + v9);
  *(void *)(v0 + v2[15]) = *(void *)(v1 + v2[15]);
  return swift_retain(v5);
}

uint64_t sub_21234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_21250(uint64_t a1)
{
  return sub_A40C(a1, 0LL, 1LL, v1);
}

uint64_t sub_21260(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_2126C()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 72) = v0;
  return swift_task_dealloc(v5);
}

  ;
}

uint64_t sub_212A4(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return type metadata accessor for SpeakableString(0LL);
}

uint64_t sub_212FC(uint64_t a1)
{
  return sub_16880(a1, 1LL, v1);
}

uint64_t sub_21308(char a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  v7[94] = a7;
  v7[93] = a6;
  v7[92] = a5;
  v7[91] = a4;
  v7[90] = a3;
  v7[89] = a2;
  v7[88] = a1;
  return 0LL;
}

uint64_t sub_2132C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v3, v1);
}

uint64_t sub_2133C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2, v3);
}

uint64_t sub_2134C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2, v3);
}

void *sub_2135C(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

void *sub_21370(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

void *sub_21384(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

uint64_t sub_21398()
{
  return sub_A40C(v0, 0LL, 1LL, v1);
}

uint64_t sub_213AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t (*a11)(_BYTE *))
{
  *uint64_t v11 = v12;
  v11[1] = v16;
  v11[2] = v15;
  v11[3] = v19;
  v11[4] = v18;
  v11[5] = v17;
  v11[6] = a10;
  *(void *)&v11[*(int *)(v14 + 48)] = 0LL;
  return a11(v11);
}

uint64_t sub_213FC()
{
  return swift_task_switch();
}

uint64_t sub_21408()
{
  return sub_16880(v0, 1LL, v1);
}

uint64_t sub_21418@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

void sub_2142C(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_21434(char a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8)
{
  __int128 v11 = *(_OWORD *)(v10 + 16);
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(void *)(v9 + 40) = v8;
  *(_OWORD *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 10sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = a8;
  *(_BYTE *)(v9 + 102) = a7;
  *(_BYTE *)(v9 + 10sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = a6;
  *(_BYTE *)(v9 + 100) = a5;
  *(_BYTE *)(v9 + 99) = a4;
  *(_BYTE *)(v9 + 98) = a3;
  *(_BYTE *)(v9 + 9_s20HandleIntentStrategyVwxx_1(v0 + 7) = a2;
  *(_BYTE *)(v9 + 96) = a1;
  return 0LL;
}

uint64_t sub_2146C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v2 + a1);
  *(void *)(v1 + asub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v3;
  return swift_retain(v3);
}

uint64_t sub_21478@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + a1);
  *(void *)(v1 + asub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = *(void *)(v2 + a1);
  return swift_release(v3);
}

uint64_t sub_21488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

  ;
}

void sub_214B4(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + asub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = *(_BYTE *)(v3 + a1);
  *(_BYTE *)(v2 + sub_53D18(v0, v1) = *(_BYTE *)(v3 + v1);
}

  ;
}

void sub_214D4(uint64_t a1@<X8>)
{
  *(_BYTE *)(v1 + asub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = *(_BYTE *)(v2 + a1);
}

  ;
}

unint64_t sub_214EC(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

uint64_t sub_214FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_16880(a1, a2, a3);
}

uint64_t sub_21508(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_21514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_A40C(a1, a2, a3, a4);
}

uint64_t sub_21520()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_21530()
{
  return swift_task_switch();
}

uint64_t sub_2153C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_21550()
{
  return swift_release(*(void *)(v0 + v3));
}

void sub_21574()
{
}

uint64_t sub_21588@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_2159C()
{
  uint64_t result = *v1;
  *uint64_t v0 = *v1;
  return result;
}

uint64_t sub_215B8(uint64_t a1)
{
  return sub_16880(a1, 1LL, v1);
}

uint64_t sub_215D4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

  ;
}

  ;
}

uint64_t sub_21608()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_21610()
{
  return swift_retain(v0);
}

uint64_t sub_21618(uint64_t a1)
{
  return sub_16880(a1, 1LL, v1);
}

  ;
}

uint64_t sub_21638()
{
  return type metadata accessor for SirikitApp(0LL);
}

  ;
}

uint64_t sub_21654(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

  ;
}

uint64_t sub_21674( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t))
{
  return a12(v12);
}

uint64_t sub_21680()
{
  return swift_release(*(void *)(v0 + v1));
}

uint64_t sub_2168C()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_21698()
{
  return swift_release(*(void *)(v0 + v1));
}

uint64_t sub_216A4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D4020);
  sub_26F0(v0, (uint64_t)qword_D4020);
  return static SiriTimeLog.alarmFlow.getter();
}

void sub_216EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TemplatingText(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_26B0(&qword_D40E8);
  __chkstk_darwin(v9);
  __int128 v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v42 = a1;
    }
    else {
      uint64_t v42 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    _CocoaArrayWrapper.endIndex.getter(v42);
    sub_22738();
    if (!v42) {
      goto LABEL_9;
    }
  }

  else if (!*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL)))
  {
    goto LABEL_9;
  }

  id v12 = (id)(a1 & 0xC000000000000001LL);
  sub_44080(0LL, (a1 & 0xC000000000000001LL) == 0, a1);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    swift_bridgeObjectRetain(a1);
    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    sub_22738();
  }

  else
  {
    id v12 = *(id *)(a1 + 32);
  }

  uint64_t v13 = objc_opt_self(&OBJC_CLASS___SAAlarmSnippet);
  uint64_t v14 = swift_dynamicCastObjCClass(v12, v13);
  if (v14)
  {
    char v15 = (void *)v14;
    uint64_t v16 = TemplatingResult.sections.getter();
    sub_38F88(v16, (uint64_t)v11);
    sub_16C48();
    uint64_t v17 = type metadata accessor for TemplatingSection(0LL);
    if (sub_16880((uint64_t)v11, 1LL, v17) == 1)
    {
      sub_226B0((uint64_t)v11);
      uint64_t v18 = 0x80000000000A82D0LL;
      uint64_t v19 = 0xD000000000000013LL;
    }

    else
    {
      TemplatingSection.content.getter();
      uint64_t v31 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v11, v17);
      uint64_t v19 = TemplatingText.text.getter(v31);
      uint64_t v18 = v32;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

    uint64_t v33 = (void *)sub_21ED4(v15, v19, v18, a3);
    swift_bridgeObjectRelease(v18);
    uint64_t v34 = sub_26B0(&qword_D40F0);
    uint64_t inited = swift_initStackObject(v34, v47);
    *(_OWORD *)(inited + 16) = xmmword_A4880;
    strcpy((char *)(inited + 32), "ClientFlowView");
    *(_BYTE *)(inited + 4_s20HandleIntentStrategyVwxx_1(v0 + 7) = -18;
    id v36 = [v33 dictionary];
    if (v36)
    {
      id v37 = v36;
      uint64_t v46 = sub_5E78(0LL, &qword_D40F8, &OBJC_CLASS___NSMutableDictionary_ptr);
      *(void *)&__int128 v45 = v37;
      sub_74A4(&v45, (_OWORD *)(inited + 48));
    }

    else
    {
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = 7104878LL;
      *(void *)(inited + 56) = 0xE300000000000000LL;
    }

    uint64_t v38 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    id v39 = [(id)objc_opt_self(AFAnalytics) sharedAnalytics];
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v41 = sub_21B14(v38);
      sub_16F40();
      sub_22630(3700LL, v41, v40);
    }

    else
    {

      sub_16F40();
    }

    return;
  }

LABEL_9:
  if (qword_D2FA8 != -1) {
    swift_once(&qword_D2FA8, sub_216A4);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_26F0(v20, (uint64_t)qword_D4020);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v21, v22, v23, v24, v25, v26, v27, v28);
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl(&dword_0, v44, v29, "Snippet did not contain an alarm snippet.", v30, 2u);
    swift_slowDealloc(v30, -1LL, -1LL);
  }
}

uint64_t sub_21B14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_26B0(&qword_D4100);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v11 = v10 | (v9 << 6);
  while (1)
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_3F2C(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v41);
    *(void *)&__int128 v40 = v18;
    *((void *)&v40 + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v17;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v18;
    *((void *)&v38[0] + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v17;
    swift_bridgeObjectRetain(v17);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_74A4(v39, v33);
    __int128 v34 = v30;
    __int128 v35 = v31;
    uint64_t v36 = v32;
    sub_74A4(v33, v37);
    __int128 v30 = v34;
    __int128 v31 = v35;
    uint64_t v32 = v36;
    sub_74A4(v37, v38);
    sub_74A4(v38, &v34);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v19 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)&v7[8 * (v20 >> 6)]) == 0)
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0LL;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v7[8 * v21];
        if (v26 != -1)
        {
          unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    unint64_t v22 = __clz(__rbit64((-1LL << v20) & ~*(void *)&v7[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)&v7[(v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v22;
    uint64_t v27 = v3[6] + 40 * v22;
    *(_OWORD *)uint64_t v27 = v30;
    *(_OWORD *)(v27 + 16) = v31;
    *(void *)(v27 + 32) = v32;
    uint64_t result = (uint64_t)sub_74A4(&v34, (_OWORD *)(v3[7] + 32 * v22));
    ++v3[2];
    if (v6) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      goto LABEL_38;
    }
    if (v12 >= v28) {
      goto LABEL_36;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v12);
    int64_t v14 = v9 + 1;
    if (!v13)
    {
      int64_t v14 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v29 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v9 + 3;
        if (v9 + 3 >= v28) {
          goto LABEL_36;
        }
        unint64_t v13 = *(void *)(v29 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 4;
          if (v9 + 4 >= v28) {
            goto LABEL_36;
          }
          unint64_t v13 = *(void *)(v29 + 8 * v14);
          if (!v13) {
            break;
          }
        }
      }
    }

uint64_t sub_21ED4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = sub_17500(objc_allocWithZone(&OBJC_CLASS___SAUIAddViews));
  id v9 = sub_17500(objc_allocWithZone(&OBJC_CLASS___SADialog));
  id v10 = sub_17500(objc_allocWithZone(&OBJC_CLASS___SADialogText));
  sub_223F8(a2, a3, v10);
  [v9 setContent:v10];
  id v11 = sub_17500(objc_allocWithZone(&OBJC_CLASS___SAAlarmSnippet));
  uint64_t v12 = sub_2257C(a1, (SEL *)&selRef_title);
  if (v13)
  {
    uint64_t v14 = v13;
    Class isa = String._bridgeToObjectiveC()();
    uint64_t v12 = swift_bridgeObjectRelease(v14);
  }

  else
  {
    Class isa = 0LL;
  }

  sub_226F8(v12, "setTitle:");

  id v16 = v11;
  sub_2257C(a1, (SEL *)&selRef_speakableText);
  if (v17)
  {
    Class isa = v17;
    NSString v18 = String._bridgeToObjectiveC()();
    sub_16F40();
  }

  else
  {
    NSString v18 = 0LL;
  }

  [v16 setSpeakableText:v18];

  [v16 setDialog:v9];
  sub_224C4( (uint64_t)_swiftEmptyArrayStorage,  v16,  &qword_D40E0,  &OBJC_CLASS___SAAlarmObject_ptr,  (SEL *)&selRef_setAlarms_);
  unint64_t v19 = sub_2243C(a1);
  if (!v19)
  {
LABEL_35:
    id v50 = v16;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
    sub_22724();
    if (v44) {
      sub_22704(v51);
    }
    uint64_t v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(isa, v50);
    specialized Array._endMutation()(v52, v53, v54, v55);
    sub_224C4( (uint64_t)_swiftEmptyArrayStorage,  v8,  (unint64_t *)&qword_D38A8,  &OBJC_CLASS___SAAceView_ptr,  (SEL *)&selRef_setViews_);
    uint64_t v56 = DialogPhase.aceValue.getter();
    sub_22530(v56, v57, v8);

    return (uint64_t)v8;
  }

  uint64_t v20 = v19;
  uint64_t v21 = v19 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v60 = a4;
  id v61 = v8;
  id v58 = v10;
  id v59 = v9;
  if (!(v19 >> 62))
  {
    uint64_t v22 = *(void *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFFF8LL));
    if (v22) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

LABEL_30:
  if (v20 >= 0) {
    uint64_t v49 = v21;
  }
  else {
    uint64_t v49 = v20;
  }
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v49);
  if (!v22)
  {
LABEL_34:
    swift_bridgeObjectRelease(v20);
    id v8 = v61;
    id v10 = v58;
    id v9 = v59;
    goto LABEL_35;
  }

  sub_AAEC();
}

  __break(1u);
  return result;
}

LABEL_10:
  uint64_t v23 = 4LL;
  while (1)
  {
    if ((v20 & 0xC000000000000001LL) != 0) {
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 4, v20);
    }
    else {
      id v24 = *(id *)(v20 + 8 * v23);
    }
    BOOL v25 = v24;
    uint64_t v26 = v23 - 3;
    if (__OFADD__(v23 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    id v27 = [objc_allocWithZone(SAAlarmObject) init];
    id v28 = sub_2271C((uint64_t)v27, "hour");
    sub_226F8((uint64_t)v28, "setHour:");

    id v30 = sub_2271C(v29, "minute");
    sub_226F8((uint64_t)v30, "setMinute:");

    uint64_t v31 = sub_2257C(v25, (SEL *)&selRef_label);
    if (v32)
    {
      String._bridgeToObjectiveC()();
      uint64_t v31 = sub_22744();
    }

    else
    {
      id v30 = 0LL;
    }

    sub_226F8(v31, "setLabel:");

    id v34 = sub_2271C(v33, "enabled");
    sub_226F8((uint64_t)v34, "setEnabled:");

    uint64_t v35 = sub_225D8(v25);
    if (v35)
    {
      Array._bridgeToObjectiveC()();
      uint64_t v35 = sub_22744();
    }

    else
    {
      id v34 = 0LL;
    }

    sub_226F8(v35, "setFrequency:");

    id v37 = sub_2271C(v36, "relativeOffsetMinutes");
    sub_226F8((uint64_t)v37, "setRelativeOffsetMinutes:");

    id v39 = sub_2271C(v38, "firing");
    sub_226F8((uint64_t)v39, "setFiring:");

    id v40 = [v27 dataSourceInfo];
    sub_226F8((uint64_t)v40, "setDataSourceInfo:");

    id v41 = v27;
    uint64_t result = sub_2243C(v16);
    uint64_t v62 = result;
    if (!result) {
      break;
    }
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(result);
    sub_22724();
    if (v44) {
      sub_22704(v43);
    }
    uint64_t v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v41);
    specialized Array._endMutation()(v45, v46, v47, v48);
    if (v62)
    {
      sub_5E78(0LL, &qword_D40E0, &OBJC_CLASS___SAAlarmObject_ptr);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      sub_16C48();
    }

    else
    {
      Class isa = 0LL;
    }

    objc_msgSend(v16, "setAlarms:", isa, v58, v59, v60, v61);

    ++v23;
    if (v26 == v22) {
      goto LABEL_34;
    }
  }

  __break(1u);
  return result;
}

  sub_202D8((uint64_t)v37, &qword_D6848);
  sub_16CB0();
}

  sub_827F8();
  return 0LL;
}

  swift_bridgeObjectRelease(a1);
}

uint64_t sub_223C8()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for AlarmAnalyticsServiceImpl()
{
  return objc_opt_self(&OBJC_CLASS____TtC15AlarmFlowPlugin25AlarmAnalyticsServiceImpl);
}

void sub_223F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setText:v4];
}

uint64_t sub_2243C(void *a1)
{
  id v1 = [a1 alarms];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_5E78(0LL, &qword_D40E0, &OBJC_CLASS___SAAlarmObject_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

void sub_224A8(uint64_t a1, void *a2)
{
}

void sub_224C4(uint64_t a1, void *a2, unint64_t *a3, void *a4, SEL *a5)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_16F40();
  objc_msgSend(a2, *a5, isa);
}

void sub_22530(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  sub_16C48();
  [a3 setDialogPhase:v4];
}

uint64_t sub_2257C(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_225D8(void *a1)
{
  id v1 = [a1 frequency];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, (char *)&type metadata for Any + 8);

  return v3;
}

void sub_22630(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  [a3 logEventWithType:a1 context:isa];
}

uint64_t sub_226B0(uint64_t a1)
{
  uint64_t v2 = sub_26B0(&qword_D40E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_226F0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

id sub_226F8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_22704@<X0>(unint64_t a1@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1 + 1, 1LL);
}

id sub_2271C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

  ;
}

uint64_t sub_22738()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_22744()
{
  return swift_bridgeObjectRelease(v0);
}

id sub_22750(void *a1)
{
  uint64_t v3 = v1;
  sub_26B0(&qword_D37E0);
  sub_215E4();
  __chkstk_darwin(v5);
  sub_17390();
  uint64_t v8 = v7 - v6;
  sub_26B0(&qword_D37E8);
  sub_215E4();
  __chkstk_darwin(v9);
  sub_22FFC();
  uint64_t v10 = sub_2303C();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_17390();
  uint64_t v14 = v13 - v12;
  id v15 = [objc_allocWithZone(v3) init];
  type metadata accessor for Calendar(0LL);
  sub_23044(v2, 1LL);
  uint64_t v16 = type metadata accessor for TimeZone(0LL);
  sub_23050(v8, v17, v18, v16);
  id v19 = v15;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v2,  v8,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  DateComponents.hour.setter(*a1, 0LL);
  uint64_t v20 = DateComponents.minute.setter(a1[1], 0LL);
  static Calendar.current.getter(v20);
  sub_23044(v2, 0LL);
  DateComponents.calendar.setter(v2);
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  [v19 setTime:isa];

  uint64_t v22 = a1[2];
  uint64_t v23 = a1[3];
  swift_bridgeObjectRetain(v23);
  sub_22F50(v22, v23, v19);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a1[4];
  uint64_t v43 = v24;
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v42 = v11;
    uint64_t v26 = v10;
    id v27 = (uint64_t *)(v24 + 32);
    swift_bridgeObjectRetain(v24);
    do
    {
      uint64_t v28 = *v27++;
      uint64_t v29 = RepeatSchedule.init(rawValue:)(v28);
      if ((v30 & 1) == 0)
      {
        uint64_t v31 = v29;
        uint64_t v32 = type metadata accessor for AlarmRepeatSchedule(0LL);
        id v33 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v32));
        id v34 = sub_1D5F8(0LL, 0LL, 0LL, 0xE000000000000000LL);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()([v34 setRepeatSchedule:v31]);
        unint64_t v36 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v35 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        if (v36 >= v35 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1LL);
        }
        uint64_t v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
        specialized Array._endMutation()(v37, v38, v39, v40);
      }

      --v25;
    }

    while (v25);
    uint64_t v10 = v26;
    uint64_t v11 = v42;
  }

  else
  {
    swift_bridgeObjectRetain(v24);
  }

  swift_bridgeObjectRelease(v23);
  sub_22F94(&v43);
  sub_22F94(&v43);
  sub_22EF0((uint64_t)&_swiftEmptyArrayStorage, v19);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  return v19;
}

id sub_22A7C()
{
  uint64_t v2 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_22FFC();
  sub_26B0((uint64_t *)&unk_D7A70);
  sub_215E4();
  __chkstk_darwin(v4);
  sub_17390();
  uint64_t v7 = v6 - v5;
  sub_26B0(&qword_D37D8);
  sub_215E4();
  __chkstk_darwin(v8);
  id v9 = [sub_22FC8() init];
  sub_705F8(v7);
  if (sub_16880(v7, 1LL, v2))
  {
    sub_22EB0(v7);
    uint64_t v10 = 0LL;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v7, v2);
    uint64_t v11 = sub_22EB0(v7);
    uint64_t v10 = TerminalElement.DateTimeValue.toDateTimeWithMeridiemSetByUser()(v11);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }

  uint64_t v12 = static DateTimeInferenceUtils.inferDateTime(from:anchorDate:)(v10, 0LL);
  swift_release(v10);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    DateTime.dateComponentsIn24HourClock(shouldUseInferredMeridiem:)(1LL);
    swift_release(v12);
    uint64_t v14 = sub_2303C();
    uint64_t v15 = sub_23014(v14);
    if (!v16)
    {
      uint64_t v13 = (void *)v0;
      DateComponents._bridgeToObjectiveC()();
      uint64_t v15 = sub_22FE4();
    }
  }

  else
  {
    uint64_t v17 = sub_2303C();
    uint64_t v15 = sub_23050(v0, v18, v19, v17);
    uint64_t v13 = 0LL;
  }

  sub_22FBC(v15, "setTime:");

  uint64_t v20 = sub_703B0();
  NSString v22 = v21;
  if (v21)
  {
    object = String.labelCapitalization()()._object;
    swift_bridgeObjectRelease(v22);
    NSString v22 = String._bridgeToObjectiveC()();
    uint64_t v20 = swift_bridgeObjectRelease(object);
  }

  sub_22FBC(v20, "setLabel:");

  sub_7388C();
  sub_22EF0(v24, v9);

  sub_16FD8();
  return v9;
}

void sub_22C80(uint64_t a1)
{
}

void sub_22C94(uint64_t a1)
{
}

void sub_22CA8(uint64_t a1, uint64_t (*a2)(void), SEL *a3)
{
  id v7 = [objc_allocWithZone(v3) init];
  sub_738C8();
  id v9 = v8;
  [v7 setAlarmSearch:v8];

  objc_msgSend(v7, *a3, a2());
  swift_release(a1);
  sub_214A4();
}

void *sub_22D38()
{
  id v2 = [objc_allocWithZone(v0) init];
  sub_2305C();
  uint64_t v4 = (void *)v3;
  sub_22FBC(v3, "setAlarmSearch:");

  sub_16FD8();
  return v1;
}

void sub_22D98(void *a1)
{
  id v5 = [sub_22FC8() init];
  sub_2305C();
  id v7 = (void *)v6;
  sub_22FBC(v6, "setAlarmSearch:");

  uint64_t v8 = a1;
  [v1 setOperation:sub_743A4()];
  sub_72EC8();
  uint64_t v9 = sub_2303C();
  uint64_t v10 = sub_23014(v9);
  if (!v11)
  {
    uint64_t v8 = v2;
    DateComponents._bridgeToObjectiveC()();
    uint64_t v10 = sub_22FE4();
  }

  sub_22FBC(v10, "setProposedTime:");

  uint64_t v12 = sub_70490();
  if (v13)
  {
    uint64_t v14 = v13;
    NSString v15 = String._bridgeToObjectiveC()();
    uint64_t v12 = swift_bridgeObjectRelease(v14);
  }

  else
  {
    NSString v15 = 0LL;
  }

  sub_22FBC(v12, "setProposedLabel:");

  char v16 = (void *)sub_735C4();
  sub_22FBC((uint64_t)v16, "setProposedMeridiemSetByUser:");

  sub_16FD8();
  sub_214A4();
}

uint64_t sub_22EB0(uint64_t a1)
{
  uint64_t v2 = sub_26B0((uint64_t *)&unk_D7A70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_22EF0(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setRepeatSchedule:isa];
}

void sub_22F50(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setLabel:v4];
}

void *sub_22F94(void *a1)
{
  return a1;
}

id sub_22FBC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

id sub_22FC8()
{
  return objc_allocWithZone(v0);
}

uint64_t sub_22FE4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

  ;
}

uint64_t sub_23014(uint64_t a1)
{
  return sub_16880(v1, 1LL, a1);
}

uint64_t sub_2303C()
{
  return type metadata accessor for DateComponents(0LL);
}

uint64_t sub_23044(uint64_t a1, uint64_t a2)
{
  return sub_A40C(a1, a2, 1LL, v2);
}

uint64_t sub_23050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_A40C(a1, 1LL, 1LL, a4);
}

void sub_2305C()
{
}

uint64_t _s20HandleIntentStrategyVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

void *_s20HandleIntentStrategyVwca(void *a1, void *a2)
{
  return a1;
}

uint64_t _s20HandleIntentStrategyVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t _s20HandleIntentStrategyVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t _s20HandleIntentStrategyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s20HandleIntentStrategyVMa()
{
  return &_s20HandleIntentStrategyVN;
}

uint64_t sub_2318C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D4108);
  sub_26F0(v0, (uint64_t)qword_D4108);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_231D4(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_26B0(&qword_D37D0);
  v2[4] = sub_19754(*(void *)(v3 - 8));
  sub_19840();
  return sub_1988C();
}

uint64_t sub_23218()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for HALAlarmDeviceContext(0LL);
  sub_A40C(v1, 1LL, 1LL, v2);
  sub_1511C();
  uint64_t v4 = v3;
  sub_25254(v3, &qword_D37D0);
  sub_19808();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_23294(uint64_t a1, uint64_t a2)
{
  v2[25] = a1;
  v2[26] = a2;
  uint64_t v3 = sub_26B0(&qword_D4170);
  v2[27] = sub_250D0(*(void *)(v3 - 8));
  v2[28] = sub_19884();
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v2[29] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[30] = v5;
  v2[31] = sub_19754(v5);
  uint64_t v6 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v2[32] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[33] = v7;
  v2[34] = sub_19754(v7);
  uint64_t v8 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[35] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[36] = v9;
  v2[37] = sub_250D0(v9);
  v2[38] = sub_19884();
  v2[39] = sub_19884();
  uint64_t v10 = type metadata accessor for DialogPhase(0LL);
  v2[40] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[41] = v11;
  v2[42] = sub_250D0(v11);
  v2[43] = sub_19884();
  v2[44] = sub_19884();
  uint64_t v12 = sub_26B0(&qword_D4178);
  v2[45] = sub_19754(*(void *)(v12 - 8));
  uint64_t v13 = type metadata accessor for SiriAlarmSnippetModel(0LL);
  v2[46] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[47] = v14;
  v2[48] = sub_19754(v14);
  uint64_t v15 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v2[49] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[50] = v16;
  v2[51] = sub_19754(v16);
  uint64_t v17 = type metadata accessor for NLContextUpdate(0LL);
  v2[52] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v2[53] = v18;
  v2[54] = sub_19754(v18);
  sub_19840();
  return sub_1988C();
}

void sub_233DC()
{
  if (qword_D2FB0 != -1) {
    swift_once(&qword_D2FB0, sub_2318C);
  }
  uint64_t v1 = (os_log_s *)sub_26F0(v0[29], (uint64_t)qword_D4108);
  v0[55] = v1;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v1, v2, v3, v4, v5, v6, v7, v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)sub_16AC4(2LL);
    *(_WORD *)uint64_t v11 = 0;
    sub_16B44(&dword_0, v9, v10, "UpdateAlarm.HandleIntentStrategy.makeIntentHandledResponse() called.", v11);
    sub_16AA8((uint64_t)v11);
  }

  uint64_t v12 = sub_26B0(&qword_D4180);
  uint64_t v13 = (void *)IntentResolutionRecord.intentResponse.getter(v12);
  v0[56] = v13;
  uint64_t v14 = (void *)IntentResolutionRecord.intent.getter(v12);
  v0[57] = v14;
  id v15 = [v13 updatedAlarm];
  v0[58] = v15;
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v18 = v0[50];
    uint64_t v17 = v0[51];
    uint64_t v19 = v0[49];
    uint64_t v20 = sub_26B0(&qword_D4188);
    uint64_t inited = swift_initStackObject(v20, v0 + 12);
    *(_OWORD *)(inited + 16) = xmmword_A4CD0;
    *(void *)(inited + 32) = v16;
    v208[0] = inited;
    specialized Array._endMutation()(inited, v22, v23, v24);
    id v25 = v16;
    sub_6044();
    uint64_t v26 = swift_bridgeObjectRelease(v208[0]);
    static SiriTimeFeatureFlagsImpl.instance.getter(v26);
    Swift::Bool v27 = SiriTimeFeatureFlagsImpl.isAlarmSmartEnabled()();
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    if (v27)
    {
      sub_4828C();
      v0[59] = v29;
      if (!v29)
      {
        Logger.logObject.getter(0LL, v30, v31, v32, v33, v34, v35, v36);
        os_log_type_t v117 = sub_17714();
        if (sub_16BA4(v117))
        {
          uint64_t v118 = (uint8_t *)sub_16AC4(2LL);
          *(_WORD *)uint64_t v118 = 0;
          sub_16B44(&dword_0, v1, (os_log_type_t)v1, "Can NOT retrieve alarm data.", v118);
          sub_16AA8((uint64_t)v118);
        }

        sub_26B0(&qword_D4190);
        unint64_t v119 = sub_24EA4();
        uint64_t v120 = sub_25234(v119);
        sub_25220(v120, v121, v122, v123, v124, v125, v126, v127);

LABEL_26:
        uint64_t v128 = v0[54];
        sub_25110();
        v129(v128);
        sub_1978C();
        sub_19794();
        sub_197C0();
        sub_19830();
        sub_19828();
        sub_19820();
        sub_1987C();
        sub_19808();
        uint64_t v130 = sub_19800();
        uint64_t v138 = sub_19964(v130, v131, v132, v133, v134, v135, v136, v137, v179, v184, v189);
        uint64_t v146 = sub_1B64C(v138, v139, v140, v141, v142, v143, v144, v145, v180, v185, v190, v194);
        uint64_t v154 = sub_25044(v146, v147, v148, v149, v150, v151, v152, v153, v181, v186, v191, v195, v198);
        uint64_t v162 = sub_2503C(v154, v155, v156, v157, v158, v159, v160, v161, v182, v187, v192, v196, v199, v201);
        sub_25218(v162, v163, v164, v165, v166, v167, v168, v169, v183, v188, v193, v197, v200, v202, v203);
        sub_24FEC();
        __asm { BR              X0 }
      }

      uint64_t v37 = v29;
      uint64_t v39 = v0[45];
      uint64_t v38 = v0[46];
      sub_489F8();
      if (sub_16880(v39, 1LL, v38) == 1)
      {
        uint64_t v40 = sub_19594(v0[45], &qword_D4178);
        Logger.logObject.getter(v40, v41, v42, v43, v44, v45, v46, v47);
        os_log_type_t v48 = sub_17714();
        if (sub_16BA4(v48))
        {
          uint64_t v49 = (uint8_t *)sub_16AC4(2LL);
          *(_WORD *)uint64_t v49 = 0;
          sub_16B44(&dword_0, v1, (os_log_type_t)v1, "Can NOT retrieve alarm snippet model.", v49);
          sub_16AA8((uint64_t)v49);
        }

        sub_26B0(&qword_D4190);
        unint64_t v50 = sub_24EA4();
        uint64_t v51 = sub_25234(v50);
        sub_25220(v51, v52, v53, v54, v55, v56, v57, v58);

        swift_release(v37);
        goto LABEL_26;
      }

      uint64_t v171 = (*(uint64_t (**)(void, void, void))(v0[47] + 32LL))(v0[48], v0[45], v0[46]);
      if (sub_25298(v171, "operation") == (char *)&dword_0 + 2)
      {
        if (qword_D31B8 != -1) {
          swift_once(&qword_D31B8, sub_8CC8C);
        }
        uint64_t v172 = dword_D56CC;
        swift_retain(v37);
        uint64_t v173 = (void *)swift_task_alloc(v172);
        v0[60] = v173;
        *uint64_t v173 = v0;
        v173[1] = sub_23D90;
        sub_24FEC();
        sub_4EE34(v174, v175);
      }

      else
      {
        if (qword_D31B8 != -1) {
          swift_once(&qword_D31B8, sub_8CC8C);
        }
        uint64_t v176 = dword_D56D4;
        swift_retain(v37);
        uint64_t v177 = (void *)swift_task_alloc(v176);
        v0[64] = v177;
        *uint64_t v177 = v0;
        v177[1] = sub_23FDC;
        sub_24FEC();
        sub_4F080(v178);
      }
    }

    else
    {
      id v205 = v25;
      if (sub_25298(v28, "operation") == (char *)&dword_0 + 2)
      {
        uint64_t v81 = static DialogPhase.completion.getter(2LL, v75, v76, v77, v78, v79, v80);
        sub_2526C(v81, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
        sub_251F0();
        uint64_t v82 = mach_absolute_time();
        sub_2528C(v82, v83, v82);
        if (qword_D31C0 != -1) {
          swift_once(&qword_D31C0, sub_8CCA8);
        }
        uint64_t v84 = v0[26];
        os_log_type_t v85 = (void *)swift_task_alloc(48LL);
        v0[68] = v85;
        v85[2] = v84;
        v85[3] = v205;
        v85[4] = v14;
        uint64_t v86 = (void *)swift_task_alloc(dword_D6204);
        v0[69] = v86;
        *uint64_t v86 = v0;
        v86[1] = sub_24228;
        sub_24FEC();
        sub_6A35C(v87, v88);
      }

      else
      {
        sub_4828C();
        uint64_t v207 = v102;
        v0[74] = v102;
        uint64_t v109 = static DialogPhase.completion.getter(v102, v103, v104, v105, v106, v107, v108);
        sub_2526C(v109, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
        sub_251F0();
        uint64_t v110 = mach_absolute_time();
        sub_2528C(v110, v111, v110);
        if (qword_D31C0 != -1) {
          swift_once(&qword_D31C0, sub_8CCA8);
        }
        uint64_t v112 = v0[26];
        uint64_t v113 = swift_task_alloc(32LL);
        v0[75] = v113;
        *(void *)(v113 + 16) = v112;
        *(void *)(v113 + 24) = v207;
        unint64_t v114 = (void *)swift_task_alloc(dword_D620C);
        v0[76] = v114;
        *unint64_t v114 = v0;
        v114[1] = sub_243C8;
        sub_24FEC();
        sub_6A54C(v115, v116);
      }
    }
  }

  else
  {
    uint64_t v59 = v0[29];
    uint64_t v204 = v0[30];
    uint64_t v60 = v0[27];
    uint64_t v61 = v0[28];
    uint64_t v62 = type metadata accessor for ABCReport(0LL);
    v0[5] = v62;
    v0[6] = &protocol witness table for ABCReport;
    uint64_t v63 = (char *)sub_252A0();
    strcpy(v63, "Update Handled");
    v63[15] = -18;
    uint64_t v64 = enum case for UnhandledAbortSubtype.expectedObject(_:);
    uint64_t v65 = type metadata accessor for UnhandledAbortSubtype(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v65 - 8) + 104LL))(v63, v64, v65);
    (*(void (**)(char *, void, uint64_t))(*(void *)(v62 - 8) + 104LL))( v63,  enum case for ABCReport.unhandledAbort(_:),  v62);
    static BarbaraWalters.stopThePresses(for:)(v0 + 2);
    _s20HandleIntentStrategyVwxx_1(v0 + 2);
    v208[0] = 0LL;
    v208[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(96LL);
    v66._object = (void *)0x80000000000A8300LL;
    v66._uint64_t countAndFlagsBits = 0xD00000000000005ELL;
    String.append(_:)(v66);
    id v68 = sub_25298(v67, "description");
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    uint64_t v71 = v70;

    v72._uint64_t countAndFlagsBits = v69;
    v72._object = v71;
    String.append(_:)(v72);
    swift_bridgeObjectRelease(v71);
    (*(void (**)(uint64_t, os_log_s *, uint64_t))(v204 + 16))(v61, v1, v59);
    sub_A40C(v61, 0LL, 1LL, v59);
    sub_24E48(v61, v60);
    uint64_t v73 = sub_16880(v60, 1LL, v59);
    unint64_t v74 = (os_log_s *)v0[27];
    if ((_DWORD)v73 == 1)
    {
      sub_25254(v73, &qword_D4170);
    }

    else
    {
      uint64_t v89 = swift_bridgeObjectRetain_n(0xE000000000000000LL, 2LL);
      Logger.logObject.getter(v89, v90, v91, v92, v93, v94, v95, v96);
      os_log_type_t v97 = sub_17714();
      if (sub_16BA4(v97))
      {
        uint64_t v98 = sub_16AC4(32LL);
        uint64_t v206 = sub_16AC4(64LL);
        v208[0] = v206;
        *(_DWORD *)uint64_t v98 = 136315650;
        uint64_t v99 = StaticString.description.getter( "/Library/Caches/com.apple.xbs/Sources/SiriTime/AlarmFlowPlugin/Flows/UpdateAlarmFlow/UpdateAlarm+Handled IntentStrategy.swift",  124LL,  2LL);
        unint64_t v101 = v100;
        v0[23] = sub_3D10(v99, v100, v208);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v98 + 4, v98 + 12);
        swift_bridgeObjectRelease(v101);
        *(_WORD *)(v98 + 12) = 2048;
        v0[22] = 41LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v98 + 14, v98 + 22);
        *(_WORD *)(v98 + 22) = 2080;
        swift_bridgeObjectRetain(0xE000000000000000LL);
        v0[24] = sub_3D10(0LL, 0xE000000000000000LL, v208);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v98 + 24, v98 + 32);
        swift_bridgeObjectRelease_n(0xE000000000000000LL, 3LL);
        _os_log_impl(&dword_0, v74, (os_log_type_t)v1, "FatalError at %s:%lu - %s", (uint8_t *)v98, 0x20u);
        swift_arrayDestroy(v206, 2LL);
        sub_16AA8(v206);
        sub_16AA8(v98);
      }

      else
      {

        swift_bridgeObjectRelease_n(0xE000000000000000LL, 2LL);
      }

      (*(void (**)(void, void))(v0[30] + 8LL))(v0[27], v0[29]);
    }

    static SiriKitLifecycle._logCrashToEventBus(_:)(0LL, 0xE000000000000000LL);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "/Library/Caches/com.apple.xbs/Sources/SiriTime/AlarmFlowPlugin/Flows/UpdateAlarmFlow/UpdateAlarm+HandledIntentStrategy.swift",  124LL,  2LL,  41LL,  0);
    sub_24FEC();
  }

uint64_t sub_23D90()
{
  v2[61] = v1;
  swift_task_dealloc(v4);
  swift_release(v2[59]);
  if (!v1) {
    v2[62] = v0;
  }
  sub_19840();
  return sub_19744();
}

uint64_t sub_23DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v37 = v7[55];
  sub_25008(a1, a2, a3, a4, a5, a6, a7);
  v7[20] = type metadata accessor for SiriAlarmSnippetModels(0LL);
  v7[21] = sub_24EE8();
  sub_252A0();
  uint64_t v8 = sub_26B0(&qword_D41A8);
  uint64_t v9 = (__n128 *)sub_25174(v8);
  sub_25190(v9, (__n128)xmmword_A4880);
  uint64_t v10 = sub_252A8();
  uint64_t v11 = sub_25204(v10, enum case for SiriAlarmSnippetModels.alarmMulti(_:));
  uint64_t v18 = sub_2525C( v11,  enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:),  v12,  v13,  v14,  v15,  v16,  v17,  v29,  v31,  v33);
  sub_251DC(v18, v19, v20, v21, v22, v23, v24, v25, v30, v32, v34, v35, v36, v37);
  uint64_t v26 = mach_absolute_time();
  sub_251C8(v26);
  Swift::Bool v27 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  v7[63] = v27;
  *Swift::Bool v27 = v7;
  v27[1] = sub_23EC4;
  sub_2508C();
  return sub_2504C();
}

uint64_t sub_23EC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 328LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 288LL);
  sub_25068(*(void *)(*(void *)v0 + 504LL));
  sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v3 = sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_25254(v3, &qword_D41B0);
  sub_19840();
  return sub_250B8();
}

#error "23FB4: call analysis failed (funcsize=40)"
uint64_t sub_23FDC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  sub_25078();
  sub_1996C(v3);
  v2[65] = v1;
  swift_task_dealloc(v4);
  swift_release(v2[59]);
  if (!v1) {
    v2[66] = v0;
  }
  sub_19840();
  return sub_19744();
}

uint64_t sub_24038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v37 = v7[55];
  sub_25008(a1, a2, a3, a4, a5, a6, a7);
  v7[10] = type metadata accessor for SiriAlarmSnippetModels(0LL);
  v7[11] = sub_24EE8();
  sub_252A0();
  uint64_t v8 = sub_26B0(&qword_D41A8);
  uint64_t v9 = (__n128 *)sub_25174(v8);
  sub_25190(v9, (__n128)xmmword_A4880);
  uint64_t v10 = sub_252A8();
  uint64_t v11 = sub_25204(v10, enum case for SiriAlarmSnippetModels.alarmMulti(_:));
  uint64_t v18 = sub_2525C( v11,  enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:),  v12,  v13,  v14,  v15,  v16,  v17,  v29,  v31,  v33);
  sub_251DC(v18, v19, v20, v21, v22, v23, v24, v25, v30, v32, v34, v35, v36, v37);
  uint64_t v26 = mach_absolute_time();
  sub_251C8(v26);
  Swift::Bool v27 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  v7[67] = v27;
  *Swift::Bool v27 = v7;
  v27[1] = sub_24110;
  sub_2508C();
  return sub_2504C();
}

uint64_t sub_24110()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 328LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 288LL);
  sub_25068(*(void *)(*(void *)v0 + 536LL));
  sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v3 = sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_25254(v3, &qword_D41B0);
  sub_19840();
  return sub_250B8();
}

#error "24200: call analysis failed (funcsize=40)"
uint64_t sub_24228()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v7;
  sub_25078();
  sub_1996C(v4);
  v2[70] = v0;
  v2[71] = v1;
  swift_task_dealloc(v5);
  swift_task_dealloc(v2[68]);
  if (v1)
  {
    sub_19840();
    return sub_19744();
  }

  else
  {
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[72] = v7;
    *uint64_t v7 = v3;
    v7[1] = sub_242B4;
    sub_252B4();
    return sub_25154();
  }

uint64_t sub_242B4()
{
  uint64_t v5 = *v1;
  uint64_t v2 = v5;
  sub_1996C(&v5);
  *(void *)(v2 + 584) = v0;
  swift_task_dealloc(v3);

  sub_19840();
  return sub_251A8();
}

#error "243A0: call analysis failed (funcsize=46)"
uint64_t sub_243C8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v7;
  sub_25078();
  sub_1996C(v4);
  v2[77] = v0;
  v2[78] = v1;
  swift_task_dealloc(v5);
  swift_task_dealloc(v2[75]);
  if (v1)
  {
    sub_19840();
    return sub_19744();
  }

  else
  {
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[79] = v7;
    *uint64_t v7 = v3;
    v7[1] = sub_24454;
    sub_252B4();
    return sub_25154();
  }

uint64_t sub_24454()
{
  uint64_t v5 = *v1;
  uint64_t v2 = v5;
  sub_1996C(&v5);
  *(void *)(v2 + 640) = v0;
  swift_task_dealloc(v3);

  sub_19840();
  return sub_251A8();
}

#error "24534: call analysis failed (funcsize=43)"
#error "245B8: call analysis failed (funcsize=31)"
#error "24634: call analysis failed (funcsize=31)"
#error "246B0: call analysis failed (funcsize=31)"
#error "2472C: call analysis failed (funcsize=31)"
#error "247B0: call analysis failed (funcsize=33)"
#error "24834: call analysis failed (funcsize=33)"
uint64_t sub_24854(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v6 = sub_26B0(&qword_D3A08);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for SirikitApp(0LL);
  uint64_t v9 = sub_26B0(&qword_D4180);
  uint64_t v10 = IntentResolutionRecord.app.getter(v9);
  uint64_t v11 = SirikitApp.init(app:)(v10);
  swift_release(a1[1]);
  a1[1] = v11;
  sub_4828C();
  uint64_t v13 = v12;
  swift_release(*a1);
  *a1 = v13;
  sub_90344(a4);
  if (v15)
  {
    uint64_t v16 = v15;
    String.toSpeakableString.getter(v14);
    swift_bridgeObjectRelease(v16);
    uint64_t v17 = type metadata accessor for SpeakableString(0LL);
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v17 = type metadata accessor for SpeakableString(0LL);
    uint64_t v18 = 1LL;
  }

  sub_A40C((uint64_t)v8, v18, 1LL, v17);
  uint64_t v19 = type metadata accessor for ModifyAlarmIntentHandledRenameParameters(0LL);
  return sub_1B4F0((uint64_t)v8, (uint64_t)a1 + *(int *)(v19 + 24));
}

uint64_t sub_24984(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_26B0(&qword_D4180);
  uint64_t v6 = IntentResolutionRecord.app.getter(v5);
  uint64_t v7 = SirikitApp.init(app:)(v6);
  swift_release(a1[1]);
  a1[1] = v7;
  uint64_t v8 = *a1;
  swift_retain(a3);
  uint64_t result = swift_release(v8);
  *a1 = a3;
  return result;
}

uint64_t sub_249FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_24F28;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_24A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_24F28;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_24AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_24F28;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_24B70(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D416C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24F28;
  return sub_23294(a1, a2);
}

uint64_t sub_24BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_24F28;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_24C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_24F28;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_24CC0(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_D7468 + dword_D7468);
  uint64_t v3 = (void *)swift_task_alloc(unk_D746C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_24D34;
  return v5(a1);
}

uint64_t sub_24D34()
{
  return v0[1]();
}

uint64_t sub_24D70(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D41BC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24DC4;
  return sub_231D4(a1, a2);
}

uint64_t sub_24DC4(uint64_t a1)
{
  return v1[1](a1);
}

unint64_t sub_24E0C()
{
  unint64_t result = qword_D4128[0];
  if (!qword_D4128[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_A4D08, &_s20HandleIntentStrategyVN);
    atomic_store(result, qword_D4128);
  }

  return result;
}

uint64_t sub_24E48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D4170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_24E90(uint64_t *a1)
{
  return sub_24984(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24E98(void *a1)
{
  return sub_24854(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

unint64_t sub_24EA4()
{
  unint64_t result = qword_D4198;
  if (!qword_D4198)
  {
    uint64_t v1 = sub_16974(&qword_D4190);
    unint64_t result = swift_getWitnessTable(&unk_A4A10, v1);
    atomic_store(result, (unint64_t *)&qword_D4198);
  }

  return result;
}

unint64_t sub_24EE8()
{
  unint64_t result = qword_D41A0;
  if (!qword_D41A0)
  {
    uint64_t v1 = type metadata accessor for SiriAlarmSnippetModels(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SiriAlarmSnippetModels, v1);
    atomic_store(result, (unint64_t *)&qword_D41A0);
  }

  return result;
}

uint64_t sub_24F2C()
{
  return (*(uint64_t (**)(void, void))(v0[53] + 8LL))(v0[54], v0[52]);
}

uint64_t sub_24F74(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_24F90@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

  ;
}

uint64_t sub_24FE0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

uint64_t sub_25008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 24) = v7;
  return static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2503C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_task_dealloc(a14);
}

uint64_t sub_25044( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_task_dealloc(a13);
}

uint64_t sub_2504C()
{
  return ((uint64_t (*)(void))DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:))();
}

uint64_t sub_25068(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

void sub_25078()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_2508C()
{
  uint64_t result = *(void *)(v0 + 200);
  *(void *)(v1 + 16) = 0LL;
  return result;
}

uint64_t sub_250B8()
{
  return swift_task_switch();
}

uint64_t sub_250D0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_250E4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_250F0()
{
}

  ;
}

void sub_25138()
{
}

uint64_t sub_25154()
{
  return ((uint64_t (*)(void))PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:))();
}

uint64_t sub_25164()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_25174(uint64_t a1)
{
  return swift_allocObject( a1,  ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
         + *(void *)(v1 + 72),
           *(unsigned __int8 *)(v1 + 80) | 7LL);
}

uint64_t sub_25190(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)a1 + v2, v4, v5);
}

uint64_t sub_251A8()
{
  return swift_task_switch();
}

void sub_251B4()
{
}

uint64_t sub_251C8(uint64_t a1)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, a1);
}

uint64_t sub_251DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a12 + 16))(v14, a14, a13);
}

uint64_t sub_251F0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_25204(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v3, a2, v2);
}

uint64_t sub_25218( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_task_dealloc(a15);
}

uint64_t sub_25220( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 3;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_25234(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

uint64_t sub_25248()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_25254(uint64_t a1, uint64_t *a2)
{
  return sub_19594(v2, a2);
}

uint64_t sub_2525C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a10 + 104))(v11, a2, a11);
}

uint64_t sub_2526C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v3, a2, v4);
}

uint64_t sub_2527C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_2528C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v3, v4, a3);
}

id sub_25298(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void *sub_252A0()
{
  return sub_19558(v0);
}

uint64_t sub_252A8()
{
  return AlarmSnippetModel.init(alarms:)(v0);
}

uint64_t sub_252B4()
{
  return *(void *)(v0 + 200);
}

uint64_t sub_252C8(uint64_t a1)
{
  return sub_252F0(a1, (void (*)(void))type metadata accessor for DismissAlarmCATs_Async, &qword_D8168);
}

uint64_t sub_252DC(uint64_t a1)
{
  return sub_252F0(a1, (void (*)(void))type metadata accessor for StopCATPatternsExecutor, &qword_D8170);
}

uint64_t sub_252F0(uint64_t a1, void (*a2)(void), uint64_t *a3)
{
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2(0LL);
  static CATOption.defaultMode.getter();
  uint64_t result = CATWrapper.__allocating_init(options:globals:)(v6, 0LL);
  *a3 = result;
  return result;
}

uint64_t sub_25374(void *a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ExecutionInfo.Action(0LL);
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  __chkstk_darwin(v3);
  sub_17390();
  uint64_t v27 = v5 - v4;
  uint64_t v30 = _s10descrCB129O20HandleIntentStrategyVMa(0LL);
  __chkstk_darwin(v30);
  sub_17390();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = _s10descrCD1E9O21ConfirmIntentStrategyVMa(0LL);
  __chkstk_darwin(v9);
  sub_17390();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for DismissAlarmHalIntent(0LL);
  uint64_t v14 = type metadata accessor for DismissAlarmHalIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(v13, v14);
  if (qword_D3178 != -1) {
    swift_once(&qword_D3178, sub_82958);
  }
  uint64_t v15 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(qword_D84A8, v13, v14);
  uint64_t v17 = v16;
  uint64_t v18 = sub_26B0(&qword_D7BF0);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v15, v17, v18);
  sub_4698((uint64_t)a1, v12);
  uint64_t v19 = v12 + *(int *)(v9 + 20);
  uint64_t v20 = type metadata accessor for HALAlarmDeviceContext(0LL);
  uint64_t v26 = *(void *)(v20 - 8);
  sub_256AC(v19);
  uint64_t v21 = sub_9570(&qword_D41C0, _s10descrCD1E9O21ConfirmIntentStrategyVMa, (uint64_t)&unk_A71D0);
  uint64_t v22 = static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)( v12,  sub_25618,  0LL,  v9,  v21);
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter(v22);
  sub_4698((uint64_t)a1, v8);
  sub_256AC(v8 + *(int *)(v30 + 20));
  (*(void (**)(uint64_t, void, uint64_t))(v28 + 104))( v27,  enum case for ExecutionInfo.Action.alarmDismiss(_:),  v29);
  SiriTimeCrossDeviceAnalytics.init(action:)(v27);
  uint64_t v23 = sub_9570(&qword_D41C8, _s10descrCB129O20HandleIntentStrategyVMa, (uint64_t)&unk_A48F0);
  uint64_t v24 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v8, v30, v23);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v24);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a2, v20);
  _s20HandleIntentStrategyVwxx_1(a1);
  sub_25670(v8, _s10descrCB129O20HandleIntentStrategyVMa);
  return sub_25670(v12, _s10descrCD1E9O21ConfirmIntentStrategyVMa);
}

BOOL sub_25618()
{
  uint64_t v0 = sub_26B0(&qword_D39F8);
  uint64_t v1 = (void *)IntentResolutionRecord.intentResponse.getter(v0);
  uint64_t v2 = dispatch thunk of DismissAlarmHalIntentResponse.code.getter();

  uint64_t v3 = DismissAlarmHalIntentResponseCode.rawValue.getter(v2);
  return v3 == DismissAlarmHalIntentResponseCode.rawValue.getter(3LL);
}

uint64_t sub_25670(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_256AC(uint64_t a1)
{
  return v3(a1, v1, v2);
}

uint64_t sub_256B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_26B0(&qword_D3788);
  uint64_t v4 = __chkstk_darwin();
  uint64_t v6 = (char *)&v27[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = UsoTask.verbString.getter(v4);
  AlarmNLv4Constants.AlarmVerb.init(rawValue:)(v7);
  uint64_t v8 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  sub_19594((uint64_t)v6, &qword_D3788);
  if (qword_D2FC8 != -1) {
    swift_once(&qword_D2FC8, sub_25BE0);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_26F0(v9, (uint64_t)qword_D41D0);
  uint64_t v10 = swift_retain_n(v1, 2LL);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v10, v11, v12, v13, v14, v15, v16, v17, v26, v27[0], v27[1], v27[2], v27[3]);
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    v27[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v22 = UsoTask.verbString.getter(v21);
    unint64_t v24 = v23;
    uint64_t v26 = sub_3D10(v22, v23, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v20 + 4, v20 + 12);
    sub_16EBC(v2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl(&dword_0, v18, v19, "Unexpected alarm verb: %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1LL);
    sub_16AA8(v21);
    sub_16AA8((uint64_t)v20);
  }

  else
  {

    sub_16EBC(v1);
  }

  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( a1,  enum case for AlarmNLv4Constants.AlarmVerb.unknown(_:),  v8);
}

uint64_t sub_258FC()
{
  uint64_t v1 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static UsoTask_CodegenConverter.convert(task:)(v20, v0);
  sub_256B8((uint64_t)v4);
  int v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == enum case for AlarmNLv4Constants.AlarmVerb.unknown(_:)
    || v5 == enum case for AlarmNLv4Constants.AlarmVerb.checkExistence(_:)
    || v5 == enum case for AlarmNLv4Constants.AlarmVerb.create(_:))
  {
    goto LABEL_9;
  }

  if (v5 == enum case for AlarmNLv4Constants.AlarmVerb.delete(_:))
  {
    sub_25C28();
    if (v19)
    {
      uint64_t uso_NoEntity = type metadata accessor for UsoTask_delete_uso_NoEntity(0LL);
      goto LABEL_14;
    }

    goto LABEL_45;
  }

  if (v5 == enum case for AlarmNLv4Constants.AlarmVerb.disable(_:)
    || v5 == enum case for AlarmNLv4Constants.AlarmVerb.enable(_:))
  {
    goto LABEL_9;
  }

  if (v5 == enum case for AlarmNLv4Constants.AlarmVerb.read(_:))
  {
    sub_25C28();
    if (v19)
    {
      uint64_t uso_NoEntity = type metadata accessor for UsoTask_read_uso_NoEntity(0LL);
      goto LABEL_14;
    }

    goto LABEL_45;
  }

  if (v5 == enum case for AlarmNLv4Constants.AlarmVerb.request(_:)
    || v5 == enum case for AlarmNLv4Constants.AlarmVerb.snooze(_:)
    || v5 == enum case for AlarmNLv4Constants.AlarmVerb.summarise(_:))
  {
    goto LABEL_9;
  }

  if (v5 == enum case for AlarmNLv4Constants.AlarmVerb.update(_:))
  {
    sub_25C28();
    if (v19)
    {
      uint64_t updated = type metadata accessor for UsoTask_update_uso_NoEntity(0LL);
      if ((sub_25C34(updated, (uint64_t)&type metadata for Any) & 1) != 0)
      {
        uint64_t v14 = sub_25C48();
        dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter(v18, v14);
        goto LABEL_16;
      }

      goto LABEL_9;
    }

    goto LABEL_45;
  }

  if (v5 != enum case for AlarmNLv4Constants.AlarmVerb.noVerb(_:))
  {
    if (v5 != enum case for AlarmNLv4Constants.AlarmVerb.close(_:))
    {
      if (v5 == enum case for AlarmNLv4Constants.AlarmVerb.resume(_:))
      {
        sub_25C28();
        if (!v19) {
          goto LABEL_45;
        }
        uint64_t v15 = type metadata accessor for UsoTask_resume_uso_NoEntity(0LL);
      }

      else
      {
        if (v5 != enum case for AlarmNLv4Constants.AlarmVerb.stop(_:))
        {
          uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v1, v1);
          __break(1u);
          return result;
        }

        sub_25C28();
        if (!v19) {
          goto LABEL_45;
        }
        uint64_t v15 = type metadata accessor for UsoTask_stop_uso_NoEntity(0LL);
      }

      if ((sub_25C34(v15, (uint64_t)&type metadata for Any) & 1) != 0)
      {
        uint64_t v16 = sub_25C48();
        dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter(v18, v16);
        goto LABEL_16;
      }

      goto LABEL_9;
    }

    sub_25C28();
    if (v19)
    {
      uint64_t uso_NoEntity = type metadata accessor for UsoTask_close_uso_NoEntity(0LL);
LABEL_14:
      if ((sub_25C34(uso_NoEntity, (uint64_t)&type metadata for Any) & 1) != 0)
      {
        uint64_t v10 = sub_25C48();
        dispatch thunk of Uso_VerbTemplate_Reference.reference.getter(v18, v10);
LABEL_16:
        sub_16EBC(v0);
        sub_19594((uint64_t)v20, (uint64_t *)&unk_D4860);
        return v18[0];
      }

      goto LABEL_9;
    }

LABEL_45:
    sub_19594((uint64_t)v18, (uint64_t *)&unk_D4860);
  }

    uint64_t v107 = sub_2303C();
    sub_23050((uint64_t)v127, v108, v109, v107);
    goto LABEL_48;
  }

LABEL_9:
  sub_19594((uint64_t)v20, (uint64_t *)&unk_D4860);
  return 0LL;
}

uint64_t sub_25BE0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D41D0);
  sub_26F0(v0, (uint64_t)qword_D41D0);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_25C28()
{
  return sub_4DC4(v0 - 64, v0 - 96);
}

uint64_t sub_25C34@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return swift_dynamicCast(v2 - 104, v2 - 96, a2 + 8, a1, 6LL);
}

uint64_t sub_25C48()
{
  return swift_retain(*(void *)(v0 - 104));
}

uint64_t type metadata accessor for SleepCATPatternsExecutor(uint64_t a1)
{
  uint64_t result = qword_D41E8;
  if (!qword_D41E8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SleepCATPatternsExecutor);
  }
  return result;
}

uint64_t sub_25C8C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D8178);
}

uint64_t sub_25CC8()
{
  return type metadata accessor for SleepCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for AlarmBaseCATsSimple(uint64_t a1)
{
  uint64_t result = qword_D4238;
  if (!qword_D4238) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlarmBaseCATsSimple);
  }
  return result;
}

uint64_t sub_25D08(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D8188);
}

uint64_t sub_25D44(uint64_t a1, char a2, char a3, uint64_t a4, char a5, char a6)
{
  *(void *)(v7 + 24) = a4;
  *(void *)(v7 + 32) = v6;
  *(_BYTE *)(v7 + 6_s20HandleIntentStrategyVwxx_1(v0 + 7) = a6;
  *(_BYTE *)(v7 + 66) = a5;
  *(_BYTE *)(v7 + 65) = a3;
  *(_BYTE *)(v7 + 64) = a2;
  *(void *)(v7 + 16) = a1;
  return swift_task_switch(sub_25D70, 0LL, 0LL);
}

uint64_t sub_25D70()
{
  char v1 = *(_BYTE *)(v0 + 66);
  char v2 = *(_BYTE *)(v0 + 65);
  char v3 = *(_BYTE *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = sub_26B0(&qword_D3BD0);
  uint64_t v6 = swift_allocObject(v5, 272LL, 7LL);
  *(void *)(v0 + 40) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_A4730;
  *(void *)(v6 + 32) = 0x736D657469LL;
  *(void *)(v6 + 40) = 0xE500000000000000LL;
  *(void *)(v6 + 72) = sub_26B0(&qword_D3D28);
  strcpy((char *)(v6 + 80), "isFirstWindow");
  *(_WORD *)(v6 + 94) = -4864;
  *(void *)(v6 + 48) = v4;
  *(_BYTE *)(v6 + 96) = v3;
  *(void *)(v6 + 120) = &type metadata for Bool;
  strcpy((char *)(v6 + 128), "isLastWindow");
  *(_BYTE *)(v6 + 14sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  *(_WORD *)(v6 + 142) = -5120;
  *(_BYTE *)(v6 + 144) = v2;
  *(void *)(v6 + 168) = &type metadata for Bool;
  *(void *)(v6 + 176) = 0x6574496C61746F74LL;
  *(void *)(v6 + 184) = 0xEA0000000000736DLL;
  if ((v1 & 1) != 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = 0LL;
    *(void *)(v6 + 200) = 0LL;
    *(void *)(v6 + 208) = 0LL;
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 24);
    uint64_t v8 = &type metadata for Double;
  }

  char v9 = *(_BYTE *)(v0 + 67);
  *(void *)(v6 + 192) = v7;
  *(void *)(v6 + 216) = v8;
  *(void *)(v6 + 224) = 0x6D6F727065527369LL;
  *(void *)(v6 + 232) = 0xEA00000000007470LL;
  *(void *)(v6 + 264) = &type metadata for Bool;
  *(_BYTE *)(v6 + 240) = v9;
  uint64_t v10 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  swift_bridgeObjectRetain(v4);
  uint64_t v11 = (void *)swift_task_alloc(v10);
  *(void *)(v0 + 48) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_25F30;
  return v13(0xD000000000000025LL, 0x80000000000A8440LL, v6);
}

uint64_t sub_25F30(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 48);
  uint64_t v5 = *v2;
  *(void *)(v5 + 56) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_25FB8, 0LL, 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v5 + 40));
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_25FB8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_26030(a1, a2, a3);
}

uint64_t sub_26030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_17390();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_26B0((uint64_t *)&unk_D36C0);
  __chkstk_darwin(v11);
  sub_17390();
  uint64_t v14 = v13 - v12;
  sub_A850(a1, v13 - v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapperSimple.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_A898(a1);
  return v15;
}

uint64_t sub_26120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_17390();
  uint64_t v8 = v7 - v6;
  sub_261E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v9 = CATWrapperSimple.init(useResponseMode:options:)(a1, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  return v9;
}

uint64_t sub_261C4()
{
  uint64_t v0 = CATWrapperSimple.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_261E0()
{
  return type metadata accessor for AlarmBaseCATsSimple(0LL);
}

uint64_t sub_261E8()
{
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

uint64_t sub_261F8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D4290);
  sub_26F0(v0, (uint64_t)qword_D4290);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_26240@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_26B0(&qword_D37A8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_26B0(&qword_D37D0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_D2FD0 != -1) {
    swift_once(&qword_D2FD0, sub_261F8);
  }
  uint64_t v11 = sub_16C80();
  uint64_t v12 = (os_log_s *)sub_26F0(v11, (uint64_t)qword_D4290);
  Logger.logObject.getter(v12, v13, v14, v15, v16, v17, v18, v19);
  os_log_type_t v20 = sub_16C50();
  if (sub_286C4(v20))
  {
    uint64_t v21 = (uint8_t *)sub_16AC4(2LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_0, v12, v2, "CreateAlarm.NeedsValueStrategy.actionForInput() called)", v21, 2u);
    sub_16AA8((uint64_t)v21);
  }

  uint64_t v22 = type metadata accessor for HALAlarmDeviceContext(0LL);
  sub_17508((uint64_t)v10, 1LL, v23, v22);
  uint64_t v24 = enum case for DecideAction.PromptExpectation.slot(_:);
  uint64_t v25 = type metadata accessor for DecideAction.PromptExpectation(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104LL))(v7, v24, v25);
  sub_A40C((uint64_t)v7, 0LL, 1LL, v25);
  sub_2DA50(a1, (uint64_t)v10, 0, (uint64_t)v7, a2);
  sub_19594((uint64_t)v7, &qword_D37A8);
  return sub_19594((uint64_t)v10, &qword_D37D0);
}

uint64_t sub_2640C(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = sub_19754(v4);
  uint64_t v5 = sub_16C80();
  v2[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  _BYTE v2[8] = v6;
  void v2[9] = sub_19754(v6);
  uint64_t v7 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v2[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[11] = v8;
  v2[12] = sub_19754(v8);
  uint64_t v9 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[14] = v10;
  v2[15] = sub_19754(v10);
  uint64_t v11 = type metadata accessor for NLContextUpdate(0LL);
  v2[16] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[17] = v12;
  v2[18] = sub_19754(v12);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_264C0()
{
  uint64_t v1 = sub_26B0(&qword_D43B8);
  os_log_type_t v2 = (void *)ParameterResolutionRecord.intent.getter(v1);
  sub_319F4(v2);
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = (void *)ParameterResolutionRecord.intent.getter(v1);
  uint64_t v5 = sub_2851C(v4);
  swift_bridgeObjectRelease(v5);
  if (qword_D2FD0 != -1) {
    swift_once(&qword_D2FD0, sub_261F8);
  }
  uint64_t v6 = sub_26F0(v0[7], (uint64_t)qword_D4290);
  uint64_t v14 = (void *)Logger.logObject.getter(v6, v7, v8, v9, v10, v11, v12, v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (sub_16C38(v15))
  {
    uint64_t v16 = (_WORD *)sub_16AC4(2LL);
    _WORD *v16 = 0;
    sub_286B0(&dword_0, v17, v18, "CreateAlarm.NeedsValueStrategy.makePromptForValue() called");
    sub_16AA8((uint64_t)v16);
  }

  sub_79AEC();
  uint64_t v27 = (void *)Logger.logObject.getter(v19, v20, v21, v22, v23, v24, v25, v26);
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (sub_16C38(v28))
  {
    uint64_t v29 = (_WORD *)sub_16AC4(2LL);
    *uint64_t v29 = 0;
    sub_286B0(&dword_0, v30, v31, "Calling alarm RF flow.");
    sub_16AA8((uint64_t)v29);
  }

  uint64_t v33 = v0[11];
  uint64_t v32 = v0[12];
  uint64_t v35 = v0[9];
  uint64_t v34 = v0[10];
  uint64_t v36 = v0[8];

  (*(void (**)(uint64_t, void, uint64_t))(v33 + 104))( v32,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v34);
  sub_28710(v35, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 16));
  uint64_t v37 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v32, v35, v37);
  if (qword_D31A8 != -1) {
    swift_once(&qword_D31A8, sub_89280);
  }
  uint64_t v38 = v0[3];
  uint64_t v39 = swift_task_alloc(32LL);
  v0[19] = v39;
  *(void *)(v39 + 16) = v38;
  uint64_t v40 = (void *)swift_task_alloc(dword_D50BC);
  v0[20] = v40;
  *uint64_t v40 = v0;
  v40[1] = sub_266D0;
  return sub_46ACC((uint64_t)sub_28580, v39);
}

uint64_t sub_266D0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 160);
  *(void *)(*v2 + 168) = v1;
  swift_task_dealloc(v5);
  sub_1978C();
  if (!v1) {
    *(void *)(v4 + 176) = a1;
  }
  sub_19840();
  return sub_197B8();
}

uint64_t sub_26740()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  v0[23] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_267AC;
  return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v0[2],  v0[6],  v0[18],  v0[15],  0LL);
}

uint64_t sub_267AC()
{
  uint64_t v3 = *(void **)(*(void *)v1 + 176LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 40LL);
  *(void *)(*(void *)v1 + 192LL) = v0;
  swift_task_dealloc(v2);
  sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));

  sub_19840();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_26830()
{
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  (*(void (**)(void, void))(*(void *)(v0 + 112) + 8LL))(*(void *)(v0 + 120), *(void *)(v0 + 104));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_19808();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_268BC()
{
  return sub_2858C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2690C()
{
  return sub_2858C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2695C(uint64_t a1)
{
  uint64_t v2 = sub_26B0(&qword_D3A08);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_26B0(&qword_D43B8);
  uint64_t v6 = (void *)ParameterResolutionRecord.intent.getter(v5);
  uint64_t v7 = sub_319F4(v6);
  if (v8)
  {
    uint64_t v9 = v8;
    String.toSpeakableString.getter(v7);
    swift_bridgeObjectRelease(v9);
    uint64_t v10 = type metadata accessor for SpeakableString(0LL);
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v10 = type metadata accessor for SpeakableString(0LL);
    uint64_t v11 = 1LL;
  }

  sub_A40C((uint64_t)v4, v11, 1LL, v10);
  return sub_1B4F0((uint64_t)v4, a1);
}

uint64_t sub_26A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v3[15] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[16] = v5;
  v3[17] = sub_19754(v5);
  uint64_t v6 = type metadata accessor for USOParse(0LL);
  v3[18] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[19] = v7;
  v3[20] = sub_19754(v7);
  uint64_t v8 = type metadata accessor for Input(0LL);
  v3[21] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[22] = v9;
  v3[23] = sub_250D0(v9);
  v3[24] = sub_19884();
  v3[25] = sub_19884();
  uint64_t v10 = type metadata accessor for SiriReferenceResolutionResolver(0LL);
  v3[26] = sub_19754(*(void *)(v10 - 8));
  uint64_t v11 = type metadata accessor for DateComponents(0LL);
  v3[27] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[28] = v12;
  v3[29] = sub_19754(v12);
  uint64_t v13 = sub_26B0(&qword_D37D8);
  v3[30] = sub_250D0(*(void *)(v13 - 8));
  v3[31] = sub_19884();
  v3[32] = sub_19884();
  uint64_t v14 = type metadata accessor for NLIntent(0LL);
  v3[33] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[34] = v15;
  v3[35] = sub_250D0(v15);
  v3[36] = sub_19884();
  uint64_t v16 = type metadata accessor for Parse(0LL);
  v3[37] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v3[38] = v17;
  v3[39] = sub_250D0(v17);
  v3[40] = sub_19884();
  sub_19840();
  return sub_1988C();
}

uint64_t sub_26B5C()
{
  uint64_t v2 = v0;
  uint64_t v265 = v0 + 8;
  uint64_t v3 = v0 + 9;
  uint64_t v4 = v0[40];
  uint64_t v5 = v0[38];
  uint64_t v6 = v2[37];
  uint64_t v7 = sub_26B0(&qword_D43B8);
  uint64_t v8 = (void *)ParameterResolutionRecord.intent.getter(v7);
  Input.parse.getter(v8);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6);
  if (v9 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v11 = v2[35];
    uint64_t v10 = v2[36];
    uint64_t v13 = v2[33];
    uint64_t v12 = v2[34];
    sub_286A4(v2[38]);
    sub_28710(v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
    uint64_t v14 = sub_286D4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v13);
    uint64_t v15 = type metadata accessor for AlarmNLIntent(0LL);
    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    sub_716E4(v11);
    uint64_t v264 = (void *)v14;
    id v16 = sub_22A7C();
    id v17 = [v16 time];
    uint64_t v18 = v2[32];
    if (v17)
    {
      uint64_t v19 = v17;
      uint64_t v20 = v2[28];
      uint64_t v21 = v2[29];
      uint64_t v22 = v2[27];
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v17);

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v18, v21, v22);
      sub_A40C(v18, 0LL, 1LL, v22);
      if (sub_16880(v18, 1LL, v22) != 1)
      {
        uint64_t v23 = v2[32];
        uint64_t v25 = v2[27];
        uint64_t v24 = v2[28];
        v26.super.Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
LABEL_16:
        sub_2865C(v8, "setTime:");

        id v60 = [v16 relativeOffsetInMinutes];
        sub_2865C(v8, "setRelativeOffsetInMinutes:");

        if (qword_D2FD0 != -1) {
          swift_once(&qword_D2FD0, sub_261F8);
        }
        uint64_t v61 = sub_16C80();
        uint64_t v62 = (os_log_s *)sub_26F0(v61, (uint64_t)qword_D4290);
        id v63 = v8;
        Logger.logObject.getter(v63, v64, v65, v66, v67, v68, v69, v70);
        os_log_type_t v71 = sub_16C50();
        uint64_t v1 = v71;
        if (os_log_type_enabled(v62, v71))
        {
          uint64_t v263 = v3;
          Swift::String v72 = (uint8_t *)sub_16AC4(12LL);
          os_log_type_t v261 = (void *)sub_16AC4(32LL);
          *(void *)&__int128 v266 = v261;
          *(_DWORD *)Swift::String v72 = 136315138;
          id v73 = v63;
          id v74 = v16;
          id v75 = [v73 description];
          uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
          char v259 = v2;
          unint64_t v77 = v76;

          id v16 = v74;
          uint64_t v78 = sub_3D10(v14, v77, (uint64_t *)&v266);
          uint64_t v79 = sub_286DC(v78, v265);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v79, v263, v72 + 4, v72 + 12);
          unint64_t v80 = v77;
          uint64_t v2 = v259;
          swift_bridgeObjectRelease(v80);

          sub_16BD0(&dword_0, v62, (os_log_type_t)v1, "Updated SK intent:%s", v72);
          sub_16BB4((uint64_t)v261);
          sub_16AA8((uint64_t)v261);
          sub_16AA8((uint64_t)v72);
        }

        else
        {
        }

        uint64_t v81 = v2[36];
        uint64_t v82 = v2[33];
        os_log_type_t v28 = (void *)v2[34];
        double v83 = sub_28680();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)(v83);

LABEL_22:
        (*((void (**)(uint64_t, uint64_t))v28 + 1))(v81, v82);
        uint64_t v85 = sub_26B0(&qword_D43C0);
        uint64_t v86 = v14;
LABEL_23:
        sub_17508(v86, 0LL, v84, v85);
        goto LABEL_24;
      }
    }

    else
    {
      sub_285F0();
    }

    v26.super.Class isa = 0LL;
    goto LABEL_16;
  }

  if (v9 != enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    if (v9 == enum case for Parse.NLv4IntentOnly(_:))
    {
      uint64_t v265 = v2 + 10;
      uint64_t v1 = (uint64_t)(v2 + 11);
      uint64_t v38 = (void *)v2[40];
      sub_286A4(v2[38]);
      uint64_t v39 = (void *)*v38;
      uint64_t ObjectType = swift_getObjectType(*v38);
      uint64_t v41 = SIRINLUUserDialogAct.firstUsoTask.getter(ObjectType);
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v43 = (os_log_s *)sub_286D4();
        uint64_t v44 = swift_retain(v42);
        static SiriReferenceResolutionResolver.shared.getter(v44);
        sub_4E0C(v42);
        id v247 = v45;
        if (v45)
        {
          uint64_t v262 = v2 + 4;
          uint64_t v254 = v2 + 5;
          if (qword_D2FD0 != -1) {
            swift_once(&qword_D2FD0, sub_261F8);
          }
          uint64_t v46 = sub_16C80();
          uint64_t v47 = sub_26F0(v46, (uint64_t)qword_D4290);
          id v48 = v8;
          sub_28708();
          os_log_type_t v49 = sub_16C50();
          uint64_t v258 = v2;
          uint64_t v263 = v3;
          uint64_t v264 = v39;
          uint64_t v251 = v2 + 11;
          uint64_t v245 = v42;
          id v242 = v48;
          if (sub_16D30(v49))
          {
            unint64_t v50 = (uint8_t *)sub_16AC4(12LL);
            uint64_t v51 = sub_16AC4(32LL);
            *(void *)&__int128 v266 = v51;
            uint64_t v1 = v47;
            *(_DWORD *)unint64_t v50 = 136315138;
            id v52 = v48;
            id v53 = [v52 description];
            uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
            unint64_t v56 = v55;

            uint64_t v57 = sub_3D10(v54, v56, (uint64_t *)&v266);
            uint64_t v58 = sub_286DC(v57, v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v58, v254, v50 + 4, v50 + 12);
            swift_bridgeObjectRelease(v56);

            id v48 = v242;
            sub_16BD0(&dword_0, v43, (os_log_type_t)v43, "Current SK intent %s", v50);
            sub_16BB4(v51);
            sub_16AA8(v51);
            uint64_t v59 = (uint64_t)v50;
            uint64_t v2 = v258;
            sub_16AA8(v59);
          }

          else
          {
          }

          id v161 = [v247 time];
          uint64_t v162 = v2[31];
          if (v161)
          {
            uint64_t v163 = v161;
            uint64_t v165 = v2[28];
            uint64_t v164 = v2[29];
            sub_2873C();

            sub_17620(v162, v164, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v165 + 32));
            sub_28628();
            if (!v166)
            {
              uint64_t v167 = v2[28];
              v168.super.Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
              sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v167 + 8));
LABEL_52:
              sub_2865C(v48, "setTime:");

              id v169 = [v247 relativeOffsetInMinutes];
              sub_2865C(v48, "setRelativeOffsetInMinutes:");

              id v170 = v247;
              sub_28708();
              os_log_type_t v171 = sub_16C50();
              os_log_type_t v261 = v170;
              if (sub_16D30(v171))
              {
                uint64_t v172 = (uint8_t *)sub_16AC4(12LL);
                uint64_t v173 = sub_16AC4(32LL);
                *(void *)&__int128 v266 = v173;
                *(_DWORD *)uint64_t v172 = 136315138;
                id v174 = v170;
                uint64_t v175 = sub_2869C((uint64_t)[v174 description]);
                uint64_t v1 = v176;

                uint64_t v177 = sub_3D10(v175, v1, (uint64_t *)&v266);
                uint64_t v178 = sub_286DC(v177, v263);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v178, v265, v172 + 4, v172 + 12);
                swift_bridgeObjectRelease(v1);

                id v48 = v242;
                sub_16BD0(&dword_0, (os_log_s *)v169, (os_log_type_t)v43, "This turn of createAlarmIntent:%s", v172);
                sub_16BB4(v173);
                sub_16AA8(v173);
                sub_16AA8((uint64_t)v172);
              }

              else
              {
              }

              id v179 = v48;
              sub_28708();
              os_log_type_t v180 = sub_16C50();
              if (sub_286C4(v180))
              {
                uint64_t v181 = (uint8_t *)sub_16AC4(12LL);
                uint64_t v182 = sub_16AC4(32LL);
                *(_DWORD *)uint64_t v181 = 136315138;
                uint64_t v1 = (uint64_t)sub_28728();
                uint64_t v183 = sub_2869C((uint64_t)[(id)v1 description]);
                unint64_t v185 = v184;

                uint64_t v2 = v258;
                v258[11] = sub_3D10(v183, v185, (uint64_t *)&v266);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v251, v258 + 12, v265, v181 + 12);
                swift_bridgeObjectRelease(v185);

                sub_16BD0(&dword_0, (os_log_s *)v169, (os_log_type_t)v47, "Updated SK intent:%s", v181);
                sub_16BB4(v182);
                sub_16AA8(v182);
                sub_16AA8((uint64_t)v181);
              }

              else
              {

                uint64_t v2 = v258;
              }

              os_log_type_t v28 = v264;
              uint64_t v186 = v2[12];
              __int128 v266 = 0u;
              __int128 v267 = 0u;
              IntentPromptAnswer.init(answeredValue:updatedIntent:)(0.0);
              swift_release(v245);

              swift_unknownObjectRelease(v264);
              uint64_t v85 = sub_26B0(&qword_D43C0);
              uint64_t v86 = v186;
              goto LABEL_23;
            }
          }

          else
          {
            sub_285F0();
          }

          v168.super.Class isa = 0LL;
          goto LABEL_52;
        }

        swift_release(v42);
      }

      if (qword_D2FD0 != -1) {
        swift_once(&qword_D2FD0, sub_261F8);
      }
      uint64_t v263 = v2 + 41;
      uint64_t v131 = sub_16C80();
      sub_26F0(v131, (uint64_t)qword_D4290);
      sub_285D8();
      uint64_t v132 = (os_log_s *)sub_1716C();
      os_log_type_t v133 = static os_log_type_t.error.getter();
      if (sub_178F8(v132))
      {
        uint64_t v134 = v2[39];
        id v249 = (id)v2[37];
        uint64_t v135 = v2[25];
        uint64_t v257 = v2[22];
        os_log_type_t v261 = (void *)v2[21];
        uint64_t v136 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v264 = v39;
        uint64_t v137 = sub_16AC4(32LL);
        *(void *)&__int128 v266 = v137;
        *(_DWORD *)uint64_t v136 = 136315138;
        uint64_t v1 = (uint64_t)(v136 + 4);
        Input.parse.getter(v137);
        uint64_t v138 = String.init<A>(describing:)(v134, v249);
        unint64_t v140 = v139;
        v2[10] = sub_286E8( v138,  v139,  v141,  v142,  v143,  v144,  v145,  v146,  v240,  v241,  v243,  v244,  (uint64_t)v249,  (uint64_t)(v2 + 11));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v265, v253, v136 + 4, v136 + 12);
        swift_bridgeObjectRelease(v140);
        (*(void (**)(uint64_t, void *))(v257 + 8))(v135, v261);
        sub_16BD0(&dword_0, v132, v133, "Failed to parse userDialogAct to CreateAlarmIntent: %s", v136);
        sub_16BB4(v137);
        uint64_t v147 = v137;
        uint64_t v39 = v264;
        sub_16AA8(v147);
        sub_16AA8((uint64_t)v136);
      }

      else
      {
        sub_2871C(v2[25]);
      }

      *uint64_t v263 = 0;
      uint64_t v148 = sub_26B0(&qword_D4190);
      unint64_t v149 = sub_24EA4();
      uint64_t v150 = sub_286F0(v148, v149);
      unint64_t v151 = sub_28664();
      uint64_t v153 = static BarbaraWalters.logAndReturnError<A>(context:_:)(v151, v152, v263);
      sub_286FC(v153, v154, v155, v156, v157, v158, v159, v160);

      swift_unknownObjectRelease(v39);
    }

    else
    {
      if (v9 == enum case for Parse.uso(_:))
      {
        uint64_t v264 = v2 + 3;
        uint64_t v255 = v2 + 5;
        uint64_t v1 = (uint64_t)(v2 + 6);
        uint64_t v89 = v2[40];
        uint64_t v91 = v2[19];
        uint64_t v90 = v2[20];
        uint64_t v92 = v2[17];
        uint64_t v14 = v2[18];
        uint64_t v94 = v2[15];
        uint64_t v93 = v2[16];
        sub_286A4(v2[38]);
        uint64_t v95 = sub_17620(v90, v89, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 32));
        uint64_t v96 = USOParse.userParse.getter(v95);
        uint64_t v97 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v96);
        (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v94);
        if (v97)
        {
          uint64_t v98 = (os_log_s *)sub_286D4();
          uint64_t v99 = swift_retain(v97);
          static SiriReferenceResolutionResolver.shared.getter(v99);
          sub_4E0C(v97);
          if (v100)
          {
            id v248 = v100;
            if (qword_D2FD0 != -1) {
              swift_once(&qword_D2FD0, sub_261F8);
            }
            uint64_t v101 = sub_16C80();
            sub_26F0(v101, (uint64_t)qword_D4290);
            uint64_t v102 = v8;
            sub_28734();
            os_log_type_t v103 = sub_16C50();
            os_log_type_t v261 = (void *)v97;
            uint64_t v263 = v102;
            if (sub_178F8(v98))
            {
              uint64_t v14 = sub_16AC4(12LL);
              uint64_t v104 = sub_16AC4(32LL);
              *(void *)&__int128 v266 = v104;
              *(_DWORD *)uint64_t v14 = 136315138;
              uint64_t v105 = v102;
              uint64_t v106 = sub_2869C((uint64_t)[v105 description]);
              unint64_t v108 = v107;

              uint64_t v109 = sub_3D10(v106, v108, (uint64_t *)&v266);
              uint64_t v110 = sub_286DC(v109, v2 + 2);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, v264, v111, v14 + 12);
              swift_bridgeObjectRelease(v108);

              uint64_t v102 = v263;
              sub_16BD0(&dword_0, v98, v103, "Current SK intent %s", (uint8_t *)v14);
              sub_16BB4(v104);
              sub_16AA8(v104);
              sub_16AA8(v14);
            }

            else
            {
            }

            id v217 = [v248 time];
            uint64_t v218 = v2[30];
            if (v217)
            {
              uint64_t v219 = v217;
              uint64_t v221 = v2[28];
              uint64_t v220 = v2[29];
              sub_2873C();

              sub_17620(v218, v220, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v221 + 32));
              sub_28628();
              if (v166)
              {
                v222.super.Class isa = 0LL;
              }

              else
              {
                uint64_t v14 = v2[28];
                v222.super.Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
                sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
              }

              uint64_t v102 = v263;
            }

            else
            {
              sub_285F0();
              v222.super.Class isa = 0LL;
            }

            sub_2865C(v102, "setTime:");

            id v223 = [v248 relativeOffsetInMinutes];
            sub_2865C(v102, "setRelativeOffsetInMinutes:");

            uint64_t v1 = (uint64_t)v248;
            sub_28734();
            os_log_type_t v224 = sub_16C50();
            uint64_t v264 = (void *)v1;
            if (sub_178F8((os_log_s *)v223))
            {
              uint64_t v14 = sub_16AC4(12LL);
              uint64_t v225 = sub_16AC4(32LL);
              *(void *)&__int128 v266 = v225;
              *(_DWORD *)uint64_t v14 = 136315138;
              id v226 = (id)v1;
              uint64_t v1 = sub_2869C((uint64_t)[v226 description]);
              unint64_t v228 = v227;

              v2[7] = sub_3D10(v1, v228, (uint64_t *)&v266);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 7, v265, v14 + 4, v14 + 12);
              swift_bridgeObjectRelease(v228);

              uint64_t v102 = v263;
              sub_16BD0(&dword_0, (os_log_s *)v223, v224, "This turn of createAlarmIntent:%s", (uint8_t *)v14);
              sub_16BB4(v225);
              sub_16AA8(v225);
              sub_16AA8(v14);
            }

            else
            {
            }

            uint64_t v229 = v102;
            sub_28734();
            os_log_type_t v230 = sub_16C50();
            if (sub_16D30(v230))
            {
              uint64_t v231 = (uint8_t *)sub_16AC4(12LL);
              uint64_t v232 = sub_16AC4(32LL);
              *(_DWORD *)uint64_t v231 = 136315138;
              uint64_t v1 = (uint64_t)sub_28728();
              uint64_t v233 = sub_2869C((uint64_t)[(id)v1 description]);
              unint64_t v235 = v234;

              uint64_t v236 = sub_3D10(v233, v235, (uint64_t *)&v266);
              os_log_type_t v237 = sub_286DC(v236, v2 + 6);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v237, v238, v265, v231 + 12);
              swift_bridgeObjectRelease(v235);

              sub_16BD0(&dword_0, (os_log_s *)v223, (os_log_type_t)v14, "Updated SK intent:%s", v231);
              sub_16BB4(v232);
              sub_16AA8(v232);
              sub_16AA8((uint64_t)v231);
            }

            else
            {
            }

            os_log_type_t v28 = (void *)v2[19];
            uint64_t v81 = v2[20];
            uint64_t v82 = v2[18];
            double v239 = sub_28680();
            IntentPromptAnswer.init(answeredValue:updatedIntent:)(v239);

            swift_release(v261);
            goto LABEL_22;
          }

          swift_release(v97);
        }

        uint64_t v112 = (void *)((char *)v2 + 329);
        if (qword_D2FD0 != -1) {
          swift_once(&qword_D2FD0, sub_261F8);
        }
        uint64_t v187 = sub_16C80();
        sub_26F0(v187, (uint64_t)qword_D4290);
        sub_285D8();
        uint64_t v188 = (os_log_s *)sub_1716C();
        os_log_type_t v189 = static os_log_type_t.error.getter();
        if (sub_178F8(v188))
        {
          uint64_t v265 = (void *)((char *)v2 + 329);
          uint64_t v190 = v2[39];
          uint64_t v191 = v2[24];
          os_log_type_t v261 = (void *)v2[37];
          uint64_t v263 = (_BYTE *)v2[22];
          uint64_t v264 = (void *)v2[21];
          uint64_t v260 = v2;
          uint64_t v192 = (uint8_t *)sub_16AC4(12LL);
          uint64_t v193 = v1;
          uint64_t v1 = sub_16AC4(32LL);
          *(void *)&__int128 v266 = v1;
          *(_DWORD *)uint64_t v192 = 136315138;
          Input.parse.getter(v1);
          uint64_t v194 = String.init<A>(describing:)(v190, v261);
          unint64_t v196 = v195;
          v260[5] = sub_286E8( v194,  v195,  v197,  v198,  v199,  v200,  v201,  v202,  v240,  v241,  v243,  v244,  (uint64_t)v246,  v250);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v255, v193, v192 + 4, v192 + 12);
          unint64_t v203 = v196;
          uint64_t v112 = v265;
          swift_bridgeObjectRelease(v203);
          (*((void (**)(uint64_t, void *))v263 + 1))(v191, v264);
          sub_16BD0(&dword_0, v188, v189, "Failed to parse userDialogAct to CreateAlarmIntent: %s", v192);
          sub_16BB4(v1);
          sub_16AA8(v1);
          uint64_t v204 = (uint64_t)v192;
          uint64_t v2 = v260;
          sub_16AA8(v204);
        }

        else
        {
          sub_2871C(v2[24]);
        }

        uint64_t v130 = v2[19];
        *((_BYTE *)v2 + 329) = 0;
      }

      else
      {
        os_log_type_t v261 = v2 + 4;
        uint64_t v112 = (void *)((char *)v2 + 330);
        if (qword_D2FD0 != -1) {
          swift_once(&qword_D2FD0, sub_261F8);
        }
        uint64_t v113 = sub_16C80();
        sub_26F0(v113, (uint64_t)qword_D4290);
        sub_285D8();
        unint64_t v114 = (os_log_s *)sub_1716C();
        os_log_type_t v115 = static os_log_type_t.error.getter();
        if (sub_178F8(v114))
        {
          uint64_t v264 = v2 + 3;
          uint64_t v116 = v2[39];
          uint64_t v117 = v2[23];
          uint64_t v252 = v2[37];
          uint64_t v256 = v2[22];
          uint64_t v263 = (_BYTE *)v2[21];
          uint64_t v1 = sub_16AC4(12LL);
          uint64_t v118 = sub_16AC4(32LL);
          uint64_t v265 = (void *)((char *)v2 + 330);
          *(void *)&__int128 v266 = v118;
          uint64_t v119 = v118;
          *(_DWORD *)uint64_t v1 = 136315138;
          Input.parse.getter(v118);
          uint64_t v120 = String.init<A>(describing:)(v116, v252);
          unint64_t v122 = v121;
          v2[3] = sub_286E8(v120, v121, v123, v124, v125, v126, v127, v128, v240, v241, v243, v244, (uint64_t)v246, v252);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 3, v261, v1 + 4, v1 + 12);
          swift_bridgeObjectRelease(v122);
          (*(void (**)(uint64_t, _BYTE *))(v256 + 8))(v117, v263);
          sub_16BD0(&dword_0, v114, v115, "Received unsupported parse: %s", (uint8_t *)v1);
          sub_16BB4(v119);
          uint64_t v129 = v119;
          uint64_t v112 = (void *)((char *)v2 + 330);
          sub_16AA8(v129);
          sub_16AA8(v1);
        }

        else
        {
          (*(void (**)(void, void))(v2[22] + 8LL))(v2[23], v2[21]);
        }

        uint64_t v130 = v2[38];
        *((_BYTE *)v2 + 330) = 0;
      }

      uint64_t v205 = sub_26B0(&qword_D4190);
      unint64_t v206 = sub_24EA4();
      uint64_t v150 = sub_286F0(v205, v206);
      unint64_t v207 = sub_28664();
      uint64_t v209 = static BarbaraWalters.logAndReturnError<A>(context:_:)(v207, v208, v112);
      sub_286FC(v209, v210, v211, v212, v213, v214, v215, v216);

      sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v130 + 8));
    }

    sub_285A4();
    sub_19808();
    sub_19800();
    sub_1978C();
    sub_19794();
    sub_197C0();
    sub_19830();
    sub_19828();
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v261);
    swift_task_dealloc(v263);
    swift_task_dealloc(v264);
    swift_task_dealloc(v265);
    uint64_t v87 = *(uint64_t (**)(void))(v150 + 8);
    return v87();
  }

  uint64_t v27 = v2[40];
  uint64_t v29 = v2[33];
  os_log_type_t v28 = (void *)v2[34];
  uint64_t v30 = v2[12];
  (*(void (**)(uint64_t, void))(v2[38] + 96LL))(v27, v2[37]);
  uint64_t v31 = sub_26B0(&qword_D3768);
  uint64_t v32 = *(void *)(v27 + *(int *)(v31 + 48));
  __int128 v266 = 0u;
  __int128 v267 = 0u;
  uint64_t v33 = Parse.ServerConversion.siriKitIntent.getter(v31);
  uint64_t v34 = sub_286D4();
  swift_dynamicCastClassUnconditional(v33, v34, 0LL, 0LL, 0LL);
  IntentPromptAnswer.init(answeredValue:updatedIntent:)(v35);

  swift_release(v32);
  uint64_t v36 = sub_26B0(&qword_D43C0);
  sub_17508(v30, 0LL, v37, v36);
  (*((void (**)(uint64_t, uint64_t))v28 + 1))(v27, v29);
LABEL_24:
  sub_285A4();
  sub_19808();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v261);
  swift_task_dealloc(v263);
  swift_task_dealloc(v264);
  swift_task_dealloc(v265);
  uint64_t v87 = (uint64_t (*)(void))*((void *)v28 + 1);
  return v87();
}

uint64_t sub_28040(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for NLContextUpdate(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = sub_19754(v3);
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v1[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[7] = v5;
  v1[8] = sub_19754(v5);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_280A4()
{
  uint64_t v1 = static DialogPhase.canceled.getter();
  NLContextUpdate.init()(v1);
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_D387C);
  v0[9] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_2810C;
  return sub_18B98(v0[2], v0[8], v0[5]);
}

uint64_t sub_2810C()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v4 = *(void *)(*v1 + 32);
  uint64_t v5 = *v1;
  *(void *)(v5 + 80) = v0;
  swift_task_dealloc(v2);
  sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (v0)
  {
    sub_19840();
    return sub_197B8();
  }

  else
  {
    swift_task_dealloc(*(void *)(v5 + 64));
    sub_19808();
    return sub_2858C(*(uint64_t (**)(void))(v5 + 8));
  }

uint64_t sub_281B0()
{
  return sub_1B5EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_281E4@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_26240(a1, a2);
}

uint64_t sub_281F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_D42DC);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_28588;
  return sub_26A28(a1, a2, a3);
}

uint64_t sub_28260(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D42D4);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_282B8;
  return sub_2640C(a1, a2);
}

uint64_t sub_282B8()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return sub_1B5EC(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_282F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = _s18NeedsValueStrategyCMa();
  *uint64_t v8 = v4;
  v8[1] = sub_28588;
  return NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t sub_28374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = _s18NeedsValueStrategyCMa();
  *uint64_t v8 = v4;
  v8[1] = sub_28588;
  return NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t sub_283F0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_D42E4);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_28588;
  return sub_28040(a1);
}

uint64_t sub_28440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)[1]);
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = _s18NeedsValueStrategyCMa();
  void *v14 = v7;
  v14[1] = sub_28588;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, v15, a7);
}

unint64_t sub_284E0()
{
  unint64_t result = qword_D4390[0];
  if (!qword_D4390[0])
  {
    uint64_t v1 = _s18NeedsValueStrategyCMa();
    unint64_t result = swift_getWitnessTable(&unk_A4E84, v1);
    atomic_store(result, qword_D4390);
  }

  return result;
}

uint64_t sub_2851C(void *a1)
{
  id v2 = [a1 repeatSchedule];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = type metadata accessor for AlarmRepeatSchedule(0LL);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_28580(uint64_t a1)
{
  return sub_2695C(a1);
}

uint64_t sub_2858C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_285A4()
{
  return swift_task_dealloc(*(void *)(v0 + 320));
}

uint64_t sub_285D8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v0, v3, v2);
}

uint64_t sub_285F0()
{
  return sub_A40C(v0, 1LL, 1LL, *(void *)(v1 + 216));
}

uint64_t sub_28604()
{
  return (*(uint64_t (**)(void, void))(v0[14] + 8LL))(v0[15], v0[13]);
}

uint64_t sub_28628()
{
  return sub_16880(v0, 1LL, v1);
}

id sub_2865C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

unint64_t sub_28664()
{
  return 0xD00000000000005ELL;
}

double sub_28680()
{
  return 0.0;
}

uint64_t sub_2869C(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_286A4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 96))(v1);
}

void sub_286B0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

BOOL sub_286C4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_286D4()
{
  return type metadata accessor for CreateAlarmIntent(0LL);
}

void *sub_286DC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return a2;
}

uint64_t sub_286E8( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  return sub_3D10(a1, a2, (uint64_t *)va);
}

uint64_t sub_286F0(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_286FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_28708()
{
  return Logger.logObject.getter();
}

uint64_t sub_28710@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_2871C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 176) + 8LL))(a1, *(void *)(v1 + 168));
}

id sub_28728()
{
  return v0;
}

uint64_t sub_28734()
{
  return Logger.logObject.getter();
}

uint64_t sub_2873C()
{
  return static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_28748(uint64_t a1, uint64_t a2)
{
  return sub_28760(a1, a2, (uint64_t (*)(void))sub_4F5EC);
}

uint64_t sub_28754(uint64_t a1, uint64_t a2)
{
  return sub_28760(a1, a2, (uint64_t (*)(void))sub_6FFCC);
}

uint64_t sub_28760(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3();
  uint64_t v7 = v6;
  uint64_t v8 = ((uint64_t (*)(uint64_t))a3)(a2);
  if (v5 == v8 && v7 == v9) {
    char v11 = 1;
  }
  else {
    char v11 = sub_2D1FC(v5, v9, v8);
  }
  sub_16D58();
  sub_16C48();
  return v11 & 1;
}

uint64_t sub_287D4(uint64_t a1, uint64_t a2)
{
  return sub_2880C( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for ButtonOption,  &qword_D45D0,  (uint64_t)&protocol conformance descriptor for ButtonOption);
}

uint64_t sub_287F0(uint64_t a1, uint64_t a2)
{
  return sub_2880C( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for SiriKitConfirmationState,  &qword_D45D8,  (uint64_t)&protocol conformance descriptor for SiriKitConfirmationState);
}

uint64_t sub_2880C( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  if (v14 == v12 && v15 == v13) {
    char v10 = 1;
  }
  else {
    char v10 = sub_2D1FC(v14, v8, v12);
  }
  sub_16D58();
  sub_16C48();
  return v10 & 1;
}

uint64_t sub_288BC(uint64_t a1, uint64_t a2)
{
  return sub_2880C( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for AlarmNLv4Constants.AlarmVerb,  &qword_D4610,  (uint64_t)&protocol conformance descriptor for AlarmNLv4Constants.AlarmVerb);
}

uint64_t sub_288D8(uint64_t a1, uint64_t a2)
{
  return sub_2880C( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for DirectInvocationUtils.Alarm.URI,  &qword_D45E8,  (uint64_t)&protocol conformance descriptor for DirectInvocationUtils.Alarm.URI);
}

double sub_288F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_7360(a1, a2), (v7 & 1) != 0))
  {
    sub_3F2C(*(void *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }

  return result;
}

uint64_t sub_28944()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D43C8);
  sub_26F0(v0, (uint64_t)qword_D43C8);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_2898C(uint64_t a1)
{
  return sub_289C4( a1,  (uint64_t (*)(void))&type metadata accessor for SiriTimeEventSender.TaskType,  qword_D8198,  &enum case for SiriTimeEventSender.TaskType.undoDeleteAlarm(_:));
}

uint64_t sub_289A8(uint64_t a1)
{
  return sub_289C4( a1,  (uint64_t (*)(void))&type metadata accessor for SiriTimeEventSender.Attribute,  qword_D81B0,  &enum case for SiriTimeEventSender.Attribute.corrections(_:));
}

uint64_t sub_289C4(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, unsigned int *a4)
{
  uint64_t v6 = a2(0LL);
  sub_1688C(v6, a3);
  uint64_t v7 = sub_26F0(v6, (uint64_t)a3);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104LL))(v7, *a4, v6);
}

uint64_t RecreateDeletedAlarmsFlow.__allocating_init(manager:)(void *a1)
{
  return sub_28A34(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))sub_2C7AC);
}

uint64_t RecreateDeletedAlarmsFlow.init(manager:)(void *a1)
{
  return sub_28A34(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))sub_2C964);
}

uint64_t sub_28A34(void *a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = sub_2C868((uint64_t)a1, v5);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = a2(v9, v2, v5, v6);
  _s20HandleIntentStrategyVwxx_1(a1);
  return v11;
}

uint64_t RecreateDeletedAlarmsFlow.__allocating_init()()
{
  uint64_t v0 = SiriAlarmManagerImpl.__allocating_init(endpointUUID:)(0LL, 0LL);
  uint64_t v1 = type metadata accessor for RecreateDeletedAlarmsFlow(0LL);
  uint64_t v2 = sub_16D14(v1);
  return sub_2C890(v0, v2);
}

uint64_t RecreateDeletedAlarmsFlow.on(input:)()
{
  uint64_t v98 = v2;
  uint64_t v3 = type metadata accessor for DirectInvocationUtils.Alarm.URI(0LL);
  uint64_t v101 = *(void *)(v3 - 8);
  uint64_t v102 = v3;
  sub_16AFC();
  __chkstk_darwin(v4);
  sub_16B30();
  uint64_t v100 = v5;
  sub_26B0(&qword_D3788);
  sub_16AFC();
  __chkstk_darwin(v6);
  sub_16B30();
  uint64_t v106 = v7;
  uint64_t v108 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  uint64_t v105 = *(void *)(v108 - 8);
  sub_16AFC();
  __chkstk_darwin(v8);
  sub_16B08();
  uint64_t v99 = v9;
  __chkstk_darwin(v10);
  uint64_t v107 = (uint64_t)&v97 - v11;
  uint64_t v12 = type metadata accessor for DirectInvocationUtils.Alarm.UserInfoKey(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_16B08();
  uint64_t v104 = (char *)v14;
  __chkstk_darwin(v15);
  id v17 = (char *)&v97 - v16;
  uint64_t v18 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = sub_2D180();
  uint64_t v21 = type metadata accessor for Parse(v20);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Input.parse.getter(v22);
  uint64_t v25 = sub_2D24C();
  if (v26(v25) != enum case for Parse.directInvocation(_:))
  {
    uint64_t v45 = sub_2D24C();
LABEL_12:
    v47(v45, v46);
    return 0LL;
  }

  uint64_t v27 = sub_2D24C();
  v28(v27);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v0, v24, v18);
  uint64_t v30 = Parse.DirectInvocation.userData.getter(v29);
  uint64_t v31 = v0;
  if (!v30)
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v0, v18);
    return 0LL;
  }

  uint64_t v32 = v30;
  uint64_t v97 = v18;
  uint64_t v33 = v19;
  uint64_t v34 = *(uint64_t (**)(char *, void, uint64_t))(v13 + 104);
  uint64_t v35 = v34(v17, enum case for DirectInvocationUtils.Alarm.UserInfoKey.verb(_:), v12);
  uint64_t v36 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v35);
  uint64_t v38 = v37;
  uint64_t v39 = *(void (**)(char *, uint64_t))(v13 + 8);
  v39(v17, v12);
  sub_288F4(v36, v38, v32, &v111);
  uint64_t v40 = sub_16C48();
  if (!v112)
  {
    sub_16F40();
    sub_7EC4((uint64_t)&v111, (uint64_t *)&unk_D4860);
LABEL_11:
    uint64_t v46 = v97;
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    uint64_t v45 = v31;
    goto LABEL_12;
  }

  if ((sub_2D19C(v40, v41, v42, (uint64_t)&type metadata for String) & 1) == 0)
  {
    sub_16F40();
    goto LABEL_11;
  }

  uint64_t v43 = v106;
  AlarmNLv4Constants.AlarmVerb.init(rawValue:)(v109);
  uint64_t v44 = v108;
  if (sub_16880(v43, 1LL, v108) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v31, v97);
    sub_16F40();
    sub_7EC4(v43, &qword_D3788);
    return 0LL;
  }

  uint64_t v49 = v105;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 32))(v107, v43, v44);
  uint64_t v50 = (uint64_t)v104;
  uint64_t v51 = v34(v104, enum case for DirectInvocationUtils.Alarm.UserInfoKey.alarmSnapshotsJson(_:), v12);
  DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v51);
  v39((char *)v50, v12);
  uint64_t v52 = sub_2D24C();
  sub_288F4(v52, v53, v32, v54);
  uint64_t v55 = sub_17B9C();
  if (!v112)
  {
    sub_16F40();
    sub_7EC4((uint64_t)&v111, (uint64_t *)&unk_D4860);
LABEL_20:
    uint64_t v65 = v97;
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v107, v108);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v65);
    return 0LL;
  }

  uint64_t v58 = v32;
  if ((sub_2D19C(v55, v56, v57, (uint64_t)&type metadata for Data) & 1) == 0)
  {
    sub_17B9C();
    goto LABEL_20;
  }

  uint64_t v60 = v109;
  uint64_t v59 = v110;
  uint64_t v61 = type metadata accessor for JSONDecoder(0LL);
  sub_16D14(v61);
  JSONDecoder.init()();
  uint64_t v62 = sub_26B0(&qword_D3800);
  unint64_t v63 = sub_16910();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v111, v62, v60, v59, v62, v63);
  uint64_t v64 = v31;
  sub_17324();
  if (!*(void *)(v111 + 16))
  {
    sub_17B9C();
    sub_2D290();
    sub_16D58();
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v107, v108);
    goto LABEL_17;
  }

  uint64_t v104 = (char *)v60;
  uint64_t v106 = v59;
  uint64_t v66 = *(void *)(v103 + 40);
  *(void *)(v103 + 40) = v111;
  uint64_t v67 = swift_bridgeObjectRelease(v66);
  uint64_t v68 = Parse.DirectInvocation.identifier.getter(v67);
  uint64_t v70 = v69;
  uint64_t v71 = v100;
  uint64_t v72 = v101;
  uint64_t v73 = v102;
  uint64_t v74 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v101 + 104))( v100,  enum case for DirectInvocationUtils.Alarm.URI.undo(_:),  v102);
  uint64_t v75 = DirectInvocationUtils.Alarm.URI.rawValue.getter(v74);
  uint64_t v77 = v76;
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
  if (v68 == v75 && v70 == v77)
  {
    swift_bridgeObjectRelease_n(v70, 2LL);
  }

  else
  {
    char v79 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v70, v75, v77, 0LL);
    swift_bridgeObjectRelease(v77);
    sub_16F40();
    if ((v79 & 1) == 0)
    {
      sub_17B9C();
      sub_2D22C((uint64_t)v104);
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v107, v108);
LABEL_17:
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v64, v97);
      return 0LL;
    }
  }

  uint64_t v80 = v105;
  uint64_t v81 = v99;
  uint64_t v82 = v108;
  (*(void (**)(uint64_t, void, uint64_t))(v105 + 104))( v99,  enum case for AlarmNLv4Constants.AlarmVerb.create(_:),  v108);
  char v83 = sub_2880C( v107,  v81,  (uint64_t (*)(uint64_t))&type metadata accessor for AlarmNLv4Constants.AlarmVerb,  &qword_D4610,  (uint64_t)&protocol conformance descriptor for AlarmNLv4Constants.AlarmVerb);
  uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
  uint64_t v85 = v82;
  v84(v81, v82);
  uint64_t v86 = v58;
  uint64_t v87 = (uint64_t)v104;
  if ((v83 & 1) == 0)
  {
    sub_16F40();
    sub_2D22C(v87);
    v84(v107, v85);
    goto LABEL_17;
  }

  if (qword_D2FD8 != -1) {
    swift_once(&qword_D2FD8, sub_28944);
  }
  uint64_t v88 = sub_16C80();
  sub_26F0(v88, (uint64_t)qword_D43C8);
  uint64_t v89 = (void *)sub_16D50();
  os_log_type_t v90 = static os_log_type_t.default.getter();
  if (sub_1990C(v90))
  {
    uint64_t v91 = (_WORD *)sub_16AC4(2LL);
    *uint64_t v91 = 0;
    sub_198C0(&dword_0, v92, v93, "RecreateDeletedAlarmsFlow accepting input.");
    uint64_t v94 = (uint64_t)v91;
    uint64_t v86 = v58;
    sub_16AA8(v94);
  }

  uint64_t v95 = v98;
  sub_1ECB4(v86, v98);
  sub_16F40();
  sub_2D22C(v87);
  v84(v107, v108);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v64, v97);
  uint64_t v96 = v103 + OBJC_IVAR____TtC15AlarmFlowPlugin25RecreateDeletedAlarmsFlow_followupPluginAction;
  swift_beginAccess( v103 + OBJC_IVAR____TtC15AlarmFlowPlugin25RecreateDeletedAlarmsFlow_followupPluginAction,  &v111,  33LL,  0LL);
  sub_2CAC8(v95, v96);
  swift_endAccess(&v111);
  return 1LL;
}

uint64_t RecreateDeletedAlarmsFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecreateDeletedAlarmsFlow(0LL);
  sub_16A6C( (unint64_t *)&unk_D7A90,  type metadata accessor for RecreateDeletedAlarmsFlow,  (uint64_t)&protocol conformance descriptor for RecreateDeletedAlarmsFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t RecreateDeletedAlarmsFlow.execute()(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = sub_26B0(&qword_D43E0);
  v2[19] = sub_19754(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for PluginAction(0LL);
  v2[20] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[21] = v5;
  v2[22] = sub_19754(v5);
  uint64_t v6 = type metadata accessor for SiriTimeEventSender.ReasonDescription(0LL);
  v2[23] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[24] = v7;
  v2[25] = sub_19754(v7);
  uint64_t v8 = type metadata accessor for OSSignpostID(0LL);
  v2[26] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[27] = v9;
  v2[28] = sub_19754(v9);
  uint64_t v10 = sub_26B0(&qword_D43F8);
  v2[29] = sub_19754(*(void *)(v10 - 8));
  uint64_t v11 = sub_26B0(&qword_D4400);
  v2[30] = sub_19754(*(void *)(v11 - 8));
  uint64_t v12 = sub_26B0(&qword_D4408);
  v2[31] = sub_19754(*(void *)(v12 - 8));
  uint64_t v13 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  v2[32] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[33] = v14;
  v2[34] = sub_19754(v14);
  uint64_t v15 = type metadata accessor for ActivityType(0LL);
  v2[35] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[36] = v16;
  v2[37] = sub_19754(v16);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_29398()
{
  if (qword_D2FD8 != -1) {
    swift_once(&qword_D2FD8, sub_28944);
  }
  uint64_t v2 = sub_16C80();
  uint64_t v77 = (void *)sub_26F0(v2, (uint64_t)qword_D43C8);
  uint64_t v3 = (os_log_s *)sub_16D50();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_16C38(v4))
  {
    uint64_t v5 = (uint8_t *)sub_16AC4(2LL);
    *(_WORD *)uint64_t v5 = 0;
    sub_16B44(&dword_0, v3, v0, "In RecreateDeletedAlarmsFlow async execute()", v5);
    sub_16AA8((uint64_t)v5);
  }

  uint64_t v6 = *(void *)(v1 + 288);
  uint64_t v7 = *(void *)(v1 + 296);
  uint64_t v8 = *(void *)(v1 + 280);

  uint64_t v9 = enum case for ActivityType.correction(_:);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
  *(void *)(v1 + 304) = v10;
  v10(v7, v9, v8);
  if (qword_D2FE0 != -1) {
    swift_once(&qword_D2FE0, sub_2898C);
  }
  uint64_t v12 = *(void *)(v1 + 264);
  uint64_t v11 = *(void *)(v1 + 272);
  uint64_t v13 = *(void *)(v1 + 248);
  uint64_t v14 = sub_26F0(*(void *)(v1 + 256), (uint64_t)qword_D8198);
  *(void *)(v1 + 312) = v14;
  sub_174B8(v11, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
  uint64_t v15 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  *(void *)(v1 + 320) = v15;
  sub_23050(v13, v16, v17, v15);
  if (qword_D2FE8 != -1) {
    swift_once(&qword_D2FE8, sub_289A8);
  }
  uint64_t v18 = *(void *)(v1 + 296);
  uint64_t v19 = *(void *)(v1 + 272);
  uint64_t v79 = *(void *)(v1 + 288);
  uint64_t v80 = *(void *)(v1 + 280);
  uint64_t v20 = *(void *)(v1 + 264);
  uint64_t v78 = *(void *)(v1 + 256);
  uint64_t v22 = *(void *)(v1 + 240);
  uint64_t v21 = *(void *)(v1 + 248);
  uint64_t v23 = *(void *)(v1 + 232);
  uint64_t v24 = *(void *)(v1 + 184);
  uint64_t v25 = *(void *)(v1 + 144);
  uint64_t v26 = type metadata accessor for SiriTimeEventSender.Attribute(0LL);
  *(void *)(v1 + 328) = v26;
  uint64_t v27 = sub_26F0(v26, (uint64_t)qword_D81B0);
  *(void *)(v1 + 336) = v27;
  os_log_type_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL);
  *(void *)(v1 + 344) = v28;
  sub_174B8(v22, v27, v28);
  sub_A40C(v22, 0LL, 1LL, v26);
  sub_A40C(v23, 1LL, 1LL, v24);
  static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v18, v19, v21, v22, v23);
  sub_7EC4(v23, &qword_D43F8);
  sub_2D20C(v29, &qword_D4400);
  uint64_t v30 = v21;
  uint64_t v31 = v25;
  sub_7EC4(v30, &qword_D4408);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v78);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v79 + 8);
  *(void *)(v1 + 352) = v32;
  uint64_t v33 = v32(v18, v80);
  if (!*(void *)(*(void *)(v25 + 40) + 16LL))
  {
    Logger.logObject.getter(v33, v34, v35, v36, v37, v38, v39, v40);
    os_log_type_t v62 = sub_17714();
    if (sub_1990C(v62))
    {
      unint64_t v63 = (_WORD *)sub_16AC4(2LL);
      *unint64_t v63 = 0;
      sub_198C0( &dword_0,  v64,  v65,  "The alarm snapshots are empty! RecreateDeletedAlarmsFlow execute() has no alarms to recreate.");
      sub_16AA8((uint64_t)v63);
    }

    uint64_t v67 = *(void *)(v1 + 192);
    uint64_t v66 = *(void *)(v1 + 200);
    uint64_t v68 = *(void *)(v1 + 184);

    (*(void (**)(uint64_t, void, uint64_t))(v67 + 104))( v66,  enum case for SiriTimeEventSender.ReasonDescription.noAlarmsToCreate(_:),  v68);
    uint64_t v69 = (void *)swift_task_alloc(dword_D441C);
    *(void *)(v1 + 464) = v69;
    goto LABEL_19;
  }

  uint64_t v42 = *(void *)(v1 + 216);
  uint64_t v41 = *(void *)(v1 + 224);
  uint64_t v43 = *(void *)(v1 + 208);
  uint64_t v44 = *(void *)(v1 + 144);
  uint64_t v45 = swift_allocObject(&unk_CB4B0, 17LL, 7LL);
  *(void *)(v1 + 360) = v45;
  *(_BYTE *)(v45 + 16) = 0;
  uint64_t v46 = static os_signpost_type_t.begin.getter(v45);
  uint64_t v47 = *(void *)(v44 + 32);
  *(void *)(v1 + 368) = v47;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v46,  &dword_0,  v47,  "RecreateDeletedAlarmsFlowCreateAllAlarms",  40LL,  2LL,  v41);
  id v48 = *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8);
  *(void *)(v1 + 376) = v48;
  sub_19780(v48);
  uint64_t v49 = *(void *)(v31 + 40);
  *(void *)(v1 + 384) = v49;
  uint64_t v50 = *(void *)(v49 + 16);
  *(void *)(v1 + 392) = v50;
  if (!v50)
  {
    sub_2D1B8();
    uint64_t v72 = sub_2D234();
    sub_2D154(v72, (uint64_t)&dword_0, v73, (uint64_t)"RecreateDeletedAlarmsFlowCreateAllAlarms");
    sub_2D284();
    sub_2D018(v22 + 48, v1 + 64);
    if (*(void *)(v22 + 48) >> 62)
    {
      sub_2CFD0();
      uint64_t v76 = sub_2D1F4();
      sub_16C48();
      if (v76) {
        goto LABEL_22;
      }
    }

    else
    {
      sub_2D220();
      if (v43)
      {
LABEL_22:
        sub_2D018(*(void *)(v1 + 360) + 16LL, v1 + 88);
        uint64_t v74 = (void *)swift_task_alloc(dword_D4414);
        *(void *)(v1 + 448) = v74;
        sub_2D29C(v74, (uint64_t)sub_29BEC);
        sub_2CFE4();
        return sub_2C34C(v75);
      }
    }

    sub_2D1B0(*(void *)(v1 + 192));
    uint64_t v69 = (void *)swift_task_alloc(dword_D441C);
    *(void *)(v1 + 440) = v69;
LABEL_19:
    sub_2D16C(v69);
    sub_2CFE4();
    return sub_2ADB0(v70, v71);
  }

  *(void *)(v1 + 400) = type metadata accessor for CreateAlarmIntent(0LL);
  *(void *)(v1 + 408) = 0LL;
  uint64_t v52 = *(void *)(v49 + 48);
  unint64_t v51 = *(void *)(v49 + 56);
  uint64_t v53 = *(void *)(v49 + 64);
  char v54 = *(_BYTE *)(v49 + 72);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v49 + 32);
  *(void *)(v1 + 32) = v52;
  *(void *)(v1 + 40) = v51;
  *(void *)(v1 + 48) = v53;
  *(_BYTE *)(v1 + 56) = v54;
  sub_2D0CC(v51);
  sub_2D0CC(v53);
  sub_176C8();
  id v55 = sub_22750((void *)(v1 + 16));
  *(void *)(v1 + 416) = v55;
  uint64_t v56 = HIBYTE(v51) & 0xF;
  if ((v51 & 0x2000000000000000LL) == 0) {
    uint64_t v56 = v52 & 0xFFFFFFFFFFFFLL;
  }
  if (v56) {
    *(_BYTE *)(*(void *)(v1 + 144) + 96LL) = 1;
  }
  uint64_t v57 = *(void *)(v1 + 360);
  uint64_t v58 = *(void *)(v1 + 144);
  sub_16F40();
  sub_16D58();
  uint64_t v59 = swift_task_alloc(48LL);
  *(void *)(v1 + 424) = v59;
  *(void *)(v59 + 16) = v58;
  *(void *)(v59 + 24) = v55;
  *(_BYTE *)(v59 + 32) = v54 ^ 1;
  *(void *)(v59 + 40) = v57;
  uint64_t v60 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v1 + 432) = v60;
  *uint64_t v60 = v1;
  v60[1] = sub_298F0;
  sub_2D0A0();
  sub_2CFE4();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_298F0()
{
  return sub_1988C();
}

uint64_t sub_29928()
{
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 392);

  if (v2 + 1 == v3)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 384));
    sub_2D1B8();
    uint64_t v4 = sub_2D234();
    sub_2D154(v4, (uint64_t)&dword_0, v5, (uint64_t)"RecreateDeletedAlarmsFlowCreateAllAlarms");
    sub_2D284();
    sub_2D018(v1 + 48, v0 + 64);
    if (*(void *)(v1 + 48) >> 62)
    {
      sub_2CFD0();
      uint64_t v21 = sub_2D1F4();
      sub_16C48();
      if (v21) {
        goto LABEL_4;
      }
    }

    else
    {
      sub_2D220();
      if (v3)
      {
LABEL_4:
        sub_2D018(*(void *)(v0 + 360) + 16LL, v0 + 88);
        uint64_t v6 = (void *)swift_task_alloc(dword_D4414);
        *(void *)(v0 + 448) = v6;
        sub_2D29C(v6, (uint64_t)sub_29BEC);
        sub_2D1CC();
        return sub_2C34C(v7);
      }
    }

    sub_2D1B0(*(void *)(v0 + 192));
    uint64_t v22 = (void *)swift_task_alloc(dword_D441C);
    *(void *)(v0 + 440) = v22;
    sub_2D16C(v22);
    sub_2D1CC();
    return sub_2ADB0(v23, v24);
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 408) + 1LL;
    *(void *)(v0 + 408) = v9;
    uint64_t v10 = *(void *)(v0 + 384) + 48 * v9;
    uint64_t v12 = *(void *)(v10 + 48);
    unint64_t v11 = *(void *)(v10 + 56);
    uint64_t v13 = *(void *)(v10 + 64);
    char v14 = *(_BYTE *)(v10 + 72);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v10 + 32);
    *(void *)(v0 + 32) = v12;
    *(void *)(v0 + 40) = v11;
    *(void *)(v0 + 48) = v13;
    *(_BYTE *)(v0 + 56) = v14;
    sub_2D0CC(v11);
    sub_2D0CC(v13);
    id v15 = sub_22750((void *)(v0 + 16));
    *(void *)(v0 + 416) = v15;
    uint64_t v16 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000LL) == 0) {
      uint64_t v16 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (v16) {
      *(_BYTE *)(*(void *)(v0 + 144) + 96LL) = 1;
    }
    uint64_t v17 = *(void *)(v0 + 360);
    uint64_t v18 = *(void *)(v0 + 144);
    sub_16F40();
    sub_16D58();
    uint64_t v19 = swift_task_alloc(48LL);
    *(void *)(v0 + 424) = v19;
    *(void *)(v19 + 16) = v18;
    *(void *)(v19 + 24) = v15;
    *(_BYTE *)(v19 + 32) = v14 ^ 1;
    *(void *)(v19 + 40) = v17;
    uint64_t v20 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 432) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_298F0;
    sub_2D0A0();
    sub_2D1CC();
    return withCheckedContinuation<A>(isolation:function:_:)();
  }

uint64_t sub_29B4C()
{
  uint64_t v1 = *(void *)(v0 + 192);
  sub_25068(*(void *)(v0 + 440));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_19840();
  return sub_19744();
}

uint64_t sub_29B94()
{
  return sub_2858C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_29BEC()
{
  uint64_t v3 = *(void *)(v2 + 448);
  void *v4 = *v1;
  *(void *)(v2 + 456) = v0;
  swift_task_dealloc(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_29C3C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v15 = *(void *)(v0 + 312);
  uint64_t v16 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v8 = *(void *)(v0 + 232);
  uint64_t v20 = *(void *)(v0 + 160);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v17 = *(void *)(v0 + 144);
  (*(void (**)(uint64_t, void))(v0 + 304))(v5, enum case for ActivityType.completed(_:));
  sub_A40C(v6, 1LL, 1LL, v4);
  v1(v7, v2, v3);
  sub_2D11C(v7);
  sub_2D240(v8, 1LL);
  static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v5, v15, v6, v7, v8);
  sub_7EC4(v8, &qword_D43F8);
  sub_2D20C(v9, &qword_D4400);
  sub_7EC4(v6, &qword_D4408);
  v18(v5, v16);
  uint64_t v10 = v17 + OBJC_IVAR____TtC15AlarmFlowPlugin25RecreateDeletedAlarmsFlow_followupPluginAction;
  sub_2D018(v17 + OBJC_IVAR____TtC15AlarmFlowPlugin25RecreateDeletedAlarmsFlow_followupPluginAction, v0 + 112);
  sub_3F88(v10, v19, &qword_D43E0);
  if (sub_16880(v19, 1LL, v20) == 1)
  {
    sub_7EC4(*(void *)(v0 + 152), &qword_D43E0);
    static ExecuteResponse.complete()();
  }

  else
  {
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v11 = *(void *)(v0 + 176);
    uint64_t v13 = *(void *)(v0 + 160);
    sub_174B8(v11, *(void *)(v0 + 152), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
    static ExecuteResponse.redirect(nextPluginAction:)(v11);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  sub_17324();
  sub_2CF9C();
  sub_19808();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  sub_19820();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_29E30()
{
  uint64_t v1 = *v0;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)(v1 + 192);
  sub_1996C(&v5);
  swift_task_dealloc(v3);
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  swift_task_dealloc(*(void *)(v1 + 296));
  sub_19808();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  sub_19820();
  return sub_2858C((uint64_t (*)(void))v0[1]);
}

uint64_t sub_29EC4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_D441C);
  *(void *)(v0 + 472) = v1;
  uint64_t v2 = sub_2D16C(v1);
  return sub_2ADB0(v2, v3);
}

uint64_t sub_29F20()
{
  uint64_t v1 = *(void *)(v0 + 192);
  sub_25068(*(void *)(v0 + 472));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_19840();
  return sub_19744();
}

uint64_t sub_29F68()
{
  return sub_2858C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_29FC8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v27 = a5;
  uint64_t v28 = a3;
  int v26 = a4;
  uint64_t v25 = a1;
  uint64_t v6 = sub_26B0(&qword_D45F0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = static os_signpost_type_t.begin.getter(v12);
  uint64_t v16 = *(void *)(a2 + 32);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v15, &dword_0, v16, "RecreateDeletedAlarmsFlowCreateAlarm", 36LL, 2LL, v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_4698(a2 + 56, (uint64_t)v29);
  uint64_t v17 = v30;
  uint64_t v18 = v31;
  sub_80B4(v29, v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v25, v6);
  uint64_t v19 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v20 = (v19 + 40) & ~v19;
  uint64_t v21 = swift_allocObject(&unk_CB4D8, v20 + v8, v19 | 7);
  *(void *)(v21 + 16) = a2;
  *(_BYTE *)(v21 + 24) = v26;
  uint64_t v22 = v27;
  *(void *)(v21 + 32) = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21 + v20, v9, v6);
  swift_retain(a2);
  swift_retain(v22);
  dispatch thunk of SiriAlarmManager.createAlarm(intent:completion:)(v28, sub_2CCBC, v21, v17, v18);
  swift_release(v21);
  return _s20HandleIntentStrategyVwxx_1(v29);
}

void sub_2A198(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v98 = a5;
  uint64_t v92 = a4;
  int v93 = a3;
  uint64_t v96 = a1;
  uint64_t v6 = type metadata accessor for AlarmOperationError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v94 = (void **)((char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v87 - v10;
  uint64_t v97 = sub_26B0(&qword_D45F0);
  uint64_t v91 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v89 = v12;
  os_log_type_t v90 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_26B0(&qword_D45F8);
  __chkstk_darwin(v13);
  uint64_t v15 = (void **)((char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = static os_signpost_type_t.end.getter(v18);
  uint64_t v95 = a2;
  uint64_t v22 = *(void *)(a2 + 32);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v21, &dword_0, v22, "RecreateDeletedAlarmsFlowCreateAlarm", 36LL, 2LL, v20);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v88 = v16;
  v23(v20, v16);
  sub_3F88(v96, (uint64_t)v15, &qword_D45F8);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
  {
    uint64_t v24 = *(void (**)(char *, void **, uint64_t))(v7 + 32);
    v24(v11, v15, v6);
    uint64_t v25 = v7;
    uint64_t v26 = v6;
    uint64_t v27 = v11;
    if (qword_D2FD8 != -1) {
      swift_once(&qword_D2FD8, sub_28944);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_26F0(v28, (uint64_t)qword_D43C8);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v29, v30, v31, v32, v33, v34, v35, v36);
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_0, v37, v38, "Failed to create alarm", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    CheckedContinuation.resume(returning:)(v40, v97);
    uint64_t v41 = type metadata accessor for ABCReport(0LL);
    uint64_t v101 = v41;
    uint64_t v102 = &protocol witness table for ABCReport;
    uint64_t v42 = sub_19558(v100);
    uint64_t v43 = v94;
    (*(void (**)(void **, char *, uint64_t))(v25 + 16))(v94, v27, v26);
    sub_16A6C( &qword_D4600,  (uint64_t (*)(uint64_t))&type metadata accessor for AlarmOperationError,  (uint64_t)&protocol conformance descriptor for AlarmOperationError);
    uint64_t v45 = swift_allocError(v26, v44, 0LL, 0LL);
    v24(v46, v43, v26);
    *uint64_t v42 = _convertErrorToNSError(_:)(v45);
    uint64_t v47 = enum case for ErrorSubType.managerReturnedError(_:);
    uint64_t v48 = type metadata accessor for ErrorSubType(0LL);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 104LL))(v42, v47, v48);
    (*(void (**)(void *, void, uint64_t))(*(void *)(v41 - 8) + 104LL))( v42,  enum case for ABCReport.alarmUndoHandle(_:),  v41);
    static BarbaraWalters.stopThePresses(for:)(v100);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v26);
    _s20HandleIntentStrategyVwxx_1(v100);
    swift_errorRelease(v45);
  }

  else
  {
    uint64_t v49 = *v15;
    if (qword_D2FD8 != -1) {
      swift_once(&qword_D2FD8, sub_28944);
    }
    uint64_t v50 = type metadata accessor for Logger(0LL);
    uint64_t v51 = sub_26F0(v50, (uint64_t)qword_D43C8);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v51, v52, v53, v54, v55, v56, v57, v58);
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl(&dword_0, v59, v60, "Successfully created", v61, 2u);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    if ((v93 & 1) != 0)
    {
      uint64_t v62 = static os_signpost_type_t.begin.getter();
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)( v62,  &dword_0,  v22,  "RecreateDeletedAlarmsFlowDisableAlarm",  37LL,  2LL,  v20);
      v23(v20, v88);
      uint64_t v63 = v95;
      sub_4698(v95 + 56, (uint64_t)v100);
      uint64_t v64 = v101;
      uint64_t v96 = (uint64_t)v102;
      uint64_t v94 = (void **)sub_80B4(v100, v101);
      uint64_t v65 = sub_26B0(&qword_D4188);
      uint64_t v66 = swift_allocObject(v65, 40LL, 7LL);
      *(_OWORD *)(v66 + 16) = xmmword_A4CD0;
      *(void *)(v66 + 32) = v49;
      uint64_t v99 = v66;
      specialized Array._endMutation()(v66, v67, v68, v69);
      uint64_t v70 = v99;
      uint64_t v72 = v90;
      uint64_t v71 = v91;
      uint64_t v73 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, v98, v97);
      uint64_t v74 = *(unsigned __int8 *)(v71 + 80);
      uint64_t v75 = (v74 + 40) & ~v74;
      uint64_t v76 = (char *)swift_allocObject(&unk_CB500, v75 + v89, v74 | 7);
      uint64_t v77 = v92;
      *((void *)v76 + 2) = v63;
      *((void *)v76 + sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = v77;
      *((void *)v76 + 4) = v49;
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(&v76[v75], v72, v73);
      id v78 = v49;
      swift_retain(v63);
      swift_retain(v77);
      dispatch thunk of SiriAlarmManager.disableAlarms(alarms:completion:)(v70, sub_2CD48, v76, v64, v96);

      swift_bridgeObjectRelease(v70);
      swift_release(v76);
      _s20HandleIntentStrategyVwxx_1(v100);
    }

    else
    {
      uint64_t v79 = v95;
      swift_beginAccess(v95 + 48, v100, 33LL, 0LL);
      id v80 = v49;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v80);
      uint64_t v81 = *(void *)((char *)&dword_10 + (*(void *)(v79 + 48) & 0xFFFFFFFFFFFFF8LL));
      sub_43C48(v81);
      uint64_t v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v80);
      specialized Array._endMutation()(v82, v83, v84, v85);
      uint64_t v86 = swift_endAccess(v100);
      CheckedContinuation.resume(returning:)(v86, v97);
    }
  }

uint64_t sub_2A7C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v91 = a5;
  uint64_t v92 = a1;
  id v89 = a4;
  uint64_t v87 = a3;
  uint64_t v6 = type metadata accessor for AlarmOperationError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v88 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v87 - v10;
  uint64_t v12 = sub_26B0(&qword_D4608);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = static os_signpost_type_t.end.getter(v17);
  uint64_t v90 = a2;
  uint64_t v21 = *(void *)(a2 + 32);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v20, &dword_0, v21, "RecreateDeletedAlarmsFlowDisableAlarm", 37LL, 2LL, v19);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  sub_3F88(v92, (uint64_t)v14, &qword_D4608);
  if (swift_getEnumCaseMultiPayload(v14, v12) != 1)
  {
    uint64_t v53 = *v14;
    if (qword_D2FD8 != -1) {
      swift_once(&qword_D2FD8, sub_28944);
    }
    uint64_t v54 = (_BYTE *)(v87 + 16);
    uint64_t v55 = type metadata accessor for Logger(0LL);
    uint64_t v56 = sub_26F0(v55, (uint64_t)qword_D43C8);
    uint64_t v64 = (os_log_s *)Logger.logObject.getter(v56, v57, v58, v59, v60, v61, v62, v63);
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl(&dword_0, v64, v65, "Successfully disabled", v66, 2u);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    swift_beginAccess(v54, v94, 1LL, 0LL);
    *uint64_t v54 = 1;
    if ((unint64_t)v53 >> 62)
    {
      if (v53 < 0) {
        uint64_t v76 = v53;
      }
      else {
        uint64_t v76 = v53 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v53);
      uint64_t v77 = _CocoaArrayWrapper.endIndex.getter(v76);
      swift_bridgeObjectRelease(v53);
      if (v77) {
        goto LABEL_13;
      }
    }

    else if (*(void *)((char *)&dword_10 + (v53 & 0xFFFFFFFFFFFFF8LL)))
    {
LABEL_13:
      sub_44080(0LL, (v53 & 0xC000000000000001LL) == 0, v53);
      if ((v53 & 0xC000000000000001LL) != 0) {
        id v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v53);
      }
      else {
        id v67 = *(id *)(v53 + 32);
      }
      uint64_t v68 = v67;
      swift_bridgeObjectRelease(v53);
      uint64_t v69 = v90;
      swift_beginAccess(v90 + 48, v93, 33LL, 0LL);
      id v70 = v68;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v70);
      uint64_t v71 = *(void *)((char *)&dword_10 + (*(void *)(v69 + 48) & 0xFFFFFFFFFFFFF8LL));
      sub_43C48(v71);
      uint64_t v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v70);
      specialized Array._endMutation()(v72, v73, v74, v75);
      swift_endAccess(v93);

      goto LABEL_21;
    }

    swift_bridgeObjectRelease(v53);
    uint64_t v78 = v90;
    swift_beginAccess(v90 + 48, v93, 33LL, 0LL);
    id v79 = v89;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
    uint64_t v80 = *(void *)((char *)&dword_10 + (*(void *)(v78 + 48) & 0xFFFFFFFFFFFFF8LL));
    sub_43C48(v80);
    uint64_t v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v79);
    specialized Array._endMutation()(v81, v82, v83, v84);
    swift_endAccess(v93);
    goto LABEL_21;
  }

  uint64_t v22 = *(void (**)(char *, uint64_t *, uint64_t))(v7 + 32);
  v22(v11, v14, v6);
  uint64_t v23 = v7;
  uint64_t v24 = v6;
  uint64_t v25 = v11;
  if (qword_D2FD8 != -1) {
    swift_once(&qword_D2FD8, sub_28944);
  }
  uint64_t v26 = type metadata accessor for Logger(0LL);
  uint64_t v27 = sub_26F0(v26, (uint64_t)qword_D43C8);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v27, v28, v29, v30, v31, v32, v33, v34);
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_0, v35, v36, "Failed to disable", v37, 2u);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  uint64_t v38 = v90;
  swift_beginAccess(v90 + 48, v94, 33LL, 0LL);
  id v39 = v89;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v39);
  uint64_t v40 = *(void *)((char *)&dword_10 + (*(void *)(v38 + 48) & 0xFFFFFFFFFFFFF8LL));
  sub_43C48(v40);
  uint64_t v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v39);
  specialized Array._endMutation()(v41, v42, v43, v44);
  swift_endAccess(v94);
  uint64_t v45 = type metadata accessor for ABCReport(0LL);
  v94[3] = v45;
  v94[4] = &protocol witness table for ABCReport;
  uint64_t v46 = sub_19558(v94);
  uint64_t v47 = v88;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v88, v25, v24);
  sub_16A6C( &qword_D4600,  (uint64_t (*)(uint64_t))&type metadata accessor for AlarmOperationError,  (uint64_t)&protocol conformance descriptor for AlarmOperationError);
  uint64_t v49 = swift_allocError(v24, v48, 0LL, 0LL);
  v22(v50, (uint64_t *)v47, v24);
  *uint64_t v46 = _convertErrorToNSError(_:)(v49);
  uint64_t v51 = enum case for ErrorSubType.managerReturnedError(_:);
  uint64_t v52 = type metadata accessor for ErrorSubType(0LL);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 104LL))(v46, v51, v52);
  (*(void (**)(void *, void, uint64_t))(*(void *)(v45 - 8) + 104LL))( v46,  enum case for ABCReport.alarmUndoHandle(_:),  v45);
  static BarbaraWalters.stopThePresses(for:)(v94);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v24);
  _s20HandleIntentStrategyVwxx_1(v94);
  swift_errorRelease(v49);
LABEL_21:
  uint64_t v85 = sub_26B0(&qword_D45F0);
  return CheckedContinuation.resume(returning:)(v85, v85);
}

uint64_t sub_2ADB0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for NLContextUpdate(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_19754(v5);
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v3[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v3[9] = v7;
  v3[10] = sub_19754(v7);
  uint64_t v8 = sub_16C80();
  v3[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[12] = v9;
  v3[13] = sub_19754(v9);
  uint64_t v10 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[14] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[15] = v11;
  v3[16] = sub_19754(v11);
  uint64_t v12 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[17] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[18] = v13;
  v3[19] = sub_19754(v13);
  uint64_t v14 = sub_26B0(&qword_D43F8);
  v3[20] = sub_19754(*(void *)(v14 - 8));
  uint64_t v15 = sub_26B0(&qword_D4400);
  v3[21] = sub_19754(*(void *)(v15 - 8));
  uint64_t v16 = sub_26B0(&qword_D4408);
  v3[22] = sub_19754(*(void *)(v16 - 8));
  uint64_t v17 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  v3[23] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v3[24] = v18;
  v3[25] = sub_19754(v18);
  uint64_t v19 = type metadata accessor for ActivityType(0LL);
  v3[26] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v3[27] = v20;
  v3[28] = sub_19754(v20);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_2AEE8()
{
  if (qword_D2FE0 != -1) {
    swift_once(&qword_D2FE0, sub_2898C);
  }
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v5 = sub_26F0(v3, (uint64_t)qword_D8198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  uint64_t v6 = enum case for SiriKitReliabilityCodes.genericError(_:);
  uint64_t v7 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104LL))(v4, v6, v7);
  sub_2D240(v4, 0LL);
  if (qword_D2FE8 != -1) {
    swift_once(&qword_D2FE8, sub_289A8);
  }
  uint64_t v8 = v0[28];
  uint64_t v9 = v0[25];
  uint64_t v39 = v0[27];
  uint64_t v40 = v0[26];
  uint64_t v10 = v0[24];
  uint64_t v12 = v0[21];
  uint64_t v11 = v0[22];
  uint64_t v13 = v0[20];
  uint64_t v14 = v0[3];
  uint64_t v15 = type metadata accessor for SiriTimeEventSender.Attribute(0LL);
  uint64_t v16 = sub_26F0(v15, (uint64_t)qword_D81B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v12, v16, v15);
  sub_2D11C(v12);
  uint64_t v17 = type metadata accessor for SiriTimeEventSender.ReasonDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v13, v14, v17);
  sub_2D11C(v13);
  uint64_t v18 = static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v8, v9, v11, v12, v13);
  sub_2D20C(v18, &qword_D43F8);
  sub_7EC4(v12, &qword_D4400);
  sub_7EC4(v11, &qword_D4408);
  sub_1704C(v9, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v8, v40);
  if (qword_D2FD8 != -1) {
    swift_once(&qword_D2FD8, sub_28944);
  }
  uint64_t v19 = sub_26F0(v0[11], (uint64_t)qword_D43C8);
  v0[29] = v19;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v19, v20, v21, v22, v23, v24, v25, v26);
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (sub_16C38(v28))
  {
    uint64_t v29 = (uint8_t *)sub_16AC4(2LL);
    *(_WORD *)uint64_t v29 = 0;
    sub_16B44( &dword_0,  v27,  (os_log_type_t)v9,  "Hitting alarm RF codepath for RecreateDeletedAlarmsFlow error case.",  v29);
    sub_16AA8((uint64_t)v29);
  }

  uint64_t v31 = v0[15];
  uint64_t v30 = v0[16];
  uint64_t v33 = v0[13];
  uint64_t v32 = v0[14];
  uint64_t v34 = v0[11];
  uint64_t v35 = v0[12];

  (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))( v30,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v33, v19, v34);
  uint64_t v36 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v30, v33, v36);
  uint64_t v37 = (void *)swift_task_alloc(dword_D50B4);
  v0[30] = v37;
  *uint64_t v37 = v0;
  v37[1] = sub_2B1F0;
  return sub_46454();
}

uint64_t sub_2B1F0(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = v7;
  sub_1996C(&v7);
  *(void *)(v4 + 248) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(void *)(v4 + 256) = a1;
  }
  sub_19840();
  return sub_19744();
}

uint64_t sub_2B250()
{
  uint64_t v1 = static DialogPhase.error.getter();
  NLContextUpdate.init()(v1);
  v0[33] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_2B2C4;
  return PatternExecutionResult.generateFlowPatternResponse(phase:contextUpdate:measure:)(v0[2], v0[10], v0[7], v0[19]);
}

uint64_t sub_2B2C4()
{
  uint64_t v1 = (void *)v0[32];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[6];
  sub_25068(v0[33]);

  sub_1704C(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_19840();
  sub_2D1CC();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_2B334()
{
  return sub_19704(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2B39C()
{
  uint64_t v2 = *(void **)(v0 + 232);
  uint64_t v3 = sub_19838(*(void *)(v0 + 144));
  Logger.logObject.getter(v3, v4, v5, v6, v7, v8, v9, v10);
  os_log_type_t v11 = sub_17714();
  if (sub_1990C(v11))
  {
    uint64_t v12 = (_WORD *)sub_16AC4(2LL);
    *uint64_t v12 = 0;
    sub_198C0(&dword_0, v13, v14, "Failed to produce Incomplete response.");
    sub_16AA8((uint64_t)v12);
  }

  static ExecuteResponse.complete()();
  sub_2CF7C();
  sub_2D07C();
  sub_19808();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  sub_19820();
  swift_task_dealloc(v1);
  return sub_19704(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2B45C(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 320) = a2;
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = v2;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  *(void *)(v3 + 80) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 88) = v5;
  *(void *)(v3 + 96) = sub_250D0(v5);
  *(void *)(v3 + 104) = swift_task_alloc(v2);
  uint64_t v6 = sub_16C80();
  *(void *)(v3 + 112) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v3 + 120) = v7;
  *(void *)(v3 + 128) = sub_19754(v7);
  uint64_t v8 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  *(void *)(v3 + 136) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v3 + 144) = v9;
  *(void *)(v3 + 152) = sub_19754(v9);
  uint64_t v10 = type metadata accessor for SiriTimeMeasurement(0LL);
  *(void *)(v3 + 160) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v3 + 168) = v11;
  *(void *)(v3 + 176) = sub_250D0(v11);
  *(void *)(v3 + 184) = swift_task_alloc(v2);
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  *(void *)(v3 + 192) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v3 + 200) = v13;
  *(void *)(v3 + 208) = sub_19754(v13);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_2B52C()
{
  uint64_t v2 = (uint64_t *)(*(void *)(v1 + 72) + 48LL);
  sub_2D018((uint64_t)v2, v1 + 16);
  sub_2D220();
  if (!v0)
  {
LABEL_44:
    unint64_t v58 = sub_2CC3C();
    uint64_t v59 = swift_allocError(&type metadata for RecreateDeletedAlarmsFlow.RecreateAlarmError, v58, 0LL, 0LL);
    *uint64_t v60 = 0;
    swift_willThrow(v59, v60, v61, v62, v63, v64, v65, v66);
    swift_task_dealloc(*(void *)(v1 + 208));
    sub_19800();
    sub_1978C();
    sub_19794();
    sub_197C0();
    sub_19830();
    sub_19828();
    sub_2CFE4();
    __asm { BR              X0 }
  }

  while (1)
  {
    uint64_t v3 = *v2;
    if (!((unint64_t)*v2 >> 62))
    {
      sub_2D220();
      sub_176C8();
      goto LABEL_5;
    }

    sub_2CFD0();
    if (!sub_2D1F4())
    {
      sub_16C48();
      goto LABEL_44;
    }

LABEL_5:
    sub_44080(0LL, (v3 & 0xC000000000000001LL) == 0, v3);
    if ((v3 & 0xC000000000000001LL) != 0) {
      id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3);
    }
    else {
      id v4 = *(id *)(v3 + 32);
    }
    uint64_t v91 = v4;
    *(void *)(v1 + 216) = v4;
    uint64_t v5 = *(void *)(v1 + 208);
    int v6 = *(unsigned __int8 *)(v1 + 320);
    sub_16C48();
    sub_176C8();
    sub_6044();
    sub_16C48();
    if (v6 == 1)
    {
      if (qword_D2FD8 != -1) {
        swift_once(&qword_D2FD8, sub_28944);
      }
      sub_26F0(*(void *)(v1 + 112), (uint64_t)qword_D43C8);
      uint64_t v7 = (os_log_s *)sub_16D50();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (sub_16D30(v8))
      {
        uint64_t v9 = (uint8_t *)sub_16AC4(2LL);
        *(_WORD *)uint64_t v9 = 0;
        sub_16B44(&dword_0, v7, (os_log_type_t)v5, "Producing dialog for creating a disabled alarm.", v9);
        sub_16AA8((uint64_t)v9);
      }
    }

    if (qword_D2FD8 != -1) {
      swift_once(&qword_D2FD8, sub_28944);
    }
    uint64_t v10 = *(void *)(v1 + 72);
    uint64_t v11 = sub_26F0(*(void *)(v1 + 112), (uint64_t)qword_D43C8);
    *(void *)(v1 + 224) = v11;
    uint64_t v12 = swift_retain(v10);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v12, v13, v14, v15, v16, v17, v18, v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)sub_16AC4(12LL);
      *(_DWORD *)uint64_t v22 = 134217984;
      uint64_t v23 = *v2;
      if ((unint64_t)*v2 >> 62)
      {
        if (v23 < 0) {
          uint64_t v69 = *v2;
        }
        else {
          uint64_t v69 = v23 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v2);
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v69);
        sub_17900();
      }

      else
      {
        uint64_t v24 = *(void *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFF8LL));
      }

      uint64_t v25 = *(void *)(v1 + 72);
      *(void *)(v1 + 56) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v22 + 4, v22 + 12);
      swift_release(v25);
      _os_log_impl(&dword_0, v20, v21, "Restored %ld alarms.", v22, 0xCu);
      sub_16AA8((uint64_t)v22);
    }

    else
    {
      swift_release(*(void *)(v1 + 72));
    }

    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v26, v27, v28, v29, v30, v31, v32, v33);
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)uint64_t v36 = 0;
      sub_16B44(&dword_0, v34, v35, "Hitting alarm RF codepath for RecreateDeletedAlarms flow.", v36);
      sub_16AA8((uint64_t)v36);
    }

    uint64_t v37 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      if (v37 < 0) {
        uint64_t v68 = *v2;
      }
      else {
        uint64_t v68 = v37 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v2);
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v68);
      swift_bridgeObjectRelease(v37);
    }

    else
    {
      uint64_t v38 = *(void *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFF8LL));
    }

    uint64_t v39 = *(void *)(v1 + 128);
    uint64_t v40 = *(void *)(v1 + 112);
    uint64_t v41 = *(void *)(v1 + 120);
    sub_2D1B0(*(void *)(v1 + 144));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v39, v11, v40);
    uint64_t v42 = mach_absolute_time();
    uint64_t v43 = *(void *)(v1 + 152);
    uint64_t v44 = *(void *)(v1 + 128);
    if (v38 < 2)
    {
      SiriTimeMeasurement.init(_:log:startTime:)(v43, v44, v42);
      uint64_t v53 = unk_D511C;
      id v54 = v91;
      uint64_t v55 = (void *)swift_task_alloc(v53);
      *(void *)(v1 + 280) = v55;
      sub_2D2B0(v55, (uint64_t)sub_2BDA4);
      sub_2CFE4();
      __asm { BR              X6 }
    }

    SiriTimeMeasurement.init(_:log:startTime:)(v43, v44, v42);
    uint64_t v45 = *v2;
    if (!((unint64_t)*v2 >> 62))
    {
      uint64_t v46 = *(void *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFF8LL));
      sub_2D0CC(*v2);
      if (!v46) {
        break;
      }
      goto LABEL_27;
    }

    uint64_t v70 = v45 < 0 ? *v2 : v45 & 0xFFFFFFFFFFFFFF8LL;
    sub_2D0CC(*v2);
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter(v70);
    if (!v46) {
      break;
    }
LABEL_27:
    uint64_t v47 = 0LL;
    while (1)
    {
      id v48 = (v45 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v45)
          : *(id *)(v45 + 8 * v47 + 32);
      uint64_t v49 = v48;
      uint64_t v50 = v47 + 1;
      if (__OFADD__(v47, 1LL)) {
        break;
      }
      id v51 = [v48 sleepAlarmAttribute];

      ++v47;
      if (v51) {
        BOOL v52 = 1;
      }
      else {
        BOOL v52 = v50 == v46;
      }
      if (v52) {
        goto LABEL_58;
      }
    }

    __break(1u);
LABEL_40:
    sub_2CFD0();
    uint64_t v57 = sub_2D1F4();
    sub_16C48();
    if (!v57) {
      goto LABEL_44;
    }
  }

LABEL_58:
  swift_bridgeObjectRelease_n(v45, 2LL);
  uint64_t v71 = *v2;
  if (!((unint64_t)v71 >> 62))
  {
    uint64_t v72 = *(void *)((char *)&dword_10 + (v71 & 0xFFFFFFFFFFFFF8LL));
    uint64_t result = sub_2D0CC(v71);
    if (v72) {
      goto LABEL_60;
    }
LABEL_75:
    sub_16F40();
    *(void *)(v1 + 232) = _swiftEmptyArrayStorage;
    sub_16F40();
    uint64_t v87 = unk_D5114;
    id v88 = v91;
    id v89 = (void *)swift_task_alloc(v87);
    *(void *)(v1 + 240) = v89;
    sub_2D2B0(v89, (uint64_t)sub_2BC04);
    sub_2CFE4();
    __asm { BR              X8 }
  }

  if (v71 < 0) {
    uint64_t v86 = v71;
  }
  else {
    uint64_t v86 = v71 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_2D0CC(v71);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v86);
  uint64_t v72 = result;
  if (!result) {
    goto LABEL_75;
  }
LABEL_60:
  if (v72 >= 1)
  {
    for (uint64_t i = 0LL; i != v72; ++i)
    {
      if ((v71 & 0xC000000000000001LL) != 0) {
        id v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v71);
      }
      else {
        id v75 = *(id *)(v71 + 8 * i + 32);
      }
      uint64_t v76 = v75;
      sub_4828C();
      uint64_t v78 = v77;

      if (v78)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
        unint64_t v81 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v80 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        if (v81 >= v80 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1LL);
        }
        uint64_t v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v78);
        specialized Array._endMutation()(v82, v83, v84, v85);
      }
    }

    goto LABEL_75;
  }

  __break(1u);
  return result;
}

uint64_t sub_2BC04()
{
  uint64_t v2 = v0[30];
  v0[31] = v3;
  v0[32] = v1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v0[29]);
  sub_19840();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_2BC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  os_log_type_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 264) = v8;
  *os_log_type_t v8 = v7;
  v8[1] = sub_2BCD0;
  return sub_197F4();
}

uint64_t sub_2BCD0()
{
  v0[34] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[31];
  sub_19838(v0[11]);

  sub_19840();
  return sub_19744();
}

uint64_t sub_2BD34()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);

  sub_1704C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_2D13C();
  sub_19808();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  return sub_2D0D4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2BDA4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 280);
  *(void *)(v3 + 288) = a1;
  *(void *)(v3 + 296) = v1;
  swift_task_dealloc(v4);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_2BE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  os_log_type_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 304) = v8;
  *os_log_type_t v8 = v7;
  v8[1] = sub_2BE68;
  return sub_197F4();
}

uint64_t sub_2BE68()
{
  v0[39] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[36];
  sub_19838(v0[11]);

  sub_19840();
  return sub_19744();
}

uint64_t sub_2BECC()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);

  sub_1704C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_2D13C();
  sub_19808();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  return sub_2D0D4(*(uint64_t (**)(void))(v0 + 8));
}

#error "2BFB8: call analysis failed (funcsize=62)"
#error "2C0BC: call analysis failed (funcsize=62)"
#error "2C1C0: call analysis failed (funcsize=62)"
#error "2C2C4: call analysis failed (funcsize=62)"
uint64_t sub_2C34C(char a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v3 = (void *)swift_task_alloc(dword_D446C);
  *(void *)(v1 + 96) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_2C3AC;
  return sub_2B45C(v1 + 16, a1);
}

uint64_t sub_2C3AC()
{
  uint64_t v3 = *(void *)(v2 + 96);
  void *v4 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_2C3FC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  sub_80B4(v0 + 7, v1);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v0[14] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_2C480;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 2, v1, v2);
}

uint64_t sub_2C480()
{
  uint64_t v3 = *(void *)(v2 + 112);
  void *v4 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_2C4D0()
{
  return sub_1B5EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2C4F8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2C504()
{
  return sub_1B5EC(*(uint64_t (**)(void))(v0 + 8));
}

BOOL sub_2C52C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_2C53C(uint64_t a1, char a2)
{
}

Swift::Int sub_2C560(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_2C5A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2C52C(*a1, *a2);
}

Swift::Int sub_2C5B0()
{
  return sub_2C560(*v0);
}

void sub_2C5B8(uint64_t a1)
{
}

Swift::Int sub_2C5C0(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t RecreateDeletedAlarmsFlow.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  _s20HandleIntentStrategyVwxx_1((void *)(v0 + 56));
  sub_7EC4(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin25RecreateDeletedAlarmsFlow_followupPluginAction, &qword_D43E0);
  return v0;
}

uint64_t RecreateDeletedAlarmsFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_2C680()
{
  return RecreateDeletedAlarmsFlow.on(input:)() & 1;
}

uint64_t sub_2C6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_24DC4;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_2C70C(uint64_t a1, uint64_t a2)
{
  return RecreateDeletedAlarmsFlow.execute(completion:)(a1, a2);
}

uint64_t sub_2C72C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_D43F4);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_24D34;
  return RecreateDeletedAlarmsFlow.execute()(a1);
}

uint64_t sub_2C780(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for RecreateDeletedAlarmsFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_2C7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RecreateDeletedAlarmsFlow(0LL);
  uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  uint64_t v12 = sub_2C964((uint64_t)v9, v11, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return v12;
}

uint64_t sub_2C868(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_2C890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2D180();
  uint64_t v11 = type metadata accessor for SiriAlarmManagerImpl(v4);
  uint64_t v12 = &protocol witness table for SiriAlarmManagerImpl;
  *(void *)&__int128 v10 = a1;
  type metadata accessor for CreateAlarmCATs_Async(0LL);
  sub_2D2C4();
  *(void *)(a2 + 16) = sub_2D278();
  type metadata accessor for CreateAlarmCATPatternsExecutor(0LL);
  sub_2D2C4();
  *(void *)(a2 + 24) = sub_2D278();
  *(void *)(a2 + 32) = _s15AlarmFlowPlugin021RecreateDeletedAlarmsB0C11osLogObject33_DB4DDA2311F8F0836B4CA98F718F999FLLSo03OS_G4_logCvpfi_0();
  *(void *)(a2 + 40) = &_swiftEmptyArrayStorage;
  *(void *)(a2 + 48) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 96) = 0;
  uint64_t v5 = a2 + OBJC_IVAR____TtC15AlarmFlowPlugin25RecreateDeletedAlarmsFlow_followupPluginAction;
  uint64_t v6 = type metadata accessor for PluginAction(0LL);
  sub_23050(v5, v7, v8, v6);
  sub_46FC(&v10, a2 + 56);
  return a2;
}

uint64_t sub_2C964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v8);
  __int128 v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v11 = sub_19558(&v16);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))(v11, a1, a3);
  type metadata accessor for CreateAlarmCATs_Async(0LL);
  static CATOption.defaultMode.getter();
  *(void *)(a2 + 16) = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  type metadata accessor for CreateAlarmCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  *(void *)(a2 + 24) = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  *(void *)(a2 + 32) = _s15AlarmFlowPlugin021RecreateDeletedAlarmsB0C11osLogObject33_DB4DDA2311F8F0836B4CA98F718F999FLLSo03OS_G4_logCvpfi_0();
  *(void *)(a2 + 40) = _swiftEmptyArrayStorage;
  *(void *)(a2 + 48) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 96) = 0;
  uint64_t v12 = a2 + OBJC_IVAR____TtC15AlarmFlowPlugin25RecreateDeletedAlarmsFlow_followupPluginAction;
  uint64_t v13 = type metadata accessor for PluginAction(0LL);
  sub_A40C(v12, 1LL, 1LL, v13);
  sub_46FC(&v16, a2 + 56);
  return a2;
}

uint64_t type metadata accessor for RecreateDeletedAlarmsFlow(uint64_t a1)
{
  uint64_t result = qword_D4458;
  if (!qword_D4458) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RecreateDeletedAlarmsFlow);
  }
  return result;
}

uint64_t sub_2CAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D43E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_2CB10()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_2CB20(uint64_t a1)
{
  return sub_29FC8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_2CB30()
{
  return type metadata accessor for RecreateDeletedAlarmsFlow(0LL);
}

void sub_2CB38(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[5] = "(";
  v4[6] = &unk_A4FF8;
  sub_2CBE8(319LL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
  }

void sub_2CBE8(uint64_t a1)
{
  if (!qword_D4470)
  {
    uint64_t v2 = type metadata accessor for PluginAction(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_D4470);
    }
  }

unint64_t sub_2CC3C()
{
  unint64_t result = qword_D45E0;
  if (!qword_D45E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_A508C, &type metadata for RecreateDeletedAlarmsFlow.RecreateAlarmError);
    atomic_store(result, (unint64_t *)&qword_D45E0);
  }

  return result;
}

uint64_t sub_2CC78()
{
  return sub_2D12C(v0, v1, v2);
}

void sub_2CCBC(uint64_t a1)
{
}

uint64_t sub_2CCFC()
{
  sub_2D1E4();
  return sub_2D12C(v0, v1, v2);
}

uint64_t sub_2CD48(uint64_t a1)
{
  return sub_2A7C8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), v1 + v3);
}

uint64_t getEnumTagSinglePayload for RecreateDeletedAlarmsFlow.RecreateAlarmError( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for RecreateDeletedAlarmsFlow.RecreateAlarmError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_2CE58 + 4 * byte_A4F25[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2CE8C + 4 * byte_A4F20[v4]))();
}

uint64_t sub_2CE8C(uint64_t result)
{
  *(_BYTE *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_2CE94(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x2CE9CLL);
  }
  return result;
}

uint64_t sub_2CEA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x2CEB0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_2CEB4(uint64_t result)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_2CEBC(uint64_t result)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

_BYTE *sub_2CEC8(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RecreateDeletedAlarmsFlow.RecreateAlarmError()
{
  return &type metadata for RecreateDeletedAlarmsFlow.RecreateAlarmError;
}

unint64_t sub_2CEE8()
{
  unint64_t result = qword_D4618;
  if (!qword_D4618)
  {
    unint64_t result = swift_getWitnessTable(&unk_A5064, &type metadata for RecreateDeletedAlarmsFlow.RecreateAlarmError);
    atomic_store(result, (unint64_t *)&qword_D4618);
  }

  return result;
}

uint64_t sub_2CF24(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_2CF40(float a1)
{
  *int v2 = a1;
  *(void *)(v3 + 40) = v1;
  return swift_errorRetain(v1);
}

uint64_t sub_2CF60(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v3, v2);
}

uint64_t sub_2CF7C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_2CF84()
{
  return swift_task_dealloc(*(void *)(v0 + 208));
}

uint64_t sub_2CF9C()
{
  return swift_task_dealloc(*(void *)(v0 + 296));
}

void sub_2CFBC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_2CFD0()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

void sub_2D000()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_2D010()
{
  return swift_errorRetain(v0);
}

uint64_t sub_2D018(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t sub_2D024( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_2D034()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_2D044()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_2D054()
{
  return swift_release(*(void *)(v0 + 16));
}

uint64_t sub_2D07C()
{
  return swift_task_dealloc(*(void *)(v0 + 224));
}

  ;
}

uint64_t sub_2D0CC(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_2D0D4(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_2D104(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

uint64_t sub_2D110( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_3D10(a1, a2, &a9);
}

uint64_t sub_2D11C(uint64_t a1)
{
  return sub_A40C(a1, 0LL, 1LL, v1);
}

uint64_t sub_2D12C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_2D13C()
{
  return swift_task_dealloc(*(void *)(v0 + 208));
}

uint64_t sub_2D154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_signpost(_:dso:log:name:signpostID:)(v6, a2, v4, a4, 40LL, 2LL, v5);
}

uint64_t sub_2D16C(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 136);
}

uint64_t sub_2D180()
{
  return 0LL;
}

uint64_t sub_2D19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 136, v5 - 120, v4 + 8, a4, 6LL);
}

uint64_t sub_2D1B0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 104))();
}

uint64_t sub_2D1B8()
{
  return static os_signpost_type_t.end.getter();
}

  ;
}

uint64_t sub_2D1E4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_2D1F4()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_2D1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0LL);
}

void sub_2D20C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_2D214()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

  ;
}

uint64_t sub_2D22C(uint64_t a1)
{
  return sub_168CC(a1, *(void *)(v1 - 168));
}

uint64_t sub_2D234()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t sub_2D240(uint64_t a1, uint64_t a2)
{
  return sub_A40C(a1, a2, 1LL, v2);
}

uint64_t sub_2D24C()
{
  return v0;
}

  ;
}

uint64_t sub_2D26C()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_2D278()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t sub_2D284()
{
  return v2(v0, v1);
}

uint64_t sub_2D290()
{
  return sub_168CC(v1, v0);
}

uint64_t sub_2D29C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_2D2B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0LL;
}

uint64_t sub_2D2C4()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_2D2D0()
{
  return _s20HandleIntentStrategyVwxx_1((void *)(v0 + 56));
}

ValueMetadata *_s24UnsupportedValueStrategyVMa()
{
  return &_s24UnsupportedValueStrategyVN;
}

uint64_t sub_2D2FC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D4620);
  sub_26F0(v0, (uint64_t)qword_D4620);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_2D344(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return sub_2D94C((uint64_t)sub_2D354);
}

uint64_t sub_2D354()
{
  uint64_t v1 = sub_26B0(&qword_D4658);
  uint64_t v2 = (void *)ParameterResolutionRecord.intent.getter(v1);
  v0[12] = v2;
  uint64_t v3 = (void *)ParameterResolutionRecord.result.getter(v1);
  v0[13] = v3;
  if (qword_D2FF0 != -1) {
    swift_once(&qword_D2FF0, sub_2D2FC);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v0[14] = sub_26F0(v4, (uint64_t)qword_D4620);
  id v5 = v3;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v5, v6, v7, v8, v9, v10, v11, v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)sub_16AC4(12LL);
    *(_DWORD *)uint64_t v15 = 134217984;
    v0[9] = [v5 unsupportedReason];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v15 + 4, v15 + 12);

    _os_log_impl( &dword_0,  v13,  v14,  "DeleteAlarm.makeUnsupportedValueOutput() called with unsupportedReason: %ld",  v15,  0xCu);
    sub_16AA8((uint64_t)v15);
  }

  else
  {
  }

  id v16 = [v2 alarmSearch];
  v0[15] = v16;
  uint64_t v17 = (void *)swift_task_alloc(dword_D3884);
  v0[16] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_2D50C;
  return sub_17E4C(v0[10], (uint64_t)v16, (uint64_t)v5);
}

uint64_t sub_2D50C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_2D5A8;
  }

  else
  {

    uint64_t v4 = sub_2D578;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_2D578()
{
  uint64_t v1 = *(void **)(v0 + 96);

  return sub_1B5EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2D5A8()
{
  uint64_t v1 = *(void *)(v0 + 136);

  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v2, v3, v4, v5, v6, v7, v8, v9);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v13 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v14 = sub_16AC4(32LL);
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v36 = v14;
    *(void *)(v0 + 56) = v12;
    swift_errorRetain(v12);
    uint64_t v15 = sub_26B0(&qword_D4890);
    uint64_t v16 = String.init<A>(describing:)(v0 + 56, v15);
    unint64_t v18 = v17;
    *(void *)(v0 + 64) = sub_3D10(v16, v17, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl(&dword_0, v10, v11, "Error in legacy path: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL);
    sub_16AA8(v14);
    sub_16AA8((uint64_t)v13);
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 136);
    swift_errorRelease(v19);
    swift_errorRelease(v19);
  }

  uint64_t v20 = *(void *)(v0 + 136);
  os_log_type_t v21 = *(void **)(v0 + 96);
  uint64_t v22 = *(void **)(v0 + 104);
  uint64_t v23 = type metadata accessor for ABCReport(0LL);
  *(void *)(v0 + 40) = v23;
  *(void *)(v0 + 48) = &protocol witness table for ABCReport;
  uint64_t v24 = sub_19558((void *)(v0 + 16));
  *uint64_t v24 = _convertErrorToNSError(_:)(v20);
  uint64_t v25 = enum case for DialogLayerErrorSubType.dialogError(_:);
  uint64_t v26 = type metadata accessor for DialogLayerErrorSubType(0LL);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104LL))(v24, v25, v26);
  (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104LL))( v24,  enum case for ABCReport.dialog(_:),  v23);
  static BarbaraWalters.stopThePresses(for:)(v0 + 16);
  uint64_t v27 = _s20HandleIntentStrategyVwxx_1((void *)(v0 + 16));
  swift_willThrow(v27, v28, v29, v30, v31, v32, v33, v34);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2D7DC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return sub_2D94C((uint64_t)sub_2D7EC);
}

uint64_t sub_2D7EC()
{
  uint64_t v1 = sub_26B0(&qword_D4658);
  uint64_t v2 = ParameterResolutionRecord.intent.getter(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_2D82C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D4664);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1B3B8;
  return sub_2D344(a1, a2);
}

uint64_t sub_2D884(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_D4654);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_5D0C;
  return sub_2D7DC(a1);
}

uint64_t sub_2D8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1B578;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t sub_2D94C(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t type metadata accessor for SearchAlarmCATPatternsExecutor(uint64_t a1)
{
  uint64_t result = qword_D4668;
  if (!qword_D4668) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchAlarmCATPatternsExecutor);
  }
  return result;
}

uint64_t sub_2D990(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D81C8);
}

uint64_t sub_2D9CC()
{
  return type metadata accessor for SearchAlarmCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for UpdateAlarmCATs_Async(uint64_t a1)
{
  uint64_t result = qword_D46B8;
  if (!qword_D46B8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UpdateAlarmCATs_Async);
  }
  return result;
}

uint64_t sub_2DA0C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D81D8);
}

uint64_t sub_2DA48()
{
  return type metadata accessor for UpdateAlarmCATs_Async(0LL);
}

void sub_2DA50(uint8_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_2DA78(uint8_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_2DAA0( uint8_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v610 = a8;
  uint64_t v609 = a7;
  v650[0] = a6;
  v650[1] = a5;
  uint64_t v656 = a4;
  int v600 = a3;
  uint64_t v624 = a2;
  v657 = a1;
  uint64_t v652 = a9;
  sub_26B0(&qword_D36E8);
  sub_16AFC();
  __chkstk_darwin(v10);
  sub_16B30();
  uint64_t v12 = sub_31CA0(v11);
  uint64_t v13 = type metadata accessor for ButtonOption(v12);
  sub_16D00(v13, (uint64_t)&v627);
  uint64_t v596 = v14;
  sub_16AFC();
  __chkstk_darwin(v15);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v16);
  sub_16BF8();
  uint64_t v18 = sub_31CA0(v17);
  uint64_t v19 = type metadata accessor for DirectInvocationUtils.Alarm.UserInfoKey(v18);
  sub_16D00(v19, (uint64_t)&v634);
  uint64_t v607 = v20;
  sub_16AFC();
  __chkstk_darwin(v21);
  sub_16B30();
  uint64_t v23 = sub_31CA0(v22);
  uint64_t v24 = type metadata accessor for Siri_Nlu_External_UserDialogAct(v23);
  sub_16D00(v24, (uint64_t)&v655);
  uint64_t v629 = v25;
  sub_16AFC();
  __chkstk_darwin(v26);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v27);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v28);
  sub_16BF8();
  uint64_t v30 = sub_31CA0(v29);
  uint64_t v31 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(v30);
  sub_16D00(v31, (uint64_t)&v617);
  uint64_t v593 = v32;
  sub_16AFC();
  __chkstk_darwin(v33);
  sub_16B30();
  sub_16DCC(v34);
  uint64_t v591 = sub_26B0(&qword_D3780);
  sub_16AFC();
  __chkstk_darwin(v35);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v36);
  sub_16BF8();
  sub_16DCC(v37);
  sub_26B0(&qword_D3788);
  sub_16AFC();
  __chkstk_darwin(v38);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v39);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v40);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v41);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v42);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v43);
  sub_16BF8();
  uint64_t v45 = sub_31CA0(v44);
  uint64_t v46 = type metadata accessor for Input(v45);
  sub_16D00(v46, (uint64_t)&v631);
  uint64_t v606 = v47;
  sub_16AFC();
  __chkstk_darwin(v48);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v49);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v50);
  sub_16BF8();
  sub_16DCC(v51);
  sub_26B0((uint64_t *)&unk_D36F0);
  sub_16AFC();
  __chkstk_darwin(v52);
  sub_16B30();
  uint64_t v54 = sub_31CA0(v53);
  uint64_t v55 = type metadata accessor for ConfirmationResponse(v54);
  sub_16D00(v55, (uint64_t)&v644);
  uint64_t v613 = v56;
  sub_16AFC();
  __chkstk_darwin(v57);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v58);
  sub_16BF8();
  uint64_t v60 = sub_31CA0(v59);
  uint64_t v61 = type metadata accessor for Parse.DirectInvocation(v60);
  sub_16D00(v61, (uint64_t)&v648);
  uint64_t v620 = v62;
  sub_16AFC();
  __chkstk_darwin(v63);
  sub_16B30();
  uint64_t v65 = sub_31CA0(v64);
  uint64_t v66 = type metadata accessor for Siri_Nlu_External_UserParse(v65);
  sub_16D00(v66, (uint64_t)v635);
  uint64_t v605 = v67;
  sub_16AFC();
  __chkstk_darwin(v68);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v69);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v70);
  sub_16BF8();
  uint64_t v72 = sub_31CA0(v71);
  uint64_t v73 = type metadata accessor for USOParse(v72);
  uint64_t v611 = *(void *)(v73 - 8);
  sub_16AFC();
  __chkstk_darwin(v74);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v75);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v76);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v77);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v78);
  sub_16BF8();
  uint64_t v80 = sub_31CA0(v79);
  uint64_t v81 = type metadata accessor for Parse(v80);
  sub_16D00(v81, (uint64_t)&v663);
  uint64_t v637 = v82;
  sub_16AFC();
  __chkstk_darwin(v83);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v84);
  sub_16BF8();
  uint64_t v86 = sub_31CA0(v85);
  uint64_t v87 = type metadata accessor for NLIntent(v86);
  sub_16D00(v87, (uint64_t)&v664);
  uint64_t v640 = v88;
  sub_16AFC();
  __chkstk_darwin(v89);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v90);
  sub_16BF8();
  uint64_t v92 = sub_31CA0(v91);
  uint64_t v646 = type metadata accessor for ActionForInput(v92);
  uint64_t v634 = *(void *)(v646 - 8);
  sub_16AFC();
  __chkstk_darwin(v93);
  sub_16B30();
  sub_16DCC(v94);
  uint64_t v641 = sub_26B0((uint64_t *)&off_D3790);
  sub_16AFC();
  __chkstk_darwin(v95);
  sub_17390();
  uint64_t v98 = v97 - v96;
  sub_26B0((uint64_t *)&unk_D4850);
  sub_16AFC();
  __chkstk_darwin(v99);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v100);
  sub_16BD8();
  uint64_t v647 = v101;
  sub_16AF0();
  __chkstk_darwin(v102);
  sub_16BF8();
  uint64_t v649 = v103;
  uint64_t v104 = type metadata accessor for DecideAction.PromptExpectation(0LL);
  uint64_t v653 = *(void *)(v104 - 8);
  sub_16AFC();
  __chkstk_darwin(v105);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v106);
  sub_16BD8();
  sub_16AB4();
  uint64_t v108 = __chkstk_darwin(v107);
  uint64_t v110 = (char *)&v572 - v109;
  __chkstk_darwin(v108);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v111);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v112);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v113);
  sub_16BF8();
  sub_16DCC(v114);
  uint64_t v655 = sub_26B0(&qword_D37A0);
  sub_16AFC();
  __chkstk_darwin(v115);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v116);
  sub_16BD8();
  uint64_t v645 = v117;
  sub_16AF0();
  __chkstk_darwin(v118);
  sub_16BD8();
  uint64_t v651 = v119;
  sub_16AF0();
  __chkstk_darwin(v120);
  sub_16BF8();
  uint64_t v654 = v121;
  sub_26B0(&qword_D37A8);
  sub_16AFC();
  __chkstk_darwin(v122);
  sub_16B08();
  sub_16AB4();
  __chkstk_darwin(v123);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v124);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v125);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v126);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v127);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v128);
  sub_16BD8();
  sub_16AB4();
  __chkstk_darwin(v129);
  sub_16BD8();
  uint64_t v644 = v130;
  sub_16AF0();
  uint64_t v132 = __chkstk_darwin(v131);
  uint64_t v134 = (char *)&v572 - v133;
  uint64_t v135 = __chkstk_darwin(v132);
  uint64_t v137 = (char *)&v572 - v136;
  __chkstk_darwin(v135);
  sub_16BD8();
  uint64_t v648 = v138;
  sub_16AF0();
  __chkstk_darwin(v139);
  uint64_t v141 = (char *)&v572 - v140;
  if (qword_D2F80 != -1) {
    swift_once(&qword_D2F80, sub_AB1C);
  }
  uint64_t v142 = sub_16C80();
  uint64_t v643 = sub_26F0(v142, (uint64_t)qword_D36D0);
  uint64_t v143 = (os_log_s *)sub_16D50();
  os_log_type_t v144 = static os_log_type_t.info.getter();
  BOOL v145 = sub_1990C(v144);
  v614 = (char *)v73;
  uint64_t v580 = v110;
  uint64_t v642 = v98;
  if (v145)
  {
    uint64_t v146 = v137;
    uint64_t v147 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v148 = sub_16AC4(32LL);
    sub_31EE4(v148);
    *(_DWORD *)uint64_t v147 = 136315138;
    v658 = (uint64_t *)sub_31D8C();
    uint64_t v149 = sub_26B0(v650[0]);
    uint64_t v150 = String.init<A>(describing:)(&v658, v149);
    unint64_t v152 = v151;
    uint64_t v153 = sub_16B80(v150, v151);
    uint64_t v154 = sub_1707C(v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v154, v155, v156, v147 + 12);
    unint64_t v157 = v152;
    uint64_t v137 = v146;
    swift_bridgeObjectRelease(v157);
    sub_16BD0(&dword_0, v143, v9, "AlarmFlowUtils.decideActionForInput with intent type: %s", v147);
    sub_16BB4(v104);
    uint64_t v158 = v104;
    uint64_t v104 = v633;
    sub_16AA8(v158);
    sub_16AA8((uint64_t)v147);
  }

  sub_C62C();
  uint64_t v159 = v654;
  if ((v160 & 1) == 0) {
    goto LABEL_72;
  }
  int v161 = enum case for DecideAction.PromptExpectation.confirmation(_:);
  uint64_t v162 = *(uint64_t **)(v653 + 104);
  sub_31F30((uint64_t)v141, enum case for DecideAction.PromptExpectation.confirmation(_:));
  uint64_t v163 = sub_31D2C((uint64_t)v141);
  uint64_t v165 = v159 + v164;
  sub_16EC4(v163, v159);
  sub_16EC4((uint64_t)v141, v165);
  uint64_t v166 = sub_31EC0();
  uint64_t v168 = sub_16880(v166, v167, v104);
  if ((_DWORD)v168 == 1)
  {
    sub_31DD0(v168, &qword_D37A8);
    uint64_t v169 = sub_1D6DC(v165);
    if (!v175) {
      goto LABEL_13;
    }
    sub_31D98(v159);
    sub_3F88(v656, (uint64_t)v137, &qword_D37A8);
    goto LABEL_29;
  }

  uint64_t v170 = v648;
  sub_3F88(v159, v648, &qword_D37A8);
  uint64_t v171 = sub_1D6DC(v165);
  if (v175)
  {
    sub_31DD0(v171, &qword_D37A8);
    uint64_t v169 = sub_16EF0(v170, *(uint64_t (**)(uint64_t, uint64_t))(v653 + 8));
LABEL_13:
    sub_31E2C(v169, &qword_D37A0);
    sub_3F88(v656, (uint64_t)v137, &qword_D37A8);
    goto LABEL_14;
  }

  HIDWORD(v57sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = v161;
  uint64_t v186 = v653;
  sub_31CB8(*(uint64_t (**)(void, uint64_t, uint64_t))(v653 + 32));
  sub_31CE8( &qword_D37C0,  v187,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
  LODWORD(v63sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = sub_31D74(v170, v159);
  uint64_t v188 = v134;
  os_log_type_t v189 = v137;
  uint64_t v190 = v162;
  uint64_t v191 = v104;
  uint64_t v192 = *(void (**)(uint64_t, uint64_t))(v186 + 8);
  uint64_t v193 = v656;
  int v161 = HIDWORD(v573);
  v192(v159, v191);
  sub_31C98((uint64_t)v141);
  v192(v648, v191);
  uint64_t v104 = v191;
  uint64_t v162 = v190;
  uint64_t v137 = v189;
  uint64_t v134 = v188;
  sub_31C98(v654);
  sub_16EC4(v193, (uint64_t)v137);
  if ((v633 & 1) != 0)
  {
LABEL_29:
    sub_7EC4((uint64_t)v137, &qword_D37A8);
    LODWORD(v654) = enum case for DecideAction.PromptExpectation.roomConfirmation(_:);
    goto LABEL_30;
  }

LABEL_14:
  LODWORD(v654) = enum case for DecideAction.PromptExpectation.roomConfirmation(_:);
  sub_31F30((uint64_t)v134, enum case for DecideAction.PromptExpectation.roomConfirmation(_:));
  sub_A40C((uint64_t)v134, 0LL, 1LL, v104);
  uint64_t v172 = v651;
  uint64_t v173 = v651 + *(int *)(v655 + 48);
  sub_16EC4((uint64_t)v137, v651);
  sub_16EC4((uint64_t)v134, v173);
  sub_1D6DC(v172);
  if (v175)
  {
    sub_31C98((uint64_t)v134);
    sub_31C98((uint64_t)v137);
    sub_1D6DC(v173);
    uint64_t v174 = v646;
    if (v175)
    {
      sub_7EC4(v651, &qword_D37A8);
      goto LABEL_30;
    }

    goto LABEL_22;
  }

  sub_16EE4(v172, &qword_D37A8, (uint64_t)v662);
  sub_1D6DC(v173);
  uint64_t v174 = v646;
  if (v175)
  {
    sub_31D98((uint64_t)v134);
    sub_31D98((uint64_t)v137);
    sub_16EF0((uint64_t)&qword_D37A8, *(uint64_t (**)(uint64_t, uint64_t))(v653 + 8));
LABEL_22:
    sub_7EC4(v651, &qword_D37A0);
    uint64_t v176 = v647;
    goto LABEL_23;
  }

  v650[0] = v162;
  sub_31CB8(*(uint64_t (**)(void, uint64_t, uint64_t))(v653 + 32));
  sub_31CE8( &qword_D37C0,  v205,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
  LODWORD(v648) = sub_31D74((uint64_t)&qword_D37A8, v159);
  sub_31DB8();
  sub_31C98((uint64_t)v134);
  sub_31C98((uint64_t)v137);
  sub_31DC8((uint64_t)&qword_D37A8);
  uint64_t v162 = v650[0];
  sub_31C98(v172);
  uint64_t v176 = v647;
  if ((v648 & 1) != 0)
  {
LABEL_30:
    uint64_t v194 = v644;
    sub_31F30(v644, v654);
    uint64_t v195 = sub_31D2C(v194);
    uint64_t v196 = v645;
    uint64_t v198 = v645 + v197;
    sub_16EC4(v195, v645);
    sub_16EC4(v194, v198);
    sub_1D6DC(v196);
    if (v175)
    {
      sub_31C98(v194);
      sub_1D6DC(v198);
    }

    else
    {
      sub_31ED8(v196, &qword_D37A8, (uint64_t)&v661);
      uint64_t v200 = sub_1D6DC(v198);
      if (v199)
      {
        sub_2D20C(v200, &qword_D37A8);
        sub_16EF0((uint64_t)v137, *(uint64_t (**)(uint64_t, uint64_t))(v653 + 8));
      }

      else
      {
        sub_31CB8(*(uint64_t (**)(void, uint64_t, uint64_t))(v653 + 32));
        sub_31CE8( &qword_D37C0,  v206,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
        sub_31D74((uint64_t)v137, v159);
        sub_31DB8();
        sub_31C98(v194);
        sub_31DC8((uint64_t)v137);
      }
    }

    sub_31C98(v196);
    sub_F6B8();
    return;
  }

  uint64_t v16 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = v6;
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v18 = __OFADD__(v17, 1LL);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
  return result;
}

LABEL_23:
  v650[0] = v162;
  uint64_t v177 = v649;
  sub_EF6C();
  static ActionForInput.cancel()();
  sub_31EA0(v176);
  uint64_t v178 = v642;
  uint64_t v179 = v642 + *(int *)(v641 + 48);
  os_log_type_t v180 = (uint64_t *)v176;
  sub_16EC4(v177, v642);
  uint64_t v181 = sub_31E74();
  sub_16EC4(v181, v182);
  uint64_t v183 = sub_31EC0();
  sub_16BBC(v183, v184, v174);
  if (v175)
  {
    sub_31C98(v176);
    sub_31C98(v649);
    uint64_t v185 = sub_16BBC(v179, 1LL, v174);
    if (v175)
    {
      sub_31E2C(v185, (uint64_t *)&unk_D4850);
      goto LABEL_50;
    }

    goto LABEL_39;
  }

  sub_16EE4(v178, (uint64_t *)&unk_D4850, (uint64_t)&v660 + 8);
  sub_16BBC(v179, 1LL, v174);
  if (v201)
  {
    sub_31D98(v647);
    sub_31D98(v649);
    uint64_t v185 = sub_1704C((uint64_t)&unk_D4850, *(uint64_t (**)(uint64_t, uint64_t))(v634 + 8));
LABEL_39:
    sub_31E2C(v185, (uint64_t *)&off_D3790);
    goto LABEL_40;
  }

  sub_31ECC();
  uint64_t v172 = v627;
  sub_17620(v627, v179, v227);
  sub_31CE8( &qword_D37C8,  v228,  (uint64_t (*)(uint64_t))&type metadata accessor for ActionForInput,  (uint64_t)&protocol conformance descriptor for ActionForInput);
  uint64_t v177 = sub_178D8((uint64_t)&unk_D4850, v172);
  os_log_type_t v180 = *(uint64_t **)(v176 + 8);
  sub_31E34(v172);
  sub_31C98(v647);
  sub_31C98(v649);
  sub_31E34((uint64_t)&unk_D4850);
  sub_31C98(v178);
  if ((v177 & 1) == 0)
  {
LABEL_40:
    HIDWORD(v57sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = v161;
    sub_17198();
    uint64_t v202 = v637;
    uint64_t v203 = v636;
    int v204 = (*(uint64_t (**)(uint64_t *, uint64_t))(v637 + 88))(v180, v636);
    if (v204 == enum case for Parse.NLv3IntentOnly(_:))
    {
      sub_16D0C((uint64_t)v180, *(uint64_t (**)(uint64_t, uint64_t))(v202 + 96));
      goto LABEL_47;
    }

    if (v204 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
    {
      uint64_t v207 = sub_171F4();
      sub_16D0C(v207, v208);
      uint64_t v209 = sub_26B0(&qword_D3768);
      swift_release(*(void *)((char *)&unk_D4850 + *(int *)(v209 + 48)));
LABEL_47:
      sub_31ECC();
      uint64_t v210 = v639;
      uint64_t v211 = sub_31F38();
      sub_17604(v211, v212, v213);
      uint64_t v214 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v180[2];
      uint64_t v215 = v632;
      sub_17604(v632, v210, v214);
      uint64_t v216 = type metadata accessor for AlarmNLIntent(0LL);
      swift_allocObject(v216, *(unsigned int *)(v216 + 48), *(unsigned __int16 *)(v216 + 52));
      id v217 = (os_log_s *)sub_716E4(v215);
      swift_retain_n(v217, 2LL);
      uint64_t v218 = (os_log_s *)sub_31C58();
      os_log_type_t v219 = static os_log_type_t.default.getter();
      if (sub_31E80(v219))
      {
        uint64_t v220 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v221 = sub_16AC4(32LL);
        sub_31EE4(v221);
        *(_DWORD *)uint64_t v220 = 136315138;
        v658 = (uint64_t *)v217;
        sub_31CE8(&qword_D3770, v222, type metadata accessor for AlarmNLIntent, (uint64_t)&unk_A6AEC);
        uint64_t v223 = NLIntentWrapper.description.getter(v216);
        v658 = (uint64_t *)sub_16B80(v223, v224);
        uint64_t v202 = v637;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v658, &v659, v220 + 4, v220 + 12);
        sub_31F24();
        sub_16C48();
        sub_16BD0(&dword_0, v218, (os_log_type_t)v210, "alarmNLIntent: %s", v220);
        sub_16BB4(v104);
        uint64_t v225 = v104;
        uint64_t v104 = v633;
        sub_16AA8(v225);
        uint64_t v226 = (uint64_t)v220;
        uint64_t v203 = v636;
        sub_16AA8(v226);
      }

      else
      {

        sub_31F24();
      }

      uint64_t v236 = v656;
      os_log_type_t v237 = v217;
      sub_715D0();
      if (v238 - 1 < 2)
      {
        sub_31C78();
        sub_31C58();
        os_log_type_t v239 = sub_16C50();
        if (sub_16BA4(v239))
        {
          uint64_t v240 = (_WORD *)sub_16AC4(2LL);
          sub_16CE4(v240);
          sub_31C64(&dword_0, v241, v242, "User cancel the alarm request.");
          sub_16AA8(v203);
        }

        sub_1728C();
        goto LABEL_103;
      }

      if (v238)
      {
        sub_31C78();
        sub_17198();
        sub_174D8( v236,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v572,  v573,  v574,  v575,  v576,  v577,  v578,  v579,  (uint64_t)v580,  v581,  v582,  v583);
        uint64_t v286 = v285;
        sub_16D0C(v236, *(uint64_t (**)(uint64_t, uint64_t))(v202 + 8));
        if (v286)
        {
          uint64_t v287 = sub_31D8C();
          uint64_t v288 = sub_31DF0(v287);

          if (v288)
          {
            sub_31C58();
            os_log_type_t v289 = sub_16C50();
            if (sub_16BA4(v289))
            {
              unint64_t v290 = (_WORD *)sub_16AC4(2LL);
              sub_16CE4(v290);
              sub_31C64(&dword_0, v291, v292, "Request was not cancelled by user. Proceed.");
              sub_16AA8(v203);
            }

            sub_17044();
            goto LABEL_103;
          }
        }

        os_log_type_t v237 = (os_log_s *)sub_31C58();
        os_log_type_t v305 = static os_log_type_t.error.getter();
        if (!sub_16C28(v305)) {
          goto LABEL_102;
        }
        uint64_t v306 = (_DWORD *)sub_16AC4(12LL);
        uint64_t v307 = sub_16AC4(32LL);
        *(void *)&__int128 v660 = v307;
        *uint64_t v306 = 136315138;
        v658 = (uint64_t *)sub_31CD0();
        sub_16C90((uint64_t)v658, (uint64_t)&v659);
        sub_31D08(&dword_0, v237, v308, "Flows stack receives unexpected intent type. Expecting: %s");
        sub_16BB4(v307);
        sub_16AA8(v307);
        uint64_t v247 = (uint64_t)v306;
      }

      else
      {
        sub_16EE4(v236, &qword_D37A8, (uint64_t)v650);
        sub_1D6DC((uint64_t)v217);
        if (!v175)
        {
          uint64_t v309 = v653;
          uint64_t v310 = v615;
          uint64_t v311 = sub_31F38();
          sub_31D50(v311, v312, v313);
          uint64_t v314 = sub_171F4();
          sub_31D50(v314, v310, v315);
          (*(void (**)(os_log_s *, uint64_t))(v309 + 88))(v217, v104);
          sub_31E64();
          if (v316) {
            goto LABEL_123;
          }
          if (v317 == enum case for DecideAction.PromptExpectation.slot(_:))
          {
            sub_31C78();
            sub_31C58();
            os_log_type_t v318 = sub_16C50();
            if (sub_16BA4(v318))
            {
              id v319 = (_WORD *)sub_16AC4(2LL);
              sub_16CE4(v319);
              sub_31C64(&dword_0, v320, v321, "User returned accepted for non-binary input. Ignoring.");
              sub_16AA8(v203);
            }

            sub_16FE0();
LABEL_126:
            swift_release(v217);
LABEL_127:
            (*(void (**)(uint64_t, uint64_t))(v653 + 8))(v310, v104);
            return;
          }

          if (v317 == (_DWORD)v654)
          {
LABEL_123:
            sub_31C78();
            sub_31C58();
            os_log_type_t v360 = sub_16C50();
            if (sub_16BA4(v360))
            {
              uint64_t v361 = (_WORD *)sub_16AC4(2LL);
              sub_16CE4(v361);
              sub_31C64(&dword_0, v362, v363, "User accepted the task, will handle.");
              sub_16AA8(v203);
            }

            sub_17044();
            goto LABEL_126;
          }

      uint64_t v10 = (v18 - 1) & v18;
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    uint64_t v10 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v11)
  {
LABEL_35:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v30;
    goto LABEL_37;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v14 = v19;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_35;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }

  __break(1u);
}

LABEL_248:
          uint64_t v570 = v104;
          for (uint64_t i = v104; ; uint64_t i = v310)
          {
            _diagnoseUnexpectedEnumCase<A>(type:)(v570, i);
            __break(1u);
LABEL_250:
            uint64_t v570 = v310;
          }
        }

        sub_31C78();
        sub_7EC4((uint64_t)v217, &qword_D37A8);
        sub_31C58();
        os_log_type_t v243 = sub_16C50();
        if (!sub_16BA4(v243))
        {
LABEL_102:

          sub_16FE0();
LABEL_103:
          swift_release(v217);
          return;
        }

        uint64_t v244 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v244);
        sub_31C64(&dword_0, v245, v246, "User returned accepted for non-prompt input. Ignoring.");
        uint64_t v247 = v203;
      }

      sub_16AA8(v247);
      goto LABEL_102;
    }

    if (v204 == enum case for Parse.directInvocation(_:))
    {
      sub_31CF0();
      uint64_t v254 = v620;
      uint64_t v255 = v621;
      uint64_t v256 = v622;
      (*(void (**)(uint64_t, uint64_t, char *))(v620 + 32))(v621, v202, v622);
      uint64_t v257 = v617;
      static DirectInvocationUtils.siriKitConfirmationResponse(_:)(v255);
      uint64_t v258 = sub_31EC0();
      uint64_t v259 = v618;
      uint64_t v261 = sub_16BBC(v258, v260, v618);
      if (v175)
      {
        sub_31E2C(v261, (uint64_t *)&unk_D36F0);
        uint64_t v263 = v619;
      }

      else
      {
        uint64_t v322 = v613;
        os_log_type_t v180 = v612;
        sub_17604((uint64_t)v612, v257, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v613 + 32));
        uint64_t v323 = sub_17614();
        sub_17604(v323, v324, v325);
        uint64_t v326 = sub_31F38();
        int v328 = v327(v326);
        uint64_t v263 = v619;
        if (v328 == enum case for ConfirmationResponse.confirmed(_:))
        {
          sub_17044();
LABEL_119:
          (*(void (**)(uint64_t *, uint64_t))(v322 + 8))(v180, v259);
LABEL_133:
          uint64_t v368 = *(void (**)(uint64_t, char *))(v254 + 8);
          uint64_t v369 = v255;
          uint64_t v370 = v256;
LABEL_134:
          v368(v369, v370);
          return;
        }

        if (v328 == enum case for ConfirmationResponse.rejected(_:))
        {
          sub_1728C();
          goto LABEL_119;
        }

        uint64_t v202 = *(void *)(v322 + 8);
        ((void (*)(uint64_t *, uint64_t))v202)(v180, v259);
        uint64_t v371 = sub_31F38();
        uint64_t v262 = ((uint64_t (*)(uint64_t))v202)(v371);
      }

      uint64_t v264 = Parse.DirectInvocation.userData.getter(v262);
      if (v264)
      {
        uint64_t v202 = v264;
        uint64_t v265 = v607;
        uint64_t v266 = sub_171F4();
        uint64_t v268 = v267(v266);
        uint64_t v269 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v268);
        os_log_type_t v180 = v270;
        sub_1704C(v255, *(uint64_t (**)(uint64_t, uint64_t))(v265 + 8));
        sub_288F4(v269, (uint64_t)v180, v202, &v660);
        swift_bridgeObjectRelease(v180);
        swift_bridgeObjectRelease(v202);
        if (!v661)
        {
          uint64_t v276 = (uint64_t *)&unk_D4860;
          uint64_t v277 = &v660;
LABEL_129:
          sub_7EC4((uint64_t)v277, v276);
          goto LABEL_130;
        }

        if ((swift_dynamicCast(&v658, &v660, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          os_log_type_t v180 = v658;
          uint64_t v202 = v659;
          sub_16FD0();
          uint64_t v271 = sub_31E74();
          ButtonOption.init(rawValue:)(v271, v272);
          uint64_t v273 = sub_31EC0();
          uint64_t v274 = v603;
          sub_16BBC(v273, v275, (uint64_t)v603);
          if (!v175)
          {
            sub_17604(v597, v263, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 32));
            sub_16FD0();
            sub_31C58();
            os_log_type_t v409 = sub_16C50();
            if (os_log_type_enabled(v274, v409))
            {
              uint64_t v410 = (uint8_t *)sub_16AC4(12LL);
              uint64_t v411 = sub_16AC4(32LL);
              *(void *)&__int128 v660 = v411;
              *(_DWORD *)uint64_t v410 = 136315138;
              sub_16FD0();
              uint64_t v412 = sub_31E74();
              uint64_t v415 = sub_3D10(v412, v413, v414);
              uint64_t v416 = sub_1707C(v415);
              uint64_t v254 = v620;
              uint64_t v255 = v621;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v416, v417, v418, v410 + 12);
              swift_bridgeObjectRelease_n(v202, 3LL);
              sub_16BD0(&dword_0, v274, v409, "Received confirmation directInvocation, buttonPressed: %s", v410);
              sub_16BB4(v411);
              uint64_t v256 = v622;
              sub_16AA8(v411);
              sub_16AA8((uint64_t)v410);
            }

            else
            {

              swift_bridgeObjectRelease_n(v202, 2LL);
            }

            uint64_t v438 = v596;
            uint64_t v439 = v590;
            uint64_t v440 = (uint64_t)v603;
            (*(void (**)(uint64_t, void, os_log_s *))(v596 + 104))( v590,  enum case for ButtonOption.yes(_:),  v603);
            uint64_t v441 = v597;
            char v442 = sub_287D4(v597, v439);
            uint64_t v443 = *(void (**)(uint64_t))(v438 + 8);
            uint64_t v444 = sub_17614();
            v443(v444);
            if ((v442 & 1) != 0) {
              sub_17044();
            }
            else {
              sub_1728C();
            }
            ((void (*)(uint64_t, uint64_t))v443)(v441, v440);
            goto LABEL_133;
          }

          swift_bridgeObjectRelease(v202);
          uint64_t v276 = &qword_D36E8;
          uint64_t v277 = (__int128 *)v263;
          goto LABEL_129;
        }
      }

LABEL_130:
      sub_31C58();
      os_log_type_t v364 = sub_16B4C();
      if (sub_16ACC(v364))
      {
        uint64_t v365 = (_WORD *)sub_16AC4(2LL);
        sub_16BEC(v365);
        sub_16ADC(&dword_0, v366, v367, "Request was not cancelled by user. Proceed.");
        sub_16AA8((uint64_t)v180);
      }

      sub_17044();
      goto LABEL_133;
    }

    if (v204 == enum case for Parse.NLv4IntentOnly(_:))
    {
      sub_31CF0();
      uint64_t v298 = *(void *)v202;
      uint64_t v299 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
      if (sub_16C1C(v299) || (uint64_t v300 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected), sub_16C1C(v300)))
      {
        sub_31C58();
        os_log_type_t v301 = sub_16C50();
        if (sub_16BA4(v301))
        {
          uint64_t v302 = (_WORD *)sub_16AC4(2LL);
          sub_16CE4(v302);
          sub_31C64(&dword_0, v303, v304, "User cancelled the task.");
          sub_16AA8(v203);
        }

        sub_1728C();
        goto LABEL_98;
      }

      uint64_t v393 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted);
      if (sub_16C1C(v393))
      {
        uint64_t v394 = v587;
        sub_3F88(v656, v587, &qword_D37A8);
        sub_1D6DC(v394);
        if (!v175)
        {
          uint64_t v450 = v653;
          uint64_t v310 = v581;
          uint64_t v451 = sub_17614();
          sub_31D50(v451, v452, v453);
          uint64_t v454 = (uint64_t)v580;
          sub_31D50((uint64_t)v580, v310, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v450 + 16));
          (*(void (**)(uint64_t, uint64_t))(v450 + 88))(v454, v104);
          sub_31E64();
          if (!v455)
          {
            if (v456 == enum case for DecideAction.PromptExpectation.slot(_:))
            {
              sub_31C58();
              os_log_type_t v457 = sub_16C50();
              if (sub_16BA4(v457))
              {
                char v458 = (_WORD *)sub_16AC4(2LL);
                sub_16CE4(v458);
                sub_31C64(&dword_0, v459, v460, "User returned accepted for non-binary input. Ignoring.");
                sub_16AA8(v203);
              }

              sub_16FE0();
LABEL_222:
              swift_unknownObjectRelease(v298);
              goto LABEL_127;
            }

            if (v456 != (_DWORD)v654) {
              goto LABEL_248;
            }
          }

          sub_31C58();
          os_log_type_t v518 = sub_16C50();
          if (sub_16BA4(v518))
          {
            v519 = (_WORD *)sub_16AC4(2LL);
            sub_16CE4(v519);
            sub_31C64(&dword_0, v520, v521, "User accepted the task, will handle.");
            sub_16AA8(v203);
          }

          sub_17044();
          goto LABEL_222;
        }

        sub_7EC4(v394, &qword_D37A8);
        sub_31C58();
        os_log_type_t v395 = sub_16C50();
        if (sub_16BA4(v395))
        {
          uint64_t v396 = (_WORD *)sub_16AC4(2LL);
          sub_16CE4(v396);
          sub_31C64(&dword_0, v397, v398, "User returned accepted for non-prompt input. Ignoring.");
          sub_16AA8(v203);
        }

        goto LABEL_241;
      }

      if ((v600 & 1) == 0) {
        goto LABEL_233;
      }
      uint64_t ObjectType = swift_getObjectType(v298);
      uint64_t v446 = v298;
      uint64_t v447 = SIRINLUUserDialogAct.firstUsoTask.getter(ObjectType);
      if (v447)
      {
        uint64_t v446 = v447;
        uint64_t v448 = v579;
        sub_256B8(v579);
        sub_17324();
        sub_31F04();
      }

      else
      {
        sub_31F04();
        uint64_t v448 = v579;
      }

      uint64_t v174 = (uint64_t)v592;
      sub_A40C(v448, v449, 1LL, (uint64_t)v592);
      uint64_t v522 = v584;
      (*(void (**)(uint64_t, void, uint64_t))(v593 + 104))( v584,  enum case for AlarmNLv4Constants.AlarmVerb.noVerb(_:),  v174);
      sub_31EA0(v522);
      v523 = (os_log_s *)&v134[*(int *)(v446 + 48)];
      os_log_type_t v180 = &qword_D3788;
      sub_3F88(v448, (uint64_t)v134, &qword_D3788);
      sub_3F88(v522, (uint64_t)v523, &qword_D3788);
      sub_16BBC((uint64_t)v134, 1LL, v174);
      if (v175)
      {
        sub_1D6D4(v584);
        sub_1D6D4(v448);
        uint64_t v524 = sub_16BBC((uint64_t)v523, 1LL, v174);
        if (v175)
        {
          sub_2D20C(v524, &qword_D3788);
          goto LABEL_244;
        }
      }

      else
      {
        uint64_t v525 = v574;
        sub_3F88((uint64_t)v134, v574, &qword_D3788);
        sub_16BBC((uint64_t)v523, 1LL, v174);
        if (!v526)
        {
          sub_31ECC();
          uint64_t v557 = v577;
          sub_17620(v577, (uint64_t)v523, v558);
          sub_31CE8( &qword_D4870,  v559,  (uint64_t (*)(uint64_t))&type metadata accessor for AlarmNLv4Constants.AlarmVerb,  (uint64_t)&protocol conformance descriptor for AlarmNLv4Constants.AlarmVerb);
          char v560 = sub_178D8(v525, v557);
          v523 = (os_log_s *)v525;
          char v561 = (void (*)(os_log_s *, uint64_t))off_D3790;
          off_D3790(v557, v174);
          os_log_type_t v180 = &qword_D3788;
          sub_1D6D4(v584);
          sub_1D6D4(v579);
          v561(v523, v174);
          sub_1D6D4((uint64_t)v134);
          if ((v560 & 1) != 0)
          {
LABEL_244:
            sub_17274();
            sub_31C58();
            os_log_type_t v562 = sub_16C50();
            if (sub_16C28(v562))
            {
              uint64_t v563 = sub_16AC4(12LL);
              uint64_t v564 = sub_16AC4(32LL);
              *(void *)&__int128 v660 = v564;
              sub_16D70(4.8149e-34);
              uint64_t v565 = sub_26B0(&qword_D3760);
              uint64_t v566 = sub_16D20(v565);
              unint64_t v568 = v567;
              v658 = (uint64_t *)sub_16B80(v566, v567);
              sub_16C90((uint64_t)v658, v172 + 8);
              sub_16F2C();
              swift_bridgeObjectRelease(v568);
              sub_31D08(&dword_0, v523, v569, "decideActionForInput decide handle disambiguation userDialogAct: %s");
              sub_16BB4(v564);
              sub_16AA8(v564);
              sub_16AA8(v563);

              goto LABEL_247;
            }

            goto LABEL_246;
          }

LABEL_233:
          sub_17198();
          sub_174D8( (uint64_t)v180,  v528,  v529,  v530,  v531,  v532,  v533,  v534,  v572,  v573,  v574,  v575,  v576,  v577,  v578,  v579,  (uint64_t)v580,  v581,  v582,  v583);
          v523 = v535;
          sub_1772C();
          sub_16D0C((uint64_t)v180, v536);
          if (!v523 || (uint64_t v537 = sub_31D8C(), v538 = sub_31DF0(v537), v523, !v538))
          {
            uint64_t v548 = v606;
            sub_31D58(*(uint64_t (**)(void, void, void))(v606 + 16));
            uint64_t v549 = (os_log_s *)sub_31C58();
            os_log_type_t v550 = static os_log_type_t.error.getter();
            if (sub_31E80(v550))
            {
              uint64_t v551 = sub_16AC4(22LL);
              uint64_t v552 = sub_16AC4(64LL);
              *(void *)&__int128 v660 = v552;
              *(_DWORD *)uint64_t v551 = 136315394;
              v658 = (uint64_t *)sub_31CD0();
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v658, &v659, v551 + 4, v551 + 12);
              *(_WORD *)(v551 + 12) = 2080;
              v657 = (uint8_t *)(v551 + 14);
              sub_31CE8( (unint64_t *)&unk_D37B0,  v553,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
              uint64_t v555 = dispatch thunk of CustomStringConvertible.description.getter(v134, v554);
              v658 = (uint64_t *)sub_16B80(v555, v556);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v658, &v659, v657, v551 + 22);
              sub_16C48();
              sub_31DAC(*(uint64_t (**)(uint64_t, uint64_t))(v548 + 8));
              _os_log_impl( &dword_0,  v549,  (os_log_type_t)v174,  "Intent from parse does not match IntentType. Expected %s, received %s",  (uint8_t *)v551,  0x16u);
              sub_31EB0();
              sub_16AA8(v552);
              sub_16AA8(v551);
            }

            else
            {
              sub_31DAC(*(uint64_t (**)(uint64_t, uint64_t))(v548 + 8));
            }

LABEL_241:
            sub_16FE0();
LABEL_98:
            swift_unknownObjectRelease(v298);
            return;
          }

          sub_17274();
          sub_31C58();
          os_log_type_t v539 = sub_16C50();
          if (sub_16C28(v539))
          {
            uint64_t v540 = sub_16AC4(12LL);
            uint64_t v541 = sub_16AC4(32LL);
            *(void *)&__int128 v660 = v541;
            sub_16D70(4.8149e-34);
            uint64_t v542 = sub_26B0(&qword_D3760);
            uint64_t v543 = sub_16D20(v542);
            unint64_t v545 = v544;
            v658 = (uint64_t *)sub_16B80(v543, v544);
            sub_16C90((uint64_t)v658, v172 + 8);
            sub_16F2C();
            swift_bridgeObjectRelease(v545);
            sub_31D08(&dword_0, v523, v546, "decideActionForInput decide handle userDialogAct: %s");
            sub_16BB4(v541);
            sub_16AA8(v541);
            sub_16AA8(v540);

LABEL_247:
            static ActionForInput.handle()(v547);
            goto LABEL_98;
          }

LABEL_246:
          uint64_t v547 = sub_16F2C();
          goto LABEL_247;
        }

        sub_31C98(v584);
        sub_31C98(v579);
        sub_1772C();
        uint64_t v524 = sub_1704C(v525, v527);
      }

      sub_2D20C(v524, &qword_D3780);
      goto LABEL_233;
    }

    if (v204 != enum case for Parse.uso(_:))
    {
      uint64_t v345 = v606;
      sub_31D58(*(uint64_t (**)(void, void, void))(v606 + 16));
      uint64_t v346 = (os_log_s *)sub_31C58();
      os_log_type_t v347 = static os_log_type_t.error.getter();
      if (sub_16CA0(v347))
      {
        uint64_t v348 = (_DWORD *)sub_16AC4(12LL);
        uint64_t v349 = sub_16AC4(32LL);
        *(void *)&__int128 v660 = v349;
        *uint64_t v348 = 136315138;
        v657 = (uint8_t *)(v348 + 1);
        uint64_t v350 = v625;
        Input.parse.getter(v349);
        uint64_t v351 = v350;
        uint64_t v352 = v636;
        uint64_t v353 = String.init<A>(describing:)(v351, v636);
        uint64_t v355 = sub_16B80(v353, v354);
        uint64_t v356 = sub_31E3C(v355);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v356, v357, v358, v348 + 3);
        sub_16C48();
        sub_31DAC(*(uint64_t (**)(uint64_t, uint64_t))(v345 + 8));
        sub_31D08(&dword_0, v346, v359, "Received an unsupported parse: %s");
        sub_16BB4(v349);
        sub_16AA8(v349);
        sub_16AA8((uint64_t)v348);
      }

      else
      {
        sub_31DAC(*(uint64_t (**)(uint64_t, uint64_t))(v345 + 8));

        uint64_t v352 = v636;
      }

      uint64_t v372 = v638;
      sub_16FE0();
      sub_1772C();
      uint64_t v369 = v372;
      uint64_t v370 = (char *)v352;
      goto LABEL_134;
    }

    sub_31CF0();
    uint64_t v329 = sub_171F4();
    uint64_t v331 = sub_31D80(v329, v202, v330);
    uint64_t v332 = v604;
    uint64_t v333 = USOParse.userParse.getter(v331);
    uint64_t v334 = Siri_Nlu_External_UserParse.userDialogActs.getter(v333);
    uint64_t v335 = *(void *)(v605 + 8);
    sub_31D24(v332, (uint64_t)v635);
    uint64_t v336 = *(void *)(v334 + 16);
    if (v336)
    {
      uint64_t v633 = v104;
      sub_31DFC();
      uint64_t v338 = *(void *)(v337 + 72);
      uint64_t v339 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v337 + 16);
      swift_bridgeObjectRetain(v334);
      uint64_t v340 = v626;
      uint64_t v341 = v628;
      while (1)
      {
        uint64_t v342 = v339(v340, v180, v341);
        uint64_t v343 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v342);
        sub_16D0C(v340, *(uint64_t (**)(uint64_t, uint64_t))(v629 + 8));
        if ((v343 & 1) != 0) {
          break;
        }
        os_log_type_t v180 = (uint64_t *)((char *)v180 + v338);
        if (!--v336)
        {
          uint64_t v344 = sub_31DA0();
          goto LABEL_139;
        }
      }

      sub_31DA0();
      sub_16EE4(v656, &qword_D37A8, (uint64_t)&v618);
      uint64_t v310 = v633;
      sub_16BBC(v340, 1LL, v633);
      if (v175)
      {
        sub_7EC4(v340, &qword_D37A8);
        sub_31C58();
        os_log_type_t v387 = sub_16B4C();
        BOOL v388 = sub_16ACC(v387);
        uint64_t v389 = v611;
        if (v388)
        {
          uint64_t v390 = (_WORD *)sub_16AC4(2LL);
          sub_16BEC(v390);
          sub_16ADC(&dword_0, v391, v392, "User returned accepted for non-prompt input. Ignoring.");
          sub_16AA8((uint64_t)v180);
        }

        sub_16FE0();
        goto LABEL_213;
      }

      char v423 = (void (**)(void, void))v653;
      uint64_t v424 = v586;
      sub_17620(v586, v340, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v653 + 32));
      uint64_t v425 = sub_171F4();
      sub_17620(v425, v424, v426);
      v423[11](v340, v310);
      sub_31E64();
      uint64_t v389 = v611;
      if (!v427)
      {
        if (v428 == enum case for DecideAction.PromptExpectation.slot(_:))
        {
          sub_31C58();
          os_log_type_t v429 = sub_16B4C();
          if (sub_16ACC(v429))
          {
            uint64_t v430 = (_WORD *)sub_16AC4(2LL);
            sub_16BEC(v430);
            sub_16ADC(&dword_0, v431, v432, "User returned accepted for non-binary input. Ignoring.");
            sub_16AA8((uint64_t)v180);
          }

          sub_16FE0();
LABEL_212:
          sub_1704C(v424, *(uint64_t (**)(uint64_t, uint64_t))(v653 + 8));
LABEL_213:
          (*(void (**)(uint64_t, char *))(v389 + 8))(v616, v134);
          return;
        }

        if (v428 != (_DWORD)v654) {
          goto LABEL_250;
        }
      }

      sub_31C58();
      os_log_type_t v514 = sub_16B4C();
      if (sub_16ACC(v514))
      {
        uint64_t v515 = (_WORD *)sub_16AC4(2LL);
        sub_16BEC(v515);
        sub_16ADC(&dword_0, v516, v517, "User accepted the task, will handle.");
        sub_16AA8((uint64_t)v180);
      }

      sub_17044();
      goto LABEL_212;
    }

    uint64_t v344 = swift_bridgeObjectRelease(v334);
LABEL_139:
    uint64_t v373 = v602;
    uint64_t v374 = USOParse.userParse.getter(v344);
    uint64_t v375 = Siri_Nlu_External_UserParse.userDialogActs.getter(v374);
    sub_31D24(v373, (uint64_t)v635);
    uint64_t v376 = *(void *)(v375 + 16);
    uint64_t v377 = v628;
    uint64_t v378 = v623;
    if (v376)
    {
      uint64_t v655 = v335;
      sub_31DFC();
      uint64_t v656 = *(void *)(v379 + 72);
      uint64_t v380 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v379 + 16);
      swift_bridgeObjectRetain(v375);
      uint64_t v381 = v595;
      while (1)
      {
        uint64_t v382 = v380((uint64_t)v381, v180, v377);
        char v383 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v382);
        uint64_t v384 = v380((uint64_t)v378, v381, v377);
        if ((v383 & 1) != 0) {
          break;
        }
        char v385 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v384);
        uint64_t v386 = *(void (**)(void *, uint64_t))(v629 + 8);
        v386(v378, v377);
        v386(v381, v377);
        if ((v385 & 1) != 0) {
          goto LABEL_169;
        }
        os_log_type_t v180 = (uint64_t *)((char *)v180 + v656);
        --v376;
        uint64_t v377 = v628;
        uint64_t v378 = v623;
        if (!v376)
        {
          sub_31DA0();
          uint64_t v134 = v614;
          goto LABEL_157;
        }
      }

      os_log_type_t v433 = *(void (**)(void *, uint64_t))(v629 + 8);
      v433(v378, v377);
      v433(v381, v377);
LABEL_169:
      sub_31DA0();
      sub_31C58();
      os_log_type_t v434 = sub_16B4C();
      if (sub_16ACC(v434))
      {
        uint64_t v435 = (_WORD *)sub_16AC4(2LL);
        sub_16BEC(v435);
        sub_16ADC(&dword_0, v436, v437, "User cancelled/rejected the task, will cancel the request.");
        sub_16AA8((uint64_t)v180);
      }

      sub_1728C();
      sub_1772C();
      uint64_t v369 = v616;
      uint64_t v370 = v614;
      goto LABEL_134;
    }

    swift_bridgeObjectRelease(v375);
LABEL_157:
    uint64_t v399 = v611;
    uint64_t v400 = v601;
    uint64_t v401 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(v611 + 16))(v601, v616, v134);
    uint64_t v402 = v594;
    uint64_t v403 = v599;
    uint64_t v404 = v598;
    if ((v600 & 1) == 0)
    {
      NSString v419 = v134;
      uint64_t v420 = (uint64_t)v657;
      uint64_t v421 = *(uint8_t **)(v399 + 8);
      ((void (*)(uint64_t, char *))v421)(v400, v419);
      sub_31EF8();
      goto LABEL_195;
    }

    uint64_t v405 = v589;
    uint64_t v406 = USOParse.userParse.getter(v401);
    uint64_t v407 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v406);
    sub_31D24(v405, (uint64_t)v635);
    if (v407)
    {
      sub_256B8((uint64_t)v403);
      sub_17324();
      uint64_t v408 = 0LL;
    }

    else
    {
      uint64_t v408 = 1LL;
    }

    os_log_type_t v180 = v592;
    sub_A40C((uint64_t)v403, v408, 1LL, (uint64_t)v592);
    (*(void (**)(uint64_t, void, uint64_t *))(v593 + 104))( v404,  enum case for AlarmNLv4Constants.AlarmVerb.noVerb(_:),  v180);
    sub_A40C(v404, 0LL, 1LL, (uint64_t)v180);
    uint64_t v461 = v402 + *(int *)(v591 + 48);
    sub_16EC4((uint64_t)v403, v402);
    sub_16EC4(v404, v461);
    sub_16BBC(v402, 1LL, (uint64_t)v180);
    if (v175)
    {
      uint64_t v420 = (uint64_t)v657;
      sub_31C98(v404);
      sub_31C98((uint64_t)v403);
      uint64_t v421 = *(uint8_t **)(v399 + 8);
      sub_31D18(v601);
      uint64_t v462 = sub_16BBC(v461, 1LL, (uint64_t)v180);
      if (v175)
      {
        sub_31DD0(v462, &qword_D3788);
LABEL_205:
        uint64_t v507 = v578;
        sub_31DD8(v578);
        sub_31C58();
        os_log_type_t v508 = sub_16B4C();
        if (sub_16C38(v508))
        {
          uint64_t v479 = (uint8_t *)sub_16AC4(12LL);
          uint64_t v480 = sub_16AC4(32LL);
          *(void *)&__int128 v660 = v480;
          *(_DWORD *)uint64_t v479 = 136315138;
          sub_31F18(v583, v507);
          uint64_t v509 = sub_31E90();
          uint64_t v510 = v507;
          unint64_t v512 = v511;
          v658 = (uint64_t *)sub_16B80(v509, v511);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v658, &v659, v479 + 4, v479 + 12);
          swift_bridgeObjectRelease(v512);
          sub_31D18(v510);
          uint64_t v488 = "decideActionForInput decide handle disambiguation UsoParse: %s";
          goto LABEL_207;
        }

        uint64_t v501 = v507;
        goto LABEL_215;
      }

      sub_31EF8();
    }

    else
    {
      uint64_t v420 = (uint64_t)v657;
      sub_16EE4(v402, &qword_D3788, (uint64_t)v608);
      sub_16BBC(v461, 1LL, (uint64_t)v180);
      uint64_t v404 = v402;
      if (!v463)
      {
        sub_31ECC();
        uint64_t v502 = v399;
        uint64_t v503 = v577;
        sub_17620(v577, v461, v504);
        sub_31CE8( &qword_D4870,  v505,  (uint64_t (*)(uint64_t))&type metadata accessor for AlarmNLv4Constants.AlarmVerb,  (uint64_t)&protocol conformance descriptor for AlarmNLv4Constants.AlarmVerb);
        uint64_t v403 = &qword_D3788;
        char v506 = sub_178D8((uint64_t)&qword_D3788, v503);
        os_log_type_t v180 = (uint64_t *)v180[1];
        sub_31E34(v503);
        sub_31C98(v598);
        sub_31C98((uint64_t)v599);
        uint64_t v421 = *(uint8_t **)(v502 + 8);
        sub_31D18(v601);
        sub_31E34((uint64_t)&qword_D3788);
        sub_31C98(v402);
        sub_31EF8();
        if ((v506 & 1) != 0) {
          goto LABEL_205;
        }
LABEL_195:
        uint64_t v465 = v625;
        Input.parse.getter(v422);
        sub_174D8( v465,  v466,  v467,  v468,  v469,  v470,  v471,  v472,  v572,  v573,  v574,  v575,  v576,  v577,  v578,  v579,  (uint64_t)v580,  v581,  v582,  v583);
        uint64_t v403 = v473;
        sub_1772C();
        v474(v465, v636);
        if (!v403 || (uint64_t v475 = sub_31D8C(), v476 = swift_dynamicCastClass(v403, v475), v403, !v476))
        {
          sub_31D80(v588, v420, (uint64_t (*)(uint64_t, uint64_t, void))v180[2]);
          uint64_t v489 = (os_log_s *)sub_31C58();
          os_log_type_t v490 = static os_log_type_t.error.getter();
          if (sub_16CA0(v490))
          {
            uint64_t v491 = sub_16AC4(22LL);
            uint64_t v492 = sub_16AC4(64LL);
            v657 = v421;
            uint64_t v493 = v492;
            *(void *)&__int128 v660 = v492;
            *(_DWORD *)uint64_t v491 = 136315394;
            v658 = (uint64_t *)sub_31CD0();
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v658, &v659, v491 + 4, v491 + 12);
            *(_WORD *)(v491 + 12) = 2080;
            sub_31CE8( (unint64_t *)&unk_D37B0,  v494,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
            uint64_t v496 = dispatch thunk of CustomStringConvertible.description.getter(v420, v495);
            v658 = (uint64_t *)sub_16B80(v496, v497);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v658, &v659, v491 + 14, v491 + 22);
            sub_16C48();
            sub_31E54();
            _os_log_impl( &dword_0,  v489,  (os_log_type_t)v404,  "Intent from parse does not match IntentType. Expected %s, received %s",  (uint8_t *)v491,  0x16u);
            sub_31EB0();
            uint64_t v498 = v493;
            uint64_t v421 = v657;
            sub_16AA8(v498);
            sub_16AA8(v491);
          }

          else
          {
            sub_31E54();
          }

          sub_16FE0();
          uint64_t v499 = v616;
          uint64_t v500 = (uint64_t)v614;
          goto LABEL_217;
        }

        uint64_t v477 = v585;
        sub_31DD8(v585);
        sub_31C58();
        os_log_type_t v478 = sub_16B4C();
        if (sub_16C38(v478))
        {
          uint64_t v479 = (uint8_t *)sub_16AC4(12LL);
          uint64_t v480 = sub_16AC4(32LL);
          *(void *)&__int128 v660 = v480;
          *(_DWORD *)uint64_t v479 = 136315138;
          v657 = v479 + 4;
          sub_31F18(v583, v477);
          uint64_t v481 = sub_31E90();
          unint64_t v483 = v482;
          uint64_t v484 = sub_16B80(v481, v482);
          uint64_t v485 = sub_31E3C(v484);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v485, v486, v487, v479 + 12);
          swift_bridgeObjectRelease(v483);
          sub_31D18(v477);
          uint64_t v488 = "decideActionForInput decide handle userDialogAct: %s";
LABEL_207:
          sub_16BD0(&dword_0, (os_log_s *)v403, (os_log_type_t)v180, v488, v479);
          sub_16BB4(v480);
          uint64_t v513 = v480;
          uint64_t v404 = (uint64_t)v614;
          sub_16AA8(v513);
          sub_16AA8((uint64_t)v479);
LABEL_216:

          sub_17044();
          uint64_t v499 = v616;
          uint64_t v500 = v404;
LABEL_217:
          ((void (*)(uint64_t, uint64_t))v421)(v499, v500);
          return;
        }

        uint64_t v501 = v477;
LABEL_215:
        ((void (*)(uint64_t, uint64_t))v421)(v501, v404);
        goto LABEL_216;
      }

      sub_31D98(v598);
      sub_31D98((uint64_t)v599);
      uint64_t v421 = *(uint8_t **)(v399 + 8);
      sub_31D18(v601);
      sub_1704C((uint64_t)&qword_D3788, *(uint64_t (**)(uint64_t, uint64_t))(v593 + 8));
      sub_31EF8();
    }

    sub_31DD0(v464, &qword_D3780);
    goto LABEL_195;
  }

LABEL_50:
  uint64_t v229 = v630;
  ((void (*)(uint64_t, void, uint64_t))v650[0])( v630,  enum case for DecideAction.PromptExpectation.slot(_:),  v104);
  uint64_t v230 = sub_31D2C(v229);
  uint64_t v231 = v631;
  uint64_t v233 = v631 + v232;
  sub_16EC4(v230, v631);
  sub_16EC4(v229, v233);
  uint64_t v234 = sub_1D6DC(v231);
  if (!v175)
  {
    sub_31ED8(v231, &qword_D37A8, (uint64_t)&v652);
    uint64_t v249 = sub_1D6DC(v233);
    if (!v248)
    {
      os_log_type_t v180 = (uint64_t *)v653;
      sub_31CB8(*(uint64_t (**)(void, uint64_t, uint64_t))(v653 + 32));
      sub_31CE8( &qword_D37C0,  v293,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
      uint64_t v233 = sub_31D74(v177, v178);
      sub_31DB8();
      sub_31C98(v229);
      sub_31DC8(v177);
      sub_31C98(v231);
      if ((v233 & 1) != 0) {
        goto LABEL_89;
      }
      goto LABEL_69;
    }

    sub_2D20C(v249, &qword_D37A8);
    uint64_t v235 = sub_16EF0(v177, *(uint64_t (**)(uint64_t, uint64_t))(v653 + 8));
LABEL_68:
    sub_31DD0(v235, &qword_D37A0);
LABEL_69:
    sub_31C58();
    os_log_type_t v250 = sub_16B4C();
    if (sub_16ACC(v250))
    {
      uint64_t v251 = (_WORD *)sub_16AC4(2LL);
      sub_16BEC(v251);
      sub_16ADC(&dword_0, v252, v253, "Received cancel input on non-confirmation, non-slot prompt input – .ignore()");
      sub_16AA8((uint64_t)v180);
    }

LABEL_72:
    sub_16FE0();
    return;
  }

  sub_2D20C(v234, &qword_D37A8);
  uint64_t v235 = sub_1D6DC(v233);
  if (!v175) {
    goto LABEL_68;
  }
  sub_31DD0(v235, &qword_D37A8);
LABEL_89:
  sub_31C58();
  os_log_type_t v294 = sub_16B4C();
  if (sub_16ACC(v294))
  {
    os_log_type_t v295 = (_WORD *)sub_16AC4(2LL);
    sub_16BEC(v295);
    sub_16ADC(&dword_0, v296, v297, "Received cancel input slow prompt input – .cancel()");
    sub_16AA8((uint64_t)v180);
  }

  sub_1728C();
}

  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void sub_30804(uint8_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_3082C(uint8_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_30854(uint8_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

uint64_t sub_3087C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D4710);
  sub_26F0(v0, (uint64_t)qword_D4710);
  return static SiriTimeLog.alarmFlow.getter();
}

void sub_308C4()
{
  uint64_t v1 = v0;
  if (qword_D2FF8 != -1) {
    swift_once(&qword_D2FF8, sub_3087C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_26F0(v2, (uint64_t)qword_D4710);
  uint64_t v3 = swift_retain_n(v0, 2LL);
  oslog = (os_log_s *)Logger.logObject.getter(v3, v4, v5, v6, v7, v8, v9, v10);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    LOBYTE(v18) = *(_BYTE *)(v1 + 16);
    uint64_t v14 = String.init<A>(describing:)(&v18, &type metadata for CreateAlarmReformableFlow.State);
    unint64_t v16 = v15;
    uint64_t v18 = sub_3D10(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v16);
    swift_release_n(v1, 2LL);
    _os_log_impl(&dword_0, oslog, v11, "CreateAlarmReformableFlow.state = %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v0, 2LL);
  }

uint64_t CreateAlarmReformableFlow.on(input:)(uint8_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v67 = a1;
  uint64_t v66 = *(void *)(type metadata accessor for Parse(0LL) - 8);
  sub_16AFC();
  __chkstk_darwin(v3);
  sub_16B30();
  uint64_t v65 = v4;
  sub_26B0(&qword_D37A8);
  sub_16AFC();
  __chkstk_darwin(v5);
  sub_17390();
  uint64_t v8 = v7 - v6;
  sub_26B0(&qword_D37D0);
  sub_16AFC();
  __chkstk_darwin(v9);
  sub_17390();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for ActionForInput(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v63 - v18;
  if (qword_D2FF8 != -1) {
    swift_once(&qword_D2FF8, sub_3087C);
  }
  uint64_t v20 = sub_16C80();
  uint64_t v68 = (os_log_s *)sub_26F0(v20, (uint64_t)qword_D4710);
  sub_16D50();
  os_log_type_t v21 = sub_16C50();
  if (os_log_type_enabled(v1, v21))
  {
    uint64_t v22 = (uint8_t *)sub_16AC4(2LL);
    uint64_t v64 = v17;
    uint64_t v23 = v22;
    *(_WORD *)uint64_t v22 = 0;
    sub_16B44(&dword_0, v1, v21, "CreateAlarmReformableFlow: decideActionForInput begin", v22);
    uint64_t v24 = (uint64_t)v23;
    uint64_t v2 = v1;
    uint64_t v17 = v64;
    sub_16AA8(v24);
  }

  type metadata accessor for HALAlarmDeviceContext(0LL);
  sub_31E18();
  type metadata accessor for DecideAction.PromptExpectation(0LL);
  uint64_t v25 = sub_31EC0();
  sub_A40C(v25, v26, 1LL, v27);
  sub_2DAA0( v67,  v12,  0,  v8,  &type metadata accessor for CreateAlarmIntent,  &qword_D4898,  0xD000000000000011LL,  0x80000000000A87B0LL,  (uint64_t)v19);
  sub_31E2C(v28, &qword_D37A8);
  sub_7EC4(v12, &qword_D37D0);
  if (!*((_BYTE *)v2 + 16))
  {
    uint64_t v30 = v65;
    Input.parse.getter(v29);
    sub_31E18();
    sub_CF8C( v30,  v12,  v31,  v32,  v33,  v34,  v35,  v36,  v63,  (uint64_t)v64,  v65,  v66,  (uint64_t)v67,  (uint64_t)v68,  v69,  v70,  v71,  v72,  v73,  v74);
    uint64_t v38 = v37;
    sub_7EC4(v12, &qword_D37D0);
    sub_16EF0(v30, *(uint64_t (**)(uint64_t, uint64_t))(v66 + 8));
    if (v38)
    {
      uint64_t AlarmIntent = type metadata accessor for CreateAlarmIntent(0LL);
      uint64_t v40 = sub_31DF0(AlarmIntent);
      if (v40)
      {
LABEL_10:
        uint64_t v41 = (void *)*((void *)v2 + 3);
        *((void *)v2 + sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = v40;

        goto LABEL_11;
      }
    }

    uint64_t v40 = 0LL;
    goto LABEL_10;
  }

LABEL_11:
  static ActionForInput.handle()(v29);
  sub_31CE8( &qword_D37C8,  v42,  (uint64_t (*)(uint64_t))&type metadata accessor for ActionForInput,  (uint64_t)&protocol conformance descriptor for ActionForInput);
  uint64_t v43 = sub_17614();
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v44, v13);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  uint64_t v47 = v46(v17, v13);
  uint64_t v48 = v68;
  Logger.logObject.getter(v47, v49, v50, v51, v52, v53, v54, v55);
  os_log_type_t v56 = sub_16C50();
  BOOL v57 = os_log_type_enabled(v48, v56);
  if ((v45 & 1) != 0)
  {
    if (v57)
    {
      uint64_t v58 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)uint64_t v58 = 0;
      os_log_type_t v59 = v56;
      uint64_t v60 = "CreateAlarmReformableFlow: decideActionForInput true";
LABEL_16:
      sub_16B44(&dword_0, v48, v59, v60, v58);
      sub_16AA8((uint64_t)v58);
    }
  }

  else if (v57)
  {
    uint64_t v58 = (uint8_t *)sub_16AC4(2LL);
    *(_WORD *)uint64_t v58 = 0;
    os_log_type_t v59 = v56;
    uint64_t v60 = "CreateAlarmReformableFlow: decideActionForInput false";
    goto LABEL_16;
  }

  uint64_t v61 = sub_31E74();
  ((void (*)(uint64_t))v46)(v61);
  return v45 & 1;
}

uint64_t CreateAlarmReformableFlow.execute()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Parse(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = sub_19754(v4);
  uint64_t v5 = type metadata accessor for Input(0LL);
  v2[7] = sub_19754(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for PluginAction(0LL);
  _BYTE v2[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v2[9] = v7;
  v2[10] = sub_19754(v7);
  uint64_t v8 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[12] = v9;
  v2[13] = sub_19754(v9);
  return swift_task_switch(sub_30EF0, 0LL, 0LL);
}

uint64_t sub_30EF0()
{
  uint64_t v4 = *(void *)(v3 + 24);
  if (!*(_BYTE *)(v4 + 16))
  {
    if (qword_D2FF8 != -1) {
      swift_once(&qword_D2FF8, sub_3087C);
    }
    uint64_t v18 = sub_16C80();
    sub_26F0(v18, (uint64_t)qword_D4710);
    sub_16D50();
    os_log_type_t v19 = sub_16C50();
    if (sub_1990C(v19))
    {
      uint64_t v20 = (_WORD *)sub_16AC4(2LL);
      sub_16BEC(v20);
      sub_16B44(&dword_0, v1, v0, "CreateAlarmReformableFlow: execute() state begin", v2);
      sub_16AA8((uint64_t)v2);
    }

    uint64_t v21 = *(void *)(v3 + 24);

    uint64_t v22 = *(void **)(v21 + 24);
    uint64_t v23 = *(void *)(v3 + 24);
    if (v22)
    {
      id v24 = v22;
      sub_9822C();
      uint64_t v26 = v25;
      swift_retain(v23);
      static ExecuteResponse.ongoing<A>(next:childCompletion:)(v26, sub_31A60, v23);

      swift_release(v26);
      sub_17324();
      goto LABEL_24;
    }

    goto LABEL_22;
  }

  if (*(_BYTE *)(v4 + 16) != 1)
  {
    if (qword_D2FF8 != -1) {
      swift_once(&qword_D2FF8, sub_3087C);
    }
    uint64_t v27 = sub_16C80();
    sub_26F0(v27, (uint64_t)qword_D4710);
    sub_16D50();
    os_log_type_t v28 = sub_16C50();
    if (sub_1990C(v28))
    {
      uint64_t v29 = (_WORD *)sub_16AC4(2LL);
      sub_16BEC(v29);
      sub_16B44(&dword_0, v1, v0, "CreateAlarmReformableFlow: execute() state complete", v2);
      sub_16AA8((uint64_t)v2);
    }

    goto LABEL_23;
  }

  if (qword_D2FF8 != -1) {
    swift_once(&qword_D2FF8, sub_3087C);
  }
  uint64_t v5 = sub_16C80();
  sub_26F0(v5, (uint64_t)qword_D4710);
  sub_16D50();
  os_log_type_t v6 = sub_16C50();
  if (sub_1990C(v6))
  {
    uint64_t v7 = (_WORD *)sub_16AC4(2LL);
    sub_16BEC(v7);
    sub_16B44(&dword_0, v1, v0, "CreateAlarmReformableFlow: execute() state reformToTimer", v2);
    sub_16AA8((uint64_t)v2);
  }

  uint64_t v8 = *(void *)(v3 + 24);

  uint64_t v9 = *(void **)(v8 + 24);
  if (!v9 || (id v10 = [v9 relativeOffsetInMinutes]) == 0)
  {
LABEL_22:
    *(_BYTE *)(v4 + 16) = 2;
    sub_308C4();
LABEL_23:
    static ExecuteResponse.complete()();
    goto LABEL_24;
  }

  uint64_t v11 = v10;
  [v10 doubleValue];
  double v13 = v12;

  uint64_t v14 = *(void **)(v8 + 24);
  if (v14)
  {
    uint64_t v15 = sub_319F4(v14);
    uint64_t v17 = v16;
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v17 = 0LL;
  }

  uint64_t v35 = *(void *)(v3 + 96);
  uint64_t v34 = *(void *)(v3 + 104);
  uint64_t v37 = *(void *)(v3 + 80);
  uint64_t v36 = *(void *)(v3 + 88);
  uint64_t v38 = *(void *)(v3 + 56);
  uint64_t v42 = *(void *)(v3 + 72);
  uint64_t v43 = *(void *)(v3 + 64);
  uint64_t v40 = *(void *)(v3 + 40);
  uint64_t v39 = *(void *)(v3 + 48);
  uint64_t v41 = *(void *)(v3 + 32);
  static DirectInvocationUtils.Alarm.reformToTimer(duration:label:)(v15, v13 * 60.0);
  swift_bridgeObjectRelease(v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v39, v34, v36);
  (*(void (**)(uint64_t, void, uint64_t))(v40 + 104))(v39, enum case for Parse.directInvocation(_:), v41);
  Input.init(parse:)(v39);
  PluginAction.init(flowHandlerId:input:)(0xD000000000000026LL, 0x80000000000A8700LL, v38);
  static ExecuteResponse.redirect(nextPluginAction:)(v37);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v37, v43);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
LABEL_24:
  uint64_t v30 = *(void *)(v3 + 80);
  uint64_t v32 = *(void *)(v3 + 48);
  uint64_t v31 = *(void *)(v3 + 56);
  swift_task_dealloc(*(void *)(v3 + 104));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_312A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D4888);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for RCHFlowResult.complete<A, B>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = (void *)v7[1];
    id v10 = (void *)v7[2];
    swift_release(*v7);
    if (qword_D2FF8 != -1) {
      swift_once(&qword_D2FF8, sub_3087C);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_26F0(v11, (uint64_t)qword_D4710);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v12, v13, v14, v15, v16, v17, v18, v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_0, v20, v21, "CreateAlarmReformableFlow: execute() child complete", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    uint64_t AlarmIntent = dispatch thunk of CreateAlarmIntentResponse.code.getter();
    uint64_t AlarmIntentResponse = CreateAlarmIntentResponseCode.rawValue.getter(AlarmIntent);
    if (AlarmIntentResponse == CreateAlarmIntentResponseCode.rawValue.getter(100LL))
    {
      uint64_t v25 = *(void **)(a2 + 24);
      *(void *)(a2 + 24) = v9;
      id v26 = v9;

      *(_BYTE *)(a2 + 16) = 1;
      sub_308C4();
    }

    else
    {
      *(_BYTE *)(a2 + 16) = 2;
      sub_308C4();
    }
  }

  else if (v8 == enum case for RCHFlowResult.error<A, B>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v27 = *v7;
    if (qword_D2FF8 != -1) {
      swift_once(&qword_D2FF8, sub_3087C);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_26F0(v28, (uint64_t)qword_D4710);
    swift_errorRetain(v27);
    uint64_t v29 = swift_errorRetain(v27);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v29, v30, v31, v32, v33, v34, v35, v36);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      uint64_t v69 = v27;
      uint64_t v70 = v40;
      *(_DWORD *)uint64_t v39 = 136315138;
      swift_errorRetain(v27);
      uint64_t v41 = sub_26B0(&qword_D4890);
      uint64_t v42 = String.init<A>(describing:)(&v69, v41);
      unint64_t v44 = v43;
      uint64_t v69 = sub_3D10(v42, v43, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease(v44);
      swift_errorRelease(v27);
      swift_errorRelease(v27);
      _os_log_impl(&dword_0, v37, v38, "CreateAlarmReformableFlow: execute() child error: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v27);
      swift_errorRelease(v27);
    }

    *(_BYTE *)(a2 + 16) = 2;
    sub_308C4();
    swift_errorRelease(v27);
  }

  else if (v8 == enum case for RCHFlowResult.cancelled<A, B>(_:))
  {
    if (qword_D2FF8 != -1) {
      swift_once(&qword_D2FF8, sub_3087C);
    }
    uint64_t v45 = type metadata accessor for Logger(0LL);
    uint64_t v46 = sub_26F0(v45, (uint64_t)qword_D4710);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v46, v47, v48, v49, v50, v51, v52, v53);
    os_log_type_t v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      os_log_type_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v56 = 0;
      _os_log_impl(&dword_0, v54, v55, "CreateAlarmReformableFlow: execute() child cancelled", v56, 2u);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    *(_BYTE *)(a2 + 16) = 2;
    sub_308C4();
  }

  else
  {
    if (qword_D2FF8 != -1) {
      swift_once(&qword_D2FF8, sub_3087C);
    }
    uint64_t v57 = type metadata accessor for Logger(0LL);
    uint64_t v58 = sub_26F0(v57, (uint64_t)qword_D4710);
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v58, v59, v60, v61, v62, v63, v64, v65);
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl(&dword_0, v66, v67, "CreateAlarmReformableFlow: execute() child unknown", v68, 2u);
      swift_slowDealloc(v68, -1LL, -1LL);
    }

    *(_BYTE *)(a2 + 16) = 2;
    sub_308C4();
    (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  }

uint64_t CreateAlarmReformableFlow.execute(completion:)()
{
  uint64_t AlarmReformableFlow = type metadata accessor for CreateAlarmReformableFlow();
  sub_31C1C( qword_D4738,  v1,  (uint64_t (*)(uint64_t))type metadata accessor for CreateAlarmReformableFlow,  (uint64_t)&protocol conformance descriptor for CreateAlarmReformableFlow);
  uint64_t v2 = sub_31E74();
  return Flow.deferToExecuteAsync(_:)(v2, v3, AlarmReformableFlow, v4);
}

uint64_t CreateAlarmReformableFlow.deinit()
{
  return v0;
}

uint64_t CreateAlarmReformableFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_31894()
{
  uint64_t result = v0;
  *(_BYTE *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0LL;
  return result;
}

uint64_t sub_318A4(uint8_t *a1)
{
  return CreateAlarmReformableFlow.on(input:)(a1) & 1;
}

uint64_t sub_318C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_5DA4;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_31930()
{
  return CreateAlarmReformableFlow.execute(completion:)();
}

uint64_t sub_31950(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_D4734);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_319A4;
  return CreateAlarmReformableFlow.execute()(a1);
}

uint64_t sub_319A4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_319D0(uint64_t a1, uint64_t a2)
{
  uint64_t AlarmReformableFlow = type metadata accessor for CreateAlarmReformableFlow();
  return Flow<>.exitValue.getter(AlarmReformableFlow, a2);
}

uint64_t sub_319F4(void *a1)
{
  id v2 = [a1 label];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void sub_31A60(uint64_t a1)
{
}

uint64_t type metadata accessor for CreateAlarmReformableFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC15AlarmFlowPlugin25CreateAlarmReformableFlow);
}

uint64_t getEnumTagSinglePayload for CreateAlarmReformableFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for CreateAlarmReformableFlow.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_31B5C + 4 * byte_A51E5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_31B90 + 4 * byte_A51E0[v4]))();
}

uint64_t sub_31B90(uint64_t result)
{
  *(_BYTE *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_31B98(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x31BA0LL);
  }
  return result;
}

uint64_t sub_31BAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x31BB4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_31BB8(uint64_t result)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_31BC0(uint64_t result)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CreateAlarmReformableFlow.State()
{
  return &type metadata for CreateAlarmReformableFlow.State;
}

unint64_t sub_31BE0()
{
  unint64_t result = qword_D4840;
  if (!qword_D4840)
  {
    unint64_t result = swift_getWitnessTable(&unk_A52C0, &type metadata for CreateAlarmReformableFlow.State);
    atomic_store(result, (unint64_t *)&qword_D4840);
  }

  return result;
}

void sub_31C1C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (!*a1)
  {
    uint64_t v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }

  sub_17B50();
}

uint64_t sub_31C58()
{
  return Logger.logObject.getter();
}

void sub_31C64(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_31C78()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 304) + 8LL))( *(void *)(v0 - 312),  *(void *)(v0 - 296));
}

void sub_31C98(uint64_t a1)
{
}

uint64_t sub_31CA0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0LL;
}

void sub_31CB0( uint8_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
}

uint64_t sub_31CB8@<X0>(uint64_t (*a1)(void, uint64_t, uint64_t)@<X8>)
{
  return a1(*(void *)(v3 - 264), v1, v2);
}

uint64_t sub_31CD0()
{
  return sub_3D10(*(void *)(v0 - 600), *(void *)(v0 - 592), (uint64_t *)(v0 - 120));
}

void sub_31CE8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
}

uint64_t sub_31CF0()
{
  return (*(uint64_t (**)(void, uint64_t))(v0 + 96))(*(void *)(v2 - 320), v1);
}

void sub_31D08(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_31D18(uint64_t a1)
{
  return v1(a1, *(void *)(v2 - 552));
}

uint64_t sub_31D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return v2(a1, *(void *)(a2 - 256));
}

uint64_t sub_31D2C(uint64_t a1)
{
  return *(void *)(v2 - 152);
}

uint64_t sub_31D50@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_31D58@<X0>(uint64_t (*a1)(void, void, void)@<X8>)
{
  return a1(*(void *)(v1 - 256), *(void *)(v2 - 144), *(void *)(v2 - 648));
}

uint64_t sub_31D74(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v2);
}

uint64_t sub_31D80@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void)@<X8>)
{
  return a3(a1, a2, *(void *)(v3 - 256));
}

uint64_t sub_31D8C()
{
  return (*(uint64_t (**)(void))(v0 - 200))(0LL);
}

void sub_31D98(uint64_t a1)
{
}

uint64_t sub_31DA0()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_31DAC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_31DB8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_31DC8(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_31DD0(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_31DD8(uint64_t a1)
{
  return v1(a1, *(void *)(v2 - 528), *(void *)(v2 - 552));
}

uint64_t sub_31DF0(uint64_t a1)
{
  return swift_dynamicCastClass(v1, a1);
}

  ;
}

uint64_t sub_31E18()
{
  return sub_A40C(v1, 1LL, 1LL, v0);
}

void sub_31E2C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_31E34(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_31E3C(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

uint64_t sub_31E54()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

  ;
}

uint64_t sub_31E74()
{
  return v0;
}

BOOL sub_31E80(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_31E90()
{
  return String.init<A>(describing:)(v0, *(void *)(v1 - 552));
}

uint64_t sub_31EA0(uint64_t a1)
{
  return sub_A40C(a1, 0LL, 1LL, v1);
}

uint64_t sub_31EB0()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t sub_31EC0()
{
  return v0;
}

  ;
}

void sub_31ED8(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_31EE4(uint64_t result)
{
  *(void *)(v2 - 376) = v1;
  *(void *)(v2 - 120) = result;
  return result;
}

  ;
}

  ;
}

uint64_t sub_31F18(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, *(void *)(v3 - 552));
}

uint64_t sub_31F24()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_31F30(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_31F38()
{
  return v0;
}

uint64_t sub_31F44()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D48B0);
  sub_26F0(v0, (uint64_t)qword_D48B0);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_31F8C()
{
  uint64_t v0 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  sub_1688C(v0, qword_D48C8);
  uint64_t v1 = sub_26F0(v0, (uint64_t)qword_D48C8);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v0 - 8) + 104LL))( v1,  enum case for SiriTimeEventSender.TaskType.createAlarmIntent(_:),  v0);
}

uint64_t sub_31FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v3[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[8] = v5;
  void v3[9] = sub_19754(v5);
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  v3[10] = sub_19754(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for AppInstallDialogOutputUtil(0LL);
  v3[11] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[12] = v8;
  v3[13] = sub_19754(v8);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  v3[14] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[15] = v10;
  v3[16] = sub_19754(v10);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  v3[17] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[18] = v12;
  v3[19] = sub_19754(v12);
  uint64_t v13 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[20] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[21] = v14;
  v3[22] = sub_19754(v14);
  uint64_t v15 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[23] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[24] = v16;
  v3[25] = sub_19754(v16);
  uint64_t v17 = type metadata accessor for AppInstallUtil(0LL);
  v3[26] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v3[27] = v18;
  v3[28] = sub_19754(v18);
  uint64_t v19 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v3[29] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v3[30] = v20;
  v3[31] = sub_19754(v20);
  uint64_t v21 = type metadata accessor for DialogPhase(0LL);
  v3[32] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v3[33] = v22;
  v3[34] = sub_19754(v22);
  uint64_t v23 = type metadata accessor for AppInstallUtil.Domain(0LL);
  v3[35] = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  v3[36] = v24;
  unint64_t v25 = (*(void *)(v24 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[37] = swift_task_alloc(v25);
  v3[38] = swift_task_alloc(v25);
  uint64_t v26 = sub_26B0(&qword_D43F8);
  v3[39] = sub_19754(*(void *)(v26 - 8));
  uint64_t v27 = sub_26B0(&qword_D4400);
  v3[40] = sub_19754(*(void *)(v27 - 8));
  uint64_t v28 = sub_26B0(&qword_D4408);
  v3[41] = sub_19754(*(void *)(v28 - 8));
  uint64_t v29 = type metadata accessor for ActivityType(0LL);
  v3[42] = v29;
  uint64_t v30 = *(void *)(v29 - 8);
  v3[43] = v30;
  v3[44] = sub_19754(v30);
  sub_19840();
  return swift_task_switch(v31, v32, v33);
}

uint64_t sub_321C8()
{
  if (qword_D3000 != -1) {
    swift_once(&qword_D3000, sub_31F44);
  }
  uint64_t v1 = sub_26F0(v0[17], (uint64_t)qword_D48B0);
  v0[45] = v1;
  uint64_t v48 = v1;
  uint64_t v9 = (void *)Logger.logObject.getter(v1, v2, v3, v4, v5, v6, v7, v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (sub_1990C(v10))
  {
    uint64_t v11 = (_WORD *)sub_16AC4(2LL);
    *uint64_t v11 = 0;
    sub_198C0(&dword_0, v12, v13, "In CreateSleepAlarmUnsupportedFlow async execute()");
    sub_16AA8((uint64_t)v11);
  }

  uint64_t v15 = v0[43];
  uint64_t v14 = v0[44];
  uint64_t v16 = v0[42];

  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))( v14,  enum case for ActivityType.resolveSlotUnsupported(_:),  v16);
  if (qword_D3008 != -1) {
    swift_once(&qword_D3008, sub_31F8C);
  }
  uint64_t v17 = v0[44];
  uint64_t v18 = v0[41];
  uint64_t v49 = v0[43];
  uint64_t v50 = v0[42];
  uint64_t v20 = v0[39];
  uint64_t v19 = v0[40];
  uint64_t v21 = v0[36];
  uint64_t v51 = v0[35];
  uint64_t v52 = v0[38];
  uint64_t v22 = v0[31];
  uint64_t v53 = v0[30];
  uint64_t v54 = v0[29];
  uint64_t v55 = v0[37];
  uint64_t v23 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  uint64_t v24 = sub_26F0(v23, (uint64_t)qword_D48C8);
  uint64_t v25 = enum case for SiriKitReliabilityCodes.unsupportedParameter(_:);
  uint64_t v26 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104LL))(v18, v25, v26);
  sub_A40C(v18, 0LL, 1LL, v26);
  uint64_t v27 = type metadata accessor for SiriTimeEventSender.Attribute(0LL);
  sub_A40C(v19, 1LL, 1LL, v27);
  uint64_t v28 = enum case for SiriTimeEventSender.ReasonDescription.alarmCreateSleepAlarmUnsupported(_:);
  uint64_t v29 = type metadata accessor for SiriTimeEventSender.ReasonDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104LL))(v20, v28, v29);
  sub_A40C(v20, 0LL, 1LL, v29);
  static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v17, v24, v18, v19, v20);
  sub_19594(v20, &qword_D43F8);
  sub_19594(v19, &qword_D4400);
  sub_19594(v18, &qword_D4408);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v17, v50);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v21 + 104))( v52,  enum case for AppInstallUtil.Domain.sleep(_:),  v51);
  uint64_t v31 = static DialogPhase.confirmation.getter(v30);
  static SiriTimeFeatureFlagsImpl.instance.getter(v31);
  LOBYTE(v28) = SiriTimeFeatureFlagsImpl.isConfirmationsResponseFrameworkEnabled()();
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v22, v54);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v55, v52, v51);
  uint64_t v32 = v0[37];
  if ((v28 & 1) != 0)
  {
    uint64_t v33 = v0[28];
    uint64_t v35 = v0[21];
    uint64_t v34 = v0[22];
    uint64_t v37 = v0[19];
    uint64_t v36 = v0[20];
    uint64_t v38 = v0[17];
    uint64_t v39 = v0[18];
    AppInstallUtil.init(domain:)(v0[37]);
    (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))( v34,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v36);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v37, v48, v38);
    uint64_t v40 = mach_absolute_time();
    SiriTimeMeasurement.init(_:log:startTime:)(v34, v37, v40);
    uint64_t v41 = swift_task_alloc(32LL);
    v0[46] = v41;
    *(void *)(v41 + 16) = v33;
    uint64_t v42 = (void *)swift_task_alloc(dword_D50C4);
    v0[47] = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_325D4;
    return sub_46C4C((uint64_t)sub_332A4, v41);
  }

  else
  {
    uint64_t v44 = v0[10];
    uint64_t v45 = type metadata accessor for AlarmBaseCATs_Async(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v46 = CATWrapper.__allocating_init(options:globals:)(v44, 0LL);
    v56[3] = v45;
    v56[4] = sub_33264();
    v56[0] = v46;
    AppInstallDialogOutputUtil.init(domain:fallbackCAT:)(v32, v56);
    uint64_t v47 = (void *)swift_task_alloc(async function pointer to AppInstallDialogOutputUtil.makeLaunchAppView()[1]);
    v0[51] = v47;
    *uint64_t v47 = v0;
    v47[1] = sub_327C8;
    return AppInstallDialogOutputUtil.makeLaunchAppView()();
  }

uint64_t sub_325D4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 376);
  *(void *)(*v2 + 384) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 368);
  if (!v1) {
    *(void *)(v4 + 392) = a1;
  }
  swift_task_dealloc(v6);
  sub_19840();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_32650(uint64_t a1)
{
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateFlowPatternResponse(phase:contextUpdate:measure:)[1]);
  v1[50] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_326B8;
  return PatternExecutionResult.generateFlowPatternResponse(phase:contextUpdate:measure:)(v1[4], v1[34], v1[16], v1[25]);
}

uint64_t sub_326B8()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 392LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 120LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 400LL));

  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_19840();
  return sub_197B8();
}

#error "327A0: call analysis failed (funcsize=42)"
uint64_t sub_327C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 408);
  uint64_t v6 = *(void *)(*v2 + 96);
  uint64_t v5 = *(void *)(*v2 + 104);
  uint64_t v7 = *(void *)(*v2 + 88);
  *(void *)(v3 + 416) = a1;
  *(void *)(v3 + 424) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  sub_19840();
  return sub_197B8();
}

uint64_t sub_3284C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (void *)Logger.logObject.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (sub_1990C(v10))
  {
    uint64_t v11 = (_WORD *)sub_16AC4(2LL);
    *uint64_t v11 = 0;
    sub_198C0(&dword_0, v12, v13, "CreateSleepAlarmUnsupportedFlow is generating dialog and snippet.");
    sub_16AA8((uint64_t)v11);
  }

  uint64_t v14 = (void *)swift_task_alloc(dword_D700C);
  *(void *)(v8 + 432) = v14;
  void *v14 = v8;
  v14[1] = sub_328EC;
  return sub_82DD4(*(void *)(v8 + 72));
}

uint64_t sub_328EC()
{
  uint64_t v2 = (*v1)[54];
  uint64_t v3 = *v1;
  v3[55] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease(v3[52]);
    sub_19840();
    return sub_197B8();
  }

  else
  {
    uint64_t v5 = (uint64_t **)swift_task_alloc(dword_D38A4);
    v3[56] = (uint64_t)v5;
    *uint64_t v5 = v3;
    v5[1] = (uint64_t *)sub_32988;
    return sub_18F20(v3[4], v3[52], v3[34]);
  }

uint64_t sub_32988()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 448LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 416LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 456LL) = v0;
  swift_task_dealloc(v2);
  sub_33420(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  swift_bridgeObjectRelease(v3);
  sub_19840();
  return swift_task_switch(v5, v6, v7);
}

#error "32A70: call analysis failed (funcsize=33)"
#error "32BA4: call analysis failed (funcsize=73)"
#error "32CBC: call analysis failed (funcsize=67)"
#error "32DD4: call analysis failed (funcsize=67)"
#error "32EEC: call analysis failed (funcsize=67)"
uint64_t sub_32F10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v2 = sub_26B0(&qword_D3A08);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  AppInstallUtil.appStorePunchout(installOnly:)(0LL);
  return sub_1B4F0((uint64_t)v4, a1);
}

uint64_t sub_32F8C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_332AC();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for CreateSleepAlarmUnsupportedFlow, v4);
}

uint64_t sub_32FE0()
{
  uint64_t v0 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v0);
  type metadata accessor for CreateAlarmCATs_Async(0LL);
  sub_33408();
  uint64_t v1 = sub_33414();
  type metadata accessor for CreateAlarmCATPatternsExecutor(0LL);
  sub_33408();
  sub_33414();
  return v1;
}

uint64_t destroy for CreateSleepAlarmUnsupportedFlow(void *a1)
{
  return swift_release(a1[1]);
}

uint64_t *_s15AlarmFlowPlugin31CreateSleepAlarmUnsupportedFlowVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for CreateSleepAlarmUnsupportedFlow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

__n128 initializeWithTake for CreateSleepAlarmUnsupportedFlow(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for CreateSleepAlarmUnsupportedFlow(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CreateSleepAlarmUnsupportedFlow(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CreateSleepAlarmUnsupportedFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CreateSleepAlarmUnsupportedFlow()
{
  return &type metadata for CreateSleepAlarmUnsupportedFlow;
}

uint64_t sub_331F4(uint64_t a1, uint64_t a2)
{
  return sub_32F8C(a1, a2);
}

uint64_t sub_331FC(uint64_t a1)
{
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = (void *)swift_task_alloc(dword_D48F4);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_319A4;
  return sub_31FE4(a1, v5, v4);
}

unint64_t sub_33264()
{
  unint64_t result = qword_D48F8;
  if (!qword_D48F8)
  {
    uint64_t v1 = type metadata accessor for AlarmBaseCATs_Async(255LL);
    unint64_t result = swift_getWitnessTable(&unk_A7C8C, v1);
    atomic_store(result, (unint64_t *)&qword_D48F8);
  }

  return result;
}

uint64_t sub_332A4(uint64_t a1)
{
  return sub_32F10(a1);
}

unint64_t sub_332AC()
{
  unint64_t result = qword_D4900;
  if (!qword_D4900)
  {
    unint64_t result = swift_getWitnessTable(&unk_A5310, &type metadata for CreateSleepAlarmUnsupportedFlow);
    atomic_store(result, (unint64_t *)&qword_D4900);
  }

  return result;
}

uint64_t sub_332E8()
{
  return swift_task_dealloc(*(void *)(v0 + 352));
}

uint64_t sub_33330(float a1)
{
  *uint64_t v2 = a1;
  *(void *)(v3 + 16) = v1;
  return swift_errorRetain(v1);
}

uint64_t sub_33350(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v3, v2);
}

uint64_t sub_3336C()
{
  return swift_task_dealloc(*(void *)(v0 + 352));
}

uint64_t sub_333B4()
{
  return static ExecuteResponse.complete()();
}

uint64_t sub_333CC()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t sub_333DC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_333EC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_333FC( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_3D10(a1, a2, (uint64_t *)va);
}

uint64_t sub_33408()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_33414()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t sub_33420@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t type metadata accessor for ResultCATPatternsExecutor(uint64_t a1)
{
  uint64_t result = qword_D4908;
  if (!qword_D4908) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ResultCATPatternsExecutor);
  }
  return result;
}

uint64_t sub_33464(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D81E8);
}

uint64_t sub_334A0()
{
  return type metadata accessor for ResultCATPatternsExecutor(0LL);
}

uint64_t sub_334A8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D4958);
  sub_26F0(v0, (uint64_t)qword_D4958);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_334F0@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_26B0(&qword_D37A8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_26B0(&qword_D37D0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_D3010 != -1) {
    swift_once(&qword_D3010, sub_334A8);
  }
  uint64_t v10 = sub_16C80();
  sub_26F0(v10, (uint64_t)qword_D4958);
  uint64_t v11 = (os_log_s *)sub_16D50();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)sub_1EFA4();
    *(_WORD *)uint64_t v13 = 0;
    sub_16B44(&dword_0, v11, v12, "DeleteAlarm.ConfirmIntentStrategy.actionForInput() called)", v13);
    sub_16AA8((uint64_t)v13);
  }

  uint64_t v14 = type metadata accessor for HALAlarmDeviceContext(0LL);
  sub_A40C((uint64_t)v9, 1LL, 1LL, v14);
  uint64_t v15 = enum case for DecideAction.PromptExpectation.confirmation(_:);
  uint64_t v16 = type metadata accessor for DecideAction.PromptExpectation(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(v6, v15, v16);
  sub_A40C((uint64_t)v6, 0LL, 1LL, v16);
  sub_2DA78(a1, (uint64_t)v9, 0, (uint64_t)v6, a2);
  sub_19594((uint64_t)v6, &qword_D37A8);
  return sub_19594((uint64_t)v9, &qword_D37D0);
}

uint64_t sub_336C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = sub_26B0((uint64_t *)&unk_D36F0);
  v3[5] = sub_19754(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for ConfirmationResponse(0LL);
  v3[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[7] = v6;
  v3[8] = sub_19754(v6);
  sub_19840();
  return sub_1988C();
}

#error "337EC: call analysis failed (funcsize=81)"
uint64_t sub_33884(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = sub_26B0(&qword_D3890);
  void v2[9] = sub_19754(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = sub_19754(v5);
  uint64_t v6 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  v2[13] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[14] = v7;
  uint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[15] = swift_task_alloc(v8);
  v2[16] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  v2[17] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[18] = v10;
  v2[19] = sub_19754(v10);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_33938()
{
  if (qword_D3010 != -1) {
    swift_once(&qword_D3010, sub_334A8);
  }
  uint64_t v1 = sub_16C80();
  sub_26F0(v1, (uint64_t)qword_D4958);
  uint64_t v2 = (os_log_s *)sub_16D50();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_1EFA4();
    *(_WORD *)uint64_t v4 = 0;
    sub_16B44(&dword_0, v2, v3, "DeleteAlarm.ConfirmIntentStrategy.makePromptForConfirmation() called", v4);
    sub_16AA8((uint64_t)v4);
  }

  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 112);

  *(_DWORD *)(v0 + 216) = enum case for AlarmNLv4Constants.AlarmVerb.delete(_:);
  uint64_t v8 = *(void (**)(uint64_t))(v7 + 104);
  *(void *)(v0 + 160) = v8;
  v8(v5);
  sub_79B0C();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  *(void *)(v0 + 168) = v9;
  uint64_t v10 = v9(v5, v6);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v10, v11, v12, v13, v14, v15, v16, v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)sub_1EFA4();
    *(_WORD *)uint64_t v20 = 0;
    sub_16B44(&dword_0, v18, v19, "In non-RF path for confirming deletion of all alarms.", v20);
    sub_16AA8((uint64_t)v20);
  }

  if (qword_D3068 != -1) {
    swift_once(&qword_D3068, sub_50694);
  }
  uint64_t v21 = (void *)swift_task_alloc(dword_D6FAC);
  *(void *)(v0 + 176) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_33B00;
  return sub_82AB4(*(void *)(v0 + 96), 1);
}

uint64_t sub_33B00()
{
  uint64_t v3 = *(void *)(v2 + 176);
  void *v4 = *v1;
  *(void *)(v2 + 184) = v0;
  swift_task_dealloc(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_33B50()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_D5D84);
  *(void *)(v0 + 192) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_33BB0;
  return sub_52CD0(*(void *)(v0 + 120));
}

uint64_t sub_33BB0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 192LL);
  *(void *)(*(void *)v2 + 20Hasher.init(_seed:)(v3, 0LL) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v4[21];
  uint64_t v7 = v4[15];
  uint64_t v8 = v4[13];
  if (!v1) {
    v4[26] = a1;
  }
  v6(v7, v8);
  sub_19840();
  return swift_task_switch(v9, v10, v11);
}

uint64_t sub_33C34()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v17 = *(void *)(v0 + 128);
  uint64_t v18 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v15 = *(void *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 80);
  uint64_t v6 = *(void **)(v0 + 56);
  uint64_t v5 = *(void **)(v0 + 64);
  uint64_t v7 = v5 + 2;
  uint64_t v8 = v5[5];
  uint64_t v9 = v5[6];
  sub_80B4(v5 + 2, v8);
  char v10 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v2, v3);
  sub_A40C(v4, 0LL, 1LL, v3);
  uint64_t v11 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 16) = 0u;
  void v6[3] = v11;
  v6[4] = &protocol witness table for AceOutput;
  sub_19558(v6);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v13,  v7,  v10 & 1,  v14,  1LL,  1LL,  v4,  _swiftEmptyArrayStorage,  v0 + 16);
  swift_bridgeObjectRelease(v14);
  sub_19594(v0 + 16, &qword_D3898);
  sub_19594(v4, &qword_D3890);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v16);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  sub_19830();
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v13);
  sub_19800();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_33DCC()
{
  return sub_198F4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_33E24()
{
  return sub_198F4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_33E8C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_D49A4);
  *(void *)(v1 + 32) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_33EDC;
  return sub_33884(a1);
}

uint64_t sub_33EDC()
{
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t v4 = *v1;
  *uint64_t v5 = v4;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc(v3);
  if (!v0) {
    return sub_1B5EC(*(uint64_t (**)(void))(v4 + 8));
  }
  sub_19840();
  return sub_1988C();
}

uint64_t sub_33F2C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 24) = v1;
  sub_26B0(&qword_D4890);
  uint64_t v2 = static BarbaraWalters.logAndReturnError<A>(context:_:)(0xD000000000000066LL, 0x80000000000A8890LL, v0 + 24);
  swift_willThrow(v2, v3, v4, v5, v6, v7, v8, v9);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _s21ConfirmIntentStrategyCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCO15AlarmFlowPlugin11DeleteAlarm21ConfirmIntentStrategy);
}

uint64_t sub_33FDC@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_334F0(a1, a2);
}

uint64_t sub_33FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_D499C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_34358;
  return sub_336C4(a1, a2, a3);
}

uint64_t sub_34058(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_D49AC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_34358;
  return sub_33E8C(a1);
}

uint64_t sub_340AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = _s21ConfirmIntentStrategyCMa();
  *uint64_t v8 = v4;
  v8[1] = sub_34358;
  return ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:)(a1, a2, v9, a4);
}

uint64_t sub_34128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = _s21ConfirmIntentStrategyCMa();
  *uint64_t v8 = v4;
  v8[1] = sub_34358;
  return ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:)(a1, a2, v9, a4);
}

uint64_t sub_341A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to ConfirmIntentFlowStrategyAsync.makeConfirmationRejectedResponse(confirmParameters:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = _s21ConfirmIntentStrategyCMa();
  *uint64_t v8 = v4;
  v8[1] = sub_34358;
  return ConfirmIntentFlowStrategyAsync.makeConfirmationRejectedResponse(confirmParameters:)(a1, a2, v9, a4);
}

uint64_t sub_34220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to ConfirmIntentFlowStrategyAsync.makeFlowCancelledResponse(confirmParameters:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = _s21ConfirmIntentStrategyCMa();
  *uint64_t v8 = v4;
  v8[1] = sub_3429C;
  return ConfirmIntentFlowStrategyAsync.makeFlowCancelledResponse(confirmParameters:)(a1, a2, v9, a4);
}

uint64_t sub_3429C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(v1 + 16));
  return sub_1B5EC(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_342D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10 = (void *)swift_task_alloc(async function pointer to ConfirmIntentFlowStrategyAsync.makeErrorResponse(error:confirmParameters:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = _s21ConfirmIntentStrategyCMa();
  *char v10 = v5;
  v10[1] = sub_34358;
  return ConfirmIntentFlowStrategyAsync.makeErrorResponse(error:confirmParameters:)(a1, a2, a3, v11, a5);
}

uint64_t sub_3435C()
{
  return (*(uint64_t (**)(void, void))(v0[18] + 8LL))(v0[19], v0[17]);
}

ValueMetadata *_s24UnsupportedValueStrategyVMa_0()
{
  return &_s24UnsupportedValueStrategyVN_0;
}

uint64_t sub_3438C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D4A88);
  sub_26F0(v0, (uint64_t)qword_D4A88);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_343D4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return sub_2D94C((uint64_t)sub_343E4);
}

uint64_t sub_343E4()
{
  uint64_t v1 = sub_26B0(&qword_D4AC0);
  uint64_t v2 = (void *)ParameterResolutionRecord.intent.getter(v1);
  v0[12] = v2;
  uint64_t v3 = (void *)ParameterResolutionRecord.result.getter(v1);
  v0[13] = v3;
  if (qword_D3018 != -1) {
    swift_once(&qword_D3018, sub_3438C);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v0[14] = sub_26F0(v4, (uint64_t)qword_D4A88);
  id v5 = v3;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v5, v6, v7, v8, v9, v10, v11, v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)sub_16AC4(12LL);
    *(_DWORD *)uint64_t v15 = 134217984;
    v0[9] = [v5 unsupportedReason];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v15 + 4, v15 + 12);

    _os_log_impl( &dword_0,  v13,  v14,  "ChangeAlarmStatus.makeUnsupportedValueOutput() called with unsupportedReason: %ld",  v15,  0xCu);
    sub_16AA8((uint64_t)v15);
  }

  else
  {
  }

  id v16 = [v2 alarmSearch];
  v0[15] = v16;
  uint64_t v17 = (void *)swift_task_alloc(dword_D3884);
  v0[16] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_2D50C;
  return sub_17E4C(v0[10], (uint64_t)v16, (uint64_t)v5);
}

uint64_t sub_3459C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return sub_2D94C((uint64_t)sub_345AC);
}

uint64_t sub_345AC()
{
  uint64_t v1 = sub_26B0(&qword_D4AC0);
  uint64_t v2 = ParameterResolutionRecord.intent.getter(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_345EC(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)swift_task_alloc(dword_D4ACC);
  *(void *)(v2 + 16) = v5;
  *id v5 = v2;
  v5[1] = sub_1B3B8;
  return sub_343D4(a1, a2);
}

uint64_t sub_34644(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_D4ABC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_5D0C;
  return sub_3459C(a1);
}

id sub_34690(void *a1, uint64_t a2, int a3)
{
  uint64_t v92 = a1;
  uint64_t v5 = type metadata accessor for HALAlarmDeviceContext(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v88 = (uint64_t)&v83 - v10;
  uint64_t v89 = sub_26B0(&qword_D37D0);
  uint64_t v11 = __chkstk_darwin(v89);
  uint64_t v87 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v90 = (char *)&v83 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v83 - v16;
  __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)&v83 - v18;
  if (qword_D3020 != -1) {
    swift_once(&qword_D3020, sub_34B74);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_26F0(v20, (uint64_t)qword_D4AD0);
  uint64_t v22 = sub_34BBC(a2, (uint64_t)v19);
  uint64_t v91 = v21;
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v22, v23, v24, v25, v26, v27, v28, v29);
  os_log_type_t v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    int v86 = a3;
    uint64_t v32 = sub_16AC4(12LL);
    uint64_t v85 = v9;
    uint64_t v33 = (uint8_t *)v32;
    uint64_t v34 = sub_16AC4(32LL);
    uint64_t v84 = a2;
    uint64_t v35 = v34;
    uint64_t v94 = v34;
    *(_DWORD *)uint64_t v33 = 136315138;
    sub_34C14((uint64_t)v19);
    uint64_t v36 = String.init<A>(describing:)(v17, v89);
    unint64_t v38 = v37;
    uint64_t v93 = sub_3D10(v36, v37, &v94);
    LOBYTE(asub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease(v38);
    sub_1B538((uint64_t)v19);
    _os_log_impl(&dword_0, v30, v31, "Making halIntent from halInfo: %s", v33, 0xCu);
    swift_arrayDestroy(v35, 1LL);
    uint64_t v39 = v35;
    a2 = v84;
    sub_16AA8(v39);
    uint64_t v40 = (uint64_t)v33;
    uint64_t v9 = v85;
    sub_16AA8(v40);
  }

  else
  {
    sub_1B538((uint64_t)v19);
  }

  uint64_t v41 = (objc_class *)type metadata accessor for SnoozeAlarmHalIntent(0LL);
  uint64_t v42 = v92;
  if (!swift_dynamicCastClass(v92, v41))
  {
    uint64_t v57 = type metadata accessor for ChangeAlarmStatusIntent(0LL);
    uint64_t v58 = swift_dynamicCastClass(v42, v57);
    if (v58)
    {
      uint64_t v59 = (void *)v58;
      uint64_t v60 = a2;
      id v61 = v42;
      uint64_t v62 = ChangeAlarmStatusOperation.rawValue.getter([v59 operation]);
      if (v62 == ChangeAlarmStatusOperation.rawValue.getter(2LL))
      {
        uint64_t v63 = (uint64_t)v87;
        sub_34C14(v60);
        if (sub_16880(v63, 1LL, v5) != 1)
        {
          uint64_t v69 = sub_17160((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
          uint64_t v77 = (void *)Logger.logObject.getter(v69, v70, v71, v72, v73, v74, v75, v76);
          os_log_type_t v78 = static os_log_type_t.default.getter();
          if (sub_16ACC(v78))
          {
            uint64_t v79 = (_WORD *)sub_16AC4(2LL);
            *uint64_t v79 = 0;
            sub_16ADC( &dword_0,  v80,  v81,  "Receive a 'stop firing alarm' request, should transfer to DismissAlarmHalIntent.");
            sub_16AA8((uint64_t)v79);
          }

          id v43 = (id)HALAlarmDeviceContext.toDismissAlarmIntent.getter();
          if ((a3 & 1) != 0)
          {
            sub_5E3C();
            Class isa = sub_1D75C().super.super.isa;
            sub_34C1C((uint64_t)isa, "setSkipConfirmation:");

            sub_34C04();
          }

          else
          {
            sub_34C04();
          }

          return v43;
        }

        sub_1B538(v63);
      }

      else
      {
      }
    }

    return 0LL;
  }

  id v43 = [objc_allocWithZone(v41) init];
  uint64_t v51 = (void *)Logger.logObject.getter(v43, v44, v45, v46, v47, v48, v49, v50);
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (sub_16ACC(v52))
  {
    uint64_t v53 = (_WORD *)sub_16AC4(2LL);
    *uint64_t v53 = 0;
    sub_16ADC( &dword_0,  v54,  v55,  "Receive a SnoozeAlarmIntent from NLv3IntentPlusServerConversion, should transfer to SnoozeAlarmHalIntent.");
    sub_16AA8((uint64_t)v53);
  }

  uint64_t v56 = (uint64_t)v90;
  sub_34C14(a2);
  if (sub_16880(v56, 1LL, v5) == 1)
  {
    sub_1B538(v56);
    if ((a3 & 1) == 0) {
      return v43;
    }
    goto LABEL_17;
  }

  uint64_t v64 = v88;
  uint64_t v65 = sub_17160(v88, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
  uint64_t v66 = HALAlarmDeviceContext.toSnoozeAlarmIntent.getter(v65);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v64, v5);
  id v43 = (id)v66;
  if ((a3 & 1) != 0)
  {
LABEL_17:
    sub_5E3C();
    Class v67 = sub_1D75C().super.super.isa;
    sub_34C1C((uint64_t)v67, "setSkipConfirmation:");
  }

  return v43;
}

uint64_t sub_34B74()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D4AD0);
  sub_26F0(v0, (uint64_t)qword_D4AD0);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_34BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D37D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_34C04()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_34C14(uint64_t a1)
{
  return sub_34BBC(a1, v1);
}

id sub_34C1C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_34C2C(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = "(";
  v2[4] = &unk_A5570;
  v2[5] = &unk_A5588;
  return swift_initClassMetadata2(a1, 0LL, 6LL, v2, a1 + 96);
}

uint64_t sub_34C9C()
{
  uint64_t v0 = sub_16C80();
  sub_1688C(v0, qword_D4AE8);
  uint64_t v1 = sub_38550();
  sub_26F0(v1, v2);
  return static SiriTimeLog.alarmFlow.getter();
}

id sub_34CDC()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*v0);
  return [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
}

uint64_t sub_34D20(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v3[6] = *v2;
  sub_19840();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_34D48()
{
  if (qword_D3028 != -1) {
    swift_once(&qword_D3028, sub_34C9C);
  }
  uint64_t v2 = v0[4];
  uint64_t v3 = sub_16C80();
  uint64_t v4 = sub_26F0(v3, (uint64_t)qword_D4AE8);
  uint64_t v5 = swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v6 = (os_log_s *)v4;
  Logger.logObject.getter(v5, v7, v8, v9, v10, v11, v12, v13);
  os_log_type_t v14 = sub_16C50();
  BOOL v15 = sub_16D30(v14);
  uint64_t v16 = v0[4];
  if (v15)
  {
    uint64_t v17 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v18 = sub_16AC4(32LL);
    *(_DWORD *)uint64_t v17 = 136315138;
    v37[0] = v18;
    uint64_t v19 = sub_384E4();
    uint64_t v20 = swift_bridgeObjectRetain(v16);
    uint64_t v21 = Array.description.getter(v20, v19);
    unint64_t v23 = v22;
    sub_16EDC();
    v0[2] = sub_3D10(v21, v23, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v17 + 4, v17 + 12);
    sub_16D58();
    sub_16C88(v16);
    sub_16BD0( &dword_0,  v6,  v1,  "ResponseAlarmDisambiguationFlowProvider.makeIntentPromptAnswer(choice:) with choice: %s",  v17);
    sub_16BB4(v18);
    sub_16AA8(v18);
    sub_16AA8((uint64_t)v17);
  }

  else
  {
    sub_16C88(v0[4]);
  }

  uint64_t v25 = v0[5];
  uint64_t v24 = v0[6];
  uint64_t v26 = v0[4];
  uint64_t v27 = *(void **)(v25 + 96);
  v0[2] = v27;
  uint64_t v29 = *(void *)(v24 + 80);
  uint64_t v28 = *(void *)(v24 + 88);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 8);
  id v31 = v27;
  v30(v26, v29, v28);

  v37[3] = sub_26B0(&qword_D4D88);
  v37[0] = v26;
  uint64_t v32 = *(void **)(v25 + 96);
  swift_bridgeObjectRetain(v26);
  id v33 = v32;
  IntentPromptAnswer.init(answeredValue:updatedIntent:)(v34);
  uint64_t v35 = (uint64_t (*)(void))sub_19958();
  return v35();
}

uint64_t sub_34F50()
{
  return v0;
}

uint64_t sub_34F94()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t type metadata accessor for ResponseAlarmDisambiguationFlowProvider( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D9E0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResponseAlarmDisambiguationFlowProvider);
}

void sub_34FC0(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_376F0(319LL);
    if (v5 <= 0x3F)
    {
      v6[2] = *(void *)(v4 - 8) + 64LL;
      void v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initClassMetadata2(a1, 0LL, 5LL, v6, a1 + 88);
    }
  }

uint64_t sub_35068()
{
  return swift_retain(*(void *)(*(void *)v0 + 24LL));
}

uint64_t sub_35074@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *a1 = v2;
  return swift_retain(v2);
}

uint64_t sub_35084@<X0>(uint64_t a1@<X8>)
{
  return sub_4698(*v1 + 40LL, a1);
}

uint64_t sub_35094(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_A5878, a1);
  return NeedsDisambiguationDetailedFlowProvider.authenticationRequirements.getter(a1, WitnessTable);
}

uint64_t sub_350D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = (void *)swift_task_alloc(dword_D4B84);
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_1B578;
  return sub_34D20(a1, v4);
}

uint64_t sub_3513C()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 16LL));
}

id sub_35148()
{
  return sub_34CDC();
}

uint64_t sub_35168()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 88LL));
  return v1;
}

uint64_t sub_35198(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationDetailedSelectionFlowProvider.makeAllItemsFlow()[1]);
  *(void *)(v1 + 16) = v3;
  uint64_t v5 = type metadata accessor for ResponseAlarmDisambiguationFlowProvider( 0LL,  *(void *)(a1 + 80),  *(void *)(a1 + 88),  v4);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_A58E8, v5);
  *unint64_t v3 = v1;
  v3[1] = sub_383BC;
  return NeedsDisambiguationDetailedSelectionFlowProvider.makeAllItemsFlow()(v5, WitnessTable);
}

uint64_t sub_35218(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationDetailedSelectionFlowProvider.makeWindowingConfiguration()[1]);
  *(void *)(v2 + 16) = v5;
  uint64_t v7 = type metadata accessor for ResponseAlarmDisambiguationFlowProvider( 0LL,  *(void *)(a2 + 80),  *(void *)(a2 + 88),  v6);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_A58E8, v7);
  *uint64_t v5 = v2;
  v5[1] = sub_1B578;
  return NeedsDisambiguationDetailedSelectionFlowProvider.makeWindowingConfiguration()(a1, v7, WitnessTable);
}

uint64_t sub_352A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationDetailedSelectionFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:)[1]);
  *(void *)(v3 + 16) = v7;
  uint64_t v9 = type metadata accessor for ResponseAlarmDisambiguationFlowProvider( 0LL,  *(void *)(a3 + 80),  *(void *)(a3 + 88),  v8);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_A58E8, v9);
  *uint64_t v7 = v3;
  v7[1] = sub_383BC;
  return NeedsDisambiguationDetailedSelectionFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:)( a1,  v6,  v9,  WitnessTable);
}

uint64_t sub_35338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to MultipleChoicePromptWindowingFlowProvider.makeConclusionFlow(paginationParameters:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_383BC;
  return MultipleChoicePromptWindowingFlowProvider.makeConclusionFlow(paginationParameters:)(a1, a2, a3);
}

uint64_t sub_353A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationDetailedSelectionFlowProvider.makeWindowFlow(paginationParameters:windowContent:)[1]);
  *(void *)(v3 + 16) = v7;
  uint64_t v9 = type metadata accessor for ResponseAlarmDisambiguationFlowProvider( 0LL,  *(void *)(a3 + 80),  *(void *)(a3 + 88),  v8);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_A58E8, v9);
  *uint64_t v7 = v3;
  v7[1] = sub_383BC;
  return NeedsDisambiguationDetailedSelectionFlowProvider.makeWindowFlow(paginationParameters:windowContent:)( a1,  v6,  v9,  WitnessTable);
}

void sub_35438(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v26[1] = a2;
  v26[2] = a1;
  v26[0] = *(void *)v2;
  uint64_t v3 = sub_26B0(&qword_D4D80);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_3855C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v26 - v12;
  __chkstk_darwin(v11);
  BOOL v15 = (char *)v26 - v14;
  if (qword_D3028 != -1) {
    swift_once(&qword_D3028, sub_34C9C);
  }
  uint64_t v16 = sub_16C80();
  sub_26F0(v16, (uint64_t)qword_D4AE8);
  sub_16D50();
  os_log_type_t v17 = sub_16C50();
  if (os_log_type_enabled(v2, v17))
  {
    uint64_t v18 = (uint8_t *)sub_16AC4(2LL);
    *(_WORD *)uint64_t v18 = 0;
    sub_16B44(&dword_0, v2, v17, "AlarmSimpleDisambiguation.actionForInput(input:) called.", v18);
    sub_16AA8((uint64_t)v18);
  }

  uint64_t v19 = (uint64_t)v2 + qword_D4B90;
  swift_beginAccess((char *)v2 + qword_D4B90, v27, 0LL, 0LL);
  sub_38374(v19, (uint64_t)v5);
  if (sub_16880((uint64_t)v5, 1LL, v6) == 1)
  {
    sub_16A3C((uint64_t)v5, &qword_D4D80);
  }

  else
  {
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v15, v5, v6);
    uint64_t v21 = WindowedPaginationParameters.isFirstWindow.getter(v20);
    char v22 = v21 ^ WindowedPaginationParameters.isLastWindow.getter(v21);
    uint64_t v23 = sub_38564((uint64_t)v13);
    if ((v22 & 1) != 0) {
      char v24 = 0;
    }
    else {
      char v24 = WindowedPaginationParameters.isFirstWindow.getter(v23);
    }
    sub_384EC((uint64_t)v13);
    uint64_t v25 = sub_38564((uint64_t)v10);
    if ((v24 & 1) != 0) {
      WindowedPaginationParameters.windowSize.getter(v25);
    }
    sub_384EC((uint64_t)v10);
    sub_384EC((uint64_t)v15);
  }

  sub_AB60();
}

uint64_t sub_356BC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_D63A4);
  *(void *)(v0 + 16) = v1;
  sub_384E4();
  *uint64_t v1 = v0;
  v1[1] = sub_383BC;
  uint64_t v2 = sub_38550();
  return sub_6D3E0(v2, v3, v4);
}

uint64_t sub_35720(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_3855C();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_19754(v5);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_35768()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_D4C3C);
  v0[8] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_357C4;
  return sub_35858(v0[2], v0[3], v0[7]);
}

uint64_t sub_357C4()
{
  uint64_t v3 = v2[6];
  sub_1996C(v4);
  void v2[9] = v0;
  swift_task_dealloc(v5);
  sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (v0)
  {
    sub_19840();
    return sub_3848C(v6, v7, v8);
  }

  else
  {
    swift_task_dealloc(v2[7]);
    return sub_1984C(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_3582C()
{
  return sub_1B5EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_35858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[23] = a3;
  v4[24] = v3;
  v4[21] = a1;
  v4[22] = a2;
  uint64_t v5 = sub_16C80();
  v4[25] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[26] = v6;
  v4[27] = sub_19754(v6);
  uint64_t v7 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v4[28] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[29] = v8;
  v4[30] = sub_19754(v8);
  uint64_t v9 = type metadata accessor for SiriTimeMeasurement(0LL);
  v4[31] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[32] = v10;
  v4[33] = sub_250D0(v10);
  v4[34] = sub_19884();
  uint64_t v11 = type metadata accessor for DialogPhase(0LL);
  v4[35] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[36] = v12;
  v4[37] = sub_250D0(v12);
  v4[38] = sub_19884();
  uint64_t v13 = type metadata accessor for CATOption(0LL);
  v4[39] = sub_19754(*(void *)(v13 - 8));
  uint64_t v14 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v4[40] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[41] = v15;
  v4[42] = sub_19754(v15);
  uint64_t v16 = type metadata accessor for ResponseMode(0LL);
  v4[43] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v4[44] = v17;
  v4[45] = sub_250D0(v17);
  v4[46] = sub_19884();
  uint64_t v18 = sub_3855C();
  v4[47] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v4[48] = v19;
  v4[49] = sub_19754(v19);
  uint64_t v20 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  v4[50] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v4[51] = v21;
  v4[52] = sub_19754(v21);
  uint64_t v22 = type metadata accessor for NLContextUpdate(0LL);
  v4[53] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v4[54] = v23;
  v4[55] = sub_19754(v23);
  uint64_t v24 = sub_26B0(&qword_D4D80);
  v4[56] = sub_250D0(*(void *)(v24 - 8));
  v4[57] = sub_19884();
  sub_19840();
  return sub_1988C();
}

uint64_t sub_359C8()
{
  v0[12] = v0[22];
  uint64_t v1 = v0[24];
  uint64_t v2 = sub_26B0(&qword_D4D88);
  uint64_t v3 = type metadata accessor for AlarmAlarm(0LL);
  swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  uint64_t v113 = v2;
  uint64_t v114 = v3;
  uint64_t v4 = Sequence.compactMap<A>(_:)(sub_382C0, v1, v2, v3);
  v0[58] = v4;
  uint64_t v5 = *(void *)(v1 + 16);
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v108 = *(void *)(v1 + 16);
    }
    else {
      uint64_t v108 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v115 = _CocoaArrayWrapper.endIndex.getter(v108);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v115 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v7 = v0[56];
  uint64_t v6 = v0[57];
  uint64_t v8 = v0[47];
  uint64_t v9 = v0[24];
  uint64_t v10 = v0[22];
  uint64_t v117 = *(uint64_t (**)(void))(v0[48] + 16LL);
  ((void (*)(uint64_t, void, uint64_t))v117)(v6, v0[23], v8);
  sub_A40C(v6, 0LL, 1LL, v8);
  sub_382D8(v6, v7);
  uint64_t v11 = v9 + qword_D4B90;
  swift_beginAccess(v9 + qword_D4B90, v0 + 7, 33LL, 0LL);
  sub_38338(v7, v11, &qword_D4D80);
  swift_endAccess(v0 + 7);
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = swift_bridgeObjectRetain(v12);
  uint64_t v14 = WindowedPaginationParameters.windowSize.getter(v13);
  uint64_t v15 = sub_384E4();
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v15);
  uint64_t v17 = static ResponseDisambigUtils.calculateWindow<A>(windowItems:allItems:windowSize:)( v10,  v12,  v14,  v15,  WitnessTable);
  sub_16D58();
  uint64_t v119 = v17;
  uint64_t v118 = qword_D4B98;
  if (v17 != *(void *)(v9 + qword_D4B98)) {
    *(void *)(v0[24] + qword_D4BA0) = 0LL;
  }
  uint64_t v116 = v0 + 17;
  if (qword_D3028 != -1) {
    swift_once(&qword_D3028, sub_34C9C);
  }
  uint64_t v18 = v0[24];
  uint64_t v19 = sub_26F0(v0[25], (uint64_t)qword_D4AE8);
  v0[59] = v19;
  uint64_t v20 = swift_retain(v18);
  uint64_t v21 = (os_log_s *)v19;
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v20, v22, v23, v24, v25, v26, v27, v28);
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v32 = v0[24];
  uint64_t v122 = v4;
  if (v31)
  {
    uint64_t v33 = sub_16AC4(32LL);
    uint64_t v34 = sub_16AC4(32LL);
    v124[0] = v34;
    *(_DWORD *)uint64_t v33 = 134218498;
    v0[17] = *(void *)(v9 + v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, v0 + 18, v33 + 4, v33 + 12);
    *(_WORD *)(v33 + 12) = 2048;
    v0[18] = *(void *)(v32 + qword_D4BA0);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v33 + 14, v33 + 22);
    swift_release(v32);
    *(_WORD *)(v33 + 22) = 2080;
    v0[19] = v119;
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v21 = (os_log_s *)v36;
    v0[20] = sub_3D10(v35, v36, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 20, v0 + 21, v33 + 24, v33 + 32);
    swift_bridgeObjectRelease(v21);
    _os_log_impl( &dword_0,  v29,  v30,  "[makePromptForItems] window=%ld, promptCount=%ld, thisWindow=%s",  (uint8_t *)v33,  0x20u);
    sub_16BB4(v34);
    sub_16AA8(v34);
    sub_16AA8(v33);
  }

  else
  {
    swift_release(v32);
  }

  unint64_t v37 = v0 + 15;
  swift_bridgeObjectRetain_n(v4, 4LL);
  sub_384F4();
  LOBYTE(v38) = sub_16C50();
  if (!os_log_type_enabled(v21, (os_log_type_t)v38))
  {
    swift_bridgeObjectRelease_n(v4, 4LL);
    goto LABEL_15;
  }

  uint64_t v39 = v0 + 16;
  uint64_t v40 = sub_16AC4(22LL);
  uint64_t v41 = sub_16AC4(32LL);
  v124[0] = v41;
  *(_DWORD *)uint64_t v40 = 134218242;
  uint64_t v42 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    sub_17900();
    *unint64_t v37 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, v39, v40 + 4, v40 + 12);
    sub_17900();
    *(_WORD *)(v40 + 12) = 2080;
    uint64_t v43 = sub_384FC();
    uint64_t v44 = Array.description.getter(v43, v114);
    unint64_t v46 = v45;
    swift_bridgeObjectRelease(v122);
    *uint64_t v39 = sub_3D10(v44, v46, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v39, v116, v40 + 14, v40 + 22);
    sub_17900();
    sub_16C88(v122);
    _os_log_impl( &dword_0,  v21,  (os_log_type_t)v38,  "AlarmSimpleDisambiguation.makePrompt(items:paginationParameters:) Converted %ld alarms to send to dialog: %s",  (uint8_t *)v40,  0x16u);
    sub_16BB4(v41);
    sub_16AA8(v41);
    sub_16AA8(v40);
LABEL_15:

    unint64_t v37 = (uint64_t *)v0[24];
    uint64_t v38 = qword_D4BA0;
    if ((*((_BYTE *)v37 + qword_D4BA0) & 1) != 0)
    {
      uint64_t v47 = *(void *)(v9 + v118);
      BOOL v49 = v47 != 0x8000000000000000LL && v119 == v47;
      LODWORD(v116) = v49;
    }

    else
    {
      LODWORD(v116) = 0;
    }

    uint64_t v50 = (*(uint64_t (**)(void, uint64_t, void))(v0[51] + 16LL))( v0[52],  (uint64_t)v37 + qword_D4B88,  v0[50]);
    char v51 = WindowedPaginationParameters.isFirstWindow.getter(v50);
    uint64_t v52 = sub_38550();
    uint64_t v53 = v117(v52);
    if ((v51 & 1) != 0) {
      WindowedPaginationParameters.isLastWindow.getter(v53);
    }
    uint64_t v21 = (os_log_s *)v0[55];
    uint64_t v4 = v0[51];
    uint64_t v39 = (uint64_t *)v0[52];
    uint64_t v41 = v0[50];
    uint64_t v40 = v0[22];
    (*(void (**)(void, void))(v0[48] + 8LL))(v0[49], v0[47]);
    sub_79D04();
    sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    *(void *)(v9 + v118) = v119;
    uint64_t v54 = *(uint64_t *)((char *)v37 + v38);
    BOOL v55 = __OFADD__(v54, 1LL);
    uint64_t v56 = v54 + 1;
    if (!v55) {
      break;
    }
    __break(1u);
LABEL_43:
    uint64_t v109 = v37;
    if (v4 < 0) {
      uint64_t v110 = v4;
    }
    else {
      uint64_t v110 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_384FC();
    uint64_t v111 = v110;
    unint64_t v37 = v109;
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter(v111);
    sub_17900();
  }

  uint64_t v57 = v0[22];
  *(uint64_t *)((char *)v37 + v38) = v56;
  swift_bridgeObjectRetain_n(v57, 2LL);
  uint64_t v58 = (os_log_s *)sub_384F4();
  os_log_type_t v59 = static os_log_type_t.default.getter();
  BOOL v60 = os_log_type_enabled(v58, v59);
  unint64_t v61 = v0[22];
  if (v60)
  {
    uint64_t v62 = v0 + 14;
    uint64_t v63 = sub_16AC4(22LL);
    uint64_t v121 = sub_16AC4(32LL);
    v124[0] = v121;
    *(_DWORD *)uint64_t v63 = 134218242;
    if (v61 >> 62)
    {
      else {
        uint64_t v112 = v61 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_384FC();
      uint64_t v64 = _CocoaArrayWrapper.endIndex.getter(v112);
      sub_17900();
    }

    else
    {
      uint64_t v64 = *(void *)((char *)&dword_10 + (v61 & 0xFFFFFFFFFFFFF8LL));
    }

    uint64_t v65 = v0[46];
    uint64_t v66 = v0[43];
    uint64_t v120 = v0[44];
    sub_16EDC();
    v0[13] = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v62, v63 + 4, v63 + 12);
    sub_16EDC();
    *(_WORD *)(v63 + 12) = 2080;
    type metadata accessor for SiriEnvironment(0LL);
    static SiriEnvironment.default.getter();
    uint64_t v67 = SiriEnvironment.currentRequest.getter();
    uint64_t v68 = sub_17324();
    CurrentRequest.responseMode.getter(v68);
    swift_release(v67);
    sub_16A6C( &qword_D4D98,  (uint64_t (*)(uint64_t))&type metadata accessor for ResponseMode,  (uint64_t)&protocol conformance descriptor for ResponseMode);
    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v66, v69);
    unint64_t v72 = v71;
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v65, v66);
    v0[14] = sub_3D10(v70, v72, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v62, v0 + 15, v63 + 14, v63 + 22);
    sub_16EDC();
    _os_log_impl( &dword_0,  v58,  v59,  "[makePromptForItems] Using disambiguation pattern with %ld items for mode %s",  (uint8_t *)v63,  0x16u);
    sub_16BB4(v121);
    sub_16AA8(v121);
    sub_16AA8(v63);
  }

  else
  {
    sub_16C88(v0[22]);
  }

  uint64_t v73 = v122;
  uint64_t v75 = v0[41];
  uint64_t v74 = v0[42];
  uint64_t v76 = v0[40];
  static SiriTimeFeatureFlagsImpl.instance.getter(v77);
  Swift::Bool v78 = SiriTimeFeatureFlagsImpl.isAlarmSmartEnabled()();
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v76);
  if (!v78) {
    goto LABEL_34;
  }
  uint64_t v80 = v0[45];
  uint64_t v79 = v0[46];
  uint64_t v81 = v0[43];
  uint64_t v82 = v0[44];
  type metadata accessor for SiriEnvironment(0LL);
  static SiriEnvironment.default.getter();
  uint64_t v83 = SiriEnvironment.currentRequest.getter();
  uint64_t v84 = sub_17324();
  CurrentRequest.responseMode.getter(v84);
  uint64_t v85 = swift_release(v83);
  static ResponseMode.voiceOnly.getter(v85);
  sub_16A6C( &qword_D4D90,  (uint64_t (*)(uint64_t))&type metadata accessor for ResponseMode,  (uint64_t)&protocol conformance descriptor for ResponseMode);
  int v86 = (os_log_s *)dispatch thunk of static Equatable.== infix(_:_:)(v79, v80, v81);
  uint64_t v87 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
  v87(v80, v81);
  v87(v79, v81);
  if ((v86 & 1) == 0)
  {
    swift_bridgeObjectRelease(v122);
    sub_384F4();
    os_log_type_t v97 = sub_16C50();
    if (sub_1990C(v97))
    {
      uint64_t v98 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)uint64_t v98 = 0;
      sub_16B44(&dword_0, v86, (os_log_type_t)v79, "[makePromptForItems] SMART", v98);
      sub_16AA8((uint64_t)v98);
    }

    uint64_t v99 = v0[39];
    uint64_t v100 = v0[24];
    uint64_t v101 = v0[22];

    v0[10] = v101;
    uint64_t v102 = Sequence.compactMap<A>(_:)(sub_36CF0, 0LL, v113, v114);
    v0[60] = v102;
    v0[11] = v101;
    uint64_t v103 = type metadata accessor for SiriAlarmItemModel(0LL);
    v0[61] = Sequence.compactMap<A>(_:)(sub_38320, v100, v113, v103);
    type metadata accessor for AlarmBaseCATsSimple(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v104 = CATWrapperSimple.__allocating_init(options:globals:)(v99, 0LL);
    v0[62] = v104;
    uint64_t v105 = WindowedPaginationParameters.isFirstWindow.getter(v104);
    LOBYTE(v99) = v105;
    char v106 = WindowedPaginationParameters.isLastWindow.getter(v105);
    uint64_t v107 = (void *)swift_task_alloc(dword_D424C);
    v0[63] = v107;
    *uint64_t v107 = v0;
    v107[1] = sub_364A0;
    return sub_25D44(v102, v99 & 1, v106 & 1, COERCE__INT64((double)v115), 0, (char)v116);
  }

  else
  {
LABEL_34:
    uint64_t v88 = v0[39];
    type metadata accessor for AlarmBaseCATPatternsExecutor(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v89 = CATWrapper.__allocating_init(options:globals:)(v88, 0LL);
    v0[71] = v89;
    uint64_t v90 = WindowedPaginationParameters.isConclusion.getter();
    char v91 = v90;
    uint64_t v92 = WindowedPaginationParameters.isFirstWindow.getter(v90);
    char v93 = v92;
    char v94 = WindowedPaginationParameters.isLastWindow.getter(v92);
    LOBYTE(v88) = WindowedPaginationParameters.isNextWindowLastWindow.getter();
    uint64_t v123 = (char *)&dword_D76E0 + dword_D76E0;
    uint64_t v95 = (void *)swift_task_alloc(unk_D76E4);
    v0[72] = v95;
    *uint64_t v95 = v0;
    v95[1] = sub_3682C;
    return ((uint64_t (*)(void, void, void, uint64_t, void, uint64_t, uint64_t, uint64_t))v123)( v91 & 1,  v93 & 1,  v94 & 1,  v88 & 1,  v116,  v73,  v89,  v115);
  }

uint64_t sub_364A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 504LL);
  uint64_t v4 = *(void **)v2;
  v4[64] = a1;
  v4[65] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v5 = v4[60];
    swift_bridgeObjectRelease(v4[61]);
    swift_bridgeObjectRelease(v5);
    sub_19840();
    return sub_197B8();
  }

  else
  {
    swift_bridgeObjectRelease(v4[60]);
    uint64_t v7 = (void *)swift_task_alloc(dword_D7A14);
    v4[66] = v7;
    *uint64_t v7 = v4;
    v7[1] = sub_36544;
    return sub_9613C();
  }

uint64_t sub_36544(uint64_t a1, uint64_t a2)
{
  v3[67] = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    swift_bridgeObjectRelease(v3[61]);
  }

  else
  {
    v3[68] = a2;
    v3[69] = a1;
  }

  sub_19840();
  return sub_197B8();
}

uint64_t sub_365B4()
{
  uint64_t v1 = v0[69];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[61];
  uint64_t v16 = v0[59];
  uint64_t v4 = v0[29];
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[27];
  uint64_t v7 = v0[28];
  uint64_t v14 = v0[26];
  uint64_t v15 = v0[25];
  static DialogPhase.clarification.getter();
  uint64_t v8 = type metadata accessor for SiriAlarmSnippetModels(0LL);
  v0[5] = v8;
  sub_16A6C( (unint64_t *)&qword_D41A0,  (uint64_t (*)(uint64_t))&type metadata accessor for SiriAlarmSnippetModels,  (uint64_t)&protocol conformance descriptor for SiriAlarmSnippetModels);
  v0[6] = v9;
  uint64_t v10 = sub_19558(v0 + 2);
  AlarmSelectorModel.init(alarms:header:)(v3, v1, v2);
  (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  enum case for SiriAlarmSnippetModels.alarmSelector(_:),  v8);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v5,  enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:),  v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v6, v16, v15);
  uint64_t v11 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v5, v6, v11);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  v0[70] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_3673C;
  return DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)( v0[21],  v0[38],  v0[55],  v0 + 2,  v0[34],  0LL,  0LL,  0LL);
}

uint64_t sub_3673C()
{
  uint64_t v1 = *(void *)v0 + 16LL;
  uint64_t v2 = *(void *)(*(void *)v0 + 288LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 256LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 560LL));
  sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_16A3C(v1, &qword_D41B0);
  sub_19840();
  return sub_250B8();
}

#error "36804: call analysis failed (funcsize=28)"
uint64_t sub_3682C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 576);
  *(void *)(v3 + 584) = a1;
  *(void *)(v3 + 592) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_16FFC();
    sub_16D58();
  }

  else
  {
    sub_16D58();
    sub_16FFC();
  }

  sub_19840();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_368B8()
{
  uint64_t v1 = v0[59];
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v5 = v0[27];
  uint64_t v4 = v0[28];
  uint64_t v6 = v0[25];
  uint64_t v7 = v0[26];
  static DialogPhase.clarification.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v2,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v1, v6);
  uint64_t v8 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v2, v5, v8);
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  v0[75] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_36998;
  return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v0[21],  v0[37],  v0[55],  v0[33],  0LL);
}

uint64_t sub_36998( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  a17 = v20;
  a18 = v21;
  a16 = v19;
  a16 = (void *)*v19;
  uint64_t v22 = a16;
  sub_1996C(&a16);
  v22[76] = v18;
  swift_task_dealloc(v23);
  uint64_t v24 = v22[36];
  uint64_t v25 = v22[32];

  sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
  sub_19840();
  return sub_250B8();
}

#error "36A58: call analysis failed (funcsize=26)"
#error "36ACC: call analysis failed (funcsize=28)"
#error "36B3C: call analysis failed (funcsize=28)"
#error "36BA4: call analysis failed (funcsize=26)"
#error "36C0C: call analysis failed (funcsize=26)"
uint64_t sub_36C30@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v4 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + qword_D4B88, v4);
  sub_4926C();
  uint64_t v9 = v8;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v9;
  return result;
}

void sub_36CF0(void *a1@<X8>)
{
  *a1 = v2;
}

uint64_t sub_36D30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2 + qword_D4B88, v3);
  sub_494C8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_36DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D3A08);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(double *)(a1 + 48) = (double)a2;
  *(_BYTE *)(a1 + 56) = 0;
  type metadata accessor for SirikitApp(0LL);
  if (qword_D3178 != -1) {
    swift_once(&qword_D3178, sub_82958);
  }
  uint64_t v7 = swift_retain(qword_D84A8);
  uint64_t v8 = SirikitApp.init(app:)(v7);
  uint64_t v9 = swift_release(*(void *)a1);
  *(void *)a1 = v8;
  uint64_t v10 = (void *)static InvocationFactory.makeConfirmAndRejectActions()(v9);

  Swift::String_optional v12 = AceObject.serializeToBase64()();
  if (v12.value._object)
  {
    SpeakableString.init(print:speak:)(v12.value._countAndFlagsBits, v12.value._object, 0LL, 0LL);
    uint64_t v13 = type metadata accessor for SpeakableString(0LL);
    sub_A40C((uint64_t)v6, 0LL, 1LL, v13);
    uint64_t v14 = type metadata accessor for AlarmBaseDisambiguationParameters(0LL);
    sub_38338((uint64_t)v6, a1 + *(int *)(v14 + 56), &qword_D3A08);
  }

  else
  {
    if (qword_D3028 != -1) {
      swift_once(&qword_D3028, sub_34C9C);
    }
    uint64_t v15 = sub_16C80();
    sub_26F0(v15, (uint64_t)qword_D4AE8);
    uint64_t v19 = (os_log_s *)sub_16D50();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v16))
    {
      uint64_t v17 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)uint64_t v17 = 0;
      sub_16B44(&dword_0, v19, v16, "Error generating base64 action for 'windowPromptButtonAction'", v17);
      sub_16AA8((uint64_t)v17);
    }
  }

uint64_t sub_36FE0(uint64_t a1)
{
  uint64_t v2 = sub_38504(a1);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  uint64_t v4 = sub_19754(v3);
  uint64_t v5 = sub_38530(v4);
  v1[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[7] = v6;
  v1[8] = sub_19754(v6);
  uint64_t v7 = type metadata accessor for CATOption(0LL);
  void v1[9] = sub_19754(*(void *)(v7 - 8));
  uint64_t v8 = sub_16C80();
  v1[10] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v1[11] = v9;
  v1[12] = sub_19754(v9);
  uint64_t v10 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v1[13] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v1[14] = v11;
  v1[15] = sub_19754(v11);
  uint64_t v12 = type metadata accessor for SiriTimeMeasurement(0LL);
  v1[16] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v1[17] = v13;
  v1[18] = sub_19754(v13);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_37098()
{
  if (qword_D3028 != -1) {
    swift_once(&qword_D3028, sub_34C9C);
  }
  uint64_t v16 = sub_26F0(v1[10], (uint64_t)qword_D4AE8);
  uint64_t v2 = (os_log_s *)sub_16D50();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_16C38(v3))
  {
    uint64_t v4 = (uint8_t *)sub_16AC4(2LL);
    *(_WORD *)uint64_t v4 = 0;
    sub_16B44(&dword_0, v2, v0, "AlarmDisambiguation.makeErrorResponse(error:)", v4);
    sub_16AA8((uint64_t)v4);
  }

  uint64_t v6 = v1[14];
  uint64_t v5 = v1[15];
  uint64_t v8 = v1[12];
  uint64_t v7 = v1[13];
  uint64_t v10 = v1[10];
  uint64_t v9 = v1[11];
  uint64_t v11 = v1[9];

  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))( v5,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v16, v10);
  uint64_t v12 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v5, v8, v12);
  type metadata accessor for ErrorCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  uint64_t v13 = CATWrapper.__allocating_init(options:globals:)(v11, 0LL);
  v1[19] = v13;
  uint64_t v17 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_D3BC8 + dword_D3BC8);
  uint64_t v14 = (void *)swift_task_alloc(unk_D3BCC);
  v1[20] = v14;
  void *v14 = v1;
  v14[1] = sub_37230;
  return v17(0, (uint64_t)_swiftEmptyArrayStorage, v13);
}

uint64_t sub_37230(uint64_t a1)
{
  *(void *)(v2 + 168) = v1;
  swift_task_dealloc(v5);
  sub_16FFC();
  if (!v1) {
    *(void *)(v2 + 176) = a1;
  }
  sub_19840();
  return sub_197B8();
}

uint64_t sub_37294()
{
  uint64_t v1 = static DialogPhase.error.getter();
  NLContextUpdate.init()(v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v0 + 184) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_37300;
  uint64_t v3 = sub_38510();
  return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v3,  v4,  v5,  v6,  0LL);
}

uint64_t sub_37300()
{
  uint64_t v3 = *(void **)(*(void *)v1 + 176LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 56LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 192LL) = v0;
  swift_task_dealloc(v2);

  sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_19840();
  return sub_197B8();
}

uint64_t sub_37394()
{
  uint64_t v1 = (uint64_t (*)(void))sub_19958();
  return sub_198F4(v1);
}

uint64_t sub_37400()
{
  return sub_38454(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_37444()
{
  return sub_38454(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_37488(uint64_t a1)
{
  uint64_t v2 = sub_38504(a1);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  uint64_t v4 = sub_19754(v3);
  uint64_t v5 = sub_38530(v4);
  v1[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[7] = v6;
  v1[8] = sub_19754(v6);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_374DC()
{
  if (qword_D3028 != -1) {
    swift_once(&qword_D3028, sub_34C9C);
  }
  uint64_t v3 = sub_16C80();
  sub_26F0(v3, (uint64_t)qword_D4AE8);
  sub_16D50();
  os_log_type_t v4 = sub_16C50();
  if (sub_1990C(v4))
  {
    uint64_t v5 = (uint8_t *)sub_16AC4(2LL);
    *(_WORD *)uint64_t v5 = 0;
    sub_16B44(&dword_0, v1, v0, "AlarmDisambiguation.makeFlowCancelledResponse()", v5);
    sub_16AA8((uint64_t)v5);
  }

  uint64_t v6 = static DialogPhase.canceled.getter();
  NLContextUpdate.init()(v6);
  uint64_t v7 = (void *)swift_task_alloc(dword_D387C);
  *(void *)(v2 + 72) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_375C8;
  uint64_t v8 = sub_38510();
  return sub_18B98(v8, v9, v10);
}

uint64_t sub_375C8()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v8 = v2;
  uint64_t v3 = v2[7];
  uint64_t v4 = v2[4];
  sub_1996C(&v8);
  v2[10] = v0;
  swift_task_dealloc(v5);
  sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (v0)
  {
    sub_19840();
    return sub_197B8();
  }

  else
  {
    swift_task_dealloc(v2[8]);
    sub_19808();
    uint64_t v7 = (uint64_t (*)(void))sub_19958();
    return sub_198F4(v7);
  }

void sub_37674()
{
  uint64_t v1 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  sub_17AD0(*(void *)(v1 - 8));
  sub_16A3C(v0 + qword_D4B90, &qword_D4D80);
  sub_17B50();
}

uint64_t sub_376CC()
{
  uint64_t v0 = sub_3853C();
  return swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for ResponseAlarmSimpleDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D9E0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResponseAlarmSimpleDisambiguationStrategy);
}

void sub_376F0(uint64_t a1)
{
  if (!qword_D4C50[0])
  {
    uint64_t v2 = type metadata accessor for WindowedPaginationParameters(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, qword_D4C50);
    }
  }

uint64_t sub_37744(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + 312);
}

uint64_t sub_3777C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc(dword_D4C2C);
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_377D4;
  return sub_356BC();
}

uint64_t sub_377D4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v7 = *v2;
  sub_1996C(&v7);
  swift_task_dealloc(v5);
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  return ((uint64_t (*)(void))v2[1])();
}

uint64_t sub_3782C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D4C34);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1B578;
  return sub_35720(a1, a2);
}

uint64_t sub_3788C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to SimpleDisambiguationPromptStrategy.makeRepromptOnEmptyParse(items:)[1]);
  *(void *)(v4 + 16) = v9;
  uint64_t v12 = type metadata accessor for ResponseAlarmSimpleDisambiguationStrategy(0LL, *(void *)(a3 + 80), v10, v11);
  *uint64_t v9 = v4;
  v9[1] = sub_1B578;
  return SimpleDisambiguationPromptStrategy.makeRepromptOnEmptyParse(items:)(a1, a2, v12, a4);
}

uint64_t sub_37914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to SimpleDisambiguationPromptStrategy.makeRepromptOnLowConfidence(items:)[1]);
  *(void *)(v4 + 16) = v9;
  uint64_t v12 = type metadata accessor for ResponseAlarmSimpleDisambiguationStrategy(0LL, *(void *)(a3 + 80), v10, v11);
  *uint64_t v9 = v4;
  v9[1] = sub_1B578;
  return SimpleDisambiguationPromptStrategy.makeRepromptOnLowConfidence(items:)(a1, a2, v12, a4);
}

uint64_t sub_3799C(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_D4C4C);
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_1B578;
  return sub_37488(a1);
}

uint64_t sub_379EC(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_D4C44);
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_1B578;
  return sub_36FE0(a1);
}

uint64_t sub_37A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  void v4[4] = a2;
  uint64_t v5 = type metadata accessor for WindowingDisambiguationInputType(0LL);
  v4[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[8] = v6;
  void v4[9] = sub_19754(v6);
  uint64_t v7 = type metadata accessor for Input(0LL);
  v4[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[11] = v8;
  v4[12] = sub_19754(v8);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_37AA4()
{
  if (qword_D3028 != -1) {
    swift_once(&qword_D3028, sub_34C9C);
  }
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = sub_16C80();
  sub_26F0(v5, (uint64_t)qword_D4AE8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v6, v7, v8, v9, v10, v11, v12, v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = sub_16C38(v15);
  uint64_t v17 = *(void *)(v0 + 80);
  if (v16)
  {
    uint64_t v18 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v19 = sub_16AC4(32LL);
    uint64_t v31 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    sub_16A6C( (unint64_t *)&unk_D37B0,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
    unint64_t v23 = v22;
    *(void *)(v0 + 16) = sub_3D10(v21, v22, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v23);
    sub_384BC();
    sub_16BD0(&dword_0, v14, (os_log_type_t)v4, "AlarmDisambiguation.parseWindowActionFromInput(input:items:): %s", v18);
    sub_16BB4(v19);
    sub_16AA8(v19);
    sub_16AA8((uint64_t)v18);
  }

  else
  {
    sub_384BC();
  }

  uint64_t v24 = *(void *)(v0 + 48);
  sub_37E18(*(os_log_s **)(v0 + 32), *(void *)(v0 + 72));
  uint64_t v25 = sub_37D64(v24);
  uint64_t v27 = v26;
  *(void *)(v0 + 104) = v26;
  uint64_t v28 = (void *)swift_task_alloc(async function pointer to static ResponseDisambigUtils.parseWindowActionFromInput<A>(input:windowInputType:items:choiceSelector:)[1]);
  *(void *)(v0 + 112) = v28;
  uint64_t v29 = sub_384E4();
  void *v28 = v0;
  v28[1] = sub_37CB0;
  return static ResponseDisambigUtils.parseWindowActionFromInput<A>(input:windowInputType:items:choiceSelector:)( *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 72),  *(void *)(v0 + 40),  v25,  v27,  v29);
}

uint64_t sub_37CB0()
{
  uint64_t v2 = v1[8];
  sub_1996C(v3);
  v1[15] = v0;
  swift_task_dealloc(v4);
  sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (v0)
  {
    sub_19840();
    return sub_3848C(v5, v6, v7);
  }

  else
  {
    swift_release(v1[13]);
    sub_19808();
    sub_19800();
    uint64_t v9 = (uint64_t (*)(void))sub_19958();
    return sub_1984C(v9);
  }

uint64_t sub_37D28()
{
  return sub_198F4(*(uint64_t (**)(void))(v0 + 8));
}

void *sub_37D64(uint64_t a1)
{
  return &unk_D4D78;
}

uint64_t sub_37D94()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_D4C2C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_37DE8;
  return sub_356BC();
}

uint64_t sub_37DE8(uint64_t a1)
{
  uint64_t v4 = sub_1B5CC();
  if (!v1) {
    uint64_t v4 = a1;
  }
  return sub_384A0(v4, *(uint64_t (**)(void))(v2 + 8));
}

void sub_37E18(os_log_s *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *v2;
  if (qword_D3028 != -1) {
    swift_once(&qword_D3028, sub_34C9C);
  }
  uint64_t v7 = sub_16C80();
  sub_26F0(v7, (uint64_t)qword_D4AE8);
  uint64_t v8 = (os_log_s *)sub_16D50();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (sub_16D30(v9))
  {
    uint64_t v10 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v11 = sub_16AC4(32LL);
    uint64_t v16 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v15 = *(void *)(v6 + 304);
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v15);
    uint64_t v13 = String.init<A>(describing:)(&v15, MetatypeMetadata);
    uint64_t v15 = sub_3D10(v13, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 4, v10 + 12);
    sub_17900();
    sub_16BD0(&dword_0, v8, v3, "AlarmDisambiguation.determineInputType(input:) with intent type: %s", v10);
    sub_16BB4(v11);
    sub_16AA8(v11);
    sub_16AA8((uint64_t)v10);
  }

  sub_6E2CC(a1, a2);
}

uint64_t type metadata accessor for ResponseAlarmDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D9E0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResponseAlarmDisambiguationStrategy);
}

void sub_37F8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_37FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_D4CDC);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1B578;
  return sub_37A3C(a1, a2, a3);
}

uint64_t sub_38018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_D4C3C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1B3B8;
  return sub_35858(a1, a2, a3);
}

uint64_t sub_38084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ListPromptFlowStrategy.makeRepromptOnEmptyParse(items:paginationParameters:)[1]);
  *(void *)(v5 + 16) = v11;
  uint64_t v14 = type metadata accessor for ResponseAlarmDisambiguationStrategy(0LL, *(void *)(a4 + 304), v12, v13);
  *uint64_t v11 = v5;
  v11[1] = sub_1B578;
  return ListPromptFlowStrategy.makeRepromptOnEmptyParse(items:paginationParameters:)(a1, a2, a3, v14, a5);
}

uint64_t sub_3811C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ListPromptFlowStrategy.makeRepromptOnLowConfidence(items:paginationParameters:)[1]);
  *(void *)(v5 + 16) = v11;
  uint64_t v14 = type metadata accessor for ResponseAlarmDisambiguationStrategy(0LL, *(void *)(a4 + 304), v12, v13);
  *uint64_t v11 = v5;
  v11[1] = sub_1B578;
  return ListPromptFlowStrategy.makeRepromptOnLowConfidence(items:paginationParameters:)(a1, a2, a3, v14, a5);
}

uint64_t sub_381B4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_A5680, a1);
}

uint64_t sub_381C4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_A5720, a1);
}

uint64_t sub_381D4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_A5788, a1);
}

uint64_t sub_381E4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_A57C0, a1);
}

uint64_t sub_381F4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_A57F8, a1);
}

uint64_t sub_38204(uint64_t a1)
{
  return swift_getWitnessTable(&unk_A58A8, a1);
}

uint64_t sub_38214(uint64_t a1)
{
  return swift_getWitnessTable(&unk_A5878, a1);
}

uint64_t sub_38224(uint64_t a1)
{
  return swift_getWitnessTable(&unk_A5850, a1);
}

uint64_t sub_38234()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_D4D74);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_38294;
  return sub_37D94();
}

uint64_t sub_38294(uint64_t a1)
{
  return sub_384A0(a1, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_382C0@<X0>(void *a1@<X8>)
{
  return sub_36C30(v1, a1);
}

uint64_t sub_382D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D4D80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_38320(uint64_t a1)
{
  return sub_36D30(a1, v1);
}

void sub_38338(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_38550();
  v4(v3);
  sub_17B50();
}

uint64_t sub_38374(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D4D80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_383C0()
{
  return (*(uint64_t (**)(void, void))(v0[54] + 8LL))(v0[55], v0[53]);
}

uint64_t sub_3840C()
{
  return (*(uint64_t (**)(void, void))(v0[54] + 8LL))(v0[55], v0[53]);
}

uint64_t sub_38454(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_3846C()
{
  return (*(uint64_t (**)(void, void))(v0[17] + 8LL))(v0[18], v0[16]);
}

uint64_t sub_3848C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_384A0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_384AC()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_384BC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

  ;
}

uint64_t sub_384E4()
{
  return type metadata accessor for SiriAlarm(0LL);
}

uint64_t sub_384EC(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_384F4()
{
  return Logger.logObject.getter();
}

uint64_t sub_384FC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_38504(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return type metadata accessor for NLContextUpdate(0LL);
}

uint64_t sub_38510()
{
  return *(void *)(v0 + 16);
}

void sub_38524()
{
}

uint64_t sub_38530(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return type metadata accessor for DialogPhase(0LL);
}

uint64_t sub_3853C()
{
  return v0;
}

uint64_t sub_38550()
{
  return v0;
}

uint64_t sub_3855C()
{
  return type metadata accessor for WindowedPaginationParameters(0LL);
}

uint64_t sub_38564(uint64_t a1)
{
  return v3(a1, v2, v1);
}

uint64_t type metadata accessor for AlarmBaseCATs_Async(uint64_t a1)
{
  uint64_t result = qword_D4DA0;
  if (!qword_D4DA0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlarmBaseCATs_Async);
  }
  return result;
}

uint64_t sub_385A8(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D81F8);
}

uint64_t sub_385E4()
{
  uint64_t v1 = sub_1EAF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)sub_38F68(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_28588;
  sub_38F50();
  sub_38F5C();
  sub_38F74();
  return sub_38F44(v3, v4, v5, v6, v7);
}

uint64_t sub_38644(char a1, char a2, char a3, char a4, char a5, uint64_t a6)
{
  uint64_t v15 = v14 - v13;
  uint64_t v16 = sub_26B0(&qword_D3BD0);
  uint64_t v17 = sub_38F80(v16, 320LL);
  *(_OWORD *)(v17 + 16) = xmmword_A5950;
  *(void *)(v17 + 32) = 0xD000000000000014LL;
  *(void *)(v17 + 40) = 0x80000000000A8AA0LL;
  *(_BYTE *)(v17 + 48) = a1;
  *(void *)(v17 + 72) = &type metadata for Bool;
  *(void *)(v17 + 80) = 0xD000000000000010LL;
  *(void *)(v17 + 88) = 0x80000000000A8AC0LL;
  *(_BYTE *)(v17 + 96) = a2;
  *(void *)(v17 + 120) = &type metadata for Bool;
  *(void *)(v17 + 128) = 0x6479726576457369LL;
  *(void *)(v17 + 136) = 0xEA00000000007961LL;
  *(_BYTE *)(v17 + 144) = a3;
  *(void *)(v17 + 168) = &type metadata for Bool;
  *(void *)(v17 + 176) = 0x61646B6565577369LL;
  *(void *)(v17 + 184) = 0xEA00000000007379LL;
  *(_BYTE *)(v17 + 192) = a4;
  *(void *)(v17 + 216) = &type metadata for Bool;
  *(void *)(v17 + 224) = 0x6E656B6565577369LL;
  *(void *)(v17 + 232) = 0xEA00000000007364LL;
  *(_BYTE *)(v17 + 240) = a5;
  uint64_t v18 = (void *)(v17 + 288);
  *(void *)(v17 + 264) = &type metadata for Bool;
  *(void *)(v17 + 272) = 0x656557664F796164LL;
  *(void *)(v17 + 280) = 0xE90000000000006BLL;
  sub_4D80(a6, v15, &qword_D3A08);
  uint64_t v19 = sub_1EC14();
  if (sub_16880(v15, 1LL, v19) == 1)
  {
    sub_19594(v15, &qword_D3A08);
    *(_OWORD *)uint64_t v18 = 0u;
    *(_OWORD *)(v17 + 304) = 0u;
  }

  else
  {
    *(void *)(v17 + 312) = v19;
    uint64_t v20 = sub_19558(v18);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32LL))(v20, v15, v19);
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000013LL, 0x80000000000A8AE0LL, v17);
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_38854()
{
  uint64_t v1 = sub_1EAF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)sub_38F68(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_282B8;
  sub_38F50();
  sub_38F5C();
  sub_38F74();
  return sub_38F44(v3, v4, v5, v6, v7);
}

uint64_t sub_388B4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_26B0(&qword_D3BD0);
  uint64_t v9 = sub_38F80(v8, 128LL);
  *(_OWORD *)(v9 + 16) = xmmword_A5960;
  uint64_t v10 = (void *)(v9 + 48);
  *(void *)(v9 + 32) = 0x62614C6D72616C61LL;
  *(void *)(v9 + 40) = 0xEA00000000006C65LL;
  sub_4D80(a1, v7, &qword_D3A08);
  uint64_t v11 = sub_1EC14();
  if (sub_16880(v7, 1LL, v11) == 1)
  {
    sub_19594(v7, &qword_D3A08);
    *(_OWORD *)uint64_t v10 = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
  }

  else
  {
    *(void *)(v9 + 72) = v11;
    uint64_t v12 = sub_19558(v10);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v12, v7, v11);
  }

  strcpy((char *)(v9 + 80), "recurrenceDays");
  *(_BYTE *)(v9 + 95) = -18;
  *(void *)(v9 + 120) = sub_26B0(&qword_D3BD8);
  *(void *)(v9 + 96) = a2;
  swift_bridgeObjectRetain(a2);
  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD00000000000001ELL, 0x80000000000A8A60LL, v9);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_38A3C(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a2;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = sub_26B0(&qword_D3A08);
  *(void *)(v4 + 40) = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_38AA0, 0LL, 0LL);
}

uint64_t sub_38AA0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(_BYTE *)(v0 + 72);
  uint64_t v4 = sub_26B0(&qword_D3BD0);
  uint64_t v5 = sub_38F80(v4, 128LL);
  *(void *)(v0 + 48) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_A5960;
  *(void *)(v5 + 32) = 0x6C6174736E497369LL;
  *(void *)(v5 + 40) = 0xE90000000000006CLL;
  *(_BYTE *)(v5 + 48) = v3;
  uint64_t v6 = (void *)(v5 + 96);
  *(void *)(v5 + 72) = &type metadata for Bool;
  *(void *)(v5 + 80) = 0x65707954707061LL;
  *(void *)(v5 + 88) = 0xE700000000000000LL;
  sub_4D80(v2, v1, &qword_D3A08);
  uint64_t v7 = sub_1EC14();
  int v8 = sub_16880(v1, 1LL, v7);
  uint64_t v9 = *(void *)(v0 + 40);
  if (v8 == 1)
  {
    sub_19594(*(void *)(v0 + 40), &qword_D3A08);
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
  }

  else
  {
    *(void *)(v5 + 120) = v7;
    uint64_t v10 = sub_19558(v6);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v10, v9, v7);
  }

  *(void *)(v0 + 56) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_38C1C;
  sub_38F50();
  return v13();
}

uint64_t sub_38C1C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch(sub_38C9C, 0LL, 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v2 + 48));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_38C9C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_task_dealloc(v1);
  return sub_1B5EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_38CD0()
{
  uint64_t v1 = sub_1EAF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)sub_38F68(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_28588;
  sub_38F50();
  sub_38F5C();
  sub_38F74();
  return sub_38F44(v3, v4, v5, v6, v7);
}

uint64_t sub_38D30()
{
  uint64_t v1 = sub_1EAF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)sub_38F68(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_28588;
  sub_38F50();
  sub_38F5C();
  sub_38F74();
  return sub_38F44(v3, v4, v5, v6, v7);
}

uint64_t sub_38D90()
{
  uint64_t v1 = sub_1EAF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)sub_38F68(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_28588;
  sub_38F50();
  sub_38F5C();
  sub_38F74();
  return sub_38F44(v3, v4, v5, v6, v7);
}

uint64_t sub_38DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_38E40(a1, a2, a3);
}

uint64_t sub_38E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_17390();
  uint64_t v10 = v9 - v8;
  sub_26B0((uint64_t *)&unk_D36C0);
  sub_215E4();
  __chkstk_darwin(v11);
  sub_17390();
  uint64_t v14 = v13 - v12;
  sub_4D80(a1, v13 - v12, (uint64_t *)&unk_D36C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapper.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_19594(a1, (uint64_t *)&unk_D36C0);
  return v15;
}

uint64_t sub_38F3C()
{
  return type metadata accessor for AlarmBaseCATs_Async(0LL);
}

uint64_t sub_38F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

  ;
}

uint64_t sub_38F5C()
{
  return v0;
}

uint64_t sub_38F68(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

  ;
}

uint64_t sub_38F80(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t sub_38F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_3909C(a1, (uint64_t (*)(void))&type metadata accessor for TemplatingSection, a2);
}

uint64_t sub_38F94@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(result + 16))
  {
    __int128 v8 = *(_OWORD *)(result + 32);
    uint64_t v4 = *(void *)(result + 48);
    uint64_t v3 = *(void *)(result + 56);
    uint64_t v5 = *(void *)(result + 64);
    char v6 = *(_BYTE *)(result + 72);
    sub_176C8();
    uint64_t result = sub_45B94();
    __int128 v7 = v8;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v5 = 0LL;
    char v6 = 0;
    __int128 v7 = 0uLL;
  }

  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v5;
  *(_BYTE *)(a2 + 40) = v6;
  return result;
}

void sub_39018(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_4550C();
    uint64_t v3 = sub_45644();
    sub_16D58();
    if (!v3) {
      goto LABEL_7;
    }
  }

  else if (!*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_7:
    sub_17B50();
    return;
  }

  if ((a1 & 0xC000000000000001LL) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    goto LABEL_7;
  }

  if (*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL)))
  {
    id v2 = *(id *)(a1 + 32);
    goto LABEL_7;
  }

  __break(1u);
}

uint64_t sub_39090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_3909C(a1, (uint64_t (*)(void))&type metadata accessor for HALAlarmDeviceContext, a2);
}

uint64_t sub_3909C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = a2(0LL);
  uint64_t v7 = v6;
  if (v5)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))( a3,  a1 + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL)),  v6);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return sub_A40C(a3, v8, 1LL, v7);
}

uint64_t sub_39118()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D4E20);
  sub_26F0(v0, (uint64_t)qword_D4E20);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_39160(uint64_t a1)
{
  return sub_289C4( a1,  (uint64_t (*)(void))&type metadata accessor for SiriTimeEventSender.TaskType,  qword_D8208,  &enum case for SiriTimeEventSender.TaskType.undoChangeAlarmStatus(_:));
}

uint64_t sub_3917C(uint64_t a1)
{
  return sub_289C4( a1,  (uint64_t (*)(void))&type metadata accessor for SiriTimeEventSender.Attribute,  qword_D8220,  &enum case for SiriTimeEventSender.Attribute.corrections(_:));
}

uint64_t UndoChangeStatusFlow.__allocating_init(manager:)(void *a1)
{
  return sub_391B0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_44628);
}

uint64_t UndoChangeStatusFlow.init(manager:)(void *a1)
{
  return sub_391B0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_4480C);
}

uint64_t sub_391B0(void *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = sub_2C868((uint64_t)a1, v5);
  __chkstk_darwin(v7);
  sub_17390();
  uint64_t v10 = v9 - v8;
  (*(void (**)(uint64_t))(v11 + 16))(v9 - v8);
  uint64_t v12 = a2(v10, v2, v5, v6);
  _s20HandleIntentStrategyVwxx_1(a1);
  return v12;
}

void *UndoChangeStatusFlow.__allocating_init()()
{
  uint64_t v0 = SiriAlarmManagerImpl.__allocating_init(endpointUUID:)(0LL, 0LL);
  uint64_t v1 = type metadata accessor for UndoChangeStatusFlow(0LL);
  uint64_t v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return sub_446E4(v0, v2);
}

uint64_t UndoChangeStatusFlow.on(input:)()
{
  uint64_t v86 = v2;
  uint64_t v3 = type metadata accessor for DirectInvocationUtils.Alarm.URI(0LL);
  uint64_t v90 = *(void *)(v3 - 8);
  uint64_t v91 = v3;
  __chkstk_darwin(v3);
  sub_16B30();
  uint64_t v89 = v4;
  sub_26B0(&qword_D3788);
  sub_215E4();
  __chkstk_darwin(v5);
  sub_16B30();
  uint64_t v94 = v6;
  uint64_t v97 = sub_45B54();
  uint64_t v95 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  sub_16B08();
  uint64_t v88 = v7;
  sub_16AF0();
  __chkstk_darwin(v8);
  uint64_t v92 = (char *)&v85 - v9;
  sub_16AF0();
  __chkstk_darwin(v10);
  uint64_t v96 = (uint64_t)&v85 - v11;
  uint64_t v12 = type metadata accessor for DirectInvocationUtils.Alarm.UserInfoKey(0LL);
  __chkstk_darwin(v12);
  sub_16B08();
  uint64_t v93 = v13;
  sub_16AF0();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v85 - v15;
  uint64_t v17 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_17390();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = type metadata accessor for Parse(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_45AD0();
  Input.parse.getter(v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v23 + 88))(v0, v22) != enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v0, v22);
    return 0LL;
  }

  (*(void (**)(uint64_t, uint64_t))(v23 + 96))(v0, v22);
  uint64_t v25 = sub_16E84(v21, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32));
  uint64_t v26 = Parse.DirectInvocation.userData.getter(v25);
  uint64_t v27 = (uint8_t *)v17;
  if (!v26)
  {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
    return 0LL;
  }

  uint64_t v28 = v26;
  uint64_t v85 = v18;
  uint64_t v29 = v21;
  uint64_t v30 = sub_458B8((uint64_t)v16, enum case for DirectInvocationUtils.Alarm.UserInfoKey.verb(_:));
  uint64_t v31 = v28;
  uint64_t v32 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v30);
  sub_458B0((uint64_t)v16);
  sub_45C8C(v32, &v99);
  uint64_t v33 = sub_45BCC();
  if (!v100)
  {
    sub_16C48();
    sub_44DF4((uint64_t)&v99, (uint64_t *)&unk_D4860);
LABEL_11:
    uint64_t v40 = v21;
    uint64_t v41 = *(void (**)(uint64_t, uint8_t *))(v85 + 8);
LABEL_12:
    v41(v40, v27);
    return 0LL;
  }

  if ((sub_2D19C(v33, v34, v35, (uint64_t)&type metadata for String) & 1) == 0)
  {
    sub_16C48();
    goto LABEL_11;
  }

  uint64_t v36 = v94;
  AlarmNLv4Constants.AlarmVerb.init(rawValue:)(v98);
  uint64_t v37 = v97;
  if (sub_16880(v36, 1LL, v97) == 1)
  {
    uint64_t v38 = sub_45BAC();
    v39(v38, v27);
    sub_16C48();
    sub_44DF4(v36, &qword_D3788);
    return 0LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 32))(v96, v36, v37);
  uint64_t v43 = v93;
  uint64_t v44 = sub_458B8(v93, enum case for DirectInvocationUtils.Alarm.UserInfoKey.alarmId(_:));
  uint64_t v45 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v44);
  sub_458B0(v43);
  sub_45C8C(v45, &v99);
  sub_45BCC();
  if (!v100)
  {
    sub_16D58();
    sub_44DF4((uint64_t)&v99, (uint64_t *)&unk_D4860);
    uint64_t v50 = v29;
LABEL_24:
    uint64_t v62 = v85;
    sub_19838(v95);
    (*(void (**)(uint64_t, uint8_t *))(v62 + 8))(v50, v27);
    return 0LL;
  }

  uint64_t v46 = sub_26B0(&qword_D3838);
  uint64_t v49 = sub_2D19C(v46, v47, v48, v46);
  uint64_t v50 = v29;
  if ((v49 & 1) == 0)
  {
    sub_1743C();
    goto LABEL_24;
  }

  uint64_t v94 = v98;
  uint64_t v51 = Parse.DirectInvocation.identifier.getter(v49);
  uint64_t v53 = v52;
  uint64_t v54 = v90;
  uint64_t v55 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v90 + 104))( v89,  enum case for DirectInvocationUtils.Alarm.URI.undo(_:),  v91);
  uint64_t v56 = DirectInvocationUtils.Alarm.URI.rawValue.getter(v55);
  uint64_t v58 = v57;
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8));
  if (v51 == v56 && v53 == v58)
  {
    swift_bridgeObjectRelease_n(v53, 2LL);
    uint64_t v61 = (uint64_t)v92;
  }

  else
  {
    char v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, v56, v58, 0LL);
    sub_45BCC();
    sub_17900();
    uint64_t v61 = (uint64_t)v92;
    if ((v60 & 1) == 0)
    {
      swift_bridgeObjectRelease(v94);
      sub_1743C();
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v96, v97);
LABEL_35:
      uint64_t v40 = sub_45BAC();
      goto LABEL_12;
    }
  }

  uint64_t v63 = v95;
  uint64_t v64 = *(void (**)(uint64_t, void, uint64_t))(v95 + 104);
  uint64_t v65 = v97;
  v64(v61, enum case for AlarmNLv4Constants.AlarmVerb.enable(_:), v97);
  uint64_t v66 = v96;
  uint64_t v67 = sub_288BC(v96, v61);
  uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  sub_45A54(v61);
  uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
  uint64_t v70 = v88;
  v69(v88, v66, v65);
  if ((v67 & 1) != 0)
  {
    sub_45A54(v70);
  }

  else
  {
    v64(v61, enum case for AlarmNLv4Constants.AlarmVerb.disable(_:), v65);
    uint64_t v67 = sub_288BC(v70, v61);
    sub_45A54(v61);
    sub_45A54(v70);
    if ((v67 & 1) == 0)
    {
      swift_bridgeObjectRelease(v94);
      sub_1743C();
      v68(v66, v97);
      goto LABEL_35;
    }
  }

  if (qword_D3030 != -1) {
    swift_once(&qword_D3030, sub_39118);
  }
  unint64_t v71 = v27;
  uint64_t v72 = sub_16C80();
  sub_26F0(v72, (uint64_t)qword_D4E20);
  sub_16D50();
  os_log_type_t v73 = sub_16B4C();
  if (sub_16ACC(v73))
  {
    uint64_t v74 = (_WORD *)sub_1EFA4();
    sub_16BEC(v74);
    sub_16B44(&dword_0, (os_log_s *)v67, (os_log_type_t)v64, "UndoChangeStatusFlow accepting input.", v27);
    sub_16AA8((uint64_t)v27);
  }

  uint64_t v75 = v87;
  uint64_t v76 = v87 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_operation;
  sub_45114(v87 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_operation, (uint64_t)&v99, 33LL);
  uint64_t v77 = v76;
  uint64_t v78 = v96;
  uint64_t v79 = v97;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 24))(v77, v96, v97);
  swift_endAccess(&v99);
  uint64_t v80 = *(void *)(v75 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_alarmIds);
  *(void *)(v75 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_alarmIds) = v94;
  swift_bridgeObjectRelease(v80);
  uint64_t v81 = v86;
  sub_1ECB4(v31, v86);
  sub_1743C();
  v68(v78, v79);
  uint64_t v82 = sub_45BAC();
  v83(v82, v71);
  uint64_t v84 = v75 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_followupPluginAction;
  sub_45114(v75 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_followupPluginAction, (uint64_t)&v99, 33LL);
  sub_44A40(v81, v84, &qword_D43E0);
  swift_endAccess(&v99);
  return 1LL;
}

void UndoChangeStatusFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UndoChangeStatusFlow(0LL);
  sub_16A6C( &qword_D7A80,  type metadata accessor for UndoChangeStatusFlow,  (uint64_t)&protocol conformance descriptor for UndoChangeStatusFlow);
  Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
  sub_AAEC();
}

uint64_t UndoChangeStatusFlow.execute()(uint64_t a1)
{
  v2[84] = v1;
  v2[83] = a1;
  v2[85] = *v1;
  uint64_t v3 = sub_26B0(&qword_D43E0);
  v2[86] = sub_19754(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for PluginAction(0LL);
  v2[87] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[88] = v5;
  v2[89] = sub_19754(v5);
  uint64_t v6 = sub_16C80();
  v2[90] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[91] = v7;
  v2[92] = sub_19754(v7);
  uint64_t v8 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v2[93] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[94] = v9;
  v2[95] = sub_19754(v9);
  uint64_t v10 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[96] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[97] = v11;
  v2[98] = sub_250D0(v11);
  v2[99] = sub_19884();
  v2[100] = sub_19884();
  v2[101] = sub_19884();
  uint64_t v12 = type metadata accessor for DialogPhase(0LL);
  v2[102] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[103] = v13;
  v2[104] = sub_250D0(v13);
  v2[105] = sub_19884();
  v2[106] = sub_19884();
  v2[107] = sub_19884();
  v2[108] = sub_19884();
  v2[109] = sub_19884();
  uint64_t v14 = sub_45CC0();
  v2[110] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[111] = v15;
  v2[112] = sub_19754(v15);
  uint64_t v16 = type metadata accessor for NLContextUpdate(0LL);
  v2[113] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[114] = v17;
  v2[115] = sub_19754(v17);
  uint64_t v18 = sub_45B54();
  v2[116] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v2[117] = v19;
  v2[118] = sub_250D0(v19);
  v2[119] = sub_19884();
  uint64_t v20 = sub_26B0(&qword_D43F8);
  v2[120] = sub_250D0(*(void *)(v20 - 8));
  v2[121] = sub_19884();
  uint64_t v21 = sub_26B0(&qword_D4400);
  v2[122] = sub_19754(*(void *)(v21 - 8));
  uint64_t v22 = sub_26B0(&qword_D4408);
  v2[123] = sub_19754(*(void *)(v22 - 8));
  uint64_t v23 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  v2[124] = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  v2[125] = v24;
  v2[126] = sub_19754(v24);
  uint64_t v25 = type metadata accessor for ActivityType(0LL);
  v2[127] = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  v2[128] = v26;
  v2[129] = sub_19754(v26);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_39BB8()
{
  if (qword_D3030 != -1) {
    swift_once(&qword_D3030, sub_39118);
  }
  v1[130] = sub_26F0(v1[90], (uint64_t)qword_D4E20);
  sub_16D50();
  os_log_type_t v3 = sub_16B4C();
  if (os_log_type_enabled(v0, v3))
  {
    uint64_t v4 = (_WORD *)sub_1EFA4();
    sub_45454(v4);
    sub_16B44(&dword_0, v0, v3, "In UndoChangeStatusFlow async execute()", v2);
    sub_16AA8((uint64_t)v2);
  }

  uint64_t v5 = v1[129];
  uint64_t v6 = v1[128];
  uint64_t v7 = v1[127];

  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for ActivityType.correction(_:), v7);
  if (qword_D3038 != -1) {
    swift_once(&qword_D3038, sub_39160);
  }
  uint64_t v8 = v1[126];
  uint64_t v9 = v1[125];
  uint64_t v10 = v1[123];
  uint64_t v11 = sub_26F0(v1[124], (uint64_t)qword_D8208);
  sub_174B8(v8, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  uint64_t v12 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  sub_A40C(v10, 1LL, 1LL, v12);
  if (qword_D3040 != -1) {
    swift_once(&qword_D3040, sub_3917C);
  }
  uint64_t v13 = v1[129];
  uint64_t v41 = v1[128];
  uint64_t v14 = v1[126];
  uint64_t v15 = v1[125];
  uint64_t v16 = v1[123];
  uint64_t v17 = v1[122];
  uint64_t v18 = v1[121];
  uint64_t v19 = v1[110];
  uint64_t v40 = v1[84];
  uint64_t v20 = type metadata accessor for SiriTimeEventSender.Attribute(0LL);
  uint64_t v21 = sub_26F0(v20, (uint64_t)qword_D8220);
  sub_174B8(v17, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL));
  sub_45B20(v17);
  sub_A40C(v18, 1LL, 1LL, v19);
  static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v13, v14, v16, v17, v18);
  sub_44DF4(v18, &qword_D43F8);
  sub_44DF4(v17, &qword_D4400);
  sub_44DF4(v16, &qword_D4408);
  sub_1702C(v14, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  uint64_t v22 = sub_17AD0(v41);
  if (*(void *)(*(void *)(v40 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_alarmIds) + 16LL))
  {
    uint64_t v30 = (void *)swift_task_alloc(dword_D4E5C);
    v1[131] = v30;
    sub_45BBC(v30, (uint64_t)sub_39EE8);
    return sub_41B48();
  }

  else
  {
    Logger.logObject.getter(v22, v23, v24, v25, v26, v27, v28, v29);
    os_log_type_t v32 = sub_17714();
    if (sub_1990C(v32))
    {
      uint64_t v33 = (_WORD *)sub_1EFA4();
      sub_16BEC(v33);
      sub_198C0(&dword_0, v34, v35, "alarmIds is empty! UndoChangeStatusFlow execute() has no alarms to undo.");
      sub_16AA8(v20);
    }

    sub_452EC();
    sub_452DC(v36, enum case for SiriTimeEventSender.ReasonDescription.noAlarmsToUndo(_:));
    uint64_t v37 = (void *)swift_task_alloc(dword_D4E6C);
    v1[193] = v37;
    uint64_t v38 = sub_4546C(v37);
    return sub_411CC(v38, v39);
  }

uint64_t sub_39EE8()
{
  *(void *)(v1 + 1056) = v0;
  sub_199C0(v2);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_39F24()
{
  uint64_t v448 = v4;
  uint64_t v449 = v5;
  uint64_t v447 = v0;
  uint64_t v6 = *(void **)(v0 + 1056);
  uint64_t v7 = *(void *)(v0 + 672);
  swift_retain(v7);
  uint64_t v8 = (uint64_t)sub_40F8C((unint64_t)v6, v7);
  uint64_t v9 = v8;
  v446[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v6 = (void *)v8;
    }
    else {
      uint64_t v6 = (void *)(v8 & 0xFFFFFFFFFFFFFF8LL);
    }
    sub_45B94();
    uint64_t v10 = (uint8_t *)sub_45644();
  }

  else
  {
    uint64_t v10 = *(uint8_t **)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8LL));
    sub_45B94();
  }

  uint64_t v11 = &stru_D2000;
  if (v10)
  {
    if ((uint64_t)v10 < 1)
    {
      __break(1u);
      goto LABEL_133;
    }

    uint64_t v12 = 0LL;
    unint64_t v13 = v9 & 0xC000000000000001LL;
    do
    {
      if (v13)
      {
        uint64_t v14 = sub_17614();
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v15);
      }

      else
      {
        id v16 = sub_455EC(v9 + 8LL * (void)v12);
      }

      uint64_t v17 = v16;
      sub_456A0([v16 sleepAlarmAttribute]);
      if (v6)
      {
        uint64_t v6 = v446;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
        uint64_t v19 = *(void *)(v446[0] + 16LL);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
        uint64_t v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
        specialized ContiguousArray._endMutation()(v20);
      }

      else
      {
      }

      ++v12;
    }

    while (v10 != v12);
    sub_16F40();
    uint64_t v21 = 0LL;
    uint64_t v1 = v446[0];
    v446[0] = _swiftEmptyArrayStorage;
    do
    {
      if (v13) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v9);
      }
      else {
        id v22 = sub_455EC(v9 + 8LL * (void)v21);
      }
      uint64_t v23 = v22;
      sub_456A0([v22 sleepAlarmAttribute]);
      if (v6)
      {
      }

      else
      {
        uint64_t v6 = v446;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
        uint64_t v25 = *(void *)(v446[0] + 16LL);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
        uint64_t v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
        specialized ContiguousArray._endMutation()(v26);
      }

      ++v21;
    }

    while (v10 != v21);
    sub_16F40();
    uint64_t v27 = (void *)v446[0];
  }

  else
  {
    sub_16F40();
    sub_16F40();
    uint64_t v27 = _swiftEmptyArrayStorage;
    uint64_t v1 = (uint64_t)_swiftEmptyArrayStorage;
  }

  *(void *)(v0 + 1064) = v27;
  BOOL v28 = v1 < 0 || (v1 & 0x4000000000000000LL) != 0;
  if (v28)
  {
    uint64_t v321 = swift_bridgeObjectRetain(v1);
    uint64_t v29 = (os_log_s *)_CocoaArrayWrapper.endIndex.getter(v321);
    sub_45B5C();
  }

  else
  {
    uint64_t v29 = *(os_log_s **)(v1 + 16);
  }

  if ((uint64_t)v29 > 1)
  {
    sub_45504();
    os_log_type_t v30 = sub_17714();
    if (sub_16BA4(v30))
    {
      uint64_t v31 = (_WORD *)sub_1EFA4();
      sub_45838(v31);
      sub_16B44( &dword_0,  v29,  (os_log_type_t)v9,  "Can NOT change multiple sleep alarms, we will only handle the first one.",  v10);
      sub_16AA8((uint64_t)v10);
    }
  }

  os_log_type_t v32 = (void (*)(uint64_t))(v0 + 648);
  if (v28)
  {
    uint64_t v33 = swift_bridgeObjectRetain(v1);
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v33);
    sub_45B5C();
  }

  else
  {
    uint64_t v34 = *(void *)(v1 + 16);
  }

  uint64_t v35 = (void (*)(uint64_t))(v0 + 656);
  os_log_type_t v3 = &unk_D4000;
  uint64_t v2 = &enum case for AlarmNLv4Constants.AlarmVerb.enable(_:);
  uint64_t v444 = (void **)(v0 + 648);
  char v442 = (uint64_t (*)(void))(v0 + 656);
  if (!v34)
  {
    sub_45B5C();
    uint64_t v53 = 0LL;
    *(void *)uint64_t v35 = _swiftEmptyArrayStorage;
    *(void *)os_log_type_t v32 = 0LL;
    goto LABEL_55;
  }

  if ((v1 & 0xC000000000000001LL) == 0)
  {
    if (!*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      goto LABEL_135;
    }

    uint64_t v36 = (os_log_s *)*(id *)(v1 + 32);
    goto LABEL_39;
  }

LABEL_133:
  uint64_t v36 = (os_log_s *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
LABEL_39:
  uint64_t v37 = v36;
  *(void *)(v0 + 1072) = v36;
  sub_45B5C();
  *(void *)(v0 + 656) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 648) = 0LL;
  if (v37)
  {
    sub_45504();
    os_log_type_t v38 = sub_16C50();
    if (sub_286C4(v38))
    {
      uint64_t v39 = (_WORD *)sub_1EFA4();
      sub_45A94(v39);
      sub_16B44( &dword_0,  v37,  (os_log_type_t)v10,  "Undoing sleep alarm status change.",  (uint8_t *)_swiftEmptyArrayStorage);
      sub_16AA8((uint64_t)_swiftEmptyArrayStorage);
    }

    uint64_t v40 = *(void *)(v0 + 952);
    uint64_t v41 = *(void *)(v0 + 944);
    uint64_t v42 = *(void **)(v0 + 936);
    uint64_t v43 = *(uint8_t **)(v0 + 928);
    uint64_t v44 = *(void *)(v0 + 672);

    uint64_t v45 = v44 + v3[455];
    sub_2D018(v45, v0 + 488);
    uint64_t v46 = (void (*)(uint64_t, uint64_t, uint8_t *))v42[2];
    v46(v40, v45, v43);
    uint64_t v47 = (void (*)(uint64_t, void, uint8_t *))v42[13];
    v47(v41, enum case for AlarmNLv4Constants.AlarmVerb.enable(_:), v43);
    char v48 = sub_454F8();
    uint64_t v49 = (void (*)(uint64_t))v42[1];
    uint64_t v50 = sub_45B30();
    v49(v50);
    ((void (*)(uint64_t, uint8_t *))v49)(v40, v43);
    if ((v48 & 1) != 0)
    {
      uint64_t v51 = (void *)swift_task_alloc(dword_D4E8C);
      *(void *)(v0 + 1080) = v51;
      sub_45BBC(v51, (uint64_t)sub_3AED0);
      return sub_42988();
    }

    uint64_t v54 = *(void *)(v0 + 952);
    uint64_t v55 = *(void *)(v0 + 944);
    uint64_t v56 = *(uint8_t **)(v0 + 928);
    v46(v54, v45, v56);
    v47(v55, enum case for AlarmNLv4Constants.AlarmVerb.disable(_:), v56);
    uint64_t v57 = sub_45564();
    ((void (*)(uint64_t, uint8_t *))v49)(v55, v56);
    ((void (*)(uint64_t, uint8_t *))v49)(v54, v56);
    if ((v57 & 1) != 0)
    {
      uint64_t v58 = (void *)swift_task_alloc(dword_D4E84);
      *(void *)(v0 + 1096) = v58;
      sub_45BBC(v58, (uint64_t)sub_3B878);
      return sub_43170();
    }

    if (*v444)
    {
      id v59 = sub_45C98(*v444);
      sub_45C14((uint64_t)v59, v60, v61, v62, v63, v64, v65, v66, v352, v365, v377, v388, v398);
      os_log_type_t v67 = sub_16C50();
      uint64_t v2 = &enum case for AlarmNLv4Constants.AlarmVerb.enable(_:);
      os_log_type_t v3 = (void *)&unk_D4000;
      if (sub_286C4(v67))
      {
        uint64_t v68 = (_WORD *)sub_1EFA4();
        sub_45A94(v68);
        sub_16B44(&dword_0, (os_log_s *)v57, (os_log_type_t)v55, "Appending updated sleep alarm to changedAlarms", v56);
        sub_16AA8((uint64_t)v56);
      }

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v69);
      sub_45AA0();
      if (v71) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v55 + 1, 1LL);
      }
      uint64_t v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v54);
      specialized Array._endMutation()(v72, v73, v74, v75);
      uint64_t v53 = *(void *)(v0 + 1072);
    }

    else
    {
      uint64_t v53 = *(void *)(v0 + 1072);
      uint64_t v2 = &enum case for AlarmNLv4Constants.AlarmVerb.enable(_:);
      os_log_type_t v3 = &unk_D4000;
    }
  }

  else
  {
    uint64_t v53 = 0LL;
  }

LABEL_55:
  *(void *)(v0 + 1112) = v53;
  uint64_t v76 = *(void *)(v0 + 952);
  uint64_t v77 = *(void *)(v0 + 944);
  uint64_t v78 = *(void **)(v0 + 936);
  uint64_t v79 = *(void *)(v0 + 928);
  uint64_t v80 = *(void *)(v0 + 672);
  uint64_t v81 = v3[455];
  *(void *)(v0 + 1120) = v81;
  uint64_t v82 = v80 + v81;
  sub_2D018(v80 + v81, v0 + 512);
  uint64_t v83 = (void (*)(uint64_t, uint64_t, uint64_t))v78[2];
  *(void *)(v0 + 1128) = v83;
  v83(v76, v82, v79);
  *(_DWORD *)(v0 + 1552) = *v2;
  os_log_type_t v32 = (void (*)(uint64_t))v78[13];
  *(void *)(v0 + 1136) = v32;
  v32(v77);
  char v84 = sub_45564();
  uint64_t v35 = (void (*)(uint64_t))v78[1];
  *(void *)(v0 + 1144) = v35;
  sub_458B0(v77);
  sub_458B0(v76);
  if ((v84 & 1) != 0)
  {
    uint64_t v85 = (void *)swift_task_alloc(dword_D4E7C);
    *(void *)(v0 + 1152) = v85;
    uint64_t v86 = sub_45484(v85, (uint64_t)sub_3C220);
    return sub_4549C(v86);
  }

  uint64_t v87 = *(uint8_t **)(v0 + 944);
  uint64_t v2 = *(_DWORD **)(v0 + 928);
  v83(*(void *)(v0 + 952), v82, (uint64_t)v2);
  uint64_t v1 = enum case for AlarmNLv4Constants.AlarmVerb.disable(_:);
  ((void (*)(uint8_t *, void, _DWORD *))v32)( v87,  enum case for AlarmNLv4Constants.AlarmVerb.disable(_:),  v2);
  char v88 = sub_454F8();
  uint64_t v89 = sub_45B30();
  v35(v89);
  sub_45C74();
  if ((v88 & 1) != 0)
  {
    uint64_t v90 = (void *)swift_task_alloc(dword_D4E74);
    *(void *)(v0 + 1168) = v90;
    uint64_t v91 = sub_45484(v90, (uint64_t)sub_3CB04);
    return sub_454B8(v91);
  }

  sub_45C50();
  unint64_t v92 = *(void *)(v0 + 656);
  sub_176C8();
  sub_6044();
  uint64_t v93 = sub_16C48();
  if (!(v92 >> 62))
  {
    uint64_t v101 = *(void *)((char *)&dword_10 + (v92 & 0xFFFFFFFFFFFFF8LL));
    if (v101) {
      goto LABEL_61;
    }
LABEL_137:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    uint64_t v322 = sub_45570();
    Logger.logObject.getter(v322, v323, v324, v325, v326, v327, v328, v329);
    os_log_type_t v330 = sub_16C50();
    if (sub_1990C(v330))
    {
      uint64_t v331 = (_WORD *)sub_1EFA4();
      sub_16BEC(v331);
      sub_198C0(&dword_0, v332, v333, "No alarms updated.");
      sub_16AA8((uint64_t)v32);
    }

    sub_452EC();
    sub_452DC(v334, enum case for SiriTimeEventSender.ReasonDescription.noAlarmsUpdated(_:));
    uint64_t v335 = (void *)swift_task_alloc(dword_D4E6C);
    *(void *)(v0 + 1184) = v335;
    goto LABEL_144;
  }

LABEL_135:
  sub_176C8();
  uint64_t v87 = (uint8_t *)sub_45C6C();
  sub_16C48();
  if (!v87) {
    goto LABEL_137;
  }
  sub_176C8();
  uint64_t v101 = sub_45C6C();
  uint64_t v93 = sub_16C48();
LABEL_61:
  uint64_t v102 = *(os_log_s **)(v0 + 1040);
  if (v101 == 1)
  {
    uint64_t v103 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    Logger.logObject.getter(v103, v104, v105, v106, v107, v108, v109, v110);
    os_log_type_t v111 = sub_16C50();
    if (sub_1990C(v111))
    {
      uint64_t v112 = (_WORD *)sub_1EFA4();
      sub_45838(v112);
      sub_16B44(&dword_0, v102, (os_log_type_t)v35, "One alarm updated.", (_BYTE *)&dword_0 + 1);
      sub_16AA8(1LL);
    }

    uint64_t v114 = *(void *)v442;
    if (*(void *)v442 >> 62)
    {
      sub_457C4();
      uint64_t v336 = sub_2D1F4();
      uint64_t v113 = (void *)sub_17900();
      if (v336) {
        goto LABEL_66;
      }
    }

    else if (*(void *)((char *)&dword_10 + (v114 & 0xFFFFFFFFFFFFF8LL)))
    {
LABEL_66:
      if ((v114 & 0xC000000000000001LL) != 0)
      {
        uint64_t v115 = sub_459DC();
        goto LABEL_69;
      }

      if (*(void *)((char *)&dword_10 + (v114 & 0xFFFFFFFFFFFFF8LL)))
      {
        uint64_t v115 = (uint64_t)sub_45C28();
LABEL_69:
        uint64_t v445 = (void *)v115;
        *(void *)(v0 + 1192) = v115;
        uint64_t v440 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1136);
        char v442 = *(uint64_t (**)(void))(v0 + 1144);
        LODWORD(v43static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = *(_DWORD *)(v0 + 1552);
        uint64_t v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1128);
        uint64_t v117 = *(void *)(v0 + 1120);
        uint64_t v118 = *(void *)(v0 + 952);
        uint64_t v119 = *(void *)(v0 + 944);
        uint64_t v120 = *(void *)(v0 + 928);
        uint64_t v121 = *(void *)(v0 + 672);
        sub_17900();
        v116(v118, v121 + v117, v120);
        v440(v119, v437, v120);
        uint64_t v122 = sub_454F8();
        uint64_t v123 = sub_45B30();
        uint64_t v124 = (uint64_t)v442;
        ((void (*)(uint64_t))v442)(v123);
        uint64_t v125 = sub_45C74();
        if ((v122 & 1) != 0)
        {
          uint64_t v132 = sub_457D8(v125, v126, v127, v128, v129, v130, v131);
          Logger.logObject.getter(v132, v133, v134, v135, v136, v137, v138, v139);
          os_log_type_t v140 = sub_16C50();
          if (sub_16BA4(v140))
          {
            uint64_t v141 = (_WORD *)sub_1EFA4();
            sub_45454(v141);
            sub_450A8(&dword_0, v142, v143, "Hitting RF path for UndoChangeStatusFlow, 1 alarm.");
            sub_16AA8(v1);
          }

          uint64_t v443 = *(void *)(v0 + 808);
          sub_45950();

          sub_45124(v144, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
          sub_45134(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
          uint64_t v145 = mach_absolute_time();
          sub_452B4(v145, v146, v145);
          id v147 = sub_45B44();
          sub_456A0(v147);
          sub_457B8();
          sub_455F4();
          uint64_t v148 = (void *)sub_45190();
          if (v122)
          {
            *(void *)(v0 + 1200) = v148;
            uint64_t v149 = sub_3D4E8;
          }

          else
          {
            *(void *)(v0 + 1232) = v148;
            uint64_t v149 = sub_3D6CC;
          }

LABEL_126:
          *uint64_t v148 = v0;
          v148[1] = v149;
          return sub_451B8(v122, v124, (uint64_t (*)(void))v443);
        }

        uint64_t v124 = *(void *)(v0 + 1144);
        uint64_t v196 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1136);
        uint64_t v197 = *(void **)(v0 + 952);
        uint64_t v198 = *(void *)(v0 + 944);
        uint64_t v199 = *(void *)(v0 + 928);
        sub_16E84( (uint64_t)v197,  *(void *)(v0 + 672) + *(void *)(v0 + 1120),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1128));
        v196(v198, v1, v199);
        uint64_t v200 = sub_45A1C();
        sub_457B0(v198);
        sub_457B0((uint64_t)v197);
        if ((v200 & 1) != 0)
        {
          sub_45504();
          os_log_type_t v201 = sub_16C50();
          if (sub_16BA4(v201))
          {
            uint64_t v202 = (_WORD *)sub_1EFA4();
            sub_45454(v202);
            sub_450A8(&dword_0, v203, v204, "Hitting RF path for UndoChangeStatusFlow, 1 alarm.");
            sub_16AA8(v200);
          }

          sub_45950();
          uint64_t v443 = *(void *)(v0 + 672);

          sub_45124(v205, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
          sub_45134(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v200 + 16));
          uint64_t v206 = mach_absolute_time();
          sub_452B4(v206, v207, v206);
          id v208 = sub_45B44();
          sub_456A0(v208);
          if (v197)
          {
            uint64_t v122 = *(void *)(v443 + 24);
            sub_455F4();
            uint64_t v148 = (void *)sub_45190();
            *(void *)(v0 + 1296) = v148;
            uint64_t v149 = sub_3DA0C;
          }

          else
          {
            uint64_t v122 = *(void *)(v443 + 24);
            sub_455F4();
            uint64_t v148 = (void *)sub_45190();
            *(void *)(v0 + 1352) = v148;
            uint64_t v149 = sub_3DD08;
          }

          goto LABEL_126;
        }

        goto LABEL_120;
      }

      __break(1u);
      goto LABEL_147;
    }

    uint64_t v337 = sub_17900();
    Logger.logObject.getter(v337, v338, v339, v340, v341, v342, v343, v344);
    os_log_type_t v345 = sub_17714();
    if (sub_1990C(v345))
    {
      uint64_t v346 = (_WORD *)sub_1EFA4();
      sub_16BEC(v346);
      sub_198C0(&dword_0, v347, v348, "Can't retrieve changed alarm or it's snippet information.");
      sub_16AA8((uint64_t)v32);
    }

    sub_452EC();
    sub_452DC(v349, enum case for SiriTimeEventSender.ReasonDescription.failedToFetchChangedAlarm(_:));
    uint64_t v335 = (void *)swift_task_alloc(dword_D4E6C);
    *(void *)(v0 + 1408) = v335;
LABEL_144:
    uint64_t v350 = sub_4546C(v335);
    return sub_451D4(v350, v351);
  }

  LODWORD(v43static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = v1;
  Logger.logObject.getter(v93, v94, v95, v96, v97, v98, v99, v100);
  os_log_type_t v150 = sub_16C50();
  if (sub_286C4(v150))
  {
    unint64_t v151 = (_WORD *)sub_1EFA4();
    sub_45A94(v151);
    sub_16B44(&dword_0, v102, (os_log_type_t)v101, "Multiple alarms updated.", v87);
    sub_16AA8((uint64_t)v87);
  }

  unint64_t v152 = *(void (**)(uint64_t, uint64_t))(v0 + 1144);
  uint64_t v440 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1136);
  uint64_t v101 = *(unsigned int *)(v0 + 1552);
  uint64_t v11 = *(__objc2_ivar **)(v0 + 1128);
  uint64_t v153 = *(void *)(v0 + 1120);
  uint64_t v154 = *(void *)(v0 + 952);
  uint64_t v155 = *(void *)(v0 + 944);
  uint64_t v156 = *(void *)(v0 + 928);
  uint64_t v157 = *(void *)(v0 + 672);

  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v154, v157 + v153, v156);
  v440(v155, v101, v156);
  uint64_t v158 = sub_45B30();
  char v160 = sub_288BC(v158, v159);
  v152(v155, v156);
  v152(v154, v156);
  if ((v160 & 1) != 0)
  {
    sub_45504();
    os_log_type_t v161 = sub_16C50();
    if (sub_16BA4(v161))
    {
      uint64_t v162 = (_WORD *)sub_1EFA4();
      sub_45454(v162);
      sub_450A8(&dword_0, v163, v164, "Hitting RF path for UndoChangeStatusFlow, multiple alarms.");
      sub_16AA8(v153);
    }

    uint64_t v165 = *(void *)(v0 + 1040);
    char v442 = *(uint64_t (**)(void))(v0 + 792);
    sub_45220();
    sub_45124(v166, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
    sub_450F4();
    uint64_t v167 = mach_absolute_time();
    sub_452B4(v167, v168, v167);
    uint64_t v2 = *(_DWORD **)(v153 + 32);
    uint64_t v113 = _swiftEmptyArrayStorage;
    v446[0] = _swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
      uint64_t v169 = (void *)sub_45740((uint64_t)_swiftEmptyArrayStorage);
LABEL_81:
      uint64_t v170 = _swiftEmptyArrayStorage;
      if (!v165)
      {
LABEL_115:
        sub_16C48();
        *(void *)(v0 + 1416) = v170;
        sub_16C48();
        sub_45570();
        uint64_t v209 = (void *)sub_459E8((uint64_t)&unk_D3D30);
        *(void *)(v0 + 1424) = v209;
        uint64_t v210 = sub_3E050;
        goto LABEL_118;
      }

      if (v165 >= 1)
      {
        do
        {
          else {
            sub_454EC();
          }
          sub_45374();
          sub_4575C();
          if (v101)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v171);
            sub_45CAC();
            if (v71) {
              sub_4520C(v172);
            }
            uint64_t v173 = sub_454D4();
            specialized Array._endMutation()(v173, v174, v175, v176);
          }

          sub_457E4();
        }

        while (!v177);
        uint64_t v170 = (void *)v446[0];
        goto LABEL_115;
      }

      __break(1u);
      goto LABEL_149;
    }

LABEL_147:
    sub_45528((uint64_t)v113);
    uint64_t v169 = (void *)sub_45644();
    uint64_t v165 = (uint64_t)v169;
    goto LABEL_81;
  }

  uint64_t v124 = *(void *)(v0 + 1144);
  uint64_t v178 = *(void (**)(uint64_t, void, uint64_t))(v0 + 1136);
  uint64_t v179 = *(void *)(v0 + 952);
  uint64_t v101 = *(void *)(v0 + 944);
  uint64_t v180 = *(void *)(v0 + 928);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 1128))( v179,  *(void *)(v0 + 672) + *(void *)(v0 + 1120),  v180);
  v178(v101, v437, v180);
  uint64_t v181 = sub_288BC(v179, v101);
  sub_458B0(v101);
  sub_458B0(v179);
  if ((v181 & 1) != 0)
  {
    sub_45504();
    os_log_type_t v182 = sub_16C50();
    if (sub_16BA4(v182))
    {
      uint64_t v183 = (_WORD *)sub_1EFA4();
      sub_45454(v183);
      sub_450A8(&dword_0, v184, v185, "Hitting RF path for UndoChangeStatusFlow, multiple alarms.");
      sub_16AA8(v181);
    }

    uint64_t v186 = *(void *)(v0 + 1040);
    char v442 = *(uint64_t (**)(void))(v0 + 784);
    sub_45220();
    sub_45124(v187, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
    sub_450F4();
    uint64_t v188 = mach_absolute_time();
    sub_452B4(v188, v189, v188);
    uint64_t v2 = *(_DWORD **)(v181 + 32);
    uint64_t v169 = _swiftEmptyArrayStorage;
    v446[0] = _swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
      uint64_t result = sub_45740((uint64_t)_swiftEmptyArrayStorage);
LABEL_98:
      uint64_t v170 = _swiftEmptyArrayStorage;
      if (v186)
      {
        if (v186 < 1)
        {
          __break(1u);
          return result;
        }

        do
        {
          else {
            sub_454EC();
          }
          sub_45374();
          sub_4575C();
          if (v101)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v190);
            sub_45CAC();
            if (v71) {
              sub_4520C(v191);
            }
            uint64_t v192 = sub_454D4();
            specialized Array._endMutation()(v192, v193, v194, v195);
          }

          sub_457E4();
        }

        while (!v177);
        uint64_t v170 = (void *)v446[0];
      }

      sub_16C48();
      *(void *)(v0 + 1480) = v170;
      sub_16C48();
      sub_45570();
      uint64_t v209 = (void *)sub_459E8((uint64_t)&unk_D3D38);
      *(void *)(v0 + 1488) = v209;
      uint64_t v210 = sub_3E35C;
LABEL_118:
      *uint64_t v209 = v0;
      v209[1] = v210;
      uint64_t v451 = v2;
      uint64_t v452 = v444;
      uint64_t v450 = v170;
      return sub_4519C(v442);
    }

LABEL_149:
    sub_45528((uint64_t)v169);
    uint64_t result = sub_45644();
    uint64_t v186 = result;
    goto LABEL_98;
  }

  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(*(void *)v442);
LABEL_120:
  sub_455BC();
  uint64_t v213 = sub_2D018(v211 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_followupPluginAction, v212);
  sub_457F0(v213, v214, &qword_D43E0);
  sub_44FB4(v124);
  if (v177)
  {
    uint64_t v215 = sub_45094();
    sub_44DF4(v215, &qword_D43E0);
    sub_453B0();

    sub_44FE0();
    sub_450EC();
    uint64_t v216 = sub_17614();
  }

  else
  {
    sub_44F84();
    sub_45108();

    sub_45038();
    sub_44FE0();
    sub_450EC();
    uint64_t v216 = sub_45538();
  }

  sub_40A2C(v216);
  sub_44E64();
  sub_19794();
  sub_197C0();
  sub_19830();
  sub_19828();
  sub_19820();
  sub_1987C();
  sub_19808();
  sub_19800();
  uint64_t v217 = sub_1978C();
  uint64_t v225 = sub_19980(v217, v218, v219, v220, v221, v222, v223, v224, v352);
  uint64_t v233 = sub_19978(v225, v226, v227, v228, v229, v230, v231, v232, v353, v365);
  uint64_t v241 = sub_19964(v233, v234, v235, v236, v237, v238, v239, v240, v354, v366, v377);
  uint64_t v249 = sub_1B64C(v241, v242, v243, v244, v245, v246, v247, v248, v355, v367, v378, v388);
  uint64_t v257 = sub_25044(v249, v250, v251, v252, v253, v254, v255, v256, v356, v368, v379, v389, v398);
  uint64_t v265 = sub_2503C(v257, v258, v259, v260, v261, v262, v263, v264, v357, v369, v380, v390, v399, v407);
  uint64_t v273 = sub_25218(v265, v266, v267, v268, v269, v270, v271, v272, v358, v370, v381, v391, v400, v408, v415);
  uint64_t v281 = sub_45358(v273, v274, v275, v276, v277, v278, v279, v280, v359, v371, v382, v392, v401, v409, v416, v422);
  uint64_t v289 = sub_45350(v281, v282, v283, v284, v285, v286, v287, v288, v360, v372, v383, v393, v402, v410, v417, v423, v428);
  uint64_t v297 = sub_45348( v289,  v290,  v291,  v292,  v293,  v294,  v295,  v296,  v361,  v373,  v384,  v394,  v403,  v411,  v418,  v424,  v429,  v433);
  uint64_t v305 = sub_45340( v297,  v298,  v299,  v300,  v301,  v302,  v303,  v304,  v362,  v374,  v385,  v395,  v404,  v412,  v419,  v425,  v430,  v434,  v437);
  uint64_t v313 = sub_45338( v305,  v306,  v307,  v308,  v309,  v310,  v311,  v312,  v363,  v375,  v386,  v396,  v405,  v413,  v420,  v426,  v431,  v435,  v438,  (uint64_t)v440);
  sub_45330( v313,  v314,  v315,  v316,  v317,  v318,  v319,  v320,  v364,  v376,  v387,  v397,  v406,  v414,  v421,  v427,  v432,  v436,  v439,  v441,  (uint64_t)v442);
  sub_45328();
  return sub_451F0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3AED0()
{
  *(void *)(v1 + 1088) = v0;
  sub_199C0(v2);
  sub_19840();
  return sub_1988C();
}

#error "3AF44: call analysis failed (funcsize=567)"
uint64_t sub_3B878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_455DC();
  sub_455CC();
  *(void *)(v1 + 1104) = v0;
  sub_199C0(v2);
  sub_19840();
  return sub_1988C();
}

#error "3B8EC: call analysis failed (funcsize=567)"
uint64_t sub_3C220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sub_455DC();
  uint64_t v1 = *(void *)(v0 + 1064);
  sub_455CC();
  *(void *)(v3 + 1160) = v2;
  sub_199C0(v4);
  swift_release(v1);
  sub_19840();
  return sub_1988C();
}

#error "3C454: call analysis failed (funcsize=515)"
uint64_t sub_3CB04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sub_455DC();
  uint64_t v1 = *(void *)(v0 + 1064);
  sub_455CC();
  *(void *)(v3 + 1176) = v2;
  sub_199C0(v4);
  swift_release(v1);
  sub_19840();
  return sub_1988C();
}

#error "3CD38: call analysis failed (funcsize=515)"
uint64_t sub_3D3E8()
{
  uint64_t v0;
  uint64_t v1;
  sub_2D000();
  uint64_t v1 = *(void *)(v0 + 888);
  sub_25068(*(void *)(v0 + 1184));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_19840();
  return sub_19744();
}

#error "3D4A4: call analysis failed (funcsize=45)"
uint64_t sub_3D4E8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v4;
  uint64_t v5;
  void *v7;
  void *v8;
  uint64_t v8 = (void *)*v2;
  uint64_t v4 = v8;
  sub_1996C(&v8);
  v4[151] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_19840();
    return sub_19744();
  }

  else
  {
    v4[152] = a1;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateFlowPatternResponse(phase:contextUpdate:measure:)[1]);
    v4[153] = v7;
    *uint64_t v7 = v2;
    v7[1] = sub_3D58C;
    return PatternExecutionResult.generateFlowPatternResponse(phase:contextUpdate:measure:)( v4[83],  v4[109],  v4[115],  v4[101]);
  }

uint64_t sub_3D58C()
{
  uint64_t v1 = *(void **)(v0 + 1216);
  sub_25068(*(void *)(v0 + 1224));

  sub_19840();
  return sub_1988C();
}

#error "3D688: call analysis failed (funcsize=65)"
uint64_t sub_3D6CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_455DC();
  sub_455CC();
  *(void *)(v2 + 1240) = v1;
  *(void *)(v2 + 1248) = v0;
  sub_199C0(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_3D71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1256) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_3D77C;
  sub_45818();
  return sub_45460();
}

uint64_t sub_3D77C()
{
  uint64_t v9 = (void *)*v1;
  uint64_t v2 = v9;
  sub_1996C(&v9);
  v2[158] = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v2[155];
  uint64_t v5 = v2[108];
  uint64_t v6 = v2[102];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2[103] + 8LL);
  if (!v0) {
    v2[159] = v7;
  }
  v7(v5, v6);

  sub_19840();
  return sub_19744();
}

uint64_t sub_3D7FC()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 1280) = v1;
  sub_456C0(v1, (uint64_t)sub_3D850);
  return sub_45400();
}

uint64_t sub_3D850()
{
  *(void *)(v1 + 1288) = v0;
  swift_task_dealloc(v2);
  sub_19840();
  return sub_1988C();
}

#error "3D9C8: call analysis failed (funcsize=90)"
uint64_t sub_3DA0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_455DC();
  sub_455CC();
  *(void *)(v2 + 1304) = v1;
  *(void *)(v2 + 1312) = v0;
  sub_199C0(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_3DA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1320) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_3DABC;
  sub_45818();
  return sub_45460();
}

uint64_t sub_3DABC()
{
  v0[166] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[163];
  sub_19838(v0[103]);

  sub_19840();
  return sub_19744();
}

uint64_t sub_3DB24()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 1336) = v1;
  sub_456C0(v1, (uint64_t)sub_3DB78);
  return sub_45400();
}

uint64_t sub_3DB78()
{
  *(void *)(v1 + 1344) = v0;
  swift_task_dealloc(v2);
  sub_19840();
  return sub_1988C();
}

#error "3DCC4: call analysis failed (funcsize=79)"
uint64_t sub_3DD08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_455DC();
  sub_455CC();
  *(void *)(v2 + 1360) = v1;
  *(void *)(v2 + 1368) = v0;
  sub_199C0(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_3DD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1376) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_3DDB8;
  sub_45818();
  return sub_45460();
}

uint64_t sub_3DDB8()
{
  v0[173] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[170];
  sub_19838(v0[103]);

  sub_19840();
  return sub_19744();
}

uint64_t sub_3DE20()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 1392) = v1;
  sub_456C0(v1, (uint64_t)sub_3DE74);
  return sub_45400();
}

uint64_t sub_3DE74()
{
  *(void *)(v1 + 1400) = v0;
  swift_task_dealloc(v2);
  sub_19840();
  return sub_1988C();
}

#error "3DFC0: call analysis failed (funcsize=79)"
uint64_t sub_3E004()
{
  uint64_t v0;
  uint64_t v1;
  sub_2D000();
  uint64_t v1 = *(void *)(v0 + 888);
  sub_25068(*(void *)(v0 + 1408));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_19840();
  return sub_19744();
}

uint64_t sub_3E050()
{
  uint64_t v2 = v0[178];
  v0[179] = v3;
  v0[180] = v1;
  sub_199C0(v2);
  swift_bridgeObjectRelease(v0[177]);
  sub_19840();
  return sub_197B8();
}

uint64_t sub_3E0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1448) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_3E114;
  sub_45818();
  return sub_45460();
}

uint64_t sub_3E114()
{
  v0[182] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[179];
  sub_19838(v0[103]);

  sub_19840();
  return sub_19744();
}

uint64_t sub_3E17C()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 1464) = v1;
  sub_456C0(v1, (uint64_t)sub_3E1D0);
  return sub_45400();
}

uint64_t sub_3E1D0()
{
  *(void *)(v1 + 1472) = v0;
  swift_task_dealloc(v2);
  sub_19840();
  return sub_1988C();
}

#error "3E318: call analysis failed (funcsize=78)"
uint64_t sub_3E35C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_19810();
  uint64_t v2 = v0[186];
  v0[187] = v3;
  v0[188] = v1;
  sub_199C0(v2);
  swift_bridgeObjectRelease(v0[185]);
  sub_19840();
  return sub_197B8();
}

uint64_t sub_3E3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1512) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_3E420;
  sub_45818();
  return sub_45460();
}

uint64_t sub_3E420()
{
  v0[190] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[187];
  sub_19838(v0[103]);

  sub_19840();
  return sub_19744();
}

uint64_t sub_3E488()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v0[191] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3E500;
  return sub_45400();
}

uint64_t sub_3E500()
{
  *(void *)(v1 + 1536) = v0;
  swift_task_dealloc(v2);
  sub_19840();
  return sub_1988C();
}

#error "3E648: call analysis failed (funcsize=78)"
uint64_t sub_3E68C()
{
  uint64_t v0;
  uint64_t v1;
  sub_2D000();
  uint64_t v1 = *(void *)(v0 + 888);
  sub_25068(*(void *)(v0 + 1544));
  sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_19840();
  return sub_19744();
}

#error "3E724: call analysis failed (funcsize=36)"
#error "3E858: call analysis failed (funcsize=143)"
#error "3EAAC: call analysis failed (funcsize=143)"
#error "3ED00: call analysis failed (funcsize=143)"
#error "3EF60: call analysis failed (funcsize=146)"
#error "3F1E0: call analysis failed (funcsize=129)"
#error "3F3FC: call analysis failed (funcsize=129)"
#error "3F624: call analysis failed (funcsize=132)"
#error "3F840: call analysis failed (funcsize=129)"
#error "3FA5C: call analysis failed (funcsize=129)"
#error "3FC84: call analysis failed (funcsize=132)"
#error "3FF58: call analysis failed (funcsize=128)"
#error "40170: call analysis failed (funcsize=128)"
#error "40394: call analysis failed (funcsize=131)"
#error "405AC: call analysis failed (funcsize=128)"
#error "407C4: call analysis failed (funcsize=128)"
#error "409E8: call analysis failed (funcsize=131)"
uint64_t sub_40A2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[24];
  uint64_t v2 = sub_26B0(&qword_D4400);
  __chkstk_darwin(v2);
  uint64_t v44 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_26B0(&qword_D4408);
  __chkstk_darwin(v4);
  uint64_t v47 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  char v48 = v6;
  uint64_t v49 = v7;
  __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ActivityType(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_26B0(&qword_D43F8);
  uint64_t v14 = __chkstk_darwin(v13);
  id v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v43 - v17;
  uint64_t v19 = type metadata accessor for SiriTimeEventSender.ReasonDescription(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  id v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = a1 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_failureReason;
  swift_beginAccess(v23, v50, 0LL, 0LL);
  sub_44CFC(v23, (uint64_t)v18, &qword_D43F8);
  uint64_t v24 = sub_16880((uint64_t)v18, 1LL, v19);
  uint64_t v46 = v9;
  if (v24 == 1)
  {
    sub_44DF4((uint64_t)v18, &qword_D43F8);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for ActivityType.completed(_:), v9);
    if (qword_D3038 != -1) {
      swift_once(&qword_D3038, sub_39160);
    }
    uint64_t v25 = v48;
    uint64_t v26 = sub_26F0(v48, (uint64_t)qword_D8208);
    uint64_t v27 = v49;
    BOOL v28 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v45, v26, v25);
    uint64_t v29 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    os_log_type_t v30 = v47;
    sub_A40C(v47, 1LL, 1LL, v29);
    if (qword_D3040 != -1) {
      swift_once(&qword_D3040, sub_3917C);
    }
    uint64_t v31 = type metadata accessor for SiriTimeEventSender.Attribute(0LL);
    os_log_type_t v32 = sub_26F0(v31, (uint64_t)qword_D8220);
    uint64_t v33 = (uint64_t)v44;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16LL))(v44, v32, v31);
    sub_A40C(v33, 0LL, 1LL, v31);
    sub_A40C((uint64_t)v16, 1LL, 1LL, v19);
    static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v12, v28, v30, v33, v16);
    sub_44DF4((uint64_t)v16, &qword_D43F8);
    sub_44DF4(v33, &qword_D4400);
    sub_44DF4(v30, &qword_D4408);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v46);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for ActivityType.failed(_:), v9);
    if (qword_D3038 != -1) {
      swift_once(&qword_D3038, sub_39160);
    }
    uint64_t v43 = v10;
    uint64_t v35 = v48;
    uint64_t v36 = sub_26F0(v48, (uint64_t)qword_D8208);
    uint64_t v37 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v45, v36, v35);
    os_log_type_t v38 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    uint64_t v39 = v47;
    sub_A40C(v47, 1LL, 1LL, v38);
    if (qword_D3040 != -1) {
      swift_once(&qword_D3040, sub_3917C);
    }
    uint64_t v40 = type metadata accessor for SiriTimeEventSender.Attribute(0LL);
    uint64_t v41 = sub_26F0(v40, (uint64_t)qword_D8220);
    uint64_t v42 = (uint64_t)v44;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16LL))(v44, v41, v40);
    sub_A40C(v42, 0LL, 1LL, v40);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v16, v22, v19);
    sub_A40C((uint64_t)v16, 0LL, 1LL, v19);
    static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v12, v37, v39, v42, v16);
    sub_44DF4((uint64_t)v16, &qword_D43F8);
    sub_44DF4(v42, &qword_D4400);
    sub_44DF4(v39, &qword_D4408);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v35);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v46);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }

void *sub_40F8C(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_39;
  }
  for (uint64_t i = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL)); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter(v25))
  {
    uint64_t v27 = v2;
    unint64_t v4 = 0LL;
    unint64_t v32 = v2 & 0xC000000000000001LL;
    uint64_t v30 = OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_alarmIds;
    uint64_t v31 = v2 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v28 = i;
    uint64_t v29 = v2 + 32;
    while (1)
    {
      if (v32)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v27);
      }

      else
      {
        if (v4 >= *(void *)(v31 + 16))
        {
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }

        id v5 = *(id *)(v29 + 8 * v4);
      }

      uint64_t v6 = v5;
      if (__OFADD__(v4++, 1LL)) {
        goto LABEL_37;
      }
      uint64_t v8 = *(void **)(a2 + v30);
      swift_bridgeObjectRetain(v8);
      uint64_t v9 = sub_4AD44(v6);
      if (v10) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = 0LL;
      }
      if (v10) {
        unint64_t v12 = v10;
      }
      else {
        unint64_t v12 = 0xE000000000000000LL;
      }
      uint64_t v2 = v8[2];
      if (!v2)
      {
        swift_bridgeObjectRelease(v8);
LABEL_32:
        swift_bridgeObjectRelease(v12);

        goto LABEL_33;
      }

      uint64_t v13 = v8[4];
      uint64_t v14 = v8[5];
      BOOL v15 = v13 == v11 && v14 == v12;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v11, v12, 0LL) & 1) == 0) {
        break;
      }
LABEL_20:
      swift_bridgeObjectRelease(v8);
      uint64_t v16 = swift_bridgeObjectRelease(v12);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      uint64_t v17 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      uint64_t v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v6);
      specialized ContiguousArray._endMutation()(v18);
      uint64_t i = v28;
LABEL_33:
      if (v4 == i)
      {
        uint64_t v2 = v27;
        goto LABEL_43;
      }
    }

    if (v2 == 1)
    {
LABEL_31:
      swift_bridgeObjectRelease(v8);
      uint64_t i = v28;
      goto LABEL_32;
    }

    uint64_t v19 = v8 + 7;
    uint64_t v20 = 1LL;
    while (1)
    {
      uint64_t v21 = v20 + 1;
      if (__OFADD__(v20, 1LL)) {
        break;
      }
      uint64_t v22 = *(v19 - 1);
      uint64_t v23 = *v19;
      BOOL v24 = v22 == v11 && v23 == v12;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v11, v12, 0LL) & 1) != 0) {
        goto LABEL_20;
      }
      v19 += 2;
      ++v20;
      if (v21 == v2) {
        goto LABEL_31;
      }
    }

LABEL_43:
  swift_release(a2);
  swift_bridgeObjectRelease(v2);
  return _swiftEmptyArrayStorage;
}

    swift_once(&qword_D3190, sub_85310);
    goto LABEL_28;
  }

  if ((v66 & 1) != 0)
  {
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
    }

    else
    {
      os_log_type_t v67 = *((void *)v117 + 2);
      if (v67)
      {
        uint64_t v68 = (uint64_t)(result + 1) % v67;
        if ((v68 & 0x8000000000000000LL) == 0)
        {
          uint64_t v69 = *((void *)v117 + v68 + 4);
          (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v22);
          uint64_t result = swift_bridgeObjectRelease(v117);
          unint64_t v70 = v69 - v60;
          if (!__OFSUB__(v69, v60))
          {
            char v71 = __OFADD__(v70, 7LL);
            uint64_t v72 = v70 + 7;
            if (!v71) {
              return v72 % 7;
            }
            __break(1u);
            goto LABEL_27;
          }

          goto LABEL_47;
        }

uint64_t sub_411CC(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for NLContextUpdate(0LL);
  v3[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[19] = v5;
  v3[20] = sub_19754(v5);
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = sub_19754(v7);
  uint64_t v8 = type metadata accessor for CATOption(0LL);
  v3[24] = sub_19754(*(void *)(v8 - 8));
  uint64_t v9 = sub_16C80();
  v3[25] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[26] = v10;
  v3[27] = sub_19754(v10);
  uint64_t v11 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[28] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[29] = v12;
  v3[30] = sub_19754(v12);
  uint64_t v13 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[31] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[32] = v14;
  v3[33] = sub_19754(v14);
  uint64_t v15 = sub_26B0(&qword_D4400);
  v3[34] = sub_19754(*(void *)(v15 - 8));
  uint64_t v16 = sub_26B0(&qword_D4408);
  v3[35] = sub_19754(*(void *)(v16 - 8));
  uint64_t v17 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  v3[36] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v3[37] = v18;
  v3[38] = sub_19754(v18);
  uint64_t v19 = type metadata accessor for ActivityType(0LL);
  v3[39] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v3[40] = v20;
  v3[41] = sub_19754(v20);
  uint64_t v21 = sub_26B0(&qword_D43F8);
  v3[42] = sub_250D0(*(void *)(v21 - 8));
  v3[43] = sub_19884();
  sub_19840();
  return sub_1988C();
}

uint64_t sub_41320()
{
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v8 = sub_45CC0();
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL);
  v40(v1, v6, v8);
  sub_45B10(v1);
  sub_449F8(v1, v2);
  uint64_t v9 = sub_45114(v7 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_failureReason, v0 + 96, 33LL);
  sub_4526C(v9, v10, &qword_D43F8);
  sub_45520();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for ActivityType.failed(_:), v5);
  if (qword_D3038 != -1) {
    swift_once(&qword_D3038, sub_39160);
  }
  uint64_t v12 = *(void *)(v0 + 296);
  uint64_t v11 = *(void *)(v0 + 304);
  uint64_t v13 = *(void *)(v0 + 280);
  uint64_t v14 = sub_26F0(*(void *)(v0 + 288), (uint64_t)qword_D8208);
  sub_174B8(v11, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
  uint64_t v15 = enum case for SiriKitReliabilityCodes.genericError(_:);
  uint64_t v16 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(v13, v15, v16);
  sub_45B20(v13);
  if (qword_D3040 != -1) {
    swift_once(&qword_D3040, sub_3917C);
  }
  uint64_t v17 = *(void *)(v0 + 344);
  uint64_t v18 = *(void *)(v0 + 328);
  uint64_t v19 = *(void *)(v0 + 304);
  uint64_t v37 = *(void *)(v0 + 320);
  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v21 = *(void *)(v0 + 272);
  uint64_t v22 = *(void *)(v0 + 280);
  uint64_t v35 = *(void *)(v0 + 288);
  uint64_t v36 = *(void *)(v0 + 232);
  uint64_t v38 = *(void *)(v0 + 224);
  uint64_t v39 = *(void *)(v0 + 240);
  uint64_t v23 = *(void *)(v0 + 128);
  uint64_t v24 = type metadata accessor for SiriTimeEventSender.Attribute(0LL);
  uint64_t v25 = sub_26F0(v24, (uint64_t)qword_D8220);
  sub_16E84(v21, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16LL));
  sub_A40C(v21, 0LL, 1LL, v24);
  v40(v17, v23, v8);
  sub_45B10(v17);
  static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v18, v19, v22, v21, v17);
  sub_44DF4(v17, &qword_D43F8);
  sub_44DF4(v21, &qword_D4400);
  sub_44DF4(v22, &qword_D4408);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v35);
  sub_17AD0(v37);
  (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))( v39,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v38);
  if (qword_D3030 != -1) {
    swift_once(&qword_D3030, sub_39118);
  }
  uint64_t v26 = *(void *)(v0 + 240);
  uint64_t v28 = *(void *)(v0 + 208);
  uint64_t v27 = *(void *)(v0 + 216);
  uint64_t v29 = *(void *)(v0 + 192);
  uint64_t v30 = sub_26F0(*(void *)(v0 + 200), (uint64_t)qword_D4E20);
  *(void *)(v0 + 352) = v30;
  sub_16E84(v27, v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
  uint64_t v31 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v26, v27, v31);
  sub_45974();
  __int128 v32 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v0 + 360) = v32;
  *(void *)(v0 + 376) = sub_80B4((void *)(v0 + 16), v32);
  type metadata accessor for AlarmBaseCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  *(void *)(v0 + 384) = CATWrapper.__allocating_init(options:globals:)(v29, 0LL);
  uint64_t v33 = (void *)swift_task_alloc(dword_D7694);
  *(void *)(v0 + 392) = v33;
  *uint64_t v33 = v0;
  v33[1] = sub_41690;
  return sub_90A48();
}

uint64_t sub_41690(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v8 = v4;
  uint64_t v5 = v4[48];
  sub_1996C(&v8);
  v4[50] = v1;
  swift_task_dealloc(v6);
  swift_release(v5);
  if (!v1) {
    v4[51] = a1;
  }
  sub_19840();
  return sub_197B8();
}

uint64_t sub_41700()
{
  uint64_t v1 = static DialogPhase.error.getter();
  NLContextUpdate.init()(v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  v0[52] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_41784;
  return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v0 + 7,  v0[23],  v0[20],  v0[33],  0LL);
}

uint64_t sub_41784()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v15 = v2;
  uint64_t v3 = (void *)v2[51];
  uint64_t v5 = v2[22];
  uint64_t v4 = v2[23];
  uint64_t v7 = v2[20];
  uint64_t v6 = v2[21];
  uint64_t v8 = v2[19];
  sub_1996C(&v15);
  v2[53] = v0;
  swift_task_dealloc(v9);

  sub_1702C(v7, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    sub_19840();
    return swift_task_switch(v10, v11, v12);
  }

  else
  {
    uint64_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
    v2[54] = v14;
    void *v14 = v1;
    v14[1] = sub_41874;
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v2 + 7, v2[45], v2[46]);
  }

uint64_t sub_41874()
{
  uint64_t v2 = (void *)(v1 + 56);
  sub_459FC();
  *(void *)(v3 + 440) = v0;
  swift_task_dealloc(v4);
  _s20HandleIntentStrategyVwxx_1(v2);
  sub_19840();
  return sub_197B8();
}

#error "41930: call analysis failed (funcsize=29)"
#error "419DC: call analysis failed (funcsize=41)"
#error "41A88: call analysis failed (funcsize=41)"
#error "41B34: call analysis failed (funcsize=41)"
uint64_t sub_41B48()
{
  uint64_t v0;
  uint64_t v1;
  *(void *)(v1 + 24) = v0;
  return sub_2D94C((uint64_t)sub_41B58);
}

uint64_t sub_41B58()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 32) = v1;
  sub_26B0(&qword_D4D88);
  *uint64_t v1 = v0;
  v1[1] = sub_41BE4;
  sub_19840();
  return sub_456FC();
}

uint64_t sub_41BE4()
{
  return sub_1988C();
}

uint64_t sub_41C20(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v22 = sub_26B0(&qword_D5078);
  uint64_t v3 = *(void *)(v22 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v22);
  uint64_t v5 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AlarmSearch(0LL);
  id v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v9));
  id v11 = sub_1D5F8(0LL, 0LL, 0LL, 0xE000000000000000LL);
  uint64_t v12 = static os_signpost_type_t.begin.getter(v11);
  uint64_t v13 = *(void *)(a2 + 40);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v12, &dword_0, v13, "UndoChangeStatusFlowSearchAlarms", 32LL, 2LL, v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_4698(a2 + 48, (uint64_t)v24);
  uint64_t v14 = v25;
  uint64_t v21 = v26;
  sub_80B4(v24, v25);
  uint64_t v15 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v23,  v22);
  uint64_t v16 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  uint64_t v18 = swift_allocObject(&unk_CBF68, v17 + v4, v16 | 7);
  *(void *)(v18 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))( v18 + v17,  (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v15);
  id v19 = v11;
  swift_retain(a2);
  dispatch thunk of SiriAlarmManager.searchAlarms(alarmSearch:completion:)(v11, sub_44DAC, v18, v14, v21);

  swift_release(v18);
  return _s20HandleIntentStrategyVwxx_1(v24);
}

void sub_41E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D4608);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = static os_signpost_type_t.end.getter(v9);
  uint64_t v13 = *(void *)(a2 + 40);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v12, &dword_0, v13, "UndoChangeStatusFlowSearchAlarms", 32LL, 2LL, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_44CFC(a1, (uint64_t)v6, &qword_D4608);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    if (qword_D3030 != -1) {
      swift_once(&qword_D3030, sub_39118);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_26F0(v14, (uint64_t)qword_D4E20);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v15, v16, v17, v18, v19, v20, v21, v22);
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "No alarms are available...", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    uint64_t v42 = _swiftEmptyArrayStorage;
    uint64_t v26 = sub_26B0(&qword_D5078);
    CheckedContinuation.resume(returning:)(&v42, v26);
    sub_44DF4((uint64_t)v6, &qword_D4608);
  }

  else
  {
    uint64_t v27 = (void *)*v6;
    if (qword_D3030 != -1) {
      swift_once(&qword_D3030, sub_39118);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_26F0(v28, (uint64_t)qword_D4E20);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v29, v30, v31, v32, v33, v34, v35, v36);
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_0, v37, v38, "found all alarms.", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    uint64_t v42 = v27;
    uint64_t v40 = sub_26B0(&qword_D5078);
    CheckedContinuation.resume(returning:)(&v42, v40);
  }

uint64_t sub_420FC(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return sub_2D94C((uint64_t)sub_4210C);
}

uint64_t sub_4210C()
{
  uint64_t v1 = (int8x16_t *)sub_45C1C();
  sub_45B74(v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  sub_26B0(&qword_D4D88);
  *uint64_t v2 = v0;
  v2[1] = sub_42194;
  sub_45CE0();
  sub_19840();
  return sub_45884();
}

uint64_t sub_42194()
{
  return sub_1988C();
}

uint64_t sub_421D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  uint64_t v22 = a3;
  uint64_t v4 = sub_26B0(&qword_D5078);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = static os_signpost_type_t.begin.getter(v9);
  uint64_t v13 = *(void *)(a2 + 40);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v12, &dword_0, v13, "UndoChangeStatusFlowEnableAlarms", 32LL, 2LL, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_4698(a2 + 48, (uint64_t)v23);
  uint64_t v14 = v24;
  uint64_t v15 = v25;
  sub_80B4(v23, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v21,  v4);
  uint64_t v16 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  uint64_t v18 = swift_allocObject(&unk_CBF18, v17 + v6, v16 | 7);
  *(void *)(v18 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v18 + v17,  (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  swift_retain(a2);
  dispatch thunk of SiriAlarmManager.enableAlarms(alarms:completion:)(v22, sub_44C5C, v18, v14, v15);
  swift_release(v18);
  return _s20HandleIntentStrategyVwxx_1(v23);
}

uint64_t sub_42388(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return sub_2D94C((uint64_t)sub_42398);
}

uint64_t sub_42398()
{
  uint64_t v1 = (int8x16_t *)sub_45C1C();
  sub_45B74(v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  sub_26B0(&qword_D4D88);
  *uint64_t v2 = v0;
  v2[1] = sub_42418;
  sub_45CE0();
  sub_45C58();
  return sub_45884();
}

uint64_t sub_42418()
{
  return sub_1988C();
}

uint64_t sub_42458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  uint64_t v22 = a3;
  uint64_t v4 = sub_26B0(&qword_D5078);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = static os_signpost_type_t.begin.getter(v9);
  uint64_t v13 = *(void *)(a2 + 40);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v12, &dword_0, v13, "UndoChangeStatusFlowDisableAlarms", 33LL, 2LL, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_4698(a2 + 48, (uint64_t)v23);
  uint64_t v14 = v24;
  uint64_t v15 = v25;
  sub_80B4(v23, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v21,  v4);
  uint64_t v16 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  uint64_t v18 = swift_allocObject(&unk_CBF40, v17 + v6, v16 | 7);
  *(void *)(v18 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v18 + v17,  (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  swift_retain(a2);
  dispatch thunk of SiriAlarmManager.disableAlarms(alarms:completion:)(v22, sub_44C90, v18, v14, v15);
  swift_release(v18);
  return _s20HandleIntentStrategyVwxx_1(v23);
}

uint64_t sub_42608( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  char v48 = a6;
  uint64_t v49 = a7;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v53 = a1;
  uint64_t v54 = a3;
  uint64_t v9 = type metadata accessor for AlarmOperationError(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_16B08();
  uint64_t v50 = v11;
  sub_16AF0();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = (os_log_s *)sub_26B0(&qword_D4608);
  sub_215E4();
  __chkstk_darwin(v16);
  sub_45AD0();
  uint64_t v17 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_17390();
  uint64_t v21 = v20 - v19;
  uint64_t v23 = (uint8_t *)static os_signpost_type_t.end.getter(v22);
  uint64_t v24 = *(void *)(a2 + 40);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v23, &dword_0, v24, v51, v52, 2LL, v21);
  sub_1704C(v21, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
  sub_44CFC(v53, (uint64_t)v7, &qword_D4608);
  if (swift_getEnumCaseMultiPayload(v7, v15) == 1)
  {
    uint64_t v25 = *(void (**)(char *, uint64_t *, uint64_t))(v10 + 32);
    v25(v14, v7, v9);
    uint64_t v26 = v9;
    uint64_t v27 = v10;
    if (qword_D3030 != -1) {
      swift_once(&qword_D3030, sub_39118);
    }
    uint64_t v28 = sub_16C80();
    sub_26F0(v28, (uint64_t)qword_D4E20);
    sub_16D50();
    os_log_type_t v29 = sub_16B4C();
    if (sub_16ACC(v29))
    {
      uint64_t v30 = (_WORD *)sub_1EFA4();
      sub_16BEC(v30);
      sub_16B44(&dword_0, v15, (os_log_type_t)v9, v49, v23);
      sub_16AA8((uint64_t)v23);
    }

    v55[0] = _swiftEmptyArrayStorage;
    uint64_t v31 = sub_26B0(&qword_D5078);
    sub_45AE8(v31);
    uint64_t v32 = type metadata accessor for ABCReport(0LL);
    v55[3] = v32;
    v55[4] = &protocol witness table for ABCReport;
    uint64_t v33 = sub_19558(v55);
    uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    uint64_t v35 = v50;
    sub_17620(v50, (uint64_t)v14, v34);
    sub_16A6C( &qword_D4600,  (uint64_t (*)(uint64_t))&type metadata accessor for AlarmOperationError,  (uint64_t)&protocol conformance descriptor for AlarmOperationError);
    uint64_t v37 = swift_allocError(v26, v36, 0LL, 0LL);
    v25(v38, (uint64_t *)v35, v26);
    *uint64_t v33 = _convertErrorToNSError(_:)(v37);
    uint64_t v39 = enum case for ErrorSubType.managerReturnedError(_:);
    type metadata accessor for ErrorSubType(0LL);
    uint64_t v40 = sub_45BD4();
    v41(v40, v39);
    (*(void (**)(void *, void, uint64_t))(*(void *)(v32 - 8) + 104LL))( v33,  enum case for ABCReport.alarmUndoHandle(_:),  v32);
    static BarbaraWalters.stopThePresses(for:)(v55);
    sub_1704C((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
    _s20HandleIntentStrategyVwxx_1(v55);
    return sub_45030();
  }

  else
  {
    uint64_t v43 = *v7;
    if (qword_D3030 != -1) {
      swift_once(&qword_D3030, sub_39118);
    }
    uint64_t v44 = sub_16C80();
    sub_26F0(v44, (uint64_t)qword_D4E20);
    sub_16D50();
    os_log_type_t v45 = sub_16B4C();
    if (sub_16ACC(v45))
    {
      uint64_t v46 = (_WORD *)sub_1EFA4();
      sub_16BEC(v46);
      sub_16B44(&dword_0, v15, (os_log_type_t)v9, v48, v23);
      sub_16AA8((uint64_t)v23);
    }

    v55[0] = v43;
    uint64_t v47 = sub_26B0(&qword_D5078);
    return sub_45AE8(v47);
  }

uint64_t sub_42988()
{
  *(void *)(v1 + 24) = v0;
  return sub_2D94C((uint64_t)sub_42998);
}

uint64_t sub_42998()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 32) = v1;
  sub_26B0(&qword_D5058);
  *uint64_t v1 = v0;
  v1[1] = sub_42A10;
  sub_45CE0();
  sub_45C58();
  return sub_456FC();
}

uint64_t sub_42A10()
{
  return sub_1988C();
}

uint64_t sub_42A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v3 = sub_26B0(&qword_D5060);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = static os_signpost_type_t.begin.getter(v8);
  uint64_t v12 = *(void *)(a2 + 40);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v11,  &dword_0,  v12,  "UndoChangeStatusFlowEnableNextWakeUpAlarm",  41LL,  2LL,  v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_4698(a2 + 48, (uint64_t)v20);
  uint64_t v13 = v21;
  uint64_t v14 = v22;
  sub_80B4(v20, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)&v20[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v19,  v3);
  uint64_t v15 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = (v15 + 24) & ~v15;
  uint64_t v17 = swift_allocObject(&unk_CBE78, v16 + v5, v15 | 7);
  *(void *)(v17 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v17 + v16,  (char *)&v20[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3);
  swift_retain(a2);
  dispatch thunk of SiriAlarmManager.enableNextWakeUpAlarm(completion:)(sub_44BCC, v17, v13, v14);
  swift_release(v17);
  return _s20HandleIntentStrategyVwxx_1(v20);
}

void sub_42BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = a3;
  uint64_t v45 = sub_26B0(&qword_D5060);
  uint64_t v5 = *(void *)(v45 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v45);
  uint64_t v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_26B0(&qword_D5068);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = static os_signpost_type_t.end.getter(v12);
  uint64_t v43 = a2;
  uint64_t v16 = *(void *)(a2 + 40);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v15,  &dword_0,  v16,  "UndoChangeStatusFlowEnableNextWakeUpAlarm",  41LL,  2LL,  v14);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v14, v10);
  sub_44CFC(a1, (uint64_t)v9, &qword_D5068);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v19 = v45;
    if (qword_D3030 != -1) {
      swift_once(&qword_D3030, sub_39118);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_26F0(v20, (uint64_t)qword_D4E20);
    os_log_type_t v29 = (os_log_s *)Logger.logObject.getter(v21, v22, v23, v24, v25, v26, v27, v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_0, v29, v30, "Failed to enable sleep alarm.", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    v46[0] = 0LL;
    CheckedContinuation.resume(returning:)(v46, v19);
    sub_44DF4((uint64_t)v9, &qword_D5068);
  }

  else
  {
    uint64_t v32 = static os_signpost_type_t.begin.getter(EnumCaseMultiPayload);
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)( v32,  &dword_0,  v16,  "UndoChangeStatusFlowSearchUpcomingSleepAlarm",  44LL,  2LL,  v14);
    v17(v14, v10);
    uint64_t v33 = v43;
    sub_4698(v43 + 48, (uint64_t)v46);
    uint64_t v34 = v47;
    uint64_t v35 = v48;
    sub_80B4(v46, v47);
    uint64_t v36 = v42;
    uint64_t v37 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v42, v44, v45);
    uint64_t v38 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v39 = (v38 + 24) & ~v38;
    uint64_t v40 = swift_allocObject(&unk_CBEA0, v39 + v6, v38 | 7);
    *(void *)(v40 + 16) = v33;
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v40 + v39, v36, v37);
    swift_retain(v33);
    dispatch thunk of SiriAlarmManager.searchUpcomingSleepAlarm(completion:)(sub_44BEC, v40, v34, v35);
    swift_release(v40);
    _s20HandleIntentStrategyVwxx_1(v46);
  }

void sub_42F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D5070);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = static os_signpost_type_t.end.getter(v9);
  uint64_t v13 = *(void *)(a2 + 40);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v12,  &dword_0,  v13,  "UndoChangeStatusFlowSearchUpcomingSleepAlarm",  44LL,  2LL,  v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_44CFC(a1, (uint64_t)v6, &qword_D5070);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    if (qword_D3030 != -1) {
      swift_once(&qword_D3030, sub_39118);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_26F0(v14, (uint64_t)qword_D4E20);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v15, v16, v17, v18, v19, v20, v21, v22);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "Failed to retrieve new sleep alarm after enabling.", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    uint64_t v29 = 0LL;
    uint64_t v26 = sub_26B0(&qword_D5060);
    CheckedContinuation.resume(returning:)(&v29, v26);
    sub_44DF4((uint64_t)v6, &qword_D5070);
  }

  else
  {
    uint64_t v29 = *v6;
    uint64_t v27 = sub_26B0(&qword_D5060);
    CheckedContinuation.resume(returning:)(&v29, v27);
  }

uint64_t sub_43170()
{
  *(void *)(v1 + 24) = v0;
  return sub_2D94C((uint64_t)sub_43180);
}

uint64_t sub_43180()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 32) = v1;
  sub_26B0(&qword_D5058);
  *uint64_t v1 = v0;
  v1[1] = sub_41BE4;
  sub_45CE0();
  sub_19840();
  return sub_456FC();
}

uint64_t sub_43200(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v3 = sub_26B0(&qword_D5060);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = static os_signpost_type_t.begin.getter(v8);
  uint64_t v12 = *(void *)(a2 + 40);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v11,  &dword_0,  v12,  "UndoChangeStatusFlowDisableNextWakeUpAlarm",  42LL,  2LL,  v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_4698(a2 + 48, (uint64_t)v20);
  uint64_t v13 = v21;
  uint64_t v14 = v22;
  sub_80B4(v20, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)&v20[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v19,  v3);
  uint64_t v15 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = (v15 + 24) & ~v15;
  uint64_t v17 = swift_allocObject(&unk_CBEC8, v16 + v5, v15 | 7);
  *(void *)(v17 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v17 + v16,  (char *)&v20[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3);
  swift_retain(a2);
  dispatch thunk of SiriAlarmManager.disableNextWakeUpAlarm(completion:)(sub_44C14, v17, v13, v14);
  swift_release(v17);
  return _s20HandleIntentStrategyVwxx_1(v20);
}

void sub_433AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = a3;
  uint64_t v45 = sub_26B0(&qword_D5060);
  uint64_t v5 = *(void *)(v45 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v45);
  uint64_t v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_26B0(&qword_D5068);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = static os_signpost_type_t.end.getter(v12);
  uint64_t v43 = a2;
  uint64_t v16 = *(void *)(a2 + 40);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v15,  &dword_0,  v16,  "UndoChangeStatusFlowDisableNextWakeUpAlarm",  42LL,  2LL,  v14);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v14, v10);
  sub_44CFC(a1, (uint64_t)v9, &qword_D5068);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v19 = v45;
    if (qword_D3030 != -1) {
      swift_once(&qword_D3030, sub_39118);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_26F0(v20, (uint64_t)qword_D4E20);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v21, v22, v23, v24, v25, v26, v27, v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_0, v29, v30, "Failed to disable sleep alarm.", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    v46[0] = 0LL;
    CheckedContinuation.resume(returning:)(v46, v19);
    sub_44DF4((uint64_t)v9, &qword_D5068);
  }

  else
  {
    uint64_t v32 = static os_signpost_type_t.begin.getter(EnumCaseMultiPayload);
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)( v32,  &dword_0,  v16,  "UndoChangeStatusFlowSearchUpcomingSleepAlarm",  44LL,  2LL,  v14);
    v17(v14, v10);
    uint64_t v33 = v43;
    sub_4698(v43 + 48, (uint64_t)v46);
    uint64_t v34 = v47;
    uint64_t v35 = v48;
    sub_80B4(v46, v47);
    uint64_t v36 = v42;
    uint64_t v37 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v42, v44, v45);
    uint64_t v38 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v39 = (v38 + 24) & ~v38;
    uint64_t v40 = swift_allocObject(&unk_CBEF0, v39 + v6, v38 | 7);
    *(void *)(v40 + 16) = v33;
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v40 + v39, v36, v37);
    swift_retain(v33);
    dispatch thunk of SiriAlarmManager.searchUpcomingSleepAlarm(completion:)(sub_44C34, v40, v34, v35);
    swift_release(v40);
    _s20HandleIntentStrategyVwxx_1(v46);
  }

void sub_436EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D5070);
  __chkstk_darwin(v4);
  uint64_t v6 = (void **)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = static os_signpost_type_t.end.getter(v9);
  uint64_t v13 = *(void *)(a2 + 40);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v12,  &dword_0,  v13,  "UndoChangeStatusFlowSearchUpcomingSleepAlarm",  44LL,  2LL,  v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_44CFC(a1, (uint64_t)v6, &qword_D5070);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    if (qword_D3030 != -1) {
      swift_once(&qword_D3030, sub_39118);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_26F0(v14, (uint64_t)qword_D4E20);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v15, v16, v17, v18, v19, v20, v21, v22);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "Failed to retrieve new sleep alarm after disabling.", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    uint64_t v46 = 0LL;
    uint64_t v26 = sub_26B0(&qword_D5060);
    CheckedContinuation.resume(returning:)(&v46, v26);
    sub_44DF4((uint64_t)v6, &qword_D5070);
  }

  else
  {
    uint64_t v27 = *v6;
    if (qword_D3030 != -1) {
      swift_once(&qword_D3030, sub_39118);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_26F0(v28, (uint64_t)qword_D4E20);
    id v29 = v27;
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v29, v30, v31, v32, v33, v34, v35, v36);
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      uint64_t v46 = v40;
      *(_DWORD *)uint64_t v39 = 136315138;
      if (v27 && (uint64_t v41 = sub_4AD44(v29), v42))
      {
        unint64_t v43 = v42;
      }

      else
      {
        swift_bridgeObjectRelease(0LL);
        uint64_t v41 = 0LL;
        unint64_t v43 = 0xE000000000000000LL;
      }

      uint64_t v45 = sub_3D10(v41, v43, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v39 + 4, v39 + 12);

      swift_bridgeObjectRelease(v43);
      _os_log_impl(&dword_0, v37, v38, "Found next sleep alarm %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v46 = (uint64_t)v27;
    uint64_t v44 = sub_26B0(&qword_D5060);
    CheckedContinuation.resume(returning:)(&v46, v44);
  }

void UndoChangeStatusFlow.deinit()
{
  _s20HandleIntentStrategyVwxx_1((void *)(v0 + 48));
  uint64_t v1 = sub_45B54();
  sub_17AD0(*(void *)(v1 - 8));
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_alarmIds));
  sub_44DF4(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_followupPluginAction, &qword_D43E0);
  sub_44DF4(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_failureReason, &qword_D43F8);
  sub_17B50();
}

uint64_t UndoChangeStatusFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_43B54()
{
  return UndoChangeStatusFlow.on(input:)() & 1;
}

void sub_43B78(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_43B98(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_D4E54);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_24D34;
  return UndoChangeStatusFlow.execute()(a1);
}

uint64_t sub_43BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UndoChangeStatusFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_43C14(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_43C48(uint64_t result)
{
  unint64_t v2 = *(void *)((char *)&dword_18 + (*v1 & 0xFFFFFFFFFFFFF8LL));
  return result;
}

void sub_43C74(uint64_t a1)
{
  unint64_t v2 = *(void *)(*v1 + 24);
  if (a1 + 1 > (uint64_t)(v2 >> 1))
  {
    sub_6C8F0(v2 > 1, a1 + 1, 1, *v1);
    *uint64_t v1 = v3;
  }

uint64_t sub_43CB0(uint64_t (*a1)(void))
{
  return a1();
}

void sub_43CD0(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v8 = sub_3D10(v6, v7, a3);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 8;
  uint64_t v11 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v9, v10);
  sub_16C48();
  *a1 = v10;
  sub_AAEC();
}

void *sub_43D30(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_43DF4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_26B0(&qword_D5088);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  void v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_43E58(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_26B0(&qword_D5088);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_43FF0(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_43F2C(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_43F2C(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *sub_43FF0(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

_BYTE **sub_44070(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  char v4 = *result;
  _BYTE *v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

unint64_t sub_44084(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL)) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_440A8(uint64_t a1)
{
  return sub_441B0(a1, (uint64_t)sub_7B6AC, (uint64_t)&unk_D5098, (uint64_t)&unk_D5090, (uint64_t *)sub_44544);
}

void sub_440CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v8 = v4 + v2;
    }
    else {
      uint64_t v8 = v4;
    }
    uint64_t v3 = sub_6C9BC(isUniquelyReferenced_nonNull_native, v8, 1, v3);
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = type metadata accessor for DisplayHint(0LL);
  if (v10 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  sub_7B818(a1 + v13, v2, v3 + v13 + *(void *)(v12 + 72) * v9);
  if (!v2)
  {
LABEL_14:
    sub_16D58();
    *uint64_t v1 = v3;
    sub_214A4();
    return;
  }

  uint64_t v14 = *(void *)(v3 + 16);
  BOOL v15 = __OFADD__(v14, v2);
  uint64_t v16 = v14 + v2;
  if (!v15)
  {
    *(void *)(v3 + 16) = v16;
    goto LABEL_14;
  }

LABEL_18:
  __break(1u);
}

  static AlarmRepeatScheduleConstants.thursday.getter();
  sub_51ED0();
  sub_51EA0();
  if (v3) {
    sub_51E54(v6);
  }
  sub_51E80();
  sub_51EEC();
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  swift_release(v36);
LABEL_19:
  sub_16CB0();
}

uint64_t sub_441B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (v11 >> 62)
  {
    if (v9 < 0) {
      uint64_t v28 = v9;
    }
    else {
      uint64_t v28 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v9);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v13 = *v5;
  if ((unint64_t)*v5 >> 62)
  {
    if (v13 < 0) {
      uint64_t v29 = *v5;
    }
    else {
      uint64_t v29 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_4596C();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v29);
    sub_16D68();
  }

  else
  {
    uint64_t v14 = *(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v15 = v14 + v12;
  if (__OFADD__(v14, v12))
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v13 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *uint64_t v5 = v13;
  uint64_t v14 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v13 & 0x8000000000000000LL) == 0
    && (v13 & 0x4000000000000000LL) == 0)
  {
    uint64_t v17 = v13 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v14 = 1LL;
  }

  uint64_t v31 = v12;
  uint64_t v12 = (uint64_t)v8;
  uint64_t v8 = v7;
  int64_t v7 = (unint64_t *)v6;
  unint64_t v6 = a5;
  uint64_t v18 = *(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    if (v18 <= v15) {
      uint64_t v18 = v15;
    }
    sub_4596C();
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v14,  v18,  1LL,  v13);
    swift_bridgeObjectRelease(*v5);
    *uint64_t v5 = v13;
    uint64_t v17 = v13 & 0xFFFFFFFFFFFFFF8LL;
    a5 = v6;
    unint64_t v6 = (uint64_t *)v7;
    int64_t v7 = v8;
    uint64_t v8 = (unint64_t *)v12;
    uint64_t v12 = v31;
LABEL_16:
    uint64_t result = sub_4439C( v17 + 8LL * *(void *)(v17 + 16) + 32,  (*(void *)(v17 + 24) >> 1) - *(void *)(v17 + 16),  v9,  (void (*)(uint64_t, void, uint64_t))v8,  v7,  v6,  (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v20 >= v12) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v13 < 0) {
      uint64_t v30 = v13;
    }
    else {
      uint64_t v30 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_4596C();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v30);
    sub_16D68();
  }

  if (v20 < 1) {
    goto LABEL_20;
  }
  uint64_t v21 = *(void *)((char *)&dword_10 + (*v5 & 0xFFFFFFFFFFFFFF8LL));
  BOOL v22 = __OFADD__(v21, v20);
  uint64_t v23 = v21 + v20;
  if (!v22)
  {
    *(void *)((char *)&dword_10 + (*v5 & 0xFFFFFFFFFFFFFF8LL)) = v23;
LABEL_20:
    uint64_t v24 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v24, v25, v26, v27);
  }

  __break(1u);
  return result;
}

uint64_t sub_4439C( uint64_t result, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, void, uint64_t), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = result;
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    sub_16FD0();
    uint64_t v15 = sub_45644();
    uint64_t result = sub_16D58();
    if (!v15) {
      return a3;
    }
  }

  else
  {
    uint64_t v15 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
    if (!v15) {
      return a3;
    }
  }

  if (v13)
  {
    if (v14)
    {
      sub_16FD0();
      uint64_t v16 = sub_45C6C();
      uint64_t result = sub_16D58();
      if (v16 <= a2)
      {
        if (v15 >= 1)
        {
          sub_44E1C(a5, a6);
          uint64_t v18 = v17;
          sub_16FD0();
          for (uint64_t i = 0LL; i != v15; ++i)
          {
            uint64_t v20 = sub_26B0(a6);
            uint64_t v21 = (void (*)(_BYTE *, void))a7(v24, i, a3, v20, v18);
            id v23 = *v22;
            v21(v24, 0LL);
            *(void *)(v13 + 8 * i) = v23;
          }

          sub_16D58();
          return a3;
        }

        goto LABEL_16;
      }
    }

    else
    {
      if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL)) <= a2)
      {
        a4((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL)), v13);
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_16:
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_44510()
{
  uint64_t v1 = sub_45998();
  uint64_t v2 = sub_45C30((uint64_t)v1);
  sub_445A0(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  sub_1D738();
}

void sub_44544()
{
  uint64_t v1 = sub_45998();
  uint64_t v2 = sub_45C30((uint64_t)v1);
  sub_445E8(v2, v3, v4);
  *(void *)(v0 + 32) = v5;
  sub_1D738();
}

void sub_44574(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void sub_445A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (v6) {
    uint64_t v7 = sub_45D10();
  }
  else {
    uint64_t v7 = (uint64_t)sub_455EC(v4 + 8 * v5);
  }
  *unint64_t v3 = v7;
  sub_1D738();
}

void sub_445E0(id *a1)
{
}

void sub_445E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (v6) {
    uint64_t v7 = sub_45D10();
  }
  else {
    uint64_t v7 = (uint64_t)sub_455EC(v4 + 8 * v5);
  }
  *unint64_t v3 = v7;
  sub_1D738();
}

void *sub_44628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  int64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UndoChangeStatusFlow(0LL);
  unint64_t v11 = (void *)swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  uint64_t v12 = sub_4480C((uint64_t)v9, v11, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return v12;
}

void *sub_446E4(uint64_t a1, void *a2)
{
  uint64_t v11 = type metadata accessor for SiriAlarmManagerImpl(0LL);
  uint64_t v12 = &protocol witness table for SiriAlarmManagerImpl;
  *(void *)&__int128 v10 = a1;
  type metadata accessor for ChangeAlarmStatusCATs_Async(0LL);
  sub_2D2C4();
  a2[2] = sub_2D278();
  type metadata accessor for ChangeAlarmStatusCATPatternsExecutor(0LL);
  sub_2D2C4();
  a2[3] = sub_2D278();
  type metadata accessor for ModifyAllCATPatternsExecutor(0LL);
  sub_2D2C4();
  a2[4] = sub_2D278();
  a2[5] = _s15AlarmFlowPlugin021RecreateDeletedAlarmsB0C11osLogObject33_DB4DDA2311F8F0836B4CA98F718F999FLLSo03OS_G4_logCvpfi_0();
  uint64_t v4 = enum case for AlarmNLv4Constants.AlarmVerb.enable(_:);
  sub_45B54();
  uint64_t v5 = sub_45BD4();
  v6(v5, v4);
  *(void *)((char *)a2 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_alarmIds) = &_swiftEmptyArrayStorage;
  uint64_t v7 = type metadata accessor for PluginAction(0LL);
  sub_45A08(v7);
  uint64_t v8 = sub_45CC0();
  sub_45A08(v8);
  sub_46FC(&v10, (uint64_t)(a2 + 6));
  return a2;
}

void *sub_4480C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v8);
  __int128 v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v11 = sub_19558(&v21);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))(v11, a1, a3);
  type metadata accessor for ChangeAlarmStatusCATs_Async(0LL);
  static CATOption.defaultMode.getter();
  a2[2] = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  type metadata accessor for ChangeAlarmStatusCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  a2[3] = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  type metadata accessor for ModifyAllCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  a2[4] = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  a2[5] = _s15AlarmFlowPlugin021RecreateDeletedAlarmsB0C11osLogObject33_DB4DDA2311F8F0836B4CA98F718F999FLLSo03OS_G4_logCvpfi_0();
  uint64_t v12 = (char *)a2 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_operation;
  uint64_t v13 = enum case for AlarmNLv4Constants.AlarmVerb.enable(_:);
  uint64_t v14 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104LL))(v12, v13, v14);
  *(void *)((char *)a2 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_alarmIds) = _swiftEmptyArrayStorage;
  uint64_t v15 = (uint64_t)a2 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_followupPluginAction;
  uint64_t v16 = type metadata accessor for PluginAction(0LL);
  sub_A40C(v15, 1LL, 1LL, v16);
  uint64_t v17 = (uint64_t)a2 + OBJC_IVAR____TtC15AlarmFlowPlugin20UndoChangeStatusFlow_failureReason;
  uint64_t v18 = type metadata accessor for SiriTimeEventSender.ReasonDescription(0LL);
  sub_A40C(v17, 1LL, 1LL, v18);
  sub_46FC(&v21, (uint64_t)(a2 + 6));
  return a2;
}

uint64_t type metadata accessor for UndoChangeStatusFlow(uint64_t a1)
{
  uint64_t result = qword_D4EC8;
  if (!qword_D4EC8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UndoChangeStatusFlow);
  }
  return result;
}

uint64_t sub_449F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D43F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_44A40(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_45B00(a1, a2, a3);
  sub_45CEC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL));
  sub_17B50();
}

uint64_t sub_44A6C()
{
  return type metadata accessor for UndoChangeStatusFlow(0LL);
}

void sub_44A74(uint64_t a1)
{
  v8[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[4] = "(";
  uint64_t v2 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(319LL);
  if (v3 <= 0x3F)
  {
    v8[5] = *(void *)(v2 - 8) + 64LL;
    v8[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_44B6C( 319LL,  (unint64_t *)&qword_D4470,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction);
    if (v5 <= 0x3F)
    {
      v8[7] = *(void *)(v4 - 8) + 64LL;
      sub_44B6C( 319LL,  (unint64_t *)&unk_D4ED8,  (uint64_t (*)(uint64_t))&type metadata accessor for SiriTimeEventSender.ReasonDescription);
      if (v7 <= 0x3F)
      {
        v8[8] = *(void *)(v6 - 8) + 64LL;
        swift_updateClassMetadata2(a1, 256LL, 9LL, v8, a1 + 80);
      }
    }
  }

void sub_44B6C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_44BB8(uint64_t a1)
{
  return sub_42A4C(a1, v1);
}

uint64_t sub_44BC0()
{
  return sub_44D3C(&qword_D5060);
}

uint64_t sub_44BCC(uint64_t a1)
{
  return sub_44DC0(a1, &qword_D5060, (uint64_t (*)(uint64_t))sub_42BF8);
}

uint64_t sub_44BE0()
{
  return sub_44D3C(&qword_D5060);
}

uint64_t sub_44BEC(uint64_t a1)
{
  return sub_44DC0(a1, &qword_D5060, (uint64_t (*)(uint64_t))sub_42F38);
}

uint64_t sub_44C00(uint64_t a1)
{
  return sub_43200(a1, v1);
}

uint64_t sub_44C08()
{
  return sub_44D3C(&qword_D5060);
}

uint64_t sub_44C14(uint64_t a1)
{
  return sub_44DC0(a1, &qword_D5060, (uint64_t (*)(uint64_t))sub_433AC);
}

uint64_t sub_44C28()
{
  return sub_44D3C(&qword_D5060);
}

uint64_t sub_44C34(uint64_t a1)
{
  return sub_44DC0(a1, &qword_D5060, (uint64_t (*)(uint64_t))sub_436EC);
}

uint64_t sub_44C48(uint64_t a1)
{
  return sub_421D8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_44C50()
{
  return sub_44D3C(&qword_D5078);
}

void sub_44C5C(uint64_t a1)
{
}

uint64_t sub_44C7C(uint64_t a1)
{
  return sub_42458(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_44C84()
{
  return sub_44D3C(&qword_D5078);
}

void sub_44C90(uint64_t a1)
{
}

void sub_44CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void sub_44CFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_45B00(a1, a2, a3);
  sub_45CEC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_17B50();
}

uint64_t sub_44D28(uint64_t a1)
{
  return sub_41C20(a1, v1);
}

uint64_t sub_44D30()
{
  return sub_44D3C(&qword_D5078);
}

uint64_t sub_44D3C(uint64_t *a1)
{
  uint64_t v2 = sub_26B0(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_release(*(void *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_44DAC(uint64_t a1)
{
  return sub_44DC0(a1, &qword_D5078, (uint64_t (*)(uint64_t))sub_41E10);
}

uint64_t sub_44DC0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  return a3(v3);
}

void sub_44DF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_45CF8(a1, a2);
  sub_17AD0(*(void *)(v2 - 8));
  sub_17B50();
}

void sub_44E1C(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_16974(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }

  sub_17B50();
}

uint64_t sub_44E64()
{
  uint64_t v2 = *(void *)(v0 + 1032);
  *(void *)(v1 - 88) = *(void *)(v0 + 688);
  return swift_task_dealloc(v2);
}

uint64_t sub_44EE8()
{
  uint64_t v2 = v0[129];
  uint64_t v3 = v0[86];
  *(void *)(v1 - 88) = v0[89];
  *(void *)(v1 - 80) = v3;
  return swift_task_dealloc(v2);
}

uint64_t sub_44F68(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_44F84()
{
  uint64_t v2 = v0[89];
  uint64_t v3 = v0[88];
  uint64_t v4 = v0[87];
  uint64_t v5 = v0[86];
  *(void *)(v1 - 88) = v0[85];
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v5, v4);
}

uint64_t sub_44FB4(uint64_t a1)
{
  return sub_16880(a1, 1LL, v1);
}

uint64_t sub_44FE0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_44FF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, a2, v3);
}

uint64_t sub_45008()
{
  return sub_449F8(v0, v1);
}

uint64_t sub_45030()
{
  return swift_errorRelease(v0);
}

uint64_t sub_45038()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_45048@<X0>(uint64_t a1@<X8>)
{
  return swift_beginAccess(a1 + v1, v2, 0LL, 0LL);
}

uint64_t sub_45060@<X0>(uint64_t a1@<X8>)
{
  return swift_beginAccess(v1 + a1, v2, 33LL, 0LL);
}

  ;
}

uint64_t sub_45094()
{
  return *(void *)(v0 + 688);
}

void sub_450A8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

id sub_450D8@<X0>(int *a1@<X8>)
{
  *(void *)(v2 - 88) = (char *)a1 + *a1;
  return v1;
}

void sub_450EC()
{
}

uint64_t sub_450F4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_45108()
{
  return static ExecuteResponse.redirect(nextPluginAction:)(v0);
}

uint64_t sub_45114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

uint64_t sub_4511C()
{
  return swift_errorRetain(v0);
}

uint64_t sub_45124(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v3, a2, v4);
}

uint64_t sub_45134@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1, v3);
}

uint64_t sub_45144()
{
  return (*(uint64_t (**)(void, void, void))(v0 + 1128))( *(void *)(v0 + 952),  *(void *)(v0 + 672) + *(void *)(v0 + 1120),  *(void *)(v0 + 928));
}

uint64_t sub_4516C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 104))(v2, a1, v3);
}

void sub_4517C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_45190()
{
  return swift_task_alloc(v0);
}

uint64_t sub_4519C@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_451B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_451D4(uint64_t a1, uint64_t a2)
{
  return sub_411CC(a1, a2);
}

uint64_t sub_451F0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_4520C@<X0>(unint64_t a1@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1 + 1, 1LL);
}

void sub_45220()
{
}

void sub_45240(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

  ;
}

uint64_t sub_4525C()
{
  return swift_arrayDestroy(v0, 1LL);
}

void sub_4526C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_45278(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 776) + 8LL))(a1, *(void *)(v1 + 768));
}

void sub_45288()
{
  *(void *)(v2 - 88) = *(void *)(v1 + 672);
}

uint64_t sub_452B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v3, v4, a3);
}

uint64_t sub_452C0(uint64_t a1)
{
  *(void *)(v2 + 584) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v2 + 592, v1, v4);
}

uint64_t sub_452DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

void sub_452EC()
{
}

uint64_t sub_452FC()
{
  return swift_task_dealloc(*(void *)(v0 + 344));
}

uint64_t sub_45328()
{
  return swift_task_dealloc(*(void *)(v0 - 88));
}

uint64_t sub_45330( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return swift_task_dealloc(a21);
}

uint64_t sub_45338( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_task_dealloc(a20);
}

uint64_t sub_45340( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_task_dealloc(a19);
}

uint64_t sub_45348( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_task_dealloc(a18);
}

uint64_t sub_45350( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_task_dealloc(a17);
}

uint64_t sub_45358( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_task_dealloc(a16);
}

uint64_t sub_45360@<X0>(int *a1@<X8>)
{
  uint64_t v2 = a1[1];
  *(void *)(v1 - 80) = (char *)a1 + *a1;
  return swift_task_alloc(v2);
}

void sub_45374()
{
}

uint64_t sub_45384()
{
  return 0LL;
}

uint64_t sub_453B0()
{
  return static ExecuteResponse.complete()();
}

void sub_453B8()
{
}

void sub_453DC(uint64_t a1@<X8>)
{
  *(void *)(v2 - 80) = a1;
}

uint64_t sub_45400()
{
  return ((uint64_t (*)(void))dispatch thunk of OutputPublisherAsync.publish(output:))();
}

uint64_t sub_45410(void *a1)
{
  uint64_t v3 = *(void *)(v2 + 776);
  uint64_t v4 = *(void *)(v2 + 768);
  _s20HandleIntentStrategyVwxx_1(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
}

uint64_t sub_45434(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2, v3);
}

  ;
}

_WORD *sub_45454(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_45460()
{
  return ((uint64_t (*)(void))PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:))();
}

uint64_t sub_4546C(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 664);
}

uint64_t sub_45484@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 1064);
}

uint64_t sub_4549C(uint64_t a1)
{
  return sub_420FC(a1);
}

uint64_t sub_454B8(uint64_t a1)
{
  return sub_42388(a1);
}

uint64_t sub_454D4()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t sub_454E0()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

id sub_454EC()
{
  return *(id *)(v0 + 8 * v1 + 32);
}

uint64_t sub_454F8()
{
  return sub_288BC(v0, v1);
}

uint64_t sub_45504()
{
  return Logger.logObject.getter();
}

uint64_t sub_4550C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_45520()
{
  return swift_endAccess(v0);
}

uint64_t sub_45528(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_45538()
{
  return v0;
}

uint64_t sub_45544( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v18 + 640) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v17, a17, v20, v19);
}

uint64_t sub_4555C(uint64_t a1, unint64_t a2)
{
  return sub_3D10(a1, a2, (uint64_t *)(v2 - 80));
}

uint64_t sub_45564()
{
  return sub_288BC(v0, v1);
}

uint64_t sub_45570()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 656));
}

id sub_45578(uint64_t a1, const char *a2)
{
  return [*(id *)(v2 - 80) a2];
}

uint64_t sub_45584(uint64_t a1)
{
  *(void *)(v1 + 1192) = a1;
  *(void *)(v3 - 88) = *(void *)(v1 + 1136);
  *(void *)(v3 - 80) = a1;
  return swift_bridgeObjectRelease(v2);
}

  ;
}

void sub_455CC()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_455DC()
{
  *(void *)(v1 - 8) = *v0;
}

id sub_455EC@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

id sub_455F4()
{
  return v0;
}

uint64_t sub_45608(uint64_t a1)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, a1);
}

void sub_4561C()
{
}

uint64_t sub_45630()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 80))(v1, v0, v2);
}

uint64_t sub_45644()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_4564C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_45660()
{
  return swift_task_dealloc(*(void *)(v0 - 80));
}

uint64_t sub_45668(uint64_t a1)
{
  return v2(a1, v1);
}

void sub_45670()
{
  *(void *)(v2 - 80) = *(void *)(v1 + 1136);
}

void sub_456A0(void *a1)
{
}

uint64_t sub_456A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_456C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_456D8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_456E4(uint64_t result)
{
  *(void *)(v1 - 80) = result;
  return result;
}

uint64_t sub_456F0(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

uint64_t sub_456FC()
{
  return ((uint64_t (*)(void))withCheckedContinuation<A>(isolation:function:_:))();
}

uint64_t sub_45708()
{
  return sub_288BC(v0, v1);
}

void sub_45714()
{
  *(void *)(v2 - 80) = *(void *)(v1 + 1136);
}

uint64_t sub_45740(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_4574C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

void sub_4575C()
{
}

uint64_t sub_45764()
{
  return v2(v0, v1);
}

  ;
}

uint64_t sub_45790()
{
  return v3(v1, v0, v2);
}

BOOL sub_457A0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_457B0(uint64_t a1)
{
  return v1(a1, v2);
}

  ;
}

uint64_t sub_457C4()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_457D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7);
}

  ;
}

void sub_457F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_457FC()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_45804()
{
  return v0;
}

void sub_45810(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_45818()
{
  return v0;
}

uint64_t sub_45828()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_45830(uint64_t a1)
{
  return v2(a1, v1);
}

_WORD *sub_45838(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

  ;
}

uint64_t sub_45850(uint64_t a1, uint64_t a2)
{
  return v2(v3, a2, v4);
}

uint64_t sub_4585C(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

unint64_t sub_45868(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_44084(a2, (a3 & 0xC000000000000001LL) == 0, a3);
}

uint64_t sub_45884()
{
  return ((uint64_t (*)(void))withCheckedContinuation<A>(isolation:function:_:))();
}

void *sub_45894()
{
  return sub_80B4(v0, v1);
}

uint64_t sub_458B0(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_458B8(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

void sub_458C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21)
{
}

uint64_t sub_458C8@<X0>(unint64_t a1@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1 + 1, 1LL);
}

void sub_458E0()
{
  *(void *)(v0 + 1112) = *(void *)(v0 + 1072);
}

void sub_45900()
{
}

void sub_45908()
{
}

uint64_t sub_45920()
{
  return v0;
}

uint64_t sub_45930( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return a21;
}

void sub_45940(uint64_t a1@<X8>)
{
  *(void *)(v1 + 40) = a1;
}

  ;
}

uint64_t sub_4596C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_45974()
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()();
}

  ;
}

void *sub_45998()
{
  return malloc(0x28uLL);
}

uint64_t sub_459AC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 88))(v1, v0, v2);
}

uint64_t sub_459C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unsigned int a21)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v23 - 88))(v21, a21, v22);
}

uint64_t sub_459D4()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_459DC()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

uint64_t sub_459E8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

void sub_459FC()
{
  *uint64_t v0 = *v1;
}

uint64_t sub_45A08(uint64_t a1)
{
  return sub_A40C(v1, 1LL, 1LL, a1);
}

uint64_t sub_45A1C()
{
  return sub_288BC(v0, v1);
}

uint64_t sub_45A28()
{
  return _s20HandleIntentStrategyVwxx_1(v0);
}

uint64_t sub_45A30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v14 - 88) = v13;
  return Logger.logObject.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_45A44(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_45A4C(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_45A54(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_45A5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v14 - 88) = v13 + 648;
  return Logger.logObject.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_45A6C()
{
  return v0(v3, v2 + v1, v4);
}

void sub_45A7C()
{
}

uint64_t sub_45A84()
{
  return v2(v0, v1);
}

_WORD *sub_45A94(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

  ;
}

uint64_t sub_45AB0()
{
  return v2(v0, v1);
}

uint64_t sub_45AC0()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

  ;
}

uint64_t sub_45AE8(uint64_t a1)
{
  return CheckedContinuation.resume(returning:)(v1 - 120, a1);
}

uint64_t sub_45AF8()
{
  return static ExecuteResponse.complete()();
}

uint64_t sub_45B00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_26B0(a3);
}

uint64_t sub_45B10(uint64_t a1)
{
  return sub_A40C(a1, 0LL, 1LL, v1);
}

uint64_t sub_45B20(uint64_t a1)
{
  return sub_A40C(a1, 0LL, 1LL, v1);
}

uint64_t sub_45B30()
{
  return v0;
}

void sub_45B3C()
{
}

id sub_45B44()
{
  return [*(id *)(v1 - 88) *(SEL *)(v0 + 912)];
}

uint64_t sub_45B54()
{
  return type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
}

uint64_t sub_45B5C()
{
  return swift_release(v0);
}

uint64_t sub_45B64()
{
  return v3(v1, v0, v2);
}

int8x16_t sub_45B74(int8x16_t *a1)
{
  *(void *)(v1 + 40) = a1;
  int8x16_t result = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  a1[1] = result;
  return result;
}

void sub_45B8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

uint64_t sub_45B94()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_45B9C()
{
  return v4(v2, v1 + v0, v3);
}

uint64_t sub_45BAC()
{
  return v0;
}

void *sub_45BBC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *int8x16_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_45BCC()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_45BD4()
{
  return v0;
}

  ;
}

uint64_t sub_45BFC(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t sub_45C08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  return swift_bridgeObjectRelease(*a20);
}

uint64_t sub_45C14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return Logger.logObject.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_45C1C()
{
  return swift_task_alloc(32LL);
}

id sub_45C28()
{
  return *(id *)(v0 + 32);
}

uint64_t sub_45C30(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

  ;
}

uint64_t sub_45C50()
{
  return swift_release(*(void *)(v0 + 1064));
}

  ;
}

uint64_t sub_45C6C()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_45C74()
{
  return v0(v1, v2);
}

uint64_t sub_45C80()
{
  return v2(v0, v1);
}

double sub_45C8C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_288F4(a1, v2, v3, a2);
}

id sub_45C98@<X0>(void *a1@<X8>)
{
  return a1;
}

  ;
}

  ;
}

uint64_t sub_45CC0()
{
  return type metadata accessor for SiriTimeEventSender.ReasonDescription(0LL);
}

uint64_t sub_45CC8()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

  ;
}

  ;
}

uint64_t sub_45CEC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_45CF8(uint64_t a1, uint64_t *a2)
{
  return sub_26B0(a2);
}

uint64_t sub_45D04(uint64_t a1, uint64_t a2)
{
  return v4(v2, a2, v3);
}

uint64_t sub_45D10()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_45D1C()
{
  uint64_t v1 = _s20HandleIntentStrategyVwxx_1(v0);
  return Logger.logObject.getter(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_45D30()
{
  return v2(v0, v1);
}

uint64_t sub_45D3C(uint64_t result)
{
  *(void *)(v2 - 88) = v1;
  *(void *)(v2 - 80) = result;
  return result;
}

void sub_45D48()
{
}

uint64_t sub_45D50(uint64_t a1)
{
  return sub_252F0(a1, (void (*)(void))type metadata accessor for SnoozeAlarmCATs_Async, &qword_D8238);
}

uint64_t sub_45D64(uint64_t a1)
{
  return sub_252F0(a1, (void (*)(void))type metadata accessor for SnoozeCATPatternsExecutor, &qword_D8240);
}

uint64_t type metadata accessor for CreateAlarmCATPatternsExecutor(uint64_t a1)
{
  return sub_8A38(a1, (uint64_t *)&unk_D50A0, (uint64_t)&nominal type descriptor for CreateAlarmCATPatternsExecutor);
}

uint64_t sub_45D8C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D8248);
}

void sub_45DC8()
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_26B0(&qword_D3BD0);
  uint64_t v6 = sub_38F80(v5, 512LL);
  *(_OWORD *)(v6 + 16) = xmmword_A5A60;
  uint64_t v7 = (void *)(v6 + 48);
  sub_214E0();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v10;
  sub_3F88(v0, v4, &qword_D3A08);
  uint64_t v11 = sub_1EC14();
  if (sub_16880(v4, 1LL, v11) == 1)
  {
    sub_202D8(v4, &qword_D3A08);
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
  }

  else
  {
    *(void *)(v6 + 72) = v11;
    uint64_t v12 = sub_19558(v7);
    sub_1EC54((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL));
  }

  *(void *)(v6 + 80) = 0x6D72616C61LL;
  *(void *)(v6 + 88) = 0xE500000000000000LL;
  MultipleParameters = (int *)type metadata accessor for CreateAlarmCreateMultipleParameters(0LL);
  uint64_t v14 = *(void *)(v0 + MultipleParameters[5]);
  if (v14)
  {
    uint64_t v15 = sub_47D54();
    uint64_t v16 = v14;
  }

  else
  {
    uint64_t v15 = sub_47E04();
    *(void *)(v6 + 104) = 0LL;
    *(void *)(v6 + 112) = 0LL;
  }

  *(void *)(v6 + 96) = v16;
  *(void *)(v6 + 120) = v15;
  *(void *)(v6 + 128) = 7368801LL;
  *(void *)(v6 + 136) = 0xE300000000000000LL;
  uint64_t v17 = *(void *)(v0 + MultipleParameters[6]);
  if (v17)
  {
    uint64_t v18 = sub_21638();
    uint64_t v19 = v17;
  }

  else
  {
    uint64_t v18 = sub_47E04();
    *(void *)(v6 + 152) = 0LL;
    *(void *)(v6 + 160) = 0LL;
  }

  *(void *)(v6 + 144) = v19;
  *(void *)(v6 + 168) = v18;
  *(void *)(v6 + 176) = 0xD000000000000015LL;
  sub_214C8();
  *(void *)(v6 + 184) = v20;
  *(_BYTE *)(v6 + 192) = *(_BYTE *)(v0 + MultipleParameters[7]);
  *(void *)(v6 + 216) = &type metadata for Bool;
  *(void *)(v6 + 224) = 0xD000000000000014LL;
  sub_214C8();
  *(void *)(v6 + 232) = v21;
  *(_BYTE *)(v6 + 240) = *(_BYTE *)(v0 + MultipleParameters[8]);
  *(void *)(v6 + 264) = &type metadata for Bool;
  strcpy((char *)(v6 + 272), "hideSleepAlarm");
  *(_BYTE *)(v6 + 28static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = -18;
  *(_BYTE *)(v6 + 288) = *(_BYTE *)(v0 + MultipleParameters[9]);
  *(void *)(v6 + 312) = &type metadata for Bool;
  *(void *)(v6 + 320) = 0xD000000000000014LL;
  sub_214C8();
  *(void *)(v6 + 328) = v22;
  *(_BYTE *)(v6 + 336) = *(_BYTE *)(v0 + MultipleParameters[10]);
  *(void *)(v6 + 360) = &type metadata for Bool;
  *(void *)(v6 + 368) = 0x736D657469LL;
  *(void *)(v6 + 376) = 0xE500000000000000LL;
  uint64_t v23 = *(void *)(v0 + MultipleParameters[11]);
  uint64_t v24 = sub_26B0(&qword_D3D28);
  *(void *)(v6 + 384) = v23;
  *(void *)(v6 + 408) = v24;
  *(void *)(v6 + 416) = 0xD000000000000017LL;
  sub_214C8();
  *(void *)(v6 + 424) = v25;
  *(_BYTE *)(v6 + 432) = *(_BYTE *)(v0 + MultipleParameters[12]);
  sub_47E44();
  *(void *)(v6 + 456) = &type metadata for Bool;
  *(void *)(v6 + 464) = v26;
  *(void *)(v6 + 472) = 0xEA00000000006D72LL;
  uint64_t v27 = *(void *)(v0 + MultipleParameters[13]);
  if (v27)
  {
    uint64_t v28 = sub_47D54();
  }

  else
  {
    uint64_t v28 = 0LL;
    *(void *)(v6 + 488) = 0LL;
    *(void *)(v6 + 496) = 0LL;
  }

  *(void *)(v6 + 480) = v27;
  *(void *)(v6 + 504) = v28;
  swift_retain(v17);
  swift_bridgeObjectRetain(v23);
  sub_47E20();
  swift_retain(v14);
  sub_21290();
}

void sub_46088(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  sub_26B0(&qword_D3A08);
  sub_215E4();
  __chkstk_darwin(v6);
  sub_17390();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_26B0(&qword_D3BD0);
  uint64_t v11 = sub_38F80(v10, 80LL);
  *(_OWORD *)(v11 + 16) = xmmword_A4880;
  uint64_t v12 = (void *)(v11 + 48);
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  sub_3F88(v5, v9, &qword_D3A08);
  uint64_t v13 = sub_1EC14();
  if (sub_16880(v9, 1LL, v13) == 1)
  {
    sub_202D8(v9, &qword_D3A08);
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
  }

  else
  {
    *(void *)(v11 + 72) = v13;
    uint64_t v14 = sub_19558(v12);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v14, v9, v13);
  }

  sub_21290();
}

uint64_t sub_46180(char a1, char a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 24) = a7;
  *(void *)(v8 + 32) = a8;
  *(_BYTE *)(v8 + 92) = a6;
  *(void *)(v8 + 16) = a5;
  *(_BYTE *)(v8 + 9sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = a4;
  *(_BYTE *)(v8 + 90) = a3;
  *(_BYTE *)(v8 + 89) = a2;
  *(_BYTE *)(v8 + 88) = a1;
  uint64_t MultipleParameters = type metadata accessor for CreateAlarmCreateMultipleParameters(0LL);
  *(void *)(v8 + 40) = MultipleParameters;
  *(void *)(v8 + 48) = sub_1EA3C(MultipleParameters);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_461D8()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  char v3 = *(_BYTE *)(v0 + 92);
  uint64_t v4 = *(void *)(v0 + 16);
  char v5 = *(_BYTE *)(v0 + 91);
  char v6 = *(_BYTE *)(v0 + 90);
  char v7 = *(_BYTE *)(v0 + 89);
  char v8 = *(_BYTE *)(v0 + 88);
  uint64_t v9 = sub_1EC14();
  sub_A40C(v1, 1LL, 1LL, v9);
  uint64_t v10 = v2[5];
  *(void *)(v1 + v10) = 0LL;
  uint64_t v16 = v2[6];
  *(void *)(v1 + v16) = 0LL;
  *(_BYTE *)(v1 + v2[7]) = v8;
  *(_BYTE *)(v1 + v2[8]) = v7;
  *(_BYTE *)(v1 + v2[9]) = v6;
  *(_BYTE *)(v1 + v2[10]) = v5;
  *(void *)(v1 + v2[11]) = v4;
  *(_BYTE *)(v1 + v2[12]) = v3;
  *(void *)(v1 + v2[13]) = 0LL;
  swift_bridgeObjectRetain(v4);
  sub_4828C();
  *(void *)(v1 + v10) = v11;
  sub_21638();
  if (qword_D3178 != -1) {
    swift_once(&qword_D3178, sub_82958);
  }
  uint64_t v12 = swift_retain(qword_D84A8);
  *(void *)(v1 + v16) = SirikitApp.init(app:)(v12);
  sub_45DC8();
  *(void *)(v0 + 56) = v13;
  *(void *)(v0 + 64) = v14;
  void *v14 = v0;
  v14[1] = sub_46368;
  sub_47D5C();
  return v17(0xD00000000000001ALL);
}

uint64_t sub_46368(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 64);
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc(v5);
  sub_16F40();
  if (!v1) {
    *(void *)(v4 + 80) = a1;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_463D0(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 32);
  sub_2142C(a1, type metadata accessor for CreateAlarmCreateMultipleParameters);

  sub_19808();
  return sub_384A0(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_46414(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 32);
  sub_2142C(a1, type metadata accessor for CreateAlarmCreateMultipleParameters);

  sub_19808();
  return sub_47D48(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_46454()
{
  uint64_t v1 = (void *)sub_47CC8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_47C64;
  return sub_47D84(0xD000000000000017LL, 0x80000000000A9120LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_464B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return sub_2D94C((uint64_t)sub_464C8);
}

uint64_t sub_464C8()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = sub_26B0(&qword_D3BD0);
  char v3 = (__n128 *)sub_38F80(v2, 176LL);
  v0[5] = v3;
  uint64_t v4 = sub_47D18(v3, (__n128)xmmword_A5A80);
  uint64_t v5 = sub_47D90(v4);
  if (v1)
  {
    uint64_t v5 = type metadata accessor for SirikitApp(v5);
  }

  else
  {
    v3[6].n128_u64[1] = 0LL;
    v3[7].n128_u64[0] = 0LL;
  }

  sub_47CE8(v5);
  sub_47D6C();
  sub_47DE4();
  char v6 = (void *)sub_47E3C();
  v0[6] = v6;
  sub_47E58(v6, (uint64_t)sub_46578);
  sub_47D5C();
  return sub_47CDC(0xD000000000000020LL, v7, (uint64_t)v3, v9);
}

uint64_t sub_46578()
{
  if (!v1) {
    *(void *)(v2 + 64) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_465C0()
{
  return sub_21260(*(void *)(v0 + 64), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_465F4()
{
  return sub_1B5EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_46624(char a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a5;
  *(void *)(v6 + 24) = a6;
  *(_BYTE *)(v6 + 8sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = a4;
  *(_BYTE *)(v6 + 82) = a3;
  *(_BYTE *)(v6 + 8sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = a2;
  *(_BYTE *)(v6 + 80) = a1;
  return sub_2D94C((uint64_t)sub_46644);
}

uint64_t sub_46644()
{
  uint64_t v2 = v1;
  *(void *)(v0 + 32) = v1;
  sub_21638();
  if (qword_D3178 != -1) {
    swift_once(&qword_D3178, sub_82958);
  }
  int v3 = *(unsigned __int8 *)(v0 + 83);
  int v4 = *(unsigned __int8 *)(v0 + 82);
  int v5 = *(unsigned __int8 *)(v0 + 81);
  unsigned int v6 = *(unsigned __int8 *)(v0 + 80);
  uint64_t v7 = swift_retain(qword_D84A8);
  uint64_t v8 = SirikitApp.init(app:)(v7);
  *(void *)(v0 + 40) = v8;
  if (v5) {
    int v9 = 256;
  }
  else {
    int v9 = 0;
  }
  if (v4) {
    int v10 = 0x10000;
  }
  else {
    int v10 = 0;
  }
  if (v3) {
    int v11 = 0x1000000;
  }
  else {
    int v11 = 0;
  }
  *(void *)(v0 + 48) = sub_8F58(v2, v8, v10 | v11 | v9 | v6, 0LL);
  *(void *)(v0 + 56) = v12;
  sub_47E58(v12, (uint64_t)sub_46770);
  unint64_t v13 = sub_47DEC();
  return v15(v13);
}

uint64_t sub_46770()
{
  if (!v1) {
    *(void *)(v2 + 72) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_467B8()
{
  uint64_t v1 = sub_47DD4();
  return sub_384A0(v1, v2);
}

uint64_t sub_467E8()
{
  return sub_47D48(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_4681C(char a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 24) = a6;
  *(void *)(v7 + 32) = a7;
  *(void *)(v7 + 16) = a5;
  *(_BYTE *)(v7 + 75) = a4;
  *(_BYTE *)(v7 + 74) = a3;
  *(_BYTE *)(v7 + 7sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = a2;
  *(_BYTE *)(v7 + 72) = a1;
  return sub_2D94C((uint64_t)sub_46840);
}

uint64_t sub_46840()
{
  if (*(_BYTE *)(v0 + 73)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  if (*(_BYTE *)(v0 + 74)) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (*(_BYTE *)(v0 + 75)) {
    int v3 = 0x1000000;
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = sub_8F58( *(void *)(v0 + 24),  *(void *)(v0 + 32),  v2 | v3 | v1 | *(unsigned __int8 *)(v0 + 72),  0LL);
  *(void *)(v0 + 40) = v4;
  sub_47DE4();
  sub_47E20();
  int v5 = (void *)sub_47E3C();
  *(void *)(v0 + 48) = v5;
  sub_47E58(v5, (uint64_t)sub_4690C);
  unint64_t v6 = sub_47DEC();
  return sub_47CDC(v6, v7, v4, v9);
}

uint64_t sub_4690C()
{
  if (!v1) {
    *(void *)(v2 + 64) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_46954()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_16EBC(*(void *)(v0 + 24));
  sub_16EBC(v1);
  return sub_21260(*(void *)(v0 + 64), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_4698C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_16EBC(*(void *)(v0 + 24));
  sub_16EBC(v1);
  return sub_1B5EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_469C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return sub_2D94C((uint64_t)sub_469D4);
}

uint64_t sub_469D4()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = sub_26B0(&qword_D3BD0);
  int v3 = (__n128 *)sub_38F80(v2, 176LL);
  v0[5] = v3;
  uint64_t v4 = sub_47D18(v3, (__n128)xmmword_A5A80);
  uint64_t v5 = sub_47D90(v4);
  if (v1)
  {
    uint64_t v5 = type metadata accessor for SirikitApp(v5);
  }

  else
  {
    v3[6].n128_u64[1] = 0LL;
    v3[7].n128_u64[0] = 0LL;
  }

  sub_47CE8(v5);
  sub_47D6C();
  sub_47DE4();
  unint64_t v6 = (void *)sub_47E3C();
  v0[6] = v6;
  sub_47E58(v6, (uint64_t)sub_46A84);
  sub_47D5C();
  return sub_47CDC(0xD000000000000032LL, v7, (uint64_t)v3, v9);
}

uint64_t sub_46A84()
{
  if (!v1) {
    *(void *)(v2 + 64) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_46ACC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t AlarmPromptForTimeParameters = type metadata accessor for CreateAlarmPromptForTimeParameters(0LL);
  v3[5] = sub_1EA3C(AlarmPromptForTimeParameters);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_46B0C()
{
  uint64_t v1 = sub_1EC14();
  sub_47DB0(v1);
  sub_46088(0x6C6562616CLL, 0xE500000000000000LL);
  uint64_t v3 = v2;
  *(void *)(v0 + 48) = v2;
  uint64_t v4 = (void *)sub_47CC8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 56) = v4;
  void *v4 = v0;
  v4[1] = sub_46B98;
  sub_47D5C();
  return sub_47D38(0xD000000000000019LL, v5, v3, v7);
}

uint64_t sub_46B98()
{
  if (!v1) {
    *(void *)(v2 + 72) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_46BE0(uint64_t a1)
{
  uint64_t v1 = sub_47DD4();
  return sub_21260(v1, v2);
}

uint64_t sub_46C14(uint64_t a1)
{
  return sub_1B5EC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_46C4C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t AlarmSleepUnsupportedParameters = type metadata accessor for CreateAlarmSleepUnsupportedParameters(0LL);
  v3[5] = sub_1EA3C(AlarmSleepUnsupportedParameters);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_46C8C()
{
  uint64_t v1 = sub_1EC14();
  sub_47DB0(v1);
  sub_46088(0xD000000000000014LL, 0x80000000000A90E0LL);
  uint64_t v3 = v2;
  *(void *)(v0 + 48) = v2;
  uint64_t v4 = (void *)sub_47CC8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 56) = v4;
  void *v4 = v0;
  v4[1] = sub_46D30;
  return sub_47D38(0xD00000000000001CLL, 0x80000000000A90C0LL, v3, v6);
}

uint64_t sub_46D30()
{
  if (!v1) {
    *(void *)(v2 + 72) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_46D78(uint64_t a1)
{
  uint64_t v1 = sub_47DD4();
  return sub_21260(v1, v2);
}

uint64_t sub_46DAC(uint64_t a1)
{
  return sub_1B5EC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_46DE4()
{
  uint64_t v1 = (void *)sub_47CC8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_46E44;
  return sub_47D84(0xD00000000000002FLL, 0x80000000000A9090LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_46E44(uint64_t a1)
{
  uint64_t v6 = *v2;
  uint64_t v4 = swift_task_dealloc(*(void *)(*v2 + 16));
  if (!v1) {
    uint64_t v4 = a1;
  }
  return sub_384A0(v4, *(uint64_t (**)(void))(v6 + 8));
}

void sub_46E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_46ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_17390();
  uint64_t v10 = v9 - v8;
  sub_26B0((uint64_t *)&unk_D36C0);
  sub_215E4();
  __chkstk_darwin(v11);
  sub_17390();
  uint64_t v14 = v13 - v12;
  sub_3F88(a1, v13 - v12, (uint64_t *)&unk_D36C0);
  sub_1EC54(v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  uint64_t v15 = CATWrapper.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_202D8(a1, (uint64_t *)&unk_D36C0);
  return v15;
}

uint64_t sub_46FCC()
{
  return type metadata accessor for CreateAlarmCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for CreateAlarmSleepUnsupportedParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D52B8, (uint64_t)&nominal type descriptor for CreateAlarmSleepUnsupportedParameters);
}

uint64_t type metadata accessor for CreateAlarmPromptForTimeParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D5228, (uint64_t)&nominal type descriptor for CreateAlarmPromptForTimeParameters);
}

uint64_t type metadata accessor for CreateAlarmCreateMultipleParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D5178, (uint64_t)&nominal type descriptor for CreateAlarmCreateMultipleParameters);
}

char *sub_47010(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (sub_16880((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_26B0(&qword_D3A08);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
      sub_A40C((uint64_t)v4, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = *(uint64_t *)((char *)a2 + v10);
    *(void *)&v4[v10] = v12;
    uint64_t v13 = *(uint64_t *)((char *)a2 + v11);
    *(void *)&v4[v11] = v13;
    uint64_t v14 = a3[8];
    v4[a3[7]] = *((_BYTE *)a2 + a3[7]);
    v4[v14] = *((_BYTE *)a2 + v14);
    uint64_t v15 = a3[10];
    v4[a3[9]] = *((_BYTE *)a2 + a3[9]);
    v4[v15] = *((_BYTE *)a2 + v15);
    uint64_t v16 = a3[11];
    uint64_t v17 = a3[12];
    uint64_t v18 = *(uint64_t *)((char *)a2 + v16);
    *(void *)&v4[v16] = v18;
    v4[v17] = *((_BYTE *)a2 + v17);
    uint64_t v19 = a3[13];
    uint64_t v9 = *(uint64_t *)((char *)a2 + v19);
    *(void *)&v4[v19] = v9;
    swift_retain(v12);
    swift_retain(v13);
    swift_bridgeObjectRetain(v18);
  }

  swift_retain(v9);
  return v4;
}

uint64_t sub_47158(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  swift_release(*(void *)(a1 + a2[5]));
  swift_release(*(void *)(a1 + a2[6]));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11]));
  return swift_release(*(void *)(a1 + a2[13]));
}

char *sub_471E0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = *(void *)&a2[v8];
  *(void *)&a1[v8] = v10;
  uint64_t v11 = *(void *)&a2[v9];
  *(void *)&a1[v9] = v11;
  uint64_t v12 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[11];
  uint64_t v15 = a3[12];
  uint64_t v16 = *(void *)&a2[v14];
  *(void *)&a1[v14] = v16;
  a1[v15] = a2[v15];
  uint64_t v17 = a3[13];
  uint64_t v18 = *(void *)&a2[v17];
  *(void *)&a1[v17] = v18;
  swift_retain(v10);
  swift_retain(v11);
  swift_bridgeObjectRetain(v16);
  swift_retain(v18);
  return a1;
}

char *sub_47300(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_16880((uint64_t)a1, 1LL, v6);
  int v8 = sub_16880((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = *(void *)&a1[v11];
  uint64_t v13 = *(void *)&a2[v11];
  *(void *)&a1[v11] = v13;
  swift_retain(v13);
  swift_release(v12);
  uint64_t v14 = a3[6];
  uint64_t v15 = *(void *)&a1[v14];
  uint64_t v16 = *(void *)&a2[v14];
  *(void *)&a1[v14] = v16;
  swift_retain(v16);
  swift_release(v15);
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v17 = a3[11];
  uint64_t v18 = *(void *)&a2[v17];
  uint64_t v19 = *(void *)&a1[v17];
  *(void *)&a1[v17] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[a3[12]] = a2[a3[12]];
  uint64_t v20 = a3[13];
  uint64_t v21 = *(void *)&a1[v20];
  uint64_t v22 = *(void *)&a2[v20];
  *(void *)&a1[v20] = v22;
  swift_retain(v22);
  swift_release(v21);
  return a1;
}

char *sub_4749C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v9] = a2[v9];
  uint64_t v10 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v10] = a2[v10];
  uint64_t v11 = a3[12];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  a1[v11] = a2[v11];
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  return a1;
}

char *sub_47598(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_16880((uint64_t)a1, 1LL, v6);
  int v8 = sub_16880((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = *(void *)&a1[v11];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  swift_release(v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = *(void *)&a1[v13];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  swift_release(v14);
  uint64_t v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v15] = a2[v15];
  uint64_t v16 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v16] = a2[v16];
  uint64_t v17 = a3[11];
  uint64_t v18 = *(void *)&a1[v17];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v20 = *(void *)&a1[v19];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  swift_release(v20);
  return a1;
}

uint64_t sub_47708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_47714);
}

uint64_t sub_47714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_16880(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 44));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_47790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4779C);
}

uint64_t sub_4779C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = sub_47E28();
    return sub_A40C(v9, v10, v11, v12);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
  }

  return result;
}

void sub_47808(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = "\b";
    v4[2] = "\b";
    v4[3] = &unk_A5B40;
    void v4[4] = &unk_A5B40;
    v4[5] = &unk_A5B40;
    v4[6] = &unk_A5B40;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[8] = &unk_A5B40;
    void v4[9] = "\b";
    swift_initStructMetadata(a1, 256LL, 10LL, v4, a1 + 16);
  }

uint64_t sub_478B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_478C0);
}

uint64_t sub_478C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D3A08);
  return sub_16880(a1, a2, v4);
}

uint64_t sub_478F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_47904);
}

uint64_t sub_47904()
{
  uint64_t v0 = sub_47E28();
  return sub_A40C(v0, v1, v2, v3);
}

void sub_47938(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(sub_26B0(&qword_D3A08) - 8);
  if ((*(_DWORD *)(v4 + 80) & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    swift_retain(v6);
  }

  else
  {
    uint64_t v5 = sub_1EC14();
    if (sub_47CB8())
    {
      memcpy(a1, a2, *(void *)(v4 + 64));
    }

    else
    {
      sub_47C70(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
      sub_47CA4();
    }
  }

  sub_1D738();
}

uint64_t sub_479C8(uint64_t a1)
{
  uint64_t v2 = sub_1EC14();
  uint64_t result = sub_16880(a1, 1LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  }
  return result;
}

void sub_47A1C()
{
  uint64_t v0 = sub_1EC14();
  if (sub_47CB8())
  {
    uint64_t v1 = sub_26B0(&qword_D3A08);
    sub_2135C(v1);
  }

  else
  {
    sub_47C70(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL));
    sub_47CA4();
  }

  sub_1D738();
}

void sub_47A74(uint64_t a1)
{
  uint64_t v2 = sub_1EC14();
  int v3 = sub_16880(a1, 1LL, v2);
  int v4 = sub_47CB8();
  if (!v3)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    if (!v4)
    {
      sub_47C70(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 24));
      goto LABEL_7;
    }

    sub_47E10(v5);
    goto LABEL_6;
  }

  if (v4)
  {
LABEL_6:
    uint64_t v6 = sub_26B0(&qword_D3A08);
    sub_2135C(v6);
    goto LABEL_7;
  }

  sub_47C70(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL));
  sub_47CA4();
LABEL_7:
  sub_1D738();
}

void sub_47AFC()
{
  uint64_t v0 = sub_1EC14();
  if (sub_47CB8())
  {
    uint64_t v1 = sub_26B0(&qword_D3A08);
    sub_2135C(v1);
  }

  else
  {
    sub_47C70(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 32LL));
    sub_47CA4();
  }

  sub_1D738();
}

void sub_47B54(uint64_t a1)
{
  uint64_t v2 = sub_1EC14();
  int v3 = sub_16880(a1, 1LL, v2);
  int v4 = sub_47CB8();
  if (!v3)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    if (!v4)
    {
      sub_47C70(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 40));
      goto LABEL_7;
    }

    sub_47E10(v5);
    goto LABEL_6;
  }

  if (v4)
  {
LABEL_6:
    uint64_t v6 = sub_26B0(&qword_D3A08);
    sub_2135C(v6);
    goto LABEL_7;
  }

  sub_47C70(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL));
  sub_47CA4();
LABEL_7:
  sub_1D738();
}

uint64_t sub_47BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_47C5C);
}

uint64_t sub_47BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_47C60);
}

void sub_47BF4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
  }

uint64_t sub_47C70@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2, v3);
}

uint64_t sub_47C80()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 56) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_47CA4()
{
  return sub_A40C(v0, 0LL, 1LL, v1);
}

uint64_t sub_47CB8()
{
  return sub_16880(v0, 1LL, v1);
}

uint64_t sub_47CC8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_47CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

double sub_47CE8(uint64_t a1)
{
  *(void *)(v2 + 96) = v1;
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = 0x616C417065656C73LL;
  *(void *)(v2 + 136) = 0xEA00000000006D72LL;
  double result = 0.0;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  return result;
}

uint64_t sub_47D18(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x6D72616C61LL;
  a1[2].n128_u64[1] = 0xE500000000000000LL;
  return type metadata accessor for AlarmAlarm(0LL);
}

uint64_t sub_47D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_47D48(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_47D54()
{
  return type metadata accessor for AlarmAlarm(0LL);
}

  ;
}

uint64_t sub_47D6C()
{
  return swift_retain(v0);
}

uint64_t sub_47D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_47D90(uint64_t a1)
{
  void v2[6] = v1;
  void v2[9] = a1;
  v2[10] = 7368801LL;
  v2[11] = 0xE300000000000000LL;
  return 0LL;
}

uint64_t sub_47DB0(uint64_t a1)
{
  return v2(v1);
}

uint64_t sub_47DD4()
{
  return *(void *)(v0 + 72);
}

uint64_t sub_47DE4()
{
  return swift_retain(v0);
}

unint64_t sub_47DEC()
{
  return 0xD000000000000021LL;
}

uint64_t sub_47E04()
{
  return 0LL;
}

uint64_t sub_47E10@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_47E20()
{
  return swift_retain(v0);
}

uint64_t sub_47E28()
{
  return v0;
}

uint64_t sub_47E3C()
{
  return swift_task_alloc(v0);
}

  ;
}

void *sub_47E58@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *double result = v2;
  result[1] = a2;
  return result;
}

void sub_47E64()
{
}

void *sub_47E70(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5 = v4;
  LOBYTE(v6) = a4;
  LOBYTE(vstatic OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = a3;
  uint64_t v52 = a2;
  uint64_t v51 = sub_26B0(&qword_D5338);
  __chkstk_darwin(v51);
  uint64_t v50 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_26B0(&qword_D3A08);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v49 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v15 = type metadata accessor for SpeakableString(0LL);
  uint64_t v48 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v47 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  unint64_t v42 = (char *)&v41 - v18;
  uint64_t v19 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v19; uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v39))
  {
    uint64_t v41 = v5;
    unint64_t v46 = a1 & 0xC000000000000001LL;
    uint64_t v20 = &_swiftEmptyArrayStorage;
    uint64_t v21 = 4LL;
    int v43 = v6 & 1;
    int v44 = v7 & 1;
    uint64_t v45 = a1;
    uint64_t v53 = v15;
    while (1)
    {
      uint64_t v7 = v21 - 4;
      id v22 = v46 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21 - 4, a1) : *(id *)(a1 + 8 * v21);
      a1 = (uint64_t)v22;
      uint64_t v5 = v21 - 3;
      if (__OFADD__(v7, 1LL)) {
        break;
      }
      uint64_t v54 = v20;
      uint64_t v23 = v19;
      uint64_t v24 = (uint64_t)v14;
      uint64_t v25 = sub_50B1C((unint64_t)[v22 repeatSchedule]);
      uint64_t v27 = v26;
      uint64_t v28 = v15;
      uint64_t v29 = (uint64_t)v49;
      String.toSpeakableString.getter(v25);
      swift_bridgeObjectRelease(v27);
      uint64_t v30 = 1LL;
      sub_A40C(v29, 0LL, 1LL, v28);
      uint64_t v31 = (uint64_t)v50;
      sub_38644(v44, v43, 0, 0, 0, v29);
      sub_16A3C(v29, &qword_D3A08);
      uint64_t v32 = Result<>.firstPrint.getter(v51);
      uint64_t v6 = v33;
      sub_16A3C(v31, &qword_D5338);
      uint64_t v14 = (char *)v24;
      if (v6)
      {
        String.toSpeakableString.getter(v32);
        swift_bridgeObjectRelease(v6);
        uint64_t v30 = 0LL;
      }

      uint64_t v15 = v53;
      sub_A40C(v24, v30, 1LL, v53);

      uint64_t v19 = v23;
      if (sub_16880((uint64_t)v14, 1LL, v15) == 1)
      {
        sub_16A3C((uint64_t)v14, &qword_D3A08);
        a1 = v45;
        uint64_t v20 = v54;
      }

      else
      {
        uint64_t v6 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
        uint64_t v34 = v42;
        v6(v42, v14, v15);
        v6(v47, v34, v15);
        uint64_t v20 = v54;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v54);
        a1 = v45;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v20 = (void *)sub_6C9A8(0, v20[2] + 1LL, 1, (uint64_t)v20);
        }
        unint64_t v37 = v20[2];
        unint64_t v36 = v20[3];
        if (v37 >= v36 >> 1) {
          uint64_t v20 = (void *)sub_6C9A8(v36 > 1, v37 + 1, 1, (uint64_t)v20);
        }
        v20[2] = v37 + 1;
        unint64_t v38 = (unint64_t)v20
        uint64_t v15 = v53;
        v6((char *)v38, v47, v53);
      }

      ++v21;
      if (v5 == v19)
      {
        swift_release(v52);
        swift_bridgeObjectRelease(a1);
        return v20;
      }
    }

    __break(1u);
LABEL_20:
    if (a1 < 0) {
      uint64_t v39 = a1;
    }
    else {
      uint64_t v39 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

  swift_release(v52);
  swift_bridgeObjectRelease(a1);
  return &_swiftEmptyArrayStorage;
}

void sub_4828C()
{
  uint64_t v5 = v1;
  uint64_t v113 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = sub_4AFA8();
  uint64_t v115 = *(void *)(v9 - 8);
  uint64_t v116 = v9;
  sub_16AFC();
  __chkstk_darwin(v10);
  sub_16B30();
  uint64_t v114 = v11;
  uint64_t v110 = type metadata accessor for PunchOutApp(0LL);
  sub_17780();
  __chkstk_darwin(v12);
  sub_177C0();
  sub_26B0(&qword_D3A08);
  sub_215E4();
  __chkstk_darwin(v13);
  sub_16B08();
  uint64_t v112 = v14;
  sub_16AF0();
  __chkstk_darwin(v15);
  sub_4B018();
  __chkstk_darwin(v16);
  uint64_t v111 = (uint64_t)&v103 - v17;
  sub_16AF0();
  __chkstk_darwin(v18);
  sub_4AE74();
  uint64_t v20 = __chkstk_darwin(v19);
  id v22 = (char *)&v103 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v103 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v103 - v27;
  sub_74B4( v26,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v103,  v104,  v105,  v106,  v107,  (uint64_t)v108,  v109,  v110,  v111,  v112,  v113,  v114);
  uint64_t v117 = v36;
  if (v36)
  {
    id v108 = sub_4AF68(v36, "sleepAlarmAttribute");

    uint64_t v107 = v2;
    if (v8)
    {
      uint64_t v37 = v8;
    }

    else
    {
      uint64_t v38 = type metadata accessor for AlarmAlarm.Builder(0LL);
      sub_16D14(v38);
      uint64_t v37 = sub_7F58();
    }

    swift_retain(v8);
    uint64_t v105 = sub_963B0(v5);
    uint64_t v109 = v39;
    uint64_t v104 = v40;
    uint64_t v106 = v41;
    uint64_t v119 = v37;
    uint64_t v42 = v37 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_action;
    swift_beginAccess(v37 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_action, &v121, 0LL, 0LL);
    sub_44CFC(v42, (uint64_t)v28, &qword_D3A08);
    uint64_t v118 = sub_1EC14();
    int v43 = v5;
    int v44 = sub_16880((uint64_t)v28, 1LL, v118);
    sub_16A3C((uint64_t)v28, &qword_D3A08);
    BOOL v46 = v44 == 1;
    uint64_t v47 = v43;
    if (v46)
    {
      id v48 = sub_4AF68(v45, "sleepAlarmAttribute");

      uint64_t v49 = (unsigned int *)&enum case for PunchOutApp.alarm(_:);
      if (v48) {
        uint64_t v49 = (unsigned int *)&enum case for PunchOutApp.sleepAlarm(_:);
      }
      uint64_t v50 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v0 + 104))(v3, *v49, v110);
      PunchOutApp.toResponseFrameworkCommandAction()(v50);
      sub_16D0C(v3, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
      sub_4ADF4(v42, (uint64_t)v120);
      sub_806C((uint64_t)v25, v42);
      sub_4AE1C();
      sub_16A3C((uint64_t)v25, &qword_D3A08);
    }

    uint64_t v51 = sub_2257C(v43, (SEL *)&selRef_label);
    uint64_t v52 = v117;
    if (v53)
    {
      String.toSpeakableString.getter(v51);
      sub_16C48();
      uint64_t v54 = 0LL;
    }

    else
    {
      uint64_t v54 = 1LL;
    }

    sub_A40C((uint64_t)v22, v54, 1LL, v118);
    sub_4ADE0();
    sub_4AE3C((uint64_t)v22);
    sub_4AE1C();
    uint64_t v55 = sub_47DE4();
    sub_4B034(v55, &qword_D3A08);
    uint64_t v56 = swift_retain(v52);
    uint64_t v57 = sub_4F378(v56);
    sub_16FD8();
    uint64_t v58 = sub_17B94();
    id v59 = sub_4AF68(v58, "enabled");

    if (v59)
    {
      id v61 = sub_4AF68(v60, "enabled");
      sub_5E3C();
      v62.super.super.Class isa = NSNumber.init(integerLiteral:)(1LL).super.super.isa;
      if (v61)
      {
        id v63 = v61;
        LOBYTE(v59) = static NSObject.== infix(_:_:)(v63, v62.super.super.isa);
      }

      else
      {
        LOBYTE(v59) = 0;
      }
    }

    BOOL v64 = v108 != 0LL;
    *(_BYTE *)(v57 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_enabled) = v59 & 1;
    uint64_t v65 = 1LL;
    sub_4AF5C();
    sub_94CBC();
    os_log_type_t v67 = v66;
    sub_94C30();
    uint64_t v69 = v68;

    uint64_t ObjectType = swift_getObjectType(v69);
    sub_4B004(ObjectType);
    swift_unknownObjectRelease(v69);
    sub_4ADE0();
    sub_4AE3C(v4);
    sub_4AE1C();
    sub_4AE8C();
    sub_4AF5C();
    sub_94CC8();
    uint64_t v72 = v71;
    sub_94C30();
    uint64_t v74 = v73;

    uint64_t v75 = swift_getObjectType(v74);
    sub_4B004(v75);
    swift_unknownObjectRelease(v74);
    sub_4ADE0();
    sub_4AE3C(v4);
    sub_4AE1C();
    sub_4AE8C();
    sub_4ACEC(v47);
    LOBYTE(v74) = Optional<A>.isRecurrent.getter();
    sub_16C48();
    *(_BYTE *)(v57 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_isRecurrent) = v74 & 1;
    *(_BYTE *)(v57 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_isSleepAlarm) = v64;
    uint64_t v76 = sub_80D8();
    uint64_t v77 = sub_4F3AC((uint64_t)v76);
    sub_16FFC();
    sub_16EDC();
    sub_49D34(v113, v4);
    sub_4ADE0();
    sub_4AE3C(v4);
    sub_4AE1C();
    sub_4AE8C();
    uint64_t v78 = v114;
    Date.init()(v79);
    LOBYTE(v72) = sub_84F80(v78);
    sub_17AD0(v115);
    *(_BYTE *)(v77 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_isSetWitchingHoursForToday) = v72 & 1;
    uint64_t v80 = sub_96E24(v47);
    uint64_t v82 = v111;
    if (v81)
    {
      String.toSpeakableString.getter(v80);
      sub_16C48();
      uint64_t v65 = 0LL;
    }

    uint64_t v83 = v112;
    uint64_t v84 = v109;
    sub_17AF4(v82, v65);
    sub_4ADE0();
    sub_4AE3C(v82);
    uint64_t v85 = sub_4AE1C();
    sub_4B034(v85, &qword_D3A08);
    if (v84)
    {
      swift_bridgeObjectRetain(v84);
      uint64_t v86 = v107;
      String.toSpeakableString.getter(v105);
      sub_16EDC();
      uint64_t v87 = 1LL;
      sub_17AF4(v86, 0LL);
      sub_4ADF4(v77 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_timeOnlyString, (uint64_t)v120);
      sub_4AFD0();
      uint64_t v88 = sub_4AE1C();
      sub_17054(v88, &qword_D3A08);
      sub_16EDC();
      uint64_t v89 = v106;
      if (v106)
      {
        String.toSpeakableString.getter(v104);
        swift_bridgeObjectRelease(v89);
        uint64_t v87 = 0LL;
      }
    }

    else
    {
      uint64_t v87 = 1LL;
      sub_17AF4(v107, 1LL);
      sub_4ADF4(v77 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_timeOnlyString, (uint64_t)v120);
      sub_4AFD0();
      uint64_t v90 = sub_4AE1C();
      sub_17054(v90, &qword_D3A08);
    }

    sub_17AF4(v83, v87);
    sub_4ADE0();
    sub_4AE3C(v83);
    sub_4AE1C();
    sub_16A3C(v83, &qword_D3A08);
    uint64_t v91 = sub_2257C(v47, (SEL *)&selRef_identifier);
    if (v92)
    {
      unint64_t v93 = v92;
    }

    else
    {
      uint64_t v91 = 0LL;
      unint64_t v93 = 0xE000000000000000LL;
    }

    uint64_t v94 = static AlarmID.alarmUUID(fromIdentifier:)(v91, v93);
    uint64_t v96 = v95;
    swift_bridgeObjectRelease(v93);
    if (v96) {
      uint64_t v97 = v94;
    }
    else {
      uint64_t v97 = 0LL;
    }
    if (v96) {
      uint64_t v98 = v96;
    }
    else {
      uint64_t v98 = 0xE000000000000000LL;
    }
    sub_4F3E0(v97, v98, 0LL, 0LL);
    uint64_t v100 = v99;
    swift_bridgeObjectRelease(v98);
    sub_4AF88();
    uint64_t v101 = type metadata accessor for AlarmAlarm(0LL);
    sub_16D14(v101);
    uint64_t v102 = swift_retain(v100);
    sub_8A7C(v102);
    sub_16FFC();
    sub_17B94();
    swift_release(v119);
  }

  sub_16CB0();
}

void sub_489F8()
{
  uint64_t v129 = v5;
  uint64_t v130 = v4;
  unint64_t v131 = v7;
  uint64_t v132 = v6;
  uint64_t v141 = v8;
  uint64_t v9 = type metadata accessor for Locale(0LL);
  uint64_t v127 = *(void *)(v9 - 8);
  uint64_t v128 = v9;
  sub_16AFC();
  __chkstk_darwin(v10);
  sub_17390();
  uint64_t v13 = v12 - v11;
  uint64_t v125 = type metadata accessor for PunchOutApp(0LL);
  uint64_t v14 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  sub_177C0();
  sub_26B0((uint64_t *)&unk_D36C0);
  sub_215E4();
  __chkstk_darwin(v15);
  sub_16B08();
  uint64_t v133 = v16;
  sub_16AF0();
  __chkstk_darwin(v17);
  uint64_t v135 = (uint64_t)&v115 - v18;
  sub_26B0(&qword_D3820);
  sub_215E4();
  __chkstk_darwin(v19);
  sub_17390();
  uint64_t v22 = v21 - v20;
  uint64_t v138 = sub_4AFA8();
  uint64_t v134 = *(void *)(v138 - 8);
  sub_16AFC();
  __chkstk_darwin(v23);
  sub_16B08();
  uint64_t v126 = v24;
  sub_16AF0();
  uint64_t v26 = __chkstk_darwin(v25);
  sub_4AFF0(v26, v27, v28, v29, v30, v31, v32, v33, v115);
  sub_26B0(&qword_D3A08);
  sub_215E4();
  __chkstk_darwin(v34);
  sub_4AEEC();
  __chkstk_darwin(v35);
  sub_4AE74();
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v115 - v37;
  uint64_t v39 = (os_log_s *)sub_1EC14();
  uint64_t v140 = *((void *)v39 - 1);
  sub_16AFC();
  __chkstk_darwin(v40);
  sub_16B08();
  uint64_t v124 = v41;
  sub_16AF0();
  __chkstk_darwin(v42);
  uint64_t v139 = (uint64_t)&v115 - v43;
  sub_16AF0();
  __chkstk_darwin(v44);
  BOOL v46 = (uint8_t *)&v115 - v45;
  uint64_t v136 = v0;
  sub_4828C();
  if (v47)
  {
    uint64_t v48 = v47;
    sub_44CFC(v47 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_formattedTimeString, (uint64_t)v38, &qword_D3A08);
    sub_16BBC((uint64_t)v38, 1LL, (uint64_t)v39);
    if (v58)
    {
      uint64_t v3 = (uint64_t)v38;
    }

    else
    {
      uint64_t v122 = v13;
      uint64_t v55 = v140;
      uint64_t v56 = (uint64_t)v38;
      uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v140 + 32);
      sub_17A5C((uint64_t)v46, v56, v57);
      sub_44CFC(v48 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_labelForSnippetWithRecurrence, v3, &qword_D3A08);
      sub_16BBC(v3, 1LL, (uint64_t)v39);
      if (!v58)
      {
        uint64_t v123 = v46;
        uint64_t v62 = v139;
        uint64_t v119 = (uint64_t (*)(void))v57;
        v57(v139, v3, (uint64_t)v39);
        id v63 = v136;
        sub_97408(v136, v22);
        uint64_t v64 = sub_4AF5C();
        uint64_t v65 = v138;
        sub_16BBC(v64, v66, v138);
        uint64_t v121 = v39;
        if (!v67)
        {
          uint64_t v74 = v63;
          uint64_t v120 = v48;
          uint64_t v75 = v134;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 32))(v137, v22, v65);
          uint64_t v76 = *(uint64_t (**)(uint64_t, void, uint64_t))(v14 + 104);
          uint64_t v77 = v125;
          uint64_t v78 = v76(v1, enum case for PunchOutApp.alarm(_:), v125);
          uint64_t v79 = v135;
          PunchOutApp.url.getter(v78);
          uint64_t v80 = v77;
          uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
          v81(v1, v77);
          id v82 = [v74 sleepAlarmAttribute];

          if (v82)
          {
            uint64_t v83 = v76(v1, enum case for PunchOutApp.sleepAlarm(_:), v80);
            uint64_t v84 = v133;
            PunchOutApp.url.getter(v83);
            v81(v1, v80);
            sub_16A3C(v79, (uint64_t *)&unk_D36C0);
            sub_5A34(v84, v79, (uint64_t *)&unk_D36C0);
          }

          if (*(void *)(v120 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_time))
          {
            uint64_t v85 = sub_47DE4();
            dispatch thunk of DialogCalendar.nonSpecificDateTimeDescriptive.getter(v85);
            sub_16BBC(v2, 1LL, (uint64_t)v121);
            unint64_t v86 = v131;
            uint64_t v87 = v129;
            uint64_t v88 = v137;
            if (v58)
            {
              uint64_t v89 = sub_16FD8();
              sub_4AF3C(v89, &qword_D3A08);
              sub_4AFB8();
            }

            else
            {
              id v90 = v82;
              uint64_t v91 = v124;
              sub_4B060();
              uint64_t v92 = v119();
              SpeakableString.print.getter(v92);
              Swift::String v93 = String.labelCapitalization()();
              uint64_t countAndFlagsBits = v93._countAndFlagsBits;
              object = v93._object;
              sub_16C48();
              sub_16FD8();
              uint64_t v94 = v91;
              id v82 = v90;
              sub_16D0C(v94, *(uint64_t (**)(uint64_t, uint64_t))(v140 + 8));
            }
          }

          else
          {
            sub_4AFB8();
            unint64_t v86 = v131;
            uint64_t v87 = v129;
            uint64_t v88 = v137;
          }

          uint64_t v95 = sub_2257C(v136, (SEL *)&selRef_identifier);
          if (v96) {
            uint64_t v97 = (void *)v95;
          }
          else {
            uint64_t v97 = 0LL;
          }
          uint64_t v136 = v97;
          if (v96) {
            unint64_t v98 = v96;
          }
          else {
            unint64_t v98 = 0xE000000000000000LL;
          }
          unint64_t v131 = v98;
          uint64_t v129 = SpeakableString.print.getter(v95);
          uint64_t v125 = v99;
          uint64_t v100 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 16);
          uint64_t v101 = v126;
          uint64_t v102 = v138;
          uint64_t v103 = sub_4B010(v126, v88, v100);
          LODWORD(v124) = *(unsigned __int8 *)(v120 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_enabled);
          uint64_t v119 = (uint64_t (*)(void))SpeakableString.print.getter(v103);
          uint64_t v118 = v104;
          uint64_t v105 = qword_D3200;
          swift_bridgeObjectRetain(v86);
          swift_bridgeObjectRetain(v87);
          BOOL v58 = v105 == -1;
          unint64_t v106 = v86;
          if (!v58) {
            swift_once(&qword_D3200, sub_97960);
          }
          BOOL v107 = v82 != 0LL;
          uint64_t v108 = v128;
          uint64_t v109 = sub_26F0(v128, (uint64_t)qword_D79E0);
          uint64_t v110 = v122;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16))(v122, v109, v108);
          uint64_t v111 = v135;
          uint64_t v112 = v133;
          sub_44CFC(v135, v133, (uint64_t *)&unk_D36C0);
          unint64_t v114 = v106;
          uint64_t v113 = v141;
          SiriAlarmSnippetModel.init(id:isSleepAlarm:formattedTimeString:alarmDate:enabled:labelForSnippetWithRecurrence:sleepWakeUpLabel:sleepDisabledLabel:nonSpecificDateTimeDescriptive:locale:punchoutURL:)( v136,  v131,  v107,  v129,  v125,  v101,  v124,  v119,  v118,  v132,  v114,  v130,  v87,  countAndFlagsBits,  object,  v110,  v112);
          sub_4AF44();
          sub_16A3C(v111, (uint64_t *)&unk_D36C0);
          (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v137, v102);
          sub_4AF14(v139);
          sub_4AF14((uint64_t)v123);
          uint64_t v71 = sub_4B050();
          uint64_t v72 = v113;
          uint64_t v73 = 0LL;
          goto LABEL_26;
        }

        sub_16A3C(v22, &qword_D3820);
        if (qword_D3058 != -1) {
          swift_once(&qword_D3058, sub_499FC);
        }
        uint64_t v68 = sub_16C80();
        sub_16CD0(v68, (uint64_t)qword_D5308);
        os_log_type_t v69 = sub_16D40();
        if (sub_16ACC(v69))
        {
          unint64_t v70 = (uint8_t *)sub_16AC4(2LL);
          *(_WORD *)unint64_t v70 = 0;
          sub_16B44(&dword_0, v39, (os_log_type_t)v48, "Can NOT retrieve alarm Date.", v70);
          sub_16AA8((uint64_t)v70);
        }

        sub_16FFC();

        sub_4AF14(v62);
        sub_4AF14((uint64_t)v123);
LABEL_25:
        uint64_t v71 = sub_4B050();
        uint64_t v72 = v141;
        uint64_t v73 = 1LL;
LABEL_26:
        sub_A40C(v72, v73, 1LL, v71);
        sub_16CB0();
        return;
      }

      (*(void (**)(uint8_t *, os_log_s *))(v55 + 8))(v46, v39);
    }

    sub_16A3C(v3, &qword_D3A08);
    if (qword_D3058 != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    uint64_t v59 = sub_16C80();
    sub_16CD0(v59, (uint64_t)qword_D5308);
    os_log_type_t v60 = sub_16D40();
    if (sub_16ACC(v60))
    {
      id v61 = (_WORD *)sub_16AC4(2LL);
      sub_16CE4(v61);
      sub_16B44( &dword_0,  v39,  (os_log_type_t)v48,  "Can NOT retrieve alarm formattedTimeString or labelForSnippetWithRecurrence.",  v46);
      sub_16AA8((uint64_t)v46);
      sub_16FFC();
    }

    else
    {

      sub_16FFC();
    }

    goto LABEL_25;
  }

  if (qword_D3058 != -1) {
    swift_once(&qword_D3058, sub_499FC);
  }
  uint64_t v49 = sub_16C80();
  sub_16CD0(v49, (uint64_t)qword_D5308);
  os_log_type_t v50 = sub_16D40();
  if (sub_16ACC(v50))
  {
    uint64_t v51 = (_WORD *)sub_16AC4(2LL);
    *uint64_t v51 = 0;
    sub_16ADC(&dword_0, v52, v53, "Can NOT retrieve alarm data.");
    sub_16AA8((uint64_t)v51);
  }

  uint64_t v54 = sub_4B050();
  sub_4AE24(v141, 1LL, 1LL, v54);
}

void sub_4926C()
{
  uint64_t v2 = v0;
  sub_26B0(&qword_D3A08);
  sub_215E4();
  __chkstk_darwin(v3);
  sub_4AF90();
  sub_2257C(v0, (SEL *)&selRef_identifier);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = sub_93F70();
    swift_bridgeObjectRelease(v5);
    uint64_t ObjectType = swift_getObjectType(v6);
    sub_49A44(ObjectType, v1);
    swift_unknownObjectRelease(v6);
    uint64_t v8 = type metadata accessor for AlarmAlarm.Builder(0LL);
    sub_16D14(v8);
    uint64_t v9 = sub_7F58();
    sub_4ADF4(v9 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_action, (uint64_t)v33);
    sub_4AE3C(v1);
    swift_endAccess(v33);
    swift_retain(v9);
    sub_4828C();
    uint64_t v10 = sub_16EBC(v9);
    sub_4B034(v10, &qword_D3A08);
  }

  else
  {
    if (qword_D3058 != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    uint64_t v11 = sub_16C80();
    sub_26F0(v11, (uint64_t)qword_D5308);
    uint64_t v12 = v0;
    Logger.logObject.getter(v12, v13, v14, v15, v16, v17, v18, v19);
    os_log_type_t v20 = sub_16D40();
    if (sub_4AF34(v0))
    {
      uint64_t v21 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v22 = sub_16AC4(32LL);
      v33[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v23 = v12;
      id v24 = -[os_log_s description](v23, "description", v33[0]);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v26 = v25;

      uint64_t v29 = sub_4AFE4(v27, v28, v33);
      uint64_t v30 = sub_4AF1C(v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v30, v31, v32, v21 + 12);

      swift_bridgeObjectRelease(v26);
      sub_16BD0(&dword_0, v2, v20, "Alarm ID was nil for alarm: %s", v21);
      sub_16BB4(v22);
      sub_16AA8(v22);
      sub_16AA8((uint64_t)v21);
    }

    else
    {
    }
  }

  sub_16CB0();
}

void sub_494C8()
{
  uint64_t v84 = v6;
  uint64_t v8 = v7;
  uint64_t v89 = type metadata accessor for Locale(0LL);
  uint64_t v87 = *(void *)(v89 - 8);
  sub_16AFC();
  __chkstk_darwin(v9);
  sub_16B30();
  uint64_t v88 = v10;
  sub_26B0(&qword_D3820);
  sub_215E4();
  __chkstk_darwin(v11);
  sub_22FFC();
  id v90 = (os_log_s *)sub_4AFA8();
  uint64_t v86 = *((void *)v90 - 1);
  sub_16AFC();
  __chkstk_darwin(v12);
  sub_16B08();
  uint64_t v83 = v13;
  sub_16AF0();
  uint64_t v15 = __chkstk_darwin(v14);
  sub_4AFF0(v15, v16, v17, v18, v19, v20, v21, v22, v73);
  sub_26B0(&qword_D3A08);
  sub_215E4();
  __chkstk_darwin(v23);
  sub_4AEB4();
  __chkstk_darwin(v24);
  uint64_t v25 = sub_4AE60();
  uint64_t v26 = (uint8_t *)type metadata accessor for SpeakableString(v25);
  sub_17780();
  __chkstk_darwin(v27);
  sub_4AE74();
  __chkstk_darwin(v28);
  uint64_t v30 = (os_log_s *)((char *)&v73 - v29);
  sub_4828C();
  if (v31)
  {
    uint64_t v32 = v31;
    sub_44CFC(v31 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_formattedTimeString, v3, &qword_D3A08);
    sub_215B8(v3);
    if (v41)
    {
      uint64_t v4 = v3;
    }

    else
    {
      uint64_t v81 = v5;
      uint64_t v82 = v8;
      uint64_t v39 = (void (*)(void))*((void *)v0 + 4);
      uint64_t v40 = v0;
      uint64_t v0 = v30;
      sub_4B060();
      v39();
      sub_44CFC(v32 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_labelForSnippetWithRecurrence, v4, &qword_D3A08);
      sub_215B8(v4);
      if (!v41)
      {
        uint64_t v80 = v40;
        uint64_t v45 = v81;
        ((void (*)(uint64_t, uint64_t, uint8_t *))v39)(v81, v4, v26);
        sub_97408(v1, v2);
        BOOL v46 = v90;
        sub_16BBC(v2, 1LL, (uint64_t)v90);
        if (!v47)
        {
          uint64_t v54 = v86;
          uint64_t v55 = v85;
          uint64_t v56 = sub_17A5C(v85, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 32));
          uint64_t v57 = sub_4AFB0(v56, (SEL *)&selRef_identifier);
          if (v58) {
            uint64_t v59 = v57;
          }
          else {
            uint64_t v59 = 0LL;
          }
          unint64_t v60 = 0xE000000000000000LL;
          if (v58) {
            unint64_t v60 = v58;
          }
          unint64_t v77 = v60;
          uint64_t v78 = v59;
          uint64_t v79 = v30;
          uint64_t v61 = SpeakableString.print.getter(v57);
          uint64_t v75 = v62;
          uint64_t v76 = v61;
          uint64_t v63 = v83;
          uint64_t v64 = sub_17A5C(v83, v55, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 16));
          uint64_t v65 = SpeakableString.print.getter(v64);
          uint64_t v73 = v66;
          uint64_t v74 = v65;
          uint64_t v67 = AlarmNLv4Constants.AlarmVerb.rawValue.getter(v65);
          uint64_t v69 = v68;
          uint64_t v70 = v82;
          if (qword_D3200 != -1) {
            swift_once(&qword_D3200, sub_97960);
          }
          uint64_t v71 = sub_26F0(v89, (uint64_t)qword_D79E0);
          uint64_t v72 = v88;
          sub_4B010(v88, v71, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 16));
          SiriAlarmItemModel.init(id:formattedTimeString:alarmDate:labelForSnippetWithRecurrence:invocationVerbValue:locale:)( v78,  v77,  v76,  v75,  v63,  v74,  v73,  v67,  v69,  v72);
          sub_16FFC();
          (*(void (**)(uint64_t, os_log_s *))(v54 + 8))(v55, v90);
          sub_384EC(v81);
          sub_384EC((uint64_t)v79);
          uint64_t v51 = sub_4B048();
          uint64_t v52 = v70;
          uint64_t v53 = 0LL;
          goto LABEL_26;
        }

        sub_16A3C(v2, &qword_D3820);
        uint64_t v8 = v82;
        if (qword_D3058 != -1) {
          swift_once(&qword_D3058, sub_499FC);
        }
        uint64_t v48 = sub_16C80();
        sub_16CD0(v48, (uint64_t)qword_D5308);
        os_log_type_t v49 = sub_16D40();
        if (sub_16ACC(v49))
        {
          os_log_type_t v50 = (uint8_t *)sub_16AC4(2LL);
          *(_WORD *)os_log_type_t v50 = 0;
          sub_16B44(&dword_0, v46, (os_log_type_t)v1, "Can NOT retrieve alarm Date.", v50);
          sub_16AA8((uint64_t)v50);
        }

        sub_16FFC();

        sub_384EC(v45);
        sub_384EC((uint64_t)v30);
LABEL_25:
        uint64_t v51 = sub_4B048();
        uint64_t v52 = v8;
        uint64_t v53 = 1LL;
LABEL_26:
        sub_A40C(v52, v53, 1LL, v51);
        sub_16CB0();
        return;
      }

      sub_16D0C((uint64_t)v30, *((uint64_t (**)(uint64_t, uint64_t))v40 + 1));
      uint64_t v8 = v82;
    }

    sub_16A3C(v4, &qword_D3A08);
    if (qword_D3058 != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    uint64_t v42 = sub_16C80();
    sub_16CD0(v42, (uint64_t)qword_D5308);
    os_log_type_t v43 = sub_16D40();
    if (sub_16ACC(v43))
    {
      uint64_t v44 = (_WORD *)sub_16AC4(2LL);
      sub_16CE4(v44);
      sub_16B44( &dword_0,  v0,  (os_log_type_t)v1,  "Can NOT retrieve alarm formattedTimeString or labelForSnippetWithRecurrence.",  v26);
      sub_16AA8((uint64_t)v26);
      sub_16FFC();
    }

    else
    {

      sub_16FFC();
    }

    goto LABEL_25;
  }

  if (qword_D3058 != -1) {
    swift_once(&qword_D3058, sub_499FC);
  }
  uint64_t v33 = sub_16C80();
  sub_16CD0(v33, (uint64_t)qword_D5308);
  os_log_type_t v34 = sub_16D40();
  if (sub_16ACC(v34))
  {
    uint64_t v35 = (_WORD *)sub_16AC4(2LL);
    *uint64_t v35 = 0;
    sub_16ADC(&dword_0, v36, v37, "Can NOT retrieve alarm data.");
    sub_16AA8((uint64_t)v35);
  }

  uint64_t v38 = sub_4B048();
  sub_4AE24(v8, 1LL, 1LL, v38);
}

uint64_t sub_499FC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D5308);
  sub_26F0(v0, (uint64_t)qword_D5308);
  return static SiriTimeLog.alarmPlugin.getter();
}

void sub_49A44(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v7 = objc_opt_self(&OBJC_CLASS___SABaseCommand);
  uint64_t v8 = swift_dynamicCastObjCClass(v2, v7);
  if (v8)
  {
    uint64_t v9 = (os_log_s *)v8;
    sub_4B02C();
    uint64_t v2 = v9;
    Swift::String_optional v10 = AceObject.serializeToBase64()();
    if (v10.value._object)
    {
      String.toSpeakableString.getter(v10.value._countAndFlagsBits);
      sub_17658();
      sub_16C48();
      sub_1EC14();
      sub_4AF08();
      sub_4AE00(v11, v12, v13, v14);
      return;
    }

    if (qword_D3058 != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    uint64_t v30 = sub_16C80();
    sub_26F0(v30, (uint64_t)qword_D5308);
    uint64_t v31 = sub_4AF4C();
    Logger.logObject.getter(v31, v32, v33, v34, v35, v36, v37, v38);
    os_log_type_t v39 = sub_17714();
    if (sub_286C4(v39))
    {
      uint64_t v40 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v41 = sub_16AC4(32LL);
      uint64_t v55 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      sub_4B02C();
      id v42 = -[os_log_s description](v9, "description");
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      unint64_t v45 = v44;
      sub_17658();

      sub_3D10(v43, v45, &v55);
      sub_4AF70();
      sub_17BB8(v46, v47, v48);
      sub_4B03C();
      sub_17900();
      sub_16BD0(&dword_0, v2, v3, "Failed to serialize disambiguation action: %s", v40);
      sub_16BB4(v41);
      sub_16AA8(v41);
      sub_16AA8((uint64_t)v40);
      sub_17658();
      goto LABEL_12;
    }

    os_log_type_t v49 = v4;
    uint64_t v50 = 3LL;
LABEL_15:
    swift_unknownObjectRelease_n(v49, v50);
    goto LABEL_16;
  }

  if (qword_D3058 != -1) {
    swift_once(&qword_D3058, sub_499FC);
  }
  uint64_t v15 = sub_16C80();
  sub_26F0(v15, (uint64_t)qword_D5308);
  uint64_t v16 = sub_4AF4C();
  Logger.logObject.getter(v16, v17, v18, v19, v20, v21, v22, v23);
  os_log_type_t v24 = sub_17714();
  if (!sub_286C4(v24))
  {

    os_log_type_t v49 = v2;
    uint64_t v50 = 2LL;
    goto LABEL_15;
  }

  uint64_t v25 = (uint8_t *)sub_16AC4(12LL);
  uint64_t v26 = sub_16AC4(32LL);
  uint64_t v54 = (uint64_t)v2;
  uint64_t v55 = v26;
  *(_DWORD *)uint64_t v25 = 136315138;
  sub_4B02C();
  uint64_t v27 = String.init<A>(describing:)(&v54, a1);
  unint64_t v29 = v28;
  uint64_t v54 = sub_3D10(v27, v28, &v55);
  sub_17BB8((uint64_t)&v54, (uint64_t)&v55, (uint64_t)(v25 + 4));
  sub_4B03C();
  swift_bridgeObjectRelease(v29);
  sub_16BD0(&dword_0, v2, v3, "Unable to cast SAClientBoundCommand to SABaseCommand: %s", v25);
  sub_16BB4(v26);
  sub_16AA8(v26);
  sub_16AA8((uint64_t)v25);
LABEL_12:

LABEL_16:
  uint64_t v51 = sub_1EC14();
  sub_23050(a2, v52, v53, v51);
  sub_4AE44();
}

uint64_t sub_49D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_log_type_t v3 = v2;
  uint64_t v173 = a2;
  uint64_t v5 = sub_26B0(&qword_D3A08);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v170 = (char *)&v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v161 - v8;
  uint64_t v174 = sub_26B0(&qword_D5338);
  uint64_t v10 = __chkstk_darwin(v174);
  uint64_t v169 = (char *)&v161 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v167 = (char *)&v161 - v12;
  uint64_t v176 = type metadata accessor for SpeakableString(0LL);
  uint64_t v13 = *(void *)(v176 - 8);
  uint64_t v14 = __chkstk_darwin(v176);
  uint64_t v164 = (char *)&v161 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v171 = (char *)&v161 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v168 = (char *)&v161 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v161 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v165 = (char *)&v161 - v24;
  __chkstk_darwin(v23);
  uint64_t v166 = (char *)&v161 - v25;
  uint64_t v26 = type metadata accessor for CATOption(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v29 = (char *)&v161 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v172 = v13;
  if (a1)
  {
    uint64_t v175 = a1;
  }

  else
  {
    type metadata accessor for AlarmBaseCATs_Async(0LL);
    uint64_t v30 = sub_26B0(&qword_D5340);
    uint64_t v31 = v9;
    uint64_t v32 = v3;
    uint64_t v33 = v22;
    uint64_t v34 = swift_allocObject( v30,  ((*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))
          + *(void *)(v27 + 72),
            *(unsigned __int8 *)(v27 + 80) | 7LL);
    *(_OWORD *)(v34 + 16) = xmmword_A4880;
    static CATOption.labelMode.getter();
    v179[0] = v34;
    unint64_t v35 = sub_4AD5C();
    uint64_t v36 = sub_26B0(&qword_D5350);
    unint64_t v37 = sub_4AD9C();
    unint64_t v38 = v35;
    uint64_t v22 = v33;
    os_log_type_t v3 = v32;
    uint64_t v9 = v31;
    dispatch thunk of SetAlgebra.init<A>(_:)(v179, v36, v37, v26, v38);
    uint64_t v13 = v172;
    uint64_t v175 = CATWrapper.__allocating_init(options:globals:)(v29, 0LL);
  }

  uint64_t v180 = _swiftEmptyArrayStorage;
  swift_retain(a1);
  sub_4ACEC(v3);
  uint64_t v40 = &qword_D3000;
  if (!v39) {
    goto LABEL_31;
  }
  uint64_t v41 = v39;
  uint64_t v163 = v22;
  id v42 = sub_509A8(v39);
  sub_50DB4((uint64_t)v42);
  uint64_t v44 = v43;
  if (qword_D3080 != -1) {
    swift_once(&qword_D3080, sub_50B7C);
  }
  sub_50E40(v44, qword_D83C0);
  char v46 = v45;
  swift_bridgeObjectRelease(v44);
  uint64_t v47 = &off_D8000;
  if ((v46 & 1) == 0)
  {
    uint64_t v48 = sub_509A8(v41);
    sub_50DB4((uint64_t)v48);
    uint64_t v50 = v49;
    if (qword_D3088 != -1) {
      swift_once(&qword_D3088, sub_50BA0);
    }
    sub_50E40(v50, qword_D83C8);
    char v52 = v51;
    swift_bridgeObjectRelease(v50);
    if ((v52 & 1) != 0)
    {
      uint64_t v47 = &off_D8000;
    }

    else
    {
      uint64_t v53 = sub_509A8(v41);
      sub_50DB4((uint64_t)v53);
      uint64_t v55 = v54;
      if (qword_D3090 != -1) {
        swift_once(&qword_D3090, sub_50BC4);
      }
      sub_50E40(v55, qword_D83D0);
      char v57 = v56;
      uint64_t v58 = v55;
      uint64_t v47 = &off_D8000;
      swift_bridgeObjectRelease(v58);
      if ((v57 & 1) == 0) {
        goto LABEL_22;
      }
    }
  }

  uint64_t v162 = v3;
  uint64_t v59 = v13;
  unint64_t v60 = sub_509A8(v41);
  sub_50DB4((uint64_t)v60);
  uint64_t v62 = v61;
  if (qword_D3090 != -1) {
    swift_once(&qword_D3090, sub_50BC4);
  }
  sub_50E40(v62, (uint64_t)v47[122]);
  char v64 = v63;
  swift_bridgeObjectRelease(v62);
  uint64_t v65 = sub_509A8(v41);
  sub_50DB4((uint64_t)v65);
  uint64_t v67 = v66;
  sub_50E40(v66, qword_D83C0);
  char v69 = v68;
  swift_bridgeObjectRelease(v67);
  uint64_t v70 = sub_509A8(v41);
  sub_50DB4((uint64_t)v70);
  uint64_t v72 = v71;
  if (qword_D3088 != -1) {
    swift_once(&qword_D3088, sub_50BA0);
  }
  sub_50E40(v72, qword_D83C8);
  char v74 = v73;
  swift_bridgeObjectRelease(v72);
  sub_A40C((uint64_t)v9, 1LL, 1LL, v176);
  char v75 = v74 & 1;
  uint64_t v76 = (uint64_t)v167;
  sub_38644(1, 1, v64 & 1, v69 & 1, v75, (uint64_t)v9);
  sub_16A3C((uint64_t)v9, &qword_D3A08);
  uint64_t v77 = Result<>.firstPrint.getter(v174);
  uint64_t v79 = v78;
  sub_16A3C(v76, &qword_D5338);
  if (!v79)
  {
    uint64_t v13 = v59;
    os_log_type_t v3 = v162;
LABEL_22:
    if ((unint64_t)v41 >> 62)
    {
      if (v41 >= 0) {
        uint64_t v160 = v41 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v160 = v41;
      }
      swift_bridgeObjectRetain(v41);
      uint64_t v89 = _CocoaArrayWrapper.endIndex.getter(v160);
      swift_bridgeObjectRelease(v41);
    }

    else
    {
      uint64_t v89 = *(void *)((char *)&dword_10 + (v41 & 0xFFFFFFFFFFFFFF8LL));
    }

    uint64_t v90 = v175;
    swift_retain(v175);
    uint64_t v87 = sub_47E70(v41, v90, v89 > 1, v89 < 2);
    swift_bridgeObjectRelease(v41);
    goto LABEL_25;
  }

  uint64_t v80 = v165;
  String.toSpeakableString.getter(v77);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v79);
  uint64_t v13 = v59;
  uint64_t v81 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
  uint64_t v82 = v166;
  uint64_t v83 = v176;
  v81(v166, v80, v176);
  uint64_t v84 = sub_26B0(&qword_D5360);
  uint64_t v85 = *(unsigned __int8 *)(v59 + 80);
  uint64_t v86 = (v85 + 32) & ~v85;
  uint64_t v87 = (void *)swift_allocObject(v84, v86 + *(void *)(v59 + 72), v85 | 7);
  *((_OWORD *)v87 + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = xmmword_A4880;
  uint64_t v88 = v83;
  uint64_t v40 = &qword_D3000;
  v81((char *)v87 + v86, v82, v88);
  os_log_type_t v3 = v162;
LABEL_25:
  uint64_t v180 = v87;
  if (qword_D3058 != -1) {
    swift_once(&qword_D3058, sub_499FC);
  }
  uint64_t v91 = type metadata accessor for Logger(0LL);
  sub_26F0(v91, (uint64_t)qword_D5308);
  uint64_t v92 = v180;
  uint64_t v93 = swift_bridgeObjectRetain_n(v180, 2LL);
  uint64_t v101 = (os_log_s *)Logger.logObject.getter(v93, v94, v95, v96, v97, v98, v99, v100);
  os_log_type_t v102 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v101, v102))
  {
    uint64_t v103 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v104 = swift_slowAlloc(32LL, -1LL);
    v179[0] = v104;
    *(_DWORD *)uint64_t v103 = 136315138;
    uint64_t v105 = swift_bridgeObjectRetain(v92);
    uint64_t v106 = Array.description.getter(v105, v176);
    BOOL v107 = v3;
    unint64_t v109 = v108;
    swift_bridgeObjectRelease(v92);
    uint64_t v178 = sub_3D10(v106, v109, v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, v179, v103 + 4, v103 + 12);
    swift_bridgeObjectRelease_n(v92, 2LL);
    unint64_t v110 = v109;
    os_log_type_t v3 = v107;
    uint64_t v40 = &qword_D3000;
    swift_bridgeObjectRelease(v110);
    _os_log_impl( &dword_0,  v101,  v102,  "[SiriAlarm.buildLocalizedSnippetLabel] Repeat schedule has days: %s",  v103,  0xCu);
    swift_arrayDestroy(v104, 1LL);
    swift_slowDealloc(v104, -1LL, -1LL);
    uint64_t v111 = v103;
    uint64_t v13 = v172;
    swift_slowDealloc(v111, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v92, 2LL);
  }

  uint64_t v22 = v163;
LABEL_31:
  uint64_t v112 = sub_2257C(v3, (SEL *)&selRef_label);
  if (v113)
  {
    uint64_t v114 = v113;
    uint64_t v115 = (uint64_t)v170;
    String.toSpeakableString.getter(v112);
    swift_bridgeObjectRelease(v114);
    uint64_t v116 = 0LL;
  }

  else
  {
    uint64_t v116 = 1LL;
    uint64_t v115 = (uint64_t)v170;
  }

  uint64_t v117 = v171;
  sub_A40C(v115, v116, 1LL, v176);
  swift_beginAccess(&v180, v179, 0LL, 0LL);
  uint64_t v118 = v180;
  uint64_t v119 = (uint64_t)v169;
  sub_388B4(v115, (uint64_t)v180);
  swift_bridgeObjectRelease(v118);
  sub_16A3C(v115, &qword_D3A08);
  uint64_t v120 = Result<>.firstPrint.getter(v174);
  uint64_t v122 = v121;
  sub_16A3C(v119, &qword_D5338);
  if (v122)
  {
    uint64_t v123 = v168;
    String.toSpeakableString.getter(v120);
    swift_bridgeObjectRelease(v122);
    uint64_t v124 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v124(v22, v123, v176);
    if (v40[11] != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    uint64_t v125 = type metadata accessor for Logger(0LL);
    sub_26F0(v125, (uint64_t)qword_D5308);
    uint64_t v126 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v127 = v126(v117, v22, v176);
    uint64_t v135 = (os_log_s *)Logger.logObject.getter(v127, v128, v129, v130, v131, v132, v133, v134);
    os_log_type_t v136 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v135, v136))
    {
      uint64_t v137 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v138 = swift_slowAlloc(32LL, -1LL);
      uint64_t v139 = v176;
      uint64_t v140 = v138;
      uint64_t v178 = v138;
      uint64_t v174 = (uint64_t)v124;
      *(_DWORD *)uint64_t v137 = 136315138;
      uint64_t v171 = (char *)(v137 + 4);
      uint64_t v141 = v164;
      v126(v164, v117, v139);
      uint64_t v142 = String.init<A>(describing:)(v141, v139);
      unint64_t v144 = v143;
      uint64_t v177 = sub_3D10(v142, v143, &v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v171, v137 + 12);
      swift_bridgeObjectRelease(v144);
      uint64_t v124 = (void (*)(char *, char *, uint64_t))v174;
      (*(void (**)(char *, uint64_t))(v172 + 8))(v117, v139);
      _os_log_impl( &dword_0,  v135,  v136,  "[SiriAlarm.buildLocalizedSnippetLabel] Created localized snippet label: %s",  v137,  0xCu);
      swift_arrayDestroy(v140, 1LL);
      swift_slowDealloc(v140, -1LL, -1LL);
      swift_slowDealloc(v137, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v117, v176);
    }

    swift_release(v175);
    uint64_t v158 = v173;
    v124((char *)v173, v22, v176);
    uint64_t v157 = 0LL;
  }

  else
  {
    if (v40[11] != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    uint64_t v145 = type metadata accessor for Logger(0LL);
    uint64_t v146 = sub_26F0(v145, (uint64_t)qword_D5308);
    uint64_t v154 = (os_log_s *)Logger.logObject.getter(v146, v147, v148, v149, v150, v151, v152, v153);
    os_log_type_t v155 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v154, v155))
    {
      uint64_t v156 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v156 = 0;
      _os_log_impl( &dword_0,  v154,  v155,  "[SiriAlarm.buildLocalizedSnippetLabel] Failed to execute CAT to create localized snippet label!",  v156,  2u);
      swift_slowDealloc(v156, -1LL, -1LL);
    }

    swift_release(v175);
    uint64_t v157 = 1LL;
    uint64_t v158 = v173;
  }

  return sub_A40C(v158, v157, 1LL, v176);
}

uint64_t sub_4A910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = sub_4B058();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_4AED0();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v21 - v12;
  sub_4AA60((uint64_t)v8);
  uint64_t v14 = sub_215B8((uint64_t)v8);
  if (v15)
  {
    sub_17054(v14, &qword_D5330);
    uint64_t v18 = 1LL;
  }

  else
  {
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
    sub_4AAFC(v16, (uint64_t)v6);
    sub_4B060();
    v17();
    DisplayHint.init(idValue:displayValue:)(v6, v1);
    sub_16D0C((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    uint64_t v18 = 0LL;
  }

  uint64_t v19 = type metadata accessor for DisplayHint(0LL);
  return sub_A40C(a1, v18, 1LL, v19);
}

uint64_t sub_4AA60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_2257C(v1, (SEL *)&selRef_label);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    sub_A8D8(3u);
    SemanticValue.init(string:label:nodeClass:)(v5, v6, 0x62614C6D72616C61LL, 0xEA00000000006C65LL, v7, v8);
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v9 = 1LL;
  }

  uint64_t v10 = type metadata accessor for SemanticValue(0LL);
  return sub_A40C(a1, v9, 1LL, v10);
}

void sub_4AAFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_4AFB0(a1, (SEL *)&selRef_identifier);
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    sub_A8D8(2u);
    SemanticValue.init(string:label:nodeClass:)(v6, v7, 0x64496D72616C61LL, 0xE700000000000000LL, v8, v9);
    sub_4B058();
    sub_4AF08();
    sub_4AE00(v10, v11, v12, v13);
  }

  else
  {
    if (qword_D3058 != -1) {
      swift_once(&qword_D3058, sub_499FC);
    }
    uint64_t v14 = sub_16C80();
    sub_26F0(v14, (uint64_t)qword_D5308);
    id v15 = v2;
    sub_4AFDC((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, v37, v38, v39, v40[0], v40[1]);
    os_log_type_t v23 = sub_17714();
    if (os_log_type_enabled((os_log_t)v2, v23))
    {
      uint64_t v24 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v25 = sub_16AC4(32LL);
      v40[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      id v26 = v15;
      id v27 = [v26 description];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      unint64_t v30 = v29;

      sub_3D10(v28, v30, v40);
      sub_4AF70();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v31, v32, v33, v24 + 12);

      sub_16D68();
      sub_16BD0(&dword_0, (os_log_s *)v2, v23, "DisplayHints failed to extract alarm ID from alarm: %s", v24);
      sub_16BB4(v25);
      sub_16AA8(v25);
      sub_16AA8((uint64_t)v24);
    }

    else
    {
    }

    uint64_t v34 = sub_4B058();
    sub_23050(a2, v35, v36, v34);
    sub_4AE44();
  }

void sub_4ACEC(void *a1)
{
  id v1 = [a1 repeatSchedule];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = type metadata accessor for AlarmRepeatSchedule(0LL);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);
  }

  sub_17B50();
}

uint64_t sub_4AD44(void *a1)
{
  return sub_2257C(a1, (SEL *)&selRef_identifier);
}

uint64_t sub_4AD50(void *a1)
{
  return sub_2257C(a1, (SEL *)&selRef_label);
}

unint64_t sub_4AD5C()
{
  unint64_t result = qword_D5348;
  if (!qword_D5348)
  {
    uint64_t v1 = type metadata accessor for CATOption(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CATOption, v1);
    atomic_store(result, (unint64_t *)&qword_D5348);
  }

  return result;
}

unint64_t sub_4AD9C()
{
  unint64_t result = qword_D5358;
  if (!qword_D5358)
  {
    uint64_t v1 = sub_16974(&qword_D5350);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_D5358);
  }

  return result;
}

uint64_t sub_4ADE0()
{
  return swift_beginAccess(v0, v1 - 136, 33LL, 0LL);
}

uint64_t sub_4ADF4(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

uint64_t sub_4AE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_A40C(a1, a2, a3, a4);
}

uint64_t sub_4AE1C()
{
  return swift_endAccess(v0 - 136);
}

uint64_t sub_4AE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_A40C(a1, a2, a3, a4);
}

uint64_t sub_4AE3C(uint64_t a1)
{
  return sub_806C(a1, v1);
}

  ;
}

uint64_t sub_4AE60()
{
  return 0LL;
}

  ;
}

uint64_t sub_4AE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A40C(a1, a2, a3, v3);
}

void sub_4AE8C()
{
}

uint64_t sub_4AE98()
{
  return 0LL;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_4AF14(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_4AF1C(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return v1 - 88;
}

BOOL sub_4AF34(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_4AF3C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_4AF44()
{
  return swift_release(v0);
}

uint64_t sub_4AF4C()
{
  return swift_unknownObjectRetain_n(v0, 2LL);
}

uint64_t sub_4AF5C()
{
  return v0;
}

id sub_4AF68(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

  ;
}

uint64_t sub_4AF88()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_4AFA8()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_4AFB0(uint64_t a1, SEL *a2)
{
  return sub_2257C(v2, a2);
}

void sub_4AFB8()
{
  *(void *)(v0 - 288) = 0LL;
  *(void *)(v0 - 296) = 0xE000000000000000LL;
}

uint64_t sub_4AFD0()
{
  return sub_806C(v1, v0);
}

uint64_t sub_4AFDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return Logger.logObject.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_4AFE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_3D10(v3, v4, a3);
}

void sub_4AFF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 128) = (char *)&a9 - v9;
}

void sub_4B004(uint64_t a1)
{
}

uint64_t sub_4B010@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

uint64_t sub_4B02C()
{
  return swift_unknownObjectRetain(v0);
}

void sub_4B034(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_4B03C()
{
  return swift_unknownObjectRelease_n(v0, 2LL);
}

uint64_t sub_4B048()
{
  return type metadata accessor for SiriAlarmItemModel(0LL);
}

uint64_t sub_4B050()
{
  return type metadata accessor for SiriAlarmSnippetModel(0LL);
}

uint64_t sub_4B058()
{
  return type metadata accessor for SemanticValue(0LL);
}

  ;
}

id sub_4B06C()
{
  return [v0 *(SEL *)(v1 + 952)];
}

uint64_t sub_4B078(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_4B08C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D8258);
}

uint64_t sub_4B0C8()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)( 0xD000000000000026LL,  0x80000000000A92D0LL,  &_swiftEmptyArrayStorage);
}

uint64_t sub_4B0EC()
{
  return type metadata accessor for AlarmBaseCATs_Sync(0LL);
}

uint64_t type metadata accessor for SnoozeCATPatternsExecutor(uint64_t a1)
{
  return sub_8A38(a1, (uint64_t *)&unk_D53C0, (uint64_t)&nominal type descriptor for SnoozeCATPatternsExecutor);
}

uint64_t sub_4B108(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D8268);
}

void sub_4B144()
{
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = sub_26B0(&qword_D3BD0);
  uint64_t v11 = swift_allocObject(v10, 320LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_A5950;
  sub_4DAA0(v11, 0x63416C65636E6163LL);
  uint64_t v12 = sub_1EC14();
  sub_4DA3C((uint64_t)v9);
  if (v13)
  {
    sub_202D8((uint64_t)v9, &qword_D3A08);
    sub_4DB38();
  }

  else
  {
    *(void *)(v11 + 72) = v12;
    uint64_t v14 = sub_4DAD0();
    sub_17620( (uint64_t)v14,  (uint64_t)v9,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL));
  }

  sub_4DAB4();
  *(void *)(v11 + 80) = v15;
  *(void *)(v11 + 88) = 25965LL;
  uint64_t v16 = (int *)type metadata accessor for SnoozeConfirmOtherRoomParameters(0LL);
  sub_3F88(v1 + v16[5], v3, &qword_D3A08);
  sub_4DA3C(v3);
  if (v13)
  {
    sub_202D8(v3, &qword_D3A08);
    sub_4DB38();
  }

  else
  {
    *(void *)(v11 + 120) = v12;
    uint64_t v17 = sub_4DAD0();
    sub_17620((uint64_t)v17, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL));
  }

  *(void *)(v11 + 128) = 0x6E756D6D6F437369LL;
  *(void *)(v11 + 136) = 27745LL;
  *(_BYTE *)(v11 + 144) = *(_BYTE *)(v1 + v16[6]);
  *(void *)(v11 + 168) = &type metadata for Bool;
  *(void *)(v11 + 176) = 0x6E6F737265507369LL;
  *(void *)(v11 + 184) = 27745LL;
  *(_BYTE *)(v11 + 192) = *(_BYTE *)(v1 + v16[7]);
  sub_4DB10();
  *(void *)(v11 + 216) = v19;
  *(void *)(v11 + 224) = v18;
  *(void *)(v11 + 232) = 0xE800000000000000LL;
  sub_3F88(v1 + v16[8], v2, &qword_D3A08);
  sub_4DA3C(v2);
  if (v13)
  {
    sub_202D8(v2, &qword_D3A08);
    *(_OWORD *)(v11 + 240) = 0u;
    *(_OWORD *)(v11 + 256) = 0u;
  }

  else
  {
    *(void *)(v11 + 264) = v12;
    uint64_t v20 = sub_19558((void *)(v11 + 240));
    sub_17620((uint64_t)v20, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL));
  }

  *(void *)(v11 + 272) = 0x6F69746341736579LL;
  *(void *)(v11 + 280) = 0xE90000000000006ELL;
  sub_3F88(v1 + v16[9], v0, &qword_D3A08);
  sub_4DA3C(v0);
  if (v13)
  {
    sub_202D8(v0, &qword_D3A08);
    *(_OWORD *)(v11 + 288) = 0u;
    *(_OWORD *)(v11 + 304) = 0u;
  }

  else
  {
    *(void *)(v11 + 312) = v12;
    uint64_t v21 = sub_19558((void *)(v11 + 288));
    sub_17620((uint64_t)v21, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL));
  }

  sub_16CB0();
}

void sub_4B404()
{
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = sub_26B0(&qword_D3BD0);
  uint64_t v11 = swift_allocObject(v10, 224LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_A4A50;
  sub_4DAA0(v11, 0x6D614E6D72616C61LL);
  uint64_t v12 = sub_1EC14();
  sub_4DA3C((uint64_t)v9);
  if (v13)
  {
    sub_202D8((uint64_t)v9, &qword_D3A08);
    sub_4DB38();
  }

  else
  {
    *(void *)(v11 + 72) = v12;
    uint64_t v14 = sub_4DAD0();
    sub_17620( (uint64_t)v14,  (uint64_t)v9,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL));
  }

  sub_4DAB4();
  *(void *)(v11 + 80) = v15;
  *(void *)(v11 + 88) = 25965LL;
  uint64_t v16 = (int *)type metadata accessor for SnoozeIntentHandledParameters(0LL);
  sub_3F88(v1 + v16[5], v3, &qword_D3A08);
  sub_4DA3C(v3);
  if (v13)
  {
    sub_202D8(v3, &qword_D3A08);
    sub_4DB38();
  }

  else
  {
    *(void *)(v11 + 120) = v12;
    uint64_t v17 = sub_4DAD0();
    sub_17620((uint64_t)v17, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL));
  }

  *(void *)(v11 + 128) = 0x7954676F6C616964LL;
  *(void *)(v11 + 136) = 25968LL;
  sub_3F88(v1 + v16[6], v2, &qword_D3A08);
  sub_4DA3C(v2);
  if (v13)
  {
    sub_202D8(v2, &qword_D3A08);
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 160) = 0u;
  }

  else
  {
    *(void *)(v11 + 168) = v12;
    uint64_t v18 = sub_19558((void *)(v11 + 144));
    sub_17620((uint64_t)v18, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL));
  }

  sub_4DB10();
  *(void *)(v11 + 176) = v19;
  *(void *)(v11 + 184) = 0xE800000000000000LL;
  sub_3F88(v1 + v16[7], v0, &qword_D3A08);
  sub_4DA3C(v0);
  if (v13)
  {
    sub_202D8(v0, &qword_D3A08);
    *(_OWORD *)(v11 + 192) = 0u;
    *(_OWORD *)(v11 + 208) = 0u;
  }

  else
  {
    *(void *)(v11 + 216) = v12;
    uint64_t v20 = sub_19558((void *)(v11 + 192));
    sub_17620((uint64_t)v20, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL));
  }

  sub_16CB0();
}

uint64_t sub_4B668(char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 16) = a3;
  *(_BYTE *)(v5 + 89) = a2;
  *(_BYTE *)(v5 + 88) = a1;
  uint64_t v6 = type metadata accessor for SnoozeConfirmOtherRoomParameters(0LL);
  *(void *)(v5 + 48) = sub_4DA6C(v6);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_4B6B0()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(_BYTE *)(v0 + 89);
  char v5 = *(_BYTE *)(v0 + 88);
  uint64_t v6 = sub_1EC14();
  sub_A40C(v1, 1LL, 1LL, v6);
  sub_4DA58(v2[5]);
  sub_4DA58(v2[8]);
  sub_4DAEC(v2[9]);
  *(_BYTE *)(v1 + vstatic OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = v5;
  *(_BYTE *)(v1 + v2[7]) = v4;
  v3(v1);
  sub_4B144();
  uint64_t v9 = v8;
  *(void *)(v0 + 56) = v8;
  uint64_t v10 = (void *)sub_47CC8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 64) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_4B798;
  return v12(0xD000000000000017LL, 0x80000000000A9360LL, v9);
}

uint64_t sub_4B798()
{
  if (!v1) {
    *(void *)(v3 + 80) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_4B7E4(uint64_t a1)
{
  return sub_21260(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_4B820(uint64_t a1)
{
  return sub_1B5EC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_4B858()
{
  *(void *)(v1 + 16) = v0;
  return sub_2D94C((uint64_t)sub_4B868);
}

uint64_t sub_4B868()
{
  uint64_t v1 = (void *)sub_47CC8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_4B8C4;
  uint64_t v2 = sub_4DB24();
  return sub_47D84(v2 & 0xFFFFFFFFFFFFLL | 0x4523000000000000LL, 0xEC000000726F7272LL, v3, v5);
}

uint64_t sub_4B8C4(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 24);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_4B918(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for SnoozeIntentHandledParameters(0LL);
  v3[6] = sub_4DA6C(v4);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_4B958()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = (void (*)(uint64_t))v0[2];
  uint64_t v4 = sub_1EC14();
  sub_A40C(v1, 1LL, 1LL, v4);
  sub_4DAEC(*(int *)(v2 + 20));
  sub_4DA58(v5);
  sub_4DA58(*(int *)(v2 + 28));
  v3(v1);
  sub_4B404();
  uint64_t v7 = v6;
  v0[7] = v6;
  uint64_t v8 = (void *)sub_47CC8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_4BA20;
  return v10(0xD000000000000014LL, 0x80000000000A9340LL, v7);
}

uint64_t sub_4BA20()
{
  if (!v1) {
    *(void *)(v3 + 80) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_4BA6C(uint64_t a1)
{
  return sub_21260(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_4BAA8(uint64_t a1)
{
  return sub_1B5EC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_4BAE0()
{
  *(void *)(v1 + 16) = v0;
  return sub_2D94C((uint64_t)sub_4BAF0);
}

uint64_t sub_4BAF0()
{
  uint64_t v1 = (void *)sub_47CC8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_4DA38;
  uint64_t v2 = sub_4DB24();
  return sub_47D84(v2 & 0xFFFFFFFFFFFFLL | 0x4E23000000000000LL, 0xEF676E697269466FLL, v3, v5);
}

void sub_4BB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_4BBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_26B0((uint64_t *)&unk_D36C0);
  sub_215E4();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_3F88(a1, (uint64_t)v12, (uint64_t *)&unk_D36C0);
  sub_17620((uint64_t)v9, a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_202D8(a1, (uint64_t *)&unk_D36C0);
  sub_16CB0();
}

uint64_t sub_4BC94()
{
  return type metadata accessor for SnoozeCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for SnoozeIntentHandledParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D5528, (uint64_t)&nominal type descriptor for SnoozeIntentHandledParameters);
}

uint64_t type metadata accessor for SnoozeConfirmOtherRoomParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D5488, (uint64_t)&nominal type descriptor for SnoozeConfirmOtherRoomParameters);
}

uint64_t *sub_4BCC4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (sub_16880((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_26B0(&qword_D3A08);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      sub_A40C((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (sub_16880((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_26B0(&qword_D3A08);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      sub_A40C((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (sub_16880((uint64_t)a2 + v15, 1LL, v7))
    {
      uint64_t v18 = sub_26B0(&qword_D3A08);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v16, v17, v7);
      sub_A40C((uint64_t)v16, 0LL, 1LL, v7);
    }

    uint64_t v19 = a3[9];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    if (sub_16880((uint64_t)v21, 1LL, v7))
    {
      uint64_t v22 = sub_26B0(&qword_D3A08);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v20, v21, v7);
      sub_A40C((uint64_t)v20, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_4BEFC(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = a1 + a2[9];
  uint64_t result = sub_16880(v7, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v7, v4);
  }
  return result;
}

char *sub_4BFF4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_16880((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_26B0(&qword_D3A08);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    sub_A40C((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  if (sub_16880((uint64_t)&a2[v13], 1LL, v6))
  {
    uint64_t v16 = sub_26B0(&qword_D3A08);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v14, v15, v6);
    sub_A40C((uint64_t)v14, 0LL, 1LL, v6);
  }

  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (sub_16880((uint64_t)v19, 1LL, v6))
  {
    uint64_t v20 = sub_26B0(&qword_D3A08);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v18, v19, v6);
    sub_A40C((uint64_t)v18, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_4C200(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_16880((uint64_t)a1, 1LL, v6);
  int v8 = sub_16880((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = sub_16880((uint64_t)&a1[v11], 1LL, v6);
  int v15 = sub_16880((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
      sub_A40C((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_26B0(&qword_D3A08);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  a1[a3[6]] = a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = sub_16880((uint64_t)&a1[v18], 1LL, v6);
  int v22 = sub_16880((uint64_t)v20, 1LL, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v19, v20, v6);
      sub_A40C((uint64_t)v19, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_26B0(&qword_D3A08);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v6);
LABEL_19:
  uint64_t v25 = a3[9];
  id v26 = &a1[v25];
  id v27 = &a2[v25];
  int v28 = sub_16880((uint64_t)&a1[v25], 1LL, v6);
  int v29 = sub_16880((uint64_t)v27, 1LL, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v26, v27, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_24;
  }

  if (v29)
  {
LABEL_24:
    uint64_t v31 = sub_26B0(&qword_D3A08);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v26, v27, v6);
  sub_A40C((uint64_t)v26, 0LL, 1LL, v6);
  return a1;
}

char *sub_4C538(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_16880((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_26B0(&qword_D3A08);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    sub_A40C((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  int v14 = &a1[v13];
  int v15 = &a2[v13];
  if (sub_16880((uint64_t)&a2[v13], 1LL, v6))
  {
    uint64_t v16 = sub_26B0(&qword_D3A08);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v14, v15, v6);
    sub_A40C((uint64_t)v14, 0LL, 1LL, v6);
  }

  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (sub_16880((uint64_t)v19, 1LL, v6))
  {
    uint64_t v20 = sub_26B0(&qword_D3A08);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v18, v19, v6);
    sub_A40C((uint64_t)v18, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_4C744(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_16880((uint64_t)a1, 1LL, v6);
  int v8 = sub_16880((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = sub_16880((uint64_t)&a1[v11], 1LL, v6);
  int v15 = sub_16880((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
      sub_A40C((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_26B0(&qword_D3A08);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v18] = a2[v18];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v19];
  int v21 = &a2[v19];
  int v22 = sub_16880((uint64_t)&a1[v19], 1LL, v6);
  int v23 = sub_16880((uint64_t)v21, 1LL, v6);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v20, v21, v6);
      sub_A40C((uint64_t)v20, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v24 = *(void *)(v6 - 8);
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v6);
LABEL_18:
    uint64_t v25 = sub_26B0(&qword_D3A08);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v20, v21, v6);
LABEL_19:
  uint64_t v26 = a3[9];
  id v27 = &a1[v26];
  int v28 = &a2[v26];
  int v29 = sub_16880((uint64_t)&a1[v26], 1LL, v6);
  int v30 = sub_16880((uint64_t)v28, 1LL, v6);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v6 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v27, v28, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
    goto LABEL_24;
  }

  if (v30)
  {
LABEL_24:
    uint64_t v32 = sub_26B0(&qword_D3A08);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v27, v28, v6);
  sub_A40C((uint64_t)v27, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_4CA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4CA84);
}

uint64_t sub_4CA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_16880(a1, a2, v6);
  }
  unsigned int v8 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v8 >= 2) {
    return ((v8 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_4CB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4CB1C);
}

uint64_t sub_4CB1C(uint64_t a1, char a2, int a3, uint64_t a4)
{
  uint64_t result = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = sub_47E28();
    return sub_A40C(v9, v10, v11, v12);
  }

  else
  {
    *(_BYTE *)(a1 + *(int *)(a4 + swift_release(*(void *)(v0 + 24)) = a2 + 1;
  }

  return result;
}

void sub_4CB88(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = &unk_A5C88;
    v4[3] = &unk_A5C88;
    void v4[4] = v4[0];
    v4[5] = v4[0];
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
  }

uint64_t *sub_4CC00(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (sub_16880((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_26B0(&qword_D3A08);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      sub_A40C((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (sub_16880((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_26B0(&qword_D3A08);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      sub_A40C((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[6];
    int v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    if (sub_16880((uint64_t)a2 + v14, 1LL, v7))
    {
      uint64_t v17 = sub_26B0(&qword_D3A08);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v15, v16, v7);
      sub_A40C((uint64_t)v15, 0LL, 1LL, v7);
    }

    uint64_t v18 = a3[7];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    if (sub_16880((uint64_t)v20, 1LL, v7))
    {
      uint64_t v21 = sub_26B0(&qword_D3A08);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v19, v20, v7);
      sub_A40C((uint64_t)v19, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_4CE24(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = a1 + a2[7];
  uint64_t result = sub_16880(v7, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v7, v4);
  }
  return result;
}

char *sub_4CF1C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_16880((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_26B0(&qword_D3A08);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    sub_A40C((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  if (sub_16880((uint64_t)&a2[v12], 1LL, v6))
  {
    uint64_t v15 = sub_26B0(&qword_D3A08);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v13, v14, v6);
    sub_A40C((uint64_t)v13, 0LL, 1LL, v6);
  }

  uint64_t v16 = a3[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  if (sub_16880((uint64_t)v18, 1LL, v6))
  {
    uint64_t v19 = sub_26B0(&qword_D3A08);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v17, v18, v6);
    sub_A40C((uint64_t)v17, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_4D114(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_16880((uint64_t)a1, 1LL, v6);
  int v8 = sub_16880((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = sub_16880((uint64_t)&a1[v11], 1LL, v6);
  int v15 = sub_16880((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
      sub_A40C((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_26B0(&qword_D3A08);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = sub_16880((uint64_t)&a1[v18], 1LL, v6);
  int v22 = sub_16880((uint64_t)v20, 1LL, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v19, v20, v6);
      sub_A40C((uint64_t)v19, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_26B0(&qword_D3A08);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v6);
LABEL_19:
  uint64_t v25 = a3[7];
  uint64_t v26 = &a1[v25];
  id v27 = &a2[v25];
  int v28 = sub_16880((uint64_t)&a1[v25], 1LL, v6);
  int v29 = sub_16880((uint64_t)v27, 1LL, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v26, v27, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_24;
  }

  if (v29)
  {
LABEL_24:
    uint64_t v31 = sub_26B0(&qword_D3A08);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v26, v27, v6);
  sub_A40C((uint64_t)v26, 0LL, 1LL, v6);
  return a1;
}

char *sub_4D434(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_16880((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_26B0(&qword_D3A08);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    sub_A40C((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  if (sub_16880((uint64_t)&a2[v12], 1LL, v6))
  {
    uint64_t v15 = sub_26B0(&qword_D3A08);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v13, v14, v6);
    sub_A40C((uint64_t)v13, 0LL, 1LL, v6);
  }

  uint64_t v16 = a3[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  if (sub_16880((uint64_t)v18, 1LL, v6))
  {
    uint64_t v19 = sub_26B0(&qword_D3A08);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v17, v18, v6);
    sub_A40C((uint64_t)v17, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_4D62C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_16880((uint64_t)a1, 1LL, v6);
  int v8 = sub_16880((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = sub_16880((uint64_t)&a1[v11], 1LL, v6);
  int v15 = sub_16880((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
      sub_A40C((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_26B0(&qword_D3A08);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = sub_16880((uint64_t)&a1[v18], 1LL, v6);
  int v22 = sub_16880((uint64_t)v20, 1LL, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v19, v20, v6);
      sub_A40C((uint64_t)v19, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_26B0(&qword_D3A08);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v19, v20, v6);
LABEL_19:
  uint64_t v25 = a3[7];
  uint64_t v26 = &a1[v25];
  id v27 = &a2[v25];
  int v28 = sub_16880((uint64_t)&a1[v25], 1LL, v6);
  int v29 = sub_16880((uint64_t)v27, 1LL, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v26, v27, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_24;
  }

  if (v29)
  {
LABEL_24:
    uint64_t v31 = sub_26B0(&qword_D3A08);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v26, v27, v6);
  sub_A40C((uint64_t)v26, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_4D94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4D958);
}

uint64_t sub_4D958(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D3A08);
  return sub_16880(a1, a2, v4);
}

uint64_t sub_4D990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4D99C);
}

uint64_t sub_4D99C()
{
  uint64_t v0 = sub_47E28();
  return sub_A40C(v0, v1, v2, v3);
}

void sub_4D9CC(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

uint64_t sub_4DA3C(uint64_t a1)
{
  return sub_16880(a1, 1LL, v1);
}

uint64_t sub_4DA58@<X0>(uint64_t a1@<X8>)
{
  return sub_A40C(v1 + a1, 1LL, 1LL, v2);
}

uint64_t sub_4DA6C(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

void sub_4DAA0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = v2;
  sub_3F88(v3, v5, v4);
}

  ;
}

void *sub_4DAD0()
{
  return sub_19558(v0);
}

  ;
}

uint64_t sub_4DAEC@<X0>(uint64_t a1@<X8>)
{
  return sub_A40C(v1 + a1, 1LL, 1LL, v2);
}

  ;
}

uint64_t sub_4DB24()
{
  return 0x657A6F6F6E53LL;
}

double sub_4DB38()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

ValueMetadata *_s24UnsupportedValueStrategyVMa_1()
{
  return &_s24UnsupportedValueStrategyVN_1;
}

uint64_t sub_4DB54()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D5568);
  sub_26F0(v0, (uint64_t)qword_D5568);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_4DB9C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return sub_2D94C((uint64_t)sub_4DBAC);
}

uint64_t sub_4DBAC()
{
  uint64_t v1 = sub_26B0(&qword_D55A0);
  uint64_t v2 = (void *)ParameterResolutionRecord.intent.getter(v1);
  v0[5] = v2;
  uint64_t v3 = (void *)ParameterResolutionRecord.result.getter(v1);
  v0[6] = v3;
  if (qword_D3060 != -1) {
    swift_once(&qword_D3060, sub_4DB54);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_26F0(v4, (uint64_t)qword_D5568);
  id v5 = v3;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v5, v6, v7, v8, v9, v10, v11, v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    int v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)int v15 = 134217984;
    v0[2] = [v5 unsupportedReason];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v15 + 4, v15 + 12);

    _os_log_impl( &dword_0,  v13,  v14,  "SearchAlarm.UnsupportedValueStrategy.makeUnsupportedValueOutput() called with unsupportedReason: %ld",  v15,  0xCu);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
  }

  id v16 = [v2 alarmSearch];
  v0[7] = v16;
  uint64_t v17 = (void *)swift_task_alloc(dword_D3884);
  v0[8] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_4DD6C;
  return sub_17E4C(v0[3], (uint64_t)v16, (uint64_t)v5);
}

uint64_t sub_4DD6C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_4DE08;
  }

  else
  {

    uint64_t v4 = sub_4DDD8;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_4DDD8()
{
  uint64_t v1 = *(void **)(v0 + 40);

  return sub_1B5EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_4DE08()
{
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v2 = *(void **)(v0 + 40);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4DE48(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return sub_2D94C((uint64_t)sub_4DE58);
}

uint64_t sub_4DE58()
{
  uint64_t v1 = sub_26B0(&qword_D55A0);
  uint64_t v2 = ParameterResolutionRecord.intent.getter(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_4DE98(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)swift_task_alloc(dword_D55AC);
  *(void *)(v2 + 16) = v5;
  *id v5 = v2;
  v5[1] = sub_1B3B8;
  return sub_4DB9C(a1, a2);
}

uint64_t sub_4DEF0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_D559C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_5D0C;
  return sub_4DE48(a1);
}

uint64_t type metadata accessor for DeleteAllCATPatternsExecutor(uint64_t a1)
{
  return sub_8A38(a1, (uint64_t *)&unk_D55B0, (uint64_t)&nominal type descriptor for DeleteAllCATPatternsExecutor);
}

uint64_t sub_4DF50(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D8278);
}

uint64_t sub_4DF8C()
{
  uint64_t v1 = sub_26B0(&qword_D3A08);
  __chkstk_darwin(v1);
  sub_17390();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_26B0(&qword_D3BD0);
  uint64_t v6 = swift_allocObject(v5, 512LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_A5A60;
  strcpy((char *)(v6 + 32), "isMixedAlarms");
  *(_WORD *)(v6 + 46) = -4864;
  *(_BYTE *)(v6 + 48) = *v0;
  *(void *)(v6 + 72) = &type metadata for Bool;
  *(void *)(v6 + 80) = 0xD000000000000010LL;
  sub_214E0();
  *(void *)(v7 + 88) = v8;
  *(_BYTE *)(v7 + 96) = v0[1];
  *(void *)(v7 + 120) = v9;
  *(void *)(v7 + 128) = 0xD000000000000018LL;
  *(void *)(v7 + 136) = 0x80000000000A8130LL;
  *(_BYTE *)(v7 + 144) = v0[2];
  *(void *)(v7 + 168) = v9;
  *(void *)(v7 + 176) = 0xD000000000000012LL;
  sub_214E0();
  *(void *)(v10 + 184) = v11;
  *(_BYTE *)(v10 + 192) = v0[3];
  *(void *)(v10 + 216) = v12;
  *(void *)(v10 + 224) = 0xD000000000000016LL;
  *(void *)(v10 + 232) = 0x80000000000A8170LL;
  *(_BYTE *)(v10 + 240) = v0[4];
  *(void *)(v10 + 264) = v12;
  *(void *)(v10 + 272) = 0xD000000000000016LL;
  sub_214E0();
  *(void *)(v13 + 280) = v14;
  *(_BYTE *)(v13 + 288) = v0[5];
  *(void *)(v13 + 312) = v15;
  *(void *)(v13 + 320) = 0xD000000000000017LL;
  sub_214E0();
  *(void *)(v16 + 328) = v17;
  *(_BYTE *)(v16 + 336) = v0[6];
  *(void *)(v16 + 360) = v18;
  *(void *)(v16 + 368) = 0x68637461577369LL;
  *(void *)(v16 + 376) = 0xE700000000000000LL;
  *(_BYTE *)(v16 + 384) = v0[7];
  uint64_t v19 = v16 + 432;
  *(void *)(v16 + 408) = v18;
  *(void *)(v16 + 416) = 0xD000000000000012LL;
  *(void *)(v16 + 424) = 0x80000000000A81D0LL;
  uint64_t v20 = type metadata accessor for DeleteAllIntentHandledParameters(0LL);
  sub_4D80((uint64_t)&v0[*(int *)(v20 + 48)], v4, &qword_D3A08);
  uint64_t v21 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880(v4, 1LL, v21) == 1)
  {
    sub_19594(v4, &qword_D3A08);
    *(_OWORD *)uint64_t v19 = 0u;
    *(_OWORD *)(v19 + 16) = 0u;
  }

  else
  {
    *(void *)(v6 + 456) = v21;
    int v22 = sub_19558((void *)v19);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32LL))(v22, v4, v21);
  }

  sub_214E0();
  *(void *)(v6 + 464) = v23;
  *(void *)(v6 + 472) = v24;
  uint64_t v25 = *(void *)&v0[*(int *)(v20 + 52)];
  if (v25)
  {
    uint64_t v26 = type metadata accessor for DialogCalendar(0LL);
  }

  else
  {
    uint64_t v26 = 0LL;
    *(void *)(v6 + 488) = 0LL;
    *(void *)(v6 + 496) = 0LL;
  }

  *(void *)(v6 + 480) = v25;
  *(void *)(v6 + 504) = v26;
  swift_retain(v25);
  return v6;
}

uint64_t sub_4E224(char a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8)
{
  *(void *)(v8 + 16) = v11;
  *(_BYTE *)(v8 + 79) = a8;
  *(_BYTE *)(v8 + 78) = a7;
  *(_BYTE *)(v8 + 7static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = a6;
  *(_BYTE *)(v8 + 76) = a5;
  *(_BYTE *)(v8 + 75) = a4;
  *(_BYTE *)(v8 + 74) = a3;
  *(_BYTE *)(v8 + 7sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = a2;
  *(_BYTE *)(v8 + 72) = a1;
  uint64_t v9 = type metadata accessor for DeleteAllIntentHandledParameters(0LL);
  *(void *)(v8 + 24) = v9;
  *(void *)(v8 + 32) = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_4E2A4, 0LL, 0LL);
}

uint64_t sub_4E2A4()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(_BYTE **)(v0 + 32);
  char v14 = *(_BYTE *)(v0 + 78);
  char v15 = *(_BYTE *)(v0 + 79);
  char v3 = *(_BYTE *)(v0 + 77);
  char v4 = *(_BYTE *)(v0 + 76);
  char v5 = *(_BYTE *)(v0 + 75);
  char v6 = *(_BYTE *)(v0 + 74);
  char v7 = *(_BYTE *)(v0 + 73);
  char v8 = *(_BYTE *)(v0 + 72);
  uint64_t v9 = (uint64_t)&v1[*(int *)(v2 + 48)];
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  sub_A40C(v9, 1LL, 1LL, v10);
  *uint64_t v1 = v8;
  v1[1] = v7;
  v1[2] = v6;
  v1[3] = v5;
  v1[4] = v4;
  v1[5] = v3;
  v1[6] = v14;
  v1[7] = v15;
  *(void *)&v1[*(int *)(v2 + 52)] = 0LL;
  uint64_t v11 = sub_4DF8C();
  *(void *)(v0 + 40) = v11;
  *(void *)(v0 + 48) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_4E3C4;
  return v16(0xD000000000000017LL, 0x80000000000A93C0LL, v11);
}

uint64_t sub_4E3C4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v6 = *(void *)(*v2 + 40);
  uint64_t v5 = *(void *)(*v2 + 48);
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(v6);
  if (v1)
  {
    char v7 = sub_4E47C;
  }

  else
  {
    *(void *)(v4 + 64) = a1;
    char v7 = sub_4E440;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_4E440()
{
  return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v1 + 64));
}

uint64_t sub_4E47C()
{
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_4E4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_4E504(a1, a2, a3);
}

uint64_t sub_4E504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_17390();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_26B0((uint64_t *)&unk_D36C0);
  __chkstk_darwin(v11);
  sub_17390();
  uint64_t v14 = v13 - v12;
  sub_4D80(a1, v13 - v12, (uint64_t *)&unk_D36C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapper.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_19594(a1, (uint64_t *)&unk_D36C0);
  return v15;
}

uint64_t sub_4E608()
{
  return type metadata accessor for DeleteAllCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for DeleteAllIntentHandledParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D5660, (uint64_t)&nominal type descriptor for DeleteAllIntentHandledParameters);
}

uint64_t sub_4E624(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeleteAllIntentHandledParameters(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t *sub_4E660(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for SpeakableString(0LL);
    if (sub_16880((uint64_t)v9, 1LL, v10))
    {
      uint64_t v11 = sub_26B0(&qword_D3A08);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
      sub_A40C((uint64_t)v8, 0LL, 1LL, v10);
    }

    uint64_t v13 = *(int *)(a3 + 52);
    uint64_t v12 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v1sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = v12;
  }

  swift_retain(v12);
  return v4;
}

uint64_t sub_4E754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  return swift_release(*(void *)(a1 + *(int *)(a2 + 52)));
}

void *sub_4E7C0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
    sub_A40C((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = *(int *)(a3 + 52);
  uint64_t v12 = *(void *)((char *)a2 + v11);
  *(void *)((char *)a1 + v1sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v12;
  swift_retain(v12);
  return a1;
}

_BYTE *sub_4E88C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  int v10 = sub_16880((uint64_t)v7, 1LL, v9);
  int v11 = sub_16880((uint64_t)v8, 1LL, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_26B0(&qword_D3A08);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  sub_A40C((uint64_t)v7, 0LL, 1LL, v9);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 52);
  uint64_t v15 = *(void *)&a1[v14];
  uint64_t v16 = *(void *)&a2[v14];
  *(void *)&a1[v14] = v16;
  swift_retain(v16);
  swift_release(v15);
  return a1;
}

void *sub_4E9EC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_A40C((uint64_t)v7, 0LL, 1LL, v9);
  }

  *(void *)((char *)a1 + *(int *)(a3 + swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52)) = *(void *)((char *)a2 + *(int *)(a3 + 52));
  return a1;
}

_BYTE *sub_4EAB4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  int v10 = sub_16880((uint64_t)v7, 1LL, v9);
  int v11 = sub_16880((uint64_t)v8, 1LL, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_26B0(&qword_D3A08);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  sub_A40C((uint64_t)v7, 0LL, 1LL, v9);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 52);
  uint64_t v15 = *(void *)&a1[v14];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  swift_release(v15);
  return a1;
}

uint64_t sub_4EC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4EC18);
}

uint64_t sub_4EC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_16880(a1 + *(int *)(a3 + 48), a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 52));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  int v9 = v8 - 1;
  if (v9 < 0) {
    int v9 = -1;
  }
  return (v9 + 1);
}

uint64_t sub_4ECA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4ECB0);
}

uint64_t sub_4ECB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_A40C(a1 + *(int *)(a4 + 48), a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52)) = a2;
  return result;
}

void sub_4ED2C(uint64_t a1)
{
  v4[0] = &unk_A5DC8;
  v4[1] = &unk_A5DC8;
  v4[2] = &unk_A5DC8;
  v4[3] = &unk_A5DC8;
  void v4[4] = &unk_A5DC8;
  v4[5] = &unk_A5DC8;
  void v4[6] = &unk_A5DC8;
  v4[7] = &unk_A5DC8;
  sub_1E9D8(319LL);
  if (v3 <= 0x3F)
  {
    void v4[8] = *(void *)(v2 - 8) + 64LL;
    void v4[9] = &unk_A5DE0;
    swift_initStructMetadata(a1, 256LL, 10LL, v4, a1 + 16);
  }

uint64_t sub_4EDB4()
{
  return sub_4E624(*(void *)(v0 + 32));
}

uint64_t type metadata accessor for UpdateAlarmCATsSimple(uint64_t a1)
{
  uint64_t result = qword_D56B8;
  if (!qword_D56B8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UpdateAlarmCATsSimple);
  }
  return result;
}

uint64_t sub_4EDF8(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D8288);
}

uint64_t sub_4EE34(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_26B0(&qword_D3A08);
  v3[5] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_4EE94, 0LL, 0LL);
}

uint64_t sub_4EE94()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[2];
  uint64_t v3 = sub_26B0(&qword_D3BD0);
  uint64_t v4 = swift_allocObject(v3, 128LL, 7LL);
  v0[6] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_A5960;
  uint64_t v5 = (void *)(v4 + 48);
  *(void *)(v4 + 32) = 0x6C6562614C77656ELL;
  *(void *)(v4 + 40) = 0xE800000000000000LL;
  sub_4D80(v2, v1, &qword_D3A08);
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_16880(v1, 1LL, v6);
  uint64_t v8 = v0[5];
  if (v7 == 1)
  {
    sub_19594(v0[5], &qword_D3A08);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }

  else
  {
    *(void *)(v4 + 72) = v6;
    int v9 = sub_19558(v5);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v8, v6);
  }

  uint64_t v10 = v0[3];
  sub_4F364();
  *(void *)(v4 + 80) = v11;
  *(void *)(v4 + 88) = v12;
  uint64_t v13 = 0LL;
  if (v10)
  {
    uint64_t v13 = type metadata accessor for AlarmAlarm(0LL);
  }

  else
  {
    *(void *)(v4 + 104) = 0LL;
    *(void *)(v4 + 112) = 0LL;
  }

  *(void *)(v4 + 96) = v10;
  *(void *)(v4 + 120) = v13;
  uint64_t v14 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  swift_retain(v10);
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v0[7] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_4F010;
  return sub_47CDC(0xD000000000000028LL, 0x80000000000A9440LL, v4, v17);
}

uint64_t sub_4F010()
{
  uint64_t v4 = v2[7];
  uint64_t v5 = *v3;
  *uint64_t v6 = v5;
  _BYTE v2[8] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return sub_19744();
  }
  uint64_t v8 = v2[5];
  swift_bridgeObjectRelease(v2[6]);
  swift_task_dealloc(v8);
  return sub_4F354(v0, *(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_4F080(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_4F098, 0LL, 0LL);
}

uint64_t sub_4F098()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_26B0(&qword_D3BD0);
  uint64_t v3 = swift_allocObject(v2, 80LL, 7LL);
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_A4880;
  sub_4F364();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v6;
  uint64_t v7 = 0LL;
  if (v1)
  {
    uint64_t v7 = type metadata accessor for AlarmAlarm(0LL);
  }

  else
  {
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 72) = v7;
  uint64_t v8 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  swift_retain(v1);
  int v9 = (void *)swift_task_alloc(v8);
  v0[5] = v9;
  *int v9 = v0;
  v9[1] = sub_4F174;
  return sub_47CDC(0xD00000000000002DLL, 0x80000000000A9410LL, v3, v11);
}

uint64_t sub_4F174()
{
  uint64_t v4 = v2[5];
  uint64_t v5 = *v3;
  *uint64_t v6 = v5;
  void v2[6] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return sub_19744();
  }
  swift_bridgeObjectRelease(v2[4]);
  return sub_4F354(v0, *(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_4F1D8()
{
  return sub_1B5EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_4F204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_4F248(a1, a2, a3);
}

uint64_t sub_4F248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_17390();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_26B0((uint64_t *)&unk_D36C0);
  __chkstk_darwin(v11);
  sub_17390();
  uint64_t v14 = v13 - v12;
  sub_4D80(a1, v13 - v12, (uint64_t *)&unk_D36C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapperSimple.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_19594(a1, (uint64_t *)&unk_D36C0);
  return v15;
}

uint64_t sub_4F34C()
{
  return type metadata accessor for UpdateAlarmCATsSimple(0LL);
}

uint64_t sub_4F354(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

  ;
}

uint64_t sub_4F378(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_time);
  *(void *)(v1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_time) = a1;
  swift_retain(a1);
  swift_release(v2);
  return sub_505F8(v1);
}

uint64_t sub_4F3AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_days);
  *(void *)(v1 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_days) = a1;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v2);
  return sub_505F8(v1);
}

void sub_4F3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = &v17[-v12 - 8];
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a2);
  SpeakableString.init(print:speak:)(a1, a2, a3, a4);
  uint64_t v14 = sub_1EC14();
  sub_A40C((uint64_t)v13, 0LL, 1LL, v14);
  sub_8DF4((uint64_t)v13, v4);
  uint64_t v15 = v5 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_alarmIDString;
  swift_beginAccess(v5 + OBJC_IVAR____TtCC15AlarmFlowPlugin10AlarmAlarm7Builder_alarmIDString, v17, 33LL, 0LL);
  sub_1B4F0(v4, v15);
  swift_endAccess(v17);
  swift_retain(v5);
  sub_21290();
}

uint64_t sub_4F4D8()
{
  return v0;
}

uint64_t sub_4F578()
{
  return 0x6C412E6D72616C61LL;
}

uint64_t sub_4F598(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_CAA08, a1, a2, &unk_D3268);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x11) {
    return 17LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_4F5EC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_4F628 + 4 * byte_A5E30[a1]))( 0xD000000000000013LL,  0x80000000000A7D60LL);
}

uint64_t sub_4F628()
{
  return 0x6C6562616CLL;
}

uint64_t sub_4F63C()
{
  return 1701669236LL;
}

uint64_t sub_4F64C()
{
  return 0x796C6E4F656D6974LL;
}

uint64_t sub_4F670()
{
  return 0x6E6169646972656DLL;
}

uint64_t sub_4F688()
{
  return 0x64656C62616E65LL;
}

uint64_t sub_4F6A0()
{
  return 0x7272756365527369LL;
}

uint64_t sub_4F748()
{
  return 0x6E6F69746361LL;
}

uint64_t sub_4F75C()
{
  return 0x6341656C62616E65LL;
}

uint64_t sub_4F77C()
{
  return 0x41656C6261736964LL;
}

uint64_t sub_4F7A0()
{
  return 0x5344496D72616C61LL;
}

uint64_t sub_4F7C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_28748(*a1, *a2);
}

void sub_4F7D0()
{
}

uint64_t sub_4F7D8(uint64_t a1)
{
  return sub_6FC54(a1, *v1);
}

void sub_4F7E0(uint64_t a1)
{
}

uint64_t sub_4F7E8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_4F598(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_4F814@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_4F5EC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_4F83C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_4F5E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_4F860()
{
  return 0LL;
}

void sub_4F86C(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_4F878(uint64_t a1)
{
  unint64_t v2 = sub_9534();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_4F8A0(uint64_t a1)
{
  unint64_t v2 = sub_9534();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_4F8C8(void (*a1)(void))
{
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

void sub_4F8EC(uint64_t a1)
{
  uint64_t v4 = "\b";
  sub_1E9D8(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = "\b";
    uint64_t v7 = v5;
    uint64_t v8 = v5;
    uint64_t v9 = v5;
    uint64_t v10 = &unk_A5E80;
    uint64_t v11 = &unk_A5E80;
    uint64_t v12 = &unk_A5E80;
    uint64_t v13 = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t v14 = v5;
    uint64_t v15 = &unk_A5E80;
    uint64_t v16 = &unk_A5E80;
    uint64_t v17 = &unk_A5E80;
    uint64_t v18 = v5;
    uint64_t v19 = v5;
    uint64_t v20 = v5;
    uint64_t v21 = v5;
    swift_updateClassMetadata2(a1, 256LL, 18LL, &v4, a1 + 80);
  }

uint64_t sub_4F994(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_4FA8C(a1);
  return v3;
}

uint64_t sub_4F9E0()
{
  return type metadata accessor for AlarmAlarm.Builder(0LL);
}

void sub_4F9E8(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = "\b";
    v4[2] = v4[0];
    v4[3] = v4[0];
    void v4[4] = v4[0];
    v4[5] = &unk_A5E80;
    void v4[6] = &unk_A5E80;
    v4[7] = &unk_A5E80;
    void v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[9] = v4[0];
    void v4[10] = &unk_A5E80;
    v4[11] = &unk_A5E80;
    v4[12] = &unk_A5E80;
    v4[13] = v4[0];
    v4[14] = v4[0];
    v4[15] = v4[0];
    v4[16] = v4[0];
    swift_updateClassMetadata2(a1, 256LL, 17LL, v4, a1 + 80);
  }

uint64_t sub_4FA8C(void *a1)
{
  uint64_t v64 = v5;
  sub_16AF0();
  __chkstk_darwin(v6);
  sub_16BD8();
  uint64_t v65 = v7;
  sub_16AF0();
  __chkstk_darwin(v8);
  sub_16BD8();
  uint64_t v66 = v9;
  sub_16AF0();
  __chkstk_darwin(v10);
  sub_16BD8();
  uint64_t v67 = v11;
  sub_16AF0();
  __chkstk_darwin(v12);
  sub_16BD8();
  uint64_t v68 = v13;
  sub_16AF0();
  __chkstk_darwin(v14);
  sub_5066C();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v62 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  __chkstk_darwin(v19);
  char v69 = (char *)&v62 - v20;
  uint64_t v71 = sub_26B0(&qword_D5C58);
  uint64_t v21 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  sub_17390();
  uint64_t v24 = v23 - v22;
  char v73 = a1;
  uint64_t v74 = v1;
  *(void *)(v1 + 16) = 0LL;
  uint64_t v26 = a1[3];
  uint64_t v25 = a1[4];
  sub_80B4(a1, v26);
  unint64_t v27 = sub_9534();
  uint64_t v70 = v24;
  uint64_t v28 = v72;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AlarmAlarm.CodingKeys,  &type metadata for AlarmAlarm.CodingKeys,  v27,  v26,  v25);
  if (v28)
  {
    uint64_t v61 = v74;

    uint64_t v33 = type metadata accessor for AlarmAlarm(0LL);
    swift_deallocPartialClassInstance( v61,  v33,  *(unsigned int *)(*(void *)v61 + 48LL),  *(unsigned __int16 *)(*(void *)v61 + 52LL));
  }

  else
  {
    char v63 = v18;
    uint64_t v72 = v21;
    uint64_t v29 = type metadata accessor for SpeakableString(0LL);
    LOBYTE(v76) = 0;
    uint64_t v30 = sub_9570( &qword_D5C68,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    uint64_t v31 = (uint64_t)v69;
    uint64_t v32 = v71;
    sub_50514(v29, (uint64_t)&v76, v71, v29, v30);
    uint64_t v35 = v74;
    sub_8DF4(v31, v74 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_label);
    uint64_t v36 = type metadata accessor for DialogCalendar(0LL);
    char v75 = 1;
    sub_9570( &qword_D5C70,  (uint64_t (*)(uint64_t))&type metadata accessor for DialogCalendar,  (uint64_t)&protocol conformance descriptor for DialogCalendar);
    uint64_t v37 = sub_5064C();
    sub_50514(v37, v38, v32, v36, v39);
    *(void *)(v35 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_time) = v76;
    sub_5057C(2);
    char v69 = 0LL;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v29, v40, v71, v29, v30);
    sub_50660(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_formattedTimeString);
    sub_5057C(3);
    uint64_t v41 = v30;
    uint64_t v42 = v71;
    sub_50514(v29, v43, v71, v29, v41);
    sub_50660(OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_timeOnlyString);
    sub_5057C(4);
    sub_50514(v29, v44, v42, v29, v41);
    char v63 = (char *)v41;
    sub_8DF4(v2, v35 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_meridian);
    *(_BYTE *)(v35 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_enabled) = sub_5051C(5) & 1;
    *(_BYTE *)(v35 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isRecurrent) = sub_5051C(6) & 1;
    *(_BYTE *)(v35 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isSleepAlarm) = sub_5051C(7) & 1;
    sub_26B0(&qword_D3BD8);
    char v75 = 8;
    sub_9710( &qword_D5C78,  &qword_D5C68,  (uint64_t)&protocol conformance descriptor for SpeakableString,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    uint64_t v45 = sub_5064C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v45);
    *(void *)(v74 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_days) = v76;
    sub_5057C(9);
    sub_50514(v29, v46, v42, v29, (uint64_t)v63);
    sub_50640();
    sub_8DF4(v68, v47);
    uint64_t v48 = sub_50530(10);
    sub_50618(v48, OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isSetWitchingHoursForToday);
    uint64_t v49 = sub_50530(11);
    sub_50618(v49, OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_isTomorrow);
    uint64_t v50 = sub_50530(12);
    sub_50618(v50, OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_overrideTomorrowCalendarLogic);
    sub_5057C(13);
    sub_504FC(v51, v52);
    sub_50640();
    sub_8DF4(v67, v53);
    sub_5057C(14);
    sub_504FC(v54, v55);
    sub_50640();
    sub_8DF4(v66, v56);
    sub_5057C(15);
    sub_504FC(v57, v58);
    sub_50640();
    sub_8DF4(v65, v59);
    sub_5057C(16);
    sub_50514(v29, v60, v71, v29, (uint64_t)v63);
    sub_504B8();
    uint64_t v61 = v74;
    sub_8DF4(v64, v74 + OBJC_IVAR____TtC15AlarmFlowPlugin10AlarmAlarm_alarmIDString);
  }

  _s20HandleIntentStrategyVwxx_1(v73);
  return v61;
}

uint64_t sub_50218()
{
  return sub_4F578();
}

void *sub_5022C()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 16, v5, 0LL, 0LL);
  uint64_t v2 = *(void **)(v1 + 16);
  id v3 = v2;
  return v2;
}

void sub_50270(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess(v3 + 16, v5, 1LL, 0LL);
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = a1;
}

uint64_t (*sub_502B8(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_502FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_4F994(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_50324()
{
  return sub_9570(&qword_D5C48, type metadata accessor for AlarmAlarm, (uint64_t)&unk_A5EC8);
}

uint64_t sub_50350()
{
  return sub_9570(&qword_D5C50, type metadata accessor for AlarmAlarm, (uint64_t)&unk_A5EA0);
}

uint64_t sub_5037C(uint64_t a1)
{
  uint64_t v2 = sub_26B0(&qword_D3A08);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_503BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_26B0(&qword_D3A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AlarmAlarm.CodingKeys()
{
  return &type metadata for AlarmAlarm.CodingKeys;
}

uint64_t sub_50420@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(v5 - 72) = a2;
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, v5 - 72, v2, v3, v4);
}

uint64_t sub_50440(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_50450@<X0>(uint64_t a1@<X8>)
{
  return sub_A40C(v2 + a1, 1LL, 1LL, v1);
}

uint64_t sub_50464@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(v3 - 72) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 72, v2);
}

uint64_t sub_5047C(uint64_t a1)
{
  return sub_16880(a1, 1LL, v1);
}

uint64_t sub_50498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_504A4@<X0>(uint64_t a1@<X8>)
{
  return sub_5037C(v1 + a1);
}

uint64_t sub_504AC@<X0>(uint64_t a1@<X8>)
{
  return sub_8DF4(v2, v1 + a1);
}

uint64_t sub_504B8()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 112) + 8LL))( *(void *)(v0 - 128),  *(void *)(v0 - 120));
}

void *sub_504C8()
{
  uint64_t v2 = *(void **)(v1 - 88);
  v2[3] = v0;
  return sub_19558(v2);
}

void sub_504D4()
{
  *(_DWORD *)(v0 - 120) = 0;
  *(_DWORD *)(v0 - 112) = 0;
}

uint64_t sub_504F4(uint64_t a1)
{
  return sub_503BC(a1, v1);
}

uint64_t sub_504FC(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v2, a2, *(void *)(v3 - 120), v2, *(void *)(v3 - 184));
}

uint64_t sub_50514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_5051C@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 72) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 72, v1);
}

uint64_t sub_50530@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 72, *(void *)(v1 - 120));
}

uint64_t sub_50544@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 - 96) + a1;
}

uint64_t sub_50550@<X0>(uint64_t a1@<X8>)
{
  return sub_5037C(v1 + a1);
}

void sub_50558()
{
  *(_DWORD *)(v0 - 120) = 1;
}

void sub_5057C(char a1@<W8>)
{
  *(_BYTE *)(v1 - 72) = a1;
}

  ;
}

  ;
}

void sub_505A4()
{
  *(_DWORD *)(v0 - 120) = 0;
  *(_DWORD *)(v0 - 112) = 0;
}

void sub_505C4()
{
  *(_DWORD *)(v0 - 120) = 0;
  *(_DWORD *)(v0 - 112) = 0;
}

uint64_t sub_505E4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 112) + 8LL))(v0, v1);
}

uint64_t sub_505F8(uint64_t a1)
{
  return swift_retain(a1);
}

uint64_t sub_50600(uint64_t a1)
{
  uint64_t v3 = *(void **)(v2 - 88);
  v3[3] = a1;
  *uint64_t v3 = v1;
  return v1;
}

uint64_t sub_50618@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(*(void *)(v2 - 96) + a2) = result & 1;
  return result;
}

uint64_t sub_50628()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 112) + 8LL))(v0, *(void *)(v1 - 120));
}

uint64_t sub_50638(uint64_t a1)
{
  return sub_503BC(a1, v1);
}

  ;
}

uint64_t sub_5064C()
{
  return v0;
}

uint64_t sub_50660@<X0>(uint64_t a1@<X8>)
{
  return sub_8DF4(v1, v2 + a1);
}

  ;
}

  ;
}

uint64_t sub_50694(uint64_t a1)
{
  return sub_252F0(a1, (void (*)(void))type metadata accessor for DeleteAlarmCATs_Async, &qword_D83A8);
}

uint64_t sub_506A8(uint64_t a1)
{
  return sub_252F0( a1,  (void (*)(void))type metadata accessor for DeleteAlarmCATPatternsExecutor,  &qword_D83B0);
}

uint64_t sub_506BC(uint64_t a1)
{
  return sub_252F0( a1,  (void (*)(void))type metadata accessor for DeleteAllCATPatternsExecutor,  &qword_D83B8);
}

void sub_506D0(char a1)
{
  if ((a1 & 1) != 0)
  {
    static AlarmRepeatScheduleConstants.monday.getter();
    sub_51ED0();
    sub_51EA0();
    if (v3) {
      sub_51E54(v2);
    }
    sub_51E80();
    sub_51EEC();
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }

  static AlarmRepeatScheduleConstants.tuesday.getter();
  sub_51ED0();
  sub_51EA0();
  if (v3) {
    sub_51E54(v4);
  }
  sub_51E80();
  sub_51EEC();
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

LABEL_15:
  static AlarmRepeatScheduleConstants.wednesday.getter();
  sub_51ED0();
  sub_51EA0();
  if (v3) {
    sub_51E54(v5);
  }
  sub_51E80();
  sub_51EEC();
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

    type metadata accessor for ChangeAlarmStatusIntent(0LL);
    goto LABEL_16;
  }

  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.enable(_:)) {
    goto LABEL_15;
  }
  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.read(_:)
    || v8 == enum case for AlarmNLv4Constants.AlarmVerb.request(_:))
  {
    goto LABEL_6;
  }

  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.snooze(_:))
  {
    type metadata accessor for SnoozeAlarmHalIntent(0LL);
    goto LABEL_16;
  }

  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.summarise(_:))
  {
LABEL_6:
    type metadata accessor for SearchAlarmIntent(0LL);
LABEL_16:
    sub_214A4();
    return;
  }

  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.update(_:))
  {
    type metadata accessor for UpdateAlarmIntent(0LL);
    goto LABEL_16;
  }

  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.noVerb(_:)) {
    goto LABEL_8;
  }
  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.close(_:)) {
    goto LABEL_12;
  }
  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.resume(_:)) {
    goto LABEL_15;
  }
  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.stop(_:)) {
    goto LABEL_12;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)(v4, v4);
  __break(1u);
}

LABEL_21:
  static AlarmRepeatScheduleConstants.friday.getter();
  sub_51ED0();
  sub_51EA0();
  if (v3) {
    sub_51E54(v7);
  }
  sub_51E80();
  sub_51EEC();
  if ((a1 & 0x20) == 0)
  {
LABEL_7:
    if ((a1 & 0x40) == 0) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }

uint64_t sub_5084C()
{
  uint64_t v0 = type metadata accessor for AlarmRepeatSchedule(0LL);
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  id v2 = sub_51E3C();
  sub_51EC4(v2);
  uint64_t v3 = sub_51EDC();
  sub_51E6C(v3, v4, v5, v6, v7, v8, v9, v10, v66, (uint64_t)&_swiftEmptyArrayStorage);
  sub_51E90();
  sub_51EE4();
  sub_51EF4();
  id v11 = sub_51E3C();
  sub_51EB4(v11);
  uint64_t v12 = sub_51EDC();
  sub_51E6C(v12, v13, v14, v15, v16, v17, v18, v19, v67, v73);
  sub_51E90();
  sub_51EE4();
  sub_51EF4();
  id v20 = sub_51E3C();
  sub_51EB4(v20);
  uint64_t v21 = sub_51EDC();
  sub_51E6C(v21, v22, v23, v24, v25, v26, v27, v28, v68, v74);
  sub_51E90();
  sub_51EE4();
  sub_51EF4();
  id v29 = sub_51E3C();
  sub_51EB4(v29);
  uint64_t v30 = sub_51EDC();
  sub_51E6C(v30, v31, v32, v33, v34, v35, v36, v37, v69, v75);
  sub_51E90();
  sub_51EE4();
  sub_51EF4();
  id v38 = sub_51E3C();
  sub_51EB4(v38);
  uint64_t v39 = sub_51EDC();
  sub_51E6C(v39, v40, v41, v42, v43, v44, v45, v46, v70, v76);
  sub_51E90();
  sub_51EE4();
  sub_51EF4();
  id v47 = sub_51E3C();
  sub_51EB4(v47);
  uint64_t v48 = sub_51EDC();
  sub_51E6C(v48, v49, v50, v51, v52, v53, v54, v55, v71, v77);
  sub_51E90();
  sub_51EE4();
  sub_51EF4();
  id v56 = sub_51E3C();
  sub_51EC4(v56);
  uint64_t v57 = sub_51EDC();
  sub_51E6C(v57, v58, v59, v60, v61, v62, v63, v64, v72, v78);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(5LL, v56);
  sub_51EE4();
  return v79;
}

void *sub_509A8(uint64_t a1)
{
  return sub_509BC(a1);
}

void *sub_509BC(uint64_t a1)
{
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = sub_7B9EC(0LL, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0LL;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      id v7 = [v5 repeatSchedule];

      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_7B9EC((void *)(v8 > 1), v9 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v7;
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
  }

  __break(1u);
  return result;
}

uint64_t sub_50B1C(unint64_t a1)
{
  if (a1 < 7) {
    return *(void *)&aMonday[8 * a1];
  }
  unint64_t v2 = a1;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for RepeatSchedule,  &v2,  &type metadata for RepeatSchedule,  &type metadata for Int);
  __break(1u);
  return result;
}

Swift::Int sub_50B7C()
{
  Swift::Int result = sub_5129C((uint64_t)&off_CA940);
  qword_D83C0 = result;
  return result;
}

Swift::Int sub_50BA0()
{
  Swift::Int result = sub_5129C((uint64_t)&off_CA988);
  qword_D83C8 = result;
  return result;
}

uint64_t sub_50BC4()
{
  if (qword_D3080 != -1) {
    swift_once(&qword_D3080, sub_50B7C);
  }
  uint64_t v0 = qword_D83C0;
  uint64_t v1 = qword_D3088;
  swift_bridgeObjectRetain(qword_D83C0);
  if (v1 != -1) {
    swift_once(&qword_D3088, sub_50BA0);
  }
  uint64_t v2 = swift_bridgeObjectRetain(qword_D83C8);
  uint64_t result = sub_50C58(v2, v0);
  qword_D83D0 = result;
  return result;
}

uint64_t sub_50C58(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v15 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    uint64_t result = sub_51430(&v14, *(void *)(*(void *)(v2 + 48) + 8 * i));
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }

void sub_50DB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_89A8();
  v7[1] = Set.init(minimumCapacity:)(v2, &type metadata for RepeatSchedule, v3);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      uint64_t v6 = *(void *)(a1 + 8 * i + 32);
      sub_51430(v7, v6);
    }

    swift_bridgeObjectRelease(a1);
  }

  else
  {
    swift_bridgeObjectRelease(a1);
  }

  sub_AAEC();
}

void sub_50E40(uint64_t a1, uint64_t a2)
{
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v28 = (unint64_t)(v6 + 63) >> 6;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_29;
    }

    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      return;
    }

    if (v11 >= v28) {
      return;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (v12) {
      goto LABEL_28;
    }
    int64_t v4 = v11 + 1;
    sub_51F2C();
    if (v14 == v15) {
      return;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    if (v12) {
      goto LABEL_28;
    }
    int64_t v4 = v13 + 2;
    sub_51F2C();
    if (v14 == v15) {
      return;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    if (v12) {
      goto LABEL_28;
    }
    int64_t v4 = v16 + 3;
    sub_51F2C();
    if (v14 == v15) {
      return;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    if (v12) {
      goto LABEL_28;
    }
    int64_t v18 = v17 + 4;
    if (v18 >= v28) {
      return;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v18);
    if (!v12)
    {
      while (1)
      {
        int64_t v4 = v18 + 1;
        if (__OFADD__(v18, 1LL)) {
          goto LABEL_38;
        }
        sub_51F2C();
        if (v14 == v15) {
          return;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        int64_t v18 = v19 + 1;
        if (v12) {
          goto LABEL_28;
        }
      }
    }

    int64_t v4 = v18;
LABEL_28:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_29:
    uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    Hasher.init(_seed:)(v29, *(void *)(a2 + 40));
    Swift::UInt v21 = RepeatSchedule.rawValue.getter(v20);
    Hasher._combine(_:)(v21);
    Swift::Int v22 = Hasher._finalize()();
    uint64_t v23 = -1LL << *(_BYTE *)(a2 + 32);
    uint64_t v24 = v22 & ~v23;
    sub_51F38();
    if ((v25 & 1) == 0) {
      return;
    }
    sub_51F20();
  }

  while (v29 == (void *)sub_51F14());
  uint64_t v26 = ~v23;
  while (1)
  {
    uint64_t v24 = (v24 + 1) & v26;
    sub_51F38();
    if ((v27 & 1) == 0) {
      break;
    }
    sub_51F20();
    if (v29 == (void *)sub_51F14()) {
      goto LABEL_7;
    }
  }

uint64_t sub_51034(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v28 - v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
    unint64_t v10 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }

  sub_26B0(&qword_D5CE0);
  uint64_t result = static _SetStorage.allocate(capacity:)(v8);
  unint64_t v10 = (void *)result;
  uint64_t v30 = *(void *)(a1 + 16);
  if (!v30)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v10;
  }

  unint64_t v11 = 0LL;
  uint64_t v32 = result + 56;
  uint64_t v12 = *(unsigned __int8 *)(v33 + 80);
  uint64_t v28 = a1;
  uint64_t v29 = a1 + ((v12 + 32) & ~v12);
  while (v11 < *(void *)(a1 + 16))
  {
    uint64_t v13 = *(void *)(v33 + 72);
    char v14 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
    v14(v7, v29 + v13 * v11, v2);
    uint64_t v15 = v10[5];
    uint64_t v16 = sub_51DFC(&qword_D5CE8, (uint64_t)&protocol conformance descriptor for Calendar.Component);
    uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v2, v16) & ~(-1LL << *((_BYTE *)v10 + 32));
    sub_51EFC();
    if ((v20 & v19) != 0)
    {
      unint64_t v31 = v11;
      uint64_t v22 = ~v21;
      while (1)
      {
        v14(v5, v10[6] + v17 * v13, v2);
        sub_51DFC(&qword_D5CF0, (uint64_t)&protocol conformance descriptor for Calendar.Component);
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v7, v2);
        uint64_t v24 = *(void (**)(char *, uint64_t))(v33 + 8);
        v24(v5, v2);
        if ((v23 & 1) != 0) {
          break;
        }
        uint64_t v17 = (v17 + 1) & v22;
        sub_51EFC();
        if ((v19 & v20) == 0)
        {
          a1 = v28;
          unint64_t v11 = v31;
          goto LABEL_10;
        }
      }

      uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v7, v2);
      a1 = v28;
      unint64_t v11 = v31;
    }

    else
    {
LABEL_10:
      *(void *)(v32 + 8 * v18) = v20 | v19;
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v10[6] + v17 * v13, v7, v2);
      uint64_t v25 = v10[2];
      BOOL v26 = __OFADD__(v25, 1LL);
      uint64_t v27 = v25 + 1;
      if (v26) {
        goto LABEL_18;
      }
      v10[2] = v27;
    }

    if (++v11 == v30) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

Swift::Int sub_5129C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }

  sub_26B0(&qword_D5CD0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)result;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return (Swift::Int)v4;
  }

  unint64_t v6 = 0LL;
  Swift::Int v7 = result + 56;
  while (v6 < *(void *)(a1 + 16))
  {
    uint64_t v8 = *(void *)(a1 + 32 + 8 * v6);
    Hasher.init(_seed:)(v21, v4[5]);
    Swift::UInt v9 = RepeatSchedule.rawValue.getter(v8);
    Hasher._combine(_:)(v9);
    Swift::Int result = Hasher._finalize()();
    uint64_t v10 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v7 + 8 * (v11 >> 6));
    uint64_t v14 = 1LL << v11;
    if (((1LL << v11) & v13) != 0)
    {
      uint64_t v15 = RepeatSchedule.rawValue.getter(*(void *)(v4[6] + 8 * v11));
      Swift::Int result = RepeatSchedule.rawValue.getter(v8);
      if (v15 == result) {
        goto LABEL_13;
      }
      uint64_t v16 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v16;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)(v7 + 8 * (v11 >> 6));
        uint64_t v14 = 1LL << v11;
        if ((v13 & (1LL << v11)) == 0) {
          break;
        }
        uint64_t v17 = RepeatSchedule.rawValue.getter(*(void *)(v4[6] + 8 * v11));
        Swift::Int result = RepeatSchedule.rawValue.getter(v8);
        if (v17 == result) {
          goto LABEL_13;
        }
      }
    }

    *(void *)(v7 + 8 * v12) = v14 | v13;
    *(void *)(v4[6] + 8 * v1sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v8;
    uint64_t v18 = v4[2];
    BOOL v19 = __OFADD__(v18, 1LL);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_18;
    }
    v4[2] = v20;
LABEL_13:
    if (++v6 == v5) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_51430(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)(v17, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v6);
  Swift::UInt v7 = RepeatSchedule.rawValue.getter(a2);
  Hasher._combine(_:)(v7);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0)
  {
LABEL_7:
    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v17[0] = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_5184C(a2, v10, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = *v3;
    *uint64_t v3 = v17[0];
    swift_bridgeObjectRelease(v16);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v11 = RepeatSchedule.rawValue.getter(*(void *)(*(void *)(v6 + 48) + 8 * v10));
  if (v11 != RepeatSchedule.rawValue.getter(a2))
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        goto LABEL_7;
      }
      uint64_t v13 = RepeatSchedule.rawValue.getter(*(void *)(*(void *)(v6 + 48) + 8 * v10));
    }

    while (v13 != RepeatSchedule.rawValue.getter(a2));
  }

  swift_bridgeObjectRelease(v6);
  uint64_t result = 0LL;
  a2 = *(void *)(*(void *)(*v3 + 48LL) + 8 * v10);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_51594(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_26B0(&qword_D5CD0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    unint64_t v31 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    Swift::Int v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      Hasher.init(_seed:)(v32, *(void *)(v6 + 40));
      Swift::UInt v21 = RepeatSchedule.rawValue.getter(v20);
      Hasher._combine(_:)(v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      *(void *)(*(void *)(v6 + 48) + 8 * v25) = v20;
      ++*(void *)(v6 + 16);
      if (v10) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v11) {
        goto LABEL_35;
      }
      unint64_t v18 = v8[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v11) {
          goto LABEL_35;
        }
        unint64_t v18 = v8[v14];
        if (!v18)
        {
          int64_t v14 = v17 + 2;
          if (v17 + 2 >= v11) {
            goto LABEL_35;
          }
          unint64_t v18 = v8[v14];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v11)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v31;
              uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
              if (v30 > 63) {
                sub_519C8(0LL, (unint64_t)(v30 + 63) >> 6, (void *)(v3 + 56));
              }
              else {
                *Swift::Int v8 = -1LL << v30;
              }
              *(void *)(v3 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v8[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v14 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v14 >= v11) {
                  goto LABEL_35;
                }
                unint64_t v18 = v8[v14];
                ++v19;
                if (v18) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v14 = v19;
          }
        }
      }

uint64_t sub_5184C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_51594(v9);
  }

  else
  {
    if (v8 > v7)
    {
      Swift::Int result = (uint64_t)sub_519E4();
      goto LABEL_14;
    }

    sub_51B78(v9);
  }

  uint64_t v10 = *v3;
  Hasher.init(_seed:)(v20, *(void *)(*v3 + 40));
  Swift::UInt v11 = RepeatSchedule.rawValue.getter(v6);
  Hasher._combine(_:)(v11);
  Swift::Int result = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = result & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = RepeatSchedule.rawValue.getter(*(void *)(*(void *)(v10 + 48) + 8 * a2));
    Swift::Int result = RepeatSchedule.rawValue.getter(v6);
    if (v13 == result)
    {
LABEL_13:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for RepeatSchedule);
      __break(1u);
    }

    else
    {
      uint64_t v14 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v15 = RepeatSchedule.rawValue.getter(*(void *)(*(void *)(v10 + 48) + 8 * a2));
        Swift::Int result = RepeatSchedule.rawValue.getter(v6);
        if (v15 == result) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_519C8(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

void *sub_519E4()
{
  uint64_t v1 = v0;
  sub_26B0(&qword_D5CD0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(void *)(*(void *)(v4 + 48) + 8 * i) = *(void *)(*(void *)(v2 + 48) + 8 * i);
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_51B78(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_26B0(&qword_D5CD0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v14 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v15 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * i);
    Hasher.init(_seed:)(v31, *(void *)(v6 + 40));
    Swift::UInt v21 = RepeatSchedule.rawValue.getter(v20);
    Hasher._combine(_:)(v21);
    Swift::Int result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    *(void *)(*(void *)(v6 + 48) + 8 * v25) = v20;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_39;
    }
    if (v17 >= v11) {
      goto LABEL_35;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v11) {
        goto LABEL_35;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v11) {
          goto LABEL_35;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

      __break(1u);
      return result;
    }
  }

  else
  {
    uint64_t v37 = *(void *)(v35 + 16);
    Swift::Int result = swift_retain(v35);
    if (v37) {
      goto LABEL_21;
    }
  }

  sub_16FD8();
  uint64_t v50 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_34:
  v24[5] = v50;
  sub_16FD8();
  if (v50 >> 62)
  {
    sub_45B94();
    sub_45644();
    sub_16F40();
  }

  uint64_t v52 = sub_7DBC0();
  uint64_t v53 = v52;
  v24[6] = v52;
  if (qword_D30B8 != -1) {
    uint64_t v52 = swift_once(&qword_D30B8, sub_53C74);
  }
  uint64_t v54 = v24[4];
  uint64_t v55 = v24[2];
  WindowedPaginationParameters.isFirstWindow.getter(v52);
  id v56 = WindowedPaginationParameters.isConclusion.getter();
  uint64_t v57 = WindowedPaginationParameters.isFirstWindow.getter(v56);
  WindowedPaginationParameters.isLastWindow.getter(v57);
  WindowedPaginationParameters.isNextWindowLastWindow.getter();
  uint64_t v58 = (void *)swift_task_alloc(48LL);
  v24[7] = v58;
  v58[2] = v55;
  v58[3] = v53;
  v58[4] = v54;
  uint64_t v59 = (void *)swift_task_alloc(dword_D5F94);
  v24[8] = v59;
  *uint64_t v59 = v24;
  v59[1] = sub_818F8;
  sub_8277C();
  return sub_681BC(v60, v61, v62, v63, v64, v65, v66, v67);
}

uint64_t sub_51DFC(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for Calendar.Component(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

id sub_51E3C()
{
  return sub_1D5F8(0LL, 0LL, 0LL, 0xE000000000000000LL);
}

uint64_t sub_51E54@<X0>(unint64_t a1@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1 + 1, 1LL);
}

uint64_t sub_51E6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(a10 + 16));
}

uint64_t sub_51E80()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t sub_51E90()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v0, v1);
}

  ;
}

id sub_51EB4(void *a1)
{
  return objc_msgSend(a1, *(SEL *)(v2 + 832), v1);
}

id sub_51EC4(void *a1)
{
  return objc_msgSend(a1, *(SEL *)(v2 + 832), v1);
}

uint64_t sub_51ED0()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_51EDC()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_51EE4()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_51EEC()
{
  return specialized Array._endMutation()();
}

id sub_51EF4()
{
  return objc_allocWithZone(v0);
}

  ;
}

uint64_t sub_51F14()
{
  return RepeatSchedule.rawValue.getter(v0);
}

uint64_t sub_51F20()
{
  return RepeatSchedule.rawValue.getter(*(void *)(*(void *)(v0 + 48) + 8 * v1));
}

  ;
}

  ;
}

uint64_t sub_51F4C(void *a1, uint64_t a2)
{
  uint64_t v4 = _s20HandleIntentStrategyVMa_4(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = _s21ConfirmIntentStrategyVMa(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SnoozeAlarmHalIntent(0LL);
  uint64_t v11 = type metadata accessor for SnoozeAlarmHalIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(v10, v11);
  if (qword_D3178 != -1) {
    swift_once(&qword_D3178, sub_82958);
  }
  uint64_t v12 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(qword_D84A8, v10, v11);
  uint64_t v14 = v13;
  uint64_t v15 = sub_26B0(&qword_D5CF8);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v12, v14, v15);
  sub_4698((uint64_t)a1, (uint64_t)v9);
  sub_34BBC(a2, (uint64_t)&v9[*(int *)(v7 + 20)]);
  uint64_t v16 = sub_9570(&qword_D5D00, _s21ConfirmIntentStrategyVMa, (uint64_t)&unk_A6DE0);
  uint64_t v17 = static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)( v9,  sub_5216C,  0LL,  v7,  v16);
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter(v17);
  sub_4698((uint64_t)a1, (uint64_t)v6);
  sub_34BBC(a2, (uint64_t)&v6[*(int *)(v4 + 20)]);
  uint64_t v18 = sub_9570(&qword_D5D08, _s20HandleIntentStrategyVMa_4, (uint64_t)&unk_A7700);
  uint64_t v19 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v6, v4, v18);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v19);
  sub_1B538(a2);
  _s20HandleIntentStrategyVwxx_1(a1);
  sub_25670((uint64_t)v6, _s20HandleIntentStrategyVMa_4);
  return sub_25670((uint64_t)v9, _s21ConfirmIntentStrategyVMa);
}

BOOL sub_5216C()
{
  uint64_t v0 = sub_26B0(&qword_D5D10);
  uint64_t v1 = (void *)IntentResolutionRecord.intentResponse.getter(v0);
  uint64_t v2 = dispatch thunk of SnoozeAlarmHalIntentResponse.code.getter();

  uint64_t v3 = SnoozeAlarmHalIntentResponseCode.rawValue.getter(v2);
  return v3 == SnoozeAlarmHalIntentResponseCode.rawValue.getter(3LL);
}

ValueMetadata *_s24UnsupportedValueStrategyVMa_2()
{
  return &_s24UnsupportedValueStrategyVN_2;
}

uint64_t sub_521D4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D5D18);
  sub_26F0(v0, (uint64_t)qword_D5D18);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_5221C(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  v2[14] = sub_19754(v4);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v2[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[16] = v6;
  v2[17] = sub_19754(v6);
  uint64_t v7 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v2[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[19] = v8;
  v2[20] = sub_19754(v8);
  uint64_t v9 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[21] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[22] = v10;
  v2[23] = sub_19754(v10);
  uint64_t v11 = sub_26B0(&qword_D43B8);
  v2[24] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[25] = v12;
  v2[26] = sub_19754(v12);
  uint64_t v13 = type metadata accessor for NLContextUpdate(0LL);
  v2[27] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[28] = v14;
  v2[29] = sub_19754(v14);
  return sub_1988C();
}

uint64_t sub_522F8(uint64_t a1)
{
  if (qword_D3098 != -1) {
    swift_once(&qword_D3098, sub_521D4);
  }
  uint64_t v2 = v1[25];
  uint64_t v3 = v1[26];
  uint64_t v4 = v1[24];
  uint64_t v5 = v1[11];
  uint64_t v6 = sub_26F0(v1[15], (uint64_t)qword_D5D18);
  v1[30] = v6;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v5, v4);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v7, v8, v9, v10, v11, v12, v13, v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = v1[24];
  if (v17)
  {
    uint64_t v19 = (uint8_t *)sub_16AC4(12LL);
    *(_DWORD *)uint64_t v19 = 134217984;
    uint64_t v20 = (void *)ParameterResolutionRecord.result.getter(v18);
    os_log_type_t type = v16;
    uint64_t v21 = v6;
    id v22 = [v20 unsupportedReason];

    sub_52C8C();
    void v1[9] = v22;
    uint64_t v6 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 9, v1 + 10, v19 + 4, v19 + 12);
    _os_log_impl( &dword_0,  v15,  type,  "CreateAlarm.UnsupportedValueStrategy.makeUnsupportedValueOutput() called with unsupportedReason: %ld",  v19,  0xCu);
    sub_16AA8((uint64_t)v19);
  }

  else
  {
    sub_52C8C();
  }

  unint64_t v31 = (os_log_s *)Logger.logObject.getter(v23, v24, v25, v26, v27, v28, v29, v30);
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)sub_16AC4(2LL);
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl(&dword_0, v31, v32, "Hitting alarm RF codepath.", v33, 2u);
    sub_16AA8((uint64_t)v33);
  }

  uint64_t v34 = v1[19];
  uint64_t v35 = v1[20];
  uint64_t v37 = v1[17];
  uint64_t v36 = v1[18];
  uint64_t v38 = v1[15];
  uint64_t v39 = v1[16];

  (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))( v35,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v36);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v37, v6, v38);
  uint64_t v40 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v35, v37, v40);
  if (qword_D31A8 != -1) {
    swift_once(&qword_D31A8, sub_89280);
  }
  uint64_t v41 = (void *)swift_task_alloc(dword_D50CC);
  v1[31] = v41;
  *uint64_t v41 = v1;
  v41[1] = sub_52588;
  return sub_46DE4();
}

uint64_t sub_52588(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 256) = a1;
  *(void *)(v3 + 264) = v1;
  swift_task_dealloc();
  return sub_1988C();
}

uint64_t sub_525EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  v7[34] = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_52658;
  return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v7[10],  v7[14],  v7[29],  v7[23],  0LL);
}

uint64_t sub_52658()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 28Hasher.init(_seed:)(v3, 0LL) = v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)v2[32];
  (*(void (**)(void, void))(v2[13] + 8LL))(v2[14], v2[12]);

  if (v0) {
    uint64_t v4 = sub_528F4;
  }
  else {
    uint64_t v4 = sub_526DC;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_526DC()
{
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 136);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 176) + 8LL))(v5, *(void *)(v0 + 168));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  sub_19828();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_52780()
{
  uint64_t v4 = sub_2D010();
  uint64_t v12 = (void *)Logger.logObject.getter(v4, v5, v6, v7, v8, v9, v10, v11);
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (sub_16D30(v13))
  {
    uint64_t v0 = (void *)sub_16AC4(12LL);
    uint64_t v14 = sub_16AC4(32LL);
    sub_52C10(4.8149e-34);
    uint64_t v15 = sub_26B0(&qword_D4890);
    uint64_t v16 = sub_2D104(v15);
    uint64_t v23 = sub_52CAC(v16, v17, v18, v19, v20, v21, v22);
    sub_52C30(v23);
    swift_bridgeObjectRelease(v3);
    sub_2CF7C();
    sub_2CF7C();
    sub_2CFBC(&dword_0, v24, v25, "Error in RF path: %s");
    sub_2D034();
    sub_16AA8(v14);
    sub_16AA8((uint64_t)v0);
  }

  else
  {
    sub_2CF7C();
    sub_2CF7C();
  }

  uint64_t v26 = sub_52BE4();
  sub_52CB8(v26, (uint64_t)&protocol witness table for ABCReport);
  *uint64_t v2 = sub_52CC4();
  uint64_t v27 = type metadata accessor for DialogLayerErrorSubType(0LL);
  uint64_t v28 = sub_52C4C(v27);
  sub_52C64(v28, enum case for ABCReport.dialog(_:));
  static BarbaraWalters.stopThePresses(for:)(v0);
  uint64_t v29 = _s20HandleIntentStrategyVwxx_1(v0);
  swift_willThrow(v29, v30, v31, v32, v33, v34, v35, v36);
  sub_52C9C();
  swift_task_dealloc();
  sub_19828();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return sub_24F74(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_528F4()
{
  uint64_t v4 = sub_2D010();
  uint64_t v12 = (void *)Logger.logObject.getter(v4, v5, v6, v7, v8, v9, v10, v11);
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (sub_16D30(v13))
  {
    uint64_t v0 = (void *)sub_16AC4(12LL);
    uint64_t v14 = sub_16AC4(32LL);
    sub_52C10(4.8149e-34);
    uint64_t v15 = sub_26B0(&qword_D4890);
    uint64_t v16 = sub_2D104(v15);
    uint64_t v23 = sub_52CAC(v16, v17, v18, v19, v20, v21, v22);
    sub_52C30(v23);
    swift_bridgeObjectRelease(v3);
    sub_2CF7C();
    sub_2CF7C();
    sub_2CFBC(&dword_0, v24, v25, "Error in RF path: %s");
    sub_2D034();
    sub_16AA8(v14);
    sub_16AA8((uint64_t)v0);
  }

  else
  {
    sub_2CF7C();
    sub_2CF7C();
  }

  uint64_t v26 = sub_52BE4();
  sub_52CB8(v26, (uint64_t)&protocol witness table for ABCReport);
  *uint64_t v2 = sub_52CC4();
  uint64_t v27 = type metadata accessor for DialogLayerErrorSubType(0LL);
  uint64_t v28 = sub_52C4C(v27);
  sub_52C64(v28, enum case for ABCReport.dialog(_:));
  static BarbaraWalters.stopThePresses(for:)(v0);
  uint64_t v29 = _s20HandleIntentStrategyVwxx_1(v0);
  swift_willThrow(v29, v30, v31, v32, v33, v34, v35, v36);
  sub_52C9C();
  swift_task_dealloc();
  sub_19828();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return sub_24F74(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_52A68(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(sub_52A80, 0LL, 0LL);
}

uint64_t sub_52A80()
{
  uint64_t v1 = sub_26B0(&qword_D43B8);
  uint64_t v2 = ParameterResolutionRecord.intent.getter(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_52AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D5D54);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_319A4;
  return sub_5221C(a1, a2);
}

uint64_t sub_52B18(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_D5D4C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_5D0C;
  return sub_52A68(a1);
}

uint64_t sub_52B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_52BE0;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t sub_52BE4()
{
  return type metadata accessor for ABCReport(0LL);
}

uint64_t sub_52C10(float a1)
{
  *uint64_t v2 = a1;
  *(void *)(v3 + 56) = v1;
  return swift_errorRetain(v1);
}

uint64_t sub_52C30(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v3, v2);
}

uint64_t sub_52C4C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v1, v2, a1);
}

uint64_t sub_52C64(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v3, a2, v2);
}

uint64_t sub_52C78()
{
  return (*(uint64_t (**)(void, void))(v0[22] + 8LL))(v0[23], v0[21]);
}

uint64_t sub_52C8C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_52C9C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_52CAC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_3D10(a1, a2, (uint64_t *)va);
}

void *sub_52CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = a2;
  return sub_19558(v2);
}

uint64_t sub_52CC4()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_52CD0(uint64_t a1)
{
  void v2[9] = a1;
  uint64_t v3 = type metadata accessor for ButtonOption(0LL);
  v2[10] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[11] = v4;
  v2[12] = sub_19754(v4);
  uint64_t v5 = type metadata accessor for TemplatingText(0LL);
  v2[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[14] = v6;
  v2[15] = sub_19754(v6);
  uint64_t v7 = type metadata accessor for TemplatingResult(0LL);
  v2[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[17] = v8;
  v2[18] = sub_250D0(v8);
  v2[19] = swift_task_alloc(v1);
  uint64_t v9 = sub_26B0(&qword_D40E8);
  v2[20] = sub_250D0(*(void *)(v9 - 8));
  v2[21] = swift_task_alloc(v1);
  return sub_1988C();
}

uint64_t sub_52D84()
{
  if (qword_D30A8 != -1) {
    swift_once(&qword_D30A8, sub_534F4);
  }
  uint64_t v1 = (void *)swift_task_alloc(dword_D4DBC);
  *(void *)(v0 + 176) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_52E00;
  return sub_38854();
}

uint64_t sub_52E00()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 184LL) = v0;
  swift_task_dealloc(v2);
  return sub_1988C();
}

uint64_t sub_52E5C()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[17];
  uint64_t v3 = TemplatingResult.sections.getter();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  v0[24] = v4;
  sub_19780(v4);
  sub_38F88(v3, v1);
  sub_1743C();
  uint64_t v5 = type metadata accessor for TemplatingSection(0LL);
  v0[25] = v5;
  if (sub_53C04() == 1)
  {
    sub_226B0(v0[21]);
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v9 = v0[14];
    uint64_t v8 = v0[15];
    uint64_t v10 = v0[13];
    TemplatingSection.content.getter();
    uint64_t v11 = sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL));
    uint64_t v6 = TemplatingText.text.getter(v11);
    uint64_t v7 = v12;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }

  v0[26] = v6;
  v0[27] = v7;
  os_log_type_t v13 = (void *)swift_task_alloc(dword_D4DDC);
  v0[28] = v13;
  *os_log_type_t v13 = v0;
  v13[1] = sub_52F64;
  return sub_38D90();
}

uint64_t sub_52F64()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 224);
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 216));
    uint64_t v4 = sub_53468;
  }

  else
  {
    uint64_t v4 = sub_52FD0;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_52FD0()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = TemplatingResult.sections.getter();
  v1(v3, v4);
  sub_38F88(v5, v2);
  sub_16FF4();
  int v6 = sub_53C04();
  uint64_t v7 = *(void *)(v0 + 216);
  if (v6 == 1)
  {
    sub_226B0(*(void *)(v0 + 160));
    if (v7)
    {
      unint64_t v8 = *(void *)(v0 + 216);
LABEL_10:
      unint64_t v31 = v8;
LABEL_13:
      swift_bridgeObjectRelease(v31);
      if (qword_D30A0 != -1) {
        swift_once(&qword_D30A0, sub_534AC);
      }
      uint64_t v32 = type metadata accessor for Logger(0LL);
      uint64_t v33 = sub_26F0(v32, (uint64_t)qword_D5D60);
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v33, v34, v35, v36, v37, v38, v39, v40);
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)sub_16AC4(2LL);
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl( &dword_0,  v41,  v42,  "Error generating yes/not button titles for confirmation. We didn't throw, but returned nil for the text. This is an unhandled error.",  v43,  2u);
        sub_16AA8((uint64_t)v43);
      }

      uint64_t v44 = _swiftEmptyArrayStorage;
      goto LABEL_18;
    }

    unint64_t v16 = 0LL;
LABEL_12:
    unint64_t v31 = v16;
    goto LABEL_13;
  }

  uint64_t v9 = *(void *)(v0 + 200);
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 104);
  TemplatingSection.content.getter();
  uint64_t v13 = sub_19780(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL));
  uint64_t v14 = TemplatingText.text.getter(v13);
  unint64_t v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  if (!v7) {
    goto LABEL_12;
  }
  unint64_t v8 = *(void *)(v0 + 216);
  if (!v16) {
    goto LABEL_10;
  }
  uint64_t v72 = (void *)(v0 + 16);
  uint64_t v73 = v14;
  if (qword_D30A0 != -1) {
    swift_once(&qword_D30A0, sub_534AC);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_26F0(v17, (uint64_t)qword_D5D60);
  swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v18 = swift_bridgeObjectRetain_n(v16, 2LL);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v18, v19, v20, v21, v22, v23, v24, v25);
  os_log_type_t v27 = static os_log_type_t.default.getter();
  uint64_t v71 = v8;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v70 = v0 + 56;
    uint64_t v28 = *(void *)(v0 + 208);
    uint64_t v29 = sub_16AC4(22LL);
    uint64_t v30 = sub_16AC4(64LL);
    uint64_t v74 = v30;
    *(_DWORD *)uint64_t v29 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(void *)(v0 + 56) = sub_3D10(v28, v8, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease_n(v8, 3LL);
    *(_WORD *)(v29 + 12) = 2080;
    swift_bridgeObjectRetain(v16);
    *(void *)(v0 + 64) = sub_3D10(v73, v16, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease_n(v16, 3LL);
    _os_log_impl(&dword_0, v26, v27, "Building confirmation button view with text: %s, %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 2LL);
    sub_16AA8(v30);
    sub_16AA8(v29);
  }

  else
  {
    swift_bridgeObjectRelease_n(v8, 2LL);
    swift_bridgeObjectRelease_n(v16, 2LL);
  }

  uint64_t v46 = type metadata accessor for ApplicationContext(0LL);
  uint64_t v47 = static ApplicationContext.shared.getter(v46);
  ApplicationContext.deviceState.getter(v72);
  swift_release(v47);
  uint64_t v48 = *(void *)(v0 + 40);
  uint64_t v49 = *(void *)(v0 + 48);
  sub_80B4(v72, v48);
  LOBYTE(v4static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = dispatch thunk of DeviceState.isWatch.getter(v48, v49);
  uint64_t v50 = _s20HandleIntentStrategyVwxx_1(v72);
  sub_53C40(v50, enum case for ButtonOption.yes(_:));
  sub_53C4C();
  uint64_t v52 = v51;
  uint64_t v53 = sub_53C34();
  sub_53C40(v53, enum case for ButtonOption.cancel(_:));
  sub_53C4C();
  uint64_t v55 = v54;
  uint64_t v56 = sub_53C34();
  uint64_t v63 = sub_53BD8(v56, v57, *(void *)(v0 + 208), v58, v59, v60, v61, v62, v70, v71, (uint64_t)v72, v73);
  if ((v47 & 1) != 0) {
    sub_5356C(v63, v64, v65, v66, v67, v68);
  }
  else {
    sub_536DC(v63, v64, v65, v66, v67, v68);
  }
  uint64_t v44 = v69;

  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v0 + 16);
LABEL_18:
  sub_53BC4();
  sub_19800();
  sub_1978C();
  sub_19794();
  sub_197C0();
  sub_19830();
  return (*(uint64_t (**)(void *))(v0 + 8))(v44);
}

uint64_t sub_53424()
{
  return sub_2D0D4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_53468()
{
  return sub_2D0D4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_534AC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D5D60);
  sub_26F0(v0, (uint64_t)qword_D5D60);
  return static SiriTimeLog.alarmPlugin.getter();
}

uint64_t sub_534F4()
{
  uint64_t v0 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for AlarmBaseCATs_Async(0LL);
  static CATOption.defaultMode.getter();
  uint64_t result = CATWrapper.__allocating_init(options:globals:)(v2, 0LL);
  qword_D5D78 = result;
  return result;
}

void sub_5356C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v12 = sub_26B0(&qword_D4188);
  uint64_t v13 = sub_53BB8(v12);
  *(_OWORD *)(v13 + 16) = xmmword_A4CD0;
  *(void *)(v13 + 32) = a5;
  sub_53BAC(v13, v14, v15, v16);
  swift_bridgeObjectRetain(a2);
  id v17 = a5;
  uint64_t v18 = (void *)sub_53C28(a1, a2);
  uint64_t v19 = sub_53BB8(v12);
  *(_OWORD *)(v19 + 16) = xmmword_A4CD0;
  *(void *)(v19 + 32) = a6;
  sub_53BAC(v19, v20, v21, v22);
  swift_bridgeObjectRetain(a4);
  id v23 = a6;
  uint64_t v24 = (void *)sub_53C28(a3, a4);
  id v25 = [objc_allocWithZone(SASTItemGroup) init];
  uint64_t v26 = sub_53C14(v12);
  *(_OWORD *)(v26 + 16) = xmmword_A61A0;
  *(void *)(v26 + 32) = v18;
  *(void *)(v26 + 40) = v24;
  sub_53BAC(v26, v27, v28, v29);
  id v30 = v18;
  id v31 = v24;
  sub_53A28(v36, v25, &qword_D5E00, (SEL *)&selRef_setTemplateItems_);
  uint64_t v32 = sub_53BB8(v12);
  *(_OWORD *)(v32 + 16) = xmmword_A4CD0;
  *(void *)(v32 + 32) = v25;
  sub_53BAC(v32, v33, v34, v35);

  sub_4AE44();
}

void sub_536DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v12 = sub_53C20(objc_allocWithZone(&OBJC_CLASS___SAUIConfirmationView));
  sub_539A0(a1, a2, v12);
  sub_539E4(a3, a4, v12);
  uint64_t v13 = sub_26B0(&qword_D4188);
  uint64_t v14 = sub_53BB8(v13);
  *(_OWORD *)(v14 + 16) = xmmword_A4CD0;
  *(void *)(v14 + 32) = a5;
  sub_53BAC(v14, v15, v16, v17);
  id v18 = a5;
  sub_53BF4((uint64_t)v18, v19, v20, (SEL *)&selRef_setConfirmCommands_);
  uint64_t v21 = sub_53BB8(v13);
  *(_OWORD *)(v21 + 16) = xmmword_A4CD0;
  *(void *)(v21 + 32) = a6;
  sub_53BAC(v21, v22, v23, v24);
  id v25 = a6;
  sub_53BF4((uint64_t)v25, v26, v27, (SEL *)&selRef_setDenyCommands_);
  id v28 = sub_53C20(objc_allocWithZone(&OBJC_CLASS___SAUIConfirmationOption));
  sub_2257C(v12, (SEL *)&selRef_confirmText);
  if (v29)
  {
    NSString v30 = String._bridgeToObjectiveC()();
    sub_1743C();
  }

  else
  {
    NSString v30 = 0LL;
  }

  sub_2865C(v28, "setLabel:");

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(SAUIConfirmationOptionConfirmationOptionTypeCONFIRMValue);
  sub_53A90(v31, v32, v28);
  if (sub_53AE0(v12, (SEL *)&selRef_confirmCommands))
  {
    sub_26B0(&qword_D5E08);
    v33.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_1743C();
  }

  else
  {
    v33.super.Class isa = 0LL;
  }

  sub_2865C(v28, "setCommands:");

  id v34 = sub_53C20(objc_allocWithZone(&OBJC_CLASS___SAUIConfirmationOption));
  sub_2257C(v12, (SEL *)&selRef_denyText);
  if (v35)
  {
    NSString v36 = String._bridgeToObjectiveC()();
    sub_16FF4();
  }

  else
  {
    NSString v36 = 0LL;
  }

  sub_2865C(v34, "setLabel:");

  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(SAUIConfirmationOptionConfirmationOptionTypeDENYValue);
  sub_53A90(v37, v38, v34);
  if (sub_53AE0(v12, (SEL *)&selRef_denyCommands))
  {
    sub_26B0(&qword_D5E08);
    v39.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_16FF4();
  }

  else
  {
    v39.super.Class isa = 0LL;
  }

  sub_2865C(v34, "setCommands:");

  uint64_t v40 = sub_53C14(v13);
  *(_OWORD *)(v40 + 16) = xmmword_A61A0;
  *(void *)(v40 + 32) = v28;
  *(void *)(v40 + 40) = v34;
  sub_53BAC(v40, v41, v42, v43);
  id v44 = v28;
  id v45 = v34;
  sub_53B3C(v50, v12);
  uint64_t v46 = sub_53BB8(v13);
  *(_OWORD *)(v46 + 16) = xmmword_A4CD0;
  *(void *)(v46 + 32) = v12;
  sub_53BAC(v46, v47, v48, v49);

  sub_4AE44();
}

void sub_539A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setConfirmText:v4];
}

void sub_539E4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setDenyText:v4];
}

void sub_53A28(uint64_t a1, void *a2, uint64_t *a3, SEL *a4)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  objc_msgSend(a2, *a4, isa);
}

void sub_53A90(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setType:v5];
}

uint64_t sub_53AE0(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = sub_26B0(&qword_D5E08);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  return v5;
}

void sub_53B3C(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setAllConfirmationOptions:isa];
}

uint64_t sub_53BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Array._endMutation()(a1, a2, a3, a4);
}

uint64_t sub_53BB8(uint64_t a1)
{
  return swift_allocObject(a1, 40LL, 7LL);
}

uint64_t sub_53BC4()
{
  return swift_task_dealloc(*(void *)(v0 + 168));
}

uint64_t sub_53BD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

void sub_53BF4(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
}

uint64_t sub_53C04()
{
  return sub_16880(v1, 1LL, v0);
}

uint64_t sub_53C14(uint64_t a1)
{
  return swift_allocObject(a1, 48LL, 7LL);
}

id sub_53C20(void *a1)
{
  return [a1 *(SEL *)(v1 + 472)];
}

uint64_t sub_53C28(uint64_t a1, uint64_t a2)
{
  return SASTButtonItem.init(label:commands:)(a1, a2, v2);
}

uint64_t sub_53C34()
{
  return v2(v0, v1);
}

uint64_t sub_53C40(uint64_t a1, uint64_t a2)
{
  return v2(v3, a2, v4);
}

void sub_53C4C()
{
}

uint64_t sub_53C58(uint64_t a1)
{
  return sub_53C90( a1,  (void (*)(void))type metadata accessor for SearchAlarmCATsSimple,  (uint64_t (*)(char *, void))&CATWrapperSimple.__allocating_init(options:globals:),  &qword_D83D8);
}

uint64_t sub_53C74(uint64_t a1)
{
  return sub_53C90( a1,  (void (*)(void))type metadata accessor for SearchQueryCATPatternsExecutor,  (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:),  &qword_D83E0);
}

uint64_t sub_53C90( uint64_t a1, void (*a2)(void), uint64_t (*a3)(char *, void), uint64_t *a4)
{
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2(0LL);
  static CATOption.defaultMode.getter();
  uint64_t result = a3(v8, 0LL);
  *a4 = result;
  return result;
}

void sub_53D18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.unknown(_:)
    || v8 == enum case for AlarmNLv4Constants.AlarmVerb.checkExistence(_:))
  {
    goto LABEL_6;
  }

  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.create(_:))
  {
LABEL_8:
    type metadata accessor for CreateAlarmIntent(0LL);
    goto LABEL_16;
  }

  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.delete(_:))
  {
    type metadata accessor for DeleteAlarmIntent(0LL);
    goto LABEL_16;
  }

  if (v8 == enum case for AlarmNLv4Constants.AlarmVerb.disable(_:))
  {
LABEL_12:
    uint64_t v10 = type metadata accessor for HALAlarmDeviceContext(0LL);
    if (sub_16880(a2, 1LL, v10) != 1)
    {
      type metadata accessor for DismissAlarmHalIntent(0LL);
      goto LABEL_16;
    }

void sub_53F40(uint64_t a1, os_log_s *a2)
{
  if (qword_D30C0 != -1) {
    swift_once(&qword_D30C0, sub_54140);
  }
  uint64_t v6 = sub_16C80();
  sub_56204(v6, (uint64_t)qword_D5E20);
  os_log_type_t v7 = sub_16C50();
  if (sub_16D30(v7))
  {
    int v8 = (_WORD *)sub_1EFA4();
    sub_45838(v8);
    sub_56198(&dword_0, v9, v10, "In getSKIntentFromNLv4Intent.");
    sub_16AA8(v3);
  }

  uint64_t ObjectType = swift_getObjectType(a1);
  os_log_type_t v12 = a1;
  uint64_t v13 = SIRINLUUserDialogAct.firstUsoTask.getter(ObjectType);
  if (v13)
  {
    sub_562AC(v13);
    sub_17324();
  }

  else
  {
    sub_16D60();
    os_log_type_t v14 = sub_16D40();
    if (sub_16ACC(v14))
    {
      uint64_t v15 = (uint8_t *)sub_1EFA4();
      *(_WORD *)uint64_t v15 = 0;
      sub_16B44(&dword_0, a2, v12, "getSKIntentFromNLv4Intent(): There's no firstUsoTask. Returning nil intent", v15);
      sub_16AA8((uint64_t)v15);
    }
  }

  sub_214A4();
}

void sub_54044(os_log_type_t a1, os_log_s *a2)
{
  if (qword_D30C0 != -1) {
    swift_once(&qword_D30C0, sub_54140);
  }
  uint64_t v6 = sub_16C80();
  sub_56204(v6, (uint64_t)qword_D5E20);
  os_log_type_t v7 = sub_16C50();
  if (sub_16D30(v7))
  {
    int v8 = (_WORD *)sub_1EFA4();
    sub_45838(v8);
    sub_56198(&dword_0, v9, v10, "Getting SK intent from uso parse");
    sub_16AA8(v3);
  }

  os_log_type_t v11 = a1;
  uint64_t v13 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v12);
  if (v13)
  {
    sub_562AC(v13);
    sub_17324();
  }

  else
  {
    sub_16D60();
    os_log_type_t v14 = sub_16D40();
    if (sub_16ACC(v14))
    {
      uint64_t v15 = (uint8_t *)sub_1EFA4();
      *(_WORD *)uint64_t v15 = 0;
      sub_16B44(&dword_0, a2, v11, "getSKIntentFromNLv4Intent(): There's no firstUsoTask. Returning nil intent", v15);
      sub_16AA8((uint64_t)v15);
    }
  }

  sub_214A4();
}

uint64_t sub_54140()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D5E20);
  sub_26F0(v0, (uint64_t)qword_D5E20);
  return static SiriTimeLog.alarmFlow.getter();
}

id sub_54188(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = a2;
  uint64_t v3 = sub_26B0(&qword_D37D0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v77 - v8;
  __chkstk_darwin(v7);
  uint64_t v81 = (uint64_t)&v77 - v10;
  uint64_t v11 = type metadata accessor for HALAlarmDeviceContext(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v80 = (char *)&v77 - v16;
  uint64_t v17 = type metadata accessor for SiriReferenceResolutionResolver(0LL);
  __chkstk_darwin(v17);
  uint64_t v83 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  uint64_t v85 = *(void *)(v19 - 8);
  uint64_t v86 = v19;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_D30C0 != -1) {
    goto LABEL_39;
  }
  while (1)
  {
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_26F0(v22, (uint64_t)qword_D5E20);
    uint64_t v24 = swift_retain_n(a1, 4LL);
    uint64_t v84 = v23;
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v24, v25, v26, v27, v28, v29, v30, v31);
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc(22LL, -1LL);
      uint64_t v79 = v12;
      uint64_t v35 = v34;
      uint64_t v36 = swift_slowAlloc(64LL, -1LL);
      uint64_t v78 = v15;
      uint64_t v37 = v36;
      uint64_t v88 = v36;
      *(_DWORD *)uint64_t v35 = 136315394;
      uint64_t v77 = v6;
      uint64_t v38 = UsoTask.verbString.getter(v36);
      unint64_t v40 = v39;
      uint64_t v87 = sub_3D10(v38, v39, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v35 + 4, v35 + 12);
      swift_release_n(a1, 2LL);
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v87 = a1;
      uint64_t v41 = type metadata accessor for UsoTask(0LL);
      swift_retain(a1);
      uint64_t v42 = String.init<A>(describing:)(&v87, v41);
      unint64_t v44 = v43;
      uint64_t v87 = sub_3D10(v42, v43, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v35 + 14, v35 + 22);
      swift_release_n(a1, 2LL);
      unint64_t v45 = v44;
      uint64_t v6 = v77;
      swift_bridgeObjectRelease(v45);
      _os_log_impl(&dword_0, v32, v33, "Building SK intent with verb %s from alarmTask: %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v37, 2LL);
      uint64_t v46 = v37;
      uint64_t v15 = v78;
      swift_slowDealloc(v46, -1LL, -1LL);
      uint64_t v47 = v35;
      uint64_t v12 = v79;
      swift_slowDealloc(v47, -1LL, -1LL);
    }

    else
    {

      swift_release_n(a1, 4LL);
    }

    sub_256B8((uint64_t)v21);
    uint64_t v48 = v86;
    int v49 = (*(uint64_t (**)(char *, uint64_t))(v85 + 88))(v21, v86);
    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.unknown(_:))
    {
      uint64_t v50 = swift_retain_n(a1, 2LL);
      uint64_t v58 = (os_log_s *)Logger.logObject.getter(v50, v51, v52, v53, v54, v55, v56, v57);
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v61 = swift_slowAlloc(32LL, -1LL);
        uint64_t v88 = v61;
        *(_DWORD *)uint64_t v60 = 136315138;
        uint64_t v62 = UsoTask.verbString.getter(v61);
        unint64_t v64 = v63;
        uint64_t v87 = sub_3D10(v62, v63, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v60 + 4, v60 + 12);
        swift_release_n(a1, 2LL);
        swift_bridgeObjectRelease(v64);
        _os_log_impl(&dword_0, v58, v59, "Unexpected AlarmVerb: %s", v60, 0xCu);
        swift_arrayDestroy(v61, 1LL);
        swift_slowDealloc(v61, -1LL, -1LL);
        swift_slowDealloc(v60, -1LL, -1LL);
      }

      else
      {

        swift_release_n(a1, 2LL);
      }

LABEL_12:
      type metadata accessor for SearchAlarmIntent(0LL);
      uint64_t v67 = swift_retain(a1);
      return sub_556A0(v67);
    }

    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.checkExistence(_:)) {
      goto LABEL_12;
    }
    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.create(_:))
    {
LABEL_10:
      type metadata accessor for CreateAlarmIntent(0LL);
      uint64_t v65 = swift_retain(a1);
      static SiriReferenceResolutionResolver.shared.getter(v65);
      sub_4E0C(a1);
      return (id)v66;
    }

    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.delete(_:))
    {
      type metadata accessor for DeleteAlarmIntent(0LL);
      swift_retain(a1);
      return sub_549D8();
    }

    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.disable(_:)) {
      goto LABEL_18;
    }
    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.enable(_:)) {
      goto LABEL_21;
    }
    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.read(_:)
      || v49 == enum case for AlarmNLv4Constants.AlarmVerb.request(_:))
    {
      goto LABEL_12;
    }

    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.snooze(_:)) {
      break;
    }
    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.summarise(_:)) {
      goto LABEL_12;
    }
    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.update(_:))
    {
      type metadata accessor for UpdateAlarmIntent(0LL);
      uint64_t v74 = swift_retain(a1);
      sub_54B88(v74);
      return (id)v66;
    }

    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.noVerb(_:)) {
      goto LABEL_10;
    }
    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.close(_:)) {
      goto LABEL_18;
    }
    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.resume(_:)) {
      goto LABEL_21;
    }
    if (v49 == enum case for AlarmNLv4Constants.AlarmVerb.stop(_:))
    {
LABEL_18:
      sub_4D80(v82, (uint64_t)v6, &qword_D37D0);
      if (sub_16880((uint64_t)v6, 1LL, v11) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v6, v11);
        id v71 = [objc_allocWithZone((Class)type metadata accessor for ChangeAlarmStatusIntent(0)) init];
        [v71 setOperation:2];
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v15, v11);
        sub_A40C((uint64_t)v9, 0LL, 1LL, v11);
        id v68 = sub_34690(v71, (uint64_t)v9, 0);

        sub_19594((uint64_t)v9, &qword_D37D0);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
        return v68;
      }

      sub_19594((uint64_t)v6, &qword_D37D0);
LABEL_21:
      type metadata accessor for ChangeAlarmStatusIntent(0LL);
      uint64_t v70 = swift_retain(a1);
      sub_55BE4(v70);
      return (id)v66;
    }

    _diagnoseUnexpectedEnumCase<A>(type:)(v48, v48);
    __break(1u);
LABEL_39:
    swift_once(&qword_D30C0, sub_54140);
  }

  uint64_t v73 = v81;
  sub_4D80(v82, v81, &qword_D37D0);
  if (sub_16880(v73, 1LL, v11) == 1)
  {
    sub_19594(v73, &qword_D37D0);
    return [objc_allocWithZone((Class)type metadata accessor for SnoozeAlarmHalIntent(0)) init];
  }

  uint64_t v75 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v80, v73, v11);
  id v76 = [objc_allocWithZone((Class)type metadata accessor for SnoozeAlarmHalIntent(0)) init];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v75, v11);
  sub_A40C((uint64_t)v9, 0LL, 1LL, v11);
  id v68 = sub_34690(v76, (uint64_t)v9, 0);

  sub_19594((uint64_t)v9, &qword_D37D0);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v75, v11);
  return v68;
}

id sub_549D8()
{
  id v1 = [sub_56224() init];
  uint64_t v2 = (void *)qword_D30C0;
  id v3 = v1;
  uint64_t v4 = sub_16C80();
  sub_56204(v4, (uint64_t)qword_D5E20);
  os_log_type_t v5 = sub_16C50();
  if (sub_16D30(v5))
  {
    uint64_t v6 = (_WORD *)sub_1EFA4();
    sub_45838(v6);
    sub_56198(&dword_0, v7, v8, "Making DeleteAlarmIntent...");
    sub_16AA8(v0);
  }

  sub_56254();
  sub_562C4();
  uint64_t v10 = (void *)v9;
  sub_22FBC(v9, "setAlarmSearch:");

  id v11 = v3;
  sub_16D60();
  os_log_type_t v12 = sub_16C50();
  if (sub_16D30(v12))
  {
    uint64_t v13 = (_DWORD *)sub_16AC4(12LL);
    uint64_t v14 = (void *)sub_16AC4(8LL);
    *uint64_t v13 = 138412290;
    id v19 = v11;
    id v15 = v11;
    sub_56268((uint64_t)&v19);
    void *v14 = v11;

    sub_561F0(&dword_0, v16, v17, "Inited DeleteAlarmIntent: %@");
    sub_26B0(&qword_D3858);
    sub_16BB4((uint64_t)v14);
    sub_16AA8((uint64_t)v14);
    sub_16AA8((uint64_t)v13);

    sub_16FD8();
  }

  else
  {

    sub_16FD8();
  }

  return v11;
}

void sub_54B88(uint64_t a1)
{
  uint64_t v3 = sub_26B0(&qword_D37D8);
  __chkstk_darwin(v3);
  sub_177D8();
  uint64_t v6 = v4 - v5;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v166 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v166 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v166 - v15;
  __chkstk_darwin(v14);
  uint64_t v171 = (uint64_t)&v166 - v17;
  id v18 = [sub_56224() init];
  uint64_t v19 = qword_D30C0;
  uint64_t v20 = (os_log_s *)v18;
  if (v19 != -1) {
    swift_once(&qword_D30C0, sub_54140);
  }
  uint64_t v21 = sub_16C80();
  uint64_t v22 = sub_26F0(v21, (uint64_t)qword_D5E20);
  sub_16D50();
  os_log_type_t v23 = sub_16C50();
  if (os_log_type_enabled(v1, v23))
  {
    uint64_t v24 = (uint8_t *)sub_1EFA4();
    *(_WORD *)uint64_t v24 = 0;
    sub_16B44(&dword_0, v1, v23, "Making UpdateAlarmIntent...", v24);
    sub_16AA8((uint64_t)v24);
  }

  uint64_t v25 = sub_56290();
  static UsoTask_CodegenConverter.convert(task:)(v177, v25);
  uint64_t v26 = sub_45B5C();
  uint64_t v28 = sub_561D0(v26, v27, (uint64_t *)&unk_D4860);
  if (v176)
  {
    uint64_t updated = type metadata accessor for UsoTask_update_common_Alarm(0LL);
    uint64_t v31 = sub_561C0(updated, v30, (uint64_t)&type metadata for Any + 8, updated);
    if ((v31 & 1) != 0)
    {
      uint64_t v170 = (os_log_s *)v22;
      uint64_t v33 = v173;
      uint64_t v34 = sub_47E20();
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter(&v174, v34);
      uint64_t v169 = v33;
      uint64_t v35 = sub_17324();
      uint64_t v36 = v174;
      sub_56248(v35, "setOperation:");
      if (v36)
      {
        uint64_t v37 = sub_56278();
        CodeGenBase.entity.getter(v37);
        uint64_t v38 = sub_1D730();
        uint64_t v39 = UsoEntity.attributes.getter(v38);
        sub_4AF88();
        uint64_t v40 = v171;
        if (*(void *)(v39 + 16))
        {
          sub_7360(1701667182LL, 0xE400000000000000LL);
          char v42 = v41;
          uint64_t v43 = sub_16C48();
          if ((v42 & 1) != 0)
          {
            uint64_t v51 = v170;
            Logger.logObject.getter(v43, v44, v45, v46, v47, v48, v49, v50);
            os_log_type_t v52 = sub_16C50();
            if (os_log_type_enabled(v51, v52))
            {
              uint64_t v53 = (uint8_t *)sub_1EFA4();
              *(_WORD *)uint64_t v53 = 0;
              sub_16B44( &dword_0,  v51,  v52,  "alarmTask contains name node; changing INUpdateAlarmOperation to .updateLabel.",
                v53);
              sub_16AA8((uint64_t)v53);
            }

            -[os_log_s setOperation:](v20, "setOperation:", 2LL);
            uint64_t v40 = v171;
          }
        }

        else
        {
          sub_16C48();
        }

        sub_56254();
        sub_562B8();
        uint64_t v93 = (void *)v92;
        sub_22FBC(v92, "setAlarmSearch:");

        sub_56278();
        uint64_t v75 = sub_57D0(0LL);
        sub_1D730();
        if (v75)
        {
          swift_retain(v75);
          uint64_t v94 = (void *)DateTime.asTimePoint(shouldUseInferredMeridiem:insertToEndTime:)(1, 1);
          sub_4AF88();
          if (v94)
          {
            uint64_t v95 = v75;
            uint64_t v96 = v36;
            id v97 = [v94 endDateComponents];

            if (v97)
            {
              static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v97);

              uint64_t v98 = 0LL;
            }

            else
            {
              uint64_t v98 = 1LL;
            }

            uint64_t v104 = sub_2303C();
            sub_A40C((uint64_t)v16, v98, 1LL, v104);
            sub_5AA0((uint64_t)v16, v40);
            char v76 = 0;
            uint64_t v36 = v96;
            uint64_t v75 = v95;
            goto LABEL_41;
          }

          char v76 = 0;
        }

        else
        {
          char v76 = 1;
        }
      }

      else
      {
        sub_56254();
        sub_562B8();
        uint64_t v74 = (void *)v73;
        sub_22FBC(v73, "setAlarmSearch:");

        uint64_t v75 = 0LL;
        char v76 = 1;
        uint64_t v40 = v171;
      }

      uint64_t v103 = sub_2303C();
      sub_A40C(v40, 1LL, 1LL, v103);
LABEL_41:
      sub_4D80(v40, (uint64_t)v13, &qword_D37D8);
      uint64_t v105 = sub_2303C();
      uint64_t v106 = sub_16880((uint64_t)v13, 1LL, v105);
      Class isa = 0LL;
      if ((_DWORD)v106 != 1)
      {
        Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
        uint64_t v106 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v105 - 8) + 8LL))(v13, v105);
      }

      sub_22FBC(v106, "setProposedTime:");

      if ((v76 & 1) != 0 || (v109 = swift_retain(v75), v110 = DateTime.time.getter(v109), uint64_t v108 = sub_4AF88(), !v110))
      {
        id v115 = sub_56298(v108, "setProposedMeridiemSetByUser:");
      }

      else
      {
        uint64_t v111 = v75;
        char v112 = dispatch thunk of DateTime.Time.meridiemSetByUser.getter(v108);
        sub_17324();
        sub_5E3C();
        Swift::Bool v113 = v112 & 1;
        uint64_t v75 = v111;
        Class v114 = NSNumber.init(BOOLeanLiteral:)(v113).super.super.isa;
        sub_22FBC((uint64_t)v114, "setProposedMeridiemSetByUser:");
      }

      uint64_t v116 = v170;
      if (v36)
      {
        sub_56278();
        sub_54B8();
        uint64_t v118 = v117;
        uint64_t v119 = sub_1D730();
        if (v118)
        {
          NSString v120 = String._bridgeToObjectiveC()();
          uint64_t v119 = swift_bridgeObjectRelease(v118);
        }

        else
        {
          NSString v120 = 0LL;
        }

        sub_22FBC(v119, "setProposedLabel:");

        uint64_t v121 = sub_56278();
        sub_5AE8( v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v166,  v167,  v168,  v169,  (uint64_t)v170,  v171,  v172,  v173,  v174,  v175[0],  v175[1],  v176,  v177[0],  v177[1]);
        uint64_t v130 = v129;
        uint64_t v131 = v36;
        sub_1D730();
        if ((unint64_t)v130 >> 62)
        {
          uint64_t v163 = v75;
          if (v130 < 0) {
            uint64_t v164 = v130;
          }
          else {
            uint64_t v164 = v130 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v130);
          uint64_t v165 = v164;
          uint64_t v75 = v163;
          uint64_t v132 = _CocoaArrayWrapper.endIndex.getter(v165);
          sub_16C48();
        }

        else
        {
          uint64_t v132 = *(void *)((char *)&dword_10 + (v130 & 0xFFFFFFFFFFFFF8LL));
        }

        if (v132) {
          sub_56138(v130, v20);
        }
        else {
          swift_bridgeObjectRelease(v130);
        }
        uint64_t v36 = v131;
      }

      else
      {
        sub_56298((uint64_t)v115, "setProposedLabel:");
      }

      uint64_t v133 = v20;
      Logger.logObject.getter(v133, v134, v135, v136, v137, v138, v139, v140);
      os_log_type_t v141 = sub_16C50();
      if (os_log_type_enabled(v116, v141))
      {
        uint64_t v170 = v20;
        uint64_t v142 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v143 = sub_16AC4(8LL);
        uint64_t v168 = v36;
        unint64_t v144 = (void *)v143;
        uint64_t v167 = v75;
        *(_DWORD *)uint64_t v142 = 138412290;
        uint64_t v174 = (uint64_t)v133;
        uint64_t v145 = v133;
        uint64_t v40 = v171;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, v175, v142 + 4, v142 + 12);
        *unint64_t v144 = v133;

        sub_16BD0(&dword_0, v116, v141, "Inited UpdateAlarmIntent: %@", v142);
        sub_26B0(&qword_D3858);
        sub_16BB4((uint64_t)v144);
        sub_16AA8((uint64_t)v144);
        sub_16AA8((uint64_t)v142);
      }

      else
      {
      }

      sub_45B5C();
      sub_4AF88();
      sub_1D730();
      swift_release(v169);
      sub_19594(v40, &qword_D37D8);
      goto LABEL_73;
    }
  }

  else
  {
    uint64_t v31 = sub_56234(v28, (uint64_t *)&unk_D4860);
  }

  sub_561D0(v31, v32, (uint64_t *)&unk_D4860);
  if (!v176)
  {

    uint64_t v71 = sub_56234(v70, (uint64_t *)&unk_D4860);
    goto LABEL_27;
  }

  uint64_t v54 = sub_562E4();
  if ((sub_561C0(v54, v55, (uint64_t)&type metadata for Any + 8, v54) & 1) == 0)
  {

    goto LABEL_27;
  }

  uint64_t v56 = v173;
  uint64_t v57 = swift_retain(v173);
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(&v174, v57);
  uint64_t v58 = sub_17B94();
  uint64_t v59 = v174;
  if (!v174)
  {

    uint64_t v71 = sub_17B94();
    goto LABEL_27;
  }

  uint64_t v60 = v22;
  uint64_t v61 = dispatch thunk of UsoEntity_common_Alarm.endDateTime.getter(v58);
  uint64_t v62 = swift_release(v61);
  if (!v61)
  {
    dispatch thunk of UsoEntity_common_Alarm.name.getter(v62);
    uint64_t v64 = v63;
    swift_bridgeObjectRelease(v63);
    if (!v64)
    {
      sub_17B94();
      sub_4AF44();

LABEL_27:
      uint64_t v77 = sub_561D0(v71, v72, (uint64_t *)&unk_D4860);
      uint64_t v85 = (os_log_s *)Logger.logObject.getter(v77, v78, v79, v80, v81, v82, v83, v84);
      os_log_type_t v86 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v87 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v88 = sub_16AC4(32LL);
        uint64_t v173 = v88;
        *(_DWORD *)uint64_t v87 = 136315138;
        uint64_t v89 = sub_26B0((uint64_t *)&unk_D4860);
        uint64_t v90 = Optional.debugDescription.getter(v89);
        uint64_t v172 = sub_3D10(v90, v91, &v173);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v87 + 4, v87 + 12);
        sub_16C48();
        sub_19594((uint64_t)&v174, (uint64_t *)&unk_D4860);
        sub_16BD0(&dword_0, v85, v86, "No update task found in task: %s", v87);
        sub_16BB4(v88);
        sub_16AA8(v88);
        sub_16AA8((uint64_t)v87);

        sub_17B94();
      }

      else
      {

        sub_45B5C();
        sub_19594((uint64_t)&v174, (uint64_t *)&unk_D4860);
      }

      goto LABEL_73;
    }
  }

  uint64_t v65 = sub_562D0();
  if (v65
    && (uint64_t v13 = (char *)v65,
        uint64_t v66 = (void *)DateTime.asTimePoint(shouldUseInferredMeridiem:insertToEndTime:)(1, 1),
        swift_release(v13),
        v66))
  {
    id v67 = [v66 endDateComponents];

    if (v67)
    {
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v67);

      uint64_t v13 = (char *)sub_2303C();
      uint64_t v68 = v6;
      uint64_t v69 = 0LL;
    }

    else
    {
      uint64_t v13 = (char *)sub_2303C();
      uint64_t v68 = v6;
      uint64_t v69 = 1LL;
    }

    sub_A40C(v68, v69, 1LL, (uint64_t)v13);
    sub_5AA0(v6, (uint64_t)v10);
    sub_2303C();
    uint64_t v100 = sub_16880((uint64_t)v10, 1LL, (uint64_t)v13);
    Class v101 = 0LL;
    os_log_type_t v102 = (os_log_s *)v60;
    if ((_DWORD)v100 != 1)
    {
      Class v101 = DateComponents._bridgeToObjectiveC()().super.isa;
      uint64_t v100 = (*(uint64_t (**)(char *, char *))(*((void *)v13 - 1) + 8LL))(v10, v13);
    }
  }

  else
  {
    uint64_t v99 = sub_2303C();
    uint64_t v100 = sub_A40C((uint64_t)v10, 1LL, 1LL, v99);
    Class v101 = 0LL;
    os_log_type_t v102 = (os_log_s *)v60;
  }

  sub_22FBC(v100, "setProposedTime:");

  uint64_t v146 = sub_54B8();
  if (v147)
  {
    uint64_t v148 = v147;
    NSString v149 = String._bridgeToObjectiveC()();
    uint64_t v146 = swift_bridgeObjectRelease(v148);
  }

  else
  {
    NSString v149 = 0LL;
  }

  sub_22FBC(v146, "setProposedLabel:");

  uint64_t v150 = v20;
  uint64_t v151 = v102;
  Logger.logObject.getter(v150, v152, v153, v154, v155, v156, v157, v158);
  os_log_type_t v159 = sub_16C50();
  if (sub_56280(v159))
  {
    uint64_t v171 = a1;
    uint64_t v160 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v161 = (void *)sub_16AC4(8LL);
    uint64_t v169 = v56;
    uint64_t v170 = (os_log_s *)v59;
    *(_DWORD *)uint64_t v160 = 138412290;
    uint64_t v174 = (uint64_t)v150;
    uint64_t v162 = v150;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, v175, v160 + 4, v160 + 12);
    *uint64_t v161 = v150;

    sub_16BD0(&dword_0, v151, (os_log_type_t)v13, "Got alarm proposed time/label, UpdateAlarmIntent: %@", v160);
    sub_26B0(&qword_D3858);
    sub_16BB4((uint64_t)v161);
    sub_16AA8((uint64_t)v161);
    sub_16AA8((uint64_t)v160);
    swift_release(v169);
  }

  else
  {
    sub_17B94();
  }

  sub_45B5C();
  sub_4AF44();
LABEL_73:
  sub_19594((uint64_t)v177, (uint64_t *)&unk_D4860);
  sub_16CB0();
}

id sub_556A0(uint64_t a1)
{
  id v3 = [sub_56224() init];
  uint64_t v4 = (void *)qword_D30C0;
  id v5 = v3;
  uint64_t v6 = sub_16C80();
  sub_56204(v6, (uint64_t)qword_D5E20);
  os_log_type_t v7 = sub_16C50();
  if (sub_16D30(v7))
  {
    uint64_t v8 = (_WORD *)sub_1EFA4();
    sub_45838(v8);
    sub_56198(&dword_0, v9, v10, "Making SearchAlarmIntent...");
    sub_16AA8((uint64_t)v1);
  }

  sub_56254();
  sub_562C4();
  uint64_t v12 = (void *)v11;
  sub_22FBC(v11, "setAlarmSearch:");

  uint64_t v13 = swift_retain(a1);
  static UsoTask_CodegenConverter.convert(task:)(v125, v13);
  sub_16FD8();
  sub_4D80((uint64_t)v125, (uint64_t)v124, (uint64_t *)&unk_D4860);
  if (v124[3])
  {
    sub_4D80((uint64_t)v124, (uint64_t)v123, (uint64_t *)&unk_D4860);
    uint64_t v14 = type metadata accessor for UsoTask_summarise_common_Alarm(0LL);
    id v1 = &type metadata for Any;
    uint64_t uso_NoEntity = (char *)&type metadata for Any + 8;
    uint64_t v21 = sub_561AC(v14, v16, v17, v14, v18, v19, v20);
    if ((_DWORD)v21)
    {
      sub_5622C(v21, v22, v23, v24, v25, v26, v27, v28, v119, (uint64_t)v120, (uint64_t)v121, v122);
      sub_16D60();
      os_log_type_t v29 = sub_16C50();
      if (sub_16D30(v29))
      {
        uint64_t v30 = (_WORD *)sub_1EFA4();
        sub_45838(v30);
        uint64_t v33 = "Task is UsoTask_summarise_common_Alarm.";
LABEL_12:
        sub_56198(&dword_0, v31, v32, v33);
        sub_16AA8((uint64_t)&type metadata for Any);
        goto LABEL_13;
      }

      goto LABEL_13;
    }

    uint64_t v34 = type metadata accessor for UsoTask_checkExistence_common_Alarm(0LL);
    uint64_t v40 = sub_561AC(v34, v35, v36, v34, v37, v38, v39);
    if ((_DWORD)v40)
    {
      sub_5622C(v40, v41, v42, v43, v44, v45, v46, v47, v119, (uint64_t)v120, (uint64_t)v121, v122);
      sub_16D60();
      os_log_type_t v48 = sub_16C50();
      if (sub_16D30(v48))
      {
        uint64_t v49 = (_WORD *)sub_1EFA4();
        sub_45838(v49);
        uint64_t v33 = "Task is UsoTask_checkExistence_common_Alarm.";
        goto LABEL_12;
      }

LABEL_13:
      [v5 setAlarmSearchType:1];
LABEL_14:
      _s20HandleIntentStrategyVwxx_1(v123);
      goto LABEL_43;
    }

    uint64_t v50 = type metadata accessor for UsoTask_request_common_Alarm(0LL);
    uint64_t uso_NoEntity = (char *)&type metadata for Any + 8;
    if (sub_561AC(v50, v51, v52, v50, v53, v54, v55))
    {
      sub_16D60();
      os_log_type_t v56 = sub_16C50();
      if (os_log_type_enabled((os_log_t)uso_NoEntity, v56))
      {
        uint64_t v57 = (uint8_t *)sub_1EFA4();
        *(_WORD *)uint64_t v57 = 0;
        sub_16B44(&dword_0, (os_log_s *)uso_NoEntity, v56, "Task is UsoTask_request_common_Alarm.", v57);
        sub_16AA8((uint64_t)v57);
      }

      sub_56248(v58, "setAlarmSearchType:");
      uint64_t v59 = sub_56290();
      dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter(&v120, v59);
      sub_45B5C();
      uint64_t uso_NoEntity = v120;
      if (!v120)
      {
        uint64_t v60 = sub_56290();
        dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter(&v121, v60);
        sub_45B5C();
        uint64_t uso_NoEntity = v121;
        if (!v121) {
          goto LABEL_33;
        }
      }

      uint64_t v61 = sub_47E20();
      uint64_t v62 = dispatch thunk of UsoEntity_common_Alarm.endDateTime.getter(v61);
      sub_17324();
      sub_1D730();
      if (v62)
      {
        uint64_t v63 = 2LL;
      }

      else
      {
        uint64_t v102 = sub_47E20();
        uint64_t v103 = dispatch thunk of UsoEntity_common_Alarm.timeRemaining.getter(v102);
        sub_17324();
        sub_1D730();
        if (!v103)
        {
LABEL_32:
          sub_17324();
LABEL_33:
          sub_45B5C();
          goto LABEL_14;
        }

        uint64_t v63 = 3LL;
      }

      [v5 setAlarmSearchType:v63];
      goto LABEL_32;
    }

    uint64_t common_Alarm = type metadata accessor for UsoTask_read_common_Alarm(0LL);
    uint64_t v70 = sub_561AC(common_Alarm, v65, v66, common_Alarm, v67, v68, v69);
    if ((_DWORD)v70)
    {
      sub_5622C(v70, v71, v72, v73, v74, v75, v76, v77, v119, (uint64_t)v120, (uint64_t)v121, v122);
      sub_16D60();
      os_log_type_t v78 = sub_16C50();
      if (sub_16D30(v78))
      {
        uint64_t v79 = (_WORD *)sub_1EFA4();
        sub_45838(v79);
        uint64_t v82 = "Task is UsoTask_read_common_Alarm.";
LABEL_37:
        sub_56198(&dword_0, v80, v81, v82);
        sub_16AA8((uint64_t)&type metadata for Any);
        goto LABEL_38;
      }

      goto LABEL_38;
    }

    uint64_t uso_NoEntity = (char *)type metadata accessor for UsoTask_read_uso_NoEntity(0LL);
    uint64_t v83 = sub_5621C((uint64_t)&v122, (uint64_t)v123, (uint64_t)&type metadata for Any + 8, (uint64_t)uso_NoEntity);
    if ((_DWORD)v83) {
      goto LABEL_35;
    }
    uint64_t v91 = sub_562E4();
    uint64_t v92 = sub_5621C((uint64_t)&v122, (uint64_t)v123, (uint64_t)&type metadata for Any + 8, v91);
    if ((_DWORD)v92)
    {
      sub_5622C(v92, v93, v94, v95, v96, v97, v98, v99, v119, (uint64_t)v120, (uint64_t)v121, v122);
      sub_16D60();
      os_log_type_t v100 = sub_16C50();
      if (!sub_16D30(v100)) {
        goto LABEL_13;
      }
      Class v101 = (_WORD *)sub_1EFA4();
      sub_45838(v101);
      uint64_t v33 = "Task is UsoTask_noVerb_common_Alarm.";
      goto LABEL_12;
    }

    uint64_t v83 = sub_5621C((uint64_t)&v122, (uint64_t)v123, (uint64_t)&type metadata for Any + 8, (uint64_t)uso_NoEntity);
    if ((_DWORD)v83)
    {
LABEL_35:
      sub_5622C(v83, v84, v85, v86, v87, v88, v89, v90, v119, (uint64_t)v120, (uint64_t)v121, v122);
      sub_16D60();
      os_log_type_t v104 = sub_16C50();
      if (sub_16D30(v104))
      {
        uint64_t v105 = (_WORD *)sub_1EFA4();
        sub_45838(v105);
        uint64_t v82 = "Task is UsoTask_read_uso_NoEntity.";
        goto LABEL_37;
      }

  uint64_t v39 = (uint64_t (**)(uint64_t, uint64_t))(v33 & 0xC000000000000001LL);
  sub_44080(0LL, (v33 & 0xC000000000000001LL) == 0, v33);
  uint64_t v40 = v33;
  if ((v33 & 0xC000000000000001LL) == 0)
  {
    uint64_t v41 = (uint64_t)sub_672FC();
    goto LABEL_15;
  }

void sub_55BE4(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_177D8();
  uint64_t v65 = v6 - v7;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v62 - v9;
  id v11 = [sub_56224() init];
  uint64_t v12 = qword_D30C0;
  id v13 = v11;
  if (v12 != -1) {
    goto LABEL_50;
  }
  while (1)
  {
    uint64_t v14 = sub_16C80();
    uint64_t v15 = (void *)sub_26F0(v14, (uint64_t)qword_D5E20);
    sub_16D50();
    os_log_type_t v16 = sub_16C50();
    if (sub_56280(v16))
    {
      uint64_t v17 = (uint8_t *)sub_1EFA4();
      *(_WORD *)uint64_t v17 = 0;
      sub_16B44(&dword_0, v1, v2, "Making ChangeAlarmStatusIntent...", v17);
      sub_16AA8((uint64_t)v17);
    }

    sub_56254();
    sub_1C31C(a1);
    if (!v18)
    {
      if (qword_D30C8 != -1) {
        swift_once(&qword_D30C8, sub_560F0);
      }
      id v18 = (id)qword_D5E38;
    }

    uint64_t v19 = v18;
    [v13 setAlarmSearch:v18];

    id v1 = (os_log_s *)a1;
    sub_256B8((uint64_t)v10);
    int v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
    BOOL v21 = v20 == enum case for AlarmNLv4Constants.AlarmVerb.unknown(_:)
       || v20 == enum case for AlarmNLv4Constants.AlarmVerb.checkExistence(_:);
    BOOL v22 = v21 || v20 == enum case for AlarmNLv4Constants.AlarmVerb.create(_:);
    if (v22 || v20 == enum case for AlarmNLv4Constants.AlarmVerb.delete(_:)) {
      break;
    }
    if (v20 == enum case for AlarmNLv4Constants.AlarmVerb.disable(_:)) {
      goto LABEL_22;
    }
    if (v20 == enum case for AlarmNLv4Constants.AlarmVerb.enable(_:)) {
      goto LABEL_25;
    }
    if (v20 == enum case for AlarmNLv4Constants.AlarmVerb.read(_:)
      || v20 == enum case for AlarmNLv4Constants.AlarmVerb.request(_:)
      || v20 == enum case for AlarmNLv4Constants.AlarmVerb.snooze(_:)
      || v20 == enum case for AlarmNLv4Constants.AlarmVerb.summarise(_:)
      || v20 == enum case for AlarmNLv4Constants.AlarmVerb.update(_:)
      || v20 == enum case for AlarmNLv4Constants.AlarmVerb.noVerb(_:))
    {
      break;
    }

    if (v20 == enum case for AlarmNLv4Constants.AlarmVerb.close(_:)) {
      goto LABEL_22;
    }
    if (v20 == enum case for AlarmNLv4Constants.AlarmVerb.resume(_:))
    {
LABEL_25:
      uint64_t v42 = 1LL;
LABEL_26:
      [v13 setOperation:v42];
      id v43 = v13;
      Logger.logObject.getter(v43, v44, v45, v46, v47, v48, v49, v50);
      os_log_type_t v51 = sub_16C50();
      if (sub_16D30(v51))
      {
        uint64_t v52 = (_DWORD *)sub_16AC4(12LL);
        uint64_t v53 = (void *)sub_16AC4(8LL);
        *uint64_t v52 = 138412290;
        uint64_t v67 = (uint64_t)v43;
        id v54 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v52 + 1, v52 + 3);
        *uint64_t v53 = v43;

        sub_561F0(&dword_0, v55, v56, "Inited ChangeAlarmStatusIntent: %@");
        sub_26B0(&qword_D3858);
        sub_16BB4((uint64_t)v53);
        sub_16AA8((uint64_t)v53);
        sub_16AA8((uint64_t)v52);

        sub_17B94();
      }

      else
      {

        sub_17B94();
      }

      goto LABEL_29;
    }

    if (v20 == enum case for AlarmNLv4Constants.AlarmVerb.stop(_:))
    {
LABEL_22:
      uint64_t v42 = 2LL;
      goto LABEL_26;
    }

    _diagnoseUnexpectedEnumCase<A>(type:)(v4, v4);
    __break(1u);
LABEL_50:
    swift_once(&qword_D30C0, sub_54140);
  }

  uint64_t v24 = swift_retain_n(a1, 2LL);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v24, v25, v26, v27, v28, v29, v30, v31);
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v35 = sub_16AC4(32LL);
    uint64_t v67 = v35;
    id v64 = v13;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v63 = v34 + 4;
    uint64_t v36 = v65;
    uint64_t v37 = sub_256B8(v65);
    uint64_t v38 = AlarmNLv4Constants.AlarmVerb.rawValue.getter(v37);
    uint64_t v39 = v4;
    unint64_t v41 = v40;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v36, v39);
    uint64_t v66 = sub_3D10(v38, v41, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v63, v34 + 12);
    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease(v41);
    sub_16BD0(&dword_0, v32, v33, "Can NOT handle request, verb = %s", v34);
    sub_16BB4(v35);
    sub_16AA8(v35);
    sub_16AA8((uint64_t)v34);

    sub_4AF88();
  }

  else
  {

    swift_release_n(a1, 3LL);
  }

LABEL_29:
  sub_16CB0();
}

id sub_560F0()
{
  uint64_t v0 = type metadata accessor for AlarmSearch(0LL);
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  id result = sub_1D5F8(0LL, 0LL, 0LL, 0xE000000000000000LL);
  qword_D5E38 = (uint64_t)result;
  return result;
}

void sub_56138(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setProposedRecurrence:isa];
}

void sub_56198(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_561AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v9 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v7, a4, 0LL);
}

uint64_t sub_561C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v4 - 152, v4 - 144, a3, a4, 6LL);
}

uint64_t sub_561D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_4D80(v3 - 112, v3 - 144, a3);
}

uint64_t sub_561DC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

void sub_561F0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_56204(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_26F0(a1, a2);
  return Logger.logObject.getter(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_5621C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 0LL);
}

id sub_56224()
{
  return objc_allocWithZone(v0);
}

uint64_t sub_5622C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_release(a12);
}

uint64_t sub_56234(uint64_t a1, uint64_t *a2)
{
  return sub_19594(v2 - 144, a2);
}

uint64_t sub_5623C()
{
  return dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
}

id sub_56248(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 1);
}

uint64_t sub_56254()
{
  return type metadata accessor for AlarmSearch(0LL);
}

uint64_t sub_5625C()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_56268(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v3, v2, v1);
}

uint64_t sub_56278()
{
  return swift_retain(v0);
}

BOOL sub_56280(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_56290()
{
  return swift_retain(v0);
}

id sub_56298(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_562A4(uint64_t a1, uint64_t *a2)
{
  return sub_19594(v2 - 112, a2);
}

id sub_562AC(uint64_t a1)
{
  return sub_54188(a1, v1);
}

void sub_562B8()
{
}

void sub_562C4()
{
}

uint64_t sub_562D0()
{
  return sub_57D0(0LL);
}

uint64_t sub_562DC()
{
  return type metadata accessor for SiriReferenceResolutionResolver(0LL);
}

uint64_t sub_562E4()
{
  return type metadata accessor for UsoTask_noVerb_common_Alarm(0LL);
}

uint64_t sub_562EC()
{
  return swift_retain(v0);
}

void *sub_562F4(void *a1)
{
  uint64_t v2 = type metadata accessor for ChangeAlarmStatusIntent(0LL);
  uint64_t v3 = type metadata accessor for ChangeAlarmStatusIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(v2, v3);
  if (qword_D3178 != -1) {
    swift_once(&qword_D3178, sub_82958);
  }
  uint64_t v4 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(qword_D84A8, v2, v3);
  uint64_t v6 = v5;
  uint64_t v7 = sub_26B0(&qword_D5E48);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v4, v6, v7);
  uint64_t v8 = sub_26B0(&qword_D5E58);
  unint64_t v9 = sub_564E0();
  uint64_t v10 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A, B>(_:)(&unk_D5E50, 0LL, v8, v3, v9);
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v10);
  sub_4698((uint64_t)a1, (uint64_t)v18);
  unint64_t v11 = sub_56524();
  uint64_t v12 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)( v18,  &_s24UnsupportedValueStrategyVN_0,  v11);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v12);
  sub_4698((uint64_t)a1, (uint64_t)&v17);
  uint64_t v16 = 10LL;
  unint64_t v13 = sub_56560();
  uint64_t v14 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)( &v16,  &_s20HandleIntentStrategyVN_1,  v13);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v14);
  _s20HandleIntentStrategyVwxx_1(a1);
  sub_5659C((uint64_t)&v16);
  return sub_565D0(v18);
}

void sub_5646C()
{
}

uint64_t sub_56480(void *a1)
{
  *a1 = v3;
  return sub_19D5C(*(uint64_t (**)(void))(v1 + 8));
}

unint64_t sub_564E0()
{
  unint64_t result = qword_D5E60;
  if (!qword_D5E60)
  {
    uint64_t v1 = sub_16974(&qword_D5E58);
    unint64_t result = swift_getWitnessTable(&unk_A5878, v1);
    atomic_store(result, (unint64_t *)&qword_D5E60);
  }

  return result;
}

unint64_t sub_56524()
{
  unint64_t result = qword_D5E68;
  if (!qword_D5E68)
  {
    unint64_t result = swift_getWitnessTable(&unk_A549C, &_s24UnsupportedValueStrategyVN_0);
    atomic_store(result, (unint64_t *)&qword_D5E68);
  }

  return result;
}

unint64_t sub_56560()
{
  unint64_t result = qword_D5E70;
  if (!qword_D5E70)
  {
    unint64_t result = swift_getWitnessTable(&unk_A62E8, &_s20HandleIntentStrategyVN_1);
    atomic_store(result, (unint64_t *)&qword_D5E70);
  }

  return result;
}

uint64_t sub_5659C(uint64_t a1)
{
  return a1;
}

void *sub_565D0(void *a1)
{
  return a1;
}

uint64_t _s20HandleIntentStrategyVwca_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  sub_19FF8((void *)(a1 + 8), (void *)(a2 + 8));
  return a1;
}

uint64_t _s20HandleIntentStrategyVwta_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  _s20HandleIntentStrategyVwxx_1((void *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t _s20HandleIntentStrategyVwet_0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(sub_A40C(v0, 0LL, 1LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_A40C(v0, 0LL, 1LL, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_A40C(v0, 0LL, 1LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t _s20HandleIntentStrategyVwst_0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s20HandleIntentStrategyVMa_0()
{
  return &_s20HandleIntentStrategyVN_0;
}

uint64_t sub_56714()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D5E78);
  sub_26F0(v0, (uint64_t)qword_D5E78);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_5675C(uint64_t a1, uint64_t a2)
{
  v3[23] = a2;
  v3[24] = v2;
  v3[22] = a1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[25] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[26] = v5;
  v3[27] = sub_19754(v5);
  uint64_t v6 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[28] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[29] = v7;
  v3[30] = sub_19754(v7);
  uint64_t v8 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[31] = v8;
  v3[32] = *(void *)(v8 - 8);
  v3[33] = sub_19884();
  v3[34] = sub_19884();
  v3[35] = sub_19884();
  v3[36] = sub_19884();
  sub_26B0(&qword_D4178);
  v3[37] = sub_19884();
  v3[38] = sub_19884();
  v3[39] = sub_19884();
  uint64_t v9 = type metadata accessor for SiriAlarmSnippetModel(0LL);
  v3[40] = v9;
  v3[41] = *(void *)(v9 - 8);
  v3[42] = sub_19884();
  v3[43] = sub_19884();
  v3[44] = sub_19884();
  uint64_t v10 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v3[45] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[46] = v11;
  v3[47] = sub_19754(v11);
  uint64_t v12 = type metadata accessor for DialogPhase(0LL);
  v3[48] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[49] = v13;
  v3[50] = sub_19754(v13);
  uint64_t v14 = type metadata accessor for Parse.DirectInvocation(0LL);
  v3[51] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[52] = v15;
  v3[53] = sub_19754(v15);
  uint64_t v16 = type metadata accessor for NLContextUpdate(0LL);
  v3[54] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v3[55] = v17;
  v3[56] = sub_19754(v17);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_568E0()
{
  uint64_t v1 = sub_26B0(&qword_D5EE8);
  uint64_t v2 = (void *)IntentResolutionRecord.intentResponse.getter(v1);
  uint64_t AlarmIntent = dispatch thunk of CreateAlarmIntentResponse.code.getter();

  uint64_t AlarmIntentResponse = CreateAlarmIntentResponseCode.rawValue.getter(AlarmIntent);
  if (AlarmIntentResponse == CreateAlarmIntentResponseCode.rawValue.getter(100LL))
  {
    if (qword_D30D0 != -1) {
      swift_once(&qword_D30D0, sub_56714);
    }
    uint64_t v5 = (void *)sub_26F0(*(void *)(v0 + 200), (uint64_t)qword_D5E78);
    Logger.logObject.getter(v5, v6, v7, v8, v9, v10, v11, v12);
    os_log_type_t v13 = sub_16C50();
    if (sub_1990C(v13))
    {
      uint64_t v14 = (_WORD *)sub_1EFA4();
      sub_16BEC(v14);
      sub_198C0( &dword_0,  v15,  v16,  "CreateAlarm.HandleIntentStrategy.makeIntentHandledResponse() returning empty output for timer reformation");
      sub_58950();
    }

    type metadata accessor for EmptyOutput(0LL);
    static EmptyOutput.instance.getter();
    sub_588F0();
    sub_1978C();
    sub_19794();
    sub_197C0();
    sub_19830();
    sub_19828();
    sub_19820();
    sub_1987C();
    sub_19808();
    uint64_t v17 = sub_19800();
    uint64_t v25 = sub_19978(v17, v18, v19, v20, v21, v22, v23, v24, v230, v241);
    uint64_t v33 = sub_19964(v25, v26, v27, v28, v29, v30, v31, v32, v231, v242, v251);
    uint64_t v41 = sub_1B64C(v33, v34, v35, v36, v37, v38, v39, v40, v232, v243, v252, v259);
    uint64_t v49 = sub_25044(v41, v42, v43, v44, v45, v46, v47, v48, v233, v244, v253, v260, v265);
    uint64_t v57 = sub_2503C(v49, v50, v51, v52, v53, v54, v55, v56, v234, v245, v254, v261, v266, v269);
    sub_25218(v57, v58, v59, v60, v61, v62, v63, v64, v235, v246, v255, v262, v267, v270, v273);
    sub_19958();
LABEL_38:
    sub_58A80();
    __asm { BR              X0 }
  }

  if (qword_D30D0 != -1) {
    swift_once(&qword_D30D0, sub_56714);
  }
  uint64_t v65 = sub_26F0(*(void *)(v0 + 200), (uint64_t)qword_D5E78);
  *(void *)(v0 + 456) = v65;
  uint64_t v73 = (os_log_s *)Logger.logObject.getter(v65, v66, v67, v68, v69, v70, v71, v72);
  os_log_type_t v74 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v75 = (uint8_t *)sub_1EFA4();
    *(_WORD *)uint64_t v75 = 0;
    sub_16B44(&dword_0, v73, v74, "CreateAlarm.HandleIntentStrategy.makeIntentHandledResponse() called.", v75);
    sub_16AA8((uint64_t)v75);
  }

  uint64_t v76 = (void *)IntentResolutionRecord.intentResponse.getter(v1);
  id v77 = [v76 createdAlarm];
  *(void *)(v0 + 464) = v77;

  if (!v77)
  {
    sub_28708();
    os_log_type_t v82 = sub_17714();
    if (sub_1990C(v82))
    {
      uint64_t v83 = (_WORD *)sub_1EFA4();
      sub_16BEC(v83);
      sub_198C0(&dword_0, v84, v85, "Can NOT retrieve intentResponse.createdAlarm.");
      sub_58950();
    }

    sub_26B0(&qword_D4190);
    unint64_t v86 = sub_58B68();
    uint64_t v87 = sub_25234(v86);
    sub_58B70(v87, v88, v89, v90, v91, v92, v93, v94);
    goto LABEL_37;
  }

  os_log_type_t v78 = (void *)IntentResolutionRecord.intentResponse.getter(v1);
  uint64_t v79 = (char *)[v78 successCode];

  if (v79 == (_BYTE *)&dword_0 + 3)
  {
    int v81 = 0;
    int v80 = 1;
  }

  else if (v79 == (_BYTE *)&dword_0 + 2)
  {
    int v80 = 0;
    int v81 = 1;
  }

  else
  {
    int v81 = 0;
    int v80 = 0;
  }

  uint64_t v95 = sub_26B0(&qword_D4188);
  uint64_t inited = swift_initStackObject(v95, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_A4CD0;
  *(void *)(inited + 32) = v77;
  uint64_t v274 = inited;
  specialized Array._endMutation()(inited, v97, v98, v99);
  id v100 = v77;
  sub_6044();
  swift_bridgeObjectRelease(v274);
  id v101 = v100;
  sub_902E4(v101);
  if (v103)
  {
    uint64_t v104 = v102;
    uint64_t v105 = v103;
    if (v81)
    {
      int v271 = v80;
      uint64_t v107 = *(void *)(v0 + 416);
      uint64_t v106 = *(void *)(v0 + 424);
      uint64_t v265 = *(void *)(v0 + 408);
      uint64_t v108 = sub_26B0((uint64_t *)&off_D3A00);
      uint64_t v109 = swift_allocObject(v108, 48LL, 7LL);
      *(_OWORD *)(v109 + 16) = xmmword_A4880;
      *(void *)(v109 + 32) = v104;
      *(void *)(v109 + 40) = v105;
      sub_94238();
      swift_bridgeObjectRelease(v109);
      NLContextUpdate.set(undoDirectInvocation:)(v106);
      uint64_t v110 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
      int v80 = v271;
      v110(v106, v265);
    }

    else if ((v80 & 1) != 0)
    {
      swift_bridgeObjectRelease(v103);
    }

    else
    {
      int v272 = v80;
      uint64_t v112 = *(void *)(v0 + 416);
      uint64_t v111 = *(void *)(v0 + 424);
      uint64_t v113 = *(void *)(v0 + 408);
      sub_94244();
      swift_bridgeObjectRelease(v105);
      NLContextUpdate.set(undoDirectInvocation:)(v111);
      Class v114 = *(void (**)(uint64_t, uint64_t))(v112 + 8);
      int v80 = v272;
      v114(v111, v113);
    }
  }

  id v115 = (void *)IntentResolutionRecord.intent.getter(v1);
  sub_319F4(v115);
  uint64_t v117 = swift_bridgeObjectRelease(v116);
  static DialogPhase.completion.getter(v117, v118, v119, v120, v121, v122, v123);
  type metadata accessor for SirikitApp(0LL);
  uint64_t v124 = IntentResolutionRecord.app.getter(v1);
  uint64_t v125 = SirikitApp.init(app:)(v124);
  *(void *)(v0 + 472) = v125;
  sub_4828C();
  *(void *)(v0 + 480) = v126;
  if (!v126)
  {
    uint64_t v269 = v125;
    sub_28708();
    os_log_type_t v135 = sub_17714();
    if (sub_1990C(v135))
    {
      uint64_t v136 = (_WORD *)sub_1EFA4();
      sub_16BEC(v136);
      sub_198C0(&dword_0, v137, v138, "Can NOT retrieve alarm data.");
      sub_58950();
    }

    uint64_t v140 = *(void *)(v0 + 440);
    uint64_t v139 = *(void *)(v0 + 448);
    uint64_t v141 = *(void *)(v0 + 432);
    uint64_t v142 = *(void *)(v0 + 392);

    sub_26B0(&qword_D4190);
    unint64_t v143 = sub_58B68();
    uint64_t v144 = sub_25234(v143);
    sub_58B70(v144, v145, v146, v147, v148, v149, v150, v151);

    swift_release(v269);
    sub_58A74(*(uint64_t (**)(uint64_t, uint64_t))(v142 + 8));
    (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v139, v141);
LABEL_37:
    sub_588C8(*(void *)(v0 + 448));
    sub_19794();
    sub_197C0();
    sub_19830();
    sub_19828();
    sub_19820();
    sub_1987C();
    sub_19808();
    sub_19800();
    uint64_t v152 = sub_1978C();
    uint64_t v160 = sub_19980(v152, v153, v154, v155, v156, v157, v158, v159, v230);
    uint64_t v168 = sub_19978(v160, v161, v162, v163, v164, v165, v166, v167, v236, v241);
    uint64_t v176 = sub_19964(v168, v169, v170, v171, v172, v173, v174, v175, v237, v247, v251);
    uint64_t v184 = sub_1B64C(v176, v177, v178, v179, v180, v181, v182, v183, v238, v248, v256, v259);
    uint64_t v192 = sub_25044(v184, v185, v186, v187, v188, v189, v190, v191, v239, v249, v257, v263, v265);
    sub_2503C(v192, v193, v194, v195, v196, v197, v198, v199, v240, v250, v258, v264, v268, v269);
    sub_25248();
    goto LABEL_38;
  }

  uint64_t v127 = *(os_log_s **)(v0 + 376);
  if (v80)
  {
    static SiriTimeFeatureFlagsImpl.instance.getter();
    Swift::Bool v128 = SiriTimeFeatureFlagsImpl.isAlarmSmartEnabled()();
    sub_58BAC();
    sub_28708();
    os_log_type_t v129 = sub_16C50();
    BOOL v130 = sub_58BF4(v129);
    if (v128)
    {
      if (v130)
      {
        uint64_t v131 = (uint8_t *)sub_1EFA4();
        *(_WORD *)uint64_t v131 = 0;
        sub_16B44(&dword_0, v127, v129, "CreateAlarm flow SMART, existsAlreadyEnabled_Dialog.", v131);
        sub_16AA8((uint64_t)v131);
      }

      if (qword_D31A0 != -1) {
        swift_once(&qword_D31A0, sub_89264);
      }
      sub_47DE4();
      uint64_t v132 = (void *)sub_58B94();
      *(void *)(v0 + 488) = v132;
      sub_58B84(v132, (uint64_t)sub_572B0);
      sub_58A80();
      return sub_8D284(v133);
    }

    if (v130)
    {
      uint64_t v210 = (uint8_t *)sub_1EFA4();
      *(_WORD *)uint64_t v210 = 0;
      sub_16B44(&dword_0, v127, v129, "CreateAlarm flow RF1, existsAlreadyEnabled_Dialog.", v210);
      sub_16AA8((uint64_t)v210);
    }

    if (qword_D31A8 != -1) {
      swift_once(&qword_D31A8, sub_89280);
    }
    sub_47DE4();
    sub_56290();
    uint64_t v211 = (void *)sub_58B94();
    *(void *)(v0 + 520) = v211;
    uint64_t v212 = sub_575D4;
LABEL_62:
    *uint64_t v211 = v0;
    v211[1] = v212;
    sub_58A80();
    __asm { BR              X3 }
  }

  int v201 = **(unsigned __int8 **)(v0 + 192);
  static SiriTimeFeatureFlagsImpl.instance.getter();
  Swift::Bool v202 = SiriTimeFeatureFlagsImpl.isAlarmSmartEnabled()();
  sub_58BAC();
  sub_28708();
  os_log_type_t v203 = sub_16C50();
  BOOL v204 = sub_58BF4(v203);
  if (v201 == 1)
  {
    if (!v202)
    {
      if (v204)
      {
        uint64_t v222 = (_WORD *)sub_1EFA4();
        sub_58B38(v222);
        sub_58A00(&dword_0, v127, v223, "CreateAlarm flow RF1, intentHandledResponseReformedFromTimer.");
        sub_58950();
      }

      if (qword_D31A8 != -1) {
        swift_once(&qword_D31A8, sub_89280);
      }
      sub_47DE4();
      sub_56290();
      uint64_t v211 = (void *)sub_58B94();
      *(void *)(v0 + 592) = v211;
      uint64_t v212 = sub_57A40;
      goto LABEL_62;
    }

    if (v204)
    {
      uint64_t v205 = (_WORD *)sub_1EFA4();
      sub_58B38(v205);
      sub_58A00(&dword_0, v127, v206, "CreateAlarm flow SMART, intentHandledResponseReformedFromTimer.");
      sub_58950();
    }

    if (qword_D31A0 != -1) {
      swift_once(&qword_D31A0, sub_89264);
    }
    sub_47DE4();
    uint64_t v207 = (void *)sub_58B94();
    *(void *)(v0 + 560) = v207;
    sub_58B84(v207, (uint64_t)sub_57714);
    sub_58A80();
    return sub_8D530(v208, v209);
  }

  else
  {
    if (!v202)
    {
      if (v204)
      {
        uint64_t v225 = (_WORD *)sub_1EFA4();
        sub_58B38(v225);
        sub_58A00(&dword_0, v127, v226, "CreateAlarm flow RF1, intentHandledResponse");
        sub_58950();
      }

      if (qword_D31A8 != -1) {
        swift_once(&qword_D31A8, sub_89280);
      }
      uint64_t v227 = unk_D5304;
      sub_47DE4();
      sub_56290();
      uint64_t v228 = (void *)swift_task_alloc(v227);
      *(void *)(v0 + 664) = v228;
      void *v228 = v0;
      v228[1] = sub_57F20;
      sub_58A80();
      __asm { BR              X7 }
    }

    if (v204)
    {
      uint64_t v213 = (_WORD *)sub_1EFA4();
      sub_58B38(v213);
      sub_58A00(&dword_0, v127, v214, "CreateAlarm flow SMART, intentHandledResponse");
      sub_58950();
    }

    if (qword_D31A0 != -1) {
      swift_once(&qword_D31A0, sub_89264);
    }
    uint64_t v215 = dword_D7514;
    sub_47DE4();
    uint64_t v216 = (void *)swift_task_alloc(v215);
    *(void *)(v0 + 632) = v216;
    sub_58B84(v216, (uint64_t)sub_57BF8);
    sub_58A80();
    return sub_8D3AC(v217, v218, v219, v220, v221);
  }

uint64_t sub_572B0()
{
  *(void *)(v0 + 496) = v2;
  *(void *)(v0 + 504) = v1;
  sub_199C0(v3);
  sub_58C08();
  sub_19840();
  return sub_197B8();
}

#error "573AC: call analysis failed (funcsize=113)"
uint64_t sub_574E0()
{
  uint64_t v0;
  uint64_t v1;
  sub_2D000();
  sub_25068(*(void *)(v0 + 512));
  uint64_t v1 = sub_58B08();
  sub_25254(v1, &qword_D41B0);
  sub_19840();
  return sub_197B8();
}

#error "57584: call analysis failed (funcsize=38)"
uint64_t sub_575D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_455DC();
  sub_455CC();
  *(void *)(v2 + 528) = v1;
  *(void *)(v2 + 536) = v0;
  sub_199C0(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_57624()
{
  uint64_t v2 = mach_absolute_time();
  sub_58A9C(v2, v3, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v0 + 544) = v4;
  void *v4 = v0;
  v4[1] = sub_576B0;
  sub_58B9C();
  return sub_58A60();
}

uint64_t sub_576B0()
{
  uint64_t v3 = v0[68];
  void *v4 = *v2;
  v0[69] = v1;
  swift_task_dealloc(v3);
  uint64_t v5 = (void *)v0[66];
  sub_58BE8(v0[35]);

  sub_19840();
  return sub_19744();
}

uint64_t sub_57714()
{
  *(void *)(v0 + 568) = v2;
  *(void *)(v0 + 576) = v1;
  sub_199C0(v3);
  sub_58C08();
  sub_19840();
  return sub_197B8();
}

#error "57818: call analysis failed (funcsize=114)"
uint64_t sub_5794C()
{
  uint64_t v0;
  uint64_t v1;
  sub_2D000();
  sub_25068(*(void *)(v0 + 584));
  uint64_t v1 = sub_58B08();
  sub_25254(v1, &qword_D41B0);
  sub_19840();
  return sub_197B8();
}

#error "579F0: call analysis failed (funcsize=38)"
uint64_t sub_57A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_455DC();
  sub_455CC();
  *(void *)(v2 + 600) = v1;
  *(void *)(v2 + 608) = v0;
  sub_199C0(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_57A90()
{
  uint64_t v2 = mach_absolute_time();
  sub_58A9C(v2, v3, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v0 + 616) = v4;
  void *v4 = v0;
  v4[1] = sub_57B1C;
  sub_58B9C();
  return sub_58A60();
}

uint64_t sub_57B1C()
{
  uint64_t v3 = v0[77];
  void *v4 = *v2;
  v0[78] = v1;
  swift_task_dealloc(v3);
  uint64_t v5 = (void *)v0[75];
  sub_58BE8(v0[34]);

  sub_19840();
  return sub_19744();
}

#error "57BD4: call analysis failed (funcsize=30)"
uint64_t sub_57BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_19810();
  sub_1992C();
  *(void *)(v0 + 640) = v2;
  *(void *)(v0 + 648) = v1;
  sub_199C0(v3);
  sub_58C08();
  sub_19840();
  return sub_197B8();
}

#error "57CFC: call analysis failed (funcsize=113)"
uint64_t sub_57E2C()
{
  uint64_t v0;
  uint64_t v1;
  sub_2D000();
  sub_25068(*(void *)(v0 + 656));
  uint64_t v1 = sub_58B08();
  sub_25254(v1, &qword_D41B0);
  sub_19840();
  return sub_197B8();
}

#error "57ED0: call analysis failed (funcsize=38)"
uint64_t sub_57F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_455DC();
  sub_455CC();
  *(void *)(v2 + 672) = v1;
  *(void *)(v2 + 680) = v0;
  sub_199C0(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_57F70()
{
  uint64_t v2 = mach_absolute_time();
  sub_58A9C(v2, v3, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v0 + 688) = v4;
  void *v4 = v0;
  v4[1] = sub_57FFC;
  sub_58B9C();
  return sub_58A60();
}

uint64_t sub_57FFC()
{
  uint64_t v3 = v0[86];
  void *v4 = *v2;
  v0[87] = v1;
  swift_task_dealloc(v3);
  uint64_t v5 = (void *)v0[84];
  (*(void (**)(void, void))(v0[32] + 8LL))(v0[33], v0[31]);

  sub_19840();
  return sub_19744();
}

#error "580C0: call analysis failed (funcsize=31)"
#error "5813C: call analysis failed (funcsize=31)"
#error "581B8: call analysis failed (funcsize=31)"
#error "58234: call analysis failed (funcsize=31)"
#error "582B0: call analysis failed (funcsize=31)"
#error "5832C: call analysis failed (funcsize=31)"
#error "583A8: call analysis failed (funcsize=31)"
#error "58424: call analysis failed (funcsize=31)"
#error "584A0: call analysis failed (funcsize=31)"
uint64_t sub_584C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  sub_2D000();
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t v4 = *v1;
  *uint64_t v5 = v4;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc(v3);
  if (!v0) {
    return sub_1B5EC(*(uint64_t (**)(void))(v4 + 8));
  }
  sub_19840();
  return sub_1988C();
}

uint64_t sub_58514()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 24) = v1;
  sub_26B0(&qword_D4890);
  uint64_t v2 = static BarbaraWalters.logAndReturnError<A>(context:_:)(0xD00000000000005DLL, 0x80000000000A9510LL, v0 + 24);
  swift_willThrow(v2, v3, v4, v5, v6, v7, v8, v9);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_585A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_5F2C;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_58620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_5F2C;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_5869C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_5F2C;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_58718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_5F2C;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_58794(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_D7490 + dword_D7490);
  uint64_t v3 = (void *)swift_task_alloc(unk_D7494);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_58808;
  return v5(a1);
}

uint64_t sub_58808()
{
  return sub_1B5EC(v0[1]);
}

unint64_t sub_58840()
{
  unint64_t result = qword_D5E98[0];
  if (!qword_D5E98[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_A61F8, &_s20HandleIntentStrategyVN_0);
    atomic_store(result, qword_D5E98);
  }

  return result;
}

uint64_t sub_58880()
{
  return swift_task_dealloc(*(void *)(v0 + 448));
}

uint64_t sub_588C8(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_588F0()
{
  return swift_task_dealloc(*(void *)(v0 + 448));
}

void sub_58934()
{
}

uint64_t sub_58950()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t sub_58960()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_58970()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_58980@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_5898C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, a2, v4);
}

uint64_t sub_589BC(uint64_t (*a1)(void))
{
  return a1();
}

void sub_589D8()
{
}

void sub_58A00(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_58A0C()
{
  uint64_t result = *(void *)(v0 + 176);
  *(void *)(v1 + 16) = 0LL;
  return result;
}

  ;
}

uint64_t sub_58A60()
{
  return ((uint64_t (*)(void))PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:))();
}

uint64_t sub_58A74@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

uint64_t sub_58A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v3, v4, a3);
}

uint64_t sub_58AA8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 104))(v1);
}

void sub_58AB4()
{
}

uint64_t sub_58ACC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_58AE0( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 3;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_58AF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a11 + 16))(v13, a13, a12);
}

uint64_t sub_58B08()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_58B18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a12 + 8))(a14, a13);
}

uint64_t sub_58B28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a13 + 8))(a15, a14);
}

_WORD *sub_58B38(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_58B48()
{
  return sub_16880(v1, 1LL, v0);
}

unint64_t sub_58B68()
{
  return sub_24EA4();
}

uint64_t sub_58B70( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 3;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_58B84@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_58B94()
{
  return swift_task_alloc(v0);
}

uint64_t sub_58B9C()
{
  return *(void *)(v0 + 176);
}

uint64_t sub_58BAC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

  ;
}

  ;
}

uint64_t sub_58BE8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 256) + 8LL))(a1, *(void *)(v1 + 248));
}

BOOL sub_58BF4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_58C00()
{
  return type metadata accessor for SiriAlarmSnippetModels(0LL);
}

uint64_t sub_58C08()
{
  return swift_release(*(void *)(v0 + 480));
}

uint64_t _s20HandleIntentStrategyVwcp_1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

void *_s20HandleIntentStrategyVwca_1(void *a1, void *a2)
{
  *a1 = *a2;
  sub_19FF8(a1 + 1, a2 + 1);
  return a1;
}

uint64_t _s20HandleIntentStrategyVwta_1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  _s20HandleIntentStrategyVwxx_1((void *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *_s20HandleIntentStrategyVMa_1()
{
  return &_s20HandleIntentStrategyVN_1;
}

void *sub_58CDC(uint64_t a1)
{
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    uint64_t v3 = 4LL;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1LL)) {
        break;
      }
      sub_4828C();
      uint64_t v8 = v7;

      if (v8)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
        unint64_t v11 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v10 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        if (v11 >= v10 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1LL);
        }
        uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v8);
        specialized Array._endMutation()(v12, v13, v14, v15);
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

LABEL_19:
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void sub_58E40(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v5 = a4 >> 1;
  if (a4 >> 1 != a3)
  {
    uint64_t v6 = a3;
    swift_unknownObjectRetain(a1);
    while (v6 < v5)
    {
      id v8 = *(id *)(a2 + 8 * v6);
      sub_4828C();
      uint64_t v10 = v9;

      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        unint64_t v13 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v12 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        if (v13 >= v12 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1LL);
        }
        uint64_t v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
        specialized Array._endMutation()(v14, v15, v16, v17);
      }

      if (v5 == ++v6)
      {
        swift_unknownObjectRelease(a1);
        return;
      }
    }

    __break(1u);
  }

void *sub_58F48(uint64_t a1)
{
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    sub_5E3C();
    uint64_t v22 = _swiftEmptyArrayStorage;
    uint64_t v3 = 4LL;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      int64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1LL)) {
        break;
      }
      id v7 = [v4 undoable];
      v8.super.super.Class isa = NSNumber.init(integerLiteral:)(1LL).super.super.isa;
      if (v7)
      {
        uint64_t v9 = v2;
        id v10 = v7;
        char v11 = static NSObject.== infix(_:_:)(v10, v8.super.super.isa);

        if ((v11 & 1) != 0)
        {
          uint64_t v12 = sub_4AD44(v5);
          uint64_t v14 = v13;

          if (v14)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
            {
              sub_6C684(0, v22[2] + 1LL, 1, (uint64_t)v22);
              uint64_t v22 = v18;
            }

            unint64_t v16 = v22[2];
            unint64_t v15 = v22[3];
            if (v16 >= v15 >> 1)
            {
              sub_6C684(v15 > 1, v16 + 1, 1, (uint64_t)v22);
              uint64_t v22 = v19;
            }

            v22[2] = v16 + 1;
            uint64_t v17 = &v22[2 * v16];
            v17[4] = v12;
            v17[5] = v14;
          }
        }

        else
        {
        }

        uint64_t v2 = v9;
      }

      else
      {
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_27;
      }
    }

    __break(1u);
LABEL_22:
    if (a1 < 0) {
      uint64_t v20 = a1;
    }
    else {
      uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

  uint64_t v22 = _swiftEmptyArrayStorage;
LABEL_27:
  swift_bridgeObjectRelease(a1);
  return v22;
}

void sub_59144(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_26B0(&qword_D4178);
  sub_215E4();
  __chkstk_darwin(v4);
  sub_17390();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for SiriAlarmSnippetModel(0LL);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v30 = (uint64_t)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v27 = (uint64_t)v25 - v11;
  uint64_t v12 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v24))
  {
    v25[1] = v2;
    unint64_t v28 = a1 & 0xC000000000000001LL;
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v14 = 4LL;
    uint64_t v26 = a1;
    while (1)
    {
      uint64_t v2 = v14 - 4;
      id v15 = v28 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1) : *(id *)(a1 + 8 * v14);
      unint64_t v16 = v15;
      uint64_t v17 = v14 - 3;
      if (__OFADD__(v2, 1LL)) {
        break;
      }
      sub_672D0();

      if (sub_16880(v7, 1LL, v8) == 1)
      {
        sub_19594(v7, &qword_D4178);
      }

      else
      {
        uint64_t v18 = v27;
        sub_67598(v27, v7);
        sub_67598(v30, v18);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        {
          char v21 = sub_670E0();
          uint64_t v13 = (void *)sub_6C9E4(v21, v22, v23, (uint64_t)v13);
        }

        unint64_t v20 = v13[2];
        unint64_t v19 = v13[3];
        if (v20 >= v19 >> 1) {
          uint64_t v13 = (void *)sub_6C9E4(v19 > 1, v20 + 1, 1, (uint64_t)v13);
        }
        v13[2] = v20 + 1;
        sub_67598( (uint64_t)v13 + ((*(unsigned __int8 *)(v29 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))
        + *(void *)(v29 + 72) * v20,
          v30);
        a1 = v26;
      }

      ++v14;
      if (v17 == v12) {
        goto LABEL_22;
      }
    }

    __break(1u);
LABEL_18:
    if (a1 < 0) {
      uint64_t v24 = a1;
    }
    else {
      uint64_t v24 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

LABEL_22:
  swift_bridgeObjectRelease(a1);
  sub_670C0();
}

  if ((v11 & 0x4000000000000000LL) != 0) {
    goto LABEL_24;
  }
LABEL_23:
  sub_16FD8();
  sub_6D0F4();
}

void sub_593A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for SiriAlarmSnippetModel(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  int64_t v17 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
LABEL_13:
    sub_670C0();
  }

  else
  {
    uint64_t v27 = (uint64_t)&v26 - v15;
    uint64_t v30 = v16;
    swift_unknownObjectRetain(a1);
    uint64_t v18 = _swiftEmptyArrayStorage;
    uint64_t v28 = v13;
    uint64_t v29 = a2;
    while (a3 < v17)
    {
      id v19 = *(id *)(a2 + 8 * a3);
      sub_672D0();

      if (sub_16880(v11, 1LL, v12) == 1)
      {
        sub_19594(v11, &qword_D4178);
      }

      else
      {
        uint64_t v20 = v27;
        sub_67564(v27, v11);
        sub_67564(v30, v20);
        if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
        {
          char v23 = sub_670E0();
          uint64_t v18 = (void *)sub_6C9E4(v23, v24, v25, (uint64_t)v18);
        }

        unint64_t v22 = v18[2];
        unint64_t v21 = v18[3];
        if (v22 >= v21 >> 1) {
          uint64_t v18 = (void *)sub_6C9E4(v21 > 1, v22 + 1, 1, (uint64_t)v18);
        }
        v18[2] = v22 + 1;
        sub_67564( (uint64_t)v18 + ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
        + *(void *)(v28 + 72) * v22,
          v30);
        a2 = v29;
      }

      if (v17 == ++a3)
      {
        swift_unknownObjectRelease(a1);
        goto LABEL_13;
      }
    }

    __break(1u);
  }

uint64_t sub_595B0()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease(object);
}

uint64_t sub_5960C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D5EF8);
  sub_26F0(v0, (uint64_t)qword_D5EF8);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_59654()
{
  if (qword_D30D8 != -1) {
    swift_once(&qword_D30D8, sub_5960C);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  return sub_26F0(v0, (uint64_t)qword_D5EF8);
}

uint64_t sub_5969C()
{
  uint64_t v3 = v2 - v1;
  uint64_t v4 = type metadata accessor for HALAlarmDeviceContext(0LL);
  sub_23050(v3, v5, v6, v4);
  sub_1511C();
  uint64_t v8 = v7;
  sub_19594(v3, &qword_D37D0);
  return v8;
}

uint64_t sub_5972C(uint64_t a1, uint64_t a2)
{
  v3[95] = v2;
  v3[94] = a2;
  v3[93] = a1;
  uint64_t v4 = type metadata accessor for ResponseMode(0LL);
  v3[96] = v4;
  v3[97] = *(void *)(v4 - 8);
  v3[98] = sub_19884();
  v3[99] = sub_19884();
  uint64_t v5 = sub_26B0(&qword_D3A08);
  v3[100] = sub_19754(*(void *)(v5 - 8));
  sub_26B0(&qword_D4178);
  v3[101] = sub_19884();
  v3[102] = sub_19884();
  v3[103] = sub_19884();
  v3[104] = sub_19884();
  uint64_t v6 = type metadata accessor for SiriAlarmSnippetModel(0LL);
  v3[105] = v6;
  v3[106] = *(void *)(v6 - 8);
  v3[107] = sub_19884();
  v3[108] = sub_19884();
  v3[109] = sub_19884();
  v3[110] = sub_19884();
  uint64_t v7 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v3[111] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[112] = v8;
  v3[113] = sub_19754(v8);
  uint64_t v9 = type metadata accessor for Parse.DirectInvocation(0LL);
  v3[114] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[115] = v10;
  v3[116] = sub_19754(v10);
  sub_26B0(&qword_D4170);
  v3[117] = sub_19884();
  v3[118] = sub_19884();
  v3[119] = sub_19884();
  v3[120] = sub_19884();
  v3[121] = sub_19884();
  v3[122] = sub_19884();
  uint64_t v11 = type metadata accessor for DialogPhase(0LL);
  v3[123] = v11;
  v3[124] = *(void *)(v11 - 8);
  v3[125] = sub_19884();
  v3[126] = sub_19884();
  v3[127] = sub_19884();
  v3[128] = sub_19884();
  v3[129] = sub_19884();
  v3[130] = sub_19884();
  v3[131] = sub_19884();
  v3[132] = sub_19884();
  v3[133] = sub_19884();
  v3[134] = sub_19884();
  v3[135] = sub_19884();
  uint64_t v12 = type metadata accessor for Logger(0LL);
  v3[136] = v12;
  v3[137] = *(void *)(v12 - 8);
  v3[138] = sub_19884();
  v3[139] = sub_19884();
  v3[140] = sub_19884();
  v3[141] = sub_19884();
  v3[142] = sub_19884();
  v3[143] = sub_19884();
  v3[144] = sub_19884();
  v3[145] = sub_19884();
  v3[146] = sub_19884();
  v3[147] = sub_19884();
  v3[148] = sub_19884();
  v3[149] = sub_19884();
  uint64_t v13 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[150] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[151] = v14;
  v3[152] = sub_19754(v14);
  uint64_t v15 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[153] = v15;
  v3[154] = *(void *)(v15 - 8);
  v3[155] = sub_19884();
  v3[156] = sub_19884();
  v3[157] = sub_19884();
  v3[158] = sub_19884();
  v3[159] = sub_19884();
  v3[160] = sub_19884();
  v3[161] = sub_19884();
  v3[162] = sub_19884();
  v3[163] = sub_19884();
  uint64_t v16 = type metadata accessor for NLContextUpdate(0LL);
  v3[164] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v3[165] = v17;
  v3[166] = sub_19754(v17);
  sub_19840();
  return sub_1988C();
}

void sub_59A40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = v10;
  if (qword_D30D8 != -1) {
    swift_once(&qword_D30D8, sub_5960C);
  }
  v10[167] = sub_26F0(v10[136], (uint64_t)qword_D5EF8);
  uint64_t v12 = (os_log_s *)sub_16D50();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  Class isa = (Class)v13;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = (_WORD *)sub_16AC4(2LL);
    sub_6709C(v15);
    sub_16B44( &dword_0,  v12,  (os_log_type_t)isa,  "ChangeAlarmStatus.HandleIntentStrategy.makeIntentHandledResponse() called.",  v9);
    sub_16AA8((uint64_t)v9);
  }

  uint64_t v16 = sub_26B0(&qword_D5F68);
  uint64_t v17 = (void *)IntentResolutionRecord.intentResponse.getter(v16);
  v11[168] = v17;
  unint64_t v18 = sub_5E3C();
  id v19 = [(id)IntentResolutionRecord.intent.getter(v16) handleSilently];
  sub_67130();
  if (!isa) {
    Class isa = sub_67580().super.super.isa;
  }
  Class v20 = sub_67580().super.super.isa;
  unint64_t v21 = (os_log_s *)static NSObject.== infix(_:_:)(isa, v20);

  if ((v21 & 1) == 0)
  {
    sub_4AFDC(v22, v23, v24, v25, v26, v27, v28, v29, v1141, v1200, v1259, v1319, v1378);
    os_log_type_t v48 = sub_16C50();
    if (sub_16C28(v48))
    {
      uint64_t v49 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)uint64_t v49 = 0;
      sub_16B44( &dword_0,  v21,  (os_log_type_t)isa,  "ChangeAlarmStatus.makeIntentHandledResponse: Handling silently; returning empty output",
        v49);
      sub_16AA8((uint64_t)v49);
    }

    type metadata accessor for EmptyOutput(0LL);
    static EmptyOutput.instance.getter();

    sub_67450();
    uint64_t v1320 = v11[152];
    uint64_t v1379 = v11[149];
    uint64_t v1435 = v11[148];
    uint64_t v1487 = v11[147];
    uint64_t v1537 = v11[146];
    uint64_t v1585 = v11[145];
    uint64_t v1631 = v11[144];
    uint64_t v1675 = v11[143];
    uint64_t v1717 = v11[142];
    uint64_t v1757 = v11[141];
    uint64_t v1795 = v11[140];
    uint64_t v1831 = v11[139];
    uint64_t v1865 = v11[138];
    uint64_t v1897 = v11[135];
    uint64_t v1927 = v11[134];
    uint64_t v1955 = v11[133];
    uint64_t v1981 = v11[132];
    uint64_t v2005 = v11[131];
    uint64_t v2027 = v11[130];
    uint64_t v2047 = v11[129];
    uint64_t v2066 = v11[128];
    uint64_t v2083 = v11[127];
    uint64_t v2098 = v11[126];
    uint64_t v2111 = v11[125];
    uint64_t v2123 = v11[122];
    uint64_t v2131 = v11[121];
    uint64_t v2138 = v11[120];
    uint64_t v2143 = v11[119];
    sub_67614(v50);
    sub_19830();
    sub_197C0();
    sub_19794();
    sub_1978C();
    sub_19800();
    sub_19808();
    sub_1987C();
    sub_19820();
    uint64_t v51 = sub_19828();
    uint64_t v59 = sub_1B64C(v51, v52, v53, v54, v55, v56, v57, v58, v1142, v1201, v1260, v1320);
    uint64_t v67 = sub_25044(v59, v60, v61, v62, v63, v64, v65, v66, v1143, v1202, v1261, v1321, v1379);
    uint64_t v75 = sub_2503C(v67, v68, v69, v70, v71, v72, v73, v74, v1144, v1203, v1262, v1322, v1380, v1435);
    uint64_t v83 = sub_25218(v75, v76, v77, v78, v79, v80, v81, v82, v1145, v1204, v1263, v1323, v1381, v1436, v1487);
    uint64_t v91 = sub_45358(v83, v84, v85, v86, v87, v88, v89, v90, v1146, v1205, v1264, v1324, v1382, v1437, v1488, v1537);
    uint64_t v99 = sub_45350( v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v1147,  v1206,  v1265,  v1325,  v1383,  v1438,  v1489,  v1538,  v1585);
    uint64_t v107 = sub_45348( v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v1148,  v1207,  v1266,  v1326,  v1384,  v1439,  v1490,  v1539,  v1586,  v1631);
    uint64_t v115 = sub_45340( v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  v1149,  v1208,  v1267,  v1327,  v1385,  v1440,  v1491,  v1540,  v1587,  v1632,  v1675);
    uint64_t v123 = sub_45338( v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v1150,  v1209,  v1268,  v1328,  v1386,  v1441,  v1492,  v1541,  v1588,  v1633,  v1676,  v1717);
    uint64_t v131 = sub_45330( v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,  v1151,  v1210,  v1269,  v1329,  v1387,  v1442,  v1493,  v1542,  v1589,  v1634,  v1677,  v1718,  v1757);
    uint64_t v139 = sub_667C8( v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v1152,  v1211,  v1270,  v1330,  v1388,  v1443,  v1494,  v1543,  v1590,  v1635,  v1678,  v1719,  v1758,  v1795);
    uint64_t v147 = sub_667C0( v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  v1153,  v1212,  v1271,  v1331,  v1389,  v1444,  v1495,  v1544,  v1591,  v1636,  v1679,  v1720,  v1759,  v1796,  v1831);
    uint64_t v155 = sub_667B8( v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v1154,  v1213,  v1272,  v1332,  v1390,  v1445,  v1496,  v1545,  v1592,  v1637,  v1680,  v1721,  v1760,  v1797,  v1832,  v1865);
    uint64_t v163 = sub_667B0( v155,  v156,  v157,  v158,  v159,  v160,  v161,  v162,  v1155,  v1214,  v1273,  v1333,  v1391,  v1446,  v1497,  v1546,  v1593,  v1638,  v1681,  v1722,  v1761,  v1798,  v1833,  v1866,  v1897);
    uint64_t v171 = sub_667A8( v163,  v164,  v165,  v166,  v167,  v168,  v169,  v170,  v1156,  v1215,  v1274,  v1334,  v1392,  v1447,  v1498,  v1547,  v1594,  v1639,  v1682,  v1723,  v1762,  v1799,  v1834,  v1867,  v1898,  v1927);
    uint64_t v179 = sub_667A0( v171,  v172,  v173,  v174,  v175,  v176,  v177,  v178,  v1157,  v1216,  v1275,  v1335,  v1393,  v1448,  v1499,  v1548,  v1595,  v1640,  v1683,  v1724,  v1763,  v1800,  v1835,  v1868,  v1899,  v1928,  v1955);
    uint64_t v187 = sub_66798( v179,  v180,  v181,  v182,  v183,  v184,  v185,  v186,  v1158,  v1217,  v1276,  v1336,  v1394,  v1449,  v1500,  v1549,  v1596,  v1641,  v1684,  v1725,  v1764,  v1801,  v1836,  v1869,  v1900,  v1929,  v1956,  v1981);
    uint64_t v195 = sub_66790( v187,  v188,  v189,  v190,  v191,  v192,  v193,  v194,  v1159,  v1218,  v1277,  v1337,  v1395,  v1450,  v1501,  v1550,  v1597,  v1642,  v1685,  v1726,  v1765,  v1802,  v1837,  v1870,  v1901,  v1930,  v1957,  v1982,  v2005);
    uint64_t v203 = sub_66788( v195,  v196,  v197,  v198,  v199,  v200,  v201,  v202,  v1160,  v1219,  v1278,  v1338,  v1396,  v1451,  v1502,  v1551,  v1598,  v1643,  v1686,  v1727,  v1766,  v1803,  v1838,  v1871,  v1902,  v1931,  v1958,  v1983,  v2006,  v2027);
    uint64_t v211 = sub_66780( v203,  v204,  v205,  v206,  v207,  v208,  v209,  v210,  v1161,  v1220,  v1279,  v1339,  v1397,  v1452,  v1503,  v1552,  v1599,  v1644,  v1687,  v1728,  v1767,  v1804,  v1839,  v1872,  v1903,  v1932,  v1959,  v1984,  v2007,  v2028,  v2047);
    uint64_t v219 = sub_66778( v211,  v212,  v213,  v214,  v215,  v216,  v217,  v218,  v1162,  v1221,  v1280,  v1340,  v1398,  v1453,  v1504,  v1553,  v1600,  v1645,  v1688,  v1729,  v1768,  v1805,  v1840,  v1873,  v1904,  v1933,  v1960,  v1985,  v2008,  v2029,  v2048,  v2066);
    uint64_t v227 = sub_66770( v219,  v220,  v221,  v222,  v223,  v224,  v225,  v226,  v1163,  v1222,  v1281,  v1341,  v1399,  v1454,  v1505,  v1554,  v1601,  v1646,  v1689,  v1730,  v1769,  v1806,  v1841,  v1874,  v1905,  v1934,  v1961,  v1986,  v2009,  v2030,  v2049,  v2067,  v2083);
    uint64_t v235 = sub_66768( v227,  v228,  v229,  v230,  v231,  v232,  v233,  v234,  v1164,  v1223,  v1282,  v1342,  v1400,  v1455,  v1506,  v1555,  v1602,  v1647,  v1690,  v1731,  v1770,  v1807,  v1842,  v1875,  v1906,  v1935,  v1962,  v1987,  v2010,  v2031,  v2050,  v2068,  v2084,  v2098);
    uint64_t v243 = sub_66760( v235,  v236,  v237,  v238,  v239,  v240,  v241,  v242,  v1165,  v1224,  v1283,  v1343,  v1401,  v1456,  v1507,  v1556,  v1603,  v1648,  v1691,  v1732,  v1771,  v1808,  v1843,  v1876,  v1907,  v1936,  v1963,  v1988,  v2011,  v2032,  v2051,  v2069,  v2085,  v2099,  v2111);
    uint64_t v251 = sub_66758( v243,  v244,  v245,  v246,  v247,  v248,  v249,  v250,  v1166,  v1225,  v1284,  v1344,  v1402,  v1457,  v1508,  v1557,  v1604,  v1649,  v1692,  v1733,  v1772,  v1809,  v1844,  v1877,  v1908,  v1937,  v1964,  v1989,  v2012,  v2033,  v2052,  v2070,  v2086,  v2100,  v2112,  v2123);
    uint64_t v259 = sub_66930( v251,  v252,  v253,  v254,  v255,  v256,  v257,  v258,  v1167,  v1226,  v1285,  v1345,  v1403,  v1458,  v1509,  v1558,  v1605,  v1650,  v1693,  v1734,  v1773,  v1810,  v1845,  v1878,  v1909,  v1938,  v1965,  v1990,  v2013,  v2034,  v2053,  v2071,  v2087,  v2101,  v2113,  v2124,  v2131);
    uint64_t v267 = sub_66C24( v259,  v260,  v261,  v262,  v263,  v264,  v265,  v266,  v1168,  v1227,  v1286,  v1346,  v1404,  v1459,  v1510,  v1559,  v1606,  v1651,  v1694,  v1735,  v1774,  v1811,  v1846,  v1879,  v1910,  v1939,  v1966,  v1991,  v2014,  v2035,  v2054,  v2072,  v2088,  v2102,  v2114,  v2125,  v2132,  v2138);
    sub_66D14( v267,  v268,  v269,  v270,  v271,  v272,  v273,  v274,  v1169,  v1228,  v1287,  v1347,  v1405,  v1460,  v1511,  v1560,  v1607,  v1652,  v1695,  v1736,  v1775,  v1812,  v1847,  v1880,  v1911,  v1940,  v1967,  v1992,  v2015,  v2036,  v2055,  v2073,  v2089,  v2103,  v2115,  v2126,  v2133,  v2139,  v2143);
    sub_66D0C();
    sub_66C1C();
    sub_66928();
    sub_66750();
    sub_66748();
    sub_66740();
    sub_66738();
    sub_66730();
    sub_66728();
    sub_66720();
    sub_66718();
    sub_66710();
    sub_668F8();
    sub_66918();
    sub_668F0();
    sub_19958();
LABEL_167:
    sub_66A40();
    __asm { BR              X0 }
  }

  uint64_t v30 = sub_65BD4(v17, (SEL *)&selRef_modifiedAlarms);
  if (!v30)
  {
    sub_26B0(&qword_D4190);
    unint64_t v275 = sub_58B68();
    uint64_t v276 = sub_25234(v275);
    sub_66980(v276, v277, v278, v279, v280, v281, v282, v283);

LABEL_166:
    sub_67450();
    uint64_t v1290 = v11[152];
    uint64_t v1350 = v11[149];
    uint64_t v1408 = v11[148];
    uint64_t v1461 = v11[147];
    uint64_t v1512 = v11[146];
    uint64_t v1561 = v11[145];
    uint64_t v1608 = v11[144];
    uint64_t v1653 = v11[143];
    uint64_t v1696 = v11[142];
    uint64_t v1737 = v11[141];
    uint64_t v1776 = v11[140];
    uint64_t v1813 = v11[139];
    uint64_t v1848 = v11[138];
    uint64_t v1881 = v11[135];
    uint64_t v1912 = v11[134];
    uint64_t v1941 = v11[133];
    uint64_t v1968 = v11[132];
    uint64_t v1993 = v11[131];
    uint64_t v2016 = v11[130];
    uint64_t v2037 = v11[129];
    uint64_t v2056 = v11[128];
    uint64_t v2074 = v11[127];
    uint64_t v2090 = v11[126];
    uint64_t v2104 = v11[125];
    uint64_t v2116 = v11[122];
    uint64_t v2127 = v11[121];
    uint64_t v2134 = v11[120];
    uint64_t v2141 = v11[119];
    uint64_t v2146 = v11[118];
    sub_67614(v603);
    sub_197C0();
    sub_19830();
    sub_19794();
    sub_1978C();
    sub_19800();
    sub_19808();
    sub_19828();
    sub_1987C();
    uint64_t v604 = sub_19820();
    uint64_t v612 = sub_19964(v604, v605, v606, v607, v608, v609, v610, v611, v1141, v1200, v1290);
    uint64_t v620 = sub_1B64C(v612, v613, v614, v615, v616, v617, v618, v619, v1172, v1231, v1291, v1350);
    uint64_t v628 = sub_25044(v620, v621, v622, v623, v624, v625, v626, v627, v1173, v1232, v1292, v1351, v1408);
    uint64_t v636 = sub_2503C(v628, v629, v630, v631, v632, v633, v634, v635, v1174, v1233, v1293, v1352, v1409, v1461);
    uint64_t v644 = sub_25218(v636, v637, v638, v639, v640, v641, v642, v643, v1175, v1234, v1294, v1353, v1410, v1462, v1512);
    uint64_t v652 = sub_45358( v644,  v645,  v646,  v647,  v648,  v649,  v650,  v651,  v1176,  v1235,  v1295,  v1354,  v1411,  v1463,  v1513,  v1561);
    uint64_t v660 = sub_45350( v652,  v653,  v654,  v655,  v656,  v657,  v658,  v659,  v1177,  v1236,  v1296,  v1355,  v1412,  v1464,  v1514,  v1562,  v1608);
    uint64_t v668 = sub_45348( v660,  v661,  v662,  v663,  v664,  v665,  v666,  v667,  v1178,  v1237,  v1297,  v1356,  v1413,  v1465,  v1515,  v1563,  v1609,  v1653);
    uint64_t v676 = sub_45340( v668,  v669,  v670,  v671,  v672,  v673,  v674,  v675,  v1179,  v1238,  v1298,  v1357,  v1414,  v1466,  v1516,  v1564,  v1610,  v1654,  v1696);
    uint64_t v684 = sub_45338( v676,  v677,  v678,  v679,  v680,  v681,  v682,  v683,  v1180,  v1239,  v1299,  v1358,  v1415,  v1467,  v1517,  v1565,  v1611,  v1655,  v1697,  v1737);
    uint64_t v692 = sub_45330( v684,  v685,  v686,  v687,  v688,  v689,  v690,  v691,  v1181,  v1240,  v1300,  v1359,  v1416,  v1468,  v1518,  v1566,  v1612,  v1656,  v1698,  v1738,  v1776);
    uint64_t v700 = sub_667C8( v692,  v693,  v694,  v695,  v696,  v697,  v698,  v699,  v1182,  v1241,  v1301,  v1360,  v1417,  v1469,  v1519,  v1567,  v1613,  v1657,  v1699,  v1739,  v1777,  v1813);
    uint64_t v708 = sub_667C0( v700,  v701,  v702,  v703,  v704,  v705,  v706,  v707,  v1183,  v1242,  v1302,  v1361,  v1418,  v1470,  v1520,  v1568,  v1614,  v1658,  v1700,  v1740,  v1778,  v1814,  v1848);
    uint64_t v716 = sub_667B8( v708,  v709,  v710,  v711,  v712,  v713,  v714,  v715,  v1184,  v1243,  v1303,  v1362,  v1419,  v1471,  v1521,  v1569,  v1615,  v1659,  v1701,  v1741,  v1779,  v1815,  v1849,  v1881);
    uint64_t v724 = sub_667B0( v716,  v717,  v718,  v719,  v720,  v721,  v722,  v723,  v1185,  v1244,  v1304,  v1363,  v1420,  v1472,  v1522,  v1570,  v1616,  v1660,  v1702,  v1742,  v1780,  v1816,  v1850,  v1882,  v1912);
    uint64_t v732 = sub_667A8( v724,  v725,  v726,  v727,  v728,  v729,  v730,  v731,  v1186,  v1245,  v1305,  v1364,  v1421,  v1473,  v1523,  v1571,  v1617,  v1661,  v1703,  v1743,  v1781,  v1817,  v1851,  v1883,  v1913,  v1941);
    uint64_t v740 = sub_667A0( v732,  v733,  v734,  v735,  v736,  v737,  v738,  v739,  v1187,  v1246,  v1306,  v1365,  v1422,  v1474,  v1524,  v1572,  v1618,  v1662,  v1704,  v1744,  v1782,  v1818,  v1852,  v1884,  v1914,  v1942,  v1968);
    uint64_t v748 = sub_66798( v740,  v741,  v742,  v743,  v744,  v745,  v746,  v747,  v1188,  v1247,  v1307,  v1366,  v1423,  v1475,  v1525,  v1573,  v1619,  v1663,  v1705,  v1745,  v1783,  v1819,  v1853,  v1885,  v1915,  v1943,  v1969,  v1993);
    uint64_t v756 = sub_66790( v748,  v749,  v750,  v751,  v752,  v753,  v754,  v755,  v1189,  v1248,  v1308,  v1367,  v1424,  v1476,  v1526,  v1574,  v1620,  v1664,  v1706,  v1746,  v1784,  v1820,  v1854,  v1886,  v1916,  v1944,  v1970,  v1994,  v2016);
    uint64_t v764 = sub_66788( v756,  v757,  v758,  v759,  v760,  v761,  v762,  v763,  v1190,  v1249,  v1309,  v1368,  v1425,  v1477,  v1527,  v1575,  v1621,  v1665,  v1707,  v1747,  v1785,  v1821,  v1855,  v1887,  v1917,  v1945,  v1971,  v1995,  v2017,  v2037);
    uint64_t v772 = sub_66780( v764,  v765,  v766,  v767,  v768,  v769,  v770,  v771,  v1191,  v1250,  v1310,  v1369,  v1426,  v1478,  v1528,  v1576,  v1622,  v1666,  v1708,  v1748,  v1786,  v1822,  v1856,  v1888,  v1918,  v1946,  v1972,  v1996,  v2018,  v2038,  v2056);
    uint64_t v780 = sub_66778( v772,  v773,  v774,  v775,  v776,  v777,  v778,  v779,  v1192,  v1251,  v1311,  v1370,  v1427,  v1479,  v1529,  v1577,  v1623,  v1667,  v1709,  v1749,  v1787,  v1823,  v1857,  v1889,  v1919,  v1947,  v1973,  v1997,  v2019,  v2039,  v2057,  v2074);
    uint64_t v788 = sub_66770( v780,  v781,  v782,  v783,  v784,  v785,  v786,  v787,  v1193,  v1252,  v1312,  v1371,  v1428,  v1480,  v1530,  v1578,  v1624,  v1668,  v1710,  v1750,  v1788,  v1824,  v1858,  v1890,  v1920,  v1948,  v1974,  v1998,  v2020,  v2040,  v2058,  v2075,  v2090);
    uint64_t v796 = sub_66768( v788,  v789,  v790,  v791,  v792,  v793,  v794,  v795,  v1194,  v1253,  v1313,  v1372,  v1429,  v1481,  v1531,  v1579,  v1625,  v1669,  v1711,  v1751,  v1789,  v1825,  v1859,  v1891,  v1921,  v1949,  v1975,  v1999,  v2021,  v2041,  v2059,  v2076,  v2091,  v2104);
    uint64_t v804 = sub_66760( v796,  v797,  v798,  v799,  v800,  v801,  v802,  v803,  v1195,  v1254,  v1314,  v1373,  v1430,  v1482,  v1532,  v1580,  v1626,  v1670,  v1712,  v1752,  v1790,  v1826,  v1860,  v1892,  v1922,  v1950,  v1976,  v2000,  v2022,  v2042,  v2060,  v2077,  v2092,  v2105,  v2116);
    uint64_t v812 = sub_66758( v804,  v805,  v806,  v807,  v808,  v809,  v810,  v811,  v1196,  v1255,  v1315,  v1374,  v1431,  v1483,  v1533,  v1581,  v1627,  v1671,  v1713,  v1753,  v1791,  v1827,  v1861,  v1893,  v1923,  v1951,  v1977,  v2001,  v2023,  v2043,  v2061,  v2078,  v2093,  v2106,  v2117,  v2127);
    uint64_t v820 = sub_66930( v812,  v813,  v814,  v815,  v816,  v817,  v818,  v819,  v1197,  v1256,  v1316,  v1375,  v1432,  v1484,  v1534,  v1582,  v1628,  v1672,  v1714,  v1754,  v1792,  v1828,  v1862,  v1894,  v1924,  v1952,  v1978,  v2002,  v2024,  v2044,  v2062,  v2079,  v2094,  v2107,  v2118,  v2128,  v2134);
    uint64_t v828 = sub_66C24( v820,  v821,  v822,  v823,  v824,  v825,  v826,  v827,  v1198,  v1257,  v1317,  v1376,  v1433,  v1485,  v1535,  v1583,  v1629,  v1673,  v1715,  v1755,  v1793,  v1829,  v1863,  v1895,  v1925,  v1953,  v1979,  v2003,  v2025,  v2045,  v2063,  v2080,  v2095,  v2108,  v2119,  v2129,  v2135,  v2141);
    sub_66D14( v828,  v829,  v830,  v831,  v832,  v833,  v834,  v835,  v1199,  v1258,  v1318,  v1377,  v1434,  v1486,  v1536,  v1584,  v1630,  v1674,  v1716,  v1756,  v1794,  v1830,  v1864,  v1896,  v1926,  v1954,  v1980,  v2004,  v2026,  v2046,  v2064,  v2081,  v2096,  v2109,  v2120,  v2130,  v2136,  v2142,  v2146);
    sub_66D0C();
    sub_66C1C();
    sub_66928();
    sub_66750();
    sub_66748();
    sub_66740();
    sub_66738();
    sub_66730();
    sub_66728();
    sub_66720();
    sub_66718();
    sub_66710();
    sub_668F8();
    sub_668F0();
    goto LABEL_167;
  }

  unint64_t v31 = v30;
  uint64_t v2162 = (uint64_t)(v11 + 85);
  v2163 = v11 + 84;
  uint64_t v32 = (uint64_t)(v11 + 87);
  uint64_t v33 = v11[166];
  v2169 = (void *)IntentResolutionRecord.intent.getter(v16);
  v11[169] = v2169;
  uint64_t v34 = type metadata accessor for SirikitApp(0LL);
  uint64_t v35 = IntentResolutionRecord.app.getter(v16);
  uint64_t v36 = (os_log_s *)v34;
  uint64_t v37 = SirikitApp.init(app:)(v35);
  v11[170] = v37;
  sub_6044();
  uint64_t v2174 = v31;
  v2176 = v11;
  unint64_t v2165 = v31 >> 62;
  if (!(v31 >> 62))
  {
    uint64_t v38 = *(void *)((char *)&dword_10 + (v31 & 0xFFFFFFFFFFFFF8LL));
    if (v38)
    {
      if (v38 == 1)
      {
        sub_67304();
        goto LABEL_13;
      }

LABEL_160:
      uint64_t v2155 = (uint64_t)(v11 + 8);
      v2147 = (id *)(v11 + 89);
      id v577 = [v2169 alarmSearch];
      v11[235] = v577;
      uint64_t v578 = v11[100];
      v2145 = v11 + 87;
      v2140 = v577;
      if (v577)
      {
        id v579 = v577;
        sub_1D528();
        char v2158 = v580;

        id v582 = sub_66DE4(v581, "period");
        AlarmPeriod.rawValue.getter(v582);
        AlarmPeriod.rawValue.getter(8LL);
        sub_67444();
        id v584 = sub_66DE4(v583, "period");
        AlarmPeriod.rawValue.getter(v584);
        AlarmPeriod.rawValue.getter(1LL);
        sub_67444();
        id v586 = sub_66DE4(v585, "period");
        AlarmPeriod.rawValue.getter(v586);
        AlarmPeriod.rawValue.getter(2LL);
        sub_67444();
        id v588 = sub_66DE4(v587, "period");
        uint64_t v589 = AlarmPeriod.rawValue.getter(v588);
        AlarmPeriod.rawValue.getter(3LL);
        sub_67444();
        id v590 = v579;
        sub_1D4B0(v578);

        id v591 = v590;
        sub_1B6E0();
        sub_67130();
      }

      else
      {
        uint64_t v837 = type metadata accessor for SpeakableString(0LL);
        sub_23050(v578, v838, v839, v837);
        char v2158 = 0;
        uint64_t v589 = 0LL;
      }

      uint64_t v2152 = v589;
      v11[236] = v589;
      uint64_t v840 = v11[99];
      uint64_t v841 = v11[98];
      uint64_t v842 = v11[97];
      uint64_t v39 = (uint64_t (**)(uint64_t, uint64_t))v11[96];
      uint64_t v843 = v11[95];
      uint64_t v844 = type metadata accessor for SiriAlarm(0LL);
      id v845 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v844));
      v11[89] = sub_1D5F8(0LL, 0xE000000000000000LL, 0LL, 0xE000000000000000LL);
      type metadata accessor for SiriEnvironment(0LL);
      static SiriEnvironment.default.getter();
      SiriEnvironment.currentRequest.getter();
      uint64_t v846 = sub_17324();
      CurrentRequest.responseMode.getter(v846);
      uint64_t v847 = sub_66884();
      static ResponseMode.voiceOnly.getter(v847);
      char v848 = static ResponseMode.== infix(_:_:)(v840, v841);
      v849 = *(void (**)(uint64_t, uint64_t (**)(uint64_t, uint64_t)))(v842 + 8);
      v849(v841, v39);
      v849(v840, v39);
      uint64_t v850 = v843;
      v851 = v11 + 8;
      sub_65C2C(v850, v2155);
      if ((v848 & 1) != 0)
      {
        sub_675E8();
        v852 = &dword_0 + 1;
        v853 = (os_log_s *)_swiftEmptyArrayStorage;
        uint64_t v40 = v2174;
        uint64_t v32 = 860160LL;
      }

      else
      {
        v854 = (void **)(v11 + 2);
        sub_65C2C(v2155, (uint64_t)(v11 + 2));
        if ((v2158 & 1) != 0)
        {
          sub_675E8();
          v851 = *v854;
          sub_5659C((uint64_t)(v11 + 2));
          v855 = v2169;
          uint64_t v32 = 860160LL;
          if (v38 >= (uint64_t)v851)
          {
            v852 = &dword_0 + 1;
            v853 = (os_log_s *)_swiftEmptyArrayStorage;
            uint64_t v40 = v2174;
            goto LABEL_206;
          }
        }

        else
        {
          sub_5659C((uint64_t)(v11 + 2));
          sub_675E8();
          v855 = v2169;
          uint64_t v32 = 860160LL;
        }

        if (v2165)
        {
          sub_672A8();
          v854 = (void **)sub_45644();
        }

        else
        {
          sub_6741C();
        }

        if (v854)
        {
          uint64_t v868 = v2174;
          unint64_t v869 = v2174 & 0xC000000000000001LL;
          sub_44080(0LL, (v2174 & 0xC000000000000001LL) == 0, v2174);
          if ((v2174 & 0xC000000000000001LL) != 0) {
            id v870 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2174);
          }
          else {
            id v870 = *(id *)(v2174 + 32);
          }
          uint64_t v871 = (uint64_t)v870;
          uint64_t v872 = sub_1743C();
          id v873 = sub_66DE4(v872, "sleepAlarmAttribute");
          sub_67130();
          if (v851)
          {

            if (v2165)
            {
              sub_672A8();
              uint64_t v871 = sub_45644();
            }

            else
            {
              sub_6741C();
            }

            if (!v871)
            {
              v886 = (os_log_s *)v11[146];
              uint64_t v887 = v11[137];
              uint64_t v888 = v11[136];
              sub_16C88(v2174);
              uint64_t v889 = sub_59654();
              uint64_t v890 = (*(uint64_t (**)(os_log_s *, uint64_t, uint64_t))(v887 + 16))(v886, v889, v888);
              Logger.logObject.getter(v890, v891, v892, v893, v894, v895, v896, v897);
              os_log_type_t v898 = sub_17714();
              BOOL v899 = sub_16D30(v898);
              uint64_t v900 = v11[146];
              uint64_t v901 = v11[137];
              uint64_t v902 = v11[136];
              if (v899)
              {
                v903 = (uint8_t *)sub_66C68();
                sub_66B64(v903);
                uint64_t v11 = _swiftEmptyArrayStorage;
                sub_65A10((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&v2180, (uint64_t)&v2181, (uint64_t)&v2178);
                sub_67068();
                sub_16B44( &dword_0,  v886,  (os_log_type_t)v2174,  "Sleep alarm attribute is not nil, but sleep alarm doesn't exist.",  v903);
                sub_671F0();
              }

              else
              {
                swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
              }

              (*(void (**)(uint64_t, uint64_t))(v901 + 8))(v900, v902);
              uint64_t v1127 = v11[166];
              uint64_t v1128 = v11[165];
              uint64_t v1129 = v11[164];
              uint64_t v1130 = v11[100];
              uint64_t v1131 = sub_26B0(&qword_D4190);
              unint64_t v1132 = sub_24EA4();
              uint64_t v1133 = sub_286F0(v1131, v1132);
              sub_66980(v1133, v1134, v1135, v1136, v1137, v1138, v1139, v1140);

              sub_675F0();
              sub_675F8();
              (*(void (**)(uint64_t, uint64_t))(v1128 + 8))(v1127, v1129);
              sub_19594(v1130, &qword_D3A08);

              goto LABEL_166;
            }

            uint64_t v40 = v2174;
            sub_44080(0LL, v869 == 0, v2174);
            if (v869) {
              uint64_t v885 = sub_67038();
            }
            else {
              uint64_t v885 = (uint64_t)sub_672FC();
            }
            v904 = (void *)v885;
            sub_16D58();
            objc_storeStrong(v2147, v904);
            sub_16FD0();
            uint64_t v905 = sub_671E4();
            sub_58E40(v905, v906, v907, v908);
            v910 = v909;

            v853 = v910;
            swift_unknownObjectRelease(v905);
            v852 = 0LL;
            goto LABEL_206;
          }
        }

        else
        {
          uint64_t v868 = v2174;
          sub_1743C();
        }

        v853 = (os_log_s *)sub_58CDC(v868);
        v852 = 0LL;
        uint64_t v40 = v868;
      }

LABEL_291:
  uint64_t v41 = sub_67038();
LABEL_15:
  uint64_t v42 = (void *)v41;
  uint64_t v43 = v11 + 80;
  v2170 = v11 + 82;
  v11[181] = v41;
  uint64_t v44 = sub_16D58();
  uint64_t v45 = (char *)sub_66DE4(v44, "operation");
  Class v46 = (Class)&stru_D2000;
  if (v45 == (_BYTE *)&dword_0 + 2)
  {
    if (v2165)
    {
      sub_66CDC();
      uint64_t v284 = sub_45644();
    }

    else
    {
      uint64_t v284 = *(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFF8LL));
      sub_16FD0();
    }

    if (!v284)
    {
      uint64_t v309 = sub_16C88(v40);
      goto LABEL_94;
    }

    sub_6723C();
    if (v39) {
      uint64_t v292 = sub_67038();
    }
    else {
      uint64_t v292 = (uint64_t)sub_672FC();
    }
    uint64_t v284 = v292;
    sub_16D58();
    sub_902E4((void *)v284);
    if (v321)
    {
      sub_67550(v320);
      if (v322)
      {
        uint64_t v43 = (void *)v2174;
        sub_66EE0();
        uint64_t v284 = sub_45644();
        sub_17B9C();
      }

      else
      {
        uint64_t v284 = *(void *)((char *)&dword_10 + (v2174 & 0xFFFFFFFFFFFFF8LL));
      }

      if (v284)
      {
        sub_670F0();
        if (v39) {
          id v324 = (id)sub_67608();
        }
        else {
          id v324 = (id)v43[4];
        }
        uint64_t v284 = (uint64_t)v324;
      }

      uint64_t v377 = sub_17B9C();
      uint64_t v39 = (uint64_t (**)(uint64_t, uint64_t))sub_66DE4(v377, "undoable");

      v378.super.super.Class isa = sub_67544().super.super.isa;
      Class v46 = v378.super.super.isa;
      if (!v39)
      {

        uint64_t v309 = sub_16D58();
LABEL_94:
        sub_4AFDC(v309, v310, v311, v312, v313, v314, v315, v316, v1141, v1200, v1259, v1319, v1378);
        os_log_type_t v383 = sub_16C50();
        if (sub_16C28(v383))
        {
          uint64_t v384 = (_WORD *)sub_16AC4(2LL);
          sub_6709C(v384);
          sub_16B44( &dword_0,  (os_log_s *)v284,  (os_log_type_t)v46,  "Hitting RF path for ChangeAlarmStatus, disable, 1 alarm.",  (uint8_t *)v40);
          sub_16AA8(v40);
        }

        sub_6735C();
        uint64_t v385 = [v42 sleepAlarmAttribute];

        static SiriTimeFeatureFlagsImpl.instance.getter(v386);
        BOOL v387 = SiriTimeFeatureFlagsImpl.isAlarmSmartEnabled()();
        sub_6702C(v39[1]);
        if (v385)
        {
          if (!v387)
          {
            sub_66BD4();
            sub_66FC4(v415);
            sub_66C8C();
            uint64_t v416 = mach_absolute_time();
            sub_66CF0(v416);
            if (qword_D31E8 != -1) {
              swift_once(&qword_D31E8, sub_95DEC);
            }
            sub_66C70((int *)&unk_D73B8);
            v42;
            uint64_t v365 = (void *)sub_67024();
            v11[220] = v365;
            uint64_t v366 = sub_5E97C;
LABEL_110:
            *uint64_t v365 = v11;
            v365[1] = v366;
            goto LABEL_114;
          }

          sub_66E60();
          v11[207] = v395;
          if (v395)
          {
            if (qword_D31E0 != -1) {
              swift_once(&qword_D31E0, sub_95DD0);
            }
            sub_47DE4();
            uint64_t v396 = (void *)sub_67024();
            v11[208] = v396;
            sub_66ECC(v396, (uint64_t)sub_5E0A0);
            sub_66A40();
            sub_75C7C(v397);
            return;
          }

          sub_4AFDC(0LL, v388, v389, v390, v391, v392, v393, v394, v1171, v1230, v1289, v1349, v1407);
          os_log_type_t v421 = sub_17714();
          if (!sub_16C28(v421)) {
            goto LABEL_124;
          }
          uint64_t v422 = (_WORD *)sub_66C68();
          sub_6709C(v422);
          uint64_t v423 = "Can NOT retrieve sleep alarm data.";
        }

        else
        {
          if (!v387)
          {
            sub_66BD4();
            sub_66FC4(v417);
            sub_66C8C();
            uint64_t v418 = mach_absolute_time();
            sub_66CF0(v418);
            if (qword_D31E8 != -1) {
              swift_once(&qword_D31E8, sub_95DEC);
            }
            sub_66C70((int *)&unk_D73C0);
            v42;
            uint64_t v419 = (void *)sub_67024();
            v11[230] = v419;
            *uint64_t v419 = v11;
            v419[1] = sub_5EE94;
LABEL_114:
            sub_66A40();
            __asm { BR              X3 }
          }

          sub_66E60();
          v11[225] = v405;
          if (v405)
          {
            Class v46 = (Class)v11[105];
            uint64_t v385 = (_WORD *)v11[101];
            sub_66FEC();
            if (sub_16880((uint64_t)v385, 1LL, (uint64_t)v46) != 1)
            {
              (*(void (**)(void, void, void))(v11[106] + 32LL))(v11[107], v11[101], v11[105]);
              if (qword_D31E0 != -1) {
                swift_once(&qword_D31E0, sub_95DD0);
              }
              sub_47DE4();
              uint64_t v448 = (void *)sub_67024();
              v11[226] = v448;
              sub_66ECC(v448, (uint64_t)sub_5EBB4);
              sub_66A40();
              sub_756E0(v449);
              return;
            }

            uint64_t v406 = sub_19594(v11[101], &qword_D4178);
            sub_4AFDC(v406, v407, v408, v409, v410, v411, v412, v413, v1171, v1230, v1289, v1349, v1407);
            os_log_type_t v414 = sub_17714();
            if (sub_16C28(v414))
            {
              uint64_t v385 = (_WORD *)sub_66C68();
              sub_66B64(v385);
              sub_67084();
              sub_16FF4();
              sub_16B44( &dword_0,  (os_log_s *)v387,  (os_log_type_t)v46,  "Can NOT retrieve alarm snippet model.",  (uint8_t *)v385);
              sub_16AA8((uint64_t)v385);
            }

            else
            {
              swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
            }

            sub_26B0(&qword_D4190);
            unint64_t v488 = sub_58B68();
            uint64_t v489 = sub_25234(v488);
            sub_66980(v489, v490, v491, v492, v493, v494, v495, v496);
            sub_16FD8();
LABEL_139:
            v2177 = v11 + 74;
            sub_6688C(v11[137]);
            uint64_t v497 = sub_38F80((uint64_t)&unk_CC9A8, 24LL);
            sub_6716C(v497);
            uint64_t v498 = swift_errorRetain(v46);
            char v506 = (os_log_s *)Logger.logObject.getter(v498, v499, v500, v501, v502, v503, v504, v505);
            os_log_type_t v507 = static os_log_type_t.error.getter();
            uint64_t v508 = sub_38F80((uint64_t)&unk_CC9D0, 17LL);
            sub_669C0(v508);
            uint64_t v509 = sub_38F80((uint64_t)&unk_CC9F8, 17LL);
            sub_669B4(v509);
            uint64_t v510 = sub_38F80((uint64_t)&unk_CCA20, 32LL);
            *(void *)(v510 + 16) = sub_65ED4;
            *(void *)(v510 + 24) = v385;
            uint64_t v511 = sub_38F80((uint64_t)&unk_CCA48, 32LL);
            *(void *)(v511 + 16) = sub_65E84;
            *(void *)(v511 + 24) = v510;
            uint64_t v512 = sub_26B0(&qword_D5F70);
            uint64_t v513 = sub_38F80(v512, 80LL);
            *(_OWORD *)(v513 + 16) = xmmword_A5A80;
            *(void *)(v513 + 32) = sub_65E8C;
            *(void *)(v513 + 40) = v508;
            *(void *)(v513 + 48) = sub_65E8C;
            *(void *)(v513 + 56) = v509;
            *(void *)(v513 + 64) = sub_65E88;
            *(void *)(v513 + 72) = v511;
            swift_setDeallocating(v513);
            sub_56290();
            sub_56278();
            sub_66AC0();
            sub_67250();
            sub_670D8();
            sub_65AC8();
            os_log_type_t v514 = v507;
            BOOL v515 = sub_66B18(v506);
            uint64_t v516 = v11[140];
            uint64_t v2167 = v11[137];
            uint64_t v517 = v11[136];
            if (v515)
            {
              sub_6696C();
              uint64_t v2154 = sub_664E4();
              uint64_t v2178 = v2154;
              *(_WORD *)uint64_t v516 = 258;
              *(_BYTE *)(v516 + 2) = 32;
              sub_66884();
              *(_BYTE *)(v516 + sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = 8;
              sub_17B94();
              sub_674C4();
              uint64_t v518 = sub_26B0(&qword_D4890);
              uint64_t v519 = sub_675C4(v518);
              v11[81] = sub_67228(v519, v520);
              sub_67334((uint64_t)(v11 + 81), (uint64_t)v2170, v521, v516 + 12);
              sub_17B9C();
              sub_16FFC();
              sub_1D730();
              sub_45B5C();
              swift_errorRelease(v2174);
              sub_666C8(&dword_0, v506, v514, "Error in RF path: %s");
              sub_16BB4(v2154);
              sub_16AA8(v2154);
              sub_16AA8(v516);
            }

            else
            {
              sub_66884();
              sub_17B94();
              sub_16FFC();
              sub_1D730();
              sub_45B5C();
              swift_errorRelease(v2174);
            }

            (*(void (**)(uint64_t, uint64_t))(v2167 + 8))(v516, v517);
            uint64_t v484 = (void *)v11[181];
            uint64_t v485 = (void *)v11[169];
            uint64_t v486 = (void *)v11[168];
            uint64_t v2164 = v11[165];
            uint64_t v2166 = v11[164];
            uint64_t v2172 = v11[166];
            uint64_t v487 = sub_66938();
            v11[77] = v487;
            v11[78] = &protocol witness table for ABCReport;
            goto LABEL_143;
          }

          sub_4AFDC(0LL, v398, v399, v400, v401, v402, v403, v404, v1171, v1230, v1289, v1349, v1407);
          os_log_type_t v435 = sub_17714();
          if (!sub_16C28(v435))
          {
LABEL_124:

            sub_26B0(&qword_D4190);
            unint64_t v437 = sub_58B68();
            uint64_t v438 = sub_25234(v437);
            sub_66980(v438, v439, v440, v441, v442, v443, v444, v445);
            goto LABEL_139;
          }

          uint64_t v436 = (_WORD *)sub_66C68();
          sub_6709C(v436);
          uint64_t v423 = "Can NOT retrieve alarm data.";
        }

        sub_16B44(&dword_0, (os_log_s *)v387, (os_log_type_t)v46, v423, (uint8_t *)v40);
        sub_66D04();
        goto LABEL_124;
      }

      uint64_t v284 = sub_67434((uint64_t)v39);

      if ((v284 & 1) != 0)
      {
        sub_6751C();
        uint64_t v379 = sub_26B0((uint64_t *)&off_D3A00);
        uint64_t v380 = sub_38F80(v379, 48LL);
        uint64_t v381 = sub_7B97C(v380, 1LL);
        uint64_t v40 = sub_67510(v381, v382);
        sub_9442C();
        sub_16D58();
        sub_67414();
        uint64_t v309 = sub_66D50(v39[1]);
        goto LABEL_94;
      }
    }

    uint64_t v309 = sub_16D58();
    goto LABEL_94;
  }

  if (v45 != (_BYTE *)&dword_0 + 1)
  {
    uint64_t v285 = v11 + 59;
    uint64_t v286 = (os_log_s *)v11[136];
    uint64_t v287 = v11[119];
    v11[62] = sub_66938();
    v11[63] = &protocol witness table for ABCReport;
    sub_19558(v11 + 59);
    unint64_t v288 = enum case for UnhandledAbortSubtype.unknownChangeAlarmOperation(_:);
    uint64_t v289 = sub_67600();
    uint64_t v290 = sub_66FD0(v289);
    sub_66648(v290, enum case for ABCReport.unhandledAbort(_:));
    static BarbaraWalters.stopThePresses(for:)(v285);
    _s20HandleIntentStrategyVwxx_1(v285);
    sub_67258();
    sub_67108();
    if (sub_16880(v287, 1LL, (uint64_t)v286) == 1)
    {
      sub_19594(*(void *)(v288 + 952), &qword_D4170);
    }

    else
    {
      sub_16D50();
      os_log_type_t v293 = sub_17714();
      if (os_log_type_enabled(v286, v293))
      {
        uint64_t v294 = (uint64_t *)(v288 + 632);
        uint64_t v295 = (uint64_t *)(v288 + 664);
        uint64_t v296 = sub_666A8();
        uint64_t v297 = sub_16AC4(64LL);
        uint64_t v2178 = v297;
        *(_DWORD *)uint64_t v296 = 136315650;
        uint64_t v298 = sub_67230((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTime/AlarmFlowPlugin/Flows/ChangeAlarmStatus"
                                  "Flow/ChangeAlarmStatus+HandledIntentStrategy.swift");
        unint64_t v288 = v299;
        *uint64_t v295 = sub_67228(v298, v299);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v295, v2163, v296 + 4, v296 + 12);
        sub_67068();
        *(_WORD *)(v296 + 12) = 2048;
        void *v2170 = 268LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v2170, v295, v296 + 14, v296 + 22);
        *(_WORD *)(v296 + 22) = 2080;
        *uint64_t v294 = sub_67214((uint64_t)"dledIntentStrategy.swift");
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v294, v43, v296 + 24, v296 + 32);
        sub_67578(&dword_0, v286, v293, "FatalError at %s:%lu - %s", (uint8_t *)v296);
        sub_673BC();
        sub_16AA8(v297);
        sub_16AA8(v296);
      }

      sub_19838(*(void *)(v288 + 1096));
    }

    sub_67200((uint64_t)"dledIntentStrategy.swift");
    uint64_t v300 = 268LL;
LABEL_197:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000039LL,  v286,  "/Library/Caches/com.apple.xbs/Sources/SiriTime/AlarmFlowPlugin/Flows/ChangeAlarmStatusFlow/ChangeAlarmStatus+Handl edIntentStrategy.swift",  136LL,  2LL,  v300,  0);
LABEL_274:
    sub_66A40();
    return;
  }

  if (v2165)
  {
    sub_66CDC();
    uint64_t v47 = sub_45644();
  }

  else
  {
    uint64_t v47 = *(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFF8LL));
    sub_16FD0();
  }

  if (v47)
  {
    sub_6723C();
    if (v39) {
      uint64_t v291 = sub_67038();
    }
    else {
      uint64_t v291 = (uint64_t)sub_672FC();
    }
    uint64_t v47 = v291;
    sub_16D58();
    sub_902E4((void *)v47);
    if (v318)
    {
      sub_67550(v317);
      if (v319)
      {
        uint64_t v43 = (void *)v2174;
        sub_66EE0();
        uint64_t v47 = sub_45644();
        sub_17B9C();
      }

      else
      {
        uint64_t v47 = *(void *)((char *)&dword_10 + (v2174 & 0xFFFFFFFFFFFFF8LL));
      }

      if (v47)
      {
        sub_670F0();
        if (v39) {
          id v323 = (id)sub_67608();
        }
        else {
          id v323 = (id)v43[4];
        }
        uint64_t v47 = (uint64_t)v323;
      }

      uint64_t v325 = sub_17B9C();
      uint64_t v39 = (uint64_t (**)(uint64_t, uint64_t))sub_66DE4(v325, "undoable");

      v326.super.super.Class isa = sub_67544().super.super.isa;
      Class v46 = v326.super.super.isa;
      if (v39)
      {
        uint64_t v47 = sub_67434((uint64_t)v39);

        if ((v47 & 1) != 0)
        {
          sub_6751C();
          uint64_t v327 = sub_26B0((uint64_t *)&off_D3A00);
          uint64_t v328 = sub_38F80(v327, 48LL);
          uint64_t v329 = sub_7B97C(v328, 1LL);
          uint64_t v40 = sub_67510(v329, v330);
          sub_94238();
          sub_16D58();
          sub_67414();
          uint64_t v301 = sub_66D50(v39[1]);
          goto LABEL_66;
        }
      }

      else
      {
      }
    }

    uint64_t v301 = sub_16D58();
    goto LABEL_66;
  }

  uint64_t v301 = sub_16C88(v40);
LABEL_66:
  sub_4AFDC(v301, v302, v303, v304, v305, v306, v307, v308, v1141, v1200, v1259, v1319, v1378);
  os_log_type_t v331 = sub_16C50();
  if (sub_16C28(v331))
  {
    uint64_t v332 = (_WORD *)sub_16AC4(2LL);
    sub_6709C(v332);
    sub_16B44( &dword_0,  (os_log_s *)v47,  (os_log_type_t)v46,  "Hitting RF path for ChangeAlarmStatus, 1 alarm.",  (uint8_t *)v40);
    sub_16AA8(v40);
  }

  sub_6735C();
  uint64_t v333 = [v42 sleepAlarmAttribute];

  static SiriTimeFeatureFlagsImpl.instance.getter(v334);
  BOOL v335 = SiriTimeFeatureFlagsImpl.isAlarmSmartEnabled()();
  sub_6702C(v39[1]);
  if (v333)
  {
    if (v335)
    {
      sub_66E60();
      v11[182] = v343;
      if (v343)
      {
        if (qword_D31E0 != -1) {
          swift_once(&qword_D31E0, sub_95DD0);
        }
        sub_47DE4();
        uint64_t v344 = (void *)sub_67024();
        v11[183] = v344;
        sub_66ECC(v344, (uint64_t)sub_5D0E8);
        sub_66A40();
        sub_75D1C(v345);
        return;
      }

      sub_4AFDC(0LL, v336, v337, v338, v339, v340, v341, v342, v1170, v1229, v1288, v1348, v1406);
      os_log_type_t v374 = sub_17714();
      if (!sub_16C28(v374)) {
        goto LABEL_120;
      }
      uint64_t v375 = (_WORD *)sub_66C68();
      sub_6709C(v375);
      uint64_t v376 = "Can NOT retrieve sleep alarm data.";
      goto LABEL_119;
    }

    sub_66BD4();
    sub_66FC4(v363);
    sub_66C8C();
    uint64_t v364 = mach_absolute_time();
    sub_66CF0(v364);
    if (qword_D31E8 != -1) {
      swift_once(&qword_D31E8, sub_95DEC);
    }
    sub_66C70((int *)&unk_D73B0);
    v42;
    uint64_t v365 = (void *)sub_67024();
    v11[191] = v365;
    uint64_t v366 = sub_5D944;
    goto LABEL_110;
  }

  if (v335)
  {
    sub_66E60();
    v11[196] = v353;
    if (!v353)
    {
      sub_4AFDC(0LL, v346, v347, v348, v349, v350, v351, v352, v1170, v1229, v1288, v1348, v1406);
      os_log_type_t v424 = sub_17714();
      if (!sub_16C28(v424))
      {
LABEL_120:
        uint64_t v2144 = v32;

        sub_26B0(&qword_D4190);
        unint64_t v426 = sub_58B68();
        uint64_t v427 = sub_25234(v426);
        sub_66980(v427, v428, v429, v430, v431, v432, v433, v434);
LABEL_133:
        v2177 = v11 + 34;
        sub_6688C(v11[137]);
        uint64_t v459 = sub_38F80((uint64_t)&unk_CCA70, 24LL);
        sub_6716C(v459);
        uint64_t v460 = swift_errorRetain(v46);
        uint64_t v468 = (os_log_s *)Logger.logObject.getter(v460, v461, v462, v463, v464, v465, v466, v467);
        os_log_type_t v469 = static os_log_type_t.error.getter();
        uint64_t v470 = sub_38F80((uint64_t)&unk_CCA98, 17LL);
        sub_669C0(v470);
        uint64_t v471 = sub_38F80((uint64_t)&unk_CCAC0, 17LL);
        sub_669B4(v471);
        uint64_t v472 = sub_38F80((uint64_t)&unk_CCAE8, 32LL);
        *(void *)(v472 + 16) = sub_65E08;
        *(void *)(v472 + 24) = v333;
        uint64_t v473 = sub_38F80((uint64_t)&unk_CCB10, 32LL);
        *(void *)(v473 + 16) = sub_65E84;
        *(void *)(v473 + 24) = v472;
        uint64_t v474 = sub_26B0(&qword_D5F70);
        uint64_t v475 = sub_38F80(v474, 80LL);
        *(_OWORD *)(v475 + 16) = xmmword_A5A80;
        *(void *)(v475 + 32) = sub_65E8C;
        *(void *)(v475 + 40) = v470;
        *(void *)(v475 + 48) = sub_65E8C;
        *(void *)(v475 + 56) = v471;
        *(void *)(v475 + 64) = sub_65E88;
        *(void *)(v475 + 72) = v473;
        swift_setDeallocating(v475);
        sub_56290();
        sub_56278();
        sub_66AC0();
        sub_67250();
        sub_670D8();
        sub_65AC8();
        os_log_type_t v476 = v469;
        BOOL v477 = sub_66B18(v468);
        uint64_t v478 = v11[141];
        uint64_t v2171 = v11[137];
        uint64_t v479 = v11[136];
        if (v477)
        {
          sub_6696C();
          uint64_t v2157 = sub_664E4();
          uint64_t v2178 = v2157;
          *(_WORD *)uint64_t v478 = 258;
          *(_BYTE *)(v478 + 2) = 32;
          sub_66884();
          *(_BYTE *)(v478 + sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = 8;
          sub_17B94();
          sub_674C4();
          uint64_t v480 = sub_26B0(&qword_D4890);
          uint64_t v481 = sub_675C4(v480);
          v11[86] = sub_67228(v481, v482);
          sub_67334((uint64_t)(v11 + 86), v2144, v483, v478 + 12);
          sub_17B9C();
          sub_16FFC();
          sub_1D730();
          sub_45B5C();
          swift_errorRelease(v2174);
          sub_666C8(&dword_0, v468, v476, "Error in RF path: %s");
          sub_16BB4(v2157);
          sub_16AA8(v2157);
          sub_16AA8(v478);
        }

        else
        {
          sub_66884();
          sub_17B94();
          sub_16FFC();
          sub_1D730();
          sub_45B5C();
          swift_errorRelease(v2174);
        }

        (*(void (**)(uint64_t, uint64_t))(v2171 + 8))(v478, v479);
        uint64_t v484 = (void *)v11[181];
        uint64_t v485 = (void *)v11[169];
        uint64_t v486 = (void *)v11[168];
        uint64_t v2164 = v11[165];
        uint64_t v2166 = v11[164];
        uint64_t v2172 = v11[166];
        uint64_t v487 = sub_66938();
        v11[37] = v487;
        v11[38] = &protocol witness table for ABCReport;
LABEL_143:
        uint64_t v522 = sub_671F8();
        *uint64_t v522 = _convertErrorToNSError(_:)(v2174);
        uint64_t v523 = enum case for DialogLayerErrorSubType.dialogError(_:);
        uint64_t v524 = sub_66A0C();
        (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v524 - 8) + 104LL))(v522, v523, v524);
        (*(void (**)(void *, void, uint64_t))(*(void *)(v487 - 8) + 104LL))( v522,  enum case for ABCReport.dialog(_:),  v487);
        static BarbaraWalters.stopThePresses(for:)(v2177);
        uint64_t v525 = _s20HandleIntentStrategyVwxx_1(v2177);
        swift_willThrow(v525, v526, v527, v528, v529, v530, v531, v532);

        sub_16FD8();
        (*(void (**)(uint64_t, uint64_t))(v2164 + 8))(v2172, v2166);
        goto LABEL_166;
      }

      uint64_t v425 = (_WORD *)sub_66C68();
      sub_6709C(v425);
      uint64_t v376 = "Can NOT retrieve alarm data.";
LABEL_119:
      sub_16B44(&dword_0, (os_log_s *)v335, (os_log_type_t)v46, v376, (uint8_t *)v40);
      sub_66D04();
      goto LABEL_120;
    }

    Class v46 = (Class)v11[105];
    uint64_t v333 = (_WORD *)v11[103];
    sub_66FEC();
    if (sub_16880((uint64_t)v333, 1LL, (uint64_t)v46) == 1)
    {
      uint64_t v354 = sub_19594(v11[103], &qword_D4178);
      sub_4AFDC(v354, v355, v356, v357, v358, v359, v360, v361, v1170, v1229, v1288, v1348, v1406);
      os_log_type_t v362 = sub_17714();
      if (sub_16C28(v362))
      {
        uint64_t v333 = (_WORD *)sub_66C68();
        sub_66B64(v333);
        sub_67084();
        sub_16FF4();
        sub_16B44( &dword_0,  (os_log_s *)v335,  (os_log_type_t)v46,  "Can NOT retrieve alarm snippet model.",  (uint8_t *)v333);
        sub_16AA8((uint64_t)v333);
      }

      else
      {
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      }

      uint64_t v2144 = v32;
      sub_26B0(&qword_D4190);
      unint64_t v450 = sub_58B68();
      uint64_t v451 = sub_25234(v450);
      sub_66980(v451, v452, v453, v454, v455, v456, v457, v458);
      sub_16FD8();
      goto LABEL_133;
    }

    (*(void (**)(void, void, void))(v11[106] + 32LL))(v11[109], v11[103], v11[105]);
    if (qword_D31E0 != -1) {
      swift_once(&qword_D31E0, sub_95DD0);
    }
    sub_47DE4();
    uint64_t v446 = (void *)sub_67024();
    v11[197] = v446;
    sub_66ECC(v446, (uint64_t)sub_5DB7C);
    sub_66A40();
    sub_757C4(v447);
  }

  else
  {
    sub_66BD4();
    sub_66FC4(v367);
    sub_66C8C();
    uint64_t v368 = mach_absolute_time();
    sub_66CF0(v368);
    if (qword_D31E8 != -1) {
      swift_once(&qword_D31E8, sub_95DEC);
    }
    uint64_t v369 = v11[94];
    uint64_t v370 = swift_task_alloc(32LL);
    v11[201] = v370;
    *(void *)(v370 + 16) = v42;
    *(void *)(v370 + 24) = v369;
    uint64_t v371 = (void *)swift_task_alloc(dword_D733C);
    v11[202] = v371;
    *uint64_t v371 = v11;
    v371[1] = sub_5DE5C;
    sub_66A40();
    sub_88480(v372, v373);
  }

uint64_t sub_5CC98()
{
  *(void *)(v2 + 1376) = v1;
  *(void *)(v2 + 1384) = v0;
  sub_199C0(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_5CCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1392) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_5CD44;
  sub_66D64();
  return sub_197F4();
}

uint64_t sub_5CD44()
{
  v0[175] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[172];
  sub_19838(v0[124]);

  sub_19840();
  return sub_19744();
}

#error "5CE08: call analysis failed (funcsize=69)"
uint64_t sub_5CEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_455DC();
  sub_455CC();
  *(void *)(v2 + 1416) = v1;
  *(void *)(v2 + 1424) = v0;
  sub_199C0(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_5CF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1432) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_5CF6C;
  sub_66D64();
  return sub_197F4();
}

uint64_t sub_5CF6C()
{
  v0[180] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[177];
  sub_19838(v0[124]);

  sub_19840();
  return sub_19744();
}

#error "5D030: call analysis failed (funcsize=69)"
uint64_t sub_5D0E8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  sub_19810();
  sub_1992C();
  v0[184] = v3;
  v0[185] = v1;
  sub_199C0(v4);
  if (v1)
  {
    sub_19840();
    return sub_197B8();
  }

  else
  {
    swift_release(v0[182]);
    uint64_t v6 = (void *)swift_task_alloc(dword_D7A0C);
    v0[186] = v6;
    *uint64_t v6 = v2;
    v6[1] = sub_5D160;
    return sub_67138();
  }

uint64_t sub_5D160()
{
  v3[187] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v3[188] = v0;
    v3[189] = v2;
  }

  sub_19840();
  return sub_197B8();
}

uint64_t sub_5D1C0()
{
  uint64_t v2 = v0[105];
  uint64_t v3 = v0[104];
  sub_489F8();
  sub_16D58();
  if (sub_16880(v3, 1LL, v2) == 1)
  {
    uint64_t v4 = (os_log_s *)v0[148];
    uint64_t v5 = v0[136];
    sub_19594(v0[104], &qword_D4178);
    uint64_t v6 = sub_59654();
    uint64_t v7 = sub_66820(v6);
    Logger.logObject.getter(v7, v8, v9, v10, v11, v12, v13, v14);
    os_log_type_t v15 = sub_17714();
    if (sub_1990C(v15))
    {
      uint64_t v16 = v0[148];
      uint64_t v17 = v0[137];
      uint64_t v18 = v0[136];
      id v19 = (_WORD *)sub_66C68();
      sub_673CC(v19);
      sub_672BC();
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      sub_16B44(&dword_0, v4, (os_log_type_t)v5, "Can NOT retrieve sleep alarm snippet model.", v1);
      sub_671F0();

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    }

    else
    {
      uint64_t v39 = v0[148];
      uint64_t v40 = v0[137];
      uint64_t v41 = v0[136];
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    }

    uint64_t v42 = (void *)v0[184];
    uint64_t v43 = sub_26B0(&qword_D4190);
    unint64_t v44 = sub_24EA4();
    uint64_t v45 = sub_286F0(v43, v44);
    sub_671D0(v45, v46, v47, v48, v49, v50, v51, v52);

    uint64_t v53 = sub_17324();
    sub_6668C(v53, v0[167]);
    uint64_t v54 = sub_38F80((uint64_t)&unk_CCA70, 24LL);
    sub_666F0(v54);
    uint64_t v787 = v43;
    uint64_t v55 = sub_2D010();
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v55, v56, v57, v58, v59, v60, v61, v62);
    static os_log_type_t.error.getter();
    uint64_t v64 = sub_38F80((uint64_t)&unk_CCA98, 17LL);
    sub_669C0(v64);
    uint64_t v65 = sub_38F80((uint64_t)&unk_CCAC0, 17LL);
    sub_669B4(v65);
    uint64_t v66 = sub_38F80((uint64_t)&unk_CCAE8, 32LL);
    *(void *)(v66 + 16) = sub_65E08;
    *(void *)(v66 + 24) = v42;
    uint64_t v67 = sub_38F80((uint64_t)&unk_CCB10, 32LL);
    *(void *)(v67 + 16) = sub_65E84;
    *(void *)(v67 + 24) = v66;
    uint64_t v68 = sub_26B0(&qword_D5F70);
    uint64_t v69 = sub_38F80(v68, 80LL);
    *(_OWORD *)(v69 + 16) = xmmword_A5A80;
    *(void *)(v69 + 32) = sub_65E8C;
    *(void *)(v69 + 40) = v64;
    *(void *)(v69 + 48) = sub_65E8C;
    *(void *)(v69 + 56) = v65;
    *(void *)(v69 + 64) = sub_65E88;
    *(void *)(v69 + 72) = v67;
    swift_setDeallocating(v69);
    sub_56290();
    sub_56278();
    sub_66AC0();
    sub_67250();
    sub_21610();
    sub_65AC8();
    BOOL v70 = sub_66B18(v63);
    uint64_t v71 = v0[141];
    uint64_t v786 = v0[137];
    uint64_t v72 = v0[136];
    if (v70)
    {
      uint64_t v785 = v0[136];
      uint64_t v72 = sub_6696C();
      uint64_t v788 = sub_666A8();
      *(_WORD *)uint64_t v72 = 258;
      *(_BYTE *)(v72 + 2) = 32;
      sub_66884();
      *(_BYTE *)(v72 + sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = 8;
      sub_17B94();
      v0[85] = v787;
      swift_errorRetain(v787);
      uint64_t v73 = sub_26B0(&qword_D4890);
      uint64_t v74 = sub_675D0(v73);
      v0[86] = sub_674F0(v74, v75);
      sub_67334((uint64_t)(v0 + 86), (uint64_t)(v0 + 87), v76, v72 + 12);
      sub_16D58();
      sub_666C0();
      sub_1D730();
      sub_45B5C();
      swift_errorRelease(v787);
      sub_670A8(&dword_0, v77, v78, "Error in RF path: %s");
      sub_16BB4(v788);
      sub_16AA8(v788);
      sub_16AA8(v72);

      (*(void (**)(uint64_t, uint64_t))(v786 + 8))(v71, v785);
    }

    else
    {
      sub_66884();
      sub_17B94();
      sub_666C0();
      sub_1D730();
      sub_45B5C();
      swift_errorRelease(v787);

      uint64_t v79 = sub_674FC();
      v81(v79, v80);
    }

    uint64_t v82 = (void *)v0[181];
    uint64_t v83 = (void *)v0[169];
    uint64_t v84 = (void *)v0[168];
    v0[37] = sub_66938();
    v0[38] = &protocol witness table for ABCReport;
    sub_66BAC();
    *(void *)uint64_t v72 = sub_673E4();
    uint64_t v85 = sub_66A0C();
    uint64_t v86 = sub_664CC(v85);
    sub_66648(v86, enum case for ABCReport.dialog(_:));
    sub_66BA4();
    sub_66940();

    sub_45B5C();
    sub_673AC();
    sub_66518();
    sub_1978C();
    sub_19808();
    sub_1987C();
    sub_19800();
    sub_19820();
    sub_19828();
    sub_19830();
    sub_197C0();
    uint64_t v87 = sub_19794();
    uint64_t v95 = sub_19978(v87, v88, v89, v90, v91, v92, v93, v94, v319, v348);
    uint64_t v103 = sub_19964(v95, v96, v97, v98, v99, v100, v101, v102, v320, v349, v377);
    uint64_t v111 = sub_1B64C(v103, v104, v105, v106, v107, v108, v109, v110, v321, v350, v378, v405);
    uint64_t v119 = sub_25044(v111, v112, v113, v114, v115, v116, v117, v118, v322, v351, v379, v406, v432);
    uint64_t v127 = sub_2503C(v119, v120, v121, v122, v123, v124, v125, v126, v323, v352, v380, v407, v433, v458);
    uint64_t v135 = sub_25218(v127, v128, v129, v130, v131, v132, v133, v134, v324, v353, v381, v408, v434, v459, v483);
    uint64_t v143 = sub_45358(v135, v136, v137, v138, v139, v140, v141, v142, v325, v354, v382, v409, v435, v460, v484, v507);
    uint64_t v151 = sub_45350( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v326,  v355,  v383,  v410,  v436,  v461,  v485,  v508,  v530);
    uint64_t v159 = sub_45348( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v327,  v356,  v384,  v411,  v437,  v462,  v486,  v509,  v531,  v552);
    uint64_t v167 = sub_45340( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v328,  v357,  v385,  v412,  v438,  v463,  v487,  v510,  v532,  v553,  v573);
    uint64_t v175 = sub_45338( v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v329,  v358,  v386,  v413,  v439,  v464,  v488,  v511,  v533,  v554,  v574,  v593);
    uint64_t v183 = sub_45330( v175,  v176,  v177,  v178,  v179,  v180,  v181,  v182,  v330,  v359,  v387,  v414,  v440,  v465,  v489,  v512,  v534,  v555,  v575,  v594,  v612);
    uint64_t v191 = sub_667C8( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v331,  v360,  v388,  v415,  v441,  v466,  v490,  v513,  v535,  v556,  v576,  v595,  v613,  v630);
    uint64_t v199 = sub_667C0( v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v332,  v361,  v389,  v416,  v442,  v467,  v491,  v514,  v536,  v557,  v577,  v596,  v614,  v631,  v647);
    uint64_t v207 = sub_667B8( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v333,  v362,  v390,  v417,  v443,  v468,  v492,  v515,  v537,  v558,  v578,  v597,  v615,  v632,  v648,  v663);
    uint64_t v215 = sub_667B0( v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v334,  v363,  v391,  v418,  v444,  v469,  v493,  v516,  v538,  v559,  v579,  v598,  v616,  v633,  v649,  v664,  v678);
    uint64_t v223 = sub_667A8( v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v335,  v364,  v392,  v419,  v445,  v470,  v494,  v517,  v539,  v560,  v580,  v599,  v617,  v634,  v650,  v665,  v679,  v692);
    uint64_t v231 = sub_667A0( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v336,  v365,  v393,  v420,  v446,  v471,  v495,  v518,  v540,  v561,  v581,  v600,  v618,  v635,  v651,  v666,  v680,  v693,  v705);
    uint64_t v239 = sub_66798( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v337,  v366,  v394,  v421,  v447,  v472,  v496,  v519,  v541,  v562,  v582,  v601,  v619,  v636,  v652,  v667,  v681,  v694,  v706,  v717);
    uint64_t v247 = sub_66790( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v338,  v367,  v395,  v422,  v448,  v473,  v497,  v520,  v542,  v563,  v583,  v602,  v620,  v637,  v653,  v668,  v682,  v695,  v707,  v718,  v728);
    uint64_t v255 = sub_66788( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v339,  v368,  v396,  v423,  v449,  v474,  v498,  v521,  v543,  v564,  v584,  v603,  v621,  v638,  v654,  v669,  v683,  v696,  v708,  v719,  v729,  v738);
    uint64_t v263 = sub_66780( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v340,  v369,  v397,  v424,  v450,  v475,  v499,  v522,  v544,  v565,  v585,  v604,  v622,  v639,  v655,  v670,  v684,  v697,  v709,  v720,  v730,  v739,  v747);
    uint64_t v271 = sub_66778( v263,  v264,  v265,  v266,  v267,  v268,  v269,  v270,  v341,  v370,  v398,  v425,  v451,  v476,  v500,  v523,  v545,  v566,  v586,  v605,  v623,  v640,  v656,  v671,  v685,  v698,  v710,  v721,  v731,  v740,  v748,  v755);
    uint64_t v279 = sub_66770( v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v342,  v371,  v399,  v426,  v452,  v477,  v501,  v524,  v546,  v567,  v587,  v606,  v624,  v641,  v657,  v672,  v686,  v699,  v711,  v722,  v732,  v741,  v749,  v756,  v762);
    uint64_t v287 = sub_66768( v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v343,  v372,  v400,  v427,  v453,  v478,  v502,  v525,  v547,  v568,  v588,  v607,  v625,  v642,  v658,  v673,  v687,  v700,  v712,  v723,  v733,  v742,  v750,  v757,  v763,  v768);
    uint64_t v295 = sub_66760( v287,  v288,  v289,  v290,  v291,  v292,  v293,  v294,  v344,  v373,  v401,  v428,  v454,  v479,  v503,  v526,  v548,  v569,  v589,  v608,  v626,  v643,  v659,  v674,  v688,  v701,  v713,  v724,  v734,  v743,  v751,  v758,  v764,  v769,  v773);
    uint64_t v303 = sub_66758( v295,  v296,  v297,  v298,  v299,  v300,  v301,  v302,  v345,  v374,  v402,  v429,  v455,  v480,  v504,  v527,  v549,  v570,  v590,  v609,  v627,  v644,  v660,  v675,  v689,  v702,  v714,  v725,  v735,  v744,  v752,  v759,  v765,  v770,  v774,  v777);
    uint64_t v311 = sub_66930( v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v346,  v375,  v403,  v430,  v456,  v481,  v505,  v528,  v550,  v571,  v591,  v610,  v628,  v645,  v661,  v676,  v690,  v703,  v715,  v726,  v736,  v745,  v753,  v760,  v766,  v771,  v775,  v778,  v780);
    sub_66C24( v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v347,  v376,  v404,  v431,  v457,  v482,  v506,  v529,  v551,  v572,  v592,  v611,  v629,  v646,  v662,  v677,  v691,  v704,  v716,  v727,  v737,  v746,  v754,  v761,  v767,  v772,  v776,  v779,  v781,  v782);
    sub_66C1C();
    sub_66928();
    sub_66750();
    sub_66748();
    sub_66740();
    sub_66738();
    sub_66730();
    sub_66728();
    sub_66720();
    sub_66718();
    sub_66710();
    sub_668F8();
    sub_66918();
    sub_668F0();
    return sub_666B4((uint64_t (*)(void))v0[1]);
  }

  else
  {
    sub_66E28();
    uint64_t v21 = sub_67404(v20, v0[104]);
    static DialogPhase.completion.getter(v21, v22, v23, v24, v25, v26, v27);
    uint64_t v28 = sub_58C00();
    v0[27] = v28;
    v0[28] = sub_24EE8();
    uint64_t v29 = sub_671F8();
    uint64_t v30 = sub_26B0(&qword_D41A8);
    uint64_t v31 = sub_66B2C(v30);
    uint64_t v32 = sub_67384(v31);
    sub_66BB4(v32, v33);
    uint64_t v34 = sub_6732C();
    sub_672E4(v34);
    sub_16ED4( (uint64_t)v29,  enum case for SiriAlarmSnippetModels.alarmMulti(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104LL));
    sub_58AA8(v783);
    sub_59654();
    sub_66F84(v784);
    uint64_t v35 = j__mach_absolute_time();
    sub_58A9C(v35, v36, v35);
    uint64_t v37 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    v0[190] = v37;
    *uint64_t v37 = v0;
    v37[1] = sub_5D7C0;
    sub_66A14();
    return sub_66DF4();
  }

uint64_t sub_5D7C0()
{
  uint64_t v3 = sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_25254(v3, &qword_D41B0);
  sub_19840();
  return sub_250B8();
}

#error "5D88C: call analysis failed (funcsize=75)"
uint64_t sub_5D944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_455DC();
  sub_455CC();
  *(void *)(v2 + 1536) = v1;
  *(void *)(v2 + 1544) = v0;
  sub_199C0(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_5D994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1552) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_5D9F0;
  sub_66D64();
  return sub_197F4();
}

uint64_t sub_5D9F0()
{
  v0[195] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[192];
  sub_19838(v0[124]);

  sub_19840();
  return sub_19744();
}

#error "5DAC4: call analysis failed (funcsize=73)"
uint64_t sub_5DB7C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v4;
  sub_66DB8();
  sub_1996C(v4);
  v2[198] = v1;
  swift_task_dealloc();
  swift_release(v2[196]);
  if (!v1) {
    v2[199] = a1;
  }
  sub_19840();
  return sub_19744();
}

uint64_t sub_5DBDC()
{
  uint64_t v8 = sub_58C00();
  v0[32] = v8;
  v0[33] = sub_24EE8();
  uint64_t v9 = sub_671F8();
  uint64_t v10 = sub_26B0(&qword_D41A8);
  uint64_t v11 = sub_66B2C(v10);
  uint64_t v12 = sub_67384(v11);
  sub_66BB4(v12, v13);
  uint64_t v14 = sub_6732C();
  sub_672E4(v14);
  sub_16ED4( (uint64_t)v9,  enum case for SiriAlarmSnippetModels.alarmMulti(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104LL));
  sub_58AA8(v19);
  sub_59654();
  sub_66F84(v20);
  uint64_t v15 = j__mach_absolute_time();
  sub_58A9C(v15, v16, v15);
  uint64_t v17 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  v0[200] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_5DCD8;
  sub_66A14();
  return sub_66D9C();
}

uint64_t sub_5DCD8()
{
  uint64_t v3 = sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_25254(v3, &qword_D41B0);
  sub_19840();
  return sub_250B8();
}

#error "5DDA4: call analysis failed (funcsize=75)"
uint64_t sub_5DE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_19810();
  sub_1992C();
  *(void *)(v0 + 1624) = v2;
  *(void *)(v0 + 1632) = v1;
  sub_199C0(v3);
  swift_task_dealloc();
  sub_19840();
  return sub_197B8();
}

uint64_t sub_5DEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1640) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_5DF14;
  sub_66D64();
  return sub_197F4();
}

uint64_t sub_5DF14()
{
  v0[206] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[203];
  sub_19838(v0[124]);

  sub_19840();
  return sub_19744();
}

#error "5DFE8: call analysis failed (funcsize=73)"
uint64_t sub_5E0A0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  sub_19810();
  sub_1992C();
  v0[209] = v3;
  v0[210] = v1;
  sub_199C0(v4);
  if (v1)
  {
    sub_19840();
    return sub_197B8();
  }

  else
  {
    swift_release(v0[207]);
    uint64_t v6 = (void *)swift_task_alloc(dword_D7A0C);
    v0[211] = v6;
    *uint64_t v6 = v2;
    v6[1] = sub_5E118;
    return sub_67138();
  }

uint64_t sub_5E118()
{
  v0[212] = v3;
  v0[213] = v4;
  v0[214] = v1;
  sub_199C0(v5);
  if (v1)
  {
    sub_19840();
    return sub_197B8();
  }

  else
  {
    uint64_t v7 = (void *)swift_task_alloc(dword_D7A04);
    v0[215] = v7;
    *uint64_t v7 = v2;
    v7[1] = sub_5E194;
    return sub_97864();
  }

uint64_t sub_5E194()
{
  v3[216] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v3[217] = v0;
    v3[218] = v2;
  }

  sub_19840();
  return sub_197B8();
}

uint64_t sub_5E1F4()
{
  uint64_t v2 = v0[105];
  uint64_t v3 = v0[102];
  sub_489F8();
  sub_16F40();
  sub_16D58();
  if (sub_16880(v3, 1LL, v2) == 1)
  {
    uint64_t v4 = (os_log_s *)v0[147];
    uint64_t v5 = v0[136];
    sub_19594(v0[102], &qword_D4178);
    uint64_t v6 = sub_59654();
    uint64_t v7 = sub_66820(v6);
    Logger.logObject.getter(v7, v8, v9, v10, v11, v12, v13, v14);
    os_log_type_t v15 = sub_17714();
    if (sub_1990C(v15))
    {
      uint64_t v16 = v0[147];
      uint64_t v17 = v0[137];
      uint64_t v18 = v0[136];
      uint64_t v19 = (_WORD *)sub_66C68();
      sub_673CC(v19);
      sub_672BC();
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      sub_16B44(&dword_0, v4, (os_log_type_t)v5, "Can NOT retrieve sleep alarm snippet model.", v1);
      sub_671F0();

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    }

    else
    {
      uint64_t v39 = v0[147];
      uint64_t v40 = v0[137];
      uint64_t v41 = v0[136];
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    }

    uint64_t v42 = (void *)v0[209];
    uint64_t v43 = sub_26B0(&qword_D4190);
    unint64_t v44 = sub_24EA4();
    uint64_t v45 = sub_286F0(v43, v44);
    sub_671D0(v45, v46, v47, v48, v49, v50, v51, v52);

    uint64_t v53 = sub_17324();
    sub_6668C(v53, v0[167]);
    uint64_t v54 = sub_38F80((uint64_t)&unk_CC9A8, 24LL);
    sub_666F0(v54);
    uint64_t v788 = v43;
    uint64_t v55 = sub_2D010();
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v55, v56, v57, v58, v59, v60, v61, v62);
    static os_log_type_t.error.getter();
    uint64_t v64 = sub_38F80((uint64_t)&unk_CC9D0, 17LL);
    sub_669C0(v64);
    uint64_t v65 = sub_38F80((uint64_t)&unk_CC9F8, 17LL);
    sub_669B4(v65);
    uint64_t v66 = sub_38F80((uint64_t)&unk_CCA20, 32LL);
    *(void *)(v66 + 16) = sub_65ED4;
    *(void *)(v66 + 24) = v42;
    uint64_t v67 = sub_38F80((uint64_t)&unk_CCA48, 32LL);
    *(void *)(v67 + 16) = sub_65E84;
    *(void *)(v67 + 24) = v66;
    uint64_t v68 = sub_26B0(&qword_D5F70);
    uint64_t v69 = sub_38F80(v68, 80LL);
    *(_OWORD *)(v69 + 16) = xmmword_A5A80;
    *(void *)(v69 + 32) = sub_65E8C;
    *(void *)(v69 + 40) = v64;
    *(void *)(v69 + 48) = sub_65E8C;
    *(void *)(v69 + 56) = v65;
    *(void *)(v69 + 64) = sub_65E88;
    *(void *)(v69 + 72) = v67;
    swift_setDeallocating(v69);
    sub_56290();
    sub_56278();
    sub_66AC0();
    sub_67250();
    sub_21610();
    sub_65AC8();
    BOOL v70 = sub_66B18(v63);
    uint64_t v71 = v0[140];
    uint64_t v787 = v0[137];
    uint64_t v72 = v0[136];
    if (v70)
    {
      uint64_t v786 = v0[136];
      uint64_t v72 = sub_6696C();
      uint64_t v789 = sub_666A8();
      *(_WORD *)uint64_t v72 = 258;
      *(_BYTE *)(v72 + 2) = 32;
      sub_66884();
      *(_BYTE *)(v72 + sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = 8;
      sub_17B94();
      v0[80] = v788;
      swift_errorRetain(v788);
      uint64_t v73 = sub_26B0(&qword_D4890);
      uint64_t v74 = sub_675D0(v73);
      v0[81] = sub_674F0(v74, v75);
      sub_67334((uint64_t)(v0 + 81), (uint64_t)(v0 + 82), v76, v72 + 12);
      sub_16D58();
      sub_666C0();
      sub_1D730();
      sub_45B5C();
      swift_errorRelease(v788);
      sub_670A8(&dword_0, v77, v78, "Error in RF path: %s");
      sub_16BB4(v789);
      sub_16AA8(v789);
      sub_16AA8(v72);

      (*(void (**)(uint64_t, uint64_t))(v787 + 8))(v71, v786);
    }

    else
    {
      sub_66884();
      sub_17B94();
      sub_666C0();
      sub_1D730();
      sub_45B5C();
      swift_errorRelease(v788);

      uint64_t v79 = sub_674FC();
      v81(v79, v80);
    }

    uint64_t v82 = (void *)v0[181];
    uint64_t v83 = (void *)v0[169];
    uint64_t v84 = (void *)v0[168];
    uint64_t v85 = sub_66938();
    sub_66F54(v85);
    sub_66B98((uint64_t)&protocol witness table for ABCReport);
    *(void *)uint64_t v72 = sub_673E4();
    uint64_t v86 = sub_66A0C();
    uint64_t v87 = sub_664CC(v86);
    sub_66648(v87, enum case for ABCReport.dialog(_:));
    sub_66BA4();
    sub_66940();

    sub_45B5C();
    sub_673AC();
    sub_66518();
    sub_1978C();
    sub_19808();
    sub_1987C();
    sub_19800();
    sub_19820();
    sub_19828();
    sub_19830();
    sub_197C0();
    uint64_t v88 = sub_19794();
    uint64_t v96 = sub_19978(v88, v89, v90, v91, v92, v93, v94, v95, v320, v349);
    uint64_t v104 = sub_19964(v96, v97, v98, v99, v100, v101, v102, v103, v321, v350, v378);
    uint64_t v112 = sub_1B64C(v104, v105, v106, v107, v108, v109, v110, v111, v322, v351, v379, v406);
    uint64_t v120 = sub_25044(v112, v113, v114, v115, v116, v117, v118, v119, v323, v352, v380, v407, v433);
    uint64_t v128 = sub_2503C(v120, v121, v122, v123, v124, v125, v126, v127, v324, v353, v381, v408, v434, v459);
    uint64_t v136 = sub_25218(v128, v129, v130, v131, v132, v133, v134, v135, v325, v354, v382, v409, v435, v460, v484);
    uint64_t v144 = sub_45358(v136, v137, v138, v139, v140, v141, v142, v143, v326, v355, v383, v410, v436, v461, v485, v508);
    uint64_t v152 = sub_45350( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v327,  v356,  v384,  v411,  v437,  v462,  v486,  v509,  v531);
    uint64_t v160 = sub_45348( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v328,  v357,  v385,  v412,  v438,  v463,  v487,  v510,  v532,  v553);
    uint64_t v168 = sub_45340( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v329,  v358,  v386,  v413,  v439,  v464,  v488,  v511,  v533,  v554,  v574);
    uint64_t v176 = sub_45338( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v330,  v359,  v387,  v414,  v440,  v465,  v489,  v512,  v534,  v555,  v575,  v594);
    uint64_t v184 = sub_45330( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v331,  v360,  v388,  v415,  v441,  v466,  v490,  v513,  v535,  v556,  v576,  v595,  v613);
    uint64_t v192 = sub_667C8( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v332,  v361,  v389,  v416,  v442,  v467,  v491,  v514,  v536,  v557,  v577,  v596,  v614,  v631);
    uint64_t v200 = sub_667C0( v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v333,  v362,  v390,  v417,  v443,  v468,  v492,  v515,  v537,  v558,  v578,  v597,  v615,  v632,  v648);
    uint64_t v208 = sub_667B8( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v334,  v363,  v391,  v418,  v444,  v469,  v493,  v516,  v538,  v559,  v579,  v598,  v616,  v633,  v649,  v664);
    uint64_t v216 = sub_667B0( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v335,  v364,  v392,  v419,  v445,  v470,  v494,  v517,  v539,  v560,  v580,  v599,  v617,  v634,  v650,  v665,  v679);
    uint64_t v224 = sub_667A8( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v336,  v365,  v393,  v420,  v446,  v471,  v495,  v518,  v540,  v561,  v581,  v600,  v618,  v635,  v651,  v666,  v680,  v693);
    uint64_t v232 = sub_667A0( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v337,  v366,  v394,  v421,  v447,  v472,  v496,  v519,  v541,  v562,  v582,  v601,  v619,  v636,  v652,  v667,  v681,  v694,  v706);
    uint64_t v240 = sub_66798( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v338,  v367,  v395,  v422,  v448,  v473,  v497,  v520,  v542,  v563,  v583,  v602,  v620,  v637,  v653,  v668,  v682,  v695,  v707,  v718);
    uint64_t v248 = sub_66790( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v339,  v368,  v396,  v423,  v449,  v474,  v498,  v521,  v543,  v564,  v584,  v603,  v621,  v638,  v654,  v669,  v683,  v696,  v708,  v719,  v729);
    uint64_t v256 = sub_66788( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v340,  v369,  v397,  v424,  v450,  v475,  v499,  v522,  v544,  v565,  v585,  v604,  v622,  v639,  v655,  v670,  v684,  v697,  v709,  v720,  v730,  v739);
    uint64_t v264 = sub_66780( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v341,  v370,  v398,  v425,  v451,  v476,  v500,  v523,  v545,  v566,  v586,  v605,  v623,  v640,  v656,  v671,  v685,  v698,  v710,  v721,  v731,  v740,  v748);
    uint64_t v272 = sub_66778( v264,  v265,  v266,  v267,  v268,  v269,  v270,  v271,  v342,  v371,  v399,  v426,  v452,  v477,  v501,  v524,  v546,  v567,  v587,  v606,  v624,  v641,  v657,  v672,  v686,  v699,  v711,  v722,  v732,  v741,  v749,  v756);
    uint64_t v280 = sub_66770( v272,  v273,  v274,  v275,  v276,  v277,  v278,  v279,  v343,  v372,  v400,  v427,  v453,  v478,  v502,  v525,  v547,  v568,  v588,  v607,  v625,  v642,  v658,  v673,  v687,  v700,  v712,  v723,  v733,  v742,  v750,  v757,  v763);
    uint64_t v288 = sub_66768( v280,  v281,  v282,  v283,  v284,  v285,  v286,  v287,  v344,  v373,  v401,  v428,  v454,  v479,  v503,  v526,  v548,  v569,  v589,  v608,  v626,  v643,  v659,  v674,  v688,  v701,  v713,  v724,  v734,  v743,  v751,  v758,  v764,  v769);
    uint64_t v296 = sub_66760( v288,  v289,  v290,  v291,  v292,  v293,  v294,  v295,  v345,  v374,  v402,  v429,  v455,  v480,  v504,  v527,  v549,  v570,  v590,  v609,  v627,  v644,  v660,  v675,  v689,  v702,  v714,  v725,  v735,  v744,  v752,  v759,  v765,  v770,  v774);
    uint64_t v304 = sub_66758( v296,  v297,  v298,  v299,  v300,  v301,  v302,  v303,  v346,  v375,  v403,  v430,  v456,  v481,  v505,  v528,  v550,  v571,  v591,  v610,  v628,  v645,  v661,  v676,  v690,  v703,  v715,  v726,  v736,  v745,  v753,  v760,  v766,  v771,  v775,  v778);
    uint64_t v312 = sub_66930( v304,  v305,  v306,  v307,  v308,  v309,  v310,  v311,  v347,  v376,  v404,  v431,  v457,  v482,  v506,  v529,  v551,  v572,  v592,  v611,  v629,  v646,  v662,  v677,  v691,  v704,  v716,  v727,  v737,  v746,  v754,  v761,  v767,  v772,  v776,  v779,  v781);
    sub_66C24( v312,  v313,  v314,  v315,  v316,  v317,  v318,  v319,  v348,  v377,  v405,  v432,  v458,  v483,  v507,  v530,  v552,  v573,  v593,  v612,  v630,  v647,  v663,  v678,  v692,  v705,  v717,  v728,  v738,  v747,  v755,  v762,  v768,  v773,  v777,  v780,  v782,  v783);
    sub_66C1C();
    sub_66928();
    sub_66750();
    sub_66748();
    sub_66740();
    sub_66738();
    sub_66730();
    sub_66728();
    sub_66720();
    sub_66718();
    sub_66710();
    sub_668F8();
    sub_66918();
    sub_668F0();
    return sub_666B4((uint64_t (*)(void))v0[1]);
  }

  else
  {
    sub_66E28();
    uint64_t v21 = sub_67404(v20, v0[102]);
    static DialogPhase.completion.getter(v21, v22, v23, v24, v25, v26, v27);
    uint64_t v28 = sub_58C00();
    v0[67] = v28;
    v0[68] = sub_24EE8();
    uint64_t v29 = sub_671F8();
    uint64_t v30 = sub_26B0(&qword_D41A8);
    uint64_t v31 = sub_66B2C(v30);
    uint64_t v32 = sub_67384(v31);
    sub_66BB4(v32, v33);
    uint64_t v34 = sub_6732C();
    sub_672E4(v34);
    sub_16ED4( (uint64_t)v29,  enum case for SiriAlarmSnippetModels.alarmMulti(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104LL));
    sub_58AA8(v784);
    sub_59654();
    sub_66F84(v785);
    uint64_t v35 = j__mach_absolute_time();
    sub_58A9C(v35, v36, v35);
    uint64_t v37 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    v0[219] = v37;
    *uint64_t v37 = v0;
    v37[1] = sub_5E7F8;
    sub_66A14();
    return sub_66DF4();
  }

uint64_t sub_5E7F8()
{
  uint64_t v3 = sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_25254(v3, &qword_D41B0);
  sub_19840();
  return sub_250B8();
}

#error "5E8C4: call analysis failed (funcsize=75)"
uint64_t sub_5E97C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_455DC();
  sub_455CC();
  *(void *)(v2 + 1768) = v1;
  *(void *)(v2 + 1776) = v0;
  sub_199C0(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_5E9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1784) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_5EA28;
  sub_66D64();
  return sub_197F4();
}

uint64_t sub_5EA28()
{
  v0[224] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[221];
  sub_19838(v0[124]);

  sub_19840();
  return sub_19744();
}

#error "5EAFC: call analysis failed (funcsize=73)"
uint64_t sub_5EBB4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v4;
  sub_66DB8();
  sub_1996C(v4);
  v2[227] = v1;
  swift_task_dealloc();
  swift_release(v2[225]);
  if (!v1) {
    v2[228] = a1;
  }
  sub_19840();
  return sub_19744();
}

uint64_t sub_5EC14()
{
  uint64_t v8 = sub_58C00();
  v0[72] = v8;
  v0[73] = sub_24EE8();
  uint64_t v9 = sub_671F8();
  uint64_t v10 = sub_26B0(&qword_D41A8);
  uint64_t v11 = sub_66B2C(v10);
  uint64_t v12 = sub_67384(v11);
  sub_66BB4(v12, v13);
  uint64_t v14 = sub_6732C();
  sub_672E4(v14);
  sub_16ED4( (uint64_t)v9,  enum case for SiriAlarmSnippetModels.alarmMulti(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104LL));
  sub_58AA8(v19);
  sub_59654();
  sub_66F84(v20);
  uint64_t v15 = j__mach_absolute_time();
  sub_58A9C(v15, v16, v15);
  uint64_t v17 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  v0[229] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_5ED10;
  sub_66A14();
  return sub_66D9C();
}

uint64_t sub_5ED10()
{
  uint64_t v3 = sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_25254(v3, &qword_D41B0);
  sub_19840();
  return sub_250B8();
}

#error "5EDDC: call analysis failed (funcsize=75)"
uint64_t sub_5EE94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_455DC();
  sub_455CC();
  *(void *)(v2 + 1848) = v1;
  *(void *)(v2 + 1856) = v0;
  sub_199C0(v3);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_5EEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1864) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_5EF40;
  sub_66D64();
  return sub_197F4();
}

uint64_t sub_5EF40()
{
  v0[234] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[231];
  sub_19838(v0[124]);

  sub_19840();
  return sub_19744();
}

#error "5F014: call analysis failed (funcsize=73)"
uint64_t sub_5F0CC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v4;
  sub_66DB8();
  sub_1996C(v4);
  v2[240] = v1;
  swift_task_dealloc();
  if (v1) {
    swift_bridgeObjectRelease(v2[238]);
  }
  else {
    v2[241] = a1;
  }
  sub_19840();
  return sub_19744();
}

uint64_t sub_5F12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[57] = sub_58C00();
  v7[58] = sub_24EE8();
  sub_19558(v7 + 54);
  uint64_t v8 = sub_673F4();
  uint64_t v9 = sub_67158(v8, enum case for SiriAlarmSnippetModels.alarmMulti(_:));
  sub_672EC(v9, enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:));
  uint64_t v10 = sub_59654();
  sub_67294(v10);
  uint64_t v11 = j__mach_absolute_time();
  sub_58A9C(v11, v12, v11);
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  v7[242] = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_5F1E8;
  sub_66E70();
  return sub_66DC8();
}

uint64_t sub_5F1E8()
{
  uint64_t v3 = sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_25254(v3, &qword_D41B0);
  sub_19840();
  return sub_250B8();
}

#error "5F2BC: call analysis failed (funcsize=76)"
uint64_t sub_5F374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_19810();
  sub_1992C();
  *(void *)(v0 + 1960) = v2;
  *(void *)(v0 + 1968) = v1;
  sub_199C0(v3);
  swift_task_dealloc();
  sub_19840();
  return sub_197B8();
}

uint64_t sub_5F3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 1976) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_5F434;
  sub_67074();
  return sub_45460();
}

uint64_t sub_5F434()
{
  v0[248] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[245];
  sub_19838(v0[124]);

  sub_19840();
  return sub_19744();
}

#error "5F520: call analysis failed (funcsize=78)"
uint64_t sub_5F5D8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  sub_66DB8();
  sub_1992C();
  v1[251] = v2;
  v1[252] = v0;
  sub_199C0(v3);
  swift_bridgeObjectRelease(v1[237]);
  sub_19800();
  sub_19840();
  return sub_19744();
}

uint64_t sub_5F63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 2024) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_5F6A0;
  sub_67074();
  return sub_45460();
}

uint64_t sub_5F6A0()
{
  v0[254] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[251];
  sub_19838(v0[124]);

  sub_19840();
  return sub_19744();
}

uint64_t sub_5F708(uint64_t a1)
{
  v2[257] = v1;
  swift_task_dealloc();
  if (v1) {
    swift_bridgeObjectRelease(v2[255]);
  }
  else {
    v2[258] = a1;
  }
  sub_19840();
  return sub_19744();
}

uint64_t sub_5F768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[47] = sub_58C00();
  v7[48] = sub_24EE8();
  sub_19558(v7 + 44);
  uint64_t v8 = sub_673F4();
  uint64_t v9 = sub_67158(v8, enum case for SiriAlarmSnippetModels.alarmMulti(_:));
  sub_672EC(v9, enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:));
  uint64_t v10 = sub_59654();
  sub_67294(v10);
  uint64_t v11 = j__mach_absolute_time();
  sub_58A9C(v11, v12, v11);
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  v7[259] = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_5F824;
  sub_66E70();
  return sub_66DC8();
}

uint64_t sub_5F824()
{
  uint64_t v3 = sub_250E4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_25254(v3, &qword_D41B0);
  sub_19840();
  return sub_250B8();
}

#error "5F8F8: call analysis failed (funcsize=76)"
uint64_t sub_5F9B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_19810();
  sub_1992C();
  *(void *)(v0 + 2096) = v2;
  *(void *)(v0 + 2104) = v1;
  sub_199C0(v3);
  swift_task_dealloc();
  sub_19840();
  return sub_197B8();
}

uint64_t sub_5FA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 2112) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_5FA70;
  sub_67074();
  return sub_45460();
}

uint64_t sub_5FA70()
{
  v0[265] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[262];
  sub_19838(v0[124]);

  sub_19840();
  return sub_19744();
}

#error "5FB5C: call analysis failed (funcsize=78)"
uint64_t sub_5FC14()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  sub_66DB8();
  sub_1992C();
  v1[268] = v2;
  v1[269] = v0;
  sub_199C0(v3);
  swift_bridgeObjectRelease(v1[237]);
  sub_19800();
  sub_19840();
  return sub_19744();
}

uint64_t sub_5FC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  *(void *)(v7 + 2160) = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_5FCDC;
  sub_67074();
  return sub_45460();
}

uint64_t sub_5FCDC()
{
  v0[271] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[268];
  sub_19838(v0[124]);

  sub_19840();
  return sub_19744();
}

#error "5FDA4: call analysis failed (funcsize=70)"
#error "5FEBC: call analysis failed (funcsize=70)"
#error "5FFD4: call analysis failed (funcsize=70)"
#error "600EC: call analysis failed (funcsize=70)"
#error "6041C: call analysis failed (funcsize=190)"
#error "60750: call analysis failed (funcsize=191)"
#error "60A7C: call analysis failed (funcsize=189)"
#error "60DA8: call analysis failed (funcsize=189)"
#error "610DC: call analysis failed (funcsize=191)"
#error "61408: call analysis failed (funcsize=189)"
#error "61734: call analysis failed (funcsize=189)"
#error "61A60: call analysis failed (funcsize=189)"
#error "61D90: call analysis failed (funcsize=190)"
#error "620C8: call analysis failed (funcsize=192)"
#error "623F0: call analysis failed (funcsize=188)"
#error "62718: call analysis failed (funcsize=188)"
#error "62A48: call analysis failed (funcsize=190)"
#error "62D70: call analysis failed (funcsize=188)"
#error "63098: call analysis failed (funcsize=188)"
#error "63360: call analysis failed (funcsize=185)"
#error "63684: call analysis failed (funcsize=187)"
#error "639A8: call analysis failed (funcsize=187)"
#error "63CCC: call analysis failed (funcsize=187)"
#error "63FF0: call analysis failed (funcsize=187)"
#error "6430C: call analysis failed (funcsize=185)"
#error "64630: call analysis failed (funcsize=187)"
#error "64954: call analysis failed (funcsize=187)"
#error "64C78: call analysis failed (funcsize=187)"
#error "64F9C: call analysis failed (funcsize=187)"
uint64_t sub_650A8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  sub_4828C();
  uint64_t v3 = v2;
  swift_release(*a1);
  *a1 = v3;
  type metadata accessor for SirikitApp(0LL);
  uint64_t v4 = sub_26B0(&qword_D5F68);
  uint64_t v5 = IntentResolutionRecord.app.getter(v4);
  uint64_t v6 = SirikitApp.init(app:)(v5);
  uint64_t result = swift_release(a1[1]);
  a1[1] = v6;
  return result;
}

uint64_t sub_65128(uint64_t a1, unint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = a1;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8LL));
      goto LABEL_4;
    }
  }

  if (v2 < 0) {
    uint64_t v17 = v2;
  }
  else {
    uint64_t v17 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v2);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v2);
LABEL_4:
  uint64_t result = sub_65E28(0LL, v3, v5);
  if ((v7 & 1) != 0) {
    Swift::Int v8 = v5;
  }
  else {
    Swift::Int v8 = result;
  }
  if (v5 < v8)
  {
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  if (v4)
  {
    if (v2 < 0) {
      uint64_t v10 = v2;
    }
    else {
      uint64_t v10 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v10);
    uint64_t result = swift_bridgeObjectRelease(v2);
  }

  else
  {
    uint64_t v9 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v9 < v8) {
    goto LABEL_41;
  }
  if (v8 < 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  if (v4)
  {
    if (v2 < 0) {
      uint64_t v12 = v2;
    }
    else {
      uint64_t v12 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v12);
    uint64_t result = swift_bridgeObjectRelease(v2);
  }

  else
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v11 < v5) {
    goto LABEL_43;
  }
  if ((v2 & 0xC000000000000001LL) == 0 || v8 == v5) {
    goto LABEL_28;
  }
  if (v8 >= (unint64_t)v5)
  {
LABEL_44:
    __break(1u);
    return result;
  }

  type metadata accessor for SiriAlarm(0LL);
  Swift::Int v13 = v8;
  do
  {
    Swift::Int v14 = v13 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v13);
    Swift::Int v13 = v14;
  }

  while (v5 != v14);
LABEL_28:
  if (!v4) {
    return v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (v2 < 0) {
    uint64_t v16 = v2;
  }
  else {
    uint64_t v16 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v2);
  uint64_t v15 = _CocoaArrayWrapper.subscript.getter(v8, v5, v16);
  swift_bridgeObjectRelease_n(v2, 2LL);
  return v15;
}

uint64_t sub_65300@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v4 = [*a1 undoable];
  sub_5E3C();
  v5.super.super.Class isa = NSNumber.init(integerLiteral:)(1LL).super.super.isa;
  Class isa = v5.super.super.isa;
  if (!v4)
  {

    goto LABEL_5;
  }

  id v7 = v4;
  char v8 = static NSObject.== infix(_:_:)(v7, isa);

  if ((v8 & 1) == 0)
  {
LABEL_5:
    uint64_t result = 0LL;
    uint64_t v10 = 0LL;
    goto LABEL_6;
  }

  uint64_t result = sub_4AD44(v3);
LABEL_6:
  *a2 = result;
  a2[1] = v10;
  return result;
}

uint64_t sub_653B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0LL);
  sub_806C(a2, a1 + *(int *)(v7 + 44));
  uint64_t v8 = *(int *)(v7 + 48);
  sub_47DE4();
  uint64_t result = sub_17324();
  *(void *)(a1 + v8) = a3;
  return result;
}

uint64_t sub_6540C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id *a5, uint64_t (*a6)(void))
{
  uint64_t v10 = (int *)a6(0LL);
  sub_806C(a2, a1 + v10[16]);
  uint64_t v11 = v10[17];
  sub_56290();
  sub_1D730();
  *(void *)(a1 + v1sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = a3;
  type metadata accessor for SirikitApp(0LL);
  uint64_t v12 = sub_26B0(&qword_D5F68);
  uint64_t v13 = IntentResolutionRecord.app.getter(v12);
  uint64_t v14 = SirikitApp.init(app:)(v13);
  uint64_t v15 = v10[5];
  swift_release(*(void *)(a1 + v15));
  *(void *)(a1 + v15) = v14;
  id v16 = *a5;
  sub_4828C();
  sub_67130();
  uint64_t v17 = v10[15];
  uint64_t result = swift_release(*(void *)(a1 + v17));
  *(void *)(a1 + v1static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = a5;
  return result;
}

uint64_t sub_654E4(uint64_t a1)
{
  uint64_t v3 = a1;
  swift_errorRetain(a1);
  uint64_t v1 = sub_26B0(&qword_D4890);
  return String.init<A>(describing:)(&v3, v1);
}

uint64_t sub_6551C(uint64_t a1, uint64_t a2)
{
  NSNumber v5 = (void *)swift_task_alloc(dword_D5F64);
  *(void *)(v2 + 32) = v5;
  *NSNumber v5 = v2;
  v5[1] = sub_6557C;
  return sub_5972C(a1, a2);
}

uint64_t sub_6557C()
{
  uint64_t v2 = *v1;
  *uint64_t v3 = v2;
  *(void *)(v4 + 40) = v0;
  swift_task_dealloc();
  if (!v0) {
    return sub_1B5EC(*(uint64_t (**)(void))(v2 + 8));
  }
  sub_19840();
  return sub_1988C();
}

uint64_t sub_655CC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 24) = v1;
  sub_26B0(&qword_D4890);
  uint64_t v2 = static BarbaraWalters.logAndReturnError<A>(context:_:)(0xD000000000000064LL, 0x80000000000A9570LL, v0 + 24);
  swift_willThrow(v2, v3, v4, v5, v6, v7, v8, v9);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6565C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_34358;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_656D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_34358;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_65754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_34358;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_657D0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_D5F5C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_34358;
  return sub_6551C(a1, a2);
}

uint64_t sub_65830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_34358;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_658AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_34358;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_65928(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_D7458 + dword_D7458);
  uint64_t v3 = (void *)swift_task_alloc(unk_D745C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_3429C;
  return v5(a1);
}

uint64_t sub_6599C()
{
  uint64_t v1 = sub_5969C();
  return sub_65E74(*(uint64_t (**)(uint64_t))(v0 + 8), v0, v1);
}

unint64_t sub_659D4()
{
  unint64_t result = qword_D5F18[0];
  if (!qword_D5F18[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_A62B8, &_s20HandleIntentStrategyVN_1);
    atomic_store(result, qword_D5F18);
  }

  return result;
}

uint64_t sub_65A10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v8 = result;
    uint64_t v9 = (void *)(swift_bridgeObjectRetain(result) + 40);
    do
    {
      uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))*(v9 - 1);
      uint64_t v10 = *v9;
      swift_retain(*v9);
      v11(a2, a3, a4);
      swift_release(v10);
      v9 += 2;
      --v4;
    }

    while (v4);
    return swift_bridgeObjectRelease(v8);
  }

  return result;
}

uint64_t sub_65AA0()
{
  uint64_t v1 = sub_6738C();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_65AC8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_26B0(&qword_D5F78);
  swift_arrayDestroy(v0 + 32, v1);
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_65B18(void (*a1)(void *__return_ptr))
{
  return StaticString.description.getter(v2[0], v2[1], v3);
}

uint64_t sub_65B4C(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_65B7C(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, *a1, v5);
  *a1 = v5;
  return result;
}

uint64_t sub_65BD4(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  unsigned __int8 v3 = v2;
  uint64_t v4 = type metadata accessor for SiriAlarm(0LL);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  return v5;
}

uint64_t sub_65C2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_65C60()
{
  return sub_666A0(v0, 33LL);
}

__n128 sub_65C6C@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[2].n128_u8[0];
  __n128 result = v1[1];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

uint64_t sub_65C80()
{
  return sub_65B18(*(void (**)(void *__return_ptr))(v0 + 16));
}

uint64_t sub_65C88()
{
  return sub_666A0(v0, 24LL);
}

uint64_t sub_65C94()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_65C9C()
{
  uint64_t v1 = sub_6738C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_65CB8()
{
  return sub_65B4C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

_BYTE **sub_65CC4(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  return sub_44070(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_65CD0()
{
  return sub_43CB0(*(uint64_t (**)(void))(v0 + 16));
}

void sub_65CD8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_65CE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_65D10(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_65B7C(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_65D20(uint64_t a1)
{
  return sub_6540C( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(id **)(v1 + 40),  type metadata accessor for ModifyAllDisableParameters);
}

uint64_t sub_65D4C(uint64_t a1)
{
  return sub_653B0( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  type metadata accessor for ModifyAllDisableConciseParameters);
}

uint64_t sub_65D6C(uint64_t a1)
{
  return sub_6540C( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(id **)(v1 + 40),  type metadata accessor for ModifyAllEnableParameters);
}

uint64_t sub_65D98()
{
  uint64_t v1 = sub_6738C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_65DB4(uint64_t a1)
{
  return sub_653B0( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  type metadata accessor for ModifyAllEnableConciseParameters);
}

uint64_t sub_65DD4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_65E00(void *a1)
{
  return sub_650A8(a1);
}

uint64_t sub_65E08()
{
  return sub_654E4(*(void *)(v0 + 16));
}

uint64_t sub_65E28(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0LL;
    }
  }

  else if ((v3 & 0x8000000000000000LL) == 0 && v3 < (unint64_t)a2)
  {
    return 0LL;
  }

  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_65E74(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_65EE0()
{
  uint64_t v2 = v0[166];
  uint64_t v3 = v0[116];
  *(void *)(v1 - 216) = v0[117];
  *(void *)(v1 - 208) = v3;
  uint64_t v4 = v0[110];
  *(void *)(v1 - 200) = v0[113];
  *(void *)(v1 - 192) = v4;
  uint64_t v5 = v0[108];
  *(void *)(v1 - 184) = v0[109];
  *(void *)(v1 - 176) = v5;
  uint64_t v6 = v0[104];
  *(void *)(v1 - 168) = v0[107];
  *(void *)(v1 - 160) = v6;
  uint64_t v7 = v0[102];
  *(void *)(v1 - 152) = v0[103];
  *(void *)(v1 - 144) = v7;
  uint64_t v8 = v0[100];
  *(void *)(v1 - 136) = v0[101];
  *(void *)(v1 - 128) = v8;
  uint64_t v9 = v0[98];
  *(void *)(v1 - 120) = v0[99];
  *(void *)(v1 - 112) = v9;
  return swift_task_dealloc(v2);
}

uint64_t sub_66010()
{
  uint64_t v2 = v0[166];
  uint64_t v3 = v0[118];
  *(void *)(v1 - 208) = v0[119];
  *(void *)(v1 - 200) = v3;
  uint64_t v4 = v0[116];
  *(void *)(v1 - 192) = v0[117];
  *(void *)(v1 - 184) = v4;
  uint64_t v5 = v0[110];
  *(void *)(v1 - 176) = v0[113];
  *(void *)(v1 - 168) = v5;
  uint64_t v6 = v0[108];
  *(void *)(v1 - 160) = v0[109];
  *(void *)(v1 - 152) = v6;
  uint64_t v7 = v0[104];
  *(void *)(v1 - 144) = v0[107];
  *(void *)(v1 - 136) = v7;
  uint64_t v8 = v0[102];
  *(void *)(v1 - 128) = v0[103];
  *(void *)(v1 - 120) = v8;
  uint64_t v9 = v0[100];
  *(void *)(v1 - 112) = v0[101];
  *(void *)(v1 - 104) = v9;
  uint64_t v10 = v0[98];
  *(void *)(v1 - 96) = v0[99];
  *(void *)(v1 - 88) = v10;
  return swift_task_dealloc(v2);
}

uint64_t sub_66140()
{
  uint64_t v2 = v0[166];
  uint64_t v3 = v0[110];
  *(void *)(v1 - 232) = v0[113];
  *(void *)(v1 - 224) = v3;
  uint64_t v4 = v0[108];
  *(void *)(v1 - 216) = v0[109];
  *(void *)(v1 - 208) = v4;
  uint64_t v5 = v0[104];
  *(void *)(v1 - 200) = v0[107];
  *(void *)(v1 - 192) = v5;
  uint64_t v6 = v0[102];
  *(void *)(v1 - 184) = v0[103];
  *(void *)(v1 - 176) = v6;
  uint64_t v7 = v0[100];
  *(void *)(v1 - 168) = v0[101];
  *(void *)(v1 - 160) = v7;
  uint64_t v8 = v0[98];
  *(void *)(v1 - 152) = v0[99];
  *(void *)(v1 - 144) = v8;
  return swift_task_dealloc(v2);
}

uint64_t sub_66270@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 88) = a1;
  uint64_t v3 = v1[166];
  uint64_t v4 = v1[118];
  *(void *)(v2 - 216) = v1[119];
  *(void *)(v2 - 208) = v4;
  uint64_t v5 = v1[116];
  *(void *)(v2 - 200) = v1[117];
  *(void *)(v2 - 192) = v5;
  uint64_t v6 = v1[110];
  *(void *)(v2 - 184) = v1[113];
  *(void *)(v2 - 176) = v6;
  uint64_t v7 = v1[108];
  *(void *)(v2 - 168) = v1[109];
  *(void *)(v2 - 160) = v7;
  uint64_t v8 = v1[104];
  *(void *)(v2 - 152) = v1[107];
  *(void *)(v2 - 144) = v8;
  uint64_t v9 = v1[102];
  *(void *)(v2 - 136) = v1[103];
  *(void *)(v2 - 128) = v9;
  uint64_t v10 = v1[100];
  *(void *)(v2 - 120) = v1[101];
  *(void *)(v2 - 112) = v10;
  uint64_t v11 = v1[98];
  *(void *)(v2 - 104) = v1[99];
  *(void *)(v2 - 96) = v11;
  return swift_task_dealloc(v3);
}

uint64_t sub_663A4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_663C0()
{
  uint64_t v2 = v0[166];
  *(void *)(v1 - 128) = v0[165];
  *(void *)(v1 - 120) = v0[164];
  *(void *)(v1 - 112) = v2;
  return type metadata accessor for ABCReport(0LL);
}

uint64_t sub_663EC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_66408()
{
  uint64_t v2 = v0[236];
  *(void *)(v1 - 160) = v0[166];
  *(void *)(v1 - 152) = v2;
  uint64_t v3 = v0[164];
  *(void *)(v1 - 176) = v0[165];
  *(void *)(v1 - 168) = v3;
  *(void *)(v1 - 144) = v0[100];
  return type metadata accessor for ABCReport(0LL);
}

uint64_t sub_66440(uint64_t a1)
{
  *(void *)(v4 - 136) = v3;
  *(void *)(v4 - 96) = a1;
  *(_WORD *)uint64_t v1 = 258;
  *(_BYTE *)(v1 + 2) = 32;
  return swift_release(v2);
}

uint64_t sub_66464(uint64_t a1)
{
  *(void *)(v4 - 120) = 0LL;
  *(void *)(v4 - 112) = a1;
  *(void *)(v4 - 152) = a1;
  *(void *)(v4 - 144) = v1;
  *uint64_t v1 = 258;
  *(void *)(v4 - 128) = v1 + 1;
  *(void *)(v4 - 104) = v2;
  *(void *)(v4 - 96) = v3;
  return sub_43C14((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 104), v4 - 128, v4 - 120, v4 - 112);
}

uint64_t sub_66494(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_664B0(uint64_t a1)
{
  return swift_errorRelease(a1);
}

uint64_t sub_664CC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v1, v2, a1);
}

uint64_t sub_664E4()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t sub_664F4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_66504()
{
  return sub_43C14((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 - 104), v0 - 128, v0 - 120, v0 - 112);
}

uint64_t sub_66518()
{
  uint64_t v2 = v0[166];
  uint64_t v3 = v0[116];
  *(void *)(v1 - 224) = v0[117];
  *(void *)(v1 - 216) = v3;
  uint64_t v4 = v0[110];
  *(void *)(v1 - 208) = v0[113];
  *(void *)(v1 - 200) = v4;
  uint64_t v5 = v0[108];
  *(void *)(v1 - 192) = v0[109];
  *(void *)(v1 - 184) = v5;
  uint64_t v6 = v0[104];
  *(void *)(v1 - 176) = v0[107];
  *(void *)(v1 - 168) = v6;
  uint64_t v7 = v0[102];
  *(void *)(v1 - 160) = v0[103];
  *(void *)(v1 - 152) = v7;
  uint64_t v8 = v0[100];
  *(void *)(v1 - 144) = v0[101];
  *(void *)(v1 - 136) = v8;
  uint64_t v9 = v0[98];
  *(void *)(v1 - 128) = v0[99];
  *(void *)(v1 - 120) = v9;
  return swift_task_dealloc(v2);
}

uint64_t sub_66648(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v3, a2, v2);
}

uint64_t sub_6665C()
{
  *(void *)(v2 - 128) = *(void *)(v1 + 1096);
  *(void *)(v2 - 120) = *(void *)(v1 + 1088);
  *(void *)(v2 - 112) = v0;
  return sub_16AC4(12LL);
}

void sub_66674(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_6668C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v3 + 1096) + 16LL))( v2,  a2,  *(void *)(v3 + 1088));
}

uint64_t sub_666A0(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7LL);
}

uint64_t sub_666A8()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t sub_666B4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_666C0()
{
  return swift_release(v0);
}

void sub_666C8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

  ;
}

uint64_t sub_666F0(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  return swift_errorRetain(v1);
}

uint64_t sub_66700(uint64_t result)
{
  *(_BYTE *)(result + 16) = 32;
  return result;
}

uint64_t sub_66710()
{
  return swift_task_dealloc(*(void *)(v0 - 144));
}

uint64_t sub_66718()
{
  return swift_task_dealloc(*(void *)(v0 - 152));
}

uint64_t sub_66720()
{
  return swift_task_dealloc(*(void *)(v0 - 160));
}

uint64_t sub_66728()
{
  return swift_task_dealloc(*(void *)(v0 - 168));
}

uint64_t sub_66730()
{
  return swift_task_dealloc(*(void *)(v0 - 176));
}

uint64_t sub_66738()
{
  return swift_task_dealloc(*(void *)(v0 - 184));
}

uint64_t sub_66740()
{
  return swift_task_dealloc(*(void *)(v0 - 192));
}

uint64_t sub_66748()
{
  return swift_task_dealloc(*(void *)(v0 - 200));
}

uint64_t sub_66750()
{
  return swift_task_dealloc(*(void *)(v0 - 208));
}

uint64_t sub_66758( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  return swift_task_dealloc(a36);
}

uint64_t sub_66760( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  return swift_task_dealloc(a35);
}

uint64_t sub_66768( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  return swift_task_dealloc(a34);
}

uint64_t sub_66770( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  return swift_task_dealloc(a33);
}

uint64_t sub_66778( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  return swift_task_dealloc(a32);
}

uint64_t sub_66780( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  return swift_task_dealloc(a31);
}

uint64_t sub_66788( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  return swift_task_dealloc(a30);
}

uint64_t sub_66790( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  return swift_task_dealloc(a29);
}

uint64_t sub_66798( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  return swift_task_dealloc(a28);
}

uint64_t sub_667A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  return swift_task_dealloc(a27);
}

uint64_t sub_667A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return swift_task_dealloc(a26);
}

uint64_t sub_667B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  return swift_task_dealloc(a25);
}

uint64_t sub_667B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  return swift_task_dealloc(a24);
}

uint64_t sub_667C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  return swift_task_dealloc(a23);
}

uint64_t sub_667C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return swift_task_dealloc(a22);
}

uint64_t sub_667D0(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_667F8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v1, v2, a1);
}

uint64_t sub_66810(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 1232) + 8LL))(a1, *(void *)(v1 + 1224));
}

uint64_t sub_66820(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, a1, v1);
}

uint64_t sub_66834()
{
  *(_BYTE *)(v0 + sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = 8;
  return swift_release(v1);
}

uint64_t sub_66844()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_66854()
{
  return _convertErrorToNSError(_:)(*(void *)(v0 - 104));
}

uint64_t sub_66864()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 128) + 8LL))( *(void *)(v0 - 112),  *(void *)(v0 - 120));
}

BOOL sub_66874()
{
  return os_log_type_enabled(v1, v0);
}

uint64_t sub_66884()
{
  return swift_release(v0);
}

uint64_t sub_6688C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(v1);
}

  ;
}

uint64_t sub_668B4(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(void *)(v2 - 136) = v1;
  return swift_errorRetain(v1);
}

uint64_t sub_668C8()
{
  return swift_arrayDestroy(*(void *)(v0 - 152), 1LL);
}

uint64_t sub_668DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v3, a2, v2);
}

uint64_t sub_668F0()
{
  return swift_task_dealloc(*(void *)(v0 - 120));
}

uint64_t sub_668F8()
{
  return swift_task_dealloc(*(void *)(v0 - 136));
}

uint64_t sub_66900(uint64_t a1)
{
  *(void *)(v2 + 648) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(*(void *)(v4 - 144), v2 + 656, v3, v1 + 12);
}

uint64_t sub_66918()
{
  return swift_task_dealloc(*(void *)(v0 - 128));
}

uint64_t sub_66920()
{
  return swift_task_dealloc(*(void *)(v0 - 112));
}

uint64_t sub_66928()
{
  return swift_task_dealloc(*(void *)(v0 - 216));
}

uint64_t sub_66930( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  return swift_task_dealloc(a37);
}

uint64_t sub_66938()
{
  return type metadata accessor for ABCReport(0LL);
}

uint64_t sub_66940()
{
  uint64_t v1 = _s20HandleIntentStrategyVwxx_1(v0);
  return swift_willThrow(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_66954(uint64_t a1)
{
  *(void *)(v2 + 688) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(*(void *)(v4 - 144), v2 + 696, v3, v1 + 12);
}

uint64_t sub_6696C()
{
  return sub_16AC4(12LL);
}

uint64_t sub_66974(uint64_t a1, unint64_t a2)
{
  return sub_3D10(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_66980( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 3;
  *(void *)(v8 - 128) = a1;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_66994(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

uint64_t sub_669A0()
{
  uint64_t v2 = *(void *)(v1 - 104);
  *(void *)(v0 + 640) = v2;
  return swift_errorRetain(v2);
}

uint64_t sub_669B4(uint64_t result)
{
  *(_BYTE *)(result + 16) = 8;
  return result;
}

uint64_t sub_669C0(uint64_t result)
{
  *(_BYTE *)(result + 16) = 32;
  return result;
}

uint64_t sub_669CC()
{
  return v0;
}

uint64_t sub_669DC()
{
  return _convertErrorToNSError(_:)(*(void *)(v0 - 136));
}

uint64_t sub_669EC()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 176) + 8LL))( *(void *)(v0 - 160),  *(void *)(v0 - 168));
}

uint64_t sub_669FC()
{
  return *(void *)(v0 - 112);
}

uint64_t sub_66A0C()
{
  return type metadata accessor for DialogLayerErrorSubType(0LL);
}

uint64_t sub_66A14()
{
  uint64_t result = *(void *)(v0 + 744);
  *(void *)(v1 + 16) = 0LL;
  return result;
}

  ;
}

  ;
}

uint64_t sub_66A78(void *a1)
{
  uint64_t v1 = _s20HandleIntentStrategyVwxx_1(a1);
  return swift_willThrow(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_66A88()
{
  uint64_t v2 = *(void *)(v1 - 104);
  *(void *)(v0 + 680) = v2;
  return swift_errorRetain(v2);
}

void sub_66A9C()
{
  uint64_t v2 = *(void *)(v0 + 1328);
  *(void *)(v1 - 96) = *(void *)(v0 + 1312);
  *(void *)(v1 - 88) = v2;
}

uint64_t sub_66AC0()
{
  return swift_retain(v0);
}

void sub_66AC8()
{
}

void sub_66AF0()
{
}

BOOL sub_66B18(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

BOOL sub_66B20()
{
  return os_log_type_enabled(v0, v1);
}

uint64_t sub_66B2C(uint64_t a1)
{
  return swift_allocObject( a1,  ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
         + *(void *)(v1 + 72),
           *(unsigned __int8 *)(v1 + 80) | 7LL);
}

uint64_t sub_66B48()
{
  return sub_59654();
}

uint64_t sub_66B54()
{
  return swift_task_dealloc(*(void *)(v0 - 96));
}

uint64_t sub_66B5C()
{
  return swift_task_dealloc(*(void *)(v0 - 104));
}

_WORD *sub_66B64(_WORD *result)
{
  *(void *)(v1 - 112) = 0LL;
  *uint64_t result = 0;
  *(void *)(v1 - 96) = result + 1;
  *(void *)(v1 - 88) = 0LL;
  return result;
}

  ;
}

void *sub_66B98@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 624) = a1;
  return sub_19558(v2);
}

uint64_t sub_66BA4()
{
  return static BarbaraWalters.stopThePresses(for:)(v0);
}

void *sub_66BAC()
{
  return sub_19558(v0);
}

uint64_t sub_66BB4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(a2, v3, v4);
}

uint64_t sub_66BCC()
{
  return swift_errorRelease(*(void *)(v0 - 104));
}

  ;
}

uint64_t sub_66BF0()
{
  return swift_errorRelease(v0);
}

uint64_t sub_66BF8()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_66C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = v2;
  return swift_setDeallocating();
}

void sub_66C08()
{
}

uint64_t sub_66C10()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_66C1C()
{
  return swift_task_dealloc(*(void *)(v0 - 224));
}

uint64_t sub_66C24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38)
{
  return swift_task_dealloc(a38);
}

uint64_t sub_66C2C@<X0>(uint64_t a1@<X8>)
{
  v2[3] = a1;
  v2[4] = v1;
  void v2[2] = *(v2 - 17);
  return 0LL;
}

uint64_t sub_66C68()
{
  return sub_16AC4(2LL);
}

uint64_t sub_66C70@<X0>(int *a1@<X8>)
{
  *(void *)(v1 - 120) = (char *)a1 + *a1;
  return swift_retain(*(void *)(v1 - 168));
}

uint64_t sub_66C8C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v1, v2);
}

uint64_t sub_66CA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  *(_BYTE *)(v3 + 32) = 0;
  return *(_DWORD *)(v3 - 176) & 1;
}

uint64_t sub_66CDC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_66CF0(uint64_t a1)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v2, v1, a1);
}

uint64_t sub_66D04()
{
  return sub_16AA8(v0);
}

uint64_t sub_66D0C()
{
  return swift_task_dealloc(*(void *)(v0 - 232));
}

uint64_t sub_66D14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
  return swift_task_dealloc(a39);
}

uint64_t sub_66D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 24) = v7;
  return static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_66D48()
{
  return static BarbaraWalters.stopThePresses(for:)(v0);
}

uint64_t sub_66D50@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_66D5C(void *a1@<X8>)
{
}

uint64_t sub_66D64()
{
  return *(void *)(v0 + 744);
}

void sub_66D74()
{
}

uint64_t sub_66D9C()
{
  return ((uint64_t (*)(void))DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:))();
}

void sub_66DB8()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_66DC8()
{
  return ((uint64_t (*)(void))DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:))();
}

id sub_66DE4(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_66DEC(uint64_t a1)
{
  return sub_7BDE8(a1, 3LL);
}

uint64_t sub_66DF4()
{
  return ((uint64_t (*)(void))DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:))();
}

uint64_t sub_66E10()
{
  return v0(v3, v1, v2);
}

uint64_t sub_66E20(uint64_t a1, uint64_t *a2)
{
  return sub_19594(*(void *)(v2 - 144), a2);
}

void sub_66E28()
{
  uint64_t v2 = v0[161];
  uint64_t v3 = v0[150];
  *(void *)(v1 - 144) = v0[151];
  *(void *)(v1 - 136) = v3;
  *(void *)(v1 - 128) = v0[137];
  *(void *)(v1 - 120) = v0[136];
  *(void *)(v1 - 112) = v2;
}

uint64_t sub_66E58()
{
  return swift_release(*(void *)(v0 - 152));
}

void sub_66E60()
{
}

uint64_t sub_66E70()
{
  uint64_t result = *(void *)(v0 + 744);
  *(void *)(v1 + 16) = 0LL;
  return result;
}

uint64_t sub_66E9C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 128));
}

uint64_t sub_66EC0()
{
  return v0;
}

uint64_t sub_66ECC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_66EE0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_66EF4()
{
  return v0;
}

uint64_t sub_66F00()
{
  return *(void *)(v0 + 8);
}

void sub_66F0C()
{
}

  ;
}

uint64_t sub_66F54(uint64_t result)
{
  *(void *)(v1 + 616) = result;
  return result;
}

  ;
}

uint64_t sub_66F84@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(v1);
}

  ;
}

uint64_t sub_66FAC()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v1 - 88), *(void *)(v1 - 96));
}

void sub_66FB8(void *a1@<X8>)
{
}

uint64_t sub_66FC4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 104))(v1);
}

uint64_t sub_66FD0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v1, v2, a1);
}

void sub_66FEC()
{
}

uint64_t sub_67008(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, a1, v2);
}

uint64_t sub_67024()
{
  return swift_task_alloc(v0);
}

uint64_t sub_6702C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_67038()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

uint64_t sub_67044()
{
  return 0LL;
}

uint64_t sub_67068()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_67074()
{
  return *(void *)(v0 + 744);
}

uint64_t sub_67084()
{
  return sub_65A10(v0, v1 - 96, v1 - 88, v1 - 112);
}

_WORD *sub_6709C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

void sub_670A8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

uint64_t sub_670D8()
{
  return swift_retain(v0);
}

uint64_t sub_670E0()
{
  return 0LL;
}

uint64_t sub_670F0()
{
  return sub_44080(0LL, v0 == 0, *(void *)(v1 - 128));
}

uint64_t sub_67108()
{
  return sub_24E48(v0, v2);
}

void sub_67130()
{
}

uint64_t sub_67138()
{
  return sub_97748();
}

void sub_67144(void *a1@<X8>)
{
  *(void *)(v3 - 96) = *(void *)(v2 + 800);
  *(void *)(v3 - 88) = v1;
}

uint64_t sub_67158(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v3, a2, v2);
}

uint64_t sub_6716C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 - 128);
  *(void *)(a1 + 16) = v2;
  return swift_errorRetain(v2);
}

uint64_t sub_67180()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_67194()
{
  return static SiriTimeFeatureFlagsImpl.instance.getter();
}

uint64_t sub_671A8()
{
  return sub_65A10(v0, v1 - 96, v1 - 88, v1 - 112);
}

uint64_t sub_671BC()
{
  return sub_65A10(v0, v1 - 96, v1 - 88, v1 - 112);
}

uint64_t sub_671D0( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 3;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_671E4()
{
  return sub_65128(1LL, v0);
}

uint64_t sub_671F0()
{
  return sub_16AA8(v0);
}

void *sub_671F8()
{
  return sub_19558(v0);
}

uint64_t sub_67200@<X0>(uint64_t a1@<X8>)
{
  return static SiriKitLifecycle._logCrashToEventBus(_:)(0xD000000000000039LL, a1 | 0x8000000000000000LL);
}

uint64_t sub_67214@<X0>(uint64_t a1@<X8>)
{
  return sub_3D10(0xD000000000000039LL, a1 | 0x8000000000000000LL, (uint64_t *)(v1 - 112));
}

uint64_t sub_67228(uint64_t a1, unint64_t a2)
{
  return sub_3D10(a1, a2, (uint64_t *)(v2 - 112));
}

uint64_t sub_67230(uint64_t a1)
{
  return StaticString.description.getter(a1, 136LL, 2LL);
}

uint64_t sub_6723C()
{
  return sub_44080(0LL, v1 == 0, v0);
}

uint64_t sub_67250()
{
  return swift_retain(v0);
}

uint64_t sub_67258()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v2, v1);
}

uint64_t sub_6726C(uint64_t a1)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, a1);
}

uint64_t sub_67280(uint64_t a1)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, a1);
}

uint64_t sub_67294(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, a1, v3);
}

uint64_t sub_672A8()
{
  return swift_bridgeObjectRetain(*(void *)(v0 - 128));
}

uint64_t sub_672BC()
{
  return sub_65A10(v0, v1 - 104, v1 - 96, v1 - 88);
}

void sub_672D0()
{
}

uint64_t sub_672E4(uint64_t a1)
{
  return AlarmSnippetModel.init(alarms:)(a1);
}

uint64_t sub_672EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v3, a2, v4);
}

id sub_672FC()
{
  return *(id *)(v0 + 32);
}

uint64_t sub_67304()
{
  *(void *)(v1 - 168) = v0;
  return swift_bridgeObjectRetain(*(void *)(v1 - 128));
}

void sub_67314()
{
}

uint64_t sub_67324( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return Logger.logObject.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_6732C()
{
  return nullsub_1(v0);
}

uint64_t sub_67334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_6733C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v4, a2, v3);
}

uint64_t sub_6734C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_6735C()
{
}

void sub_6736C()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_67384(uint64_t a1)
{
  return sub_7B98C(a1, 1LL);
}

uint64_t sub_6738C()
{
  return v0;
}

uint64_t sub_6739C()
{
  *(void *)(v1 - 88) = v0;
  return sub_65300((id *)(v1 - 88), (uint64_t *)(v1 - 112));
}

uint64_t sub_673AC()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 136) + 8LL))( *(void *)(v0 - 120),  *(void *)(v0 - 128));
}

uint64_t sub_673BC()
{
  return swift_arrayDestroy(v0, 2LL);
}

_WORD *sub_673CC(_WORD *result)
{
  *(void *)(v1 - 96) = 0LL;
  *(void *)(v1 - 88) = 0LL;
  *uint64_t result = 0;
  *(void *)(v1 - 104) = result + 1;
  return result;
}

uint64_t sub_673E4()
{
  return _convertErrorToNSError(_:)(*(void *)(v0 - 112));
}

uint64_t sub_673F4()
{
  return AlarmSnippetModel.init(alarms:)(v0);
}

uint64_t sub_67404(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, a2, v4);
}

uint64_t sub_67414()
{
  return NLContextUpdate.set(undoDirectInvocation:)(v0);
}

uint64_t sub_6741C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 - 128));
}

uint64_t sub_6742C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 136));
}

uint64_t sub_67434(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

  ;
}

  ;
}

uint64_t sub_67464@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t *sub_67478()
{
  return sub_95D90();
}

void *sub_67484@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  *(void *)(v4 + 32) = v3;
  return result;
}

uint64_t sub_67498()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

void *sub_674A4(void *result)
{
  uint64_t v4 = *(void *)(v3 - 192);
  result[2] = v1;
  result[3] = v4;
  uint64_t v5 = *(void *)(v3 - 232);
  result[4] = v2;
  result[5] = v5;
  return result;
}

uint64_t *sub_674B8()
{
  return sub_95D90();
}

uint64_t sub_674C4()
{
  *uint64_t v1 = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_674D0()
{
  return swift_task_alloc(48LL);
}

uint64_t sub_674DC()
{
  return swift_task_alloc(32LL);
}

uint64_t sub_674E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_674F0(uint64_t a1, unint64_t a2)
{
  return sub_3D10(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_674FC()
{
  return v0;
}

uint64_t sub_67510(uint64_t a1, void *a2)
{
  *a2 = *(void *)(v3 - 120);
  a2[1] = v2;
  return nullsub_1(a1);
}

  ;
}

  ;
}

NSNumber sub_67544()
{
  return NSNumber.init(integerLiteral:)(1LL);
}

uint64_t sub_67550(uint64_t result)
{
  *(void *)(v1 - 120) = result;
  return result;
}

uint64_t sub_67564(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

id sub_6756C()
{
  return *(id *)(v0 + 8 * v1 + 32);
}

void sub_67578(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

NSNumber sub_67580()
{
  return NSNumber.init(BOOLeanLiteral:)(0);
}

id sub_6758C()
{
  return [v1 *(SEL *)(v0 + 880)];
}

uint64_t sub_67598(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_675A0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_675AC(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_675B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static DialogPhase.completion.getter(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_675C4(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

uint64_t sub_675D0(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

uint64_t sub_675DC()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_675E8()
{
  return sub_5659C(v0);
}

uint64_t sub_675F0()
{
  return swift_release(*(void *)(v0 - 168));
}

uint64_t sub_675F8()
{
  return swift_release(*(void *)(v0 - 192));
}

uint64_t sub_67600()
{
  return type metadata accessor for UnhandledAbortSubtype(0LL);
}

uint64_t sub_67608()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

uint64_t sub_67614(uint64_t a1)
{
  *(void *)(v2 - 120) = *(void *)(v1 + 784);
  return swift_task_dealloc(a1);
}

uint64_t type metadata accessor for SearchQueryCATPatternsExecutor(uint64_t a1)
{
  return sub_8A38(a1, (uint64_t *)&unk_D5F80, (uint64_t)&nominal type descriptor for SearchQueryCATPatternsExecutor);
}

uint64_t sub_67634(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D83E8);
}

uint64_t sub_67670()
{
  uint64_t v2 = sub_26B0(&qword_D3BD0);
  uint64_t v3 = sub_38F80(v2, 224LL);
  *(_OWORD *)(v3 + 16) = xmmword_A4A50;
  *(void *)(v3 + 32) = 0x6C6562616CLL;
  *(void *)(v3 + 40) = 0xE500000000000000LL;
  sub_69C58();
  uint64_t v4 = sub_1EC14();
  uint64_t v5 = sub_69C9C(v4);
  if (v6)
  {
    sub_69C94(v5, &qword_D3A08);
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }

  else
  {
    uint64_t v7 = sub_69C88();
    sub_1EC54((uint64_t)v7, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_D3A00 + 4));
  }

  strcpy((char *)(v3 + 80), "noAlarmExists");
  *(_WORD *)(v3 + 94) = -4864;
  NotFoundParameters = (int *)type metadata accessor for SearchQueryNotFoundParameters(0LL);
  *(_BYTE *)(v3 + 96) = *(_BYTE *)(v0 + NotFoundParameters[5]);
  *(void *)(v3 + 120) = &type metadata for Bool;
  *(void *)(v3 + 128) = 0x6F43686372616573LL;
  *(void *)(v3 + 136) = 0xEF6E6F697469646ELL;
  uint64_t v9 = *(void *)(v0 + NotFoundParameters[6]);
  uint64_t v10 = sub_26B0(&qword_D3BD8);
  *(void *)(v3 + 144) = v9;
  *(void *)(v3 + 168) = v10;
  *(void *)(v3 + 176) = 1701669236LL;
  *(void *)(v3 + 184) = 0xE400000000000000LL;
  uint64_t v11 = *(void *)(v0 + NotFoundParameters[7]);
  if (v11)
  {
    uint64_t v12 = type metadata accessor for DialogCalendar(0LL);
  }

  else
  {
    uint64_t v12 = 0LL;
    *(void *)(v3 + 200) = 0LL;
    *(void *)(v3 + 208) = 0LL;
  }

  *(void *)(v3 + 192) = v11;
  *(void *)(v3 + 216) = v12;
  swift_bridgeObjectRetain(v9);
  swift_retain(v11);
  return v3;
}

uint64_t sub_67808()
{
  uint64_t v2 = sub_26B0(&qword_D3BD0);
  uint64_t v3 = sub_38F80(v2, 704LL);
  *(_OWORD *)(v3 + 16) = xmmword_A4B20;
  sub_214C8();
  *(void *)(v4 + 32) = 0xD000000000000016LL;
  *(void *)(v4 + 40) = v5;
  sub_69C58();
  uint64_t v6 = sub_1EC14();
  uint64_t v7 = sub_69C9C(v6);
  if (v8)
  {
    sub_69C94(v7, &qword_D3A08);
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }

  else
  {
    uint64_t v9 = sub_69C88();
    sub_1EC54((uint64_t)v9, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_D3A00 + 4));
  }

  *(void *)(v3 + 80) = 7368801LL;
  *(void *)(v3 + 88) = 0xE300000000000000LL;
  SuccessMultiParameters = (int *)type metadata accessor for SearchQuerySuccessMultiParameters(0LL);
  uint64_t v11 = *(void *)(v0 + SuccessMultiParameters[5]);
  if (v11)
  {
    uint64_t v12 = type metadata accessor for SirikitApp(0LL);
    uint64_t v13 = v11;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v12 = 0LL;
    *(void *)(v3 + 104) = 0LL;
    *(void *)(v3 + 112) = 0LL;
  }

  *(void *)(v3 + 96) = v13;
  *(void *)(v3 + 120) = v12;
  *(void *)(v3 + 128) = 0xD000000000000020LL;
  *(void *)(v3 + 136) = 0x80000000000A9830LL;
  *(_BYTE *)(v3 + 144) = *(_BYTE *)(v0 + SuccessMultiParameters[6]);
  *(void *)(v3 + 168) = &type metadata for Bool;
  *(void *)(v3 + 176) = 0x6E69577473726966LL;
  *(void *)(v3 + 184) = 0xEF657A6953776F64LL;
  uint64_t v14 = (uint64_t *)(v0 + SuccessMultiParameters[7]);
  if ((v14[1] & 1) != 0)
  {
    uint64_t v15 = 0LL;
    *(void *)(v3 + 200) = 0LL;
    *(void *)(v3 + 208) = 0LL;
    uint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v16 = *v14;
    uint64_t v15 = &type metadata for Double;
  }

  *(void *)(v3 + 192) = v16;
  *(void *)(v3 + 216) = v15;
  strcpy((char *)(v3 + 224), "hideSleepAlarm");
  *(_BYTE *)(v3 + 239) = -18;
  *(_BYTE *)(v3 + 240) = *(_BYTE *)(v0 + SuccessMultiParameters[8]);
  *(void *)(v3 + 264) = &type metadata for Bool;
  strcpy((char *)(v3 + 272), "isConclusion");
  *(_BYTE *)(v3 + 285) = 0;
  *(_WORD *)(v3 + 286) = -5120;
  *(_BYTE *)(v3 + 288) = *(_BYTE *)(v0 + SuccessMultiParameters[9]);
  *(void *)(v3 + 312) = &type metadata for Bool;
  strcpy((char *)(v3 + 320), "isFirstWindow");
  *(_WORD *)(v3 + 334) = -4864;
  *(_BYTE *)(v3 + 336) = *(_BYTE *)(v0 + SuccessMultiParameters[10]);
  *(void *)(v3 + 360) = &type metadata for Bool;
  strcpy((char *)(v3 + 368), "isLastWindow");
  *(_BYTE *)(v3 + 38sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  *(_WORD *)(v3 + 382) = -5120;
  *(_BYTE *)(v3 + 384) = *(_BYTE *)(v0 + SuccessMultiParameters[11]);
  *(void *)(v3 + 408) = &type metadata for Bool;
  *(void *)(v3 + 416) = 0xD000000000000016LL;
  *(void *)(v3 + 424) = 0x80000000000A9860LL;
  *(_BYTE *)(v3 + 432) = *(_BYTE *)(v0 + SuccessMultiParameters[12]);
  *(void *)(v3 + 456) = &type metadata for Bool;
  *(void *)(v3 + 464) = 0x736D657469LL;
  *(void *)(v3 + 472) = 0xE500000000000000LL;
  uint64_t v17 = *(void *)(v0 + SuccessMultiParameters[13]);
  uint64_t v18 = sub_26B0(&qword_D3D28);
  *(void *)(v3 + 480) = v17;
  *(void *)(v3 + 504) = v18;
  *(void *)(v3 + 512) = 0xD000000000000013LL;
  sub_214C8();
  *(void *)(v3 + 520) = v19;
  uint64_t v20 = v0 + SuccessMultiParameters[14];
  if ((*(_BYTE *)(v20 + 8) & 1) != 0)
  {
    double v22 = sub_69C78();
  }

  else
  {
    double v22 = *(double *)v20;
    uint64_t v21 = &type metadata for Double;
  }

  *(double *)(v3 + 528) = v22;
  *(void *)(v3 + 552) = v21;
  sub_47E44();
  *(void *)(v3 + 560) = v23;
  *(void *)(v3 + 568) = 0xEA00000000006D72LL;
  uint64_t v24 = *(void *)(v0 + SuccessMultiParameters[15]);
  if (v24)
  {
    uint64_t v25 = sub_47D54();
    uint64_t v26 = v24;
  }

  else
  {
    uint64_t v26 = 0LL;
    uint64_t v25 = 0LL;
    *(_OWORD *)(v3 + 584) = 0u;
  }

  *(void *)(v3 + 576) = v26;
  *(void *)(v3 + 600) = v25;
  *(void *)(v3 + 608) = 0x6574496C61746F74LL;
  *(void *)(v3 + 616) = 0xEA0000000000736DLL;
  uint64_t v27 = v0 + SuccessMultiParameters[16];
  if ((*(_BYTE *)(v27 + 8) & 1) != 0)
  {
    double v29 = sub_69C78();
  }

  else
  {
    double v29 = *(double *)v27;
    uint64_t v28 = &type metadata for Double;
  }

  *(double *)(v3 + 624) = v29;
  *(void *)(v3 + 648) = v28;
  *(void *)(v3 + 656) = 0x6953776F646E6977LL;
  *(void *)(v3 + 664) = 0xEA0000000000657ALL;
  uint64_t v30 = v0 + SuccessMultiParameters[17];
  if ((*(_BYTE *)(v30 + 8) & 1) != 0)
  {
    double v32 = sub_69C78();
  }

  else
  {
    double v32 = *(double *)v30;
    uint64_t v31 = &type metadata for Double;
  }

  *(double *)(v3 + 672) = v32;
  *(void *)(v3 + 696) = v31;
  sub_56278();
  swift_retain(v11);
  swift_bridgeObjectRetain(v17);
  return v3;
}

void sub_67C10()
{
  uint64_t v3 = sub_26B0(&qword_D3BD0);
  uint64_t v4 = sub_38F80(v3, 512LL);
  *(_OWORD *)(v4 + 16) = xmmword_A5A60;
  *(void *)(v4 + 32) = 0x6D72616C61LL;
  *(void *)(v4 + 40) = 0xE500000000000000LL;
  uint64_t v5 = *v0;
  if (*v0)
  {
    uint64_t v6 = sub_47D54();
    uint64_t v7 = v5;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
    *(void *)(v4 + 56) = 0LL;
    *(void *)(v4 + 64) = 0LL;
  }

  *(void *)(v4 + 48) = v7;
  *(void *)(v4 + 72) = v6;
  *(void *)(v4 + 80) = 7368801LL;
  *(void *)(v4 + 88) = 0xE300000000000000LL;
  uint64_t v8 = v0[1];
  if (v8)
  {
    uint64_t v9 = type metadata accessor for SirikitApp(0LL);
    uint64_t v10 = v8;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
    *(void *)(v4 + 104) = 0LL;
    *(void *)(v4 + 112) = 0LL;
  }

  *(void *)(v4 + 96) = v10;
  *(void *)(v4 + 120) = v9;
  *(void *)(v4 + 128) = 0xD000000000000012LL;
  *(void *)(v4 + 136) = 0x80000000000A9750LL;
  if ((v0[3] & 1) != 0)
  {
    uint64_t v11 = 0LL;
    *(void *)(v4 + 152) = 0LL;
    *(void *)(v4 + 160) = 0LL;
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v12 = v0[2];
    uint64_t v11 = &type metadata for Double;
  }

  *(void *)(v4 + 144) = v12;
  *(void *)(v4 + 168) = v11;
  *(void *)(v4 + 176) = 0xD000000000000012LL;
  sub_214C8();
  *(void *)(v4 + 184) = v13;
  *(_BYTE *)(v4 + 192) = *((_BYTE *)v0 + 25);
  sub_47E44();
  *(void *)(v4 + 216) = &type metadata for Bool;
  *(void *)(v4 + 224) = v14;
  *(void *)(v4 + 232) = 0xEA00000000006D72LL;
  uint64_t v15 = v0[4];
  if (v15)
  {
    uint64_t v16 = sub_47D54();
    uint64_t v17 = v15;
  }

  else
  {
    uint64_t v17 = 0LL;
    uint64_t v16 = 0LL;
    *(void *)(v4 + 248) = 0LL;
    *(void *)(v4 + 256) = 0LL;
  }

  *(void *)(v4 + 240) = v17;
  *(void *)(v4 + 264) = v16;
  *(void *)(v4 + 272) = 0xD000000000000010LL;
  sub_214C8();
  *(void *)(v4 + 280) = v18;
  if ((v0[6] & 1) != 0)
  {
    uint64_t v19 = 0LL;
    *(void *)(v4 + 296) = 0LL;
    *(void *)(v4 + 304) = 0LL;
    uint64_t v20 = 0LL;
  }

  else
  {
    uint64_t v20 = v0[5];
    uint64_t v19 = &type metadata for Double;
  }

  *(void *)(v4 + 288) = v20;
  *(void *)(v4 + 312) = v19;
  *(void *)(v4 + 320) = 0xD000000000000014LL;
  sub_214C8();
  *(void *)(v4 + 328) = v21;
  *(_BYTE *)(v4 + 336) = *((_BYTE *)v0 + 49);
  *(void *)(v4 + 360) = &type metadata for Bool;
  *(void *)(v4 + 368) = 0xD000000000000012LL;
  sub_214C8();
  *(void *)(v4 + 376) = v22;
  SuccessSingleParameters = (int *)type metadata accessor for SearchQuerySuccessSingleParameters(0LL);
  sub_3F88((uint64_t)v0 + SuccessSingleParameters[11], v1, &qword_D3A08);
  uint64_t v24 = sub_1EC14();
  if (sub_16880(v1, 1LL, v24) == 1)
  {
    sub_56278();
    swift_retain(v5);
    uint64_t v25 = swift_retain(v8);
    sub_69C94(v25, &qword_D3A08);
    *(_OWORD *)(v4 + 384) = 0u;
    *(_OWORD *)(v4 + 400) = 0u;
  }

  else
  {
    *(void *)(v4 + 408) = v24;
    uint64_t v26 = sub_19558((void *)(v4 + 384));
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32LL))(v26, v1, v24);
    sub_56278();
    swift_retain(v5);
    swift_retain(v8);
  }

  sub_214C8();
  *(void *)(v4 + 416) = 0xD000000000000012LL;
  *(void *)(v4 + 424) = v27;
  *(_BYTE *)(v4 + 432) = *((_BYTE *)v0 + SuccessSingleParameters[12]);
  *(void *)(v4 + 456) = v28;
  *(void *)(v4 + 464) = 0xD000000000000011LL;
  sub_214C8();
  *(void *)(v4 + 472) = v29;
  uint64_t v30 = *(uint64_t *)((char *)v0 + SuccessSingleParameters[13]);
  if (v30)
  {
    uint64_t v31 = type metadata accessor for DialogCalendar(0LL);
  }

  else
  {
    uint64_t v31 = 0LL;
    *(void *)(v4 + 488) = 0LL;
    *(void *)(v4 + 496) = 0LL;
  }

  *(void *)(v4 + 480) = v30;
  *(void *)(v4 + 504) = v31;
  swift_retain(v30);
  sub_16CB0();
}

uint64_t sub_67F20(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = a4;
  *(void *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 96) = a1;
  uint64_t v5 = sub_26B0(&qword_D3A08);
  *(void *)(v4 + 40) = sub_1EA3C(v5);
  uint64_t NotFoundParameters = type metadata accessor for SearchQueryNotFoundParameters(0LL);
  *(void *)(v4 + 48) = NotFoundParameters;
  *(void *)(v4 + 56) = sub_1EA3C(NotFoundParameters);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_67F7C()
{
  uint64_t v1 = *(int **)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  char v5 = *(_BYTE *)(v0 + 96);
  sub_1EC14();
  sub_2D240(v2, 1LL);
  *(_BYTE *)(v2 + v1[5]) = v5;
  *(void *)(v2 + v1[6]) = v4;
  uint64_t v6 = v1[7];
  *(void *)(v2 + v6) = 0LL;
  uint64_t v7 = *(void **)(v3 + 64);
  uint64_t v8 = *(void *)(v0 + 16);
  if (!v7)
  {
    swift_bridgeObjectRetain(v8);
    goto LABEL_5;
  }

  swift_bridgeObjectRetain(v8);
  sub_1B6E0();
  *(void *)(v2 + v6) = v9;
  id v10 = [v7 label];
  if (!v10)
  {
LABEL_5:
    uint64_t v15 = 1LL;
    goto LABEL_6;
  }

  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v14 = v13;

  String.toSpeakableString.getter(v12);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v16 = *(void *)(v0 + 56);
  uint64_t v17 = *(void *)(v0 + 40);
  sub_2D240(v17, v15);
  sub_1B4F0(v17, v16);
  *(void *)(v0 + 64) = sub_67670();
  uint64_t v18 = sub_69C68((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  uint64_t v22 = v19;
  uint64_t v20 = (void *)swift_task_alloc(v18);
  *(void *)(v0 + 72) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_680D0;
  sub_47D5C();
  return v22(0xD000000000000014LL);
}

uint64_t sub_680D0()
{
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_68118(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  sub_2142C(a1, type metadata accessor for SearchQueryNotFoundParameters);
  swift_release(v2);
  sub_19808();
  swift_task_dealloc();
  return sub_4F354(*(void *)(v1 + 88), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_6816C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  sub_2142C(a1, type metadata accessor for SearchQueryNotFoundParameters);
  swift_release(v2);
  sub_19808();
  swift_task_dealloc();
  return sub_69C20(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_681BC(char a1, char a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 32) = v15;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 16) = a7;
  *(void *)(v9 + 24) = a8;
  *(_BYTE *)(v9 + 10sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = a6;
  *(_BYTE *)(v9 + 100) = a5;
  *(_BYTE *)(v9 + 99) = a4;
  *(_BYTE *)(v9 + 98) = a3;
  *(_BYTE *)(v9 + 9static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = a2;
  *(_BYTE *)(v9 + 96) = a1;
  uint64_t SuccessMultiParameters = type metadata accessor for SearchQuerySuccessMultiParameters(0LL);
  *(void *)(v9 + 48) = SuccessMultiParameters;
  *(void *)(v9 + 56) = sub_1EA3C(SuccessMultiParameters);
  sub_19840();
  return swift_task_switch(v11, v12, v13);
}

uint64_t sub_68224()
{
  uint64_t v2 = *(int **)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v17 = *(void (**)(uint64_t))(v0 + 24);
  char v16 = *(_BYTE *)(v0 + 101);
  char v4 = *(_BYTE *)(v0 + 100);
  char v5 = *(_BYTE *)(v0 + 99);
  char v6 = *(_BYTE *)(v0 + 98);
  char v7 = *(_BYTE *)(v0 + 97);
  char v8 = *(_BYTE *)(v0 + 96);
  uint64_t v9 = sub_1EC14();
  sub_23050(v1, v10, v11, v9);
  *(void *)(v1 + v2[5]) = 0LL;
  *(_BYTE *)(v1 + v2[6]) = v8;
  sub_69C30(v2[7]);
  *(_BYTE *)(v1 + v2[8]) = v7;
  *(_BYTE *)(v1 + v2[9]) = v6;
  *(_BYTE *)(v1 + v2[10]) = v5;
  *(_BYTE *)(v1 + v2[11]) = v4;
  *(_BYTE *)(v1 + v2[12]) = v16;
  *(void *)(v1 + v2[13]) = v3;
  sub_69C30(v2[14]);
  *(void *)(v1 + v2[15]) = 0LL;
  sub_69C30(v2[16]);
  sub_69C30(v2[17]);
  swift_bridgeObjectRetain(v3);
  v17(v1);
  *(void *)(v0 + 64) = sub_67808();
  uint64_t v12 = sub_69C68((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  uint64_t v18 = v13;
  uint64_t v14 = (void *)swift_task_alloc(v12);
  *(void *)(v0 + 72) = v14;
  void *v14 = v0;
  v14[1] = sub_6837C;
  sub_47D5C();
  return v18(0xD000000000000018LL);
}

uint64_t sub_6837C()
{
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_683C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v1 + 88));
}

uint64_t sub_68408(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_68448(char a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a5;
  *(void *)(v6 + 32) = a6;
  *(void *)(v6 + 16) = a4;
  *(_BYTE *)(v6 + 90) = a3;
  *(_BYTE *)(v6 + 89) = a2;
  *(_BYTE *)(v6 + 88) = a1;
  uint64_t SuccessSingleParameters = type metadata accessor for SearchQuerySuccessSingleParameters(0LL);
  *(void *)(v6 + 40) = SuccessSingleParameters;
  *(void *)(v6 + 48) = sub_1EA3C(SuccessSingleParameters);
  sub_19840();
  return sub_1988C();
}

uint64_t sub_68498()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  char v3 = *(_BYTE *)(v0 + 90);
  char v4 = *(_BYTE *)(v0 + 89);
  char v5 = *(_BYTE *)(v0 + 88);
  uint64_t v6 = v1 + v2[11];
  uint64_t v7 = sub_1EC14();
  sub_23050(v6, v8, v9, v7);
  *(void *)uint64_t v1 = 0LL;
  *(void *)(v1 + 8) = 0LL;
  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 24) = 1;
  *(_BYTE *)(v1 + 25) = v5;
  *(void *)(v1 + 32) = 0LL;
  *(void *)(v1 + 40) = 0LL;
  *(_BYTE *)(v1 + 48) = 1;
  *(_BYTE *)(v1 + 49) = v4;
  *(_BYTE *)(v1 + v2[12]) = v3;
  *(void *)(v1 + v2[13]) = 0LL;
  sub_7F35C(v1);
  sub_67C10();
  *(void *)(v0 + 56) = v10;
  uint64_t v11 = sub_69C68((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  uint64_t v15 = v12;
  uint64_t v13 = (void *)swift_task_alloc(v11);
  *(void *)(v0 + 64) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_68598;
  sub_47D5C();
  return v15(0xD000000000000019LL);
}

uint64_t sub_68598(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  sub_16F40();
  if (!v1) {
    *(void *)(v4 + 80) = a1;
  }
  sub_19840();
  return sub_1EA50();
}

uint64_t sub_68600(uint64_t a1)
{
  char v3 = *(void **)(v1 + 24);
  uint64_t v2 = *(void *)(v1 + 32);
  sub_2142C(a1, type metadata accessor for SearchQuerySuccessSingleParameters);

  swift_release(v2);
  sub_19808();
  return sub_4F354(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_68650(uint64_t a1)
{
  char v3 = *(void **)(v1 + 24);
  uint64_t v2 = *(void *)(v1 + 32);
  sub_2142C(a1, type metadata accessor for SearchQuerySuccessSingleParameters);

  swift_release(v2);
  sub_19808();
  return sub_69C20(*(uint64_t (**)(void))(v1 + 8));
}

void sub_6869C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_686EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_26B0((uint64_t *)&unk_D36C0);
  sub_215E4();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_3F88(a1, (uint64_t)v12, (uint64_t *)&unk_D36C0);
  sub_1EC54((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_202D8(a1, (uint64_t *)&unk_D36C0);
  sub_16CB0();
}

uint64_t sub_687DC()
{
  return type metadata accessor for SearchQueryCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for SearchQuerySuccessSingleParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D60D8, (uint64_t)&nominal type descriptor for SearchQuerySuccessSingleParameters);
}

uint64_t type metadata accessor for SearchQueryNotFoundParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D6040, (uint64_t)&nominal type descriptor for SearchQueryNotFoundParameters);
}

uint64_t type metadata accessor for SearchQuerySuccessMultiParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D6188, (uint64_t)&nominal type descriptor for SearchQuerySuccessMultiParameters);
}

uint64_t sub_68820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6882C);
}

void sub_6882C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    sub_214FC(a1, a2, v6);
  }

  else
  {
    sub_69C40(*(int *)(a3 + 24));
    sub_1D738();
  }

uint64_t sub_68888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_68894);
}

void sub_68894()
{
  if (*(_DWORD *)(*(void *)(sub_26B0(&qword_D3A08) - 8) + 84LL) == v3)
  {
    uint64_t v4 = sub_47E28();
    sub_21514(v4, v5, v6, v7);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + swift_release(*(void *)(v0 + 24)) = (v0 - 1);
    sub_1D738();
  }

void sub_688E4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = &unk_A63F0;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_A6408;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

uint64_t sub_6896C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v9 = a2[1];
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v8;
    *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
    uint64_t v11 = a2[4];
    uint64_t v10 = a2[5];
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v10;
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    uint64_t v12 = a3[11];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for SpeakableString(0LL);
    swift_retain(v4);
    swift_retain(v9);
    swift_retain(v11);
    if (sub_16880((uint64_t)v14, 1LL, v15))
    {
      uint64_t v16 = sub_26B0(&qword_D3A08);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
      sub_A40C((uint64_t)v13, 0LL, 1LL, v15);
    }

    uint64_t v17 = a3[13];
    *(_BYTE *)(v7 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    uint64_t v4 = *(uint64_t *)((char *)a2 + v17);
    *(void *)(v7 + v1static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = v4;
  }

  swift_retain(v4);
  return v7;
}

uint64_t sub_68AAC(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  return swift_release(*(void *)((char *)a1 + *(int *)(a2 + 52)));
}

uint64_t sub_68B30(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  uint64_t v10 = a2[4];
  uint64_t v9 = a2[5];
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v9;
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  uint64_t v11 = a3[11];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  *(void *)a1 = v6;
  uint64_t v14 = type metadata accessor for SpeakableString(0LL);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v10);
  if (sub_16880((uint64_t)v13, 1LL, v14))
  {
    uint64_t v15 = sub_26B0(&qword_D3A08);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
    sub_A40C((uint64_t)v12, 0LL, 1LL, v14);
  }

  uint64_t v16 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  uint64_t v17 = *(uint64_t *)((char *)a2 + v16);
  *(void *)(a1 + v16) = v17;
  swift_retain(v17);
  return a1;
}

uint64_t *sub_68C4C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  uint64_t v8 = a1[1];
  uint64_t v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  uint64_t v10 = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  a1[2] = v10;
  *((_BYTE *)a1 + 25) = *((_BYTE *)a2 + 25);
  uint64_t v11 = a1[4];
  uint64_t v12 = a2[4];
  a1[4] = v12;
  swift_retain(v12);
  swift_release(v11);
  uint64_t v13 = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  a1[5] = v13;
  *((_BYTE *)a1 + 49) = *((_BYTE *)a2 + 49);
  uint64_t v14 = a3[11];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for SpeakableString(0LL);
  int v18 = sub_16880((uint64_t)v15, 1LL, v17);
  int v19 = sub_16880((uint64_t)v16, 1LL, v17);
  if (!v18)
  {
    uint64_t v20 = *(void *)(v17 - 8);
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v15, v16, v17);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v17);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v21 = sub_26B0(&qword_D3A08);
    memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
  sub_A40C((uint64_t)v15, 0LL, 1LL, v17);
LABEL_7:
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  uint64_t v22 = a3[13];
  uint64_t v23 = *(uint64_t *)((char *)a1 + v22);
  uint64_t v24 = *(uint64_t *)((char *)a2 + v22);
  *(uint64_t *)((char *)a1 + v22) = v24;
  swift_retain(v24);
  swift_release(v23);
  return a1;
}

uint64_t sub_68DF0(uint64_t a1, __int128 *a2, int *a3)
{
  __int128 v6 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  uint64_t v7 = *((void *)a2 + 5);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = v7;
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  uint64_t v8 = a3[11];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  *(_OWORD *)a1 = v6;
  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)v10, 1LL, v11))
  {
    uint64_t v12 = sub_26B0(&qword_D3A08);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
    sub_A40C((uint64_t)v9, 0LL, 1LL, v11);
  }

  uint64_t v13 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *(void *)(a1 + v1sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = *(void *)((char *)a2 + v13);
  return a1;
}

uint64_t *sub_68EE0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a1 + 25) = *((_BYTE *)a2 + 25);
  uint64_t v8 = a1[4];
  a1[4] = a2[4];
  swift_release(v8);
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a1 + 49) = *((_BYTE *)a2 + 49);
  uint64_t v9 = a3[11];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for SpeakableString(0LL);
  int v13 = sub_16880((uint64_t)v10, 1LL, v12);
  int v14 = sub_16880((uint64_t)v11, 1LL, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v10, v11, v12);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_26B0(&qword_D3A08);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
  sub_A40C((uint64_t)v10, 0LL, 1LL, v12);
LABEL_7:
  uint64_t v17 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  uint64_t v18 = *(uint64_t *)((char *)a1 + v17);
  *(uint64_t *)((char *)a1 + v1static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = *(uint64_t *)((char *)a2 + v17);
  swift_release(v18);
  return a1;
}

uint64_t sub_69060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6906C);
}

void sub_6906C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    sub_1D738();
  }

  else
  {
    uint64_t v6 = sub_26B0(&qword_D3A08);
    sub_214FC(a1 + *(int *)(a3 + 44), a2, v6);
  }

uint64_t sub_690E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_690EC);
}

void sub_690EC(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 2147483646)
  {
    *a1 = a2;
    sub_1D738();
  }

  else
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    sub_21514((uint64_t)a1 + *(int *)(a4 + 44), a2, a2, v7);
  }

void sub_6914C(uint64_t a1)
{
  v4[0] = &unk_A6408;
  v4[1] = &unk_A6408;
  v4[2] = "\t";
  v4[3] = &unk_A63F0;
  void v4[4] = &unk_A6408;
  v4[5] = "\t";
  void v4[6] = &unk_A63F0;
  sub_1E9D8(319LL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(void *)(v2 - 8) + 64LL;
    void v4[8] = &unk_A63F0;
    void v4[9] = &unk_A6408;
    swift_initStructMetadata(a1, 256LL, 10LL, v4, a1 + 16);
  }

char *sub_691E8(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (sub_16880((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_26B0(&qword_D3A08);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
      sub_A40C((uint64_t)v4, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = *(uint64_t *)((char *)a2 + v10);
    *(void *)&v4[v10] = v12;
    v4[v11] = *((_BYTE *)a2 + v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = &v4[v13];
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    v4[v14] = *((_BYTE *)a2 + v14);
    uint64_t v17 = a3[10];
    v4[a3[9]] = *((_BYTE *)a2 + a3[9]);
    v4[v17] = *((_BYTE *)a2 + v17);
    uint64_t v18 = a3[12];
    v4[a3[11]] = *((_BYTE *)a2 + a3[11]);
    v4[v18] = *((_BYTE *)a2 + v18);
    uint64_t v19 = a3[13];
    uint64_t v20 = a3[14];
    uint64_t v21 = *(uint64_t *)((char *)a2 + v19);
    *(void *)&v4[v19] = v21;
    uint64_t v22 = &v4[v20];
    uint64_t v23 = (char *)a2 + v20;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = a3[15];
    uint64_t v25 = a3[16];
    uint64_t v9 = *(uint64_t *)((char *)a2 + v24);
    *(void *)&v4[v24] = v9;
    uint64_t v26 = &v4[v25];
    uint64_t v27 = (char *)a2 + v25;
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    uint64_t v28 = a3[17];
    uint64_t v29 = &v4[v28];
    uint64_t v30 = (char *)a2 + v28;
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    swift_retain(v12);
    swift_bridgeObjectRetain(v21);
  }

  swift_retain(v9);
  return v4;
}

uint64_t sub_69390(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  swift_release(*(void *)(a1 + a2[5]));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[13]));
  return swift_release(*(void *)(a1 + a2[15]));
}

char *sub_6940C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = *(void *)&a2[v8];
  *(void *)&a1[v8] = v10;
  a1[v9] = a2[v9];
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  a1[v12] = a2[v12];
  uint64_t v15 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v15] = a2[v15];
  uint64_t v16 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v16] = a2[v16];
  uint64_t v17 = a3[13];
  uint64_t v18 = a3[14];
  uint64_t v19 = *(void *)&a2[v17];
  *(void *)&a1[v17] = v19;
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[15];
  uint64_t v23 = a3[16];
  uint64_t v24 = *(void *)&a2[v22];
  *(void *)&a1[v22] = v24;
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  uint64_t v27 = a3[17];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  swift_retain(v10);
  swift_bridgeObjectRetain(v19);
  swift_retain(v24);
  return a1;
}

char *sub_6958C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_16880((uint64_t)a1, 1LL, v6);
  int v8 = sub_16880((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = *(void *)&a1[v11];
  uint64_t v13 = *(void *)&a2[v11];
  *(void *)&a1[v11] = v13;
  swift_retain(v13);
  swift_release(v12);
  a1[a3[6]] = a2[a3[6]];
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  char v17 = v16[8];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v17;
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v18 = a3[13];
  uint64_t v19 = *(void *)&a2[v18];
  uint64_t v20 = *(void *)&a1[v18];
  *(void *)&a1[v18] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[14];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)uint64_t v22 = v24;
  uint64_t v25 = a3[15];
  uint64_t v26 = *(void *)&a1[v25];
  uint64_t v27 = *(void *)&a2[v25];
  *(void *)&a1[v25] = v27;
  swift_retain(v27);
  swift_release(v26);
  uint64_t v28 = a3[16];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = *(void *)v30;
  v29[8] = v30[8];
  *(void *)uint64_t v29 = v31;
  uint64_t v32 = a3[17];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = *(void *)v34;
  v33[8] = v34[8];
  *(void *)uint64_t v33 = v35;
  return a1;
}

char *sub_69788(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  a1[v8] = a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  a1[v10] = a2[v10];
  uint64_t v13 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v14] = a2[v14];
  uint64_t v15 = a3[14];
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  uint64_t v16 = &a1[v15];
  char v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[16];
  *(void *)&a1[a3[15]] = *(void *)&a2[a3[15]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[17];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  return a1;
}

char *sub_698EC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_16880((uint64_t)a1, 1LL, v6);
  int v8 = sub_16880((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  sub_A40C((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = *(void *)&a1[v11];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  swift_release(v12);
  uint64_t v13 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v16] = a2[v16];
  uint64_t v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v17] = a2[v17];
  uint64_t v18 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v19 = *(void *)&a1[v18];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a3[14];
  uint64_t v21 = a3[15];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = *(void *)&a1[v21];
  *(void *)&a1[v21] = *(void *)&a2[v21];
  swift_release(v24);
  uint64_t v25 = a3[16];
  uint64_t v26 = a3[17];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  uint64_t v29 = &a1[v26];
  uint64_t v30 = &a2[v26];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v30[8];
  return a1;
}

uint64_t sub_69AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_69AC4);
}

void sub_69AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_26B0(&qword_D3A08);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    sub_214FC(a1, a2, v6);
  }

  else
  {
    sub_69C40(*(int *)(a3 + 52));
    sub_1D738();
  }

uint64_t sub_69B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_69B2C);
}

void sub_69B2C()
{
  if (*(_DWORD *)(*(void *)(sub_26B0(&qword_D3A08) - 8) + 84LL) == v3)
  {
    uint64_t v4 = sub_47E28();
    sub_21514(v4, v5, v6, v7);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52)) = (v0 - 1);
    sub_1D738();
  }

void sub_69B7C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = &unk_A6408;
    v4[2] = &unk_A63F0;
    v4[3] = "\t";
    void v4[4] = &unk_A63F0;
    v4[5] = &unk_A63F0;
    void v4[6] = &unk_A63F0;
    v4[7] = &unk_A63F0;
    void v4[8] = &unk_A63F0;
    void v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[10] = "\t";
    v4[11] = &unk_A6408;
    v4[12] = "\t";
    v4[13] = "\t";
    swift_initStructMetadata(a1, 256LL, 14LL, v4, a1 + 16);
  }

uint64_t sub_69C20(uint64_t (*a1)(void))
{
  return a1();
}

void sub_69C30(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  *(void *)uint64_t v3 = 0LL;
  *(_BYTE *)(v3 + 8) = v2;
}

uint64_t sub_69C40@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + a1);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_A40C(v0, 0LL, 1LL, v2) = -1;
  }
  return (v2 + 1);
}

void sub_69C58()
{
}

uint64_t sub_69C68@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned int *)(a1 + 4);
}

double sub_69C78()
{
  *uint64_t v0 = 0u;
  return 0.0;
}

void *sub_69C88()
{
  *(void *)(v0 + 72) = v2;
  return sub_19558(v1);
}

void sub_69C94(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_69C9C(uint64_t a1)
{
  return sub_16880(v1, 1LL, a1);
}

uint64_t sub_69CC0@<X0>(id a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_26B0(&qword_D37D8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DateComponents(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v57 - v12;
  id v14 = [a1 dateTime];
  if (!v14)
  {
    sub_6A12C((uint64_t)v6, 1LL);
    goto LABEL_23;
  }

  uint64_t v15 = v14;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v14);

  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v16(v6, v11, v7);
  sub_6A12C((uint64_t)v6, 0LL);
  if (sub_16880((uint64_t)v6, 1LL, v7) == 1)
  {
LABEL_23:

    uint64_t result = sub_6A0D4((uint64_t)v6);
LABEL_25:
    uint64_t v20 = 0LL;
    uint64_t v42 = 0LL;
    uint64_t v43 = 0LL;
    unint64_t v44 = 0LL;
    uint64_t v45 = 0LL;
    unsigned __int8 v46 = 0;
LABEL_26:
    *(void *)a2 = v20;
    *(void *)(a2 + 8) = v42;
    *(void *)(a2 + 16) = v43;
    *(void *)(a2 + 24) = v44;
    *(void *)(a2 + 32) = v45;
    *(_BYTE *)(a2 + 40) = v46;
    return result;
  }

  uint64_t v17 = ((uint64_t (*)(char *, char *, uint64_t))v16)(v13, v6, v7);
  uint64_t v18 = DateComponents.hour.getter(v17);
  if ((v19 & 1) != 0 || (uint64_t v20 = v18, v21 = DateComponents.minute.getter(), (v22 & 1) != 0))
  {

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    goto LABEL_25;
  }

  uint64_t v60 = v21;
  uint64_t v23 = sub_4AD50(a1);
  if (v24) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = 0LL;
  }
  unint64_t v26 = 0xE000000000000000LL;
  if (v24) {
    unint64_t v26 = v24;
  }
  unint64_t v58 = v26;
  uint64_t v59 = v25;
  sub_4ACEC(a1);
  uint64_t v62 = v8;
  id v63 = a1;
  uint64_t v61 = v13;
  uint64_t v64 = v20;
  if (!v27)
  {
    uint64_t v32 = _swiftEmptyArrayStorage;
LABEL_33:
    id v47 = [a1 enabled];
    if (v47)
    {
      uint64_t v48 = v47;
      unsigned __int8 v46 = [v47 BOOLValue];
    }

    else
    {
      unsigned __int8 v46 = 1;
    }

    int64_t v49 = v32[2];
    if (v49)
    {
      uint64_t v66 = _swiftEmptyArrayStorage;
      sub_7BA3C(0LL, v49, 0);
      uint64_t v50 = 0LL;
      uint64_t v45 = v66;
      do
      {
        uint64_t v51 = RepeatSchedule.rawValue.getter(v32[v50 + 4]);
        uint64_t v66 = v45;
        unint64_t v53 = v45[2];
        unint64_t v52 = v45[3];
        if (v53 >= v52 >> 1)
        {
          BOOL v54 = sub_6A114(v52);
          sub_7BA3C((void *)v54, v55, v56);
          uint64_t v45 = v66;
        }

        ++v50;
        v45[2] = v53 + 1;
        v45[v53 + 4] = v51;
      }

      while (v49 != v50);
      swift_bridgeObjectRelease(v32);

      uint64_t v20 = v64;
    }

    else
    {
      swift_bridgeObjectRelease(v32);

      uint64_t v45 = _swiftEmptyArrayStorage;
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v61, v7);
    uint64_t v43 = v59;
    uint64_t v42 = v60;
    unint64_t v44 = v58;
    goto LABEL_26;
  }

  uint64_t v28 = v27;
  if (!((unint64_t)v27 >> 62))
  {
    uint64_t v29 = *(void *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFFF8LL));
    if (v29) {
      goto LABEL_13;
    }
LABEL_31:
    swift_bridgeObjectRelease(v28);
    uint64_t v32 = _swiftEmptyArrayStorage;
LABEL_32:
    uint64_t v20 = v64;
    goto LABEL_33;
  }

  if (v27 >= 0) {
    v27 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v27);
  if (!v29) {
    goto LABEL_31;
  }
LABEL_13:
  uint64_t v66 = _swiftEmptyArrayStorage;
  uint64_t result = (uint64_t)sub_7B9EC(0LL, v29 & ~(v29 >> 63), 0);
  if ((v29 & 0x8000000000000000LL) == 0)
  {
    uint64_t v31 = 0LL;
    uint64_t v32 = v66;
    unint64_t v65 = v28 & 0xC000000000000001LL;
    uint64_t v33 = v28;
    do
    {
      if (v65) {
        id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v28);
      }
      else {
        id v34 = *(id *)(v28 + 8 * v31 + 32);
      }
      uint64_t v35 = v34;
      id v36 = [v34 repeatSchedule];

      uint64_t v66 = v32;
      unint64_t v38 = v32[2];
      unint64_t v37 = v32[3];
      if (v38 >= v37 >> 1)
      {
        BOOL v39 = sub_6A114(v37);
        sub_7B9EC((void *)v39, v40, v41);
        uint64_t v32 = v66;
      }

      ++v31;
      v32[2] = v38 + 1;
      v32[v38 + 4] = v36;
      uint64_t v28 = v33;
    }

    while (v29 != v31);
    swift_bridgeObjectRelease(v33);
    a1 = v63;
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

uint64_t sub_6A0D4(uint64_t a1)
{
  uint64_t v2 = sub_26B0(&qword_D37D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

BOOL sub_6A114@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_6A12C(uint64_t a1, uint64_t a2)
{
  return sub_A40C(a1, a2, 1LL, v2);
}

uint64_t type metadata accessor for ModifyAlarmCATPatternsExecutor(uint64_t a1)
{
  return sub_8A38(a1, (uint64_t *)&unk_D61F0, (uint64_t)&nominal type descriptor for ModifyAlarmCATPatternsExecutor);
}

uint64_t sub_6A14C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D83F8);
}

uint64_t sub_6A188()
{
  uint64_t v1 = sub_26B0(&qword_D3A08);
  __chkstk_darwin(v1);
  sub_17390();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_26B0(&qword_D3BD0);
  uint64_t v6 = swift_allocObject(v5, 224LL, 7LL);
  sub_6B02C((__n128 *)v6, (__n128)xmmword_A4A50);
  uint64_t v7 = *v0;
  if (*v0)
  {
    uint64_t v8 = sub_47D54();
    uint64_t v9 = v7;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v8 = 0LL;
    *(void *)(v6 + 56) = 0LL;
    *(void *)(v6 + 64) = 0LL;
  }

  sub_6B010(v8, v9);
  uint64_t v10 = v0[1];
  if (v10)
  {
    uint64_t v11 = type metadata accessor for SirikitApp(0LL);
    uint64_t v12 = v10;
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    *(void *)(v6 + 104) = 0LL;
    *(void *)(v6 + 112) = 0LL;
  }

  *(void *)(v6 + 96) = v12;
  *(void *)(v6 + 120) = v11;
  *(void *)(v6 + 128) = 0x6C6562614C77656ELL;
  *(void *)(v6 + 136) = 0xE800000000000000LL;
  uint64_t v13 = type metadata accessor for ModifyAlarmIntentHandledRenameParameters(0LL);
  sub_4D80((uint64_t)v0 + *(int *)(v13 + 24), v4, &qword_D3A08);
  uint64_t v14 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880(v4, 1LL, v14) == 1)
  {
    sub_56290();
    swift_retain(v7);
    sub_19594(v4, &qword_D3A08);
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
  }

  else
  {
    *(void *)(v6 + 168) = v14;
    uint64_t v15 = sub_19558((void *)(v6 + 144));
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v15, v4, v14);
    sub_56290();
    swift_retain(v7);
  }

  sub_47E44();
  *(void *)(v6 + 176) = v16;
  *(void *)(v6 + 184) = 0xEA00000000006D72LL;
  uint64_t v17 = *(uint64_t *)((char *)v0 + *(int *)(v13 + 28));
  if (v17)
  {
    uint64_t v18 = sub_47D54();
  }

  else
  {
    uint64_t v18 = 0LL;
    *(void *)(v6 + 200) = 0LL;
    *(void *)(v6 + 208) = 0LL;
  }

  *(void *)(v6 + 192) = v17;
  *(void *)(v6 + 216) = v18;
  swift_retain(v17);
  return v6;
}

uint64_t sub_6A35C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for ModifyAlarmIntentHandledRenameParameters(0LL);
  v3[5] = v4;
  v3[6] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_6A3BC, 0LL, 0LL);
}

uint64_t sub_6A3BC()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = (void *)v0[6];
  uint64_t v3 = (void (*)(void *))v0[2];
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
  uint64_t v4 = (uint64_t)v1 + *(int *)(v2 + 24);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  sub_A40C(v4, 1LL, 1LL, v5);
  *(void *)((char *)v1 + *(int *)(v2 + 2sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8)) = 0LL;
  v3(v1);
  uint64_t v6 = sub_6A188();
  v0[7] = v6;
  uint64_t v7 = (void *)sub_47CC8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_6A474;
  return sub_6AFFC(0xD00000000000001FLL, 0x80000000000A9940LL, v6, v9);
}

uint64_t sub_6A474()
{
  uint64_t v5 = v3[7];
  uint64_t v4 = v3[8];
  *uint64_t v6 = *v2;
  void v3[9] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  if (!v1) {
    v3[10] = v0;
  }
  return sub_1EA50();
}

uint64_t sub_6A4D8()
{
  return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v1 + 80));
}

uint64_t sub_6A514()
{
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_6A54C(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch(sub_6A568, 0LL, 0LL);
}

uint64_t sub_6A568()
{
  v0[2] = 0LL;
  uint64_t v1 = (void (*)(void *))v0[5];
  v0[3] = 0LL;
  v0[4] = 0LL;
  v1(v0 + 2);
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  v0[8] = v2;
  v0[9] = v3;
  unint64_t v4 = v0[4];
  uint64_t v5 = sub_26B0(&qword_D3BD0);
  uint64_t v6 = (__n128 *)swift_allocObject(v5, 176LL, 7LL);
  v0[10] = v6;
  sub_6B02C(v6, (__n128)xmmword_A5A80);
  if (v2)
  {
    uint64_t v7 = sub_47D54();
    uint64_t v8 = v2;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = 0LL;
    v6[3].n128_u64[1] = 0LL;
    v6[4].n128_u64[0] = 0LL;
  }

  sub_6B010(v7, v8);
  if (v3)
  {
    type metadata accessor for SirikitApp(0LL);
    unint64_t v9 = v3;
  }

  else
  {
    unint64_t v9 = 0LL;
    v6[6].n128_u64[1] = 0LL;
    v6[7].n128_u64[0] = 0LL;
  }

  v6[6].n128_u64[0] = v9;
  sub_47E44();
  v6[7].n128_u64[1] = v10;
  v6[8].n128_u64[0] = v11;
  v6[8].n128_u64[1] = 0xEA00000000006D72LL;
  uint64_t v12 = 0LL;
  if (v4)
  {
    uint64_t v12 = type metadata accessor for AlarmAlarm(0LL);
  }

  else
  {
    v6[9].n128_u64[1] = 0LL;
    v6[10].n128_u64[0] = 0LL;
  }

  v0[11] = v4;
  v6[9].n128_u64[0] = v4;
  v6[10].n128_u64[1] = v12;
  sub_56290();
  swift_retain(v4);
  swift_retain(v2);
  uint64_t v14 = (void *)swift_task_alloc(v13);
  v0[12] = v14;
  void *v14 = v0;
  v14[1] = sub_6A6C0;
  return sub_6AFFC(0xD00000000000001DLL, 0x80000000000A9920LL, (uint64_t)v6, v16);
}

uint64_t sub_6A6C0()
{
  uint64_t v4 = v3[12];
  uint64_t v5 = v3[10];
  *uint64_t v6 = *v2;
  v3[13] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  if (!v1) {
    v3[14] = v0;
  }
  return sub_1EA50();
}

uint64_t sub_6A728()
{
  return sub_384A0(*(void *)(v2 + 112), *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_6A764()
{
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_6A7A4()
{
  uint64_t v1 = (void *)sub_47CC8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_47C64;
  return sub_47D84(0xD000000000000017LL, 0x80000000000A9900LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_6A804()
{
  uint64_t v1 = (void *)sub_47CC8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_46E44;
  return sub_47D84(0xD000000000000016LL, 0x80000000000A98E0LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_6A864()
{
  return type metadata accessor for ModifyAlarmCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for ModifyAlarmIntentHandledRenameParameters(uint64_t a1)
{
  return sub_8A38(a1, qword_D62B8, (uint64_t)&nominal type descriptor for ModifyAlarmIntentHandledRenameParameters);
}

uint64_t sub_6A880(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ModifyAlarmIntentHandledRenameParameters(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t *sub_6A8BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[1];
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for SpeakableString(0LL);
    swift_retain(v4);
    swift_retain(v8);
    if (sub_16880((uint64_t)v11, 1LL, v12))
    {
      uint64_t v13 = sub_26B0(&qword_D3A08);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      sub_A40C((uint64_t)v10, 0LL, 1LL, v12);
    }

    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v4 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v7 + v14) = v4;
  }

  swift_retain(v4);
  return v7;
}

uint64_t sub_6A9CC(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  return swift_release(*(void *)((char *)a1 + *(int *)(a2 + 28)));
}

uint64_t *sub_6AA48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  swift_retain(v6);
  swift_retain(v7);
  if (sub_16880((uint64_t)v10, 1LL, v11))
  {
    uint64_t v12 = sub_26B0(&qword_D3A08);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    sub_A40C((uint64_t)v9, 0LL, 1LL, v11);
  }

  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = *(uint64_t *)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v1sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = v14;
  swift_retain(v14);
  return a1;
}

uint64_t *sub_6AB2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  uint64_t v8 = a1[1];
  uint64_t v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for SpeakableString(0LL);
  int v14 = sub_16880((uint64_t)v11, 1LL, v13);
  int v15 = sub_16880((uint64_t)v12, 1LL, v13);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v11, v12, v13);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v17 = sub_26B0(&qword_D3A08);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
  sub_A40C((uint64_t)v11, 0LL, 1LL, v13);
LABEL_7:
  uint64_t v18 = *(int *)(a3 + 28);
  uint64_t v19 = *(uint64_t *)((char *)a1 + v18);
  uint64_t v20 = *(uint64_t *)((char *)a2 + v18);
  *(uint64_t *)((char *)a1 + v18) = v20;
  swift_retain(v20);
  swift_release(v19);
  return a1;
}

_OWORD *sub_6AC7C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  if (sub_16880((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_26B0(&qword_D3A08);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_A40C((uint64_t)v7, 0LL, 1LL, v9);
  }

  *(void *)((char *)a1 + *(int *)(a3 + 2sub_24FE0(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *sub_6AD44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  int v12 = sub_16880((uint64_t)v9, 1LL, v11);
  int v13 = sub_16880((uint64_t)v10, 1LL, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_26B0(&qword_D3A08);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  sub_A40C((uint64_t)v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = *(uint64_t *)((char *)a1 + v16);
  *(uint64_t *)((char *)a1 + v16) = *(uint64_t *)((char *)a2 + v16);
  swift_release(v17);
  return a1;
}

uint64_t sub_6AE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6AE88);
}

uint64_t sub_6AE88(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = sub_26B0(&qword_D3A08);
    return sub_16880((uint64_t)a1 + *(int *)(a3 + 24), a2, v9);
  }

uint64_t sub_6AF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6AF18);
}

void *sub_6AF18(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }

  else
  {
    uint64_t v7 = sub_26B0(&qword_D3A08);
    return (void *)sub_A40C((uint64_t)v5 + *(int *)(a4 + 24), a2, a2, v7);
  }

  return result;
}

void sub_6AF88(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = "\b";
  sub_1E9D8(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(v2 - 8) + 64LL;
    v4[3] = "\b";
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

uint64_t sub_6AFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_6B010@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  void v2[6] = a2;
  void v2[9] = result;
  v2[10] = 7368801LL;
  v2[11] = 0xE300000000000000LL;
  return result;
}

__n128 *sub_6B02C(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6D72616C61LL;
  result[2].n128_u64[1] = 0xE500000000000000LL;
  return result;
}

uint64_t sub_6B048()
{
  return swift_release(*(void *)(v0 + 88));
}

uint64_t sub_6B054()
{
  return sub_6A880(*(void *)(v0 + 48));
}

void sub_6B060()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_6B074( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  sub_26B0(&qword_D37D8);
  sub_215E4();
  __chkstk_darwin(v27);
  sub_6D1C8();
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v124 - v29;
  uint64_t v31 = sub_16C80();
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_6D268();
  uint64_t v33 = type metadata accessor for AlarmSearch(0LL);
  sub_1BBE4(v20);
  if (!v34)
  {
    uint64_t v126 = v21;
    if (qword_D30E0 != -1) {
      swift_once(&qword_D30E0, sub_6B8A4);
    }
    uint64_t v129 = sub_26F0(v31, (uint64_t)qword_D62F8);
    uint64_t v35 = (os_log_s *)v129;
    Logger.logObject.getter(v129, v36, v37, v38, v39, v40, v41, v42);
    os_log_type_t v43 = sub_16C50();
    if (os_log_type_enabled(v35, v43))
    {
      unint64_t v44 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)unint64_t v44 = 0;
      _os_log_impl(&dword_0, v35, v43, "Resolved alarmSearch from RRaaS is nil!", v44, 2u);
      sub_16AA8((uint64_t)v44);
    }

    uint64_t v45 = sub_6C3B4(v26);
    uint64_t v127 = v30;
    if (v45 && (uint64_t v46 = sub_670D8(), v47 = DateTime.time.getter(v46), v48 = sub_16FFC(), v47))
    {
      int v49 = dispatch thunk of DateTime.Time.meridiemSetByUser.getter(v48);
      sub_17324();
    }

    else
    {
      int v49 = 0;
    }

    int v128 = v49 ^ 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v22, v129, v31);
    uint64_t v50 = swift_retain_n(v45, 2LL);
    uint64_t v58 = v45;
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v50, v51, v52, v53, v54, v55, v56, v57);
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = sub_16AC4(18LL);
      uint64_t v62 = sub_16AC4(32LL);
      uint64_t v131 = v62;
      *(_DWORD *)uint64_t v61 = 136315394;
      uint64_t v124 = v62;
      uint64_t v125 = v58;
      if (v58 && (uint64_t v63 = DateTime.time.getter(v62)) != 0)
      {
        char v64 = dispatch thunk of DateTime.Time.meridiemSetByUser.getter(v63);
        sub_17324();
        if ((v64 & 1) != 0) {
          uint64_t v65 = 1702195828LL;
        }
        else {
          uint64_t v65 = 0x65736C6166LL;
        }
        if ((v64 & 1) != 0) {
          unint64_t v66 = 0xE400000000000000LL;
        }
        else {
          unint64_t v66 = 0xE500000000000000LL;
        }
      }

      else
      {
        unint64_t v66 = 0xE300000000000000LL;
        uint64_t v65 = 7104878LL;
      }

      uint64_t v130 = sub_3D10(v65, v66, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v61 + 4, v61 + 12);
      uint64_t v68 = v125;
      sub_1D750();
      sub_16C48();
      *(_WORD *)(v61 + 12) = 1024;
      LODWORD(v130) = v128 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 4, v61 + 14, v61 + 18);
      _os_log_impl( &dword_0,  v59,  v60,  "In toINAlarmSearch: SiriInference.meridiemSetByUser = %s, isMeridianInferred = %{BOOL}d",  (uint8_t *)v61,  0x12u);
      uint64_t v69 = v124;
      sub_16BB4(v124);
      sub_16AA8(v69);
      sub_16AA8(v61);

      uint64_t v67 = v68;
      sub_6D218();
    }

    else
    {

      sub_16EBC(v45);
      sub_6D218();
      uint64_t v67 = v45;
    }

    id v70 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v33));
    id v71 = sub_1D5F8(0LL, 0LL, 0LL, 0xE000000000000000LL);
    uint64_t v72 = sub_6B9F4();
    sub_6D2B4(v72, "setAlarmReferenceType:");
    uint64_t v73 = sub_54B8();
    if (v74)
    {
      NSString v75 = String._bridgeToObjectiveC()();
      uint64_t v73 = sub_16C48();
    }

    else
    {
      NSString v75 = 0LL;
    }

    sub_1718C(v73, "setLabel:");

    sub_6C03C();
    sub_6D2B4(v76, "setAlarmSearchStatus:");
    id v77 = [objc_allocWithZone(NSNumber) initWithBool:sub_6B8EC() & 1];
    sub_1718C((uint64_t)v77, "setIncludeSleepAlarm:");

    sub_6C1D0();
    sub_6D2B4(v78, "setPeriod:");
    uint64_t v79 = Bool.number.getter(v128 & 1);
    sub_1718C(v79, "setIsMeridianInferred:");

    LOBYTE(v79) = sub_6C604(v67);
    uint64_t v80 = swift_retain_n(v67, 2LL);
    uint64_t v88 = (os_log_s *)Logger.logObject.getter(v80, v81, v82, v83, v84, v85, v86, v87);
    os_log_type_t v89 = static os_log_type_t.default.getter();
    BOOL v90 = os_log_type_enabled(v88, v89);
    if ((v79 & 1) != 0)
    {
      if (v90)
      {
        uint64_t v91 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v92 = sub_16AC4(32LL);
        uint64_t v131 = v92;
        *(_DWORD *)uint64_t v91 = 136315138;
        if (v67 && DateTime.occurringIn.getter())
        {
          dispatch thunk of DateTime.DateTimeRange.description.getter();
          sub_6D1F8();
        }

        uint64_t v97 = sub_6D1E4();
        sub_6D138(v97);
        sub_16EBC(v67);
        sub_16D58();
        sub_16BD0(&dword_0, v88, v89, "Found time range info from SiriInference: %s", v91);
        sub_16BB4(v92);
        sub_16AA8(v92);
        sub_16AA8((uint64_t)v91);

        if (!v67) {
          goto LABEL_39;
        }
      }

      else
      {

        sub_16EBC(v67);
        if (!v67)
        {
LABEL_39:
          v96.super.Class isa = 0LL;
          goto LABEL_40;
        }
      }

      swift_retain(v67);
      v96.super.Class isa = DateTime.asDateComponentsRange()().super.isa;
      sub_17B94();
LABEL_40:
      uint64_t v98 = &selRef_setTimeRange_;
      goto LABEL_50;
    }

    if (v90)
    {
      uint64_t v93 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v94 = sub_16AC4(32LL);
      uint64_t v95 = v94;
      uint64_t v131 = v94;
      *(_DWORD *)uint64_t v93 = 136315138;
      if (v67 && DateTime.time.getter(v94))
      {
        dispatch thunk of DateTime.Time.description.getter();
        sub_6D1F8();
      }

      uint64_t v99 = sub_6D1E4();
      sub_6D138(v99);
      sub_16EBC(v67);
      sub_16D58();
      sub_16BD0(&dword_0, v88, v89, "Found time point info from SiriInference: %s", v93);
      sub_16BB4(v95);
      sub_16AA8(v95);
      sub_16AA8((uint64_t)v93);

      if (!v67) {
        goto LABEL_45;
      }
    }

    else
    {

      sub_16EBC(v67);
      if (!v67) {
        goto LABEL_45;
      }
    }

    swift_retain(v67);
    uint64_t v100 = (void *)DateTime.asTimePoint(shouldUseInferredMeridiem:insertToEndTime:)(0, 0);
    sub_17B94();
    if (v100)
    {
      id v101 = [v100 startDateComponents];

      if (v101)
      {
        uint64_t v102 = v126;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v101);

        uint64_t v103 = v102;
        uint64_t v104 = sub_2303C();
        uint64_t v105 = v103;
        uint64_t v106 = 0LL;
      }

      else
      {
        uint64_t v104 = sub_2303C();
        uint64_t v103 = v126;
        uint64_t v105 = v126;
        uint64_t v106 = 1LL;
      }

      sub_A40C(v105, v106, 1LL, v104);
      uint64_t v110 = (uint64_t)v127;
      sub_5AA0(v103, (uint64_t)v127);
      sub_2303C();
      if (sub_16880(v110, 1LL, v104) != 1)
      {
        v96.super.Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
        sub_172C8(v110, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8LL));
        goto LABEL_49;
      }

LABEL_48:
      v96.super.Class isa = 0LL;
LABEL_49:
      uint64_t v98 = &selRef_setTime_;
LABEL_50:
      objc_msgSend(v71, *v98, v96.super.isa, v124);

      id v111 = v71;
      uint64_t v112 = (os_log_s *)v129;
      Logger.logObject.getter(v111, v113, v114, v115, v116, v117, v118, v119);
      os_log_type_t v120 = sub_16C50();
      if (os_log_type_enabled(v112, v120))
      {
        uint64_t v121 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v122 = (void *)sub_16AC4(8LL);
        *(_DWORD *)uint64_t v121 = 138412290;
        uint64_t v131 = (uint64_t)v111;
        id v123 = v111;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &a9, v121 + 4, v121 + 12);
        *uint64_t v122 = v111;

        sub_16BD0(&dword_0, v112, v120, "alarmSearch Converted from UsoEntity_common_Alarm: %@", v121);
        sub_26B0(&qword_D3858);
        sub_16BB4((uint64_t)v122);
        sub_16AA8((uint64_t)v122);
        sub_16AA8((uint64_t)v121);
        sub_17B94();
      }

      else
      {

        sub_17B94();
      }

      goto LABEL_53;
    }

LABEL_53:
  sub_16CB0();
}

uint64_t sub_6B8A4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D62F8);
  sub_26F0(v0, (uint64_t)qword_D62F8);
  return static SiriTimeLog.alarmFlow.getter();
}

uint64_t sub_6B8EC()
{
  uint64_t v1 = type metadata accessor for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_4AF90();
  unint64_t v3 = sub_3FC8();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v0,  enum case for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues.appleAlarm_AlarmAttribute_AlarmAttributesSleep(_:),  v1);
  uint64_t v4 = *((void *)v3 + 2);
  if (v4)
  {
    int v5 = &v3[(*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)];
    uint64_t v6 = *(void *)(v2 + 72);
    sub_16A6C( &qword_D6318,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues);
    uint64_t v7 = v4 - 1;
    do
    {
      uint64_t v8 = v7;
      LOBYTE(v4) = dispatch thunk of static Equatable.== infix(_:_:)(v5, v0, v1);
      if ((v4 & 1) != 0) {
        break;
      }
      uint64_t v7 = v8 - 1;
      v5 += v6;
    }

    while (v8);
  }

  sub_172C8(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

uint64_t sub_6B9F4()
{
  if ((sub_6BA24() & 1) != 0) {
    return 3LL;
  }
  if ((sub_6BD30() & 1) != 0) {
    return 2LL;
  }
  return 0LL;
}

uint64_t sub_6BA24()
{
  uint64_t v0 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_26B0(&qword_D6358);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_26B0(&qword_D6360);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  int v13 = (char *)&v25 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter(v14);
  if (v17)
  {
    uint64_t v18 = v17;
    dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter();
    swift_release(v18);
  }

  else
  {
    sub_A40C((uint64_t)v16, 1LL, 1LL, v0);
  }

  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v13,  enum case for UsoEntity_common_Quantifier.DefinedValues.common_Quantifier_All(_:),  v0);
  sub_A40C((uint64_t)v13, 0LL, 1LL, v0);
  uint64_t v19 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_3F88((uint64_t)v16, (uint64_t)v6, &qword_D6360);
  sub_3F88((uint64_t)v13, v19, &qword_D6360);
  if (sub_16880((uint64_t)v6, 1LL, v0) == 1)
  {
    sub_7EC4((uint64_t)v13, &qword_D6360);
    sub_7EC4((uint64_t)v16, &qword_D6360);
    int v20 = sub_16880(v19, 1LL, v0);
    if (v20 == 1) {
      uint64_t v21 = &qword_D6360;
    }
    else {
      uint64_t v21 = &qword_D6358;
    }
    if (v20 == 1) {
      char v22 = -1;
    }
    else {
      char v22 = 0;
    }
  }

  else
  {
    sub_3F88((uint64_t)v6, (uint64_t)v10, &qword_D6360);
    if (sub_16880(v19, 1LL, v0) == 1)
    {
      sub_7EC4((uint64_t)v13, &qword_D6360);
      sub_7EC4((uint64_t)v16, &qword_D6360);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
      char v22 = 0;
      uint64_t v21 = &qword_D6358;
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v19, v0);
      sub_16A6C( &qword_D6368,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_Quantifier.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_Quantifier.DefinedValues);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0);
      uint64_t v23 = *(void (**)(char *, uint64_t))(v1 + 8);
      v23(v3, v0);
      uint64_t v21 = &qword_D6360;
      sub_7EC4((uint64_t)v13, &qword_D6360);
      sub_7EC4((uint64_t)v16, &qword_D6360);
      v23(v10, v0);
    }
  }

  sub_7EC4((uint64_t)v6, v21);
  return v22 & 1;
}

uint64_t sub_6BD30()
{
  uint64_t v0 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_26B0(&qword_D3A40);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_26B0(&qword_D3A48);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  int v13 = (char *)&v25 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter(v14);
  if (v17)
  {
    uint64_t v18 = v17;
    dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter();
    swift_release(v18);
  }

  else
  {
    sub_A40C((uint64_t)v16, 1LL, 1LL, v0);
  }

  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v13,  enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Next(_:),  v0);
  sub_A40C((uint64_t)v13, 0LL, 1LL, v0);
  uint64_t v19 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_3F88((uint64_t)v16, (uint64_t)v6, &qword_D3A48);
  sub_3F88((uint64_t)v13, v19, &qword_D3A48);
  if (sub_16880((uint64_t)v6, 1LL, v0) == 1)
  {
    sub_7EC4((uint64_t)v13, &qword_D3A48);
    sub_7EC4((uint64_t)v16, &qword_D3A48);
    int v20 = sub_16880(v19, 1LL, v0);
    if (v20 == 1) {
      uint64_t v21 = &qword_D3A48;
    }
    else {
      uint64_t v21 = &qword_D3A40;
    }
    if (v20 == 1) {
      char v22 = -1;
    }
    else {
      char v22 = 0;
    }
  }

  else
  {
    sub_3F88((uint64_t)v6, (uint64_t)v10, &qword_D3A48);
    if (sub_16880(v19, 1LL, v0) == 1)
    {
      sub_7EC4((uint64_t)v13, &qword_D3A48);
      sub_7EC4((uint64_t)v16, &qword_D3A48);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
      char v22 = 0;
      uint64_t v21 = &qword_D3A40;
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v19, v0);
      sub_16A6C( &qword_D3A50,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_ListPosition.DefinedValues);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0);
      uint64_t v23 = *(void (**)(char *, uint64_t))(v1 + 8);
      v23(v3, v0);
      uint64_t v21 = &qword_D3A48;
      sub_7EC4((uint64_t)v13, &qword_D3A48);
      sub_7EC4((uint64_t)v16, &qword_D3A48);
      v23(v10, v0);
    }
  }

  sub_7EC4((uint64_t)v6, v21);
  return v22 & 1;
}

void sub_6C03C()
{
  uint64_t v2 = type metadata accessor for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_6D1C8();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = sub_3FC8();
  uint64_t v8 = *(void (**)(char *, void, uint64_t))(v3 + 104);
  v8( v6,  enum case for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues.appleAlarm_AlarmAttribute_AlarmAttributesNotSet(_:),  v2);
  uint64_t v9 = *((void *)v7 + 2);
  if (v9)
  {
    uint64_t v15 = v8;
    sub_6D2F4();
    uint64_t v10 = *(void *)(v3 + 72);
    sub_16A6C( &qword_D6318,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues);
    sub_6D308();
    while ((sub_6D258(v1, (uint64_t)v6) & 1) == 0)
    {
      v1 += v10;
      if (!--v9)
      {
        sub_16F40();
        uint64_t v8 = v15;
        goto LABEL_6;
      }
    }

    sub_16F40();
    sub_172C8((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }

  else
  {
LABEL_6:
    uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
    v11(v6, v2);
    v8( (char *)v0,  enum case for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues.appleAlarm_AlarmAttribute_AlarmAttributesSet(_:),  v2);
    uint64_t v12 = *((void *)v7 + 2);
    if (v12)
    {
      sub_6D2F4();
      uint64_t v13 = *(void *)(v3 + 72);
      sub_16A6C( &qword_D6318,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_appleAlarm_AlarmAttribute.DefinedValues);
      sub_6D308();
      do
      {
        if ((sub_6D258(v1, v0) & 1) != 0) {
          break;
        }
        v1 += v13;
        --v12;
      }

      while (v12);
      sub_16F40();
    }

    v11((char *)v0, v2);
  }

  sub_16F40();
  sub_16CB0();
}

void sub_6C1D0()
{
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v1);
  uint64_t v6 = (char *)&v19 - v5;
  uint64_t v7 = dispatch thunk of UsoEntity_common_Alarm.endDateTime.getter(v4);
  if (v7)
  {
    uint64_t v8 = dispatch thunk of UsoEntity_common_DateTime.time.getter(v7);
    uint64_t v7 = sub_17324();
    if (v8)
    {
      uint64_t v9 = dispatch thunk of UsoEntity_common_Time.occurringIn.getter(v7);
      uint64_t v7 = swift_release(v8);
      if (v9) {
        goto LABEL_6;
      }
    }
  }

  uint64_t v10 = dispatch thunk of UsoEntity_common_Alarm.endDateTime.getter(v7);
  if (v10 && (v11 = v10, uint64_t v9 = dispatch thunk of UsoEntity_common_DateTime.occurringIn.getter(), swift_release(v11), v9))
  {
LABEL_6:
    uint64_t v12 = swift_retain(v9);
    dispatch thunk of UsoEntity_common_DateTimeRange.definedValue.getter(v12);
    sub_16EBC(v9);
    uint64_t v13 = type metadata accessor for UsoEntity_common_DateTimeRange.DefinedValues(0LL);
    if (sub_16880((uint64_t)v6, 1LL, v13) != 1)
    {
      sub_3F88((uint64_t)v6, (uint64_t)v3, &qword_D6350);
      uint64_t v14 = *(void *)(v13 - 8);
      int v15 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v3, v13);
      if (v15 != enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Afternoon(_:)
        && v15 != enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Night(_:)
        && v15 != enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Evening(_:)
        && v15 != enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Morning(_:))
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v3, v13);
      }
    }
  }

  else
  {
    uint64_t v16 = type metadata accessor for UsoEntity_common_DateTimeRange.DefinedValues(0LL);
    sub_23050((uint64_t)v6, v17, v18, v16);
  }

  sub_7EC4((uint64_t)v6, &qword_D6350);
  sub_214A4();
}

#error "6C568: call analysis failed (funcsize=136)"
uint64_t sub_6C604(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  if (result)
  {
    uint64_t result = DateTime.occurringIn.getter();
    if (result)
    {
      uint64_t v1 = swift_release(result);
      uint64_t v2 = dispatch thunk of UsoEntity_common_Alarm.endDateTime.getter(v1);
      if (v2
        && (uint64_t v3 = v2, v4 = dispatch thunk of UsoEntity_common_DateTime.time.getter(), v5 = swift_release(v3), v4)
        && (uint64_t v6 = dispatch thunk of UsoEntity_common_Time.hour.getter(v5), swift_release(v4), v6))
      {
        swift_release(v6);
        return 0LL;
      }

      else
      {
        return 1LL;
      }
    }
  }

  return result;
}

void sub_6C684(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_6D17C();
    if (v8 != v9)
    {
      sub_6D2DC();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_6D16C();
    }
  }

  sub_6D29C();
  if (v5)
  {
    uint64_t v10 = sub_26B0((uint64_t *)&off_D3A00);
    uint64_t v11 = (char *)sub_38F80(v10, 16 * v5 + 32);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v4;
    *((void *)v11 + sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_6CE9C((char *)(a4 + 32), v4, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
    sub_16D58();
  }

  else
  {
    uint64_t v13 = sub_6D248();
    sub_6CAB4(v13, v14, v15, v16);
  }

  sub_1D738();
}

uint64_t sub_6C73C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_6C750(a1, a2, a3, a4, &qword_D6338, (void (*)(void))&type metadata accessor for RREntity);
}

uint64_t sub_6C750(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    sub_6D17C();
    if (v10 != v11)
    {
      sub_6D2DC();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_6D09C();
        sub_6D2E8();
        uint64_t v31 = 16LL;
LABEL_25:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)(v26, v27, v28, v29, v31, 2LL, v30, 24LL);
        __break(1u);
        return result;
      }

      sub_6D16C();
    }
  }

  else
  {
    uint64_t v9 = a2;
  }

  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = sub_26B0(a5);
  uint64_t v15 = *(void *)(((uint64_t (*)(void))a6)(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = j__malloc_size(v19);
  if (!v16) {
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000LL && v16 == -1)
  {
    sub_6D09C();
    sub_6D2E8();
    uint64_t v31 = 31LL;
    goto LABEL_25;
  }

  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(((uint64_t (*)(void))a6)(0LL) - 8) + 80LL);
  uint64_t v23 = (v22 + 32) & ~v22;
  unint64_t v24 = (unint64_t)v19 + v23;
  if ((a1 & 1) != 0)
  {
    sub_6CF4C(a4 + v23, v12, v24, a6);
    *(void *)(a4 + 16) = 0LL;
    sub_16D58();
  }

  else
  {
    sub_6CC98(0LL, v12, v24, a4, (uint64_t (*)(void))a6);
  }

  return (uint64_t)v19;
}

void sub_6C8F0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_6D17C();
    if (v8 != v9)
    {
      sub_6D2DC();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_6D16C();
    }
  }

  sub_6D29C();
  if (v5)
  {
    uint64_t v10 = sub_26B0(&qword_D6370);
    char v11 = (char *)sub_38F80(v10, 8 * v5 + 32);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v4;
    *((void *)v11 + sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }

  else
  {
    char v11 = (char *)&_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_6CEF4((char *)(a4 + 32), v4, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
    sub_16D58();
  }

  else
  {
    uint64_t v13 = sub_6D248();
    sub_6CBA8(v13, v14, v15, v16);
  }

  sub_1D738();
}

uint64_t sub_6C9A8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_6C750( a1,  a2,  a3,  a4,  &qword_D5360,  (void (*)(void))&type metadata accessor for SpeakableString);
}

uint64_t sub_6C9BC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_6C750(a1, a2, a3, a4, &qword_D6340, (void (*)(void))&type metadata accessor for DisplayHint);
}

uint64_t sub_6C9D0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_6C750(a1, a2, a3, a4, &qword_D6348, (void (*)(void))&type metadata accessor for SemanticValue);
}

uint64_t sub_6C9E4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_6C750( a1,  a2,  a3,  a4,  &qword_D41A8,  (void (*)(void))&type metadata accessor for SiriAlarmSnippetModel);
}

void sub_6C9F8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_6D17C();
    if (v8 != v9)
    {
      sub_6D2DC();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_6D16C();
    }
  }

  sub_6D29C();
  if (v5)
  {
    uint64_t v10 = sub_26B0(&qword_D6378);
    char v11 = (char *)sub_38F80(v10, 48 * v5 + 32);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v4;
    *((void *)v11 + sub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }

  else
  {
    char v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_6D014((char *)(a4 + 32), v4, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
    sub_16D58();
  }

  else
  {
    uint64_t v13 = sub_6D248();
    sub_6CD94(v13, v14, v15, v16);
  }

  sub_214A4();
}

uint64_t sub_6CAB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_6CBA8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_6CC98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_6D09C();
    sub_6D2E8();
    uint64_t v23 = 51LL;
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_16D58();
    return v14;
  }

  sub_6D09C();
  sub_6D2E8();
  uint64_t v23 = 49LL;
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)(v18, v19, v20, v21, v23, 2LL, v22, 25LL);
  __break(1u);
  return result;
}

uint64_t sub_6CD94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 48 * a1 + 32;
  unint64_t v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_6CE90(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_6CF4C(a1, a2, a3, (void (*)(void))&type metadata accessor for SpeakableString);
}

char *sub_6CE9C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_6D09C();
    uint64_t result = (char *)sub_6D0B0( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_6D0E4(a3, result);
  }

  return result;
}

char *sub_6CEF4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_6D09C();
    uint64_t result = (char *)sub_6D0B0( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_6D0E4(a3, result);
  }

  return result;
}

uint64_t sub_6CF4C(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_6D09C();
    uint64_t result = sub_6D0B0( (uint64_t)"Fatal error",  v11,  v12,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v13,  v14,  (uint64_t)"Swift/UnsafePointer.swift",  v15,  v16,  v17,  v18);
    __break(1u);
  }

  else if (a3 < a1 {
         || (uint64_t result = ((uint64_t (*)(void))a4)(0LL),
  }
             a1 + *(void *)(*(void *)(result - 8) + 72LL) * a2 <= a3))
  {
    a4(0LL);
    uint64_t v10 = sub_6D2C8();
    return swift_arrayInitWithTakeFrontToBack(v10);
  }

  else if (a3 != a1)
  {
    uint64_t v9 = sub_6D2C8();
    return swift_arrayInitWithTakeBackToFront(v9);
  }

  return result;
}

char *sub_6D014(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }

  return __src;
}

  ;
}

uint64_t sub_6D0B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_6D0C8(uint64_t a1, uint64_t a2)
{
  return swift_retain_n(v2, 2LL);
}

void *sub_6D0E4@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

  ;
}

uint64_t sub_6D110( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v11, v10);
}

uint64_t sub_6D12C(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  return sub_3D10(a1, a2, (uint64_t *)va);
}

uint64_t sub_6D138(uint64_t a1)
{
  *(void *)(v3 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v3 - 88, v2, v1 + 12);
}

uint64_t sub_6D154( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, v11 + 8, v10, v9);
}

  ;
}

  ;
}

uint64_t sub_6D18C(float a1)
{
  *uint64_t v1 = a1;
  return type metadata accessor for DateTime(0LL);
}

uint64_t sub_6D1A0(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_6D1B4(float a1)
{
  *uint64_t v1 = a1;
  return type metadata accessor for DateTime(0LL);
}

  ;
}

uint64_t sub_6D1E4()
{
  return sub_3D10(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_6D1F8()
{
  return swift_release(v0);
}

uint64_t sub_6D208()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_6D218()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_6D228(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

BOOL sub_6D238(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_6D248()
{
  return 0LL;
}

uint64_t sub_6D258(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v2);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_6D2AC()
{
  return UsoEntity_common_RecurringDateTime.toDateTimeWithMeridiemSetByUser()();
}

id sub_6D2B4(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_6D2BC()
{
  return static DateTimeInferenceUtils.inferDateTimeRange(from:anchorDate:)(v0, v1);
}

uint64_t sub_6D2C8()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_6D308()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_6D314(char a1)
{
  __asm { BR              X10 }

uint64_t sub_6D340()
{
  uint64_t v1 = enum case for AlarmNLv4Constants.AlarmVerb.update(_:);
  uint64_t v2 = type metadata accessor for AlarmNLv4Constants.AlarmVerb(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v0, v1, v2);
}

uint64_t sub_6D3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[19] = a2;
  v3[20] = a3;
  v3[18] = a1;
  uint64_t v4 = type metadata accessor for DirectInvocationUtils.Alarm.UserInfoKey(0LL);
  v3[21] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[22] = v5;
  v3[23] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Parse.DirectInvocation(0LL);
  v3[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[25] = v7;
  v3[26] = sub_250D0(v7);
  v3[27] = sub_19884();
  v3[28] = sub_19884();
  uint64_t v8 = type metadata accessor for Parse(0LL);
  v3[29] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[30] = v9;
  v3[31] = sub_250D0(v9);
  v3[32] = sub_19884();
  uint64_t v10 = type metadata accessor for Input(0LL);
  v3[33] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[34] = v11;
  v3[35] = sub_250D0(v11);
  v3[36] = sub_19884();
  v3[37] = sub_19884();
  return swift_task_switch(sub_6D4C0, 0LL, 0LL);
}

uint64_t sub_6D4C0()
{
  if (qword_D30E8 != -1) {
    swift_once(&qword_D30E8, sub_6ED20);
  }
  uint64_t v339 = (uint64_t)(v0 + 12);
  uint64_t v2 = v0 + 17;
  uint64_t v379 = v0;
  uint64_t v4 = (os_log_s **)(v0 + 18);
  uint64_t v3 = v0[18];
  uint64_t v5 = v0[37];
  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v8 = sub_16C80();
  uint64_t v9 = (os_log_s *)sub_26F0(v8, (uint64_t)qword_D6380);
  uint64_t v369 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v10 = v369(v5, v3, v6);
  Logger.logObject.getter(v10, v11, v12, v13, v14, v15, v16, v17);
  os_log_type_t v18 = sub_6FC04();
  BOOL v19 = os_log_type_enabled(v9, v18);
  uint64_t v20 = v4[15];
  uint64_t v350 = (uint64_t)v2;
  if (v19)
  {
    uint64_t v21 = v2;
    uint64_t v22 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v359 = sub_16AC4(32LL);
    v381[0] = v359;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v374 = (uint64_t (*)(void))(v22 + 4);
    uint64_t v23 = sub_9570( (unint64_t *)&unk_D37B0,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v20, v23);
    unint64_t v26 = v25;
    *uint64_t v21 = sub_6FB5C(v24, v25, v27, v28, v29, v30, v31, v32, v317, v328, v339);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v21, v4, v22 + 4, v22 + 12);
    unint64_t v33 = v26;
    uint64_t v1 = (uint8_t *)&type metadata for Any;
    swift_bridgeObjectRelease(v33);
    sub_6FB48();
    sub_16BD0(&dword_0, v9, v18, "AlarmDisambiguation.parsePromptResult(input:items:) parsing input: %s", v22);
    sub_16BB4(v359);
    sub_16AA8(v359);
    sub_16AA8((uint64_t)v22);
  }

  else
  {
    sub_6FB48();
  }

  uint64_t v34 = v379;
  uint64_t v36 = v379 + 29;
  uint64_t v35 = v379[29];
  uint64_t v37 = v379[32];
  uint64_t v38 = v379[30];
  uint64_t v39 = (void *)v379[18];
  Input.parse.getter(v40);
  int v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 88))(v37, v35);
  if (v41 == enum case for Parse.NLv3IntentOnly(_:)) {
    goto LABEL_7;
  }
  if (v41 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_6FB20();
    uint64_t v56 = sub_26B0(&qword_D3768);
    sub_6FBC8(v56);
    sub_17144();
    uint64_t v57 = sub_6FBAC();
    v59(v57, v58);
    goto LABEL_10;
  }

  if (v41 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v153 = (os_log_s *)v379[28];
    uint64_t v154 = v379[32];
    uint64_t v155 = v379[27];
    uint64_t v156 = v379[25];
    uint64_t v36 = v379 + 24;
    uint64_t v157 = v379[24];
    (*(void (**)(uint64_t, void))(v379[30] + 96LL))(v154, v379[29]);
    sub_174B8((uint64_t)v153, v154, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v156 + 32));
    uint64_t v158 = *(uint64_t (**)(uint64_t, os_log_s *, uint64_t))(v156 + 16);
    uint64_t v159 = v158(v155, v153, v157);
    sub_6FABC( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v317,  v328,  v339,  (uint64_t)(v379 + 9),  (uint64_t)(v379 + 11));
    os_log_type_t v167 = sub_16C50();
    BOOL v168 = sub_457A0(v167);
    uint64_t v169 = (os_log_s *)v379[27];
    if (v168)
    {
      uint64_t v170 = v379[26];
      uint64_t v377 = v379[25];
      uint64_t v171 = v379[24];
      uint64_t v172 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v173 = sub_16AC4(32LL);
      v381[0] = v173;
      *(_DWORD *)uint64_t v172 = 136315138;
      v158(v170, v169, v171);
      uint64_t v174 = String.init<A>(describing:)(v170, v171);
      uint64_t v154 = v175;
      v379[11] = sub_6FB5C(v174, v175, v176, v177, v178, v179, v180, v181, v323, (uint64_t)(v172 + 4), v345);
      uint64_t v34 = v379;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v364, v345, v334, v172 + 12);
      sub_45BCC();
      uint64_t v378 = *(uint64_t (**)(void))(v377 + 8);
      ((void (*)(os_log_s *, uint64_t))v378)(v169, v171);
      sub_16BD0( &dword_0,  v153,  (os_log_type_t)v1,  "AlarmDisambiguation.parsePromptResult(input:items:) direct invocation: %s",  v172);
      sub_16BB4(v173);
      sub_16AA8(v173);
      sub_16AA8((uint64_t)v172);
    }

    else
    {
      uint64_t v378 = *(uint64_t (**)(void))(v379[25] + 8LL);
      ((void (*)(void, void))v378)(v379[27], v379[24]);
    }

    uint64_t v197 = v379 + 28;
    uint64_t v199 = Parse.DirectInvocation.userData.getter(v198);
    if (v199)
    {
      uint64_t v200 = v199;
      uint64_t v202 = v34[22];
      uint64_t v201 = v34[23];
      uint64_t v154 = v34[21];
      uint64_t v203 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v202 + 104))( v201,  enum case for DirectInvocationUtils.Alarm.UserInfoKey.alarmId(_:),  v154);
      uint64_t v204 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v203);
      uint64_t v206 = v205;
      (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v201, v154);
      sub_288F4(v204, v206, v200, (_OWORD *)v34 + 1);
      sub_16F40();
      sub_16EDC();
      if (v34[5])
      {
        uint64_t v207 = swift_dynamicCast(v34 + 6, v34 + 2, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
        if ((v207 & 1) != 0)
        {
          uint64_t v215 = static AlarmID.alarmUUID(fromIdentifier:)(v34[6], v34[7]);
          uint64_t v217 = v216;
          uint64_t v207 = sub_16C48();
          if (v217)
          {
            uint64_t v218 = swift_bridgeObjectRetain_n(v217, 2LL);
            uint64_t v226 = (os_log_s *)sub_6FABC(v218, v219, v220, v221, v222, v223, v224, v225, v323, v334, v345, v355, v364);
            os_log_type_t v227 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v226, v227))
            {
              uint64_t v228 = (uint8_t *)sub_16AC4(12LL);
              uint64_t v229 = sub_16AC4(32LL);
              v381[0] = v229;
              *(_DWORD *)uint64_t v228 = 136315138;
              swift_bridgeObjectRetain(v217);
              v34[10] = sub_6FBFC(v215, v230, v381);
              uint64_t v231 = v34 + 10;
              uint64_t v34 = v379;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v231, v365, v228 + 4, v228 + 12);
              swift_bridgeObjectRelease_n(v217, 3LL);
              sub_16BD0( &dword_0,  v226,  v227,  "AlarmDisambiguation.parsePromptResult(input:items:) Direct invocation alarm ID: %s",  v228);
              sub_16BB4(v229);
              sub_16AA8(v229);
              sub_16AA8((uint64_t)v228);
            }

            else
            {
              swift_bridgeObjectRelease_n(v217, 2LL);
            }

            uint64_t v305 = v34[28];
            uint64_t v306 = v34[24];
            uint64_t v307 = v34[20];
            v34[9] = v34[19];
            uint64_t v308 = (void *)swift_task_alloc(48LL);
            v308[2] = v307;
            v308[3] = v215;
            v308[4] = v217;
            uint64_t v309 = type metadata accessor for Array(0LL, v307);
            sub_45B94();
            uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v309);
            uint64_t v137 = _ArrayProtocol.filter(_:)(sub_6FA58, v308, v309, WitnessTable);
            sub_16D58();
            sub_197C0();
            sub_6FB40( v305,  v306,  v311,  v312,  v313,  v314,  v315,  v316,  v324,  v335,  v346,  v356,  v365,  (uint64_t)(v379 + 28),  v378);
            goto LABEL_36;
          }
        }

        goto LABEL_51;
      }
    }

    else
    {
      *((_OWORD *)v34 + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0u;
      *((_OWORD *)v34 + 2) = 0u;
    }

    uint64_t v207 = sub_19594((uint64_t)(v34 + 2), (uint64_t *)&unk_D4860);
LABEL_51:
    uint64_t v270 = (void *)sub_6FABC(v207, v208, v209, v210, v211, v212, v213, v214, v323, v334, v345, v355, v364);
    os_log_type_t v271 = static os_log_type_t.error.getter();
    if (sub_1990C(v271))
    {
      uint64_t v272 = (_WORD *)sub_16AC4(2LL);
      sub_16CE4(v272);
      sub_6FAC4( &dword_0,  v273,  v274,  "AlarmDisambiguation.parsePromptResult(input:items:) No alarmId in direct invocation");
      sub_16AA8(v154);
    }

    sub_26B0(&qword_D4190);
    unint64_t v275 = sub_24EA4();
    uint64_t v276 = sub_25234(v275);
    sub_6FB74(v276, v277, v278, v279, v280, v281, v282, v283);
    uint64_t v284 = v378;
    goto LABEL_56;
  }

  if (v41 == enum case for Parse.NLv4IntentOnly(_:))
  {
    sub_6FB20();
    swift_unknownObjectRelease(*v39);
LABEL_10:
    uint64_t v60 = (uint64_t)(v379 + 16);
    uint64_t v61 = sub_6FB64(v379[35], v49, v50, v51, v52, v53, v54, v55, v317, v328, v339, v350, v359, v369);
    sub_6FABC(v61, v62, v63, v64, v65, v66, v67, v68, v318, v329, v340, v351, v360);
    os_log_type_t v69 = sub_6FC04();
    BOOL v70 = os_log_type_enabled(v9, v69);
    id v77 = (os_log_s *)v379[35];
    uint64_t v78 = v379[33];
    uint64_t v361 = (uint64_t)(v379 + 16);
    if (v70)
    {
      uint64_t v79 = v379[31];
      uint64_t v371 = v379[29];
      uint64_t v80 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v81 = sub_16AC4(32LL);
      v381[0] = v81;
      *(_DWORD *)uint64_t v80 = 136315138;
      Input.parse.getter(v81);
      uint64_t v82 = String.init<A>(describing:)(v79, v371);
      uint64_t v60 = v83;
      v379[16] = sub_6FB5C(v82, v83, v84, v85, v86, v87, v88, v89, v319, (uint64_t)(v80 + 4), v341);
      uint64_t v1 = (uint8_t *)&type metadata for Any;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v361, v352, v331, v80 + 12);
      sub_45BCC();
      sub_6FB40((uint64_t)v77, v78, v90, v91, v92, v93, v94, v95, v320, v331, v342, v352, v361, v371, v374);
      sub_16BD0(&dword_0, v9, v69, "AlarmDisambiguation.parsePromptResult(input:items:) nlv3 parse: %s", v80);
      sub_16BB4(v81);
      sub_16AA8(v81);
      sub_16AA8((uint64_t)v80);
    }

    else
    {
      sub_6FB40((uint64_t)v77, v78, v71, v72, v73, v74, v75, v76, v319, v330, v341, v352, v361, v370, v374);
    }

    sub_6F1D4(*v4);
    if (v96)
    {
      uint64_t v34 = v379;
      uint64_t v104 = v379 + 15;
      id v105 = v96;
      sub_6FABC((uint64_t)v105, v106, v107, v108, v109, v110, v111, v112, v321, v332, v343, v353, v362);
      os_log_type_t v113 = sub_16C50();
      uint64_t v114 = &stru_D2000;
      if (os_log_type_enabled(v77, v113))
      {
        uint64_t v1 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v375 = sub_16AC4(32LL);
        v381[0] = v375;
        *(_DWORD *)uint64_t v1 = 136315138;
        id v115 = v105;
        id v116 = [v115 description];
        uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);

        uint64_t v114 = &stru_D2000;
        uint64_t v118 = v117;
        uint64_t v104 = v379 + 15;
        v379[15] = sub_6FBFC(v118, v119, v381);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v379 + 15, v363, v1 + 4, v1 + 12);
        sub_16D58();

        sub_16BD0( &dword_0,  v77,  v113,  "AlarmDisambiguation.parsePromptResult(input:items:) Using parsed AlarmSearch: %s",  v1);
        uint64_t v60 = v375;
        sub_16BB4(v375);
        uint64_t v34 = v379;
        sub_16AA8(v375);
        sub_16AA8((uint64_t)v1);
      }

      else
      {
      }

      uint64_t v124 = (void *)AlarmReferenceType.rawValue.getter([v105 alarmReferenceType]);
      uint64_t v125 = AlarmReferenceType.rawValue.getter(3LL);
      if (v124 == (void *)v125)
      {
        sub_6FABC(v125, v126, v127, v128, v129, v130, v131, v132, v322, v333, v344, v354, v363);
        os_log_type_t v133 = sub_16C50();
        if (sub_1990C(v133))
        {
          uint64_t v134 = (_WORD *)sub_16AC4(2LL);
          sub_16CE4(v134);
          sub_6FAC4( &dword_0,  v135,  v136,  "AlarmDisambiguation.parsePromptResult(input:items:) User mentioned .all for disambiguation");
          sub_16AA8(v60);
        }

        uint64_t v137 = v34[19];

        sub_45B94();
        goto LABEL_36;
      }

      id v138 = v105;
      sub_6FABC((uint64_t)v138, v139, v140, v141, v142, v143, v144, v145, v322, v333, v344, v354, v363);
      os_log_type_t v146 = sub_16C50();
      if (sub_457A0(v146))
      {
        uint64_t v376 = v34 + 14;
        uint64_t v147 = (uint8_t *)sub_16AC4(12LL);
        uint64_t v380 = sub_16AC4(32LL);
        v381[0] = v380;
        *(_DWORD *)uint64_t v147 = 136315138;
        id v148 = v138;
        id v149 = [v148 *(SEL *)&v114[18].align];
        uint64_t v150 = v104;
        uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);

        uint64_t v34 = v379;
        *uint64_t v376 = sub_6FBFC(v151, v152, v381);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v376, v150, v147 + 4, v147 + 12);
        sub_16D58();

        sub_16BD0( &dword_0,  (os_log_s *)v124,  (os_log_type_t)v1,  "AlarmDisambiguation.parsePromptResult(input:items:) Filtering disambiguation results using alarmSearch: %s",  v147);
        sub_16BB4(v380);
        sub_16AA8(v380);
        sub_16AA8((uint64_t)v147);
      }

      else
      {
      }

      uint64_t v183 = v34[19];
      uint64_t v182 = v34[20];
      v34[12] = v183;
      uint64_t v184 = swift_task_alloc(32LL);
      *(void *)(v184 + 16) = v182;
      *(void *)(v184 + 24) = v138;
      uint64_t v185 = type metadata accessor for Array(0LL, v182);
      swift_bridgeObjectRetain(v183);
      uint64_t v186 = swift_getWitnessTable(&protocol conformance descriptor for [A], v185);
      uint64_t v137 = _ArrayProtocol.filter(_:)(sub_6FA78, v184, v185, v186);
      sub_19830();
      uint64_t v187 = Array.count.getter(v183, v182);
      if (v187 >= 2 && Array.count.getter(v137, v34[20]) == v187)
      {
      }

      else
      {
        v34[13] = v137;
        sub_45B94();
        uint64_t v188 = swift_getWitnessTable(&protocol conformance descriptor for [A], v185);
        char v189 = Collection.isEmpty.getter(v185, v188);

        sub_16F40();
        if ((v189 & 1) == 0)
        {
LABEL_36:
          uint64_t v190 = v34[36];
          uint64_t v191 = v34[35];
          uint64_t v193 = v34[31];
          uint64_t v192 = v34[32];
          uint64_t v194 = v34[26];
          uint64_t v195 = v34[23];
          swift_task_dealloc(v34[37]);
          swift_task_dealloc(v190);
          swift_task_dealloc(v191);
          swift_task_dealloc(v192);
          swift_task_dealloc(v193);
          sub_197C0();
          sub_19830();
          swift_task_dealloc(v194);
          swift_task_dealloc(v195);
          return ((uint64_t (*)(uint64_t))v34[1])(v137);
        }
      }

      sub_16F40();
    }

    else
    {
      sub_6FABC(0LL, v97, v98, v99, v100, v101, v102, v103, v321, v332, v343, v353, v362);
      os_log_type_t v120 = sub_16C50();
      uint64_t v34 = v379;
      if (sub_1990C(v120))
      {
        uint64_t v121 = (_WORD *)sub_16AC4(2LL);
        sub_16CE4(v121);
        sub_6FAC4(&dword_0, v122, v123, "AlarmDisambiguation.parsePromptResult(input:items:) No AlarmSearch from parse");
        sub_16AA8(v60);
      }
    }

    uint64_t v137 = 0LL;
    goto LABEL_36;
  }

  if (v41 == enum case for Parse.uso(_:))
  {
LABEL_7:
    (*(void (**)(void, void))(v379[30] + 8LL))(v379[32], v379[29]);
    goto LABEL_10;
  }

  uint64_t v197 = v379 + 32;
  uint64_t v232 = sub_6FB64(v379[36], v42, v43, v44, v45, v46, v47, v48, v317, v328, v339, v350, v359, v369);
  uint64_t v240 = (os_log_s *)sub_6FABC(v232, v233, v234, v235, v236, v237, v238, v239, v325, v336, v347, v357, v366);
  os_log_type_t v241 = static os_log_type_t.error.getter();
  BOOL v242 = sub_16C38(v241);
  uint64_t v249 = v379[36];
  uint64_t v250 = v379[33];
  if (v242)
  {
    uint64_t v251 = v379[31];
    uint64_t v368 = v379[29];
    uint64_t v252 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v253 = sub_16AC4(32LL);
    v381[0] = v253;
    *(_DWORD *)uint64_t v252 = 136315138;
    Input.parse.getter(v253);
    uint64_t v254 = String.init<A>(describing:)(v251, v368);
    unint64_t v256 = v255;
    v379[8] = sub_6FB5C(v254, v255, v257, v258, v259, v260, v261, v262, v326, v337, v348);
    uint64_t v34 = v379;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v379 + 8, v379 + 9, v252 + 4, v252 + 12);
    swift_bridgeObjectRelease(v256);
    sub_6FB40( v249,  v250,  v263,  v264,  v265,  v266,  v267,  v268,  v327,  v338,  v349,  (uint64_t)(v379 + 9),  v368,  (uint64_t)(v379 + 32),  v374);
    sub_16BD0( &dword_0,  v240,  (os_log_type_t)v38,  "AlarmDisambiguation.parsePromptResult(input:items:) Unsupported parse: %s",  v252);
    sub_16BB4(v253);
    uint64_t v269 = v253;
    uint64_t v197 = v373;
    sub_16AA8(v269);
    sub_16AA8((uint64_t)v252);
  }

  else
  {
    sub_6FB40(v379[36], v379[33], v243, v244, v245, v246, v247, v248, v326, v337, v348, v358, v367, v372, v374);
  }

  uint64_t v285 = v34[30];
  sub_26B0(&qword_D4190);
  unint64_t v286 = sub_24EA4();
  uint64_t v287 = sub_25234(v286);
  sub_6FB74(v287, v288, v289, v290, v291, v292, v293, v294);
  uint64_t v284 = *(uint64_t (**)(void))(v285 + 8);
LABEL_56:
  uint64_t v295 = *v197;
  uint64_t v296 = *v36;
  uint64_t v297 = v34[36];
  uint64_t v298 = v34[37];
  uint64_t v299 = v34[35];
  uint64_t v300 = v34[32];
  uint64_t v301 = v34[27];
  uint64_t v302 = v34[26];
  uint64_t v303 = v34;
  uint64_t v304 = v34[23];
  ((void (*)(uint64_t, uint64_t))v284)(v295, v296);
  swift_task_dealloc(v298);
  swift_task_dealloc(v297);
  swift_task_dealloc(v299);
  swift_task_dealloc(v300);
  sub_197C0();
  sub_19830();
  swift_task_dealloc(v301);
  swift_task_dealloc(v302);
  swift_task_dealloc(v304);
  return ((uint64_t (*)(void))v303[1])();
}

void sub_6E2CC(os_log_s *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v167 = a2;
  uint64_t v3 = type metadata accessor for Input(0LL);
  uint64_t v158 = *(void *)(v3 - 8);
  uint64_t v159 = v3;
  sub_16AFC();
  __chkstk_darwin(v4);
  sub_16B30();
  uint64_t v157 = v5;
  uint64_t v6 = sub_1D768();
  uint64_t v7 = type metadata accessor for DirectInvocationUtils.Alarm.UserInfoKey(v6);
  uint64_t v161 = *(void *)(v7 - 8);
  uint64_t v162 = v7;
  sub_16AFC();
  __chkstk_darwin(v8);
  sub_16B30();
  uint64_t v160 = v9;
  uint64_t v10 = sub_1D768();
  uint64_t v11 = type metadata accessor for Parse.DirectInvocation(v10);
  uint64_t v163 = *(void *)(v11 - 8);
  uint64_t v164 = (uint8_t *)v11;
  sub_16AFC();
  __chkstk_darwin(v12);
  sub_16B30();
  uint64_t v165 = v13;
  uint64_t v14 = sub_1D768();
  uint64_t v156 = type metadata accessor for Siri_Nlu_External_UserParse(v14);
  uint64_t v154 = *(void *)(v156 - 8);
  sub_16AFC();
  __chkstk_darwin(v15);
  sub_17390();
  uint64_t v18 = v17 - v16;
  uint64_t v155 = type metadata accessor for USOParse(0LL);
  uint64_t v153 = *(void *)(v155 - 8);
  sub_16AFC();
  __chkstk_darwin(v19);
  sub_17390();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = type metadata accessor for Parse(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_16B08();
  uint64_t v152 = v25;
  sub_16AF0();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v152 - v27;
  uint64_t v29 = (os_log_s *)sub_17144();
  uint64_t v30 = *((void *)v29 - 1);
  uint64_t v31 = __chkstk_darwin(v29);
  unint64_t v33 = (char *)&v152 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v152 - v35;
  uint64_t v166 = a1;
  Input.parse.getter(v34);
  int v37 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v28, v23);
  if (v37 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_6FAAC();
    goto LABEL_5;
  }

  if (v37 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_6FAAC();
    uint64_t v38 = sub_26B0(&qword_D3768);
    swift_release(*(void *)&v28[*(int *)(v38 + 48)]);
LABEL_5:
    uint64_t v39 = *(void (**)(char *, char *, os_log_s *))(v30 + 32);
    v39(v36, v28, v29);
    v39(v33, v36, v29);
    uint64_t v40 = type metadata accessor for AlarmNLIntent(0LL);
    sub_16D14(v40);
    uint64_t v41 = sub_716E4((uint64_t)v33);
    if (qword_D30E8 != -1) {
      swift_once(&qword_D30E8, sub_6ED20);
    }
    uint64_t v42 = sub_16C80();
    sub_26F0(v42, (uint64_t)qword_D6380);
    uint64_t v43 = swift_retain_n(v41, 2LL);
    uint64_t v51 = (os_log_s *)Logger.logObject.getter(v43, v44, v45, v46, v47, v48, v49, v50);
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v54 = sub_16AC4(32LL);
      *(void *)&__int128 v170 = v54;
      *(_DWORD *)uint64_t v53 = 136315138;
      uint64_t v168 = v41;
      sub_9570(&qword_D3770, type metadata accessor for AlarmNLIntent, (uint64_t)&unk_A6AEC);
      uint64_t v55 = NLIntentWrapper.description.getter(v40);
      uint64_t v168 = sub_6FBD4(v55, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v53 + 4, v53 + 12);
      sub_1D750();
      sub_16C48();
      sub_16BD0(&dword_0, v51, v52, "AlarmDisambiguation.determineWindowInputType(input:) alarmNLIntent: %s", v53);
      sub_16BB4(v54);
      sub_16AA8(v54);
      sub_16AA8((uint64_t)v53);
    }

    else
    {

      sub_1D750();
    }

    sub_715D0();
    __asm { BR              X10 }
  }

  if (v37 != enum case for Parse.directInvocation(_:))
  {
    if (v37 == enum case for Parse.NLv4IntentOnly(_:))
    {
      sub_6FAAC();
      uint64_t v100 = *(void *)v28;
      static ResponseDisambigUtils.windowingResponse(for:)(*(void *)v28);
      swift_unknownObjectRelease(v100);
      return;
    }

    if (v37 == enum case for Parse.uso(_:))
    {
      sub_6FAAC();
      uint64_t v101 = v153;
      uint64_t v102 = v155;
      uint64_t v103 = sub_174B8(v22, (uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v153 + 32));
      uint64_t v104 = USOParse.userParse.getter(v103);
      uint64_t v105 = Siri_Nlu_External_UserParse.userDialogActs.getter(v104);
      (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v18, v156);
      static ResponseDisambigUtils.windowingResponse(for:)(v105);
      sub_16D58();
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v22, v102);
      return;
    }

    if (qword_D30E8 != -1) {
      swift_once(&qword_D30E8, sub_6ED20);
    }
    uint64_t v106 = sub_16C80();
    sub_26F0(v106, (uint64_t)qword_D6380);
    uint64_t v108 = v157;
    uint64_t v107 = v158;
    uint64_t v109 = v159;
    uint64_t v110 = sub_174B8(v157, (uint64_t)v166, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 16));
    uint64_t v118 = (os_log_s *)Logger.logObject.getter(v110, v111, v112, v113, v114, v115, v116, v117);
    os_log_type_t v119 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v118, v119))
    {
      os_log_type_t v120 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v121 = sub_16AC4(32LL);
      uint64_t v165 = v121;
      *(void *)&__int128 v170 = v121;
      *(_DWORD *)os_log_type_t v120 = 136315138;
      uint64_t v164 = v120 + 4;
      uint64_t v122 = v152;
      Input.parse.getter(v121);
      uint64_t v123 = String.init<A>(describing:)(v122, v23);
      uint64_t v125 = sub_6FBD4(v123, v124);
      uint64_t v126 = sub_6FAE4(v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v126, v127, v164, v120 + 12);
      sub_16C48();
      (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v108, v159);
      sub_16BD0( &dword_0,  v118,  v119,  "AlarmDisambiguation.determineWindowInputType(input:) Received an unsupported parse for disambiguation window prompt: %s",  v120);
      uint64_t v128 = v165;
      sub_16BB4(v165);
      sub_16AA8(v128);
      sub_16AA8((uint64_t)v120);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v108, v109);
    }

    (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v23);
    goto LABEL_35;
  }

  sub_6FAAC();
  uint64_t v59 = v163;
  uint64_t v58 = v164;
  uint64_t v60 = v165;
  (*(void (**)(uint64_t, char *, uint8_t *))(v163 + 32))(v165, v28, v164);
  if (qword_D30E8 != -1) {
    swift_once(&qword_D30E8, sub_6ED20);
  }
  uint64_t v61 = sub_16C80();
  uint64_t v62 = sub_26F0(v61, (uint64_t)qword_D6380);
  Logger.logObject.getter(v62, v63, v64, v65, v66, v67, v68, v69);
  os_log_type_t v70 = sub_16B4C();
  if (sub_16ACC(v70))
  {
    uint64_t v71 = (_WORD *)sub_16AC4(2LL);
    sub_16CE4(v71);
    _os_log_impl( &dword_0,  v29,  (os_log_type_t)v62,  "AlarmDisambiguation.determineWindowInputType(input:) Received directInvocation",  (uint8_t *)v24,  2u);
    sub_16AA8(v24);
  }

  uint64_t v73 = Parse.DirectInvocation.userData.getter(v72);
  if (v73)
  {
    uint64_t v74 = v73;
    uint64_t v76 = v160;
    uint64_t v75 = v161;
    uint64_t v77 = v162;
    uint64_t v78 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v161 + 104))( v160,  enum case for DirectInvocationUtils.Alarm.UserInfoKey.alarmId(_:),  v162);
    uint64_t v79 = DirectInvocationUtils.Alarm.UserInfoKey.rawValue.getter(v78);
    uint64_t v81 = v80;
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v76, v77);
    sub_288F4(v79, v81, v74, &v170);
    sub_45BCC();
    sub_16D58();
    if (*((void *)&v171 + 1))
    {
      if ((swift_dynamicCast(&v168, &v170, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
      {
        uint64_t v82 = static AlarmID.alarmUUID(fromIdentifier:)(v168, v169);
        unint64_t v84 = v83;
        sub_16D58();
        if (v84)
        {
          uint64_t v85 = swift_bridgeObjectRetain(v84);
          uint64_t v93 = (os_log_s *)Logger.logObject.getter(v85, v86, v87, v88, v89, v90, v91, v92);
          os_log_type_t v94 = static os_log_type_t.info.getter();
          if (sub_16C38(v94))
          {
            uint64_t v95 = (uint8_t *)sub_16AC4(12LL);
            uint64_t v96 = sub_16AC4(32LL);
            *(void *)&__int128 v170 = v96;
            *(_DWORD *)uint64_t v95 = 136315138;
            swift_bridgeObjectRetain(v84);
            uint64_t v97 = sub_3D10(v82, v84, (uint64_t *)&v170);
            uint64_t v98 = sub_6FAE4(v97);
            uint64_t v60 = v165;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v98, v99, v95 + 4, v95 + 12);
            swift_bridgeObjectRelease_n(v84, 3LL);
            sub_16BD0( &dword_0,  v93,  (os_log_type_t)v62,  "AlarmDisambiguation.determineWindowInputType(input:) Direct invocation alarm ID: %s",  v95);
            sub_16BB4(v96);
            sub_16AA8(v96);
            sub_16AA8((uint64_t)v95);
          }

          else
          {

            swift_bridgeObjectRelease_n(v84, 2LL);
          }

          sub_6FBC0();
          (*(void (**)(uint64_t, uint8_t *))(v59 + 8))(v60, v58);
          return;
        }
      }

      goto LABEL_28;
    }
  }

  else
  {
    __int128 v170 = 0u;
    __int128 v171 = 0u;
  }

  sub_19594((uint64_t)&v170, (uint64_t *)&unk_D4860);
LABEL_28:
  (*(void (**)(uint64_t, uint8_t *))(v59 + 8))(v60, v58);
LABEL_35:
  sub_6F1D4(v166);
  if (v129)
  {
    uint64_t v130 = v129;
    if (qword_D30E8 != -1) {
      swift_once(&qword_D30E8, sub_6ED20);
    }
    uint64_t v131 = sub_16C80();
    sub_26F0(v131, (uint64_t)qword_D6380);
    id v132 = v130;
    uint64_t v140 = (os_log_s *)Logger.logObject.getter(v132, v133, v134, v135, v136, v137, v138, v139);
    os_log_type_t v141 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v140, v141))
    {
      uint64_t v142 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v143 = sub_16AC4(32LL);
      *(void *)&__int128 v170 = v143;
      *(_DWORD *)uint64_t v142 = 136315138;
      uint64_t v166 = (os_log_s *)(v142 + 4);
      id v144 = v132;
      id v145 = [v144 description];
      uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
      unint64_t v148 = v147;

      uint64_t v149 = sub_3D10(v146, v148, (uint64_t *)&v170);
      uint64_t v150 = sub_6FAE4(v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v150, v151, v166, v142 + 12);

      sub_16EDC();
      sub_16BD0( &dword_0,  v140,  v141,  "AlarmDisambiguation.determineWindowInputType(input:) Parsed AlarmSearch: %s",  v142);
      sub_16BB4(v143);
      sub_16AA8(v143);
      sub_16AA8((uint64_t)v142);
    }

    else
    {
    }

    sub_6FBC0();
  }

  else
  {
    static WindowingDisambiguationInputType.unsupported()();
  }

uint64_t sub_6ED20()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D6380);
  sub_26F0(v0, (uint64_t)qword_D6380);
  return static SiriTimeLog.alarmFlow.getter();
}

void sub_6ED68(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OrdinalDisplayHintsBuilder(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_17390();
  uint64_t v6 = v5 - v4;
  sub_26B0(&qword_D5330);
  sub_16AFC();
  __chkstk_darwin(v7);
  sub_17390();
  uint64_t v10 = v9 - v8;
  uint64_t v52 = type metadata accessor for SemanticValue(0LL);
  uint64_t v55 = *(void *)(v52 - 8);
  sub_16AFC();
  __chkstk_darwin(v11);
  sub_16B08();
  uint64_t v54 = v12;
  sub_16AF0();
  __chkstk_darwin(v13);
  sub_16BF8();
  uint64_t v51 = v14;
  sub_26B0(&qword_D6398);
  sub_16AFC();
  __chkstk_darwin(v15);
  sub_17390();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for DisplayHint(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_16B08();
  uint64_t v53 = v21;
  sub_16AF0();
  __chkstk_darwin(v22);
  sub_16BF8();
  uint64_t v50 = v23;
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v24 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    sub_6FB9C();
    if (v24) {
      goto LABEL_3;
    }
LABEL_33:
    sub_17B9C();
    int v37 = _swiftEmptyArrayStorage;
LABEL_34:
    OrdinalDisplayHintsBuilder.init(referenceNode:)(0x6665526D72616C61LL, 0xEE0065636E657265LL);
    uint64_t v46 = OrdinalDisplayHintsBuilder.build(for:)(v37);
    sub_16D58();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
    sub_440CC(v46);
    sub_16CB0();
    return;
  }

  if (a1 < 0) {
    uint64_t v45 = a1;
  }
  else {
    uint64_t v45 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_6FB9C();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v45);
  if (!v24) {
    goto LABEL_33;
  }
LABEL_3:
  uint64_t v56 = v24;
  if (v24 >= 1)
  {
    uint64_t v47 = v6;
    uint64_t v48 = v3;
    uint64_t v49 = v2;
    uint64_t v25 = 0LL;
    unint64_t v57 = a1 & 0xC000000000000001LL;
    uint64_t v26 = _swiftEmptyArrayStorage;
    uint64_t v27 = v52;
    uint64_t v28 = v24;
    do
    {
      if (v57) {
        id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, a1);
      }
      else {
        id v29 = *(id *)(a1 + 8 * v25 + 32);
      }
      uint64_t v30 = v29;
      sub_4A910(v18);

      if (sub_16880(v18, 1LL, v19) == 1)
      {
        sub_19594(v18, &qword_D6398);
      }

      else
      {
        sub_6FBF4(v50, v18);
        sub_6FBF4(v53, v50);
        if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0) {
          uint64_t v26 = (void *)sub_6C9BC(0, v26[2] + 1LL, 1, (uint64_t)v26);
        }
        unint64_t v32 = v26[2];
        unint64_t v31 = v26[3];
        if (v32 >= v31 >> 1)
        {
          char v33 = sub_6FBE0(v31);
          uint64_t v26 = (void *)sub_6C9BC(v33, v34, v35, (uint64_t)v26);
        }

        v26[2] = v32 + 1;
        sub_6FBF4( (uint64_t)v26 + ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))
        + *(void *)(v20 + 72) * v32,
          v53);
        uint64_t v27 = v52;
        uint64_t v28 = v56;
      }

      ++v25;
    }

    while (v28 != v25);
    sub_17B9C();
    sub_6FB9C();
    uint64_t v36 = 0LL;
    int v37 = _swiftEmptyArrayStorage;
    do
    {
      if (v57) {
        id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, a1);
      }
      else {
        id v38 = *(id *)(a1 + 8 * v36 + 32);
      }
      uint64_t v39 = v38;
      sub_4AAFC((uint64_t)v38, v10);

      if (sub_16880(v10, 1LL, v27) == 1)
      {
        sub_19594(v10, &qword_D5330);
      }

      else
      {
        sub_6FBA4(v51, v10);
        sub_6FBA4(v54, v51);
        if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0) {
          int v37 = (void *)sub_6C9D0(0, v37[2] + 1LL, 1, (uint64_t)v37);
        }
        unint64_t v41 = v37[2];
        unint64_t v40 = v37[3];
        if (v41 >= v40 >> 1)
        {
          char v42 = sub_6FBE0(v40);
          int v37 = (void *)sub_6C9D0(v42, v43, v44, (uint64_t)v37);
        }

        _OWORD v37[2] = v41 + 1;
        sub_6FBA4( (uint64_t)v37 + ((*(unsigned __int8 *)(v55 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))
        + *(void *)(v55 + 72) * v41,
          v54);
        uint64_t v28 = v56;
      }

      ++v36;
    }

    while (v28 != v36);
    sub_17B9C();
    uint64_t v3 = v48;
    uint64_t v2 = v49;
    uint64_t v6 = v47;
    goto LABEL_34;
  }

  __break(1u);
}

void sub_6F1D4(os_log_s *a1)
{
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v114 = *(void *)(v3 - 8);
  uint64_t v115 = v3;
  sub_16AFC();
  __chkstk_darwin(v4);
  sub_16B30();
  uint64_t v113 = v5;
  uint64_t v6 = sub_1D768();
  uint64_t v112 = type metadata accessor for USOParse(v6);
  uint64_t v117 = *(void *)(v112 - 8);
  sub_16AFC();
  __chkstk_darwin(v7);
  sub_16B08();
  uint64_t v110 = v8;
  sub_16AF0();
  __chkstk_darwin(v9);
  uint64_t v111 = (char *)&v109 - v10;
  sub_16AF0();
  __chkstk_darwin(v11);
  sub_16BF8();
  uint64_t v118 = v12;
  uint64_t v13 = sub_1D768();
  uint64_t v14 = type metadata accessor for Parse(v13);
  uint64_t v124 = *(void *)(v14 - 8);
  sub_16AFC();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  sub_16BF8();
  uint64_t v126 = v19;
  uint64_t v20 = sub_1D768();
  uint64_t v21 = type metadata accessor for Input(v20);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_16B08();
  uint64_t v123 = v23;
  sub_16AF0();
  __chkstk_darwin(v24);
  uint64_t v119 = (uint64_t)&v109 - v25;
  sub_16AF0();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v109 - v27;
  if (qword_D30E8 != -1) {
    swift_once(&qword_D30E8, sub_6ED20);
  }
  uint64_t v29 = sub_16C80();
  uint64_t v30 = sub_26F0(v29, (uint64_t)qword_D6380);
  uint64_t v121 = *(uint64_t (**)(char *, os_log_s *, uint64_t))(v22 + 16);
  uint64_t v31 = v121(v28, a1, v21);
  uint64_t v122 = v30;
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v31, v32, v33, v34, v35, v36, v37, v38);
  os_log_type_t v40 = static os_log_type_t.default.getter();
  BOOL v41 = sub_4AF34(v39);
  os_log_type_t v120 = v18;
  uint64_t v125 = a1;
  if (v41)
  {
    uint64_t v42 = sub_16AC4(12LL);
    uint64_t v116 = v14;
    uint64_t v43 = (uint8_t *)v42;
    uint64_t v44 = sub_16AC4(32LL);
    uint64_t v127 = v44;
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v45 = sub_9570( (unint64_t *)&unk_D37B0,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v21, v45);
    uint64_t v48 = sub_6FB34(v46, v47);
    uint64_t v49 = sub_179F8(v48);
    a1 = v125;
    uint64_t v1 = (os_log_s *)&type metadata for Any;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, v50, v43 + 4, v43 + 12);
    sub_16C48();
    sub_6FAF8();
    sub_16BD0(&dword_0, v39, v40, "AlarmDisambiguation.parseAlarmSearchFromPromptInput(input:) parsing input: %s", v43);
    sub_16BB4(v44);
    sub_16AA8(v44);
    uint64_t v51 = (uint64_t)v43;
    uint64_t v14 = v116;
    sub_16AA8(v51);
  }

  else
  {
    sub_6FAF8();
  }

  uint64_t v52 = v126;
  Input.parse.getter(v53);
  uint64_t v54 = v124;
  int v55 = (*(uint64_t (**)(uint8_t *, uint64_t))(v124 + 88))(v52, v14);
  uint64_t v56 = v123;
  if (v55 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(uint8_t *, uint64_t))(v54 + 8))(v126, v14);
LABEL_10:
    uint64_t v61 = v119;
    sub_6FB84(v119);
    sub_16EA0();
    os_log_type_t v62 = sub_6FC04();
    if (sub_4AF34(a1))
    {
      uint64_t v63 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v64 = sub_16AC4(32LL);
      uint64_t v127 = v64;
      *(_DWORD *)uint64_t v63 = 136315138;
      uint64_t v126 = v63 + 4;
      uint64_t v65 = v120;
      Input.parse.getter(v64);
      uint64_t v66 = String.init<A>(describing:)(v65, v14);
      uint64_t v68 = sub_6FB34(v66, v67);
      uint64_t v69 = sub_179F8(v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v69, v70, v126, v63 + 12);
      sub_16C48();
      sub_6FAD8(v61);
      sub_16BD0(&dword_0, a1, v62, "AlarmDisambiguation.parseAlarmSearchFromPromptInput(input:) nlv3 parse: %s", v63);
      sub_16BB4(v64);
      sub_16AA8(v64);
      sub_16AA8((uint64_t)v63);
    }

    else
    {
      sub_6FAD8(v61);
    }

    Input.parse.getter(v71);
    uint64_t v72 = type metadata accessor for AlarmNLIntent(0LL);
    sub_16D14(v72);
    sub_71BCC();
    if (v73)
    {
      uint64_t v74 = v73;
      sub_738C8();
      swift_release(v74);
    }

    goto LABEL_20;
  }

  if (v55 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(uint8_t *, uint64_t))(v54 + 96))(v126, v14);
    uint64_t v57 = sub_26B0(&qword_D3768);
    sub_6FBC8(v57);
    sub_17144();
    uint64_t v58 = sub_6FBAC();
    v60(v58, v59);
    goto LABEL_10;
  }

  if (v55 == enum case for Parse.directInvocation(_:))
  {
    sub_16EA0();
    os_log_type_t v75 = sub_16B4C();
    if (sub_16ACC(v75))
    {
      uint64_t v76 = (uint8_t *)sub_16AC4(2LL);
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl( &dword_0,  v1,  (os_log_type_t)a1,  "AlarmDisambiguation.parseAlarmSearchFromPromptInput(input:) direct invocation",  v76,  2u);
      sub_16AA8((uint64_t)v76);
    }

    goto LABEL_19;
  }

  if (v55 == enum case for Parse.NLv4IntentOnly(_:))
  {
    sub_6FB0C();
    uint64_t v77 = *(void *)v1;
    uint64_t ObjectType = swift_getObjectType(*(void *)v1);
    SIRINLUUserDialogAct.alarmSearch.getter(ObjectType);
    swift_unknownObjectRelease(v77);
    goto LABEL_20;
  }

  if (v55 != enum case for Parse.uso(_:))
  {
    sub_6FB84(v123);
    uint64_t v93 = (os_log_s *)sub_16EA0();
    os_log_type_t v94 = static os_log_type_t.error.getter();
    if (sub_4AF34(v93))
    {
      uint64_t v95 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v96 = sub_16AC4(32LL);
      uint64_t v116 = v14;
      uint64_t v97 = v96;
      uint64_t v127 = v96;
      *(_DWORD *)uint64_t v95 = 136315138;
      uint64_t v98 = v120;
      Input.parse.getter(v96);
      uint64_t v99 = String.init<A>(describing:)(v98, v116);
      uint64_t v101 = sub_6FB34(v99, v100);
      uint64_t v102 = sub_179F8(v101);
      uint64_t v54 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v102, v103, v95 + 4, v95 + 12);
      sub_16C48();
      sub_6FAD8(v56);
      sub_16BD0( &dword_0,  v93,  v94,  "AlarmDisambiguation.parseAlarmSearchFromPromptInput(input:) Unsupported parse: %s",  v95);
      sub_16BB4(v97);
      uint64_t v104 = v97;
      uint64_t v14 = v116;
      sub_16AA8(v104);
      sub_16AA8((uint64_t)v95);
    }

    else
    {
      sub_6FAD8(v56);
    }

LABEL_19:
    (*(void (**)(uint8_t *, uint64_t))(v54 + 8))(v126, v14);
    goto LABEL_20;
  }

  sub_6FB0C();
  uint64_t v80 = v117;
  uint64_t v79 = v118;
  uint64_t v81 = v112;
  (*(void (**)(uint64_t, os_log_s *, uint64_t))(v117 + 32))(v118, v1, v112);
  uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
  uint64_t v83 = (uint64_t)v111;
  v82(v111, v79, v81);
  sub_16EA0();
  os_log_type_t v84 = sub_16B4C();
  if (sub_16C38(v84))
  {
    uint64_t v85 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v86 = sub_16AC4(32LL);
    uint64_t v127 = v86;
    *(_DWORD *)uint64_t v85 = 136315138;
    uint64_t v87 = v110;
    v82(v110, v83, v81);
    uint64_t v88 = String.init<A>(describing:)(v87, v81);
    uint64_t v90 = sub_3D10(v88, v89, &v127);
    uint64_t v91 = sub_179F8(v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, v92, v85 + 4, v85 + 12);
    sub_16EDC();
    sub_6FB94(v83);
    sub_16BD0( &dword_0,  v1,  (os_log_type_t)v52,  "AlarmDisambiguation.parseAlarmSearchFromPromptInput(input:) USO parse: %s",  v85);
    sub_16BB4(v86);
    sub_16AA8(v86);
    sub_16AA8((uint64_t)v85);
  }

  else
  {
    sub_6FB94(v83);
  }

  uint64_t v105 = v113;
  uint64_t v106 = v118;
  uint64_t v108 = USOParse.userParse.getter(v107);
  Siri_Nlu_External_UserParse.alarmSearch.getter(v108);
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v105, v115);
  sub_6FB94(v106);
LABEL_20:
  sub_16CB0();
}

uint64_t sub_6F980(id *a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*a1 identifier];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
  }

  uint64_t v10 = static AlarmID.alarmUUID(fromIdentifier:)(v7, v9);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease(v9);
  if (v12)
  {
    if (v10 == a2 && v12 == a3) {
      char v14 = 1;
    }
    else {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, a2, a3, 0LL);
    }
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    char v14 = 0;
  }

  return v14 & 1;
}

uint64_t sub_6FA58(id *a1)
{
  return sub_6F980(a1, *(void *)(v1 + 24), *(void *)(v1 + 32)) & 1;
}

uint64_t sub_6FA78()
{
  return SiriAlarm.matches(alarmSearch:)(*(void *)(v0 + 24)) & 1;
}

uint64_t sub_6FAAC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v1, v2);
}

uint64_t sub_6FABC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return Logger.logObject.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

void sub_6FAC4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_6FAD8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 160))(a1, v1);
}

uint64_t sub_6FAE4(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t sub_6FAF8()
{
  os_log_type_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  *(void *)(v3 - 160) = v4;
  return v4(v0, v2);
}

uint64_t sub_6FB0C()
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 96))(*(void *)(v2 - 112), v0);
}

uint64_t sub_6FB20()
{
  return (*(uint64_t (**)(void, void))(v0[30] + 96LL))(v0[32], v0[29]);
}

uint64_t sub_6FB34(uint64_t a1, unint64_t a2)
{
  return sub_3D10(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_6FB40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t (*a15)(void))
{
  return a15();
}

uint64_t sub_6FB48()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_6FB5C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  return sub_3D10(a1, a2, (uint64_t *)va);
}

uint64_t sub_6FB64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, void, void))
{
  return a14(a1, *(void *)(v14 + 144), *(void *)(v14 + 264));
}

uint64_t sub_6FB74( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 0;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_6FB84(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 152))(a1, v1, v2);
}

uint64_t sub_6FB94(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_6FB9C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_6FBA4(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_6FBAC()
{
  return v0;
}

uint64_t sub_6FBC0()
{
  return static WindowingDisambiguationInputType.disambiguationChoice()();
}

uint64_t sub_6FBC8(uint64_t a1)
{
  return swift_release(*(void *)(v1 + *(int *)(a1 + 48)));
}

uint64_t sub_6FBD4(uint64_t a1, unint64_t a2)
{
  return sub_3D10(a1, a2, (uint64_t *)(v2 - 128));
}

BOOL sub_6FBE0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_6FBF4(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_6FBFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_3D10(a1, v3, a3);
}

uint64_t sub_6FC04()
{
  return static os_log_type_t.default.getter();
}

void sub_6FC0C(uint64_t a1)
{
}

void sub_6FC18(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = a2(a1);
  sub_75504(v4, v5, v6);
  swift_bridgeObjectRelease(a2);
  sub_755A4();
  sub_7549C();
}

uint64_t sub_6FC54(uint64_t a1, uint64_t a2)
{
  return sub_6FC60(a1, a2, (uint64_t (*)(uint64_t))sub_4F5EC);
}

uint64_t sub_6FC60(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = a3(a2);
  uint64_t v6 = v5;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v6);
}

void sub_6FCA0(uint64_t a1, uint64_t a2)
{
}

void sub_6FCAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a3(a2);
  sub_75504(v5, v6, v7);
  swift_bridgeObjectRelease(a3);
  sub_755A4();
  sub_7549C();
}

uint64_t sub_6FCEC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1688C(v0, qword_D63A8);
  sub_26F0(v0, (uint64_t)qword_D63A8);
  return static SiriTimeLog.alarmPlugin.getter();
}

uint64_t sub_6FD34(uint64_t a1)
{
  return sub_6FF04(a1, &qword_D6868, 0x64496D72616C61LL, 0xE700000000000000LL, &qword_D8408);
}

uint64_t sub_6FD5C(uint64_t a1)
{
  return sub_6FF04(a1, &qword_D6870, 0x7265566D72616C61LL, 0xE900000000000062LL, &qword_D8410);
}

uint64_t sub_6FD88(uint64_t a1)
{
  return sub_6FF04(a1, &qword_D6868, 0x62614C6D72616C61LL, 0xEA00000000006C65LL, &qword_D8418);
}

uint64_t sub_6FDB4(uint64_t a1)
{
  return sub_6FF04(a1, &qword_D6868, 0x77654E6D72616C61LL, 0xED00006C6562614CLL, &qword_D8420);
}

uint64_t sub_6FDE8(uint64_t a1)
{
  return sub_6FF04(a1, &qword_D6868, 0x756F4E6D72616C61LL, 0xE90000000000006ELL, &qword_D8428);
}

uint64_t sub_6FE14(uint64_t a1)
{
  return sub_6FF04(a1, &qword_D68A0, 0x6D69546D72616C61LL, 0xE900000000000065LL, &qword_D8430);
}

uint64_t sub_6FE40(uint64_t a1)
{
  return sub_6FF04(a1, &qword_D68A0, 0x77654E6D72616C61LL, 0xEC000000656D6954LL, &qword_D8438);
}

uint64_t sub_6FE70(uint64_t a1)
{
  return sub_6FF04(a1, &qword_D6860, 0x7474416D72616C61LL, 0xEF73657475626972LL, &qword_D8440);
}

uint64_t sub_6FEA4(uint64_t a1)
{
  return sub_6FF04(a1, &qword_D6858, 0x6665526D72616C61LL, 0xEE0065636E657265LL, &qword_D8448);
}

uint64_t sub_6FED8(uint64_t a1)
{
  return sub_6FF04(a1, &qword_D6850, 0xD000000000000011LL, 0x80000000000A7FE0LL, &qword_D8450);
}

uint64_t sub_6FF04(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = sub_26B0(a2);
  sub_16D14(v8);
  uint64_t result = TerminalOntologyNode.init(name:multicardinal:)(a3, a4, 0LL);
  *a5 = result;
  return result;
}

void sub_6FF5C(void *a1@<X8>)
{
  *a1 = &off_CABC0;
}

uint64_t sub_6FF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_701E0(a1, a2, a3, (uint64_t (*)(void))sub_75248, (uint64_t (*)(void))sub_75284);
}

uint64_t sub_6FF80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_755E4();
  swift_bridgeObjectRelease(v3);
  if (v2 >= 0x23) {
    return 35LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_6FFCC(char a1)
{
  return *(void *)&aFirst_1[8 * a1];
}

void sub_6FFEC()
{
}

void sub_70004(void *a1@<X8>)
{
  *a1 = &off_CABF0;
}

uint64_t sub_70014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_701E0(a1, a2, a3, (uint64_t (*)(void))sub_751D0, (uint64_t (*)(void))sub_7520C);
}

uint64_t sub_70028(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_28754(*a1, *a2);
}

void sub_70034()
{
}

uint64_t sub_70054(uint64_t a1)
{
  return sub_6FC60(a1, *v1, (uint64_t (*)(uint64_t))sub_6FFCC);
}

void sub_70074(uint64_t a1)
{
}

uint64_t sub_70094@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_6FF80(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_700C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_6FFCC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_700E8(void *a1@<X8>)
{
  *a1 = &off_CAF88;
}

uint64_t sub_700F8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_7511C();
  unint64_t v5 = sub_75158();
  unint64_t v6 = sub_75194();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v4, v5, v6);
}

void sub_70158(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_75648(a1);
  Hasher._combine(_:)(v1);
  sub_755A4();
  sub_7549C();
}

void sub_70188(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  sub_755A4();
  sub_7549C();
}

void sub_701BC(void *a1@<X8>)
{
  *a1 = &off_CAFD0;
}

uint64_t sub_701CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_701E0(a1, a2, a3, (uint64_t (*)(void))sub_750A4, (uint64_t (*)(void))sub_750E0);
}

uint64_t sub_701E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v8 = a4();
  uint64_t v9 = a5();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v8, v9);
}

void sub_70238()
{
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmVerb) == 12)
  {
    sub_75654();
    if (qword_D3100 != -1) {
      swift_once(&qword_D3100, sub_6FD5C);
    }
    sub_1713C();
    sub_75070(&qword_D67C0);
    uint64_t v9 = sub_75428(v1, v2, v3, v4, v5, v6, v7, v8, v17, v19, SWORD2(v19), SBYTE6(v19), SHIBYTE(v19));
    sub_7563C((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v18, v20, v21, v22, v23);
  }

  sub_75440();
}

uint64_t sub_702C4()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmId);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmId);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmId + 8);
  uint64_t v4 = v2;
  if (v3 == 1)
  {
    if (qword_D30F8 != -1) {
      swift_once(&qword_D30F8, sub_6FD34);
    }
    uint64_t v5 = qword_D8408;
    uint64_t v6 = sub_1713C();
    sub_75070(&qword_D67C0);
    IntentNodeTraversable.value<A>(forNode:)(v10, v5, v6, v7);
    uint64_t v4 = v10[0];
    uint64_t v8 = v10[1];
    *uint64_t v1 = v10[0];
    v1[1] = v8;
    swift_bridgeObjectRetain(v8);
    sub_75604();
  }

  sub_75400(v2, v3);
  return v4;
}

uint64_t sub_703B0()
{
  return sub_704A4( &OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmLabel,  (uint64_t (*)(void *, void))sub_703C4);
}

uint64_t sub_703C4()
{
  if (qword_D3108 != -1) {
    swift_once(&qword_D3108, sub_6FD88);
  }
  uint64_t v0 = qword_D8418;
  uint64_t v1 = type metadata accessor for AlarmNLIntent(0LL);
  sub_75070(&qword_D67C0);
  IntentNodeTraversable.value<A>(forNode:)(&v5, v0, v1, v2);
  if (!v6) {
    return 0LL;
  }
  uint64_t result = v5;
  uint64_t v4 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4)
  {
    swift_bridgeObjectRelease(v6);
    return 0LL;
  }

  return result;
}

uint64_t sub_70490()
{
  return sub_704A4( &OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewLabel,  (uint64_t (*)(void *, void))sub_70530);
}

uint64_t sub_704A4(void *a1, uint64_t (*a2)(void *, void))
{
  uint64_t v3 = (void *)((char *)v2 + *a1);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = *v3;
  if (v5 == 1)
  {
    uint64_t v6 = a2(v2, *v2);
    *uint64_t v3 = v6;
    v3[1] = v7;
    swift_bridgeObjectRetain(v7);
    sub_75604();
  }

  sub_75400(v4, v5);
  return v6;
}

uint64_t sub_70530()
{
  if (qword_D3110 != -1) {
    swift_once(&qword_D3110, sub_6FDB4);
  }
  uint64_t v0 = qword_D8420;
  uint64_t v1 = type metadata accessor for AlarmNLIntent(0LL);
  sub_75070(&qword_D67C0);
  IntentNodeTraversable.value<A>(forNode:)(&v6, v0, v1, v2);
  uint64_t countAndFlagsBits = v6;
  uint64_t v4 = v7;
  if (v7)
  {
    uint64_t countAndFlagsBits = String.labelCapitalization()()._countAndFlagsBits;
    swift_bridgeObjectRelease(v4);
  }

  return countAndFlagsBits;
}

void sub_705F8(uint64_t a1@<X8>)
{
  uint64_t v3 = v2;
  sub_754E4();
  sub_215E4();
  __chkstk_darwin(v5);
  sub_4DA84();
  __chkstk_darwin(v6);
  uint64_t v8 = &v15[-v7];
  uint64_t v9 = v3 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmTime;
  sub_45114(v3 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmTime, (uint64_t)v16, 0LL);
  sub_44CFC(v9, (uint64_t)v8, &qword_D6878);
  uint64_t v10 = sub_26B0((uint64_t *)&unk_D7A70);
  if (sub_16880((uint64_t)v8, 1LL, v10) == 1)
  {
    sub_202D8((uint64_t)v8, &qword_D6878);
    if (qword_D3120 != -1) {
      swift_once(&qword_D3120, sub_6FE14);
    }
    uint64_t v11 = TerminalOntologyNode.name.getter();
    unint64_t v13 = v12;
    sub_70768(v11, v12, a1);
    swift_bridgeObjectRelease(v13);
    sub_44CFC(a1, v1, (uint64_t *)&unk_D7A70);
    sub_75610();
    sub_45114(v9, v14, 33LL);
    sub_44A40(v1, v9, &qword_D6878);
    swift_endAccess(v15);
  }

  else
  {
    sub_5A34((uint64_t)v8, a1, (uint64_t *)&unk_D7A70);
  }

  sub_21290();
}

uint64_t sub_70768@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v153 = a1;
  uint64_t v151 = a3;
  uint64_t v4 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v138 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  id v145 = (char *)&v133 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v133 - v10;
  uint64_t v12 = sub_26B0(&qword_D68C0);
  __chkstk_darwin(v12);
  uint64_t v143 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v141 = type metadata accessor for TerminalElement.Value(0LL);
  uint64_t v140 = *(void *)(v141 - 8);
  uint64_t v14 = __chkstk_darwin(v141);
  id v144 = (char *)&v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v139 = (char *)&v133 - v16;
  uint64_t v17 = sub_26B0(&qword_D68C8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v133 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_26B0(&qword_D68D0);
  __chkstk_darwin(v20);
  uint64_t v142 = (char *)&v133 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v147 = type metadata accessor for TerminalElement(0LL);
  uint64_t v152 = *(void *)(v147 - 8);
  uint64_t v22 = __chkstk_darwin(v147);
  uint64_t v24 = (char *)&v133 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v146 = (char *)&v133 - v25;
  uint64_t v26 = sub_26B0(&qword_D68D8);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v133 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v150 = type metadata accessor for TerminalIntentNode(0LL);
  uint64_t v148 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v149 = (char *)&v133 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_26B0(&qword_D3778);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v133 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NLIntent.domainNode.getter(v31);
  uint64_t v34 = type metadata accessor for NonTerminalIntentNode(0LL);
  if (sub_16880((uint64_t)v33, 1LL, v34) == 1)
  {
    sub_202D8((uint64_t)v33, &qword_D3778);
    if (qword_D30F0 != -1) {
      swift_once(&qword_D30F0, sub_6FCEC);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    sub_26F0(v35, (uint64_t)qword_D63A8);
    uint64_t v36 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v36, v37, v38, v39, v40, v41, v42, v43, v133, v134, v135, v136, v137);
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v47 = v4;
      uint64_t v48 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v157 = v48;
      *(_DWORD *)uint64_t v46 = 136315138;
      swift_bridgeObjectRetain(a2);
      *(void *)&__int128 v154 = sub_3D10(v153, a2, (uint64_t *)&v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl(&dword_0, v44, v45, "No child nodes found when searching for node: %s)", v46, 0xCu);
      swift_arrayDestroy(v48, 1LL);
      uint64_t v49 = v48;
      uint64_t v4 = v47;
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    uint64_t v60 = v151;
    uint64_t v61 = 1LL;
    uint64_t v62 = v4;
    return sub_A40C(v60, v61, 1LL, v62);
  }

  uint64_t v135 = v5;
  uint64_t v137 = v4;
  uint64_t v50 = NonTerminalIntentNode.childNodes.getter();
  (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8LL))(v33, v34);
  uint64_t v51 = *(void *)(v50 + 16);
  uint64_t v136 = v11;
  if (v51)
  {
    uint64_t v52 = v50 + 32;
    swift_bridgeObjectRetain(v50);
    while (1)
    {
      sub_4698(v52, (uint64_t)&v154);
      uint64_t v54 = v155;
      uint64_t v53 = v156;
      sub_80B4(&v154, v155);
      uint64_t v55 = dispatch thunk of IntentNode.ontologyNodeName.getter(v54, v53);
      if (v55 == v153 && v56 == a2)
      {
        swift_bridgeObjectRelease(v50);
        unint64_t v63 = a2;
        goto LABEL_20;
      }

      uint64_t v58 = v56;
      char v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, v153, a2, 0LL);
      swift_bridgeObjectRelease(v58);
      if ((v59 & 1) != 0) {
        break;
      }
      _s20HandleIntentStrategyVwxx_1(&v154);
      v52 += 40LL;
      if (!--v51)
      {
        swift_bridgeObjectRelease(v50);
        goto LABEL_15;
      }
    }

    unint64_t v63 = v50;
LABEL_20:
    swift_bridgeObjectRelease(v63);
    sub_46FC(&v154, (uint64_t)&v157);
  }

  else
  {
LABEL_15:
    uint64_t v159 = 0LL;
    __int128 v157 = 0u;
    __int128 v158 = 0u;
  }

  swift_bridgeObjectRelease(v50);
  uint64_t v64 = v150;
  if (*((void *)&v158 + 1))
  {
    uint64_t v65 = sub_26B0(&qword_D68E8);
    int v66 = swift_dynamicCast(v28, &v157, v65, v64, 6LL);
    sub_A40C((uint64_t)v28, v66 ^ 1u, 1LL, v64);
    if (sub_16880((uint64_t)v28, 1LL, v64) != 1)
    {
      uint64_t v67 = (*(uint64_t (**)(char *, char *, uint64_t))(v148 + 32))(v149, v28, v64);
      uint64_t v68 = TerminalIntentNode.elements.getter(v67);
      uint64_t v69 = v68;
      uint64_t v70 = *(void *)(v68 + 16);
      if (v70)
      {
        unint64_t v71 = (*(unsigned __int8 *)(v152 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80);
        uint64_t v134 = v68;
        unint64_t v72 = v68 + v71;
        uint64_t v73 = *(void *)(v152 + 72);
        uint64_t v74 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v152 + 16);
        uint64_t v75 = v147;
        while (1)
        {
          uint64_t v76 = v74(v24, v72, v75);
          uint64_t v77 = v75;
          TerminalElement.originalValue.getter(v76);
          uint64_t v78 = type metadata accessor for TerminalElement.OriginalValue(0LL);
          int v79 = sub_16880((uint64_t)v19, 1LL, v78);
          sub_202D8((uint64_t)v19, &qword_D68C8);
          if (v79 != 1) {
            break;
          }
          (*(void (**)(char *, uint64_t))(v152 + 8))(v24, v77);
          v72 += v73;
          --v70;
          uint64_t v75 = v77;
          if (!v70)
          {
            uint64_t v80 = 1LL;
            uint64_t v64 = v150;
            uint64_t v81 = (uint64_t)v142;
            goto LABEL_37;
          }
        }

        uint64_t v81 = (uint64_t)v142;
        (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v142, v24, v77);
        uint64_t v80 = 0LL;
        uint64_t v64 = v150;
        uint64_t v75 = v77;
LABEL_37:
        uint64_t v69 = v134;
      }

      else
      {
        uint64_t v80 = 1LL;
        uint64_t v75 = v147;
        uint64_t v81 = (uint64_t)v142;
      }

      sub_A40C(v81, v80, 1LL, v75);
      swift_bridgeObjectRelease(v69);
      int v95 = sub_16880(v81, 1LL, v75);
      uint64_t v97 = v145;
      uint64_t v96 = v146;
      uint64_t v98 = (uint64_t)v143;
      uint64_t v99 = v144;
      if (v95 == 1)
      {
        (*(void (**)(char *, uint64_t))(v148 + 8))(v149, v64);
        sub_202D8(v81, &qword_D68D0);
        uint64_t v100 = v137;
      }

      else
      {
        uint64_t v101 = v152;
        uint64_t v102 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v152 + 32))(v146, v81, v75);
        uint64_t v103 = v75;
        TerminalElement.value.getter(v102);
        uint64_t v104 = v141;
        int v105 = sub_16880(v98, 1LL, v141);
        uint64_t v100 = v137;
        if (v105 == 1)
        {
          (*(void (**)(char *, uint64_t))(v101 + 8))(v96, v103);
          (*(void (**)(char *, uint64_t))(v148 + 8))(v149, v64);
          sub_202D8(v98, &qword_D68C0);
        }

        else
        {
          uint64_t v106 = v140;
          uint64_t v107 = v139;
          (*(void (**)(char *, uint64_t, uint64_t))(v140 + 32))(v139, v98, v104);
          (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v99, v107, v104);
          if ((*(unsigned int (**)(char *, uint64_t))(v106 + 88))(v99, v104) == enum case for TerminalElement.Value.dateTime(_:))
          {
            (*(void (**)(char *, uint64_t))(v106 + 96))(v99, v104);
            uint64_t v108 = v135;
            uint64_t v109 = *(void (**)(char *, char *, uint64_t))(v135 + 32);
            uint64_t v110 = v136;
            v109(v136, v99, v100);
            if (qword_D30F0 != -1) {
              swift_once(&qword_D30F0, sub_6FCEC);
            }
            uint64_t v111 = type metadata accessor for Logger(0LL);
            sub_26F0(v111, (uint64_t)qword_D63A8);
            uint64_t v112 = *(void (**)(char *, char *, uint64_t))(v108 + 16);
            v112(v97, v110, v100);
            uint64_t v113 = swift_bridgeObjectRetain_n(a2, 2LL);
            uint64_t v121 = (os_log_s *)Logger.logObject.getter( v113,  v114,  v115,  v116,  v117,  v118,  v119,  v120,  v133,  v134,  v135,  v136,  v137);
            os_log_type_t v122 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v121, v122))
            {
              uint64_t v123 = swift_slowAlloc(22LL, -1LL);
              uint64_t v124 = swift_slowAlloc(64LL, -1LL);
              *(void *)&__int128 v157 = v124;
              *(_DWORD *)uint64_t v123 = 136315394;
              id v144 = (char *)v109;
              swift_bridgeObjectRetain(a2);
              *(void *)&__int128 v154 = sub_3D10(v153, a2, (uint64_t *)&v157);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8, v123 + 4, v123 + 12);
              swift_bridgeObjectRelease_n(a2, 3LL);
              *(_WORD *)(v123 + 12) = 2080;
              uint64_t v125 = v138;
              v112(v138, v97, v100);
              uint64_t v126 = String.init<A>(describing:)(v125, v100);
              unint64_t v128 = v127;
              *(void *)&__int128 v154 = sub_3D10(v126, v127, (uint64_t *)&v157);
              uint64_t v109 = (void (*)(char *, char *, uint64_t))v144;
              uint64_t v129 = v136;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8, v123 + 14, v123 + 22);
              swift_bridgeObjectRelease(v128);
              (*(void (**)(char *, uint64_t))(v135 + 8))(v97, v100);
              _os_log_impl( &dword_0,  v121,  v122,  "Extracted original dateTime value for node named: %s) – %s",  (uint8_t *)v123,  0x16u);
              swift_arrayDestroy(v124, 2LL);
              swift_slowDealloc(v124, -1LL, -1LL);
              swift_slowDealloc(v123, -1LL, -1LL);

              (*(void (**)(char *, uint64_t))(v140 + 8))(v139, v141);
              (*(void (**)(char *, uint64_t))(v152 + 8))(v146, v147);
              (*(void (**)(char *, uint64_t))(v148 + 8))(v149, v150);
            }

            else
            {

              (*(void (**)(char *, uint64_t))(v108 + 8))(v97, v100);
              swift_bridgeObjectRelease_n(a2, 2LL);
              (*(void (**)(char *, uint64_t))(v140 + 8))(v139, v141);
              (*(void (**)(char *, uint64_t))(v152 + 8))(v146, v147);
              (*(void (**)(char *, uint64_t))(v148 + 8))(v149, v150);
              uint64_t v129 = v136;
            }

            uint64_t v132 = v151;
            v109((char *)v151, v129, v100);
            uint64_t v60 = v132;
            uint64_t v61 = 0LL;
            goto LABEL_49;
          }

          uint64_t v130 = *(void (**)(char *, uint64_t))(v106 + 8);
          v130(v107, v104);
          (*(void (**)(char *, uint64_t))(v101 + 8))(v96, v147);
          (*(void (**)(char *, uint64_t))(v148 + 8))(v149, v150);
          v130(v99, v104);
        }
      }

      uint64_t v60 = v151;
      uint64_t v61 = 1LL;
LABEL_49:
      uint64_t v62 = v100;
      return sub_A40C(v60, v61, 1LL, v62);
    }
  }

  else
  {
    sub_202D8((uint64_t)&v157, &qword_D68E0);
    sub_A40C((uint64_t)v28, 1LL, 1LL, v64);
  }

  sub_202D8((uint64_t)v28, &qword_D68D8);
  if (qword_D30F0 != -1) {
    swift_once(&qword_D30F0, sub_6FCEC);
  }
  uint64_t v82 = type metadata accessor for Logger(0LL);
  sub_26F0(v82, (uint64_t)qword_D63A8);
  uint64_t v83 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v91 = (os_log_s *)Logger.logObject.getter(v83, v84, v85, v86, v87, v88, v89, v90, v133, v134, v135, v136, v137);
  os_log_type_t v92 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v91, v92))
  {
    uint64_t v93 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v94 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v157 = v94;
    *(_DWORD *)uint64_t v93 = 136315138;
    swift_bridgeObjectRetain(a2);
    *(void *)&__int128 v154 = sub_3D10(v153, a2, (uint64_t *)&v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8, v93 + 4, v93 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl(&dword_0, v91, v92, "No dateTime value for node named: %s)", v93, 0xCu);
    swift_arrayDestroy(v94, 1LL);
    swift_slowDealloc(v94, -1LL, -1LL);
    swift_slowDealloc(v93, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v62 = v137;
  uint64_t v60 = v151;
  uint64_t v61 = 1LL;
  return sub_A40C(v60, v61, 1LL, v62);
}

void sub_714B8()
{
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmAttributes) == 15)
  {
    sub_75654();
    if (qword_D3130 != -1) {
      swift_once(&qword_D3130, sub_6FE70);
    }
    sub_1713C();
    sub_75070(&qword_D67C0);
    uint64_t v9 = sub_75428(v1, v2, v3, v4, v5, v6, v7, v8, v17, v19, SWORD2(v19), SBYTE6(v19), SHIBYTE(v19));
    sub_7563C((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v18, v20, v21, v22, v23);
  }

  sub_75440();
}

void sub_71544()
{
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmReference) == 36)
  {
    sub_75654();
    if (qword_D3138 != -1) {
      swift_once(&qword_D3138, sub_6FEA4);
    }
    sub_1713C();
    sub_75070(&qword_D67C0);
    uint64_t v9 = sub_75428(v1, v2, v3, v4, v5, v6, v7, v8, v17, v19, SWORD2(v19), SBYTE6(v19), SHIBYTE(v19));
    sub_7563C((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v18, v20, v21, v22, v23);
  }

  sub_75440();
}

void sub_715D0()
{
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmConfirmation) == 4)
  {
    sub_75654();
    if (qword_D3140 != -1) {
      swift_once(&qword_D3140, sub_6FED8);
    }
    sub_1713C();
    sub_75070(&qword_D67C0);
    uint64_t v9 = sub_75428(v1, v2, v3, v4, v5, v6, v7, v8, v17, v19, SWORD2(v19), SBYTE6(v19), SHIBYTE(v19));
    sub_7563C((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v18, v20, v21, v22, v23);
  }

  sub_75440();
}

void sub_7165C()
{
  __asm { BR              X10 }

uint64_t sub_7168C()
{
  uint64_t v1 = enum case for SiriKitConfirmationState.confirmed(_:);
  uint64_t v2 = ((uint64_t (*)(void))type metadata accessor for SiriKitConfirmationState)(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v0, v1, v2);
}

uint64_t sub_716E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent_domainOntologyNode;
  uint64_t v5 = sub_26B0(&qword_D6880);
  uint64_t v6 = sub_75660(v5);
  *(_OWORD *)(v6 + 16) = xmmword_A5A60;
  if (qword_D30F8 != -1) {
    swift_once(&qword_D30F8, sub_6FD34);
  }
  uint64_t v7 = qword_D8408;
  uint64_t v8 = sub_754F4();
  *(void *)(v6 + 56) = v8;
  sub_754FC(&qword_D6888);
  uint64_t v10 = v9;
  *(void *)(v6 + 64) = v9;
  *(void *)(v6 + 32) = v7;
  uint64_t v11 = qword_D3100;
  sub_56278();
  if (v11 != -1) {
    swift_once(&qword_D3100, sub_6FD5C);
  }
  uint64_t v12 = qword_D8410;
  *(void *)(v6 + 96) = sub_26B0(&qword_D6870);
  sub_4930(&qword_D6890, &qword_D6870);
  *(void *)(v6 + 104) = v13;
  *(void *)(v6 + 72) = v12;
  uint64_t v14 = qword_D3108;
  sub_56278();
  if (v14 != -1) {
    swift_once(&qword_D3108, sub_6FD88);
  }
  uint64_t v15 = qword_D8418;
  *(void *)(v6 + 136) = v8;
  *(void *)(v6 + 144) = v10;
  *(void *)(v6 + 112) = v15;
  uint64_t v16 = qword_D3110;
  swift_retain(v15);
  if (v16 != -1) {
    swift_once(&qword_D3110, sub_6FDB4);
  }
  uint64_t v17 = qword_D8420;
  *(void *)(v6 + 176) = v8;
  *(void *)(v6 + 184) = v10;
  *(void *)(v6 + 152) = v17;
  uint64_t v18 = qword_D3118;
  swift_retain(v17);
  if (v18 != -1) {
    swift_once(&qword_D3118, sub_6FDE8);
  }
  uint64_t v19 = qword_D8428;
  *(void *)(v6 + 216) = v8;
  *(void *)(v6 + 224) = v10;
  *(void *)(v6 + 192) = v19;
  uint64_t v20 = qword_D3138;
  swift_retain(v19);
  if (v20 != -1) {
    swift_once(&qword_D3138, sub_6FEA4);
  }
  uint64_t v21 = qword_D8448;
  *(void *)(v6 + 256) = sub_754F4();
  sub_754FC(&qword_D6898);
  *(void *)(v6 + 264) = v22;
  *(void *)(v6 + 232) = v21;
  uint64_t v23 = qword_D3120;
  sub_755C4();
  if (v23 != -1) {
    swift_once(&qword_D3120, sub_6FE14);
  }
  uint64_t v24 = qword_D8430;
  uint64_t v25 = sub_754F4();
  *(void *)(v6 + 296) = v25;
  sub_754FC(&qword_D68A8);
  uint64_t v27 = v26;
  *(void *)(v6 + 304) = v26;
  *(void *)(v6 + 272) = v24;
  uint64_t v28 = qword_D3128;
  sub_56278();
  if (v28 != -1) {
    swift_once(&qword_D3128, sub_6FE40);
  }
  uint64_t v29 = qword_D8438;
  *(void *)(v6 + 336) = v25;
  *(void *)(v6 + 344) = v27;
  *(void *)(v6 + 312) = v29;
  uint64_t v30 = qword_D3130;
  swift_retain(v29);
  if (v30 != -1) {
    swift_once(&qword_D3130, sub_6FE70);
  }
  uint64_t v31 = qword_D8440;
  *(void *)(v6 + 376) = sub_754F4();
  sub_754FC(&qword_D68B0);
  *(void *)(v6 + 384) = v32;
  *(void *)(v6 + 352) = v31;
  uint64_t v33 = qword_D3140;
  sub_755C4();
  if (v33 != -1) {
    swift_once(&qword_D3140, sub_6FED8);
  }
  uint64_t v34 = qword_D8450;
  *(void *)(v6 + 416) = sub_754F4();
  sub_754FC(&qword_D68B8);
  *(void *)(v6 + 424) = v35;
  *(void *)(v6 + 392) = v34;
  uint64_t v36 = type metadata accessor for DomainOntologyNode(0LL);
  sub_16D14(v36);
  sub_755C4();
  uint64_t v37 = sub_75530();
  *(void *)(v2 + v4) = DomainOntologyNode.init(name:childNodes:isInEventTree:)(v37);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmVerb) = 12;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmId) = xmmword_A6D60;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmLabel) = xmmword_A6D60;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewLabel) = xmmword_A6D60;
  uint64_t v38 = v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmTime;
  sub_26B0((uint64_t *)&unk_D7A70);
  sub_6A12C(v38, 1LL);
  sub_6A12C(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewTime, 1LL);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmAttributes) = 15;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmReference) = 36;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmConfirmation) = 4;
  *(void *)(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredTime) = 1LL;
  *(void *)(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredProposedTime) = 1LL;
  uint64_t v39 = v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewDateTimeFromStartTime;
  uint64_t v40 = sub_26B0(&qword_D37D8);
  sub_23050(v39, v41, v42, v40);
  *(void *)(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredDateTimeRange) = 1LL;
  uint64_t v43 = v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent_intent;
  uint64_t v44 = sub_17144();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 32LL))(v43, a1, v44);
  return v2;
}

void sub_71BCC()
{
  uint64_t v1 = v0;
  uint64_t v90 = v2;
  uint64_t v3 = type metadata accessor for Parse(0LL);
  uint64_t v4 = *(uint64_t (***)(uint64_t, uint64_t))(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v85 = (uint64_t)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v86 = (uint64_t)&v85 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v85 - v9;
  uint64_t v11 = sub_17144();
  uint64_t v87 = *(void *)(v11 - 8);
  uint64_t v88 = (uint8_t *)v11;
  __chkstk_darwin(v11);
  sub_17390();
  uint64_t v14 = (char *)(v13 - v12);
  uint64_t v89 = OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent_domainOntologyNode;
  uint64_t v15 = sub_26B0(&qword_D6880);
  uint64_t v16 = sub_75660(v15);
  *(_OWORD *)(v16 + 16) = xmmword_A5A60;
  if (qword_D30F8 != -1) {
    swift_once(&qword_D30F8, sub_6FD34);
  }
  uint64_t v17 = qword_D8408;
  uint64_t v18 = sub_26B0(&qword_D6868);
  *(void *)(v16 + 56) = v18;
  sub_4930(&qword_D6888, &qword_D6868);
  uint64_t v20 = v19;
  *(void *)(v16 + 64) = v19;
  *(void *)(v16 + 32) = v17;
  uint64_t v21 = qword_D3100;
  sub_56278();
  if (v21 != -1) {
    swift_once(&qword_D3100, sub_6FD5C);
  }
  uint64_t v22 = qword_D8410;
  *(void *)(v16 + 96) = sub_754F4();
  sub_754FC(&qword_D6890);
  *(void *)(v16 + 104) = v23;
  *(void *)(v16 + 72) = v22;
  uint64_t v24 = qword_D3108;
  sub_56278();
  if (v24 != -1) {
    swift_once(&qword_D3108, sub_6FD88);
  }
  uint64_t v25 = qword_D8418;
  *(void *)(v16 + 136) = v18;
  *(void *)(v16 + 144) = v20;
  *(void *)(v16 + 112) = v25;
  uint64_t v26 = qword_D3110;
  swift_retain(v25);
  if (v26 != -1) {
    swift_once(&qword_D3110, sub_6FDB4);
  }
  uint64_t v27 = qword_D8420;
  *(void *)(v16 + 176) = v18;
  *(void *)(v16 + 184) = v20;
  *(void *)(v16 + 152) = v27;
  uint64_t v28 = qword_D3118;
  swift_retain(v27);
  if (v28 != -1) {
    swift_once(&qword_D3118, sub_6FDE8);
  }
  uint64_t v29 = qword_D8428;
  *(void *)(v16 + 216) = v18;
  *(void *)(v16 + 224) = v20;
  *(void *)(v16 + 192) = v29;
  uint64_t v30 = qword_D3138;
  swift_retain(v29);
  if (v30 != -1) {
    swift_once(&qword_D3138, sub_6FEA4);
  }
  uint64_t v31 = qword_D8448;
  *(void *)(v16 + 256) = sub_754E4();
  sub_7559C(&qword_D6898);
  *(void *)(v16 + 264) = v32;
  *(void *)(v16 + 232) = v31;
  uint64_t v33 = qword_D3120;
  sub_56290();
  if (v33 != -1) {
    swift_once(&qword_D3120, sub_6FE14);
  }
  uint64_t v34 = qword_D8430;
  uint64_t v35 = sub_754E4();
  *(void *)(v16 + 296) = v35;
  sub_7559C(&qword_D68A8);
  uint64_t v37 = v36;
  *(void *)(v16 + 304) = v36;
  *(void *)(v16 + 272) = v34;
  uint64_t v38 = qword_D3128;
  sub_56290();
  if (v38 != -1) {
    swift_once(&qword_D3128, sub_6FE40);
  }
  uint64_t v39 = qword_D8438;
  *(void *)(v16 + 336) = v35;
  *(void *)(v16 + 344) = v37;
  *(void *)(v16 + 312) = v39;
  uint64_t v40 = qword_D3130;
  swift_retain(v39);
  if (v40 != -1) {
    swift_once(&qword_D3130, sub_6FE70);
  }
  uint64_t v41 = qword_D8440;
  *(void *)(v16 + 376) = sub_754E4();
  sub_7559C(&qword_D68B0);
  *(void *)(v16 + 384) = v42;
  *(void *)(v16 + 352) = v41;
  uint64_t v43 = qword_D3140;
  sub_56290();
  if (v43 != -1) {
    swift_once(&qword_D3140, sub_6FED8);
  }
  uint64_t v44 = qword_D8450;
  *(void *)(v16 + 416) = sub_754E4();
  sub_7559C(&qword_D68B8);
  *(void *)(v16 + 424) = v45;
  *(void *)(v16 + 392) = v44;
  uint64_t v46 = type metadata accessor for DomainOntologyNode(0LL);
  sub_16D14(v46);
  sub_56290();
  uint64_t v47 = sub_75530();
  uint64_t v48 = DomainOntologyNode.init(name:childNodes:isInEventTree:)(v47);
  *(void *)(v1 + v89) = v48;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmVerb) = 12;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmId) = xmmword_A6D60;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmLabel) = xmmword_A6D60;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewLabel) = xmmword_A6D60;
  uint64_t v49 = v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmTime;
  sub_26B0((uint64_t *)&unk_D7A70);
  sub_7554C(v49);
  sub_7554C(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewTime);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmAttributes) = 15;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmReference) = 36;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmConfirmation) = 4;
  *(void *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredTime) = 1LL;
  *(void *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredProposedTime) = 1LL;
  uint64_t v50 = v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewDateTimeFromStartTime;
  uint64_t v51 = sub_26B0(&qword_D37D8);
  sub_23050(v50, v52, v53, v51);
  *(void *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredDateTimeRange) = 1LL;
  uint64_t v54 = v90;
  sub_755BC((uint64_t)v10, v90);
  int v55 = v4[11]((uint64_t)v10, v3);
  if (v55 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_16D0C(v54, v4[1]);
    sub_16D0C((uint64_t)v10, v4[12]);
LABEL_25:
    uint64_t v57 = *(void (**)(uint64_t, char *, uint8_t *))(v87 + 32);
    uint64_t v58 = v10;
    char v59 = v88;
    v57((uint64_t)v14, v58, v88);
    v57(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent_intent, v14, v59);
    goto LABEL_32;
  }

  if (v55 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_16D0C(v54, v4[1]);
    sub_16D0C((uint64_t)v10, v4[12]);
    uint64_t v56 = sub_26B0(&qword_D3768);
    swift_release(*(void *)&v10[*(int *)(v56 + 48)]);
    goto LABEL_25;
  }

  if (qword_D30F0 != -1) {
    swift_once(&qword_D30F0, sub_6FCEC);
  }
  uint64_t v60 = sub_16C80();
  uint64_t v61 = (os_log_s *)sub_26F0(v60, (uint64_t)qword_D63A8);
  uint64_t v62 = v86;
  uint64_t v63 = sub_755BC(v86, v54);
  Logger.logObject.getter(v63, v64, v65, v66, v67, v68, v69, v70);
  os_log_type_t v71 = sub_17714();
  if (os_log_type_enabled(v61, v71))
  {
    unint64_t v72 = (uint8_t *)sub_16AC4(12LL);
    uint64_t v73 = sub_16AC4(32LL);
    uint64_t v74 = v62;
    uint64_t v89 = v73;
    uint64_t v91 = v73;
    *(_DWORD *)unint64_t v72 = 136315138;
    uint64_t v88 = v72 + 4;
    uint64_t v75 = v85;
    sub_755BC(v85, v74);
    uint64_t v76 = String.init<A>(describing:)(v75, v3);
    unint64_t v78 = v77;
    uint64_t v79 = sub_3D10(v76, v77, &v91);
    uint64_t v80 = sub_4B078(v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, v81, v88, v72 + 12);
    swift_bridgeObjectRelease(v78);
    sub_755B4(v86);
    sub_16BD0(&dword_0, v61, v71, "Unknown parse type: %s", v72);
    uint64_t v82 = v89;
    sub_755F0();
    sub_16AA8(v82);
    sub_16AA8((uint64_t)v72);

    uint64_t v83 = v90;
  }

  else
  {

    sub_755B4(v62);
    uint64_t v83 = v54;
  }

  sub_755B4(v83);
  sub_755B4((uint64_t)v10);
  swift_release(*(void *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent_domainOntologyNode));
  sub_754EC((uint64_t *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmId));
  sub_754EC((uint64_t *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmLabel));
  sub_754EC((uint64_t *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewLabel));
  sub_202D8(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmTime, &qword_D6878);
  sub_202D8(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewTime, &qword_D6878);
  sub_753CC(*(id *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredTime));
  sub_753AC(*(void *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredProposedTime));
  sub_202D8( v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewDateTimeFromStartTime,  &qword_D6820);
  sub_753AC(*(void *)(v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredDateTimeRange));
  uint64_t v84 = sub_1713C();
  swift_deallocPartialClassInstance( v1,  v84,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
LABEL_32:
  sub_16CB0();
}

void sub_72428()
{
  __asm { BR              X10 }

void sub_7246C()
{
  uint64_t v0 = sub_75464();
  sub_22C94(v0);
  sub_6D0F4();
}

uint64_t sub_7261C()
{
  if (!v0) {
    return 3LL;
  }
  sub_71544();
  return 2LL * (v1 == 27);
}

uint64_t sub_72654()
{
  if (v0 == 5) {
    return 1LL;
  }
  else {
    return 2LL * (v0 == 6);
  }
}

void sub_72680()
{
  Swift::Int v0 = sub_755E4();
  NSNumber.init(integerLiteral:)(v0);
  sub_17B50();
}

void sub_726B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  uint64_t v26 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_17390();
  uint64_t v30 = v29 - v28;
  sub_26B0((uint64_t *)&unk_D7A70);
  sub_215E4();
  __chkstk_darwin(v31);
  sub_7556C();
  sub_26B0(&qword_D6818);
  sub_215E4();
  __chkstk_darwin(v32);
  sub_22FFC();
  sub_26B0(&qword_D6840);
  sub_215E4();
  __chkstk_darwin(v33);
  sub_75484();
  sub_26B0(&qword_D6848);
  sub_215E4();
  __chkstk_darwin(v34);
  sub_17540();
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&a9 - v36;
  sub_705F8(v23);
  if (sub_16880(v23, 1LL, v26))
  {
    uint64_t v38 = (uint64_t *)&unk_D7A70;
    uint64_t v39 = v23;
LABEL_9:
    sub_202D8(v39, v38);
    uint64_t v44 = type metadata accessor for TerminalElement.Period(0LL);
    sub_23050((uint64_t)v37, v45, v46, v44);
    goto LABEL_10;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v30, v23, v26);
  sub_202D8(v23, (uint64_t *)&unk_D7A70);
  TerminalElement.DateTimeValue.startTime.getter();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v26);
  uint64_t v40 = sub_75634();
  uint64_t v41 = sub_4DA3C(v22);
  if (v42)
  {
    uint64_t v38 = &qword_D6818;
    uint64_t v39 = v22;
    goto LABEL_9;
  }

  TerminalElement.Time.period.getter(v41);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8LL))(v22, v40);
  type metadata accessor for TerminalElement.DateTimePeriod(0LL);
  uint64_t v43 = sub_4DA3C(v21);
  if (v42)
  {
    uint64_t v38 = &qword_D6840;
    uint64_t v39 = v21;
    goto LABEL_9;
  }

  uint64_t v47 = v21;
  TerminalElement.DateTimePeriod.period.getter(v43);
  sub_75470();
  type metadata accessor for TerminalElement.Period(0LL);
  uint64_t v48 = sub_755E4();
  int v49 = sub_16880(v48, 1LL, v21);
  if (v49 != 1)
  {
    sub_44CFC((uint64_t)v37, v20, &qword_D6848);
    uint64_t v50 = *(void *)(v21 - 8);
    int v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 88))(v20, v47);
    if (v51 != enum case for TerminalElement.Period.morning(_:)
      && v51 != enum case for TerminalElement.Period.noon(_:)
      && v51 != enum case for TerminalElement.Period.afternoon(_:)
      && v51 != enum case for TerminalElement.Period.evening(_:)
      && v51 != enum case for TerminalElement.Period.night(_:)
      && v51 != enum case for TerminalElement.Period.tonight(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v20, v47);
    }
  }

void sub_729AC()
{
  uint64_t v1 = OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredTime;
  uint64_t v2 = *(char **)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredTime);
  if (v2 == (_BYTE *)&dword_0 + 1)
  {
    Class v3 = sub_72A0C();
    uint64_t v4 = *(void **)(v0 + v1);
    *(void *)(v0 + sub_A40C(v0, 0LL, 1LL, v1) = v3;
    uint64_t v5 = v3;
    sub_753CC(v4);
  }

  sub_753DC(v2);
  sub_214A4();
}

Class sub_72A0C()
{
  uint64_t v0 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  Class v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_26B0((uint64_t *)&unk_D7A70);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_705F8((uint64_t)v6);
  if (sub_16880((uint64_t)v6, 1LL, v0))
  {
    sub_202D8((uint64_t)v6, (uint64_t *)&unk_D7A70);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
    sub_202D8((uint64_t)v6, (uint64_t *)&unk_D7A70);
    uint64_t v9 = TerminalElement.DateTimeValue.toDateTimeWithMeridiemSetByUser()();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (v9)
    {
      uint64_t v10 = swift_retain(v9);
      uint64_t v11 = static DateTimeInferenceUtils.inferDateTime(from:anchorDate:)(v10, 0LL);
      swift_release(v9);
      if (v11)
      {
        Class isa = DateTime.asDateComponentsRange()().super.isa;
        swift_release(v11);
        swift_release(v9);
        return isa;
      }

      swift_release(v9);
    }
  }

  return 0LL;
}

void sub_72B6C()
{
}

uint64_t sub_72B80()
{
  uint64_t v0 = sub_26B0((uint64_t *)&unk_D7A70);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - v8;
  sub_705F8((uint64_t)v2);
  if (sub_16880((uint64_t)v2, 1LL, v3))
  {
    sub_202D8((uint64_t)v2, (uint64_t *)&unk_D7A70);
    uint64_t v10 = 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v2, v3);
    sub_202D8((uint64_t)v2, (uint64_t *)&unk_D7A70);
    sub_72CE4();
    uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
    uint64_t v12 = v11(v7, v3);
    uint64_t v10 = TerminalElement.DateTimeValue.toDateTimeWithMeridiemSetByUser()(v12);
    v11(v9, v3);
  }

  uint64_t v13 = static DateTimeInferenceUtils.inferDateTime(from:anchorDate:)(v10, 0LL);
  swift_release(v10);
  return v13;
}

void sub_72CE4()
{
  uint64_t v43 = v4;
  sub_26B0(&qword_D6828);
  sub_215E4();
  __chkstk_darwin(v5);
  sub_22FFC();
  sub_26B0(&qword_D6818);
  sub_215E4();
  __chkstk_darwin(v6);
  sub_4DA84();
  __chkstk_darwin(v7);
  uint64_t v40 = (char *)&v40 - v8;
  sub_26B0(&qword_D6830);
  sub_215E4();
  __chkstk_darwin(v9);
  sub_75484();
  uint64_t v41 = v1;
  sub_26B0((uint64_t *)&unk_D7A60);
  sub_215E4();
  __chkstk_darwin(v10);
  sub_17390();
  uint64_t v42 = v12 - v11;
  sub_26B0((uint64_t *)&unk_D7A50);
  sub_215E4();
  __chkstk_darwin(v13);
  sub_7556C();
  sub_26B0(&qword_D6838);
  sub_215E4();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v40 - v19;
  TerminalElement.DateTimeValue.endDate.getter(v18);
  uint64_t v21 = type metadata accessor for TerminalElement.Date(0LL);
  uint64_t v24 = sub_23050((uint64_t)v17, v22, v23, v21);
  uint64_t v25 = TerminalElement.DateTimeValue.duration.getter(v24);
  uint64_t v26 = TerminalElement.DateTimeValue.interval.getter(v25);
  uint64_t v27 = TerminalElement.DateTimeValue.recurrence.getter(v26);
  TerminalElement.DateTimeValue.endTime.getter(v27);
  uint64_t v28 = sub_75634();
  uint64_t v31 = sub_23050(v0, v29, v30, v28);
  uint64_t v32 = TerminalElement.DateTimeValue.startPosition.getter(v31);
  char v34 = v33 & 1;
  uint64_t v35 = TerminalElement.DateTimeValue.endPosition.getter();
  char v37 = v36 & 1;
  TerminalElement.DateTimeValue.temporalIntent.getter();
  char v39 = v37;
  char v38 = v34;
  TerminalElement.DateTimeValue.init(startDate:endDate:duration:interval:recurrence:startTime:endTime:startPosition:endPosition:temporalIntent:)( v20,  v17,  v3,  v42,  v41,  v40,  v0,  v32,  v38,  v35,  v39,  v2);
  sub_16CB0();
}

void sub_72EC8()
{
  uint64_t v26 = v1;
  uint64_t v27 = v2;
  uint64_t v4 = v3;
  sub_26B0(&qword_D37D8);
  sub_215E4();
  __chkstk_darwin(v5);
  sub_17540();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v25[-v8];
  __chkstk_darwin(v7);
  uint64_t v11 = &v25[-v10];
  sub_72B6C();
  if (v12)
  {
    uint64_t v13 = v12;
    v14.super.Class isa = DateTime.asDateComponentsRange()().super.isa;
    sub_2303C();
    uint64_t v15 = 1LL;
    sub_6A12C((uint64_t)v11, 1LL);
    id v16 = -[objc_class startDateComponents](v14.super.isa, "startDateComponents");
    if (v16)
    {
      uint64_t v17 = v16;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v15 = 0LL;
    }

    sub_6A12C((uint64_t)v9, v15);
    id v18 = -[objc_class recurrenceRule](v14.super.isa, "recurrenceRule");
    id v19 = objc_allocWithZone(&OBJC_CLASS___INDateComponentsRange);
    uint64_t v20 = (objc_class *)sub_752C0((uint64_t)v11, (uint64_t)v9, v18);
    uint64_t v21 = (objc_class *)-[objc_class endDateComponents](v20, "endDateComponents");
    if (v21)
    {
      uint64_t v22 = v21;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
      swift_release(v13);

      uint64_t v23 = 0LL;
      v14.super.Class isa = v20;
      uint64_t v20 = v22;
    }

    else
    {
      swift_release(v13);
      uint64_t v23 = 1LL;
    }

    sub_6A12C(v0, v23);
    sub_5A34(v0, v4, &qword_D37D8);
    sub_16CB0();
  }

  else
  {
    uint64_t v24 = type metadata accessor for DateComponents(0LL);
    sub_A40C(v4, 1LL, 1LL, v24);
  }

void sub_73098(uint64_t a1@<X8>)
{
  uint64_t v7 = &v11[-v6];
  uint64_t v8 = v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewDateTimeFromStartTime;
  sub_45114( v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewDateTimeFromStartTime,  (uint64_t)v12,  0LL);
  sub_44CFC(v8, (uint64_t)v7, &qword_D6820);
  uint64_t v9 = sub_26B0(&qword_D37D8);
  if (sub_16880((uint64_t)v7, 1LL, v9) == 1)
  {
    sub_202D8((uint64_t)v7, &qword_D6820);
    sub_731C4(a1);
    sub_44CFC(a1, v1, &qword_D37D8);
    sub_75610();
    sub_45114(v8, v10, 33LL);
    sub_44A40(v1, v8, &qword_D6820);
    swift_endAccess(v11);
  }

  else
  {
    sub_5A34((uint64_t)v7, a1, &qword_D37D8);
  }

  sub_21290();
}

void sub_731C4(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_26B0(&qword_D37D8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v49 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v49 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v49 - v12;
  uint64_t v14 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_26B0((uint64_t *)&unk_D7A70);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_705F8((uint64_t)v20);
  if (sub_16880((uint64_t)v20, 1LL, v14))
  {
    sub_202D8((uint64_t)v20, (uint64_t *)&unk_D7A70);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v20, v14);
    sub_202D8((uint64_t)v20, (uint64_t *)&unk_D7A70);
    uint64_t v35 = TerminalElement.DateTimeValue.toDateTimeWithMeridiemSetByUser()(v34);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if (v35)
    {
      uint64_t v36 = swift_retain(v35);
      uint64_t v37 = static DateTimeInferenceUtils.inferDateTime(from:anchorDate:)(v36, 0LL);
      swift_release(v35);
      if (v37)
      {
        v38.super.Class isa = DateTime.asDateComponentsRange()().super.isa;
        swift_release(v37);
      }

      else
      {
        v38.super.Class isa = 0LL;
      }

      uint64_t v39 = type metadata accessor for DateComponents(0LL);
      sub_A40C((uint64_t)v13, 1LL, 1LL, v39);
      if (v38.super.isa)
      {
        id v40 = -[objc_class startDateComponents](v38.super.isa, "startDateComponents");
        if (v40)
        {
          uint64_t v41 = v40;
          static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v40);

          uint64_t v42 = 0LL;
        }

        else
        {
          uint64_t v42 = 1LL;
        }

        sub_A40C((uint64_t)v8, v42, 1LL, v39);
        sub_5A34((uint64_t)v8, (uint64_t)v11, &qword_D37D8);
      }

      else
      {
        sub_A40C((uint64_t)v11, 1LL, 1LL, v39);
      }

      id v43 = -[objc_class recurrenceRule](v38.super.isa, "recurrenceRule");
      id v44 = objc_allocWithZone(&OBJC_CLASS___INDateComponentsRange);
      id v45 = sub_752C0((uint64_t)v13, (uint64_t)v11, v43);
      id v46 = [v45 endDateComponents];
      if (v46)
      {
        id v47 = v46;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v46);

        uint64_t v48 = 0LL;
        id v45 = v47;
      }

      else
      {
        uint64_t v48 = 1LL;
      }

      swift_release(v35);
      sub_A40C((uint64_t)v5, v48, 1LL, v39);
      sub_5A34((uint64_t)v5, a1, &qword_D37D8);
      return;
    }
  }

  if (qword_D30F0 != -1) {
    swift_once(&qword_D30F0, sub_6FCEC);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = sub_26F0(v21, (uint64_t)qword_D63A8);
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v22, v23, v24, v25, v26, v27, v28, v29);
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl(&dword_0, v30, v31, "No alarmTime node in parse in alarmNewDateTimeFromStartTime", v32, 2u);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  uint64_t v33 = type metadata accessor for DateComponents(0LL);
  sub_A40C(a1, 1LL, 1LL, v33);
}

unint64_t sub_735C4()
{
  unint64_t v1 = v0;
  if (v0)
  {
    uint64_t v2 = DateTime.time.getter();
    sub_17324();
    if (v2)
    {
      unint64_t v3 = sub_5E3C();
      char v4 = dispatch thunk of DateTime.Time.meridiemSetByUser.getter(v3);
      unint64_t v1 = v3;
      NSNumber.init(BOOLeanLiteral:)(v4 & 1);
      uint64_t v5 = sub_755E4();
      swift_release(v5);
    }

    else
    {
      return 0LL;
    }
  }

  return v1;
}

void sub_73634()
{
}

void sub_73648(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(v2 + *a1);
  if (v4 == 1)
  {
    uint64_t v5 = a2(v2);
    uint64_t v6 = *(void *)(v2 + v3);
    *(void *)(v2 + vsub_1D540( (SEL *)&selRef_alarmReferenceType,  (void (*)(id))&AlarmReferenceType.rawValue.getter,  (char *)&dword_0 + 3) = v5;
    swift_retain(v5);
    sub_753AC(v6);
  }

  sub_753BC(v4);
  sub_214A4();
}

uint64_t sub_736A4()
{
  uint64_t v0 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_26B0((uint64_t *)&unk_D7A70);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_705F8((uint64_t)v6);
  if (sub_16880((uint64_t)v6, 1LL, v0))
  {
    sub_202D8((uint64_t)v6, (uint64_t *)&unk_D7A70);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
    sub_202D8((uint64_t)v6, (uint64_t *)&unk_D7A70);
    uint64_t v21 = TerminalElement.DateTimeValue.toDateTimeWithMeridiemSetByUser()(v20);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (v21)
    {
      uint64_t v22 = swift_retain(v21);
      uint64_t v19 = static DateTimeInferenceUtils.inferDateTimeRange(from:anchorDate:)(v22, 0LL);
      swift_release_n(v21, 2LL);
      return v19;
    }
  }

  if (qword_D30F0 != -1) {
    swift_once(&qword_D30F0, sub_6FCEC);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_26F0(v7, (uint64_t)qword_D63A8);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v8, v9, v10, v11, v12, v13, v14, v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "No alarmTime node in parse in inferredDateTimeRange", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  return 0LL;
}

void sub_7388C()
{
  if (v0)
  {
    uint64_t v1 = v0;
    INDateComponentsRange.alarmRepeatSchedule.getter();
  }

  sub_17B50();
}

void sub_738C8()
{
  uint64_t v151 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  uint64_t v145 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  sub_16B30();
  uint64_t v141 = v2;
  sub_26B0((uint64_t *)&unk_D7A70);
  sub_215E4();
  __chkstk_darwin(v3);
  sub_16B30();
  uint64_t v147 = v4;
  sub_26B0(&qword_D6818);
  sub_215E4();
  __chkstk_darwin(v5);
  sub_16B30();
  uint64_t v143 = v6;
  sub_26B0(&qword_D37D8);
  sub_215E4();
  __chkstk_darwin(v7);
  sub_16B30();
  uint64_t v149 = v8;
  uint64_t v9 = sub_16C80();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_16B30();
  uint64_t v153 = v11;
  uint64_t v12 = type metadata accessor for SiriReferenceResolutionResolver(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_22FFC();
  sub_26B0(&qword_D3A38);
  sub_215E4();
  __chkstk_darwin(v14);
  sub_75484();
  sub_71544();
  if (v15 == 35) {
    goto LABEL_13;
  }
  uint64_t v16 = sub_6FFCC(v15);
  BOOL v18 = v16 == 6647407 && v17 == 0xE300000000000000LL;
  if (v18)
  {
    sub_16C48();
  }

  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, 6647407LL, 0xE300000000000000LL, 0LL);
    sub_16C48();
    if ((v19 & 1) == 0) {
      goto LABEL_13;
    }
  }

  uint64_t v20 = type metadata accessor for UsoEntityBuilder_common_Alarm(0LL);
  sub_16D14(v20);
  UsoEntityBuilder_common_Alarm.init()();
  uint64_t v21 = static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)();
  uint64_t v22 = sub_17324();
  if (!v21)
  {
LABEL_13:
    sub_755AC();
    if (v24 && (uint64_t v25 = v24, v26 = DateTime.time.getter(), v27 = swift_release(v25), v26))
    {
      int v28 = dispatch thunk of DateTime.Time.meridiemSetByUser.getter(v27);
      sub_17324();
      int v29 = v28 ^ 1;
    }

    else
    {
      int v29 = 1;
    }

    if (qword_D30F0 != -1) {
      swift_once(&qword_D30F0, sub_6FCEC);
    }
    uint64_t v30 = sub_26F0(v9, (uint64_t)qword_D63A8);
    uint64_t v31 = sub_754A8();
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v31, v32, v33, v34, v35, v36, v37, v38);
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)sub_16AC4(12LL);
      uint64_t v42 = sub_16AC4(32LL);
      uint64_t v158 = v42;
      uint64_t v139 = v9;
      HIDWORD(v13static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = v29;
      *(_DWORD *)uint64_t v41 = 136315138;
      sub_755AC();
      uint64_t v157 = v43;
      uint64_t v44 = sub_26B0(&qword_D6310);
      uint64_t v45 = String.init<A>(describing:)(&v157, v44);
      uint64_t v47 = sub_3D10(v45, v46, &v158);
      uint64_t v48 = sub_4B078(v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v48, v49, v41 + 4, v41 + 12);
      sub_1D750();
      sub_16C48();
      sub_16BD0(&dword_0, v39, v40, "inferredDateTimeRange: %s", v41);
      sub_75454();
      sub_16AA8(v42);
      sub_16AA8((uint64_t)v41);
    }

    else
    {

      sub_1D750();
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v153, v30, v9);
    uint64_t v50 = sub_754A8();
    uint64_t v58 = (os_log_s *)Logger.logObject.getter(v50, v51, v52, v53, v54, v55, v56, v57);
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v139 = v10;
      char v60 = v29;
      uint64_t v61 = 7104878LL;
      uint64_t v62 = sub_16AC4(18LL);
      uint64_t v63 = sub_16AC4(32LL);
      uint64_t v158 = v63;
      *(_DWORD *)uint64_t v62 = 136315394;
      sub_755AC();
      if (v64 && (uint64_t v65 = DateTime.time.getter(), v66 = sub_17324(), v65))
      {
        char v67 = dispatch thunk of DateTime.Time.meridiemSetByUser.getter(v66);
        swift_release(v65);
        if ((v67 & 1) != 0) {
          uint64_t v61 = 1702195828LL;
        }
        else {
          uint64_t v61 = 0x65736C6166LL;
        }
        if ((v67 & 1) != 0) {
          unint64_t v68 = 0xE400000000000000LL;
        }
        else {
          unint64_t v68 = 0xE500000000000000LL;
        }
      }

      else
      {
        unint64_t v68 = 0xE300000000000000LL;
      }

      uint64_t v157 = sub_3D10(v61, v68, &v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v62 + 4, v62 + 12);
      sub_1D750();
      sub_16C48();
      *(_WORD *)(v62 + 12) = 1024;
      LOBYTE(v29) = v60;
      LODWORD(v15static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = v60 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, (char *)&v157 + 4, v62 + 14, v62 + 18);
      _os_log_impl( &dword_0,  v58,  v59,  "In alarmNLv3Intent.alarmSearch: SiriInference.meridiemSetByUser = %s, isMeridianInferred = %{BOOL}d",  (uint8_t *)v62,  0x12u);
      sub_755F0();
      sub_16AA8(v63);
      sub_16AA8(v62);

      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v153, v9);
    }

    else
    {

      sub_1D750();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v153, v9);
    }

    uint64_t v69 = type metadata accessor for AlarmSearch(0LL);
    uint64_t v70 = sub_702C4();
    uint64_t v72 = v71;
    id v73 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v69));
    id v74 = sub_1D5F8(v70, v72, 0LL, 0xE000000000000000LL);
    uint64_t v75 = sub_7261C();
    id v76 = sub_755FC(v75, "setAlarmReferenceType:");
    sub_726B4( (uint64_t)v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v137,  v139,  v141,  v143,  v145,  v147,  v149,  v151,  v153,  v155,  v157,  v158);
    if (v84)
    {
      sub_56298(v84, "setTime:");
      sub_755AC();
      if (v85)
      {
        uint64_t v86 = v85;
        uint64_t v87 = (void *)DateTime.toINAlarmSearchDateTime(isTimeRange:)(1);
        uint64_t v85 = swift_release(v86);
      }

      else
      {
        uint64_t v87 = 0LL;
      }

      sub_22FBC(v85, "setTimeRange:");

      goto LABEL_45;
    }

    uint64_t v88 = v148;
    sub_705F8(v148);
    if (sub_16880(v148, 1LL, v152))
    {
      uint64_t v89 = (uint64_t *)&unk_D7A70;
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 16))(v142, v148, v152);
      sub_202D8(v148, (uint64_t *)&unk_D7A70);
      uint64_t v88 = v144;
      TerminalElement.DateTimeValue.startTime.getter();
      (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v142, v152);
      sub_75634();
      if (sub_7558C() != 1)
      {
        TerminalElement.Time.toTime()();
        uint64_t v113 = sub_754CC();
        DateTime.Time.dateComponents()(v113);
        sub_17324();
        sub_2303C();
        sub_6A12C(v150, 0LL);
        uint64_t v93 = sub_7558C();
        uint64_t v94 = 0LL;
        if ((_DWORD)v93 != 1)
        {
          uint64_t v94 = (void *)v150;
          DateComponents._bridgeToObjectiveC()();
          uint64_t v93 = sub_754CC();
        }

        goto LABEL_44;
      }

      uint64_t v89 = &qword_D6818;
    }

    sub_202D8(v88, v89);
    uint64_t v90 = sub_2303C();
    uint64_t v93 = sub_23050(v150, v91, v92, v90);
    uint64_t v94 = 0LL;
LABEL_44:
    sub_22FBC(v93, "setTime:");

    sub_56298(v95, "setTimeRange:");
LABEL_45:
    uint64_t v96 = sub_703B0();
    if (v97)
    {
      uint64_t v98 = v97;
      NSString v99 = String._bridgeToObjectiveC()();
      uint64_t v96 = swift_bridgeObjectRelease(v98);
    }

    else
    {
      NSString v99 = 0LL;
    }

    sub_22FBC(v96, "setLabel:");

    uint64_t v100 = sub_72654();
    sub_755FC(v100, "setAlarmSearchStatus:");
    sub_72680();
    uint64_t v102 = (void *)v101;
    sub_22FBC(v101, "setIncludeSleepAlarm:");

    sub_726B4( v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v138,  v140,  v142,  v144,  v146,  v148,  v150,  v152,  v154,  v156,  v157,  v158);
    sub_755FC(v111, "setPeriod:");
    uint64_t v112 = (void *)Bool.number.getter(v29 & 1);
    [v74 setIsMeridianInferred:v112];

    goto LABEL_49;
  }

  static SiriReferenceResolutionResolver.shared.getter(v22);
  SiriReferenceResolutionResolver.resolveReferenceEntity(referenceEntity:)(v21);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v12);
  type metadata accessor for RREntity(0LL);
  sub_4DA3C(v0);
  if (v18)
  {
    sub_4AF44();
    sub_202D8(v0, &qword_D3A38);
    goto LABEL_13;
  }

  uint64_t v23 = type metadata accessor for SiriAlarm(0LL);
  uint64_t v114 = (void *)RREntity.convertData<A>(to:)(v23, v23);
  sub_75470();
  if (!v114)
  {
    sub_4AF44();
    goto LABEL_13;
  }

  id v115 = v114;
  sub_902E4(v115);
  if (!v117)
  {
    sub_4AF44();

    goto LABEL_13;
  }

  uint64_t v118 = v116;
  unint64_t v119 = v117;
  if (qword_D30F0 != -1) {
    swift_once(&qword_D30F0, sub_6FCEC);
  }
  sub_26F0(v9, (uint64_t)qword_D63A8);
  uint64_t v120 = swift_bridgeObjectRetain_n(v119, 2LL);
  unint64_t v128 = (os_log_s *)Logger.logObject.getter(v120, v121, v122, v123, v124, v125, v126, v127);
  os_log_type_t v129 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v128, v129))
  {
    uint64_t v130 = (uint8_t *)sub_16AC4(12LL);
    id v131 = v115;
    uint64_t v132 = sub_16AC4(32LL);
    uint64_t v158 = v132;
    *(_DWORD *)uint64_t v130 = 136315138;
    swift_bridgeObjectRetain(v119);
    uint64_t v133 = sub_3D10(v118, v119, &v158);
    uint64_t v134 = sub_4B078(v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, v135, v130 + 4, v130 + 12);
    swift_bridgeObjectRelease_n(v119, 3LL);
    sub_16BD0(&dword_0, v128, v129, "Resolved alarm from SRR. Using its id %s to search alarm.", v130);
    sub_75454();
    uint64_t v136 = v132;
    id v115 = v131;
    sub_16AA8(v136);
    sub_16AA8((uint64_t)v130);
  }

  else
  {

    swift_bridgeObjectRelease_n(v119, 2LL);
  }

  type metadata accessor for AlarmSearch(0LL);
  sub_1B654(v118, v119);
  sub_4AF44();

  swift_bridgeObjectRelease(v119);
LABEL_49:
  sub_16CB0();
}

void sub_74254()
{
  uint64_t v2 = v0;
  sub_70238();
  if (v3 != 5 && v3 != 6)
  {
    if (qword_D30F0 != -1) {
      swift_once(&qword_D30F0, sub_6FCEC);
    }
    uint64_t v4 = sub_16C80();
    uint64_t v5 = (void *)sub_26F0(v4, (uint64_t)qword_D63A8);
    uint64_t v6 = sub_754A8();
    Logger.logObject.getter(v6, v7, v8, v9, v10, v11, v12, v13);
    os_log_type_t v14 = sub_17714();
    if (sub_16C28(v14))
    {
      char v15 = (_DWORD *)sub_16AC4(12LL);
      uint64_t v39 = sub_16AC4(32LL);
      *char v15 = 136315138;
      LOBYTE(v3static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = *(_BYTE *)(v2 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmVerb);
      uint64_t v16 = sub_26B0(&qword_D3848);
      uint64_t v24 = sub_7555C(v16, v17, v18, v19, v20, v21, v22, v23, v37);
      uint64_t v27 = sub_755CC(v24, v25, v26);
      sub_754B4(v27, v28, v29, v30, v31, v32, v33, v34, v38);
      sub_1D750();
      swift_bridgeObjectRelease(v1);
      sub_7551C(&dword_0, v35, v36, "Invalid alarmChangeStatusOperation based on alarmVerb %s");
      sub_75454();
      sub_16AA8(v39);
      sub_16AA8((uint64_t)v15);
    }

    else
    {

      sub_1D750();
    }
  }

  sub_6D0F4();
}

uint64_t sub_743A4()
{
  return 2LL * (v0 == 8);
}

uint64_t sub_743C8()
{
  if (v0 == 13) {
    return 3LL;
  }
  sub_70238();
  uint64_t v3 = 1LL;
  if (v2 == 4) {
    uint64_t v3 = 2LL;
  }
  if (v2 == 7) {
    uint64_t v3 = 4LL;
  }
  if (v2 == 11) {
    return 1LL;
  }
  else {
    return v3;
  }
}

void sub_7441C()
{
  uint64_t v1 = sub_17144();
  sub_2153C(v1);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent_domainOntologyNode));
  sub_754EC((uint64_t *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmId));
  sub_754EC((uint64_t *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmLabel));
  sub_754EC((uint64_t *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewLabel));
  sub_202D8(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmTime, &qword_D6878);
  sub_202D8(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewTime, &qword_D6878);
  sub_753CC(*(id *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredTime));
  sub_753AC(*(void *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredProposedTime));
  sub_202D8( v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___alarmNewDateTimeFromStartTime,  &qword_D6820);
  sub_753AC(*(void *)(v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent____lazy_storage___inferredDateTimeRange));
  sub_17B50();
}

uint64_t sub_74500()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for AlarmNLIntent(uint64_t a1)
{
  uint64_t result = qword_D6450;
  if (!qword_D6450) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlarmNLIntent);
  }
  return result;
}

void sub_7455C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NLIntent(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    v8[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v8[2] = &unk_A65A8;
    v8[3] = &unk_A65C0;
    v8[4] = &unk_A65C0;
    v8[5] = &unk_A65C0;
    sub_7466C(319LL, &qword_D6460, (uint64_t *)&unk_D7A70);
    if (v5 <= 0x3F)
    {
      uint64_t v9 = *(void *)(v4 - 8) + 64LL;
      uint64_t v10 = v9;
      uint64_t v11 = &unk_A65D8;
      uint64_t v12 = &unk_A65F0;
      uint64_t v13 = &unk_A6608;
      os_log_type_t v14 = &unk_A6620;
      char v15 = &unk_A6620;
      sub_7466C(319LL, (unint64_t *)&unk_D6468, &qword_D37D8);
      if (v7 <= 0x3F)
      {
        uint64_t v16 = *(void *)(v6 - 8) + 64LL;
        uint64_t v17 = &unk_A6620;
        swift_updateClassMetadata2(a1, 256LL, 15LL, v8, a1 + 80);
      }
    }
  }

void sub_7466C(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    uint64_t v5 = sub_16974(a3);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_746B8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_74704 + 4 * byte_A6575[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_74738 + 4 * byte_A6570[v4]))();
}

uint64_t sub_74738(uint64_t result)
{
  *(_BYTE *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_74740(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x74748LL);
  }
  return result;
}

uint64_t sub_74754(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x7475CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_74760(uint64_t result)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_74768(uint64_t result)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

void type metadata accessor for AlarmNLIntent.AlarmConfirmation()
{
}

uint64_t sub_74780(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xDE)
  {
    if (a2 + 34 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 34) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 35;
    return (v5 + 1);
  }

uint64_t sub_74808(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 34 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 34) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xDE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xDD) {
    return ((uint64_t (*)(void))((char *)&loc_74854 + 4 * byte_A657F[v4]))();
  }
  *a1 = a2 + 34;
  return ((uint64_t (*)(void))((char *)sub_74888 + 4 * byte_A657A[v4]))();
}

uint64_t sub_74888(uint64_t result)
{
  *(_BYTE *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_74890(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x74898LL);
  }
  return result;
}

uint64_t sub_748A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x748ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 34;
  return result;
}

uint64_t sub_748B0(uint64_t result)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_748B8(uint64_t result)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

void type metadata accessor for AlarmNLIntent.AlarmReference()
{
}

uint64_t sub_748D0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 13) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 14;
    return (v5 + 1);
  }

uint64_t sub_74958(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_749A4 + 4 * byte_A6589[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_749D8 + 4 * byte_A6584[v4]))();
}

uint64_t sub_749D8(uint64_t result)
{
  *(_BYTE *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_749E0(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x749E8LL);
  }
  return result;
}

uint64_t sub_749F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x749FCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 13;
  return result;
}

uint64_t sub_74A00(uint64_t result)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_74A08(uint64_t result)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

void type metadata accessor for AlarmNLIntent.AlarmAttributes()
{
}

uint64_t sub_74A20(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }

uint64_t sub_74AA8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_74AF4 + 4 * byte_A6593[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_74B28 + 4 * byte_A658E[v4]))();
}

uint64_t sub_74B28(uint64_t result)
{
  *(_BYTE *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_74B30(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x74B38LL);
  }
  return result;
}

uint64_t sub_74B44(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x74B4CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 10;
  return result;
}

uint64_t sub_74B50(uint64_t result)
{
  *(_DWORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

uint64_t sub_74B58(uint64_t result)
{
  *(_WORD *)(result + sub_1D540( (SEL *)&selRef_alarmSearchStatus,  (void (*)(id))&AlarmSearchStatus.rawValue.getter,  (char *)&dword_0 + 1) = v1;
  return result;
}

void type metadata accessor for AlarmNLIntent.AlarmVerb()
{
}

unint64_t sub_74B74()
{
  unint64_t result = qword_D6720;
  if (!qword_D6720)
  {
    unint64_t result = swift_getWitnessTable(&unk_A670C, &unk_CCE68);
    atomic_store(result, (unint64_t *)&qword_D6720);
  }

  return result;
}

void sub_74BB0()
{
}

unint64_t sub_74BE0()
{
  unint64_t result = qword_D6738;
  if (!qword_D6738)
  {
    unint64_t result = swift_getWitnessTable(&unk_A667C, &unk_CCE68);
    atomic_store(result, (unint64_t *)&qword_D6738);
  }

  return result;
}

unint64_t sub_74C20()
{
  unint64_t result = qword_D6740;
  if (!qword_D6740)
  {
    unint64_t result = swift_getWitnessTable(&unk_A674C, &unk_CCE68);
    atomic_store(result, (unint64_t *)&qword_D6740);
  }

  return result;
}

unint64_t sub_74C60()
{
  unint64_t result = qword_D6748;
  if (!qword_D6748)
  {
    unint64_t result = swift_getWitnessTable(&unk_A6804, &unk_CCDD8);
    atomic_store(result, (unint64_t *)&qword_D6748);
  }

  return result;
}

void sub_74C9C()
{
}

unint64_t sub_74CCC()
{
  unint64_t result = qword_D6760;
  if (!qword_D6760)
  {
    unint64_t result = swift_getWitnessTable(&unk_A6774, &unk_CCDD8);
    atomic_store(result, (unint64_t *)&qword_D6760);
  }

  return result;
}

unint64_t sub_74D0C()
{
  unint64_t result = qword_D6768;
  if (!qword_D6768)
  {
    unint64_t result = swift_getWitnessTable(&unk_A6844, &unk_CCDD8);
    atomic_store(result, (unint64_t *)&qword_D6768);
  }

  return result;
}

unint64_t sub_74D4C()
{
  unint64_t result = qword_D6770;
  if (!qword_D6770)
  {
    unint64_t result = swift_getWitnessTable(&unk_A6934, &unk_CCD48);
    atomic_store(result, (unint64_t *)&qword_D6770);
  }

  return result;
}

void sub_74D88()
{
}

unint64_t sub_74DB8()
{
  unint64_t result = qword_D6788;
  if (!qword_D6788)
  {
    unint64_t result = swift_getWitnessTable(&unk_A686C, &unk_CCD48);
    atomic_store(result, (unint64_t *)&qword_D6788);
  }

  return result;
}

unint64_t sub_74DF8()
{
  unint64_t result = qword_D6790;
  if (!qword_D6790)
  {
    unint64_t result = swift_getWitnessTable(&unk_A6974, &unk_CCD48);
    atomic_store(result, (unint64_t *)&qword_D6790);
  }

  return result;
}

unint64_t sub_74E38()
{
  unint64_t result = qword_D6798;
  if (!qword_D6798)
  {
    unint64_t result = swift_getWitnessTable(&unk_A6A2C, &unk_CCCB8);
    atomic_store(result, (unint64_t *)&qword_D6798);
  }

  return result;
}

void sub_74E74()
{
}

unint64_t sub_74EA4()
{
  unint64_t result = qword_D67B0;
  if (!qword_D67B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_A699C, &unk_CCCB8);
    atomic_store(result, (unint64_t *)&qword_D67B0);
  }

  return result;
}

unint64_t sub_74EE4()
{
  unint64_t result = qword_D67B8;
  if (!qword_D67B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_A6A6C, &unk_CCCB8);
    atomic_store(result, (unint64_t *)&qword_D67B8);
  }

  return result;
}

uint64_t sub_74F20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent_intent;
  uint64_t v4 = type metadata accessor for NLIntent(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_74F68()
{
  return swift_retain(*(void *)(*v0 + OBJC_IVAR____TtC15AlarmFlowPlugin13AlarmNLIntent_domainOntologyNode));
}

uint64_t sub_74F7C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_A6AEC, a1);
  return NLIntentWrapper.traversableIntentNode.getter(a1, WitnessTable);
}

uint64_t sub_74FC0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_A6AEC, a1);
  return NLIntentWrapper.traversableOntologyNode.getter(a1, WitnessTable);
}

uint64_t sub_74FF4(uint64_t a1)
{
  return NLIntentWrapper.description.getter(a1);
}

void sub_75028()
{
}

void sub_7504C()
{
}

void sub_75070(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = type metadata accessor for AlarmNLIntent(255LL);
    atomic_store(sub_755D8(v2), a1);
  }

  sub_17B50();
}

unint64_t sub_750A4()
{
  unint64_t result = qword_D67D0;
  if (!qword_D67D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_A6A04, &unk_CCCB8);
    atomic_store(result, (unint64_t *)&qword_D67D0);
  }

  return result;
}

unint64_t sub_750E0()
{
  unint64_t result = qword_D67D8;
  if (!qword_D67D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_A69CC, &unk_CCCB8);
    atomic_store(result, (unint64_t *)&qword_D67D8);
  }

  return result;
}

unint64_t sub_7511C()
{
  unint64_t result = qword_D67E0;
  if (!qword_D67E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_A68D4, &unk_CCD48);
    atomic_store(result, (unint64_t *)&qword_D67E0);
  }

  return result;
}

unint64_t sub_75158()
{
  unint64_t result = qword_D67E8;
  if (!qword_D67E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_A689C, &unk_CCD48);
    atomic_store(result, (unint64_t *)&qword_D67E8);
  }

  return result;
}

unint64_t sub_75194()
{
  unint64_t result = qword_D67F0;
  if (!qword_D67F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_A68FC, &unk_CCD48);
    atomic_store(result, (unint64_t *)&qword_D67F0);
  }

  return result;
}

unint64_t sub_751D0()
{
  unint64_t result = qword_D67F8;
  if (!qword_D67F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_A67DC, &unk_CCDD8);
    atomic_store(result, (unint64_t *)&qword_D67F8);
  }

  return result;
}

unint64_t sub_7520C()
{
  unint64_t result = qword_D6800;
  if (!qword_D6800)
  {
    unint64_t result = swift_getWitnessTable(&unk_A67A4, &unk_CCDD8);
    atomic_store(result, (unint64_t *)&qword_D6800);
  }

  return result;
}

unint64_t sub_75248()
{
  unint64_t result = qword_D6808;
  if (!qword_D6808)
  {
    unint64_t result = swift_getWitnessTable(&unk_A66E4, &unk_CCE68);
    atomic_store(result, (unint64_t *)&qword_D6808);
  }

  return result;
}

unint64_t sub_75284()
{
  unint64_t result = qword_D6810;
  if (!qword_D6810)
  {
    unint64_t result = swift_getWitnessTable(&unk_A66AC, &unk_CCE68);
    atomic_store(result, (unint64_t *)&qword_D6810);
  }

  return result;
}

id sub_752C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DateComponents(0LL);
  Class isa = 0LL;
  if (sub_16880(a1, 1LL, v8) != 1)
  {
    Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
  }

  if (sub_16880(a2, 1LL, v8) == 1)
  {
    Class v10 = 0LL;
  }

  else
  {
    Class v10 = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a2, v8);
  }

  id v11 = [v4 initWithStartDateComponents:isa endDateComponents:v10 recurrenceRule:a3];

  return v11;
}

uint64_t sub_753AC(uint64_t result)
{
  if (result != 1) {
    return swift_release(result);
  }
  return result;
}

uint64_t sub_753BC(uint64_t result)
{
  if (result != 1) {
    return swift_retain(result);
  }
  return result;
}

void sub_753CC(id a1)
{
}

id sub_753DC(id result)
{
  return result;
}

uint64_t sub_753EC(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_75400(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

void *sub_75428( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  return IntentNodeTraversable.value<A>(forNode:)(&a13, v13, v14, a1);
}

  ;
}

uint64_t sub_75454()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_75464()
{
  return swift_retain(v0);
}

uint64_t sub_75470()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

  ;
}

  ;
}

uint64_t sub_754A8()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t sub_754B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, v11 + 8, v10, v9);
}

uint64_t sub_754CC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 8LL))(v1, v0);
}

uint64_t sub_754E4()
{
  return sub_26B0(v0);
}

uint64_t sub_754EC@<X0>(uint64_t *a1@<X8>)
{
  return sub_753EC(*a1, a1[1]);
}

uint64_t sub_754F4()
{
  return sub_26B0(v0);
}

void sub_754FC(unint64_t *a1)
{
}

uint64_t sub_75504(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.hash(into:)(va, a1, a2);
}

void sub_7551C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_75530()
{
  return 0x6D72616C61LL;
}

uint64_t sub_7554C(uint64_t a1)
{
  return sub_A40C(a1, 1LL, 1LL, v1);
}

uint64_t sub_7555C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return String.init<A>(describing:)(&a9, a1);
}

  ;
}

  ;
}

uint64_t sub_7558C()
{
  return sub_16880(v1, 1LL, v0);
}

void sub_7559C(unint64_t *a1)
{
}

Swift::Int sub_755A4()
{
  return Hasher._finalize()();
}

void sub_755AC()
{
}

uint64_t sub_755B4(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_755BC(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_755C4()
{
  return swift_retain(v0);
}

uint64_t sub_755CC(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  return sub_3D10(a1, a2, (uint64_t *)va);
}

uint64_t sub_755D8(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_755E4()
{
  return v0;
}

uint64_t sub_755F0()
{
  return swift_arrayDestroy(v0, 1LL);
}

id sub_755FC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_75604()
{
  return sub_753EC(v0, v1);
}

uint64_t sub_75610()
{
  return sub_A40C(v0, 0LL, 1LL, v1);
}

uint64_t sub_75634()
{
  return type metadata accessor for TerminalElement.Time(0LL);
}

uint64_t sub_7563C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, unsigned __int8 a13)
{
  uint64_t result = a13;
  *(_BYTE *)(v13 + v14) = a13;
  return result;
}

void *sub_75648(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

  ;
}

uint64_t sub_75660(uint64_t a1)
{
  return swift_allocObject(a1, 432LL, 7LL);
}

uint64_t type metadata accessor for ChangeAlarmStatusCATsSimple(uint64_t a1)
{
  uint64_t result = qword_D68F0;
  if (!qword_D68F0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ChangeAlarmStatusCATsSimple);
  }
  return result;
}

uint64_t sub_756A4(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_D8468);
}

uint64_t sub_756E0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2D94C((uint64_t)sub_756F0);
}

uint64_t sub_756F0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = sub_26B0(&qword_D3BD0);
  uint64_t v4 = sub_75F50(v3);
  int v5 = (__n128 *)sub_76088(v4);
  uint64_t v6 = sub_75FA4(v5, (__n128)xmmword_A4880);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for AlarmAlarm(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  sub_760F8(v6);
  sub_75E34();
  BOOL v7 = (void *)sub_58B94();
  *(void *)(v0 + 40) = v7;
  sub_760C0(v7, (uint64_t)sub_75780);
  sub_47D5C();
  unint64_t v8 = sub_75F5C(47LL);
  return sub_1EBFC(v8, v9, v10, v11);
}

uint64_t sub_75780()
{
  if (v0)
  {
    sub_19840();
    return sub_19744();
  }

  else
  {
    sub_76040();
    uint64_t v2 = sub_760A8();
    return sub_4F354(v2, v3);
  }

uint64_t sub_757C4(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2D94C((uint64_t)sub_757D4);
}

uint64_t sub_757D4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = sub_26B0(&qword_D3BD0);
  uint64_t v4 = sub_75F50(v3);
  int v5 = (__n128 *)sub_76088(v4);
  uint64_t v6 = sub_75FA4(v5, (__n128)xmmword_A4880);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for AlarmAlarm(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  sub_760F8(v6);
  sub_75E34();
  BOOL v7 = (void *)sub_58B94();
  *(void *)(v0 + 40) = v7;
  sub_760C0(v7, (uint64_t)sub_75780);
  sub_47D5C();
  unint64_t v8 = sub_75F5C(46LL);
  return sub_1EBFC(v8, v9, v10, v11);
}

uint64_t sub_75864(uint64_t a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v9 = sub_26B0(&qword_D3A08);
  *(void *)(v8 + 40) = sub_1EA3C(v9);
  sub_19840();
  return sub_21530();
}

uint64_t sub_758A4()
{
  uint64_t v4 = sub_26B0(&qword_D3BD0);
  uint64_t v5 = sub_760E0(v4);
  v1[6] = v5;
  *(_OWORD *)(v5 + 16) = xmmword_A4B30;
  *(void *)(v5 + 32) = v3;
  *(void *)(v5 + 40) = 0x80000000000A8150LL;
  uint64_t v6 = sub_760CC(v5);
  uint64_t v7 = sub_76028(v6, (uint64_t)"isUserSpecifiedTomorrow");
  uint64_t v9 = sub_75F6C(v7, v8);
  uint64_t v11 = sub_76010(v9, v10);
  uint64_t v12 = sub_75FF4(v11, (uint64_t)"isUserSpecifiedEvening");
  *(void *)(v12 + 280) = 0x80000000000A81D0LL;
  sub_760EC(v12, v13, &qword_D3A08, v14, v15, v16, v17, v18, v31);
  uint64_t v19 = type metadata accessor for SpeakableString(0LL);
  sub_76048(v19);
  if (v20)
  {
    sub_19594(v0, &qword_D3A08);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }

  else
  {
    uint64_t v21 = sub_760B4();
    sub_75FC4((uint64_t)v21);
  }

  uint64_t v22 = v1[3];
  uint64_t v23 = sub_76094(v3 - 1);
  if (v22)
  {
    uint64_t v23 = type metadata accessor for DialogCalendar(v23);
  }

  else
  {
    *(void *)(v5 + 344) = 0LL;
    *(void *)(v5 + 352) = 0LL;
  }

  sub_76070(v23);
  sub_75E4C(v24);
  sub_75F8C();
  unint64_t v25 = (void *)sub_58B94();
  v1[7] = v25;
  *unint64_t v25 = v1;
  v25[1] = sub_75A04;
  uint64_t v26 = sub_75FD8(v3 + 37);
  return sub_75E90(v26, v27, v28, v29);
}

uint64_t sub_75A04()
{
  if (v1)
  {
    sub_19840();
    return sub_19744();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 48));
    sub_19808();
    return sub_4F354(v0, *(uint64_t (**)(void))(v3 + 8));
  }