LABEL_172:
              v19 = v11 + 3;
              goto LABEL_237;
            }

            v34 = self;
            v35 = @"S";
LABEL_161:
            -[NSMetaphone _append:](v34, "_append:", v35);
            goto LABEL_162;
          case 'D':
            if (!sub_53F4(v10, (__int16)v11, 2, &off_853B0))
            {
              v60 = sub_53F4(v10, (__int16)v11, 2, &off_853E0);
              -[NSMetaphone _append:](self, "_append:", @"T");
              v54 = v11 + 2;
              v55 = v60 == 0;
LABEL_109:
              if (v55) {
                v19 = v11 + 1;
              }
              else {
                v19 = v54;
              }
              goto LABEL_237;
            }

            v19 = v11 + 2;
            if (sub_53F4(v10, (__int16)(v11 + 2), 1, &off_853C8))
            {
              v26 = self;
              v27 = @"J";
              goto LABEL_171;
            }

            v42 = self;
            v43 = @"TK";
            goto LABEL_236;
          case 'F':
            v28 = sub_5594(v10, (unsigned __int16)(v11 + 1));
            v29 = v11 + 2;
            v30 = v28 == 70;
            goto LABEL_89;
          case 'G':
            v31 = v11 + 1;
            if (sub_5594(v10, (unsigned __int16)(v11 + 1)) != 72)
            {
              if (sub_5594(v10, (unsigned __int16)(v11 + 1)) == 78)
              {
                if ((unsigned __int16)v11 == 1 && sub_53F4(v10, 0, 1, &off_859F8) && !sub_55E4(v10))
                {
                  v63 = self;
                  v64 = @"KN";
                  v65 = @"N";
LABEL_252:
                  -[NSMetaphone _append:alt:](v63, "_append:alt:", v64, v65);
LABEL_253:
                  v19 = 3;
                  goto LABEL_237;
                }

                v19 = v11 + 2;
                if ((sub_53F4(v10, (__int16)(v11 + 2), 2, &off_85458) & 1) != 0
                  || sub_5594(v10, (unsigned __int16)(v11 + 1)) == 89
                  || sub_55E4(v10))
                {
                  v42 = self;
                  v43 = @"KN";
                  goto LABEL_236;
                }

                v49 = self;
                v50 = @"N";
                v51 = @"KN";
LABEL_267:
                -[NSMetaphone _append:alt:](v49, "_append:alt:", v50, v51);
                goto LABEL_237;
              }

              if (sub_53F4(v10, v31, 2, &off_85470) && !sub_55E4(v10))
              {
                v39 = self;
                v40 = @"KL";
                v41 = @"L";
                goto LABEL_241;
              }

              if ((unsigned __int16)v11 == 1
                && (sub_5594(v10, (unsigned __int16)(v11 + 1)) == 89
                 || sub_53F4(v10, v31, 2, &off_85488)))
              {
                v63 = self;
                v64 = @"K";
                v65 = @"J";
                goto LABEL_252;
              }

              if (((sub_53F4(v10, v31, 2, &off_854A0) & 1) != 0
                 || sub_5594(v10, (unsigned __int16)(v11 + 1)) == 89)
                && (sub_53F4(v10, 0, 6, &off_854B8) & 1) == 0
                && (sub_53F4(v10, (__int16)(v11 - 1), 1, &off_854D0) & 1) == 0
                && (sub_53F4(v10, (__int16)(v11 - 1), 3, &off_854E8) & 1) == 0)
              {
                v39 = self;
                v40 = @"K";
                v41 = @"J";
LABEL_241:
                -[NSMetaphone _append:alt:](v39, "_append:alt:", v40, v41);
                goto LABEL_162;
              }

              if ((sub_53F4(v10, v31, 1, &off_85500) & 1) == 0
                && !sub_53F4(v10, (__int16)(v11 - 1), 4, &off_85518))
              {
                else {
                  v19 = v11 + 1;
                }
                goto LABEL_67;
              }

              if ((sub_53F4(v10, 0, 4, &off_85530) & 1) == 0
                && (sub_53F4(v10, 0, 3, &off_85548) & 1) == 0
                && !sub_53F4(v10, v31, 2, &off_85560))
              {
                if (sub_53F4(v10, v31, 4, &off_85578))
                {
LABEL_101:
                  v34 = self;
                  v35 = @"J";
                  goto LABEL_161;
                }

                v39 = self;
                v40 = @"J";
                v41 = @"K";
                goto LABEL_241;
              }

LABEL_160:
              v34 = self;
              v35 = @"K";
              goto LABEL_161;
            }

            if (!(_WORD)v11) {
              goto LABEL_162;
            }
            if ((unsigned __int16)v11 == 1)
            {
              if (sub_5594(v10, 3u) == 73)
              {
                v32 = self;
                v33 = @"J";
              }

              else
              {
                v32 = self;
                v33 = @"K";
              }

LABEL_249:
              -[NSMetaphone _append:](v32, "_append:", v33);
              goto LABEL_253;
            }

            if ((unsigned __int16)v11 < 3u)
            {
LABEL_218:
              v80 = sub_5594(v10, (unsigned __int16)(v11 - 1));
              v35 = @"K";
              if (v80 != 73) {
                goto LABEL_139;
              }
              goto LABEL_162;
            }

            if ((sub_53F4(v10, (__int16)(v11 - 3), 1, &off_85410) & 1) == 0
              && ((unsigned __int16)v11 < 4u || !sub_53F4(v10, (__int16)(v11 - 4), 1, &off_85428)))
            {
              v79 = sub_53F4(v10, (__int16)(v11 - 3), 1, &off_85440);
              v35 = @"F";
              if ((v79 & 1) == 0) {
                goto LABEL_218;
              }
LABEL_139:
              v34 = self;
              goto LABEL_161;
            }

LABEL_162:
            v19 = v11 + 2;
LABEL_237:
            v15 = (unsigned __int16)v19;
            v11 = v19;
            continue;
          case 'H':
            if ((unsigned __int16)v11 != 1
              && (sub_53F4(v10, (__int16)(v11 - 1), 1, &off_859F8) & 1) == 0)
            {
              goto LABEL_104;
            }

            v19 = v11 + 1;
            v34 = self;
            v35 = @"H";
            goto LABEL_161;
          case 'J':
            if ((sub_53F4(v10, (__int16)v11, 4, &off_85590) & 1) == 0
              && !sub_53F4(v10, 0, 4, &off_855A8))
            {
              if ((unsigned __int16)v11 != 1 || (sub_53F4(v10, 1, 4, &off_855D8) & 1) != 0)
              {
                if (sub_53F4(v10, (__int16)(v11 - 1), 1, &off_859F8)
                  && !sub_55E4(v10)
                  && (sub_5594(v10, (unsigned __int16)(v11 + 1)) == 65
                   || sub_5594(v10, (unsigned __int16)(v11 + 1)) == 79))
                {
                  v61 = self;
                  v62 = @"H";
LABEL_245:
                  -[NSMetaphone _append:alt:](v61, "_append:alt:", @"J", v62);
                }

                else
                {
                  if (v91 == v15)
                  {
                    v61 = self;
                    v62 = @" ";
                    goto LABEL_245;
                  }

                  if ((sub_53F4(v10, (__int16)(v11 + 1), 1, &off_855F0) & 1) == 0
                    && (sub_53F4(v10, (__int16)(v11 - 1), 1, &off_85608) & 1) == 0)
                  {
                    -[NSMetaphone _append:](self, "_append:", @"J");
                  }
                }

                v81 = sub_5594(v10, (unsigned __int16)(v11 + 1));
                v21 = v11 + 2;
                v22 = v81 == 74;
LABEL_74:
                if (v22) {
                  v19 = v21;
                }
                else {
                  v19 = v11 + 1;
                }
                goto LABEL_237;
              }

              v61 = self;
              v62 = @"A";
              goto LABEL_245;
            }

            if ((unsigned __int16)v11 == 1 && sub_5594(v10, 5u) == 32
              || sub_53F4(v10, 0, 4, &off_855C0))
            {
              v17 = self;
              v18 = @"H";
              goto LABEL_103;
            }

            v46 = self;
            v47 = @"J";
            v48 = @"H";
LABEL_208:
            -[NSMetaphone _append:alt:](v46, "_append:alt:", v47, v48);
LABEL_104:
            v19 = v11 + 1;
            goto LABEL_237;
          case 'K':
            v36 = sub_5594(v10, (unsigned __int16)(v11 + 1));
            v37 = v11 + 2;
            v38 = v36 == 75;
            goto LABEL_64;
          case 'L':
            v19 = v11 + 1;
            if (v91 - 3 == v15 && (sub_53F4(v10, (__int16)(v11 - 1), 4, &off_85620) & 1) != 0
              || (sub_53F4(v10, (__int16)(v91 - 1), 2, &off_85638) & 1) != 0
              || sub_53F4(v10, (__int16)v91, 1, &off_85650)
              && sub_53F4(v10, (__int16)(v11 - 1), 4, &off_85668))
            {
              v39 = self;
              v40 = @"L";
              v41 = @" ";
              goto LABEL_241;
            }

            v19 = v11 + 2;
LABEL_156:
            v42 = self;
            v43 = @"L";
            goto LABEL_236;
          case 'M':
            if (sub_53F4(v10, (__int16)(v11 - 1), 3, &off_85680)
              && (v15 + 1 == v91 || (sub_53F4(v10, (__int16)(v11 + 2), 2, &off_85698) & 1) != 0)
              || (v19 = v11 + 1, sub_5594(v10, (unsigned __int16)(v11 + 1)) == 77))
            {
              v19 = v11 + 2;
            }

            v42 = self;
            v43 = @"M";
            goto LABEL_236;
          case 'N':
            else {
              v19 = v11 + 1;
            }
            goto LABEL_58;
          case 'P':
            v19 = v11 + 2;
            v42 = self;
            v43 = @"P";
            goto LABEL_236;
          case 'Q':
            v44 = sub_5594(v10, (unsigned __int16)(v11 + 1));
            v37 = v11 + 2;
            v38 = v44 == 81;
LABEL_64:
            if (v38) {
              v19 = v37;
            }
            else {
              v19 = v11 + 1;
            }
            goto LABEL_67;
          case 'R':
            if (v91 == v15
              && !sub_55E4(v10)
              && sub_53F4(v10, (__int16)(v11 - 2), 2, &off_856C8)
              && (sub_53F4(v10, (__int16)(v11 - 4), 2, &off_856E0) & 1) == 0)
            {
              -[NSMetaphone _append:alt:](self, "_append:alt:", &stru_835B0, @"R");
            }

            else
            {
              -[NSMetaphone _append:](self, "_append:", @"R");
            }

            v45 = sub_5594(v10, (unsigned __int16)(v11 + 1));
            v21 = v11 + 2;
            v22 = v45 == 82;
            goto LABEL_74;
          case 'S':
            if (sub_53F4(v10, (__int16)v11, 5, &off_85710))
            {
              v46 = self;
              v47 = @"X";
              v48 = @"S";
              goto LABEL_208;
            }

            if (!sub_53F4(v10, (__int16)v11, 2, &off_85728))
            {
              if ((sub_53F4(v10, (__int16)v11, 3, &off_85758) & 1) == 0
                && !sub_53F4(v10, (__int16)v11, 4, &off_85770))
              {
                if ((unsigned __int16)v11 == 1
                  && (v82 = 2, (sub_53F4(v10, 2, 1, &off_85788) & 1) != 0)
                  || (v82 = v11 + 1, sub_53F4(v10, (__int16)(v11 + 1), 1, &off_857A0)))
                {
                  -[NSMetaphone _append:alt:](self, "_append:alt:", @"S", @"X");
                  v83 = (__int16)v82;
                  v84 = v10;
                  v85 = &off_857B8;
LABEL_287:
                  else {
                    v19 = v82;
                  }
                  goto LABEL_237;
                }

                if (!sub_53F4(v10, (__int16)v11, 2, &off_857D0))
                {
                  else {
                    -[NSMetaphone _append:](self, "_append:", @"S");
                  }
                  v84 = v10;
                  v83 = (__int16)(v11 + 1);
                  v85 = &off_85848;
                  goto LABEL_287;
                }

                if (sub_5594(v10, (unsigned __int16)(v11 + 2)) != 72)
                {
                  v19 = v11 + 3;
                  if (sub_53F4(v10, (__int16)(v11 + 2), 1, &off_85818))
                  {
                    v42 = self;
                    v43 = @"S";
                    goto LABEL_236;
                  }

                  goto LABEL_292;
                }

                v19 = v11 + 3;
                if (sub_53F4(v10, (__int16)(v11 + 3), 2, &off_857E8))
                {
                  if (sub_53F4(v10, (__int16)(v11 + 3), 2, &off_85800))
                  {
                    v49 = self;
                    v50 = @"X";
                    v51 = @"SK";
                    goto LABEL_267;
                  }

LABEL_292:
                  v42 = self;
                  v43 = @"SK";
                  goto LABEL_236;
                }

                if ((unsigned __int16)v11 == 1
                  && (sub_53F4(v10, 3, 1, &off_859F8) & 1) == 0
                  && sub_5594(v10, 3u) != 87)
                {
                  -[NSMetaphone _append:alt:](self, "_append:alt:", @"X", @"S");
                  v19 = 4;
                  goto LABEL_237;
                }

                v42 = self;
                v43 = @"X";
                goto LABEL_236;
              }

              if (sub_55E4(v10))
              {
                v26 = self;
                v27 = @"S";
                goto LABEL_171;
              }

              -[NSMetaphone _append:alt:](self, "_append:alt:", @"S", @"X");
              goto LABEL_172;
            }

            else {
              v35 = @"X";
            }
            goto LABEL_139;
          case 'T':
            if (sub_53F4(v10, (__int16)v11, 4, &off_85860)
              || sub_53F4(v10, (__int16)v11, 3, &off_85878))
            {
              goto LABEL_170;
            }

            if ((sub_53F4(v10, (__int16)v11, 2, &off_85890) & 1) != 0
              || sub_53F4(v10, (__int16)v11, 3, &off_858A8))
            {
              v19 = v11 + 2;
              if ((sub_53F4(v10, (__int16)(v11 + 2), 2, &off_858C0) & 1) == 0
                && (sub_53F4(v10, 0, 4, &off_858D8) & 1) == 0
                && !sub_53F4(v10, 0, 3, &off_858F0))
              {
                v49 = self;
                v50 = @"0";
                v51 = @"T";
                goto LABEL_267;
              }
            }

            else if (sub_53F4(v10, (__int16)(v11 + 1), 1, &off_85908))
            {
              v19 = v11 + 2;
            }

            else
            {
              v19 = v11 + 1;
            }

            v42 = self;
            v43 = @"T";
            goto LABEL_236;
          case 'V':
            v52 = sub_5594(v10, (unsigned __int16)(v11 + 1));
            v29 = v11 + 2;
            v30 = v52 == 86;
LABEL_89:
            if (v30) {
              v19 = v29;
            }
            else {
              v19 = v11 + 1;
            }
LABEL_92:
            v42 = self;
            v43 = @"F";
            goto LABEL_236;
          case 'W':
            if (sub_53F4(v10, (__int16)v11, 2, &off_85920))
            {
              v34 = self;
              v35 = @"R";
              goto LABEL_161;
            }

            if ((unsigned __int16)v11 == 1
              && ((sub_53F4(v10, 2, 1, &off_859F8) & 1) != 0
               || sub_53F4(v10, 1, 2, &off_85938)))
            {
              else {
                -[NSMetaphone _append:](self, "_append:", @"A");
              }
            }

            if (v91 == v15 && (sub_53F4(v10, (__int16)(v11 - 1), 1, &off_859F8) & 1) != 0
              || (sub_53F4(v10, (__int16)(v11 - 1), 5, &off_85950) & 1) != 0
              || sub_53F4(v10, 0, 3, &off_85968))
            {
              v46 = self;
              v47 = &stru_835B0;
              v48 = @"F";
              goto LABEL_208;
            }

            -[NSMetaphone _append:alt:](self, "_append:alt:", @"TS", @"FX");
            v19 = v11 + 4;
            goto LABEL_237;
          case 'X':
            if (v91 != v15
              || (sub_53F4(v10, (__int16)(v11 - 3), 3, &off_85998) & 1) == 0
              && (sub_53F4(v10, (__int16)(v11 - 2), 2, &off_859B0) & 1) == 0)
            {
              -[NSMetaphone _append:](self, "_append:", @"KS");
            }

            v53 = sub_53F4(v10, (__int16)(v11 + 1), 1, &off_859C8);
            v54 = v11 + 2;
            v55 = v53 == 0;
            goto LABEL_109;
          case 'Z':
            if ((sub_53F4(v10, (__int16)(v11 + 1), 2, &off_859E0) & 1) != 0
              || (v66 = sub_55E4(v10), (_WORD)v11)
              && v66
              && sub_5594(v10, (unsigned __int16)(v11 - 1)) != 84)
            {
              -[NSMetaphone _append:alt:](self, "_append:alt:", @"S", @"TS");
            }

            else
            {
              -[NSMetaphone _append:](self, "_append:", @"S");
            }

            else {
              v19 = v11 + 1;
            }
            goto LABEL_237;
          default:
            if (v16 == 199)
            {
              v17 = self;
              v18 = @"S";
LABEL_103:
              -[NSMetaphone _append:](v17, "_append:", v18);
              goto LABEL_104;
            }

            if (v16 != 209) {
              goto LABEL_104;
            }
            v19 = v11 + 1;
LABEL_58:
            v42 = self;
            v43 = @"N";
            goto LABEL_236;
        }

        break;
      }
    }

    v87 = 2LL;
    if (!self->_isAlternate) {
      v87 = 1LL;
    }
    v7 = (&self->super.isa)[v87];
    -[NSMetaphone reset](self, "reset");
    v8 = v89;
    v4 = v90;
  }

  return v7;
}

id sub_53F4(void *a1, int a2, int a3, void *a4)
{
  id v7 = a4;
  id v8 = sub_5528(a1, a2, a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v10 = v7;
  id v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v16;
    while (2)
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v16 != v12) {
          objc_enumerationMutation(v10);
        }
        if (objc_msgSend( v9,  "isEqualToString:",  *(void *)(*((void *)&v15 + 1) + 8 * (void)i),  (void)v15))
        {
          id v11 = &dword_0 + 1;
          goto LABEL_11;
        }
      }

      id v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }

LABEL_11:
  return v11;
}

  swift_bridgeObjectRelease(a3);
  return 0LL;
}

  sub_10000(0LL, (v30 & 0xC000000000000001LL) == 0, v30);
  if ((v30 & 0xC000000000000001LL) != 0)
  {
    v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v30);
  }

  else
  {
    v32 = *(void *)(v30 + 32);
    swift_retain(v32);
  }

  sub_10F84();
  v28 = sub_5276C(v32);
  swift_release(v32);
  sub_52804();
  sub_527F8(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
  return v28;
}

id sub_5528(void *a1, int a2, int a3)
{
  uint64_t v4 = a2 & ~(a2 >> 31);
  id v5 = a1;
  unsigned __int16 v6 = (unsigned __int16)[v5 length];
  else {
    int v7 = (__int16)(v6 - v4) & ~((__int16)(v6 - v4) >> 31);
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "substringWithRange:", v4, (__int16)v7));

  return v8;
}

id sub_5594(void *a1, unsigned int a2)
{
  id v3 = a1;
  else {
    id v4 = &stru_20;
  }

  return v4;
}

BOOL sub_55E4(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 rangeOfString:@"W"] != (id)0x7FFFFFFFFFFFFFFFLL
    || [v1 rangeOfString:@"K"] != (id)0x7FFFFFFFFFFFFFFFLL
    || [v1 rangeOfString:@"CZ"] != (id)0x7FFFFFFFFFFFFFFFLL
    || [v1 rangeOfString:@"WITZ"] != (id)0x7FFFFFFFFFFFFFFFLL;

  return v2;
}

id sub_5738(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _translateWord:a2]);
  [v3 appendString:v4];

  return [*(id *)(a1 + 32) appendString:@" "];
}

void sub_57C0(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  id v4 = sub_5A44(a1);
  if (v4)
  {
    id v5 = v4;
    id v6 = *(id *)Log.health.unsafeMutableAddressor();
    uint64_t v7 = static os_log_type_t.debug.getter();
    uint64_t v8 = sub_6358(&qword_8BE60);
    uint64_t v9 = sub_65A4(v8, 72LL);
    *(_OWORD *)(v9 + 16) = xmmword_61030;
    id v10 = v5;
    id v11 = [v10 description];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_64A0();
    *(void *)(v9 + 32) = v12;
    *(void *)(v9 + 40) = v14;
    os_log(_:dso:log:type:_:)("Created INResumeWorkoutIntent: %@", 33LL, 2LL, &dword_0, v6, v7, v9);

    swift_bridgeObjectRelease(v9);
    id v29 = v10;
    a3(v5, 0LL);
  }

  else
  {
    uint64_t v15 = type metadata accessor for HealthFlowError();
    swift_initStackObject(v15, v30);
    uint64_t v16 = sub_BD3C(0);
    uint64_t v17 = static os_log_type_t.error.getter();
    __int128 v18 = *(void **)Log.health.unsafeMutableAddressor();
    uint64_t v19 = sub_6358(&qword_8BE60);
    uint64_t v20 = sub_65A4(v19, 72LL);
    *(_OWORD *)(v20 + 16) = xmmword_61030;
    id v21 = v18;
    uint64_t v22 = sub_BC64();
    uint64_t v24 = v23;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_64A0();
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 40) = v24;
    os_log(_:dso:log:_:_:)(v17, &dword_0, v21, "Pause- RCHFlow Strategy: %@", 27LL, 2LL, v20);

    swift_bridgeObjectRelease(v20);
    sub_65A4(v15, 40LL);
    uint64_t v25 = sub_BD3C(1u);
    sub_6240( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v27 = swift_allocError(v15, v26, 0LL, 0LL);
    uint64_t *v28 = v25;
    a3((void *)v27, 1LL);
    swift_errorRelease(v27);
    swift_release(v16);
  }
}

id sub_5A44(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8BE48);
  uint64_t v3 = __chkstk_darwin(v2);
  v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  v30 = (char *)&v30 - v5;
  uint64_t v6 = type metadata accessor for HealthNLIntent(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NLIntent(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20((char *)&v30 - v18, a1, v13);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v19, v13);
  if (v21 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_6598(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 96));
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v19, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
    sub_642C();
    id v22 = sub_509A4((uint64_t)v8);
    sub_6468((uint64_t)v8, type metadata accessor for HealthNLIntent);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  else
  {
    uint64_t v23 = a1;
    uint64_t v25 = (uint64_t)v30;
    uint64_t v24 = (uint64_t)v31;
    if (v21 == enum case for Parse.directInvocation(_:))
    {
      v20(v17, v23, v13);
      sub_5A890((uint64_t)v17, v25);
      sub_6398(v25, v24);
      uint64_t v26 = type metadata accessor for DirectInvocationData(0LL);
      if (sub_63E0(v24, 1LL, v26) == 1)
      {
        sub_63EC(v25);
        sub_63EC(v24);
        id v22 = 0LL;
      }

      else
      {
        sub_5AE94();
        sub_63EC(v25);
        sub_6468(v24, type metadata accessor for DirectInvocationData);
        uint64_t v27 = sub_6358(&qword_8BE50);
        unint64_t v28 = sub_642C();
        else {
          id v22 = 0LL;
        }
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    }

    else
    {
      sub_6598(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
      return 0LL;
    }
  }

  return v22;
}

void sub_5D40(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  if (v3)
  {
    type metadata accessor for SiriKitIntentExecutionBehavior(0LL);
    id v4 = v3;
    static SiriKitIntentExecutionBehavior.remoteIntentExecution(targetDevice:)();

    sub_6590();
  }

  else
  {
    sub_3E728(a1, a2);
  }

uint64_t sub_5D8C()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for ResumeWorkoutStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin21ResumeWorkoutStrategy);
}

void type metadata accessor for INFERENCESchemaINFERENCEAppResolutionType(uint64_t a1)
{
}

void type metadata accessor for INStartWorkoutIntentResponseCode(uint64_t a1)
{
}

void type metadata accessor for INCancelWorkoutIntentResponseCode(uint64_t a1)
{
}

void type metadata accessor for INEndWorkoutIntentResponseCode(uint64_t a1)
{
}

void type metadata accessor for INResumeWorkoutIntentResponseCode(uint64_t a1)
{
}

void type metadata accessor for INPauseWorkoutIntentResponseCode(uint64_t a1)
{
}

uint64_t sub_5E48()
{
  return j___s11SiriKitFlow14ActionForInputV6handleACyFZ();
}

uint64_t sub_5E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for ResumeWorkoutStrategy();
  return RCHFlowStrategy.makeAnnotatedIntentFromParse(parse:currentIntent:completion:)(a1, a2, a3, a4, v11, a6);
}

void sub_5EB4(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
}

uint64_t sub_5ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ResumeWorkoutStrategy();
  return RCHFlowStrategy.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t sub_5F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for ResumeWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeAppDoesNotSupportIntentResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_5F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for ResumeWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeAppNotFoundOnDeviceResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_5FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for ResumeWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeDeviceIncompatibleResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_6018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for ResumeWorkoutStrategy();
  return RouteConfirmIntentResponseFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  v13,  a7);
}

uint64_t sub_6080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ResumeWorkoutStrategy();
  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, v5, a3);
}

uint64_t sub_60B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for ResumeWorkoutStrategy();
  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, v7, a4);
}

void sub_6108(uint64_t a1, void *a2)
{
}

uint64_t sub_6128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for ResumeWorkoutStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_6180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for ResumeWorkoutStrategy();
  return IntentErrorHandling.makeErrorResponse(app:intent:error:_:)(a1, a2, a3, a4, a5, v13, a7);
}

void sub_61E8(uint64_t a1, uint64_t a2)
{
}

void sub_6214(uint64_t a1, uint64_t a2)
{
}

void sub_6240(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (!*a1)
  {
    uint64_t v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }

  sub_6590();
}

void sub_627C(uint64_t a1, uint64_t a2)
{
}

void sub_62A8(uint64_t a1, uint64_t a2)
{
}

  ;
}

void sub_62DC()
{
}

void sub_62E4(int a1)
{
}

void sub_62EC(uint64_t a1)
{
}

void sub_62F4(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

uint64_t sub_6324@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = nullsub_1(*v1);
  *a1 = result;
  return result;
}

BOOL sub_634C(uint64_t *a1, uint64_t *a2)
{
  return sub_4DCEC(*a1, *a2);
}

uint64_t sub_6358(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_6398(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8BE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_63E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_63EC(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8BE48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_642C()
{
  unint64_t result = qword_8BE58;
  if (!qword_8BE58)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INResumeWorkoutIntent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_8BE58);
  }

  return result;
}

void sub_6468(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_6590();
}

unint64_t sub_64A0()
{
  unint64_t result = qword_8BE68;
  if (!qword_8BE68)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_8BE68);
  }

  return result;
}

void type metadata accessor for INWorkoutLocationType(uint64_t a1)
{
}

void type metadata accessor for INSiriAuthorizationStatus(uint64_t a1)
{
}

void type metadata accessor for INWorkoutGoalUnitType(uint64_t a1)
{
}

void sub_6518(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

void sub_655C()
{
}

  ;
}

uint64_t sub_6598@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_65A4(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t type metadata accessor for HealthWorkoutResumeCATs(uint64_t a1)
{
  uint64_t result = qword_8C200;
  if (!qword_8C200) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthWorkoutResumeCATs);
  }
  return result;
}

uint64_t sub_65E4(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_96F20);
}

uint64_t sub_6620(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = sub_6358(&qword_8C260);
  uint64_t v11 = swift_allocObject(v10, 128LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_61440;
  uint64_t v12 = (void *)(v11 + 48);
  *(void *)(v11 + 32) = 1953459315LL;
  *(void *)(v11 + 40) = 0xE400000000000000LL;
  sub_6B1C(a1, (uint64_t)v9, &qword_8C258);
  uint64_t v13 = type metadata accessor for SpeakableString(0LL);
  sub_6BE8((uint64_t)v9);
  if (v14)
  {
    sub_6B60((uint64_t)v9, &qword_8C258);
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
  }

  else
  {
    *(void *)(v11 + 72) = v13;
    uint64_t v15 = sub_6B9C(v12);
    sub_6C14( (uint64_t)v15,  (uint64_t)v9,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  *(void *)(v11 + 80) = 0x4E74756F6B726F77LL;
  *(void *)(v11 + 88) = 0xEB00000000656D61LL;
  sub_6B1C(a2, (uint64_t)v7, &qword_8C258);
  sub_6BE8((uint64_t)v7);
  if (v14)
  {
    sub_6B60((uint64_t)v7, &qword_8C258);
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
  }

  else
  {
    *(void *)(v11 + 120) = v13;
    uint64_t v16 = sub_6B9C((void *)(v11 + 96));
    sub_6C14( (uint64_t)v16,  (uint64_t)v7,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000024LL, 0x8000000000068A90LL, v11);
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_67FC()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)( 0xD000000000000029LL,  0x8000000000068A60LL,  &_swiftEmptyArrayStorage);
}

uint64_t sub_6820(uint64_t a1)
{
  uint64_t v5 = v4 - v3;
  uint64_t v6 = sub_6358(&qword_8C260);
  uint64_t v7 = swift_allocObject(v6, 80LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_61030;
  uint64_t v8 = (void *)(v7 + 48);
  *(void *)(v7 + 32) = 0x656D614E707061LL;
  *(void *)(v7 + 40) = 0xE700000000000000LL;
  sub_6B1C(a1, v5, &qword_8C258);
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  sub_6BE8(v5);
  if (v10)
  {
    sub_6B60(v5, &qword_8C258);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
  }

  else
  {
    *(void *)(v7 + 72) = v9;
    uint64_t v11 = sub_6B9C(v8);
    sub_6C14((uint64_t)v11, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000028LL, 0x8000000000068A30LL, v7);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_6958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_69A8(a1, a2, a3);
}

uint64_t sub_69A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_6BD8();
  uint64_t v10 = v9 - v8;
  sub_6358((uint64_t *)&off_8C250);
  sub_6C04();
  __chkstk_darwin(v11);
  sub_6BD8();
  uint64_t v14 = v13 - v12;
  sub_6B1C(a1, v13 - v12, (uint64_t *)&off_8C250);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapper.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_6B60(a1, (uint64_t *)&off_8C250);
  return v15;
}

uint64_t sub_6AA4()
{
  uint64_t v0 = CATWrapper.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_6AC0()
{
  return type metadata accessor for HealthWorkoutResumeCATs(0LL);
}

void sub_6AC8(uint64_t a1, uint64_t a2)
{
}

void sub_6AE4()
{
}

void sub_6B00(uint64_t a1)
{
}

uint64_t sub_6B1C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_6358(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_6B60(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_6358(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

void *sub_6B9C(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

  ;
}

uint64_t sub_6BE8(uint64_t a1)
{
  return sub_63E0(a1, 1LL, v1);
}

  ;
}

uint64_t sub_6C14@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

unint64_t sub_6C1C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_7ED48, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9) {
    return 9LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_6C64(char a1)
{
  return *(void *)&aStart_2[8 * a1];
}

void sub_6C84(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_6C90()
{
}

uint64_t sub_6C98(uint64_t a1)
{
  return sub_B7B8(a1, *v1);
}

void sub_6CA0(uint64_t a1)
{
}

unint64_t sub_6CA8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_6C1C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_6CD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_6C64(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for HealthVerb(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HealthVerb(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = v7;
LABEL_39:
  sub_F8AC(v4, (v12 - v4) / 24, v6);
  return 1LL;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x57;
  int v5 = v6 - 87;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  sub_10F48();
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x23;
  int v5 = v6 - 35;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v5 = v6 - 20;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  swift_bridgeObjectRelease(v2);
  return 0LL;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v5 = v6 - 22;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthVerb(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_6DE0 + 4 * byte_614B5[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_6E14 + 4 * byte_614B0[v4]))();
}

uint64_t sub_6E14(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6E1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x6E24LL);
  }
  return result;
}

uint64_t sub_6E30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x6E38LL);
  }
  *(_BYTE *)uint64_t result = a2 + 8;
  return result;
}

uint64_t sub_6E3C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6E44(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6E50(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_6E5C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HealthVerb()
{
  return &type metadata for HealthVerb;
}

unint64_t sub_6E78()
{
  unint64_t result = qword_8C268;
  if (!qword_8C268)
  {
    unint64_t result = swift_getWitnessTable(&unk_61574, &type metadata for HealthVerb);
    atomic_store(result, (unint64_t *)&qword_8C268);
  }

  return result;
}

uint64_t sub_6EB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_6F88();
  unint64_t v5 = sub_6FC4();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v4, v5);
}

unint64_t sub_6F0C()
{
  unint64_t result = qword_8C270;
  if (!qword_8C270)
  {
    unint64_t result = swift_getWitnessTable(&unk_614E4, &type metadata for HealthVerb);
    atomic_store(result, (unint64_t *)&qword_8C270);
  }

  return result;
}

unint64_t sub_6F4C()
{
  unint64_t result = qword_8C278;
  if (!qword_8C278)
  {
    unint64_t result = swift_getWitnessTable(&unk_615B4, &type metadata for HealthVerb);
    atomic_store(result, (unint64_t *)&qword_8C278);
  }

  return result;
}

unint64_t sub_6F88()
{
  unint64_t result = qword_8C280;
  if (!qword_8C280)
  {
    unint64_t result = swift_getWitnessTable(&unk_61514, &type metadata for HealthVerb);
    atomic_store(result, (unint64_t *)&qword_8C280);
  }

  return result;
}

unint64_t sub_6FC4()
{
  unint64_t result = qword_8C288[0];
  if (!qword_8C288[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_6153C, &type metadata for HealthVerb);
    atomic_store(result, qword_8C288);
  }

  return result;
}

uint64_t sub_7000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

uint64_t initializeBufferWithCopyOfBuffer for WorkoutPatternProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for GenericErrorFlow(void *a1)
{
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(a1 + 30);
}

uint64_t _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t initializeWithCopy for GenericErrorFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  __int128 v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 264);
  uint64_t v11 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = v10;
  *(void *)(a1 + 272) = v11;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 240, a2 + 240);
  return a1;
}

void *assignWithCopy for GenericErrorFlow(void *a1, void *a2)
{
  return a1;
}

void *sub_720C(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        unint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

void *initializeWithTake for GenericErrorFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for GenericErrorFlow(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 240));
  __int128 v7 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v7;
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericErrorFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 280))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericErrorFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 280) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 280) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for WorkoutNeedsValueStrategyAsync( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WorkoutNeedsValueStrategyAsync);
}

uint64_t sub_7530()
{
  uint64_t v0 = sub_8908();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  __int128 v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = Logger.workout.unsafeMutableAddressor(v2);
  sub_8894(v5, (uint64_t)v13);
  uint64_t v6 = sub_891C((uint64_t)v4, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  __int128 v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_88B0(2LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "WorkoutNeedsValueStrategyAsync actionForInput", v9, 2u);
    sub_8870((uint64_t)v9);
  }

  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return static ActionForInput.handle()(v10);
}

uint64_t sub_7638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  uint64_t v5 = *(void *)(a4 + 16);
  v4[18] = v5;
  uint64_t v6 = type metadata accessor for ParameterResolutionRecord(0LL, v5);
  v4[19] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[20] = v7;
  v4[21] = sub_8860(v7);
  uint64_t v8 = type metadata accessor for Parse(0LL);
  v4[22] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[23] = v9;
  v4[24] = sub_8860(v9);
  uint64_t v10 = type metadata accessor for ParameterIdentifier(0LL);
  v4[25] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[26] = v11;
  v4[27] = sub_8860(v11);
  uint64_t v12 = sub_8908();
  v4[28] = v12;
  v4[29] = *(void *)(v12 - 8);
  v4[30] = sub_8924();
  v4[31] = sub_8924();
  v4[32] = sub_8924();
  sub_8910();
  return sub_887C();
}

uint64_t sub_76F8(uint64_t a1)
{
  v86 = v1 + 13;
  uint64_t v2 = v1[32];
  uint64_t v3 = v1[29];
  uint64_t v4 = Logger.workout.unsafeMutableAddressor(a1);
  sub_8894(v4, (uint64_t)(v1 + 2));
  v87 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  buf = (uint8_t *)v4;
  uint64_t v5 = sub_891C(v2, v4, v87);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (_WORD *)sub_88B0(2LL);
    *uint64_t v8 = 0;
    sub_88D8(&dword_0, v6, v9, "WorkoutNeedsValueStrategyAsync parseValueResponse");
    sub_8870((uint64_t)v8);
  }

  uint64_t v10 = (uint8_t *)v1[32];
  uint64_t v11 = v1[28];
  uint64_t v12 = v1[29];
  uint64_t v14 = v1[26];
  uint64_t v13 = v1[27];
  uint64_t v15 = v1[25];
  uint64_t v16 = v1[19];

  uint64_t v17 = *(void (**)(uint8_t *, uint64_t))(v12 + 8);
  v17(v10, v11);
  uint64_t v18 = ParameterResolutionRecord.parameter.getter(v16);
  ParameterIdentifier.name.getter(v18);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v19(v13, v15);
  v94._countAndFlagsBits = sub_892C();
  if (sub_3E500(v94))
  {
    uint64_t v20 = v1[30];
    uint64_t v21 = v1[28];
    uint64_t v23 = v1[20];
    uint64_t v22 = v1[21];
    uint64_t v24 = v1[19];
    uint64_t v25 = v1[16];
    sub_8894((uint64_t)buf, (uint64_t)(v1 + 5));
    v87(v20, (uint64_t)buf, v21);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v25, v24);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = v1[28];
    if (v29)
    {
      v88 = v17;
      bufa = (uint8_t *)v1[30];
      uint64_t v31 = v1[27];
      uint64_t v82 = v1[21];
      uint64_t v83 = v1[25];
      uint64_t v32 = v1[19];
      uint64_t v84 = v1[20];
      uint64_t v81 = v32;
      uint64_t v33 = v1[18];
      uint64_t v34 = sub_88B0(22LL);
      uint64_t v85 = sub_88B0(64LL);
      *(void *)&__int128 v92 = v85;
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v35 = _typeName(_:qualified:)(v33, 0LL);
      unint64_t v37 = v36;
      v1[11] = sub_173E0(v35, v36, (uint64_t *)&v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 11, v1 + 12);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v38 = ParameterResolutionRecord.parameter.getter(v32);
      uint64_t v39 = ParameterIdentifier.name.getter(v38);
      unint64_t v41 = v40;
      v19(v31, v83);
      v1[12] = sub_173E0(v39, v41, (uint64_t *)&v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 12, v86);
      swift_bridgeObjectRelease(v41);
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v82, v81);
      _os_log_impl( &dword_0,  v27,  v28,  "%s NeedsValueStrategy: Slot - %s is not workoutName slot",  (uint8_t *)v34,  0x16u);
      swift_arrayDestroy(v85, 2LL);
      sub_8870(v85);
      sub_8870(v34);

      v88(bufa, v30);
    }

    else
    {
      (*(void (**)(void, void))(v1[20] + 8LL))(v1[21], v1[19]);

      uint64_t v46 = sub_892C();
      ((void (*)(uint64_t))v17)(v46);
    }

    uint64_t v47 = type metadata accessor for HealthFlowError();
    swift_allocObject(v47, 40LL, 7LL);
    uint64_t v48 = sub_BD3C(2u);
    unint64_t v49 = sub_87B4();
    uint64_t v50 = swift_allocError(v47, v49, 0LL, 0LL);
    uint64_t *v51 = v48;
    swift_willThrow(v50, v51, v52, v53, v54);
    uint64_t v55 = v1[24];
    uint64_t v56 = v1[21];
    swift_task_dealloc(v1[32]);
    sub_88B8();
    sub_88D0();
    sub_8938();
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    v57 = (uint64_t (*)(void))v1[1];
  }

  else
  {
    v42 = (os_log_s *)v1[24];
    uint64_t v44 = v1[17];
    v43 = (uint8_t *)v1[18];
    Input.parse.getter();
    uint64_t v45 = *(void *)(v44 + 32);
    sub_3124C(v42, (uint64_t)v43, v43, (void *)v45);
    v60 = v59;
    uint64_t v61 = v1[31];
    uint64_t v62 = v1[28];
    sub_88F8();
    sub_8894((uint64_t)buf, (uint64_t)(v1 + 8));
    v87(v61, (uint64_t)buf, v62);
    id v63 = v60;
    v64 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v65 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v67 = (uint8_t *)sub_88B0(12LL);
      v89 = (void *)sub_88B0(8LL);
      *(_DWORD *)v67 = 138412290;
      v1[13] = v63;
      id v68 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v86, v1 + 14);
      void *v89 = v63;

      _os_log_impl(&dword_0, v64, v65, "Updated intent after prompting for value: %@", v67, 0xCu);
      sub_6358(&qword_8C360);
      swift_arrayDestroy(v89, 1LL);
      sub_8870((uint64_t)v89);
      sub_8870((uint64_t)v67);
    }

    else
    {

      v64 = (os_log_s *)v63;
    }

    v69 = (uint8_t *)v1[31];
    uint64_t v70 = v1[28];
    uint64_t v71 = v1[18];

    v17(v69, v70);
    uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 24))(v71, v45);
    if (v72)
    {
      uint64_t v73 = v72;
      *((void *)&v93 + 1) = sub_87F4();
      *(void *)&__int128 v92 = v73;
    }

    else
    {
      __int128 v92 = 0u;
      __int128 v93 = 0u;
    }

    uint64_t v74 = v1[32];
    uint64_t v75 = v1[27];
    uint64_t v76 = v1[24];
    uint64_t v77 = v1[21];
    uint64_t v78 = v1[18];
    uint64_t v79 = v1[14];
    IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v92, v63, v78);
    uint64_t v80 = type metadata accessor for IntentPromptAnswer(0LL, v78);
    sub_8760(v79, 0LL, 1LL, v80);
    swift_task_dealloc(v74);
    sub_88B8();
    sub_8938();
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    v57 = (uint64_t (*)(void))v1[1];
  }

  return v57();
}

uint64_t sub_7D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v4[9] = sub_8860(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v4[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[11] = v7;
  v4[12] = sub_8860(v7);
  uint64_t v8 = sub_8908();
  v4[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[14] = v9;
  v4[15] = sub_8860(v9);
  sub_8910();
  return sub_887C();
}

uint64_t sub_7D90(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v4 = Logger.workout.unsafeMutableAddressor(a1);
  sub_8894(v4, v1 + 16);
  uint64_t v5 = sub_891C(v2, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (_WORD *)sub_88B0(2LL);
    *uint64_t v8 = 0;
    sub_88D8(&dword_0, v6, v9, "WorkoutNeedsValueStrategyAsync makePromptForValue");
    sub_8870((uint64_t)v8);
  }

  uint64_t v11 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);

  sub_88E8();
  uint64_t v12 = type metadata accessor for ParameterResolutionRecord(0LL, *(void *)(v11 + 16));
  uint64_t v13 = (void *)ParameterResolutionRecord.intent.getter(v12);
  char v14 = sub_8138();
  *(_BYTE *)(v1 + 160) = v14;

  uint64_t v15 = *sub_8734((void *)(v10 + 200), *(void *)(v10 + 224));
  uint64_t v18 = (uint64_t (*)(uint64_t, char))((char *)&dword_8F028 + dword_8F028);
  uint64_t v16 = (void *)swift_task_alloc(unk_8F02C);
  *(void *)(v1 + 128) = v16;
  *uint64_t v16 = v1;
  v16[1] = sub_7ED4;
  return v18(v15, v14);
}

uint64_t sub_7ED4(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 128);
  uint64_t v4 = *v2;
  *(void *)(v4 + 136) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 120));
    sub_88B8();
    sub_88D0();
    return sub_88A0(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    sub_8910();
    return swift_task_switch(v6, v7, v8);
  }

uint64_t sub_7F5C()
{
  char v1 = *(_BYTE *)(v0 + 160);
  uint64_t v3 = *(void **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  static DialogPhase.clarification.getter();
  uint64_t v4 = swift_task_alloc(32LL);
  *(_BYTE *)(v4 + 16) = v1;
  OutputGenerationManifest.init(dialogPhase:_:)(v2, sub_8758, v4);
  sub_88D0();
  uint64_t v5 = v3[33];
  uint64_t v6 = v3[34];
  sub_8734(v3 + 30, v5);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  *(void *)(v0 + 144) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_8020;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( *(void *)(v0 + 40),  *(void *)(v0 + 136),  *(void *)(v0 + 96),  v5,  v6);
}

uint64_t sub_8020()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 152LL) = v0;
  swift_task_dealloc(v2);
  sub_8910();
  return sub_887C();
}

uint64_t sub_8078()
{
  uint64_t v1 = *(void *)(v0 + 120);

  sub_88E8();
  swift_task_dealloc(v1);
  sub_88B8();
  sub_8938();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_80DC()
{
  uint64_t v1 = sub_892C();
  v2(v1);
  swift_task_dealloc(*(void *)(v0 + 120));
  sub_88B8();
  sub_88D0();
  return sub_88A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_8138()
{
  uint64_t v0 = objc_opt_self(&OBJC_CLASS___INCancelWorkoutIntent);
  if (sub_8888(v0)) {
    return 4LL;
  }
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___INEndWorkoutIntent);
  if (sub_8888(v2)) {
    return 2LL;
  }
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___INPauseWorkoutIntent);
  if (sub_8888(v3)) {
    return 1LL;
  }
  uint64_t v4 = objc_opt_self(&OBJC_CLASS___INResumeWorkoutIntent);
  if (sub_8888(v4)) {
    return 3LL;
  }
  uint64_t v5 = objc_opt_self(&OBJC_CLASS___INStartWorkoutIntent);
  if (sub_8888(v5)) {
    return 0LL;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000016LL,  0x8000000000068B10LL,  "HealthFlowDelegatePlugin/WorkoutNeedsValueStrategyAsync.swift",  61LL,  2LL,  73LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_8230(uint64_t a1, char a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = sub_6C64(a2);
  uint64_t v12 = v11;
  String.toSpeakableString.getter(v10, v11);
  swift_bridgeObjectRelease(v12);
  type metadata accessor for SpeakableString(0LL);
  sub_88C0((uint64_t)v9);
  uint64_t v13 = type metadata accessor for WorkoutPromptForSlotValueParameters(0LL);
  sub_876C((uint64_t)v9, a1 + *(int *)(v13 + 20));
  String.toSpeakableString.getter(0x4E74756F6B726F77LL, 0xEB00000000656D61LL);
  sub_88C0((uint64_t)v7);
  uint64_t v14 = sub_892C();
  return sub_876C(v14, v15);
}

uint64_t sub_832C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = sub_6358(&qword_8C348);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_3404C(a2, (uint64_t)v5);
  uint64_t v6 = type metadata accessor for NLContextUpdate(0LL);
  sub_8760((uint64_t)v5, 0LL, 1LL, v6);
  OutputGenerationManifest.nlContextUpdate.setter(v5);
  return OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
}

uint64_t sub_83C8()
{
  return sub_7530();
}

uint64_t sub_83DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_8C354);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_885C;
  return sub_7638(a1, a2, a3, a4);
}

uint64_t sub_844C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_8C344);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_885C;
  return sub_7D18(a1, a2, a3);
}

uint64_t sub_84B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_885C;
  return NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t sub_8530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_885C;
  return NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t sub_85AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_8640;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_8640()
{
  uint64_t v4 = *v0;
  uint64_t v1 = *(void *)(v4 + 16);
  uint64_t v2 = *v0;
  uint64_t v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_8688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)[1]);
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = sub_885C;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_8724(uint64_t a1)
{
  return swift_getWitnessTable(&unk_616E8, a1);
}

void *sub_8734(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_8758(uint64_t a1)
{
  return sub_832C(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_8760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_876C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_87B4()
{
  unint64_t result = qword_8BE70;
  if (!qword_8BE70)
  {
    uint64_t v1 = type metadata accessor for HealthFlowError();
    unint64_t result = swift_getWitnessTable(&unk_61B3C, v1);
    atomic_store(result, (unint64_t *)&qword_8BE70);
  }

  return result;
}

unint64_t sub_87F4()
{
  unint64_t result = qword_8C358;
  if (!qword_8C358)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INSpeakableString);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_8C358);
  }

  return result;
}

uint64_t sub_8830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_8860@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_8870(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_887C()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_8888(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_8894(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t sub_88A0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_88B0(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_88B8()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_88C0(uint64_t a1)
{
  return sub_8760(a1, 0LL, 1LL, v1);
}

uint64_t sub_88D0()
{
  return swift_task_dealloc(v0);
}

void sub_88D8(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_88E8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_88F8()
{
  return (*(uint64_t (**)(void, void))(v0[23] + 8LL))(v0[24], v0[22]);
}

uint64_t sub_8908()
{
  return type metadata accessor for Logger(0LL);
}

  ;
}

uint64_t sub_891C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_8924()
{
  return swift_task_alloc(v0);
}

uint64_t sub_892C()
{
  return v0;
}

uint64_t sub_8938()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_8940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48LL);
}

void sub_8948(uint64_t a1)
{
  v4[0] = "(";
  v4[1] = &unk_617F0;
  v4[2] = &unk_61808;
  sub_9390(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(v2 - 8) + 64LL;
    v4[4] = "(";
    swift_initStructMetadata(a1, 0LL, 5LL, v4, a1 + 40);
  }

uint64_t sub_89D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v22 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain(v22);
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    __int128 v8 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v4 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v4 + 40, (uint64_t)(a2 + 5));
    __int128 v9 = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(v4 + 104) = v9;
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(v4 + 80, (uint64_t)(a2 + 10));
    __int128 v10 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(v4 + 144) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(v4 + 120, (uint64_t)(a2 + 15));
    __int128 v11 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(v4 + 184) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(v4 + 160, (uint64_t)(a2 + 20));
    __int128 v12 = *((_OWORD *)a2 + 14);
    *(_OWORD *)(v4 + 224) = v12;
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v4 + 200, (uint64_t)(a2 + 25));
    uint64_t v13 = a2[33];
    uint64_t v14 = a2[34];
    *(void *)(v4 + 264) = v13;
    *(void *)(v4 + 272) = v14;
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v4 + 240, (uint64_t)(a2 + 30));
    uint64_t v15 = (void *)a2[35];
    *(void *)(v4 + 280) = v15;
    uint64_t v16 = *(int *)(a3 + 52);
    uint64_t v17 = (void *)(v4 + v16);
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for DeviceIdiom(0LL);
    id v20 = v15;
    if (sub_63E0((uint64_t)v18, 1LL, v19))
    {
      uint64_t v21 = sub_6358(qword_8C368);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
      sub_8760((uint64_t)v17, 0LL, 1LL, v19);
    }

    uint64_t v23 = *(int *)(a3 + 56);
    __int128 v24 = *(_OWORD *)((char *)a2 + v23 + 24);
    *(_OWORD *)(v4 + v23 + 24) = v24;
    (**(void (***)(void))(v24 - 8))();
  }

  return v4;
}

uint64_t sub_8BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 52);
  uint64_t v5 = type metadata accessor for DeviceIdiom(0LL);
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + *(int *)(a2 + 56)));
}

uint64_t sub_8C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  __int128 v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
  __int128 v8 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 80, a2 + 80);
  __int128 v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 120, a2 + 120);
  __int128 v10 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 160, a2 + 160);
  __int128 v11 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 200, a2 + 200);
  uint64_t v12 = *(void *)(a2 + 264);
  uint64_t v13 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = v12;
  *(void *)(a1 + 272) = v13;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 240, a2 + 240);
  uint64_t v14 = *(void **)(a2 + 280);
  *(void *)(a1 + 280) = v14;
  uint64_t v15 = *(int *)(a3 + 52);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for DeviceIdiom(0LL);
  id v19 = v14;
  if (sub_63E0((uint64_t)v17, 1LL, v18))
  {
    uint64_t v20 = sub_6358(qword_8C368);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
    sub_8760((uint64_t)v16, 0LL, 1LL, v18);
  }

  uint64_t v21 = *(int *)(a3 + 56);
  __int128 v22 = *(_OWORD *)(a2 + v21 + 24);
  *(_OWORD *)(a1 + v21 + 24) = v22;
  (**(void (***)(void))(v22 - 8))();
  return a1;
}

void *sub_8E2C(void *a1, void *a2, uint64_t a3)
{
  __int128 v6 = (void *)a1[35];
  __int128 v7 = (void *)a2[35];
  a1[35] = v7;
  id v8 = v7;

  uint64_t v9 = *(int *)(a3 + 52);
  __int128 v10 = (char *)a1 + v9;
  __int128 v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for DeviceIdiom(0LL);
  int v13 = sub_63E0((uint64_t)v10, 1LL, v12);
  int v14 = sub_63E0((uint64_t)v11, 1LL, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v10, v11, v12);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_6358(qword_8C368);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  sub_8760((uint64_t)v10, 0LL, 1LL, v12);
LABEL_7:
  sub_720C((void *)((char *)a1 + *(int *)(a3 + 56)), (void *)((char *)a2 + *(int *)(a3 + 56)));
  return a1;
}

uint64_t sub_8FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0xF0uLL);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  uint64_t v7 = *(int *)(a3 + 52);
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DeviceIdiom(0LL);
  if (sub_63E0((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_6358(qword_8C368);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    sub_8760((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = *(int *)(a3 + 56);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  __int128 v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  return a1;
}

uint64_t sub_9098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 80));
  __int128 v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 160));
  __int128 v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 240));
  __int128 v9 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v9;
  uint64_t v10 = *(void **)(a1 + 280);
  uint64_t v11 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v11;

  uint64_t v12 = *(int *)(a3 + 52);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for DeviceIdiom(0LL);
  int v16 = sub_63E0((uint64_t)v13, 1LL, v15);
  int v17 = sub_63E0((uint64_t)v14, 1LL, v15);
  if (!v16)
  {
    uint64_t v18 = *(void *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 40))(v13, v14, v15);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v17)
  {
LABEL_6:
    uint64_t v19 = sub_6358(qword_8C368);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
  sub_8760((uint64_t)v13, 0LL, 1LL, v15);
LABEL_7:
  uint64_t v20 = *(int *)(a3 + 56);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + v20));
  __int128 v23 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v23;
  *(void *)(v21 + 32) = *(void *)(v22 + 32);
  return a1;
}

uint64_t sub_9284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_9290);
}

uint64_t sub_9290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_6358(qword_8C368);
    return sub_63E0(a1 + *(int *)(a3 + 52), a2, v8);
  }

uint64_t sub_9308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_9314);
}

uint64_t sub_9314(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_6358(qword_8C368);
    return sub_8760(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }

  return result;
}

uint64_t type metadata accessor for WorkoutContinueInAppStrategyAsync( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WorkoutContinueInAppStrategyAsync);
}

void sub_9390(uint64_t a1)
{
  if (!qword_8C3F0[0])
  {
    uint64_t v2 = type metadata accessor for DeviceIdiom(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, qword_8C3F0);
    }
  }

BOOL sub_93E4()
{
  return *(void *)(v0 + 280) == 0LL;
}

uint64_t sub_93F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[31] = a3;
  v4[32] = v3;
  v4[29] = a1;
  v4[30] = a2;
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v4[33] = sub_8860(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v4[34] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[35] = v8;
  v4[36] = sub_8860(v8);
  uint64_t v9 = type metadata accessor for IntentResolutionRecord(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24));
  v4[37] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[38] = v10;
  v4[39] = sub_B1E4(v10);
  v4[40] = sub_8924();
  uint64_t v11 = type metadata accessor for Logger(0LL);
  v4[41] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[42] = v12;
  v4[43] = sub_B1E4(v12);
  v4[44] = sub_8924();
  v4[45] = sub_8924();
  v4[46] = sub_8924();
  sub_8910();
  return sub_B110();
}

uint64_t sub_94B4(uint64_t a1)
{
  uint64_t v2 = v1[46];
  uint64_t v3 = v1[41];
  uint64_t v4 = v1[42];
  uint64_t v5 = v1[40];
  uint64_t v42 = v1[39];
  uint64_t v6 = Logger.workout.unsafeMutableAddressor(a1);
  v1[47] = v6;
  sub_8894(v6, (uint64_t)(v1 + 18));
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v1[48] = v7;
  v7(v2, v6, v3);
  sub_B384(v5);
  uint64_t v8 = sub_B384(v42);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v40 = v1[42];
    uint64_t v11 = v1[40];
    uint64_t v41 = v1[41];
    uint64_t v43 = v1[46];
    uint64_t v12 = v1[38];
    uint64_t v13 = v1[39];
    uint64_t v14 = v1[37];
    uint64_t v15 = sub_88B0(22LL);
    uint64_t v38 = (void *)sub_88B0(8LL);
    uint64_t v39 = sub_88B0(32LL);
    uint64_t v44 = v39;
    *(_DWORD *)uint64_t v15 = 136315394;
    v1[26] = IntentResolutionRecord.app.getter(v14);
    unint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    sub_B370(v11, v37);
    uint64_t v16 = type metadata accessor for App(0LL);
    sub_AFF0( &qword_8C430,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    unint64_t v20 = v19;
    swift_release(v1[26]);
    v1[27] = sub_173E0(v18, v20, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 27, v1 + 28);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v15 + 12) = 2112;
    uint64_t v21 = IntentResolutionRecord.intent.getter(v14);
    v1[28] = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 28, v1 + 29);
    *uint64_t v38 = v21;
    sub_B370(v13, v37);
    _os_log_impl(&dword_0, v9, v10, "Launching app: %s with intent: %@", (uint8_t *)v15, 0x16u);
    sub_6358(&qword_8C360);
    sub_B334((uint64_t)v38);
    sub_8870((uint64_t)v38);
    sub_B334(v39);
    sub_8870(v39);
    sub_8870(v15);

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v22(v43, v41);
  }

  else
  {
    uint64_t v23 = v1[46];
    uint64_t v24 = v1[41];
    uint64_t v25 = v1[42];
    uint64_t v26 = *(void (**)(void))(v1[38] + 8LL);
    ((void (*)(void, void))v26)(v1[40], v1[37]);
    uint64_t v27 = sub_B344();
    v26(v27);

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v22(v23, v24);
  }

  v1[49] = v22;
  uint64_t v28 = v1[37];
  sub_AF38(0LL, &qword_8C418, &OBJC_CLASS___SAIntentGroupLaunchAppWithIntent_ptr);
  uint64_t v29 = IntentResolutionRecord.app.getter(v28);
  uint64_t v30 = (void *)IntentResolutionRecord.intent.getter(v28);
  uint64_t v31 = (void *)IntentResolutionRecord.intentResponse.getter(v28);
  uint64_t v32 = sub_B344();
  v1[50] = static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(v32);

  swift_release(v29);
  uint64_t v33 = (void *)swift_task_alloc(dword_8C424);
  v1[51] = v33;
  *uint64_t v33 = v1;
  v33[1] = sub_97F8;
  sub_B140();
  return sub_9FF8(v34, v35);
}

uint64_t sub_97F8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 408);
  *(void *)(v3 + 416) = a1;
  *(void *)(v3 + 424) = v1;
  swift_task_dealloc(v4);
  sub_8910();
  return sub_887C();
}

uint64_t sub_9858()
{
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 264);
  ((void (*)(void))static DialogPhase.completion.getter)();
  OutputGenerationManifest.init(dialogPhase:_:)(v1, nullsub_1, 0LL);
  uint64_t v3 = *(void **)(v2 + 280);
  *(void *)(v0 + 432) = v3;
  uint64_t v4 = *(os_log_s **)(v0 + 376);
  if (v3)
  {
    sub_8894(*(void *)(v0 + 376), v0 + 120);
    sub_B324();
    id v5 = v3;
    sub_B2E0();
    os_log_type_t v6 = sub_B33C();
    if (os_log_type_enabled(v4, v6))
    {
      uint64_t v7 = (uint8_t *)sub_88B0(12LL);
      uint64_t v31 = (void *)sub_88B0(8LL);
      *(_DWORD *)uint64_t v7 = 138412290;
      *(void *)(v0 + 200) = v5;
      id v8 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208);
      void *v31 = v3;

      _os_log_impl(&dword_0, v4, v6, "Submitting SAIntentGroupLaunchAppWithIntent to remote device: %@", v7, 0xCu);
      sub_6358(&qword_8C360);
      sub_B334((uint64_t)v31);
      sub_8870((uint64_t)v31);
      sub_8870((uint64_t)v7);
    }

    else
    {
    }

    uint64_t v21 = *(void **)(v0 + 256);
    (*(void (**)(void, void))(v0 + 392))(*(void *)(v0 + 360), *(void *)(v0 + 328));
    sub_8734(v21, v21[3]);
    uint64_t v22 = sub_B344();
    v23(v22);
    uint64_t v24 = *(void *)(v0 + 40);
    uint64_t v25 = *(void *)(v0 + 48);
    sub_8734((void *)(v0 + 16), v24);
    uint64_t v26 = ((uint64_t (*)(void))DeviceUnit.assistantId.getter)();
    uint64_t v28 = v27;
    *(void *)(v0 + 440) = v27;
    uint64_t v29 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submitToRemote<A>(_:_:)[1]);
    *(void *)(v0 + 448) = v29;
    uint64_t v30 = sub_AF38(0LL, &qword_8C428, &OBJC_CLASS___SABaseCommand_ptr);
    *uint64_t v29 = v0;
    v29[1] = sub_9BB4;
    return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AceServiceInvokerAsync.submitToRemote<A>(_:_:))( *(void *)(v0 + 400),  v26,  v28,  v24,  v30,  v25);
  }

  else
  {
    sub_8894(*(void *)(v0 + 376), v0 + 96);
    sub_B324();
    sub_B2E0();
    os_log_type_t v9 = sub_B33C();
    if (os_log_type_enabled(v4, v9))
    {
      os_log_type_t v10 = (uint8_t *)sub_88B0(2LL);
      *(_WORD *)os_log_type_t v10 = 0;
      _os_log_impl(&dword_0, v4, v9, "Submitting SAIntentGroupLaunchAppWithIntent to local device", v10, 2u);
      sub_8870((uint64_t)v10);
    }

    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v11 = *(void **)(v0 + 400);
    uint64_t v13 = *(void *)(v0 + 344);
    uint64_t v14 = *(void *)(v0 + 328);

    v12(v13, v14);
    uint64_t v15 = sub_6358(&qword_8E9B0);
    uint64_t v16 = swift_allocObject(v15, 40LL, 7LL);
    *(_OWORD *)(v16 + 16) = xmmword_61780;
    *(void *)(v16 + 32) = v11;
    uint64_t v32 = v16;
    specialized Array._endMutation()(v16);
    id v17 = v11;
    ((void (*)(uint64_t))OutputGenerationManifest.additionalCommands.setter)(v32);
    sub_B378();
    sub_B2B0();
    uint64_t v18 = static SiriKitEvent.uufrReady()();
    sub_B29C(v18);
    swift_release(v11);
    sub_B25C();
    unint64_t v19 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
    sub_B22C(v19);
    return sub_B1B4();
  }

uint64_t sub_9BB4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(*v2 + 440);
  uint64_t v4 = *(void *)(*v2 + 448);
  *(void *)(v3 + 456) = a1;
  *(void *)(v3 + 464) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  sub_8910();
  return sub_B110();
}

uint64_t sub_9C1C()
{
  uint64_t v1 = (void *)(v0 + 168);
  uint64_t v2 = *(void **)(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 328);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(v0 + 16));
  sub_8894(v3, v0 + 168);
  v4(v5, v3, v6);
  id v7 = v2;
  sub_B2E0();
  os_log_type_t v8 = sub_B33C();
  if (sub_B314(v8))
  {
    os_log_type_t v9 = *(void **)(v0 + 456);
    unint64_t v19 = *(void **)(v0 + 432);
    os_log_type_t v10 = (uint8_t *)sub_88B0(12LL);
    uint64_t v18 = (void (*)(uint64_t, uint64_t, uint64_t))sub_88B0(8LL);
    *(_DWORD *)os_log_type_t v10 = 138412290;
    *(void *)(v0 + 192) = v9;
    id v11 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200);
    uint64_t v4 = v18;
    *(void *)uint64_t v18 = v9;

    os_log_type_t v12 = v5;
    uint64_t v13 = v19;
    _os_log_impl(&dword_0, (os_log_t)(v0 + 168), v12, "Result from submitting to remote device: %@", v10, 0xCu);
    sub_6358(&qword_8C360);
    sub_B334((uint64_t)v18);
    sub_8870((uint64_t)v18);
    sub_8870((uint64_t)v10);
    uint64_t v14 = (void *)(v0 + 168);
    uint64_t v1 = v11;
  }

  else
  {
    uint64_t v14 = *(void **)(v0 + 456);
    uint64_t v13 = *(void **)(v0 + 432);
  }

  (*(void (**)(void, void))(v0 + 392))(*(void *)(v0 + 352), *(void *)(v0 + 328));
  sub_B378();
  sub_B2B0();
  uint64_t v15 = static SiriKitEvent.uufrReady()();
  sub_B29C(v15);
  swift_release(v4);
  sub_B25C();
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  sub_B22C(v16);
  return sub_B1B4();
}

uint64_t sub_9DCC()
{
  *(void *)(v1 + 480) = v0;
  swift_task_dealloc(v2);
  sub_8910();
  return sub_887C();
}

uint64_t sub_9E18()
{
  uint64_t v1 = *(void **)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v7 = *(void *)(v0 + 312);
  uint64_t v8 = *(void *)(v0 + 264);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  swift_task_dealloc(v2);
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  swift_task_dealloc(v7);
  sub_B164();
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_9EBC()
{
  sub_B18C();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  return sub_B0E0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9F0C()
{
  uint64_t v1 = *(void **)(v0 + 432);
  uint64_t v2 = *(void **)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 288);

  sub_B370(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_B1A4();
  sub_B18C();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  return sub_B0E0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9F88()
{
  uint64_t v1 = *(void **)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 272);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_B18C();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  return sub_B0E0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_9FF8(uint64_t a1, uint64_t a2)
{
  v3[46] = a2;
  v3[47] = v2;
  v3[45] = a1;
  uint64_t v4 = *(void *)(a2 - 8);
  v3[48] = v4;
  v3[49] = sub_8860(v4);
  uint64_t v5 = type metadata accessor for DeviceIdiom(0LL);
  v3[50] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[51] = v6;
  v3[52] = sub_8860(v6);
  uint64_t v7 = sub_6358(&qword_8C438);
  v3[53] = v7;
  v3[54] = sub_8860(*(void *)(v7 - 8));
  uint64_t v8 = sub_6358(qword_8C368);
  v3[55] = sub_B1E4(*(void *)(v8 - 8));
  v3[56] = sub_8924();
  v3[57] = sub_8924();
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v3[58] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[59] = v10;
  v3[60] = sub_8860(v10);
  uint64_t v11 = sub_6358(&qword_8C258);
  v3[61] = sub_8860(*(void *)(v11 - 8));
  sub_8910();
  return sub_887C();
}

void sub_A0CC()
{
  uint64_t v1 = type metadata accessor for IntentResolutionRecord(0LL, *(void *)(v0[46] + 16LL), *(void *)(v0[46] + 24LL));
  uint64_t v2 = IntentResolutionRecord.app.getter(v1);
  v0[62] = v2;
  uint64_t v3 = swift_retain_n(v2, 2LL);
  uint64_t v4 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v3);
  if (v4
    && (uint64_t v5 = v4, v6 = [v4 displayAppName], v5, v6))
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v9 = v8;
    sub_B364();

    String.toSpeakableString.getter(v7, v9);
    swift_bridgeObjectRelease(v9);
    uint64_t v10 = 0LL;
  }

  else
  {
    sub_B364();
    uint64_t v10 = 1LL;
  }

  uint64_t v11 = v0[61];
  uint64_t v12 = type metadata accessor for SpeakableString(0LL);
  sub_8760(v11, v10, 1LL, v12);
  v0[63] = IntentResolutionRecord.intent.getter(v1);
  uint64_t v13 = objc_opt_self(&OBJC_CLASS___INCancelWorkoutIntent);
  if (sub_B1F8(v13))
  {
    uint64_t v14 = v0[61];
    sub_B2E8(v0[47] + 40LL);
    sub_B214(v0 + 22, v0[25]);
    uint64_t v15 = sub_B250();
    v0[64] = v15;
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = (void *)swift_task_alloc(dword_8DCDC);
    v0[65] = v16;
    sub_B358(v16, (uint64_t)sub_A7BC);
    sub_B1D0(v17);
    sub_B140();
    sub_2D6AC(v18, v19, v20, v21);
    return;
  }

  uint64_t v22 = objc_opt_self(&OBJC_CLASS___INEndWorkoutIntent);
  if (sub_B1F8(v22))
  {
    uint64_t v23 = v0[61];
    sub_B2E8(v0[47] + 80LL);
    sub_B214(v0 + 17, v0[20]);
    uint64_t v24 = sub_B250();
    v0[67] = v24;
    *(void *)(v24 + 16) = v23;
    uint64_t v25 = (void *)swift_task_alloc(dword_8FFE4);
    v0[68] = v25;
    sub_B358(v25, (uint64_t)sub_A8E0);
    sub_B1D0(v26);
    sub_B140();
    sub_54A0C(v27, v28, v29, v30);
    return;
  }

  uint64_t v31 = objc_opt_self(&OBJC_CLASS___INPauseWorkoutIntent);
  uint64_t v32 = sub_B1F8(v31);
  if (!v32)
  {
    uint64_t v50 = objc_opt_self(&OBJC_CLASS___INResumeWorkoutIntent);
    if (sub_B1F8(v50))
    {
      uint64_t v51 = v0[61];
      sub_B2E8(v0[47] + 160LL);
      sub_B214(v0 + 7, v0[10]);
      uint64_t v52 = sub_B250();
      v0[73] = v52;
      *(void *)(v52 + 16) = v51;
      uint64_t v53 = (void *)swift_task_alloc(dword_90574);
      v0[74] = v53;
      sub_B358(v53, (uint64_t)sub_AB28);
      sub_B1D0(v54);
      sub_B140();
      sub_57D10(v55, v56, v57, v58);
      return;
    }

    uint64_t v59 = objc_opt_self(&OBJC_CLASS___INStartWorkoutIntent);
    if (!sub_B1F8(v59))
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000016LL,  0x8000000000068B10LL,  "HealthFlowDelegatePlugin/WorkoutContinueInAppStrategyAsync.swift",  64LL,  2LL,  102LL,  0);
      sub_B140();
      return;
    }

    uint64_t v61 = v0[56];
    uint64_t v60 = v0[57];
    uint64_t v62 = v0[53];
    uint64_t v63 = v0[54];
    uint64_t v64 = v0[50];
    uint64_t v65 = v0[51];
    sub_AF70(v0[47] + *(int *)(v0[46] + 52LL), v60);
    (*(void (**)(uint64_t, void, uint64_t))(v65 + 104))(v61, enum case for DeviceIdiom.watch(_:), v64);
    sub_8760(v61, 0LL, 1LL, v64);
    uint64_t v66 = v63 + *(int *)(v62 + 48);
    sub_AF70(v60, v63);
    sub_AF70(v61, v66);
    if (sub_63E0(v63, 1LL, v64) == 1)
    {
      uint64_t v67 = v0[57];
      uint64_t v68 = v0[50];
      sub_B30C(v0[56]);
      sub_B30C(v67);
      if (sub_63E0(v66, 1LL, v68) == 1)
      {
        sub_AFB8(v0[54], qword_8C368);
        sub_B288();
        goto LABEL_24;
      }
    }

    else
    {
      uint64_t v69 = v0[50];
      sub_AF70(v0[54], v0[55]);
      int v70 = sub_63E0(v66, 1LL, v69);
      uint64_t v72 = v0[56];
      uint64_t v71 = v0[57];
      uint64_t v73 = v0[55];
      if (v70 != 1)
      {
        uint64_t v76 = v0[51];
        uint64_t v77 = v0[52];
        uint64_t v78 = v0[50];
        uint64_t v79 = v0[48];
        uint64_t v97 = v0[47];
        uint64_t v98 = v0[49];
        uint64_t v95 = v0[54];
        uint64_t v96 = v0[46];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 32))(v77, v66, v78);
        sub_AFF0( &qword_8C440,  (uint64_t (*)(uint64_t))&type metadata accessor for DeviceIdiom,  (uint64_t)&protocol conformance descriptor for DeviceIdiom);
        char v80 = dispatch thunk of static Equatable.== infix(_:_:)(v73, v77, v78);
        uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
        v81(v77, v78);
        sub_B350(v72);
        sub_B350(v71);
        v81(v73, v78);
        sub_B350(v95);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v98, v97, v96);
        if ((v80 & 1) != 0)
        {
LABEL_24:
          uint64_t v82 = v0[49];
          uint64_t v83 = v0[46];
          uint64_t v84 = *(void **)(v82 + 280);
          uint64_t v85 = *(void (**)(uint64_t, uint64_t))(v0[48] + 8LL);
          id v86 = v84;
          v85(v82, v83);
          if (v84) {

          }
          goto LABEL_27;
        }

LABEL_26:
        (*(void (**)(void, void))(v0[48] + 8LL))(v0[49], v0[46]);
LABEL_27:
        uint64_t v87 = v0[61];
        sub_B2E8(v0[47] + 200LL);
        sub_8734(v0 + 2, v0[5]);
        App.isFirstParty()();
        uint64_t v88 = swift_task_alloc(32LL);
        v0[76] = v88;
        *(void *)(v88 + 16) = v87;
        v89 = (void *)swift_task_alloc(dword_902EC);
        v0[77] = v89;
        void *v89 = v0;
        v89[1] = sub_AC4C;
        sub_B140();
        sub_56148(v90, v91, v92, v93, v94);
        return;
      }

      uint64_t v74 = v0[50];
      uint64_t v75 = v0[51];
      sub_B30C(v0[56]);
      sub_B30C(v71);
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v73, v74);
    }

    sub_AFB8(v0[54], &qword_8C438);
    sub_B288();
    goto LABEL_26;
  }

  uint64_t v34 = v0[59];
  uint64_t v33 = v0[60];
  uint64_t v35 = v0[58];
  uint64_t v36 = Logger.workout.unsafeMutableAddressor(v32);
  sub_8894(v36, (uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v36, v35);
  sub_B2E0();
  os_log_type_t v37 = sub_B33C();
  if (sub_B314(v37))
  {
    uint64_t v38 = (uint8_t *)sub_88B0(2LL);
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_0, (os_log_t)(v0 + 27), (os_log_type_t)v33, "Pause Workout Intent, Continue in app", v38, 2u);
    sub_8870((uint64_t)v38);
  }

  uint64_t v39 = v0[61];
  uint64_t v40 = v0[47];

  uint64_t v41 = sub_B344();
  v42(v41);
  sub_B038(v40 + 120, (uint64_t)(v0 + 12));
  sub_B214(v0 + 12, v0[15]);
  uint64_t v43 = sub_B250();
  v0[70] = v43;
  *(void *)(v43 + 16) = v39;
  uint64_t v44 = (void *)swift_task_alloc(dword_9084C);
  v0[71] = v44;
  sub_B358(v44, (uint64_t)sub_AA04);
  sub_B1D0(v45);
  sub_B140();
  sub_59DAC(v46, v47, v48, v49);
}

  sub_10000(0LL, (v100 & 0xC000000000000001LL) == 0, v100);
  if ((v100 & 0xC000000000000001LL) != 0)
  {
    v101 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v100);
  }

  else
  {
    v101 = *(void *)(v100 + 32);
    swift_retain(v101);
  }

  v103 = v142;
  v102 = v143;
  v104 = sub_10F84();
  v105 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v104);
  sub_31EFC(v101, v103, v105 & 1, (uint64_t)v48, (uint64_t)v102);
  v107 = v106;
  v108 = ((uint64_t (*)(void))Logger.health.unsafeMutableAddressor)();
  sub_8894(v108, (uint64_t)v148);
  v109 = v124;
  (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v124, v108, v140);
  v110 = v107;
  v111 = (os_log_s *)Logger.logObject.getter(v110);
  v112 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v111, v112))
  {
    v113 = sub_88B0(12LL);
    v145 = v111;
    v114 = (uint8_t *)v113;
    v115 = (void *)sub_88B0(8LL);
    v143 = v115;
    v146 = 0LL;
    v144 = v114;
    *(_DWORD *)v114 = 138412290;
    v149 = (uint64_t)v110;
    v116 = v110;
    v117 = v133;
    v109 = v124;
    uint64_t v71 = v131;
    sub_3254C((uint64_t)&v149, (uint64_t)&v150);
    *v115 = v110;

    v118 = v140;
    v119 = v144;
    sub_17C68(&dword_0, v145, v112, "Converted intent to: %@", v144);
    sub_6358(&qword_8C360);
    v120 = v143;
    sub_B334((uint64_t)v143);
    sub_8870((uint64_t)v120);
    v121 = (uint64_t)v119;
    v111 = v145;
    sub_8870(v121);
  }

  else
  {

    v117 = v133;
    v118 = v140;
  }

  swift_release(v101);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v109, v118);
  (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v126, v132);
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v135, v71);
LABEL_23:
  sub_2544C();
}

uint64_t sub_A7BC()
{
  v3[30] = v1;
  v3[31] = v2;
  v3[32] = v0;
  sub_B2D4();
  *(void *)(v4 + 528) = v0;
  swift_task_dealloc(v5);
  sub_88B8();
  sub_8910();
  return sub_B110();
}

uint64_t sub_A818()
{
  sub_B1AC(v1, &qword_8C258);
  sub_B1A4();
  sub_B0C8();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  uint64_t v2 = sub_B204();
  return sub_B0F8(v2, v3);
}

uint64_t sub_A87C()
{
  sub_B1AC(v2, &qword_8C258);
  sub_B1A4();
  sub_B0C8();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  return sub_B0E0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_A8E0()
{
  v3[33] = v1;
  v3[34] = v2;
  v3[35] = v0;
  sub_B2D4();
  *(void *)(v4 + 552) = v0;
  swift_task_dealloc(v5);
  sub_88B8();
  sub_8910();
  return sub_B110();
}

uint64_t sub_A93C()
{
  sub_B1AC(v1, &qword_8C258);
  sub_B1A4();
  sub_B0C8();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  uint64_t v2 = sub_B204();
  return sub_B0F8(v2, v3);
}

uint64_t sub_A9A0()
{
  sub_B1AC(v2, &qword_8C258);
  sub_B1A4();
  sub_B0C8();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  return sub_B0E0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_AA04()
{
  v3[36] = v1;
  v3[37] = v2;
  v3[38] = v0;
  sub_B2D4();
  *(void *)(v4 + 576) = v0;
  swift_task_dealloc(v5);
  sub_88B8();
  sub_8910();
  return sub_B110();
}

uint64_t sub_AA60()
{
  sub_B1AC(v1, &qword_8C258);
  sub_B1A4();
  sub_B0C8();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  uint64_t v2 = sub_B204();
  return sub_B0F8(v2, v3);
}

uint64_t sub_AAC4()
{
  sub_B1AC(v2, &qword_8C258);
  sub_B1A4();
  sub_B0C8();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  return sub_B0E0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_AB28()
{
  v3[39] = v1;
  v3[40] = v2;
  v3[41] = v0;
  sub_B2D4();
  *(void *)(v4 + 600) = v0;
  swift_task_dealloc(v5);
  sub_88B8();
  sub_8910();
  return sub_B110();
}

uint64_t sub_AB84()
{
  sub_B1AC(v1, &qword_8C258);
  sub_B1A4();
  sub_B0C8();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  uint64_t v2 = sub_B204();
  return sub_B0F8(v2, v3);
}

uint64_t sub_ABE8()
{
  sub_B1AC(v2, &qword_8C258);
  sub_B1A4();
  sub_B0C8();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  return sub_B0E0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_AC4C()
{
  v3[42] = v1;
  v3[43] = v2;
  v3[44] = v0;
  sub_B2D4();
  *(void *)(v4 + 624) = v0;
  swift_task_dealloc(v5);
  sub_88B8();
  sub_8910();
  return sub_B110();
}

uint64_t sub_ACA8()
{
  sub_B1AC(v1, &qword_8C258);
  sub_B1A4();
  sub_B0C8();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  uint64_t v2 = sub_B204();
  return sub_B0F8(v2, v3);
}

uint64_t sub_AD0C()
{
  sub_B1AC(v2, &qword_8C258);
  sub_B1A4();
  sub_B0C8();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  return sub_B0E0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_AD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_8C414);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_B0C4;
  return sub_93F4(a1, a2, a3);
}

uint64_t sub_ADDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_B0C4;
  return ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:)(a1, a2, a3, a4);
}

uint64_t sub_AE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock()[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_AEC8;
  return UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock()(a1, a2, a3);
}

uint64_t sub_AEC8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(v1 + 16));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_AF08(uint64_t a1)
{
  return swift_getWitnessTable(&unk_61830, a1);
}

uint64_t sub_AF18(uint64_t a1)
{
  return swift_getWitnessTable(&unk_61890, a1);
}

uint64_t sub_AF28(uint64_t a1)
{
  return swift_getWitnessTable(&unk_61860, a1);
}

uint64_t sub_AF38(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_AF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(qword_8C368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_AFB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_6358(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_6590();
}

void sub_AFF0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_6590();
}

uint64_t sub_B02C(uint64_t a1)
{
  return sub_B078(*(void *)(v1 + 16), a1);
}

void sub_B038(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_6590();
}

uint64_t sub_B078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_B0C8()
{
  return swift_task_dealloc(*(void *)(v0 + 488));
}

uint64_t sub_B0E0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_B0F8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_B110()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

  ;
}

uint64_t sub_B134()
{
  return swift_release(*(void *)(v0 + 496));
}

  ;
}

uint64_t sub_B15C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_B164()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_B16C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_B174()
{
  return swift_task_dealloc(v0);
}

void sub_B17C()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_B18C()
{
  return swift_task_dealloc(*(void *)(v0 + 368));
}

uint64_t sub_B1A4()
{
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0);
}

void sub_B1AC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_B1B4()
{
  return ((uint64_t (*)(void))dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:))();
}

uint64_t sub_B1D0@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_B1E4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_B1F8(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_B204()
{
  return v0;
}

BOOL sub_B214(void *a1, uint64_t a2)
{
  return App.isFirstParty()();
}

uint64_t sub_B22C(void *a1)
{
  *(void *)(v2 + 472) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 232);
}

uint64_t sub_B250()
{
  return swift_task_alloc(32LL);
}

void *sub_B25C()
{
  return sub_8734((void *)(v1 + *(int *)(v2 + 56)), *(void *)(v1 + *(int *)(v2 + 56) + 24));
}

uint64_t sub_B288()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v1, v2);
}

uint64_t sub_B29C(uint64_t a1)
{
  return dispatch thunk of SiriKitEventSending.send(_:)(a1, v1, v2);
}

uint64_t sub_B2B0()
{
  return type metadata accessor for SiriKitEvent(0LL);
}

void sub_B2D4()
{
  *uint64_t v0 = *v1;
}

uint64_t sub_B2E0()
{
  return Logger.logObject.getter();
}

void sub_B2E8(uint64_t a1)
{
}

  ;
}

void sub_B30C(uint64_t a1)
{
}

BOOL sub_B314(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_B324()
{
  return v3(v2, v1, v0);
}

uint64_t sub_B334(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

uint64_t sub_B33C()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_B344()
{
  return v0;
}

void sub_B350(uint64_t a1)
{
}

void *sub_B358@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_B364()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_B370@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_B378()
{
  return static SiriKitEventSender.current.getter();
}

uint64_t sub_B384(uint64_t a1)
{
  return v1(a1, v3, v2);
}

uint64_t sub_B390@<X0>(void *a1@<X8>)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*v1);
  id v4 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  uint64_t v5 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = ResponseFactory.init()();
  a1[6] = v5;
  a1[7] = &protocol witness table for ResponseFactory;
  a1[3] = v6;
  uint64_t result = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  *a1 = 0xD000000000000014LL;
  a1[1] = 0x8000000000068BD0LL;
  a1[2] = v4;
  a1[8] = result;
  return result;
}

uint64_t type metadata accessor for PauseWorkoutContinueInAppStrategy(uint64_t a1)
{
  uint64_t result = qword_8C470;
  if (!qword_8C470) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PauseWorkoutContinueInAppStrategy);
  }
  return result;
}

uint64_t sub_B49C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 256LL, 0LL, v2, a1 + 160);
}

void sub_B4D0(uint64_t a1)
{
}

Swift::Int sub_B4DC(char a1)
{
  return Hasher._finalize()();
}

void sub_B52C(uint64_t a1)
{
}

void sub_B538(uint64_t a1)
{
}

void sub_B544(uint64_t a1)
{
}

void sub_B550(char a1)
{
}

void sub_B55C(uint64_t a1)
{
}

void sub_B584(uint64_t a1)
{
}

void sub_B590(uint64_t a1)
{
}

void sub_B59C(uint64_t a1)
{
  uint64_t v1 = sub_C034(a1);
  sub_C050((uint64_t)v1);
  sub_C02C();
  sub_C018();
}

void sub_B5C0(uint64_t a1)
{
  uint64_t v1 = sub_C034(a1);
  sub_C098((uint64_t)v1);
  sub_C02C();
  sub_C018();
}

void sub_B5E8(uint64_t a1)
{
}

void sub_B5F4(uint64_t a1)
{
}

void sub_B600(uint64_t a1)
{
}

void sub_B60C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = a2(a1);
  sub_C040((uint64_t)v5, v4);
  sub_C090();
  sub_C02C();
  sub_C018();
}

void sub_B654(uint64_t a1)
{
  int v1 = sub_C034(a1);
  sub_C0A4(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_C02C();
  sub_C018();
}

void sub_B67C(int a1, Swift::UInt a2)
{
}

uint64_t sub_B69C(uint64_t a1, char a2)
{
  if (a2) {
    sub_C0B0();
  }
  else {
    sub_C070();
  }
  sub_C040(v3, v4);
  return sub_C024(v2);
}

void sub_B6EC(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_B70C(uint64_t a1, uint64_t a2)
{
  return sub_B830(a1, a2, (uint64_t (*)(uint64_t))sub_4E5D0);
}

uint64_t sub_B718(uint64_t a1, uint64_t a2)
{
  return sub_B830(a1, a2, (uint64_t (*)(uint64_t))sub_5AFF8);
}

uint64_t sub_B724(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x616D6D6F43656361LL;
  }
  else {
    uint64_t v3 = 7368801LL;
  }
  if (v2) {
    uint64_t v4 = 0xE300000000000000LL;
  }
  else {
    uint64_t v4 = 0xEA0000000000646ELL;
  }
  sub_C040(a1, v3);
  return sub_C024(v4);
}

void sub_B770(uint64_t a1, char a2)
{
}

uint64_t sub_B7A0(uint64_t a1, uint64_t a2)
{
  return sub_B830(a1, a2, (uint64_t (*)(uint64_t))sub_1A370);
}

uint64_t sub_B7AC(uint64_t a1, uint64_t a2)
{
  return sub_B830(a1, a2, (uint64_t (*)(uint64_t))sub_11BDC);
}

uint64_t sub_B7B8(uint64_t a1, uint64_t a2)
{
  return sub_B830(a1, a2, (uint64_t (*)(uint64_t))sub_6C64);
}

uint64_t sub_B7C4(uint64_t a1, uint64_t a2)
{
  return sub_B830(a1, a2, (uint64_t (*)(uint64_t))sub_2C290);
}

uint64_t sub_B7D0(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6168636C65656877LL, 0xEA00000000007269LL);
}

uint64_t sub_B7EC(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)&aOpenwate[8 * a2 + 8];
  sub_C040(a1, *(void *)&aIndoor_1[8 * a2]);
  return sub_C024(v2);
}

uint64_t sub_B824(uint64_t a1, uint64_t a2)
{
  return sub_B830(a1, a2, (uint64_t (*)(uint64_t))sub_4800C);
}

uint64_t sub_B830(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = a3(a2);
  uint64_t v6 = v5;
  String.hash(into:)(a1, v4, v5);
  return sub_C024(v6);
}

uint64_t sub_B86C(uint64_t a1, char a2)
{
  uint64_t v2 = qword_61BD8[a2];
  sub_C040(a1, qword_61BC0[a2]);
  return sub_C024(v2);
}

void sub_B8A4(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  sub_C048(a1, a2);
  sub_C040((uint64_t)v3, qword_61BC0[v2]);
  sub_C090();
  sub_C02C();
  sub_C018();
}

void sub_B8F0(uint64_t a1, uint64_t a2)
{
}

void sub_B8FC(uint64_t a1, uint64_t a2)
{
  char v2 = sub_C048(a1, a2);
  sub_C098((uint64_t)v2);
  sub_C02C();
  sub_C018();
}

void sub_B924(uint64_t a1, uint64_t a2)
{
  char v2 = sub_C048(a1, a2);
  sub_C050((uint64_t)v2);
  sub_C02C();
  sub_C018();
}

void sub_B948(uint64_t a1, uint64_t a2)
{
}

void sub_B954(uint64_t a1, uint64_t a2)
{
}

void sub_B960(uint64_t a1, uint64_t a2)
{
}

void sub_B96C(uint64_t a1, uint64_t a2)
{
}

Swift::Int sub_B978(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

void sub_B9C4(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  sub_C048(a1, a2);
  if ((v2 & 1) != 0) {
    uint64_t v3 = 0x616D6D6F43656361LL;
  }
  else {
    uint64_t v3 = 7368801LL;
  }
  sub_C040((uint64_t)v4, v3);
  sub_C090();
  sub_C02C();
  sub_C018();
}

void sub_BA24(uint64_t a1, uint64_t a2)
{
}

void sub_BA30(uint64_t a1, uint64_t a2)
{
}

void sub_BA3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a3(a2);
  sub_C040((uint64_t)v6, v5);
  sub_C090();
  sub_C02C();
  sub_C018();
}

void sub_BA84(uint64_t a1, uint64_t a2)
{
}

void sub_BAAC(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  sub_C048(a1, a2);
  if (v2) {
    sub_C0B0();
  }
  else {
    sub_C070();
  }
  sub_C040((uint64_t)v4, v3);
  sub_C090();
  sub_C02C();
  sub_C018();
}

void sub_BB10(uint64_t a1, uint64_t a2)
{
  int v2 = sub_C048(a1, a2);
  sub_C0A4(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_C02C();
  sub_C018();
}

uint64_t sub_BB38(uint64_t a1)
{
  switch(a1)
  {
    case 10LL:
      return 0LL;
    case 11LL:
      return 1LL;
    case 70LL:
      return 9LL;
    case 20LL:
      return 3LL;
    case 30LL:
      return 4LL;
    case 40LL:
      return 5LL;
    case 41LL:
      return 6LL;
    case 50LL:
      return 7LL;
    case 60LL:
      return 8LL;
    case 12LL:
      return 2LL;
  }

  return 10LL;
}

uint64_t sub_BBE0(char a1)
{
  return qword_61BF0[a1];
}

BOOL sub_BBF4(char *a1, char *a2)
{
  return sub_4DE60(*a1, *a2);
}

Swift::Int sub_BC00()
{
  return sub_B4DC(*v0);
}

void sub_BC08(uint64_t a1)
{
}

Swift::Int sub_BC10(uint64_t a1)
{
  return sub_B978(a1, *v1);
}

uint64_t sub_BC18@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_BB38(*a1);
  *a2 = result;
  return result;
}

void sub_BC40(uint64_t *a1@<X8>)
{
  *a1 = sub_BBE0(*v1);
  sub_6590();
}

uint64_t sub_BC64()
{
  v9[0] = 0LL;
  v9[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(24LL);
  v1._object = (void *)0x8000000000068E70LL;
  v1._countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v1);
  char v8 = *(_BYTE *)(v0 + 16);
  _print_unlocked<A, B>(_:_:)(&v8, v9);
  v2._countAndFlagsBits = 10272LL;
  v2._object = (void *)0xE200000000000000LL;
  String.append(_:)(v2);
  uint64_t v4 = *(void *)(v0 + 24);
  int v3 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  sub_C090();
  v6._countAndFlagsBits = 41LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return v9[0];
}

uint64_t sub_BD3C(unsigned __int8 a1)
{
  *(_BYTE *)(v1 + 16) = a1;
  return ((uint64_t (*)(void))((char *)sub_BD74 + 4 * asc_61A00[a1]))();
}

uint64_t sub_BD74@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 24) = a1 - 15;
  *(void *)(v1 + 32) = 0x8000000000068E00LL;
  return v1;
}

uint64_t sub_BE10()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for HealthFlowError()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin15HealthFlowError);
}

uint64_t getEnumTagSinglePayload for HealthFlowErrorCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for HealthFlowErrorCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_BF28 + 4 * byte_61A0F[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_BF5C + 4 * byte_61A0A[v4]))();
}

uint64_t sub_BF5C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_BF64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xBF6CLL);
  }
  return result;
}

uint64_t sub_BF78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xBF80LL);
  }
  *(_BYTE *)uint64_t result = a2 + 9;
  return result;
}

uint64_t sub_BF84(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_BF8C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthFlowErrorCode()
{
  return &type metadata for HealthFlowErrorCode;
}

unint64_t sub_BFAC()
{
  unint64_t result = qword_8C5E8;
  if (!qword_8C5E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_61AEC, &type metadata for HealthFlowErrorCode);
    atomic_store(result, (unint64_t *)&qword_8C5E8);
  }

  return result;
}

uint64_t sub_BFF8()
{
  return sub_BC64();
}

  ;
}

uint64_t sub_C024(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

Swift::Int sub_C02C()
{
  return Hasher._finalize()();
}

void *sub_C034(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t sub_C040(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

void *sub_C048(uint64_t a1, uint64_t a2, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

uint64_t sub_C050(uint64_t a1, ...)
{
  return String.hash(into:)(va, 0x6168636C65656877LL, 0xEA00000000007269LL);
}

  ;
}

uint64_t sub_C090()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_C098(uint64_t a1, ...)
{
  return sub_B7EC((uint64_t)va, v1);
}

void sub_C0A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

  ;
}

void sub_C0C4()
{
}

ValueMetadata *type metadata accessor for LabelTemplatesProvider()
{
  return &type metadata for LabelTemplatesProvider;
}

uint64_t sub_C0E0(uint64_t a1)
{
  uint64_t v41 = v2;
  uint64_t v37 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v40 = *(void *)(v37 - 8);
  sub_C870();
  __chkstk_darwin(v3);
  sub_C838();
  uint64_t v39 = v4;
  uint64_t v38 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v35 = *(void *)(v38 - 8);
  sub_C870();
  __chkstk_darwin(v5);
  sub_C838();
  uint64_t v36 = v6;
  uint64_t v7 = type metadata accessor for USOParse(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_6BD8();
  uint64_t v11 = v10 - v9;
  type metadata accessor for HealthNLIntent(0LL);
  sub_C870();
  __chkstk_darwin(v12);
  sub_6BD8();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for NLIntent(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_6BD8();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for Parse(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_6BD8();
  uint64_t v25 = v24 - v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v24 - v23, a1, v21);
  int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v25, v21);
  if (v26 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_C854(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v20, v25, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v20, v16);
    sub_C414();
    uint64_t v28 = v27;
    sub_C594(v15);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v20, v16);
  }

  else
  {
    if (v26 == enum case for Parse.uso(_:))
    {
      sub_C854(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
      uint64_t v29 = v7;
      uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v25, v7);
      uint64_t v31 = USOParse.userParse.getter(v30);
      uint64_t v32 = Siri_Nlu_External_UserParse.userDialogActs.getter(v31);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v37);
      sub_52814(v32, v41);
      sub_C090();
      if (sub_63E0(v41, 1LL, v38) != 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v36, v41, v38);
        sub_C4AC(v36);
        uint64_t v28 = v33;
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v38);
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v29);
        return v28;
      }

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
      sub_6B60(v41, &qword_8C5F0);
    }

    else
    {
      sub_C854(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    }

    return 5LL;
  }

  return v28;
}

void sub_C414()
{
  if (qword_8BBB0 != -1) {
    swift_once(&qword_8BBB0, sub_4ECF4);
  }
  uint64_t v0 = qword_8FA20;
  uint64_t v1 = type metadata accessor for HealthNLIntent(0LL);
  unint64_t v2 = sub_C74C();
  IntentNodeTraversable.value<A>(forNode:)(v0, v1, v2);
  sub_C860();
}

void sub_C4AC(uint64_t a1)
{
  uint64_t v1 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(a1);
  uint64_t v2 = v1;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v6 = v1;
    }
    else {
      uint64_t v6 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v6);
    sub_C090();
    if (v7) {
      goto LABEL_3;
    }
LABEL_14:
    sub_C090();
    goto LABEL_9;
  }

LABEL_3:
  sub_10000(0LL, (v2 & 0xC000000000000001LL) == 0, v2);
  if ((v2 & 0xC000000000000001LL) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
  }

  else
  {
    uint64_t v3 = *(void *)(v2 + 32);
    swift_retain(v3);
  }

  uint64_t v4 = sub_C090();
  if ((Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v4) & 1) != 0) {
    uint64_t v5 = 3LL;
  }
  else {
    uint64_t v5 = 0LL;
  }
  sub_C5D0(v3, v5);
  swift_release(v3);
LABEL_9:
  sub_C860();
}

uint64_t sub_C594(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HealthNLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_C5D0(uint64_t a1, uint64_t a2)
{
  if (!v93) {
    goto LABEL_16;
  }
  sub_C7D4((uint64_t)v92, (uint64_t)v91);
  uint64_t common_Workout = type metadata accessor for UsoTask_create_common_Workout(0LL);
  uint64_t v7 = sub_C81C(common_Workout, v4, v5, common_Workout, v6);
  if (!(_DWORD)v7)
  {
    uint64_t v15 = type metadata accessor for UsoTask_noVerb_common_HealthLog(0LL);
    uint64_t v7 = sub_C81C(v15, v16, v17, v15, v18);
    if (!(_DWORD)v7)
    {
      uint64_t v21 = type metadata accessor for UsoTask_stop_common_Workout(0LL);
      uint64_t v25 = sub_C81C(v21, v22, v23, v21, v24);
      if ((_DWORD)v25)
      {
        uint64_t v33 = sub_C84C(v25, v26, v27, v28, v29, v30, v31, v32, v89, v90);
        sub_C830(v33, v34);
        a2 = 1LL;
        goto LABEL_17;
      }

      uint64_t v35 = type metadata accessor for UsoTask_pause_common_Workout(0LL);
      uint64_t v39 = sub_C81C(v35, v36, v37, v35, v38);
      if ((_DWORD)v39)
      {
        uint64_t v47 = sub_C84C(v39, v40, v41, v42, v43, v44, v45, v46, v89, v90);
        sub_C830(v47, v48);
        a2 = 2LL;
        goto LABEL_17;
      }

      uint64_t v49 = type metadata accessor for UsoTask_resume_common_Workout(0LL);
      uint64_t v53 = sub_C81C(v49, v50, v51, v49, v52);
      if ((_DWORD)v53)
      {
        uint64_t v61 = sub_C84C(v53, v54, v55, v56, v57, v58, v59, v60, v89, v90);
        sub_C830(v61, v62);
        a2 = 4LL;
        goto LABEL_17;
      }

      uint64_t v63 = type metadata accessor for UsoTask_cancel_common_Workout(0LL);
      uint64_t v67 = sub_C81C(v63, v64, v65, v63, v66);
      if ((_DWORD)v67)
      {
        uint64_t v75 = sub_C84C(v67, v68, v69, v70, v71, v72, v73, v74, v89, v90);
        sub_C830(v75, v76);
        a2 = 3LL;
        goto LABEL_17;
      }

      uint64_t v77 = type metadata accessor for UsoTask_noVerb_common_Workout(0LL);
      uint64_t v78 = swift_dynamicCast(&v90, v91, (char *)&type metadata for Any + 8, v77, 0LL);
      if ((_DWORD)v78)
      {
        uint64_t v86 = sub_C84C(v78, v79, v80, v81, v82, v83, v84, v85, v89, v90);
        sub_C830(v86, v87);
        goto LABEL_17;
      }

      sub_C830(v78, v79);
LABEL_16:
      a2 = 5LL;
      goto LABEL_17;
    }
  }

  uint64_t v19 = sub_C84C(v7, v8, v9, v10, v11, v12, v13, v14, v89, v90);
  sub_C830(v19, v20);
  a2 = 0LL;
LABEL_17:
  sub_6B60((uint64_t)v92, &qword_8C600);
  return a2;
}

unint64_t sub_C74C()
{
  unint64_t result = qword_8C5F8;
  if (!qword_8C5F8)
  {
    uint64_t v1 = type metadata accessor for HealthNLIntent(255LL);
    unint64_t result = swift_getWitnessTable(&unk_661A8, v1);
    atomic_store(result, (unint64_t *)&qword_8C5F8);
  }

  return result;
}

uint64_t sub_C78C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C600);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_C7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C600);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_C81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v7 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v5, a4, 0LL);
}

uint64_t sub_C830(uint64_t a1, uint64_t a2, ...)
{
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((uint64_t *)va);
}

  ;
}

uint64_t sub_C84C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_release(a10);
}

uint64_t sub_C854@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

  ;
}

  ;
}

uint64_t sub_C87C(uint64_t a1)
{
  uint64_t v2 = sub_DC28(a1, (unint64_t *)&qword_8C828, &OBJC_CLASS___INStartWorkoutIntent_ptr);
  uint64_t v3 = sub_DC28(v2, &qword_8C830, &OBJC_CLASS___INStartWorkoutIntentResponse_ptr);
  sub_DB2C(v3);
  *(void *)&v108[0] = v2;
  uint64_t v4 = sub_6358(&qword_8C838);
  String.init<A>(describing:)(v108, v4);
  uint64_t v5 = sub_DB68();
  sub_65A4(v5, 32LL);
  sub_DAF4();
  *(void *)&v108[0] = v6;
  sub_DA38(&qword_8C6B0, (uint64_t (*)(uint64_t))type metadata accessor for WorkoutAppResolutionStrategy);
  sub_DC30((uint64_t)v108, v5);
  sub_6358(&qword_8C840);
  uint64_t v7 = sub_DB18();
  RCHChildFlowProducers.appResolutionFlowCompletion.setter(v7, v8, v9);
  uint64_t started = type metadata accessor for StartWorkoutHandleIntentStrategy();
  uint64_t v11 = sub_65A4(started, 56LL);
  static AceService.current.getter((void *)(v11 + 16));
  *(void *)&v108[0] = v11;
  sub_DBF8(&qword_8C848);
  uint64_t v20 = sub_DBE8(v12, v13, v14, v15, v16, v17, v18, v19, v102, v108[0]);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v20, v21, v22);
  sub_DAD8();
  uint64_t v23 = sub_DB18();
  RCHChildFlowProducers.handleIntentFlowCompletion.setter(v23, v24, v25);
  uint64_t v26 = type metadata accessor for StartWorkoutsNeedsValueStrategy();
  sub_65A4(v26, 16LL);
  sub_DD80();
  sub_DBF8(&qword_8C850);
  uint64_t v35 = sub_DBE8(v27, v28, v29, v30, v31, v32, v33, v34, v103, v108[0]);
  static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(v35, v36, v37);
  sub_DAD8();
  uint64_t v38 = sub_DB18();
  RCHChildFlowProducers.needsValueFlowCompletion.setter(v38, v39, v40);
  uint64_t v41 = type metadata accessor for StartWorkoutConfirmSlotStrategy();
  sub_65A4(v41, 16LL);
  sub_DD80();
  sub_DBF8(&qword_8C858);
  uint64_t v50 = sub_DBE8(v42, v43, v44, v45, v46, v47, v48, v49, v104, v108[0]);
  static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)(v50, v51, v52);
  sub_DAD8();
  uint64_t v53 = sub_DB18();
  RCHChildFlowProducers.needsConfirmationFlowCompletion.setter(v53, v54, v55);
  uint64_t v56 = type metadata accessor for StartWorkoutDisambiguationStrategy();
  sub_65A4(v56, 16LL);
  sub_DD80();
  sub_DBF8(&qword_8C860);
  uint64_t v65 = sub_DBE8(v57, v58, v59, v60, v61, v62, v63, v64, v105, v108[0]);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)(v65, v66, v67);
  sub_DAD8();
  uint64_t v68 = sub_DB18();
  RCHChildFlowProducers.needsDisambiguationFlowCompletion.setter(v68, v69, v70);
  uint64_t v71 = type metadata accessor for StartWorkoutUnsupportedValueStrategy();
  sub_65A4(v71, 16LL);
  sub_DD80();
  sub_DBF8(&qword_8C868);
  uint64_t v80 = sub_DBE8(v72, v73, v74, v75, v76, v77, v78, v79, v106, v108[0]);
  static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v80, v81, v82);
  sub_DAD8();
  uint64_t v83 = sub_DB18();
  RCHChildFlowProducers.unsupportedValueFlowCompletion.setter(v83, v84, v85);
  uint64_t v86 = type metadata accessor for StartWorkoutContinueInAppStrategy(0LL);
  uint64_t v87 = sub_65A4(v86, 24LL);
  *(void *)(v87 + 16) = 0LL;
  *(void *)&v108[0] = v87;
  sub_DBF8(&qword_8C870);
  uint64_t v96 = sub_DBE8(v88, v89, v90, v91, v92, v93, v94, v95, v107, v108[0]);
  static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)(v96, v97, v98);
  sub_DAD8();
  sub_DB40();
  static Device.current.getter(v108);
  uint64_t v99 = sub_DD58();
  sub_65A4(v99, 73LL);
  *(void *)&v108[0] = sub_D9FC(v108, (uint64_t)sub_44348, 0LL);
  sub_DCE4(&qword_8C880);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)(v108, v99, v1, v100);
  sub_DBD8();
  sub_DB54();
  return sub_DCEC();
}

uint64_t sub_CBA4(void *a1)
{
  uint64_t v2 = sub_AF38(0LL, (unint64_t *)&qword_8C728, &OBJC_CLASS___INEndWorkoutIntent_ptr);
  uint64_t v3 = sub_DC28(v2, &qword_8C730, &OBJC_CLASS___INEndWorkoutIntentResponse_ptr);
  RCHChildFlowProducers.init()(v2, v3);
  *(void *)&v93[0] = v2;
  uint64_t v4 = sub_6358(&qword_8C738);
  String.init<A>(describing:)(v93, v4);
  uint64_t v5 = sub_DB68();
  sub_65A4(v5, 32LL);
  sub_DAF4();
  uint64_t v89 = v6;
  *(void *)&v93[0] = v6;
  sub_DCB0(&qword_8C6B0);
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)(v93, v5, v2, v3);
  sub_6358(&qword_8C740);
  sub_DC98();
  RCHChildFlowProducers.appResolutionFlowCompletion.setter(v7, v8, v9);
  uint64_t v10 = type metadata accessor for EndWorkoutHandleIntentStrategy();
  uint64_t v11 = sub_65A4(v10, 24LL);
  *(void *)(v11 + 16) = a1;
  *(void *)&v93[0] = v11;
  sub_DA38(&qword_8C748, (uint64_t (*)(uint64_t))type metadata accessor for EndWorkoutHandleIntentStrategy);
  uint64_t v13 = v12;
  id v85 = a1;
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v93, v10, v13);
  swift_release(v11);
  sub_DC98();
  RCHChildFlowProducers.handleIntentFlowCompletion.setter(v14, v15, v16);
  uint64_t v17 = sub_DB08();
  sub_DB10(&qword_8C758);
  sub_DD24(v18, v17);
  sub_DC98();
  uint64_t v22 = RCHChildFlowProducers.needsValueFlowCompletion.setter(v19, v20, v21);
  sub_DBC0(v22, v23);
  sub_DB08();
  sub_DB10(&qword_8C768);
  uint64_t v32 = sub_DCF4(v24, v25, v26, v27, v28, v29, v30, v31, (uint64_t)v85, v89, 0LL, 0LL, 0LL, 0LL, 0LL, v93[0]);
  static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)(v32, v33, v34);
  sub_DB94((uint64_t)v93);
  sub_DC98();
  uint64_t v38 = RCHChildFlowProducers.needsConfirmationFlowCompletion.setter(v35, v36, v37);
  sub_DBC0(v38, v39);
  sub_DB08();
  sub_DB10(&qword_8C778);
  uint64_t v48 = sub_DCF4(v40, v41, v42, v43, v44, v45, v46, v47, v86, v90, 0LL, 0LL, 0LL, 0LL, 0LL, v93[0]);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)(v48, v49, v50);
  sub_DB94((uint64_t)v93);
  sub_DC98();
  uint64_t v54 = RCHChildFlowProducers.needsDisambiguationFlowCompletion.setter(v51, v52, v53);
  sub_DBC0(v54, v55);
  sub_DB08();
  sub_DB10(&qword_8C788);
  uint64_t v64 = sub_DCF4(v56, v57, v58, v59, v60, v61, v62, v63, v87, v91, 0LL, 0LL, 0LL, 0LL, 0LL, v93[0]);
  static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v64, v65, v66);
  sub_DB94((uint64_t)v93);
  sub_DC98();
  RCHChildFlowProducers.unsupportedValueFlowCompletion.setter(v67, v68, v69);
  uint64_t v70 = type metadata accessor for EndWorkoutContinueInAppStrategy(0LL);
  uint64_t v71 = sub_65A4(v70, 24LL);
  *(void *)(v71 + 16) = a1;
  *(void *)&v93[0] = v71;
  sub_DA38(&qword_8C790, type metadata accessor for EndWorkoutContinueInAppStrategy);
  uint64_t v73 = v72;
  id v74 = v88;
  static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)(v93, v70, v73);
  swift_release(v71);
  sub_DC98();
  RCHChildFlowProducers.continueInAppFlowCompletion.setter(v75, v76, v77);
  static Device.current.getter(v93);
  uint64_t v78 = sub_6358(&qword_8C798);
  sub_65A4(v78, 73LL);
  uint64_t v79 = sub_D9FC(v93, (uint64_t)sub_44348, 0LL);
  *(void *)&v93[0] = v79;
  sub_DA6C(&qword_8C7A0, &qword_8C798);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)(v93, v78, v3, v80);
  swift_release(v79);
  sub_DC98();
  RCHChildFlowProducers.requestTCCAcceptanceFlowCompletion.setter(v81, v82, v83);
  return swift_release(v92);
}

uint64_t sub_CFAC@<X0>( uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X2>, void (*a4)(__int128 *__return_ptr)@<X3>, uint64_t a5@<X8>)
{
  if (v12)
  {
    sub_AFB8(a1, &qword_8C720);
    sub_D99C(&v11, (uint64_t)v13);
  }

  else
  {
    sub_AFB8((uint64_t)&v11, &qword_8C720);
    sub_AF38(0LL, a2, a3);
    a4(v13);
    sub_AFB8(a1, &qword_8C720);
  }

  return sub_D99C(v13, a5);
}

#error "D26C: call analysis failed (funcsize=147)"
#error "D540: call analysis failed (funcsize=147)"
#error "D788: call analysis failed (funcsize=166)"
uint64_t sub_D928()
{
  uint64_t v0;
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for HealthProducers()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin15HealthProducers);
}

uint64_t sub_D958(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_D99C(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_D9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_D9FC(__int128 *a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(v3 + 72) = 0;
  sub_D99C(a1, v3 + 16);
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 64) = a3;
  return v3;
}

void sub_DA38(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(sub_DD8C(v3), a1);
  }

  sub_6590();
}

void sub_DA6C(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_D958(a2);
    atomic_store(sub_DD8C(v3), a1);
  }

  sub_6590();
}

uint64_t sub_DAA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, char a12)
{
  void (*v12)(__int128 *__return_ptr);
  unint64_t *v13;
  void *v14;
  a11 = 0LL;
  a9 = 0u;
  a10 = 0u;
  return sub_CFAC((uint64_t)&a9, v13, v14, v12, (uint64_t)&a12);
}

void sub_DAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_DAD8()
{
  return swift_release(v0);
}

void sub_DAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_DAF4()
{
}

uint64_t sub_DB08()
{
  return sub_6358(v0);
}

void sub_DB10(unint64_t *a1)
{
}

uint64_t sub_DB18()
{
  return v0;
}

uint64_t sub_DB2C(uint64_t a1)
{
  return RCHChildFlowProducers.init()(v1, a1);
}

uint64_t sub_DB40()
{
  return RCHChildFlowProducers.continueInAppFlowCompletion.setter(v0, v2, v1);
}

uint64_t sub_DB54()
{
  return RCHChildFlowProducers.requestTCCAcceptanceFlowCompletion.setter(v0, v2, v1);
}

uint64_t sub_DB68()
{
  return type metadata accessor for WorkoutAppResolutionStrategy();
}

  ;
}

void sub_DB94(uint64_t a1)
{
}

uint64_t sub_DB9C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v3)(__int128 *__return_ptr);
  void *v4;
  return sub_CFAC(a1, a2, v4, v3, a3);
}

uint64_t sub_DBA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void (*v16)(__int128 *__return_ptr);
  return sub_CFAC((uint64_t)&a9, v14, v15, v16, (uint64_t)&a14);
}

uint64_t sub_DBC0(uint64_t a1, uint64_t a2, ...)
{
  void (*v4)(__int128 *__return_ptr);
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  __int128 v11 = va_arg(va1, void);
  return sub_CFAC((uint64_t)va, v2, v3, v4, (uint64_t)va1);
}

uint64_t sub_DBD8()
{
  return swift_release(v0);
}

char *sub_DBE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

void sub_DBF8(unint64_t *a1)
{
}

uint64_t sub_DC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)(va, v7, v6, a1);
}

uint64_t sub_DC14()
{
  return RCHChildFlowProducers.unsupportedValueFlowCompletion.setter(v1, v2, v0);
}

uint64_t sub_DC28(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_AF38(0LL, a2, a3);
}

uint64_t sub_DC30(uint64_t a1, uint64_t a2)
{
  return static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)(a1, a2, v3, v2);
}

uint64_t sub_DC3C(uint64_t a1, uint64_t a2)
{
  return RCHChildFlowProducers.needsValueFlowCompletion.setter(a1, a2, v2);
}

uint64_t sub_DC48(uint64_t a1, uint64_t a2)
{
  return RCHChildFlowProducers.needsConfirmationFlowCompletion.setter(a1, a2, v2);
}

uint64_t sub_DC54(uint64_t a1, uint64_t a2)
{
  return RCHChildFlowProducers.handleIntentFlowCompletion.setter(a1, a2, v2);
}

uint64_t sub_DC60(uint64_t a1, uint64_t a2)
{
  return RCHChildFlowProducers.needsDisambiguationFlowCompletion.setter(a1, a2, v2);
}

uint64_t sub_DC6C(uint64_t a1, uint64_t a2)
{
  return RCHChildFlowProducers.appResolutionFlowCompletion.setter(a1, a2, v2);
}

uint64_t sub_DC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(va, v6, a1);
}

uint64_t sub_DC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(va, v6, a1);
}

  ;
}

uint64_t sub_DCA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int128 a14)
{
  return sub_D9FC(&a14, a2, 0LL);
}

void sub_DCB0(unint64_t *a1)
{
}

uint64_t sub_DCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return String.init<A>(describing:)(va, a1);
}

uint64_t sub_DCC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)(va, v5, v6);
}

double sub_DCD4()
{
  return 0.0;
}

void sub_DCE4(unint64_t *a1)
{
}

uint64_t sub_DCEC()
{
  return swift_release(v0);
}

char *sub_DCF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  return &a16;
}

uint64_t sub_DD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)(va, v6, a1);
}

uint64_t sub_DD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)(va, v6, a1);
}

uint64_t sub_DD24(uint64_t a1, uint64_t a2)
{
  return static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(a1, a2, a1);
}

  ;
}

uint64_t sub_DD48()
{
  return swift_release(v0);
}

uint64_t sub_DD58()
{
  return sub_6358(v0);
}

void *sub_DD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return static Device.current.getter((uint64_t *)va);
}

id sub_DD68()
{
  return v0;
}

uint64_t sub_DD74()
{
  return static AceService.current.getter();
}

  ;
}

uint64_t sub_DD8C(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

void sub_DD98()
{
  uint64_t v111 = v3;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v105 = *(void *)(v4 - 8);
  uint64_t v106 = v4;
  sub_C870();
  __chkstk_darwin(v5);
  sub_C838();
  uint64_t v104 = v6;
  uint64_t v7 = sub_11198();
  uint64_t v8 = type metadata accessor for Parse.DirectInvocation(v7);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v109 = v8;
  uint64_t v110 = v9;
  sub_C870();
  __chkstk_darwin(v10);
  sub_10FF0(v11, v93);
  __chkstk_darwin(v12);
  uint64_t v107 = (uint64_t)&v93 - v13;
  sub_11054();
  __chkstk_darwin(v14);
  v108 = (char *)&v93 - v15;
  sub_6358(&qword_8C5F0);
  sub_C870();
  __chkstk_darwin(v16);
  uint64_t v18 = sub_11074(v17, v93);
  uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserParse(v18);
  uint64_t v97 = *(void *)(v19 - 8);
  uint64_t v98 = v19;
  sub_C870();
  __chkstk_darwin(v20);
  sub_10F8C();
  uint64_t v102 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v95 = *(void *)(v102 - 8);
  sub_C870();
  __chkstk_darwin(v21);
  sub_C838();
  uint64_t v94 = v22;
  uint64_t v103 = type metadata accessor for USOParse(0LL);
  uint64_t v101 = *(void *)(v103 - 8);
  sub_C870();
  __chkstk_darwin(v23);
  sub_C838();
  uint64_t v100 = v24;
  uint64_t v25 = sub_11198();
  type metadata accessor for DisambiguateAppNLIntent(v25);
  sub_C870();
  __chkstk_darwin(v26);
  uint64_t v27 = sub_110E8();
  type metadata accessor for HealthNLIntent(v27);
  sub_C870();
  __chkstk_darwin(v28);
  uint64_t v29 = sub_11104();
  uint64_t v30 = type metadata accessor for NLIntent(v29);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v93 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v93 - v35;
  uint64_t v37 = type metadata accessor for Parse(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  sub_6BD8();
  uint64_t v41 = v40 - v39;
  sub_111AC(v40 - v39, v111, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16));
  int v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 88))(v41, v37);
  if (v42 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_10FE0();
    sub_112A4((uint64_t)v36, v41, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32));
    sub_1129C(v2, (uint64_t)v36);
    sub_E3F8();
    uint64_t v44 = v43;
    sub_10070(v2, type metadata accessor for HealthNLIntent);
    uint64_t v45 = sub_1127C();
    sub_1129C(v45, v46);
    if (!v44)
    {
      sub_1129C(v1, (uint64_t)v34);
      sub_E668();
      sub_10070(v1, type metadata accessor for DisambiguateAppNLIntent);
    }

    uint64_t v47 = *(void (**)(char *, uint64_t))(v31 + 8);
    v47(v34, v30);
    v47(v36, v30);
    goto LABEL_19;
  }

  if (v42 == enum case for Parse.directInvocation(_:))
  {
    sub_10FE0();
    uint64_t v49 = v109;
    uint64_t v48 = v110;
    uint64_t v50 = sub_1116C();
    v51(v50);
    sub_11270(v107);
    uint64_t v52 = sub_2FEF8();
    uint64_t v54 = v52;
    if (v53)
    {
      uint64_t v55 = v53;
      if (v53 == 1)
      {
        uint64_t v56 = Logger.workout.unsafeMutableAddressor(v52);
        sub_11224(v56);
        uint64_t v58 = v104;
        uint64_t v57 = v105;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 16))(v104, v56, v106);
        uint64_t v59 = v96;
        uint64_t v60 = sub_11270(v96);
        uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
        os_log_type_t v62 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v63 = (uint8_t *)sub_88B0(12LL);
          uint64_t v64 = sub_88B0(32LL);
          uint64_t v112 = v64;
          *(_DWORD *)uint64_t v63 = 136315138;
          uint64_t v65 = Parse.DirectInvocation.identifier.getter();
          uint64_t v67 = sub_173E0(v65, v66, &v112);
          uint64_t v68 = sub_11288(v67);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v68, v69);
          sub_10F84();
          uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
          v70(v59, v49);
          _os_log_impl(&dword_0, v61, v62, "Unknow DirectInvocation with identifier: %s", v63, 0xCu);
          sub_11308();
          sub_8870(v64);
          sub_8870((uint64_t)v63);

          (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v104, v106);
          uint64_t v71 = sub_1127C();
          ((void (*)(uint64_t))v70)(v71);
        }

        else
        {

          id v88 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
          v88(v59, v49);
          (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v106);
          uint64_t v89 = sub_1127C();
          ((void (*)(uint64_t))v88)(v89);
        }

        goto LABEL_19;
      }

      sub_111F4();
      App.__allocating_init(appIdentifier:)(v54, v55);
    }

    else
    {
      sub_FFEC(v52, 0LL);
    }

    uint64_t v81 = sub_1127C();
    goto LABEL_17;
  }

  if (v42 != enum case for Parse.uso(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v41, v37);
    goto LABEL_19;
  }

  sub_10FE0();
  uint64_t v72 = sub_1116C();
  uint64_t v74 = v73(v72);
  uint64_t v75 = USOParse.userParse.getter(v74);
  uint64_t v76 = Siri_Nlu_External_UserParse.userDialogActs.getter(v75);
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v0, v98);
  uint64_t v77 = v99;
  sub_52814(v76, v99);
  sub_10F84();
  if (sub_63E0(v77, 1LL, v102) == 1)
  {
    uint64_t v78 = sub_1116C();
    uint64_t v80 = v79(v78);
    sub_11300(v80, &qword_8C5F0);
LABEL_19:
    sub_10F48();
    return;
  }

  uint64_t v83 = v94;
  sub_111AC(v94, v77, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 32));
  unint64_t v84 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v83);
  unint64_t v90 = v84;
  if (!(v84 >> 62))
  {
LABEL_28:
    sub_C090();
    sub_11178();
    uint64_t v85 = sub_1116C();
    v87(v85, v86);
    goto LABEL_19;
  }

  sub_1112C();
  uint64_t v92 = _CocoaArrayWrapper.endIndex.getter(v76);
  sub_C090();
  if (!v92) {
    goto LABEL_28;
  }
LABEL_23:
  if ((v90 & 0xC000000000000001LL) != 0)
  {
    uint64_t v91 = sub_112D4();
    goto LABEL_26;
  }

  if (*(void *)((char *)&dword_10 + (v90 & 0xFFFFFFFFFFFFF8LL)))
  {
    uint64_t v91 = *(void *)(v90 + 32);
    swift_retain(v91);
LABEL_26:
    sub_C090();
    sub_E8D8();
    swift_release(v91);
    sub_11178();
    uint64_t v81 = sub_1116C();
LABEL_17:
    v82(v81);
    goto LABEL_19;
  }

  __break(1u);
}

void sub_E3F8()
{
  uint64_t v2 = sub_112E0();
  sub_C870();
  __chkstk_darwin(v3);
  sub_111B4();
  sub_6358(&qword_8C908);
  sub_C870();
  __chkstk_darwin(v4);
  sub_10F8C();
  if (qword_8BBF0 != -1) {
    swift_once(&qword_8BBF0, sub_4EE58);
  }
  uint64_t v5 = qword_8FA60;
  type metadata accessor for HealthNLIntent(0LL);
  sub_AFF0((unint64_t *)&qword_8C5F8, type metadata accessor for HealthNLIntent, (uint64_t)&unk_661A8);
  sub_AFF0(&qword_8C918, type metadata accessor for HealthNLIntent.HealthNLApp, (uint64_t)&unk_663C4);
  sub_11014(v6);
  uint64_t v7 = sub_63E0(v0, 1LL, v2);
  if ((_DWORD)v7 == 1)
  {
    sub_11300(v7, &qword_8C908);
  }

  else
  {
    if (qword_8BC30 != -1) {
      swift_once(&qword_8BC30, sub_4FA7C);
    }
    sub_AFF0(&qword_8C920, type metadata accessor for HealthNLIntent.HealthNLApp, (uint64_t)&unk_66394);
    sub_11030(v8);
    sub_111CC();
    if (v5)
    {
      sub_10F40(v1);
      sub_10F40(v0);
    }

    else
    {
      if (qword_8BC28 != -1) {
        swift_once(&qword_8BC28, sub_4FA54);
      }
      sub_110D4(qword_97000);
      if (!v9)
      {
        sub_10F40(v1);
        sub_10F40(v0);
        goto LABEL_10;
      }

      sub_112B4();
      sub_11188((uint64_t)".SIRI_INTERNAL_WATCHAPP");
      if ((sub_10FC4() & 1) != 0)
      {
        sub_10F00();
        sub_11140();
        sub_111A4(v1);
        sub_111A4(v0);
      }

      else
      {
        sub_10F40(v1);
        sub_10F40(v0);
      }

      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRetain();
    sub_10F84();
    sub_111F4();
    sub_11204();
  }

LABEL_10:
  sub_10F48();
}

  sub_10F48();
}

      sub_39CD0();
      sub_39D28();
      sub_157BC();
      v149 = (_WORD *)sub_2F894();
      sub_39CDC(v149);
      sub_39D80();
      sub_39C84(&dword_0, v150, v151, v152, "makeFlow");
      sub_8870(v112);
      v124 = v203;
      goto LABEL_27;
    }

    v170 = sub_63EC(v156);
    v171 = Logger.workout.unsafeMutableAddressor(v170);
    sub_8894(v171, (uint64_t)&v210);
    sub_892C();
    v172 = sub_39CEC((uint64_t)v211);
    v173 = (void *)Logger.logObject.getter(v172);
    v174 = static os_log_type_t.error.getter(v173);
    if (sub_39C58(v174))
    {
      v175 = (_WORD *)sub_2F894();
      sub_39DA0(v175);
      sub_39C34(&dword_0, v176, v177, "Workout plugin had no flows that can handle the invocation");
      sub_8870(v126);
    }

    ((void (*)(void, uint64_t))v154)(v178[2], v196);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x800000000006A600LL,  "HealthFlowDelegatePlugin/HealthFlowDelegatePlugin.swift",  55LL,  2LL,  207LL,  0);
  }

  else
  {
    if ((_DWORD)v86 == enum case for Parse.uso(_:))
    {
      v131 = v64;
      v132 = Logger.workout.unsafeMutableAddressor(v86);
      sub_8894(v132, (uint64_t)&v210);
      v133 = v188;
      sub_892C();
      v134 = sub_39CEC((uint64_t)v211);
      Logger.logObject.getter(v134);
      v135 = sub_B33C();
      v136 = sub_39CA0(v135);
      v137 = v203;
      if (v136)
      {
        v138 = (uint8_t *)sub_2F894();
        *(_WORD *)v138 = 0;
        sub_1F1E8(&dword_0, v133, (os_log_type_t)v39, "Workout domain received NLv4", v138);
        sub_8870((uint64_t)v138);
      }

      ((void (*)(os_log_s *, uint64_t))v131)(v188, v79);
      v139 = v184;
      sub_48488(v184);
      v140 = sub_485C4(v80);
      sub_10070((uint64_t)v139, type metadata accessor for FlowRouterX);
      v142 = (os_log_s *)OSSignposter.logHandle.getter(v141);
      uint64_t v102 = static os_signpost_type_t.event.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v143 = (uint8_t *)sub_2F894();
        v144 = sub_39DC0(v143);
        sub_39C98(&dword_0, v142, (os_signpost_type_t)v102, v144, "nlv4FlowBuilt", "", v143);
        sub_8870((uint64_t)v143);
      }

      sub_37FF0(v145, v140);
      sub_39DAC();
      v146 = ((uint64_t (*)(uint64_t, uint64_t))v77)(v201, v69);
      v147 = (void *)OSSignposter.logHandle.getter(v146);
      v148 = sub_39C68();
      static os_signpost_type_t.end.getter(v148);
      if ((sub_39C78() & 1) != 0)
      {
        sub_39CD0();
        sub_39D28();
        sub_157BC();
        v161 = (_WORD *)sub_2F894();
        sub_39CDC(v161);
        sub_39D80();
        sub_39C84(&dword_0, v162, v163, v164, "makeFlow");
        sub_8870(v137);
        v137 = v203;
      }

      v153 = *(void (**)(unint64_t, uint64_t))(v137 + 8);
      goto LABEL_37;
    }

    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001CLL,  0x800000000006A5E0LL,  "HealthFlowDelegatePlugin/HealthFlowDelegatePlugin.swift",  55LL,  2LL,  210LL,  0);
  }

  __break(1u);
}

    uint64_t v5 = (v13 - 1) & v13;
    uint64_t v8 = __clz(__rbit64(v13)) + (v12 << 6);
    uint64_t v6 = v12;
LABEL_6:
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (void *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v11 = v10[1];
    *(void *)&uint64_t v40 = *v10;
    *((void *)&v40 + 1) = v11;
    sub_C7D4(v9 + 32 * v8, (uint64_t)v41);
    swift_bridgeObjectRetain();
LABEL_13:
    sub_476B0((uint64_t)&v40, (uint64_t)&v42, &qword_8F630);
    uint64_t v15 = v43;
    if (!v43)
    {
      swift_release(a1);
      return _swiftEmptyDictionarySingleton;
    }

    uint64_t v16 = v42;
    sub_476B0((uint64_t)&v44, (uint64_t)&v38, &qword_8C600);
    if (v39)
    {
      uint64_t v35 = v2;
      sub_17A50(&v38, &v40);
      sub_13FB8((uint64_t)&v40, (uint64_t)&v38);
      isUnique = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      uint64_t v17 = sub_477B8();
      uint64_t v19 = _swiftEmptyDictionarySingleton[2];
      uint64_t v20 = (v18 & 1) == 0;
      uint64_t v21 = v19 + v20;
      if (__OFADD__(v19, v20)) {
        goto LABEL_39;
      }
      uint64_t v22 = v18;
      uint64_t v34 = v17;
      sub_6358(&qword_8F638);
      uint64_t v23 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v21);
      uint64_t v24 = v34;
      if (v23)
      {
        uint64_t v25 = sub_477B8();
        if ((v22 & 1) != (v26 & 1)) {
          goto LABEL_41;
        }
        uint64_t v24 = v25;
      }

      if ((v22 & 1) != 0)
      {
        uint64_t v27 = (void *)(_swiftEmptyDictionarySingleton[7] + 32 * v24);
        _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v27);
        sub_17A50(&v38, v27);
      }

      else
      {
        _swiftEmptyDictionarySingleton[(v24 >> 6) + 8] |= 1LL << v24;
        uint64_t v28 = (void *)(_swiftEmptyDictionarySingleton[6] + 16 * v24);
        uint64_t *v28 = v16;
        v28[1] = v15;
        sub_17A50(&v38, (_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v24));
        uint64_t v29 = _swiftEmptyDictionarySingleton[2];
        uint64_t v30 = __OFADD__(v29, 1LL);
        uint64_t v31 = v29 + 1;
        if (v30) {
          goto LABEL_40;
        }
        _swiftEmptyDictionarySingleton[2] = v31;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(&v40);
      uint64_t v2 = v35;
    }

    else
    {
      swift_bridgeObjectRelease(v15);
      sub_10004((uint64_t)&v38, &qword_8C600);
    }
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_E668()
{
  uint64_t v2 = sub_112E0();
  sub_C870();
  __chkstk_darwin(v3);
  sub_111B4();
  sub_6358(&qword_8C908);
  sub_C870();
  __chkstk_darwin(v4);
  sub_10F8C();
  if (qword_8BB80 != -1) {
    swift_once(&qword_8BB80, sub_2F95C);
  }
  uint64_t v5 = qword_96F60;
  type metadata accessor for DisambiguateAppNLIntent(0LL);
  sub_AFF0(&qword_8C910, type metadata accessor for DisambiguateAppNLIntent, (uint64_t)&unk_639E0);
  sub_AFF0(&qword_8C918, type metadata accessor for HealthNLIntent.HealthNLApp, (uint64_t)&unk_663C4);
  sub_11014(v6);
  uint64_t v7 = sub_63E0(v0, 1LL, v2);
  if ((_DWORD)v7 == 1)
  {
    sub_11300(v7, &qword_8C908);
  }

  else
  {
    if (qword_8BC30 != -1) {
      swift_once(&qword_8BC30, sub_4FA7C);
    }
    sub_AFF0(&qword_8C920, type metadata accessor for HealthNLIntent.HealthNLApp, (uint64_t)&unk_66394);
    sub_11030(v8);
    sub_111CC();
    if (v5)
    {
      sub_10F40(v1);
      sub_10F40(v0);
    }

    else
    {
      if (qword_8BC28 != -1) {
        swift_once(&qword_8BC28, sub_4FA54);
      }
      sub_110D4(qword_97000);
      if (!v9)
      {
        sub_10F40(v1);
        sub_10F40(v0);
        goto LABEL_10;
      }

      sub_112B4();
      sub_11188((uint64_t)".SIRI_INTERNAL_WATCHAPP");
      if ((sub_10FC4() & 1) != 0)
      {
        sub_10F00();
        sub_11140();
        sub_111A4(v1);
        sub_111A4(v0);
      }

      else
      {
        sub_10F40(v1);
        sub_10F40(v0);
      }

      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRetain();
    sub_10F84();
    sub_111F4();
    sub_11204();
  }

void sub_E8D8()
{
  if (getAppEntity(from:)())
  {
    uint64_t v0 = UsoEntity_common_App.appIdentifier.getter();
    if (v1)
    {
      uint64_t v2 = v0;
      uint64_t v3 = v1;
      sub_111F4();
      App.__allocating_init(appIdentifier:)(v2, v3);
    }

    sub_1104C();
  }

  sub_11120();
}

void sub_E940()
{
  uint64_t v2 = v1;
  uint64_t v113 = type metadata accessor for Logger(0LL);
  uint64_t v115 = *(void *)(v113 - 8);
  sub_C870();
  __chkstk_darwin(v3);
  sub_C838();
  uint64_t v114 = v4;
  uint64_t v5 = sub_11198();
  uint64_t v97 = type metadata accessor for Siri_Nlu_External_UserStatedTask(v5);
  uint64_t v96 = *(void *)(v97 - 8);
  sub_C870();
  __chkstk_darwin(v6);
  sub_C838();
  uint64_t v95 = v7;
  uint64_t v8 = sub_11198();
  uint64_t v99 = type metadata accessor for Siri_Nlu_External_UsoGraph(v8);
  uint64_t v98 = *(void *)(v99 - 8);
  sub_C870();
  __chkstk_darwin(v9);
  sub_11060();
  uint64_t v93 = v10;
  sub_11054();
  __chkstk_darwin(v11);
  uint64_t v94 = (uint64_t)&v93 - v12;
  sub_6358(&qword_8C5F0);
  sub_C870();
  __chkstk_darwin(v13);
  sub_11060();
  uint64_t v101 = v14;
  sub_11054();
  __chkstk_darwin(v15);
  uint64_t v107 = (uint64_t)&v93 - v16;
  uint64_t v111 = (uint8_t *)type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v106 = *((void *)v111 - 1);
  sub_C870();
  __chkstk_darwin(v17);
  sub_10FF0(v18, v93);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v93 - v20;
  uint64_t v110 = (uint8_t *)type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v104 = *((void *)v110 - 1);
  sub_C870();
  __chkstk_darwin(v22);
  uint64_t v24 = sub_11074(v23, v93);
  uint64_t v25 = type metadata accessor for USOParse(v24);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v108 = v25;
  uint64_t v109 = v26;
  sub_C870();
  __chkstk_darwin(v27);
  sub_C838();
  uint64_t v112 = v28;
  uint64_t v29 = sub_11198();
  type metadata accessor for HealthNLIntent(v29);
  sub_C870();
  __chkstk_darwin(v30);
  sub_6BD8();
  uint64_t v33 = v32 - v31;
  uint64_t v34 = type metadata accessor for NLIntent(0LL);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v36 = sub_11104();
  uint64_t v37 = type metadata accessor for Parse(v36);
  uint64_t v38 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  sub_11060();
  uint64_t v102 = v39;
  sub_11054();
  __chkstk_darwin(v40);
  uint64_t v105 = (uint64_t)&v93 - v41;
  sub_11054();
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v93 - v43;
  sub_112AC((uint64_t)&v93 - v43, v2);
  uint64_t v45 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v44, v37);
  if ((_DWORD)v45 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_110AC((uint64_t)v44, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 96));
    sub_111AC(v0, (uint64_t)v44, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 32));
    sub_111AC(v33, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16));
    sub_4DFDC();
    sub_10070(v33, type metadata accessor for HealthNLIntent);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v0, v34);
LABEL_11:
    sub_10F48();
    return;
  }

  if ((_DWORD)v45 != enum case for Parse.uso(_:))
  {
    uint64_t v54 = Logger.health.unsafeMutableAddressor(v45);
    sub_11224(v54);
    uint64_t v55 = v113;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 16))(v114, v54, v113);
    uint64_t v56 = v105;
    uint64_t v57 = sub_112AC(v105, v2);
    uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)sub_88B0(12LL);
      uint64_t v112 = sub_88B0(32LL);
      uint64_t v116 = v112;
      *(_DWORD *)uint64_t v60 = 136315138;
      uint64_t v110 = v60 + 4;
      uint64_t v111 = v60;
      uint64_t v61 = v102;
      sub_112AC(v102, v56);
      uint64_t v62 = String.init<A>(describing:)(v61, v37);
      unint64_t v64 = v63;
      uint64_t v65 = sub_173E0(v62, v63, &v116);
      uint64_t v66 = sub_11288(v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v66, v67);
      swift_bridgeObjectRelease(v64);
      sub_11164(v56);
      uint64_t v68 = v111;
      _os_log_impl(&dword_0, v58, v59, "Failed to find nlv3 or uso from %s", v111, 0xCu);
      uint64_t v69 = v112;
      sub_11308();
      sub_8870(v69);
      sub_8870((uint64_t)v68);

      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v114, v113);
    }

    else
    {
      sub_11164(v56);

      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v114, v55);
    }

    sub_11164((uint64_t)v44);
    goto LABEL_11;
  }

  sub_110AC((uint64_t)v44, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 96));
  uint64_t v47 = v108;
  uint64_t v46 = v109;
  uint64_t v48 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v109 + 32))(v112, v44, v108);
  uint64_t v49 = USOParse.userParse.getter(v48);
  uint64_t v50 = Siri_Nlu_External_UserParse.userDialogActs.getter(v49);
  uint64_t v51 = *(void (**)(char *, uint8_t *))(v106 + 8);
  v51(v21, v111);
  uint64_t v52 = v107;
  sub_52814(v50, v107);
  sub_C090();
  uint64_t v53 = (uint64_t)v110;
  if (sub_63E0(v52, 1LL, (uint64_t)v110) == 1)
  {
    sub_11234();
    sub_10004(v52, &qword_8C5F0);
    goto LABEL_11;
  }

  uint64_t v71 = v103;
  uint64_t v70 = v104;
  sub_112A4(v103, v52, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 32));
  unint64_t v72 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v71);
  unint64_t v73 = v72;
  if (!(v72 >> 62))
  {
LABEL_22:
    sub_C090();
    sub_110AC(v71, *(uint64_t (**)(uint64_t, uint64_t))(v70 + 8));
    sub_11234();
    goto LABEL_11;
  }

  sub_1112C();
  uint64_t v92 = _CocoaArrayWrapper.endIndex.getter(v52);
  sub_C090();
  if (!v92) {
    goto LABEL_22;
  }
LABEL_14:
  if ((v73 & 0xC000000000000001LL) != 0)
  {
    uint64_t v74 = sub_112D4();
LABEL_17:
    sub_C090();
    uint64_t v75 = getWorkoutEntity(from:)(v74);
    getWorkoutName(from:fallback:)(v75, 1LL);
    uint64_t v76 = swift_release(v75);
    uint64_t v77 = v100;
    uint64_t v78 = USOParse.userParse.getter(v76);
    uint64_t v79 = Siri_Nlu_External_UserParse.userDialogActs.getter(v78);
    v51(v77, v111);
    uint64_t v80 = v101;
    sub_52814(v79, v101);
    sub_10F84();
    if (sub_63E0(v80, 1LL, v53) == 1)
    {
      sub_10004(v80, &qword_8C5F0);
      swift_release(v74);
      sub_110AC(v71, *(uint64_t (**)(uint64_t, uint64_t))(v104 + 8));
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v112, v47);
    }

    else
    {
      uint64_t v81 = v80;
      uint64_t v82 = v95;
      Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
      uint64_t v83 = *(void (**)(uint64_t, uint8_t *))(v104 + 8);
      uint64_t v84 = sub_11164(v81);
      uint64_t v85 = v93;
      Siri_Nlu_External_UserStatedTask.task.getter(v84);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v82, v97);
      uint64_t v86 = v98;
      uint64_t v87 = v71;
      uint64_t v88 = v94;
      sub_112A4(v94, v85, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 32));
      sub_F09C();
      uint64_t v115 = v89;
      uint64_t v91 = v90;
      swift_release(v74);
      sub_110AC(v88, *(uint64_t (**)(uint64_t, uint64_t))(v86 + 8));
      v83(v87, v110);
      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v112, v47);
      if (v91) {
        sub_C090();
      }
    }

    goto LABEL_11;
  }

  if (*(void *)((char *)&dword_10 + (v73 & 0xFFFFFFFFFFFFF8LL)))
  {
    uint64_t v74 = *(void *)(v73 + 32);
    swift_retain(v74);
    goto LABEL_17;
  }

  __break(1u);
}

void sub_F09C()
{
  uint64_t v1 = type metadata accessor for Google_Protobuf_StringValue(0LL);
  uint64_t v33 = *(void *)(v1 - 8);
  uint64_t v34 = v1;
  sub_C870();
  __chkstk_darwin(v2);
  uint64_t v3 = sub_110E8();
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier(v3);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_6BD8();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    unint64_t v11 = v9 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v31 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    uint64_t v32 = *(void *)(v5 + 72);
    uint64_t v29 = v9;
    swift_bridgeObjectRetain();
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
    uint64_t v30 = v4;
    while (1)
    {
      uint64_t v13 = v31(v8, v11, v4);
      uint64_t v14 = Siri_Nlu_External_UsoEntityIdentifier.namespace.getter(v13);
      uint64_t v15 = Google_Protobuf_StringValue.value.getter(v14);
      uint64_t v17 = v16;
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v0, v34);
      BOOL v18 = v15 == 0x7974697669746361LL && v17 == 0xEC000000656D614ELL;
      if (v18 || (sub_11214(0x7974697669746361LL, 0xEC000000656D614ELL) & 1) != 0) {
        break;
      }
      if (v15 == 0x4E74756F6B726F77LL && v17 == 0xEB00000000656D61LL)
      {
        uint64_t v19 = sub_10F84();
LABEL_23:
        uint64_t v20 = 2LL;
LABEL_9:
        uint64_t v21 = Siri_Nlu_External_UsoEntityIdentifier.value.getter(v19);
        uint64_t v23 = v22;
        sub_11260();
        if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
          uint64_t v12 = sub_112C8(0LL, *((void *)v12 + 2) + 1LL);
        }
        unint64_t v25 = *((void *)v12 + 2);
        unint64_t v24 = *((void *)v12 + 3);
        if (v25 >= v24 >> 1) {
          uint64_t v12 = sub_112C8((char *)(v24 > 1), v25 + 1);
        }
        *((void *)v12 + 2) = v25 + 1;
        uint64_t v26 = &v12[24 * v25];
        *((void *)v26 + 4) = v20;
        *((void *)v26 + 5) = v21;
        *((void *)v26 + 6) = v23;
        uint64_t v4 = v30;
        goto LABEL_14;
      }

      char v28 = sub_11214(0x4E74756F6B726F77LL, 0xEB00000000656D61LL);
      uint64_t v19 = sub_10F84();
      if ((v28 & 1) != 0) {
        goto LABEL_23;
      }
      sub_11260();
LABEL_14:
      v11 += v32;
      if (!--v10)
      {
        swift_bridgeObjectRelease_n(v29, 2LL);
        goto LABEL_25;
      }
    }

    uint64_t v19 = sub_10F84();
    uint64_t v20 = 1LL;
    goto LABEL_9;
  }

  swift_bridgeObjectRelease(v9);
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_25:
  uint64_t v35 = v12;
  swift_bridgeObjectRetain();
  sub_100F8(&v35);
  swift_bridgeObjectRelease(v12);
  if (*((void *)v35 + 2)) {
    swift_bridgeObjectRetain();
  }
  sub_1104C();
  sub_10F48();
}

void *sub_F354(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL);
    __break(1u);
  }

  else if (a1)
  {
    uint64_t v2 = sub_6358(&qword_8C938);
    uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2);
    result[2] = a1;
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

char *sub_F3F4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_6358(&qword_8C930);
    unint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_F8AC((char *)(a4 + 32), v8, v13);
    *(void *)(a4 + 16) = 0LL;
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    sub_F694(0LL, v8, (unint64_t)v13, a4);
  }

  return v11;
}

uint64_t sub_F4E8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_F510(a1, a2, a3, a4, &qword_8C950, (void (*)(void))&type metadata accessor for DisplayHint);
}

uint64_t sub_F4FC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_F510(a1, a2, a3, a4, &qword_8C948, (void (*)(void))&type metadata accessor for SemanticValue);
}

uint64_t sub_F510(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    sub_10FB4();
    if (v12 != v13)
    {
      sub_11254();
      if (v12)
      {
        __break(1u);
LABEL_23:
        sub_10EEC();
        uint64_t v23 = "Division by zero";
        uint64_t v24 = 16LL;
LABEL_25:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v23,  v24,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return result;
      }

      sub_10FA4();
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    uint64_t v17 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  sub_6358(a5);
  uint64_t v16 = sub_111FC();
  uint64_t v17 = (void *)sub_10F60(v16);
  size_t v18 = j__malloc_size(v17);
  if (!v6) {
    goto LABEL_23;
  }
  if (v18 - v7 == 0x8000000000000000LL && v6 == -1)
  {
    sub_10EEC();
    uint64_t v23 = "Division results in an overflow";
    uint64_t v24 = 31LL;
    goto LABEL_25;
  }

  v17[2] = v14;
  v17[3] = 2 * ((uint64_t)(v18 - v7) / v6);
LABEL_18:
  sub_111FC();
  sub_111DC();
  if ((a1 & 1) != 0)
  {
    sub_FA48(a4 + v21, v14, v20, a6);
    *(void *)(a4 + 16) = 0LL;
    sub_C090();
  }

  else
  {
    sub_F7B0(0LL, v14, v20, a4, (uint64_t (*)(void))a6);
  }

  return (uint64_t)v17;
}

uint64_t sub_F680(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_F510( a1,  a2,  a3,  a4,  &qword_8C960,  (void (*)(void))&type metadata accessor for TerminalIntentNode);
}

uint64_t sub_F694(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 24 * a1 + 32;
  unint64_t v8 = a3 + 24 * v4;
  if (v7 >= v8 || v7 + 24 * v4 <= a3)
  {
    sub_6358(&qword_8C938);
    swift_arrayInitWithCopy(a3, v7);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_F7B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_10EEC();
    unint64_t v20 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v21 = 51LL;
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3, v12);
    sub_C090();
    return v14;
  }

  sub_10EEC();
  unint64_t v20 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v21 = 49LL;
LABEL_11:
  uint64_t result = sub_110B4( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v20,  v21,  v18,  (uint64_t)"Swift/UnsafePointer.swift",  v19,  v22,  v23,  v24);
  __break(1u);
  return result;
}

char *sub_F8AC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }

  return __src;
}

char *sub_F938(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }

  return __src;
}

char *sub_F9BC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }

  return __src;
}

uint64_t sub_FA48(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_10EEC();
    uint64_t result = sub_110B4( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  55LL,  v11,  (uint64_t)"Swift/UnsafePointer.swift",  v12,  v13,  v14,  v15);
    __break(1u);
  }

  else if (a3 < a1 {
         || (uint64_t result = ((uint64_t (*)(void))a4)(0LL),
  }
             a1 + *(void *)(*(void *)(result - 8) + 72LL) * a2 <= a3))
  {
    a4(0LL);
    uint64_t v10 = sub_112EC();
    return swift_arrayInitWithTakeFrontToBack(v10);
  }

  else if (a3 != a1)
  {
    uint64_t v9 = sub_112EC();
    return swift_arrayInitWithTakeBackToFront(v9);
  }

  return result;
}

char *sub_FB1C(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

uint64_t sub_FB9C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
    {
      sub_6358(&qword_8C938);
      return swift_arrayInitWithCopy(a3, a1);
    }

    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_FC8C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3, a1);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_FD58(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_FD64(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for DisplayHint);
}

uint64_t sub_FD64(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  if (a2 < 0)
  {
    sub_10EEC();
    int v13 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v14 = 51LL;
  }

  else
  {
    uint64_t v6 = *(void *)(*(void *)(a4(0LL) - 8) + 72LL) * a2;
    unint64_t v7 = a3 + v6;
    unint64_t v8 = a1 + v6;
    if (v7 <= a1 || v8 <= a3) {
      return swift_arrayInitWithCopy(a3, a1);
    }
    sub_10EEC();
    int v13 = "UnsafeMutablePointer.initialize overlapping range";
    uint64_t v14 = 49LL;
  }

  uint64_t result = sub_110B4( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v13,  v14,  v11,  (uint64_t)"Swift/UnsafePointer.swift",  v12,  v15,  v16,  v17);
  __break(1u);
  return result;
}

uint64_t sub_FE38(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3)
    {
      sub_6358(&qword_8C970);
      return swift_arrayInitWithCopy(a3, a1);
    }

    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_FF28(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_FFEC(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void sub_10004(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_6358(a2);
  sub_110C0(v2);
  sub_6590();
}

uint64_t sub_1002C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HealthNLIntent.HealthNLApp(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_10070(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_110C0(v2);
  sub_6590();
}

unint64_t sub_10098()
{
  unint64_t result = qword_8C928;
  if (!qword_8C928)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_8C928);
  }

  return result;
}

unint64_t sub_100D4(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL)) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100F8(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_10ED8((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_10164(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_10164(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        return sub_107A8(0LL, v3, 1LL, a1);
      }
      return result;
    }

LABEL_126:
    __break(1u);
    goto LABEL_127;
  }

  uint64_t v5 = result;
  uint64_t result = (uint64_t)sub_F354(v3 / 2);
  uint64_t v90 = a1;
  uint64_t v91 = result;
  uint64_t v93 = v3;
  __dst = v6;
  if (v3 > 0)
  {
    Swift::Int v7 = 0LL;
    uint64_t v8 = *a1;
    uint64_t v95 = (unint64_t *)&_swiftEmptyArrayStorage;
    uint64_t v92 = v5;
    while (1)
    {
      Swift::Int v9 = v7++;
      if (v7 < v3)
      {
        uint64_t v10 = *(void *)(v8 + 24 * v7);
        uint64_t v11 = *(void *)(v8 + 24 * v9);
        Swift::Int v7 = v9 + 2;
        if (v9 + 2 < v3)
        {
          uint64_t v12 = (uint64_t *)(v8 + 48 + 24 * v9);
          uint64_t v13 = v10;
          while (1)
          {
            uint64_t v15 = *v12;
            v12 += 3;
            uint64_t v14 = v15;
            if (v10 < v11 == v15 >= v13) {
              break;
            }
            ++v7;
            uint64_t v13 = v14;
            if (v7 >= v3)
            {
              Swift::Int v7 = v3;
              break;
            }
          }
        }

        if (v10 < v11)
        {
          if (v7 < v9) {
            goto LABEL_128;
          }
          if (v9 < v7)
          {
            uint64_t v16 = 24 * v7;
            uint64_t v17 = 24 * v9;
            Swift::Int v18 = v7;
            Swift::Int v19 = v9;
            do
            {
              if (v19 != --v18)
              {
                if (!v8) {
                  goto LABEL_134;
                }
                uint64_t v20 = v8 + v17;
                uint64_t v21 = v8 + v16;
                uint64_t v22 = *(void *)(v8 + v17 + 16);
                __int128 v23 = *(_OWORD *)(v8 + v17);
                uint64_t v24 = *(void *)(v8 + v16 - 8);
                *(_OWORD *)uint64_t v20 = *(_OWORD *)(v8 + v16 - 24);
                *(void *)(v20 + 16) = v24;
                *(_OWORD *)(v21 - 24) = v23;
                *(void *)(v21 - 8) = v22;
              }

              ++v19;
              v16 -= 24LL;
              v17 += 24LL;
            }

            while (v19 < v18);
          }
        }
      }

      if (v7 >= v3) {
        goto LABEL_26;
      }
      if (__OFSUB__(v7, v9)) {
        goto LABEL_125;
      }
      if (v7 - v9 >= v5) {
        goto LABEL_26;
      }
      Swift::Int v25 = v9 + v5;
      if (__OFADD__(v9, v5)) {
        goto LABEL_129;
      }
      if (v25 >= v3) {
        Swift::Int v25 = v3;
      }
      if (v25 < v9)
      {
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
        return result;
      }

      if (v7 == v25)
      {
LABEL_26:
        uint64_t v26 = (char *)v95;
      }

      else
      {
        uint64_t v77 = v8 - 24 + 24 * v7;
        uint64_t v26 = (char *)v95;
        do
        {
          uint64_t v78 = *(void *)(v8 + 24 * v7);
          Swift::Int v79 = v9;
          uint64_t v80 = v77;
          do
          {
            if (v78 >= *(void *)v80) {
              break;
            }
            if (!v8) {
              goto LABEL_132;
            }
            uint64_t v81 = *(void *)(v80 + 32);
            uint64_t v82 = *(void *)(v80 + 40);
            *(_OWORD *)(v80 + 24) = *(_OWORD *)v80;
            *(void *)(v80 + 40) = *(void *)(v80 + 16);
            *(void *)uint64_t v80 = v78;
            *(void *)(v80 + 8) = v81;
            *(void *)(v80 + 16) = v82;
            v80 -= 24LL;
            ++v79;
          }

          while (v7 != v79);
          ++v7;
          v77 += 24LL;
        }

        while (v7 != v25);
        Swift::Int v7 = v25;
      }

      if (v7 < v9) {
        goto LABEL_124;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v26);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_109C4(0LL, *((void *)v26 + 2) + 1LL, 1, v26);
        uint64_t v26 = (char *)result;
      }

      unint64_t v28 = *((void *)v26 + 2);
      unint64_t v27 = *((void *)v26 + 3);
      unint64_t v29 = v28 + 1;
      if (v28 >= v27 >> 1)
      {
        uint64_t result = (uint64_t)sub_109C4((char *)(v27 > 1), v28 + 1, 1, v26);
        uint64_t v26 = (char *)result;
      }

      *((void *)v26 + 2) = v29;
      uint64_t v30 = v26 + 32;
      uint64_t v31 = (Swift::Int *)&v26[16 * v28 + 32];
      Swift::Int *v31 = v9;
      v31[1] = v7;
      uint64_t v95 = (unint64_t *)v26;
      if (v28)
      {
        while (1)
        {
          unint64_t v32 = v29 - 1;
          if (v29 >= 4)
          {
            uint64_t v37 = &v30[16 * v29];
            uint64_t v38 = *((void *)v37 - 8);
            uint64_t v39 = *((void *)v37 - 7);
            BOOL v43 = __OFSUB__(v39, v38);
            uint64_t v40 = v39 - v38;
            if (v43) {
              goto LABEL_109;
            }
            uint64_t v42 = *((void *)v37 - 6);
            uint64_t v41 = *((void *)v37 - 5);
            BOOL v43 = __OFSUB__(v41, v42);
            uint64_t v35 = v41 - v42;
            char v36 = v43;
            if (v43) {
              goto LABEL_110;
            }
            unint64_t v44 = v29 - 2;
            uint64_t v45 = &v30[16 * v29 - 32];
            uint64_t v47 = *(void *)v45;
            uint64_t v46 = *((void *)v45 + 1);
            BOOL v43 = __OFSUB__(v46, v47);
            uint64_t v48 = v46 - v47;
            if (v43) {
              goto LABEL_111;
            }
            BOOL v43 = __OFADD__(v35, v48);
            uint64_t v49 = v35 + v48;
            if (v43) {
              goto LABEL_113;
            }
            if (v49 >= v40)
            {
              uint64_t v67 = &v30[16 * v32];
              uint64_t v69 = *(void *)v67;
              uint64_t v68 = *((void *)v67 + 1);
              BOOL v43 = __OFSUB__(v68, v69);
              uint64_t v70 = v68 - v69;
              if (v43) {
                goto LABEL_119;
              }
              BOOL v60 = v35 < v70;
              goto LABEL_64;
            }
          }

          else
          {
            if (v29 != 3)
            {
              uint64_t v61 = *((void *)v26 + 4);
              uint64_t v62 = *((void *)v26 + 5);
              BOOL v43 = __OFSUB__(v62, v61);
              uint64_t v54 = v62 - v61;
              char v55 = v43;
              goto LABEL_58;
            }

            uint64_t v34 = *((void *)v26 + 4);
            uint64_t v33 = *((void *)v26 + 5);
            BOOL v43 = __OFSUB__(v33, v34);
            uint64_t v35 = v33 - v34;
            char v36 = v43;
          }

          if ((v36 & 1) != 0) {
            goto LABEL_112;
          }
          unint64_t v44 = v29 - 2;
          uint64_t v50 = &v30[16 * v29 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          BOOL v53 = __OFSUB__(v51, v52);
          uint64_t v54 = v51 - v52;
          char v55 = v53;
          if (v53) {
            goto LABEL_114;
          }
          uint64_t v56 = &v30[16 * v32];
          uint64_t v58 = *(void *)v56;
          uint64_t v57 = *((void *)v56 + 1);
          BOOL v43 = __OFSUB__(v57, v58);
          uint64_t v59 = v57 - v58;
          if (v43) {
            goto LABEL_116;
          }
          if (__OFADD__(v54, v59)) {
            goto LABEL_118;
          }
          if (v54 + v59 >= v35)
          {
            BOOL v60 = v35 < v59;
LABEL_64:
            if (v60) {
              unint64_t v32 = v44;
            }
            goto LABEL_66;
          }

LABEL_58:
          if ((v55 & 1) != 0) {
            goto LABEL_115;
          }
          unint64_t v63 = &v30[16 * v32];
          uint64_t v65 = *(void *)v63;
          uint64_t v64 = *((void *)v63 + 1);
          BOOL v43 = __OFSUB__(v64, v65);
          uint64_t v66 = v64 - v65;
          if (v43) {
            goto LABEL_117;
          }
          if (v66 < v54) {
            goto LABEL_75;
          }
LABEL_66:
          unint64_t v71 = v32 - 1;
          if (v32 - 1 >= v29)
          {
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
            goto LABEL_120;
          }

          if (!v8) {
            goto LABEL_133;
          }
          unint64_t v72 = &v30[16 * v71];
          uint64_t v73 = *(void *)v72;
          uint64_t v74 = &v30[16 * v32];
          uint64_t v75 = *((void *)v74 + 1);
          uint64_t result = sub_10828( (char *)(v8 + 24LL * *(void *)v72),  (char *)(v8 + 24LL * *(void *)v74),  v8 + 24 * v75,  __dst);
          if (v1)
          {
            uint64_t v83 = v95;
LABEL_88:
            uint64_t result = swift_bridgeObjectRelease(v83);
            if (v93 >= -1)
            {
              *(void *)(v91 + 16) = 0LL;
              return swift_bridgeObjectRelease(v91);
            }

LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }

          if (v75 < v73) {
            goto LABEL_106;
          }
          if (v32 > v95[2]) {
            goto LABEL_107;
          }
          *(void *)unint64_t v72 = v73;
          *(void *)&v30[16 * v71 + 8] = v75;
          unint64_t v76 = v95[2];
          if (v32 >= v76) {
            goto LABEL_108;
          }
          uint64_t v26 = (char *)v95;
          unint64_t v29 = v76 - 1;
          uint64_t result = (uint64_t)memmove(&v30[16 * v32], v74 + 16, 16 * (v76 - 1 - v32));
          v95[2] = v76 - 1;
          if (v76 <= 2) {
            goto LABEL_75;
          }
        }
      }

      unint64_t v29 = 1LL;
LABEL_75:
      uint64_t v5 = v92;
      Swift::Int v3 = v93;
      if (v7 >= v93) {
        goto LABEL_92;
      }
    }
  }

  uint64_t v95 = (unint64_t *)&_swiftEmptyArrayStorage;
  unint64_t v29 = *((void *)&_swiftEmptyArrayStorage + 2);
LABEL_92:
  if (v29 >= 2)
  {
    uint64_t v84 = *v90;
    while (1)
    {
      unint64_t v85 = v29 - 2;
      if (v29 < 2) {
        break;
      }
      if (!v84) {
        goto LABEL_135;
      }
      uint64_t v83 = v95;
      int64_t v86 = v95[2 * v85 + 4];
      int64_t v87 = v95[2 * v29 + 3];
      uint64_t result = sub_10828((char *)(v84 + 24 * v86), (char *)(v84 + 24 * v95[2 * v29 + 2]), v84 + 24 * v87, __dst);
      if (v1) {
        goto LABEL_88;
      }
      if (v87 < v86) {
        goto LABEL_121;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v95);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10AB8((uint64_t)v95);
        uint64_t v83 = (unint64_t *)result;
      }

      if (v85 >= v83[2]) {
        goto LABEL_122;
      }
      uint64_t v88 = &v83[2 * v85 + 4];
      *uint64_t v88 = v86;
      v88[1] = v87;
      unint64_t v89 = v83[2];
      if (v29 > v89) {
        goto LABEL_123;
      }
      uint64_t result = (uint64_t)memmove(&v83[2 * v29 + 2], &v83[2 * v29 + 4], 16 * (v89 - v29));
      uint64_t v95 = v83;
      v83[2] = v89 - 1;
      unint64_t v29 = v89 - 1;
      if (v89 <= 2) {
        goto LABEL_103;
      }
    }

LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }

LABEL_103:
  uint64_t result = swift_bridgeObjectRelease(v95);
  if (v93 < -1) {
    goto LABEL_131;
  }
  *(void *)(v91 + 16) = 0LL;
  return swift_bridgeObjectRelease(v91);
}

uint64_t sub_107A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 24 * a3 - 24;
    while (2)
    {
      uint64_t v6 = *(void *)(v4 + 24 * a3);
      uint64_t v7 = result;
      uint64_t v8 = v5;
      do
      {
        if (v6 >= *(void *)v8) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }

        uint64_t v9 = *(void *)(v8 + 32);
        uint64_t v10 = *(void *)(v8 + 40);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)v8;
        *(void *)(v8 + 40) = *(void *)(v8 + 16);
        *(void *)uint64_t v8 = v6;
        *(void *)(v8 + 8) = v9;
        *(void *)(v8 + 16) = v10;
        v8 -= 24LL;
        ++v7;
      }

      while (a3 != v7);
      ++a3;
      v5 += 24LL;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_10828(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  if (v9 >= v11)
  {
    sub_F8AC(a2, (uint64_t)(a3 - (void)a2) / 24, __dst);
    uint64_t v12 = &v4[24 * v11];
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_39;
    }
    unint64_t v19 = a3 - 24;
    while (1)
    {
      uint64_t v20 = (char *)(v19 + 24);
      uint64_t v21 = v6 - 24;
      if (*((void *)v12 - 3) >= *((void *)v6 - 3))
      {
        BOOL v23 = v20 != v12 || v19 >= (unint64_t)v12;
        uint64_t v21 = v12 - 24;
        v12 -= 24;
        if (!v23) {
          goto LABEL_35;
        }
      }

      else
      {
        BOOL v22 = v20 != v6 || v19 >= (unint64_t)v6;
        v6 -= 24;
        if (!v22) {
          goto LABEL_35;
        }
      }

      __int128 v24 = *(_OWORD *)v21;
      *(void *)(v19 + 16) = *((void *)v21 + 2);
      *(_OWORD *)unint64_t v19 = v24;
LABEL_35:
      v19 -= 24LL;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_39;
      }
    }
  }

  sub_F8AC(__src, (a2 - __src) / 24, __dst);
  uint64_t v12 = &v4[24 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (*(void *)v6 >= *(void *)v4)
    {
      uint64_t v14 = v4;
      BOOL v15 = v7 == v4;
      v4 += 24;
      if (!v15) {
        goto LABEL_11;
      }
LABEL_12:
      v7 += 24;
    }

    uint64_t v14 = v6;
    BOOL v15 = v7 == v6;
    v6 += 24;
    if (v15) {
      goto LABEL_12;
    }
LABEL_11:
    __int128 v16 = *(_OWORD *)v14;
    *((void *)v7 + 2) = *((void *)v14 + 2);
    *(_OWORD *)uint64_t v7 = v16;
    goto LABEL_12;
  }

char *sub_109C4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_6358(&qword_8C940);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10AB8(uint64_t a1)
{
  return sub_109C4(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_10ACC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_6358(&qword_8C930);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_F8AC(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_FB9C((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

void sub_10BB4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_10FB4();
    if (v8 != v9)
    {
      sub_11254();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_10FA4();
    }
  }

  sub_11154();
  if (v5)
  {
    uint64_t v10 = sub_6358(&qword_8C958);
    uint64_t v11 = (void *)sub_65A4(v10, 16 * v5 + 32);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v4;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  uint64_t v13 = (char *)sub_11244();
  if ((a1 & 1) != 0)
  {
    sub_F938(v13, v14, v15);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_FC8C((unint64_t)v13, v14, (unint64_t)v15);
  }

  sub_1104C();
  sub_11120();
}

void sub_10C60(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10C74(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10C88(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    sub_10FB4();
    if (v12 != v13)
    {
      sub_11254();
      if (v12)
      {
LABEL_23:
        __break(1u);
        return;
      }

      sub_10FA4();
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15) {
    goto LABEL_17;
  }
  sub_6358(a5);
  uint64_t v16 = sub_111FC();
  uint64_t v17 = (void *)sub_10F60(v16);
  size_t v18 = j__malloc_size(v17);
  if (!v6)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v18 - v7 == 0x8000000000000000LL && v6 == -1) {
    goto LABEL_22;
  }
  v17[2] = v14;
  v17[3] = 2 * ((uint64_t)(v18 - v7) / v6);
LABEL_17:
  sub_111FC();
  sub_111DC();
  unint64_t v22 = a4 + v21;
  if ((a1 & 1) != 0)
  {
    sub_FA48(v22, v14, v20, a6);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_FD64(v22, v14, v20, (uint64_t (*)(void))a6);
  }

  sub_1104C();
}

void sub_10D7C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_10FB4();
    if (v8 != v9)
    {
      sub_11254();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_10FA4();
    }
  }

  sub_11154();
  if (v5)
  {
    uint64_t v10 = sub_6358(&qword_8C968);
    uint64_t v11 = (void *)sub_65A4(v10, 40 * v5 + 32);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v4;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  char v13 = (char *)sub_11244();
  if ((a1 & 1) != 0)
  {
    sub_F9BC(v13, v14, v15);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_FE38((unint64_t)v13, v14, (unint64_t)v15);
  }

  sub_1104C();
}

void sub_10E38(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_10FB4();
    if (v8 != v9)
    {
      sub_11254();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_10FA4();
    }
  }

  sub_11154();
  if (v5)
  {
    uint64_t v10 = sub_6358(&qword_8C978);
    uint64_t v11 = (void *)sub_65A4(v10, v5 + 32);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v4;
    v11[3] = 2 * v12 - 64;
  }

  char v13 = (char *)sub_11244();
  if ((a1 & 1) != 0)
  {
    sub_FB1C(v13, v14, v15);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_FF28(v13, v14, v15);
  }

  sub_1104C();
  sub_11120();
}

char *sub_10ED8(uint64_t a1)
{
  return sub_10ACC(0LL, *(void *)(a1 + 16), 0, a1);
}

  ;
}

uint64_t sub_10F00()
{
  *(void *)(v5 - 112) = v1;
  *(void *)(v5 - 104) = v0;
  *(void *)(v5 - 128) = v3;
  *(void *)(v5 - 120) = v4;
  *(void *)(v5 - 144) = 0LL;
  *(void *)(v5 - 136) = 0xE000000000000000LL;
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v5 - 128,  v5 - 144,  0LL,  0LL,  0LL,  1LL,  v2,  v2);
}

void sub_10F40(uint64_t a1)
{
}

  ;
}

uint64_t sub_10F60(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + *(void *)(*(void *)(a1 - 8) + 72LL) * v2,
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_10F84()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10FC4()
{
  return StringProtocol.contains<A>(_:)(v2 - 128, v0, v0, v1, v1);
}

uint64_t sub_10FE0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v1, v2);
}

void sub_10FF0(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 264) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_11014(uint64_t a1)
{
  return IntentNodeTraversable.wrappedNonTerminalIntentNode<A>(forOntologyNode:)(v1, v3, v2, v4, a1);
}

uint64_t sub_11030(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(v1, v2, a1);
}

uint64_t sub_1104C()
{
  return swift_release(v0);
}

  ;
}

  ;
}

uint64_t sub_11074@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return 0LL;
}

  ;
}

uint64_t sub_110AC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_110B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_110C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_110D4(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, v1, v2);
}

uint64_t sub_110E8()
{
  return 0LL;
}

uint64_t sub_11104()
{
  return 0LL;
}

  ;
}

uint64_t sub_1112C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_11140()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_11164(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1116C()
{
  return v0;
}

uint64_t sub_11178()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

unint64_t sub_11188@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 128) = v1;
  *(void *)(v2 - 120) = (a1 - 32) | 0x8000000000000000LL;
  return sub_10098();
}

uint64_t sub_11198()
{
  return 0LL;
}

void sub_111A4(uint64_t a1)
{
}

uint64_t sub_111AC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

uint64_t sub_111CC()
{
  return sub_1002C(v0, v1);
}

  ;
}

uint64_t sub_111F4()
{
  return type metadata accessor for App(0LL);
}

uint64_t sub_111FC()
{
  return v0(0LL);
}

uint64_t sub_11204()
{
  return App.__allocating_init(appIdentifier:)(v1, v0);
}

uint64_t sub_11214(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_11224(uint64_t a1)
{
  return swift_beginAccess(a1, v1 - 112, 0LL, 0LL);
}

uint64_t sub_11234()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_11244()
{
  return v0 + 32;
}

  ;
}

uint64_t sub_11260()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_11270(uint64_t a1)
{
  return v1(a1, v3, v2);
}

uint64_t sub_1127C()
{
  return v0;
}

uint64_t sub_11288(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t sub_1129C(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_112A4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_112AC(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

void sub_112B4()
{
  *(void *)(v1 - 112) = *(void *)(v1 - 112);
  *(void *)(v1 - 104) = v0;
}

char *sub_112C8(char *a1, int64_t a2)
{
  return sub_F3F4(a1, a2, 1, v2);
}

uint64_t sub_112D4()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

uint64_t sub_112E0()
{
  return type metadata accessor for HealthNLIntent.HealthNLApp(0LL);
}

uint64_t sub_112EC()
{
  return v0;
}

void sub_11300(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_11308()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_11314(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_11350 + 4 * word_61CF0[a1]))( 0xD00000000000001DLL,  0x80000000000691C0LL);
}

uint64_t sub_11350()
{
  return 7238994LL;
}

uint64_t sub_11360()
{
  return 7629139LL;
}

uint64_t sub_11370()
{
  return 0x7370657453LL;
}

uint64_t sub_11384()
{
  return 0x646E617453LL;
}

uint64_t sub_11398()
{
  return 1702260557LL;
}

uint64_t sub_113A8()
{
  return 1802264919LL;
}

uint64_t sub_113B8()
{
  return 1634168665LL;
}

uint64_t sub_113C8()
{
  return 0x65636E6144LL;
}

uint64_t sub_11558()
{
  return 0x6C6C616265736142LL;
}

uint64_t sub_11568()
{
  return 0x616274656B736142LL;
}

uint64_t sub_11578()
{
  return 0x676E696C776F42LL;
}

uint64_t sub_11588()
{
  return 0x676E69786F42LL;
}

uint64_t sub_1159C()
{
  return 0x676E69626D696C43LL;
}

uint64_t sub_115B4()
{
  return 0x6961725465726F43LL;
}

uint64_t sub_115C0()
{
  return 0x74656B63697243LL;
}

unint64_t sub_115D8()
{
  return 0xD000000000000012LL;
}

uint64_t sub_115E4()
{
  return 0x676E696C727543LL;
}

uint64_t sub_115F4()
{
  return 0x726F705363736944LL;
}

void sub_1160C()
{
}

uint64_t sub_1162C()
{
  return v0 - 2;
}

uint64_t sub_1163C()
{
  return 0x676E69636E6546LL;
}

uint64_t sub_1164C()
{
  return 0x676E6968736946LL;
}

uint64_t sub_1165C()
{
  return 0x477373656E746946LL;
}

uint64_t sub_1167C()
{
  return 0x6C69626978656C46LL;
}

uint64_t sub_116A0()
{
  return v0 + 8;
}

uint64_t sub_116B0()
{
  return 1718382407LL;
}

uint64_t sub_116C0()
{
  return 0x697473616E6D7947LL;
}

uint64_t sub_116E0()
{
  return 0x6C6C6162646E6148LL;
}

uint64_t sub_116F0()
{
  return 0x6C637943646E6148LL;
}

uint64_t sub_11710()
{
  return 0x79656B636F48LL;
}

uint64_t sub_11724()
{
  return 0x676E69746E7548LL;
}

uint64_t sub_11734()
{
  return 0x65706F52706D754ALL;
}

uint64_t sub_1174C()
{
  return 0x69786F626B63694BLL;
}

void sub_1176C()
{
}

uint64_t sub_11784()
{
  return 0x416C61697472614DLL;
}

uint64_t sub_11798()
{
  return 0x42646E41646E694DLL;
}

uint64_t sub_117B4()
{
  return 0x726143646578694DLL;
}

uint64_t sub_117D0()
{
  return 0x7053656C64646150LL;
}

uint64_t sub_117F0()
{
  return 0x736574616C6950LL;
}

uint64_t sub_11808()
{
  return 2036427856LL;
}

uint64_t sub_11818()
{
  return v0 + 4;
}

uint64_t sub_11828()
{
  return 0x6274657571636152LL;
}

uint64_t sub_11848()
{
  return 0x7962677552LL;
}

void sub_1185C()
{
}

void sub_11874()
{
}

void sub_11880()
{
}

void sub_118A4()
{
}

uint64_t sub_118C4()
{
  return 0x726563636F53LL;
}

void sub_118D8()
{
}

uint64_t sub_118F0()
{
  return 0x687361757153LL;
}

uint64_t sub_11904()
{
  return 0x6C43737269617453LL;
}

uint64_t sub_1196C()
{
  return 0x6E6554656C626154LL;
}

uint64_t sub_11990()
{
  return 0x696843696154LL;
}

uint64_t sub_119A4()
{
  return 0x73696E6E6554LL;
}

uint64_t sub_119B8()
{
  return 0x646E416B63617254LL;
}

uint64_t sub_119DC()
{
  return v0 + 9;
}

uint64_t sub_119EC()
{
  return 0x616279656C6C6F56LL;
}

uint64_t sub_119FC()
{
  return 0x7469467265746157LL;
}

uint64_t sub_11A1C()
{
  return 0x6C6F507265746157LL;
}

uint64_t sub_11A58()
{
  return 0x6E696C7473657257LL;
}

void sub_11A94()
{
}

void sub_11AAC()
{
}

uint64_t sub_11AF8()
{
  return 0x6E776F646C6F6F43LL;
}

unint64_t sub_11B10(unsigned __int8 a1)
{
  v2._countAndFlagsBits = sub_11314(a1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000028LL;
}

uint64_t sub_11B8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_7E468, a1, a2, &unk_8BC38);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x57) {
    return 87LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_11BDC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_11C18 + 4 * word_61D9E[a1]))( 0xD00000000000001DLL,  0x8000000000068210LL);
}

uint64_t sub_11C18()
{
  return 7239026LL;
}

uint64_t sub_11C28()
{
  return 7629171LL;
}

uint64_t sub_11C38()
{
  return 0x7370657473LL;
}

uint64_t sub_11C4C()
{
  return 0x646E617473LL;
}

uint64_t sub_11C60()
{
  return 1702260589LL;
}

uint64_t sub_11C70()
{
  return 1802264951LL;
}

uint64_t sub_11C80()
{
  return 1634168697LL;
}

uint64_t sub_11C90()
{
  return 0x65636E6164LL;
}

uint64_t sub_11E20()
{
  return 0x6C6C616265736162LL;
}

uint64_t sub_11E30()
{
  return 0x616274656B736162LL;
}

uint64_t sub_11E40()
{
  return 0x676E696C776F62LL;
}

uint64_t sub_11E50()
{
  return 0x676E69786F62LL;
}

uint64_t sub_11E64()
{
  return 0x676E69626D696C63LL;
}

uint64_t sub_11E7C()
{
  return 0x6961727465726F63LL;
}

uint64_t sub_11E88()
{
  return 0x74656B63697263LL;
}

unint64_t sub_11EA0()
{
  return 0xD000000000000012LL;
}

uint64_t sub_11EAC()
{
  return 0x676E696C727563LL;
}

uint64_t sub_11EBC()
{
  return 0x726F707363736964LL;
}

void sub_11ED4()
{
}

uint64_t sub_11EF4()
{
  return v0 - 2;
}

uint64_t sub_11F04()
{
  return 0x676E69636E6566LL;
}

uint64_t sub_11F14()
{
  return 0x676E6968736966LL;
}

uint64_t sub_11F24()
{
  return 0x677373656E746966LL;
}

uint64_t sub_11F44()
{
  return 0x6C69626978656C66LL;
}

uint64_t sub_11F68()
{
  return v0 + 8;
}

uint64_t sub_11F78()
{
  return 1718382439LL;
}

uint64_t sub_11F88()
{
  return 0x697473616E6D7967LL;
}

uint64_t sub_11FA8()
{
  return 0x6C6C6162646E6168LL;
}

uint64_t sub_11FB8()
{
  return 0x6C637963646E6168LL;
}

uint64_t sub_11FD4()
{
  return 0x79656B636F68LL;
}

uint64_t sub_11FE8()
{
  return 0x676E69746E7568LL;
}

uint64_t sub_11FF8()
{
  return 0x65706F72706D756ALL;
}

uint64_t sub_12010()
{
  return 0x69786F626B63696BLL;
}

void sub_12030()
{
}

uint64_t sub_12048()
{
  return 0x616C61697472616DLL;
}

uint64_t sub_1205C()
{
  return 0x62646E61646E696DLL;
}

uint64_t sub_12078()
{
  return 0x726163646578696DLL;
}

uint64_t sub_12094()
{
  return 0x7073656C64646170LL;
}

uint64_t sub_120B4()
{
  return 0x736574616C6970LL;
}

uint64_t sub_120CC()
{
  return 2036427888LL;
}

uint64_t sub_120DC()
{
  return v0 + 4;
}

uint64_t sub_120EC()
{
  return 0x6274657571636172LL;
}

uint64_t sub_1210C()
{
  return 0x7962677572LL;
}

void sub_12120()
{
}

void sub_12138()
{
}

void sub_12144()
{
}

void sub_12168()
{
}

uint64_t sub_12188()
{
  return 0x726563636F73LL;
}

void sub_1219C()
{
}

uint64_t sub_121B4()
{
  return 0x687361757173LL;
}

void sub_121C8()
{
}

uint64_t sub_12230()
{
  return 0x6E6574656C626174LL;
}

uint64_t sub_12254()
{
  return 0x696863696174LL;
}

uint64_t sub_12268()
{
  return 0x73696E6E6574LL;
}

uint64_t sub_1227C()
{
  return 0x646E616B63617274LL;
}

uint64_t sub_122A0()
{
  return v0 + 7;
}

uint64_t sub_122B0()
{
  return 0x616279656C6C6F76LL;
}

uint64_t sub_122C0()
{
  return 0x7469667265746177LL;
}

uint64_t sub_122E0()
{
  return 0x6C6F707265746177LL;
}

uint64_t sub_1231C()
{
  return 0x6E696C7473657277LL;
}

void sub_12358()
{
}

void sub_12370()
{
}

uint64_t sub_123BC()
{
  return 0x6E776F646C6F6F43LL;
}

uint64_t getEnumTagSinglePayload for HealthActivity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xAA)
  {
    if (a2 + 86 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 86) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 87;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for HealthActivity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 86 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 86) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xAA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xA9) {
    return ((uint64_t (*)(void))((char *)&loc_124A8 + 4 * byte_61E51[v4]))();
  }
  *a1 = a2 + 86;
  return ((uint64_t (*)(void))((char *)sub_124DC + 4 * byte_61E4C[v4]))();
}

uint64_t sub_124DC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_124E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x124ECLL);
  }
  return result;
}

uint64_t sub_124F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x12500LL);
  }
  *(_BYTE *)uint64_t result = a2 + 86;
  return result;
}

uint64_t sub_12504(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1250C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthActivity()
{
  return &type metadata for HealthActivity;
}

unint64_t sub_1252C()
{
  unint64_t result = qword_8C988;
  if (!qword_8C988)
  {
    unint64_t result = swift_getWitnessTable(&unk_61F18, &type metadata for HealthActivity);
    atomic_store(result, (unint64_t *)&qword_8C988);
  }

  return result;
}

void sub_12568(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_12574()
{
}

uint64_t sub_1257C(uint64_t a1)
{
  return sub_B7AC(a1, *v1);
}

void sub_12584(uint64_t a1)
{
}

uint64_t sub_1258C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_11B8C(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_125B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_11BDC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_125E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_126B4();
  unint64_t v5 = sub_126F0();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v4, v5);
}

unint64_t sub_12638()
{
  unint64_t result = qword_8C990;
  if (!qword_8C990)
  {
    unint64_t result = swift_getWitnessTable(&unk_61E88, &type metadata for HealthActivity);
    atomic_store(result, (unint64_t *)&qword_8C990);
  }

  return result;
}

unint64_t sub_12678()
{
  unint64_t result = qword_8C998;
  if (!qword_8C998)
  {
    unint64_t result = swift_getWitnessTable(&unk_61F58, &type metadata for HealthActivity);
    atomic_store(result, (unint64_t *)&qword_8C998);
  }

  return result;
}

unint64_t sub_126B4()
{
  unint64_t result = qword_8C9A0;
  if (!qword_8C9A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_61EB8, &type metadata for HealthActivity);
    atomic_store(result, (unint64_t *)&qword_8C9A0);
  }

  return result;
}

unint64_t sub_126F0()
{
  unint64_t result = qword_8C9A8;
  if (!qword_8C9A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_61EE0, &type metadata for HealthActivity);
    atomic_store(result, (unint64_t *)&qword_8C9A8);
  }

  return result;
}

uint64_t sub_1272C@<X0>(void *a1@<X8>)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*v1);
  id v4 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  uint64_t v5 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = ResponseFactory.init()();
  a1[6] = v5;
  a1[7] = &protocol witness table for ResponseFactory;
  a1[3] = v6;
  uint64_t result = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  *a1 = 0xD000000000000014LL;
  a1[1] = 0x8000000000069230LL;
  a1[2] = v4;
  a1[8] = result;
  return result;
}

uint64_t type metadata accessor for StartWorkoutContinueInAppStrategy(uint64_t a1)
{
  uint64_t result = qword_8C9D8;
  if (!qword_8C9D8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StartWorkoutContinueInAppStrategy);
  }
  return result;
}

uint64_t sub_12838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t type metadata accessor for WorkoutsNeedsValueStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WorkoutsNeedsValueStrategy);
}

void sub_1284C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v147 = a8;
  v148 = a7;
  uint64_t v144 = a9;
  uint64_t v139 = type metadata accessor for IntentPromptAnswer(255LL, a9);
  uint64_t v13 = type metadata accessor for Optional(255LL, v139);
  uint64_t v14 = sub_D958(&qword_8CB40);
  uint64_t v149 = type metadata accessor for Result(0LL, v13, v14, &protocol self-conformance witness table for Error);
  uint64_t v145 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  v146 = (uint64_t *)((char *)&v137 - v15);
  uint64_t v16 = sub_11198();
  uint64_t v17 = type metadata accessor for Logger(v16);
  uint64_t v150 = *(void *)(v17 - 8);
  uint64_t v151 = v17;
  sub_C870();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (os_log_s *)((char *)&v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = __chkstk_darwin(v19);
  __int128 v24 = (os_log_s *)((char *)&v137 - v23);
  uint64_t v25 = __chkstk_darwin(v22);
  unint64_t v27 = (char *)&v137 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  __chkstk_darwin(v28);
  v138 = (char *)&v137 - v29;
  uint64_t v30 = sub_11198();
  type metadata accessor for HealthNLIntent(v30);
  sub_C870();
  __chkstk_darwin(v31);
  sub_C838();
  uint64_t v141 = v32;
  uint64_t v33 = sub_11198();
  uint64_t v34 = type metadata accessor for Parse(v33);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_6BD8();
  uint64_t v38 = v37 - v36;
  uint64_t v140 = type metadata accessor for NLIntent(0LL);
  v143 = *(char **)(v140 - 8);
  sub_C870();
  __chkstk_darwin(v39);
  sub_C838();
  uint64_t v142 = v40;
  swift_bridgeObjectRetain();
  v158._countAndFlagsBits = a3;
  v158._object = a4;
  char v41 = sub_3E500(v158);
  if (v41 == 3)
  {
    uint64_t v47 = sub_14048();
    sub_1400C(v47);
    uint64_t v48 = sub_14024();
    uint64_t v49 = Logger.health.unsafeMutableAddressor(v48);
    sub_8894(v49, (uint64_t)v156);
    uint64_t v51 = v150;
    uint64_t v50 = v151;
    (*(void (**)(os_log_s *, uint64_t, uint64_t))(v150 + 16))(v21, v49, v151);
    uint64_t v52 = sub_14068(v48);
    Logger.logObject.getter(v52);
    os_log_type_t v53 = sub_140C8();
    if (os_log_type_enabled(v21, v53))
    {
      uint64_t v54 = sub_88B0(22LL);
      uint64_t v55 = sub_88B0(8LL);
      v143 = (char *)v47;
      uint64_t v56 = (void *)v55;
      uint64_t v57 = sub_88B0(32LL);
      uint64_t v152 = v57;
      *(_DWORD *)uint64_t v54 = 136315394;
      uint64_t v58 = sub_14018();
      unint64_t v60 = v59;
      uint64_t v154 = sub_140C0(v58, v59);
      sub_14050((uint64_t)&v154, (uint64_t)v155);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v54 + 12) = 2112;
      sub_AFF0( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      uint64_t v62 = sub_13FF8((uint64_t)v143, v61);
      sub_14090(v62, v63);
      uint64_t v64 = sub_1409C();
      uint64_t v154 = v64;
      sub_14050((uint64_t)&v154, (uint64_t)v155);
      *uint64_t v56 = v64;
      sub_14004(v48);
      sub_14080(&dword_0, v21, v53, "%s NeedsValueStrategy: %@", (uint8_t *)v54);
      sub_6358(&qword_8C360);
      sub_B334((uint64_t)v56);
      uint64_t v65 = (uint64_t)v56;
      uint64_t v47 = (uint64_t)v143;
      sub_8870(v65);
      sub_B334(v57);
      sub_8870(v57);
      sub_8870(v54);

      (*(void (**)(os_log_s *, uint64_t))(v150 + 8))(v21, v151);
    }

    else
    {

      sub_14004(v48);
      (*(void (**)(os_log_s *, uint64_t))(v51 + 8))(v21, v50);
    }

LABEL_16:
    uint64_t v105 = v148;
    uint64_t v104 = v149;
    uint64_t v106 = v146;
    uint64_t v107 = v145;
    sub_AFF0( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v109 = sub_13FF8(v47, v108);
    *uint64_t v110 = v48;
    *uint64_t v106 = v109;
    sub_14088((uint64_t)v106, v104);
    swift_retain(v48);
    v105(v106);
    swift_release(v48);
    (*(void (**)(uint64_t *, uint64_t))(v107 + 8))(v106, v104);
    goto LABEL_17;
  }

  if (v41)
  {
    char v66 = v41;
    uint64_t v47 = sub_14048();
    sub_1400C(v47);
    uint64_t v48 = sub_14024();
    uint64_t v67 = Logger.health.unsafeMutableAddressor(v48);
    sub_8894(v67, (uint64_t)v156);
    uint64_t v69 = v150;
    uint64_t v68 = v151;
    (*(void (**)(os_log_s *, uint64_t, uint64_t))(v150 + 16))(v24, v67, v151);
    uint64_t v70 = sub_14068(v48);
    Logger.logObject.getter(v70);
    os_log_type_t v71 = sub_140C8();
    if (sub_14070(v71))
    {
      uint64_t v72 = sub_88B0(32LL);
      uint64_t v73 = sub_88B0(8LL);
      v143 = (char *)v47;
      uint64_t v74 = (void *)v73;
      uint64_t v142 = sub_88B0(64LL);
      uint64_t v152 = v142;
      *(_DWORD *)uint64_t v72 = 136315650;
      uint64_t v75 = sub_14018();
      uint64_t v154 = sub_140C0(v75, v76);
      sub_14058();
      sub_140A4();
      *(_WORD *)(v72 + 12) = 2080;
      if (v66 == 2) {
        unint64_t v77 = 0x80000000000685E0LL;
      }
      else {
        unint64_t v77 = 0x80000000000685C0LL;
      }
      uint64_t v154 = sub_173E0(0xD000000000000013LL, v77, &v152);
      sub_14058();
      sub_140A4();
      *(_WORD *)(v72 + 22) = 2112;
      sub_AFF0( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      uint64_t v79 = sub_13FF8((uint64_t)v143, v78);
      sub_14090(v79, v80);
      uint64_t v81 = _swift_stdlib_bridgeErrorToNSError(v79);
      uint64_t v154 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, v155);
      *uint64_t v74 = v81;
      sub_14004(v48);
      _os_log_impl(&dword_0, v24, (os_log_type_t)v21, "%s NeedsValueStrategy: Slot - %s %@", (uint8_t *)v72, 0x20u);
      sub_6358(&qword_8C360);
      sub_B334((uint64_t)v74);
      uint64_t v82 = (uint64_t)v74;
      uint64_t v47 = (uint64_t)v143;
      sub_8870(v82);
      uint64_t v83 = v142;
      swift_arrayDestroy(v142, 2LL);
      sub_8870(v83);
      sub_8870(v72);

      (*(void (**)(os_log_s *, uint64_t))(v150 + 8))(v24, v151);
    }

    else
    {

      sub_14004(v48);
      (*(void (**)(os_log_s *, uint64_t))(v69 + 8))(v24, v68);
    }

    goto LABEL_16;
  }

  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v35 + 88))(v38, v34) == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_140AC(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 96));
    uint64_t v42 = (uint64_t)v143;
    uint64_t v43 = v142;
    uint64_t v44 = v140;
    (*((void (**)(uint64_t, uint64_t, uint64_t))v143 + 4))(v142, v38, v140);
    uint64_t v45 = v141;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v141, v43, v44);
    uint64_t v46 = v144;
    sub_31C78(v144, v144, a11);
    v118 = v117;
    uint64_t v119 = (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 24))(v46, a11);
    uint64_t v157 = sub_6358(&qword_8CB50);
    v156[0] = v119;
    uint64_t v120 = Logger.health.unsafeMutableAddressor(v157);
    sub_8894(v120, (uint64_t)&v154);
    uint64_t v122 = v150;
    uint64_t v121 = v151;
    v123 = v138;
    (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v138, v120, v151);
    id v124 = v118;
    v125 = (os_log_s *)Logger.logObject.getter(v124);
    os_log_type_t v126 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v125, v126))
    {
      v128 = (uint8_t *)sub_88B0(12LL);
      v129 = (void *)sub_88B0(8LL);
      *(_DWORD *)v128 = 138412290;
      uint64_t v152 = (uint64_t)v124;
      id v130 = v124;
      uint64_t v45 = v141;
      uint64_t v46 = v144;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153);
      void *v129 = v124;

      uint64_t v122 = v150;
      _os_log_impl(&dword_0, v125, v126, "Updated intent after prompting for value: %@", v128, 0xCu);
      sub_6358(&qword_8C360);
      sub_B334((uint64_t)v129);
      uint64_t v131 = (uint64_t)v129;
      uint64_t v121 = v151;
      sub_8870(v131);
      sub_8870((uint64_t)v128);
    }

    else
    {

      v125 = (os_log_s *)v124;
    }

    (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v121);
    sub_13FB8((uint64_t)v156, (uint64_t)&v152);
    id v132 = v124;
    uint64_t v133 = (uint64_t)v146;
    IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v152, v132, v46);
    sub_8760(v133, 0LL, 1LL, v139);
    uint64_t v134 = v149;
    swift_storeEnumTagMultiPayload(v133, v149, 0LL);
    v148((uint64_t *)v133);

    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v133, v134);
    sub_C594(v45);
    uint64_t v135 = sub_14030();
    v136(v135);
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v156);
  }

  else
  {
    sub_140AC(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
    uint64_t v84 = sub_14048();
    sub_1400C(v84);
    uint64_t v85 = sub_BD3C(0);
    uint64_t v86 = Logger.health.unsafeMutableAddressor(v85);
    sub_8894(v86, (uint64_t)v156);
    uint64_t v88 = v150;
    uint64_t v87 = v151;
    (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v27, v86, v151);
    uint64_t v89 = sub_14068(v85);
    uint64_t v90 = (os_log_s *)v27;
    Logger.logObject.getter(v89);
    os_log_type_t v91 = sub_140C8();
    if (sub_14070(v91))
    {
      uint64_t v92 = sub_88B0(22LL);
      v143 = v27;
      uint64_t v93 = v92;
      uint64_t v94 = (void *)sub_88B0(8LL);
      uint64_t v95 = v84;
      uint64_t v96 = sub_88B0(32LL);
      uint64_t v152 = v96;
      *(_DWORD *)uint64_t v93 = 136315394;
      uint64_t v97 = sub_14018();
      unint64_t v99 = v98;
      uint64_t v154 = sub_140C0(v97, v98);
      sub_14050((uint64_t)&v154, (uint64_t)v155);
      swift_bridgeObjectRelease(v99);
      *(_WORD *)(v93 + 12) = 2112;
      sub_AFF0( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      sub_13FF8(v95, v100);
      *uint64_t v101 = v85;
      swift_retain(v85);
      uint64_t v102 = sub_1409C();
      uint64_t v154 = v102;
      sub_14050((uint64_t)&v154, (uint64_t)v155);
      *uint64_t v94 = v102;
      sub_14004(v85);
      sub_14080(&dword_0, v90, (os_log_type_t)v21, "%s NeedsValueStrategy: %@", (uint8_t *)v93);
      sub_6358(&qword_8C360);
      sub_B334((uint64_t)v94);
      sub_8870((uint64_t)v94);
      sub_B334(v96);
      uint64_t v103 = v96;
      uint64_t v84 = v95;
      sub_8870(v103);
      sub_8870(v93);

      (*(void (**)(char *, uint64_t))(v150 + 8))(v143, v151);
    }

    else
    {

      sub_14004(v85);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v27, v87);
    }

    uint64_t v112 = (void (*)(uint64_t))v148;
    uint64_t v111 = v149;
    sub_AFF0( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v114 = sub_13FF8(v84, v113);
    *uint64_t v115 = v85;
    uint64_t v116 = (uint64_t)v146;
    uint64_t *v146 = v114;
    sub_14088(v116, v111);
    swift_retain(v85);
    v112(v116);
    swift_release(v85);
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v116, v111);
  }

void sub_134D0( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8)
{
  uint64_t v71 = a8;
  uint64_t v78 = a7;
  *(void *)&__int128 v77 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  sub_6BD8();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v73 = *(void *)(v15 - 8);
  uint64_t v74 = (void *)v15;
  sub_C870();
  __chkstk_darwin(v16);
  sub_C838();
  uint64_t v72 = v17;
  uint64_t v18 = sub_11198();
  uint64_t v19 = type metadata accessor for CATOption(v18);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_6BD8();
  uint64_t v23 = v22 - v21;
  uint64_t v75 = sub_6358((uint64_t *)&unk_8F3A0);
  sub_C870();
  uint64_t v25 = __chkstk_darwin(v24);
  unint64_t v27 = (uint64_t *)((char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v25);
  uint64_t v29 = (uint64_t *)((char *)&v71 - v28);
  swift_bridgeObjectRetain();
  v84._countAndFlagsBits = a3;
  v84._object = a4;
  unint64_t v30 = sub_3E500(v84);
  if (v30 == 3)
  {
    uint64_t v31 = sub_14048();
    sub_1400C(v31);
    uint64_t v32 = sub_14024();
    uint64_t v33 = Logger.health.unsafeMutableAddressor(v32);
    sub_8894(v33, (uint64_t)v83);
    (*(void (**)(uint64_t, uint64_t, void))(v11 + 16))(v14, v33, v77);
    uint64_t v34 = sub_14068(v32);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = sub_88B0(22LL);
      uint64_t v74 = (void *)sub_88B0(8LL);
      uint64_t v75 = sub_88B0(32LL);
      uint64_t v80 = v75;
      *(_DWORD *)uint64_t v37 = 136315394;
      unint64_t v76 = a6;
      uint64_t v38 = _typeName(_:qualified:)(v71, 0LL);
      unint64_t v40 = v39;
      uint64_t v79 = sub_173E0(v38, v39, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v37 + 12) = 2112;
      sub_AFF0( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      sub_13FF8(v31, v41);
      uint64_t *v42 = v32;
      swift_retain(v32);
      uint64_t v43 = sub_1409C();
      uint64_t v79 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      uint64_t v44 = (uint64_t)v74;
      *uint64_t v74 = v43;
      a6 = v76;
      sub_14004(v32);
      sub_14080(&dword_0, v35, v36, "%s NeedsValueStrategy: %@", (uint8_t *)v37);
      sub_6358(&qword_8C360);
      sub_B334(v44);
      sub_8870(v44);
      uint64_t v45 = v75;
      sub_B334(v75);
      sub_8870(v45);
      sub_8870(v37);
    }

    else
    {

      sub_14004(v32);
    }

    (*(void (**)(uint64_t, void))(v11 + 8))(v14, v77);
    sub_AFF0( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v64 = sub_13FF8(v31, v63);
    *uint64_t v65 = v32;
    uint64_t v80 = v64;
    BOOL v82 = 1;
    swift_retain(v32);
    a6(&v80);
    swift_release(v32);
    char v66 = (uint64_t *)&unk_8F3E0;
    uint64_t v67 = &v80;
  }

  else
  {
    uint64_t v46 = v30;
    unint64_t v76 = a6;
    LODWORD(v71) = static os_log_type_t.debug.getter(v30);
    uint64_t v47 = *(void **)Log.health.unsafeMutableAddressor();
    uint64_t v48 = sub_6358(&qword_8BE60);
    uint64_t v49 = swift_allocObject(v48, 72LL, 7LL);
    __int128 v77 = xmmword_61030;
    *(_OWORD *)(v49 + 16) = xmmword_61030;
    uint64_t v80 = 0LL;
    unint64_t v81 = 0xE000000000000000LL;
    v83[0] = v46;
    id v50 = v47;
    _print_unlocked<A, B>(_:_:)(v83, &v80);
    uint64_t v52 = v80;
    unint64_t v51 = v81;
    *(void *)(v49 + 56) = &type metadata for String;
    *(void *)(v49 + 64) = sub_64A0();
    *(void *)(v49 + 32) = v52;
    *(void *)(v49 + 40) = v51;
    os_log(_:dso:log:_:_:)(v71, &dword_0, v50, "Generating prompt to get value for : %@", 39LL, 2LL, v49);

    sub_140A4();
    type metadata accessor for CATGlobals(0LL);
    uint64_t v53 = CATGlobals.__allocating_init()();
    uint64_t v54 = sub_6358(&qword_8CB30);
    uint64_t v55 = swift_allocObject( v54,  ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))
          + *(void *)(v20 + 72),
            *(unsigned __int8 *)(v20 + 80) | 7LL);
    *(_OWORD *)(v55 + 16) = v77;
    static CATOption.defaultMode.getter();
    uint64_t v80 = v55;
    sub_AFF0( (unint64_t *)&unk_8F3B0,  (uint64_t (*)(uint64_t))&type metadata accessor for CATOption,  (uint64_t)&protocol conformance descriptor for CATOption);
    uint64_t v57 = v56;
    uint64_t v58 = sub_6358(&qword_8CB38);
    unint64_t v59 = sub_13EF0();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v58, v59, v19, v57);
    uint64_t v60 = type metadata accessor for HealthCATWrapper(0LL);
    swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
    uint64_t v61 = sub_466D4(v53, v23);
    sub_467F8(v46, 4);
    swift_release(v61);
    sub_13F34((uint64_t)v29, (uint64_t)v27);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v27, v75);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v80 = *v27;
    }

    else
    {
      uint64_t v69 = v72;
      uint64_t v68 = v73;
      uint64_t v70 = v74;
      (*(void (**)(uint64_t, uint64_t *, void *))(v73 + 32))(v72, v27, v74);
      sub_13AA8(v69, &v80);
      (*(void (**)(uint64_t, void *))(v68 + 8))(v69, v70);
    }

    BOOL v82 = EnumCaseMultiPayload == 1;
    v76(&v80);
    sub_AFB8((uint64_t)&v80, (uint64_t *)&unk_8F3E0);
    char v66 = (uint64_t *)&unk_8F3A0;
    uint64_t v67 = v29;
  }

  sub_AFB8((uint64_t)v67, v66);
  sub_10F48();
}

uint64_t sub_13AA8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_6358(&qword_8C348);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Device.current.getter(v18);
  static Device.current.getter(v15);
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  sub_8734(v15, v16);
  char v9 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v7, v8);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  sub_8760((uint64_t)v6, 1LL, 1LL, v10);
  uint64_t v11 = type metadata accessor for AceOutput(0LL);
  memset(v13, 0, sizeof(v13));
  uint64_t v14 = 0LL;
  a2[3] = v11;
  a2[4] = &protocol witness table for AceOutput;
  sub_6B9C(a2);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a1,  v18,  v9 & 1,  &_swiftEmptyArrayStorage,  1LL,  1LL,  v6,  &_swiftEmptyArrayStorage,  v13);
  sub_AFB8((uint64_t)v13, (uint64_t *)&unk_8F3F0);
  sub_AFB8((uint64_t)v6, &qword_8C348);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v18);
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v15);
}

uint64_t sub_13C00()
{
  return j___s11SiriKitFlow14ActionForInputV6handleACyFZ();
}

void sub_13C1C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *), uint64_t a8, uint64_t a9)
{
}

void sub_13C4C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8)
{
}

uint64_t sub_13C6C()
{
  return NeedsValueFlowStrategy.makeRepromptOnEmptyParse(app:intent:parameterName:intentResolutionResult:_:)();
}

uint64_t sub_13C78()
{
  return NeedsValueFlowStrategy.makeRepromptOnLowConfidence(app:intent:parameterName:intentResolutionResult:_:)();
}

uint64_t sub_13C88()
{
  return ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:_:)();
}

uint64_t sub_13C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandling.makeFlowCancelledResponse(app:intent:parameterName:)[1]);
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = sub_8640;
  return ParameterResolutionHandling.makeFlowCancelledResponse(app:intent:parameterName:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_13D30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:)[1]);
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = sub_885C;
  return ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_13DDC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_62020, a1);
}

uint64_t sub_13DEC(uint64_t (*a1)(void))
{
  uint64_t v1 = sub_140B8(a1);
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

void sub_13E08(uint64_t (*a1)(void))
{
}

uint64_t sub_13E20(uint64_t (*a1)(void))
{
  uint64_t v1 = sub_140B8(a1);
  return _typeName(_:qualified:)(v1, 0LL);
}

void sub_13E40(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *a1 + 8;
  if (v6) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  uint64_t v9 = *a2;
  if (*a2)
  {
    void *v9 = v7;
    *a2 = v9 + 1;
  }

  else
  {
  }

unint64_t sub_13EF0()
{
  unint64_t result = qword_8F3C0;
  if (!qword_8F3C0)
  {
    uint64_t v1 = sub_D958(&qword_8CB38);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_8F3C0);
  }

  return result;
}

uint64_t sub_13F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358((uint64_t *)&unk_8F3A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_13F7C()
{
  unint64_t result = qword_8CB48;
  if (!qword_8CB48)
  {
    unint64_t result = swift_getWitnessTable(&unk_62584, &type metadata for WorkoutsDisambiguationError);
    atomic_store(result, (unint64_t *)&qword_8CB48);
  }

  return result;
}

uint64_t sub_13FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_13FF8(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_14004(uint64_t a1)
{
  return swift_release_n(a1, 2LL);
}

uint64_t sub_1400C(uint64_t a1)
{
  return swift_allocObject(a1, 40LL, 7LL);
}

uint64_t sub_14018()
{
  return _typeName(_:qualified:)(*(void *)(v0 - 248), 0LL);
}

uint64_t sub_14024()
{
  return sub_BD3C(2u);
}

uint64_t sub_14030()
{
  return *(void *)(v0 - 264);
}

uint64_t sub_14048()
{
  return type metadata accessor for HealthFlowError();
}

uint64_t sub_14050(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_14058()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 152, v0);
}

uint64_t sub_14068(uint64_t a1)
{
  return swift_retain_n(a1, 2LL);
}

BOOL sub_14070(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_14080(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_14088(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 1LL);
}

uint64_t sub_14090(uint64_t a1, void *a2)
{
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1409C()
{
  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_140A4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_140AC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_140B8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_140C0(uint64_t a1, unint64_t a2)
{
  return sub_173E0(a1, a2, (uint64_t *)(v2 - 184));
}

uint64_t sub_140C8()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_140D0@<X0>(void *a1@<X8>)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*v1);
  id v4 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  uint64_t v5 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = ResponseFactory.init()();
  a1[6] = v5;
  a1[7] = &protocol witness table for ResponseFactory;
  a1[3] = v6;
  uint64_t result = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  *a1 = 0xD000000000000015LL;
  a1[1] = 0x80000000000692D0LL;
  a1[2] = v4;
  a1[8] = result;
  return result;
}

uint64_t type metadata accessor for ResumeWorkoutContinueInAppStrategy(uint64_t a1)
{
  uint64_t result = qword_8CB80;
  if (!qword_8CB80) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ResumeWorkoutContinueInAppStrategy);
  }
  return result;
}

uint64_t sub_141DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_6358(&qword_8CD10);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  sub_14DB0((uint64_t)v10, v12, v13, v11);
  uint64_t v14 = (void *)swift_allocObject(&unk_80270, 56LL, 7LL);
  v14[2] = 0LL;
  v14[3] = 0LL;
  v14[4] = v5;
  v14[5] = a4;
  v14[6] = a5;
  swift_retain(v5);
  sub_14D9C();
  uint64_t v15 = sub_4A80C((uint64_t)v10, (uint64_t)&unk_8CD38, (uint64_t)v14);
  return swift_release(v15);
}

uint64_t sub_142A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_142C0, 0LL, 0LL);
}

uint64_t sub_142C0()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(**(void **)(v0 + 16));
  id v2 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = type metadata accessor for ResponseFactory(0LL);
  sub_14DA4(v3);
  uint64_t v4 = ResponseFactory.init()();
  *(void *)(v0 + 48) = v4;
  uint64_t v7 = (char *)&dword_8EF08 + dword_8EF08;
  uint64_t v5 = (void *)swift_task_alloc(unk_8EF0C);
  *(void *)(v0 + 56) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_14398;
  return ((uint64_t (*)(unint64_t, unint64_t, id, uint64_t, void, void))v7)( 0xD000000000000014LL,  0x8000000000069230LL,  v2,  v4,  *(void *)(v0 + 24),  *(void *)(v0 + 32));
}

uint64_t sub_14398()
{
  uint64_t v2 = v1[6];
  uint64_t v3 = (void *)v1[5];
  sub_14D6C(v1[7]);

  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_143DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_6358(&qword_8CD10);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for TaskPriority(0LL);
  sub_14DB0((uint64_t)v12, v14, v15, v13);
  uint64_t v16 = (void *)swift_allocObject(&unk_80248, 72LL, 7LL);
  v16[2] = 0LL;
  v16[3] = 0LL;
  v16[4] = a3;
  v16[5] = a1;
  v16[6] = v5;
  v16[7] = a4;
  v16[8] = a5;
  id v17 = a3;
  swift_retain(a1);
  swift_retain(v5);
  sub_14D9C();
  uint64_t v18 = sub_4A80C((uint64_t)v12, (uint64_t)&unk_8CD20, (uint64_t)v16);
  return swift_release(v18);
}

uint64_t sub_144C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[36] = a7;
  v8[37] = a8;
  v8[34] = a5;
  v8[35] = a6;
  v8[33] = a4;
  return swift_task_switch(sub_144E4, 0LL, 0LL);
}

uint64_t sub_144E4()
{
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = sub_6358(&qword_8CD28);
  uint64_t inited = swift_initStackObject(v2, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_61440;
  *(void *)(inited + 32) = 0x646F43726F727265LL;
  *(void *)(inited + 40) = 0xE900000000000065LL;
  *(void *)(inited + 48) = [v1 code];
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 80) = 0x656D614E707061LL;
  *(void *)(inited + 88) = 0xE700000000000000LL;
  uint64_t v4 = sub_14D9C();
  uint64_t v5 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v4);
  uint64_t v6 = v5;
  if (!v5)
  {
    swift_release(v0[34]);
LABEL_6:
    uint64_t v10 = 0LL;
    goto LABEL_7;
  }

  id v7 = [v5 displayAppName];

  uint64_t v8 = v0[34];
  if (!v7)
  {
    swift_release(v0[34]);
    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  uint64_t v6 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;
  swift_release(v8);

LABEL_7:
  uint64_t v11 = (void *)v0[35];
  *(void *)(inited + 120) = sub_6358(&qword_8F3D0);
  *(void *)(inited + 96) = v6;
  *(void *)(inited + 104) = v10;
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*v11);
  id v14 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  uint64_t v15 = type metadata accessor for ResponseFactory(0LL);
  sub_14DA4(v15);
  uint64_t v16 = ResponseFactory.init()();
  v0[24] = v15;
  v0[25] = &protocol witness table for ResponseFactory;
  v0[20] = v14;
  v0[21] = v16;
  v0[18] = 0xD000000000000019LL;
  v0[19] = 0x8000000000069340LL;
  v0[26] = v12;
  id v17 = (void *)swift_task_alloc(dword_8DC24);
  v0[38] = v17;
  *id v17 = v0;
  v17[1] = sub_14708;
  return sub_2B800((uint64_t)(v0 + 27), (uint64_t)(v0 + 18), (uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t sub_14708()
{
  return swift_task_switch(sub_14748, 0LL, 0LL);
}

uint64_t sub_14748()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_147A0()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for StartWorkoutHandleIntentStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin32StartWorkoutHandleIntentStrategy);
}

uint64_t sub_147E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t started = type metadata accessor for StartWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  started,  a7);
}

uint64_t sub_14850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t started = type metadata accessor for StartWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  started,  a7);
}

uint64_t sub_148B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t started = type metadata accessor for StartWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  started,  a7);
}

uint64_t sub_14920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_141DC(a1, a2, a3, a4, a5);
}

uint64_t sub_14940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t started = type metadata accessor for StartWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  started,  a7);
}

uint64_t sub_149A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t started = type metadata accessor for StartWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeInProgressResponse(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, started, a7);
}

uint64_t sub_14A10(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return sub_143DC(a1, a2, a3, a4, a5);
}

uint64_t sub_14A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t started = type metadata accessor for StartWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, started, a3);
}

uint64_t sub_14A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t started = type metadata accessor for StartWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, started, a4);
}

uint64_t sub_14AB8()
{
  return sub_1479C();
}

uint64_t sub_14ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t started = type metadata accessor for StartWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, started, a6);
}

unint64_t sub_14B28()
{
  unint64_t result = qword_8CD08;
  if (!qword_8CD08)
  {
    uint64_t started = type metadata accessor for StartWorkoutHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable(&unk_62164, started);
    atomic_store(result, (unint64_t *)&qword_8CD08);
  }

  return result;
}

uint64_t sub_14B64()
{
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_14BA8()
{
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = (void *)swift_task_alloc(dword_8CD1C);
  *(void *)(v1 + 16) = v5;
  uint64_t v6 = sub_14D7C(v5);
  return sub_144C4(v6, v7, v8, v9, v10, v2, v3, v4);
}

uint64_t sub_14C24()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_14C58(uint64_t a1)
{
  uint64_t v2 = sub_6358((uint64_t *)&unk_8F3E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_14C98(uint64_t a1)
{
  return a1;
}

uint64_t sub_14CCC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_14D00()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = (void *)swift_task_alloc(dword_8CD34);
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = sub_14D7C(v3);
  return sub_142A4(v4, v5, v6, v7, v8, v2);
}

uint64_t sub_14D6C(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_14D7C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_14D9C()
{
  return swift_retain(v0);
}

uint64_t sub_14DA4(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_14DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8760(a1, 1LL, 1LL, a4);
}

void sub_14DBC()
{
  uint64_t v2 = __chkstk_darwin(v1);
  sub_156EC(v2, v3, v4, v5, v6, v7, v8, v9, v14);
  uint64_t v10 = type metadata accessor for UsoEntity_common_MeasurementUnit.DefinedValues(0LL);
  uint64_t v11 = sub_15724(v10);
  if (!v13)
  {
    sub_1578C(v11, v12, &qword_8CD50);
    uint64_t v11 = sub_15768();
    if ((_DWORD)v11 != enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Inch(_:)
      && (_DWORD)v11 != enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Mile(_:)
      && (_DWORD)v11 != enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Calorie(_:)
      && (_DWORD)v11 != enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Meter(_:)
      && (_DWORD)v11 != enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Yard(_:)
      && (_DWORD)v11 != enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Kilocalorie(_:)
      && (_DWORD)v11 != enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Foot(_:)
      && (_DWORD)v11 != enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Kilojoule(_:))
    {
      uint64_t v11 = sub_1577C();
    }
  }

  sub_157D8(v11, &qword_8CD50);
  sub_11120();
}

void sub_14F1C()
{
  uint64_t v2 = __chkstk_darwin(v1);
  sub_156EC(v2, v3, v4, v5, v6, v7, v8, v9, v14);
  uint64_t v10 = type metadata accessor for UsoEntity_common_TimeUnit.DefinedValues(0LL);
  uint64_t v11 = sub_15724(v10);
  if (!v13)
  {
    sub_1578C(v11, v12, &qword_8CD40);
    uint64_t v11 = sub_15768();
    if ((_DWORD)v11 != enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Second(_:)
      && (_DWORD)v11 != enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Minute(_:)
      && (_DWORD)v11 != enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Hour(_:))
    {
      uint64_t v11 = sub_1577C();
    }
  }

  sub_157D8(v11, &qword_8CD40);
  sub_11120();
}

uint64_t sub_14FF8()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_Duration.components.getter();
  uint64_t v1 = v0;
  if (!v0) {
    return v1;
  }
  if (!((unint64_t)v0 >> 62))
  {
LABEL_12:
    swift_bridgeObjectRelease(v1);
    return 0LL;
  }

  if (v0 >= 0) {
    v0 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!_CocoaArrayWrapper.endIndex.getter(v0)) {
    goto LABEL_12;
  }
LABEL_4:
  sub_10000(0LL, (v1 & 0xC000000000000001LL) == 0, v1);
  if ((v1 & 0xC000000000000001LL) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
  }
  else {
    swift_retain(*(void *)(v1 + 32));
  }
  uint64_t v2 = swift_bridgeObjectRelease(v1);
  dispatch thunk of CodeGenListEntry.entry.getter(&v7, v2);
  uint64_t v3 = sub_157BC();
  uint64_t v1 = v7;
  if (v7)
  {
    uint64_t v4 = dispatch thunk of UsoEntity_common_DurationComponent.value.getter(v3);
    uint64_t v5 = swift_release(v1);
    if (v4)
    {
      uint64_t v1 = UsoEntity_common_Number.asDouble.getter(v5);
      sub_157BC();
      return v1;
    }

    return 0LL;
  }

  return v1;
}

uint64_t sub_150EC(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a2;
  uint64_t v3 = type metadata accessor for UsoEntity_common_MeasurementUnit.DefinedValues(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v58 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_6358(&qword_8CD48);
  sub_6C04();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v55 - v11;
  sub_6358(&qword_8CD50);
  sub_6C04();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v55 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v55 - v24;
  if (!a1) {
    return a1;
  }
  uint64_t v26 = dispatch thunk of UsoEntity_common_Measurement.components.getter(v23);
  a1 = v26;
  if (!v26) {
    return a1;
  }
  if (!((unint64_t)v26 >> 62))
  {
LABEL_36:
    swift_bridgeObjectRelease(a1);
    return 0LL;
  }

  if (v26 >= 0) {
    v26 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!_CocoaArrayWrapper.endIndex.getter(v26)) {
    goto LABEL_36;
  }
LABEL_5:
  uint64_t v57 = v4;
  sub_10000(0LL, (a1 & 0xC000000000000001LL) == 0, a1);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }

  else
  {
    uint64_t v27 = *(void *)(a1 + 32);
    swift_retain(v27);
  }

  uint64_t v28 = swift_bridgeObjectRelease(a1);
  dispatch thunk of CodeGenListEntry.entry.getter(&v60, v28);
  uint64_t v29 = swift_release(v27);
  a1 = v60;
  if (!v60) {
    return a1;
  }
  uint64_t v30 = dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter(v29);
  uint64_t v31 = sub_157BC();
  if (!v30) {
    return 0LL;
  }
  uint64_t v56 = v10;
  a1 = UsoEntity_common_Number.asDouble.getter(v31);
  char v33 = v32;
  swift_release(v30);
  if ((v33 & 1) == 0)
  {
    double v34 = *(double *)&a1;
    uint64_t v35 = *(void (**)(char *, void, uint64_t))(v57 + 104);
    v35(v25, enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Calorie(_:), v3);
    sub_8760((uint64_t)v25, 0LL, 1LL, v3);
    uint64_t v36 = (uint64_t)&v12[*(int *)(v6 + 48)];
    sub_6B1C((uint64_t)v25, (uint64_t)v12, &qword_8CD50);
    sub_157A0();
    uint64_t v37 = sub_15708((uint64_t)v12);
    if (v38)
    {
      sub_15798(v37, &qword_8CD50);
      sub_15708(v36);
      if (v38)
      {
        sub_6B60((uint64_t)v12, &qword_8CD50);
        goto LABEL_20;
      }
    }

    else
    {
      sub_6B1C((uint64_t)v12, (uint64_t)v22, &qword_8CD50);
      uint64_t v39 = sub_15708(v36);
      if (!v38)
      {
        uint64_t v40 = v57;
        uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 32);
        uint64_t v55 = v35;
        uint64_t v42 = v58;
        sub_157CC(v58, v41);
        sub_156AC();
        char v43 = sub_157B0((uint64_t)v22, v42);
        uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        uint64_t v45 = v42;
        uint64_t v35 = v55;
        v44(v45, v3);
        sub_6B60((uint64_t)v25, &qword_8CD50);
        v44((uint64_t)v22, v3);
        sub_6B60((uint64_t)v12, &qword_8CD50);
        if ((v43 & 1) == 0)
        {
LABEL_21:
          v35( v19,  enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Kilojoule(_:),  v3);
          sub_8760((uint64_t)v19, 0LL, 1LL, v3);
          uint64_t v46 = (uint64_t)v56;
          uint64_t v47 = (uint64_t)&v56[*(int *)(v6 + 48)];
          sub_6B1C((uint64_t)v19, (uint64_t)v56, &qword_8CD50);
          sub_157A0();
          sub_15708(v46);
          if (v38)
          {
            sub_6B60((uint64_t)v19, &qword_8CD50);
            uint64_t v48 = sub_15708(v47);
            if (v38)
            {
              sub_15798(v48, &qword_8CD50);
LABEL_31:
              double v34 = v34 * 1000.0;
              return *(void *)&v34;
            }
          }

          else
          {
            sub_6B1C(v46, (uint64_t)v16, &qword_8CD50);
            sub_15708(v47);
            if (!v49)
            {
              uint64_t v50 = v57;
              uint64_t v51 = v58;
              sub_157CC(v58, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 32));
              sub_156AC();
              char v52 = sub_157B0((uint64_t)v16, v51);
              uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
              v53(v51, v3);
              sub_6B60((uint64_t)v19, &qword_8CD50);
              v53((uint64_t)v16, v3);
              sub_6B60(v46, &qword_8CD50);
              if ((v52 & 1) == 0) {
                return *(void *)&v34;
              }
              goto LABEL_31;
            }

            sub_6B60((uint64_t)v19, &qword_8CD50);
            uint64_t v48 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v16, v3);
          }

          sub_15798(v48, &qword_8CD48);
          return *(void *)&v34;
        }

LABEL_20:
        double v34 = v34 / 1000.0;
        goto LABEL_21;
      }

      sub_15798(v39, &qword_8CD50);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v22, v3);
    }

    sub_6B60((uint64_t)v12, &qword_8CD48);
    goto LABEL_21;
  }

  return a1;
}

  sub_10F48();
}

void sub_155EC()
{
  uint64_t v2 = __chkstk_darwin(v1);
  sub_156EC(v2, v3, v4, v5, v6, v7, v8, v9, v14);
  uint64_t v10 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  uint64_t v11 = sub_15724(v10);
  if (!v13)
  {
    sub_1578C(v11, v12, &qword_8CD60);
    uint64_t v11 = sub_15768();
    if ((_DWORD)v11 != enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Last(_:)
      && (_DWORD)v11 != enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Next(_:))
    {
      uint64_t v11 = sub_1577C();
    }
  }

  sub_157D8(v11, &qword_8CD60);
  sub_11120();
}

unint64_t sub_156AC()
{
  unint64_t result = qword_8CD58;
  if (!qword_8CD58)
  {
    uint64_t v1 = type metadata accessor for UsoEntity_common_MeasurementUnit.DefinedValues(255LL);
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UsoEntity_common_MeasurementUnit.DefinedValues,  v1);
    atomic_store(result, (unint64_t *)&qword_8CD58);
  }

  return result;
}

uint64_t sub_156EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_6B1C(v10, (uint64_t)&a9 - v9, v11);
}

uint64_t sub_15708(uint64_t a1)
{
  return sub_63E0(a1, 1LL, v1);
}

uint64_t sub_15724(uint64_t a1)
{
  return sub_63E0(v1, 1LL, a1);
}

  ;
}

uint64_t sub_15768()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 88LL))(v0, v1);
}

uint64_t sub_1577C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1578C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_6B1C(v3, v4, a3);
}

uint64_t sub_15798(uint64_t a1, uint64_t *a2)
{
  return sub_6B60(v2, a2);
}

uint64_t sub_157A0()
{
  return sub_6B1C(*(void *)(v2 - 112), v0, v1);
}

uint64_t sub_157B0(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v2);
}

uint64_t sub_157BC()
{
  return swift_release(v0);
}

uint64_t sub_157C4()
{
  return sub_6358(v0);
}

uint64_t sub_157CC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_157D8(uint64_t a1, uint64_t *a2)
{
  return sub_6B60(v2, a2);
}

uint64_t sub_157E0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  if (!v3) {
    return sub_3E728(a1, a2);
  }
  type metadata accessor for SiriKitIntentExecutionBehavior(0LL);
  id v4 = v3;
  uint64_t v5 = static SiriKitIntentExecutionBehavior.remoteIntentExecution(targetDevice:)();

  return v5;
}

uint64_t sub_15830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_15914(a1, a2, a3, a4, a5, (uint64_t)&unk_80348, (uint64_t)&unk_8CE40);
}

uint64_t sub_15844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_15860, 0LL, 0LL);
}

uint64_t sub_15860()
{
  uint64_t v1 = sub_16030();
  id v2 = [(id)objc_opt_self(NSBundle) bundleForClass:v1];
  uint64_t v3 = sub_1600C((uint64_t)v2);
  sub_14DA4(v3);
  *(void *)(v0 + 48) = ResponseFactory.init()();
  id v4 = (void *)sub_15FF8((uint64_t)&dword_8EF08);
  *(void *)(v0 + 56) = v4;
  *id v4 = v0;
  v4[1] = sub_15FC0;
  unint64_t v5 = sub_1603C(18LL);
  return sub_15FEC(v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_15900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_15914(a1, a2, a3, a4, a5, (uint64_t)&unk_80320, (uint64_t)&unk_8CE30);
}

uint64_t sub_15914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_6358(&qword_8CD10);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for TaskPriority(0LL);
  sub_8760((uint64_t)v14, 1LL, 1LL, v15);
  uint64_t v16 = (void *)swift_allocObject(a6, 56LL, 7LL);
  v16[2] = 0LL;
  v16[3] = 0LL;
  v16[4] = v7;
  v16[5] = a4;
  v16[6] = a5;
  swift_retain(v7);
  swift_retain(a5);
  uint64_t v17 = sub_4A80C((uint64_t)v14, a7, (uint64_t)v16);
  return swift_release(v17);
}

uint64_t sub_159E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_15A04, 0LL, 0LL);
}

uint64_t sub_15A04()
{
  uint64_t v1 = sub_16030();
  id v2 = [(id)objc_opt_self(NSBundle) bundleForClass:v1];
  uint64_t v3 = sub_1600C((uint64_t)v2);
  sub_14DA4(v3);
  *(void *)(v0 + 48) = ResponseFactory.init()();
  id v4 = (void *)sub_15FF8((uint64_t)&dword_8EF08);
  *(void *)(v0 + 56) = v4;
  *id v4 = v0;
  v4[1] = sub_15AA4;
  unint64_t v5 = sub_1603C(23LL);
  return sub_15FEC(v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_15AA4()
{
  uint64_t v1 = *((void *)*v0 + 6);
  id v2 = (void *)*((void *)*v0 + 5);
  sub_14D6C(*((void *)*v0 + 7));

  swift_release(v1);
  return v0[1]();
}

uint64_t type metadata accessor for EndWorkoutHandleIntentStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin30EndWorkoutHandleIntentStrategy);
}

uint64_t sub_15B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for EndWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_15B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for EndWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  v13,  a7);
}

uint64_t sub_15BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for EndWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_15C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_15830(a1, a2, a3, a4, a5);
}

uint64_t sub_15C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for EndWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_15CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for EndWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeInProgressResponse(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_15D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_15900(a1, a2, a3, a4, a5);
}

uint64_t sub_15D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for EndWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, v5, a3);
}

uint64_t sub_15D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for EndWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, v7, a4);
}

uint64_t sub_15DE0(uint64_t a1, void *a2)
{
  return sub_157E0(a1, a2);
}

uint64_t sub_15E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for EndWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, v11, a6);
}

unint64_t sub_15E5C()
{
  unint64_t result = qword_8CE20;
  if (!qword_8CE20)
  {
    uint64_t v1 = type metadata accessor for EndWorkoutHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable(&unk_62280, v1);
    atomic_store(result, &qword_8CE20);
  }

  return result;
}

uint64_t sub_15E9C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_8CE2C);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_15FC8(v1);
  return sub_159E8(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_15EF4()
{
  return v0[1]();
}

uint64_t sub_15F34()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_15F68()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_8CE3C);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_15FC8(v1);
  return sub_15844(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_15FC8(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_15FEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

uint64_t sub_15FF8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_1600C(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return type metadata accessor for ResponseFactory(0LL);
}

  ;
}

uint64_t sub_16030()
{
  return swift_getObjCClassFromMetadata(**(void **)(v0 + 16));
}

unint64_t sub_1603C(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

uint64_t sub_16050()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_17ADC(v0, qword_8CE48);
  sub_173C8(v0, (uint64_t)qword_8CE48);
  sub_AF38(0LL, qword_8CFB0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v1 = OS_os_log.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xEE00697269732E65LL,  0x68746C616548LL,  0xE600000000000000LL);
  return Logger.init(_:)(v1);
}

uint64_t sub_160EC(uint64_t a1, uint64_t a2)
{
  id v6 = [objc_allocWithZone((Class)NSMetaphone) init];
  uint64_t result = sub_17A60(a1, a2, v6);
  if (v8)
  {
    uint64_t v11 = v8;
    static CharacterSet.whitespaces.getter(result);
    unint64_t v9 = sub_10098();
    uint64_t v10 = StringProtocol.trimmingCharacters(in:)(v2, &type metadata for String, v9);

    sub_17BAC();
    swift_bridgeObjectRelease(v11);
    return v10;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_161BC()
{
  v0[2] = v1;
  v0[3] = v2;
  v0[4] = 0x7473696C70LL;
  v0[5] = 0xE500000000000000LL;
  v0[6] = 0LL;
}

uint64_t sub_161EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SearchBundleHelper();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  id v5 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v8 = v1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = sub_17B1C(v6, v7, v9, v8, v5);

  if (v10)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v10);

    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  uint64_t v12 = sub_17C3C();
  return sub_8760(a1, v11, 1LL, v12);
}

uint64_t sub_162B8()
{
  return v0;
}

uint64_t sub_162E4()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

void *guestNames()()
{
  uint64_t v2 = type metadata accessor for SearchBundleHelper();
  uint64_t inited = swift_initStackObject(v2, v9);
  sub_17BCC();
  v4[2] = v5;
  v4[3] = v6;
  v4[4] = 0x7473696C70LL;
  void v4[5] = 0xE500000000000000LL;
  v4[6] = 0LL;
  sub_161EC(v0);
  uint64_t v7 = guestNames(dataPath:)(v0);
  swift_release(inited);
  sub_6B60(v0, (uint64_t *)&off_8C250);
  return v7;
}

uint64_t type metadata accessor for SearchBundleHelper()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin18SearchBundleHelper);
}

void *guestNames(dataPath:)(uint64_t a1)
{
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_17C3C();
  sub_17C28();
  __chkstk_darwin(v7);
  sub_17BBC();
  uint64_t v10 = v8 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v23 - v12;
  sub_165E0(a1, (uint64_t)v6);
  if (sub_63E0((uint64_t)v6, 1LL, v1) == 1)
  {
    uint64_t v14 = (uint64_t *)&off_8C250;
    uint64_t v15 = v6;
LABEL_3:
    sub_6B60((uint64_t)v15, v14);
    return &_swiftEmptyArrayStorage;
  }

  uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 32))(v13, v6, v1);
  sub_DC28(v16, &qword_8CE60, &OBJC_CLASS___NSDictionary_ptr);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 16))(v10, v13, v1);
  id v17 = sub_16628(v10);
  if (!v17)
  {
    sub_17BAC();
    return &_swiftEmptyArrayStorage;
  }

  uint64_t v18 = v17;
  *(void *)&v25[0] = 0x737473657567LL;
  *((void *)&v25[0] + 1) = 0xE600000000000000LL;
  uint64_t v19 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v25, &type metadata for String);
  id v20 = objc_msgSend(v18, "__swift_objectForKeyedSubscript:", v19);
  swift_unknownObjectRelease(v19);
  if (v20)
  {
    _bridgeAnyObjectToAny(_:)(v25, v20);

    sub_17C70();
    sub_17BAC();
  }

  else
  {
    sub_17BAC();

    memset(v25, 0, sizeof(v25));
  }

  sub_C78C((uint64_t)v25, (uint64_t)v26);
  if (!v27)
  {
    uint64_t v14 = &qword_8C600;
    uint64_t v15 = v26;
    goto LABEL_3;
  }

  uint64_t v21 = sub_6358(&qword_8CE68);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_165E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358((uint64_t *)&off_8C250);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

id sub_16628(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  URL._bridgeToObjectiveC()(v4);
  uint64_t v6 = v5;
  id v7 = [v3 initWithContentsOfURL:v5];

  uint64_t v8 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
  return v7;
}

void *search(dataPath:guest:modality:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v104 = a5;
  uint64_t v105 = a2;
  uint64_t v102 = a4;
  id v106 = (id)sub_6358((uint64_t *)&off_8C250);
  sub_6C04();
  __chkstk_darwin(v7);
  sub_17BBC();
  uint64_t v10 = v8 - v9;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v98 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v98 - v15;
  uint64_t v17 = sub_17C3C();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_17BBC();
  uint64_t v103 = (void (*)(char *, uint64_t))(v19 - v20);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v98 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v98 - v25;
  sub_165E0(a1, (uint64_t)v16);
  if (sub_63E0((uint64_t)v16, 1LL, v17) == 1)
  {
    sub_6B60((uint64_t)v16, (uint64_t *)&off_8C250);
LABEL_17:
    if (qword_8BB70 != -1) {
      swift_once(&qword_8BB70, sub_16050);
    }
    uint64_t v52 = type metadata accessor for Logger(0LL);
    sub_173C8(v52, (uint64_t)qword_8CE48);
    uint64_t v53 = sub_165E0(a1, (uint64_t)v14);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)sub_88B0(12LL);
      uint64_t v57 = sub_88B0(32LL);
      v110._countAndFlagsBits = v57;
      *(_DWORD *)uint64_t v56 = 136315138;
      sub_165E0((uint64_t)v14, v10);
      uint64_t v58 = String.init<A>(describing:)(v10, v106);
      unint64_t v60 = v59;
      uint64_t v61 = sub_173E0(v58, v59, &v110._countAndFlagsBits);
      uint64_t v62 = sub_17C14(v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v62, v63);
      swift_bridgeObjectRelease(v60);
      sub_6B60((uint64_t)v14, (uint64_t *)&off_8C250);
      sub_17C68(&dword_0, v54, v55, "No data file present: %s", v56);
      swift_arrayDestroy(v57, 1LL);
      sub_8870(v57);
      sub_8870((uint64_t)v56);
    }

    else
    {
      sub_6B60((uint64_t)v14, (uint64_t *)&off_8C250);
    }

    return &_swiftEmptyArrayStorage;
  }

  uint64_t v101 = a3;
  uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v26, v16, v17);
  uint64_t v28 = sub_DC28(v27, &qword_8CE60, &OBJC_CLASS___NSDictionary_ptr);
  unint64_t v98 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v98(v24, v26, v17);
  id v29 = sub_16628((uint64_t)v24);
  if (!v29)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v26, v17);
    goto LABEL_17;
  }

  uint64_t v30 = v29;
  unint64_t v99 = v26;
  uint64_t v100 = v17;
  *(void *)&__int128 v108 = sub_160EC(v105, v101);
  *((void *)&v108 + 1) = v31;
  swift_bridgeObjectRetain();
  id v32 =  objc_msgSend( v30,  "__swift_objectForKeyedSubscript:",  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v108, &type metadata for String));
  sub_17C70();
  if (v32)
  {
    _bridgeAnyObjectToAny(_:)(&v108, v32);
    swift_unknownObjectRelease(v32);
  }

  else
  {
    __int128 v108 = 0u;
    __int128 v109 = 0u;
  }

  sub_17C5C();
  uint64_t v33 = v100;
  if (!v111)
  {
    sub_17C0C();

    sub_6B60((uint64_t)&v110, &qword_8C600);
LABEL_16:
    (*(void (**)(char *, uint64_t))(v18 + 8))(v99, v33);
    goto LABEL_17;
  }

  if ((sub_17C54((uint64_t)&v107, (uint64_t)&v110, (uint64_t)&type metadata for Any + 8, v28) & 1) == 0)
  {
    sub_17C0C();

    goto LABEL_16;
  }

  id v106 = v30;
  double v34 = v107;
  sub_17C0C();
  if (qword_8BB70 != -1) {
    swift_once(&qword_8BB70, sub_16050);
  }
  uint64_t v35 = type metadata accessor for Logger(0LL);
  sub_173C8(v35, (uint64_t)qword_8CE48);
  uint64_t v36 = (uint64_t)v103;
  v98((char *)v103, v99, v33);
  uint64_t v37 = (os_log_s *)sub_17C04();
  os_log_type_t v38 = static os_log_type_t.debug.getter(v37);
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v40 = &word_61000;
  unint64_t v98 = v34;
  if (v39)
  {
    uint64_t v41 = (uint8_t *)sub_88B0(12LL);
    uint64_t v42 = v36;
    uint64_t v43 = sub_88B0(32LL);
    v110._countAndFlagsBits = v43;
    *(_DWORD *)uint64_t v41 = 136315138;
    uint64_t v44 = sub_17A10( &qword_8CE78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v100, v44);
    unint64_t v47 = v46;
    uint64_t v48 = sub_173E0(v45, v46, &v110._countAndFlagsBits);
    uint64_t v49 = sub_17C14(v48);
    uint64_t v33 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, v50);
    swift_bridgeObjectRelease(v47);
    uint64_t v51 = *(void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v40 = &word_61000;
    sub_17BFC(v42);
    sub_17C68(&dword_0, v37, v38, "Looking at data file found at %s", v41);
    sub_17BEC();
    sub_8870(v43);
    sub_8870((uint64_t)v41);
  }

  else
  {
    uint64_t v51 = *(void (**)(char *, uint64_t))(v18 + 8);
    sub_17BFC(v36);
  }

  id v66 = v106;
  if (v104)
  {
    uint64_t v103 = v51;
    Swift::String v67 = String.lowercased()();
    Swift::String v110 = v67;
    unint64_t v68 = sub_10098();
    uint64_t v69 = StringProtocol.capitalized.getter(&type metadata for String, v68);
    unint64_t v71 = v70;
    swift_bridgeObjectRelease(v67._object);
    *(void *)&__int128 v108 = v69;
    *((void *)&v108 + 1) = v71;
    swift_bridgeObjectRetain_n(v71, 2LL);
    uint64_t v72 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v108, &type metadata for String);
    uint64_t v73 = v98;
    id v74 = objc_msgSend(v98, "__swift_objectForKeyedSubscript:", v72);
    sub_17C70();
    if (v74)
    {
      _bridgeAnyObjectToAny(_:)(&v108, v74);
      swift_unknownObjectRelease(v74);
    }

    else
    {
      __int128 v108 = 0u;
      __int128 v109 = 0u;
    }

    uint64_t v86 = sub_17C5C();
    if (v111)
    {
      uint64_t v87 = sub_DC28(v86, &qword_8CE70, &OBJC_CLASS___NSArray_ptr);
      char v88 = sub_17C54((uint64_t)&v107, (uint64_t)&v110, (uint64_t)&type metadata for Any + 8, v87);
      sub_17C4C();
      if ((v88 & 1) != 0)
      {
        uint64_t v89 = v107;
        sub_17C4C();
        sub_16FF8(v89);
        uint64_t v64 = v90;

        v103(v99, v33);
        return (void *)v64;
      }
    }

    else
    {
      sub_17C4C();
      sub_6B60((uint64_t)&v110, &qword_8C600);
    }

    unint64_t v91 = v101;
    swift_bridgeObjectRetain_n(v101, 2LL);
    sub_17C44();
    uint64_t v92 = (os_log_s *)sub_17C04();
    os_log_type_t v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = sub_88B0(22LL);
      uint64_t v95 = sub_88B0(64LL);
      v110._countAndFlagsBits = v95;
      *(_DWORD *)uint64_t v94 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)&__int128 v108 = sub_173E0(v105, v91, &v110._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, (char *)&v108 + 8);
      swift_bridgeObjectRelease_n(v91, 3LL);
      *(_WORD *)(v94 + 12) = 2080;
      sub_17C44();
      *(void *)&__int128 v108 = sub_173E0(v69, v71, &v110._countAndFlagsBits);
      uint64_t v73 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, (char *)&v108 + 8);
      swift_bridgeObjectRelease_n(v71, 3LL);
      _os_log_impl(&dword_0, v92, v93, "No adamIds found for %s and %s", (uint8_t *)v94, 0x16u);
      swift_arrayDestroy(v95, 2LL);
      uint64_t v96 = v95;
      uint64_t v33 = v100;
      sub_8870(v96);
      sub_8870(v94);
    }

    else
    {

      swift_bridgeObjectRelease_n(v71, 2LL);
      swift_bridgeObjectRelease_n(v91, 2LL);
    }

    uint64_t v97 = v103;

    v97(v99, v33);
  }

  else
  {
    uint64_t v75 = (os_log_s *)sub_17C04();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      __int128 v77 = (uint8_t *)sub_88B0(12LL);
      uint64_t v78 = sub_88B0(32LL);
      *(void *)&__int128 v108 = v78;
      *(_DWORD *)__int128 v77 = *((void *)v40 + 412);
      v110._countAndFlagsBits = v102;
      v110._object = 0LL;
      uint64_t v79 = sub_6358(&qword_8F3D0);
      uint64_t v80 = String.init<A>(describing:)(&v110, v79);
      id v81 = v66;
      unint64_t v83 = v82;
      v110._countAndFlagsBits = sub_173E0(v80, v82, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v110._object);
      unint64_t v84 = v83;
      id v66 = v81;
      swift_bridgeObjectRelease(v84);
      sub_17C68(&dword_0, v75, v76, "Failed to normalize modality: %s", v77);
      sub_17BEC();
      sub_8870(v78);
      sub_8870((uint64_t)v77);
    }

    uint64_t v85 = (uint64_t)v99;
    sub_17BFC(v85);
  }

  return &_swiftEmptyArrayStorage;
}

void sub_16FF8(void *a1)
{
  uint64_t v26 = type metadata accessor for NSFastEnumerationIterator(0LL);
  uint64_t v2 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = (uint64_t)[a1 count];
  uint64_t v31 = &_swiftEmptyArrayStorage;
  sub_3B5D4(0, v5 & ~(v5 >> 63), 0);
  id v6 = a1;
  NSArray.makeIterator()();

  if (v5 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }

  uint64_t v25 = v2;
  if (v5)
  {
    uint64_t v7 = sub_17A10( &qword_8CFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator,  (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
    do
    {
      dispatch thunk of IteratorProtocol.next()(&v29, v26, v7);
      if (!v30) {
        goto LABEL_18;
      }
      sub_13FB8((uint64_t)&v29, (uint64_t)&v27);
      uint64_t v8 = String.init<A>(describing:)(&v27, (char *)&type metadata for Any + 8);
      uint64_t v10 = v9;
      _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(&v29);
      uint64_t v11 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
      {
        sub_3B5D4(0, v11[2] + 1LL, 1);
        uint64_t v11 = v31;
      }

      unint64_t v13 = v11[2];
      unint64_t v12 = v11[3];
      if (v13 >= v12 >> 1)
      {
        sub_3B5D4(v12 > 1, v13 + 1, 1);
        uint64_t v11 = v31;
      }

      v11[2] = v13 + 1;
      uint64_t v14 = (char *)&v11[2 * v13];
      *((void *)v14 + 4) = v8;
      *((void *)v14 + 5) = v10;
    }

    while (--v5);
  }

  uint64_t v15 = sub_17A10( &qword_8CFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator,  (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  uint64_t v16 = v26;
  dispatch thunk of IteratorProtocol.next()(&v27, v26, v15);
  while (v28)
  {
    sub_17A50(&v27, &v29);
    sub_13FB8((uint64_t)&v29, (uint64_t)&v27);
    uint64_t v17 = String.init<A>(describing:)(&v27, (char *)&type metadata for Any + 8);
    uint64_t v19 = v18;
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(&v29);
    uint64_t v20 = v31;
    if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
    {
      sub_3B5D4(0, v20[2] + 1LL, 1);
      uint64_t v20 = v31;
    }

    unint64_t v22 = v20[2];
    unint64_t v21 = v20[3];
    if (v22 >= v21 >> 1)
    {
      sub_3B5D4(v21 > 1, v22 + 1, 1);
      uint64_t v20 = v31;
    }

    v20[2] = v22 + 1;
    uint64_t v23 = (char *)&v20[2 * v22];
    *((void *)v23 + 4) = v17;
    *((void *)v23 + 5) = v19;
    dispatch thunk of IteratorProtocol.next()(&v27, v16, v15);
  }

  (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v16);
  sub_6B60((uint64_t)&v27, &qword_8C600);
}

uint64_t sub_172F4(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_17304(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_17338(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_17358(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v8 = v7;
  uint64_t v9 = sub_173E0(v6, v7, a3);
  uint64_t v10 = *a1 + 8;
  uint64_t v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  uint64_t result = swift_bridgeObjectRelease(v8);
  *a1 = v10;
  return result;
}

uint64_t sub_173C8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_173E0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_174AC(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    unint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_13FB8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_13FB8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    sub_17C44();
  }

  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v12);
  return v7;
}

void *sub_174AC(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_17600((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_176C4(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_17600(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_176C4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_17758(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1792C(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1792C((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_17758(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  uint64_t v5 = sub_178C8(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  2,  1122LL,  0);
LABEL_15:
  __break(1u);
  return result;
}

void *sub_178C8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_6358(&qword_8CFA8);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  uint64_t v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_1792C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_6358(&qword_8CFA8);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_FB1C(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_FF28(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

_BYTE **sub_17A00(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_17A10(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

_OWORD *sub_17A50(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_17A60(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 translate:v4];

  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v6;
}

uint64_t *sub_17ADC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

id sub_17B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v10 = [a5 URLForResource:v8 withExtension:v9];

  return v10;
}

uint64_t sub_17BAC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

  ;
}

uint64_t sub_17BEC()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_17BFC(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_17C04()
{
  return Logger.logObject.getter();
}

uint64_t sub_17C0C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_17C14(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return v1 - 160;
}

  ;
}

uint64_t sub_17C3C()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_17C44()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_17C4C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_17C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

uint64_t sub_17C5C()
{
  return sub_C78C(v0 - 160, v0 - 120);
}

void sub_17C68(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_17C70()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t initializeWithCopy for WorkoutAppSelectionTrainingLogger(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

void *assignWithCopy for WorkoutAppSelectionTrainingLogger(void *a1, void *a2)
{
  return a1;
}

__n128 initializeWithTake for WorkoutAppSelectionTrainingLogger(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for WorkoutAppSelectionTrainingLogger(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkoutAppSelectionTrainingLogger(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkoutAppSelectionTrainingLogger(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for WorkoutsDisambiguationStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WorkoutsDisambiguationStrategy);
}

uint64_t sub_17DB8(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a3);
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v8 = 0LL;
    while (1)
    {
      id v9 = (a3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a3)
         : *(id *)(a3 + 8 * v8 + 32);
      id v10 = v9;
      uint64_t v11 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        break;
      }
      v15[0] = v8;
      v15[1] = v9;
      char v12 = a1(v15);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v8;
      }

      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        return v8;
      }

      ++v8;
      if (v11 == v7) {
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_16:
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

uint64_t sub_17EE8()
{
  return 1LL;
}

void sub_17EF0()
{
}

Swift::Int sub_17F14()
{
  return Hasher._finalize()();
}

Swift::Int sub_17F5C(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_17F98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t, uint64_t), uint64_t a8, uint64_t a9)
{
  uint64_t v12 = sub_8908();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_19A20();
  id v14 = [a6 disambiguationItems];
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = sub_39FF4(v15);
  sub_10F84();
  if (v16)
  {
    uint64_t v17 = sub_6358(&qword_8D060);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    uint64_t v18 = BasicDisambiguationItemContainer.init(_:_:)(v16, 0LL);
    a7(v18, 0LL);
    swift_release(v18);
  }

  else
  {
    uint64_t v19 = sub_14048();
    sub_1400C(v19);
    uint64_t v20 = sub_BD3C(6u);
    uint64_t v21 = Logger.health.unsafeMutableAddressor(v20);
    sub_8894(v21, (uint64_t)v41);
    sub_19A48((uint64_t)v9, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16));
    uint64_t v22 = sub_14068(v20);
    Logger.logObject.getter(v22);
    os_log_type_t v23 = sub_140C8();
    if (os_log_type_enabled(v9, v23))
    {
      uint64_t v38 = v19;
      uint64_t v24 = sub_88B0(22LL);
      uint64_t v36 = (void *)sub_88B0(8LL);
      uint64_t v37 = sub_88B0(32LL);
      uint64_t v40 = v37;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v25 = sub_19A08(a9);
      unint64_t v27 = v26;
      uint64_t v39 = sub_173E0(v25, v26, &v40);
      sub_19A7C((uint64_t)&v39, (uint64_t)&v40);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v24 + 12) = 2112;
      uint64_t v28 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      uint64_t v29 = sub_13FF8(v38, v28);
      sub_19A70(v29, v30);
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError(v29);
      uint64_t v39 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      *uint64_t v36 = v31;
      sub_14004(v20);
      sub_14080(&dword_0, v9, v23, "%s Error: %@", (uint8_t *)v24);
      sub_6358(&qword_8C360);
      sub_B334((uint64_t)v36);
      sub_8870((uint64_t)v36);
      sub_B334(v37);
      sub_8870(v37);
      uint64_t v32 = v24;
      uint64_t v19 = v38;
      sub_8870(v32);
    }

    else
    {

      sub_14004(v20);
    }

    sub_19A50(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    uint64_t v33 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v34 = sub_13FF8(v19, v33);
    sub_19A70(v34, v35);
    a7(v34, 1LL);
    swift_errorRelease(v34);
    swift_release(v20);
    sub_10F48();
  }

void sub_182CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t *), uint64_t a10, uint64_t a11)
{
  uint64_t v115 = a8;
  uint64_t v122 = a10;
  v123 = a9;
  uint64_t v11 = sub_8908();
  uint64_t v125 = *(void *)(v11 - 8);
  uint64_t v126 = v11;
  sub_C870();
  __chkstk_darwin(v12);
  sub_17BBC();
  id v124 = (os_log_s *)(v13 - v14);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v116 = (char *)v111 - v17;
  __chkstk_darwin(v16);
  uint64_t v112 = (os_log_s *)((char *)v111 - v18);
  uint64_t v19 = *(void **)(a11 + 16);
  uint64_t v117 = a11;
  id v118 = v19;
  uint64_t v20 = type metadata accessor for IntentPromptAnswer(0LL, v19);
  uint64_t v114 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v113 = (char *)v111 - v21;
  uint64_t v22 = type metadata accessor for DisambiguationResult(255LL, v20);
  uint64_t v23 = sub_D958(&qword_8CB40);
  uint64_t v24 = type metadata accessor for Result(0LL, v22, v23, &protocol self-conformance witness table for Error);
  uint64_t v120 = *(void *)(v24 - 8);
  uint64_t v121 = v24;
  __chkstk_darwin(v24);
  uint64_t v119 = (void *)((char *)v111 - v25);
  type metadata accessor for HealthNLIntent(0LL);
  sub_C870();
  __chkstk_darwin(v26);
  sub_19A20();
  uint64_t v27 = type metadata accessor for Parse(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  sub_6BD8();
  uint64_t v31 = v30 - v29;
  uint64_t v32 = type metadata accessor for NLIntent(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_17BBC();
  uint64_t v36 = v34 - v35;
  uint64_t v38 = __chkstk_darwin(v37);
  uint64_t v40 = (char *)v111 - v39;
  Input.parse.getter(v38);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v28 + 88))(v31, v27) == enum case for Parse.NLv3IntentOnly(_:))
  {
    v111[1] = v36;
    v111[0] = v20;
    sub_19A90(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 96));
    sub_19A48((uint64_t)v40, v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 32));
    id v124 = (os_log_s *)v33;
    sub_19A84(v22);
    uint64_t v41 = v117;
    uint64_t v42 = *(void *)(v117 + 32);
    sub_31C78((uint64_t)v118, (uint64_t)v118, v42);
    v111[2] = v40;
    uint64_t v72 = v71;
    uint64_t v116 = (char *)v32;
    sub_C594(v22);
    uint64_t v73 = sub_6358(&qword_8D048);
    uint64_t v74 = PaginatedItemContainer.items.getter(v73);
    __chkstk_darwin(v74);
    uint64_t v75 = *(void *)(v41 + 24);
    v111[-4] = v118;
    v111[-3] = v75;
    v111[-2] = v42;
    v111[-1] = v72;
    uint64_t v76 = sub_17DB8((uint64_t (*)(void *))sub_19870, (uint64_t)&v111[-6], v74);
    uint64_t v78 = v77;
    swift_bridgeObjectRelease(v74);
    uint64_t v79 = v72;
    uint64_t v80 = v126;
    if (v78)
    {
      v127[3] = sub_6358(&qword_8D058);
      v127[0] = v76;
      v127[1] = v78;
      id v81 = v78;
      id v82 = v79;
      unint64_t v83 = v113;
      IntentPromptAnswer.init(answeredValue:updatedIntent:)(v127, v82, v118);
      unint64_t v84 = v119;
      uint64_t v85 = v111[0];
      static DisambiguationResult.chosenItem(_:)(v83, v111[0]);
      (*(void (**)(char *, uint64_t))(v114 + 8))(v83, v85);
      swift_storeEnumTagMultiPayload(v84, v121, 0LL);
      v123(v84);

      sub_19A50(*(uint64_t (**)(uint64_t, uint64_t))(v120 + 8));
      uint64_t v69 = sub_19A9C();
      unint64_t v70 = v116;
    }

    else
    {
      id v118 = v79;
      uint64_t v86 = v41;
      uint64_t v87 = sub_14048();
      sub_1400C(v87);
      uint64_t v88 = sub_BD3C(5u);
      uint64_t v89 = Logger.health.unsafeMutableAddressor(v88);
      sub_8894(v89, (uint64_t)v127);
      uint64_t v90 = v125;
      unint64_t v91 = v112;
      sub_19A40((uint64_t)v112, v89, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 16));
      uint64_t v92 = sub_14068(v88);
      os_log_type_t v93 = v91;
      Logger.logObject.getter(v92);
      os_log_type_t v94 = sub_140C8();
      if (sub_199F8(v94))
      {
        uint64_t v95 = sub_88B0(22LL);
        uint64_t v96 = (void *)sub_88B0(8LL);
        uint64_t v97 = sub_88B0(32LL);
        v129[0] = v97;
        *(_DWORD *)uint64_t v95 = 136315394;
        uint64_t v98 = sub_19A08(v86);
        unint64_t v100 = v99;
        uint64_t v128 = sub_19A38(v98, v99);
        sub_19A10();
        swift_bridgeObjectRelease(v100);
        *(_WORD *)(v95 + 12) = 2112;
        uint64_t v101 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
        uint64_t v102 = sub_13FF8(v87, v101);
        *uint64_t v103 = v88;
        sub_14D9C();
        uint64_t v104 = _swift_stdlib_bridgeErrorToNSError(v102);
        uint64_t v128 = v104;
        sub_19A10();
        *uint64_t v96 = v104;
        sub_14004(v88);
        sub_14080(&dword_0, v93, (os_log_type_t)v111, "%s Error: %@", (uint8_t *)v95);
        sub_6358(&qword_8C360);
        sub_B334((uint64_t)v96);
        sub_8870((uint64_t)v96);
        sub_B334(v97);
        sub_8870(v97);
        sub_8870(v95);

        (*(void (**)(os_log_s *, uint64_t))(v125 + 8))(v112, v126);
      }

      else
      {

        sub_14004(v88);
        (*(void (**)(os_log_s *, uint64_t))(v90 + 8))(v91, v80);
      }

      uint64_t v105 = v116;
      uint64_t v106 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      uint64_t v107 = sub_13FF8(v87, v106);
      uint64_t *v108 = v88;
      uint64_t v109 = (uint64_t)v119;
      *uint64_t v119 = v107;
      uint64_t v110 = v121;
      sub_14088(v109, v121);
      sub_14D9C();
      v123((uint64_t *)v109);
      swift_release(v88);

      (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v109, v110);
      uint64_t v69 = sub_19A9C();
      unint64_t v70 = v105;
    }
  }

  else
  {
    sub_19A90(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
    uint64_t v43 = sub_14048();
    sub_1400C(v43);
    uint64_t v44 = sub_BD3C(0);
    uint64_t v45 = Logger.health.unsafeMutableAddressor(v44);
    sub_8894(v45, (uint64_t)v127);
    unint64_t v46 = v124;
    uint64_t v47 = v125;
    uint64_t v48 = v126;
    sub_19A48((uint64_t)v124, v45, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 16));
    uint64_t v49 = sub_14068(v44);
    Logger.logObject.getter(v49);
    os_log_type_t v50 = sub_140C8();
    if (sub_199F8(v50))
    {
      uint64_t v51 = sub_88B0(22LL);
      uint64_t v52 = (void *)sub_88B0(8LL);
      uint64_t v53 = sub_88B0(32LL);
      v129[0] = v53;
      *(_DWORD *)uint64_t v51 = 136315394;
      uint64_t v54 = sub_19A08(v117);
      unint64_t v56 = v55;
      uint64_t v128 = sub_19A38(v54, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
      swift_bridgeObjectRelease(v56);
      *(_WORD *)(v51 + 12) = 2112;
      uint64_t v57 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      uint64_t v58 = sub_13FF8(v43, v57);
      uint64_t *v59 = v44;
      sub_14D9C();
      uint64_t v60 = _swift_stdlib_bridgeErrorToNSError(v58);
      uint64_t v128 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
      *uint64_t v52 = v60;
      sub_14004(v44);
      sub_14080(&dword_0, v46, (os_log_type_t)v33, "%s Error: %@", (uint8_t *)v51);
      sub_6358(&qword_8C360);
      sub_B334((uint64_t)v52);
      sub_8870((uint64_t)v52);
      sub_B334(v53);
      sub_8870(v53);
      sub_8870(v51);

      (*(void (**)(os_log_s *, uint64_t))(v125 + 8))(v124, v126);
    }

    else
    {

      sub_14004(v44);
      (*(void (**)(os_log_s *, uint64_t))(v47 + 8))(v124, v48);
    }

    uint64_t v61 = v123;
    uint64_t v63 = v120;
    uint64_t v62 = v121;
    uint64_t v64 = v119;
    uint64_t v65 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v66 = sub_13FF8(v43, v65);
    uint64_t *v67 = v44;
    uint64_t *v64 = v66;
    sub_14088((uint64_t)v64, v62);
    sub_14D9C();
    v61(v64);
    swift_release(v44);
    unint64_t v68 = *(void (**)(uint64_t, char *))(v63 + 8);
    uint64_t v69 = (uint64_t)v64;
    unint64_t v70 = (char *)v62;
  }

  v68(v69, v70);
  sub_10F48();
}

uint64_t sub_18D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = [*(id *)(a1 + 8) spokenPhrase];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a3, a5);
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = [v11 spokenPhrase];

    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v16 = v15;

    if (v8 == v14 && v10 == v16)
    {
      char v18 = 1;
      uint64_t v16 = v10;
    }

    else
    {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v14, v16, 0LL);
    }

    swift_bridgeObjectRelease(v10);
    uint64_t v10 = v16;
  }

  else
  {
    char v18 = 0;
  }

  swift_bridgeObjectRelease(v10);
  return v18 & 1;
}

void sub_18E24( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t a9, uint64_t a10)
{
  uint64_t v99 = a1;
  uint64_t v103 = a10;
  uint64_t v104 = a7;
  sub_6358((uint64_t *)&unk_8F3A0);
  sub_C870();
  __chkstk_darwin(v13);
  sub_6BD8();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v102 = *(void *)(v17 - 8);
  sub_C870();
  __chkstk_darwin(v18);
  sub_6BD8();
  uint64_t v101 = v20 - v19;
  uint64_t v21 = sub_8908();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_17BBC();
  uint64_t v25 = (os_log_s *)(v23 - v24);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v94 - v27;
  swift_bridgeObjectRetain();
  v109._countAndFlagsBits = a3;
  v109._object = a4;
  unint64_t v29 = sub_3E500(v109);
  if (v29 == 3)
  {
    uint64_t v30 = sub_14048();
    sub_1400C(v30);
    uint64_t v31 = sub_BD3C(2u);
    uint64_t v32 = Logger.health.unsafeMutableAddressor(v31);
    sub_8894(v32, (uint64_t)v108);
    sub_19A40((uint64_t)v25, v32, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16));
    uint64_t v33 = sub_14068(v31);
    Logger.logObject.getter(v33);
    os_log_type_t v34 = sub_140C8();
    if (sub_199F8(v34))
    {
      uint64_t v35 = sub_88B0(22LL);
      uint64_t v97 = a8;
      uint64_t v36 = v35;
      uint64_t v37 = sub_88B0(8LL);
      uint64_t v96 = v21;
      uint64_t v102 = v37;
      uint64_t v104 = sub_88B0(32LL);
      v106[0] = v104;
      *(_DWORD *)uint64_t v36 = 136315394;
      uint64_t v98 = a9;
      uint64_t v38 = sub_19A08(v103);
      uint64_t v39 = v30;
      unint64_t v41 = v40;
      uint64_t v105 = sub_173E0(v38, v40, v106);
      sub_19A7C((uint64_t)&v105, (uint64_t)v106);
      swift_bridgeObjectRelease(v41);
      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v42 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      uint64_t v43 = sub_13FF8(v39, v42);
      *uint64_t v44 = v31;
      swift_retain(v31);
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError(v43);
      uint64_t v105 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
      uint64_t v46 = v102;
      *(void *)uint64_t v102 = v45;
      uint64_t v30 = v39;
      sub_14004(v31);
      sub_14080(&dword_0, v25, (os_log_type_t)v17, "%s Error: %@", (uint8_t *)v36);
      sub_6358(&qword_8C360);
      sub_B334(v46);
      sub_8870(v46);
      uint64_t v47 = v104;
      sub_B334(v104);
      sub_8870(v47);
      uint64_t v48 = v36;
      a8 = v97;
      sub_8870(v48);

      (*(void (**)(os_log_s *, uint64_t))(v22 + 8))(v25, v96);
    }

    else
    {

      sub_14004(v31);
      (*(void (**)(os_log_s *, uint64_t))(v22 + 8))(v25, v21);
    }

    uint64_t v66 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v67 = sub_13FF8(v30, v66);
    *unint64_t v68 = v31;
    v106[0] = v67;
    char v107 = 1;
    swift_retain(v31);
    a8(v106);
    swift_release(v31);
    sub_6B60((uint64_t)v106, (uint64_t *)&unk_8F3E0);
    goto LABEL_30;
  }

  char v49 = v29;
  uint64_t v98 = a9;
  uint64_t v50 = Logger.health.unsafeMutableAddressor(v29);
  sub_8894(v50, (uint64_t)v108);
  uint64_t v51 = sub_19A40((uint64_t)v28, v50, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16));
  uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
  uint64_t v53 = v21;
  os_log_type_t v54 = static os_log_type_t.debug.getter(v52);
  BOOL v55 = os_log_type_enabled(v52, v54);
  uint64_t v94 = v17;
  uint64_t v95 = v16;
  if (v55)
  {
    uint64_t v96 = v53;
    uint64_t v56 = sub_88B0(22LL);
    uint64_t v57 = sub_88B0(64LL);
    v106[0] = v57;
    *(_DWORD *)uint64_t v56 = 136315394;
    uint64_t v58 = sub_19A08(v103);
    unint64_t v60 = v59;
    uint64_t v61 = sub_173E0(v58, v59, v106);
    uint64_t v62 = sub_19A5C(v61);
    sub_19A7C(v62, v63);
    swift_bridgeObjectRelease(v60);
    *(_WORD *)(v56 + 12) = 2080;
    if (v49)
    {
      uint64_t v64 = 0xD000000000000013LL;
      if (v49 == 1) {
        unint64_t v65 = 0x80000000000685C0LL;
      }
      else {
        unint64_t v65 = 0x80000000000685E0LL;
      }
    }

    else
    {
      unint64_t v65 = 0xEB00000000656D61LL;
      uint64_t v64 = 0x4E74756F6B726F77LL;
    }

    uint64_t v69 = sub_173E0(v64, v65, v106);
    uint64_t v70 = sub_19A5C(v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v70, v71);
    sub_17C4C();
    sub_14080(&dword_0, v52, v54, "%s Generating prompt to disambiguate %s", (uint8_t *)v56);
    swift_arrayDestroy(v57, 2LL);
    sub_8870(v57);
    sub_8870(v56);

    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v96);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v53);
  }

  uint64_t v72 = sub_6358(&qword_8D048);
  uint64_t v73 = PaginatedItemContainer.items.getter(v72);
  uint64_t v74 = v73;
  if (!((unint64_t)v73 >> 62))
  {
    uint64_t v75 = *(void *)((char *)&dword_10 + (v73 & 0xFFFFFFFFFFFFF8LL));
    if (v75) {
      goto LABEL_16;
    }
LABEL_28:
    sub_17C4C();
    __int128 v77 = &_swiftEmptyArrayStorage;
LABEL_29:
    uint64_t v87 = v101;
    sub_34580((uint64_t)v77);
    sub_10F84();
    type metadata accessor for DisambiguationStrategyHelper();
    uint64_t v88 = PaginatedItemContainer.items.getter(v72);
    static Device.current.getter(v106);
    uint64_t v89 = (void *)sub_302F8();
    swift_bridgeObjectRelease(v88);
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v106);
    uint64_t v90 = v100[3];
    uint64_t v91 = v100[4];
    sub_8734(v100, v90);
    uint64_t v92 = v95;
    uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 16))(v90, v91);
    __chkstk_darwin(v93);
    *(&v94 - 2) = (uint64_t)v89;
    *(&v94 - 1) = v87;
    sub_4A714((void (*)(uint64_t))sub_19868, (uint64_t)v106);
    a8(v106);

    sub_6B60((uint64_t)v106, (uint64_t *)&unk_8F3E0);
    sub_6B60(v92, (uint64_t *)&unk_8F3A0);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v87, v94);
LABEL_30:
    sub_10F48();
    return;
  }

  if (v73 >= 0) {
    v73 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v75 = _CocoaArrayWrapper.endIndex.getter(v73);
  if (!v75) {
    goto LABEL_28;
  }
LABEL_16:
  v106[0] = (uint64_t)&_swiftEmptyArrayStorage;
  sub_3B5D4(0, v75 & ~(v75 >> 63), 0);
  if ((v75 & 0x8000000000000000LL) == 0)
  {
    uint64_t v103 = v72;
    uint64_t v97 = a8;
    uint64_t v76 = 0LL;
    __int128 v77 = (void *)v106[0];
    do
    {
      if ((v74 & 0xC000000000000001LL) != 0) {
        id v78 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v76, v74);
      }
      else {
        id v78 = *(id *)(v74 + 8 * v76 + 32);
      }
      uint64_t v79 = v78;
      id v80 = objc_msgSend(v78, "spokenPhrase", v94);
      uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
      uint64_t v83 = v82;

      v106[0] = (uint64_t)v77;
      unint64_t v85 = v77[2];
      unint64_t v84 = v77[3];
      if (v85 >= v84 >> 1)
      {
        sub_3B5D4(v84 > 1, v85 + 1, 1);
        __int128 v77 = (void *)v106[0];
      }

      ++v76;
      v77[2] = v85 + 1;
      uint64_t v86 = (char *)&v77[2 * v85];
      *((void *)v86 + 4) = v81;
      *((void *)v86 + 5) = v83;
    }

    while (v75 != v76);
    sub_17C4C();
    a8 = v97;
    uint64_t v72 = v103;
    goto LABEL_29;
  }

  __break(1u);
}

uint64_t sub_19578@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = sub_6358(&qword_8C348);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Device.current.getter(v25);
  static Device.current.getter(v22);
  uint64_t v11 = v23;
  uint64_t v12 = v24;
  sub_8734(v22, v23);
  LOBYTE(v11) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v11, v12);
  uint64_t v13 = sub_6358(&qword_8E9B0);
  uint64_t v14 = swift_allocObject(v13, 40LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_61780;
  *(void *)(v14 + 32) = a2;
  *(void *)&v20[0] = v14;
  specialized Array._endMutation()(v14);
  uint64_t v15 = *(void *)&v20[0];
  uint64_t v16 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v10, a3, v16);
  sub_8760((uint64_t)v10, 0LL, 1LL, v16);
  uint64_t v17 = type metadata accessor for AceOutput(0LL);
  memset(v20, 0, sizeof(v20));
  uint64_t v21 = 0LL;
  a4[3] = v17;
  a4[4] = &protocol witness table for AceOutput;
  sub_6B9C(a4);
  id v18 = a2;
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a1,  v25,  v11 & 1,  v15,  1LL,  1LL,  v10,  &_swiftEmptyArrayStorage,  v20);
  swift_bridgeObjectRelease(v15);
  sub_6B60((uint64_t)v20, (uint64_t *)&unk_8F3F0);
  sub_6B60((uint64_t)v10, &qword_8C348);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v25);
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v22);
}

uint64_t sub_19750( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = swift_allocObject(&unk_80450, 32LL, 7LL);
  *(void *)(v12 + 16) = a7;
  *(void *)(v12 + 24) = a8;
  uint64_t v13 = swift_retain(a8);
  sub_17F98(v13, v14, v15, v16, v17, a6, (void (*)(uint64_t, uint64_t))sub_198B4, v12, a9);
  return swift_release(v12);
}

__n128 sub_197D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t *), uint64_t a10, uint64_t a11)
{
  return result;
}

void sub_197FC( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t a9, uint64_t a10)
{
}

uint64_t sub_19808()
{
  return NeedsDisambiguationFlowStrategy.makeRepromptOnEmptyParse(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:paginatedItems:_:)();
}

uint64_t sub_1981C()
{
  return NeedsDisambiguationFlowStrategy.makeRepromptOnLowConfidence(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:paginatedItems:_:)();
}

uint64_t sub_19830()
{
  return NeedsDisambiguationFlowStrategy.makePromptForDeviceUnlock(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)();
}

uint64_t sub_1983C()
{
  return NeedsDisambiguationFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)();
}

uint64_t sub_19848(uint64_t a1)
{
  return swift_getWitnessTable(&unk_62418, a1);
}

uint64_t sub_19858(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for BasicDisambiguationItemContainer<A>, a1);
}

uint64_t sub_19868@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_19578(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_19870(uint64_t a1)
{
  return sub_18D1C(a1, v1[5], v1[2], v1[3], v1[4]) & 1;
}

uint64_t sub_19890()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_198B4(uint64_t a1, char a2)
{
  return sub_3A10C(a1, a2 & 1, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

uint64_t getEnumTagSinglePayload for WorkoutsDisambiguationError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for WorkoutsDisambiguationError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_19954 + 4 * asc_623A0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_19974 + 4 * byte_623A5[v4]))();
  }
}

_BYTE *sub_19954(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_19974(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_1997C(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_19984(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_1998C(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_19994(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

uint64_t sub_199A0()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for WorkoutsDisambiguationError()
{
  return &type metadata for WorkoutsDisambiguationError;
}

unint64_t sub_199BC()
{
  unint64_t result = qword_8D068;
  if (!qword_8D068)
  {
    unint64_t result = swift_getWitnessTable(&unk_6255C, &type metadata for WorkoutsDisambiguationError);
    atomic_store(result, (unint64_t *)&qword_8D068);
  }

  return result;
}

BOOL sub_199F8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_19A08(uint64_t a1)
{
  return _typeName(_:qualified:)(a1, 0LL);
}

uint64_t sub_19A10()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v0);
}

  ;
}

uint64_t sub_19A38(uint64_t a1, unint64_t a2)
{
  return sub_173E0(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_19A40@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_19A48@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_19A50@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_19A5C(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t sub_19A70(uint64_t a1, void *a2)
{
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_19A7C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_19A84(uint64_t a1)
{
  return v1(a1, v3, v2);
}

uint64_t sub_19A90@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_19A9C()
{
  return *(void *)(v0 - 272);
}

uint64_t sub_19AB0(char *a1, uint64_t a2)
{
  uint64_t v56 = a1;
  uint64_t v57 = a2;
  uint64_t v2 = type metadata accessor for DeviceIdiom(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v53 - v7;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v53 - v15;
  uint64_t v17 = Logger.workout.unsafeMutableAddressor(v14);
  sub_8894(v17, (uint64_t)v60);
  os_log_type_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v55 = v17;
  uint64_t v18 = v54(v16, v17, v9);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.debug.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v53 = v6;
    uint64_t v22 = v13;
    uint64_t v23 = v3;
    uint64_t v24 = v9;
    uint64_t v25 = v8;
    uint64_t v26 = v2;
    uint64_t v27 = v21;
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_0, v19, v20, "Selecting a destination for the request", v21, 2u);
    uint64_t v28 = (uint64_t)v27;
    uint64_t v2 = v26;
    uint64_t v8 = v25;
    uint64_t v9 = v24;
    uint64_t v3 = v23;
    uint64_t v13 = v22;
    uint64_t v6 = v53;
    sub_8870(v28);
  }

  unint64_t v29 = *(void (**)(char *, uint64_t))(v10 + 8);
  v29(v16, v9);
  currentIdiom(deviceState:)(v57);
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v30(v6, v8, v2);
  int v31 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v31 == enum case for DeviceIdiom.homepod(_:))
  {
    uint64_t v32 = sub_6358(&qword_8D070);
    uint64_t v33 = sub_1A154(v32);
    *(_OWORD *)(v33 + 16) = xmmword_61030;
    uint64_t v34 = v33 + v10;
    uint64_t v35 = (unsigned int *)&enum case for DeviceIdiom.tv(_:);
  }

  else
  {
    if (v31 != enum case for DeviceIdiom.phone(_:))
    {
      uint64_t v51 = sub_6358(&qword_8D070);
      uint64_t v33 = sub_1A154(v51);
      *(_OWORD *)(v33 + 16) = xmmword_61030;
      sub_1A170(v33 + v10);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      return v33;
    }

    uint64_t v36 = (uint64_t)v56;
    sub_DD98();
    uint64_t v38 = v37;
    if (v37) {
      swift_release(v37);
    }
    uint64_t v53 = (char *)v2;
    LODWORD(v2) = sub_294B4();
    LODWORD(v57) = sub_19F38(v36);
    uint64_t v39 = v55;
    sub_8894(v55, (uint64_t)v59);
    uint64_t v40 = v54(v13, v39, v9);
    uint64_t v56 = v13;
    unint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.debug.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (_DWORD *)swift_slowAlloc(20LL, -1LL);
      LODWORD(v55) = v2;
      uint64_t v2 = (uint64_t)v43;
      _DWORD *v43 = 67109632;
      int v58 = v38 != 0;
      os_log_type_t v54 = (uint64_t (*)(char *, uint64_t, uint64_t))v30;
      sub_1A180();
      *(_WORD *)(v2 + 8) = 1024;
      int v58 = v55 & 1;
      sub_1A180();
      *(_WORD *)(v2 + 14) = 1024;
      int v58 = v57 & 1;
      uint64_t v30 = (void (*)(char *, char *, uint64_t))v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);
      _os_log_impl( &dword_0,  v41,  v42,  "isAppInParse: %{BOOL}d, isExplicitlyFitnessPlusRequest: %{BOOL}d, isAny3pFitnessAppInstalled: %{BOOL}d",  (uint8_t *)v2,  0x14u);
      uint64_t v44 = v2;
      LOBYTE(v2) = v55;
      sub_8870(v44);
    }

    v29(v56, v9);
    char v45 = (v38 != 0) | v2 | v57;
    uint64_t v46 = sub_6358(&qword_8D070);
    uint64_t v47 = *(void *)(v3 + 72);
    uint64_t v48 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v49 = (v48 + 32) & ~v48;
    uint64_t v33 = swift_allocObject(v46, v49 + 2 * v47, v48 | 7);
    *(_OWORD *)(v33 + 16) = xmmword_61440;
    uint64_t v50 = v33 + v49;
    if ((v45 & 1) == 0)
    {
      (*(void (**)(uint64_t, void, char *))(v3 + 104))(v50, enum case for DeviceIdiom.watch(_:), v53);
      sub_1A170(v50 + v47);
      return v33;
    }

    uint64_t v2 = (uint64_t)v53;
    v30((char *)v50, v8, (uint64_t)v53);
    uint64_t v34 = v50 + v47;
    uint64_t v35 = (unsigned int *)&enum case for DeviceIdiom.watch(_:);
  }

  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v34, *v35, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v33;
}

uint64_t sub_19F38(uint64_t a1)
{
  unsigned __int8 v1 = sub_C0E0(a1);
  if (v1 == 5)
  {
    char v2 = 0;
  }

  else
  {
    uint64_t v3 = sub_1A0C8(v1);
    uint64_t v5 = v4;
    Swift::Int v6 = sub_44070((uint64_t)&off_7EEA8);
    uint64_t v7 = static AppFinder.listApps(intentID:siriAuthorizationRestriction:)(v3, v5, v6);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    uint64_t v8 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain();
    if (v8)
    {
      while (1)
      {
        if ((v7 & 0xC000000000000001LL) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v7);
        }

        else
        {
          uint64_t v9 = *(void *)(v7 + 32);
          swift_retain(v9);
        }

        Swift::Bool v10 = App.isFirstParty()();
        swift_release(v9);
        if (!v10) {
          break;
        }
        if (v8 != 1)
        {
          uint64_t v11 = 5LL;
          while (1)
          {
            if ((v7 & 0xC000000000000001LL) != 0)
            {
              uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v7);
            }

            else
            {
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              swift_retain(v12);
            }

            uint64_t v13 = v11 - 3;
            if (__OFADD__(v11 - 4, 1LL)) {
              break;
            }
            Swift::Bool v14 = App.isFirstParty()();
            swift_release(v12);
            if (v14)
            {
              ++v11;
              if (v13 != v8) {
                continue;
              }
            }

            char v2 = !v14;
            goto LABEL_19;
          }

          __break(1u);
LABEL_22:
          uint64_t v16 = v7 < 0 ? v7 : v7 & 0xFFFFFFFFFFFFFF8LL;
          swift_bridgeObjectRetain();
          uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v16);
          if (v8) {
            continue;
          }
        }

        goto LABEL_9;
      }

      char v2 = 1;
    }

    else
    {
LABEL_9:
      char v2 = 0;
    }

LABEL_19:
    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  return v2 & 1;
}

uint64_t sub_1A0C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A104 + 4 * byte_625D0[a1]))( 0xD000000000000015LL,  0x80000000000696F0LL);
}

unint64_t sub_1A104()
{
  return 0xD000000000000014LL;
}

void sub_1A13C()
{
}

uint64_t sub_1A154(uint64_t a1)
{
  return swift_allocObject( a1,  ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
         + *(void *)(v1 + 72),
           *(unsigned __int8 *)(v1 + 80) | 7LL);
}

uint64_t sub_1A170(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(a1, v3, v2);
}

uint64_t sub_1A180()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 132, v0);
}

uint64_t getEnumTagSinglePayload for HealthReference(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xDE)
  {
    if (a2 + 34 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 34) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 35;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for HealthReference(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 34 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 34) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xDE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xDD) {
    return ((uint64_t (*)(void))((char *)&loc_1A260 + 4 * byte_625E5[v4]))();
  }
  *a1 = a2 + 34;
  return ((uint64_t (*)(void))((char *)sub_1A294 + 4 * byte_625E0[v4]))();
}

uint64_t sub_1A294(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1A2A4LL);
  }
  return result;
}

uint64_t sub_1A2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1A2B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 34;
  return result;
}

uint64_t sub_1A2BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthReference()
{
  return &type metadata for HealthReference;
}

unint64_t sub_1A2E4()
{
  unint64_t result = qword_8D078;
  if (!qword_8D078)
  {
    unint64_t result = swift_getWitnessTable(&unk_626AC, &type metadata for HealthReference);
    atomic_store(result, (unint64_t *)&qword_8D078);
  }

  return result;
}

uint64_t sub_1A320(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_7EED8, a1, a2, &unk_8BC48);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x23) {
    return 35LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1A370(char a1)
{
  return *(void *)&aFirst_1[8 * a1];
}

void sub_1A390(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_1A39C()
{
}

uint64_t sub_1A3A4(uint64_t a1)
{
  return sub_B7A0(a1, *v1);
}

void sub_1A3AC(uint64_t a1)
{
}

uint64_t sub_1A3B4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1A320(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1A3E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1A370(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1A408(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1A4DC();
  unint64_t v5 = sub_1A518();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v4, v5);
}

unint64_t sub_1A460()
{
  unint64_t result = qword_8D080;
  if (!qword_8D080)
  {
    unint64_t result = swift_getWitnessTable(&unk_6261C, &type metadata for HealthReference);
    atomic_store(result, (unint64_t *)&qword_8D080);
  }

  return result;
}

unint64_t sub_1A4A0()
{
  unint64_t result = qword_8D088;
  if (!qword_8D088)
  {
    unint64_t result = swift_getWitnessTable(&unk_626EC, &type metadata for HealthReference);
    atomic_store(result, (unint64_t *)&qword_8D088);
  }

  return result;
}

unint64_t sub_1A4DC()
{
  unint64_t result = qword_8D090;
  if (!qword_8D090)
  {
    unint64_t result = swift_getWitnessTable(&unk_6264C, &type metadata for HealthReference);
    atomic_store(result, (unint64_t *)&qword_8D090);
  }

  return result;
}

unint64_t sub_1A518()
{
  unint64_t result = qword_8D098;
  if (!qword_8D098)
  {
    unint64_t result = swift_getWitnessTable(&unk_62674, &type metadata for HealthReference);
    atomic_store(result, (unint64_t *)&qword_8D098);
  }

  return result;
}

uint64_t sub_1A554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_6358((uint64_t *)&unk_8F3A0);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_13F34(a1, (uint64_t)v12);
  uint64_t result = swift_getEnumCaseMultiPayload(v12, v10);
  int v14 = result;
  if ((_DWORD)result == 1)
  {
    *(void *)a3 = *v12;
  }

  else
  {
    (*(void (**)(char *, void *, uint64_t))(v7 + 32))(v9, v12, v6);
    sub_1B298((uint64_t)v9, a2, (void *)a3);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  *(_BYTE *)(a3 + 40) = v14 == 1;
  return result;
}

void sub_1A678( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, void (*a7)(uint64_t *), uint64_t a8)
{
  uint64_t v108 = a8;
  Swift::String v109 = a7;
  uint64_t v104 = a5;
  uint64_t v105 = a4;
  uint64_t v106 = a3;
  uint64_t v112 = sub_6358(&qword_8D168);
  sub_6C04();
  __chkstk_darwin(v8);
  sub_C838();
  char v107 = v9;
  type metadata accessor for HealthNLIntent(0LL);
  sub_6C04();
  __chkstk_darwin(v10);
  sub_C838();
  uint64_t v101 = v11;
  uint64_t v102 = type metadata accessor for NLIntent(0LL);
  uint64_t v100 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  sub_C838();
  uint64_t v99 = v12;
  uint64_t v13 = type metadata accessor for Parse(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  os_log_type_t v20 = (char *)&v98 - v19;
  uint64_t v21 = static os_log_type_t.debug.getter(v18);
  unsigned int v103 = v21;
  uint64_t v110 = (void **)Log.health.unsafeMutableAddressor(v21);
  uint64_t v22 = *v110;
  uint64_t v111 = sub_6358(&qword_8BE60);
  uint64_t v23 = sub_65A4(v111, 112LL);
  __int128 v98 = xmmword_61440;
  *(_OWORD *)(v23 + 16) = xmmword_61440;
  id v114 = 0LL;
  unint64_t v115 = 0xE000000000000000LL;
  id v24 = v22;
  Input.parse.getter(v24);
  _print_unlocked<A, B>(_:_:)(v20, &v114);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v14 + 8);
  v25(v20, v13);
  id v26 = v114;
  unint64_t v27 = v115;
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v28 = sub_64A0();
  *(void *)(v23 + 64) = v28;
  *(void *)(v23 + 32) = v26;
  *(void *)(v23 + 40) = v27;
  *(void *)(v23 + 96) = sub_AF38(0LL, &qword_8D170, &OBJC_CLASS___INIntentResolutionResult_ptr);
  *(void *)(v23 + 104) = sub_1B7FC();
  unint64_t v29 = v104;
  *(void *)(v23 + 72) = v104;
  id v30 = v29;
  sub_1B860(v103, (uint64_t)&dword_0, (uint64_t)v24, (uint64_t)"Disambiguation input: %@ with result %@", 39LL);

  swift_bridgeObjectRelease(v23);
  int v31 = v105;
  swift_bridgeObjectRetain();
  v117._countAndFlagsBits = v106;
  v117._object = v31;
  unint64_t v32 = sub_3E500(v117);
  if (v32 != 3)
  {
    char v35 = v32;
    Input.parse.getter(v32);
    if ((*(unsigned int (**)(char *, uint64_t))(v14 + 88))(v17, v13) != enum case for Parse.NLv3IntentOnly(_:))
    {
      v25(v17, v13);
      uint64_t v33 = sub_14048();
      sub_65A4(v33, 40LL);
      unsigned __int8 v34 = 0;
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v14 + 96))(v17, v13);
    uint64_t v36 = v100;
    uint64_t v37 = v99;
    uint64_t v38 = v102;
    (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v99, v17, v102);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v101, v37, v38);
    uint64_t v106 = sub_AF38(0LL, (unint64_t *)&qword_8C828, &OBJC_CLASS___INStartWorkoutIntent_ptr);
    id v39 = sub_509B0();
    uint64_t v40 = static os_log_type_t.debug.getter(v39);
    unint64_t v41 = *v110;
    uint64_t v42 = sub_65A4(v111, 112LL);
    *(_OWORD *)(v42 + 16) = v98;
    id v43 = v41;
    sub_4F3A0();
    *(void *)(v42 + 56) = &type metadata for String;
    *(void *)(v42 + 64) = v28;
    *(void *)(v42 + 32) = v44;
    *(void *)(v42 + 40) = v45;
    id v46 = [v39 description];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    uint64_t v49 = v48;

    *(void *)(v42 + 96) = &type metadata for String;
    *(void *)(v42 + 104) = v28;
    unint64_t v50 = v28;
    *(void *)(v42 + 72) = v47;
    *(void *)(v42 + 80) = v49;
    uint64_t v51 = v39;
    sub_1B860(v40, (uint64_t)&dword_0, (uint64_t)v43, (uint64_t)"Updated Health Intent: %@ and Workout Itent: %@", 47LL);

    uint64_t v52 = swift_bridgeObjectRelease(v42);
    id v53 = sub_1B84C(v52, "verb");
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    uint64_t v56 = v55;

    if (v54 == 0x6C65636E6163LL && v56 == 0xE600000000000000LL)
    {
      swift_bridgeObjectRelease(v56);
      unint64_t v60 = v107;
      uint64_t v61 = v112;
    }

    else
    {
      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v56, 0x6C65636E6163LL, 0xE600000000000000LL, 0LL);
      uint64_t v59 = swift_bridgeObjectRelease(v56);
      unint64_t v60 = v107;
      uint64_t v61 = v112;
      if ((v58 & 1) == 0)
      {
        if (v35)
        {
          uint64_t v62 = v110;
          uint64_t v63 = v111;
          if (v35 == 1)
          {
            id v64 = sub_1B84C(v59, "workoutGoalUnitType");
            type metadata accessor for INWorkoutGoalUnitType(0LL);
          }

          else
          {
            id v64 = sub_1B84C(v59, "workoutLocationType");
            type metadata accessor for INWorkoutLocationType(0LL);
          }

          uint64_t v116 = v65;
          id v114 = v64;
        }

        else
        {
          id v86 = sub_1B84C(v59, "workoutName");
          uint64_t v65 = sub_6358(&qword_8CB50);
          uint64_t v116 = v65;
          id v114 = v86;
          uint64_t v62 = v110;
          uint64_t v63 = v111;
        }

        uint64_t v87 = static os_log_type_t.debug.getter(v65);
        uint64_t v88 = *v62;
        uint64_t v89 = sub_65A4(v63, 72LL);
        *(_OWORD *)(v89 + 16) = xmmword_61030;
        id v90 = v88;
        id v91 = sub_1B84C((uint64_t)v90, "description");
        uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
        uint64_t v93 = v51;
        uint64_t v95 = v94;

        *(void *)(v89 + 56) = &type metadata for String;
        *(void *)(v89 + 64) = v50;
        *(void *)(v89 + 32) = v92;
        *(void *)(v89 + 40) = v95;
        sub_1B854(v87, (uint64_t)&dword_0, (uint64_t)v90, (uint64_t)"Updated intent after prompting for value: %@", 44LL);

        swift_bridgeObjectRelease(v89);
        sub_13FB8((uint64_t)&v114, (uint64_t)v113);
        id v96 = v93;
        IntentPromptAnswer.init(answeredValue:updatedIntent:)(v113, v96, v106);
        uint64_t v97 = sub_6358(&qword_8D180);
        sub_8760((uint64_t)v60, 0LL, 1LL, v97);
        swift_storeEnumTagMultiPayload(v60, v112, 0LL);
        v109(v60);

        sub_6B60((uint64_t)v60, &qword_8D168);
        _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(&v114);
        goto LABEL_20;
      }
    }

    uint64_t v79 = sub_14048();
    sub_65A4(v79, 40LL);
    uint64_t v80 = sub_BD3C(9u);
    uint64_t v83 = sub_1B874((unint64_t *)&qword_8BE70, v81, v82, (uint64_t)&unk_61B3C);
    uint64_t v84 = sub_13FF8(v79, v83);
    *unint64_t v85 = v80;
    uint64_t *v60 = v84;
    swift_storeEnumTagMultiPayload(v60, v61, 1LL);
    sub_1B86C();
    v109(v60);

    sub_DCEC();
    sub_6B60((uint64_t)v60, &qword_8D168);
LABEL_20:
    sub_C594(v101);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v99, v102);
    goto LABEL_21;
  }

  uint64_t v33 = sub_14048();
  sub_65A4(v33, 40LL);
  unsigned __int8 v34 = 2;
LABEL_13:
  uint64_t v66 = sub_BD3C(v34);
  uint64_t v67 = static os_log_type_t.error.getter();
  unint64_t v68 = *v110;
  uint64_t v69 = sub_65A4(v111, 72LL);
  *(_OWORD *)(v69 + 16) = xmmword_61030;
  id v70 = v68;
  uint64_t v71 = sub_BC64();
  *(void *)(v69 + 56) = &type metadata for String;
  *(void *)(v69 + 64) = v28;
  *(void *)(v69 + 32) = v71;
  *(void *)(v69 + 40) = v72;
  os_log(_:dso:log:_:_:)(v67, &dword_0, v70, "StartWorkout- Needs Value Strategy: %@", 38LL, 2LL, v69);

  swift_bridgeObjectRelease(v69);
  uint64_t v75 = sub_1B874((unint64_t *)&qword_8BE70, v73, v74, (uint64_t)&unk_61B3C);
  uint64_t v76 = sub_13FF8(v33, v75);
  *__int128 v77 = v66;
  uint64_t v78 = (uint64_t)v107;
  *char v107 = v76;
  swift_storeEnumTagMultiPayload(v78, v112, 1LL);
  sub_1B86C();
  v109((uint64_t *)v78);
  sub_DCEC();
  sub_6B60(v78, &qword_8D168);
LABEL_21:
  sub_10F48();
}

void sub_1AE28( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void (*a6)(uint64_t *), uint64_t a7)
{
  uint64_t v11 = type metadata accessor for CATOption(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_C838();
  uint64_t v63 = v13;
  sub_6358((uint64_t *)&unk_8F3A0);
  sub_6C04();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  os_log_type_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain();
  v68._countAndFlagsBits = a3;
  v68._object = a4;
  unint64_t v21 = sub_3E500(v68);
  if (v21 == 3)
  {
    uint64_t v22 = sub_14048();
    sub_65A4(v22, 40LL);
    uint64_t v23 = sub_BD3C(2u);
    uint64_t v24 = static os_log_type_t.error.getter();
    uint64_t v25 = *(void **)Log.health.unsafeMutableAddressor(v24);
    uint64_t v26 = sub_6358(&qword_8BE60);
    uint64_t v27 = sub_65A4(v26, 72LL);
    *(_OWORD *)(v27 + 16) = xmmword_61030;
    id v28 = v25;
    uint64_t v29 = sub_BC64();
    uint64_t v31 = v30;
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = sub_64A0();
    *(void *)(v27 + 32) = v29;
    *(void *)(v27 + 40) = v31;
    os_log(_:dso:log:_:_:)(v24, &dword_0, v28, "StartWorkout- Needs Value Strategy: %@", 38LL, 2LL, v27);

    swift_bridgeObjectRelease(v27);
    uint64_t v32 = sub_1B7BC( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v33 = sub_13FF8(v22, v32);
    *unsigned __int8 v34 = v23;
    uint64_t v65 = v33;
    char v67 = 1;
    sub_1B86C();
    a6(&v65);
    sub_DCEC();
    sub_6B60((uint64_t)&v65, (uint64_t *)&unk_8F3E0);
  }

  else
  {
    uint64_t v35 = v21;
    uint64_t v36 = static os_log_type_t.debug.getter(v21);
    uint64_t v37 = (void **)Log.health.unsafeMutableAddressor(v36);
    uint64_t v61 = v17;
    uint64_t v38 = *v37;
    uint64_t v39 = sub_6358(&qword_8BE60);
    uint64_t v40 = sub_65A4(v39, 72LL);
    uint64_t v60 = a7;
    unint64_t v41 = (void *)v40;
    __int128 v62 = xmmword_61030;
    *(_OWORD *)(v40 + 16) = xmmword_61030;
    uint64_t v65 = 0LL;
    unint64_t v66 = 0xE000000000000000LL;
    char v64 = v35;
    id v42 = v38;
    _print_unlocked<A, B>(_:_:)(&v64, &v65);
    char v58 = a6;
    uint64_t v59 = v18;
    uint64_t v43 = v65;
    unint64_t v44 = v66;
    v41[7] = &type metadata for String;
    v41[8] = sub_64A0();
    v41[4] = v43;
    v41[5] = v44;
    sub_1B854(v36, (uint64_t)&dword_0, (uint64_t)v42, (uint64_t)"Generating prompt to get value for : %@", 39LL);

    uint64_t v45 = swift_bridgeObjectRelease(v41);
    sub_3461C(v45);
    uint64_t v46 = sub_6358(&qword_8C958);
    uint64_t v47 = sub_65A4(v46, 48LL);
    *(_OWORD *)(v47 + 16) = v62;
    uint64_t v65 = 0LL;
    unint64_t v66 = 0xE000000000000000LL;
    sub_30E30(3u);
    unint64_t v48 = v66;
    *(void *)(v47 + 32) = v65;
    *(void *)(v47 + 40) = v48;
    NLContextUpdate.weightedPromptResponseTargets.setter(v47);
    type metadata accessor for CATGlobals(0LL);
    uint64_t v49 = CATGlobals.__allocating_init()();
    uint64_t v50 = sub_6358(&qword_8CB30);
    uint64_t v51 = swift_allocObject( v50,  ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
          + *(void *)(v12 + 72),
            *(unsigned __int8 *)(v12 + 80) | 7LL);
    *(_OWORD *)(v51 + 16) = v62;
    static CATOption.defaultMode.getter();
    uint64_t v65 = v51;
    uint64_t v52 = sub_1B7BC( (unint64_t *)&unk_8F3B0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CATOption,  (uint64_t)&protocol conformance descriptor for CATOption);
    uint64_t v53 = sub_6358(&qword_8CB38);
    unint64_t v54 = sub_13EF0();
    uint64_t v55 = v63;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v53, v54, v11, v52);
    uint64_t v56 = type metadata accessor for HealthCATWrapper(0LL);
    swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
    uint64_t v57 = sub_466D4(v49, v55);
    sub_467F8(v35, 0);
    swift_release(v57);
    sub_1A554((uint64_t)v16, (uint64_t)v20, (uint64_t)&v65);
    v58(&v65);
    sub_6B60((uint64_t)&v65, (uint64_t *)&unk_8F3E0);
    sub_6B60((uint64_t)v16, (uint64_t *)&unk_8F3A0);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v20, v61);
  }

  sub_10F48();
}

uint64_t sub_1B298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_6358(&qword_8C348);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Device.current.getter(v20);
  static Device.current.getter(v17);
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  sub_8734(v17, v18);
  char v11 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v9, v10);
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v8, a2, v12);
  sub_8760((uint64_t)v8, 0LL, 1LL, v12);
  uint64_t v13 = type metadata accessor for AceOutput(0LL);
  memset(v15, 0, sizeof(v15));
  uint64_t v16 = 0LL;
  a3[3] = v13;
  a3[4] = &protocol witness table for AceOutput;
  sub_6B9C(a3);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a1,  v20,  v11 & 1,  &_swiftEmptyArrayStorage,  1LL,  1LL,  v8,  &_swiftEmptyArrayStorage,  v15);
  sub_6B60((uint64_t)v15, (uint64_t *)&unk_8F3F0);
  sub_6B60((uint64_t)v8, &qword_8C348);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v20);
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v17);
}

uint64_t type metadata accessor for StartWorkoutsNeedsValueStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin31StartWorkoutsNeedsValueStrategy);
}

void sub_1B430( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, void (*a7)(uint64_t *), uint64_t a8)
{
}

void sub_1B444( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void (*a6)(uint64_t *), uint64_t a7)
{
}

uint64_t sub_1B458( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t started = type metadata accessor for StartWorkoutsNeedsValueStrategy();
  return NeedsValueFlowStrategy.makeRepromptOnEmptyParse(app:intent:parameterName:intentResolutionResult:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  started,  a9);
}

uint64_t sub_1B4D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t started = type metadata accessor for StartWorkoutsNeedsValueStrategy();
  return NeedsValueFlowStrategy.makeRepromptOnLowConfidence(app:intent:parameterName:intentResolutionResult:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  started,  a9);
}

uint64_t sub_1B558( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t started = type metadata accessor for StartWorkoutsNeedsValueStrategy();
  return ParameterResolutionHandling.makeFlowCancelledResponse(app:intent:parameterName:_:)( a1,  a2,  a3,  a4,  a5,  a6,  started,  a8);
}

uint64_t sub_1B5C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t started = type metadata accessor for StartWorkoutsNeedsValueStrategy();
  return ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  started,  a9);
}

uint64_t sub_1B648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandling.makeFlowCancelledResponse(app:intent:parameterName:)[1]);
  *(void *)(v7 + 16) = v14;
  uint64_t started = type metadata accessor for StartWorkoutsNeedsValueStrategy();
  *uint64_t v14 = v7;
  v14[1] = sub_8640;
  return ParameterResolutionHandling.makeFlowCancelledResponse(app:intent:parameterName:)( a1,  a2,  a3,  a4,  a5,  started,  a7);
}

uint64_t sub_1B6E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:)[1]);
  *(void *)(v8 + 16) = v16;
  uint64_t started = type metadata accessor for StartWorkoutsNeedsValueStrategy();
  *uint64_t v16 = v8;
  v16[1] = sub_885C;
  return ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:)( a1,  a2,  a3,  a4,  a5,  a6,  started,  a8);
}

uint64_t sub_1B790(uint64_t a1, uint64_t a2)
{
  return sub_1B7BC( &qword_8D160,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for StartWorkoutsNeedsValueStrategy,  (uint64_t)&unk_62990);
}

uint64_t sub_1B7BC(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1B7FC()
{
  unint64_t result = qword_8D178;
  if (!qword_8D178)
  {
    uint64_t v1 = sub_AF38(255LL, &qword_8D170, &OBJC_CLASS___INIntentResolutionResult_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_8D178);
  }

  return result;
}

id sub_1B84C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1B854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, a5, 2LL, v5);
}

uint64_t sub_1B860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, a5, 2LL, v5);
}

uint64_t sub_1B86C()
{
  return swift_retain(v0);
}

uint64_t sub_1B874(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B7BC(a1, 255LL, v4, a4);
}

void *sub_1B880(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v6)
  {
    while (1)
    {
      uint64_t v17 = _swiftEmptyArrayStorage;
      unint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v6);
      if (v6 < 0) {
        break;
      }
      uint64_t v8 = 0LL;
      while (v6 != v8)
      {
        if ((a1 & 0xC000000000000001LL) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
        }

        else
        {
          uint64_t v9 = *(void *)(a1 + 8 * v8 + 32);
          swift_retain(v9);
        }

        sub_1E040(a2, &v16);
        uint64_t v10 = swift_release(v9);
        if (v3)
        {
          uint64_t v14 = v17;
          swift_release(a2);
          swift_release(v14);
          return (void *)v9;
        }

        ++v8;
        uint64_t v11 = v16;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        uint64_t v12 = v17[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
        uint64_t v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
        specialized ContiguousArray._endMutation()(v13);
        if (v6 == v8)
        {
          uint64_t v9 = (uint64_t)v17;
          swift_release(a2);
          return (void *)v9;
        }
      }

      __break(1u);
LABEL_14:
      if (a1 < 0) {
        uint64_t v15 = a1;
      }
      else {
        uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v15);
      swift_bridgeObjectRelease(a1);
      if (!v6) {
        goto LABEL_18;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_18:
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void sub_1BA18(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  __chkstk_darwin(v6);
  uint64_t v35 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v32 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v27 - v11;
  uint64_t v31 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v13 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v16)
  {
    while (1)
    {
      uint64_t v36 = _swiftEmptyArrayStorage;
      sub_3B648(0, v16 & ~(v16 >> 63), 0);
      if (v16 < 0) {
        break;
      }
      v27[0] = a2;
      v27[1] = v3;
      uint64_t v3 = 0LL;
      uint64_t v17 = v36;
      unint64_t v28 = a1 & 0xC000000000000001LL;
      uint64_t v29 = v16;
      uint64_t v30 = a1;
      while (v16 != v3)
      {
        if (v28)
        {
          uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
        }

        else
        {
          uint64_t v18 = *(void *)(a1 + 8 * v3 + 32);
          swift_retain(v18);
        }

        Siri_Nlu_External_UserStatedTask.init()();
        uint64_t v19 = v35;
        sub_1E29C();
        uint64_t v20 = Siri_Nlu_External_UserStatedTask.task.setter(v19);
        Siri_Nlu_External_UserDialogAct.init()(v20);
        unint64_t v21 = v32;
        uint64_t v22 = v33;
        uint64_t v23 = v34;
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v32, v12, v34);
        Siri_Nlu_External_UserDialogAct.userStatedTask.setter(v21);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v23);
        swift_release(v18);
        uint64_t v36 = v17;
        unint64_t v25 = v17[2];
        unint64_t v24 = v17[3];
        a2 = v25 + 1;
        if (v25 >= v24 >> 1)
        {
          sub_3B648(v24 > 1, v25 + 1, 1);
          uint64_t v17 = v36;
        }

        ++v3;
        v17[2] = a2;
        (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))( (unint64_t)v17 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
        + *(void *)(v13 + 72) * v25,
          v15,
          v31);
        uint64_t v16 = v29;
        a1 = v30;
        if (v29 == v3)
        {
          swift_release(v27[0]);
          return;
        }
      }

      __break(1u);
LABEL_14:
      if (a1 < 0) {
        uint64_t v26 = a1;
      }
      else {
        uint64_t v26 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v26);
      swift_bridgeObjectRelease(a1);
      if (!v16) {
        goto LABEL_18;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_18:
    swift_release(a2);
  }

void sub_1BCEC()
{
  uint64_t v3 = v2;
  sub_8908();
  sub_1F26C();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)v42 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v42 - v12;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0) {
      uint64_t v36 = v3;
    }
    else {
      uint64_t v36 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1F180();
    uint64_t v0 = _CocoaArrayWrapper.endIndex.getter(v36);
    uint64_t v11 = sub_140A4();
    if (v0)
    {
      sub_1F180();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v36);
      uint64_t v11 = sub_140A4();
LABEL_3:
      if (v14 == 1)
      {
        sub_100D4(0LL, (v3 & 0xC000000000000001LL) == 0, v3);
        if ((v3 & 0xC000000000000001LL) != 0)
        {
          sub_1F180();
          uint64_t v40 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3);
          uint64_t v41 = v3;
          uint64_t v15 = v40;
          uint64_t v16 = swift_bridgeObjectRelease(v41);
        }

        else
        {
          uint64_t v15 = *(void *)(v3 + 32);
          uint64_t v16 = swift_retain(v15);
        }

        uint64_t v17 = Logger.health.unsafeMutableAddressor(v16);
        sub_8894(v17, (uint64_t)v46);
        sub_1F188((uint64_t)v10, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
        uint64_t v18 = sub_14068(v15);
        uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
        os_log_type_t v20 = static os_log_type_t.debug.getter(v19);
        if (sub_1F1B8(v20))
        {
          unint64_t v21 = (uint8_t *)sub_88B0(12LL);
          uint64_t v43 = sub_88B0(32LL);
          uint64_t v44 = v15;
          uint64_t v45 = v43;
          *(_DWORD *)unint64_t v21 = 136315138;
          v42[1] = v21 + 4;
          uint64_t v22 = sub_111F4();
          sub_1F230( &qword_8C430,  v23,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
          uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v22, v24);
          uint64_t v27 = sub_173E0(v25, v26, &v45);
          uint64_t v28 = sub_1F208(v27);
          sub_1F1B0(v28, v29);
          sub_14004(v15);
          sub_10F84();
          sub_17C68(&dword_0, v19, (os_log_type_t)v0, "Only found 1 app, %s so we're using that", v21);
          uint64_t v30 = v43;
          sub_B334(v43);
          sub_8870(v30);
          sub_8870((uint64_t)v21);
        }

        else
        {

          sub_14004(v15);
        }

        sub_1F160((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
        sub_1F1A8();
        static AppResolutionAction.select(app:)(v15);
        swift_release(v15);
      }

      else
      {
        uint64_t v31 = Logger.health.unsafeMutableAddressor(v11);
        sub_8894(v31, (uint64_t)v46);
        uint64_t v32 = sub_1F188((uint64_t)v7, v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
        uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
        os_log_type_t v34 = static os_log_type_t.debug.getter(v33);
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = (uint8_t *)sub_88B0(2LL);
          *(_WORD *)uint64_t v35 = 0;
          sub_1F1E8(&dword_0, v33, v34, "Disambiguating apps", v35);
          sub_8870((uint64_t)v35);
        }

        sub_1F160((uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
        sub_1F1A8();
        static AppResolutionAction.disambiguate(apps:)(v3);
      }

      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v14 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8LL));
    if (v14) {
      goto LABEL_3;
    }
  }

  uint64_t v37 = (os_log_s *)Logger.health.unsafeMutableAddressor(v11);
  sub_8894((uint64_t)v37, (uint64_t)v46);
  sub_1F188((uint64_t)v13, (uint64_t)v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  sub_17C04();
  os_log_type_t v38 = sub_B33C();
  if (sub_B314(v38))
  {
    uint64_t v39 = (uint8_t *)sub_88B0(2LL);
    *(_WORD *)uint64_t v39 = 0;
    sub_1F1E8(&dword_0, v37, (os_log_type_t)v10, "No apps found using AppFinder", v39);
    sub_8870((uint64_t)v39);
  }

  sub_1F160((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1F1A8();
  static AppResolutionAction.noAppFound()();
LABEL_21:
  sub_10F48();
}

void sub_1C094(uint64_t a1)
{
  uint64_t v2 = App.appIdentifier.getter(a1);
  if (v3 && (Swift::Bool v4 = appBundleIsInstalled(_:)(*(Swift::String *)&v2), sub_17C4C(), v4))
  {
    sub_1F1A8();
    static AppResolutionAction.select(app:)(a1);
  }

  else
  {
    sub_1BCEC();
  }

unint64_t sub_1C100()
{
  return sub_5BF5C(qword_8D188);
}

uint64_t sub_1C130(uint64_t a1)
{
  v2[44] = a1;
  v2[45] = v1;
  uint64_t v3 = type metadata accessor for DeviceIdiom(0LL);
  v2[46] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[47] = v4;
  v2[48] = sub_8860(v4);
  uint64_t v5 = type metadata accessor for Parse(0LL);
  v2[49] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[50] = v6;
  v2[51] = sub_8860(v6);
  uint64_t v7 = sub_8908();
  v2[52] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[53] = v8;
  v2[54] = sub_B1E4(v8);
  v2[55] = sub_8924();
  v2[56] = sub_8924();
  v2[57] = sub_8924();
  v2[58] = sub_8924();
  v2[59] = sub_8924();
  sub_8910();
  return sub_887C();
}

uint64_t sub_1C1D4()
{
  uint64_t v110 = v1;
  uint64_t v111 = v2;
  uint64_t v109 = v0;
  uint64_t v3 = (void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 472);
  uint64_t v6 = *(void *)(v0 + 416);
  uint64_t v5 = *(void *)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 360);
  uint64_t v8 = Logger.health.unsafeMutableAddressor(v2);
  *(void *)(v0 + 480) = v8;
  sub_8894(v8, v0 + 232);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(void *)(v0 + 488) = v9;
  uint64_t v106 = v9;
  v9(v4, v8, v6);
  swift_retain(v7);
  sub_1F200();
  os_log_type_t v10 = sub_B33C();
  if (sub_1F11C(v10))
  {
    uint64_t v96 = v0 + 344;
    uint64_t v97 = *(void *)(v0 + 424);
    uint64_t v98 = *(void *)(v0 + 416);
    uint64_t v100 = *(void *)(v0 + 472);
    uint64_t v11 = *(void *)(v0 + 360);
    uint64_t v12 = (uint8_t *)sub_88B0(12LL);
    uint64_t v13 = sub_88B0(32LL);
    uint64_t v108 = v13;
    uint64_t v103 = v8;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v15 = *(void *)(v11 + 16);
    unint64_t v14 = *(void *)(v11 + 24);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 344) = sub_173E0(v15, v14, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352);
    sub_17C4C();
    swift_release(v11);
    sub_17C68(&dword_0, (os_log_s *)(v0 + 232), (os_log_type_t)v7, "Starting to resolve apps for %s", v12);
    sub_B334(v13);
    sub_8870(v13);
    sub_8870((uint64_t)v12);

    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v97 + 8);
    uint64_t v17 = v16(v100, v98);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 424);
    swift_release(*(void *)(v0 + 360));

    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
    uint64_t v19 = sub_1F19C();
    uint64_t v17 = v16(v19, v20);
  }

  *(void *)(v0 + 496) = v16;
  uint64_t v21 = *(void *)(v0 + 400);
  Input.parse.getter(v17);
  sub_DD98();
  uint64_t v23 = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t))(v21 + 8);
  uint64_t v25 = sub_1F190();
  uint64_t v26 = v24(v25);
  uint64_t v27 = *(void *)(v0 + 416);
  if (v23)
  {
    uint64_t v28 = *(void *)(v0 + 464);
    sub_8894(v8, v0 + 256);
    sub_1F254(v28, v8, v29, v30, v31, v32, v33, v34, v96, v97, v98, v100, v103, v106);
    uint64_t v35 = sub_14068(v23);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.debug.getter(v36);
    BOOL v38 = os_log_type_enabled(v36, v37);
    uint64_t v39 = *(void *)(v0 + 464);
    uint64_t v40 = *(void *)(v0 + 416);
    if (v38)
    {
      uint64_t v107 = *(void *)(v0 + 464);
      uint64_t v41 = (uint8_t *)sub_88B0(12LL);
      uint64_t v42 = sub_88B0(32LL);
      uint64_t v108 = v42;
      *(_DWORD *)uint64_t v41 = 136315138;
      *(void *)(v0 + 328) = v23;
      uint64_t v43 = sub_111F4();
      sub_1F230( &qword_8C430,  v44,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v43, v45);
      *(void *)(v0 + 336) = sub_1F288(v46, v47, v48, v49, v50, v51, v52, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344);
      sub_10F84();
      sub_14004(v23);
      sub_17C68(&dword_0, v36, v37, "Found app in intent, using that (%s)", v41);
      sub_B334(v42);
      sub_8870(v42);
      sub_8870((uint64_t)v41);

      v16(v107, v40);
    }

    else
    {
      sub_14004(v23);

      v16(v39, v40);
    }

    if (qword_8BB78 != -1) {
      swift_once(&qword_8BB78, sub_1C100);
    }
    sub_1EFE0((uint64_t)qword_8D188, v0 + 16);
    swift_bridgeObjectRetain();
    uint64_t v85 = sub_1F190();
    sub_49EA4(v85, v86, v23, 9);
    sub_1F238();
    sub_1F01C((void *)(v0 + 16));
    sub_1F1A8();
    uint64_t v87 = static AppResolutionAction.select(app:)(v23);
    swift_release(v23);
    sub_1F168();
    sub_88B8();
    sub_88D0();
    sub_8938();
    sub_B15C();
    sub_B16C();
    sub_B164();
    sub_B174();
    return sub_1F0E0(v87, *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v104 = (uint64_t)v16;
    uint64_t v54 = *(void *)(v0 + 456);
    uint64_t v55 = v8;
    uint64_t v56 = *(void *)(v0 + 408);
    uint64_t v57 = *(void *)(v0 + 392);
    Input.parse.getter(v26);
    sub_E940();
    uint64_t v59 = v58;
    uint64_t v101 = v60;
    *(void *)(v0 + 504) = v60;
    *(void *)(v0 + 512) = v58;
    ((void (*)(uint64_t, uint64_t))v24)(v56, v57);
    sub_8894(v55, v0 + 136);
    sub_1F254(v54, v55, v61, v62, v63, v64, v65, v66, v96, v97, v98, v101, v104, v106);
    uint64_t v67 = sub_1F240();
    Swift::String v68 = (os_log_s *)v54;
    Logger.logObject.getter(v67);
    os_log_type_t v69 = sub_B33C();
    BOOL v70 = sub_1F11C(v69);
    uint64_t v71 = *(void *)(v0 + 416);
    if (v70)
    {
      uint64_t v99 = *(void *)(v0 + 456);
      uint64_t v72 = (uint8_t *)sub_88B0(12LL);
      uint64_t v73 = sub_88B0(32LL);
      uint64_t v108 = v73;
      *(_DWORD *)uint64_t v72 = 136315138;
      *(void *)(v0 + 280) = v102;
      *(void *)(v0 + 288) = v59;
      swift_bridgeObjectRetain();
      uint64_t v74 = sub_6358(&qword_8F3D0);
      uint64_t v75 = String.init<A>(describing:)(v0 + 280, v74);
      *(void *)(v0 + 304) = sub_1F288(v75, v76, v77, v78, v79, v80, v81, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312);
      sub_17C0C();
      sub_1F12C(v59);
      sub_17C68(&dword_0, v68, (os_log_type_t)v27, "Got a modality: %s", v72);
      sub_B334(v73);
      sub_8870(v73);
      sub_8870((uint64_t)v72);

      uint64_t v83 = v99;
      uint64_t v84 = v71;
    }

    else
    {
      sub_1F12C(v59);

      uint64_t v83 = sub_1F19C();
    }

    v105(v83, v84);
    uint64_t v89 = *(void *)(v0 + 360);
    sub_B038(v89 + 32, v0 + 56);
    sub_1F1F0();
    uint64_t v90 = sub_1F190();
    v91(v90);
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(v0 + 56));
    uint64_t v93 = *(void *)(v89 + 16);
    uint64_t v92 = *(void *)(v89 + 24);
    *(void *)(v0 + 520) = v92;
    swift_bridgeObjectRetain();
    Swift::Int v94 = sub_44070((uint64_t)&off_7EEA8);
    *(void *)(v0 + 528) = v94;
    uint64_t v95 = (void *)swift_task_alloc(async function pointer to static AppFinder.listApps(intentID:siriAuthorizationRestriction:)[1]);
    *(void *)(v0 + 536) = v95;
    *uint64_t v95 = v0;
    v95[1] = sub_1C7D4;
    return ((uint64_t (*)(uint64_t, uint64_t, Swift::Int))static AppFinder.listApps(intentID:siriAuthorizationRestriction:))( v93,  v92,  v94);
  }

uint64_t sub_1C7D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 536LL);
  *(void *)(*(void *)v1 + 544LL) = a1;
  swift_task_dealloc(v2);
  sub_10F84();
  sub_C090();
  sub_8910();
  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_1C83C()
{
  uint64_t v1 = (void *)(v0 + 96);
  uint64_t v2 = *(os_log_s **)(v0 + 544);
  uint64_t v4 = *(void *)(v0 + 480);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  uint64_t v5 = *(void *)(v0 + 448);
  uint64_t v6 = *(void *)(v0 + 416);
  sub_8894(v4, v0 + 160);
  v3(v5, v4, v6);
  swift_bridgeObjectRetain_n(v2, 2LL);
  sub_17C04();
  os_log_type_t v7 = sub_B33C();
  BOOL v8 = os_log_type_enabled(v2, v7);
  unint64_t v9 = *(void *)(v0 + 544);
  if (v8)
  {
    os_log_type_t v10 = (uint8_t *)sub_88B0(12LL);
    *(_DWORD *)os_log_type_t v10 = 134217984;
    if (v9 >> 62)
    {
      else {
        uint64_t v61 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v61);
      sub_17C0C();
    }

    else
    {
      uint64_t v11 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
    }

    sub_17C0C();
    *(void *)(v0 + 296) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304);
    sub_17C0C();
    sub_17C68(&dword_0, v2, v7, "Found %ld apps", v10);
    sub_8870((uint64_t)v10);
  }

  else
  {
    sub_1F12C(*(void *)(v0 + 544));
  }

  (*(void (**)(void, void))(v0 + 496))(*(void *)(v0 + 448), *(void *)(v0 + 416));
  sub_8734((void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v12 = sub_1F190();
  char v14 = dispatch thunk of DeviceState.isWatch.getter(v12, v13);
  uint64_t v15 = *(os_log_s **)(v0 + 512);
  if ((v14 & 1) != 0)
  {
    uint64_t v16 = *(void *)(v0 + 504);
    uint64_t v17 = *(void *)(v0 + 480);
    uint64_t v18 = *(void *)(v0 + 440);
    uint64_t v19 = *(void *)(v0 + 416);
    uint64_t v20 = *(void *)(v0 + 376);
    uint64_t v21 = *(void *)(v0 + 384);
    uint64_t v22 = *(void *)(v0 + 368);
    uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
    currentIdiom(deviceState:)();
    if (v15) {
      uint64_t v23 = v16;
    }
    else {
      uint64_t v23 = 0LL;
    }
    if (v15) {
      unint64_t v24 = (unint64_t)v15;
    }
    else {
      unint64_t v24 = 0xE000000000000000LL;
    }
    char v25 = HealthLogName.init(rawValue:)(v23, v24);
    uint64_t v26 = defaultWorkoutApp(for:workoutName:)(v21, v25);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    uint64_t v28 = v26;
    v27(v21, v22);
    sub_8894(v17, v0 + 208);
    v64(v18, v17, v19);
    uint64_t v29 = sub_14068(v28);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.debug.getter(v30);
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
    uint64_t v34 = *(void *)(v0 + 440);
    uint64_t v35 = *(void *)(v0 + 416);
    if (v32)
    {
      uint64_t v63 = *(void *)(v0 + 416);
      uint64_t v62 = *(void *)(v0 + 440);
      uint64_t v36 = (uint8_t *)sub_88B0(12LL);
      uint64_t v65 = sub_88B0(32LL);
      *(_DWORD *)uint64_t v36 = 136315138;
      *(void *)(v0 + 320) = v28;
      uint64_t v37 = sub_111F4();
      sub_1F230( &qword_8C430,  v38,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v37, v39);
      *(void *)(v0 + 312) = sub_1F288(v40, v41, v42, v43, v44, v45, v46, v47);
      sub_1F1B0(v0 + 312, v0 + 320);
      sub_C090();
      sub_14004(v28);
      sub_17C68(&dword_0, v30, v31, "Picked the default app for this:  %s", v36);
      sub_B334(v65);
      sub_8870(v65);
      sub_8870((uint64_t)v36);

      v33(v62, v63);
    }

    else
    {
      sub_14004(v28);

      v33(v34, v35);
    }

    uint64_t v58 = sub_1F190();
    sub_1C094(v58);
    uint64_t v57 = v59;
    sub_1F24C();
    uint64_t v1 = (void *)(v0 + 96);
  }

  else
  {
    uint64_t v48 = *(void *)(v0 + 480);
    uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
    uint64_t v50 = *(void *)(v0 + 432);
    uint64_t v51 = *(void *)(v0 + 416);
    sub_10F84();
    sub_8894(v48, v0 + 184);
    v49(v50, v48, v51);
    sub_17C04();
    os_log_type_t v52 = sub_B33C();
    if (sub_B314(v52))
    {
      uint64_t v53 = (uint8_t *)sub_88B0(2LL);
      *(_WORD *)uint64_t v53 = 0;
      sub_1F1E8(&dword_0, v15, (os_log_type_t)v48, "Going to full disambiguation", v53);
      sub_8870((uint64_t)v53);
    }

    uint64_t v54 = *(void (**)(uint64_t))(v0 + 496);

    uint64_t v55 = sub_1F19C();
    v54(v55);
    sub_1BCEC();
    uint64_t v57 = v56;
  }

  sub_1F238();
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v1);
  sub_1F168();
  sub_88B8();
  sub_88D0();
  sub_8938();
  sub_B15C();
  sub_B16C();
  sub_B164();
  sub_B174();
  return sub_1F0E0(v57, *(uint64_t (**)(void))(v0 + 8));
}

void sub_1CC5C()
{
}

uint64_t sub_1CC80()
{
  uint64_t v1 = sub_8908();
  v0[5] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[6] = v2;
  v0[7] = sub_8860(v2);
  sub_8910();
  return sub_887C();
}

uint64_t sub_1CCC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = Logger.health.unsafeMutableAddressor(a1);
  sub_8894(v5, v1 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = (os_log_s *)sub_1F200();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (sub_1F150(v7))
  {
    BOOL v8 = (uint8_t *)sub_88B0(2LL);
    *(_WORD *)BOOL v8 = 0;
    sub_1F1E8(&dword_0, v6, (os_log_type_t)v2, "We are trying to confirm, but we don't support that.", v8);
    sub_8870((uint64_t)v8);
  }

  uint64_t v9 = sub_1F19C();
  v10(v9);
  uint64_t v11 = type metadata accessor for CommandFailure(0LL);
  sub_14DA4(v11);
  uint64_t v12 = CommandFailure.init(errorCode:reason:)(-1LL, 0x6C706D6920746F6ELL, 0xEF6465746E656D65LL);
  sub_6240( &qword_8D3B8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CommandFailure,  (uint64_t)&protocol conformance descriptor for CommandFailure);
  uint64_t v14 = swift_allocError(v11, v13, 0LL, 0LL);
  *uint64_t v15 = v12;
  swift_willThrow(v14, v15, v16, v17, v18);
  sub_88B8();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1CE1C()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = sub_8908();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (os_log_s *)((char *)&v45 - v10);
  uint64_t v12 = type metadata accessor for Parse(0LL);
  uint64_t v51 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_1F1D0();
  uint64_t v53 = v4;
  Input.parse.getter(v13);
  uint64_t v52 = v12;
  uint64_t v49 = sub_1F280(v1);
  unint64_t v15 = v14;
  uint64_t v16 = Logger.health.unsafeMutableAddressor(v49);
  sub_8894(v16, (uint64_t)&v57);
  uint64_t v50 = v6;
  uint64_t v45 = *(void (**)(os_log_s *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v46 = v16;
  v45(v11, v16, v5);
  uint64_t v17 = swift_bridgeObjectRetain();
  Logger.logObject.getter(v17);
  os_log_type_t v18 = sub_B33C();
  if (sub_1F150(v18))
  {
    uint64_t v47 = v9;
    uint64_t v19 = (uint8_t *)sub_88B0(12LL);
    uint64_t v20 = sub_88B0(32LL);
    uint64_t v48 = v5;
    uint64_t v21 = v20;
    v54[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_173E0(v49, v15, v54);
    uint64_t v23 = sub_1F208(v22);
    uint64_t v9 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, v24);
    swift_bridgeObjectRelease_n(v15, 3LL);
    sub_17C68(&dword_0, v11, (os_log_type_t)v16, "Got disambiguation parse %s", v19);
    sub_B334(v21);
    uint64_t v25 = v21;
    uint64_t v5 = v48;
    sub_8870(v25);
    sub_8870((uint64_t)v19);
  }

  else
  {

    sub_1F12C(v15);
  }

  uint64_t v26 = *(uint64_t (**)(os_log_s *, uint64_t))(v50 + 8);
  uint64_t v27 = v26(v11, v5);
  Input.parse.getter(v27);
  sub_DD98();
  uint64_t v29 = v28;
  uint64_t v30 = sub_1F160(v1, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
  if (v29)
  {
    if (qword_8BB78 != -1) {
      swift_once(&qword_8BB78, sub_1C100);
    }
    sub_1EFE0((uint64_t)qword_8D188, (uint64_t)v54);
    uint64_t v31 = *(void *)(v2 + 16);
    uint64_t v32 = *(void *)(v2 + 24);
    sub_1F180();
    sub_49EA4(v31, v32, v29, 3);
    sub_140A4();
    sub_1F01C(v54);
    type metadata accessor for AppDisambiguationResponse(0LL);
    static AppDisambiguationResponse.select(app:)(v29);
    sub_1F24C();
  }

  else
  {
    Input.parse.getter(v30);
    uint64_t v33 = sub_1F280(v1);
    unint64_t v35 = v34;
    uint64_t v36 = v46;
    sub_8894(v46, (uint64_t)v54);
    v45((os_log_s *)v9, v36, v5);
    uint64_t v37 = sub_1F180();
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (sub_1F150(v39))
    {
      uint64_t v47 = v9;
      uint64_t v40 = sub_88B0(12LL);
      uint64_t v48 = v5;
      unint64_t v41 = (uint8_t *)v40;
      uint64_t v42 = sub_88B0(32LL);
      uint64_t v56 = v42;
      *(_DWORD *)unint64_t v41 = 136315138;
      sub_1F180();
      uint64_t v55 = sub_173E0(v33, v35, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease_n(v35, 3LL);
      sub_17C68(&dword_0, v38, (os_log_type_t)v36, "Failed to find app after successful disambiguation from %s", v41);
      sub_B334(v42);
      sub_8870(v42);
      sub_8870((uint64_t)v41);

      uint64_t v43 = (os_log_s *)v47;
      uint64_t v44 = v48;
    }

    else
    {

      sub_1F12C(v35);
      uint64_t v43 = (os_log_s *)v9;
      uint64_t v44 = v5;
    }

    v26(v43, v44);
    type metadata accessor for AppDisambiguationResponse(0LL);
    static AppDisambiguationResponse.cancel()();
  }

  sub_10F48();
}

uint64_t sub_1D220(uint64_t a1, uint64_t a2)
{
  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  uint64_t v4 = sub_6358(&qword_8C348);
  v3[31] = sub_8860(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  v3[32] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[33] = v6;
  v3[34] = sub_B1E4(v6);
  v3[35] = sub_8924();
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions(0LL);
  v3[36] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[37] = v8;
  v3[38] = sub_B1E4(v8);
  v3[39] = sub_8924();
  uint64_t v9 = sub_6358(&qword_8D3A0);
  v3[40] = sub_8860(*(void *)(v9 - 8));
  uint64_t v10 = type metadata accessor for SemanticValue(0LL);
  v3[41] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[42] = v11;
  v3[43] = sub_B1E4(v11);
  v3[44] = sub_8924();
  uint64_t v12 = type metadata accessor for DisplayHint(0LL);
  v3[45] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[46] = v13;
  v3[47] = sub_8860(v13);
  uint64_t v14 = type metadata accessor for OrdinalDisplayHintsBuilder(0LL);
  v3[48] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[49] = v15;
  v3[50] = sub_8860(v15);
  uint64_t v16 = type metadata accessor for Locale(0LL);
  v3[51] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v3[52] = v17;
  v3[53] = sub_8860(v17);
  uint64_t v18 = type metadata accessor for NLContextUpdate(0LL);
  v3[54] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v3[55] = v19;
  v3[56] = sub_8860(v19);
  uint64_t v20 = type metadata accessor for DialogPhase(0LL);
  v3[57] = sub_8860(*(void *)(v20 - 8));
  uint64_t v21 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[58] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v3[59] = v22;
  v3[60] = sub_8860(v22);
  uint64_t v23 = sub_8908();
  v3[61] = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  v3[62] = v24;
  v3[63] = sub_B1E4(v24);
  v3[64] = sub_8924();
  sub_8910();
  return sub_887C();
}

uint64_t sub_1D3AC(uint64_t a1)
{
  uint64_t v2 = v1 + 15;
  uint64_t v3 = v1[64];
  uint64_t v4 = v1[61];
  uint64_t v5 = v1[62];
  uint64_t v6 = Logger.health.unsafeMutableAddressor(a1);
  v1[65] = v6;
  sub_8894(v6, (uint64_t)(v1 + 15));
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v1[66] = v7;
  v7(v3, v6, v4);
  sub_1F240();
  sub_1F200();
  os_log_type_t v8 = sub_B33C();
  if (sub_1F11C(v8))
  {
    uint64_t v26 = v1[62];
    uint64_t v27 = v1[61];
    uint64_t v28 = v1[64];
    uint64_t v9 = v1[29];
    uint64_t v10 = (uint8_t *)sub_88B0(12LL);
    uint64_t v30 = sub_88B0(32LL);
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v11 = sub_111F4();
    uint64_t v12 = swift_bridgeObjectRetain();
    Array.description.getter(v12, v11);
    sub_17C0C();
    uint64_t v13 = sub_1F19C();
    v1[27] = sub_173E0(v13, v14, v15);
    sub_1F1B0((uint64_t)(v1 + 27), (uint64_t)(v1 + 28));
    sub_17C4C();
    sub_1F12C(v9);
    sub_17C68(&dword_0, (os_log_s *)(v1 + 15), (os_log_type_t)v6, "Making disambiguation prompt for apps: %s", v10);
    sub_B334(v30);
    sub_8870(v30);
    sub_8870((uint64_t)v10);

    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v16(v28, v27);
  }

  else
  {
    uint64_t v17 = v1[62];
    sub_1F12C(v1[29]);

    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    uint64_t v18 = sub_1F19C();
    v16(v18, v19);
  }

  v1[67] = v16;
  uint64_t v21 = v1[29];
  uint64_t v20 = v1[30];
  swift_retain(v20);
  uint64_t v22 = sub_1B880(v21, v20);
  v1[68] = v22;
  uint64_t v23 = *sub_8734((void *)(v20 + 272), *(void *)(v20 + 296));
  uint64_t v29 = (uint64_t (*)(char, char, char, char, uint64_t, uint64_t))((char *)&dword_8F018 + dword_8F018);
  uint64_t v24 = (void *)swift_task_alloc(unk_8F01C);
  v1[69] = v24;
  *uint64_t v24 = v1;
  v24[1] = sub_1D5E4;
  return v29(0, 1, 1, 0, (uint64_t)v22, v23);
}

uint64_t sub_1D5E4()
{
  uint64_t v2 = *(void *)(*v1 + 552);
  uint64_t v3 = *v1;
  *(void *)(v3 + 560) = v4;
  *(void *)(v3 + 568) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(*(void *)(v3 + 544));
  if (v0)
  {
    uint64_t v17 = *(void *)(v3 + 352);
    uint64_t v18 = *(void *)(v3 + 344);
    uint64_t v19 = *(void *)(v3 + 320);
    uint64_t v20 = *(void *)(v3 + 312);
    uint64_t v21 = *(void *)(v3 + 304);
    uint64_t v22 = *(void *)(v3 + 280);
    uint64_t v23 = *(void *)(v3 + 272);
    swift_task_dealloc(*(void *)(v3 + 512));
    sub_8938();
    sub_B15C();
    sub_B16C();
    sub_B164();
    sub_B174();
    sub_1F21C();
    sub_88B8();
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    uint64_t v5 = swift_task_dealloc(v21);
    sub_1F290(v5, v6, v7, v8, v9, v10, v11, v12, v17, v18, v19, v20, v21, v22);
    swift_task_dealloc(v23);
    sub_88D0();
    return sub_1F0C4(*(uint64_t (**)(void))(v3 + 8));
  }

  else
  {
    sub_8910();
    return swift_task_switch(v14, v15, v16);
  }

uint64_t sub_1D70C()
{
  uint64_t v1 = v0[57];
  uint64_t v3 = v0[52];
  uint64_t v2 = v0[53];
  uint64_t v4 = v0[29];
  static DialogPhase.clarification.getter();
  uint64_t v5 = OutputGenerationManifest.init(dialogPhase:_:)(v1, nullsub_1, 0LL);
  NLContextUpdate.init()(v5);
  static Device.current.getter(v0 + 7);
  sub_1F1F0();
  uint64_t v6 = sub_1F190();
  dispatch thunk of DeviceState.siriLocale.getter(v6, v7);
  uint64_t v8 = sub_34714(v4, v2);
  sub_1F260(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7);
  OrdinalDisplayHintsBuilder.init(referenceNode:)(0x656D614E707061LL, 0xE700000000000000LL);
  uint64_t v9 = v8[2];
  uint64_t v72 = (uint64_t)v8;
  if (v9)
  {
    uint64_t v10 = v0[46];
    uint64_t v11 = v0[42];
    uint64_t v12 = (char *)v8 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v75 = *(uint64_t (**)(uint64_t, char *, void))(v10 + 16);
    uint64_t v77 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v14 = v0[47];
      uint64_t v16 = v0[40];
      uint64_t v15 = v0[41];
      uint64_t v17 = v75(v14, v12, v0[45]);
      DisplayHint.idValue.getter(v17);
      sub_1F160(v14, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
      if (sub_63E0(v16, 1LL, v15) == 1)
      {
        sub_AFB8(v0[40], &qword_8D3A0);
      }

      else
      {
        uint64_t v18 = (char *)v0[43];
        uint64_t v19 = (char *)v0[44];
        uint64_t v20 = v0[41];
        uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        v21(v19, (char *)v0[40], v20);
        v21(v18, v19, v20);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
          uint64_t v13 = (char *)sub_1F224(0, *((void *)v13 + 2) + 1LL);
        }
        unint64_t v23 = *((void *)v13 + 2);
        unint64_t v22 = *((void *)v13 + 3);
        if (v23 >= v22 >> 1) {
          uint64_t v13 = (char *)sub_1F224(v22 > 1, v23 + 1);
        }
        uint64_t v24 = (char *)v0[43];
        uint64_t v25 = v0[41];
        *((void *)v13 + 2) = v23 + 1;
        v21( &v13[((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
             + *(void *)(v11 + 72) * v23],
          v24,
          v25);
      }

      v12 += v77;
      --v9;
    }

    while (v9);
    swift_bridgeObjectRelease(v72);
  }

  else
  {
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v76 = (uint64_t (*)(os_log_s *, uint64_t, uint64_t))v0[66];
  uint64_t v68 = v0[65];
  os_log_type_t v69 = (os_log_s *)v0[63];
  uint64_t v70 = v0[61];
  uint64_t v26 = v0[49];
  uint64_t v27 = v0[50];
  uint64_t v28 = v0[48];
  uint64_t v29 = v0[39];
  uint64_t v65 = v0[37];
  uint64_t v66 = v0[38];
  uint64_t v67 = v0[36];
  uint64_t v31 = v0[29];
  unint64_t v30 = v0[30];
  uint64_t v78 = OrdinalDisplayHintsBuilder.build(for:)(v13);
  sub_17C4C();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
  swift_retain(v30);
  sub_1BA18(v31, v30);
  uint64_t v33 = v32;
  v79[1] = 0xE000000000000000LL;
  sub_30E30(0);
  NLContextUpdate.weightedPromptTargetDomain.setter(0LL, 0xE000000000000000LL);
  v79[0] = v72;
  sub_35454(v78);
  NLContextUpdate.displayHints.setter(v72);
  uint64_t v34 = sub_6358(&qword_8C958);
  uint64_t v35 = swift_allocObject(v34, 48LL, 7LL);
  *(_OWORD *)(v35 + 16) = xmmword_61030;
  *(void *)(v35 + 32) = 0x656D614E707061LL;
  *(void *)(v35 + 40) = 0xE700000000000000LL;
  uint64_t v36 = NLContextUpdate.weightedPromptResponseTargets.setter(v35);
  Siri_Nlu_External_SystemGaveOptions.init()(v36);
  uint64_t v37 = Siri_Nlu_External_SystemGaveOptions.choices.setter(v33);
  Siri_Nlu_External_SystemDialogAct.init()(v37);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v66, v29, v67);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter(v66);
  sub_8894(v68, (uint64_t)(v0 + 18));
  uint64_t v38 = v76(v69, v68, v70);
  Logger.logObject.getter(v38);
  os_log_type_t v39 = sub_B33C();
  BOOL v40 = os_log_type_enabled(v69, v39);
  unint64_t v41 = (void (*)(uint64_t, uint64_t))v0[67];
  uint64_t v42 = v0[63];
  uint64_t v43 = v0[61];
  if (v40)
  {
    uint64_t v44 = v0[34];
    uint64_t v45 = v0[35];
    uint64_t v46 = v0[33];
    uint64_t v73 = v0[63];
    uint64_t v47 = (uint8_t *)sub_88B0(12LL);
    uint64_t v48 = sub_88B0(32LL);
    v79[0] = v48;
    *(_DWORD *)uint64_t v47 = 136315138;
    sub_8894(v45, (uint64_t)(v0 + 21));
    sub_1F188(v44, v45, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16));
    uint64_t v49 = sub_1F280(v44);
    v0[26] = sub_173E0(v49, v50, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27);
    sub_C090();
    sub_17C68( &dword_0,  v69,  v39,  "#WorkoutAppResolutionStrategyAsync sending disambiguation system dialog acts: %s",  v47);
    sub_B334(v48);
    sub_8870(v48);
    sub_8870((uint64_t)v47);

    v41(v73, v43);
  }

  else
  {

    v41(v42, v43);
  }

  uint64_t v51 = v0[56];
  uint64_t v71 = v0[55];
  uint64_t v52 = v0[54];
  uint64_t v53 = v0[35];
  uint64_t v55 = v0[32];
  uint64_t v54 = v0[33];
  uint64_t v56 = v0[31];
  uint64_t v74 = v0[30];
  uint64_t v57 = sub_6358(&qword_8D3A8);
  uint64_t v58 = *(unsigned __int8 *)(v54 + 80);
  uint64_t v59 = (v58 + 32) & ~v58;
  uint64_t v60 = swift_allocObject(v57, v59 + *(void *)(v54 + 72), v58 | 7);
  *(_OWORD *)(v60 + 16) = xmmword_61030;
  sub_8894(v53, (uint64_t)(v0 + 12));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v60 + v59, v53, v55);
  NLContextUpdate.nluSystemDialogActs.setter(v60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v56, v51, v52);
  sub_8760(v56, 0LL, 1LL, v52);
  OutputGenerationManifest.nlContextUpdate.setter(v56);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  sub_B038(v74 + 312, (uint64_t)(v0 + 2));
  uint64_t v61 = v0[5];
  uint64_t v62 = v0[6];
  sub_8734(v0 + 2, v61);
  uint64_t v63 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[72] = v63;
  *uint64_t v63 = v0;
  v63[1] = sub_1DD34;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0[28],  v0[70],  v0[60],  v61,  v62);
}

uint64_t sub_1DD34()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 576LL);
  *(void *)(*(void *)v1 + 584LL) = v0;
  swift_task_dealloc(v2);
  sub_8910();
  return sub_887C();
}

uint64_t sub_1DD8C()
{
  uint64_t v23 = *(void *)(v0 + 512);
  uint64_t v20 = *(void *)(v0 + 472);
  uint64_t v21 = *(void *)(v0 + 464);
  uint64_t v22 = *(void *)(v0 + 480);
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v24 = *(void *)(v0 + 504);
  uint64_t v25 = *(void *)(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v26 = *(void *)(v0 + 424);
  uint64_t v27 = *(void *)(v0 + 400);
  uint64_t v28 = *(void *)(v0 + 376);
  uint64_t v29 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v30 = *(void *)(v0 + 344);
  uint64_t v31 = *(void *)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v32 = *(void *)(v0 + 304);
  uint64_t v33 = *(void *)(v0 + 272);
  uint64_t v9 = *(void *)(v0 + 256);
  uint64_t v34 = *(void *)(v0 + 248);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(v0 + 16));
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v9);
  sub_1F290(v10, v11, v12, v13, v14, v15, v16, v17, v19, v20, v21, v22, v0 + 16, v23);
  swift_task_dealloc(v24);
  sub_B15C();
  swift_task_dealloc(v25);
  sub_B164();
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  sub_1F21C();
  swift_task_dealloc(v32);
  sub_88D0();
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "1E02C: call analysis failed (funcsize=79)"
void sub_1E040(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void v32[5];
  void v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v4 = sub_6358(&qword_8C258);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = App.appIdentifier.getter(v5);
  uint64_t v10 = v9;
  sub_B038(a1 + 32, (uint64_t)v33);
  uint64_t v11 = v34;
  uint64_t v12 = v35;
  sub_8734(v33, v34);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v32, v11, v12);
  uint64_t v13 = sub_3003C(v32, v8, v10);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease(v10);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v32);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v33);
  if (v15)
  {
    String.toSpeakableString.getter(v13, v15);
    swift_bridgeObjectRelease(v15);
    uint64_t v16 = type metadata accessor for SpeakableString(0LL);
    uint64_t v17 = (uint64_t)v7;
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v16 = type metadata accessor for SpeakableString(0LL);
    uint64_t v17 = (uint64_t)v7;
    uint64_t v18 = 1LL;
  }

  uint64_t v19 = sub_8760(v17, v18, 1LL, v16);
  uint64_t v20 = App.appIdentifier.getter(v19);
  if (v21) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = 0LL;
  }
  if (v21) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = 0xE000000000000000LL;
  }
  type metadata accessor for SirikitApp(0LL);
  uint64_t v24 = SirikitApp.init(_:)(v22, v23);
  uint64_t v25 = type metadata accessor for WorkoutApp.Builder(0LL);
  uint64_t v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  *(void *)(v26 + 16) = 0LL;
  uint64_t v27 = v26 + OBJC_IVAR____TtCC24HealthFlowDelegatePlugin10WorkoutApp7Builder_aceCommand;
  type metadata accessor for SpeakableString(0LL);
  sub_8760(v27, 1LL, 1LL, v16);
  uint64_t v28 = sub_32570(v24);
  swift_release(v26);
  uint64_t v29 = v28 + OBJC_IVAR____TtCC24HealthFlowDelegatePlugin10WorkoutApp7Builder_aceCommand;
  swift_beginAccess(v28 + OBJC_IVAR____TtCC24HealthFlowDelegatePlugin10WorkoutApp7Builder_aceCommand, v33, 33LL, 0LL);
  sub_B078((uint64_t)v7, v29);
  swift_endAccess(v33);
  uint64_t v30 = type metadata accessor for WorkoutApp(0LL);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  uint64_t v31 = sub_325EC(v28);
  swift_release(v24);
  sub_AFB8((uint64_t)v7, &qword_8C258);
  *a2 = v31;
}

void sub_1E29C()
{
  uint64_t v0 = type metadata accessor for Locale(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_6BD8();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for UsoEntityBuilder_common_Workout(0LL);
  sub_14DA4(v5);
  uint64_t v6 = UsoEntityBuilder_common_Workout.init()();
  static Device.current.getter(v11);
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  sub_8734(v11, v12);
  dispatch thunk of DeviceState.siriLocale.getter(v7, v8);
  uint64_t v9 = sub_1E3B0(v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v11);
  dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)( v9,  &protocol witness table for UsoEntityBuilder_common_App);
  swift_release(v9);
  uint64_t common_Workout = type metadata accessor for UsoTaskBuilder_create_common_Workout(0LL);
  sub_14DA4(common_Workout);
  UsoTaskBuilder_create_common_Workout.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)(v6);
  sub_1E508();
  sub_1F24C();
  sub_157BC();
  sub_10F48();
}

uint64_t sub_1E3B0(uint64_t a1)
{
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for UsoEntityBuilder_common_App(0LL);
  sub_14DA4(v8);
  uint64_t v9 = UsoEntityBuilder_common_App.init()();
  uint64_t v10 = type metadata accessor for AppInformationResolver(0LL);
  sub_14DA4(v10);
  uint64_t v11 = swift_retain(v1);
  uint64_t v12 = AppInformationResolver.init(app:)(v11);
  uint64_t v13 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)(a1);
  uint64_t v15 = v14;
  uint64_t v16 = swift_release(v12);
  if (v15)
  {
    dispatch thunk of UsoEntityBuilder_common_App.setName(value:)(v13, v15);
    uint64_t v16 = swift_bridgeObjectRelease(v15);
  }

  uint64_t v17 = App.appIdentifier.getter(v16);
  if (v18)
  {
    uint64_t v19 = v17;
    uint64_t v20 = v18;
    if (dispatch thunk of UsoEntityBuilder_common_App.name.getter())
    {
      UsoIdentifier.init(value:appBundleId:namespace:)( v19,  v20,  0x746163696C707041LL,  0xEC000000736E6F69LL,  0x64695F6D657469LL,  0xE700000000000000LL);
      dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)(v7);
      sub_157BC();
      sub_1F160(v7, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    }

    else
    {
      sub_1F238();
    }
  }

  return v9;
}

void sub_1E508()
{
  uint64_t v2 = sub_8908();
  __chkstk_darwin(v2);
  sub_6BD8();
  uint64_t v3 = sub_6358(&qword_8D398);
  __chkstk_darwin(v3);
  sub_1F1D0();
  uint64_t v4 = sub_6358(&qword_8E9B0);
  uint64_t v5 = swift_allocObject(v4, 40LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_61780;
  *(void *)(v5 + 32) = v0;
  uint64_t v8 = v5;
  specialized Array._endMutation()(v5);
  swift_retain(v0);
  UsoBuilderOptions.init(longhandDefinedValues:)(1LL);
  uint64_t v6 = type metadata accessor for UsoBuilderOptions(0LL);
  sub_8760(v1, 0LL, 1LL, v6);
  uint64_t v7 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)(v8, v1);
  sub_17C0C();
  sub_AFB8(v1, &qword_8D398);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)(v7, 0LL);
  sub_157BC();
  sub_10F48();
}

void *sub_1E7A8()
{
  return v0;
}

uint64_t sub_1E7DC()
{
  return swift_deallocClassInstance(v0, 352LL, 7LL);
}

uint64_t type metadata accessor for WorkoutAppResolutionStrategyAsync()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin33WorkoutAppResolutionStrategyAsync);
}

uint64_t sub_1E81C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_8D1DC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1E86C;
  return sub_1C130(a1);
}

uint64_t sub_1E86C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t sub_1E8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionSuccessfulResponse(app:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionSuccessfulResponse(app:)(a1, a2, a3, a4);
}

uint64_t sub_1E91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionUnsuccessfulResponse(reason:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionUnsuccessfulResponse(reason:)(a1, a2, a3, a4);
}

uint64_t sub_1E998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppResolutionOnDeviceFlowStrategyAsync.makeErrorResponse(error:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return AppResolutionOnDeviceFlowStrategyAsync.makeErrorResponse(error:)(a1, a2, a3, a4);
}

void sub_1EA14()
{
}

uint64_t sub_1EA28()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_8D1E4);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1F0C0;
  return sub_1CC80();
}

uint64_t sub_1EA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppConfirmationStrategyAsync.makeRepromptOnEmptyParse(app:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return AppConfirmationStrategyAsync.makeRepromptOnEmptyParse(app:)(a1, a2, a3, a4);
}

uint64_t sub_1EAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppConfirmationStrategyAsync.makeRepromptOnLowConfidence(app:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return AppConfirmationStrategyAsync.makeRepromptOnLowConfidence(app:)(a1, a2, a3, a4);
}

uint64_t sub_1EB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppConfirmationStrategyAsync.makeConfirmationRejectedResponse(app:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return AppConfirmationStrategyAsync.makeConfirmationRejectedResponse(app:)(a1, a2, a3, a4);
}

uint64_t sub_1EBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppConfirmationStrategyAsync.makeConfirmationCancelledResponse(app:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return AppConfirmationStrategyAsync.makeConfirmationCancelledResponse(app:)(a1, a2, a3, a4);
}

uint64_t sub_1EC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to AppConfirmationStrategyAsync.makeConfirmationErrorResponse(error:app:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1ECE0;
  return AppConfirmationStrategyAsync.makeConfirmationErrorResponse(error:app:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1ECE0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1ED0C()
{
}

uint64_t sub_1ED2C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_8D1EC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1F0C0;
  return sub_1D220(a1, a2);
}

uint64_t sub_1ED90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppDisambiguationStrategyAsync.makeRepromptOnEmptyParse(apps:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return AppDisambiguationStrategyAsync.makeRepromptOnEmptyParse(apps:)(a1, a2, a3, a4);
}

uint64_t sub_1EE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppDisambiguationStrategyAsync.makeRepromptOnLowConfidence(apps:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return AppDisambiguationStrategyAsync.makeRepromptOnLowConfidence(apps:)(a1, a2, a3, a4);
}

uint64_t sub_1EE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppDisambiguationStrategyAsync.makeDisambiguationCancelResponse(apps:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return AppDisambiguationStrategyAsync.makeDisambiguationCancelResponse(apps:)(a1, a2, a3, a4);
}

uint64_t sub_1EF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to AppDisambiguationStrategyAsync.makeDisambiguationErrorResponse(error:apps:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1F0C0;
  return AppDisambiguationStrategyAsync.makeDisambiguationErrorResponse(error:apps:)(a1, a2, a3, a4, a5);
}

void sub_1EF88(uint64_t a1, uint64_t a2)
{
}

void sub_1EFB4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1EFE0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_1F01C(void *a1)
{
  return a1;
}

unint64_t sub_1F050()
{
  unint64_t result = qword_8D3B0;
  if (!qword_8D3B0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSUserDefaults);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_8D3B0);
  }

  return result;
}

void *sub_1F08C(void *a1)
{
  return a1;
}

uint64_t sub_1F0C4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1F0E0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1F0FC()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

BOOL sub_1F11C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1F12C(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

  ;
}

BOOL sub_1F150(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1F160@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1F168()
{
  return swift_task_dealloc(*(void *)(v0 + 472));
}

uint64_t sub_1F180()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1F188@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1F190()
{
  return v0;
}

uint64_t sub_1F19C()
{
  return v0;
}

uint64_t sub_1F1A8()
{
  return type metadata accessor for AppResolutionAction(0LL);
}

uint64_t sub_1F1B0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

BOOL sub_1F1B8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1F1C8()
{
  return swift_errorRelease(v0);
}

  ;
}

void sub_1F1E8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

void *sub_1F1F0()
{
  return sub_8734(v0, *(void *)(v1 + 80));
}

uint64_t sub_1F200()
{
  return Logger.logObject.getter();
}

uint64_t sub_1F208(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t sub_1F21C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1F224(char a1, uint64_t a2)
{
  return sub_F4FC(a1, a2, 1, v2);
}

void sub_1F230(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
}

uint64_t sub_1F238()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1F240()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1F24C()
{
  return swift_release(v0);
}

uint64_t sub_1F254( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, uint64_t, uint64_t))
{
  return a14(a1, a2, v14);
}

uint64_t sub_1F260@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

uint64_t sub_1F280(uint64_t a1)
{
  return String.init<A>(describing:)(a1, v1);
}

uint64_t sub_1F288( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_173E0(a1, a2, (uint64_t *)va);
}

uint64_t sub_1F290( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_task_dealloc(a14);
}

char *sub_1F298(char *a1)
{
  v146 = a1;
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v141 = (char *)v1;
  uint64_t v142 = v2;
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v134 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v140 = (char *)&v127 - v6;
  __chkstk_darwin(v5);
  os_log_t v143 = (os_log_t)((char *)&v127 - v7);
  uint64_t v8 = sub_6358(&qword_8C5F0);
  __chkstk_darwin(v8);
  uint64_t v133 = (uint64_t)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v131 = *(void *)(v10 - 8);
  uint64_t v132 = v10;
  __chkstk_darwin(v10);
  id v130 = (char *)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v139 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v129 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  v138 = (uint64_t *)((char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for USOParse(0LL);
  uint64_t v136 = *(void *)(v13 - 8);
  uint64_t v137 = v13;
  __chkstk_darwin(v13);
  uint64_t v135 = (char *)&v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v147 = type metadata accessor for Logger(0LL);
  uint64_t v145 = *(void (***)(char *, uint64_t, uint64_t))(v147 - 8);
  uint64_t v15 = __chkstk_darwin(v147);
  uint64_t v17 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v128 = (char *)&v127 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v127 - v20;
  uint64_t v22 = type metadata accessor for HealthNLIntent(0LL);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v127 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for NLIntent(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v127 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for Parse(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v127 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v32, v146, v29);
  int v33 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v32, v29);
  if (v33 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v32, v25);
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v146 = v28;
    v34(v24, v28, v25);
    sub_AF38(0LL, (unint64_t *)&qword_8C828, &OBJC_CLASS___INStartWorkoutIntent_ptr);
    id v35 = sub_509B0();
    uint64_t v36 = sub_C594((uint64_t)v24);
    uint64_t v37 = Logger.health.unsafeMutableAddressor(v36);
    swift_beginAccess(v37, v149, 0LL, 0LL);
    uint64_t v38 = v145;
    uint64_t v39 = v147;
    v145[2](v21, v37, v147);
    id v40 = v35;
    unint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.debug.getter(v41);
    LODWORD(v142) = v42;
    uint64_t v43 = (char *)v25;
    uint64_t v44 = v26;
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v45 = swift_slowAlloc(12LL, -1LL);
      uint64_t v140 = (char *)v25;
      uint64_t v141 = v21;
      os_log_t v143 = v41;
      uint64_t v46 = (uint8_t *)v45;
      v138 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v139 = v26;
      *(_DWORD *)uint64_t v46 = 138412290;
      uint64_t v150 = (uint64_t)v40;
      uint64_t v47 = v38;
      id v48 = v40;
      uint64_t v44 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151);
      uint64_t v49 = v138;
      void *v138 = v40;

      uint64_t v38 = v47;
      _os_log_impl(&dword_0, v143, (os_log_type_t)v142, "Converted intent to: %@", v46, 0xCu);
      sub_6358(&qword_8C360);
      swift_arrayDestroy(v49, 1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
      unint64_t v50 = v46;
      unint64_t v41 = v143;
      uint64_t v43 = v140;
      uint64_t v21 = v141;
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {
    }

    ((void (*)(char *, uint64_t))v38[1])(v21, v39);
    (*(void (**)(char *, char *))(v44 + 8))(v146, v43);
    return (char *)v40;
  }

  id v40 = v145;
  uint64_t v51 = v147;
  if (v33 == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
    uint64_t v53 = v142;
    os_log_t v52 = v143;
    uint64_t v54 = v141;
    (*(void (**)(os_log_t, char *, char *))(v142 + 32))(v143, v32, v141);
    uint64_t v55 = *(void (**)(char *, os_log_t, char *))(v53 + 16);
    v55(v140, v52, v54);
    uint64_t v56 = sub_2C64C();
    if (v57 == (_BYTE *)&dword_0 + 1)
    {
      os_log_t v58 = v52;
      uint64_t v59 = Logger.workout.unsafeMutableAddressor(v56);
      swift_beginAccess(v59, v149, 0LL, 0LL);
      (*((void (**)(char *, uint64_t, uint64_t))v40 + 2))(v17, v59, v51);
      uint64_t v60 = v134;
      uint64_t v61 = ((uint64_t (*)(char *, os_log_t, char *))v55)(v134, v58, v54);
      uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v65 = swift_slowAlloc(32LL, -1LL);
        v146 = v17;
        uint64_t v66 = v65;
        uint64_t v150 = v65;
        *(_DWORD *)uint64_t v64 = 136315138;
        uint64_t v67 = Parse.DirectInvocation.identifier.getter();
        unint64_t v69 = v68;
        uint64_t v148 = sub_173E0(v67, v68, &v150);
        uint64_t v54 = v141;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149);
        swift_bridgeObjectRelease(v69);
        uint64_t v70 = *(void (**)(char *, char *))(v142 + 8);
        v70(v60, v54);
        _os_log_impl(&dword_0, v62, v63, "Unknow DirectInvocation with identifier: %s", v64, 0xCu);
        swift_arrayDestroy(v66, 1LL);
        swift_slowDealloc(v66, -1LL, -1LL);
        swift_slowDealloc(v64, -1LL, -1LL);

        (*((void (**)(char *, uint64_t))v40 + 1))(v146, v147);
      }

      else
      {
        uint64_t v70 = *(void (**)(char *, char *))(v142 + 8);
        v70(v60, v54);

        (*((void (**)(char *, uint64_t))v40 + 1))(v17, v51);
      }

      unint64_t v89 = sub_253BC();
      uint64_t v90 = swift_allocError(&type metadata for IntentConversionError, v89, 0LL, 0LL);
      *id v91 = 2;
      swift_willThrow(v90, v91, v92, v93, v94);
      v70((char *)v143, v54);
    }

    else
    {
      uint64_t v81 = v56;
      uint64_t v82 = (uint64_t)v57;
      id v40 = sub_24F4C(v56, v57);
      sub_FFEC(v81, v82);
      (*(void (**)(os_log_t, char *))(v53 + 8))(v52, v54);
    }

    return (char *)v40;
  }

  if (v33 != enum case for Parse.uso(_:))
  {
    unint64_t v83 = sub_253BC();
    uint64_t v84 = swift_allocError(&type metadata for IntentConversionError, v83, 0LL, 0LL);
    *uint64_t v85 = 3;
    swift_willThrow(v84, v85, v86, v87, v88);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
    return (char *)v40;
  }

  (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
  uint64_t v71 = v135;
  uint64_t v72 = v136;
  uint64_t v73 = v32;
  uint64_t v74 = v137;
  uint64_t v75 = (*(uint64_t (**)(char *, char *, uint64_t))(v136 + 32))(v135, v73, v137);
  unint64_t v76 = v130;
  uint64_t v77 = USOParse.userParse.getter(v75);
  uint64_t v78 = Siri_Nlu_External_UserParse.userDialogActs.getter(v77);
  (*(void (**)(char *, uint64_t))(v131 + 8))(v76, v132);
  uint64_t v79 = v133;
  sub_52814(v78, v133);
  swift_bridgeObjectRelease(v78);
  uint64_t v80 = v139;
  if (sub_63E0(v79, 1LL, v139) == 1)
  {
    sub_6B60(v79, &qword_8C5F0);
LABEL_20:
    unint64_t v100 = sub_253BC();
    uint64_t v101 = swift_allocError(&type metadata for IntentConversionError, v100, 0LL, 0LL);
    *uint64_t v102 = 0;
    swift_willThrow(v101, v102, v103, v104, v105);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v74);
    return (char *)v40;
  }

  uint64_t v95 = v129;
  uint64_t v96 = v79;
  uint64_t v97 = v138;
  (*(void (**)(void *, uint64_t, uint64_t))(v129 + 32))(v138, v96, v80);
  uint64_t v98 = v144;
  uint64_t v99 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v97);
  if (v98)
  {
    swift_errorRelease(v98);
LABEL_19:
    (*(void (**)(void *, uint64_t))(v95 + 8))(v138, v80);
    goto LABEL_20;
  }

  uint64_t v107 = v99;
  if ((unint64_t)v99 >> 62)
  {
    if (v99 < 0) {
      uint64_t v126 = v99;
    }
    else {
      uint64_t v126 = v99 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v108 = _CocoaArrayWrapper.endIndex.getter(v126);
    swift_bridgeObjectRelease(v107);
  }

  else
  {
    uint64_t v108 = *(void *)((char *)&dword_10 + (v99 & 0xFFFFFFFFFFFFF8LL));
  }

  if (!v108)
  {
    swift_bridgeObjectRelease(v107);
    uint64_t v80 = v139;
    uint64_t v95 = v129;
    goto LABEL_19;
  }

  sub_10000(0LL, (v107 & 0xC000000000000001LL) == 0, v107);
  if ((v107 & 0xC000000000000001LL) != 0)
  {
    uint64_t v109 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v107);
  }

  else
  {
    uint64_t v109 = *(void *)(v107 + 32);
    swift_retain(v109);
  }

  uint64_t v110 = swift_bridgeObjectRelease(v107);
  char v111 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v110);
  sub_24AC4( v109,  v111 & 1,  (unint64_t *)&qword_8C828,  &OBJC_CLASS___INStartWorkoutIntent_ptr,  (void (*)(uint64_t, uint64_t))sub_511B8);
  uint64_t v144 = 0LL;
  uint64_t v113 = v112;
  uint64_t v114 = Logger.health.unsafeMutableAddressor(v112);
  swift_beginAccess(v114, v149, 0LL, 0LL);
  (*((void (**)(char *, uint64_t, uint64_t))v40 + 2))(v128, v114, v51);
  unint64_t v115 = v113;
  uint64_t v116 = (os_log_s *)Logger.logObject.getter(v115);
  os_log_type_t v117 = static os_log_type_t.debug.getter(v116);
  BOOL v118 = os_log_type_enabled(v116, v117);
  v146 = v115;
  if (v118)
  {
    uint64_t v119 = swift_slowAlloc(12LL, -1LL);
    os_log_t v143 = v116;
    uint64_t v120 = (uint8_t *)v119;
    uint64_t v142 = swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v120 = 138412290;
    uint64_t v150 = (uint64_t)v115;
    uint64_t v121 = v115;
    uint64_t v72 = v136;
    uint64_t v74 = v137;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151);
    uint64_t v122 = v142;
    *(void *)uint64_t v142 = v115;

    uint64_t v71 = v135;
    os_log_type_t v123 = v117;
    uint64_t v124 = v147;
    _os_log_impl(&dword_0, v143, v123, "Converted intent to: %@", v120, 0xCu);
    sub_6358(&qword_8C360);
    swift_arrayDestroy(v122, 1LL);
    swift_slowDealloc(v122, -1LL, -1LL);
    uint64_t v125 = v120;
    uint64_t v116 = v143;
    swift_slowDealloc(v125, -1LL, -1LL);
  }

  else
  {

    uint64_t v124 = v147;
  }

  swift_release(v109);
  (*((void (**)(char *, uint64_t))v40 + 1))(v128, v124);
  (*(void (**)(void *, uint64_t))(v129 + 8))(v138, v139);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v74);
  return v146;
}

void sub_1FE74( void *a1, unint64_t *a2, os_log_s *a3, uint64_t (*a4)(uint64_t), void (*a5)(uint64_t, uint64_t))
{
  v138 = a5;
  uint64_t v153 = a4;
  Swift::String v158 = a2;
  v159 = a3;
  id v160 = a1;
  uint64_t v5 = (uint8_t *)type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v6 = *((void *)v5 - 1);
  uint64_t v150 = v5;
  uint64_t v151 = v6;
  sub_C870();
  __chkstk_darwin(v7);
  sub_11060();
  uint64_t v143 = v8;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v136 - v11;
  __chkstk_darwin(v10);
  uint64_t v152 = (uint64_t)&v136 - v13;
  sub_6358(&qword_8C5F0);
  sub_C870();
  __chkstk_darwin(v14);
  sub_C838();
  uint64_t v142 = v15;
  uint64_t v16 = sub_11198();
  uint64_t v141 = type metadata accessor for Siri_Nlu_External_UserParse(v16);
  uint64_t v140 = *(void *)(v141 - 8);
  sub_C870();
  __chkstk_darwin(v17);
  sub_6BD8();
  uint64_t v20 = v19 - v18;
  uint64_t v147 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v139 = *(void *)(v147 - 8);
  sub_C870();
  __chkstk_darwin(v21);
  sub_C838();
  uint64_t v146 = v22;
  uint64_t v23 = sub_11198();
  uint64_t v145 = type metadata accessor for USOParse(v23);
  uint64_t v148 = *(void *)(v145 - 8);
  sub_C870();
  __chkstk_darwin(v24);
  sub_C838();
  uint64_t v144 = v25;
  uint64_t v26 = sub_11198();
  uint64_t v27 = type metadata accessor for Logger(v26);
  uint64_t v154 = *(void *)(v27 - 8);
  uint64_t v155 = v27;
  sub_C870();
  __chkstk_darwin(v28);
  sub_11060();
  uint64_t v149 = (uint8_t *)v29;
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v137 = (uint64_t)&v136 - v32;
  __chkstk_darwin(v31);
  uint64_t v157 = (uint64_t)&v136 - v33;
  uint64_t v34 = sub_11198();
  type metadata accessor for HealthNLIntent(v34);
  sub_C870();
  __chkstk_darwin(v35);
  sub_6BD8();
  uint64_t v38 = v37 - v36;
  uint64_t v39 = type metadata accessor for NLIntent(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  sub_6BD8();
  uint64_t v43 = (unint64_t *)(v42 - v41);
  uint64_t v44 = type metadata accessor for Parse(0LL);
  uint64_t v45 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v47 = (char *)&v136 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_19A48((uint64_t)v47, (uint64_t)v160, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 16));
  int v48 = (*(uint64_t (**)(char *, uint64_t))(v45 + 88))(v47, v44);
  if (v48 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_25464();
    sub_112A4((uint64_t)v43, (uint64_t)v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 32));
    sub_112A4(v38, (uint64_t)v43, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 16));
    sub_AF38(0LL, v158, v159);
    uint64_t v49 = (void *)v153(v38);
    uint64_t v50 = sub_C594(v38);
    uint64_t v51 = Logger.health.unsafeMutableAddressor(v50);
    sub_8894(v51, (uint64_t)v162);
    uint64_t v52 = v154;
    uint64_t v53 = v155;
    uint64_t v54 = v157;
    sub_254E0(v157, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 16));
    id v160 = v49;
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v160);
    int v56 = static os_log_type_t.debug.getter(v55);
    v159 = v55;
    BOOL v57 = sub_254C8();
    uint64_t v58 = v52;
    Swift::String v158 = v43;
    if (v57)
    {
      uint64_t v59 = (uint8_t *)sub_88B0(12LL);
      uint64_t v60 = sub_88B0(8LL);
      LODWORD(v151) = v56;
      uint64_t v61 = (void *)v60;
      uint64_t v152 = v40;
      uint64_t v153 = (uint64_t (*)(uint64_t))v39;
      id v62 = v160;
      *(_DWORD *)uint64_t v59 = 138412290;
      uint64_t v149 = v59 + 4;
      uint64_t v150 = v59;
      uint64_t v163 = (uint64_t)v62;
      id v63 = v62;
      id v64 = v62;
      uint64_t v40 = v152;
      uint64_t v39 = (uint64_t)v153;
      uint64_t v54 = v157;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
      *uint64_t v61 = v64;
      uint64_t v65 = (uint64_t)v61;

      uint64_t v66 = v159;
      uint64_t v67 = v150;
      sub_17C68(&dword_0, v159, (os_log_type_t)v151, "Converted intent to: %@", v150);
      sub_6358(&qword_8C360);
      sub_B334(v65);
      sub_8870(v65);
      sub_8870((uint64_t)v67);
    }

    else
    {
      id v90 = v160;

      uint64_t v66 = v159;
    }

    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v54, v53);
    id v91 = *(void (**)(unint64_t *, uint64_t))(v40 + 8);
    uint64_t v92 = v158;
    uint64_t v93 = v39;
LABEL_10:
    v91(v92, v93);
    goto LABEL_22;
  }

  unint64_t v68 = v158;
  unint64_t v69 = (Class *)v159;
  if (v48 != enum case for Parse.directInvocation(_:))
  {
    if (v48 != enum case for Parse.uso(_:))
    {
      unint64_t v104 = sub_253BC();
      sub_13FF8((uint64_t)&type metadata for IntentConversionError, v104);
      *uint64_t v105 = 3;
      sub_254A0();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v44);
      goto LABEL_22;
    }

    sub_25464();
    uint64_t v94 = sub_254D4();
    uint64_t v96 = v95(v94);
    uint64_t v97 = USOParse.userParse.getter(v96);
    uint64_t v98 = Siri_Nlu_External_UserParse.userDialogActs.getter(v97);
    (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v20, v141);
    uint64_t v99 = v142;
    sub_52814(v98, v142);
    sub_10F84();
    uint64_t v100 = v147;
    if (sub_63E0(v99, 1LL, v147) == 1)
    {
      sub_6B60(v99, &qword_8C5F0);
    }

    else
    {
      uint64_t v108 = v139;
      uint64_t v109 = v146;
      sub_19A48(v146, v99, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v139 + 32));
      uint64_t v110 = v156;
      uint64_t v111 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v109);
      if (v110)
      {
        swift_errorRelease(v110);
      }

      else
      {
        uint64_t v117 = v111;
        if ((unint64_t)v111 >> 62)
        {
          if (v111 < 0) {
            uint64_t v135 = v111;
          }
          else {
            uint64_t v135 = v111 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain();
          uint64_t v118 = _CocoaArrayWrapper.endIndex.getter(v135);
          sub_10F84();
        }

        else
        {
          uint64_t v118 = *(void *)((char *)&dword_10 + (v111 & 0xFFFFFFFFFFFFF8LL));
        }

        uint64_t v119 = v155;
        if (v118)
        {
          sub_10000(0LL, (v117 & 0xC000000000000001LL) == 0, v117);
          if ((v117 & 0xC000000000000001LL) != 0)
          {
            uint64_t v120 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v117);
          }

          else
          {
            uint64_t v120 = *(void *)(v117 + 32);
            swift_retain(v120);
          }

          uint64_t v121 = sub_10F84();
          char v122 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v121);
          sub_24AC4(v120, v122 & 1, v68, v69, v138);
          uint64_t v156 = 0LL;
          uint64_t v124 = v123;
          uint64_t v125 = Logger.health.unsafeMutableAddressor(v123);
          sub_8894(v125, (uint64_t)v162);
          uint64_t v126 = v137;
          sub_112A4(v137, v125, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 16));
          id v160 = v124;
          uint64_t v127 = (os_log_s *)Logger.logObject.getter(v160);
          os_log_type_t v128 = static os_log_type_t.debug.getter(v127);
          if (os_log_type_enabled(v127, v128))
          {
            uint64_t v129 = (unint64_t *)sub_88B0(12LL);
            id v130 = (void *)sub_88B0(8LL);
            Swift::String v158 = v129;
            v159 = v127;
            *(_DWORD *)uint64_t v129 = 138412290;
            uint64_t v119 = v155;
            id v131 = v160;
            uint64_t v163 = (uint64_t)v160;
            id v132 = v160;
            uint64_t v127 = v159;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
            *id v130 = v131;
            uint64_t v126 = v137;

            uint64_t v133 = v158;
            sub_17C68(&dword_0, v127, v128, "Converted intent to: %@", (uint8_t *)v158);
            sub_6358(&qword_8C360);
            sub_B334((uint64_t)v130);
            sub_8870((uint64_t)v130);
            sub_8870((uint64_t)v133);
          }

          else
          {
            id v134 = v160;
          }

          swift_release(v120);
          (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v126, v119);
          (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v146, v147);
          uint64_t v92 = (unint64_t *)sub_254D4();
          goto LABEL_10;
        }

        sub_10F84();
        uint64_t v100 = v147;
        uint64_t v108 = v139;
      }

      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v146, v100);
    }

    unint64_t v112 = sub_253BC();
    sub_13FF8((uint64_t)&type metadata for IntentConversionError, v112);
    *uint64_t v113 = 0;
    sub_254A0();
    uint64_t v114 = sub_254D4();
    v116(v114, v115);
    goto LABEL_22;
  }

  sub_25464();
  uint64_t v71 = v151;
  uint64_t v70 = v152;
  uint64_t v72 = v150;
  (*(void (**)(uint64_t, char *, uint8_t *))(v151 + 32))(v152, v47, v150);
  uint64_t v73 = *(void (**)(char *, uint64_t, uint8_t *))(v71 + 16);
  v73(v12, v70, v72);
  uint64_t v74 = sub_2C64C();
  if (v75 == 1)
  {
    uint64_t v76 = v70;
    uint64_t v77 = Logger.workout.unsafeMutableAddressor(v74);
    sub_8894(v77, (uint64_t)v162);
    uint64_t v79 = v154;
    uint64_t v78 = v155;
    uint64_t v80 = (uint64_t)v149;
    sub_112A4((uint64_t)v149, v77, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 16));
    uint64_t v81 = v143;
    uint64_t v82 = ((uint64_t (*)(uint64_t, uint64_t, uint8_t *))v73)(v143, v76, v72);
    unint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
    os_log_type_t v84 = static os_log_type_t.error.getter();
    if (sub_254C8())
    {
      uint64_t v85 = v81;
      uint64_t v86 = (uint8_t *)sub_88B0(12LL);
      uint64_t v87 = sub_88B0(32LL);
      uint64_t v163 = v87;
      *(_DWORD *)uint64_t v86 = 136315138;
      uint64_t v88 = Parse.DirectInvocation.identifier.getter();
      uint64_t v161 = sub_173E0(v88, v89, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162);
      sub_10F84();
      sub_254B4(v85);
      sub_17C68(&dword_0, v83, v84, "Unknow DirectInvocation with identifier: %s", v86);
      sub_B334(v87);
      sub_8870(v87);
      sub_8870((uint64_t)v86);

      (*(void (**)(uint8_t *, uint64_t))(v79 + 8))(v149, v155);
    }

    else
    {
      sub_254B4(v81);

      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v80, v78);
    }

    unint64_t v106 = sub_253BC();
    sub_13FF8((uint64_t)&type metadata for IntentConversionError, v106);
    *uint64_t v107 = 2;
    sub_254A0();
    sub_254B4(v152);
  }

  else
  {
    uint64_t v101 = v74;
    uint64_t v102 = v75;
    sub_24CB4(v74, v75, v68, v69);
    id v160 = v103;
    sub_FFEC(v101, v102);
    (*(void (**)(uint64_t, uint8_t *))(v71 + 8))(v70, v72);
  }

LABEL_22:
  sub_2544C();
}

void sub_208EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = sub_C0E0(a1);
  char v10 = v9;
  int v11 = v9;
  uint64_t v12 = Logger.workout.unsafeMutableAddressor(v9);
  if (v11 != 5)
  {
    sub_8894(v12, (uint64_t)&v33);
    uint64_t v21 = sub_254BC((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.debug.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)sub_88B0(12LL);
      uint64_t v30 = sub_88B0(32LL);
      v34[0] = v30;
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v29 = v24 + 4;
      uint64_t v25 = sub_5AFF8(v10);
      unint64_t v27 = v26;
      uint64_t v31 = sub_173E0(v25, v26, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      swift_bridgeObjectRelease(v27);
      _os_log_impl(&dword_0, v22, v23, "Workout request type: %s", v24, 0xCu);
      uint64_t v28 = v30;
      swift_arrayDestroy(v30, 1LL);
      sub_8870(v28);
      sub_8870((uint64_t)v24);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    __asm { BR              X10 }
  }

  sub_8894(v12, (uint64_t)&v31);
  uint64_t v13 = sub_254BC((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)sub_88B0(2LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_0, v14, v15, "Couldn't find a verb for the workout request", v16, 2u);
    sub_8870((uint64_t)v16);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_25474();
  uint64_t v17 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v19 = ResponseFactory.init()(v18);
  v34[33] = v17;
  v34[34] = (uint64_t)&protocol witness table for ResponseFactory;
  v34[30] = v19;
  unint64_t v20 = sub_218FC();
  Flow.eraseToAnyFlow()(&type metadata for GenericErrorFlow, v20);
  sub_21938(v34);
  sub_10F48();
}

uint64_t sub_20C1C@<X0>(void *a1@<X8>)
{
  uint64_t v15 = 0LL;
  memset(v14, 0, sizeof(v14));
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0LL;
  memset(v8, 0, sizeof(v8));
  uint64_t v7 = 0LL;
  memset(v6, 0, sizeof(v6));
  uint64_t v5 = 0LL;
  memset(v4, 0, sizeof(v4));
  uint64_t v3 = 0LL;
  memset(v2, 0, sizeof(v2));
  a1[3] = &type metadata for FlowConfigModel;
  a1[4] = &protocol witness table for FlowConfigModel;
  *a1 = swift_allocObject(&unk_80858, 296LL, 7LL);
  return FlowConfigModel.init(deviceState:aceService:aceServiceAsync:sharedContextService:outputPublisher:flowFinder:networkStatusProvider:)( v14,  v12,  v10,  v8,  v6,  v4,  v2);
}

uint64_t sub_20CCC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = sub_6358(&qword_8D3C8);
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_6358(qword_8C368);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_6358(&qword_8D3D0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = type metadata accessor for DeviceIdiom(0LL);
  sub_8760((uint64_t)v9, 1LL, 1LL, v17);
  sub_22FFC(a1, a2, 0LL, (uint64_t)v9, (uint64_t)v16);
  sub_6B60((uint64_t)v9, qword_8C368);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  uint64_t v18 = sub_6358(&qword_8D3D8);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v14);
  uint64_t v28 = 0LL;
  swift_retain(v19);
  uint64_t v20 = sub_6358(&qword_8D3E0);
  uint64_t v21 = sub_2537C(&qword_8D3E8, &qword_8D3E0, (uint64_t)&unk_64510);
  RCHFlowFactory.init(strategy:childFlowFactory:)(&v28, v19, v20, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v4);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  uint64_t v28 = v22;
  uint64_t v23 = sub_6358(&qword_8D3F0);
  uint64_t v24 = sub_2537C(&qword_8D3F8, &qword_8D3F0, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release(v22);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  return v25;
}

uint64_t sub_20F3C(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = sub_6358(&qword_8D468);
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_6358(qword_8C368);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_6358(&qword_8D470);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = type metadata accessor for DeviceIdiom(0LL);
  sub_8760((uint64_t)v9, 1LL, 1LL, v17);
  sub_22A58(a1, a2, 0LL, (uint64_t)v9, (uint64_t)v16);
  sub_6B60((uint64_t)v9, qword_8C368);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  uint64_t v18 = sub_6358(&qword_8D478);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v14);
  uint64_t v28 = 0LL;
  swift_retain(v19);
  uint64_t v20 = sub_6358(&qword_8D480);
  uint64_t v21 = sub_2537C(&qword_8D488, &qword_8D480, (uint64_t)&unk_64510);
  RCHFlowFactory.init(strategy:childFlowFactory:)(&v28, v19, v20, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v4);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  uint64_t v28 = v22;
  uint64_t v23 = sub_6358(&qword_8D490);
  uint64_t v24 = sub_2537C(&qword_8D498, &qword_8D490, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release(v22);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  return v25;
}

uint64_t sub_211AC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = sub_6358(&qword_8D500);
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_6358(qword_8C368);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_6358(&qword_8D508);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = type metadata accessor for DeviceIdiom(0LL);
  sub_8760((uint64_t)v9, 1LL, 1LL, v17);
  sub_224B4(a1, a2, 0LL, (uint64_t)v9, (uint64_t)v16);
  sub_6B60((uint64_t)v9, qword_8C368);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  uint64_t v18 = sub_6358(&qword_8D510);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v14);
  uint64_t v28 = 0LL;
  swift_retain(v19);
  uint64_t v20 = sub_6358(&qword_8D518);
  uint64_t v21 = sub_2537C(&qword_8D520, &qword_8D518, (uint64_t)&unk_64510);
  RCHFlowFactory.init(strategy:childFlowFactory:)(&v28, v19, v20, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v4);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  uint64_t v28 = v22;
  uint64_t v23 = sub_6358(&qword_8D528);
  uint64_t v24 = sub_2537C(&qword_8D530, &qword_8D528, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release(v22);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  return v25;
}

uint64_t sub_2141C(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = sub_6358(&qword_8D598);
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_6358(qword_8C368);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_6358(&qword_8D5A0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = type metadata accessor for DeviceIdiom(0LL);
  sub_8760((uint64_t)v9, 1LL, 1LL, v17);
  sub_21F10(a1, a2, 0LL, (uint64_t)v9, (uint64_t)v16);
  sub_6B60((uint64_t)v9, qword_8C368);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  uint64_t v18 = sub_6358(&qword_8D5A8);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v14);
  uint64_t v28 = 0LL;
  swift_retain(v19);
  uint64_t v20 = sub_6358(&qword_8D5B0);
  uint64_t v21 = sub_2537C(&qword_8D5B8, &qword_8D5B0, (uint64_t)&unk_64510);
  RCHFlowFactory.init(strategy:childFlowFactory:)(&v28, v19, v20, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v4);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  uint64_t v28 = v22;
  uint64_t v23 = sub_6358(&qword_8D5C0);
  uint64_t v24 = sub_2537C(&qword_8D5C8, &qword_8D5C0, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release(v22);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  return v25;
}

uint64_t sub_2168C(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = sub_6358(&qword_8D630);
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_6358(qword_8C368);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_6358(&qword_8D638);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = type metadata accessor for DeviceIdiom(0LL);
  sub_8760((uint64_t)v9, 1LL, 1LL, v17);
  sub_2196C(a1, a2, 0LL, (uint64_t)v9, (uint64_t)v16);
  sub_6B60((uint64_t)v9, qword_8C368);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  uint64_t v18 = sub_6358(&qword_8D640);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v14);
  uint64_t v28 = 0LL;
  swift_retain(v19);
  uint64_t v20 = sub_6358(&qword_8D648);
  uint64_t v21 = sub_2537C(&qword_8D650, &qword_8D648, (uint64_t)&unk_64510);
  RCHFlowFactory.init(strategy:childFlowFactory:)(&v28, v19, v20, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v4);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  uint64_t v28 = v22;
  uint64_t v23 = sub_6358(&qword_8D658);
  uint64_t v24 = sub_2537C(&qword_8D660, &qword_8D658, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release(v22);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  return v25;
}

unint64_t sub_218FC()
{
  unint64_t result = qword_8D3C0;
  if (!qword_8D3C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_63204, &type metadata for GenericErrorFlow);
    atomic_store(result, (unint64_t *)&qword_8D3C0);
  }

  return result;
}

void *sub_21938(void *a1)
{
  return a1;
}

uint64_t sub_2196C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = a4;
  id v65 = a3;
  uint64_t v58 = a5;
  uint64_t v59 = a1;
  uint64_t v63 = sub_6358(&qword_8D668);
  __chkstk_darwin(v63);
  uint64_t v61 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_AF38(0LL, (unint64_t *)&qword_8BE58, &OBJC_CLASS___INResumeWorkoutIntent_ptr);
  uint64_t v9 = sub_AF38(0LL, &qword_8C6A0, &OBJC_CLASS___INResumeWorkoutIntentResponse_ptr);
  uint64_t v62 = v9;
  RCHChildFlowProducersAsync.init()(v8, v9);
  uint64_t v10 = _typeName(_:qualified:)(v8, 0LL);
  uint64_t v12 = v11;
  sub_25230(a1, (uint64_t)v80);
  sub_25274(a2, v72);
  uint64_t v13 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v15 = ResponseFactory.init()(v14);
  uint64_t v16 = type metadata accessor for WorkoutAppResolutionStrategyAsync();
  uint64_t v17 = (void *)swift_allocObject(v16, 352LL, 7LL);
  uint64_t v76 = &protocol witness table for ResponseFactory;
  uint64_t v75 = v13;
  *(void *)&__int128 v74 = v15;
  v17[2] = v10;
  void v17[3] = v12;
  sub_D99C(v80, (uint64_t)(v17 + 4));
  memcpy(v17 + 9, v72, 0xF0uLL);
  sub_D99C(&v74, (uint64_t)(v17 + 39));
  *(void *)&v72[0] = v17;
  unint64_t v18 = sub_252B0();
  uint64_t v19 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)(v72, v16, v8, v9, v18);
  uint64_t v21 = v20;
  uint64_t v22 = sub_6358(&qword_8D638);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v19, v21, v22);
  sub_25274(a2, v80);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  id v23 = v65;
  id v60 = v65;
  uint64_t v24 = ResponseFactory.init()(v60);
  uint64_t v83 = v13;
  os_log_type_t v84 = &protocol witness table for ResponseFactory;
  uint64_t v82 = v24;
  id v81 = v23;
  uint64_t v25 = sub_6358(&qword_8D670);
  uint64_t v26 = sub_2537C(&qword_8D678, &qword_8D670, (uint64_t)&unk_64B80);
  uint64_t v27 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v80, v25, v26);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v27);
  sub_25274(a2, &v74);
  uint64_t v28 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v29 = ResponseFactory.init()(v28);
  uint64_t v79 = &protocol witness table for ResponseFactory;
  uint64_t v78 = v13;
  uint64_t v77 = v29;
  uint64_t v30 = sub_6358(&qword_8D680);
  uint64_t v31 = sub_2537C(&qword_8D688, &qword_8D680, (uint64_t)&unk_61720);
  uint64_t v32 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(&v74, v30, v31);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter(v32);
  sub_25274(a2, v72);
  uint64_t v33 = v59;
  sub_25230(v59, (uint64_t)v73);
  uint64_t v34 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v35 = ResponseFactory.init()(v34);
  v73[9] = &protocol witness table for ResponseFactory;
  v73[8] = v13;
  v73[5] = v35;
  uint64_t v36 = sub_6358(&qword_8D690);
  uint64_t v37 = sub_2537C(&qword_8D698, &qword_8D690, (uint64_t)&unk_67638);
  uint64_t v38 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)(v72, v36, v37);
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v38);
  sub_25274(a2, v68);
  uint64_t v39 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v40 = ResponseFactory.init()(v39);
  uint64_t v70 = v13;
  uint64_t v71 = &protocol witness table for ResponseFactory;
  uint64_t v69 = v40;
  uint64_t v41 = sub_6358(&qword_8D6A0);
  uint64_t v42 = sub_2537C(&qword_8D6A8, &qword_8D6A0, (uint64_t)&unk_62C18);
  uint64_t v43 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v68, v41, v42);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v43);
  uint64_t v44 = v33;
  uint64_t v45 = (void *)v33;
  uint64_t v46 = v61;
  sub_25230(v44, v61);
  sub_25274(a2, (_OWORD *)(v46 + 40));
  uint64_t v47 = v63;
  sub_AF70(v64, v46 + *(int *)(v63 + 52));
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v48 = ResponseFactory.init()(v60);
  uint64_t v49 = (uint64_t *)(v46 + *(int *)(v47 + 56));
  v49[3] = v13;
  v49[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *uint64_t v49 = v48;
  *(void *)(v46 + 280) = v65;
  uint64_t v50 = sub_2537C(&qword_8D6B0, &qword_8D668, (uint64_t)&unk_618C0);
  uint64_t v51 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)(v46, v47, v50);
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter(v51);
  uint64_t v52 = v45[3];
  uint64_t v53 = v45[4];
  sub_8734(v45, v52);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v53 + 8))(v66, v52, v53);
  v66[8] = &type metadata for LabelTemplatesProvider;
  v66[9] = &off_80040;
  v67[3] = type metadata accessor for TCCResponses(0LL);
  v67[4] = &off_82ED8;
  sub_6B9C(v67);
  TCCResponses.init()();
  uint64_t v54 = sub_6358(&qword_8D6B8);
  uint64_t v55 = sub_2537C(&qword_8D6C0, &qword_8D6B8, (uint64_t)&unk_64FE0);
  uint64_t v56 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)(v66, v54, v62, v55);
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter(v56);
  swift_release(v17);
  sub_6B60((uint64_t)v66, &qword_8D6B8);
  sub_6B60(v46, &qword_8D668);
  sub_6B60((uint64_t)v68, &qword_8D6A0);
  sub_6B60((uint64_t)v72, &qword_8D690);
  sub_6B60((uint64_t)&v74, &qword_8D680);
  return sub_6B60((uint64_t)v80, &qword_8D670);
}

uint64_t sub_21F10@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = a4;
  id v65 = a3;
  uint64_t v58 = a5;
  uint64_t v59 = a1;
  uint64_t v63 = sub_6358(&qword_8D5D0);
  __chkstk_darwin(v63);
  uint64_t v61 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_AF38(0LL, (unint64_t *)&qword_8C888, &OBJC_CLASS___INCancelWorkoutIntent_ptr);
  uint64_t v9 = sub_AF38(0LL, &qword_8C890, &OBJC_CLASS___INCancelWorkoutIntentResponse_ptr);
  uint64_t v62 = v9;
  RCHChildFlowProducersAsync.init()(v8, v9);
  uint64_t v10 = _typeName(_:qualified:)(v8, 0LL);
  uint64_t v12 = v11;
  sub_25230(a1, (uint64_t)v80);
  sub_25274(a2, v72);
  uint64_t v13 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v15 = ResponseFactory.init()(v14);
  uint64_t v16 = type metadata accessor for WorkoutAppResolutionStrategyAsync();
  uint64_t v17 = (void *)swift_allocObject(v16, 352LL, 7LL);
  uint64_t v76 = &protocol witness table for ResponseFactory;
  uint64_t v75 = v13;
  *(void *)&__int128 v74 = v15;
  v17[2] = v10;
  void v17[3] = v12;
  sub_D99C(v80, (uint64_t)(v17 + 4));
  memcpy(v17 + 9, v72, 0xF0uLL);
  sub_D99C(&v74, (uint64_t)(v17 + 39));
  *(void *)&v72[0] = v17;
  unint64_t v18 = sub_252B0();
  uint64_t v19 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)(v72, v16, v8, v9, v18);
  uint64_t v21 = v20;
  uint64_t v22 = sub_6358(&qword_8D5A0);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v19, v21, v22);
  sub_25274(a2, v80);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  id v23 = v65;
  id v60 = v65;
  uint64_t v24 = ResponseFactory.init()(v60);
  uint64_t v83 = v13;
  os_log_type_t v84 = &protocol witness table for ResponseFactory;
  uint64_t v82 = v24;
  id v81 = v23;
  uint64_t v25 = sub_6358(&qword_8D5D8);
  uint64_t v26 = sub_2537C(&qword_8D5E0, &qword_8D5D8, (uint64_t)&unk_64B80);
  uint64_t v27 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v80, v25, v26);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v27);
  sub_25274(a2, &v74);
  uint64_t v28 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v29 = ResponseFactory.init()(v28);
  uint64_t v79 = &protocol witness table for ResponseFactory;
  uint64_t v78 = v13;
  uint64_t v77 = v29;
  uint64_t v30 = sub_6358(&qword_8D5E8);
  uint64_t v31 = sub_2537C(&qword_8D5F0, &qword_8D5E8, (uint64_t)&unk_61720);
  uint64_t v32 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(&v74, v30, v31);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter(v32);
  sub_25274(a2, v72);
  uint64_t v33 = v59;
  sub_25230(v59, (uint64_t)v73);
  uint64_t v34 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v35 = ResponseFactory.init()(v34);
  v73[9] = &protocol witness table for ResponseFactory;
  v73[8] = v13;
  v73[5] = v35;
  uint64_t v36 = sub_6358(&qword_8D5F8);
  uint64_t v37 = sub_2537C(&qword_8D600, &qword_8D5F8, (uint64_t)&unk_67638);
  uint64_t v38 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)(v72, v36, v37);
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v38);
  sub_25274(a2, v68);
  uint64_t v39 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v40 = ResponseFactory.init()(v39);
  uint64_t v70 = v13;
  uint64_t v71 = &protocol witness table for ResponseFactory;
  uint64_t v69 = v40;
  uint64_t v41 = sub_6358(&qword_8D608);
  uint64_t v42 = sub_2537C(&qword_8D610, &qword_8D608, (uint64_t)&unk_62C18);
  uint64_t v43 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v68, v41, v42);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v43);
  uint64_t v44 = v33;
  uint64_t v45 = (void *)v33;
  uint64_t v46 = v61;
  sub_25230(v44, v61);
  sub_25274(a2, (_OWORD *)(v46 + 40));
  uint64_t v47 = v63;
  sub_AF70(v64, v46 + *(int *)(v63 + 52));
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v48 = ResponseFactory.init()(v60);
  uint64_t v49 = (uint64_t *)(v46 + *(int *)(v47 + 56));
  v49[3] = v13;
  v49[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *uint64_t v49 = v48;
  *(void *)(v46 + 280) = v65;
  uint64_t v50 = sub_2537C(&qword_8D618, &qword_8D5D0, (uint64_t)&unk_618C0);
  uint64_t v51 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)(v46, v47, v50);
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter(v51);
  uint64_t v52 = v45[3];
  uint64_t v53 = v45[4];
  sub_8734(v45, v52);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v53 + 8))(v66, v52, v53);
  v66[8] = &type metadata for LabelTemplatesProvider;
  v66[9] = &off_80040;
  v67[3] = type metadata accessor for TCCResponses(0LL);
  v67[4] = &off_82ED8;
  sub_6B9C(v67);
  TCCResponses.init()();
  uint64_t v54 = sub_6358(&qword_8D620);
  uint64_t v55 = sub_2537C(&qword_8D628, &qword_8D620, (uint64_t)&unk_64FE0);
  uint64_t v56 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)(v66, v54, v62, v55);
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter(v56);
  swift_release(v17);
  sub_6B60((uint64_t)v66, &qword_8D620);
  sub_6B60(v46, &qword_8D5D0);
  sub_6B60((uint64_t)v68, &qword_8D608);
  sub_6B60((uint64_t)v72, &qword_8D5F8);
  sub_6B60((uint64_t)&v74, &qword_8D5E8);
  return sub_6B60((uint64_t)v80, &qword_8D5D8);
}

uint64_t sub_224B4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = a4;
  id v65 = a3;
  uint64_t v58 = a5;
  uint64_t v59 = a1;
  uint64_t v63 = sub_6358(&qword_8D538);
  __chkstk_darwin(v63);
  uint64_t v61 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_AF38(0LL, (unint64_t *)&qword_8C7A8, &OBJC_CLASS___INPauseWorkoutIntent_ptr);
  uint64_t v9 = sub_AF38(0LL, &qword_8C7B0, &OBJC_CLASS___INPauseWorkoutIntentResponse_ptr);
  uint64_t v62 = v9;
  RCHChildFlowProducersAsync.init()(v8, v9);
  uint64_t v10 = _typeName(_:qualified:)(v8, 0LL);
  uint64_t v12 = v11;
  sub_25230(a1, (uint64_t)v80);
  sub_25274(a2, v72);
  uint64_t v13 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v15 = ResponseFactory.init()(v14);
  uint64_t v16 = type metadata accessor for WorkoutAppResolutionStrategyAsync();
  uint64_t v17 = (void *)swift_allocObject(v16, 352LL, 7LL);
  uint64_t v76 = &protocol witness table for ResponseFactory;
  uint64_t v75 = v13;
  *(void *)&__int128 v74 = v15;
  v17[2] = v10;
  void v17[3] = v12;
  sub_D99C(v80, (uint64_t)(v17 + 4));
  memcpy(v17 + 9, v72, 0xF0uLL);
  sub_D99C(&v74, (uint64_t)(v17 + 39));
  *(void *)&v72[0] = v17;
  unint64_t v18 = sub_252B0();
  uint64_t v19 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)(v72, v16, v8, v9, v18);
  uint64_t v21 = v20;
  uint64_t v22 = sub_6358(&qword_8D508);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v19, v21, v22);
  sub_25274(a2, v80);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  id v23 = v65;
  id v60 = v65;
  uint64_t v24 = ResponseFactory.init()(v60);
  uint64_t v83 = v13;
  os_log_type_t v84 = &protocol witness table for ResponseFactory;
  uint64_t v82 = v24;
  id v81 = v23;
  uint64_t v25 = sub_6358(&qword_8D540);
  uint64_t v26 = sub_2537C(&qword_8D548, &qword_8D540, (uint64_t)&unk_64B80);
  uint64_t v27 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v80, v25, v26);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v27);
  sub_25274(a2, &v74);
  uint64_t v28 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v29 = ResponseFactory.init()(v28);
  uint64_t v79 = &protocol witness table for ResponseFactory;
  uint64_t v78 = v13;
  uint64_t v77 = v29;
  uint64_t v30 = sub_6358(&qword_8D550);
  uint64_t v31 = sub_2537C(&qword_8D558, &qword_8D550, (uint64_t)&unk_61720);
  uint64_t v32 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(&v74, v30, v31);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter(v32);
  sub_25274(a2, v72);
  uint64_t v33 = v59;
  sub_25230(v59, (uint64_t)v73);
  uint64_t v34 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v35 = ResponseFactory.init()(v34);
  v73[9] = &protocol witness table for ResponseFactory;
  v73[8] = v13;
  v73[5] = v35;
  uint64_t v36 = sub_6358(&qword_8D560);
  uint64_t v37 = sub_2537C(&qword_8D568, &qword_8D560, (uint64_t)&unk_67638);
  uint64_t v38 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)(v72, v36, v37);
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v38);
  sub_25274(a2, v68);
  uint64_t v39 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v40 = ResponseFactory.init()(v39);
  uint64_t v70 = v13;
  uint64_t v71 = &protocol witness table for ResponseFactory;
  uint64_t v69 = v40;
  uint64_t v41 = sub_6358(&qword_8D570);
  uint64_t v42 = sub_2537C(&qword_8D578, &qword_8D570, (uint64_t)&unk_62C18);
  uint64_t v43 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v68, v41, v42);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v43);
  uint64_t v44 = v33;
  uint64_t v45 = (void *)v33;
  uint64_t v46 = v61;
  sub_25230(v44, v61);
  sub_25274(a2, (_OWORD *)(v46 + 40));
  uint64_t v47 = v63;
  sub_AF70(v64, v46 + *(int *)(v63 + 52));
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v48 = ResponseFactory.init()(v60);
  uint64_t v49 = (uint64_t *)(v46 + *(int *)(v47 + 56));
  v49[3] = v13;
  v49[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *uint64_t v49 = v48;
  *(void *)(v46 + 280) = v65;
  uint64_t v50 = sub_2537C(&qword_8D580, &qword_8D538, (uint64_t)&unk_618C0);
  uint64_t v51 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)(v46, v47, v50);
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter(v51);
  uint64_t v52 = v45[3];
  uint64_t v53 = v45[4];
  sub_8734(v45, v52);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v53 + 8))(v66, v52, v53);
  v66[8] = &type metadata for LabelTemplatesProvider;
  v66[9] = &off_80040;
  v67[3] = type metadata accessor for TCCResponses(0LL);
  v67[4] = &off_82ED8;
  sub_6B9C(v67);
  TCCResponses.init()();
  uint64_t v54 = sub_6358(&qword_8D588);
  uint64_t v55 = sub_2537C(&qword_8D590, &qword_8D588, (uint64_t)&unk_64FE0);
  uint64_t v56 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)(v66, v54, v62, v55);
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter(v56);
  swift_release(v17);
  sub_6B60((uint64_t)v66, &qword_8D588);
  sub_6B60(v46, &qword_8D538);
  sub_6B60((uint64_t)v68, &qword_8D570);
  sub_6B60((uint64_t)v72, &qword_8D560);
  sub_6B60((uint64_t)&v74, &qword_8D550);
  return sub_6B60((uint64_t)v80, &qword_8D540);
}

uint64_t sub_22A58@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = a4;
  id v65 = a3;
  uint64_t v58 = a5;
  uint64_t v59 = a1;
  uint64_t v63 = sub_6358(&qword_8D4A0);
  __chkstk_darwin(v63);
  uint64_t v61 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_AF38(0LL, (unint64_t *)&qword_8C728, &OBJC_CLASS___INEndWorkoutIntent_ptr);
  uint64_t v9 = sub_AF38(0LL, &qword_8C730, &OBJC_CLASS___INEndWorkoutIntentResponse_ptr);
  uint64_t v62 = v9;
  RCHChildFlowProducersAsync.init()(v8, v9);
  uint64_t v10 = _typeName(_:qualified:)(v8, 0LL);
  uint64_t v12 = v11;
  sub_25230(a1, (uint64_t)v80);
  sub_25274(a2, v72);
  uint64_t v13 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v15 = ResponseFactory.init()(v14);
  uint64_t v16 = type metadata accessor for WorkoutAppResolutionStrategyAsync();
  uint64_t v17 = (void *)swift_allocObject(v16, 352LL, 7LL);
  uint64_t v76 = &protocol witness table for ResponseFactory;
  uint64_t v75 = v13;
  *(void *)&__int128 v74 = v15;
  v17[2] = v10;
  void v17[3] = v12;
  sub_D99C(v80, (uint64_t)(v17 + 4));
  memcpy(v17 + 9, v72, 0xF0uLL);
  sub_D99C(&v74, (uint64_t)(v17 + 39));
  *(void *)&v72[0] = v17;
  unint64_t v18 = sub_252B0();
  uint64_t v19 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)(v72, v16, v8, v9, v18);
  uint64_t v21 = v20;
  uint64_t v22 = sub_6358(&qword_8D470);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v19, v21, v22);
  sub_25274(a2, v80);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  id v23 = v65;
  id v60 = v65;
  uint64_t v24 = ResponseFactory.init()(v60);
  uint64_t v83 = v13;
  os_log_type_t v84 = &protocol witness table for ResponseFactory;
  uint64_t v82 = v24;
  id v81 = v23;
  uint64_t v25 = sub_6358(&qword_8D4A8);
  uint64_t v26 = sub_2537C(&qword_8D4B0, &qword_8D4A8, (uint64_t)&unk_64B80);
  uint64_t v27 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v80, v25, v26);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v27);
  sub_25274(a2, &v74);
  uint64_t v28 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v29 = ResponseFactory.init()(v28);
  uint64_t v79 = &protocol witness table for ResponseFactory;
  uint64_t v78 = v13;
  uint64_t v77 = v29;
  uint64_t v30 = sub_6358(&qword_8D4B8);
  uint64_t v31 = sub_2537C(&qword_8D4C0, &qword_8D4B8, (uint64_t)&unk_61720);
  uint64_t v32 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(&v74, v30, v31);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter(v32);
  sub_25274(a2, v72);
  uint64_t v33 = v59;
  sub_25230(v59, (uint64_t)v73);
  uint64_t v34 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v35 = ResponseFactory.init()(v34);
  v73[9] = &protocol witness table for ResponseFactory;
  v73[8] = v13;
  v73[5] = v35;
  uint64_t v36 = sub_6358(&qword_8D4C8);
  uint64_t v37 = sub_2537C(&qword_8D4D0, &qword_8D4C8, (uint64_t)&unk_67638);
  uint64_t v38 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)(v72, v36, v37);
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v38);
  sub_25274(a2, v68);
  uint64_t v39 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v40 = ResponseFactory.init()(v39);
  uint64_t v70 = v13;
  uint64_t v71 = &protocol witness table for ResponseFactory;
  uint64_t v69 = v40;
  uint64_t v41 = sub_6358(&qword_8D4D8);
  uint64_t v42 = sub_2537C(&qword_8D4E0, &qword_8D4D8, (uint64_t)&unk_62C18);
  uint64_t v43 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v68, v41, v42);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v43);
  uint64_t v44 = v33;
  uint64_t v45 = (void *)v33;
  uint64_t v46 = v61;
  sub_25230(v44, v61);
  sub_25274(a2, (_OWORD *)(v46 + 40));
  uint64_t v47 = v63;
  sub_AF70(v64, v46 + *(int *)(v63 + 52));
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v48 = ResponseFactory.init()(v60);
  uint64_t v49 = (uint64_t *)(v46 + *(int *)(v47 + 56));
  v49[3] = v13;
  v49[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *uint64_t v49 = v48;
  *(void *)(v46 + 280) = v65;
  uint64_t v50 = sub_2537C(&qword_8D4E8, &qword_8D4A0, (uint64_t)&unk_618C0);
  uint64_t v51 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)(v46, v47, v50);
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter(v51);
  uint64_t v52 = v45[3];
  uint64_t v53 = v45[4];
  sub_8734(v45, v52);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v53 + 8))(v66, v52, v53);
  v66[8] = &type metadata for LabelTemplatesProvider;
  v66[9] = &off_80040;
  v67[3] = type metadata accessor for TCCResponses(0LL);
  v67[4] = &off_82ED8;
  sub_6B9C(v67);
  TCCResponses.init()();
  uint64_t v54 = sub_6358(&qword_8D4F0);
  uint64_t v55 = sub_2537C(&qword_8D4F8, &qword_8D4F0, (uint64_t)&unk_64FE0);
  uint64_t v56 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)(v66, v54, v62, v55);
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter(v56);
  swift_release(v17);
  sub_6B60((uint64_t)v66, &qword_8D4F0);
  sub_6B60(v46, &qword_8D4A0);
  sub_6B60((uint64_t)v68, &qword_8D4D8);
  sub_6B60((uint64_t)v72, &qword_8D4C8);
  sub_6B60((uint64_t)&v74, &qword_8D4B8);
  return sub_6B60((uint64_t)v80, &qword_8D4A8);
}

uint64_t sub_22FFC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v60 = a4;
  id v61 = a3;
  uint64_t v54 = a5;
  uint64_t v55 = a1;
  uint64_t v59 = sub_6358(&qword_8D400);
  __chkstk_darwin(v59);
  uint64_t v57 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_AF38(0LL, (unint64_t *)&qword_8C828, &OBJC_CLASS___INStartWorkoutIntent_ptr);
  uint64_t v9 = sub_AF38(0LL, &qword_8C830, &OBJC_CLASS___INStartWorkoutIntentResponse_ptr);
  uint64_t v58 = v9;
  RCHChildFlowProducersAsync.init()(v8, v9);
  uint64_t v10 = _typeName(_:qualified:)(v8, 0LL);
  uint64_t v12 = v11;
  sub_25230(a1, (uint64_t)v76);
  sub_25274(a2, v68);
  uint64_t v13 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v14 = ((uint64_t (*)(void))ResponseFactory.init())();
  uint64_t v15 = type metadata accessor for WorkoutAppResolutionStrategyAsync();
  uint64_t v16 = (void *)swift_allocObject(v15, 352LL, 7LL);
  uint64_t v72 = &protocol witness table for ResponseFactory;
  uint64_t v71 = v13;
  *(void *)&__int128 v70 = v14;
  v16[2] = v10;
  v16[3] = v12;
  sub_D99C(v76, (uint64_t)(v16 + 4));
  memcpy(v16 + 9, v68, 0xF0uLL);
  sub_D99C(&v70, (uint64_t)(v16 + 39));
  *(void *)&v68[0] = v16;
  unint64_t v17 = sub_252B0();
  uint64_t v18 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)(v68, v15, v8, v9, v17);
  uint64_t v20 = v19;
  uint64_t v21 = sub_6358(&qword_8D3D0);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v18, v20, v21);
  sub_25274(a2, v76);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  id v22 = v61;
  id v56 = v61;
  uint64_t v23 = ((uint64_t (*)(void))ResponseFactory.init())();
  uint64_t v79 = v13;
  uint64_t v80 = &protocol witness table for ResponseFactory;
  uint64_t v78 = v23;
  id v77 = v22;
  uint64_t v24 = sub_6358(&qword_8D410);
  uint64_t v25 = sub_2537C(&qword_8D418, &qword_8D410, (uint64_t)&unk_64B80);
  uint64_t v26 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)(v76, v24, v25);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v26);
  sub_25274(a2, &v70);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v27 = ((uint64_t (*)(void))ResponseFactory.init())();
  uint64_t v75 = &protocol witness table for ResponseFactory;
  uint64_t v74 = v13;
  uint64_t v73 = v27;
  uint64_t v28 = sub_6358(&qword_8D420);
  uint64_t v29 = sub_2537C(&qword_8D428, &qword_8D420, (uint64_t)&unk_61720);
  uint64_t v30 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(&v70, v28, v29);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter(v30);
  sub_25274(a2, v68);
  uint64_t v31 = v55;
  sub_25230(v55, (uint64_t)v69);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v32 = ((uint64_t (*)(void))ResponseFactory.init())();
  v69[9] = &protocol witness table for ResponseFactory;
  v69[8] = v13;
  v69[5] = v32;
  uint64_t v33 = sub_6358(&qword_8D430);
  uint64_t v34 = sub_2537C(&qword_8D438, &qword_8D430, (uint64_t)&unk_67638);
  uint64_t v35 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)(v68, v33, v34);
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v35);
  sub_25274(a2, v64);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v36 = ((uint64_t (*)(void))ResponseFactory.init())();
  uint64_t v66 = v13;
  uint64_t v67 = &protocol witness table for ResponseFactory;
  uint64_t v65 = v36;
  uint64_t v37 = sub_6358(&qword_8D440);
  uint64_t v38 = sub_2537C(&qword_8D448, &qword_8D440, (uint64_t)&unk_62C18);
  uint64_t v39 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v64, v37, v38);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v39);
  uint64_t v40 = v31;
  uint64_t v41 = (void *)v31;
  uint64_t v42 = v57;
  sub_25230(v40, v57);
  sub_25274(a2, (_OWORD *)(v42 + 40));
  uint64_t v43 = v59;
  sub_AF70(v60, v42 + *(int *)(v59 + 52));
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v44 = ResponseFactory.init()(v56);
  uint64_t v45 = (uint64_t *)(v42 + *(int *)(v43 + 56));
  v45[3] = v13;
  v45[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *uint64_t v45 = v44;
  *(void *)(v42 + 280) = v61;
  uint64_t v46 = sub_2537C(&qword_8D450, &qword_8D400, (uint64_t)&unk_618C0);
  uint64_t v47 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)(v42, v43, v46);
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter(v47);
  uint64_t v48 = v41[3];
  uint64_t v49 = v41[4];
  sub_8734(v41, v48);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v49 + 8))(v62, v48, v49);
  v62[8] = &type metadata for LabelTemplatesProvider;
  v62[9] = &off_80040;
  v63[3] = type metadata accessor for TCCResponses(0LL);
  v63[4] = &off_82ED8;
  sub_6B9C(v63);
  TCCResponses.init()();
  uint64_t v50 = sub_6358(&qword_8D458);
  uint64_t v51 = sub_2537C(&qword_8D460, &qword_8D458, (uint64_t)&unk_64FE0);
  uint64_t v52 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)(v62, v50, v58, v51);
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter(v52);
  swift_release(v16);
  sub_6B60((uint64_t)v62, &qword_8D458);
  sub_6B60(v42, &qword_8D400);
  sub_6B60((uint64_t)v64, &qword_8D440);
  sub_6B60((uint64_t)v68, &qword_8D430);
  sub_6B60((uint64_t)&v70, &qword_8D420);
  return sub_6B60((uint64_t)v76, &qword_8D410);
}

void sub_235A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v5 = type metadata accessor for DeviceIdiom(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = sub_2547C();
  uint64_t v8 = type metadata accessor for Logger(v7);
  uint64_t v55 = *(void *)(v8 - 8);
  uint64_t v56 = v8;
  sub_C870();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v54 = (uint64_t)&v47 - v13;
  uint64_t v14 = a1;
  uint64_t v15 = sub_C0E0(a1);
  char v16 = v15;
  int v17 = v15;
  uint64_t v18 = Logger.workout.unsafeMutableAddressor(v15);
  uint64_t v19 = v18;
  if (v17 != 5)
  {
    uint64_t v48 = v3;
    uint64_t v49 = v6;
    uint64_t v50 = v5;
    uint64_t v51 = v14;
    sub_8894(v18, (uint64_t)v57);
    uint64_t v30 = v55;
    uint64_t v31 = v19;
    uint64_t v32 = v56;
    uint64_t v33 = sub_19A48(v54, v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16));
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.debug.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)sub_88B0(12LL);
      uint64_t v37 = sub_88B0(32LL);
      v58[0] = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      uint64_t v47 = v36 + 4;
      uint64_t v38 = sub_5AFF8(v16);
      unint64_t v40 = v39;
      uint64_t v59 = sub_173E0(v38, v39, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      swift_bridgeObjectRelease(v40);
      sub_17C68(&dword_0, v34, v35, "Workout request type: %s", v36);
      sub_B334(v37);
      sub_8870(v37);
      sub_8870((uint64_t)v36);

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    }

    else
    {

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v54, v32);
    }

    uint64_t v41 = v49;
    uint64_t v42 = v50;
    uint64_t v43 = v48;
    (*(void (**)(uint64_t, void, uint64_t))(v49 + 104))(v48, enum case for DeviceIdiom.watch(_:), v50);
    char v44 = static DeviceIdiom.== infix(_:_:)(v53, v43);
    uint64_t v45 = v41;
    LOBYTE(v41) = v44;
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v42);
    if ((v41 & 1) != 0) {
      uint64_t v46 = 5LL;
    }
    else {
      uint64_t v46 = 10LL;
    }
    HealthApps.app.getter(v46);
    __asm { BR              X10 }
  }

  sub_8894(v18, (uint64_t)v58);
  uint64_t v21 = v55;
  uint64_t v20 = v56;
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 16))(v12, v19, v56);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)sub_88B0(2LL);
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_0, v23, v24, "Couldn't find a verb for the workout request", v25, 2u);
    sub_8870((uint64_t)v25);
  }

  (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v20);
  sub_33E9C(v57);
  uint64_t v26 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  uint64_t v28 = ResponseFactory.init()(v27);
  v57[33] = v26;
  v57[34] = (uint64_t)&protocol witness table for ResponseFactory;
  v57[30] = v28;
  unint64_t v29 = sub_218FC();
  Flow.eraseToAnyFlow()(&type metadata for GenericErrorFlow, v29);
  sub_21938(v57);
  sub_2544C();
}

uint64_t sub_23A48(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = a2;
  uint64_t v5 = sub_6358(&qword_8D3C8);
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_6358(qword_8C368);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_6358(&qword_8D3D0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  int v17 = (char *)&v30 - v16;
  uint64_t v35 = 0LL;
  memset(v34, 0, sizeof(v34));
  uint64_t v47 = 0LL;
  memset(v46, 0, sizeof(v46));
  uint64_t v45 = 0LL;
  memset(v44, 0, sizeof(v44));
  uint64_t v43 = 0LL;
  memset(v42, 0, sizeof(v42));
  uint64_t v41 = 0LL;
  memset(v40, 0, sizeof(v40));
  uint64_t v39 = 0LL;
  memset(v38, 0, sizeof(v38));
  uint64_t v37 = 0LL;
  memset(v36, 0, sizeof(v36));
  v48[3] = &type metadata for FlowConfigModel;
  v48[4] = &protocol witness table for FlowConfigModel;
  v48[0] = swift_allocObject(&unk_80858, 296LL, 7LL);
  FlowConfigModel.init(deviceState:aceService:aceServiceAsync:sharedContextService:outputPublisher:flowFinder:networkStatusProvider:)( v34,  v46,  v44,  v42,  v40,  v38,  v36);
  sub_33E9C((uint64_t *)v34);
  uint64_t v18 = type metadata accessor for DeviceIdiom(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v10, v30, v18);
  sub_8760((uint64_t)v10, 0LL, 1LL, v18);
  sub_22FFC((uint64_t)v48, v34, a1, (uint64_t)v10, (uint64_t)v17);
  sub_6B60((uint64_t)v10, qword_8C368);
  sub_1F08C(v34);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v48);
  uint64_t v19 = v11;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  uint64_t v20 = sub_6358(&qword_8D3D8);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = RCHChildFlowFactory.init(producers:)(v15);
  *(void *)&v34[0] = a1;
  id v22 = a1;
  swift_retain(v21);
  uint64_t v23 = sub_6358(&qword_8D3E0);
  uint64_t v24 = sub_2537C(&qword_8D3E8, &qword_8D3E0, (uint64_t)&unk_64510);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v34, v21, v23, v24);
  uint64_t v25 = RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)(v32, v33, v5);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
  *(void *)&v34[0] = v25;
  uint64_t v26 = sub_6358(&qword_8D3F0);
  uint64_t v27 = sub_2537C(&qword_8D3F8, &qword_8D3F0, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v28 = Flow.eraseToAnyFlow()(v26, v27);
  swift_release(v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v19);
  return v28;
}

uint64_t sub_23D94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = a2;
  uint64_t v5 = sub_6358(&qword_8D468);
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_6358(qword_8C368);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_6358(&qword_8D470);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  int v17 = (char *)&v30 - v16;
  uint64_t v35 = 0LL;
  memset(v34, 0, sizeof(v34));
  uint64_t v47 = 0LL;
  memset(v46, 0, sizeof(v46));
  uint64_t v45 = 0LL;
  memset(v44, 0, sizeof(v44));
  uint64_t v43 = 0LL;
  memset(v42, 0, sizeof(v42));
  uint64_t v41 = 0LL;
  memset(v40, 0, sizeof(v40));
  uint64_t v39 = 0LL;
  memset(v38, 0, sizeof(v38));
  uint64_t v37 = 0LL;
  memset(v36, 0, sizeof(v36));
  v48[3] = &type metadata for FlowConfigModel;
  v48[4] = &protocol witness table for FlowConfigModel;
  v48[0] = swift_allocObject(&unk_80858, 296LL, 7LL);
  FlowConfigModel.init(deviceState:aceService:aceServiceAsync:sharedContextService:outputPublisher:flowFinder:networkStatusProvider:)( v34,  v46,  v44,  v42,  v40,  v38,  v36);
  sub_33E9C((uint64_t *)v34);
  uint64_t v18 = type metadata accessor for DeviceIdiom(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v10, v30, v18);
  sub_8760((uint64_t)v10, 0LL, 1LL, v18);
  sub_22A58((uint64_t)v48, v34, a1, (uint64_t)v10, (uint64_t)v17);
  sub_6B60((uint64_t)v10, qword_8C368);
  sub_1F08C(v34);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v48);
  uint64_t v19 = v11;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  uint64_t v20 = sub_6358(&qword_8D478);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = RCHChildFlowFactory.init(producers:)(v15);
  *(void *)&v34[0] = a1;
  id v22 = a1;
  swift_retain(v21);
  uint64_t v23 = sub_6358(&qword_8D480);
  uint64_t v24 = sub_2537C(&qword_8D488, &qword_8D480, (uint64_t)&unk_64510);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v34, v21, v23, v24);
  uint64_t v25 = RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)(v32, v33, v5);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
  *(void *)&v34[0] = v25;
  uint64_t v26 = sub_6358(&qword_8D490);
  uint64_t v27 = sub_2537C(&qword_8D498, &qword_8D490, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v28 = Flow.eraseToAnyFlow()(v26, v27);
  swift_release(v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v19);
  return v28;
}

uint64_t sub_240E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = a2;
  uint64_t v5 = sub_6358(&qword_8D500);
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_6358(qword_8C368);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_6358(&qword_8D508);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  int v17 = (char *)&v30 - v16;
  uint64_t v35 = 0LL;
  memset(v34, 0, sizeof(v34));
  uint64_t v47 = 0LL;
  memset(v46, 0, sizeof(v46));
  uint64_t v45 = 0LL;
  memset(v44, 0, sizeof(v44));
  uint64_t v43 = 0LL;
  memset(v42, 0, sizeof(v42));
  uint64_t v41 = 0LL;
  memset(v40, 0, sizeof(v40));
  uint64_t v39 = 0LL;
  memset(v38, 0, sizeof(v38));
  uint64_t v37 = 0LL;
  memset(v36, 0, sizeof(v36));
  v48[3] = &type metadata for FlowConfigModel;
  v48[4] = &protocol witness table for FlowConfigModel;
  v48[0] = swift_allocObject(&unk_80858, 296LL, 7LL);
  FlowConfigModel.init(deviceState:aceService:aceServiceAsync:sharedContextService:outputPublisher:flowFinder:networkStatusProvider:)( v34,  v46,  v44,  v42,  v40,  v38,  v36);
  sub_33E9C((uint64_t *)v34);
  uint64_t v18 = type metadata accessor for DeviceIdiom(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v10, v30, v18);
  sub_8760((uint64_t)v10, 0LL, 1LL, v18);
  sub_224B4((uint64_t)v48, v34, a1, (uint64_t)v10, (uint64_t)v17);
  sub_6B60((uint64_t)v10, qword_8C368);
  sub_1F08C(v34);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v48);
  uint64_t v19 = v11;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  uint64_t v20 = sub_6358(&qword_8D510);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = RCHChildFlowFactory.init(producers:)(v15);
  *(void *)&v34[0] = a1;
  id v22 = a1;
  swift_retain(v21);
  uint64_t v23 = sub_6358(&qword_8D518);
  uint64_t v24 = sub_2537C(&qword_8D520, &qword_8D518, (uint64_t)&unk_64510);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v34, v21, v23, v24);
  uint64_t v25 = RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)(v32, v33, v5);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
  *(void *)&v34[0] = v25;
  uint64_t v26 = sub_6358(&qword_8D528);
  uint64_t v27 = sub_2537C(&qword_8D530, &qword_8D528, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v28 = Flow.eraseToAnyFlow()(v26, v27);
  swift_release(v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v19);
  return v28;
}

uint64_t sub_2442C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = a2;
  uint64_t v5 = sub_6358(&qword_8D598);
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_6358(qword_8C368);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_6358(&qword_8D5A0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  int v17 = (char *)&v30 - v16;
  uint64_t v35 = 0LL;
  memset(v34, 0, sizeof(v34));
  uint64_t v47 = 0LL;
  memset(v46, 0, sizeof(v46));
  uint64_t v45 = 0LL;
  memset(v44, 0, sizeof(v44));
  uint64_t v43 = 0LL;
  memset(v42, 0, sizeof(v42));
  uint64_t v41 = 0LL;
  memset(v40, 0, sizeof(v40));
  uint64_t v39 = 0LL;
  memset(v38, 0, sizeof(v38));
  uint64_t v37 = 0LL;
  memset(v36, 0, sizeof(v36));
  v48[3] = &type metadata for FlowConfigModel;
  v48[4] = &protocol witness table for FlowConfigModel;
  v48[0] = swift_allocObject(&unk_80858, 296LL, 7LL);
  FlowConfigModel.init(deviceState:aceService:aceServiceAsync:sharedContextService:outputPublisher:flowFinder:networkStatusProvider:)( v34,  v46,  v44,  v42,  v40,  v38,  v36);
  sub_33E9C((uint64_t *)v34);
  uint64_t v18 = type metadata accessor for DeviceIdiom(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v10, v30, v18);
  sub_8760((uint64_t)v10, 0LL, 1LL, v18);
  sub_21F10((uint64_t)v48, v34, a1, (uint64_t)v10, (uint64_t)v17);
  sub_6B60((uint64_t)v10, qword_8C368);
  sub_1F08C(v34);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v48);
  uint64_t v19 = v11;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  uint64_t v20 = sub_6358(&qword_8D5A8);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = RCHChildFlowFactory.init(producers:)(v15);
  *(void *)&v34[0] = a1;
  id v22 = a1;
  swift_retain(v21);
  uint64_t v23 = sub_6358(&qword_8D5B0);
  uint64_t v24 = sub_2537C(&qword_8D5B8, &qword_8D5B0, (uint64_t)&unk_64510);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v34, v21, v23, v24);
  uint64_t v25 = RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)(v32, v33, v5);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
  *(void *)&v34[0] = v25;
  uint64_t v26 = sub_6358(&qword_8D5C0);
  uint64_t v27 = sub_2537C(&qword_8D5C8, &qword_8D5C0, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v28 = Flow.eraseToAnyFlow()(v26, v27);
  swift_release(v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v19);
  return v28;
}

uint64_t sub_24778(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = a2;
  uint64_t v5 = sub_6358(&qword_8D630);
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_6358(qword_8C368);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_6358(&qword_8D638);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  int v17 = (char *)&v30 - v16;
  uint64_t v35 = 0LL;
  memset(v34, 0, sizeof(v34));
  uint64_t v47 = 0LL;
  memset(v46, 0, sizeof(v46));
  uint64_t v45 = 0LL;
  memset(v44, 0, sizeof(v44));
  uint64_t v43 = 0LL;
  memset(v42, 0, sizeof(v42));
  uint64_t v41 = 0LL;
  memset(v40, 0, sizeof(v40));
  uint64_t v39 = 0LL;
  memset(v38, 0, sizeof(v38));
  uint64_t v37 = 0LL;
  memset(v36, 0, sizeof(v36));
  v48[3] = &type metadata for FlowConfigModel;
  v48[4] = &protocol witness table for FlowConfigModel;
  v48[0] = swift_allocObject(&unk_80858, 296LL, 7LL);
  FlowConfigModel.init(deviceState:aceService:aceServiceAsync:sharedContextService:outputPublisher:flowFinder:networkStatusProvider:)( v34,  v46,  v44,  v42,  v40,  v38,  v36);
  sub_33E9C((uint64_t *)v34);
  uint64_t v18 = type metadata accessor for DeviceIdiom(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v10, v30, v18);
  sub_8760((uint64_t)v10, 0LL, 1LL, v18);
  sub_2196C((uint64_t)v48, v34, a1, (uint64_t)v10, (uint64_t)v17);
  sub_6B60((uint64_t)v10, qword_8C368);
  sub_1F08C(v34);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v48);
  uint64_t v19 = v11;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  uint64_t v20 = sub_6358(&qword_8D640);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = RCHChildFlowFactory.init(producers:)(v15);
  *(void *)&v34[0] = a1;
  id v22 = a1;
  swift_retain(v21);
  uint64_t v23 = sub_6358(&qword_8D648);
  uint64_t v24 = sub_2537C(&qword_8D650, &qword_8D648, (uint64_t)&unk_64510);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v34, v21, v23, v24);
  uint64_t v25 = RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)(v32, v33, v5);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
  *(void *)&v34[0] = v25;
  uint64_t v26 = sub_6358(&qword_8D658);
  uint64_t v27 = sub_2537C(&qword_8D660, &qword_8D658, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v28 = Flow.eraseToAnyFlow()(v26, v27);
  swift_release(v25);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v19);
  return v28;
}

void sub_24AC4( uint64_t a1, uint64_t a2, unint64_t *a3, void *a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = sub_2547C();
  uint64_t v15 = sub_AF38(v14, a3, a4);
  a5(a1, a2);
  if (v5)
  {
    uint64_t v16 = swift_errorRelease(v5);
    uint64_t v17 = Logger.wellness.unsafeMutableAddressor(v16);
    sub_8894(v17, (uint64_t)v28);
    uint64_t v18 = sub_254E0(v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16));
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)sub_88B0(12LL);
      uint64_t v22 = sub_88B0(32LL);
      uint64_t v29 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v23 = _typeName(_:qualified:)(v15, 0LL);
      unint64_t v25 = v24;
      uint64_t v27 = sub_173E0(v23, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_bridgeObjectRelease(v25);
      sub_17C68(&dword_0, v19, v20, "Failed ot convert %s to base Intent", v21);
      sub_B334(v22);
      sub_8870(v22);
      sub_8870((uint64_t)v21);
    }

    else
    {
    }

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v6, v12);
    unint64_t v26 = sub_253F8();
    sub_13FF8((uint64_t)&type metadata for HealthNLIntentConversionError, v26);
    sub_254A0();
  }

  sub_2544C();
}

void sub_24CB4(uint64_t a1, uint64_t a2, unint64_t *a3, Class *a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_6BD8();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = sub_AF38(0LL, a3, a4);
  uint64_t v14 = Logger.workout.unsafeMutableAddressor(v13);
  sub_8894(v14, (uint64_t)v39);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v14, v8);
  uint64_t v15 = sub_254EC();
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter(v16);
  uint64_t v35 = a1;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = sub_88B0(22LL);
    uint64_t v33 = sub_88B0(64LL);
    uint64_t v37 = a2;
    uint64_t v38 = v33;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v34 = a4;
    uint64_t v36 = a1;
    swift_bridgeObjectRetain();
    uint64_t v19 = String.init<A>(describing:)(&v36, &type metadata for WorkoutDiambiguationDirectInvocation);
    unint64_t v21 = v20;
    uint64_t v36 = sub_173E0(v19, v20, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
    sub_254F8();
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v22 = _typeName(_:qualified:)(v13, 0LL);
    unint64_t v24 = v23;
    uint64_t v36 = sub_173E0(v22, v23, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
    unint64_t v25 = v24;
    a4 = v34;
    swift_bridgeObjectRelease(v25);
    _os_log_impl(&dword_0, v16, v17, "Converting %s to %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v33, 2LL);
    sub_8870(v33);
    sub_8870(v18);
  }

  else
  {

    sub_254F8();
  }

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  if (a2)
  {
    sub_254EC();
    uint64_t v26 = HealthLogName.init(rawValue:)(v35, a2);
    uint64_t v27 = vocabularyIdentifier(for:)(v26);
    if (v28) {
      uint64_t v29 = v27;
    }
    else {
      uint64_t v29 = 0LL;
    }
    if (v28) {
      uint64_t v30 = v28;
    }
    else {
      uint64_t v30 = 0xE000000000000000LL;
    }
    id v31 = objc_allocWithZone(&OBJC_CLASS___INSpeakableString);
    id v32 = sub_521B8(v29, v30, v35, a2, 0LL, 0LL);
  }

  else
  {
    id v32 = 0LL;
  }

  [objc_allocWithZone(*a4) initWithWorkoutName:v32];

  sub_10F48();
}

id sub_24F4C(uint64_t a1, id a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_AF38(0LL, (unint64_t *)&qword_8C828, &OBJC_CLASS___INStartWorkoutIntent_ptr);
  uint64_t v9 = Logger.workout.unsafeMutableAddressor(v8);
  swift_beginAccess(v9, v38, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  uint64_t v10 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter(v11);
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v34 = a1;
  if (v13)
  {
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v33 = swift_slowAlloc(64LL, -1LL);
    id v36 = a2;
    uint64_t v37 = v33;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v35 = a1;
    swift_bridgeObjectRetain();
    uint64_t v32 = v8;
    uint64_t v15 = String.init<A>(describing:)(&v35, &type metadata for WorkoutDiambiguationDirectInvocation);
    unint64_t v17 = v16;
    uint64_t v35 = sub_173E0(v15, v16, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v18 = _typeName(_:qualified:)(v32, 0LL);
    unint64_t v20 = v19;
    uint64_t v35 = sub_173E0(v18, v19, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    swift_bridgeObjectRelease(v20);
    _os_log_impl(&dword_0, v11, v12, "Converting %s to %s", (uint8_t *)v14, 0x16u);
    uint64_t v21 = v33;
    swift_arrayDestroy(v33, 2LL);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (a2)
  {
    swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v22 = v34;
    uint64_t v23 = HealthLogName.init(rawValue:)(v34, a2);
    uint64_t v24 = vocabularyIdentifier(for:)(v23);
    if (v25) {
      uint64_t v26 = v24;
    }
    else {
      uint64_t v26 = 0LL;
    }
    if (v25) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = 0xE000000000000000LL;
    }
    id v28 = objc_allocWithZone(&OBJC_CLASS___INSpeakableString);
    a2 = sub_521B8(v26, v27, v22, (uint64_t)a2, 0LL, 0LL);
  }

  id v29 = [objc_allocWithZone(INStartWorkoutIntent) init];

  return v29;
}

uint64_t sub_25230(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_25274(_OWORD *a1, _OWORD *a2)
{
  return a2;
}

unint64_t sub_252B0()
{
  unint64_t result = qword_8D408;
  if (!qword_8D408)
  {
    uint64_t v1 = type metadata accessor for WorkoutAppResolutionStrategyAsync();
    unint64_t result = swift_getWitnessTable(&unk_62B4C, v1);
    atomic_store(result, (unint64_t *)&qword_8D408);
  }

  return result;
}

uint64_t sub_252F0()
{
  if (v0[5]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2);
  }
  if (v0[10]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7);
  }
  if (v0[15]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 12);
  }
  if (v0[20]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 17);
  }
  if (v0[25]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 22);
  }
  if (v0[30]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 27);
  }
  if (v0[35]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 32);
  }
  return swift_deallocObject(v0, 296LL, 7LL);
}

uint64_t sub_2537C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_D958(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_253BC()
{
  unint64_t result = qword_8D6C8;
  if (!qword_8D6C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_63B80, &type metadata for IntentConversionError);
    atomic_store(result, (unint64_t *)&qword_8D6C8);
  }

  return result;
}

unint64_t sub_253F8()
{
  unint64_t result = qword_8D6D0[0];
  if (!qword_8D6D0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_63C48, &type metadata for HealthNLIntentConversionError);
    atomic_store(result, qword_8D6D0);
  }

  return result;
}

uint64_t sub_25434()
{
  return v0;
}

  ;
}

uint64_t sub_25464()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v0);
}

uint64_t sub_25474()
{
  return sub_33E9C((uint64_t *)(v0 + 80));
}

uint64_t sub_2547C()
{
  return 0LL;
}

uint64_t sub_25498()
{
  return sub_20C1C((void *)(v0 + 16));
}

uint64_t sub_254A0()
{
  return swift_willThrow();
}

uint64_t sub_254A8()
{
  return v0 + 16;
}

uint64_t sub_254B4(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_254BC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

BOOL sub_254C8()
{
  return os_log_type_enabled(v0, v1);
}

uint64_t sub_254D4()
{
  return v0;
}

uint64_t sub_254E0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_254EC()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_254F8()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t type metadata accessor for WorkoutUnsupportedValueStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WorkoutUnsupportedValueStrategy);
}

uint64_t sub_25510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v4[6] = sub_8860(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for OutputGenerationManifest(0LL);
  v4[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[8] = v7;
  void v4[9] = sub_8860(v7);
  uint64_t v8 = sub_6358(&qword_8C258);
  v4[10] = sub_8860(*(void *)(v8 - 8));
  sub_8910();
  return sub_887C();
}

uint64_t sub_25588()
{
  uint64_t v1 = sub_26338(v0[4]);
  uint64_t v2 = ParameterResolutionRecord.app.getter(v1);
  uint64_t v3 = swift_retain(v2);
  uint64_t v4 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v3);
  if (v4
    && (uint64_t v5 = v4, v6 = [v4 displayAppName], v5, v6))
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v9 = v8;
    sub_26320();

    String.toSpeakableString.getter(v7, v9);
    swift_bridgeObjectRelease(v9);
    uint64_t v10 = 0LL;
  }

  else
  {
    sub_26320();
    uint64_t v10 = 1LL;
  }

  uint64_t v11 = v0[10];
  uint64_t v12 = type metadata accessor for SpeakableString(0LL);
  sub_8760(v11, v10, 1LL, v12);
  BOOL v13 = (uint64_t **)swift_task_alloc(dword_8D784);
  v0[11] = (uint64_t)v13;
  *BOOL v13 = v0;
  v13[1] = (uint64_t *)sub_2568C;
  return sub_258F8(v0[10], v0[4]);
}

uint64_t sub_2568C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 88);
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v1;
  swift_task_dealloc(v4);
  sub_8910();
  return sub_887C();
}

uint64_t sub_256EC()
{
  uint64_t v2 = (void *)v0[5];
  uint64_t v1 = v0[6];
  static DialogPhase.error.getter();
  OutputGenerationManifest.init(dialogPhase:_:)(v1, nullsub_1, 0LL);
  uint64_t v3 = v2 + 30;
  uint64_t v4 = v2[33];
  uint64_t v5 = v2[34];
  sub_8734(v3, v4);
  id v6 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[14] = v6;
  *id v6 = v0;
  v6[1] = sub_25790;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0[2],  v0[12],  v0[9],  v4,  v5);
}

uint64_t sub_25790()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 12Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v2);
  sub_8910();
  return sub_887C();
}

uint64_t sub_257E8()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  sub_26220(v2);
  swift_task_dealloc(v2);
  sub_88B8();
  sub_8938();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25860()
{
  return sub_262B8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_2589C()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_262F8();
  sub_88B8();
  swift_task_dealloc(v2);
  sub_8938();
  return sub_262B8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_258F8(uint64_t a1, uint64_t a2)
{
  v3[43] = a2;
  v3[44] = v2;
  v3[42] = a1;
  return sub_262C8((uint64_t)sub_2590C);
}

uint64_t sub_2590C()
{
  uint64_t v1 = sub_AF38(0LL, (unint64_t *)&qword_8C888, &OBJC_CLASS___INCancelWorkoutIntent_ptr);
  if (sub_2629C(v1))
  {
    uint64_t v2 = sub_262F0(v0[44]);
    uint64_t v3 = sub_26280(v2, v0[25]);
    v0[45] = v3;
    sub_26308(v3);
    uint64_t v4 = (uint64_t **)swift_task_alloc(dword_8DCD4);
    v0[46] = (uint64_t)v4;
    *uint64_t v4 = v0;
    v4[1] = (uint64_t *)sub_25C00;
    uint64_t v5 = sub_262D4((uint64_t)sub_B0C0);
    return sub_2D500(v5, v6);
  }

  else
  {
    uint64_t v8 = sub_AF38(0LL, (unint64_t *)&qword_8C728, &OBJC_CLASS___INEndWorkoutIntent_ptr);
    if (sub_2629C(v8))
    {
      sub_2632C();
      uint64_t v10 = sub_262F0(v9 + 40);
      uint64_t v11 = sub_26280(v10, v0[20]);
      v0[48] = v11;
      sub_26308(v11);
      uint64_t v12 = (uint64_t **)swift_task_alloc(dword_8FFDC);
      v0[49] = (uint64_t)v12;
      *uint64_t v12 = v0;
      v12[1] = (uint64_t *)sub_25CBC;
      uint64_t v13 = sub_262D4((uint64_t)sub_B02C);
      return sub_54860(v13, v14);
    }

    else
    {
      uint64_t v15 = sub_AF38(0LL, (unint64_t *)&qword_8C7A8, &OBJC_CLASS___INPauseWorkoutIntent_ptr);
      if (sub_2629C(v15))
      {
        sub_2632C();
        uint64_t v17 = sub_262F0(v16 + 80);
        uint64_t v18 = sub_26280(v17, v0[15]);
        v0[51] = v18;
        sub_26308(v18);
        unint64_t v19 = (uint64_t **)swift_task_alloc(dword_9083C);
        v0[52] = (uint64_t)v19;
        *unint64_t v19 = v0;
        v19[1] = (uint64_t *)sub_25D78;
        uint64_t v20 = sub_262D4((uint64_t)sub_B0C0);
        return sub_59AE4(v20, v21);
      }

      else
      {
        uint64_t v22 = sub_AF38(0LL, (unint64_t *)&qword_8BE58, &OBJC_CLASS___INResumeWorkoutIntent_ptr);
        if (sub_2629C(v22))
        {
          sub_2632C();
          uint64_t v24 = sub_262F0(v23 + 120);
          uint64_t v25 = sub_26280(v24, v0[10]);
          v0[54] = v25;
          sub_26308(v25);
          uint64_t v26 = (uint64_t **)swift_task_alloc(dword_9056C);
          v0[55] = (uint64_t)v26;
          *uint64_t v26 = v0;
          v26[1] = (uint64_t *)sub_25E34;
          uint64_t v27 = sub_262D4((uint64_t)sub_B0C0);
          return sub_57B64(v27, v28);
        }

        else
        {
          uint64_t v29 = sub_AF38(0LL, (unint64_t *)&qword_8C828, &OBJC_CLASS___INStartWorkoutIntent_ptr);
          if (sub_2629C(v29))
          {
            sub_2632C();
            uint64_t v31 = sub_262F0(v30 + 160);
            uint64_t v32 = sub_26280(v31, v0[5]);
            v0[57] = v32;
            sub_26308(v32);
            uint64_t v33 = (uint64_t **)swift_task_alloc(dword_902E4);
            v0[58] = (uint64_t)v33;
            *uint64_t v33 = v0;
            v33[1] = (uint64_t *)sub_25EF0;
            return sub_55F94(0, (uint64_t)sub_26260, v32);
          }

          else
          {
            return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000016LL,  0x8000000000068B10LL,  "HealthFlowDelegatePlugin/WorkoutUnsupportedValueStrategyAsync.swift",  67LL,  2LL,  68LL,  0);
          }
        }
      }
    }
  }

uint64_t sub_25C00()
{
  v0[27] = v2;
  v0[28] = v3;
  v0[29] = v1;
  sub_26314(v4);
  v0[47] = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    swift_task_dealloc(v0[45]);
  }
  sub_8910();
  return sub_B110();
}

uint64_t sub_25C5C()
{
  return sub_26268(v1, v2);
}

uint64_t sub_25C88()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_25CBC()
{
  v0[30] = v2;
  v0[31] = v3;
  v0[32] = v1;
  sub_26314(v4);
  v0[50] = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    swift_task_dealloc(v0[48]);
  }
  sub_8910();
  return sub_B110();
}

uint64_t sub_25D18()
{
  return sub_26268(v1, v2);
}

uint64_t sub_25D44()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_25D78()
{
  v0[33] = v2;
  v0[34] = v3;
  v0[35] = v1;
  sub_26314(v4);
  v0[53] = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    swift_task_dealloc(v0[51]);
  }
  sub_8910();
  return sub_B110();
}

uint64_t sub_25DD4()
{
  return sub_26268(v1, v2);
}

uint64_t sub_25E00()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_25E34()
{
  v0[36] = v2;
  v0[37] = v3;
  v0[38] = v1;
  sub_26314(v4);
  v0[56] = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    swift_task_dealloc(v0[54]);
  }
  sub_8910();
  return sub_B110();
}

uint64_t sub_25E90()
{
  return sub_26268(v1, v2);
}

uint64_t sub_25EBC()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_25EF0()
{
  v0[39] = v2;
  v0[40] = v3;
  v0[41] = v1;
  sub_26314(v4);
  v0[59] = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    swift_task_dealloc(v0[57]);
  }
  sub_8910();
  return sub_B110();
}

uint64_t sub_25F4C()
{
  return sub_26268(v1, v2);
}

uint64_t sub_25F78()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_25FAC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a2;
  return sub_262C8((uint64_t)sub_25FBC);
}

uint64_t sub_25FBC()
{
  uint64_t v1 = sub_26338(*(void *)(v0 + 24));
  ParameterResolutionRecord.intent.getter(v1);
  sub_262E4();
  return sub_26268(v2, v3);
}

uint64_t sub_25FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_B078(a2, a1);
  String.toSpeakableString.getter(0x4E74756F6B726F77LL, 0xEB00000000656D61LL);
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  sub_8760((uint64_t)v6, 0LL, 1LL, v7);
  uint64_t started = type metadata accessor for WorkoutStartUnsupportedSlotValueParameters(0LL);
  return sub_876C((uint64_t)v6, a1 + *(int *)(started + 24));
}

uint64_t sub_260B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_8D77C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1ECE0;
  return sub_25510(a1, a2, a3);
}

uint64_t sub_26118(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_8D774);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_2616C;
  return sub_25FAC(a1, a2);
}

uint64_t sub_2616C(uint64_t a1)
{
  uint64_t v4 = sub_1F0FC();
  if (!v1) {
    uint64_t v4 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(v4);
}

uint64_t sub_261A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t sub_26220(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8C258);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_26260(uint64_t a1)
{
  return sub_25FE8(a1, *(void *)(v1 + 16));
}

uint64_t sub_26268(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_26274(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_26280(uint64_t a1, uint64_t a2)
{
  return swift_task_alloc(32LL);
}

uint64_t sub_2629C(uint64_t a1)
{
  return swift_dynamicCastMetatype(v1, a1);
}

void sub_262A8()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_262B8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_262C8(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_262D4@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

  ;
}

uint64_t sub_262F0(uint64_t a1)
{
  return sub_25230(a1, v1);
}

uint64_t sub_262F8()
{
  return sub_26220(*(void *)(v0 + 80));
}

uint64_t sub_26308(uint64_t result)
{
  *(void *)(result + 16) = v1;
  return result;
}

void sub_26314(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_26320()
{
  return swift_release_n(v0, 2LL);
}

  ;
}

uint64_t sub_26338@<X0>(uint64_t a1@<X8>)
{
  return type metadata accessor for ParameterResolutionRecord(0LL, *(void *)(a1 + 16));
}

void sub_26344(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  id v4 = sub_265C0(a1);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static os_log_type_t.debug.getter(v4);
    uint64_t v7 = *(void **)Log.health.unsafeMutableAddressor(v6);
    uint64_t v8 = sub_6358(&qword_8BE60);
    uint64_t v9 = sub_65A4(v8, 72LL);
    *(_OWORD *)(v9 + 16) = xmmword_61030;
    id v10 = v7;
    id v11 = [v5 description];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v9 + 32) = v12;
    *(void *)(v9 + 40) = v14;
    os_log(_:dso:log:_:_:)(v6, &dword_0, v10, "Created INCancelWorkoutIntent: %@", 33LL, 2LL, v9);

    swift_bridgeObjectRelease(v9);
    id v29 = v5;
    a3(v5, 0LL);
  }

  else
  {
    uint64_t v15 = type metadata accessor for HealthFlowError();
    swift_initStackObject(v15, v30);
    uint64_t v16 = sub_BD3C(0);
    uint64_t v17 = static os_log_type_t.error.getter();
    uint64_t v18 = *(void **)Log.health.unsafeMutableAddressor(v17);
    uint64_t v19 = sub_6358(&qword_8BE60);
    uint64_t v20 = sub_65A4(v19, 72LL);
    *(_OWORD *)(v20 + 16) = xmmword_61030;
    id v21 = v18;
    uint64_t v22 = sub_BC64();
    uint64_t v24 = v23;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 40) = v24;
    os_log(_:dso:log:_:_:)(v17, &dword_0, v21, "Pause- RCHFlow Strategy: %@", 27LL, 2LL, v20);

    swift_bridgeObjectRelease(v20);
    sub_65A4(v15, 40LL);
    uint64_t v25 = sub_BD3C(1u);
    uint64_t v26 = sub_1B7BC( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v27 = swift_allocError(v15, v26, 0LL, 0LL);
    uint64_t *v28 = v25;
    a3((void *)v27, 1LL);
    swift_errorRelease(v27);
    swift_release(v16);
  }

id sub_265C0(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8BE48);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v30 = (char *)&v30 - v5;
  uint64_t v6 = type metadata accessor for HealthNLIntent(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NLIntent(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20((char *)&v30 - v18, a1, v13);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v19, v13);
  if (v21 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_6598(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 96));
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v19, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
    sub_26D34();
    id v22 = sub_50FD4((uint64_t)v8);
    sub_26D70((uint64_t)v8, type metadata accessor for HealthNLIntent);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  else
  {
    uint64_t v23 = a1;
    uint64_t v25 = (uint64_t)v30;
    uint64_t v24 = (uint64_t)v31;
    if (v21 == enum case for Parse.directInvocation(_:))
    {
      v20(v17, v23, v13);
      sub_5A890((uint64_t)v17, v25);
      sub_6398(v25, v24);
      uint64_t v26 = type metadata accessor for DirectInvocationData(0LL);
      if (sub_63E0(v24, 1LL, v26) == 1)
      {
        sub_63EC(v25);
        sub_63EC(v24);
        id v22 = 0LL;
      }

      else
      {
        sub_5AE94();
        sub_63EC(v25);
        sub_26D70(v24, type metadata accessor for DirectInvocationData);
        uint64_t v27 = sub_6358(&qword_8BE50);
        unint64_t v28 = sub_26D34();
        else {
          id v22 = 0LL;
        }
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    }

    else
    {
      sub_6598(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
      return 0LL;
    }
  }

  return v22;
}

uint64_t type metadata accessor for CancelWorkoutStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin21CancelWorkoutStrategy);
}

uint64_t sub_268DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for CancelWorkoutStrategy();
  return RCHFlowStrategy.makeAnnotatedIntentFromParse(parse:currentIntent:completion:)(a1, a2, a3, a4, v11, a6);
}

void sub_26934(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
}

uint64_t sub_26954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CancelWorkoutStrategy();
  return RCHFlowStrategy.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t sub_2698C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for CancelWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeAppDoesNotSupportIntentResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_269E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for CancelWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeAppNotFoundOnDeviceResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_26A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for CancelWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeDeviceIncompatibleResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_26A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for CancelWorkoutStrategy();
  return RouteConfirmIntentResponseFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  v13,  a7);
}

uint64_t sub_26AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CancelWorkoutStrategy();
  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, v5, a3);
}

uint64_t sub_26B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CancelWorkoutStrategy();
  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, v7, a4);
}

uint64_t sub_26B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CancelWorkoutStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:)(a1, a2, v7, a4);
}

uint64_t sub_26BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for CancelWorkoutStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_26C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for CancelWorkoutStrategy();
  return IntentErrorHandling.makeErrorResponse(app:intent:error:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_26C84(uint64_t a1, uint64_t a2)
{
  return sub_1B7BC( &qword_8D838,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for CancelWorkoutStrategy,  (uint64_t)&unk_62C98);
}

uint64_t sub_26CB0(uint64_t a1, uint64_t a2)
{
  return sub_1B7BC( &qword_8D840,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for CancelWorkoutStrategy,  (uint64_t)&unk_62CC8);
}

uint64_t sub_26CDC(uint64_t a1, uint64_t a2)
{
  return sub_1B7BC( &qword_8D848,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for CancelWorkoutStrategy,  (uint64_t)&unk_62D10);
}

uint64_t sub_26D08(uint64_t a1, uint64_t a2)
{
  return sub_1B7BC( &qword_8D850,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for CancelWorkoutStrategy,  (uint64_t)&unk_62D48);
}

unint64_t sub_26D34()
{
  unint64_t result = qword_8C888;
  if (!qword_8C888)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INCancelWorkoutIntent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_8C888);
  }

  return result;
}

uint64_t sub_26D70(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_26DAC()
{
  uint64_t v1 = type metadata accessor for Parse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_27F88();
  uint64_t v4 = static os_log_type_t.debug.getter(v3);
  uint64_t v5 = *(void **)Log.health.unsafeMutableAddressor(v4);
  uint64_t v6 = sub_6358(&qword_8BE60);
  uint64_t v7 = sub_27F64(v6);
  *(_OWORD *)(v7 + 16) = xmmword_61030;
  uint64_t v13 = 0LL;
  unint64_t v14 = 0xE000000000000000LL;
  id v8 = v5;
  Input.parse.getter(v8);
  _print_unlocked<A, B>(_:_:)(v0, &v13);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  uint64_t v9 = v13;
  unint64_t v10 = v14;
  *(void *)(v7 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_27FCC((uint64_t)&type metadata for String);
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v10;
  sub_27F7C(v4, (uint64_t)&dword_0, (uint64_t)v8, (uint64_t)"Handling confirmation input: %@", 31LL);

  uint64_t v11 = sub_1F238();
  return static ActionForInput.handle()(v11);
}

void sub_26ED4( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t *))
{
  uint64_t v75 = v12 - v11;
  uint64_t v77 = sub_6358(&qword_8D928);
  sub_6C04();
  __chkstk_darwin(v13);
  sub_1F1D0();
  uint64_t v14 = type metadata accessor for HealthNLIntent(0LL);
  sub_6C04();
  __chkstk_darwin(v15);
  sub_27F88();
  uint64_t v16 = type metadata accessor for Parse(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_6BD8();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for NLIntent(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_6BD8();
  uint64_t v25 = v24 - v23;
  Input.parse.getter(v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v20, v16) == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v73 = v9;
    sub_27FC0(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 96));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v25, v20, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v8, v25, v21);
    if (qword_8BBE8 != -1) {
      swift_once(&qword_8BBE8, sub_4EE30);
    }
    uint64_t v72 = v22;
    uint64_t v28 = qword_8FA58;
    uint64_t v29 = sub_27FD4( (unint64_t *)&qword_8C5F8,  v27,  type metadata accessor for HealthNLIntent,  (uint64_t)&unk_661A8);
    uint64_t v30 = IntentNodeTraversable.value<A>(forNode:)(v28, v14, v29);
    uint64_t v31 = v8;
    if (v78 == 3)
    {
      uint64_t v32 = sub_14048();
      sub_65A4(v32, 40LL);
      uint64_t v33 = sub_BD3C(3u);
      uint64_t v34 = static os_log_type_t.error.getter();
      Log.health.unsafeMutableAddressor(v34);
      uint64_t v35 = sub_6358(&qword_8BE60);
      id v36 = (__n128 *)sub_27F64(v35);
      id v37 = sub_27FDC(v36, (__n128)xmmword_61030);
      uint64_t v38 = sub_BC64();
      unint64_t v40 = v39;
      v36[4].n128_u64[0] = sub_27FCC((uint64_t)&type metadata for String);
      v36[2].n128_u64[0] = v38;
      v36[2].n128_u64[1] = v40;
      sub_27F7C(v34, (uint64_t)&dword_0, (uint64_t)v37, (uint64_t)"%@", 2LL);

      sub_1F238();
      uint64_t v41 = sub_1B7BC( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      uint64_t v42 = sub_13FF8(v32, v41);
      uint64_t *v43 = v33;
      *uint64_t v73 = v42;
      swift_storeEnumTagMultiPayload(v73, v77, 1LL);
      swift_retain(v33);
      sub_27F70();
      swift_release(v33);
      sub_6B60((uint64_t)v73, &qword_8D928);
      sub_C594(v31);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v25, v21);
    }

    else
    {
      uint64_t v56 = static os_log_type_t.debug.getter(v30);
      unsigned int v71 = v56;
      uint64_t v57 = *(void **)Log.health.unsafeMutableAddressor(v56);
      uint64_t v58 = sub_6358(&qword_8BE60);
      uint64_t v59 = sub_27F64(v58);
      *(_OWORD *)(v59 + 16) = xmmword_61030;
      uint64_t v61 = sub_27FD4( &qword_8D050,  v60,  (uint64_t (*)(uint64_t))&type metadata accessor for NLIntent,  (uint64_t)&protocol conformance descriptor for NLIntent);
      id v62 = v57;
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v21, v61);
      uint64_t v65 = v64;
      *(void *)(v59 + 56) = &type metadata for String;
      *(void *)(v59 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
      *(void *)(v59 + 32) = v63;
      *(void *)(v59 + 40) = v65;
      os_log(_:dso:log:_:_:)(v71, &dword_0, v62, "Confirmation NL : %@", 20LL, 2LL, v59);

      swift_bridgeObjectRelease(v59);
      unint64_t v66 = sub_27F28();
      id v67 = sub_509B0();
      uint64_t v68 = type metadata accessor for ConfirmationResponse(0LL);
      uint64_t v69 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v68 - 8) + 104LL);
      if (v78)
      {
        v69(v75, enum case for ConfirmationResponse.rejected(_:), v68);
        sub_27FB0(v75);
        NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)(v75, a2, v66);
        sub_27FA0();
        sub_27F70();
      }

      else
      {
        v69(v75, enum case for ConfirmationResponse.confirmed(_:), v68);
        sub_27FB0(v75);
        id v70 = v67;
        NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)(v75, v70, v66);
        sub_27FA0();
        sub_27F70();
      }

      sub_6B60((uint64_t)v73, &qword_8D928);
      sub_C594(v8);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v25, v21);
    }
  }

  else
  {
    sub_27FC0(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
    uint64_t v44 = sub_14048();
    sub_65A4(v44, 40LL);
    uint64_t v45 = sub_BD3C(0);
    uint64_t v46 = static os_log_type_t.error.getter();
    Log.health.unsafeMutableAddressor(v46);
    uint64_t v47 = sub_6358(&qword_8BE60);
    uint64_t v48 = (__n128 *)sub_27F64(v47);
    id v49 = sub_27FDC(v48, (__n128)xmmword_61030);
    uint64_t v50 = sub_BC64();
    unint64_t v52 = v51;
    v48[4].n128_u64[0] = sub_27FCC((uint64_t)&type metadata for String);
    v48[2].n128_u64[0] = v50;
    v48[2].n128_u64[1] = v52;
    sub_27F7C(v46, (uint64_t)&dword_0, (uint64_t)v49, (uint64_t)"%@", 2LL);

    sub_1F238();
    uint64_t v53 = sub_1B7BC( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v54 = sub_13FF8(v44, v53);
    *uint64_t v55 = v45;
    uint64_t *v9 = v54;
    swift_storeEnumTagMultiPayload(v9, v77, 1LL);
    swift_retain(v45);
    a8(v9);
    swift_release(v45);
    sub_6B60((uint64_t)v9, &qword_8D928);
  }

  sub_10F48();
}

void sub_274C0( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v60 = a2;
  uint64_t v61 = a9;
  uint64_t v62 = a8;
  uint64_t v12 = type metadata accessor for CATOption(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_6BD8();
  uint64_t v16 = v15 - v14;
  sub_6358((uint64_t *)&unk_8F3A0);
  sub_6C04();
  __chkstk_darwin(v17);
  sub_6BD8();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_1F1D0();
  swift_bridgeObjectRetain();
  v67._countAndFlagsBits = a3;
  v67._object = a4;
  unint64_t v23 = sub_3E500(v67);
  if (v23 == 3)
  {
    uint64_t v24 = sub_14048();
    sub_65A4(v24, 40LL);
    uint64_t v25 = sub_BD3C(2u);
    uint64_t v26 = static os_log_type_t.error.getter();
    Log.health.unsafeMutableAddressor(v26);
    uint64_t v27 = sub_6358(&qword_8BE60);
    uint64_t v28 = (__n128 *)sub_27F64(v27);
    id v29 = sub_27FDC(v28, (__n128)xmmword_61030);
    uint64_t v30 = sub_BC64();
    unint64_t v32 = v31;
    v28[3].n128_u64[1] = (unint64_t)&type metadata for String;
    v28[4].n128_u64[0] = sub_64A0();
    v28[2].n128_u64[0] = v30;
    v28[2].n128_u64[1] = v32;
    os_log(_:dso:log:_:_:)(v26, &dword_0, v29, "%@", 2LL, 2LL, v28);

    swift_bridgeObjectRelease(v28);
    uint64_t v33 = sub_1B7BC( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v34 = sub_13FF8(v24, v33);
    *uint64_t v35 = v25;
    uint64_t v64 = v34;
    char v66 = 1;
    swift_retain(v25);
    sub_27FE4();
    swift_release(v25);
    sub_6B60((uint64_t)&v64, (uint64_t *)&unk_8F3E0);
  }

  else
  {
    char v36 = v23;
    uint64_t v37 = static os_log_type_t.debug.getter(v23);
    unsigned int v56 = v37;
    uint64_t v59 = v21;
    uint64_t v38 = *(void **)Log.health.unsafeMutableAddressor(v37);
    uint64_t v39 = sub_6358(&qword_8BE60);
    uint64_t v40 = sub_27F64(v39);
    __int128 v57 = xmmword_61030;
    *(_OWORD *)(v40 + 16) = xmmword_61030;
    uint64_t v64 = 0LL;
    unint64_t v65 = 0xE000000000000000LL;
    char v63 = v36;
    id v41 = v38;
    _print_unlocked<A, B>(_:_:)(&v63, &v64);
    uint64_t v58 = v22;
    uint64_t v43 = v64;
    unint64_t v42 = v65;
    *(void *)(v40 + 56) = &type metadata for String;
    *(void *)(v40 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v40 + 32) = v43;
    *(void *)(v40 + 40) = v42;
    os_log(_:dso:log:_:_:)(v56, &dword_0, v41, "Generating confirmation for : %@", 32LL, 2LL, v40);

    uint64_t v44 = swift_bridgeObjectRelease(v40);
    sub_34AB8(v44);
    type metadata accessor for CATGlobals(0LL);
    uint64_t v45 = CATGlobals.__allocating_init()();
    uint64_t v46 = sub_6358(&qword_8CB30);
    uint64_t v47 = swift_allocObject( v46,  ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
          + *(void *)(v13 + 72),
            *(unsigned __int8 *)(v13 + 80) | 7LL);
    *(_OWORD *)(v47 + 16) = v57;
    static CATOption.defaultMode.getter();
    uint64_t v64 = v47;
    uint64_t v49 = sub_27FD4( (unint64_t *)&unk_8F3B0,  v48,  (uint64_t (*)(uint64_t))&type metadata accessor for CATOption,  (uint64_t)&protocol conformance descriptor for CATOption);
    uint64_t v50 = sub_6358(&qword_8CB38);
    unint64_t v51 = sub_13EF0();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v50, v51, v12, v49);
    uint64_t v52 = type metadata accessor for HealthCATWrapper(0LL);
    swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
    uint64_t v53 = sub_466D4(v45, v16);
    sub_46BEC();
    uint64_t v54 = swift_release(v53);
    __chkstk_darwin(v54);
    *(&v55 - 2) = v9;
    sub_4A714((void (*)(uint64_t))sub_27F20, (uint64_t)&v64);
    sub_27FE4();
    sub_6B60((uint64_t)&v64, (uint64_t *)&unk_8F3E0);
    sub_6B60(v20, (uint64_t *)&unk_8F3A0);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v9, v59);
  }

  sub_10F48();
}

uint64_t type metadata accessor for StartWorkoutConfirmSlotStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin31StartWorkoutConfirmSlotStrategy);
}

uint64_t sub_27904()
{
  return sub_26DAC();
}

void sub_27918( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t *))
{
}

uint64_t sub_2793C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t started = type metadata accessor for StartWorkoutConfirmSlotStrategy();
  return NeedsConfirmationFlowStrategy.shouldRequestUnlockForConfirmation(app:intent:parameterName:multicardinalIndex:intentResolutionResult:itemToConfirm:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  started,  a11);
}

void sub_279D8( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_279FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t started = type metadata accessor for StartWorkoutConfirmSlotStrategy();
  return NeedsConfirmationFlowStrategy.makeRepromptOnEmptyParse(app:intent:parameterName:multicardinalIndex:intentResolutionResult:itemToConfirm:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  started,  a11);
}

uint64_t sub_27A98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t started = type metadata accessor for StartWorkoutConfirmSlotStrategy();
  return NeedsConfirmationFlowStrategy.makeRepromptOnLowConfidence(app:intent:parameterName:multicardinalIndex:intentResolutionResult:itemToConfirm:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  started,  a11);
}

uint64_t sub_27B34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t started = type metadata accessor for StartWorkoutConfirmSlotStrategy();
  return NeedsConfirmationFlowStrategy.makePromptForDeviceUnlock(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  started,  a10);
}

uint64_t sub_27BB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t started = type metadata accessor for StartWorkoutConfirmSlotStrategy();
  return NeedsConfirmationFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  started,  a10);
}

uint64_t sub_27C3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t started = type metadata accessor for StartWorkoutConfirmSlotStrategy();
  return NeedsConfirmationFlowStrategy.makeConfirmationRejectedResponse(app:intent:parameterName:multicardinalIndex:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  started,  a9);
}

uint64_t sub_27CBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t started = type metadata accessor for StartWorkoutConfirmSlotStrategy();
  return ParameterResolutionHandling.makeFlowCancelledResponse(app:intent:parameterName:_:)( a1,  a2,  a3,  a4,  a5,  a6,  started,  a8);
}

uint64_t sub_27D2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t started = type metadata accessor for StartWorkoutConfirmSlotStrategy();
  return ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  started,  a9);
}

uint64_t sub_27DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandling.makeFlowCancelledResponse(app:intent:parameterName:)[1]);
  *(void *)(v7 + 16) = v14;
  uint64_t started = type metadata accessor for StartWorkoutConfirmSlotStrategy();
  *uint64_t v14 = v7;
  v14[1] = sub_8640;
  return ParameterResolutionHandling.makeFlowCancelledResponse(app:intent:parameterName:)( a1,  a2,  a3,  a4,  a5,  started,  a7);
}

uint64_t sub_27E48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:)[1]);
  *(void *)(v8 + 16) = v16;
  uint64_t started = type metadata accessor for StartWorkoutConfirmSlotStrategy();
  *uint64_t v16 = v8;
  v16[1] = sub_885C;
  return ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:)( a1,  a2,  a3,  a4,  a5,  a6,  started,  a8);
}

uint64_t sub_27EF4(uint64_t a1, uint64_t a2)
{
  return sub_1B7BC( &qword_8D918,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for StartWorkoutConfirmSlotStrategy,  (uint64_t)&unk_62E30);
}

uint64_t sub_27F20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1B298(a1, *(void *)(v2 + 16), a2);
}

unint64_t sub_27F28()
{
  unint64_t result = qword_8C828;
  if (!qword_8C828)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INStartWorkoutIntent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_8C828);
  }

  return result;
}

uint64_t sub_27F64(uint64_t a1)
{
  return swift_allocObject(a1, 72LL, 7LL);
}

uint64_t sub_27F70()
{
  return (*(uint64_t (**)(uint64_t))(v1 - 104))(v0);
}

uint64_t sub_27F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, a5, 2LL, v5);
}

  ;
}

uint64_t sub_27FA0()
{
  return swift_storeEnumTagMultiPayload(v0, v1, 0LL);
}

uint64_t sub_27FB0(uint64_t a1)
{
  return sub_8760(a1, 0LL, 1LL, v1);
}

uint64_t sub_27FC0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

unint64_t sub_27FCC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 56) = a1;
  return sub_64A0();
}

uint64_t sub_27FD4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  return sub_1B7BC(a1, 255LL, a3, a4);
}

id sub_27FDC(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return v2;
}

uint64_t sub_27FE4()
{
  return (*(uint64_t (**)(uint64_t))(v0 - 144))(v0 - 128);
}

char *sub_27FF0(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for DeviceIdiom(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for Parse(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = a3[6];
    __int128 v13 = *(_OWORD *)&a2[v12 + 24];
    *(_OWORD *)&a1[v12 + 24] = v13;
    (**(void (***)(void))(v13 - 8))();
    uint64_t v14 = a3[7];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    __int128 v17 = *(_OWORD *)&a2[v14 + 24];
    *(_OWORD *)&a1[v14 + 24] = v17;
    (**(void (***)(char *, char *))(v17 - 8))(&a1[v14], &a2[v14]);
    __int128 v18 = *((_OWORD *)v16 + 4);
    *((_OWORD *)v15 + _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v18;
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))((uint64_t)(v15 + 40), (uint64_t)(v16 + 40));
    __int128 v19 = *(_OWORD *)(v16 + 104);
    *(_OWORD *)(v15 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v19;
    (**(void (***)(uint64_t, uint64_t))(v19 - 8))((uint64_t)(v15 + 80), (uint64_t)(v16 + 80));
    __int128 v20 = *((_OWORD *)v16 + 9);
    *((_OWORD *)v15 + sub_1F08C(v0 + 9) = v20;
    (**(void (***)(uint64_t, uint64_t))(v20 - 8))((uint64_t)(v15 + 120), (uint64_t)(v16 + 120));
    __int128 v21 = *(_OWORD *)(v16 + 184);
    *(_OWORD *)(v15 + 18_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v21;
    (**(void (***)(uint64_t, uint64_t))(v21 - 8))((uint64_t)(v15 + 160), (uint64_t)(v16 + 160));
    __int128 v22 = *((_OWORD *)v16 + 14);
    *((_OWORD *)v15 + 1_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v22;
    (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)(v15 + 200), (uint64_t)(v16 + 200));
    uint64_t v23 = a3[8];
    __int128 v24 = *(_OWORD *)&a2[v23 + 24];
    *(_OWORD *)&a1[v23 + 24] = v24;
    (**(void (***)(void))(v24 - 8))();
    uint64_t v25 = a3[9];
    uint64_t v26 = *(void *)&a2[v25];
    *(void *)&a1[v25] = v26;
  }

  swift_retain(v26);
  return a1;
}

uint64_t sub_281C0(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for DeviceIdiom(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + a2[6]));
  uint64_t v7 = (void *)(a1 + a2[7]);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v7);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v7 + 5);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v7 + 10);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v7 + 15);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v7 + 20);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v7 + 25);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + a2[8]));
  return swift_release(*(void *)(a1 + a2[9]));
}

uint64_t sub_28280(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DeviceIdiom(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  __int128 v12 = *(_OWORD *)(a2 + v11 + 24);
  *(_OWORD *)(a1 + v11 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v12;
  (**(void (***)(void))(v12 - 8))();
  uint64_t v13 = a3[7];
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)(a2 + v13);
  __int128 v16 = *(_OWORD *)(a2 + v13 + 24);
  *(_OWORD *)(a1 + v13 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v16;
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + v13, a2 + v13);
  __int128 v17 = v15[4];
  v14[4] = v17;
  (**(void (***)(uint64_t, uint64_t))(v17 - 8))((uint64_t)v14 + 40, (uint64_t)v15 + 40);
  __int128 v18 = *(_OWORD *)((char *)v15 + 104);
  *(_OWORD *)((char *)v14 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v18;
  (**(void (***)(uint64_t, uint64_t))(v18 - 8))((uint64_t)(v14 + 5), (uint64_t)(v15 + 5));
  __int128 v19 = v15[9];
  v14[9] = v19;
  (**(void (***)(uint64_t, uint64_t))(v19 - 8))((uint64_t)v14 + 120, (uint64_t)v15 + 120);
  __int128 v20 = *(_OWORD *)((char *)v15 + 184);
  *(_OWORD *)((char *)v14 + 18_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v20;
  (**(void (***)(uint64_t, uint64_t))(v20 - 8))((uint64_t)(v14 + 10), (uint64_t)(v15 + 10));
  __int128 v21 = v15[14];
  v14[14] = v21;
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))((uint64_t)v14 + 200, (uint64_t)v15 + 200);
  uint64_t v22 = a3[8];
  __int128 v23 = *(_OWORD *)(a2 + v22 + 24);
  *(_OWORD *)(a1 + v22 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v23;
  (**(void (***)(void))(v23 - 8))();
  uint64_t v24 = a3[9];
  uint64_t v25 = *(void *)(a2 + v24);
  *(void *)(a1 + v2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v25;
  swift_retain(v25);
  return a1;
}

uint64_t sub_28428(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DeviceIdiom(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  sub_720C((void *)(a1 + a3[6]), (void *)(a2 + a3[6]));
  uint64_t v11 = a3[7];
  __int128 v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  sub_720C((void *)(a1 + v11), (void *)(a2 + v11));
  sub_720C(v12 + 5, v13 + 5);
  sub_720C(v12 + 10, v13 + 10);
  sub_720C(v12 + 15, v13 + 15);
  sub_720C(v12 + 20, v13 + 20);
  sub_720C(v12 + 25, v13 + 25);
  sub_720C((void *)(a1 + a3[8]), (void *)(a2 + a3[8]));
  uint64_t v14 = a3[9];
  uint64_t v15 = *(void *)(a2 + v14);
  uint64_t v16 = *(void *)(a1 + v14);
  *(void *)(a1 + v1_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

uint64_t sub_2853C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DeviceIdiom(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  __int128 v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  memcpy((void *)(a1 + v12), (const void *)(a2 + v12), 0xF0uLL);
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  __int128 v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(void *)(v18 + 32) = *(void *)(v19 + 32);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  return a1;
}

uint64_t sub_28610(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DeviceIdiom(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Parse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + v11));
  __int128 v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + v15));
  __int128 v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v18;
  *(void *)(v16 + 32) = *(void *)(v17 + 32);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(v16 + 40));
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(v17 + 40);
  *(_OWORD *)(v16 + 56) = *(_OWORD *)(v17 + 56);
  *(void *)(v16 + 72) = *(void *)(v17 + 72);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(v16 + 80));
  __int128 v19 = *(_OWORD *)(v17 + 96);
  *(_OWORD *)(v16 + 80) = *(_OWORD *)(v17 + 80);
  *(_OWORD *)(v16 + 96) = v19;
  *(void *)(v16 + 112) = *(void *)(v17 + 112);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(v16 + 120));
  *(_OWORD *)(v16 + 120) = *(_OWORD *)(v17 + 120);
  *(_OWORD *)(v16 + 136) = *(_OWORD *)(v17 + 136);
  *(void *)(v16 + 152) = *(void *)(v17 + 152);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(v16 + 160));
  __int128 v20 = *(_OWORD *)(v17 + 176);
  *(_OWORD *)(v16 + 160) = *(_OWORD *)(v17 + 160);
  *(_OWORD *)(v16 + 176) = v20;
  *(void *)(v16 + 192) = *(void *)(v17 + 192);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(v16 + 200));
  *(_OWORD *)(v16 + 200) = *(_OWORD *)(v17 + 200);
  *(_OWORD *)(v16 + sub_14C58(v0 + 216) = *(_OWORD *)(v17 + 216);
  *(void *)(v16 + 232) = *(void *)(v17 + 232);
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + v21));
  __int128 v24 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v24;
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  uint64_t v25 = a3[9];
  uint64_t v26 = *(void *)(a1 + v25);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);
  swift_release(v26);
  return a1;
}

uint64_t sub_287A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_287B0);
}

uint64_t sub_287B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_29484();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)v3)
  {
    uint64_t v7 = v6;
    uint64_t v8 = v4;
    return sub_63E0(v8, v3, v7);
  }

  uint64_t v9 = type metadata accessor for Parse(0LL);
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84LL) == (_DWORD)v3)
  {
    uint64_t v7 = v9;
    uint64_t v8 = v4 + *(int *)(a3 + 20);
    return sub_63E0(v8, v3, v7);
  }

  unint64_t v11 = *(void *)(v4 + *(int *)(a3 + 24) + 24);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_28848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_28854);
}

uint64_t sub_28854(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_29484();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = v5;
    return sub_8760(v10, v4, v4, v9);
  }

  uint64_t result = type metadata accessor for Parse(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return sub_8760(v10, v4, v4, v9);
  }

  *(void *)(v5 + *(int *)(a4 + 24) + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = (v4 - 1);
  return result;
}

uint64_t type metadata accessor for ExecuteOnRemoteDeviceFlow(uint64_t a1)
{
  uint64_t result = qword_8D988;
  if (!qword_8D988) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ExecuteOnRemoteDeviceFlow);
  }
  return result;
}

uint64_t sub_28920(uint64_t a1)
{
  uint64_t result = type metadata accessor for DeviceIdiom(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Parse(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      uint64_t v5[2] = "(";
      v5[3] = &unk_62F58;
      v5[4] = "(";
      v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initStructMetadata(a1, 256LL, 6LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_289C8(uint64_t a1)
{
  return 1LL;
}

uint64_t sub_289FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_294A0();
  unint64_t v5 = sub_293DC();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v5);
}

uint64_t sub_28A40(uint64_t a1)
{
  v2[56] = a1;
  v2[57] = v1;
  uint64_t v3 = type metadata accessor for DeviceIdiom(0LL);
  v2[58] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[59] = v4;
  v2[60] = sub_8860(v4);
  uint64_t v5 = sub_294A0();
  v2[61] = v5;
  v2[62] = sub_8860(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v2[63] = v6;
  v2[64] = *(void *)(v6 - 8);
  v2[65] = sub_8924();
  v2[66] = sub_8924();
  v2[67] = sub_8924();
  v2[68] = sub_8924();
  return sub_887C();
}

uint64_t sub_28AE0(uint64_t a1)
{
  uint64_t v2 = v1[68];
  uint64_t v3 = v1[63];
  uint64_t v4 = v1[64];
  uint64_t v5 = v1[62];
  uint64_t v6 = v1[57];
  uint64_t v7 = Logger.workout.unsafeMutableAddressor(a1);
  v1[69] = v7;
  sub_8894(v7, (uint64_t)(v1 + 48));
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v1[70] = v8;
  v8(v2, v7, v3);
  uint64_t v9 = sub_2935C(v6, v5);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v29 = v1[64];
    uint64_t v12 = v1[62];
    uint64_t v30 = v1[63];
    uint64_t v31 = v1[68];
    uint64_t v13 = v1[59];
    uint64_t v14 = v1[60];
    uint64_t v15 = v1[58];
    uint64_t v16 = (_DWORD *)sub_88B0(12LL);
    uint64_t v17 = sub_88B0(32LL);
    uint64_t v32 = v17;
    *uint64_t v16 = 136315138;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, v12, v15);
    uint64_t v18 = String.init<A>(describing:)(v14, v15);
    unint64_t v20 = v19;
    v1[55] = sub_173E0(v18, v19, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 55, v1 + 56);
    swift_bridgeObjectRelease(v20);
    sub_293A0(v12);
    sub_29464(&dword_0, v10, v21, "Searching for remote %s");
    sub_29494();
    sub_8870(v17);
    sub_8870((uint64_t)v16);

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v22(v31, v30);
  }

  else
  {
    uint64_t v23 = v1[68];
    uint64_t v24 = v1[63];
    uint64_t v25 = v1[64];
    sub_293A0(v1[62]);

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v22(v23, v24);
  }

  v1[71] = v22;
  uint64_t v26 = v1[57] + *(int *)(v1[61] + 32LL);
  uint64_t v27 = (void *)swift_task_alloc(async function pointer to findRemoteDevice(with:deviceResolutionService:)[1]);
  v1[72] = v27;
  *uint64_t v27 = v1;
  v27[1] = sub_28CF0;
  return findRemoteDevice(with:deviceResolutionService:)(v1[57], v26);
}

uint64_t sub_28CF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 576LL);
  *(void *)(*(void *)v1 + 584LL) = a1;
  swift_task_dealloc(v2);
  return sub_887C();
}

uint64_t sub_28D44()
{
  uint64_t v2 = *(void *)(v0 + 584);
  if (v2)
  {
    static AceService.currentAsync.getter();
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to isRemoteDeviceReachable(remoteDevice:aceService:)[1]);
    *(void *)(v0 + 592) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_28E84;
    return isRemoteDeviceReachable(remoteDevice:aceService:)(v2, v0 + 296);
  }

  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, _WORD *))(v0 + 560);
    uint64_t v6 = *(void *)(v0 + 552);
    uint64_t v7 = *(void *)(v0 + 520);
    uint64_t v8 = *(_WORD **)(v0 + 504);
    sub_8894(v6, v0 + 336);
    uint64_t v9 = v5(v7, v6, v8);
    Logger.logObject.getter(v9);
    os_log_type_t v10 = sub_140C8();
    if (sub_1F150(v10))
    {
      uint64_t v8 = (_WORD *)sub_88B0(2LL);
      *uint64_t v8 = 0;
      sub_29450(&dword_0, v11, v12, "Unable to find any suitable remote device, falling back to local device");
      sub_8870((uint64_t)v8);
    }

    sub_29438();
    sub_294A8();
    sub_29474();
    sub_2941C();
    swift_task_dealloc(v7);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v5);
    swift_task_dealloc(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_28E84(char a1)
{
  uint64_t v2 = (void *)(*(void *)v1 + 296LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 592LL);
  *(_BYTE *)(*(void *)v1 + 60Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v3);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v2);
  return sub_887C();
}

uint64_t sub_28EE4()
{
  if (*(_BYTE *)(v0 + 600) == 1)
  {
    sub_235A0( *(void *)(v0 + 456) + *(int *)(*(void *)(v0 + 488) + 20LL),  *(void *)(v0 + 584),  *(void *)(v0 + 456));
    uint64_t v8 = v7;
    uint64_t v9 = *(void **)(v0 + 584);
    os_log_type_t v10 = *(void (**)(_DWORD *, uint64_t, uint64_t))(v0 + 560);
    uint64_t v11 = *(void *)(v0 + 552);
    uint64_t v12 = *(_DWORD **)(v0 + 536);
    uint64_t v13 = *(void *)(v0 + 504);
    sub_8894(v11, v0 + 408);
    v10(v12, v11, v13);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v15 = static os_log_type_t.debug.getter(v14);
    uint64_t v16 = v15;
    BOOL v17 = os_log_type_enabled(v14, v15);
    uint64_t v18 = *(void **)(v0 + 584);
    if (v17)
    {
      uint64_t v12 = (_DWORD *)sub_88B0(12LL);
      uint64_t v23 = v8;
      unint64_t v19 = (void *)sub_88B0(8LL);
      *uint64_t v12 = 138412290;
      *(void *)(v0 + 432) = v18;
      os_log_type_t v10 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440);
      *unint64_t v19 = v18;

      sub_29464(&dword_0, v14, v20, "Executing RCHFlow on remote device: %@");
      sub_6358(&qword_8C360);
      sub_29494();
      uint64_t v21 = (uint64_t)v19;
      uint64_t v8 = v23;
      sub_8870(v21);
      sub_8870((uint64_t)v12);
    }

    else
    {

      uint64_t v14 = (os_log_s *)v18;
    }

    uint64_t v1 = *(void **)(v0 + 584);
    uint64_t v3 = *(_DWORD **)(v0 + 448);
    (*(void (**)(void, void))(v0 + 568))(*(void *)(v0 + 536), *(void *)(v0 + 504));
    static ExecuteResponse.complete(next:)(v8);
    swift_release(v8);
  }

  else
  {

    os_log_type_t v10 = *(void (**)(_DWORD *, uint64_t, uint64_t))(v0 + 560);
    uint64_t v1 = *(void **)(v0 + 552);
    uint64_t v12 = *(_DWORD **)(v0 + 520);
    uint64_t v16 = *(void *)(v0 + 504);
    sub_8894((uint64_t)v1, v0 + 336);
    uint64_t v2 = ((uint64_t (*)(_DWORD *, void *, uint64_t))v10)(v12, v1, v16);
    uint64_t v3 = v12;
    Logger.logObject.getter(v2);
    os_log_type_t v4 = sub_140C8();
    if (sub_1F150(v4))
    {
      uint64_t v12 = (_DWORD *)sub_88B0(2LL);
      *(_WORD *)uint64_t v12 = 0;
      sub_29450(&dword_0, v5, v6, "Unable to find any suitable remote device, falling back to local device");
      sub_8870((uint64_t)v12);
    }

    sub_29438();
    sub_294A8();
    sub_29474();
  }

  sub_2941C();
  swift_task_dealloc(v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v12);
  swift_task_dealloc(v16);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_29280(uint64_t a1)
{
  return 1LL;
}

uint64_t sub_29298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1E86C;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_29304(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_8D9E4);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1ECE0;
  return sub_28A40(a1);
}

uint64_t sub_2935C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExecuteOnRemoteDeviceFlow(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_293A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ExecuteOnRemoteDeviceFlow(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_293DC()
{
  unint64_t result = qword_8D9E8[0];
  if (!qword_8D9E8[0])
  {
    uint64_t v1 = type metadata accessor for ExecuteOnRemoteDeviceFlow(255LL);
    unint64_t result = swift_getWitnessTable(&unk_62F70, v1);
    atomic_store(result, qword_8D9E8);
  }

  return result;
}

uint64_t sub_2941C()
{
  return swift_task_dealloc(*(void *)(v0 + 544));
}

void sub_29438()
{
}

void sub_29450(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_29464(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_29474()
{
  return static ExecuteResponse.complete(next:)(*(void *)(v1 + *(int *)(v0 + 36)));
}

uint64_t sub_29484()
{
  return type metadata accessor for DeviceIdiom(0LL);
}

uint64_t sub_29494()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_294A0()
{
  return type metadata accessor for ExecuteOnRemoteDeviceFlow(0LL);
}

uint64_t sub_294A8()
{
  return v2(v0, v1);
}

BOOL sub_294B4()
{
  uint64_t v0 = type metadata accessor for Parse(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_DD98();
  if (v4 && (v5 = v4, v6 = App.appIdentifier.getter(v4), uint64_t v8 = v7, swift_release(v5), v8))
  {
    if (v6 == 0xD000000000000011LL && v8 == 0x8000000000069AC0LL)
    {
      swift_bridgeObjectRelease(v8);
      sub_295F8();
LABEL_9:
      BOOL v11 = 1LL;
      goto LABEL_10;
    }

    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, 0xD000000000000011LL, 0x8000000000069AC0LL, 0LL);
    swift_bridgeObjectRelease(v8);
    sub_295F8();
    if ((v12 & 1) != 0) {
      goto LABEL_9;
    }
  }

  else
  {
    sub_295F8();
  }

  sub_52464((uint64_t)v3);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease(v9);
  BOOL v11 = v10 != 0;
LABEL_10:
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v11;
}

uint64_t sub_295F8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

uint64_t sub_29610(uint64_t a1)
{
  uint64_t v2 = "\b";
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 96);
}

uint64_t sub_29650()
{
  return v0;
}

uint64_t sub_2966C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  sub_AF38(0LL, &qword_8C418, &OBJC_CLASS___SAIntentGroupLaunchAppWithIntent_ptr);
  char v12 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)(a1);
  uint64_t v13 = *(void **)(v5 + 16);
  if (v13)
  {
    id v29 = v13;
    static AceService.current.getter(v30);
    uint64_t v14 = v31;
    uint64_t v28 = v32;
    sub_8734(v30, v31);
    uint64_t v27 = DeviceUnit.assistantId.getter();
    uint64_t v16 = v15;
    BOOL v17 = (void *)sub_65A4((uint64_t)&unk_80BA0, 64LL);
    uint64_t v18 = a4;
    unint64_t v19 = v17;
    v17[2] = v5;
    void v17[3] = a1;
    v17[4] = a2;
    v17[5] = a3;
    v17[6] = v18;
    v17[7] = a5;
    uint64_t v20 = sub_AF38(0LL, &qword_8C428, &OBJC_CLASS___SABaseCommand_ptr);
    swift_retain(v6);
    swift_retain(a1);
    id v21 = a2;
    id v22 = a3;
    swift_retain(a5);
    dispatch thunk of AceServiceInvoker.submitToRemote<A>(_:_:completion:)(v12, v27, v16, sub_2A0D4, v19, v20, v14, v28);
    swift_bridgeObjectRelease(v16);
    swift_release(v19);

    return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v30);
  }

  else
  {
    uint64_t v24 = sub_6358(&qword_8E9B0);
    uint64_t v25 = sub_65A4(v24, 40LL);
    *(_OWORD *)(v25 + 16) = xmmword_61780;
    *(void *)(v25 + 32) = v12;
    v30[0] = v25;
    specialized Array._endMutation()(v25);
    id v26 = v12;
    sub_29864(a1, a2, a3, v30[0], a4, a5);

    return swift_bridgeObjectRelease(v30[0]);
  }

uint64_t sub_29864(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = sub_6358(&qword_8CD10);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  sub_14DB0((uint64_t)v16, v18, v19, v17);
  uint64_t v20 = (void *)sub_65A4((uint64_t)&unk_80B78, 88LL);
  _OWORD v20[2] = 0LL;
  v20[3] = 0LL;
  v20[4] = v7;
  void v20[5] = a1;
  v20[6] = a2;
  v20[7] = a3;
  v20[8] = a4;
  v20[9] = a5;
  v20[10] = a6;
  swift_retain(v7);
  swift_retain(a1);
  id v21 = a2;
  id v22 = a3;
  swift_bridgeObjectRetain();
  swift_retain(a6);
  uint64_t v23 = sub_4A80C((uint64_t)v16, (uint64_t)&unk_8DA88, (uint64_t)v20);
  return swift_release(v23);
}

uint64_t sub_29970(void (*a1)(void *))
{
  uint64_t v2 = sub_6358(&qword_8C348);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NLContextUpdate(0LL);
  sub_14DB0((uint64_t)v4, v6, v7, v5);
  uint64_t v8 = type metadata accessor for AceOutput(0LL);
  memset(v10, 0, sizeof(v10));
  uint64_t v11 = 0LL;
  void v12[3] = v8;
  v12[4] = &protocol witness table for AceOutput;
  sub_6B9C(v12);
  static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)( _swiftEmptyArrayStorage,  v4,  _swiftEmptyArrayStorage,  v10);
  sub_6B60((uint64_t)v10, (uint64_t *)&unk_8F3F0);
  sub_6B60((uint64_t)v4, &qword_8C348);
  char v13 = 0;
  a1(v12);
  return sub_6B60((uint64_t)v12, (uint64_t *)&unk_8F3E0);
}

void sub_29A6C()
{
}

void sub_29AC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = sub_6358(&qword_8DA90);
  __chkstk_darwin(v13);
  uint64_t v15 = (id *)((char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_2A0E4(a1, (uint64_t)v15);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
  {
    uint64_t v16 = sub_6B60((uint64_t)v15, &qword_8DA90);
    uint64_t v17 = static os_log_type_t.error.getter(v16);
    id v18 = *(id *)Log.health.unsafeMutableAddressor(v17);
    os_log(_:dso:log:_:_:)( v17,  &dword_0,  v18,  "Unable to successfully execute SAIntentGroupLaunchAppWithIntent on remote device",  80LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {

    sub_29864(a3, a4, a5, (uint64_t)_swiftEmptyArrayStorage, a6, a7);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  }

void *sub_29C0C()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_29C18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[22] = v10;
  v8[23] = v11;
  v8[20] = a7;
  v8[21] = a8;
  v8[18] = a5;
  v8[19] = a6;
  v8[17] = a4;
  return swift_task_switch(sub_29C44, 0LL, 0LL);
}

uint64_t sub_29C44()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_8DC24);
  *(void *)(v0 + 192) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_29CC0;
  return sub_2B800(v0 + 88, v0 + 16, *(void *)(v0 + 168));
}

uint64_t sub_29CC0()
{
  return swift_task_switch(sub_29D14, 0LL, 0LL);
}

uint64_t sub_29D14()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_29D70()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for HealthContinueInAppStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HealthContinueInAppStrategy);
}

uint64_t sub_29D9C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  return sub_2966C(a1, a2, a3, a4, a5);
}

uint64_t sub_29DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for HealthContinueInAppStrategy(0LL, *(void *)(a6 + 80), *(void *)(a6 + 88), a4);
  return ContinueInAppDialogFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:completion:)( a1,  a2,  a3,  a4,  a5,  v13,  a7);
}

uint64_t sub_29E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to ContinueInAppDialogFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:)[1]);
  *(void *)(v6 + sub_14C98(v0 + 16) = v13;
  uint64_t v15 = type metadata accessor for HealthContinueInAppStrategy(0LL, *(void *)(a5 + 80), *(void *)(a5 + 88), v14);
  *uint64_t v13 = v6;
  v13[1] = sub_1F0C0;
  return ContinueInAppDialogFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:)(a1, a2, a3, a4, v15, a6);
}

uint64_t sub_29ED0(void (*a1)(void *))
{
  return sub_29970(a1);
}

uint64_t sub_29EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to UnlockDeviceFlowStrategy.makePromptForDeviceUnlock()[1]);
  *(void *)(v3 + sub_14C98(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1ECE0;
  return UnlockDeviceFlowStrategy.makePromptForDeviceUnlock()(a1, a2, a3);
}

uint64_t sub_29F54(uint64_t a1)
{
  return swift_getWitnessTable(&unk_63060, a1);
}

uint64_t sub_29F64(uint64_t a1)
{
  return swift_getWitnessTable(&unk_630F8, a1);
}

uint64_t sub_29F74(uint64_t a1)
{
  return swift_getWitnessTable(&unk_630C8, a1);
}

uint64_t sub_29F84(uint64_t a1)
{
  return swift_getWitnessTable(&unk_63090, a1);
}

uint64_t sub_29F94()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_release(*(void *)(v0 + 80));
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_29FE8(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc(dword_8DA84);
  *(void *)(v2 + sub_14C98(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1ECE0;
  return sub_29C18(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_2A090()
{
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_2A0D4(uint64_t a1)
{
}

uint64_t sub_2A0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8DA90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_2A12C(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

void sub_2A184(uint64_t a1)
{
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_2AEF0(a1, (uint64_t)v6, type metadata accessor for HealthNLIntent);
  uint64_t v7 = type metadata accessor for DirectInvocationData(0LL);
  sub_8760(v1, 1LL, 1LL, v7);
  static Device.current.getter(v10);
  sub_6468(a1, type metadata accessor for HealthNLIntent);
  uint64_t v8 = type metadata accessor for FlowRouter(0LL);
  sub_14DA4(v8);
  sub_2A12C((uint64_t)v6, v1, v10);
  sub_11120();
}

void sub_2A258(uint64_t a1)
{
  uint64_t v6 = type metadata accessor for DirectInvocationData(0LL);
  sub_8760(v1, 0LL, 1LL, v6);
  static Device.current.getter(v8);
  sub_6468(a1, type metadata accessor for DirectInvocationData);
  uint64_t v7 = type metadata accessor for FlowRouter(0LL);
  sub_14DA4(v7);
  sub_2A12C(v2, v1, v8);
  sub_11120();
}

uint64_t sub_2A324()
{
  uint64_t v4 = type metadata accessor for HealthNLIntent(0LL);
  sub_6C04();
  __chkstk_darwin(v5);
  sub_19A20();
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  sub_8734(v0 + 2, v6);
  if ((dispatch thunk of DeviceState.isHomePod.getter(v6, v7) & 1) != 0)
  {
    sub_2AEF0( (uint64_t)v0 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin10FlowRouter_healthIntent,  v2,  type metadata accessor for HealthNLIntent);
    uint64_t v8 = type metadata accessor for SearchForRemoteDevicesFlow(0LL);
    sub_14DA4(v8);
    v21[0] = sub_52A98(v2);
    sub_DA38(&qword_8DBB0, type metadata accessor for SearchForRemoteDevicesFlow);
    uint64_t v10 = Flow.eraseToAnyFlow()(v8, v9);
    swift_release(v21[0]);
    return v10;
  }

  uint64_t v12 = sub_2B004();
  if ((dispatch thunk of DeviceState.isCarPlay.getter(v12) & 1) == 0)
  {
    uint64_t v13 = sub_2B004();
    if ((dispatch thunk of DeviceState.isCarDNDMode.getter(v13) & 1) == 0)
    {
      if (qword_8BBB0 != -1) {
        swift_once(&qword_8BBB0, sub_4ECF4);
      }
      uint64_t v14 = qword_8FA20;
      sub_DA38((unint64_t *)&qword_8C5F8, type metadata accessor for HealthNLIntent);
      IntentNodeTraversable.value<A>(forNode:)(v14, v4, v15);
      switch(LOBYTE(v21[0]))
      {
        case 0:
          sub_2AA8C();
          goto LABEL_16;
        case 1:
          sub_2A84C();
          goto LABEL_16;
        case 2:
          sub_2A78C();
          goto LABEL_16;
        case 3:
          sub_2A90C();
          goto LABEL_16;
        case 4:
          sub_2A9CC();
LABEL_16:
          uint64_t v10 = v16;
          break;
        default:
          sub_2B078();
          static CATOption.defaultMode.getter();
          CATWrapper.__allocating_init(options:globals:)(v1, 0LL);
          static Device.current.getter(v20);
          static AceService.current.getter(v19);
          sub_2B03C(37LL, 0x8000000000069C40LL, v17, (uint64_t)_swiftEmptyArrayStorage);
          unint64_t v18 = sub_2AE80();
          uint64_t v10 = Flow.eraseToAnyFlow()(&type metadata for DialogFlow, v18);
          sub_2AEBC((uint64_t)v21);
          break;
      }

      return v10;
    }
  }

  return sub_2A5C4();
}

uint64_t sub_2A5C4()
{
  uint64_t v2 = (char *)&v16[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_6358(&qword_8DB80);
  uint64_t v4 = type metadata accessor for CommonFlowGuard(0LL);
  uint64_t v5 = swift_allocObject( v3,  ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL))
       + *(void *)(*(void *)(v4 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v5 + sub_14C98(v0 + 16) = xmmword_61030;
  static CommonFlowGuard.disallowInSharingMode.getter();
  uint64_t v6 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)(v5);
  swift_bridgeObjectRelease(v5);
  sub_2B078();
  static CATOption.defaultMode.getter();
  uint64_t v7 = CATWrapper.__allocating_init(options:globals:)(v2, 0LL);
  static Device.current.getter(v17);
  static AceService.current.getter(v16);
  DialogFlow.init(catId:wrapper:parameters:snippets:deviceState:aceService:)( 0xD000000000000025LL,  0x8000000000069C40LL,  v7,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage);
  v17[0] = v6;
  uint64_t v8 = type metadata accessor for GuardFlow(0LL);
  unint64_t v9 = sub_2AE80();
  uint64_t v10 = Flow.guarded<A>(by:)(v17, &type metadata for DialogFlow, v8, v9, &protocol witness table for GuardFlow);
  v17[0] = v10;
  uint64_t v11 = sub_6358(&qword_8DB90);
  sub_DA6C(&qword_8DB98, &qword_8DB90);
  uint64_t v13 = Flow.eraseToAnyFlow()(v11, v12);
  swift_release(v10);
  swift_release(v6);
  sub_2AEBC((uint64_t)v18);
  return v13;
}

void sub_2A78C()
{
  uint64_t v2 = (void *)sub_2B02C();
  sub_CBA4(v2);
  sub_DD58();
  sub_2B058();
  uint64_t v3 = type metadata accessor for EndWorkoutStrategy();
  uint64_t v4 = sub_65A4(v3, 24LL);
  *(void *)(v4 + sub_14C98(v0 + 16) = 0LL;
  sub_2AF44(v4);
  uint64_t v5 = sub_6358(&qword_8D478);
  sub_14DA4(v5);
  uint64_t v6 = sub_2AFD0();
  uint64_t v7 = sub_2AFB0(v6);
  sub_2B064(v7);
  sub_DCE4(&qword_8DBC0);
  sub_2AFC0(v8);
  sub_2AFDC();
  sub_2AF78();
  sub_2B04C();
  sub_2AF30();
}

void sub_2A84C()
{
  uint64_t v2 = sub_2B02C();
  sub_D068(v2);
  sub_DD58();
  sub_2B058();
  uint64_t v3 = type metadata accessor for PauseWorkoutStrategy();
  uint64_t v4 = sub_65A4(v3, 24LL);
  *(void *)(v4 + sub_14C98(v0 + 16) = 0LL;
  sub_2AF44(v4);
  uint64_t v5 = sub_6358(&qword_8D510);
  sub_14DA4(v5);
  uint64_t v6 = sub_2AFD0();
  uint64_t v7 = sub_2AFB0(v6);
  sub_2B064(v7);
  sub_DCE4(&qword_8DBD0);
  sub_2AFC0(v8);
  sub_2AFDC();
  sub_2AF78();
  sub_2B04C();
  sub_2AF30();
}

void sub_2A90C()
{
  uint64_t v2 = sub_2B02C();
  sub_D33C(v2);
  sub_DD58();
  sub_2B058();
  uint64_t v3 = type metadata accessor for ResumeWorkoutStrategy();
  uint64_t v4 = sub_65A4(v3, 24LL);
  *(void *)(v4 + sub_14C98(v0 + 16) = 0LL;
  sub_2AF44(v4);
  uint64_t v5 = sub_6358(&qword_8D640);
  sub_14DA4(v5);
  uint64_t v6 = sub_2AFD0();
  uint64_t v7 = sub_2AFB0(v6);
  sub_2B064(v7);
  sub_DCE4(&qword_8DBE0);
  sub_2AFC0(v8);
  sub_2AFDC();
  sub_2AF78();
  sub_2B04C();
  sub_2AF30();
}

void sub_2A9CC()
{
  uint64_t v2 = type metadata accessor for CancelWorkoutStrategy();
  uint64_t v3 = sub_65A4(v2, 16LL);
  sub_2AF44(v3);
  uint64_t v4 = sub_6358(&qword_8D5A8);
  sub_14DA4(v4);
  uint64_t v5 = sub_2AFD0();
  uint64_t v6 = sub_2AFB0(v5);
  sub_2B064(v6);
  sub_DCE4(qword_8DBF0);
  sub_2AFC0(v7);
  sub_2AFDC();
  sub_2AF78();
  sub_2B04C();
  sub_2AF30();
}

void sub_2AA8C()
{
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v20[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20[-1] - v7;
  sub_2B070();
  sub_6C04();
  __chkstk_darwin(v9);
  sub_19A20();
  if (sub_4E344())
  {
    sub_2B078();
    static CATOption.defaultMode.getter();
    CATWrapper.__allocating_init(options:globals:)(v1, 0LL);
    static Device.current.getter(&v21);
    static AceService.current.getter(v20);
    sub_2B03C(34LL, 0x8000000000069C70LL, v10, (uint64_t)_swiftEmptyArrayStorage);
    unint64_t v11 = sub_2AE80();
    Flow.eraseToAnyFlow()(&type metadata for DialogFlow, v11);
    sub_2AEBC((uint64_t)v22);
  }

  else
  {
    uint64_t v12 = type metadata accessor for HealthProducers();
    sub_C87C(v12);
    uint64_t v13 = sub_DD58();
    uint64_t started = type metadata accessor for StartWorkoutStrategy();
    v22[0] = sub_65A4(started, 16LL);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v6, v8, v0);
    uint64_t v15 = sub_6358(&qword_8D3D8);
    sub_14DA4(v15);
    uint64_t v16 = RCHChildFlowFactory.init(producers:)(v6);
    uint64_t v17 = RCHFlow.__allocating_init(strategy:childFlowFactory:)(v22, v16);
    v22[0] = v17;
    sub_DCE4(&qword_8DBA8);
    Flow.eraseToAnyFlow()(v13, v18);
    swift_release(v17);
    sub_2AF78();
  }

  sub_2B04C();
  sub_2AF30();
}

uint64_t sub_2AC64()
{
  return v0;
}

uint64_t sub_2ACA8()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_2ACCC()
{
  return type metadata accessor for FlowRouter(0LL);
}

uint64_t type metadata accessor for FlowRouter(uint64_t a1)
{
  uint64_t result = qword_8DAD0;
  if (!qword_8DAD0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FlowRouter);
  }
  return result;
}

void sub_2AD0C(uint64_t a1)
{
  v6[0] = "(";
  uint64_t v2 = type metadata accessor for NLIntent(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_2ADA0(319LL);
    if (v5 <= 0x3F)
    {
      _OWORD v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 3LL, v6, a1 + 80);
    }
  }

void sub_2ADA0(uint64_t a1)
{
  if (!qword_8DAE0)
  {
    uint64_t v2 = type metadata accessor for DirectInvocationData(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_8DAE0);
    }
  }

uint64_t sub_2ADF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HealthNLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_2AE38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8BE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_2AE80()
{
  unint64_t result = qword_8DB88;
  if (!qword_8DB88)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DialogFlow, &type metadata for DialogFlow);
    atomic_store(result, (unint64_t *)&qword_8DB88);
  }

  return result;
}

uint64_t sub_2AEBC(uint64_t a1)
{
  return a1;
}

void sub_2AEF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_6590();
}

  ;
}

uint64_t sub_2AF44(uint64_t a1)
{
  *(void *)(v5 - 72) = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v1);
}

  ;
}

uint64_t sub_2AF78()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_2AF88()
{
  return type metadata accessor for HealthProducers();
}

  ;
}

uint64_t sub_2AFB0(uint64_t a1)
{
  return RCHFlow.__allocating_init(strategy:childFlowFactory:)(v1 - 72, a1);
}

uint64_t sub_2AFC0(uint64_t a1)
{
  return Flow.eraseToAnyFlow()(v1, a1);
}

uint64_t sub_2AFD0()
{
  return RCHChildFlowFactory.init(producers:)(v0);
}

uint64_t sub_2AFDC()
{
  return swift_release(v0);
}

uint64_t sub_2AFE8()
{
  return type metadata accessor for HealthNLIntent(0LL);
}

uint64_t sub_2B004()
{
  uint64_t v2 = *(void *)(v0 + 40);
  sub_8734(v1, v2);
  return v2;
}

uint64_t sub_2B02C()
{
  return 0LL;
}

uint64_t sub_2B03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return DialogFlow.init(catId:wrapper:parameters:snippets:deviceState:aceService:)( a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL,  a2,  v4,  a4,  a4);
}

uint64_t sub_2B04C()
{
  return v0;
}

uint64_t sub_2B058()
{
  return 0LL;
}

uint64_t sub_2B064(uint64_t result)
{
  *(void *)(v1 - 72) = result;
  return result;
}

uint64_t sub_2B070()
{
  return type metadata accessor for CATOption(0LL);
}

uint64_t sub_2B078()
{
  return type metadata accessor for DialogCATWrapper(0LL);
}

uint64_t sub_2B080(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  BOOL v4 = a1 == 0x726F6F646E69LL && a2 == 0xE600000000000000LL;
  if (v4 || (sub_2B13C(0x726F6F646E69LL, 0xE600000000000000LL) & 1) != 0)
  {
    sub_C090();
    return 2LL;
  }

  if (a1 == 0x726F6F6474756FLL && a2 == 0xE700000000000000LL)
  {
    sub_C090();
  }

  else
  {
    char v7 = sub_2B13C(0x726F6F6474756FLL, 0xE700000000000000LL);
    sub_C090();
    if ((v7 & 1) == 0) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t sub_2B13C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

ValueMetadata *type metadata accessor for GenericErrorFlow()
{
  return &type metadata for GenericErrorFlow;
}

uint64_t sub_2B15C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_218FC();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for GenericErrorFlow, v4);
}

uint64_t sub_2B19C(uint64_t a1)
{
  v2[41] = a1;
  v2[42] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[43] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[44] = v4;
  v2[45] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return sub_887C();
}

uint64_t sub_2B1F4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 352);
  uint64_t v2 = *(void *)(v1 + 360);
  uint64_t v4 = *(void *)(v1 + 344);
  uint64_t v5 = Logger.workout.unsafeMutableAddressor(a1);
  swift_beginAccess(v5, v1 + 296, 0LL, 0LL);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  char v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "Executing a generic error response", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v11 = *(void *)(v1 + 352);
  uint64_t v10 = *(void *)(v1 + 360);
  uint64_t v13 = *(void *)(v1 + 336);
  uint64_t v12 = *(void *)(v1 + 344);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  sub_2B70C(v13, v1 + 16);
  uint64_t v14 = swift_allocObject(&unk_80CE8, 296LL, 7LL);
  uint64_t v15 = memcpy((void *)(v14 + 16), (const void *)(v1 + 16), 0x118uLL);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v19, v15);
  uint64_t v16 = type metadata accessor for SimpleOutputFlowAsync(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)(v19, &unk_8DC18, v14);
  *(void *)(v1 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v17;
  static ExecuteResponse.complete<A>(next:)(v1 + 320, v16, &protocol witness table for SimpleOutputFlowAsync);
  swift_release(v17);
  sub_88B8();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_2B3A4(uint64_t a1, uint64_t a2)
{
  _OWORD v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_2B424, 0LL, 0LL);
}

uint64_t sub_2B424()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  static DialogPhase.error.getter();
  OutputGenerationManifest.init(dialogPhase:_:)(v1, nullsub_1, 0LL);
  sub_8734((void *)(v2 + 200), *(void *)(v2 + 224));
  uint64_t v3 = (void *)swift_task_alloc(dword_8EFD4);
  v0[8] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_2B4A8;
  return sub_3F108();
}

uint64_t sub_2B4A8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 64);
  *(void *)(v3 + 72) = a1;
  *(void *)(v3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v1;
  swift_task_dealloc(v4);
  return sub_887C();
}

uint64_t sub_2B50C()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[33];
  uint64_t v3 = v1[34];
  sub_8734(v1 + 30, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[11] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_2B58C;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0[2],  v0[9],  v0[7],  v2,  v3);
}

uint64_t sub_2B58C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc(v2);
  return sub_887C();
}

uint64_t sub_2B5E8()
{
  return sub_88A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2B61C()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  sub_88D0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2B67C()
{
  sub_2B7EC();
  sub_88B8();
  sub_88D0();
  return sub_88A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2B6BC(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_8DC0C);
  *(void *)(v1 + sub_14C98(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1ECE0;
  return sub_2B19C(a1);
}

uint64_t sub_2B70C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_2B740()
{
  return swift_deallocObject(v0, 296LL, 7LL);
}

uint64_t sub_2B794(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_8DC14);
  *(void *)(v2 + sub_14C98(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1ECE0;
  return sub_2B3A4(a1, v1 + 16);
}

uint64_t sub_2B7EC()
{
  return (*(uint64_t (**)(void, void))(v0[6] + 8LL))(v0[7], v0[5]);
}

uint64_t sub_2B800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v3[19] = sub_8860(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[20] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[21] = v6;
  v3[22] = sub_8860(v6);
  uint64_t v7 = type metadata accessor for CATOption(0LL);
  v3[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[24] = v8;
  v3[25] = sub_8860(v8);
  return sub_887C();
}

uint64_t sub_2B880()
{
  uint64_t v1 = *(uint64_t **)(v0 + 136);
  type metadata accessor for CATResponse(0LL);
  uint64_t v3 = v1[1];
  uint64_t v2 = v1[2];
  uint64_t v4 = *v1;
  uint64_t v5 = v1[8];
  type metadata accessor for CATGlobals(0LL);
  *(_OWORD *)(v0 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + sub_14C98(v0 + 16) = 0u;
  uint64_t v6 = CATGlobals.__allocating_init()();
  *(void *)(v0 + 208) = v6;
  static CATOption.defaultMode.getter();
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static CATResponse.executePattern(bundle:patternId:parameters:globals:callback:options:)[1]);
  *(void *)(v0 + sub_14C58(v0 + 216) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_2B954;
  return static CATResponse.executePattern(bundle:patternId:parameters:globals:callback:options:)( v2,  v4,  v3,  v5,  v6,  v0 + 16,  *(void *)(v0 + 200));
}

uint64_t sub_2B954(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 16;
  uint64_t v6 = *(void **)(*v2 + 208);
  uint64_t v5 = *(void *)(*v2 + 216);
  uint64_t v8 = *(void *)(*v2 + 192);
  uint64_t v7 = *(void *)(*v2 + 200);
  uint64_t v9 = *(void *)(*v2 + 184);
  *(void *)(v3 + 22_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a1;
  *(void *)(v3 + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v1;
  swift_task_dealloc(v5);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  sub_2BD38(v4);
  if (v1) {
    uint64_t v10 = sub_2BB84;
  }
  else {
    uint64_t v10 = sub_2B9F8;
  }
  return swift_task_switch(v10, 0LL, 0LL);
}

uint64_t sub_2B9F8()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = (void *)v0[17];
  static DialogPhase.completion.getter();
  OutputGenerationManifest.init(dialogPhase:_:)(v1, nullsub_1, 0LL);
  uint64_t v3 = swift_bridgeObjectRetain();
  OutputGenerationManifest.additionalCommands.setter(v3);
  uint64_t v4 = v2[6];
  uint64_t v5 = v2[7];
  sub_8734(v2 + 3, v4);
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[30] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_2BAB8;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0 + 7,  v0[28],  v0[22],  v4,  v5);
}

uint64_t sub_2BAB8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240LL);
  *(void *)(*(void *)v1 + 248LL) = v0;
  swift_task_dealloc(v2);
  return sub_887C();
}

uint64_t sub_2BB14()
{
  uint64_t v1 = *(void *)(v0 + 128);

  sub_88E8();
  sub_D99C((__int128 *)(v0 + 56), v1);
  *(_BYTE *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0;
  sub_2BFEC();
  sub_2C028();
  sub_88B8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2BB84(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 232);
  uint64_t v3 = *(void *)(v1 + 128);
  id v4 = *(id *)Log.health.unsafeMutableAddressor(a1);
  static os_log_type_t.debug.getter(v4);
  uint64_t v5 = sub_6358(&qword_8BE60);
  uint64_t v6 = (__n128 *)sub_27F64(v5);
  sub_2C014(v6, (__n128)xmmword_61030);
  uint64_t v7 = sub_2C030();
  unint64_t v9 = v8;
  v6[3].n128_u64[1] = (unint64_t)&type metadata for String;
  v6[4].n128_u64[0] = sub_64A0();
  v6[2].n128_u64[0] = v7;
  v6[2].n128_u64[1] = v9;
  sub_2BFFC((uint64_t)"Could not create output: %@", v10, v11, (uint64_t)&dword_0);
  swift_bridgeObjectRelease(v6);

  *(void *)uint64_t v3 = v2;
  *(_BYTE *)(v3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 1;
  sub_2BFEC();
  sub_2C028();
  sub_88B8();
  return sub_2BFD4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_2BC54()
{
  uint64_t v1 = sub_88E8();
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 128);
  id v4 = *(id *)Log.health.unsafeMutableAddressor(v1);
  static os_log_type_t.debug.getter(v4);
  uint64_t v5 = sub_6358(&qword_8BE60);
  uint64_t v6 = (__n128 *)sub_27F64(v5);
  sub_2C014(v6, (__n128)xmmword_61030);
  uint64_t v7 = sub_2C030();
  unint64_t v9 = v8;
  v6[3].n128_u64[1] = (unint64_t)&type metadata for String;
  v6[4].n128_u64[0] = sub_64A0();
  v6[2].n128_u64[0] = v7;
  v6[2].n128_u64[1] = v9;
  sub_2BFFC((uint64_t)"Could not create output: %@", v10, v11, (uint64_t)&dword_0);
  swift_bridgeObjectRelease(v6);

  *(void *)uint64_t v3 = v2;
  *(_BYTE *)(v3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 1;
  sub_2BFEC();
  sub_2C028();
  sub_88B8();
  return sub_2BFD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2BD38(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8DC28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t destroy for PatternParams(uint64_t a1)
{
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 24));
  return swift_bridgeObjectRelease(*(void *)(a1 + 64));
}

uint64_t initializeWithCopy for PatternParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + sub_14C98(v0 + 16) = v5;
  uint64_t v6 = a2 + 24;
  __int128 v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v8 = v7;
  unint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain(v4);
  id v10 = v5;
  v9(a1 + 24, v6, v8);
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v11;
  swift_bridgeObjectRetain(v11);
  return a1;
}

void *assignWithCopy for PatternParams(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = (void *)a2[2];
  uint64_t v6 = (void *)a1[2];
  a1[2] = v5;
  id v7 = v5;

  sub_720C(a1 + 3, a2 + 3);
  uint64_t v8 = a2[8];
  uint64_t v9 = a1[8];
  a1[8] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *initializeWithTake for PatternParams(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for PatternParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + sub_14C98(v0 + 16) = *(void *)(a2 + 16);

  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 24));
  *(_OWORD *)(a1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PatternParams(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 72))
    {
      LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PatternParams(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0u;
    *(_OWORD *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PatternParams()
{
  return &type metadata for PatternParams;
}

uint64_t sub_2BFD4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_2BFEC()
{
  return swift_task_dealloc(*(void *)(v0 + 200));
}

uint64_t sub_2BFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_log(_:dso:log:type:_:)(a1, 27LL, 2LL, a4, v4, v5, v6);
}

uint64_t sub_2C014(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return swift_getErrorValue(v2, v4, v3);
}

uint64_t sub_2C028()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_2C030()
{
  return Error.localizedDescription.getter(*(void *)(v0 + 104), *(void *)(v0 + 112));
}

uint64_t type metadata accessor for DialogCATWrapper(uint64_t a1)
{
  uint64_t result = qword_8DC30;
  if (!qword_8DC30) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DialogCATWrapper);
  }
  return result;
}

uint64_t sub_2C074(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_96F30);
}

uint64_t sub_2C0B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2C100(a1, a2, a3);
}

uint64_t sub_2C100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_6358((uint64_t *)&off_8C250);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_165E0(a1, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_2C200(a1);
  return v13;
}

uint64_t sub_2C200(uint64_t a1)
{
  uint64_t v2 = sub_6358((uint64_t *)&off_8C250);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_2C240(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_7F240, a1, a2, &unk_8BC58);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x14) {
    return 20LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_2C290(char a1)
{
  return *(void *)&aCaloriesbodyfa[8 * a1];
}

void sub_2C2B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_2C2BC()
{
}

uint64_t sub_2C2C4(uint64_t a1)
{
  return sub_B7C4(a1, *v1);
}

void sub_2C2CC(uint64_t a1)
{
}

uint64_t sub_2C2D4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_2C240(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_2C300@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2C290(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for HealthNoun(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xED)
  {
    if (a2 + 19 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 19) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 20;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for HealthNoun(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEC) {
    return ((uint64_t (*)(void))((char *)&loc_2C3FC + 4 * byte_633C5[v4]))();
  }
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_2C430 + 4 * byte_633C0[v4]))();
}

uint64_t sub_2C430(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2C438(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x2C440LL);
  }
  return result;
}

uint64_t sub_2C44C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x2C454LL);
  }
  *(_BYTE *)uint64_t result = a2 + 19;
  return result;
}

uint64_t sub_2C458(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2C460(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthNoun()
{
  return &type metadata for HealthNoun;
}

unint64_t sub_2C480()
{
  unint64_t result = qword_8DC80;
  if (!qword_8DC80)
  {
    unint64_t result = swift_getWitnessTable(&unk_63484, &type metadata for HealthNoun);
    atomic_store(result, (unint64_t *)&qword_8DC80);
  }

  return result;
}

uint64_t sub_2C4BC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_2C590();
  unint64_t v5 = sub_2C5CC();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v4, v5);
}

unint64_t sub_2C514()
{
  unint64_t result = qword_8DC88;
  if (!qword_8DC88)
  {
    unint64_t result = swift_getWitnessTable(&unk_633F4, &type metadata for HealthNoun);
    atomic_store(result, (unint64_t *)&qword_8DC88);
  }

  return result;
}

unint64_t sub_2C554()
{
  unint64_t result = qword_8DC90;
  if (!qword_8DC90)
  {
    unint64_t result = swift_getWitnessTable(&unk_634C4, &type metadata for HealthNoun);
    atomic_store(result, (unint64_t *)&qword_8DC90);
  }

  return result;
}

unint64_t sub_2C590()
{
  unint64_t result = qword_8DC98;
  if (!qword_8DC98)
  {
    unint64_t result = swift_getWitnessTable(&unk_63424, &type metadata for HealthNoun);
    atomic_store(result, (unint64_t *)&qword_8DC98);
  }

  return result;
}

unint64_t sub_2C5CC()
{
  unint64_t result = qword_8DCA0;
  if (!qword_8DCA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_6344C, &type metadata for HealthNoun);
    atomic_store(result, (unint64_t *)&qword_8DCA0);
  }

  return result;
}

uint64_t sub_2C608(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x4E74756F6B726F77LL;
  }
  else {
    return 0xD00000000000003DLL;
  }
}

uint64_t sub_2C64C()
{
  uint64_t v0 = Parse.DirectInvocation.identifier.getter();
  uint64_t v2 = v1;
  if (v0 == 0xD00000000000003DLL && v1 == 0x8000000000069D00LL)
  {
    uint64_t v3 = swift_bridgeObjectRelease(0x8000000000069D00LL);
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v1, 0xD00000000000003DLL, 0x8000000000069D00LL, 0LL);
    uint64_t v3 = swift_bridgeObjectRelease(v2);
    if ((v4 & 1) == 0)
    {
      uint64_t v9 = type metadata accessor for Parse.DirectInvocation(0LL);
      sub_2CB34(v9);
      return 0LL;
    }
  }

  uint64_t v5 = Parse.DirectInvocation.userData.getter(v3);
  if (!v5)
  {
    uint64_t v10 = type metadata accessor for Parse.DirectInvocation(0LL);
    sub_2CB34(v10);
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    goto LABEL_13;
  }

  uint64_t v6 = v5;
  sub_5B538(0x4E74756F6B726F77LL, 0xEB00000000656D61LL, v5, &v12);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = type metadata accessor for Parse.DirectInvocation(0LL);
  sub_2CB34(v7);
  if (!*((void *)&v13 + 1))
  {
LABEL_13:
    sub_2C7A0((uint64_t)&v12);
    return 0LL;
  }

  else {
    return 0LL;
  }
}

uint64_t sub_2C7A0(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8C600);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_2C7E0(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = sub_301E4();
  uint64_t v7 = sub_6358(&qword_8DCB0);
  uint64_t inited = swift_initStackObject(v7, v19);
  *(_OWORD *)(inited + sub_14C98(v0 + 16) = xmmword_61030;
  v18[0] = 0x4E74756F6B726F77LL;
  v18[1] = 0xEB00000000656D61LL;
  AnyHashable.init<A>(_:)(v18, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = sub_6358(&qword_8F3D0);
  *(void *)(inited + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = a3;
  swift_bridgeObjectRetain();
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_3028C(v9, v6);
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_8734(a1, v11);
  __int128 v13 = (void *)DeviceState.asInvocationContext.getter(v11, v12);
  id v14 = [v10 runSiriKitExecutorCommandWithContext:v13 payload:v6];

  id v15 = [v10 wrapCommandInStartLocalRequest:v14];
  uint64_t countAndFlagsBits = AceObject.serializeToBase64()().value._countAndFlagsBits;

  return countAndFlagsBits;
}

unint64_t sub_2C990()
{
  unint64_t result = qword_8DCA8;
  if (!qword_8DCA8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SKIDirectInvocationPayload);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_8DCA8);
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for WorkoutDiambiguationDirectInvocation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for WorkoutDiambiguationDirectInvocation(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for WorkoutDiambiguationDirectInvocation(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for WorkoutDiambiguationDirectInvocation(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for WorkoutDiambiguationDirectInvocation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkoutDiambiguationDirectInvocation(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkoutDiambiguationDirectInvocation( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + sub_14C98(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + sub_14C98(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for WorkoutDiambiguationDirectInvocation()
{
  return &type metadata for WorkoutDiambiguationDirectInvocation;
}

uint64_t sub_2CB34(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t type metadata accessor for WorkoutCancelCATPatternsExecutor(uint64_t a1)
{
  return sub_2DA24(a1, (uint64_t *)&unk_8DCB8, (uint64_t)&nominal type descriptor for WorkoutCancelCATPatternsExecutor);
}

uint64_t sub_2CB5C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_96F40);
}

uint64_t sub_2CB98()
{
  uint64_t v1 = sub_6358(&qword_8C260);
  uint64_t v2 = sub_65A4(v1, 464LL);
  *(_OWORD *)(v2 + sub_14C98(v0 + 16) = xmmword_63680;
  *(void *)(v2 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x6E69577473726966LL;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xEF657A6953776F64LL;
  sub_2EB94(v0, (uint64_t)v17);
  sub_2EB94((uint64_t)v17, (uint64_t)&v18);
  if ((v19 & 1) != 0)
  {
    unint64_t v3 = 0LL;
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0LL;
    uint64_t v4 = 0LL;
  }

  else
  {
    unint64_t v3 = &type metadata for Double;
    uint64_t v4 = v18;
  }

  *(void *)(v2 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v3;
  strcpy((char *)(v2 + 80), "isConclusion");
  *(_BYTE *)(v2 + 93) = 0;
  *(_WORD *)(v2 + 9_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = -5120;
  *(_BYTE *)(v2 + 96) = *(_BYTE *)(v0 + 9);
  *(void *)(v2 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = &type metadata for Bool;
  strcpy((char *)(v2 + 128), "isFirstWindow");
  *(_WORD *)(v2 + 14_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -4864;
  *(_BYTE *)(v2 + sub_14C98(v0 + 144) = *(_BYTE *)(v0 + 10);
  *(void *)(v2 + 168) = &type metadata for Bool;
  strcpy((char *)(v2 + 176), "isLastWindow");
  *(_BYTE *)(v2 + 18sub_1F08C(v0 + 9) = 0;
  *(_WORD *)(v2 + 19_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = -5120;
  *(_BYTE *)(v2 + 19_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_BYTE *)(v0 + 11);
  *(void *)(v2 + sub_14C58(v0 + 216) = &type metadata for Bool;
  *(void *)(v2 + 22_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0xD000000000000016LL;
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x8000000000069E40LL;
  *(_BYTE *)(v2 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_BYTE *)(v0 + 12);
  *(void *)(v2 + 26_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = &type metadata for Bool;
  *(void *)(v2 + 27_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x736D657469LL;
  *(void *)(v2 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xE500000000000000LL;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = sub_6358(&qword_8DEF8);
  *(void *)(v2 + 2(*(void (**)(uint64_t))(v0 + 176))(v0 + 88) = v5;
  *(void *)(v2 + 31_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v6;
  *(void *)(v2 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xD000000000000013LL;
  *(void *)(v2 + 328) = 0x8000000000069E60LL;
  sub_2EB94(v0 + 24, (uint64_t)v16);
  sub_2EB94((uint64_t)v16, (uint64_t)&v20);
  if ((v21 & 1) != 0)
  {
    uint64_t v7 = 0LL;
    *(void *)(v2 + 34_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0LL;
    *(void *)(v2 + 35_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v7 = &type metadata for Double;
    uint64_t v8 = v20;
  }

  *(void *)(v2 + 336) = v8;
  *(void *)(v2 + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v7;
  *(void *)(v2 + 368) = 0x6574496C61746F74LL;
  *(void *)(v2 + 376) = 0xEA0000000000736DLL;
  sub_2EB94(v0 + 40, (uint64_t)v15);
  sub_2EB94((uint64_t)v15, (uint64_t)&v22);
  if ((v23 & 1) != 0)
  {
    uint64_t v9 = 0LL;
    *(void *)(v2 + 39_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
    *(void *)(v2 + 40_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0LL;
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v9 = &type metadata for Double;
    uint64_t v10 = v22;
  }

  *(void *)(v2 + 38_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v10;
  *(void *)(v2 + 408) = v9;
  *(void *)(v2 + 4sub_14C98(v0 + 16) = 0x6953776F646E6977LL;
  *(void *)(v2 + 42_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0xEA0000000000657ALL;
  sub_2EB94(v0 + 56, (uint64_t)v14);
  sub_2EB94((uint64_t)v14, (uint64_t)&v24);
  if ((v25 & 1) != 0)
  {
    uint64_t v11 = 0LL;
    *(void *)(v2 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0LL;
    *(void *)(v2 + 448) = 0LL;
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v11 = &type metadata for Double;
    uint64_t v12 = v24;
  }

  *(void *)(v2 + 43_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v12;
  *(void *)(v2 + 456) = v11;
  sub_2EBDC(v0);
  return v2;
}

void sub_2CE54()
{
  uint64_t v4 = sub_6358(&qword_8C260);
  uint64_t v5 = (__n128 *)sub_65A4(v4, 176LL);
  sub_2EC14(v5, (__n128)xmmword_63690);
  uint64_t v6 = sub_2EC7C();
  sub_2ED24(v6);
  if (v7)
  {
    sub_10004(v1, &qword_8C258);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }

  else
  {
    uint64_t v8 = sub_2ED5C();
    sub_2ECE8((uint64_t)v8, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_8C250 + 4));
  }

  v5[5].n128_u64[0] = 0x656369766564LL;
  v5[5].n128_u64[1] = 0xE600000000000000LL;
  uint64_t v9 = type metadata accessor for WorkoutCancelErrorWithCodeParameters(0LL);
  unint64_t v10 = *(void *)(v0 + *(int *)(v9 + 20));
  if (v10)
  {
    uint64_t v11 = type metadata accessor for SirikitDeviceState(0LL);
    unint64_t v12 = v10;
  }

  else
  {
    unint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    v5[6].n128_u64[1] = 0LL;
    v5[7].n128_u64[0] = 0LL;
  }

  v5[6].n128_u64[0] = v12;
  v5[7].n128_u64[1] = v11;
  v5[8].n128_u64[0] = 0x646F43726F727265LL;
  v5[8].n128_u64[1] = 0xE900000000000065LL;
  uint64_t v13 = v0 + *(int *)(v9 + 24);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    id v14 = 0LL;
    v5[9].n128_u64[1] = 0LL;
    v5[10].n128_u64[0] = 0LL;
    unint64_t v15 = 0LL;
  }

  else
  {
    unint64_t v15 = *(void *)v13;
    id v14 = &type metadata for Double;
  }

  v5[9].n128_u64[0] = v15;
  v5[10].n128_u64[1] = (unint64_t)v14;
  swift_retain(v10);
  sub_2EC84();
}

void sub_2CF9C()
{
  uint64_t v1 = v0;
  sub_2ED48();
  sub_6C04();
  __chkstk_darwin(v2);
  sub_6BD8();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = sub_6358(&qword_8C260);
  uint64_t v7 = sub_65A4(v6, 80LL);
  *(_OWORD *)(v7 + sub_14C98(v0 + 16) = xmmword_61030;
  uint64_t v8 = (void *)(v7 + 48);
  *(void *)(v7 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x656D614E707061LL;
  *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xE700000000000000LL;
  sub_2D9BC(v1, v5, &qword_8C258);
  uint64_t v9 = sub_2EC7C();
  if (sub_63E0(v5, 1LL, v9) == 1)
  {
    sub_10004(v5, &qword_8C258);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
  }

  else
  {
    *(void *)(v7 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v9;
    unint64_t v10 = sub_6B9C(v8);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v10, v5, v9);
  }

  sub_2EC84();
}

void sub_2D098()
{
  uint64_t v4 = sub_6358(&qword_8C260);
  uint64_t v5 = (__n128 *)sub_65A4(v4, 176LL);
  sub_2EC14(v5, (__n128)xmmword_63690);
  uint64_t v6 = sub_2EC7C();
  sub_2ED24(v6);
  if (v7)
  {
    sub_10004(v1, &qword_8C258);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }

  else
  {
    uint64_t v8 = sub_2ED5C();
    sub_2ECE8((uint64_t)v8, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_8C250 + 4));
  }

  v5[5].n128_u64[0] = 0x5074737269467369LL;
  v5[5].n128_u64[1] = 0xEF70704179747261LL;
  uint64_t v9 = type metadata accessor for WorkoutCancelIntentHandledResponseParameters(0LL);
  v5[6].n128_u8[0] = *(_BYTE *)(v0 + *(int *)(v9 + 20));
  v5[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  strcpy((char *)&v5[8], "isPunchingOut");
  v5[8].n128_u16[7] = -4864;
  unsigned __int8 v10 = *(_BYTE *)(v0 + *(int *)(v9 + 24));
  v5[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[9].n128_u8[0] = v10;
  sub_2EC84();
}

uint64_t sub_2D1B0(char a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + (*(void (**)(uint64_t))(v0 + 176))(v0 + 88) = a5;
  *(void *)(v6 + 96) = a6;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a4;
  *(_BYTE *)(v6 + 83) = a3;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2;
  *(_BYTE *)(v6 + 81) = a1;
  sub_8910();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_2D1DC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  char v2 = *(_BYTE *)(v0 + 84);
  char v3 = *(_BYTE *)(v0 + 83);
  char v4 = *(_BYTE *)(v0 + 82);
  char v5 = *(_BYTE *)(v0 + 81);
  *(void *)(v0 + sub_14C98(v0 + 16) = 0LL;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(_BYTE *)(v0 + 25) = v5;
  *(_BYTE *)(v0 + 26) = v4;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7) = v3;
  *(_BYTE *)(v0 + 28) = v2;
  *(void *)(v0 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v1;
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0LL;
  *(_BYTE *)(v0 + 48) = 1;
  *(void *)(v0 + 56) = 0LL;
  *(_BYTE *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(void *)(v0 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
  *(_BYTE *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 1;
  *(void *)(v0 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_2CB98();
  uint64_t v6 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_2D284;
  unint64_t v7 = sub_2ED08();
  return sub_2ECB0(v7, v8, v9, v11);
}

uint64_t sub_2D284(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 112);
  uint64_t v5 = *v2;
  *(void *)(v5 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_8910();
    return swift_task_switch(v6, v7, v8);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v5 + 104));
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }

uint64_t sub_2D308()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2D334(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for WorkoutCancelErrorWithCodeParameters(0LL);
  v3[5] = v4;
  v3[6] = sub_2EC44(v4);
  sub_8910();
  return sub_887C();
}

uint64_t sub_2D378()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  char v3 = (void (*)(uint64_t))v0[2];
  uint64_t v4 = sub_2EC7C();
  sub_8760(v1, 1LL, 1LL, v4);
  *(void *)(v1 + *(int *)(v2 + 20)) = 0LL;
  uint64_t v5 = v1 + *(int *)(v2 + 24);
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  v3(v1);
  sub_2CE54();
  uint64_t v7 = v6;
  v0[7] = v6;
  uint64_t v8 = (void *)sub_2ECD4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_2D444;
  return v10(0xD00000000000001BLL, 0x8000000000069DF0LL, v7);
}

uint64_t sub_2D444()
{
  if (!v1) {
    *(void *)(v2 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_2D48C(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_2D4C8(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_2D500(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for WorkoutCancelUnsupportedSlotValueParameters(0LL);
  v3[5] = sub_2EC44(v4);
  sub_8910();
  return sub_887C();
}

uint64_t sub_2D540()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void (*)(uint64_t))v0[2];
  uint64_t v3 = sub_2EC7C();
  sub_2ECF4(v3);
  v2(v1);
  sub_2CF9C();
  uint64_t v5 = v4;
  v0[6] = v4;
  uint64_t v6 = (void *)sub_2ECD4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_2D5D0;
  return sub_2ECB0(0xD000000000000022LL, 0x8000000000069DC0LL, v5, v8);
}

uint64_t sub_2D5D0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 56);
  *(void *)(*v2 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v1;
  swift_task_dealloc(v5);
  sub_17C4C();
  if (!v1) {
    *(void *)(v4 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a1;
  }
  sub_8910();
  return sub_2EC04(v6, v7, v8);
}

uint64_t sub_2D638(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 72), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_2D674(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_2D6AC(char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a4;
  *(void *)(v5 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v4;
  *(void *)(v5 + sub_14C98(v0 + 16) = a3;
  *(_BYTE *)(v5 + 8sub_1F08C(v0 + 9) = a2;
  *(_BYTE *)(v5 + (*(void (**)(uint64_t))(v0 + 176))(v0 + 88) = a1;
  uint64_t v6 = type metadata accessor for WorkoutCancelIntentHandledResponseParameters(0LL);
  *(void *)(v5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v6;
  *(void *)(v5 + 48) = sub_2EC44(v6);
  sub_8910();
  return sub_887C();
}

uint64_t sub_2D6F8()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(_BYTE *)(v0 + 89);
  char v5 = *(_BYTE *)(v0 + 88);
  uint64_t v6 = sub_2EC7C();
  sub_2ECF4(v6);
  *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v5;
  *(_BYTE *)(v1 + *(int *)(v2 + swift_release(*(void *)(v0 + 24)) = v4;
  v3(v1);
  sub_2D098();
  *(void *)(v0 + 56) = v7;
  uint64_t v8 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_2D7A0;
  unint64_t v9 = sub_2ED08();
  return v11(v9);
}

uint64_t sub_2D7A0()
{
  if (!v1) {
    *(void *)(v2 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_2D7E8(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_2D824(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_2D85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2D8AC(a1, a2, a3);
}

uint64_t sub_2D8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_6BD8();
  uint64_t v10 = v9 - v8;
  sub_6358((uint64_t *)&off_8C250);
  sub_6C04();
  __chkstk_darwin(v11);
  sub_6BD8();
  uint64_t v14 = v13 - v12;
  sub_2D9BC(a1, v13 - v12, (uint64_t *)&off_8C250);
  sub_2ECE8(v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  uint64_t v15 = CATWrapper.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_10004(a1, (uint64_t *)&off_8C250);
  return v15;
}

uint64_t sub_2D9A0()
{
  return type metadata accessor for WorkoutCancelCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for WorkoutCancelIntentHandledResponseParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_8DEA8, (uint64_t)&nominal type descriptor for WorkoutCancelIntentHandledResponseParameters);
}

void sub_2D9BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_6358(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_6590();
}

uint64_t type metadata accessor for WorkoutCancelUnsupportedSlotValueParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_8DE18, (uint64_t)&nominal type descriptor for WorkoutCancelUnsupportedSlotValueParameters);
}

uint64_t type metadata accessor for WorkoutCancelErrorWithCodeParameters(uint64_t a1)
{
  return sub_2DA24( a1,  (uint64_t *)&unk_8DD78,  (uint64_t)&nominal type descriptor for WorkoutCancelErrorWithCodeParameters);
}

uint64_t sub_2DA24(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t *sub_2DA54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (sub_63E0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_6358(&qword_8C258);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      sub_8760((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v9;
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
  }

  swift_retain(v9);
  return a1;
}

uint64_t sub_2DB44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  return swift_release(*(void *)(a1 + *(int *)(a2 + 20)));
}

char *sub_2DBA8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_8760((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = *(void *)&a2[v8];
  *(void *)&a1[v8] = v10;
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  swift_retain(v10);
  return a1;
}

char *sub_2DC70(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_63E0((uint64_t)a1, 1LL, v6);
  int v8 = sub_63E0((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  sub_8760((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = *(void *)&a1[v11];
  uint64_t v13 = *(void *)&a2[v11];
  *(void *)&a1[v11] = v13;
  swift_retain(v13);
  swift_release(v12);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = *(void *)v16;
  v15[8] = v16[8];
  *(void *)uint64_t v15 = v17;
  return a1;
}

char *sub_2DD98(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_8760((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)uint64_t v9 = *(void *)v10;
  v9[8] = v10[8];
  return a1;
}

char *sub_2DE5C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_63E0((uint64_t)a1, 1LL, v6);
  int v8 = sub_63E0((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  sub_8760((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = *(void *)&a1[v11];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  swift_release(v12);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t sub_2DF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2DF88);
}

void sub_2DF88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_2ECBC(a1, a2, v4);
  }
  else {
    sub_11120();
  }
}

uint64_t sub_2E000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2E00C);
}

void sub_2E00C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(sub_6358(&qword_8C258) - 8) + 84LL) == a3)
  {
    uint64_t v8 = sub_2EC94();
    sub_2ECC8(v8, v9, v10, v11);
  }

  else
  {
    *(void *)(v5 + *(int *)(a4 + 20)) = v4;
    sub_11120();
  }

void sub_2E064(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_2E078(uint64_t a1)
{
  if (!qword_8DD88)
  {
    uint64_t v2 = type metadata accessor for SpeakableString(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_8DD88);
    }
  }

uint64_t *sub_2E0CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(sub_6358(&qword_8C258) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v7);
  }

  else
  {
    uint64_t v6 = type metadata accessor for SpeakableString(0LL);
    if (sub_63E0((uint64_t)a2, 1LL, v6))
    {
      memcpy(a1, a2, *(void *)(v4 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      sub_8760((uint64_t)a1, 0LL, 1LL, v6);
    }
  }

  return a1;
}

void *sub_2E194(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v4))
  {
    uint64_t v5 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
    sub_8760((uint64_t)a1, 0LL, 1LL, v4);
  }

  return a1;
}

void *sub_2E230(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  int v5 = sub_63E0((uint64_t)a1, 1LL, v4);
  int v6 = sub_63E0((uint64_t)a2, 1LL, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 24))(a1, a2, v4);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }

  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  sub_8760((uint64_t)a1, 0LL, 1LL, v4);
  return a1;
}

void *sub_2E314(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v4))
  {
    uint64_t v5 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
    sub_8760((uint64_t)a1, 0LL, 1LL, v4);
  }

  return a1;
}

void *sub_2E3B0(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  int v5 = sub_63E0((uint64_t)a1, 1LL, v4);
  int v6 = sub_63E0((uint64_t)a2, 1LL, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 40))(a1, a2, v4);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }

  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  sub_8760((uint64_t)a1, 0LL, 1LL, v4);
  return a1;
}

uint64_t sub_2E494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2E4A0);
}

uint64_t sub_2E4A0()
{
  uint64_t v2 = sub_6358(&qword_8C258);
  return sub_63E0(v1, v0, v2);
}

uint64_t sub_2E4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2E4E0);
}

uint64_t sub_2E4E0()
{
  uint64_t v0 = sub_2EC94();
  return sub_8760(v0, v1, v2, v3);
}

void sub_2E50C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
  }

uint64_t *sub_2E574(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (sub_63E0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_6358(&qword_8C258);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      sub_8760((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *((_BYTE *)a2 + v10);
  }

  return a1;
}

uint64_t sub_2E654(uint64_t a1)
{
  uint64_t v2 = sub_2EC7C();
  uint64_t result = sub_63E0(a1, 1LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  }
  return result;
}

void *sub_2E6A8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_8760((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  return a1;
}

void *sub_2E75C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_63E0((uint64_t)a1, 1LL, v6);
  int v8 = sub_63E0((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  sub_8760((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_2E864(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_8760((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  return a1;
}

void *sub_2E918(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_63E0((uint64_t)a1, 1LL, v6);
  int v8 = sub_63E0((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  sub_8760((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  return a1;
}

uint64_t sub_2EA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2EA28);
}

void sub_2EA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_2ECBC(a1, a2, v4);
  }
  else {
    sub_11120();
  }
}

uint64_t sub_2EAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2EAB0);
}

void sub_2EAB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(sub_6358(&qword_8C258) - 8) + 84LL) == a3)
  {
    uint64_t v8 = sub_2EC94();
    sub_2ECC8(v8, v9, v10, v11);
  }

  else
  {
    *(_BYTE *)(v5 + *(int *)(a4 + 20)) = v4 + 1;
    sub_11120();
  }

void sub_2EB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_2EB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (v9 <= 0x3F)
  {
    v10[0] = *(void *)(v8 - 8) + 64LL;
    v10[1] = a4;
    __int128 v10[2] = a5;
    swift_initStructMetadata(a1, 256LL, 3LL, v10, a1 + 16);
  }

uint64_t sub_2EB94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8DEF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_2EBDC(uint64_t a1)
{
  return a1;
}

uint64_t sub_2EC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void sub_2EC14(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x656D614E707061LL;
  a1[2].n128_u64[1] = 0xE700000000000000LL;
  sub_2D9BC(v2, v3, v4);
}

uint64_t sub_2EC44(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_2EC58()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_2EC7C()
{
  return type metadata accessor for SpeakableString(0LL);
}

  ;
}

uint64_t sub_2EC94()
{
  return v0;
}

void sub_2ECA8(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_2ECB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_2ECBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_63E0(a1, a2, a3);
}

uint64_t sub_2ECC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8760(a1, a2, a3, a4);
}

uint64_t sub_2ECD4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_2ECE8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_2ECF4(uint64_t a1)
{
  return sub_8760(v1, 1LL, 1LL, a1);
}

unint64_t sub_2ED08()
{
  return 0xD000000000000023LL;
}

uint64_t sub_2ED24(uint64_t a1)
{
  return sub_63E0(v1, 1LL, a1);
}

uint64_t sub_2ED48()
{
  return sub_6358(v0);
}

  ;
}

void *sub_2ED5C()
{
  *(void *)(v0 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v2;
  return sub_6B9C(v1);
}

uint64_t sub_2ED68@<X0>(void *a1@<X8>)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*v1);
  id v4 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  uint64_t v5 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = ResponseFactory.init()();
  a1[6] = v5;
  a1[7] = &protocol witness table for ResponseFactory;
  a1[3] = v6;
  uint64_t result = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  *a1 = 0xD000000000000012LL;
  a1[1] = 0x80000000000693C0LL;
  a1[2] = v4;
  a1[8] = result;
  return result;
}

uint64_t type metadata accessor for EndWorkoutContinueInAppStrategy(uint64_t a1)
{
  uint64_t result = qword_8DF28;
  if (!qword_8DF28) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EndWorkoutContinueInAppStrategy);
  }
  return result;
}

void *sub_2EE74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v21 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    uint64_t v6 = 4LL;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
         : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1LL)) {
        break;
      }
      uint64_t v20 = v7;
      sub_2F394(&v20, &v19);
      if (v3)
      {
        swift_bridgeObjectRelease(a1);

        uint64_t v15 = (void *)v21;
        swift_release(a2);
        swift_bridgeObjectRelease(v15);
        return v15;
      }

      uint64_t v11 = v19;
      if (v19)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        unint64_t v13 = *(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v12 = *(void *)((char *)&dword_18 + (v21 & 0xFFFFFFFFFFFFFF8LL));
        if (v13 >= v12 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1LL);
        }
        uint64_t v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        specialized Array._endMutation()(v14);
      }

      ++v6;
      if (v9 == v5)
      {
        swift_bridgeObjectRelease(a1);
        uint64_t v15 = (void *)v21;
        goto LABEL_22;
      }
    }

    __break(1u);
LABEL_17:
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRelease(a1);
  uint64_t v15 = _swiftEmptyArrayStorage;
LABEL_22:
  swift_release(a2);
  return v15;
}

void *sub_2F024(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_6358(&qword_8E0A0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)v40 - v12;
  id v14 = [objc_allocWithZone(INFERENCESchemaINFERENCEWorkoutsAppSelectionGroundTruthGenerated) init];
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = [objc_allocWithZone(INFERENCESchemaINFERENCEWorkoutsAppSelectionTrainingIndependentSignals) init];
    if (v16)
    {
      uint64_t v17 = v16;
      [v15 setInferenceWorkoutsAppSelectionTrainingIndependentSignals:v16];
      v40[3] = v2;
      uint64_t v18 = type metadata accessor for WorkoutsSignalValuesProcessor();
      unint64_t v19 = sub_2F694();
      uint64_t v20 = (void *)SELFMessageBuilding.populateCommonIndependent(from:)(a1, v18, v19);
      [v17 setCommonIndependent:v20];

      id v21 = [v17 commonIndependent];
      if (v21)
      {
        uint64_t v22 = v21;
        [v21 setAppResolutionType:*(unsigned int *)(v2 + 16)];
      }
    }

    else
    {
      uint64_t v28 = Logger.health.unsafeMutableAddressor(0LL);
      sub_2F884(v28);
      uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v28, v7);
      uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v31 = static os_log_type_t.error.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)sub_2F894();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl(&dword_0, v30, v31, "WorkoutMessageBuilder: No independent values", v32, 2u);
        sub_8870((uint64_t)v32);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }

    v40[2] = v2;
    uint64_t v33 = enum case for DomainUseCase.startWorkout(_:);
    uint64_t v34 = type metadata accessor for DomainUseCase(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104LL))(v6, v33, v34);
    sub_8760((uint64_t)v6, 0LL, 1LL, v34);
    uint64_t v35 = type metadata accessor for WorkoutsSignalValuesProcessor();
    unint64_t v36 = sub_2F694();
    uint64_t v37 = SELFMessageBuilding.populateCommonDependents(from:domainUseCase:)(a1, v6, v35, v36);
    sub_2F6D0((uint64_t)v6);
    swift_retain(v2);
    uint64_t v38 = sub_2EE74(v37, v2);
    swift_bridgeObjectRelease(v37);
    sub_2F710((uint64_t)v38, v15);
  }

  else
  {
    uint64_t v23 = Logger.health.unsafeMutableAddressor(0LL);
    sub_2F884(v23);
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v23, v7);
    char v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)sub_2F894();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_0, v25, v26, "WorkoutMessageBuilder: Could not create Message class.", v27, 2u);
      sub_8870((uint64_t)v27);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return 0LL;
  }

  return v15;
}

id sub_2F394@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *a1;
  id v9 = [objc_allocWithZone(INFERENCESchemaINFERENCEWorkoutsAppSelectionTrainingDependentSignals) init];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = sub_2F7AC(v8);
    uint64_t v13 = v12;
    uint64_t v14 = App.appIdentifier.getter(v11);
    uint64_t v16 = v15;
    if (v13)
    {
      if (!v15)
      {
        char v18 = 0;
LABEL_17:
        swift_bridgeObjectRelease(v13);
LABEL_18:
        [v8 setIsResolvedApp:v18 & 1];
        uint64_t v25 = sub_2F7AC(v8);
        if (v26)
        {
          uint64_t v27 = v26;
          v33[0] = v25;
          v33[1] = v26;
          v32[0] = 0x6C7070612E6D6F63LL;
          v32[1] = 0xE900000000000065LL;
          unint64_t v28 = sub_2F80C();
          unint64_t v29 = sub_2F848();
          char v30 = BidirectionalCollection<>.starts<A>(with:)( v32,  &type metadata for String,  &type metadata for String,  v28,  v29);
          swift_bridgeObjectRelease(v27);
        }

        else
        {
          char v30 = 0;
        }

        [v8 setIsFirstPartyBundle:v30 & 1];
        id result = [v10 setCommonDependent:v8];
        goto LABEL_22;
      }

      if (v11 == v14 && v13 == v15)
      {
        swift_bridgeObjectRelease(v13);
        char v18 = 1;
      }

      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0LL);
        swift_bridgeObjectRelease(v13);
      }
    }

    else
    {
      if (!v15)
      {
        char v18 = 1;
        goto LABEL_18;
      }

      char v18 = 0;
    }

    uint64_t v13 = v16;
    goto LABEL_17;
  }

  uint64_t v19 = Logger.health.unsafeMutableAddressor(0LL);
  swift_beginAccess(v19, v33, 0LL, 0LL);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v19, v4);
  id v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_0, v21, v22, "WorkoutMessageBuilder: Could not create DependentSignals Message.", v23, 2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  id result = (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v10 = 0LL;
LABEL_22:
  *a2 = v10;
  return result;
}

uint64_t sub_2F628()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for WorkoutsSignalValuesProcessor()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin29WorkoutsSignalValuesProcessor);
}

void *sub_2F66C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = sub_2F024(a1);
  *a2 = result;
  return result;
}

unint64_t sub_2F694()
{
  unint64_t result = qword_8E0A8;
  if (!qword_8E0A8)
  {
    uint64_t v1 = type metadata accessor for WorkoutsSignalValuesProcessor();
    unint64_t result = swift_getWitnessTable(&unk_638B0, v1);
    atomic_store(result, (unint64_t *)&qword_8E0A8);
  }

  return result;
}

uint64_t sub_2F6D0(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8E0A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_2F710(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setInferenceWorkoutsAppSelectionTrainingDependentSignals:isa];
}

unint64_t sub_2F770()
{
  unint64_t result = qword_8E0B0;
  if (!qword_8E0B0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INFERENCESchemaINFERENCEWorkoutsAppSelectionTrainingDependentSignals);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_8E0B0);
  }

  return result;
}

uint64_t sub_2F7AC(void *a1)
{
  id v1 = [a1 appBundleId];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

unint64_t sub_2F80C()
{
  unint64_t result = qword_8E0B8;
  if (!qword_8E0B8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_8E0B8);
  }

  return result;
}

unint64_t sub_2F848()
{
  unint64_t result = qword_8E0C0;
  if (!qword_8E0C0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_8E0C0);
  }

  return result;
}

uint64_t sub_2F884(uint64_t a1)
{
  return swift_beginAccess(a1, v1 - 104, 0LL, 0LL);
}

uint64_t sub_2F894()
{
  return swift_slowAlloc(2LL, -1LL);
}

uint64_t type metadata accessor for HealthLabelsCATs(uint64_t a1)
{
  uint64_t result = qword_8E0C8;
  if (!qword_8E0C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthLabelsCATs);
  }
  return result;
}

uint64_t sub_2F8D8(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_96F50);
}

uint64_t sub_2F914()
{
  return type metadata accessor for HealthLabelsCATs(0LL);
}

uint64_t sub_2F91C()
{
  if (qword_8BB90 != -1) {
    swift_once(&qword_8BB90, sub_2FCC8);
  }
  return swift_retain(qword_8E120);
}

uint64_t sub_2F95C()
{
  uint64_t v0 = type metadata accessor for AppOntologyNode(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t result = AppOntologyNode.init(name:multicardinal:)(7368801LL, 0xE300000000000000LL, 0LL);
  qword_96F60 = result;
  return result;
}

uint64_t sub_2F9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_2F9E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NLIntent(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_2FA18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_2FA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_2FAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_2FAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_2FB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2FB34);
}

uint64_t sub_2FB34()
{
  uint64_t v2 = sub_2FEE8();
  return sub_63E0(v1, v0, v2);
}

uint64_t sub_2FB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2FB68);
}

uint64_t sub_2FB68()
{
  uint64_t v2 = sub_2FEE8();
  return sub_8760(v1, v0, v0, v2);
}

uint64_t type metadata accessor for DisambiguateAppNLIntent(uint64_t a1)
{
  uint64_t result = qword_8E180;
  if (!qword_8E180) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DisambiguateAppNLIntent);
  }
  return result;
}

uint64_t sub_2FBCC(uint64_t a1)
{
  uint64_t result = type metadata accessor for NLIntent(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_2FC34()
{
  uint64_t v0 = sub_6358(&qword_8E1C8);
  uint64_t v1 = swift_allocObject(v0, 72LL, 7LL);
  *(_OWORD *)(v1 + sub_14C98(v0 + 16) = xmmword_61030;
  if (qword_8BB80 != -1) {
    swift_once(&qword_8BB80, sub_2F95C);
  }
  uint64_t v2 = qword_96F60;
  *(void *)(v1 + 56) = type metadata accessor for AppOntologyNode(0LL);
  *(void *)(v1 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v2;
  qword_8E118 = v1;
  return swift_retain(v2);
}

uint64_t sub_2FCC8()
{
  if (qword_8BB88 != -1) {
    swift_once(&qword_8BB88, sub_2FC34);
  }
  uint64_t v0 = qword_8E118;
  uint64_t v1 = type metadata accessor for DomainOntologyNode(0LL);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_bridgeObjectRetain();
  uint64_t result = DomainOntologyNode.init(name:childNodes:isInEventTree:)(0x636E75614C707061LL, 0xE900000000000068LL, v0, 0LL);
  qword_8E120 = result;
  return result;
}

uint64_t sub_2FD5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NLIntent(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t sub_2FD94()
{
  return sub_2F91C();
}

uint64_t sub_2FDA8(uint64_t a1)
{
  uint64_t v2 = sub_2FEA8(&qword_8E1C0, (uint64_t)&unk_639A0);
  return NLIntentWrapper.traversableIntentNode.getter(a1, v2);
}

uint64_t sub_2FDF0(uint64_t a1)
{
  uint64_t v2 = sub_2FEA8(&qword_8E1C0, (uint64_t)&unk_639A0);
  return NLIntentWrapper.traversableOntologyNode.getter(a1, v2);
}

uint64_t sub_2FE28(uint64_t a1)
{
  uint64_t v2 = sub_2FEA8(&qword_8E1C0, (uint64_t)&unk_639A0);
  return NLIntentWrapper.description.getter(a1, v2);
}

uint64_t sub_2FE60()
{
  return sub_2FEA8(&qword_8C910, (uint64_t)&unk_639E0);
}

uint64_t sub_2FE84()
{
  return sub_2FEA8(&qword_8E1B8, (uint64_t)&unk_63978);
}

uint64_t sub_2FEA8(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for DisambiguateAppNLIntent(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_2FEE8()
{
  return type metadata accessor for NLIntent(0LL);
}

uint64_t sub_2FEF8()
{
  uint64_t v0 = Parse.DirectInvocation.identifier.getter();
  if (v0 == 0xD000000000000039LL && v1 == 0x8000000000069F60LL)
  {
    uint64_t v2 = swift_bridgeObjectRelease(0x8000000000069F60LL);
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v1, 0xD000000000000039LL, 0x8000000000069F60LL, 0LL);
    uint64_t v2 = sub_C090();
    if ((v3 & 1) == 0)
    {
      uint64_t v7 = type metadata accessor for Parse.DirectInvocation(0LL);
      sub_2CB34(v7);
      return 0LL;
    }
  }

  uint64_t v4 = Parse.DirectInvocation.userData.getter(v2);
  if (!v4)
  {
    uint64_t v8 = type metadata accessor for Parse.DirectInvocation(0LL);
    sub_2CB34(v8);
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    goto LABEL_13;
  }

  sub_5B538(0x6449656C646E7562LL, 0xE800000000000000LL, v4, &v10);
  sub_C090();
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation(0LL);
  sub_2CB34(v5);
  if (!*((void *)&v11 + 1))
  {
LABEL_13:
    sub_2C7A0((uint64_t)&v10);
    return 0LL;
  }

  else {
    return 0LL;
  }
}

uint64_t sub_3003C(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = sub_301E4();
  uint64_t v7 = sub_6358(&qword_8DCB0);
  uint64_t inited = swift_initStackObject(v7, v19);
  *(_OWORD *)(inited + sub_14C98(v0 + 16) = xmmword_61030;
  v18[0] = 0x6449656C646E7562LL;
  v18[1] = 0xE800000000000000LL;
  AnyHashable.init<A>(_:)(v18, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = sub_6358(&qword_8F3D0);
  *(void *)(inited + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = a3;
  swift_bridgeObjectRetain();
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_3028C(v9, v6);
  __int128 v10 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_8734(a1, v11);
  uint64_t v13 = (void *)DeviceState.asInvocationContext.getter(v11, v12);
  id v14 = [v10 runSiriKitExecutorCommandWithContext:v13 payload:v6];

  id v15 = [v10 wrapCommandInStartLocalRequest:v14];
  uint64_t countAndFlagsBits = AceObject.serializeToBase64()().value._countAndFlagsBits;

  return countAndFlagsBits;
}

id sub_301E4()
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  NSString v2 = String._bridgeToObjectiveC()();
  sub_C090();
  id v3 = [v1 initWithIdentifier:v2];

  return v3;
}

uint64_t sub_30250(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6449656C646E7562LL;
  }
  else {
    return 0xD000000000000039LL;
  }
}

void sub_3028C(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setUserData:isa];
}

uint64_t sub_302F8()
{
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  sub_8734(v3, v4);
  if ((dispatch thunk of DeviceState.isWatch.getter(v4, v5) & 1) != 0) {
    return sub_30380();
  }
  else {
    return sub_304F8(v2, v1, v0);
  }
}

uint64_t sub_30380()
{
  if (v3 >> 62)
  {
    if (v2 < 0) {
      uint64_t v17 = v2;
    }
    else {
      uint64_t v17 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v5 = &_swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_11;
  }
  v18[0] = &_swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v4);
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v7 = 0LL;
    do
    {
      if ((v2 & 0xC000000000000001LL) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v2);
      }
      else {
        id v8 = *(id *)(v2 + 8 * v7 + 32);
      }
      uint64_t v9 = v8;
      ++v7;
      uint64_t v10 = sub_306E8(v8, v1, v0);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v11 = *(void *)(v18[0] + 16LL);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
      specialized ContiguousArray._endMutation()(v12);
    }

    while (v4 != v7);
    uint64_t v5 = (void *)v18[0];
LABEL_11:
    static Device.current.getter(v18);
    uint64_t v13 = v19;
    uint64_t v14 = v20;
    sub_8734(v18, v19);
    char v15 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v13, v14);
    uint64_t v16 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:)( v5,  v15 & 1);
    swift_bridgeObjectRelease(v5);
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v18);
    return v16;
  }

  __break(1u);
  return result;
}

uint64_t sub_304F8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for ImageSize(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v23 = a1;
    }
    else {
      uint64_t v23 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v11 = &_swiftEmptyArrayStorage;
  if (!v10) {
    goto LABEL_11;
  }
  v27[0] = &_swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v10);
  if ((v10 & 0x8000000000000000LL) == 0)
  {
    uint64_t v24 = v9;
    uint64_t v25 = v7;
    uint64_t v26 = v6;
    uint64_t v13 = 0LL;
    do
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
      }
      else {
        id v14 = *(id *)(a1 + 8 * v13 + 32);
      }
      char v15 = v14;
      ++v13;
      uint64_t v16 = sub_306E8(v14, a2, a3);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v17 = *(void *)(v27[0] + 16LL);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      uint64_t v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v16);
      specialized ContiguousArray._endMutation()(v18);
    }

    while (v10 != v13);
    uint64_t v6 = v26;
    uint64_t v11 = (void *)v27[0];
    uint64_t v9 = v24;
    uint64_t v7 = v25;
LABEL_11:
    static Device.current.getter(v27);
    uint64_t v19 = v28;
    uint64_t v20 = v29;
    sub_8734(v27, v28);
    char v21 = dispatch thunk of DeviceState.isLockedWithPasscode.getter(v19, v20);
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for ImageSize.default(_:), v6);
    uint64_t v22 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)( v11,  v21 & 1,  v9);
    swift_bridgeObjectRelease(v11);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v27);
    return v22;
  }

  __break(1u);
  return result;
}

uint64_t sub_306E8(void *a1, uint64_t a2, char a3)
{
  uint64_t v5 = static os_log_type_t.debug.getter(a1);
  uint64_t v6 = *(void **)Log.health.unsafeMutableAddressor(v5);
  uint64_t v7 = sub_6358(&qword_8BE60);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + sub_14C98(v0 + 16) = xmmword_61030;
  id v9 = v6;
  id v10 = [a1 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
  *(void *)(v8 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v11;
  *(void *)(v8 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v13;
  os_log(_:dso:log:_:_:)(v5, &dword_0, v9, "Making disambiguation item for workoutName: %@", 46LL, 2LL, v8);

  swift_bridgeObjectRelease(v8);
  type metadata accessor for SiriKitDisambiguationItemComponent(0LL);
  id v14 = [a1 spokenPhrase];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  uint64_t v18 = dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)(v15, v17);
  swift_bridgeObjectRelease(v17);
  uint64_t v19 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withAllowedOnLockScreen(_:)(1LL);
  uint64_t v20 = swift_release(v18);
  uint64_t v21 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()(v20);
  swift_release(v19);
  uint64_t v22 = type metadata accessor for MachineUtteranceBuilder(0LL);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  uint64_t v23 = MachineUtteranceBuilder.init()();
  uint64_t v24 = sub_6C64(a3);
  uint64_t v26 = v25;
  uint64_t v27 = dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)( 0x655668746C616568LL,  0xEA00000000006272LL,  v24,  v25);
  swift_release(v23);
  swift_bridgeObjectRelease(v26);
  id v28 = [a1 spokenPhrase];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v31 = v30;

  uint64_t v32 = dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)( 0x634168746C616568LL,  0xEE00797469766974LL,  v29,  v31);
  swift_release(v27);
  uint64_t v33 = swift_bridgeObjectRelease(v31);
  uint64_t v34 = App.appIdentifier.getter(v33);
  uint64_t v36 = v35;
  uint64_t v37 = dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)( 0x656D614E707061LL,  0xE700000000000000LL,  v34,  v35);
  swift_release(v32);
  uint64_t v38 = swift_bridgeObjectRelease(v36);
  uint64_t v39 = dispatch thunk of MachineUtteranceBuilder.build()(v38);
  uint64_t v41 = v40;
  swift_release(v37);
  uint64_t v42 = sub_6358(&qword_8E9B0);
  uint64_t v43 = swift_allocObject(v42, 40LL, 7LL);
  *(_OWORD *)(v43 + sub_14C98(v0 + 16) = xmmword_61780;
  *(void *)(v43 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v21;
  uint64_t v46 = v43;
  specialized Array._endMutation()(v43);
  uint64_t v44 = type metadata accessor for SiriKitDisambiguationItem(0LL);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  return SiriKitDisambiguationItem.init(components:utterance:allowLineWrapForDisplayText:)(v46, v39, v41, 0LL);
}

uint64_t type metadata accessor for DisambiguationStrategyHelper()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin28DisambiguationStrategyHelper);
}

  ;
}

uint64_t type metadata accessor for HealthWorkoutEndCATs(uint64_t a1)
{
  uint64_t result = qword_8E268;
  if (!qword_8E268) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthWorkoutEndCATs);
  }
  return result;
}

uint64_t sub_30A60(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_96F68);
}

void sub_30A9C(uint64_t a1, uint64_t a2)
{
}

void sub_30AB8()
{
}

void sub_30AD4(uint64_t a1)
{
}

uint64_t sub_30AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  id v9 = (char *)&v18 - v8;
  uint64_t v10 = sub_6358(&qword_8C260);
  uint64_t v11 = swift_allocObject(v10, 128LL, 7LL);
  *(_OWORD *)(v11 + sub_14C98(v0 + 16) = xmmword_61440;
  uint64_t v12 = (void *)(v11 + 48);
  *(void *)(v11 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 1953459315LL;
  *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xE400000000000000LL;
  sub_6B1C(a1, (uint64_t)v9, &qword_8C258);
  uint64_t v13 = type metadata accessor for SpeakableString(0LL);
  sub_6BE8((uint64_t)v9);
  if (v14)
  {
    sub_6B60((uint64_t)v9, &qword_8C258);
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v11 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
  }

  else
  {
    *(void *)(v11 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v13;
    uint64_t v15 = sub_6B9C(v12);
    sub_6C14( (uint64_t)v15,  (uint64_t)v9,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  *(void *)(v11 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0x4E74756F6B726F77LL;
  *(void *)(v11 + (*(void (**)(uint64_t))(v0 + 176))(v0 + 88) = 0xEB00000000656D61LL;
  sub_6B1C(a2, (uint64_t)v7, &qword_8C258);
  sub_6BE8((uint64_t)v7);
  if (v14)
  {
    sub_6B60((uint64_t)v7, &qword_8C258);
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v11 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v13;
    uint64_t v16 = sub_6B9C((void *)(v11 + 96));
    sub_6C14( (uint64_t)v16,  (uint64_t)v7,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000021LL, 0x800000000006A0B0LL, v11);
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_30CCC()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)( 0xD000000000000026LL,  0x800000000006A080LL,  &_swiftEmptyArrayStorage);
}

uint64_t sub_30CF0(uint64_t a1)
{
  uint64_t v5 = v4 - v3;
  uint64_t v6 = sub_6358(&qword_8C260);
  uint64_t v7 = swift_allocObject(v6, 80LL, 7LL);
  *(_OWORD *)(v7 + sub_14C98(v0 + 16) = xmmword_61030;
  uint64_t v8 = (void *)(v7 + 48);
  *(void *)(v7 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x656D614E707061LL;
  *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xE700000000000000LL;
  sub_6B1C(a1, v5, &qword_8C258);
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  sub_6BE8(v5);
  if (v10)
  {
    sub_6B60(v5, &qword_8C258);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
  }

  else
  {
    *(void *)(v7 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v9;
    uint64_t v11 = sub_6B9C(v8);
    sub_6C14((uint64_t)v11, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000025LL, 0x800000000006A050LL, v7);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_30E28()
{
  return type metadata accessor for HealthWorkoutEndCATs(0LL);
}

uint64_t sub_30E30(unsigned __int8 a1)
{
  uint64_t v3 = v2;
  Swift::String v4 = String.firstLetterCapitalized()();
  swift_bridgeObjectRelease(v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v4._object);
  v5._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  v5._object = (void *)0x800000000006A1E0LL;
  String.append(_:)(v5);
  return swift_bridgeObjectRelease(0x800000000006A1E0LL);
}

uint64_t sub_30EE4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_30F1C + 4 * byte_63AA0[a1]))( 0xD000000000000016LL,  0x800000000006A1C0LL);
}

uint64_t sub_30F1C()
{
  return 0x68746C616568LL;
}

uint64_t sub_30F30()
{
  return 0x655668746C616568LL;
}

uint64_t sub_30F4C()
{
  return 0x6F4E68746C616568LL;
}

uint64_t sub_30F6C()
{
  return 0x634168746C616568LL;
}

uint64_t sub_30F90(uint64_t a1)
{
  return a1 - 1;
}

uint64_t getEnumTagSinglePayload for IntentConversionError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for IntentConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_3118C + 4 * byte_63AC5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_311C0 + 4 * byte_63AC0[v4]))();
}

uint64_t sub_311C0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_311C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x311D0LL);
  }
  return result;
}

uint64_t sub_311DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x311E4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_311E8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_311F0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IntentConversionError()
{
  return &type metadata for IntentConversionError;
}

unint64_t sub_31210()
{
  unint64_t result = qword_8E2B8;
  if (!qword_8E2B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_63B58, &type metadata for IntentConversionError);
    atomic_store(result, (unint64_t *)&qword_8E2B8);
  }

  return result;
}

void sub_3124C(os_log_s *a1, uint64_t a2, uint8_t *a3, void *a4)
{
  uint64_t v145 = a1;
  uint64_t v143 = a4;
  uint64_t v144 = a3;
  uint64_t v142 = a2;
  uint64_t v6 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v136 = v6;
  uint64_t v137 = v7;
  sub_C870();
  __chkstk_darwin(v8);
  sub_11060();
  uint64_t v130 = v9;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v124 - v12;
  __chkstk_darwin(v11);
  uint64_t v138 = (uint64_t)&v124 - v14;
  sub_6358(&qword_8C5F0);
  sub_C870();
  __chkstk_darwin(v15);
  sub_C838();
  uint64_t v129 = v16;
  uint64_t v17 = sub_11198();
  uint64_t v128 = type metadata accessor for Siri_Nlu_External_UserParse(v17);
  uint64_t v127 = *(void *)(v128 - 8);
  sub_C870();
  __chkstk_darwin(v18);
  sub_19A20();
  uint64_t v132 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v125 = *(void *)(v132 - 8);
  sub_C870();
  __chkstk_darwin(v19);
  sub_C838();
  uint64_t v126 = v20;
  uint64_t v21 = sub_11198();
  uint64_t v131 = type metadata accessor for USOParse(v21);
  uint64_t v133 = *(void *)(v131 - 8);
  sub_C870();
  __chkstk_darwin(v22);
  sub_C838();
  uint64_t v135 = v23;
  uint64_t v24 = sub_11198();
  uint64_t v25 = type metadata accessor for Logger(v24);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v140 = v25;
  uint64_t v141 = v26;
  sub_C870();
  __chkstk_darwin(v27);
  sub_11060();
  id v134 = v28;
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v124 = (char *)&v124 - v31;
  __chkstk_darwin(v30);
  uint64_t v139 = (uint64_t)&v124 - v32;
  uint64_t v33 = sub_11198();
  type metadata accessor for HealthNLIntent(v33);
  sub_C870();
  __chkstk_darwin(v34);
  sub_3250C();
  uint64_t v35 = type metadata accessor for NLIntent(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  sub_6BD8();
  uint64_t v39 = v38 - v37;
  uint64_t v40 = type metadata accessor for Parse(0LL);
  uint64_t v41 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  sub_6BD8();
  uint64_t v44 = v43 - v42;
  (*(void (**)(uint64_t, os_log_s *, uint64_t))(v41 + 16))(v43 - v42, v145, v40);
  int v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 88))(v44, v40);
  if (v45 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_324E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v39, v44, v35);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v4, v39, v35);
    uint64_t v46 = v146;
    sub_31C78(v142, (uint64_t)v144, (uint64_t)v143);
    if (v46)
    {
      sub_C594(v4);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v39, v35);
    }

    else
    {
      uint64_t v77 = v47;
      uint64_t v78 = sub_C594(v4);
      uint64_t v79 = Logger.health.unsafeMutableAddressor(v78);
      sub_8894(v79, (uint64_t)v148);
      uint64_t v80 = v140;
      sub_112A4(v139, v79, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v141 + 16));
      id v81 = v77;
      uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
      os_log_type_t v83 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v145 = v82;
        os_log_type_t v84 = (uint8_t *)sub_88B0(12LL);
        uint64_t v143 = (void *)sub_88B0(8LL);
        uint64_t v146 = 0LL;
        uint64_t v144 = v84;
        *(_DWORD *)os_log_type_t v84 = 138412290;
        uint64_t v149 = (uint64_t)v81;
        id v85 = v81;
        uint64_t v80 = v140;
        sub_3254C((uint64_t)&v149, (uint64_t)&v150);
        uint64_t v86 = v143;
        void *v143 = v81;

        uint64_t v82 = v145;
        os_log_type_t v87 = v83;
        uint64_t v88 = v144;
        sub_17C68(&dword_0, v145, v87, "Converted intent to: %@", v144);
        sub_6358(&qword_8C360);
        sub_B334((uint64_t)v86);
        sub_8870((uint64_t)v86);
        sub_8870((uint64_t)v88);
      }

      else
      {
      }

      (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v139, v80);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v39, v35);
    }

    goto LABEL_23;
  }

  uint64_t v48 = v144;
  uint64_t v49 = v146;
  if (v45 == enum case for Parse.directInvocation(_:))
  {
    sub_324E8();
    uint64_t v51 = v137;
    uint64_t v50 = v138;
    uint64_t v52 = v44;
    uint64_t v53 = v136;
    sub_112A4(v138, v52, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 32));
    sub_32558((uint64_t)v13);
    uint64_t v54 = sub_2C64C();
    if (v55 == 1)
    {
      uint64_t v56 = Logger.workout.unsafeMutableAddressor(v54);
      sub_8894(v56, (uint64_t)v148);
      uint64_t v57 = v140;
      uint64_t v58 = v141;
      uint64_t v59 = v134;
      (*(void (**)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t))(v141 + 16))(v134, v56, v140);
      uint64_t v60 = sub_32558(v130);
      uint64_t v61 = v59;
      uint64_t v62 = (os_log_s *)Logger.logObject.getter(v60);
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)sub_88B0(12LL);
        uint64_t v65 = sub_88B0(32LL);
        uint64_t v149 = v65;
        *(_DWORD *)uint64_t v64 = 136315138;
        uint64_t v66 = Parse.DirectInvocation.identifier.getter();
        uint64_t v61 = (void (*)(uint64_t, uint64_t))v67;
        uint64_t v147 = sub_32524(v66, v67);
        uint64_t v53 = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
        sub_10F84();
        sub_324F8();
        sub_17C68(&dword_0, v62, v63, "Unknow DirectInvocation with identifier: %s", v64);
        sub_B334(v65);
        sub_8870(v65);
        sub_8870((uint64_t)v64);

        (*(void (**)(void, uint64_t))(v58 + 8))(v134, v140);
      }

      else
      {
        sub_324F8();

        (*(void (**)(void, uint64_t))(v58 + 8))(v59, v57);
      }

      unint64_t v93 = sub_253BC();
      sub_13FF8((uint64_t)&type metadata for IntentConversionError, v93);
      *uint64_t v94 = 2;
      sub_254A0();
      v61(v138, v53);
    }

    else
    {
      uint64_t v89 = v54;
      uint64_t v90 = v55;
      sub_320E0(v54, v55, v142, (uint64_t)v48, (uint64_t)v143);
      sub_FFEC(v89, v90);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v53);
    }

    goto LABEL_23;
  }

  if (v45 != enum case for Parse.uso(_:))
  {
    unint64_t v91 = sub_253BC();
    sub_13FF8((uint64_t)&type metadata for IntentConversionError, v91);
    *uint64_t v92 = 3;
    sub_254A0();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v44, v40);
    goto LABEL_23;
  }

  sub_324E8();
  uint64_t v68 = v133;
  uint64_t v69 = v135;
  uint64_t v70 = v44;
  uint64_t v71 = v131;
  uint64_t v72 = sub_112A4(v135, v70, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 32));
  uint64_t v73 = USOParse.userParse.getter(v72);
  uint64_t v74 = Siri_Nlu_External_UserParse.userDialogActs.getter(v73);
  (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v5, v128);
  uint64_t v75 = v129;
  sub_52814(v74, v129);
  swift_bridgeObjectRelease(v74);
  uint64_t v76 = v132;
  if (sub_63E0(v75, 1LL, v132) == 1)
  {
    sub_323CC(v75);
LABEL_22:
    unint64_t v98 = sub_253BC();
    sub_13FF8((uint64_t)&type metadata for IntentConversionError, v98);
    *uint64_t v99 = 0;
    sub_254A0();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v71);
    goto LABEL_23;
  }

  uint64_t v95 = v125;
  uint64_t v96 = v126;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 32))(v126, v75, v76);
  uint64_t v97 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v96);
  if (v49)
  {
    swift_errorRelease(v49);
LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v96, v76);
    uint64_t v69 = v135;
    goto LABEL_22;
  }

  uint64_t v100 = v97;
  if ((unint64_t)v97 >> 62)
  {
    if (v97 < 0) {
      uint64_t v122 = v97;
    }
    else {
      uint64_t v122 = v97 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v123 = _CocoaArrayWrapper.endIndex.getter(v122);
    sub_10F84();
    if (v123) {
      goto LABEL_26;
    }
LABEL_36:
    sub_10F84();
    uint64_t v96 = v126;
    goto LABEL_21;
  }

void sub_31C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_19A20();
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 32))(v3, a2, a3);
  if (!swift_dynamicCastUnknownClass(v10, a2))
  {

    uint64_t v11 = Logger.wellness.unsafeMutableAddressor();
    sub_8894(v11, (uint64_t)v24);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v4, v11, v8);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)sub_88B0(12LL);
      uint64_t v23 = sub_88B0(32LL);
      uint64_t v25 = v23;
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v16 = _typeName(_:qualified:)(a1, 0LL);
      unint64_t v18 = v17;
      uint64_t v19 = sub_32524(v16, v17);
      uint64_t v20 = sub_3252C(v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v21);
      swift_bridgeObjectRelease(v18);
      sub_17C68(&dword_0, v13, v14, "Failed to convert %s to base Intent", v15);
      sub_B334(v23);
      sub_8870(v23);
      sub_8870((uint64_t)v15);
    }

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
    unint64_t v22 = sub_253F8();
    sub_13FF8((uint64_t)&type metadata for HealthNLIntentConversionError, v22);
    sub_254A0();
  }

  sub_2544C();
}

BOOL sub_31E38(char a1, char a2)
{
  return a1 == a2;
}

void sub_31E48(uint64_t a1, unsigned __int8 a2)
{
}

void sub_31E6C(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_C034(a1);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_C018();
}

BOOL sub_31EA0(char *a1, char *a2)
{
  return sub_31E38(*a1, *a2);
}

void sub_31EAC()
{
}

void sub_31EB4(uint64_t a1)
{
}

Swift::Int sub_31EBC(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_31EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_6BD8();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 40))(a1, a3, a4, a5);
  if (v5)
  {
    uint64_t v17 = swift_errorRelease(v5);
  }

  else
  {
    uint64_t v31 = (void *)v16;
    if (swift_dynamicCastUnknownClass(v16, a4)) {
      goto LABEL_7;
    }
  }

  uint64_t v18 = Logger.wellness.unsafeMutableAddressor(v17);
  sub_8894(v18, (uint64_t)v32);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v15, v18, v11);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v22 = (uint8_t *)sub_88B0(12LL);
    uint64_t v23 = sub_88B0(32LL);
    uint64_t v33 = v23;
    *(_DWORD *)unint64_t v22 = 136315138;
    uint64_t v24 = _typeName(_:qualified:)(a2, 0LL);
    unint64_t v26 = v25;
    uint64_t v27 = sub_32524(v24, v25);
    uint64_t v28 = sub_3252C(v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28, v29);
    swift_bridgeObjectRelease(v26);
    sub_17C68(&dword_0, v20, v21, "Failed ot convert %s to base Intent", v22);
    sub_B334(v23);
    sub_8870(v23);
    sub_8870((uint64_t)v22);
  }

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
  unint64_t v30 = sub_253F8();
  sub_13FF8((uint64_t)&type metadata for HealthNLIntentConversionError, v30);
  sub_254A0();
LABEL_7:
  sub_2544C();
}

uint64_t sub_320E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_3250C();
  uint64_t v14 = Logger.workout.unsafeMutableAddressor(v13);
  swift_beginAccess(v14, v38, 0LL, 0LL);
  uint64_t v35 = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v5, v14, v11);
  uint64_t v15 = sub_1F240();
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  uint64_t v34 = a1;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v33 = a3;
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v19 = swift_slowAlloc(64LL, -1LL);
    v37[0] = a2;
    v37[1] = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v36 = a1;
    swift_bridgeObjectRetain();
    uint64_t v20 = String.init<A>(describing:)(&v36, &type metadata for WorkoutDiambiguationDirectInvocation);
    uint64_t v36 = sub_32540(v20, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37);
    sub_32564();
    swift_bridgeObjectRelease(a5);
    *(_WORD *)(v18 + 1_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 2080;
    uint64_t v22 = _typeName(_:qualified:)(v33, 0LL);
    uint64_t v36 = sub_32540(v22, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37);
    swift_bridgeObjectRelease(a5);
    _os_log_impl(&dword_0, v16, v17, "Converting %s to %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2LL);
    sub_8870(v19);
    sub_8870(v18);
  }

  else
  {

    sub_32564();
  }

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v5, v35);
  if (a2)
  {
    sub_1F240();
    uint64_t v24 = HealthLogName.init(rawValue:)(a1, a2);
    uint64_t v25 = vocabularyIdentifier(for:)(v24);
    if (v26) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = 0LL;
    }
    if (v26) {
      uint64_t v28 = v26;
    }
    else {
      uint64_t v28 = 0xE000000000000000LL;
    }
    id v29 = objc_allocWithZone(&OBJC_CLASS___INSpeakableString);
    id v30 = sub_521B8(v27, v28, v34, a2, 0LL, 0LL);
  }

  else
  {
    id v30 = 0LL;
  }

  uint64_t v31 = (*(uint64_t (**)(id, uint64_t, uint64_t))(a5 + 48))(v30, a4, a5);

  return swift_dynamicCastUnknownClassUnconditional(v31, a4, 0LL, 0LL, 0LL);
}

void sub_32398(uint64_t a1)
{
}

uint64_t sub_323CC(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8C5F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for HealthNLIntentConversionError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_3244C + 4 * byte_63ACA[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_3246C + 4 * byte_63ACF[v4]))();
  }
}

_BYTE *sub_3244C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_3246C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_32474(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_3247C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_32484(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_3248C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HealthNLIntentConversionError()
{
  return &type metadata for HealthNLIntentConversionError;
}

unint64_t sub_324AC()
{
  unint64_t result = qword_8E2C0;
  if (!qword_8E2C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_63C20, &type metadata for HealthNLIntentConversionError);
    atomic_store(result, (unint64_t *)&qword_8E2C0);
  }

  return result;
}

uint64_t sub_324E8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v2, v1);
}

uint64_t sub_324F8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 200) + 8LL))(v0, v1);
}

  ;
}

uint64_t sub_32524(uint64_t a1, unint64_t a2)
{
  return sub_173E0(a1, a2, (uint64_t *)(v2 - 72));
}

uint64_t sub_3252C(uint64_t a1)
{
  *(void *)(v1 - 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a1;
  return v1 - 112;
}

uint64_t sub_32540(uint64_t a1, unint64_t a2)
{
  return sub_173E0(a1, a2, (uint64_t *)(v2 - 112));
}

uint64_t sub_3254C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_32558(uint64_t a1)
{
  return v1(a1, v2, v3);
}

uint64_t sub_32564()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_32570(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v1 + sub_14C98(v0 + 16) = a1;
  swift_retain(a1);
  swift_release(v2);
  return swift_retain(v1);
}

uint64_t sub_325A0()
{
  uint64_t v1 = sub_333A0();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_325CC()
{
  return 0x2E74756F6B726F77LL;
}

uint64_t sub_325EC(uint64_t a1)
{
  *(void *)(v1 + sub_14C98(v0 + 16) = 0LL;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(v1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v5;
  uint64_t v6 = a1 + OBJC_IVAR____TtCC24HealthFlowDelegatePlugin10WorkoutApp7Builder_aceCommand;
  swift_beginAccess(a1 + OBJC_IVAR____TtCC24HealthFlowDelegatePlugin10WorkoutApp7Builder_aceCommand, v8, 0LL, 0LL);
  sub_33104(v6, v2);
  swift_retain(v5);
  swift_release(a1);
  sub_330BC(v2, v1 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin10WorkoutApp_aceCommand);
  return v1;
}

void sub_326A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v9 = a1 == 7368801 && a2 == 0xE300000000000000LL;
  if (v9 || (sub_33390(7368801LL, 0xE300000000000000LL) & 1) != 0)
  {
    uint64_t v10 = *(void *)(v3 + 24);
    if (v10)
    {
      *(void *)(a3 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = type metadata accessor for SirikitApp(0LL);
      *(void *)a3 = v10;
      swift_retain(v10);
      return;
    }

    goto LABEL_15;
  }

  BOOL v11 = a1 == 0x616D6D6F43656361LL && a2 == 0xEA0000000000646ELL;
  if (!v11 && (sub_33390(0x616D6D6F43656361LL, 0xEA0000000000646ELL) & 1) == 0)
  {
LABEL_15:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + sub_14C98(v0 + 16) = 0u;
    return;
  }

  sub_33104(v3 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin10WorkoutApp_aceCommand, v4);
  uint64_t v12 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0(v4, 1LL, v12) == 1)
  {
    sub_26220(v4);
    goto LABEL_15;
  }

  *(void *)(a3 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v12;
  uint64_t v13 = sub_6B9C((void *)a3);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(v13, v4, v12);
}

uint64_t sub_32808(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_7F440, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_3285C()
{
  return 2LL;
}

uint64_t sub_32864()
{
  return 0LL;
}

uint64_t sub_32870(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x616D6D6F43656361LL;
  }
  else {
    return 7368801LL;
  }
}

void sub_328A4(char *a1, unsigned __int8 *a2)
{
}

void sub_328B0()
{
}

uint64_t sub_328B8(uint64_t a1)
{
  return sub_B724(a1, *v1);
}

void sub_328C0(uint64_t a1)
{
}

uint64_t sub_328C8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_32808(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_328F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_32870(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_3291C()
{
  return sub_32870(*v0);
}

uint64_t sub_32924@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_32858(a1);
  *a2 = result;
  return result;
}

void sub_32948(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_32954(uint64_t a1)
{
  unint64_t v2 = sub_33080();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_3297C(uint64_t a1)
{
  unint64_t v2 = sub_33080();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_329A4()
{
  swift_release(*(void *)(v0 + 24));
  sub_26220(v0 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin10WorkoutApp_aceCommand);
  return v0;
}

uint64_t sub_329D8()
{
  uint64_t v0 = sub_333A0();
  return swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_329F0()
{
  return type metadata accessor for WorkoutApp(0LL);
}

uint64_t type metadata accessor for WorkoutApp(uint64_t a1)
{
  return sub_2DA24(a1, qword_8E2F0, (uint64_t)&nominal type descriptor for WorkoutApp);
}

void sub_32A0C(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = "\b";
  sub_2E078(319LL);
  if (v3 <= 0x3F)
  {
    _OWORD v4[2] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

uint64_t sub_32A84(void *a1)
{
  uint64_t v3 = sub_6358(&qword_8E510);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_6BD8();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_8734(a1, v8);
  unint64_t v10 = sub_33080();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for WorkoutApp.CodingKeys,  &type metadata for WorkoutApp.CodingKeys,  v10,  v8,  v9);
  type metadata accessor for SirikitApp(0LL);
  sub_17A10( &qword_8E518,  (uint64_t (*)(uint64_t))&type metadata accessor for SirikitApp,  (uint64_t)&protocol conformance descriptor for SirikitApp);
  sub_333B4();
  if (!v1)
  {
    type metadata accessor for SpeakableString(0LL);
    sub_17A10( &qword_8E520,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    sub_333B4();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_32BF4(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_32CD4(a1);
  return v3;
}

uint64_t sub_32C40()
{
  return type metadata accessor for WorkoutApp.Builder(0LL);
}

uint64_t type metadata accessor for WorkoutApp.Builder(uint64_t a1)
{
  return sub_2DA24(a1, qword_8E3F8, (uint64_t)&nominal type descriptor for WorkoutApp.Builder);
}

void sub_32C5C(uint64_t a1)
{
  v4[0] = "\b";
  sub_2E078(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
  }

id *sub_32CD4(void *a1)
{
  unint64_t v3 = v1;
  sub_6358(&qword_8C258);
  sub_6C04();
  __chkstk_darwin(v5);
  sub_6BD8();
  uint64_t v8 = v7 - v6;
  uint64_t v16 = sub_6358(&qword_8E4F0);
  __chkstk_darwin(v16);
  sub_6BD8();
  v1[2] = 0LL;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_8734(a1, v9);
  unint64_t v11 = sub_33080();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for WorkoutApp.CodingKeys,  &type metadata for WorkoutApp.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {

    uint64_t v13 = type metadata accessor for WorkoutApp(0LL);
    swift_deallocPartialClassInstance(v1, v13, *((unsigned int *)*v1 + 12), *((unsigned __int16 *)*v1 + 26));
  }

  else
  {
    uint64_t v12 = type metadata accessor for SirikitApp(0LL);
    char v18 = 0;
    sub_17A10( &qword_8E500,  (uint64_t (*)(uint64_t))&type metadata accessor for SirikitApp,  (uint64_t)&protocol conformance descriptor for SirikitApp);
    sub_3337C(v12, (uint64_t)&v18);
    v3[3] = v19;
    uint64_t v15 = type metadata accessor for SpeakableString(0LL);
    char v17 = 1;
    sub_17A10( &qword_8E508,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    sub_3337C(v15, (uint64_t)&v17);
    sub_3336C();
    sub_330BC(v8, (uint64_t)v3 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin10WorkoutApp_aceCommand);
  }

  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(a1);
  return v3;
}

uint64_t sub_32EDC()
{
  return sub_325CC();
}

void *sub_32EF0()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 16, v5, 0LL, 0LL);
  uint64_t v2 = *(void **)(v1 + 16);
  id v3 = v2;
  return v2;
}

void sub_32F34(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess(v3 + 16, v5, 1LL, 0LL);
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + sub_14C98(v0 + 16) = a1;
}

void *sub_32F7C(uint64_t a1)
{
  return &j__swift_endAccess;
}

void sub_32FC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_32FE0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_32BF4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_33008(void *a1)
{
  return sub_32A84(a1);
}

uint64_t sub_33028()
{
  return sub_17A10(&qword_8E4E0, type metadata accessor for WorkoutApp, (uint64_t)&unk_63D28);
}

uint64_t sub_33054()
{
  return sub_17A10(&qword_8E4E8, type metadata accessor for WorkoutApp, (uint64_t)&unk_63D00);
}

unint64_t sub_33080()
{
  unint64_t result = qword_8E4F8;
  if (!qword_8E4F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_63EB4, &type metadata for WorkoutApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8E4F8);
  }

  return result;
}

uint64_t sub_330BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_33104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for WorkoutApp.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for WorkoutApp.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_33220 + 4 * byte_63C95[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_33254 + 4 * byte_63C90[v4]))();
}

uint64_t sub_33254(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3325C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x33264LL);
  }
  return result;
}

uint64_t sub_33270(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x33278LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_3327C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_33284(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_33290(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WorkoutApp.CodingKeys()
{
  return &type metadata for WorkoutApp.CodingKeys;
}

unint64_t sub_332B0()
{
  unint64_t result = qword_8E528;
  if (!qword_8E528)
  {
    unint64_t result = swift_getWitnessTable(&unk_63E8C, &type metadata for WorkoutApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8E528);
  }

  return result;
}

unint64_t sub_332F0()
{
  unint64_t result = qword_8E530;
  if (!qword_8E530)
  {
    unint64_t result = swift_getWitnessTable(&unk_63DC4, &type metadata for WorkoutApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8E530);
  }

  return result;
}

unint64_t sub_33330()
{
  unint64_t result = qword_8E538;
  if (!qword_8E538)
  {
    unint64_t result = swift_getWitnessTable(&unk_63DEC, &type metadata for WorkoutApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8E538);
  }

  return result;
}

uint64_t sub_3336C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_3337C(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, v3, v2);
}

uint64_t sub_33390(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_333A0()
{
  return v0;
}

uint64_t sub_333B4()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_333C0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(v2 + 56);
  if (!v3) {
    return sub_3E728(a1, a2);
  }
  type metadata accessor for SiriKitIntentExecutionBehavior(0LL);
  id v4 = v3;
  uint64_t v5 = static SiriKitIntentExecutionBehavior.remoteIntentExecution(targetDevice:)();

  return v5;
}

uint64_t sub_33410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_15914(a1, a2, a3, a4, a5, (uint64_t)&unk_81468, (uint64_t)&unk_8E628);
}

uint64_t sub_33424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  return swift_task_switch(sub_33440, 0LL, 0LL);
}

uint64_t sub_33440()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(**(void **)(v0 + 136));
  id v2 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  uint64_t v3 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v4 = sub_14DA4(v3);
  uint64_t v5 = ResponseFactory.init()(v4);
  *(void *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  *(void *)(v0 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = &protocol witness table for ResponseFactory;
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v5;
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  *(void *)(v0 + sub_14C98(v0 + 16) = 0xD000000000000014LL;
  *(void *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0x8000000000068BD0LL;
  *(void *)(v0 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v2;
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v6;
  BOOL v7 = (void *)swift_task_alloc(dword_8DC24);
  *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v7;
  *BOOL v7 = v0;
  v7[1] = sub_33554;
  return sub_2B800(v0 + 88, v0 + 16, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_33554()
{
  return swift_task_switch(sub_33594, 0LL, 0LL);
}

uint64_t sub_33594()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_335E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_15914(a1, a2, a3, a4, a5, (uint64_t)&unk_81440, (uint64_t)&unk_8E618);
}

uint64_t sub_335FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  return swift_task_switch(sub_33618, 0LL, 0LL);
}

uint64_t sub_33618()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(**(void **)(v0 + 16));
  id v2 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v2;
  uint64_t v3 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v4 = sub_14DA4(v3);
  uint64_t v5 = ResponseFactory.init()(v4);
  *(void *)(v0 + 48) = v5;
  uint64_t v8 = (char *)&dword_8EF08 + dword_8EF08;
  uint64_t v6 = (void *)swift_task_alloc(unk_8EF0C);
  *(void *)(v0 + 56) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_14398;
  return ((uint64_t (*)(unint64_t, unint64_t, id, uint64_t, void, void))v8)( 0xD000000000000019LL,  0x800000000006A2D0LL,  v2,  v5,  *(void *)(v0 + 24),  *(void *)(v0 + 32));
}

uint64_t sub_336F0()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t type metadata accessor for PauseWorkoutHandleIntentStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin32PauseWorkoutHandleIntentStrategy);
}

uint64_t sub_3373C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for PauseWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_337A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for PauseWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  v13,  a7);
}

uint64_t sub_3380C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for PauseWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_33874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_33410(a1, a2, a3, a4, a5);
}

uint64_t sub_33894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for PauseWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_338FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for PauseWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeInProgressResponse(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_33964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_335E8(a1, a2, a3, a4, a5);
}

uint64_t sub_33984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for PauseWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, v5, a3);
}

uint64_t sub_339BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for PauseWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, v7, a4);
}

uint64_t sub_33A0C(uint64_t a1, void *a2)
{
  return sub_333C0(a1, a2);
}

uint64_t sub_33A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for PauseWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, v11, a6);
}

unint64_t sub_33A88()
{
  unint64_t result = qword_8E608;
  if (!qword_8E608)
  {
    uint64_t v1 = type metadata accessor for PauseWorkoutHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable(&unk_63F64, v1);
    atomic_store(result, &qword_8E608);
  }

  return result;
}

uint64_t sub_33AC8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_8E614);
  *(void *)(v0 + sub_14C98(v0 + 16) = v1;
  uint64_t v2 = sub_15FC8(v1);
  return sub_335FC(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_33B24()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_8E624);
  *(void *)(v0 + sub_14C98(v0 + 16) = v1;
  uint64_t v2 = sub_15FC8(v1);
  return sub_33424(v2, v3, v4, v5, v6, v7);
}

uint64_t destroy for WorkoutPatternProvider(void *a1)
{
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(a1 + 25);
}

_OWORD *initializeWithCopy for WorkoutPatternProvider(_OWORD *a1, _OWORD *a2)
{
  __int128 v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  __int128 v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  __int128 v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  __int128 v8 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a1 + 18_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  __int128 v9 = a2[14];
  a1[14] = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))((uint64_t)a1 + 200, (uint64_t)a2 + 200);
  return a1;
}

void *assignWithCopy for WorkoutPatternProvider(void *a1, void *a2)
{
  return a1;
}

void *initializeWithTake for WorkoutPatternProvider(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF0uLL);
}

uint64_t assignWithTake for WorkoutPatternProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + sub_14C98(v0 + 16) = v4;
  *(void *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 112);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 152);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 19_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 192);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + sub_14C58(v0 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkoutPatternProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 240))
    {
      LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkoutPatternProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
    *(_OWORD *)(result + sub_14C58(v0 + 216) = 0u;
    *(_OWORD *)(result + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0u;
    *(_OWORD *)(result + 18_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0u;
    *(_OWORD *)(result + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + sub_14C58(v0 + 88) = 0u;
    *(_OWORD *)(result + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0u;
    *(_OWORD *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for WorkoutPatternProvider()
{
  return &type metadata for WorkoutPatternProvider;
}

uint64_t sub_33E9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v3);
  type metadata accessor for WorkoutCancelCATPatternsExecutor(0LL);
  sub_33FB8();
  uint64_t v4 = sub_33FC4();
  a1[3] = v1;
  a1[4] = (uint64_t)&off_81008;
  *a1 = v4;
  type metadata accessor for WorkoutEndCATPatternsExecutor(0LL);
  sub_33FB8();
  uint64_t v5 = sub_33FC4();
  a1[8] = v1;
  a1[9] = (uint64_t)&off_82F68;
  a1[5] = v5;
  type metadata accessor for WorkoutPauseCATPatternsExecutor(0LL);
  sub_33FB8();
  uint64_t v6 = sub_33FC4();
  a1[13] = v1;
  a1[14] = (uint64_t)&off_832F8;
  a1[10] = v6;
  type metadata accessor for WorkoutResumeCATPatternsExecutor(0LL);
  sub_33FB8();
  uint64_t v7 = sub_33FC4();
  a1[18] = v1;
  a1[19] = (uint64_t)&off_830D0;
  a1[15] = v7;
  type metadata accessor for WorkoutStartCATPatternsExecutor(0LL);
  sub_33FB8();
  uint64_t v8 = sub_33FC4();
  a1[23] = v1;
  a1[24] = (uint64_t)&off_83080;
  a1[20] = v8;
  type metadata accessor for WorkoutCATPatternsExecutor(0LL);
  sub_33FB8();
  uint64_t result = sub_33FC4();
  a1[28] = v1;
  a1[29] = (uint64_t)&off_81E48;
  a1[25] = result;
  return result;
}

uint64_t sub_33FB8()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_33FC4()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t type metadata accessor for HealthCATs(uint64_t a1)
{
  uint64_t result = qword_8E630;
  if (!qword_8E630) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthCATs);
  }
  return result;
}

uint64_t sub_34008(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_96F88);
}

uint64_t sub_34044()
{
  return type metadata accessor for HealthCATs(0LL);
}

uint64_t sub_3404C@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v87 = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v88 = *(void *)(v3 - 8);
  uint64_t v89 = v3;
  sub_C870();
  __chkstk_darwin(v4);
  sub_17BBC();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  sub_355E4();
  uint64_t v82 = v9;
  uint64_t v10 = sub_11198();
  uint64_t v11 = type metadata accessor for NLContextUpdate(v10);
  uint64_t v79 = *(void *)(v11 - 8);
  uint64_t v80 = v11;
  sub_C870();
  __chkstk_darwin(v12);
  sub_C838();
  uint64_t v86 = v13;
  uint64_t v14 = sub_11198();
  uint64_t v85 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(v14);
  uint64_t v78 = *(void *)(v85 - 8);
  sub_C870();
  __chkstk_darwin(v15);
  sub_C838();
  uint64_t v84 = v16;
  uint64_t v17 = sub_11198();
  uint64_t v83 = type metadata accessor for Siri_Nlu_External_SystemPrompted(v17);
  uint64_t v81 = *(void *)(v83 - 8);
  sub_C870();
  __chkstk_darwin(v18);
  sub_17BBC();
  uint64_t v21 = v19 - v20;
  __chkstk_darwin(v22);
  sub_355E4();
  uint64_t v24 = v23;
  sub_6358(&qword_8E680);
  sub_C870();
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  sub_C870();
  __chkstk_darwin(v30);
  sub_17BBC();
  uint64_t v33 = v31 - v32;
  __chkstk_darwin(v34);
  sub_355E4();
  uint64_t v36 = v35;
  uint64_t v37 = sub_3520C(a1);
  if (!v37)
  {
LABEL_4:
    uint64_t v39 = Logger.health.unsafeMutableAddressor(v37);
    sub_11224(v39);
    uint64_t v41 = v88;
    uint64_t v40 = v89;
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v7, v39, v89);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      int v45 = (uint8_t *)sub_88B0(2LL);
      *(_WORD *)int v45 = 0;
      _os_log_impl(&dword_0, v43, v44, "Failed to create protobuf UsoGraph from UsoTask", v45, 2u);
      sub_8870((uint64_t)v45);
    }

    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v7, v40);
    return NLContextUpdate.init()(v46);
  }

  uint64_t v38 = v37;
  UsoTaskBuilder.toProtobufUsoGraph()();
  if (sub_63E0((uint64_t)v27, 1LL, v28) == 1)
  {
    swift_release(v38);
    uint64_t v37 = sub_6B60((uint64_t)v27, &qword_8E680);
    goto LABEL_4;
  }

  uint64_t v48 = v36;
  uint64_t v49 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v36, v27, v28);
  uint64_t v50 = v24;
  Siri_Nlu_External_SystemPrompted.init()(v49);
  uint64_t v76 = v29;
  uint64_t v77 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v33, v48, v28);
  uint64_t v51 = Siri_Nlu_External_SystemPrompted.target.setter(v33);
  uint64_t v52 = v84;
  Siri_Nlu_External_SystemDialogAct.init()(v51);
  uint64_t v53 = v81;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v21, v50, v83);
  uint64_t v54 = Siri_Nlu_External_SystemDialogAct.prompted.setter(v21);
  NLContextUpdate.init()(v54);
  uint64_t v55 = sub_6358(&qword_8D3A8);
  uint64_t v56 = v78;
  uint64_t v57 = *(unsigned __int8 *)(v78 + 80);
  uint64_t v58 = (v57 + 32) & ~v57;
  uint64_t v59 = swift_allocObject(v55, v58 + *(void *)(v78 + 72), v57 | 7);
  *(_OWORD *)(v59 + sub_14C98(v0 + 16) = xmmword_61030;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v59 + v58, v52, v85);
  uint64_t v60 = NLContextUpdate.nluSystemDialogActs.setter(v59);
  uint64_t v61 = Logger.health.unsafeMutableAddressor(v60);
  sub_11224(v61);
  uint64_t v63 = v88;
  uint64_t v62 = v89;
  uint64_t v64 = v82;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v82, v61, v89);
  uint64_t v65 = swift_retain_n(v38, 2LL);
  uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
  os_log_type_t v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = (uint8_t *)sub_88B0(12LL);
    uint64_t v69 = sub_88B0(32LL);
    uint64_t v90 = v38;
    v91[0] = v69;
    uint64_t v70 = v69;
    *(_DWORD *)uint64_t v68 = 136315138;
    v75[1] = v68 + 4;
    uint64_t v71 = type metadata accessor for UsoTaskBuilder(0LL);
    swift_retain(v38);
    uint64_t v72 = String.init<A>(describing:)(&v90, v71);
    unint64_t v74 = v73;
    uint64_t v90 = sub_173E0(v72, v73, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
    swift_release_n(v38, 2LL);
    swift_bridgeObjectRelease(v74);
    _os_log_impl(&dword_0, v66, v67, "Built nlContextUpdate with SystemPrompted for task: %s", v68, 0xCu);
    swift_arrayDestroy(v70, 1LL);
    sub_8870(v70);
    sub_8870((uint64_t)v68);
    swift_release(v38);

    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v82, v89);
    sub_355F0();
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v50, v83);
  }

  else
  {
    swift_release_n(v38, 3LL);

    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v62);
    sub_355F0();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v50, v83);
  }

  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v77, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 32))(v87, v86, v80);
}

void sub_34580(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8C958);
  uint64_t v3 = sub_65A4(v2, 64LL);
  *(_OWORD *)(v3 + sub_14C98(v0 + 16) = xmmword_61440;
  sub_355B4();
  *(void *)(v3 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v5;
  *(void *)(v3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v6;
  sub_30E30(3u);
  *(void *)(v3 + 48) = 0LL;
  *(void *)(v3 + 56) = 0xE000000000000000LL;
  NLContextUpdate.weightedPromptResponseTargets.setter(v3);
  uint64_t v4 = sub_34C6C(a1);
  NLContextUpdate.displayHints.setter(v4);
  sub_355C4();
}

void sub_3461C(uint64_t a1)
{
  uint64_t v1 = sub_6358(&qword_8C958);
  uint64_t v2 = sub_65A4(v1, 80LL);
  *(_OWORD *)(v2 + sub_14C98(v0 + 16) = xmmword_63690;
  sub_355B4();
  sub_35598();
  Swift::String v3 = String.uppercased()();
  sub_355D8(v3);
  sub_140A4();
  *(void *)(v2 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xE000000000000000LL;
  sub_355B4();
  sub_35598();
  Swift::String v4 = String.uppercased()();
  sub_355D8(v4);
  sub_140A4();
  *(void *)(v2 + 48) = 0LL;
  *(void *)(v2 + 56) = 0xE000000000000000LL;
  sub_355B4();
  sub_35598();
  Swift::String v5 = String.uppercased()();
  sub_355D8(v5);
  sub_140A4();
  *(void *)(v2 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0LL;
  *(void *)(v2 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0xE000000000000000LL;
  NLContextUpdate.weightedPromptResponseOptions.setter(v2);
  sub_355C4();
}

void *sub_34714(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  sub_6358(&qword_8D3A0);
  sub_C870();
  __chkstk_darwin(v3);
  sub_C838();
  uint64_t v50 = v4;
  uint64_t v5 = sub_11198();
  uint64_t v6 = type metadata accessor for DisplayHint(v5);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  sub_C870();
  __chkstk_darwin(v7);
  sub_C838();
  uint64_t v55 = v8;
  uint64_t v9 = sub_11198();
  uint64_t v10 = type metadata accessor for SemanticValue(v9);
  uint64_t v54 = *(void *)(v10 - 8);
  sub_C870();
  __chkstk_darwin(v11);
  sub_17BBC();
  uint64_t v53 = v12 - v13;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v47 = (char *)&v46 - v16;
  __chkstk_darwin(v15);
  sub_355E4();
  uint64_t v52 = v17;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v45 = a1;
    }
    else {
      uint64_t v45 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter(v45);
    uint64_t v18 = (uint64_t)result;
    if (result) {
      goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v18 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  uint64_t result = (void *)swift_bridgeObjectRetain();
  if (!v18) {
    goto LABEL_24;
  }
LABEL_3:
  if (v18 >= 1)
  {
    uint64_t v20 = 0LL;
    unint64_t v56 = a1 & 0xC000000000000001LL;
    uint64_t v57 = _swiftEmptyArrayStorage;
    uint64_t v46 = v18;
    while (1)
    {
      if (v56)
      {
        uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20, a1);
      }

      else
      {
        uint64_t v21 = *(void *)(a1 + 8 * v20 + 32);
        swift_retain(v21);
      }

      uint64_t v22 = type metadata accessor for AppInformationResolver(0LL);
      sub_14DA4(v22);
      uint64_t v23 = swift_retain(v21);
      uint64_t v24 = AppInformationResolver.init(app:)(v23);
      uint64_t v25 = App.appIdentifier.getter(v24);
      if (v26)
      {
        uint64_t v27 = v25;
        uint64_t v28 = v26;
        uint64_t v29 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)(v51);
        if (v30)
        {
          uint64_t v31 = v29;
          uint64_t v32 = v30;
          uint64_t v33 = v10;
          uint64_t v34 = v52;
          SemanticValue.init(string:label:)(v27, v28, 0x746163696C707061LL, 0xED000064496E6F69LL);
          uint64_t v35 = v53;
          SemanticValue.init(string:label:)(v31, v32, 0x656D614E707061LL, 0xE700000000000000LL);
          uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16);
          uint64_t v37 = v50;
          uint64_t v38 = v34;
          uint64_t v10 = v33;
          v36(v50, v38, v33);
          sub_8760(v37, 0LL, 1LL, v33);
          uint64_t v39 = v47;
          v36((uint64_t)v47, v35, v33);
          DisplayHint.init(idValue:displayValue:)(v37, v39);
          if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) != 0) {
            uint64_t v40 = v57;
          }
          else {
            uint64_t v40 = (void *)sub_F4E8(0, v57[2] + 1LL, 1, (uint64_t)v57);
          }
          unint64_t v42 = v40[2];
          unint64_t v41 = v40[3];
          uint64_t v18 = v46;
          if (v42 >= v41 >> 1) {
            uint64_t v40 = (void *)sub_F4E8(v41 > 1, v42 + 1, 1, (uint64_t)v40);
          }
          v40[2] = v42 + 1;
          unint64_t v43 = (*(unsigned __int8 *)(v48 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
          uint64_t v57 = v40;
          (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))( (char *)v40 + v43 + *(void *)(v48 + 72) * v42,  v55,  v49);
          swift_release(v21);
          swift_release(v24);
          os_log_type_t v44 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
          v44(v53, v10);
          v44(v52, v10);
          goto LABEL_17;
        }

        sub_140A4();
      }

      swift_release(v24);
      swift_release(v21);
LABEL_17:
      if (v18 == ++v20)
      {
        swift_bridgeObjectRelease(a1);
        return v57;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_34AB8(uint64_t a1)
{
  uint64_t v1 = sub_6358(&qword_8C958);
  uint64_t v2 = sub_65A4(v1, 48LL);
  *(_OWORD *)(v2 + sub_14C98(v0 + 16) = xmmword_61030;
  sub_30E30(8u);
  *(void *)(v2 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xE000000000000000LL;
  return NLContextUpdate.weightedPromptResponseTargets.setter(v2);
}

void sub_34B34()
{
  id v0 = [objc_allocWithZone(SAAceConfirmationContext) init];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(SAAceConfirmationReasonAUTHORIZE_SIRIKIT_APPValue);
  sub_35548(v1, v2, v0);
  sub_34AB8(v3);
  uint64_t v4 = sub_6358(&qword_8E9B0);
  uint64_t v5 = sub_65A4(v4, 40LL);
  *(_OWORD *)(v5 + sub_14C98(v0 + 16) = xmmword_61780;
  *(void *)(v5 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v0;
  uint64_t v17 = v5;
  specialized Array._endMutation()(v5);
  id v16 = v0;
  NLContextUpdate.conversationStateAttachments.setter(v17);
  uint64_t v6 = type metadata accessor for MachineUtteranceBuilder(0LL);
  sub_14DA4(v6);
  uint64_t v7 = MachineUtteranceBuilder.init()();
  uint64_t v8 = App.appIdentifier.getter(v7);
  uint64_t v10 = v9;
  uint64_t v11 = dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)( 0x656D614E707061LL,  0xE700000000000000LL,  v8,  v9);
  swift_release(v7);
  uint64_t v12 = swift_bridgeObjectRelease(v10);
  uint64_t v13 = dispatch thunk of MachineUtteranceBuilder.build()(v12);
  uint64_t v15 = v14;
  swift_release(v11);
  NLContextUpdate.nlInput.setter(v13, v15);
}

void *sub_34C6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OrdinalDisplayHintsBuilder(0LL);
  uint64_t v56 = *(void *)(v2 - 8);
  uint64_t v57 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_6358(&qword_8D3A0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v60 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)&v55 - v8;
  uint64_t v9 = type metadata accessor for DisplayHint(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v70 = v9;
  uint64_t v71 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  os_log_type_t v67 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v55 - v13;
  uint64_t v15 = type metadata accessor for SemanticValue(0LL);
  uint64_t v69 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v66 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v59 = (char *)&v55 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v64 = (char *)&v55 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v63 = (char *)&v55 - v23;
  __chkstk_darwin(v22);
  uint64_t v62 = (char *)&v55 - v24;
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v26 = &_swiftEmptyArrayStorage;
  uint64_t v58 = v4;
  if (v25)
  {
    uint64_t v72 = &_swiftEmptyArrayStorage;
    sub_3B62C(0, v25, 0);
    uint64_t v27 = (void *)(a1 + 40);
    uint64_t v61 = v14;
    uint64_t v28 = v62;
    uint64_t v29 = v64;
    uint64_t v30 = (uint64_t)v65;
    do
    {
      uint64_t v68 = v25;
      uint64_t v32 = *(v27 - 1);
      uint64_t v31 = *v27;
      swift_bridgeObjectRetain_n(*v27, 2LL);
      uint64_t v33 = v63;
      SemanticValue.init(string:label:)(v32, v31, 0x634168746C616568LL, 0xEE00797469766974LL);
      swift_bridgeObjectRetain();
      SemanticValue.init(string:label:)(v32, v31, 0x634168746C616568LL, 0xEE00797469766974LL);
      uint64_t v34 = v69;
      uint64_t v35 = *(void (**)(uint64_t, char *, uint64_t))(v69 + 16);
      v35(v30, v33, v15);
      sub_8760(v30, 0LL, 1LL, v15);
      v35((uint64_t)v29, v28, v15);
      DisplayHint.init(idValue:displayValue:)(v30, v29);
      uint64_t v36 = *(void (**)(char *, uint64_t))(v34 + 8);
      v36(v28, v15);
      v36(v33, v15);
      swift_bridgeObjectRelease(v31);
      uint64_t v26 = v72;
      if ((swift_isUniquelyReferenced_nonNull_native(v72) & 1) == 0)
      {
        sub_3B62C(0, v26[2] + 1LL, 1);
        uint64_t v26 = v72;
      }

      unint64_t v38 = v26[2];
      unint64_t v37 = v26[3];
      uint64_t v39 = v68;
      if (v38 >= v37 >> 1)
      {
        sub_3B62C(v37 > 1, v38 + 1, 1);
        uint64_t v26 = v72;
      }

      v27 += 2;
      v26[2] = v38 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v71 + 32))( (unint64_t)v26 + ((*(unsigned __int8 *)(v71 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))
      + *(void *)(v71 + 72) * v38,
        v61,
        v70);
      uint64_t v72 = v26;
      uint64_t v25 = v39 - 1;
    }

    while (v25);
    uint64_t v4 = v58;
  }

  OrdinalDisplayHintsBuilder.init(referenceNode:)(0x655268746C616568LL, 0xEF65636E65726566LL);
  uint64_t v40 = v26[2];
  uint64_t v41 = (uint64_t)v60;
  if (v40)
  {
    unint64_t v42 = (char *)v26 + ((*(unsigned __int8 *)(v71 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
    uint64_t v43 = *(void *)(v71 + 72);
    os_log_type_t v44 = *(uint64_t (**)(char *, char *, uint64_t))(v71 + 16);
    swift_bridgeObjectRetain();
    uint64_t v45 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      uint64_t v46 = v67;
      uint64_t v47 = v70;
      uint64_t v48 = v44(v67, v42, v70);
      DisplayHint.idValue.getter(v48);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v46, v47);
      if (sub_63E0(v41, 1LL, v15) == 1)
      {
        sub_6B60(v41, &qword_8D3A0);
      }

      else
      {
        uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 32);
        uint64_t v50 = v59;
        v49(v59, v41, v15);
        v49(v66, (uint64_t)v50, v15);
        if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0) {
          uint64_t v45 = (char *)sub_F4FC(0, *((void *)v45 + 2) + 1LL, 1, (uint64_t)v45);
        }
        unint64_t v52 = *((void *)v45 + 2);
        unint64_t v51 = *((void *)v45 + 3);
        if (v52 >= v51 >> 1) {
          uint64_t v45 = (char *)sub_F4FC(v51 > 1, v52 + 1, 1, (uint64_t)v45);
        }
        *((void *)v45 + _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v52 + 1;
        v49( &v45[((*(unsigned __int8 *)(v69 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))
             + *(void *)(v69 + 72) * v52],
          (uint64_t)v66,
          v15);
        uint64_t v41 = (uint64_t)v60;
      }

      v42 += v43;
      --v40;
    }

    while (v40);
    swift_bridgeObjectRelease(v26);
    uint64_t v4 = v58;
  }

  else
  {
    uint64_t v45 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v53 = OrdinalDisplayHintsBuilder.build(for:)(v45);
  swift_bridgeObjectRelease(v45);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v4, v57);
  uint64_t v72 = v26;
  sub_35454(v53);
  return v72;
}

uint64_t sub_3520C(unsigned __int8 a1)
{
  int v1 = a1;
  uint64_t v2 = sub_6358(&qword_8CD60);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_6358(&qword_8CD50);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_6358(&qword_8E688);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  switch(v1)
  {
    case 0:
      type metadata accessor for UsoTask(0LL);
      uint64_t v11 = type metadata accessor for UsoEntity_common_WorkoutGoal.DefinedValues(0LL);
      sub_8760((uint64_t)v10, 1LL, 1LL, v11);
      uint64_t v12 = type metadata accessor for UsoEntity_common_MeasurementUnit.DefinedValues(0LL);
      sub_8760((uint64_t)v7, 1LL, 1LL, v12);
      uint64_t v13 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
      sub_8760((uint64_t)v4, 1LL, 1LL, v13);
      uint64_t v14 = static UsoTask.startWorkout(_:goalDefinedValue:goalUnitType:goalValue:areaType:sequenceLabel:appIdentifier:)( 0LL,  0xE000000000000000LL,  v10,  v7,  0LL,  1LL,  0LL,  0LL,  v4,  0LL,  0LL);
      sub_6B60((uint64_t)v4, &qword_8CD60);
      sub_6B60((uint64_t)v7, &qword_8CD50);
      sub_6B60((uint64_t)v10, &qword_8E688);
      return v14;
    case 1:
      type metadata accessor for UsoTask(0LL);
      uint64_t v15 = static UsoTask.pauseWorkout(_:)(0LL, 0xE000000000000000LL);
      goto LABEL_8;
    case 2:
      type metadata accessor for UsoTask(0LL);
      uint64_t v15 = static UsoTask.endWorkout(_:)(0LL, 0xE000000000000000LL);
      goto LABEL_8;
    case 3:
      type metadata accessor for UsoTask(0LL);
      uint64_t v15 = static UsoTask.resumeWorkout(_:)(0LL, 0xE000000000000000LL);
      goto LABEL_8;
    case 4:
      type metadata accessor for UsoTask(0LL);
      uint64_t v15 = static UsoTask.cancelWorkout(_:)(0LL, 0xE000000000000000LL);
LABEL_8:
      uint64_t v14 = v15;
      break;
    default:
      uint64_t v14 = 0LL;
      break;
  }

  return v14;
}

uint64_t sub_35454(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)result || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v7 = v4 + v2;
    }
    else {
      uint64_t v7 = v4;
    }
    uint64_t result = sub_F4E8(result, v7, 1, v3);
    uint64_t v3 = result;
  }

  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t result = type metadata accessor for DisplayHint(0LL);
  if (v9 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v10 = *(void *)(result - 8);
  unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t result = sub_FD58(v6 + v11, v2, v3 + v11 + *(void *)(v10 + 72) * v8);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease(v6);
    *int v1 = v3;
    return result;
  }

  uint64_t v12 = *(void *)(v3 + 16);
  BOOL v13 = __OFADD__(v12, v2);
  uint64_t v14 = v12 + v2;
  if (!v13)
  {
    *(void *)(v3 + sub_14C98(v0 + 16) = v14;
    goto LABEL_14;
  }

LABEL_18:
  __break(1u);
  return result;
}

    uint64_t v5 = (v11 - 1) & v11;
    uint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    uint64_t v4 = v12;
  }

  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_19;
    }

    __break(1u);
    goto LABEL_18;
  }

  if ((a3 & 1) == 0)
  {
LABEL_20:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v8 = __CocoaDictionary.key(at:)(a1, a2, v7);
  uint64_t v16 = v8;
  uint64_t v9 = type metadata accessor for DeviceUnit(0LL);
  swift_unknownObjectRetain(v8);
  swift_dynamicCast(&v17, &v16, (char *)&type metadata for Swift.AnyObject + 8, v9, 7LL);
  swift_unknownObjectRelease(v8);
}

void sub_35548(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setReason:v5];
}

void sub_35598()
{
  v0._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
  v0._object = (void *)0xE700000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_355B4()
{
  return sub_30E30(8u);
}

  ;
}

void sub_355D8(Swift::String a1)
{
}

  ;
}

uint64_t sub_355F0()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v1 - 176), *(void *)(v1 - 168));
}

void sub_355FC(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  id v4 = sub_3586C(a1);
  if (v4)
  {
    id v5 = v4;
    id v6 = *(id *)Log.health.unsafeMutableAddressor(v4);
    uint64_t v7 = static os_log_type_t.debug.getter(v6);
    uint64_t v8 = sub_6358(&qword_8BE60);
    uint64_t v9 = sub_65A4(v8, 72LL);
    *(_OWORD *)(v9 + sub_14C98(v0 + 16) = xmmword_61030;
    id v10 = v5;
    id v11 = [v10 description];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v9 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v12;
    *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v14;
    os_log(_:dso:log:type:_:)("Created INEndWorkoutIntent: %@", 30LL, 2LL, &dword_0, v6, v7, v9);

    swift_bridgeObjectRelease(v9);
    id v28 = v10;
    a3(v5, 0LL);
  }

  else
  {
    uint64_t v15 = type metadata accessor for HealthFlowError();
    sub_65A4(v15, 40LL);
    uint64_t v16 = sub_BD3C(0);
    uint64_t v17 = static os_log_type_t.error.getter(v16);
    uint64_t v18 = *(void **)Log.health.unsafeMutableAddressor(v17);
    uint64_t v19 = sub_6358(&qword_8BE60);
    uint64_t v20 = sub_65A4(v19, 72LL);
    *(_OWORD *)(v20 + sub_14C98(v0 + 16) = xmmword_61030;
    id v21 = v18;
    uint64_t v22 = sub_BC64();
    uint64_t v24 = v23;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v20 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v22;
    *(void *)(v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v24;
    os_log(_:dso:log:_:_:)(v17, &dword_0, v21, "EndWorkout- RCHFlow Strategy: %@", 32LL, 2LL, v20);

    swift_bridgeObjectRelease(v20);
    sub_6240( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v26 = swift_allocError(v15, v25, 0LL, 0LL);
    *uint64_t v27 = v16;
    swift_retain(v16);
    a3((void *)v26, 1LL);
    swift_errorRelease(v26);
    swift_release(v16);
  }

id sub_3586C(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8BE48);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v30 = (char *)&v30 - v5;
  uint64_t v6 = type metadata accessor for HealthNLIntent(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NLIntent(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20((char *)&v30 - v18, a1, v13);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v19, v13);
  if (v21 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_6598(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 96));
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v19, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
    sub_35FA0();
    id v22 = sub_50FE0((uint64_t)v8);
    sub_6468((uint64_t)v8, type metadata accessor for HealthNLIntent);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  else
  {
    uint64_t v23 = a1;
    uint64_t v25 = (uint64_t)v30;
    uint64_t v24 = (uint64_t)v31;
    if (v21 == enum case for Parse.directInvocation(_:))
    {
      v20(v17, v23, v13);
      sub_5A890((uint64_t)v17, v25);
      sub_6398(v25, v24);
      uint64_t v26 = type metadata accessor for DirectInvocationData(0LL);
      if (sub_63E0(v24, 1LL, v26) == 1)
      {
        sub_63EC(v25);
        sub_63EC(v24);
        id v22 = 0LL;
      }

      else
      {
        sub_5AE94();
        sub_63EC(v25);
        sub_6468(v24, type metadata accessor for DirectInvocationData);
        uint64_t v27 = sub_6358(&qword_8BE50);
        unint64_t v28 = sub_35FA0();
        else {
          id v22 = 0LL;
        }
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    }

    else
    {
      sub_6598(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
      return 0LL;
    }
  }

  return v22;
}

uint64_t type metadata accessor for EndWorkoutStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin18EndWorkoutStrategy);
}

uint64_t sub_35B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for EndWorkoutStrategy();
  return RCHFlowStrategy.makeAnnotatedIntentFromParse(parse:currentIntent:completion:)(a1, a2, a3, a4, v11, a6);
}

void sub_35BE0(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
}

uint64_t sub_35C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for EndWorkoutStrategy();
  return RCHFlowStrategy.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t sub_35C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for EndWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeAppDoesNotSupportIntentResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_35C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for EndWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeAppNotFoundOnDeviceResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_35CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for EndWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeDeviceIncompatibleResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_35D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for EndWorkoutStrategy();
  return RouteConfirmIntentResponseFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  v13,  a7);
}

uint64_t sub_35DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for EndWorkoutStrategy();
  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, v5, a3);
}

uint64_t sub_35DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for EndWorkoutStrategy();
  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, v7, a4);
}

uint64_t sub_35E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for EndWorkoutStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_35E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for EndWorkoutStrategy();
  return IntentErrorHandling.makeErrorResponse(app:intent:error:_:)(a1, a2, a3, a4, a5, v13, a7);
}

void sub_35EF0(uint64_t a1, uint64_t a2)
{
}

void sub_35F1C(uint64_t a1, uint64_t a2)
{
}

void sub_35F48(uint64_t a1, uint64_t a2)
{
}

void sub_35F74(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_35FA0()
{
  unint64_t result = qword_8C728;
  if (!qword_8C728)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INEndWorkoutIntent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_8C728);
  }

  return result;
}

uint64_t sub_35FDC( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void (*a7)(void *), uint64_t a8)
{
  uint64_t v54 = a8;
  uint64_t v55 = a7;
  uint64_t v53 = a1;
  uint64_t v52 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v10 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CATOption(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_6358((uint64_t *)&unk_8F3A0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v18);
  id v22 = (char *)&v50 - v21;
  swift_bridgeObjectRetain();
  v58._uint64_t countAndFlagsBits = a3;
  v58._object = a4;
  char v23 = sub_3E500(v58);
  if (v23 == 3)
  {
    uint64_t v24 = type metadata accessor for HealthFlowError();
    swift_allocObject(v24, 40LL, 7LL);
    uint64_t v25 = sub_BD3C(2u);
    uint64_t v26 = static os_log_type_t.error.getter(v25);
    uint64_t v27 = *(void **)Log.health.unsafeMutableAddressor(v26);
    uint64_t v28 = sub_6358(&qword_8BE60);
    uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
    *(_OWORD *)(v29 + sub_14C98(v0 + 16) = xmmword_61030;
    id v30 = v27;
    uint64_t v31 = sub_BC64();
    uint64_t v33 = v32;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v29 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v31;
    *(void *)(v29 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v33;
    os_log(_:dso:log:_:_:)(v26, &dword_0, v30, "StartWorkout- Unsupported Value Strategy: %@", 44LL, 2LL, v29);

    swift_bridgeObjectRelease(v29);
    uint64_t v34 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v35 = swift_allocError(v24, v34, 0LL, 0LL);
    *uint64_t v36 = v25;
    v56[0] = v35;
    BOOL v57 = 1;
    swift_retain(v25);
    v55(v56);
    swift_release(v25);
    unint64_t v37 = (uint64_t *)&unk_8F3E0;
    unint64_t v38 = v56;
  }

  else
  {
    char v39 = v23;
    type metadata accessor for CATGlobals(0LL);
    uint64_t v51 = CATGlobals.__allocating_init()();
    uint64_t v40 = sub_6358(&qword_8CB30);
    uint64_t v41 = swift_allocObject( v40,  ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
          + *(void *)(v14 + 72),
            *(unsigned __int8 *)(v14 + 80) | 7LL);
    *(_OWORD *)(v41 + sub_14C98(v0 + 16) = xmmword_61030;
    static CATOption.defaultMode.getter();
    v56[0] = v41;
    uint64_t v42 = sub_17A10( (unint64_t *)&unk_8F3B0,  (uint64_t (*)(uint64_t))&type metadata accessor for CATOption,  (uint64_t)&protocol conformance descriptor for CATOption);
    uint64_t v43 = sub_6358(&qword_8CB38);
    unint64_t v44 = sub_13EF0();
    dispatch thunk of SetAlgebra.init<A>(_:)(v56, v43, v44, v13, v42);
    uint64_t v45 = type metadata accessor for HealthCATWrapper(0LL);
    swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
    uint64_t v46 = sub_466D4(v51, (uint64_t)v16);
    sub_46A44(v53, v39, 0);
    swift_release(v46);
    sub_13F34((uint64_t)v22, (uint64_t)v20);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v17);
    if (EnumCaseMultiPayload == 1)
    {
      v56[0] = *v20;
    }

    else
    {
      uint64_t v48 = v52;
      (*(void (**)(char *, void *, uint64_t))(v10 + 32))(v12, v20, v52);
      sub_363D8((uint64_t)v12, v56);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v48);
    }

    BOOL v57 = EnumCaseMultiPayload == 1;
    v55(v56);
    sub_6B60((uint64_t)v56, (uint64_t *)&unk_8F3E0);
    unint64_t v37 = (uint64_t *)&unk_8F3A0;
    unint64_t v38 = v22;
  }

  return sub_6B60((uint64_t)v38, v37);
}

uint64_t sub_363D8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_6358(&qword_8C348);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Device.current.getter(v18);
  static Device.current.getter(v15);
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  sub_8734(v15, v16);
  char v9 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v7, v8);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  sub_8760((uint64_t)v6, 1LL, 1LL, v10);
  uint64_t v11 = type metadata accessor for AceOutput(0LL);
  memset(v13, 0, sizeof(v13));
  uint64_t v14 = 0LL;
  a2[3] = v11;
  a2[4] = &protocol witness table for AceOutput;
  sub_6B9C(a2);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a1,  v18,  v9 & 1,  _swiftEmptyArrayStorage,  1LL,  1LL,  v6,  _swiftEmptyArrayStorage,  v13);
  sub_6B60((uint64_t)v13, (uint64_t *)&unk_8F3F0);
  sub_6B60((uint64_t)v6, &qword_8C348);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v18);
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v15);
}

uint64_t type metadata accessor for StartWorkoutUnsupportedValueStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin36StartWorkoutUnsupportedValueStrategy);
}

uint64_t sub_36550( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void (*a7)(void *), uint64_t a8)
{
  return sub_35FDC(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_36564( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t started = type metadata accessor for StartWorkoutUnsupportedValueStrategy();
  return UnsupportedValueFlowStrategy.makeUpdatedIntentForUnsupportedValue(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  started,  a10);
}

uint64_t sub_365E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t started = type metadata accessor for StartWorkoutUnsupportedValueStrategy();
  return UnsupportedValueFlowStrategy.makeLaunchAppWithIntentOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  started,  a10);
}

uint64_t type metadata accessor for HealthWorkoutCancelCATs(uint64_t a1)
{
  uint64_t result = qword_8E810;
  if (!qword_8E810) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthWorkoutCancelCATs);
  }
  return result;
}

uint64_t sub_366A4(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_96F98);
}

void sub_366E0(uint64_t a1, uint64_t a2)
{
}

void sub_366FC()
{
}

void sub_36718(uint64_t a1)
{
}

uint64_t sub_36734(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v9 = (char *)&v18 - v8;
  uint64_t v10 = sub_6358(&qword_8C260);
  uint64_t v11 = swift_allocObject(v10, 128LL, 7LL);
  *(_OWORD *)(v11 + sub_14C98(v0 + 16) = xmmword_61440;
  uint64_t v12 = (void *)(v11 + 48);
  *(void *)(v11 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 1953459315LL;
  *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xE400000000000000LL;
  sub_6B1C(a1, (uint64_t)v9, &qword_8C258);
  uint64_t v13 = type metadata accessor for SpeakableString(0LL);
  sub_6BE8((uint64_t)v9);
  if (v14)
  {
    sub_6B60((uint64_t)v9, &qword_8C258);
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v11 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
  }

  else
  {
    *(void *)(v11 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v13;
    uint64_t v15 = sub_6B9C(v12);
    sub_6C14( (uint64_t)v15,  (uint64_t)v9,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  *(void *)(v11 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0x4E74756F6B726F77LL;
  *(void *)(v11 + sub_14C58(v0 + 88) = 0xEB00000000656D61LL;
  sub_6B1C(a2, (uint64_t)v7, &qword_8C258);
  sub_6BE8((uint64_t)v7);
  if (v14)
  {
    sub_6B60((uint64_t)v7, &qword_8C258);
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v11 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v13;
    uint64_t v16 = sub_6B9C((void *)(v11 + 96));
    sub_6C14( (uint64_t)v16,  (uint64_t)v7,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000024LL, 0x800000000006A4E0LL, v11);
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_36910()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)( 0xD000000000000029LL,  0x800000000006A4B0LL,  &_swiftEmptyArrayStorage);
}

uint64_t sub_36934(uint64_t a1)
{
  uint64_t v5 = v4 - v3;
  uint64_t v6 = sub_6358(&qword_8C260);
  uint64_t v7 = swift_allocObject(v6, 80LL, 7LL);
  *(_OWORD *)(v7 + sub_14C98(v0 + 16) = xmmword_61030;
  uint64_t v8 = (void *)(v7 + 48);
  *(void *)(v7 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x656D614E707061LL;
  *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xE700000000000000LL;
  sub_6B1C(a1, v5, &qword_8C258);
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  sub_6BE8(v5);
  if (v10)
  {
    sub_6B60(v5, &qword_8C258);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
  }

  else
  {
    *(void *)(v7 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v9;
    uint64_t v11 = sub_6B9C(v8);
    sub_6C14((uint64_t)v11, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000028LL, 0x800000000006A480LL, v7);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_36A6C()
{
  return type metadata accessor for HealthWorkoutCancelCATs(0LL);
}

uint64_t type metadata accessor for WorkoutsUnsupportedValueStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WorkoutsUnsupportedValueStrategy);
}

uint64_t sub_36A80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v10 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v39 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v38 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = sub_6358((uint64_t *)&unk_8F3A0);
  uint64_t v12 = __chkstk_darwin(v40);
  char v14 = (uint64_t *)((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = sub_6358(&qword_8C258);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = swift_retain(a1);
  uint64_t v21 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v20);
  if (v21
    && (id v22 = v21, v23 = [v21 displayAppName], v22, v23))
  {
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v37 = v10;
    uint64_t v25 = a7;
    uint64_t v27 = v26;

    swift_release(a1);
    String.toSpeakableString.getter(v24, v27);
    uint64_t v28 = v27;
    a7 = v25;
    uint64_t v10 = v37;
    swift_bridgeObjectRelease(v28);
    uint64_t v29 = type metadata accessor for SpeakableString(0LL);
    uint64_t v30 = 0LL;
  }

  else
  {
    swift_release(a1);
    uint64_t v29 = type metadata accessor for SpeakableString(0LL);
    uint64_t v30 = 1LL;
  }

  sub_8760((uint64_t)v19, v30, 1LL, v29);
  uint64_t v31 = v7[3];
  uint64_t v32 = v7[4];
  sub_8734(v7, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 24))(v19, v31, v32);
  sub_13F34((uint64_t)v16, (uint64_t)v14);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v40);
  if (EnumCaseMultiPayload == 1)
  {
    v41[0] = *v14;
  }

  else
  {
    uint64_t v35 = (uint64_t)v38;
    uint64_t v34 = v39;
    (*(void (**)(char *, void *, uint64_t))(v39 + 32))(v38, v14, v10);
    sub_363D8(v35, v41);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v10);
  }

  BOOL v42 = EnumCaseMultiPayload == 1;
  a7(v41);
  sub_6B60((uint64_t)v41, (uint64_t *)&unk_8F3E0);
  sub_6B60((uint64_t)v16, (uint64_t *)&unk_8F3A0);
  return sub_6B60((uint64_t)v19, &qword_8C258);
}

uint64_t sub_36D30()
{
  return UnsupportedValueFlowStrategy.makeUpdatedIntentForUnsupportedValue(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)();
}

uint64_t sub_36D3C()
{
  return UnsupportedValueFlowStrategy.makeLaunchAppWithIntentOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)();
}

void **sub_36D48(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void sub_36D74(id *a1)
{
}

void **sub_36D7C(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void *sub_36DB0(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **sub_36DBC(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t sub_36DEC(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      uint64_t v3 = *a1;
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_36E40(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

uint64_t type metadata accessor for WorkoutRCHFlowStrategyAsync( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WorkoutRCHFlowStrategyAsync);
}

uint64_t sub_36E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a4;
  v6[4] = a6;
  _OWORD v6[2] = a1;
  return sub_262C8((uint64_t)sub_36EB0);
}

uint64_t sub_36EB0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_36F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return sub_262C8((uint64_t)sub_36F18);
}

uint64_t sub_36F18()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    type metadata accessor for SiriKitIntentExecutionBehavior(0LL);
    id v2 = v1;
    uint64_t v3 = static SiriKitIntentExecutionBehavior.remoteIntentExecution(targetDevice:)();
  }

  else
  {
    uint64_t v3 = sub_3E728(*(void *)(v0 + 16), *(void **)(v0 + 24));
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_36F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_8E9A4);
  *(void *)(v3 + sub_14C98(v0 + 16) = v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 32);
  *uint64_t v6 = v3;
  v6[1] = sub_2616C;
  return sub_36E9C(a1, v9, v10, v7, v11, v8);
}

uint64_t sub_36FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to RCHFlowStrategyAsync.makeErrorResponse(error:)[1]);
  *(void *)(v4 + sub_14C98(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return RCHFlowStrategyAsync.makeErrorResponse(error:)(a1, a2, a3, a4);
}

uint64_t sub_37058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)[1]);
  *(void *)(v5 + sub_14C98(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1F0C0;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)(a1, a2, a3, a4, a5);
}

uint64_t sub_370DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)[1]);
  *(void *)(v5 + sub_14C98(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1F0C0;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)(a1, a2, a3, a4, a5);
}

uint64_t sub_37160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)[1]);
  *(void *)(v5 + sub_14C98(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1F0C0;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)(a1, a2, a3, a4, a5);
}

uint64_t sub_371E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)[1]);
  *(void *)(v6 + sub_14C98(v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_1ECE0;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_37278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)[1]);
  *(void *)(v6 + sub_14C98(v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_1F0C0;
  return RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_3730C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc(dword_8E9AC);
  *(void *)(v3 + sub_14C98(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1E86C;
  return sub_36F04(a1, a2, v6);
}

uint64_t sub_37370(uint64_t a1)
{
  return swift_getWitnessTable(&unk_64458, a1);
}

uint64_t sub_37380(uint64_t a1)
{
  return swift_getWitnessTable(&unk_64488, a1);
}

uint64_t sub_37390(uint64_t a1)
{
  return swift_getWitnessTable(&unk_644C0, a1);
}

uint64_t sub_373A4()
{
  uint64_t v0 = dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)();
  return swift_release(v0);
}

uint64_t sub_373C4(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v20[0];
  uint64_t v21 = v20[1];
  int64_t v4 = v20[3];
  unint64_t v5 = v20[4];
  int64_t v6 = (unint64_t)(v20[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v4 << 6);
  while (1)
  {
    char v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v9);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v15, v16, v18, v19);
    swift_bridgeObjectRelease(v19);
    uint64_t result = swift_bridgeObjectRelease(v16);
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      break;
    }
    if (v10 >= v6) {
      return swift_release(v3);
    }
    unint64_t v11 = *(void *)(v21 + 8 * v10);
    int64_t v12 = v4 + 1;
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v6) {
        return swift_release(v3);
      }
      unint64_t v11 = *(void *)(v21 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v6) {
          return swift_release(v3);
        }
        unint64_t v11 = *(void *)(v21 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v4 + 4;
          if (v4 + 4 >= v6) {
            return swift_release(v3);
          }
          unint64_t v11 = *(void *)(v21 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v4 + 5;
            if (v4 + 5 >= v6) {
              return swift_release(v3);
            }
            unint64_t v11 = *(void *)(v21 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v4 + 6;
              while (v13 < v6)
              {
                unint64_t v11 = *(void *)(v21 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }

              return swift_release(v3);
            }
          }
        }
      }
    }

id sub_37570(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MachineUtteranceBuilder(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v3 = MachineUtteranceBuilder.init()();
  uint64_t v4 = sub_373C4(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_37BCC);
  uint64_t v5 = dispatch thunk of MachineUtteranceBuilder.build()(v4);
  uint64_t v7 = v6;
  swift_release(v3);
  id v8 = sub_37604(v5, v7);
  swift_bridgeObjectRelease(v7);
  return v8;
}

id sub_37604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [objc_allocWithZone(SAStartRequest) init];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(SAInputOriginDialogButtonTapValue);
  sub_37A18(v9, v10, v8, (SEL *)&selRef_setOrigin_);
  sub_37970(a1, a2, v8);
  id v11 = [objc_allocWithZone(SASendCommands) init];
  uint64_t v12 = sub_6358(&qword_8E9B0);
  uint64_t v13 = swift_allocObject(v12, 40LL, 7LL);
  *(_OWORD *)(v13 + sub_14C98(v0 + 16) = xmmword_61780;
  *(void *)(v13 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v8;
  uint64_t v23 = v13;
  specialized Array._endMutation()(v13);
  uint64_t v14 = v23;
  id v15 = v8;
  sub_379B4(v14, v11);
  id v16 = v11;
  uint64_t v17 = UUID.init()(v16);
  uint64_t v18 = UUID.uuidString.getter(v17);
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_37A18(v18, v20, v16, (SEL *)&selRef_setAceId_);

  return v16;
}

id sub_37780(void *a1, void *a2, void *a3)
{
  id v7 = [objc_allocWithZone(SAUIConfirmationView) init];
  uint64_t v8 = sub_37A70(a1);
  if (v9)
  {
    String._bridgeToObjectiveC()();
    uint64_t v8 = sub_37C18();
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  sub_37C0C(v8, "setConfirmText:");

  uint64_t v10 = sub_37AD0(a1);
  if (v10)
  {
    sub_6358(&qword_8E9B8);
    sub_37C24();
    uint64_t v10 = sub_37C18();
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  sub_37C0C(v10, "setConfirmCommands:");

  uint64_t v11 = sub_37A70(a2);
  if (v12)
  {
    String._bridgeToObjectiveC()();
    uint64_t v11 = sub_37C18();
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  sub_37C0C(v11, "setDenyText:");

  uint64_t v13 = sub_37AD0(a2);
  if (v13)
  {
    sub_6358(&qword_8E9B8);
    sub_37C24();
    uint64_t v13 = sub_37C18();
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  sub_37C0C(v13, "setDenyCommands:");

  uint64_t v14 = sub_6358(&qword_8E9B0);
  uint64_t v15 = swift_allocObject(v14, 48LL, 7LL);
  *(_OWORD *)(v15 + sub_14C98(v0 + 16) = xmmword_64560;
  *(void *)(v15 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a1;
  *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = a2;
  uint64_t v26 = v15;
  specialized Array._endMutation()(v15);
  uint64_t v16 = v26;
  if (a3)
  {
    id v17 = a1;
    id v18 = a2;
    id v19 = a3;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
    unint64_t v21 = *(void *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFFF8LL));
    unint64_t v20 = *(void *)((char *)&dword_18 + (v26 & 0xFFFFFFFFFFFFFF8LL));
    if (v21 >= v20 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1LL);
    }
    uint64_t v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
    specialized Array._endMutation()(v22);
    uint64_t v16 = v26;
  }

  else
  {
    id v23 = a1;
    id v24 = a2;
  }

  sub_37B30(v16, v7);
  return v7;
}

void sub_37970(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setUtterance:v4];
}

void sub_379B4(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setCommands:isa];
}

void sub_37A18(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, *a4, v7);
}

uint64_t sub_37A70(void *a1)
{
  id v1 = [a1 label];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_37AD0(void *a1)
{
  id v1 = [a1 commands];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_6358(&qword_8E9B8);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

void sub_37B30(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setAllConfirmationOptions:isa];
}

unint64_t sub_37B90()
{
  unint64_t result = qword_8E9C0;
  if (!qword_8E9C0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SAUIConfirmationOption);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_8E9C0);
  }

  return result;
}

uint64_t sub_37BCC()
{
  return sub_373A4();
}

uint64_t sub_37BD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

id sub_37C0C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_37C18()
{
  return swift_bridgeObjectRelease(v0);
}

NSArray sub_37C24()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t storeEnumTagSinglePayload for GenericWorkoutIntentResponseCode( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_37C7C + 4 * byte_64585[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_37CB0 + 4 * byte_64580[v4]))();
}

uint64_t sub_37CB0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_37CB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x37CC0LL);
  }
  return result;
}

uint64_t sub_37CCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x37CD4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 8;
  return result;
}

uint64_t sub_37CD8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_37CE0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenericWorkoutIntentResponseCode()
{
  return &type metadata for GenericWorkoutIntentResponseCode;
}

unint64_t sub_37CFC(unint64_t result)
{
  if (result >= 9) {
    return 9LL;
  }
  return result;
}

uint64_t sub_37D0C(uint64_t result)
{
  return result;
}

void sub_37D14()
{
}

void sub_37D1C(uint64_t a1)
{
}

void sub_37D24(uint64_t a1)
{
}

unint64_t sub_37D2C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_37CFC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_37D54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_37D0C(*v1);
  *a1 = result;
  return result;
}

unint64_t sub_37D80()
{
  unint64_t result = qword_8E9D0;
  if (!qword_8E9D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_6465C, &type metadata for GenericWorkoutIntentResponseCode);
    atomic_store(result, (unint64_t *)&qword_8E9D0);
  }

  return result;
}

uint64_t sub_37DBC(unint64_t a1)
{
  if (a1 < 0xB) {
    return *(void *)&aUnknown[8 * a1];
  }
  uint64_t v3 = static os_log_type_t.error.getter();
  uint64_t v4 = *(void **)Log.health.unsafeMutableAddressor(v3);
  uint64_t v5 = sub_6358(&qword_8BE60);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + sub_14C98(v0 + 16) = xmmword_61030;
  uint64_t v11 = 0LL;
  unint64_t v12 = 0xE000000000000000LL;
  unint64_t v10 = a1;
  type metadata accessor for INWorkoutGoalUnitType(0LL);
  id v7 = v4;
  _print_unlocked<A, B>(_:_:)(&v10, &v11);
  uint64_t v8 = v11;
  unint64_t v9 = v12;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
  *(void *)(v6 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v8;
  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v9;
  os_log(_:dso:log:_:_:)( v3,  &dword_0,  v7,  "Unhandled INWorkoutGoalUnitType (%@), falling back to 'unknown'",  63LL,  2LL,  v6);

  swift_bridgeObjectRelease(v6);
  return 0x6E776F6E6B6E75LL;
}

void sub_37EF0()
{
  uint64_t v4 = v12;
  sub_8734(v11, v12);
  char v5 = dispatch thunk of DeviceState.isCarPlay.getter(v4);
  uint64_t v6 = _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v11);
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = Logger.workout.unsafeMutableAddressor(v6);
    sub_8894(v7, (uint64_t)v11);
    uint64_t v8 = sub_1F188((uint64_t)v1, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
    Logger.logObject.getter(v8);
    os_log_type_t v9 = sub_B33C();
    if (sub_39CA0(v9))
    {
      unint64_t v10 = (uint8_t *)sub_2F894();
      *(_WORD *)unint64_t v10 = 0;
      sub_1F1E8(&dword_0, v1, (os_log_type_t)v4, "No Mindfulness override on this platform", v10);
      sub_8870((uint64_t)v10);
    }

    (*(void (**)(os_log_s *, uint64_t))(v2 + 8))(v1, v0);
  }

  sub_2EC84();
}

void sub_37FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_37EF0();
  if (v7 == 0x8000000000000002LL)
  {
    uint64_t v8 = Logger.workout.unsafeMutableAddressor(0x8000000000000002LL);
    sub_8894(v8, (uint64_t)v16);
    uint64_t v9 = sub_1F188((uint64_t)v6, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
    unint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.debug.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)sub_2F894();
      *(_WORD *)uint64_t v12 = 0;
      sub_1F1E8(&dword_0, v10, v11, "This is an unsupported device.", v12);
      sub_8870((uint64_t)v12);
    }

    uint64_t v13 = sub_892C();
    v14(v13);
    sub_2A5C4();
  }

  else
  {
    swift_retain(a2);
  }

  sub_2EC84();
}

void sub_380F0()
{
}

void sub_38120()
{
  uint64_t v4 = Logger.workout.unsafeMutableAddressor(v3);
  sub_8894(v4, (uint64_t)v5);
  sub_1F188(v0, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  OSSignposter.init(logger:)(v0);
  sub_2EC84();
}

uint64_t sub_38198()
{
  uint64_t v1 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v44 = *(void *)(v1 - 8);
  sub_C870();
  __chkstk_darwin(v2);
  sub_C838();
  uint64_t v43 = v3;
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  sub_39D4C();
  __chkstk_darwin(v5);
  sub_17BBC();
  uint64_t v8 = v6 - v7;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = OSSignposter.logHandle.getter(v13);
  uint64_t v17 = OSSignpostID.init(log:)(v16);
  id v18 = (os_log_s *)OSSignposter.logHandle.getter(v17);
  os_signpost_type_t v19 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    unint64_t v20 = (uint8_t *)sub_2F894();
    uint64_t v42 = v4;
    uint64_t v21 = v8;
    uint64_t v22 = v1;
    uint64_t v23 = v0;
    id v24 = v20;
    *(_WORD *)unint64_t v20 = 0;
    os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
    sub_39C98(&dword_0, v18, v19, v25, "pluginWarmUp", "", v24);
    uint64_t v26 = (uint64_t)v24;
    uint64_t v0 = v23;
    uint64_t v1 = v22;
    uint64_t v8 = v21;
    uint64_t v4 = v42;
    sub_8870(v26);
  }

  sub_1F188((uint64_t)v12, (uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
  uint64_t v27 = type metadata accessor for OSSignpostIntervalState(0LL);
  sub_14DA4(v27);
  uint64_t v28 = OSSignpostIntervalState.init(id:isOpen:)(v12, 1LL);
  uint64_t v29 = (os_log_s *)OSSignposter.logHandle.getter(v28);
  uint64_t v30 = OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v31 = static os_signpost_type_t.end.getter(v30);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v32 = v0;
    uint64_t v33 = swift_retain(v28);
    uint64_t v34 = v43;
    checkForErrorAndConsumeState(state:)(v33);
    swift_release(v28);
    uint64_t v35 = v44;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v44 + 88))(v34, v1) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v36 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v1);
      uint64_t v36 = "";
    }

    uint64_t v37 = (uint8_t *)sub_2F894();
    os_signpost_id_t v38 = sub_39DCC(v37);
    sub_39C98(&dword_0, v29, v31, v38, "pluginWarmUp", v36, v37);
    sub_8870((uint64_t)v37);
    uint64_t v0 = v32;
  }

  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
  v39(v8, v4);
  swift_release(v28);
  return ((uint64_t (*)(char *, uint64_t))v39)(v15, v4);
}

void sub_3843C(char *a1)
{
  v205 = a1;
  sub_6358(&qword_8BE48);
  sub_C870();
  __chkstk_darwin(v3);
  sub_C838();
  uint64_t v5 = sub_39C48(v4);
  uint64_t v179 = type metadata accessor for DirectInvocationData(v5);
  sub_C870();
  __chkstk_darwin(v6);
  sub_11060();
  sub_39C04();
  __chkstk_darwin(v7);
  uint64_t v9 = sub_39C48((uint64_t)v178 - v8);
  uint64_t v187 = type metadata accessor for Parse.DirectInvocation(v9);
  unint64_t v186 = *(void *)(v187 - 8);
  sub_C870();
  __chkstk_darwin(v10);
  sub_C838();
  uint64_t v12 = sub_39C48(v11);
  type metadata accessor for FlowRouterX(v12);
  sub_C870();
  __chkstk_darwin(v13);
  sub_C838();
  uint64_t v15 = sub_39C48(v14);
  uint64_t v192 = type metadata accessor for OSSignpostError(v15);
  uint64_t v191 = *(void *)(v192 - 8);
  sub_C870();
  __chkstk_darwin(v16);
  sub_11060();
  sub_39C04();
  __chkstk_darwin(v17);
  sub_39CF4();
  sub_39C04();
  __chkstk_darwin(v18);
  sub_39CF4();
  sub_39C04();
  __chkstk_darwin(v19);
  uint64_t v21 = sub_39C48((uint64_t)v178 - v20);
  type metadata accessor for HealthNLIntent(v21);
  sub_C870();
  __chkstk_darwin(v22);
  sub_11060();
  sub_39C04();
  __chkstk_darwin(v23);
  uint64_t v25 = sub_39C48((uint64_t)v178 - v24);
  uint64_t v26 = type metadata accessor for NLIntent(v25);
  uint64_t v198 = *(void *)(v26 - 8);
  uint64_t v199 = v26;
  sub_C870();
  __chkstk_darwin(v27);
  sub_C838();
  uint64_t v197 = v28;
  *(void *)&__int128 v208 = type metadata accessor for Parse(0LL);
  uint64_t v29 = *(void *)(v208 - 8);
  __chkstk_darwin(v208);
  sub_11060();
  uint64_t v201 = v30;
  __chkstk_darwin(v31);
  sub_39C04();
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)v178 - v33;
  uint64_t v196 = sub_8908();
  uint64_t v35 = *(void *)(v196 - 8);
  __chkstk_darwin(v196);
  sub_11060();
  sub_39C04();
  __chkstk_darwin(v36);
  sub_39CF4();
  sub_39C04();
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)v178 - v38;
  uint64_t v206 = type metadata accessor for OSSignpostID(0LL);
  sub_39D4C();
  __chkstk_darwin(v40);
  sub_11060();
  sub_39C04();
  __chkstk_darwin(v41);
  sub_39CF4();
  sub_39C04();
  __chkstk_darwin(v42);
  sub_39CF4();
  sub_39C04();
  __chkstk_darwin(v43);
  sub_39CF4();
  sub_39C04();
  uint64_t v45 = __chkstk_darwin(v44);
  uint64_t v47 = (char *)v178 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (char *)v178 - v49;
  uint64_t v51 = v1 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin24HealthFlowDelegatePlugin_signposter;
  uint64_t v52 = OSSignposter.logHandle.getter(v48);
  uint64_t v53 = OSSignpostID.init(log:)(v52);
  uint64_t v200 = v51;
  uint64_t v54 = (os_log_s *)OSSignposter.logHandle.getter(v53);
  os_signpost_type_t v55 = static os_signpost_type_t.begin.getter();
  char v56 = OS_os_log.signpostsEnabled.getter();
  uint64_t v204 = v35;
  if ((v56 & 1) != 0)
  {
    BOOL v57 = v34;
    Swift::String v58 = v39;
    uint64_t v59 = v29;
    uint64_t v60 = (uint8_t *)sub_2F894();
    os_signpost_id_t v61 = sub_39DCC(v60);
    sub_39C98(&dword_0, v54, v55, v61, "makeFlow", "", v60);
    uint64_t v62 = (uint64_t)v60;
    uint64_t v29 = v59;
    uint64_t v39 = v58;
    uint64_t v34 = v57;
    uint64_t v35 = v204;
    sub_8870(v62);
  }

  uint64_t v203 = v2;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v47, v50, v206);
  uint64_t v63 = type metadata accessor for OSSignpostIntervalState(0LL);
  sub_14DA4(v63);
  uint64_t v207 = OSSignpostIntervalState.init(id:isOpen:)(v47, 1LL);
  uint64_t v64 = (os_log_s *)Logger.health.unsafeMutableAddressor(v207);
  sub_8894((uint64_t)v64, (uint64_t)v212);
  uint64_t v65 = *(void (**)(char *, os_log_s *, uint64_t))(v35 + 16);
  uint64_t v66 = v196;
  v65(v39, v64, v196);
  uint64_t v67 = v29;
  uint64_t v68 = v205;
  uint64_t v69 = v208;
  v195 = *(void (**)(char *))(v29 + 16);
  v195(v34);
  v194 = v39;
  sub_39D98();
  os_log_type_t v70 = sub_B33C();
  BOOL v71 = sub_39CA0(v70);
  v202 = v50;
  v183 = v65;
  if (v71)
  {
    uint64_t v72 = (uint8_t *)sub_88B0(12LL);
    uint64_t v73 = sub_88B0(32LL);
    uint64_t v210 = v73;
    *(_DWORD *)uint64_t v72 = 136315138;
    v178[1] = v72 + 4;
    uint64_t v74 = v193;
    ((void (*)(uint64_t, char *, void))v195)(v193, v34, v208);
    uint64_t v75 = String.init<A>(describing:)(v74, v208);
    uint64_t v209 = sub_173E0(v75, v76, &v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
    sub_C090();
    uint64_t v77 = *(void (**)(char *, uint64_t))(v29 + 8);
    v77(v34, v208);
    _os_log_impl(&dword_0, v64, (os_log_type_t)v39, "Workout plugin activate with %s", v72, 0xCu);
    swift_arrayDestroy(v73, 1LL);
    uint64_t v78 = v73;
    uint64_t v79 = v66;
    uint64_t v80 = v205;
    sub_8870(v78);
    uint64_t v81 = (uint64_t)v72;
    uint64_t v69 = v208;
    sub_8870(v81);

    uint64_t v82 = sub_39D6C();
    ((void (*)(uint64_t, uint64_t))v64)(v82, v79);
  }

  else
  {
    uint64_t v83 = *(void (**)(char *, uint64_t))(v29 + 8);
    v83(v34, v69);

    uint64_t v84 = sub_39D6C();
    ((void (*)(uint64_t, uint64_t))v64)(v84, v66);
    uint64_t v79 = v66;
    uint64_t v80 = v68;
    uint64_t v77 = v83;
  }

  uint64_t v85 = v201;
  sub_39D8C(v201);
  uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 88))(v85, v69);
  if ((_DWORD)v86 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_39D5C();
    uint64_t v87 = v197;
    uint64_t v88 = v198;
    uint64_t v89 = v199;
    uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v198 + 32))(v197, v85, v199);
    uint64_t v91 = static os_log_type_t.debug.getter(v90);
    LODWORD(v205) = v91;
    uint64_t v92 = (void **)Log.health.unsafeMutableAddressor(v91);
    unint64_t v93 = *v92;
    uint64_t v94 = sub_6358(&qword_8BE60);
    uint64_t v95 = sub_27F64(v94);
    __int128 v208 = xmmword_61030;
    *(_OWORD *)(v95 + sub_14C98(v0 + 16) = xmmword_61030;
    sub_AFF0( &qword_8D050,  (uint64_t (*)(uint64_t))&type metadata accessor for NLIntent,  (uint64_t)&protocol conformance descriptor for NLIntent);
    uint64_t v97 = v96;
    id v98 = v93;
    uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter(v89, v97);
    uint64_t v101 = v100;
    *(void *)(v95 + 56) = &type metadata for String;
    unint64_t v102 = sub_64A0();
    *(void *)(v95 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v102;
    *(void *)(v95 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v99;
    *(void *)(v95 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v101;
    os_log(_:dso:log:_:_:)(v205, &dword_0, v98, "Parse had NL intent: %@", 23LL, 2LL, v95);

    swift_bridgeObjectRelease(v95);
    uint64_t v103 = v190;
    uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v190, v87, v89);
    uint64_t v105 = static os_log_type_t.debug.getter(v104);
    unint64_t v106 = *v92;
    uint64_t v107 = sub_27F64(v94);
    *(_OWORD *)(v107 + sub_14C98(v0 + 16) = v208;
    id v108 = v106;
    sub_4F3A0();
    *(void *)(v107 + 56) = &type metadata for String;
    *(void *)(v107 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v102;
    *(void *)(v107 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v109;
    *(void *)(v107 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v110;
    os_log(_:dso:log:_:_:)(v105, &dword_0, v108, "Converting NL Intent -> %@", 26LL, 2LL, v107);

    uint64_t v111 = sub_C090();
    uint64_t v112 = v200;
    uint64_t v113 = (os_log_s *)OSSignposter.logHandle.getter(v111);
    static os_signpost_type_t.event.getter();
    if ((sub_39C78() & 1) != 0)
    {
      uint64_t v114 = (uint8_t *)sub_2F894();
      sub_39DC0(v114);
      sub_39D80();
      sub_39C98(&dword_0, v113, v115, v116, "nlv3IntentConverted", "", v114);
      sub_8870((uint64_t)v114);
    }

    type metadata accessor for FlowRouter(0LL);
    uint64_t v117 = v189;
    sub_2AEF0(v103, v189, type metadata accessor for HealthNLIntent);
    sub_2A184(v117);
    uint64_t v118 = sub_2A324();
    uint64_t v119 = sub_157BC();
    sub_37FF0(v119, v118);
    sub_39DAC();
    sub_10070(v103, type metadata accessor for HealthNLIntent);
    uint64_t v120 = (*(uint64_t (**)(uint64_t, uint64_t))(v198 + 8))(v197, v199);
    uint64_t v121 = (void *)OSSignposter.logHandle.getter(v120);
    uint64_t v122 = sub_39C68();
    static os_signpost_type_t.end.getter(v122);
    char v123 = sub_39C78();
    uint64_t v124 = v203;
    if ((v123 & 1) == 0) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }

  if ((_DWORD)v86 == enum case for Parse.directInvocation(_:))
  {
    sub_39D5C();
    unint64_t v102 = v186;
    uint64_t v125 = v185;
    uint64_t v126 = v187;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 32))(v185, v85, v187);
    sub_39210(v125);
    if (v127)
    {
      uint64_t v128 = sub_39D3C();
      uint64_t v129 = (void *)OSSignposter.logHandle.getter(v128);
      uint64_t v130 = sub_39C68();
      static os_signpost_type_t.end.getter(v130);
      if ((sub_39C78() & 1) != 0)
      {
        sub_39CD0();
        sub_39D28();
        sub_157BC();
        v165 = (_WORD *)sub_2F894();
        sub_39CDC(v165);
        sub_39D80();
        sub_39C84(&dword_0, v166, v167, v168, "makeFlow");
        sub_8870(v67);
      }

      uint64_t v153 = *(void (**)(unint64_t, uint64_t))(v203 + 8);
      goto LABEL_37;
    }

    uint64_t v154 = v64;
    uint64_t v155 = v193;
    sub_39D8C(v193);
    uint64_t v156 = v181;
    sub_5A890(v155, v181);
    if (sub_63E0(v156, 1LL, v179) != 1)
    {
      uint64_t v112 = v182;
      sub_39A74(v156, v182);
      type metadata accessor for FlowRouter(0LL);
      uint64_t v157 = v180;
      sub_2AEF0(v112, v180, type metadata accessor for DirectInvocationData);
      sub_2A258(v157);
      sub_2A324();
      sub_157BC();
      sub_10070(v112, type metadata accessor for DirectInvocationData);
      uint64_t v158 = sub_39D3C();
      uint64_t v121 = (void *)OSSignposter.logHandle.getter(v158);
      uint64_t v159 = sub_39C68();
      static os_signpost_type_t.end.getter(v159);
      char v160 = sub_39C78();
      uint64_t v124 = v203;
      if ((v160 & 1) == 0)
      {
LABEL_27:

        uint64_t v153 = *(void (**)(unint64_t, uint64_t))(v124 + 8);
LABEL_37:
        uint64_t v169 = v206;
        v153(v102, v206);
        swift_release(v207);
        v153((unint64_t)v202, v169);
        sub_10F48();
        return;
      }

void sub_39210(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_17BBC();
  uint64_t v7 = (char *)(v5 - v6);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v91 - v9;
  uint64_t v11 = sub_8908();
  sub_39D4C();
  __chkstk_darwin(v12);
  sub_17BBC();
  uint64_t v15 = v13 - v14;
  __chkstk_darwin(v16);
  sub_39CF4();
  sub_39C04();
  __chkstk_darwin(v17);
  sub_39C04();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v91 - v20;
  uint64_t v22 = (void *)Logger.workout.unsafeMutableAddressor(v19);
  sub_8894((uint64_t)v22, (uint64_t)v109);
  uint64_t v102 = v1;
  uint64_t v23 = *(void (**)(char *, void *, uint64_t))(v1 + 16);
  uint64_t v104 = v11;
  v23(v21, v22, v11);
  uint64_t v101 = v4;
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v103 = a1;
  uint64_t v25 = a1;
  uint64_t v26 = v3;
  uint64_t v27 = v24(v10, v25, v3);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.debug.getter(v28);
  uint64_t v100 = v28;
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v94 = v15;
  uint64_t v99 = v23;
  uint64_t v97 = v7;
  uint64_t v96 = v24;
  if (v30)
  {
    uint64_t v31 = (uint8_t *)sub_88B0(12LL);
    uint64_t v92 = sub_88B0(32LL);
    v108[0] = v92;
    uint64_t v91 = v31;
    *(_DWORD *)uint64_t v31 = 136315138;
    unint64_t v93 = v22;
    uint64_t v32 = v26;
    v24(v7, (uint64_t)v10, v26);
    uint64_t v33 = String.init<A>(describing:)(v7, v26);
    unint64_t v35 = v34;
    uint64_t v105 = sub_173E0(v33, v34, v108);
    uint64_t v22 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
    swift_bridgeObjectRelease(v35);
    sub_39D14();
    uint64_t v36 = v100;
    os_log_type_t v37 = v29;
    uint64_t v38 = v91;
    _os_log_impl(&dword_0, v100, v37, "Parse had DirectInvocation: %s", v91, 0xCu);
    uint64_t v39 = v92;
    swift_arrayDestroy(v92, 1LL);
    sub_8870(v39);
    sub_8870((uint64_t)v38);

    uint64_t v40 = sub_39D00();
    uint64_t v26 = v32;
  }

  else
  {
    sub_39D14();

    uint64_t v40 = sub_39D00();
  }

  uint64_t v41 = Parse.DirectInvocation.identifier.getter(v40);
  uint64_t v43 = v42;
  uint64_t v44 = (void *)WorkoutReminderAnnouncementDirectInvocation.identifier.unsafeMutableAddressor();
  if (v41 == *v44 && v43 == (void *)v44[1])
  {
    sub_C090();
    goto LABEL_17;
  }

  uint64_t v46 = sub_892C();
  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v48, v49, 0LL);
  sub_C090();
  if ((v50 & 1) != 0)
  {
LABEL_17:
    sub_8894((uint64_t)v22, (uint64_t)v107);
    uint64_t v63 = v98;
    sub_39CC0(v98, (uint64_t)v22);
    sub_39D98();
    os_log_type_t v64 = sub_39DB8();
    if (sub_39C58(v64))
    {
      uint64_t v65 = (_WORD *)sub_2F894();
      sub_39DA0(v65);
      sub_39C34(&dword_0, v66, v67, "WorkoutReminderAnnouncementFlow can handle the direct invocation");
      sub_8870(v26);
    }

    sub_39D34(v63);
    sub_39934(v108);
    uint64_t v68 = type metadata accessor for DeviceResolutionService(0LL);
    uint64_t v69 = static DeviceResolutionService.sharedService.getter();
    v106[2] = v68;
    v106[3] = &protocol witness table for DeviceResolutionService;
    uint64_t v105 = v69;
    uint64_t v70 = type metadata accessor for WorkoutReminderAnnouncementFlow(0LL);
    sub_14DA4(v70);
    uint64_t v71 = WorkoutReminderAnnouncementFlow.init(flowConfig:deviceResolutionService:)(v108, &v105);
    v108[0] = v71;
    sub_AFF0( &qword_8EAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for WorkoutReminderAnnouncementFlow,  (uint64_t)&protocol conformance descriptor for WorkoutReminderAnnouncementFlow);
    Flow.eraseToAnyFlow()(v70, v72);
    swift_release(v71);
    goto LABEL_20;
  }

  uint64_t v51 = v22;
  uint64_t v52 = v97;
  sub_39CEC((uint64_t)&v110);
  uint64_t v53 = WorkoutReminderControlsDirectInvocation.init(directInvocation:)(v52);
  if (v55 == 1)
  {
    uint64_t v56 = Parse.DirectInvocation.identifier.getter(v53);
    uint64_t v58 = v57;
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(SKIFitnessDirectInvocationIdentifierAnnounceWorkoutVoiceFeedback);
    if (v56 == v59 && v58 == v60)
    {
      swift_bridgeObjectRelease_n(v58, 2LL);
    }

    else
    {
      uint64_t v62 = v60;
      uint64_t v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v59, v60, 0LL);
      sub_C090();
      swift_bridgeObjectRelease(v62);
      if ((v56 & 1) == 0) {
        goto LABEL_20;
      }
    }

    sub_8894((uint64_t)v22, (uint64_t)&v105);
    uint64_t v83 = v94;
    sub_39CC0(v94, (uint64_t)v22);
    sub_39D98();
    os_log_type_t v84 = sub_39DB8();
    if (sub_39C58(v84))
    {
      uint64_t v85 = (_WORD *)sub_2F894();
      sub_39DA0(v85);
      sub_39C34(&dword_0, v86, v87, "VoiceFeedbackAnnouncementFlow can handle the direct invocation");
      sub_8870(v56);
    }

    uint64_t v88 = sub_39D34(v83);
    uint64_t v89 = Parse.DirectInvocation.userData.getter(v88);
    VoiceFeedbackAnnouncementFlow.init(data:)(v108, v89);
    unint64_t v90 = sub_39AB8();
    Flow.eraseToAnyFlow()(&type metadata for VoiceFeedbackAnnouncementFlow, v90);
    sub_39AF4((uint64_t)v108);
  }

  else
  {
    uint64_t v73 = v53;
    uint64_t v74 = v54;
    uint64_t v75 = v55;
    sub_8894((uint64_t)v51, (uint64_t)v108);
    uint64_t v76 = v95;
    uint64_t v77 = sub_39CC0(v95, (uint64_t)v51);
    Logger.logObject.getter(v77);
    os_log_type_t v78 = sub_39DB8();
    if (sub_39C58(v78))
    {
      uint64_t v79 = (_WORD *)sub_2F894();
      sub_39DA0(v79);
      sub_39C34(&dword_0, v80, v81, "WorkoutReminderControlsFlow can handle the direct invocation");
      sub_8870(v26);
    }

    sub_39D34(v76);
    LOBYTE(v105) = v73;
    v106[0] = v74;
    v106[1] = v75;
    unint64_t v82 = sub_39B28();
    Flow.eraseToAnyFlow()(&type metadata for WorkoutReminderControlsFlow, v82);
    sub_39B64(v73, v74, v75);
  }

uint64_t sub_397D8()
{
  uint64_t v1 = type metadata accessor for OSSignposter(0LL);
  sub_110C0(v1);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_39818()
{
  return type metadata accessor for HealthFlowDelegatePlugin(0LL);
}

uint64_t type metadata accessor for HealthFlowDelegatePlugin(uint64_t a1)
{
  uint64_t result = qword_8EA08;
  if (!qword_8EA08) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthFlowDelegatePlugin);
  }
  return result;
}

uint64_t sub_39858(uint64_t a1)
{
  uint64_t result = type metadata accessor for OSSignposter(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 1LL, &v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_398C4(void *a1@<X8>)
{
  *a1 = v2;
}

uint64_t sub_398EC()
{
  return sub_38198();
}

void sub_39910(char *a1)
{
}

uint64_t sub_39934@<X0>(void *a1@<X8>)
{
  uint64_t v15 = 0LL;
  memset(v14, 0, sizeof(v14));
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0LL;
  memset(v8, 0, sizeof(v8));
  uint64_t v7 = 0LL;
  memset(v6, 0, sizeof(v6));
  uint64_t v5 = 0LL;
  memset(v4, 0, sizeof(v4));
  uint64_t v3 = 0LL;
  memset(v2, 0, sizeof(v2));
  a1[3] = &type metadata for FlowConfigModel;
  a1[4] = &protocol witness table for FlowConfigModel;
  *a1 = swift_allocObject(&unk_81960, 296LL, 7LL);
  return FlowConfigModel.init(deviceState:aceService:aceServiceAsync:sharedContextService:outputPublisher:flowFinder:networkStatusProvider:)( v14,  v12,  v10,  v8,  v6,  v4,  v2);
}

uint64_t sub_399E4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_399F4( uint8_t *a1, uint32_t a2, os_log_s *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_0, a3, a4, v13, a6, a7, a1, a2);
}

uint64_t sub_39A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DirectInvocationData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_39AB8()
{
  unint64_t result = qword_8EAA0;
  if (!qword_8EAA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for VoiceFeedbackAnnouncementFlow,  &type metadata for VoiceFeedbackAnnouncementFlow);
    atomic_store(result, (unint64_t *)&qword_8EAA0);
  }

  return result;
}

uint64_t sub_39AF4(uint64_t a1)
{
  return a1;
}

unint64_t sub_39B28()
{
  unint64_t result = qword_8EAA8;
  if (!qword_8EAA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkoutReminderControlsFlow,  &type metadata for WorkoutReminderControlsFlow);
    atomic_store(result, (unint64_t *)&qword_8EAA8);
  }

  return result;
}

uint64_t sub_39B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_39B78()
{
  if (v0[5]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2);
  }
  if (v0[10]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7);
  }
  if (v0[15]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 12);
  }
  if (v0[20]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 17);
  }
  if (v0[25]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 22);
  }
  if (v0[30]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 27);
  }
  if (v0[35]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 32);
  }
  return swift_deallocObject(v0, 296LL, 7LL);
}

void sub_39C04()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_39C14()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 296) + 88LL))(v0, *(void *)(v1 - 288));
}

void sub_39C34(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_39C48@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0LL;
}

BOOL sub_39C58(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_39C68()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t sub_39C78()
{
  return OS_os_log.signpostsEnabled.getter();
}

void sub_39C84(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
}

void sub_39C98( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6, uint8_t *a7)
{
}

BOOL sub_39CA0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_39CB0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_39CC0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v2 - 272))(a1, a2, *(void *)(v2 - 232));
}

uint64_t sub_39CD0()
{
  return swift_retain(*(void *)(v0 - 168));
}

uint64_t sub_39CDC(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

uint64_t sub_39CEC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 - 256))();
}

  ;
}

uint64_t sub_39D00()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 248) + 8LL))(v0, *(void *)(v1 - 232));
}

uint64_t sub_39D14()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 256) + 8LL))(v1, v0);
}

uint64_t sub_39D28()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t sub_39D34(uint64_t a1)
{
  return v1(a1, *(void *)(v2 - 232));
}

uint64_t sub_39D3C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

  ;
}

uint64_t sub_39D5C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v0, v2);
}

uint64_t sub_39D6C()
{
  return *(void *)(v0 - 272);
}

  ;
}

uint64_t sub_39D8C(uint64_t a1)
{
  return v2(a1, v1, v3);
}

uint64_t sub_39D98()
{
  return Logger.logObject.getter();
}

_WORD *sub_39DA0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_39DAC()
{
  return swift_release(v0);
}

uint64_t sub_39DB8()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_39DC0(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

uint64_t sub_39DCC(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

uint64_t sub_39DD8(unint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v21))
  {
    uint64_t v4 = 0LL;
    uint64_t v22 = v2;
    unint64_t v23 = v2 & 0xC000000000000001LL;
    while (1)
    {
      id v5 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2) : *(id *)(v2 + 8 * v4 + 32);
      uint64_t v6 = v5;
      uint64_t v7 = v4 + 1;
      if (__OFADD__(v4, 1LL)) {
        break;
      }
      id v8 = [v5 spokenPhrase];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v10 = v9;

      id v11 = [a2 workoutName];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = v3;
        id v14 = [v11 spokenPhrase];

        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        uint64_t v17 = v16;

        if (v25 == v15 && v10 == v17)
        {

          swift_bridgeObjectRelease(v22);
          swift_bridgeObjectRelease(v10);
LABEL_20:
          swift_bridgeObjectRelease(v10);
          return v4;
        }

        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v10, v15, v17, 0LL);
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v17);
        if ((v19 & 1) != 0)
        {

          uint64_t v10 = v22;
          goto LABEL_20;
        }

        uint64_t v3 = v13;

        uint64_t v2 = v22;
      }

      else
      {

        swift_bridgeObjectRelease(v10);
      }

      ++v4;
      if (v7 == v3) {
        goto LABEL_17;
      }
    }

    __break(1u);
LABEL_23:
    if (v2 < 0) {
      uint64_t v21 = v2;
    }
    else {
      uint64_t v21 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
  }

void *sub_39FF4(uint64_t a1)
{
  id v11 = &_swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2) {
    return v11;
  }
  for (uint64_t i = a1 + 32; ; i += 32LL)
  {
    sub_13FB8(i, (uint64_t)v10);
    uint64_t v4 = sub_AF38(0LL, (unint64_t *)&qword_8C358, &OBJC_CLASS___INSpeakableString_ptr);
    id v5 = v9;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v6 = v11[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
    uint64_t v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
    specialized ContiguousArray._endMutation()(v7);
    if (!--v2) {
      return v11;
    }
  }

  id v9 = 0LL;
  swift_release(v11);

  return 0LL;
}

uint64_t sub_3A10C(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4 = a1;
  char v5 = a2 & 1;
  return a3(&v4);
}

uint64_t sub_3A144( int a1, int a2, int a3, int a4, int a5, id a6, int a7, void (*a8)(uint64_t *), uint64_t a9)
{
  id v10 = [a6 disambiguationItems];
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = sub_39FF4(v11);
  swift_bridgeObjectRelease(v11);
  if (v12)
  {
    uint64_t v13 = sub_6358(&qword_8D060);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v14 = BasicDisambiguationItemContainer.init(_:_:)(v12, 0LL);
    uint64_t v28 = v14;
    char v29 = 0;
    a8(&v28);
  }

  else
  {
    uint64_t v15 = type metadata accessor for HealthFlowError();
    swift_allocObject(v15, 40LL, 7LL);
    uint64_t v14 = sub_BD3C(6u);
    uint64_t v16 = static os_log_type_t.error.getter(v14);
    uint64_t v17 = *(void **)Log.health.unsafeMutableAddressor(v16);
    uint64_t v18 = sub_6358(&qword_8BE60);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + sub_14C98(v0 + 16) = xmmword_61030;
    id v20 = v17;
    uint64_t v21 = sub_BC64();
    uint64_t v23 = v22;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v19 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v21;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v23;
    os_log(_:dso:log:_:_:)(v16, &dword_0, v20, "StartWorkout- Disambiguation Strategy: %@", 41LL, 2LL, v19);

    swift_bridgeObjectRelease(v19);
    sub_3B5F0( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError);
    uint64_t v25 = swift_allocError(v15, v24, 0LL, 0LL);
    *uint64_t v26 = v14;
    uint64_t v28 = v25;
    char v29 = 1;
    swift_retain(v14);
    a8(&v28);
    swift_errorRelease(v25);
  }

  swift_release(a9);
  return swift_release(v14);
}

void sub_3A35C()
{
  uint64_t v1 = sub_6358(&qword_8D180);
  uint64_t v53 = *(void *)(v1 - 8);
  sub_C870();
  __chkstk_darwin(v2);
  sub_6BD8();
  uint64_t v5 = v4 - v3;
  uint64_t v56 = sub_6358(&qword_8EB90);
  sub_C870();
  __chkstk_darwin(v6);
  sub_6BD8();
  uint64_t v9 = v8 - v7;
  type metadata accessor for HealthNLIntent(0LL);
  sub_C870();
  __chkstk_darwin(v10);
  sub_6BD8();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for Parse(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_19A20();
  uint64_t v16 = type metadata accessor for NLIntent(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  sub_C870();
  __chkstk_darwin(v18);
  sub_3B6C0(v19, v52);
  Input.parse.getter(v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 88))(v0, v14) == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_3B6E4(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 96));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v55, v0, v16);
    uint64_t v21 = sub_AF38(0LL, (unint64_t *)&qword_8C828, &OBJC_CLASS___INStartWorkoutIntent_ptr);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v13, v55, v16);
    id v22 = sub_509B0();
    sub_C594(v13);
    uint64_t v23 = sub_6358(&qword_8D048);
    unint64_t v24 = PaginatedItemContainer.items.getter(v23);
    id v25 = v22;
    uint64_t v26 = sub_39DD8(v24, v25);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v24);
    if (v28)
    {
      v57[3] = sub_6358(&qword_8D058);
      v57[0] = v26;
      v57[1] = v28;
      id v29 = v25;
      id v30 = v28;
      IntentPromptAnswer.init(answeredValue:updatedIntent:)(v57, v29, v21);
      static DisambiguationResult.chosenItem(_:)(v5, v1);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v5, v1);
      swift_storeEnumTagMultiPayload(v9, v56, 0LL);
      sub_3B6B4();
    }

    else
    {
      uint64_t v54 = sub_14048();
      sub_65A4(v54, 40LL);
      uint64_t v42 = sub_BD3C(5u);
      static os_log_type_t.error.getter(v42);
      sub_3B6DC();
      uint64_t v43 = sub_6358(&qword_8BE60);
      uint64_t v44 = (__n128 *)sub_27F64(v43);
      id v45 = sub_27FDC(v44, (__n128)xmmword_61030);
      uint64_t v46 = sub_BC64();
      unint64_t v48 = v47;
      v44[3].n128_u64[1] = (unint64_t)&type metadata for String;
      v44[4].n128_u64[0] = sub_64A0();
      v44[2].n128_u64[0] = v46;
      v44[2].n128_u64[1] = v48;
      os_log(_:dso:log:_:_:)(v21, &dword_0, v45, "StartWorkout- Disambiguation Strategy: %@", 41LL, 2LL, v44);

      swift_bridgeObjectRelease(v44);
      sub_3B5F0( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError);
      uint64_t v50 = sub_13FF8(v54, v49);
      sub_3B69C(v50, v51);
      swift_retain(v42);
      sub_3B6B4();
      swift_release(v42);
    }

    sub_AFB8(v9, &qword_8EB90);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v55, v16);
  }

  else
  {
    sub_3B6E4(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
    uint64_t v31 = sub_14048();
    sub_65A4(v31, 40LL);
    uint64_t v32 = sub_BD3C(0);
    static os_log_type_t.error.getter(v32);
    sub_3B6DC();
    uint64_t v33 = sub_6358(&qword_8BE60);
    unint64_t v34 = (__n128 *)sub_27F64(v33);
    id v35 = sub_27FDC(v34, (__n128)xmmword_61030);
    uint64_t v36 = sub_BC64();
    unint64_t v38 = v37;
    v34[3].n128_u64[1] = (unint64_t)&type metadata for String;
    v34[4].n128_u64[0] = sub_64A0();
    v34[2].n128_u64[0] = v36;
    v34[2].n128_u64[1] = v38;
    os_log(_:dso:log:_:_:)(v14, &dword_0, v35, "StartWorkout- Disambiguation Strategy: %@", 41LL, 2LL, v34);

    swift_bridgeObjectRelease(v34);
    sub_3B5F0( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError);
    uint64_t v40 = sub_13FF8(v31, v39);
    sub_3B69C(v40, v41);
    swift_retain(v32);
    sub_3B6B4();
    swift_release(v32);
    sub_AFB8(v9, &qword_8EB90);
  }

  sub_10F48();
}

void sub_3A7F0( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void **), uint64_t a9)
{
  uint64_t v79 = a1;
  uint64_t v14 = type metadata accessor for CATOption(0LL);
  uint64_t v80 = *(void *)(v14 - 8);
  uint64_t v81 = v14;
  sub_C870();
  __chkstk_darwin(v15);
  sub_19A20();
  sub_6358((uint64_t *)&unk_8F3A0);
  sub_C870();
  __chkstk_darwin(v16);
  sub_6BD8();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_3B6C0(v22, v71[0]);
  swift_bridgeObjectRetain();
  v87._uint64_t countAndFlagsBits = a3;
  v87._object = a4;
  unint64_t v23 = sub_3E500(v87);
  if (v23 == 3)
  {
    uint64_t v24 = sub_14048();
    sub_65A4(v24, 40LL);
    uint64_t v25 = sub_BD3C(2u);
    uint64_t v26 = static os_log_type_t.error.getter(v25);
    Log.health.unsafeMutableAddressor(v26);
    uint64_t v27 = sub_6358(&qword_8BE60);
    uint64_t v28 = (__n128 *)sub_27F64(v27);
    id v29 = sub_27FDC(v28, (__n128)xmmword_61030);
    uint64_t v30 = sub_BC64();
    unint64_t v32 = v31;
    v28[3].n128_u64[1] = (unint64_t)&type metadata for String;
    v28[4].n128_u64[0] = sub_64A0();
    v28[2].n128_u64[0] = v30;
    v28[2].n128_u64[1] = v32;
    os_log(_:dso:log:_:_:)(v26, &dword_0, v29, "StartWorkout- Disambiguation Strategy: %@", 41LL, 2LL, v28);

    swift_bridgeObjectRelease(v28);
    sub_3B5F0( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError);
    uint64_t v34 = sub_13FF8(v24, v33);
    *id v35 = v25;
    os_log_type_t v84 = (void *)v34;
    char v86 = 1;
    swift_retain(v25);
    a8(&v84);
    swift_release(v25);
    sub_AFB8((uint64_t)&v84, (uint64_t *)&unk_8F3E0);
LABEL_19:
    sub_10F48();
    return;
  }

  char v36 = v23;
  uint64_t v75 = v9;
  uint64_t v76 = v21;
  uint64_t v77 = v20;
  os_log_type_t v78 = a8;
  static os_log_type_t.debug.getter(v23);
  unint64_t v37 = *(void **)sub_3B6DC();
  uint64_t v38 = sub_6358(&qword_8BE60);
  uint64_t v39 = sub_27F64(v38);
  __int128 v74 = xmmword_61030;
  *(_OWORD *)(v39 + sub_14C98(v0 + 16) = xmmword_61030;
  os_log_type_t v84 = 0LL;
  unint64_t v85 = 0xE000000000000000LL;
  char v83 = v36;
  id v40 = v37;
  _print_unlocked<A, B>(_:_:)(&v83, &v84);
  uint64_t v41 = v84;
  unint64_t v42 = v85;
  *(void *)(v39 + 56) = &type metadata for String;
  *(void *)(v39 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
  *(void *)(v39 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v41;
  *(void *)(v39 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v42;
  os_log(_:dso:log:_:_:)(a4, &dword_0, v40, "Generating prompt to disambiguate : %@", 38LL, 2LL, v39);

  sub_17C4C();
  uint64_t v43 = sub_6358(&qword_8D048);
  uint64_t v44 = PaginatedItemContainer.items.getter(v43);
  uint64_t v45 = v44;
  if (!((unint64_t)v44 >> 62))
  {
    uint64_t v46 = *(void *)((char *)&dword_10 + (v44 & 0xFFFFFFFFFFFFF8LL));
    if (v46) {
      goto LABEL_5;
    }
LABEL_17:
    sub_17C4C();
    unint64_t v48 = _swiftEmptyArrayStorage;
LABEL_18:
    uint64_t v58 = v82;
    sub_34580((uint64_t)v48);
    swift_bridgeObjectRelease(v48);
    type metadata accessor for DisambiguationStrategyHelper();
    uint64_t v59 = PaginatedItemContainer.items.getter(v43);
    static Device.current.getter(&v84);
    uint64_t v60 = (void *)sub_302F8();
    swift_bridgeObjectRelease(v59);
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(&v84);
    type metadata accessor for CATGlobals(0LL);
    uint64_t v61 = CATGlobals.__allocating_init()();
    uint64_t v62 = sub_6358(&qword_8CB30);
    uint64_t v63 = swift_allocObject( v62,  ((*(unsigned __int8 *)(v80 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))
          + *(void *)(v80 + 72),
            *(unsigned __int8 *)(v80 + 80) | 7LL);
    *(_OWORD *)(v63 + sub_14C98(v0 + 16) = v74;
    static CATOption.defaultMode.getter();
    os_log_type_t v84 = (void *)v63;
    sub_3B5F0( (unint64_t *)&unk_8F3B0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CATOption);
    uint64_t v65 = v64;
    uint64_t v66 = sub_6358(&qword_8CB38);
    sub_DA6C((unint64_t *)&qword_8F3C0, &qword_8CB38);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v84, v66, v67, v81, v65);
    uint64_t v68 = type metadata accessor for HealthCATWrapper(0LL);
    swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
    uint64_t v69 = sub_466D4(v61, v75);
    sub_469B4();
    uint64_t v70 = swift_release(v69);
    __chkstk_darwin(v70);
    v71[-2] = (uint64_t)v60;
    v71[-1] = v58;
    sub_4A714((void (*)(uint64_t))sub_3B624, (uint64_t)&v84);
    v78(&v84);

    sub_AFB8((uint64_t)&v84, (uint64_t *)&unk_8F3E0);
    sub_AFB8(v19, (uint64_t *)&unk_8F3A0);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v58, v77);
    goto LABEL_19;
  }

  if (v44 >= 0) {
    v44 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v46 = _CocoaArrayWrapper.endIndex.getter(v44);
  if (!v46) {
    goto LABEL_17;
  }
LABEL_5:
  os_log_type_t v84 = _swiftEmptyArrayStorage;
  sub_3B5D4(0, v46 & ~(v46 >> 63), 0);
  if ((v46 & 0x8000000000000000LL) == 0)
  {
    v71[0] = v43;
    v71[1] = a7;
    uint64_t v72 = v19;
    uint64_t v73 = a9;
    uint64_t v47 = 0LL;
    unint64_t v48 = v84;
    do
    {
      if ((v45 & 0xC000000000000001LL) != 0) {
        id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v45);
      }
      else {
        id v49 = *(id *)(v45 + 8 * v47 + 32);
      }
      uint64_t v50 = v49;
      id v51 = objc_msgSend(v49, "spokenPhrase", v71[0]);
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      uint64_t v54 = v53;

      os_log_type_t v84 = v48;
      unint64_t v56 = v48[2];
      unint64_t v55 = v48[3];
      if (v56 >= v55 >> 1)
      {
        sub_3B5D4(v55 > 1, v56 + 1, 1);
        unint64_t v48 = v84;
      }

      ++v47;
      v48[2] = v56 + 1;
      uint64_t v57 = &v48[2 * v56];
      v57[4] = v52;
      void v57[5] = v54;
    }

    while (v46 != v47);
    sub_17C4C();
    uint64_t v19 = v72;
    uint64_t v43 = v71[0];
    goto LABEL_18;
  }

  __break(1u);
}

uint64_t sub_3ADD8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = sub_6358(&qword_8C348);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Device.current.getter(v25);
  static Device.current.getter(v22);
  uint64_t v11 = v23;
  uint64_t v12 = v24;
  sub_8734(v22, v23);
  LOBYTE(v11) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v11, v12);
  uint64_t v13 = sub_6358(&qword_8E9B0);
  uint64_t v14 = swift_allocObject(v13, 40LL, 7LL);
  *(_OWORD *)(v14 + sub_14C98(v0 + 16) = xmmword_61780;
  *(void *)(v14 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2;
  *(void *)&v20[0] = v14;
  specialized Array._endMutation()(v14);
  uint64_t v15 = *(void *)&v20[0];
  uint64_t v16 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v10, a3, v16);
  sub_8760((uint64_t)v10, 0LL, 1LL, v16);
  uint64_t v17 = type metadata accessor for AceOutput(0LL);
  memset(v20, 0, sizeof(v20));
  uint64_t v21 = 0LL;
  a4[3] = v17;
  a4[4] = &protocol witness table for AceOutput;
  sub_6B9C(a4);
  id v18 = a2;
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a1,  v25,  v11 & 1,  v15,  1LL,  1LL,  v10,  _swiftEmptyArrayStorage,  v20);
  swift_bridgeObjectRelease(v15);
  sub_AFB8((uint64_t)v20, (uint64_t *)&unk_8F3F0);
  sub_AFB8((uint64_t)v10, &qword_8C348);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v25);
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v22);
}

uint64_t type metadata accessor for StartWorkoutDisambiguationStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin34StartWorkoutDisambiguationStrategy);
}

uint64_t sub_3AFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t started = type metadata accessor for StartWorkoutDisambiguationStrategy();
  return NeedsDisambiguationFlowStrategy.paginationStyle(app:intent:parameterName:intentResolutionResult:)( a1,  a2,  a3,  a4,  a5,  started,  a7);
}

uint64_t sub_3B034( int a1, int a2, int a3, int a4, int a5, void *a6, void (*a7)(uint64_t *), uint64_t a8)
{
  uint64_t v17 = *v8;
  swift_retain(a8);
  return sub_3A144(a1, a2, a3, a4, a5, a6, v17, a7, a8);
}

void sub_3B0BC()
{
}

void sub_3B0E0( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void **), uint64_t a9)
{
}

uint64_t sub_3B104( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t started = type metadata accessor for StartWorkoutDisambiguationStrategy();
  return NeedsDisambiguationFlowStrategy.makeRepromptOnEmptyParse(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:paginatedItems:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  started,  a11);
}

uint64_t sub_3B1A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t started = type metadata accessor for StartWorkoutDisambiguationStrategy();
  return NeedsDisambiguationFlowStrategy.makeRepromptOnLowConfidence(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:paginatedItems:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  started,  a11);
}

uint64_t sub_3B23C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t started = type metadata accessor for StartWorkoutDisambiguationStrategy();
  return NeedsDisambiguationFlowStrategy.makePromptForDeviceUnlock(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  started,  a10);
}

uint64_t sub_3B2C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t started = type metadata accessor for StartWorkoutDisambiguationStrategy();
  return NeedsDisambiguationFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  started,  a10);
}

uint64_t sub_3B344( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t started = type metadata accessor for StartWorkoutDisambiguationStrategy();
  return ParameterResolutionHandling.makeFlowCancelledResponse(app:intent:parameterName:_:)( a1,  a2,  a3,  a4,  a5,  a6,  started,  a8);
}

uint64_t sub_3B3B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t started = type metadata accessor for StartWorkoutDisambiguationStrategy();
  return ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  started,  a9);
}

uint64_t sub_3B434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandling.makeFlowCancelledResponse(app:intent:parameterName:)[1]);
  *(void *)(v7 + sub_14C98(v0 + 16) = v14;
  uint64_t started = type metadata accessor for StartWorkoutDisambiguationStrategy();
  *uint64_t v14 = v7;
  v14[1] = sub_8640;
  return ParameterResolutionHandling.makeFlowCancelledResponse(app:intent:parameterName:)( a1,  a2,  a3,  a4,  a5,  started,  a7);
}

uint64_t sub_3B4D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:)[1]);
  *(void *)(v8 + sub_14C98(v0 + 16) = v16;
  uint64_t started = type metadata accessor for StartWorkoutDisambiguationStrategy();
  *uint64_t v16 = v8;
  v16[1] = sub_885C;
  return ParameterResolutionHandling.makeErrorResponse(app:intent:parameterName:error:)( a1,  a2,  a3,  a4,  a5,  a6,  started,  a8);
}

void sub_3B57C(uint64_t a1, uint64_t a2)
{
}

void sub_3B5A8()
{
}

void sub_3B5D4(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_3B5F0(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v4 = a3(a2);
    atomic_store(sub_DD8C(v4), a1);
  }

  sub_6590();
}

uint64_t sub_3B624@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_3ADD8(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), a2);
}

void sub_3B62C(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_3B648(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_3B664(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_3B680(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

uint64_t sub_3B69C(uint64_t a1, void *a2)
{
  *a2 = v2;
  *uint64_t v3 = a1;
  return swift_storeEnumTagMultiPayload(v3, *(void *)(v4 - 144), 1LL);
}

uint64_t sub_3B6B4()
{
  return (*(uint64_t (**)(uint64_t))(v1 - 128))(v0);
}

void sub_3B6C0(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 15_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_3B6DC()
{
  return Log.health.unsafeMutableAddressor();
}

uint64_t sub_3B6E4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t defaultWorkoutApp(for:workoutName:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for DeviceIdiom(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DeviceIdiom.watch(_:), v4);
  LOBYTE(a1) = static DeviceIdiom.== infix(_:_:)(a1, v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((a1 & 1) == 0)
  {
    uint64_t v8 = 10LL;
    return HealthApps.app.getter(v8);
  }

  if (a2 == 84)
  {
    uint64_t v8 = 5LL;
    return HealthApps.app.getter(v8);
  }

  return defaultWatchApp(for:)(a2);
}

uint64_t defaultWatchApp(for:)(char a1)
{
  uint64_t v1 = 5LL;
  if (a1 == 79)
  {
    else {
      uint64_t v1 = 5LL;
    }
  }

  return HealthApps.app.getter(v1);
}

uint64_t type metadata accessor for CancelWorkoutContinueInAppStrategy(uint64_t a1)
{
  uint64_t result = qword_8EBC0;
  if (!qword_8EBC0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CancelWorkoutContinueInAppStrategy);
  }
  return result;
}

uint64_t type metadata accessor for FitnessCATs(uint64_t a1)
{
  uint64_t result = qword_8EC88;
  if (!qword_8EC88) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FitnessCATs);
  }
  return result;
}

uint64_t sub_3B870(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_96FA8);
}

uint64_t sub_3B8AC()
{
  return type metadata accessor for FitnessCATs(0LL);
}

unint64_t sub_3B8B4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_7F490, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_3B8FC(char a1)
{
  return qword_64AB0[a1];
}

uint64_t getEnumTagSinglePayload for HealthConfirmation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for HealthConfirmation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_3B9F0 + 4 * byte_64975[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_3BA24 + 4 * byte_64970[v4]))();
}

uint64_t sub_3BA24(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3BA2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x3BA34LL);
  }
  return result;
}

uint64_t sub_3BA40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x3BA48LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_3BA4C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3BA54(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthConfirmation()
{
  return &type metadata for HealthConfirmation;
}

unint64_t sub_3BA74()
{
  unint64_t result = qword_8ECD8;
  if (!qword_8ECD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_64A44, &type metadata for HealthConfirmation);
    atomic_store(result, (unint64_t *)&qword_8ECD8);
  }

  return result;
}

void sub_3BAB0()
{
}

void sub_3BABC()
{
}

uint64_t sub_3BAC4(uint64_t a1)
{
  return sub_B86C(a1, *v1);
}

void sub_3BACC(uint64_t a1)
{
}

unint64_t sub_3BAD4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_3B8B4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_3BB00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_3B8FC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_3BB28(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_3BBFC();
  unint64_t v5 = sub_3BC38();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v4, v5);
}

unint64_t sub_3BB80()
{
  unint64_t result = qword_8ECE0;
  if (!qword_8ECE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_649B4, &type metadata for HealthConfirmation);
    atomic_store(result, (unint64_t *)&qword_8ECE0);
  }

  return result;
}

unint64_t sub_3BBC0()
{
  unint64_t result = qword_8ECE8;
  if (!qword_8ECE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_64A84, &type metadata for HealthConfirmation);
    atomic_store(result, (unint64_t *)&qword_8ECE8);
  }

  return result;
}

unint64_t sub_3BBFC()
{
  unint64_t result = qword_8ECF0;
  if (!qword_8ECF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_649E4, &type metadata for HealthConfirmation);
    atomic_store(result, (unint64_t *)&qword_8ECF0);
  }

  return result;
}

unint64_t sub_3BC38()
{
  unint64_t result = qword_8ECF8[0];
  if (!qword_8ECF8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_64A0C, &type metadata for HealthConfirmation);
    atomic_store(result, qword_8ECF8);
  }

  return result;
}

uint64_t sub_3BC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40LL);
}

uint64_t sub_3BC7C(uint64_t a1)
{
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 248));
}

uint64_t sub_3BCD0(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + sub_14C98(v0 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 18_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  __int128 v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 22_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void **)(a2 + 240);
  *(void *)(a1 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v10;
  uint64_t v11 = a2 + 248;
  __int128 v12 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 27_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v12;
  uint64_t v13 = v12;
  uint64_t v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
  id v15 = v10;
  v14(a1 + 248, v11, v13);
  return a1;
}

void *sub_3BDF4(void *a1, void *a2)
{
  __int128 v4 = (void *)a1[30];
  __int128 v5 = (void *)a2[30];
  a1[30] = v5;
  id v6 = v5;

  sub_720C(a1 + 31, a2 + 31);
  return a1;
}

void *sub_3BE80(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t sub_3BE88(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + sub_14C98(v0 + 16) = v4;
  *(void *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 112);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 152);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 19_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 192);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + sub_14C58(v0 + 216) = *(_OWORD *)(a2 + 216);
  __int128 v7 = *(void **)(a1 + 240);
  uint64_t v8 = *(void *)(a2 + 240);
  *(void *)(a1 + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 232);
  *(void *)(a1 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v8;

  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 248));
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 26_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = *(_OWORD *)(a2 + 264);
  *(void *)(a1 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(void *)(a2 + 280);
  return a1;
}

uint64_t sub_3BF88(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 288))
    {
      LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_3BFC8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + sub_14C58(v0 + 216) = 0u;
    *(_OWORD *)(result + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0u;
    *(_OWORD *)(result + 18_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0u;
    *(_OWORD *)(result + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + sub_14C58(v0 + 88) = 0u;
    *(_OWORD *)(result + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0u;
    *(_OWORD *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 26_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 2sub_14C58(v0 + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 2sub_14C58(v0 + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for WorkoutHandleIntentStrategyAsync( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WorkoutHandleIntentStrategyAsync);
}

uint64_t sub_3C060(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  sub_8910();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_3C080()
{
  __int16 v1 = *(void **)(*(void *)(v0 + 32) + 240LL);
  if (v1)
  {
    uint64_t v2 = type metadata accessor for SiriKitIntentExecutionBehavior(0LL);
    id v3 = v1;
    static SiriKitIntentExecutionBehavior.remoteIntentExecution(targetDevice:)();
    sub_3DC3C();
  }

  else
  {
    uint64_t v2 = sub_3E728(*(void *)(v0 + 16), *(void **)(v0 + 24));
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_3C0E4()
{
  __int16 v1 = (void *)swift_task_alloc(dword_8EDCC);
  *(void *)(v0 + sub_14C98(v0 + 16) = v1;
  uint64_t v2 = sub_3DB50(v1);
  return sub_3DAB8(v2, v3, v4);
}

uint64_t sub_3C130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  uint64_t v5 = *(void *)(a3 + 16);
  v4[18] = v5;
  uint64_t v6 = type metadata accessor for IntentResolutionRecord(0LL, v5, *(void *)(a3 + 24));
  v4[19] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[20] = v7;
  v4[21] = sub_8860(v7);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v4[22] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[23] = v9;
  v4[24] = sub_8860(v9);
  uint64_t v10 = type metadata accessor for DialogPhase(0LL);
  v4[25] = sub_8860(*(void *)(v10 - 8));
  uint64_t v11 = type metadata accessor for OutputGenerationManifest(0LL);
  v4[26] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[27] = v12;
  v4[28] = sub_8860(v12);
  sub_8910();
  return sub_887C();
}

uint64_t sub_3C1D4()
{
  __int16 v1 = (void *)IntentResolutionRecord.intentResponse.getter(v0[19]);
  id v2 = [v1 _code];

  unint64_t v3 = sub_37CFC((unint64_t)v2);
  if (v3 - 3 >= 3)
  {
    if (v3 == 9)
    {
      uint64_t v10 = v0[23];
      uint64_t v9 = v0[24];
      uint64_t v12 = v0[21];
      uint64_t v11 = v0[22];
      uint64_t v13 = v0[19];
      uint64_t v14 = v0[20];
      uint64_t v15 = v0[15];
      uint64_t v16 = Logger.health.unsafeMutableAddressor(v3);
      swift_beginAccess(v16, v0 + 2, 0LL, 0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v16, v11);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v15, v13);
      id v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.error.getter(v18);
      BOOL v20 = os_log_type_enabled(v18, v19);
      uint64_t v21 = v0[23];
      uint64_t v22 = v0[24];
      uint64_t v23 = v0[22];
      uint64_t v24 = v0[19];
      if (v20)
      {
        uint64_t v52 = v0[23];
        uint64_t v48 = v0[18];
        uint64_t v25 = v0[16];
        uint64_t v49 = v0[20];
        uint64_t v51 = v0[24];
        uint64_t v26 = swift_slowAlloc(32LL, -1LL);
        uint64_t v50 = swift_slowAlloc(64LL, -1LL);
        v53[0] = v50;
        *(_DWORD *)uint64_t v26 = 136315650;
        uint64_t v27 = _typeName(_:qualified:)(v25, 0LL);
        unint64_t v29 = v28;
        v0[11] = sub_173E0(v27, v28, v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12);
        swift_bridgeObjectRelease(v29);
        *(_WORD *)(v26 + 1_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 2080;
        uint64_t v30 = _typeName(_:qualified:)(v48, 0LL);
        unint64_t v32 = v31;
        v0[12] = sub_173E0(v30, v31, v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13);
        swift_bridgeObjectRelease(v32);
        *(_WORD *)(v26 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 2048;
        uint64_t v33 = (void *)IntentResolutionRecord.intentResponse.getter(v24);
        id v34 = [v33 _code];

        sub_3DBC0(v49);
        v0[13] = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14);
        _os_log_impl(&dword_0, v18, v19, "%s received %s unknown code: %ld", (uint8_t *)v26, 0x20u);
        swift_arrayDestroy(v50, 2LL);
        sub_8870(v50);
        sub_8870(v26);

        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v23);
      }

      else
      {
        sub_3DBC0(v0[20]);

        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
      }

      uint64_t v38 = type metadata accessor for HealthFlowError();
      swift_allocObject(v38, 40LL, 7LL);
      uint64_t v39 = sub_BD3C(8u);
      unint64_t v40 = sub_87B4();
      uint64_t v41 = swift_allocError(v38, v40, 0LL, 0LL);
      uint64_t *v42 = v39;
      swift_willThrow(v41, v42, v43, v44, v45);
      uint64_t v46 = v0[25];
      swift_task_dealloc(v0[28]);
      swift_task_dealloc(v46);
      sub_88D0();
      sub_8938();
      sub_3DB34();
      __asm { BR              X0 }
    }

    v0[29] = sub_3DBF4();
    id v35 = (void *)swift_task_alloc(dword_8EDD4);
    v0[30] = v35;
    *id v35 = v0;
    v35[1] = sub_3C580;
    sub_3DB34();
    return sub_3CDCC(v36, v37);
  }

  else
  {
    v0[32] = sub_3DBF4();
    uint64_t v4 = (void *)swift_task_alloc(dword_8EDDC);
    v0[33] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_3C5E8;
    sub_3DB34();
    return sub_3C918(v5, v6, v7);
  }

uint64_t sub_3C580(uint64_t a1)
{
  unint64_t v3 = (void *)*v2;
  v3[5] = v2;
  v3[6] = a1;
  v3[7] = v1;
  uint64_t v4 = v3[30];
  v3[31] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    swift_release(v3[29]);
  }
  sub_8910();
  return sub_B110();
}

uint64_t sub_3C5E8(uint64_t a1)
{
  unint64_t v3 = (void *)*v2;
  v3[8] = v2;
  void v3[9] = a1;
  v3[10] = v1;
  uint64_t v4 = v3[33];
  v3[34] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    swift_release(v3[32]);
  }
  sub_8910();
  return sub_B110();
}

uint64_t sub_3C650()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  *(void *)(v0 + 2sub_14C58(v0 + 88) = v1;
  sub_3DAD8(v1);
  return sub_3DAC8();
}

uint64_t sub_3C6C0()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  *(void *)(v0 + 2sub_14C58(v0 + 88) = v1;
  sub_3DAD8(v1);
  return sub_3DAC8();
}

uint64_t sub_3C730()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 288LL);
  *(void *)(*(void *)v1 + 296LL) = v0;
  swift_task_dealloc(v2);
  sub_8910();
  return sub_887C();
}

uint64_t sub_3C788()
{
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 168);

  sub_3DC30(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  swift_task_dealloc(v1);
  sub_88D0();
  sub_8938();
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3C7FC()
{
  return sub_262B8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3C83C()
{
  return sub_262B8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3C87C()
{
  uint64_t v1 = *(void *)(v0 + 216);

  sub_3DC30(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_3DAA8();
  sub_88B8();
  sub_88D0();
  sub_8938();
  return sub_262B8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3C8CC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_8EDCC);
  *(void *)(v0 + sub_14C98(v0 + 16) = v1;
  uint64_t v2 = sub_3DB50(v1);
  return sub_3DAB8(v2, v3, v4);
}

uint64_t sub_3C918(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 34_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a3;
  *(void *)(v4 + 35_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v3;
  *(_BYTE *)(v4 + 4sub_14C58(v0 + 88) = a2;
  *(void *)(v4 + 336) = a1;
  uint64_t v5 = sub_6358(&qword_8C258);
  *(void *)(v4 + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = sub_8860(*(void *)(v5 - 8));
  sub_8910();
  return sub_887C();
}

void sub_3C964()
{
  uint64_t v3 = swift_retain(v1[42]);
  uint64_t v4 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v3);
  if (v4 && (id v5 = [v4 displayAppName], sub_3DC3C(), v0))
  {
    sub_3DB88();
    sub_3DB68();

    sub_3DB78();
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    swift_release(v1[42]);
  }

  uint64_t v6 = sub_3DB98();
  sub_3DBD0(v6);
  uint64_t v7 = sub_AF38(0LL, (unint64_t *)&qword_8C888, &OBJC_CLASS___INCancelWorkoutIntent_ptr);
  if (sub_2629C(v7))
  {
    uint64_t v8 = sub_262F0(v1[44]);
    uint64_t v9 = sub_26280(v8, v1[25]);
    v1[46] = v9;
    sub_3DA98(v9);
    uint64_t v10 = (uint64_t **)swift_task_alloc(dword_8DCCC);
    v1[47] = (uint64_t)v10;
    *uint64_t v10 = v1;
    v10[1] = (uint64_t *)sub_3CC8C;
    sub_262D4((uint64_t)sub_3D944);
    sub_3DB18();
    sub_2D334(v11, v12);
  }

  else
  {
    uint64_t v13 = sub_AF38(0LL, (unint64_t *)&qword_8C728, &OBJC_CLASS___INEndWorkoutIntent_ptr);
    if (sub_2629C(v13))
    {
      sub_3DC44();
      uint64_t v15 = sub_262F0(v14 + 40);
      uint64_t v16 = sub_26280(v15, v1[20]);
      v1[49] = v16;
      sub_3DA98(v16);
      uint64_t v17 = (uint64_t **)swift_task_alloc(dword_8FFD4);
      v1[50] = (uint64_t)v17;
      *uint64_t v17 = v1;
      v17[1] = (uint64_t *)sub_3CCCC;
      sub_262D4((uint64_t)sub_3D924);
      sub_3DB18();
      sub_54694(v18, v19);
    }

    else
    {
      uint64_t v20 = sub_AF38(0LL, (unint64_t *)&qword_8C7A8, &OBJC_CLASS___INPauseWorkoutIntent_ptr);
      if (sub_2629C(v20))
      {
        sub_3DC44();
        uint64_t v22 = sub_262F0(v21 + 80);
        uint64_t v23 = sub_26280(v22, v1[15]);
        v1[52] = v23;
        sub_3DA98(v23);
        uint64_t v24 = (uint64_t **)swift_task_alloc(dword_90834);
        v1[53] = (uint64_t)v24;
        *uint64_t v24 = v1;
        v24[1] = (uint64_t *)sub_3CD0C;
        sub_262D4((uint64_t)sub_3D904);
        sub_3DB18();
        sub_59930(v25, v26);
      }

      else
      {
        uint64_t v27 = sub_AF38(0LL, (unint64_t *)&qword_8BE58, &OBJC_CLASS___INResumeWorkoutIntent_ptr);
        if (sub_2629C(v27))
        {
          sub_3DC44();
          uint64_t v29 = sub_262F0(v28 + 120);
          uint64_t v30 = sub_26280(v29, v1[10]);
          v1[55] = v30;
          sub_3DA98(v30);
          unint64_t v31 = (uint64_t **)swift_task_alloc(dword_90564);
          v1[56] = (uint64_t)v31;
          uint8_t *v31 = v1;
          v31[1] = (uint64_t *)sub_3CD4C;
          sub_262D4((uint64_t)sub_3D8E4);
          sub_3DB18();
          sub_57998(v32, v33);
        }

        else
        {
          uint64_t v34 = sub_AF38(0LL, (unint64_t *)&qword_8C828, &OBJC_CLASS___INStartWorkoutIntent_ptr);
          if (sub_2629C(v34))
          {
            sub_3DC44();
            uint64_t v41 = sub_262F0(v40 + 160);
            uint64_t v42 = sub_26280(v41, v1[5]);
            v1[58] = v42;
            sub_3DA98(v42);
            uint64_t v43 = (uint64_t **)swift_task_alloc(dword_902DC);
            v1[59] = (uint64_t)v43;
            void *v43 = v1;
            v43[1] = (uint64_t *)sub_3CD8C;
            sub_262D4((uint64_t)sub_3D8C4);
            sub_3DB18();
            sub_55DD4(v44, v45);
          }

          else
          {
            sub_3DAFC( (uint64_t)"Fatal error",  v35,  v36,  v37,  0x8000000000068B10LL,  (uint64_t)"HealthFlowDelegatePlugin/WorkoutHandleIntentStrategyAsync.swift",  v38,  v39,  148LL,  0);
            sub_3DB18();
          }
        }
      }
    }
  }

uint64_t sub_3CC8C(uint64_t a1)
{
  return sub_B110();
}

uint64_t sub_3CCCC(uint64_t a1)
{
  return sub_B110();
}

uint64_t sub_3CD0C(uint64_t a1)
{
  return sub_B110();
}

uint64_t sub_3CD4C(uint64_t a1)
{
  return sub_B110();
}

uint64_t sub_3CD8C(uint64_t a1)
{
  return sub_B110();
}

uint64_t sub_3CDCC(uint64_t a1, uint64_t a2)
{
  v3[43] = a2;
  v3[44] = v2;
  v3[42] = a1;
  uint64_t v4 = sub_6358(&qword_8C258);
  v3[45] = sub_8860(*(void *)(v4 - 8));
  sub_8910();
  return sub_887C();
}

void sub_3CE14()
{
  uint64_t v3 = swift_retain(v1[42]);
  uint64_t v4 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v3);
  if (v4 && (id v5 = [v4 displayAppName], sub_3DC3C(), v0))
  {
    sub_3DB88();
    sub_3DB68();

    sub_3DB78();
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    swift_release(v1[42]);
  }

  uint64_t v6 = sub_3DB98();
  sub_3DBD0(v6);
  uint64_t v7 = sub_AF38(0LL, (unint64_t *)&qword_8C888, &OBJC_CLASS___INCancelWorkoutIntent_ptr);
  if (sub_2629C(v7))
  {
    uint64_t v8 = sub_3DB2C(v1[44]);
    sub_3D98C(v8, v1[25]);
    uint64_t v9 = sub_3DA7C();
    v1[46] = v9;
    sub_3DBB4(v9);
    uint64_t v10 = (void *)swift_task_alloc(dword_8DCDC);
    v1[47] = (uint64_t)v10;
    sub_B358(v10, (uint64_t)sub_3D174);
    sub_3DA84(v11);
    sub_3DB18();
    sub_2D6AC(v12, v13, v14, v15);
  }

  else
  {
    uint64_t v16 = sub_AF38(0LL, (unint64_t *)&qword_8C728, &OBJC_CLASS___INEndWorkoutIntent_ptr);
    if (sub_2629C(v16))
    {
      sub_3DC24();
      uint64_t v18 = sub_3DB2C(v17 + 40);
      sub_3D98C(v18, v1[20]);
      uint64_t v19 = sub_3DA7C();
      v1[49] = v19;
      sub_3DBB4(v19);
      uint64_t v20 = (void *)swift_task_alloc(dword_8FFE4);
      v1[50] = (uint64_t)v20;
      sub_B358(v20, (uint64_t)sub_3D21C);
      sub_3DA84(v21);
      sub_3DB18();
      sub_54A0C(v22, v23, v24, v25);
    }

    else
    {
      uint64_t v26 = sub_AF38(0LL, (unint64_t *)&qword_8C7A8, &OBJC_CLASS___INPauseWorkoutIntent_ptr);
      if (sub_2629C(v26))
      {
        sub_3DC24();
        uint64_t v28 = sub_3DB2C(v27 + 80);
        sub_3D98C(v28, v1[15]);
        uint64_t v29 = sub_3DA7C();
        v1[52] = v29;
        sub_3DBB4(v29);
        uint64_t v30 = (void *)swift_task_alloc(dword_90844);
        v1[53] = (uint64_t)v30;
        sub_B358(v30, (uint64_t)sub_3D2C4);
        sub_3DA84(v31);
        sub_3DB18();
        sub_59C9C(v32, v33, v34, v35);
      }

      else
      {
        uint64_t v36 = sub_AF38(0LL, (unint64_t *)&qword_8BE58, &OBJC_CLASS___INResumeWorkoutIntent_ptr);
        if (sub_2629C(v36))
        {
          sub_3DC24();
          uint64_t v38 = sub_3DB2C(v37 + 120);
          sub_3D98C(v38, v1[10]);
          uint64_t v39 = sub_3DA7C();
          v1[55] = v39;
          sub_3DBB4(v39);
          uint64_t v40 = (void *)swift_task_alloc(dword_90574);
          v1[56] = (uint64_t)v40;
          sub_B358(v40, (uint64_t)sub_3D36C);
          sub_3DA84(v41);
          sub_3DB18();
          sub_57D10(v42, v43, v44, v45);
        }

        else
        {
          uint64_t v46 = sub_AF38(0LL, (unint64_t *)&qword_8C828, &OBJC_CLASS___INStartWorkoutIntent_ptr);
          if (sub_2629C(v46))
          {
            sub_3DC24();
            uint64_t v53 = sub_3DB2C(v52 + 160);
            sub_3D98C(v53, v1[5]);
            uint64_t v54 = sub_3DA7C();
            v1[58] = v54;
            sub_3DBB4(v54);
            unint64_t v55 = (void *)swift_task_alloc(dword_902EC);
            v1[59] = (uint64_t)v55;
            sub_B358(v55, (uint64_t)sub_3D414);
            sub_3DB18();
            sub_56148(v56, v57, v58, v59, v60);
          }

          else
          {
            sub_3DAFC( (uint64_t)"Fatal error",  v47,  v48,  v49,  0x8000000000068B10LL,  (uint64_t)"HealthFlowDelegatePlugin/WorkoutHandleIntentStrategyAsync.swift",  v50,  v51,  103LL,  0);
            sub_3DB18();
          }
        }
      }
    }
  }

uint64_t sub_3D174(uint64_t a1)
{
  return sub_B110();
}

uint64_t sub_3D1B4()
{
  uint64_t v0 = sub_B204();
  return sub_26268(v0, v1);
}

uint64_t sub_3D1E8()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3D21C(uint64_t a1)
{
  return sub_B110();
}

uint64_t sub_3D25C()
{
  uint64_t v0 = sub_B204();
  return sub_26268(v0, v1);
}

uint64_t sub_3D290()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3D2C4(uint64_t a1)
{
  return sub_B110();
}

uint64_t sub_3D304()
{
  uint64_t v0 = sub_B204();
  return sub_26268(v0, v1);
}

uint64_t sub_3D338()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3D36C(uint64_t a1)
{
  return sub_B110();
}

uint64_t sub_3D3AC()
{
  uint64_t v0 = sub_B204();
  return sub_26268(v0, v1);
}

uint64_t sub_3D3E0()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3D414(uint64_t a1)
{
  return sub_B110();
}

uint64_t sub_3D454()
{
  uint64_t v0 = sub_B204();
  return sub_26268(v0, v1);
}

uint64_t sub_3D488()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3D4BC(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t (*a4)(void))
{
  unsigned int v6 = a3;
  sub_B078(a2, a1);
  uint64_t result = a4(0LL);
  uint64_t v8 = a1 + *(int *)(result + 24);
  *(double *)uint64_t v8 = (double)v6;
  *(_BYTE *)(v8 + 8) = 0;
  return result;
}

uint64_t sub_3D51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + sub_14C98(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_3D598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + sub_14C98(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_3D614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + sub_14C98(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_3D690()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_8EDE4);
  *(void *)(v0 + sub_14C98(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1F0C0;
  return sub_3C0E4();
}

uint64_t sub_3D6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + sub_14C98(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_3D774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + sub_14C98(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1F0C0;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_3D7F0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_8EDC4);
  *(void *)(v0 + sub_14C98(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1F0C0;
  return sub_3C8CC();
}

uint64_t sub_3D858(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)swift_task_alloc(dword_8EDEC);
  *(void *)(v2 + sub_14C98(v0 + 16) = v5;
  *id v5 = v2;
  v5[1] = sub_1E86C;
  return sub_3C060(a1, a2);
}

uint64_t sub_3D8B4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_64B50, a1);
}

uint64_t sub_3D8C4()
{
  return sub_3D4BC(v0, v1, v2, type metadata accessor for WorkoutStartErrorWithCodeParameters);
}

uint64_t sub_3D8E4()
{
  return sub_3D4BC(v0, v1, v2, type metadata accessor for WorkoutResumeErrorWithCodeParameters);
}

uint64_t sub_3D904()
{
  return sub_3D4BC(v0, v1, v2, type metadata accessor for WorkoutPauseErrorWithCodeParameters);
}

uint64_t sub_3D924()
{
  return sub_3D4BC(v0, v1, v2, type metadata accessor for WorkoutEndErrorWithCodeParameters);
}

uint64_t sub_3D944()
{
  return sub_3D4BC(v0, v1, v2, type metadata accessor for WorkoutCancelErrorWithCodeParameters);
}

BOOL sub_3D98C(uint64_t a1, uint64_t a2)
{
  return App.isFirstParty()();
}

uint64_t sub_3D9A4(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  id v5 = (void *)(v3 - 8);
  *id v5 = *v2;
  v4[39] = v2;
  v4[40] = a1;
  v4[41] = v1;
  uint64_t v6 = v4[59];
  *id v5 = *v2;
  v4[60] = v1;
  return swift_task_dealloc(v6);
}

uint64_t sub_3D9CC(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  id v5 = (void *)(v3 - 8);
  *id v5 = *v2;
  v4[27] = v2;
  v4[28] = a1;
  v4[29] = v1;
  uint64_t v6 = v4[47];
  *id v5 = *v2;
  v4[48] = v1;
  return swift_task_dealloc(v6);
}

uint64_t sub_3D9F4(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  id v5 = (void *)(v3 - 8);
  *id v5 = *v2;
  v4[36] = v2;
  v4[37] = a1;
  v4[38] = v1;
  uint64_t v6 = v4[56];
  *id v5 = *v2;
  v4[57] = v1;
  return swift_task_dealloc(v6);
}

uint64_t sub_3DA1C(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  id v5 = (void *)(v3 - 8);
  *id v5 = *v2;
  v4[33] = v2;
  v4[34] = a1;
  v4[35] = v1;
  uint64_t v6 = v4[53];
  *id v5 = *v2;
  v4[54] = v1;
  return swift_task_dealloc(v6);
}

uint64_t sub_3DA44(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  id v5 = (void *)(v3 - 8);
  *id v5 = *v2;
  v4[30] = v2;
  v4[31] = a1;
  v4[32] = v1;
  uint64_t v6 = v4[50];
  *id v5 = *v2;
  v4[51] = v1;
  return swift_task_dealloc(v6);
}

uint64_t sub_3DA6C()
{
  return sub_26220(*(void *)(v0 + 360));
}

uint64_t sub_3DA74()
{
  return swift_task_dealloc(*(void *)(v0 + 360));
}

uint64_t sub_3DA7C()
{
  return swift_task_alloc(32LL);
}

uint64_t sub_3DA84@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_3DA98(uint64_t result)
{
  *(void *)(result + sub_14C98(v0 + 16) = v1;
  *(_BYTE *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v2;
  return result;
}

uint64_t sub_3DAA8()
{
  return swift_task_dealloc(*(void *)(v0 + 224));
}

uint64_t sub_3DAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_3C130(a1, a2, a3);
}

uint64_t sub_3DAC8()
{
  return ((uint64_t (*)(void))dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:))();
}

uint64_t sub_3DAD8(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 112);
}

uint64_t sub_3DAFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, 0xD000000000000016LL, a5, a6, 63LL, 2LL, a9, a10);
}

  ;
}

uint64_t sub_3DB2C(uint64_t a1)
{
  return sub_25230(a1, v1);
}

  ;
}

uint64_t sub_3DB50(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return v3;
}

uint64_t sub_3DB68()
{
  return swift_release(v0);
}

uint64_t sub_3DB78()
{
  return String.toSpeakableString.getter(v0, v1);
}

uint64_t sub_3DB88()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_3DB98()
{
  return type metadata accessor for SpeakableString(0LL);
}

  ;
}

uint64_t sub_3DBB4(uint64_t result)
{
  *(void *)(result + sub_14C98(v0 + 16) = v1;
  return result;
}

uint64_t sub_3DBC0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_3DBD0(uint64_t a1)
{
  return sub_8760(v1, v2, 1LL, a1);
}

uint64_t sub_3DBF4()
{
  return IntentResolutionRecord.app.getter(*(void *)(v0 + 152));
}

void *sub_3DC00()
{
  *(void *)(v2 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v0;
  return sub_8734((void *)(v1 + 248), *(void *)(v1 + 272));
}

  ;
}

uint64_t sub_3DC30@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void sub_3DC3C()
{
}

  ;
}

uint64_t type metadata accessor for HealthWorkoutStartCATs(uint64_t a1)
{
  uint64_t result = qword_8EDF0;
  if (!qword_8EDF0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthWorkoutStartCATs);
  }
  return result;
}

uint64_t sub_3DC88(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_96FB8);
}

uint64_t sub_3DCC4()
{
  return type metadata accessor for HealthWorkoutStartCATs(0LL);
}

uint64_t sub_3DCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_15914(a1, a2, a3, a4, a5, (uint64_t)&unk_81CC0, (uint64_t)&unk_8EF18);
}

uint64_t sub_3DCE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  return swift_task_switch(sub_3DCFC, 0LL, 0LL);
}

uint64_t sub_3DCFC()
{
  uint64_t v1 = sub_16030();
  id v2 = [(id)objc_opt_self(NSBundle) bundleForClass:v1];
  uint64_t v3 = sub_1600C((uint64_t)v2);
  uint64_t v4 = sub_14DA4(v3);
  *(void *)(v0 + 48) = ResponseFactory.init()(v4);
  id v5 = (void *)sub_15FF8((uint64_t)&dword_8EF08);
  *(void *)(v0 + 56) = v5;
  *id v5 = v0;
  v5[1] = sub_3E4F4;
  unint64_t v6 = sub_1603C(18LL);
  return sub_15FEC(v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_3DD9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_15914(a1, a2, a3, a4, a5, (uint64_t)&unk_81C98, (uint64_t)&unk_8EF00);
}

uint64_t sub_3DDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  return swift_task_switch(sub_3DDCC, 0LL, 0LL);
}

uint64_t sub_3DDCC()
{
  uint64_t v1 = sub_16030();
  id v2 = [(id)objc_opt_self(NSBundle) bundleForClass:v1];
  uint64_t v3 = sub_1600C((uint64_t)v2);
  uint64_t v4 = sub_14DA4(v3);
  *(void *)(v0 + 48) = ResponseFactory.init()(v4);
  id v5 = (void *)sub_15FF8((uint64_t)&dword_8EF08);
  *(void *)(v0 + 56) = v5;
  *id v5 = v0;
  v5[1] = sub_3DE6C;
  unint64_t v6 = sub_1603C(23LL);
  return sub_15FEC(v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_3DE6C()
{
  uint64_t v2 = v1[6];
  uint64_t v3 = (void *)v1[5];
  sub_14D6C(v1[7]);

  swift_release(v2);
  return sub_3E4F8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t type metadata accessor for CancelWorkoutHandleIntentStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin33CancelWorkoutHandleIntentStrategy);
}

uint64_t sub_3DECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for CancelWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_3DF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for CancelWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  v13,  a7);
}

uint64_t sub_3DF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for CancelWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_3E004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_3DCCC(a1, a2, a3, a4, a5);
}

uint64_t sub_3E024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for CancelWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_3E08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for CancelWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeInProgressResponse(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_3E0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_3DD9C(a1, a2, a3, a4, a5);
}

uint64_t sub_3E114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CancelWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, v5, a3);
}

uint64_t sub_3E14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CancelWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, v7, a4);
}

uint64_t sub_3E19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CancelWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:)(a1, a2, v7, a4);
}

uint64_t sub_3E1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for CancelWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, v11, a6);
}

unint64_t sub_3E238()
{
  unint64_t result = qword_8EEF0;
  if (!qword_8EEF0)
  {
    uint64_t v1 = type metadata accessor for CancelWorkoutHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable(&unk_64C94, v1);
    atomic_store(result, &qword_8EEF0);
  }

  return result;
}

uint64_t sub_3E278()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_8EEFC);
  *(void *)(v0 + sub_14C98(v0 + 16) = v1;
  uint64_t v2 = sub_15FC8(v1);
  return sub_3DDB0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_3E2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[25] = a5;
  v6[26] = a6;
  v6[23] = a2;
  v6[24] = a3;
  v6[22] = a1;
  v6[20] = type metadata accessor for ResponseFactory(0LL);
  v6[21] = &protocol witness table for ResponseFactory;
  v6[17] = a4;
  swift_retain(a4);
  return sub_887C();
}

uint64_t sub_3E32C()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = (void *)v0[24];
  uint64_t v3 = v0[22];
  swift_bridgeObjectRetain();
  id v4 = v2;
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  v0[2] = v3;
  v0[3] = v1;
  v0[4] = v4;
  sub_25230((uint64_t)(v0 + 17), (uint64_t)(v0 + 5));
  v0[10] = v5;
  uint64_t v6 = (void *)swift_task_alloc(dword_8DC24);
  v0[27] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_3E404;
  return sub_2B800((uint64_t)(v0 + 11), (uint64_t)(v0 + 2), (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_3E404()
{
  return sub_887C();
}

uint64_t sub_3E43C()
{
  return sub_3E4F8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3E49C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_8EF14);
  *(void *)(v0 + sub_14C98(v0 + 16) = v1;
  uint64_t v2 = sub_15FC8(v1);
  return sub_3DCE0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_3E4F8(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_3E500(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_7EE40, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_3E548(char a1)
{
  if (a1) {
    return 0xD000000000000013LL;
  }
  else {
    return 0x4E74756F6B726F77LL;
  }
}

uint64_t storeEnumTagSinglePayload for SlotNames(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_3E5F0 + 4 * byte_64D55[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_3E624 + 4 * byte_64D50[v4]))();
}

uint64_t sub_3E624(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3E62C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x3E634LL);
  }
  return result;
}

uint64_t sub_3E640(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x3E648LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_3E64C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3E654(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SlotNames()
{
  return &type metadata for SlotNames;
}

void sub_3E670(char *a1, unsigned __int8 *a2)
{
}

void sub_3E67C()
{
}

uint64_t sub_3E684(uint64_t a1)
{
  return sub_B69C(a1, *v1);
}

void sub_3E68C(uint64_t a1)
{
}

unint64_t sub_3E694@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_3E500(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_3E6C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_3E548(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_3E6EC()
{
  unint64_t result = qword_8EF20;
  if (!qword_8EF20)
  {
    unint64_t result = swift_getWitnessTable(&unk_64DFC, &type metadata for SlotNames);
    atomic_store(result, (unint64_t *)&qword_8EF20);
  }

  return result;
}

uint64_t sub_3E728(uint64_t a1, void *a2)
{
  os_log_type_t v3 = static os_log_type_t.info.getter();
  uint64_t v4 = *(void **)Log.health.unsafeMutableAddressor();
  if (os_log_type_enabled((os_log_t)v4, v3))
  {
    id v5 = a2;
    uint64_t v6 = v4;
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    id v9 = [v5 typeName];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    unint64_t v12 = v11;

    uint64_t v14 = sub_173E0(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);

    swift_bridgeObjectRelease(v12);
    _os_log_impl(&dword_0, v6, v3, "Returning standard execution behavior for %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL);
    sub_8870(v8);
    sub_8870((uint64_t)v7);
  }

  type metadata accessor for SiriKitIntentExecutionBehavior(0LL);
  return static SiriKitIntentExecutionBehavior.standard()();
}

uint64_t type metadata accessor for StrategyHelper()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin14StrategyHelper);
}

uint64_t type metadata accessor for WorkoutCATPatternsExecutor(uint64_t a1)
{
  return sub_2DA24(a1, (uint64_t *)&unk_8EFC0, (uint64_t)&nominal type descriptor for WorkoutCATPatternsExecutor);
}

uint64_t sub_3E8DC(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_96FC8);
}

uint64_t sub_3E918()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_6358(&qword_8C258);
  uint64_t v3 = __chkstk_darwin(v2);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = sub_6358(&qword_8C260);
  uint64_t v9 = swift_allocObject(v8, 128LL, 7LL);
  *(_OWORD *)(v9 + sub_14C98(v0 + 16) = xmmword_61440;
  uint64_t v10 = (void *)(v9 + 48);
  *(void *)(v9 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 1953459315LL;
  *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xE400000000000000LL;
  sub_6B1C(v1, (uint64_t)v7, &qword_8C258);
  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)v7, 1LL, v11) == 1)
  {
    sub_6B60((uint64_t)v7, &qword_8C258);
    *(_OWORD *)uint64_t v10 = 0u;
    *(_OWORD *)(v9 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
  }

  else
  {
    *(void *)(v9 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v11;
    unint64_t v12 = sub_6B9C(v10);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v12, v7, v11);
  }

  *(void *)(v9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 1651664246LL;
  *(void *)(v9 + sub_14C58(v0 + 88) = 0xE400000000000000LL;
  uint64_t v13 = type metadata accessor for WorkoutPromptForSlotValueParameters(0LL);
  sub_6B1C(v1 + *(int *)(v13 + 20), (uint64_t)v5, &qword_8C258);
  if (sub_63E0((uint64_t)v5, 1LL, v11) == 1)
  {
    sub_6B60((uint64_t)v5, &qword_8C258);
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v9 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v11;
    uint64_t v14 = sub_6B9C((void *)(v9 + 96));
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v14, v5, v11);
  }

  return v9;
}

uint64_t sub_3EAD8()
{
  uint64_t v1 = sub_6358(&qword_8C260);
  uint64_t v2 = swift_allocObject(v1, 464LL, 7LL);
  *(_OWORD *)(v2 + sub_14C98(v0 + 16) = xmmword_63680;
  *(void *)(v2 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x6E69577473726966LL;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xEF657A6953776F64LL;
  sub_2EB94(v0, (uint64_t)v17);
  sub_2EB94((uint64_t)v17, (uint64_t)&v18);
  if ((v19 & 1) != 0)
  {
    uint64_t v3 = 0LL;
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0LL;
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v3 = &type metadata for Double;
    uint64_t v4 = v18;
  }

  *(void *)(v2 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v3;
  strcpy((char *)(v2 + 80), "isConclusion");
  *(_BYTE *)(v2 + 93) = 0;
  *(_WORD *)(v2 + 9_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = -5120;
  *(_BYTE *)(v2 + 96) = *(_BYTE *)(v0 + 9);
  *(void *)(v2 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = &type metadata for Bool;
  strcpy((char *)(v2 + 128), "isFirstWindow");
  *(_WORD *)(v2 + 14_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -4864;
  *(_BYTE *)(v2 + sub_14C98(v0 + 144) = *(_BYTE *)(v0 + 10);
  *(void *)(v2 + 168) = &type metadata for Bool;
  strcpy((char *)(v2 + 176), "isLastWindow");
  *(_BYTE *)(v2 + 18sub_1F08C(v0 + 9) = 0;
  *(_WORD *)(v2 + 19_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = -5120;
  *(_BYTE *)(v2 + 19_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_BYTE *)(v0 + 11);
  *(void *)(v2 + sub_14C58(v0 + 216) = &type metadata for Bool;
  *(void *)(v2 + 22_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0xD000000000000016LL;
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x8000000000069E40LL;
  *(_BYTE *)(v2 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_BYTE *)(v0 + 12);
  *(void *)(v2 + 26_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = &type metadata for Bool;
  *(void *)(v2 + 27_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x736D657469LL;
  *(void *)(v2 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xE500000000000000LL;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = sub_6358(&qword_8F020);
  *(void *)(v2 + 2sub_14C58(v0 + 88) = v5;
  *(void *)(v2 + 31_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v6;
  *(void *)(v2 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0xD000000000000013LL;
  *(void *)(v2 + 328) = 0x8000000000069E60LL;
  sub_2EB94(v0 + 24, (uint64_t)v16);
  sub_2EB94((uint64_t)v16, (uint64_t)&v20);
  if ((v21 & 1) != 0)
  {
    uint64_t v7 = 0LL;
    *(void *)(v2 + 34_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0LL;
    *(void *)(v2 + 35_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v7 = &type metadata for Double;
    uint64_t v8 = v20;
  }

  *(void *)(v2 + 336) = v8;
  *(void *)(v2 + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v7;
  *(void *)(v2 + 368) = 0x6574496C61746F74LL;
  *(void *)(v2 + 376) = 0xEA0000000000736DLL;
  sub_2EB94(v0 + 40, (uint64_t)v15);
  sub_2EB94((uint64_t)v15, (uint64_t)&v22);
  if ((v23 & 1) != 0)
  {
    uint64_t v9 = 0LL;
    *(void *)(v2 + 39_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
    *(void *)(v2 + 40_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0LL;
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v9 = &type metadata for Double;
    uint64_t v10 = v22;
  }

  *(void *)(v2 + 38_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v10;
  *(void *)(v2 + 408) = v9;
  *(void *)(v2 + 4sub_14C98(v0 + 16) = 0x6953776F646E6977LL;
  *(void *)(v2 + 42_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0xEA0000000000657ALL;
  sub_2EB94(v0 + 56, (uint64_t)v14);
  sub_2EB94((uint64_t)v14, (uint64_t)&v24);
  if ((v25 & 1) != 0)
  {
    uint64_t v11 = 0LL;
    *(void *)(v2 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0LL;
    *(void *)(v2 + 448) = 0LL;
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v11 = &type metadata for Double;
    uint64_t v12 = v24;
  }

  *(void *)(v2 + 43_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v12;
  *(void *)(v2 + 456) = v11;
  sub_2EBDC(v0);
  return v2;
}

uint64_t sub_3ED98(uint64_t a1, char a2)
{
  *(_BYTE *)(v2 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2;
  *(void *)(v2 + sub_14C98(v0 + 16) = a1;
  uint64_t v3 = type metadata accessor for WorkoutPromptForSlotValueParameters(0LL);
  *(void *)(v2 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  *(void *)(v2 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_3EDF8, 0LL, 0LL);
}

uint64_t sub_3EDF8()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  char v3 = *(_BYTE *)(v0 + 72);
  type metadata accessor for SpeakableString(0LL);
  sub_3FBC8(v1);
  sub_3FBC8(v1 + *(int *)(v2 + 20));
  sub_8230(v1, v3);
  uint64_t v4 = sub_3E918();
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v4;
  uint64_t v5 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_3EEAC;
  return v7(0xD00000000000001ALL, 0x800000000006A980LL, v4);
}

uint64_t sub_3EEAC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v6 = *(void *)(*v2 + 40);
  uint64_t v5 = *(void *)(*v2 + 48);
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(v6);
  if (v1)
  {
    uint64_t v7 = sub_3EF64;
  }

  else
  {
    *(void *)(v4 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a1;
    uint64_t v7 = sub_3EF28;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_3EF28()
{
  return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v1 + 64));
}

uint64_t sub_3EF64()
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_3EF94(char a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + sub_14C58(v0 + 88) = a5;
  *(void *)(v6 + 96) = a6;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a4;
  *(_BYTE *)(v6 + 83) = a3;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2;
  *(_BYTE *)(v6 + 81) = a1;
  return swift_task_switch(sub_3EFBC, 0LL, 0LL);
}

uint64_t sub_3EFBC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  char v2 = *(_BYTE *)(v0 + 84);
  char v3 = *(_BYTE *)(v0 + 83);
  char v4 = *(_BYTE *)(v0 + 82);
  char v5 = *(_BYTE *)(v0 + 81);
  *(void *)(v0 + sub_14C98(v0 + 16) = 0LL;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(_BYTE *)(v0 + 25) = v5;
  *(_BYTE *)(v0 + 26) = v4;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7) = v3;
  *(_BYTE *)(v0 + 28) = v2;
  *(void *)(v0 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v1;
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0LL;
  *(_BYTE *)(v0 + 48) = 1;
  *(void *)(v0 + 56) = 0LL;
  *(_BYTE *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(void *)(v0 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
  *(_BYTE *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 1;
  uint64_t v6 = sub_3EAD8();
  *(void *)(v0 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v6;
  uint64_t v7 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_3F080;
  return v9(0xD000000000000019LL, 0x800000000006A960LL, v6);
}

uint64_t sub_3F080(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 112);
  uint64_t v5 = *v2;
  *(void *)(v5 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_2D308, 0LL, 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v5 + 104));
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_3F108()
{
  *(void *)(v0 + sub_14C98(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3F180;
  return ((uint64_t (*)(unint64_t, unint64_t, void *))v3)( 0xD000000000000014LL,  0x800000000006A940LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_3F180(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_3F1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_3F224(a1, a2, a3);
}

uint64_t sub_3F224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_6358((uint64_t *)&off_8C250);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_6B1C(a1, (uint64_t)v12, (uint64_t *)&off_8C250);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_6B60(a1, (uint64_t *)&off_8C250);
  return v13;
}

uint64_t sub_3F338()
{
  return type metadata accessor for WorkoutCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for WorkoutPromptForSlotValueParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_8F088, (uint64_t)&nominal type descriptor for WorkoutPromptForSlotValueParameters);
}

uint64_t sub_3F354(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WorkoutPromptForSlotValueParameters(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t *sub_3F390(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (sub_63E0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_6358(&qword_8C258);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      sub_8760((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (sub_63E0((uint64_t)v12, 1LL, v7))
    {
      uint64_t v13 = sub_6358(&qword_8C258);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      sub_8760((uint64_t)v11, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_3F4CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t result = sub_63E0(v5, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v5, v4);
  }
  return result;
}

char *sub_3F564(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_8760((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_63E0((uint64_t)v10, 1LL, v6))
  {
    uint64_t v11 = sub_6358(&qword_8C258);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    sub_8760((uint64_t)v9, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_3F674(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_63E0((uint64_t)a1, 1LL, v6);
  int v8 = sub_63E0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      sub_8760((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = sub_63E0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = sub_63E0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_6358(&qword_8C258);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  sub_8760((uint64_t)v12, 0LL, 1LL, v6);
  return a1;
}

char *sub_3F81C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_8760((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_63E0((uint64_t)v10, 1LL, v6))
  {
    uint64_t v11 = sub_6358(&qword_8C258);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    sub_8760((uint64_t)v9, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_3F92C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_63E0((uint64_t)a1, 1LL, v6);
  int v8 = sub_63E0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      sub_8760((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = sub_63E0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = sub_63E0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_6358(&qword_8C258);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  sub_8760((uint64_t)v12, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_3FAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3FAE0);
}

uint64_t sub_3FAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  return sub_63E0(a1, a2, v4);
}

uint64_t sub_3FB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3FB24);
}

uint64_t sub_3FB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  return sub_8760(a1, a2, a2, v4);
}

void sub_3FB60(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

uint64_t sub_3FBC8(uint64_t a1)
{
  return sub_8760(a1, 1LL, 1LL, v1);
}

uint64_t sub_3FBD8()
{
  return sub_3F354(*(void *)(v0 + 32));
}

uint64_t sub_3FBE4(void *a1)
{
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(a1 + 10);
}

_OWORD *sub_3FC10(_OWORD *a1, _OWORD *a2)
{
  __int128 v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  __int128 v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

void *sub_3FC8C(void *a1, void *a2)
{
  return a1;
}

void *sub_3FCCC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x78uLL);
}

uint64_t sub_3FCD4(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + sub_14C98(v0 + 16) = v4;
  *(void *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 112);
  return a1;
}

uint64_t sub_3FD44(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 120))
    {
      LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_3FD84(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + sub_14C58(v0 + 88) = 0u;
    *(_OWORD *)(result + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0u;
    *(_OWORD *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for WorkoutTCCAcceptanceFlowStrategyAsync( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WorkoutTCCAcceptanceFlowStrategyAsync);
}

uint64_t sub_3FDEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_6BD8();
  uint64_t v8 = v7 - v6;
  char v10 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v2, v4);
  if ((v10 & 1) != 0)
  {
    sub_42198();
LABEL_4:
    int v14 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
    goto LABEL_5;
  }

  char v12 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v11);
  uint64_t v13 = sub_42198();
  if ((v12 & 1) != 0) {
    goto LABEL_4;
  }
  if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v13) & 1) == 0)
  {
    uint64_t v19 = sub_421B8();
    uint64_t v17 = a1;
    uint64_t v18 = 1LL;
    return sub_8760(v17, v18, 1LL, v19);
  }

  int v14 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
LABEL_5:
  uint64_t v15 = *v14;
  uint64_t v16 = sub_421B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(a1, v15, v16);
  uint64_t v17 = a1;
  uint64_t v18 = 0LL;
  uint64_t v19 = v16;
  return sub_8760(v17, v18, 1LL, v19);
}

uint64_t sub_3FEFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v110 = a1;
  uint64_t v107 = a2;
  sub_6358(&qword_8D920);
  sub_C870();
  __chkstk_darwin(v2);
  sub_6BD8();
  uint64_t v5 = v4 - v3;
  sub_6358(&qword_8C5F0);
  sub_C870();
  __chkstk_darwin(v6);
  sub_C838();
  uint64_t v99 = v7;
  uint64_t v8 = sub_11198();
  uint64_t v97 = type metadata accessor for Siri_Nlu_External_UserParse(v8);
  uint64_t v96 = *(void *)(v97 - 8);
  sub_C870();
  __chkstk_darwin(v9);
  sub_C838();
  uint64_t v95 = v10;
  uint64_t v11 = sub_11198();
  uint64_t v101 = type metadata accessor for Siri_Nlu_External_UserDialogAct(v11);
  uint64_t v91 = *(void *)(v101 - 8);
  sub_C870();
  __chkstk_darwin(v12);
  sub_C838();
  uint64_t v90 = v13;
  uint64_t v14 = sub_11198();
  uint64_t v15 = type metadata accessor for USOParse(v14);
  uint64_t v102 = *(void *)(v15 - 8);
  sub_C870();
  __chkstk_darwin(v16);
  sub_C838();
  uint64_t v100 = v17;
  uint64_t v18 = sub_11198();
  uint64_t v19 = type metadata accessor for Parse.DirectInvocation(v18);
  uint64_t v106 = *(void *)(v19 - 8);
  sub_C870();
  __chkstk_darwin(v20);
  sub_11060();
  uint64_t v98 = v21;
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v105 = (uint64_t)&v89 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v89 - v25;
  uint64_t v27 = type metadata accessor for Parse(0LL);
  uint64_t v108 = *(void *)(v27 - 8);
  uint64_t v109 = v27;
  sub_C870();
  __chkstk_darwin(v28);
  sub_6BD8();
  uint64_t v31 = v30 - v29;
  uint64_t v32 = type metadata accessor for Logger(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_11060();
  uint64_t v111 = v34;
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v89 - v37;
  uint64_t v39 = Logger.workout.unsafeMutableAddressor(v36);
  sub_8894(v39, (uint64_t)v115);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  uint64_t v94 = v39;
  unint64_t v93 = v40;
  uint64_t v41 = ((uint64_t (*)(char *, uint64_t, uint64_t))v40)(v38, v39, v32);
  char v42 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v43 = static os_log_type_t.debug.getter(v42);
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v92 = v5;
  uint64_t v103 = v15;
  if (v44)
  {
    uint64_t v45 = swift_slowAlloc(12LL, -1LL);
    uint64_t v104 = v26;
    uint64_t v46 = (uint8_t *)v45;
    uint64_t v47 = sub_4217C();
    v114[0] = v47;
    uint64_t v89 = v19;
    *(_DWORD *)uint64_t v46 = 136315138;
    uint64_t v113 = sub_173E0(0xD000000000000016LL, 0x800000000006A9A0LL, v114);
    uint64_t v19 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114);
    sub_17C68(&dword_0, v42, v43, "%s", v46);
    sub_B334(v47);
    sub_8870(v47);
    uint64_t v48 = (uint64_t)v46;
    uint64_t v26 = v104;
    sub_8870(v48);
  }

  uint64_t v49 = *(uint64_t (**)(char *, uint64_t))(v33 + 8);
  uint64_t v50 = v49(v38, v32);
  uint64_t v51 = v32;
  uint64_t v52 = v111;
  uint64_t v54 = v108;
  uint64_t v53 = v109;
  Input.parse.getter(v50);
  int v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 88))(v31, v53);
  if (v55 != enum case for Parse.directInvocation(_:))
  {
    if (v55 != enum case for Parse.uso(_:))
    {
      sub_4221C();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v31, v53);
    }

    sub_421A8();
    uint64_t v75 = v102;
    uint64_t v74 = v103;
    uint64_t v76 = v100;
    uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 32))(v100, v31, v103);
    uint64_t v78 = v95;
    uint64_t v79 = USOParse.userParse.getter(v77);
    uint64_t v80 = Siri_Nlu_External_UserParse.userDialogActs.getter(v79);
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v78, v97);
    uint64_t v81 = v99;
    sub_52814(v80, v99);
    swift_bridgeObjectRelease(v80);
    uint64_t v82 = v101;
    if (sub_63E0(v81, 1LL, v101) == 1)
    {
      sub_6B60(v81, &qword_8C5F0);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32))(v90, v81, v82);
      uint64_t v85 = v92;
      sub_3FDEC(v92);
      uint64_t v86 = sub_421B8();
      int v87 = sub_63E0(v85, 1LL, v86);
      uint64_t v88 = sub_6B60(v85, &qword_8D920);
      if (v87 != 1)
      {
        static ActionForInput.handle()(v88);
        sub_421E8();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8))(v76, v74);
      }

      sub_421E8();
    }

    sub_4221C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8))(v76, v74);
  }

  sub_421A8();
  uint64_t v56 = v106;
  sub_421C8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 32));
  uint64_t v57 = v105;
  sub_42224(v105);
  uint64_t v58 = sub_4A34C(v57);
  if (v58 == 3)
  {
    uint64_t v59 = v94;
    sub_8894(v94, (uint64_t)v114);
    v93((uint64_t)v52, v59, v51);
    uint64_t v60 = v98;
    uint64_t v104 = v26;
    uint64_t v61 = sub_42224(v98);
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.error.getter(v62);
    if (sub_42188(v63))
    {
      uint64_t v64 = (uint8_t *)sub_42230();
      uint64_t v65 = v19;
      uint64_t v66 = sub_4217C();
      uint64_t v113 = v66;
      *(_DWORD *)uint64_t v64 = 136315138;
      uint64_t v110 = v51;
      uint64_t v67 = Parse.DirectInvocation.identifier.getter(v66);
      unint64_t v69 = v68;
      uint64_t v112 = sub_173E0(v67, v68, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
      swift_bridgeObjectRelease(v69);
      uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
      v70(v60, v65);
      sub_17C68(&dword_0, v62, (os_log_type_t)v26, "Unsupported DirectInvocation with identifier: %s", v64);
      sub_B334(v66);
      uint64_t v71 = v66;
      uint64_t v19 = v65;
      sub_8870(v71);
      sub_8870((uint64_t)v64);

      uint64_t v73 = v110;
      uint64_t v72 = v111;
    }

    else
    {
      uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
      v70(v60, v19);

      uint64_t v72 = v52;
      uint64_t v73 = v51;
    }

    v49(v72, v73);
    os_log_type_t v84 = v104;
    sub_4221C();
    return ((uint64_t (*)(char *, uint64_t))v70)(v84, v19);
  }

  else
  {
    static ActionForInput.handle()(v58);
    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v26, v19);
  }

uint64_t sub_405A0(uint64_t a1, uint64_t a2)
{
  v2[6] = a1;
  v2[7] = a2;
  uint64_t v3 = sub_6358(&qword_8C5F0);
  _BYTE v2[8] = sub_8860(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  void v2[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[10] = v5;
  v2[11] = sub_8860(v5);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  v2[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[13] = v7;
  v2[14] = sub_8860(v7);
  uint64_t v8 = type metadata accessor for USOParse(0LL);
  v2[15] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[16] = v9;
  v2[17] = sub_8860(v9);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  v2[18] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[19] = v11;
  v2[20] = sub_8860(v11);
  uint64_t v12 = sub_6358(&qword_8D920);
  v2[21] = sub_B1E4(*(void *)(v12 - 8));
  v2[22] = sub_8924();
  v2[23] = sub_8924();
  uint64_t v13 = sub_421B8();
  v2[24] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[25] = v14;
  v2[26] = sub_B1E4(v14);
  v2[27] = sub_8924();
  uint64_t v15 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[28] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[29] = v16;
  v2[30] = sub_B1E4(v16);
  v2[31] = sub_8924();
  v2[32] = sub_8924();
  uint64_t v17 = type metadata accessor for Parse(0LL);
  v2[33] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v2[34] = v18;
  v2[35] = sub_8860(v18);
  sub_8910();
  return sub_887C();
}

uint64_t sub_406E4(uint64_t a1)
{
  uint64_t v3 = v1[34];
  uint64_t v2 = v1[35];
  uint64_t v4 = v1[33];
  Input.parse.getter(a1);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v7 = v1 + 29;
    uint64_t v6 = v1[29];
    uint64_t v8 = v1[35];
    uint64_t v9 = v1[32];
    uint64_t v10 = v1[31];
    uint64_t v11 = v1[28];
    uint64_t v110 = v1 + 28;
    (*(void (**)(uint64_t, void))(v1[34] + 96LL))(v8, v1[33]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v8, v11);
    sub_421D8();
    uint64_t v12 = sub_4A34C(v10);
    if (v12 == 2)
    {
      uint64_t v38 = sub_8760(v1[23], 1LL, 1LL, v1[24]);
      uint64_t v12 = sub_421C0(v38, &qword_8D920);
    }

    else if (v12 != 3)
    {
      uint64_t v14 = v1 + 27;
      uint64_t v13 = v1[27];
      uint64_t v15 = v1[25];
      uint64_t v103 = v1 + 25;
      uint64_t v16 = v1 + 24;
      uint64_t v18 = v1[22];
      uint64_t v17 = v1[23];
      uint64_t v19 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
      if ((v12 & 1) != 0) {
        uint64_t v19 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
      }
      (*(void (**)(void, void, void))(v15 + 104))(v1[23], *v19, v1[24]);
      sub_42144(v17);
      sub_1F188(v13, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
      sub_1F188(v18, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16));
      sub_42144(v18);
      SimpleConfirmationResponseProvider.init(_:)(v18);
      uint64_t v20 = v1 + 32;
      goto LABEL_22;
    }

    uint64_t v40 = v1[19];
    uint64_t v39 = v1[20];
    uint64_t v41 = Logger.workout.unsafeMutableAddressor(v12);
    sub_8894(v41, (uint64_t)(v1 + 2));
    sub_421C8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 16));
    uint64_t v42 = sub_421D8();
    os_log_type_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.error.getter(v43);
    BOOL v45 = sub_42188(v44);
    uint64_t v47 = v1[29];
    uint64_t v46 = v1[30];
    uint64_t v49 = v1[19];
    uint64_t v48 = v1[20];
    uint64_t v50 = (uint8_t *)v1[18];
    if (v45)
    {
      uint64_t v94 = (uint8_t *)v1[28];
      uint64_t v105 = v1[18];
      uint64_t v100 = v1[20];
      uint64_t v51 = (uint8_t *)sub_42230();
      uint64_t v97 = v49;
      uint64_t v52 = sub_4217C();
      uint64_t v113 = v52;
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v50 = v51 + 4;
      uint64_t v53 = Parse.DirectInvocation.identifier.getter(v52);
      unint64_t v55 = v54;
      v1[5] = sub_173E0(v53, v54, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6);
      swift_bridgeObjectRelease(v55);
      uint64_t v56 = *(void (**)(uint64_t, uint8_t *))(v47 + 8);
      v56(v46, v94);
      sub_17C68(&dword_0, v43, (os_log_type_t)v39, "Unsupported DirectInvocation with identifier: %s", v51);
      sub_B334(v52);
      sub_8870(v52);
      sub_8870((uint64_t)v51);

      (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v100, v105);
    }

    else
    {
      uint64_t v56 = *(void (**)(uint64_t, uint8_t *))(v47 + 8);
      v56(v1[30], (uint8_t *)v1[28]);

      (*(void (**)(uint64_t, uint8_t *))(v49 + 8))(v48, v50);
    }

    uint64_t v57 = v1[32];
    unint64_t v58 = sub_42204();
    uint64_t v59 = sub_13FF8((uint64_t)&type metadata for IntentConversionError, v58);
    sub_42130(v59, v60, v61, v62, v63);
    v56(v57, v50);
  }

  else
  {
    uint64_t v22 = v1[34];
    uint64_t v21 = v1[35];
    if (v5 == enum case for Parse.uso(_:))
    {
      uint64_t v23 = v1[17];
      uint64_t v7 = v1 + 16;
      uint64_t v24 = v1[16];
      uint64_t v25 = v1[15];
      uint64_t v110 = v1 + 15;
      uint64_t v26 = v1[11];
      uint64_t v96 = v1[10];
      uint64_t v27 = v1[8];
      uint64_t v99 = v1[9];
      uint64_t v104 = v1[12];
      sub_42210(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v21, v25);
      uint64_t v29 = USOParse.userParse.getter(v28);
      uint64_t v30 = Siri_Nlu_External_UserParse.userDialogActs.getter(v29);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v26, v99);
      sub_52814(v30, v27);
      swift_bridgeObjectRelease(v30);
      if (sub_63E0(v27, 1LL, v104) == 1)
      {
        sub_6B60(v1[8], &qword_8C5F0);
      }

      else
      {
        uint64_t v16 = v1 + 12;
        uint64_t v14 = v1 + 14;
        uint64_t v64 = v1[24];
        uint64_t v65 = v1[21];
        (*(void (**)(void, void, void))(v1[13] + 32LL))(v1[14], v1[8], v1[12]);
        sub_3FDEC(v65);
        uint64_t v20 = v1 + 17;
        if (sub_63E0(v65, 1LL, v64) != 1)
        {
          uint64_t v80 = v1[25];
          uint64_t v79 = v1[26];
          uint64_t v81 = v1[24];
          uint64_t v82 = v1[22];
          uint64_t v103 = v1 + 13;
          sub_1F188(v79, v1[21], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 32));
          sub_1F188(v82, v79, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 16));
          sub_42144(v82);
          SimpleConfirmationResponseProvider.init(_:)(v82);
          (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
LABEL_22:
          uint64_t v83 = *v20;
          uint64_t v84 = *v110;
          uint64_t v85 = *v7;
          uint64_t v86 = *v14;
          uint64_t v87 = *v103;
          uint64_t v88 = v1[35];
          uint64_t v89 = v1[31];
          uint64_t v90 = v1[27];
          uint64_t v92 = v1[23];
          uint64_t v93 = v1[22];
          uint64_t v95 = v1[21];
          uint64_t v98 = v1[20];
          uint64_t v102 = v1[17];
          uint64_t v107 = v1[14];
          uint64_t v109 = v1[11];
          uint64_t v112 = v1[8];
          (*(void (**)(uint64_t, void))(v87 + 8))(v86, *v16);
          (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v83, v84);
          swift_task_dealloc(v88);
          sub_B164();
          swift_task_dealloc(v89);
          sub_1F21C();
          swift_task_dealloc(v90);
          sub_88B8();
          swift_task_dealloc(v92);
          swift_task_dealloc(v93);
          swift_task_dealloc(v95);
          swift_task_dealloc(v98);
          swift_task_dealloc(v102);
          swift_task_dealloc(v107);
          swift_task_dealloc(v109);
          swift_task_dealloc(v112);
          uint64_t v78 = (uint64_t (*)(void))v1[1];
          return v78();
        }

        uint64_t v66 = (*(uint64_t (**)(void, void))(v1[13] + 8LL))(v1[14], v1[12]);
        sub_421C0(v66, &qword_8D920);
      }

      uint64_t v67 = *v7;
      unint64_t v68 = sub_42204();
      uint64_t v69 = sub_13FF8((uint64_t)&type metadata for IntentConversionError, v68);
      sub_42130(v69, v70, v71, v72, v73);
      uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v67 + 8);
    }

    else
    {
      unint64_t v31 = sub_253BC();
      uint64_t v32 = sub_13FF8((uint64_t)&type metadata for IntentConversionError, v31);
      sub_42130(v32, v33, v34, v35, v36);
      uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8);
    }

    sub_42210(v37);
  }

  uint64_t v75 = v1[26];
  uint64_t v74 = v1[27];
  uint64_t v76 = v1[22];
  uint64_t v77 = v1[20];
  uint64_t v101 = v1[17];
  uint64_t v106 = v1[14];
  uint64_t v108 = v1[11];
  uint64_t v111 = v1[8];
  swift_task_dealloc(v1[35]);
  sub_88B8();
  sub_88D0();
  sub_8938();
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  sub_B164();
  swift_task_dealloc(v76);
  sub_1F21C();
  swift_task_dealloc(v77);
  swift_task_dealloc(v101);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v111);
  uint64_t v78 = (uint64_t (*)(void))v1[1];
  return v78();
}

uint64_t sub_40D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a1;
  v5[17] = a2;
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v5[20] = sub_8860(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v5[21] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[22] = v8;
  v5[23] = sub_8860(v8);
  uint64_t v9 = type metadata accessor for Locale(0LL);
  _BYTE v5[24] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[25] = v10;
  v5[26] = sub_8860(v10);
  uint64_t v11 = sub_6358((uint64_t *)&unk_8F390);
  v5[27] = sub_8860(*(void *)(v11 - 8));
  sub_8910();
  return sub_887C();
}

uint64_t sub_40DF4()
{
  uint64_t v2 = v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v4 = (void *)v0[19];
  uint64_t v5 = v0[17];
  uint64_t v6 = type metadata accessor for AppInformationResolver(0LL);
  sub_14DA4(v6);
  uint64_t v7 = swift_retain(v5);
  uint64_t v8 = AppInformationResolver.init(app:)(v7);
  uint64_t v9 = v4[3];
  uint64_t v10 = v4[4];
  sub_8734(v4, v9);
  dispatch thunk of DeviceState.siriLocale.getter(v9, v10);
  uint64_t v11 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)(v1);
  uint64_t v13 = v12;
  swift_release(v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v13)
  {
    Swift::Bool v14 = App.isFirstParty()();
    AppDisplayInfo.init(displayName:isFirstParty:)(v11, v13, v14);
    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v15 = 1LL;
  }

  uint64_t v16 = v0[27];
  uint64_t v17 = v0[19];
  uint64_t v18 = type metadata accessor for AppDisplayInfo(0LL);
  sub_8760(v16, v15, 1LL, v18);
  sub_8734((void *)(v17 + 80), *(void *)(v17 + 104));
  sub_25230(v17, (uint64_t)(v0 + 2));
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  v0[28] = v19;
  uint64_t v20 = (void *)swift_task_alloc(async function pointer to TCCResponses.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:)[1]);
  v0[29] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_40F90;
  return TCCResponses.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:)(v0[27], v0 + 2, v19);
}

uint64_t sub_40F90(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 16;
  uint64_t v6 = *(void *)(*v2 + 224);
  uint64_t v5 = *(void *)(*v2 + 232);
  *(void *)(v3 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000049LL,  0x8000000000069B30LL,  "HealthFlowDelegatePlugin/HealthContinueInAppStrategy.swift",  58LL,  2LL,  39LL, 0) = a1;
  *(void *)(v3 + 248) = v1;
  swift_task_dealloc(v5);
  sub_6B60(v4, &qword_8F198);
  swift_bridgeObjectRelease(v6);
  sub_8910();
  return sub_42154(v7, v8, v9);
}

uint64_t sub_41010()
{
  *(void *)(v2 + 256) = v0;
  *(void *)(v2 + 26_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to static LabelTemplates.yes()[1]);
  *(void *)(v2 + 27_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_4107C;
  return static LabelTemplates.yes()();
}

uint64_t sub_4107C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[12] = v3;
  v4[13] = a1;
  v4[14] = a2;
  v4[15] = v2;
  uint64_t v5 = v4[34];
  v4[35] = a2;
  v4[36] = v2;
  swift_task_dealloc(v5);
  if (v2) {
    sub_42024(v4[32], v4[33]);
  }
  sub_8910();
  return sub_42174(v6, v7, v8);
}

uint64_t sub_410E8()
{
  *(void *)(v2 + 296) = v0;
  *(void *)(v2 + 30_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to static LabelTemplates.no()[1]);
  *(void *)(v2 + 31_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_41154;
  return static LabelTemplates.no()();
}

uint64_t sub_41154(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 312LL);
  *(void *)(*(void *)v3 + 32OutputGenerationManifest.init(dialogPhase:_:)(*(void *)(v0 + 200), nullsub_1, 0LL) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    uint64_t v8 = v6[37];
    unint64_t v9 = v6[38];
    uint64_t v10 = v6[35];
    sub_42024(v6[32], v6[33]);
    sub_42024(v8, v9);
    swift_bridgeObjectRelease(v10);
  }

  else
  {
    uint64_t v11 = v6[13];
    v6[41] = a2;
    v6[42] = a1;
    v6[43] = v11;
  }

  sub_8910();
  return sub_42174(v12, v13, v14);
}

uint64_t sub_411F0()
{
  return sub_262B8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_41238()
{
  return sub_262B8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_41280()
{
  uint64_t v21 = v0[42];
  uint64_t v19 = v0[43];
  uint64_t v20 = v0[41];
  uint64_t v1 = v0[37];
  unint64_t v18 = v0[38];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[32];
  unint64_t v4 = v0[33];
  uint64_t v23 = (void *)v0[30];
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[18];
  static DialogPhase.confirmation.getter();
  uint64_t v8 = (void *)swift_task_alloc(48LL);
  _OWORD v8[2] = *(void *)(v7 + 16);
  v8[3] = *(void *)(v7 + 24);
  v8[4] = v5;
  OutputGenerationManifest.init(dialogPhase:_:)(v6, sub_42068, v8);
  sub_1F21C();
  uint64_t v9 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v10 = sub_14DA4(v9);
  v0[44] = ResponseFactory.init()(v10);
  v0[10] = &type metadata for HealthUIPluginModel;
  v0[11] = sub_42074();
  uint64_t v11 = (void *)swift_allocObject(&unk_81EF0, 80LL, 7LL);
  v0[7] = v11;
  v11[2] = v3;
  void v11[3] = v4;
  v11[4] = v19;
  v11[5] = v2;
  v11[6] = v1;
  v11[7] = v18;
  v11[8] = v21;
  v11[9] = v20;
  uint64_t v12 = sub_6358(&qword_8E9B0);
  uint64_t v13 = swift_allocObject(v12, 40LL, 7LL);
  *(_OWORD *)(v13 + sub_14C98(v0 + 16) = xmmword_61780;
  *(void *)(v13 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v23;
  uint64_t v24 = v13;
  specialized Array._endMutation()(v13);
  v0[45] = v24;
  sub_420EC(v3, v4);
  swift_bridgeObjectRetain();
  sub_420EC(v1, v18);
  swift_bridgeObjectRetain();
  id v15 = v23;
  uint64_t v16 = (void *)swift_task_alloc(v14);
  v0[46] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_4145C;
  return ((uint64_t (*)(void, void *, uint64_t, void))v22)(v0[16], v0 + 7, v24, v0[23]);
}

uint64_t sub_4145C()
{
  uint64_t v1 = (void *)(*(void *)v0 + 56LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 360LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 352LL);
  sub_14D6C(*(void *)(*(void *)v0 + 368LL));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v1);
  sub_8910();
  return sub_42154(v4, v5, v6);
}

uint64_t sub_414BC()
{
  uint64_t v2 = *(void *)(v0 + 296);
  unint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 256);
  unint64_t v4 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 328);
  uint64_t v12 = *(void *)(v0 + 208);
  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 160);

  sub_42024(v5, v4);
  swift_bridgeObjectRelease(v3);
  sub_42024(v2, v1);
  swift_bridgeObjectRelease(v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  sub_6B60(v6, (uint64_t *)&unk_8F390);
  sub_B164();
  swift_task_dealloc(v12);
  sub_1F21C();
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_41594()
{
  return sub_262B8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_415DC()
{
  id v1 = [v0 dictionary];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  id v9 = 0LL;
  id v3 =  [(id)objc_opt_self(NSPropertyListSerialization) dataWithPropertyList:v1 format:200 options:0 error:&v9];
  id v4 = v9;
  if (!v3)
  {
    uint64_t v6 = v4;
    uint64_t v7 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease(v7);
    return 0LL;
  }

  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v5;
}

uint64_t sub_416E4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_6358(&qword_8C348);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_417C4((uint64_t)v5);
  uint64_t v6 = type metadata accessor for NLContextUpdate(0LL);
  sub_8760((uint64_t)v5, 0LL, 1LL, v6);
  OutputGenerationManifest.nlContextUpdate.setter(v5);
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  sub_8734(a2, v7);
  char v9 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v7, v8);
  OutputGenerationManifest.canUseServerTTS.setter(v9 & 1);
  return OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
}

uint64_t sub_417C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v53 = type metadata accessor for UUID(0LL);
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v49 = (char *)&v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = sub_6358(&qword_8F1A8);
  __chkstk_darwin(v2);
  BOOL v45 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for Siri_Nlu_External_UUID(0LL);
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v52 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v47 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_SystemOffered(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserAccepted(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v44 - v23;
  uint64_t v25 = NLContextUpdate.init()(v22);
  uint64_t v26 = Siri_Nlu_External_UserDialogAct.init()(v25);
  Siri_Nlu_External_UserAccepted.init()(v26);
  uint64_t v27 = Siri_Nlu_External_UserDialogAct.accepted.setter(v16);
  Siri_Nlu_External_SystemOffered.init()(v27);
  uint64_t v48 = v18;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  uint64_t v50 = v17;
  v28(v21, v24, v17);
  uint64_t v29 = v21;
  uint64_t v30 = (uint64_t)v45;
  uint64_t v31 = Siri_Nlu_External_SystemOffered.offeredAct.setter(v29);
  Siri_Nlu_External_SystemDialogAct.init()(v31);
  uint64_t v54 = v8;
  uint64_t v55 = v7;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  uint64_t v32 = v11;
  uint64_t v33 = v46;
  uint64_t v34 = Siri_Nlu_External_SystemDialogAct.offered.setter(v32);
  uint64_t v35 = v49;
  UUID.init()(v34);
  static ConversionUtils.convertUuidToProto(uuid:)(v35);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v53);
  if (sub_63E0(v30, 1LL, v33) == 1)
  {
    uint64_t v36 = v52;
    Siri_Nlu_External_UUID.init()();
    sub_6B60(v30, &qword_8F1A8);
  }

  else
  {
    uint64_t v36 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v52, v30, v33);
  }

  Siri_Nlu_External_SystemDialogAct.id.setter(v36);
  uint64_t v37 = sub_6358(&qword_8D3A8);
  uint64_t v38 = v47;
  uint64_t v39 = *(unsigned __int8 *)(v47 + 80);
  uint64_t v40 = (v39 + 32) & ~v39;
  uint64_t v41 = swift_allocObject(v37, v40 + *(void *)(v47 + 72), v39 | 7);
  *(_OWORD *)(v41 + sub_14C98(v0 + 16) = xmmword_61030;
  uint64_t v42 = v56;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v41 + v40, v6, v56);
  NLContextUpdate.nluSystemDialogActs.setter(v41);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v6, v42);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v55);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v24, v50);
}

uint64_t sub_41B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_3FEFC(a1, a2);
}

uint64_t sub_41B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_8F18C);
  *(void *)(v2 + sub_14C98(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_15FC4;
  return sub_405A0(a1, a2);
}

uint64_t sub_41BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeTCCConfirmationRejectedResponse(app:intent:)[1]);
  *(void *)(v5 + sub_14C98(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_15FC4;
  return ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeTCCConfirmationRejectedResponse(app:intent:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_41C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeTCCCancelledResponse(app:intent:)[1]);
  *(void *)(v5 + sub_14C98(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_15FC4;
  return ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeTCCCancelledResponse(app:intent:)(a1, a2, a3, a4, a5);
}

uint64_t sub_41CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeErrorResponse(error:app:intent:)[1]);
  *(void *)(v6 + sub_14C98(v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_15EF4;
  return ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeErrorResponse(error:app:intent:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_41D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_8F194);
  *(void *)(v4 + sub_14C98(v0 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_15FC4;
  return sub_40D60(a1, a2, v9, a4);
}

uint64_t sub_41DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:)[1]);
  *(void *)(v5 + sub_14C98(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_15FC4;
  return RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:)(a1, a2, a3, a4, a5);
}

uint64_t sub_41E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnLowConfidence(app:intent:)[1]);
  *(void *)(v5 + sub_14C98(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_15FC4;
  return RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnLowConfidence(app:intent:)(a1, a2, a3, a4, a5);
}

uint64_t sub_41F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to RequestTCCAcceptanceFlowStrategyAsync.makePromptForDeviceUnlock(app:intent:)[1]);
  *(void *)(v5 + sub_14C98(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_15FC4;
  return RequestTCCAcceptanceFlowStrategyAsync.makePromptForDeviceUnlock(app:intent:)(a1, a2, a3, a4, a5);
}

uint64_t sub_41F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to RequestTCCAcceptanceFlowStrategyAsync.makeHandoffForAuthenticationResponse(app:intent:)[1]);
  *(void *)(v5 + sub_14C98(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_15FC4;
  return RequestTCCAcceptanceFlowStrategyAsync.makeHandoffForAuthenticationResponse(app:intent:)(a1, a2, a3, a4, a5);
}

uint64_t sub_42008(uint64_t a1)
{
  return swift_getWitnessTable(&unk_64F90, a1);
}

void *sub_42018()
{
  return &protocol witness table for SimpleConfirmationResponseProvider;
}

uint64_t sub_42024(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_42068(uint64_t a1)
{
  return sub_416E4(a1, *(void **)(v1 + 32));
}

unint64_t sub_42074()
{
  unint64_t result = qword_8F1A0;
  if (!qword_8F1A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_65CC4, &type metadata for HealthUIPluginModel);
    atomic_store(result, (unint64_t *)&qword_8F1A0);
  }

  return result;
}

uint64_t sub_420B0()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_420EC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_42130(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a2 = 3;
  return swift_willThrow(a1, a2, a3, a4, a5);
}

uint64_t sub_42144(uint64_t a1)
{
  return sub_8760(a1, 0LL, 1LL, v1);
}

uint64_t sub_42154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_42164()
{
  return swift_task_dealloc(*(void *)(v0 + 216));
}

uint64_t sub_42174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_4217C()
{
  return swift_slowAlloc(32LL, -1LL);
}

BOOL sub_42188(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_42198()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_421A8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v2, v0);
}

uint64_t sub_421B8()
{
  return type metadata accessor for ConfirmationResponse(0LL);
}

uint64_t sub_421C0(uint64_t a1, uint64_t *a2)
{
  return sub_6B60(v2, a2);
}

uint64_t sub_421C8@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v3, v2);
}

uint64_t sub_421D8()
{
  return v3(v1, v0, v2);
}

uint64_t sub_421E8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void sub_421F8()
{
}

unint64_t sub_42204()
{
  return sub_253BC();
}

uint64_t sub_42210@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_4221C()
{
  return static ActionForInput.ignore()();
}

uint64_t sub_42224(uint64_t a1)
{
  return v1(a1, v2, v3);
}

uint64_t sub_42230()
{
  return swift_slowAlloc(12LL, -1LL);
}

void sub_4223C()
{
}

uint64_t type metadata accessor for HealthWorkoutPauseCATs(uint64_t a1)
{
  uint64_t result = qword_8F1B0;
  if (!qword_8F1B0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthWorkoutPauseCATs);
  }
  return result;
}

uint64_t sub_42280(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_96FD8);
}

void sub_422BC(uint64_t a1, uint64_t a2)
{
}

void sub_422D8()
{
}

void sub_422F4(uint64_t a1)
{
}

uint64_t sub_42310(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = sub_6358(&qword_8C260);
  uint64_t v11 = swift_allocObject(v10, 128LL, 7LL);
  *(_OWORD *)(v11 + sub_14C98(v0 + 16) = xmmword_61440;
  uint64_t v12 = (void *)(v11 + 48);
  *(void *)(v11 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 1953459315LL;
  *(void *)(v11 + 4sub_4A488(*(void **)(v2 + 152), 0) = 0xE400000000000000LL;
  sub_6B1C(a1, (uint64_t)v9, &qword_8C258);
  uint64_t v13 = type metadata accessor for SpeakableString(0LL);
  sub_6BE8((uint64_t)v9);
  if (v14)
  {
    sub_6B60((uint64_t)v9, &qword_8C258);
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v11 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
  }

  else
  {
    *(void *)(v11 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v13;
    uint64_t v15 = sub_6B9C(v12);
    sub_6C14( (uint64_t)v15,  (uint64_t)v9,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  *(void *)(v11 + 8sub_4A488(*(void **)(v2 + 152), 0) = 0x4E74756F6B726F77LL;
  *(void *)(v11 + sub_14C58(v0 + 88) = 0xEB00000000656D61LL;
  sub_6B1C(a2, (uint64_t)v7, &qword_8C258);
  sub_6BE8((uint64_t)v7);
  if (v14)
  {
    sub_6B60((uint64_t)v7, &qword_8C258);
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v11 + 12sub_4A488(*(void **)(v2 + 152), 0) = v13;
    uint64_t v16 = sub_6B9C((void *)(v11 + 96));
    sub_6C14( (uint64_t)v16,  (uint64_t)v7,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL));
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000023LL, 0x800000000006AA60LL, v11);
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_424EC()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)( 0xD000000000000028LL,  0x800000000006AA30LL,  &_swiftEmptyArrayStorage);
}

uint64_t sub_42510(uint64_t a1)
{
  uint64_t v5 = v4 - v3;
  uint64_t v6 = sub_6358(&qword_8C260);
  uint64_t v7 = swift_allocObject(v6, 80LL, 7LL);
  *(_OWORD *)(v7 + sub_14C98(v0 + 16) = xmmword_61030;
  uint64_t v8 = (void *)(v7 + 48);
  *(void *)(v7 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x656D614E707061LL;
  *(void *)(v7 + 4sub_4A488(*(void **)(v2 + 152), 0) = 0xE700000000000000LL;
  sub_6B1C(a1, v5, &qword_8C258);
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  sub_6BE8(v5);
  if (v10)
  {
    sub_6B60(v5, &qword_8C258);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
  }

  else
  {
    *(void *)(v7 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v9;
    uint64_t v11 = sub_6B9C(v8);
    sub_6C14((uint64_t)v11, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL));
  }

  dispatch thunk of CATWrapper.execute(catId:parameters:)(0xD000000000000027LL, 0x800000000006AA00LL, v7);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_42648()
{
  return type metadata accessor for HealthWorkoutPauseCATs(0LL);
}

void sub_42650()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_8908();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_6BD8();
  uint64_t v12 = v11 - v10;
  if (!v4)
  {
    v26[0] = sub_27F28();
    uint64_t v13 = sub_6358(&qword_8C838);
    uint64_t v9 = String.init<A>(describing:)(v26, v13);
    uint64_t v6 = v9;
    uint64_t v4 = v14;
  }

  *(void *)(v2 + sub_14C98(v0 + 16) = v6;
  *(void *)(v2 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v4;
  uint64_t v15 = (os_log_s *)Logger.health.unsafeMutableAddressor(v9);
  sub_8894((uint64_t)v15, (uint64_t)v26);
  (*(void (**)(uint64_t, os_log_s *, uint64_t))(v8 + 16))(v12, v15, v7);
  uint64_t v16 = swift_retain(v2);
  Logger.logObject.getter(v16);
  os_log_type_t v17 = sub_442B0();
  if (sub_44288(v17))
  {
    uint64_t v23 = v7;
    uint64_t v18 = (uint8_t *)sub_88B0(12LL);
    uint64_t v22 = v8;
    uint64_t v19 = sub_88B0(32LL);
    uint64_t v25 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v21 = *(void *)(v2 + 16);
    unint64_t v20 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_173E0(v21, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    sub_1104C();
    swift_bridgeObjectRelease(v20);
    sub_17C68(&dword_0, v15, v1, "Starting to resolve apps for %s synchronously", v18);
    sub_B334(v19);
    sub_8870(v19);
    sub_8870((uint64_t)v18);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v12, v23);
  }

  else
  {

    sub_1104C();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v7);
  }

  sub_10F48();
}

void sub_42810( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v107 = v20;
  uint64_t v111 = v24;
  uint64_t v25 = type metadata accessor for DeviceIdiom(0LL);
  sub_4427C(v25, (uint64_t)&a12);
  sub_441F8(v26);
  __chkstk_darwin(v27);
  sub_C838();
  uint64_t v29 = sub_39C48(v28);
  uint64_t v30 = type metadata accessor for Parse(v29);
  __chkstk_darwin(v30);
  sub_6BD8();
  uint64_t v31 = sub_8908();
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_11060();
  sub_39C04();
  __chkstk_darwin(v33);
  sub_39C04();
  __chkstk_darwin(v34);
  sub_39C04();
  __chkstk_darwin(v35);
  sub_39C04();
  uint64_t v37 = __chkstk_darwin(v36);
  uint64_t v39 = (char *)v103 - v38;
  __chkstk_darwin(v37);
  uint64_t v40 = sub_44254();
  sub_8894(v40, (uint64_t)&v122);
  uint64_t v112 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
  uint64_t v113 = v31;
  uint64_t v41 = v112(v20, v40, v31);
  Logger.logObject.getter(v41);
  os_log_type_t v42 = sub_442B0();
  if (os_log_type_enabled(v21, v42))
  {
    os_log_type_t v43 = (uint8_t *)sub_88B0(2LL);
    *(_WORD *)os_log_type_t v43 = 0;
    sub_1F1E8(&dword_0, v21, v42, "Begin app disambiguation resolveApp", v43);
    sub_8870((uint64_t)v43);
  }

  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  uint64_t v45 = v113;
  uint64_t v46 = sub_44210(v20);
  uint64_t v47 = v111;
  Input.parse.getter(v46);
  sub_DD98();
  uint64_t v49 = v48;
  uint64_t v50 = sub_442E4();
  if (v49)
  {
    sub_8894(v40, (uint64_t)&v117);
    v112((uint64_t)v39, v40, v45);
    uint64_t v51 = swift_retain_n(v49, 2LL);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = static os_log_type_t.debug.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = sub_88B0(12LL);
      uint64_t v110 = v44;
      uint64_t v55 = (uint8_t *)v54;
      uint64_t v56 = sub_88B0(32LL);
      v121[0] = v56;
      *(_DWORD *)uint64_t v55 = 136315138;
      uint64_t v119 = (uint64_t)v49;
      uint64_t v57 = sub_111F4();
      sub_1F230( &qword_8C430,  v58,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v57, v59);
      uint64_t v119 = sub_173E0(v60, v61, v121);
      sub_442B8((uint64_t)&v119, (uint64_t)&v120);
      sub_14004((uint64_t)v49);
      sub_10F84();
      sub_17C68(&dword_0, v52, v53, "Found app in intent, using that (%s)", v55);
      sub_B334(v56);
      sub_8870(v56);
      sub_8870((uint64_t)v55);

      sub_44264((uint64_t)v39);
    }

    else
    {

      sub_14004((uint64_t)v49);
      sub_44210((uint64_t)v39);
    }

    type metadata accessor for AppResolutionAction(0LL);
    static AppResolutionAction.select(app:)(v49);
    swift_release(v49);
  }

  else
  {
    uint64_t v110 = v44;
    Input.parse.getter(v50);
    sub_E940();
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    sub_442E4();
    sub_8894(v40, (uint64_t)v121);
    uint64_t v66 = v109;
    uint64_t v67 = (uint64_t (*)(os_log_s *, uint64_t, uint64_t))v112;
    v112(v109, v40, v45);
    sub_442C0(v65);
    sub_1F200();
    os_log_type_t v68 = sub_B33C();
    BOOL v69 = os_log_type_enabled(v47, v68);
    uint64_t v111 = (os_log_s *)v63;
    if (v69)
    {
      uint64_t v49 = (uint8_t *)sub_88B0(12LL);
      uint64_t v70 = sub_88B0(32LL);
      uint64_t v119 = v70;
      *(_DWORD *)uint64_t v49 = 136315138;
      uint64_t v117 = v63;
      v118[0] = v65;
      swift_bridgeObjectRetain();
      uint64_t v71 = sub_6358(&qword_8F3D0);
      uint64_t v72 = String.init<A>(describing:)(&v117, v71);
      uint64_t v117 = sub_173E0(v72, v73, &v119);
      uint64_t v45 = v113;
      sub_442B8((uint64_t)&v117, (uint64_t)v118);
      sub_1F12C(v65);
      sub_44208();
      sub_17C68(&dword_0, v47, v68, "Got a modality: %s", v49);
      sub_B334(v70);
      uint64_t v74 = v70;
      uint64_t v67 = (uint64_t (*)(os_log_s *, uint64_t, uint64_t))v112;
      sub_8870(v74);
      sub_8870((uint64_t)v49);

      uint64_t v75 = v109;
    }

    else
    {

      sub_1F12C(v65);
      uint64_t v75 = v66;
    }

    v110(v75, v45);
    uint64_t v76 = *(void *)(v107 + 16);
    uint64_t v77 = *(os_log_s **)(v107 + 24);
    swift_bridgeObjectRetain();
    Swift::Int v78 = sub_44070((uint64_t)&off_7EEA8);
    uint64_t v79 = static AppFinder.listApps(intentID:siriAuthorizationRestriction:)(v76, v77, v78);
    sub_10F84();
    swift_bridgeObjectRelease(v78);
    sub_8894(v40, (uint64_t)&v119);
    sub_44218((uint64_t)&a15);
    sub_442C0(v79);
    sub_1F200();
    os_log_type_t v80 = sub_B33C();
    if (os_log_type_enabled(v77, v80))
    {
      uint64_t v49 = (uint8_t *)sub_88B0(12LL);
      *(_DWORD *)uint64_t v49 = 134217984;
      if ((unint64_t)v79 >> 62)
      {
        if (v79 < 0) {
          uint64_t v101 = v79;
        }
        else {
          uint64_t v101 = v79 & 0xFFFFFFFFFFFFFF8LL;
        }
        sub_442DC();
        uint64_t v102 = v101;
        uint64_t v76 = v108;
        uint64_t v81 = _CocoaArrayWrapper.endIndex.getter(v102);
        sub_44208();
      }

      else
      {
        uint64_t v81 = *(void *)((char *)&dword_10 + (v79 & 0xFFFFFFFFFFFFF8LL));
      }

      sub_44208();
      uint64_t v117 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118);
      sub_44208();
      sub_17C68(&dword_0, v77, v80, "Found %ld apps", v49);
      sub_8870((uint64_t)v49);
    }

    else
    {

      sub_1F12C(v79);
    }

    sub_44210(v76);
    sub_44274();
    uint64_t v82 = v118[2];
    uint64_t v83 = v118[3];
    sub_44298();
    if ((dispatch thunk of DeviceState.isWatch.getter(v82, v83) & 1) != 0)
    {
      uint64_t v84 = v103[0];
      currentIdiom(deviceState:)(&v117);
      if (v65) {
        uint64_t v85 = v111;
      }
      else {
        uint64_t v85 = 0LL;
      }
      if (v65) {
        unint64_t v86 = v65;
      }
      else {
        unint64_t v86 = 0xE000000000000000LL;
      }
      char v87 = HealthLogName.init(rawValue:)(v85, v86);
      uint64_t v88 = defaultWorkoutApp(for:workoutName:)(v84, v87);
      (*(void (**)(uint64_t, uint64_t))(v103[1] + 8LL))(v84, v105);
      sub_8894(v40, (uint64_t)v116);
      sub_44218((uint64_t)&a13);
      swift_retain_n(v88, 2LL);
      sub_1F200();
      os_log_type_t v89 = sub_442B0();
      if (sub_44288(v89))
      {
        uint64_t v90 = (uint8_t *)sub_88B0(12LL);
        uint64_t v91 = sub_88B0(32LL);
        uint64_t v114 = v88;
        uint64_t v115 = v91;
        *(_DWORD *)uint64_t v90 = 136315138;
        uint64_t v92 = sub_111F4();
        sub_1F230( &qword_8C430,  v93,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
        uint64_t v95 = dispatch thunk of CustomStringConvertible.description.getter(v92, v94);
        uint64_t v114 = sub_173E0(v95, v96, &v115);
        sub_442B8((uint64_t)&v114, (uint64_t)&v115);
        sub_14004(v88);
        sub_10F84();
        sub_17C68(&dword_0, (os_log_s *)v49, (os_log_type_t)v67, "Picked the default app for this:  %s", v90);
        sub_B334(v91);
        sub_8870(v91);
        sub_8870((uint64_t)v90);

        sub_44264(v106);
      }

      else
      {

        sub_14004(v88);
        sub_44210(v84);
      }

      sub_1C094(v88);
      sub_44208();
      swift_release(v88);
    }

    else
    {
      swift_bridgeObjectRelease(v65);
      sub_8894(v40, (uint64_t)v116);
      uint64_t v97 = v104;
      uint64_t v98 = v67(v104, v40, v45);
      Logger.logObject.getter(v98);
      os_log_type_t v99 = sub_B33C();
      if (os_log_type_enabled(v97, v99))
      {
        uint64_t v100 = (uint8_t *)sub_88B0(2LL);
        *(_WORD *)uint64_t v100 = 0;
        sub_1F1E8(&dword_0, v97, v99, "Going to full disambiguation", v100);
        sub_8870((uint64_t)v100);
      }

      sub_44210((uint64_t)v97);
      sub_1BCEC();
      sub_44208();
    }

    sub_4424C();
  }

  sub_10F48();
}

void sub_430B8(uint64_t a1, void (*a2)(void *))
{
  uint64_t v3 = type metadata accessor for CommandFailure(0LL);
  sub_14DA4(v3);
  uint64_t v4 = sub_441CC();
  sub_6240( &qword_8D3B8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CommandFailure,  (uint64_t)&protocol conformance descriptor for CommandFailure);
  uint64_t v6 = sub_13FF8(v3, v5);
  *uint64_t v7 = v4;
  v8[0] = v6;
  char v9 = 1;
  a2(v8);
  sub_AFB8((uint64_t)v8, (uint64_t *)&unk_8F3E0);
}

void sub_43164()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_8908();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (os_log_s *)((char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v4);
  uint64_t v8 = (os_log_s *)((char *)v37 - v7);
  uint64_t v9 = type metadata accessor for Parse(0LL);
  os_log_type_t v43 = *(void (***)(uint64_t, uint64_t))(v9 - 8);
  __chkstk_darwin(v9);
  sub_6BD8();
  uint64_t v12 = v11 - v10;
  sub_44240();
  uint64_t v41 = sub_442C8();
  unint64_t v14 = v13;
  uint64_t v15 = Logger.health.unsafeMutableAddressor(v41);
  sub_8894(v15, (uint64_t)&v47);
  uint64_t v42 = v3;
  uint64_t v39 = *(void (**)(os_log_s *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v40 = v15;
  v39(v8, v15, v2);
  uint64_t v16 = sub_442DC();
  Logger.logObject.getter(v16);
  os_log_type_t v17 = sub_B33C();
  if (sub_1F150(v17))
  {
    uint64_t v18 = sub_88B0(12LL);
    uint64_t v38 = v2;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = sub_88B0(32LL);
    v37[1] = v1;
    uint64_t v21 = v20;
    v46[0] = v20;
    v37[0] = v9;
    *(_DWORD *)uint64_t v19 = 136315138;
    sub_442DC();
    uint64_t v45 = sub_173E0(v41, v14, v46);
    uint64_t v9 = v37[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46);
    swift_bridgeObjectRelease_n(v14, 3LL);
    sub_17C68(&dword_0, v8, (os_log_type_t)v15, "Got disambiguation parse %s", v19);
    sub_B334(v21);
    sub_8870(v21);
    uint64_t v22 = (uint64_t)v19;
    uint64_t v2 = v38;
    sub_8870(v22);
  }

  else
  {

    sub_1F12C(v14);
  }

  uint64_t v23 = *(void (**)(os_log_s *, uint64_t))(v42 + 8);
  v23(v8, v2);
  sub_44240();
  sub_DD98();
  uint64_t v25 = v24;
  v43[1](v12, v9);
  if (v25)
  {
    type metadata accessor for AppDisambiguationResponse(0LL);
    static AppDisambiguationResponse.select(app:)(v25);
    sub_1104C();
  }

  else
  {
    sub_44240();
    uint64_t v26 = sub_442C8();
    unint64_t v28 = v27;
    uint64_t v29 = v40;
    sub_8894(v40, (uint64_t)v46);
    v39(v6, v29, v2);
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter(v31);
    if (sub_1F150(v32))
    {
      uint64_t v33 = sub_88B0(12LL);
      os_log_type_t v43 = (void (**)(uint64_t, uint64_t))v6;
      uint64_t v34 = (uint8_t *)v33;
      uint64_t v35 = sub_88B0(32LL);
      uint64_t v45 = v35;
      *(_DWORD *)uint64_t v34 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_173E0(v26, v28, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      swift_bridgeObjectRelease_n(v28, 3LL);
      sub_17C68(&dword_0, v31, (os_log_type_t)v29, "Failed to find app after successful disambiguation from %s", v34);
      sub_B334(v35);
      sub_8870(v35);
      sub_8870((uint64_t)v34);

      uint64_t v36 = (os_log_s *)v43;
    }

    else
    {

      sub_1F12C(v28);
      uint64_t v36 = v6;
    }

    v23(v36, v2);
    type metadata accessor for AppDisambiguationResponse(0LL);
    static AppDisambiguationResponse.cancel()();
  }

  sub_10F48();
}

void sub_434F4()
{
  uint64_t v148 = v1;
  uint64_t v149 = v2;
  uint64_t v132 = v4;
  uint64_t v133 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_6358(&qword_8C348);
  __chkstk_darwin(v7);
  sub_C838();
  uint64_t v9 = sub_39C48(v8);
  uint64_t v10 = type metadata accessor for TemplatingResult(v9);
  sub_4427C(v10, (uint64_t)v144);
  sub_441F8(v11);
  __chkstk_darwin(v12);
  sub_C838();
  uint64_t v14 = sub_39C48(v13);
  uint64_t v15 = type metadata accessor for AceOutput(v14);
  sub_4427C(v15, (uint64_t)&v145);
  sub_441F8(v16);
  __chkstk_darwin(v17);
  sub_6BD8();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for CATOption(0LL);
  sub_4427C(v21, (uint64_t)&v146);
  sub_441F8(v22);
  __chkstk_darwin(v23);
  sub_C838();
  uint64_t v127 = v24;
  uint64_t v25 = sub_6358((uint64_t *)&unk_8F3A0);
  uint64_t v26 = sub_4427C(v25, (uint64_t)&v147);
  __chkstk_darwin(v26);
  sub_11060();
  sub_39C04();
  __chkstk_darwin(v27);
  uint64_t v29 = (uint64_t *)((char *)&v110 - v28);
  uint64_t v30 = type metadata accessor for Locale(0LL);
  sub_441F8(*(void *)(v30 - 8));
  __chkstk_darwin(v31);
  sub_C838();
  uint64_t v33 = sub_39C48(v32);
  uint64_t v34 = type metadata accessor for Logger(v33);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v110 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v41 = (char *)&v110 - v40;
  __chkstk_darwin(v39);
  uint64_t v42 = sub_44254();
  sub_8894(v42, (uint64_t)v144);
  uint64_t v122 = v35;
  os_log_type_t v43 = *(void (**)(void, void, void))(v35 + 16);
  uint64_t v131 = v42;
  uint64_t v130 = v43;
  v43(v0, v42, v34);
  uint64_t v44 = sub_442C0(v6);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.debug.getter(v45);
  BOOL v47 = os_log_type_enabled(v45, v46);
  uint64_t v119 = v20;
  uint64_t v114 = v41;
  if (v47)
  {
    uint64_t v48 = sub_88B0(12LL);
    uint64_t v112 = v38;
    uint64_t v111 = v30;
    uint64_t v49 = (uint8_t *)v48;
    uint64_t v50 = sub_88B0(32LL);
    uint64_t v113 = v29;
    uint64_t v51 = v50;
    v136[0] = v50;
    *(_DWORD *)uint64_t v49 = 136315138;
    uint64_t v110 = v49 + 4;
    uint64_t v52 = sub_111F4();
    uint64_t v53 = swift_bridgeObjectRetain();
    uint64_t v54 = Array.description.getter(v53, v52);
    unint64_t v56 = v55;
    swift_bridgeObjectRelease(v6);
    uint64_t v140 = sub_173E0(v54, v56, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141);
    sub_1F12C(v6);
    swift_bridgeObjectRelease(v56);
    sub_17C68(&dword_0, v45, v46, "Making disambiguation prompt for apps: %s", v49);
    sub_B334(v51);
    uint64_t v57 = v51;
    uint64_t v29 = v113;
    sub_8870(v57);
    uint64_t v58 = (uint64_t)v49;
    uint64_t v30 = v111;
    uint64_t v38 = v112;
    sub_8870(v58);
  }

  else
  {

    sub_1F12C(v6);
  }

  sub_442D4(v0);
  sub_44274();
  uint64_t v59 = v137;
  uint64_t v60 = v138;
  sub_44298();
  uint64_t v61 = v123;
  dispatch thunk of DeviceState.siriLocale.getter(v59, v60);
  uint64_t v62 = v6;
  uint64_t v63 = ((uint64_t (*)(uint64_t, uint64_t))static AppResolutionResponse.makeDisambiguationList(apps:inLocale:))( v6,  v61);
  (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v61, v30);
  sub_4424C();
  sub_44274();
  static Device.current.getter(&v140);
  uint64_t v64 = v142;
  uint64_t v65 = v143;
  sub_8734(&v140, v142);
  char v66 = ((uint64_t (*)(uint64_t, uint64_t))dispatch thunk of DeviceState.isPhone.getter)(v64, v65);
  uint64_t v67 = ((uint64_t (*)(uint64_t, void *, uint64_t, uint64_t *, void))static AppResolutionResponse.makeDisambiguationViews(apps:utteranceViews:disambiguationList:deviceState:compact:))( v62,  _swiftEmptyArrayStorage,  v63,  v136,  v66 & 1);
  sub_4424C();
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(&v140);
  type metadata accessor for CATGlobals(0LL);
  uint64_t v68 = CATGlobals.__allocating_init()();
  uint64_t v69 = sub_6358(&qword_8CB30);
  uint64_t v70 = swift_allocObject( v69,  ((*(unsigned __int8 *)(v125 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80))
        + *(void *)(v125 + 72),
          *(unsigned __int8 *)(v125 + 80) | 7LL);
  *(_OWORD *)(v70 + sub_14C98(v0 + 16) = xmmword_61030;
  static CATOption.defaultMode.getter();
  v136[0] = v70;
  sub_1F230( (unint64_t *)&unk_8F3B0,  v71,  (uint64_t (*)(uint64_t))&type metadata accessor for CATOption,  (uint64_t)&protocol conformance descriptor for CATOption);
  uint64_t v73 = v72;
  uint64_t v74 = sub_6358(&qword_8CB38);
  unint64_t v75 = sub_13EF0();
  uint64_t v76 = v127;
  dispatch thunk of SetAlgebra.init<A>(_:)(v136, v74, v75, v126, v73);
  uint64_t v77 = type metadata accessor for HealthCATWrapper(0LL);
  sub_14DA4(v77);
  uint64_t v78 = sub_466D4(v68, v76);
  sub_46944();
  swift_release(v78);
  uint64_t v79 = v129;
  sub_13F34((uint64_t)v29, (uint64_t)v129);
  if (swift_getEnumCaseMultiPayload(v79, v128) == 1)
  {
    uint64_t v80 = *v79;
    v136[0] = *v79;
    uint64_t v81 = sub_6358(&qword_8CB40);
    ((void (*)(uint64_t *, uint64_t, void *))swift_willThrowTypedImpl)( v136,  v81,  &protocol self-conformance witness table for Error);
    sub_C090();
    sub_8894(v131, (uint64_t)&v140);
    uint64_t v82 = sub_4422C((uint64_t)v38);
    uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
    os_log_type_t v84 = static os_log_type_t.error.getter(v83);
    if (sub_39C58(v84))
    {
      uint64_t v85 = (uint8_t *)sub_88B0(2LL);
      *(_WORD *)uint64_t v85 = 0;
      sub_1F1E8(&dword_0, v83, (os_log_type_t)v38, "Something failed with the clarification views", v85);
      sub_8870((uint64_t)v85);
    }

    sub_442D4((uint64_t)v38);
    uint64_t v86 = type metadata accessor for CommandFailure(0LL);
    sub_14DA4(v86);
    uint64_t v87 = sub_441CC();
    sub_6240( &qword_8D3B8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CommandFailure,  (uint64_t)&protocol conformance descriptor for CommandFailure);
    uint64_t v89 = sub_13FF8(v86, v88);
    *uint64_t v90 = v87;
    v136[0] = v89;
    char v139 = 1;
    sub_442A4();
    swift_release(v63);
    swift_errorRelease(v80);
    sub_AFB8((uint64_t)v136, (uint64_t *)&unk_8F3E0);
    uint64_t v91 = (uint64_t *)&unk_8F3A0;
    uint64_t v92 = v29;
  }

  else
  {
    uint64_t v128 = v63;
    uint64_t v93 = v116;
    uint64_t v94 = v115;
    uint64_t v95 = v118;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v116 + 32))(v115, v79, v118);
    sub_44274();
    static Device.current.getter(&v140);
    uint64_t v96 = v142;
    uint64_t v97 = v143;
    sub_8734(&v140, v142);
    char v98 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v96, v97);
    uint64_t v99 = type metadata accessor for NLContextUpdate(0LL);
    uint64_t v100 = v117;
    sub_8760(v117, 1LL, 1LL, v99);
    uint64_t v135 = 0LL;
    memset(v134, 0, sizeof(v134));
    uint64_t v101 = v119;
    static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v94,  v136,  v98 & 1,  v67,  1LL,  1LL,  v100,  _swiftEmptyArrayStorage,  v134);
    sub_C090();
    sub_AFB8((uint64_t)v134, (uint64_t *)&unk_8F3F0);
    sub_AFB8(v100, &qword_8C348);
    sub_4424C();
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v94, v95);
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(&v140);
    sub_8894(v131, (uint64_t)&v140);
    uint64_t v102 = (uint64_t)v114;
    uint64_t v103 = sub_4422C((uint64_t)v114);
    uint64_t v104 = (os_log_s *)Logger.logObject.getter(v103);
    os_log_type_t v105 = static os_log_type_t.debug.getter(v104);
    if (sub_39C58(v105))
    {
      uint64_t v106 = (uint8_t *)sub_88B0(2LL);
      *(_WORD *)uint64_t v106 = 0;
      sub_1F1E8(&dword_0, v104, (os_log_type_t)v102, "Building dialog and sending success", v106);
      sub_8870((uint64_t)v106);
    }

    sub_442D4(v102);
    uint64_t v107 = v121;
    uint64_t v137 = v121;
    uint64_t v138 = &protocol witness table for AceOutput;
    uint64_t v108 = sub_6B9C(v136);
    uint64_t v109 = v120;
    (*(void (**)(void *, uint64_t, uint64_t))(v120 + 16))(v108, v101, v107);
    char v139 = 0;
    sub_442A4();
    swift_release(v128);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v101, v107);
    sub_AFB8((uint64_t)v29, (uint64_t *)&unk_8F3A0);
    uint64_t v91 = (uint64_t *)&unk_8F3E0;
    uint64_t v92 = v136;
  }

  sub_AFB8((uint64_t)v92, v91);
}

uint64_t sub_43D88()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for WorkoutAppResolutionStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin28WorkoutAppResolutionStrategy);
}

#error "43DDC: call analysis failed (funcsize=8)"
uint64_t sub_43DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v9;
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppResolutionOnDeviceFlowStrategy.makeAppResolutionSuccessfulResponse(app:)[1]);
  *(void *)(v4 + sub_14C98(v0 + 16) = v9;
  char *v9 = v4;
  v9[1] = sub_8640;
  return AppResolutionOnDeviceFlowStrategy.makeAppResolutionSuccessfulResponse(app:)(a1, a2, a3, a4);
}

uint64_t sub_43E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppResolutionOnDeviceFlowStrategy.makeAppResolutionUnsuccessfulResponse(reason:)[1]);
  *(void *)(v4 + sub_14C98(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_885C;
  return AppResolutionOnDeviceFlowStrategy.makeAppResolutionUnsuccessfulResponse(reason:)(a1, a2, a3, a4);
}

uint64_t sub_43EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AppResolutionOnDeviceFlowStrategy.makeErrorOutput(error:)[1]);
  *(void *)(v4 + sub_14C98(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_885C;
  return AppResolutionOnDeviceFlowStrategy.makeErrorOutput(error:)(a1, a2, a3, a4);
}

void sub_43F6C(uint64_t a1, void (*a2)(void *))
{
}

void sub_43F94()
{
}

void sub_43FA8()
{
}

void sub_43FCC(uint64_t a1, uint64_t a2)
{
}

void sub_43FF8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_44024(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_44048@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

Swift::Int sub_44070(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }

  sub_6358(qword_8F308);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)result;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_16:
    sub_C090();
    return (Swift::Int)v4;
  }

  unint64_t v6 = 0LL;
  Swift::Int v7 = result + 56;
  while (v6 < *(void *)(a1 + 16))
  {
    Swift::UInt v8 = *(void *)(a1 + 32 + 8 * v6);
    Hasher.init(_seed:)(v19, v4[5]);
    Hasher._combine(_:)(v8);
    Swift::Int result = Hasher._finalize()();
    uint64_t v9 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v10 = result & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v7 + 8 * (v10 >> 6));
    uint64_t v13 = 1LL << v10;
    uint64_t v14 = v4[6];
    if (((1LL << v10) & v12) != 0)
    {
      if (*(void *)(v14 + 8 * v10) == v8) {
        goto LABEL_13;
      }
      uint64_t v15 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v15;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v7 + 8 * (v10 >> 6));
        uint64_t v13 = 1LL << v10;
        if ((v12 & (1LL << v10)) == 0) {
          break;
        }
        if (*(void *)(v14 + 8 * v10) == v8) {
          goto LABEL_13;
        }
      }
    }

    *(void *)(v7 + 8 * v11) = v13 | v12;
    *(void *)(v14 + 8 * v1sub_4A488(*(void **)(v2 + 152), 0) = v8;
    uint64_t v16 = v4[2];
    BOOL v17 = __OFADD__(v16, 1LL);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_18;
    }
    void v4[2] = v18;
LABEL_13:
    if (++v6 == v5) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_441CC()
{
  return CommandFailure.init(errorCode:reason:)(-1LL, 0x6C706D6920746F6ELL, 0xEF6465746E656D65LL);
}

void sub_441F8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t sub_44208()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_44210(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_44218@<X0>(uint64_t a1@<X8>)
{
  return v1(*(void *)(a1 - 256), v2, v3);
}

uint64_t sub_4422C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 272))(a1, v1, v2);
}

uint64_t sub_44240()
{
  return Input.parse.getter();
}

uint64_t sub_4424C()
{
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(v0 - 200));
}

uint64_t sub_44254()
{
  return Logger.health.unsafeMutableAddressor();
}

uint64_t sub_44264(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 - 272))(a1, *(void *)(v1 - 248));
}

void *sub_44274()
{
  return static Device.current.getter((void *)(v0 - 200));
}

uint64_t sub_4427C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  return result;
}

BOOL sub_44288(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void *sub_44298()
{
  return sub_8734((void *)(v1 - 200), v0);
}

uint64_t sub_442A4()
{
  return (*(uint64_t (**)(uint64_t))(v0 - 248))(v0 - 200);
}

uint64_t sub_442B0()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_442B8(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_442C0(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_442C8()
{
  return String.init<A>(describing:)(v1, v0);
}

uint64_t sub_442D4(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_442DC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_442E4()
{
  return v0(v2, v1);
}

uint64_t sub_442F0(uint64_t a1)
{
  v2[0] = "(";
  v2[1] = (char *)&value witness table for () + 64;
  _OWORD v2[2] = &unk_65278;
  return swift_initClassMetadata2(a1, 0LL, 3LL, v2, a1 + 88);
}

void sub_4434C(uint64_t a1)
{
  uint64_t v38 = type metadata accessor for HealthNLIntent(0LL);
  sub_6C04();
  __chkstk_darwin(v4);
  sub_6BD8();
  uint64_t v39 = v6 - v5;
  uint64_t v7 = type metadata accessor for NLIntent(0LL);
  sub_46678();
  __chkstk_darwin(v8);
  sub_6BD8();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for Parse(0LL);
  uint64_t v40 = *(void *)(v12 - 8);
  uint64_t v41 = v12;
  __chkstk_darwin(v12);
  sub_46698();
  uint64_t v13 = type metadata accessor for Input(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_6BD8();
  uint64_t v17 = v16 - v15;
  uint64_t v19 = static os_log_type_t.debug.getter(v18);
  os_log_type_t v20 = v19;
  uint64_t v21 = *(void **)Log.health.unsafeMutableAddressor(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  if (os_log_type_enabled((os_log_t)v21, v20))
  {
    uint64_t v35 = v21;
    uint64_t v37 = v7;
    uint64_t v36 = v11;
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v43 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    sub_AFF0( (unint64_t *)&unk_8F410,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v13, v24);
    unint64_t v27 = v26;
    uint64_t v42 = sub_173E0(v25, v26, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
    unint64_t v28 = v27;
    uint64_t v7 = v37;
    swift_bridgeObjectRelease(v28);
    sub_46668();
    uint64_t v13 = (uint64_t)v35;
    _os_log_impl(&dword_0, v35, v20, "HealthTCC# received input: %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1LL);
    sub_8870(v23);
    uint64_t v29 = (uint64_t)v22;
    uint64_t v11 = v36;
    sub_8870(v29);
  }

  else
  {
    uint64_t v30 = sub_46668();
  }

  Input.parse.getter(v30);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 88))(v2, v41);
  if ((_DWORD)v31 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v40 + 96))(v2, v41);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v11, v2, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v39, v11, v7);
    if (qword_8BBE8 != -1) {
      swift_once(&qword_8BBE8, sub_4EE30);
    }
    uint64_t v32 = qword_8FA58;
    sub_AFF0((unint64_t *)&qword_8C5F8, type metadata accessor for HealthNLIntent, (uint64_t)&unk_661A8);
    IntentNodeTraversable.value<A>(forNode:)(v32, v38, v33);
    __asm { BR              X10 }
  }

  static os_log_type_t.debug.getter(v31);
  id v34 = sub_46688();
  os_log(_:dso:log:_:_:)(v13, &dword_0, v34, "HealthTCC# Unknown parse -> ignore", 34LL, 2LL, _swiftEmptyArrayStorage);

  static ActionForInput.ignore()();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v2, v41);
  sub_10F48();
}

void sub_44750(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_6358((uint64_t *)&unk_8F400);
  sub_6C04();
  __chkstk_darwin(v9);
  sub_6BD8();
  uint64_t v12 = v11 - v10;
  int v13 = *(unsigned __int8 *)(v2 + 72);
  uint64_t v14 = type metadata accessor for ConfirmationResponse(0LL);
  uint64_t v15 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
  if (!v13) {
    uint64_t v15 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104LL))(v7, *v15, v14);
  type metadata accessor for ConfirmationResponse(0LL);
  sub_8760(v7, 0LL, 1LL, v14);
  SimpleConfirmationResponseProvider.init(_:)(v7);
  swift_storeEnumTagMultiPayload(v12, v8, 0LL);
  a2(v12);
  sub_AFB8(v12, (uint64_t *)&unk_8F400);
  sub_2AF30();
}

uint64_t sub_44864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_448F4(a3, a4);
}

void sub_44870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_46650();
  sub_46678();
  __chkstk_darwin(v9);
  sub_6BD8();
  uint64_t v12 = v11 - v10;
  sub_34B34();
  sub_44C14(a1, v12, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v12, v8);
  sub_2AF30();
}

uint64_t sub_448F4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_allocObject(&unk_821D8, 40LL, 7LL);
  uint64_t v5[2] = a1;
  v5[3] = a2;
  v5[4] = v2;
  swift_retain(a2);
  swift_retain(v2);
  static ResponseTemplates.taskAborted(_:)(sub_465E8, v5);
  return swift_release(v5);
}

void sub_44960(uint64_t a1, void (*a2)(__int128 *), uint64_t a3, void *a4)
{
  uint64_t v31 = a3;
  uint64_t v32 = a2;
  uint64_t v6 = sub_6358(&qword_8C348);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AceOutput(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v29 = v9;
  uint64_t v30 = v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_6358((uint64_t *)&unk_8F3A0);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_2D9BC(a1, (uint64_t)v19, (uint64_t *)&unk_8F3A0);
  if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
  {
    *(void *)&__int128 v33 = *v19;
    uint64_t v20 = v33;
    char v36 = 1;
    swift_errorRetain(v33);
    v32(&v33);
    swift_errorRelease(v20);
  }

  else
  {
    (*(void (**)(char *, void *, uint64_t))(v14 + 32))(v16, v19, v13);
    uint64_t v21 = a4 + 2;
    uint64_t v22 = a4[5];
    uint64_t v23 = a4[6];
    sub_8734(a4 + 2, v22);
    char v24 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v22, v23);
    uint64_t v25 = type metadata accessor for NLContextUpdate(0LL);
    sub_8760((uint64_t)v8, 1LL, 1LL, v25);
    uint64_t v35 = 0LL;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v16,  v21,  v24 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v8,  _swiftEmptyArrayStorage,  &v33);
    sub_AFB8((uint64_t)&v33, (uint64_t *)&unk_8F3F0);
    sub_AFB8((uint64_t)v8, &qword_8C348);
    uint64_t v26 = v29;
    *((void *)&v34 + 1) = v29;
    uint64_t v35 = &protocol witness table for AceOutput;
    unint64_t v27 = sub_6B9C(&v33);
    uint64_t v28 = v30;
    (*(void (**)(void *, char *, uint64_t))(v30 + 16))(v27, v12, v26);
    char v36 = 0;
    v32(&v33);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v26);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }

  sub_AFB8((uint64_t)&v33, (uint64_t *)&unk_8F3E0);
}

void sub_44C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  uint64_t v45 = a2;
  uint64_t v48 = *v4;
  uint64_t v49 = sub_46650();
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v44 = v9;
  os_log_type_t v46 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_6358((uint64_t *)&unk_8F390);
  sub_6C04();
  __chkstk_darwin(v11);
  sub_6BD8();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for Locale(0LL);
  sub_46678();
  __chkstk_darwin(v16);
  sub_46698();
  uint64_t v50 = swift_allocBox(v10);
  uint64_t v18 = v17;
  uint64_t v19 = type metadata accessor for AppDisplayInfo(0LL);
  uint64_t v53 = v18;
  uint64_t v42 = v19;
  sub_8760(v18, 1LL, 1LL, v19);
  uint64_t v20 = type metadata accessor for AppInformationResolver(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = swift_retain(a1);
  uint64_t v22 = AppInformationResolver.init(app:)(v21);
  uint64_t v23 = v4[5];
  uint64_t v24 = v4[6];
  uint64_t v43 = v4 + 2;
  sub_8734(v4 + 2, v23);
  dispatch thunk of DeviceState.siriLocale.getter(v23, v24);
  uint64_t v25 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)(v6);
  uint64_t v27 = v26;
  swift_release(v22);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v15);
  if (v27)
  {
    Swift::Bool v28 = App.isFirstParty()();
    AppDisplayInfo.init(displayName:isFirstParty:)(v25, v27, v28);
    sub_8760(v14, 0LL, 1LL, v42);
    sub_46238(v14, v53);
  }

  uint64_t v30 = v46;
  uint64_t v29 = v47;
  uint64_t v31 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v45, v49);
  uint64_t v32 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v33 = (v32 + 32) & ~v32;
  unint64_t v34 = (v44 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v35 = swift_allocObject(&unk_82138, v34 + 16, v32 | 7);
  *(void *)(v35 + sub_14C98(v0 + 16) = *(void *)(v48 + 80);
  *(void *)(v35 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v7;
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v35 + v33, v30, v31);
  char v36 = (void *)(v35 + v34);
  uint64_t v38 = v51;
  uint64_t v37 = v52;
  *char v36 = v51;
  v36[1] = v37;
  sub_2D9BC(v53, v14, (uint64_t *)&unk_8F390);
  sub_25230((uint64_t)v43, (uint64_t)v54);
  uint64_t v39 = (void *)swift_allocObject(&unk_82160, 72LL, 7LL);
  v39[2] = v38;
  v39[3] = v37;
  v39[4] = a1;
  v39[5] = v7;
  v39[6] = sub_46188;
  v39[7] = v35;
  uint64_t v40 = v50;
  v39[8] = v50;
  swift_retain_n(v7, 2LL);
  swift_retain_n(v37, 2LL);
  swift_retain(a1);
  swift_retain(v35);
  swift_retain(v40);
  static TCCTemplates.promptToEnableApp(appDisplayInfo:deviceState:_:)(v14, v54, sub_46224, v39);
  swift_release(v35);
  swift_release(v39);
  sub_AFB8((uint64_t)v54, &qword_8F198);
  sub_AFB8(v14, (uint64_t *)&unk_8F390);
  swift_release(v40);
  sub_10F48();
}

void sub_44F24(uint64_t a1, void *a2, void *a3, uint64_t a4, void (*a5)(__int128 *), uint64_t a6)
{
  uint64_t v31 = a6;
  uint64_t v32 = a5;
  uint64_t v29 = a1;
  uint64_t v30 = a4;
  uint64_t v8 = sub_6358(&qword_8C348);
  __chkstk_darwin(v8);
  uint64_t v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for AceOutput(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = a3 + 2;
  uint64_t v16 = a3[5];
  uint64_t v17 = a3[6];
  sub_8734(a3 + 2, v16);
  int v28 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v16, v17);
  uint64_t v18 = sub_6358(&qword_8E9B0);
  uint64_t v19 = swift_allocObject(v18, 40LL, 7LL);
  *(_OWORD *)(v19 + sub_14C98(v0 + 16) = xmmword_61780;
  *(void *)(v19 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2;
  *(void *)&__int128 v33 = v19;
  specialized Array._endMutation()(v19);
  uint64_t v20 = v33;
  uint64_t v21 = a3[5];
  sub_8734(a3 + 2, v21);
  id v22 = a2;
  char v23 = dispatch thunk of DeviceState.isCarPlay.getter(v21);
  uint64_t v24 = v29;
  LOBYTE(v21) = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)((v23 & 1) == 0);
  uint64_t v25 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16LL))(v10, v30, v25);
  sub_8760((uint64_t)v10, 0LL, 1LL, v25);
  uint64_t v35 = 0LL;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v24,  v15,  v28 & 1,  v20,  v21 & 1,  1LL,  v10,  _swiftEmptyArrayStorage,  &v33);
  swift_bridgeObjectRelease(v20);
  sub_AFB8((uint64_t)&v33, (uint64_t *)&unk_8F3F0);
  sub_AFB8((uint64_t)v10, &qword_8C348);
  *((void *)&v34 + 1) = v11;
  uint64_t v35 = &protocol witness table for AceOutput;
  uint64_t v26 = sub_6B9C(&v33);
  (*(void (**)(void *, _BYTE *, uint64_t))(v12 + 16))(v26, v14, v11);
  char v36 = 0;
  v32(&v33);
  (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
  sub_AFB8((uint64_t)&v33, (uint64_t *)&unk_8F3E0);
}

void sub_4517C( uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, id), uint64_t a7, uint64_t a8)
{
  uint64_t v120 = a7;
  uint64_t v119 = a6;
  uint64_t v118 = a5;
  uint64_t v122 = a4;
  uint64_t v121 = a3;
  uint64_t v123 = a2;
  uint64_t v10 = sub_6358((uint64_t *)&unk_8F390);
  __chkstk_darwin(v10);
  uint64_t v113 = (uint64_t)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CATOption(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v115 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v110 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v100 - v19;
  uint64_t v21 = sub_6358((uint64_t *)&unk_8F3A0);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v117 = (char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v116 = (char *)&v100 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v100 - v26;
  uint64_t v111 = a8;
  uint64_t v28 = swift_projectBox(a8);
  sub_2D9BC(a1, (uint64_t)v27, (uint64_t *)&unk_8F3A0);
  if (swift_getEnumCaseMultiPayload(v27, v21) == 1)
  {
    v124[0] = *(void *)v27;
    uint64_t v29 = v124[0];
    char v125 = 1;
    swift_errorRetain(v124[0]);
    v123(v124);
    swift_errorRelease(v29);
    sub_AFB8((uint64_t)v124, (uint64_t *)&unk_8F3E0);
  }

  else
  {
    uint64_t v107 = v28;
    uint64_t v114 = v16;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v112 = v20;
    uint64_t v108 = v15;
    uint64_t v101 = v30;
    v30(v20, v27, v15);
    type metadata accessor for CATGlobals(0LL);
    uint64_t v31 = CATGlobals.__allocating_init()();
    uint64_t v32 = sub_6358(&qword_8CB30);
    uint64_t v33 = swift_allocObject( v32,  ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
          + *(void *)(v13 + 72),
            *(unsigned __int8 *)(v13 + 80) | 7LL);
    *(_OWORD *)(v33 + sub_14C98(v0 + 16) = xmmword_61030;
    static CATOption.defaultMode.getter();
    v124[0] = v33;
    sub_AFF0( (unint64_t *)&unk_8F3B0,  (uint64_t (*)(uint64_t))&type metadata accessor for CATOption,  (uint64_t)&protocol conformance descriptor for CATOption);
    uint64_t v35 = v34;
    uint64_t v36 = sub_6358(&qword_8CB38);
    unint64_t v37 = sub_13EF0();
    uint64_t v38 = (uint64_t)v115;
    dispatch thunk of SetAlgebra.init<A>(_:)(v124, v36, v37, v12, v35);
    uint64_t v39 = type metadata accessor for HealthCATWrapper(0LL);
    swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
    uint64_t v40 = sub_466D4(v31, v38);
    uint64_t v106 = sub_6358(&qword_8F3C8);
    uint64_t inited = swift_initStackObject(v106, v127);
    __int128 v105 = xmmword_61440;
    *(_OWORD *)(inited + sub_14C98(v0 + 16) = xmmword_61440;
    unint64_t v104 = (unint64_t)"healthFocusObject";
    *(void *)(inited + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0xD000000000000012LL;
    *(void *)(inited + 4sub_4A488(*(void **)(v2 + 152), 0) = 0x800000000006A160LL;
    *(_OWORD *)(inited + 48) = xmmword_653B0;
    *(_OWORD *)(inited + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = xmmword_653C0;
    __int128 v103 = xmmword_653C0;
    *(void *)(inited + 8sub_4A488(*(void **)(v2 + 152), 0) = App.appIdentifier.getter(inited);
    *(void *)(inited + sub_14C58(v0 + 88) = v42;
    uint64_t v43 = sub_6358(&qword_8F3D0);
    unint64_t v44 = sub_46280();
    uint64_t v45 = Dictionary.init(dictionaryLiteral:)(inited, v43, v43, v44);
    id v46 = sub_37570(v45);
    swift_bridgeObjectRelease(v45);
    uint64_t v47 = (uint64_t)v116;
    sub_46914();
    uint64_t v115 = (char *)v21;
    uint64_t v48 = Result<>.firstPrint.getter(v21);
    uint64_t v50 = v49;
    sub_AFB8(v47, (uint64_t *)&unk_8F3A0);
    if (v50) {
      uint64_t v51 = v48;
    }
    else {
      uint64_t v51 = 0LL;
    }
    if (v50) {
      uint64_t v52 = v50;
    }
    else {
      uint64_t v52 = 0xE000000000000000LL;
    }
    uint64_t v53 = sub_6358(&qword_8E9B0);
    uint64_t v54 = swift_allocObject(v53, 40LL, 7LL);
    __int128 v102 = xmmword_61780;
    *(_OWORD *)(v54 + sub_14C98(v0 + 16) = xmmword_61780;
    *(void *)(v54 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v46;
    v124[0] = v54;
    specialized Array._endMutation()(v54);
    uint64_t v55 = v124[0];
    id v56 = objc_allocWithZone(&OBJC_CLASS___SAUIConfirmationOption);
    uint64_t v116 = (char *)v46;
    id v57 = [v56 init];
    sub_462DC(v51, v52, v57);
    if ((unint64_t)v55 >> 62)
    {
      uint64_t v58 = v107;
      if (v55 < 0) {
        uint64_t v96 = v55;
      }
      else {
        uint64_t v96 = v55 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v97 = sub_6358(&qword_8E9B8);
      uint64_t v60 = _bridgeCocoaArray<A>(_:)(v96, v97);
      swift_bridgeObjectRelease(v55);
    }

    else
    {
      uint64_t v58 = v107;
      uint64_t v59 = swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v59);
      uint64_t v60 = v55;
    }

    uint64_t v61 = v57;
    sub_46320(v60, v57);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v55);
    uint64_t v62 = swift_initStackObject(v106, v126);
    *(_OWORD *)(v62 + sub_14C98(v0 + 16) = v105;
    unint64_t v63 = v104 | 0x8000000000000000LL;
    *(void *)(v62 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0xD000000000000012LL;
    *(void *)(v62 + 4sub_4A488(*(void **)(v2 + 152), 0) = v63;
    __int128 v64 = v103;
    *(_OWORD *)(v62 + 48) = xmmword_653D0;
    *(_OWORD *)(v62 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v64;
    *(void *)(v62 + 8sub_4A488(*(void **)(v2 + 152), 0) = App.appIdentifier.getter(v62);
    *(void *)(v62 + sub_14C58(v0 + 88) = v65;
    uint64_t v66 = Dictionary.init(dictionaryLiteral:)(v62, v43, v43, v44);
    id v67 = sub_37570(v66);
    swift_bridgeObjectRelease(v66);
    uint64_t v68 = (uint64_t)v117;
    uint64_t v122 = v40;
    sub_4692C();
    uint64_t v69 = Result<>.firstPrint.getter(v115);
    uint64_t v71 = v70;
    sub_AFB8(v68, (uint64_t *)&unk_8F3A0);
    if (v71) {
      uint64_t v72 = v69;
    }
    else {
      uint64_t v72 = 0LL;
    }
    if (!v71) {
      uint64_t v71 = 0xE000000000000000LL;
    }
    uint64_t v73 = swift_allocObject(v53, 40LL, 7LL);
    *(_OWORD *)(v73 + sub_14C98(v0 + 16) = v102;
    *(void *)(v73 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v67;
    v124[0] = v73;
    specialized Array._endMutation()(v73);
    uint64_t v74 = v124[0];
    id v75 = objc_allocWithZone(&OBJC_CLASS___SAUIConfirmationOption);
    uint64_t v117 = (char *)v67;
    id v76 = [v75 init];
    sub_462DC(v72, v71, v76);
    uint64_t v77 = v114;
    if ((unint64_t)v74 >> 62)
    {
      if (v74 < 0) {
        uint64_t v98 = v74;
      }
      else {
        uint64_t v98 = v74 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v99 = sub_6358(&qword_8E9B8);
      uint64_t v79 = _bridgeCocoaArray<A>(_:)(v98, v99);
      swift_bridgeObjectRelease(v74);
    }

    else
    {
      uint64_t v78 = swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v78);
      uint64_t v79 = v74;
    }

    uint64_t v80 = v108;
    uint64_t v81 = (void (*)(void))v123;
    sub_46320(v79, v76);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v74);
    id v82 = sub_37780(v61, v76, 0LL);
    uint64_t v83 = *(void *)(v118 + 40);
    sub_8734((void *)(v118 + 16), v83);
    if ((dispatch thunk of DeviceState.isCarPlay.getter(v83) & 1) != 0)
    {
      swift_beginAccess(v58, v124, 0LL, 0LL);
      uint64_t v84 = v77;
      uint64_t v85 = v113;
      sub_2D9BC(v58, v113, (uint64_t *)&unk_8F390);
      uint64_t v86 = v110;
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v110, v112, v80);
      uint64_t v87 = *(unsigned __int8 *)(v84 + 80);
      uint64_t v88 = (v87 + 64) & ~v87;
      uint64_t v89 = (void *)swift_allocObject(&unk_82188, v88 + v109, v87 | 7);
      uint64_t v90 = v121;
      v89[2] = v81;
      v89[3] = v90;
      uint64_t v91 = v111;
      v89[4] = v111;
      v89[5] = v82;
      uint64_t v92 = (char *)v89 + v88;
      uint64_t v93 = v120;
      v89[6] = v119;
      v89[7] = v93;
      v101(v92, v86, v80);
      swift_retain(v90);
      swift_retain(v91);
      id v94 = v82;
      swift_retain(v93);
      static TCCTemplates.promptToEnableAppSnippetSubtitle(appDisplayInfo:_:)(v85, sub_463D8, v89);

      swift_release(v122);
      swift_release(v89);
      sub_AFB8(v85, (uint64_t *)&unk_8F390);
      (*(void (**)(char *, uint64_t))(v114 + 8))(v112, v80);
    }

    else
    {
      uint64_t v95 = v112;
      v119(v112, v82);

      swift_release(v122);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v95, v80);
    }
  }

void sub_45B10( uint64_t a1, uint64_t a2, char a3, void (*a4)(void *), uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v36 = a8;
  uint64_t v37 = a2;
  uint64_t v38 = a7;
  uint64_t v15 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_6358((uint64_t *)&unk_8F390);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a3 & 1) != 0)
  {
    v39[0] = a1;
    char v40 = 1;
    swift_errorRetain(a1);
    a4(v39);
    uint64_t v32 = (uint64_t *)&unk_8F3E0;
    uint64_t v31 = v39;
  }

  else
  {
    uint64_t v34 = v15;
    uint64_t v35 = a1;
    uint64_t v22 = swift_projectBox(a6);
    swift_beginAccess(v22, v39, 0LL, 0LL);
    sub_2D9BC(v22, (uint64_t)v21, (uint64_t *)&unk_8F390);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))( (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a10,  v15);
    uint64_t v23 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v24 = (v23 + 72) & ~v23;
    uint64_t v25 = (char *)swift_allocObject(&unk_821B0, v24 + v17, v23 | 7);
    *((void *)v25 + _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a4;
    *((void *)v25 + 3) = a5;
    uint64_t v27 = v37;
    uint64_t v26 = v38;
    uint64_t v29 = v35;
    uint64_t v28 = v36;
    *((void *)v25 + _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v38;
    *((void *)v25 + 5) = v29;
    *((void *)v25 + 6) = v27;
    *((void *)v25 + _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7) = v28;
    *((void *)v25 + 8) = a9;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v25[v24], v18, v34);
    sub_464DC(v29, v27, 0);
    swift_retain(a5);
    id v30 = v26;
    swift_retain(a9);
    static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:_:)(v21, sub_46480, v25);
    swift_release(v25);
    uint64_t v31 = v21;
    uint64_t v32 = (uint64_t *)&unk_8F390;
  }

  sub_AFB8((uint64_t)v31, v32);
}

void sub_45CFC( uint64_t a1, uint64_t a2, char a3, void (*a4)(void *), uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, void *), uint64_t a10, uint64_t a11)
{
  if ((a3 & 1) != 0)
  {
    v19[0] = a1;
    char v20 = 1;
    swift_errorRetain(a1);
    a4(v19);
    sub_AFB8((uint64_t)v19, (uint64_t *)&unk_8F3E0);
  }

  else
  {
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(SAUIConfirmationViewStyleSYSTEMValue);
    sub_464EC(v16, v17, a6);
    sub_4653C(a1, a2, a6);
    sub_46580(a7, a8, a6);
    a9(a11, a6);
  }

uint64_t sub_45DD4()
{
  return v0;
}

uint64_t sub_45DF4()
{
  return swift_deallocClassInstance(v0, 73LL, 7LL);
}

uint64_t type metadata accessor for HealthTCCAcceptanceFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HealthTCCAcceptanceFlowStrategy);
}

void sub_45E20(uint64_t a1)
{
}

void sub_45E40(uint64_t a1, void (*a2)(uint64_t))
{
}

uint64_t sub_45E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_44864(a1, a2, a3, a4);
}

void sub_45E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_45EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for HealthTCCAcceptanceFlowStrategy(0LL, *(void *)(a5 + 80), a3, a4);
  return RequestTCCAcceptanceFlowStrategy.makeRepromptOnEmptyParse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_45F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for HealthTCCAcceptanceFlowStrategy(0LL, *(void *)(a5 + 80), a3, a4);
  return RequestTCCAcceptanceFlowStrategy.makeRepromptOnLowConfidence(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_45F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for HealthTCCAcceptanceFlowStrategy(0LL, *(void *)(a5 + 80), a3, a4);
  return RequestTCCAcceptanceFlowStrategy.makePromptForDeviceUnlock(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_45FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for HealthTCCAcceptanceFlowStrategy(0LL, *(void *)(a5 + 80), a3, a4);
  return RequestTCCAcceptanceFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_46020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for HealthTCCAcceptanceFlowStrategy(0LL, *(void *)(a5 + 80), a3, a4);
  return RequestTCCAcceptanceFlowStrategy.makeHandoffResponseForAuthenticationResponse(app:intent:_:)( a1,  a2,  a3,  a4,  v11,  a6);
}

uint64_t sub_46080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for HealthTCCAcceptanceFlowStrategy(0LL, *(void *)(a6 + 80), a3, a4);
  return IntentErrorHandling.makeErrorResponse(app:intent:error:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_460F0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_652B8, a1);
}

uint64_t sub_46100(uint64_t a1)
{
  return swift_getWitnessTable(&unk_652E8, a1);
}

uint64_t sub_46110()
{
  uint64_t v3 = v2 | 7;
  unint64_t v4 = (*(void *)(v1 + 64) + ((v2 + 32) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_46648();
  sub_4660C();
  swift_release(*(void *)(v0 + v4 + 8));
  return swift_deallocObject(v0, v4 + 16, v3);
}

void sub_46188(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(sub_46650() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  sub_44F24(a1, a2, *(void **)(v2 + 24), v2 + v6, *(void (**)(__int128 *))v7, *(void *)(v7 + 8));
}

uint64_t sub_461EC()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_46224(uint64_t a1)
{
}

uint64_t sub_46238(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358((uint64_t *)&unk_8F390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_46280()
{
  unint64_t result = qword_8F3D8;
  if (!qword_8F3D8)
  {
    uint64_t v1 = sub_D958(&qword_8F3D0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_8F3D8);
  }

  return result;
}

void sub_462DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setLabel:v4];
}

void sub_46320(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setCommands:isa];
}

uint64_t sub_46384()
{
  swift_release(*(void *)(v0 + 56));
  sub_4660C();
  return sub_465FC(v0, v1, v2);
}

void sub_463D8()
{
}

uint64_t sub_4642C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  sub_466CC();
  sub_4660C();
  return sub_465FC(v0, v1, v2);
}

void sub_46480()
{
}

uint64_t sub_464DC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRetain();
  }
  else {
    return swift_bridgeObjectRetain(a2);
  }
}

void sub_464EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setStyle:v5];
}

void sub_4653C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setTitle:v4];
}

void sub_46580(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setSubtitle:v4];
}

uint64_t sub_465C4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_465E8(uint64_t a1)
{
}

uint64_t sub_465FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_4660C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_4661C()
{
  return swift_release(*(void *)(v0 + 24));
}

uint64_t sub_46634()
{
  return type metadata accessor for TemplatingResult(0LL);
}

uint64_t sub_46648()
{
  return swift_release(*(void *)(v0 + 24));
}

uint64_t sub_46650()
{
  return type metadata accessor for NLContextUpdate(0LL);
}

  ;
}

uint64_t sub_46668()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

id sub_46688()
{
  return **(id **)(v0 - 136);
}

  ;
}

  ;
}

uint64_t sub_466C4()
{
  return swift_release(*(void *)(v0 + 32));
}

uint64_t sub_466CC()
{
  return swift_release(*(void *)(v0 + 64));
}

uint64_t sub_466D4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for HealthCATWrapper(0LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v5);
  *(void *)(v2 + sub_14C98(v0 + 16) =  [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  *(void *)(v2 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a1;
  uint64_t v7 = v2 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin16HealthCATWrapper_options;
  uint64_t v8 = type metadata accessor for CATOption(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v7, a2, v8);
  return v2;
}

void sub_46764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = 0LL;
  memset(v9, 0, sizeof(v9));
  static CATExecutor.execute(bundle:catId:parameters:globals:callback:options:)( v7,  a1,  a2,  a3,  v8,  v9,  v3 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin16HealthCATWrapper_options);
  sub_10004((uint64_t)v9, &qword_8DC28);
}

uint64_t sub_467F8(uint64_t a1, char a2)
{
  uint64_t v3 = sub_6358(&qword_8CD28);
  uint64_t inited = (__n128 *)swift_initStackObject(v3, &v15);
  sub_47728(inited, (__n128)xmmword_61440);
  if (v6)
  {
    sub_47714();
  }

  else
  {
    if (v5 == 1) {
      unint64_t v7 = 0x80000000000685C0LL;
    }
    else {
      unint64_t v7 = 0x80000000000685E0LL;
    }
    unint64_t v8 = 0xD000000000000013LL;
  }

  inited[3].n128_u64[0] = v8;
  inited[3].n128_u64[1] = v7;
  inited[4].n128_u64[1] = (unint64_t)&type metadata for String;
  inited[5].n128_u64[0] = 1651664246LL;
  inited[5].n128_u64[1] = 0xE400000000000000LL;
  uint64_t v9 = sub_6C64(a2);
  inited[7].n128_u64[1] = (unint64_t)&type metadata for String;
  inited[6].n128_u64[0] = v9;
  inited[6].n128_u64[1] = v10;
  uint64_t v11 = sub_4777C(v9, v10, (uint64_t)&type metadata for Any + 8, (uint64_t)&protocol witness table for String);
  sub_47764();
  sub_46764(v12, v13, v11);
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_46914()
{
  return sub_476F0(22LL, 0x800000000006AD00LL);
}

uint64_t sub_4692C()
{
  return sub_476F0(21LL, 0x800000000006ACE0LL);
}

uint64_t sub_46944()
{
  uint64_t v0 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  sub_47764();
  sub_46764(0xD00000000000001FLL, v1, v0);
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_469B4()
{
  return sub_476F0(40LL, 0x800000000006AC90LL);
}

uint64_t sub_469CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  sub_46764(a1, a2, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_46A44(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = sub_6358(&qword_8C260);
  uint64_t v8 = sub_477A8(v6, v7);
  *(_OWORD *)(v8 + sub_14C98(v0 + 16) = xmmword_63690;
  sub_47794();
  *(void *)(v9 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v10;
  *(void *)(v9 + 4sub_4A488(*(void **)(v2 + 152), 0) = 0xE700000000000000LL;
  uint64_t v11 = swift_retain(a1);
  uint64_t v12 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v11);
  if (v12
    && (uint64_t v13 = v12, v14 = [v12 displayAppName], v13, v14))
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    swift_release(a1);
    *(void *)(v8 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = &type metadata for String;
    *(void *)(v8 + 48) = v15;
    *(void *)(v8 + 56) = v17;
  }

  else
  {
    swift_release(a1);
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
  }

  *(void *)(v8 + 8sub_4A488(*(void **)(v2 + 152), 0) = 1953459315LL;
  *(void *)(v8 + sub_14C58(v0 + 88) = 0xE400000000000000LL;
  if (a2 == 2 || a2 == 1) {
    sub_477C4();
  }
  else {
    sub_47714();
  }
  *(void *)(v8 + 96) = v19;
  *(void *)(v8 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v18;
  *(void *)(v8 + 12sub_4A488(*(void **)(v2 + 152), 0) = &type metadata for String;
  *(void *)(v8 + 128) = 0x6E456E65704F7369LL;
  *(void *)(v8 + 136) = 0xEB00000000646564LL;
  *(void *)(v8 + 168) = &type metadata for Bool;
  *(_BYTE *)(v8 + sub_14C98(v0 + 144) = a3 & 1;
  uint64_t v20 = sub_6358(&qword_8C600);
  uint64_t v22 = sub_4777C(v20, v21, v20, (uint64_t)&protocol witness table for String);
  sub_477B0(v22);
  sub_47744();
  sub_47750(0xD000000000000027LL, (uint64_t)"healthWorkoutStart#unsupportedSlotValue");
  sub_140A4();
  sub_476F8();
}

uint64_t sub_46BEC()
{
  uint64_t v0 = sub_6358(&qword_8C260);
  uint64_t inited = swift_initStackObject(v0, &v21);
  sub_47728((__n128 *)inited, (__n128)xmmword_653E0);
  if (v2)
  {
    sub_47714();
    unint64_t v4 = 0xEB00000000656D61LL;
  }

  else
  {
    sub_477C4();
  }

  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = &type metadata for String;
  *(void *)(inited + 8sub_4A488(*(void **)(v2 + 152), 0) = 0x6E6F697461727564LL;
  *(void *)(inited + sub_14C58(v0 + 88) = 0xE800000000000000LL;
  *(_OWORD *)(inited + 96) = 0u;
  *(_OWORD *)(inited + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
  *(void *)(inited + 128) = 0x4E74756F6B726F77LL;
  *(void *)(inited + 136) = 0xEB00000000656D61LL;
  id v6 = sub_47774(v3, "workoutName");
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = [v6 spokenPhrase];

    uint64_t v7 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v10 = v9;

    uint64_t v11 = &type metadata for String;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    *(void *)(inited + 16sub_4A488(*(void **)(v2 + 152), 0) = 0LL;
  }

  *(void *)(inited + sub_14C98(v0 + 144) = v7;
  *(void *)(inited + 15_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v10;
  *(void *)(inited + 168) = v11;
  *(void *)(inited + 176) = 0x657079546C616F67LL;
  *(void *)(inited + 18_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0xE800000000000000LL;
  id v12 = sub_47774((uint64_t)v6, "workoutGoalUnitType");
  uint64_t v13 = sub_37DBC((unint64_t)v12);
  *(void *)(inited + 19_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v13;
  *(void *)(inited + 20sub_4A488(*(void **)(v2 + 152), 0) = v14;
  *(void *)(inited + sub_14C58(v0 + 216) = &type metadata for String;
  *(void *)(inited + 22_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0x6E6F697461636F6CLL;
  *(void *)(inited + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0xE800000000000000LL;
  uint64_t v15 = (char *)sub_47774(v13, "workoutLocationType");
  if (v15 == (_BYTE *)&dword_0 + 2)
  {
    unint64_t v16 = 0xE600000000000000LL;
    uint64_t v17 = 0x726F6F646E69LL;
  }

  else
  {
    if (v15 != (_BYTE *)&dword_0 + 1)
    {
      *(_OWORD *)(inited + 24sub_4A488(*(void **)(v2 + 152), 0) = 0u;
      *(_OWORD *)(inited + 256) = 0u;
      goto LABEL_13;
    }

    unint64_t v16 = 0xE700000000000000LL;
    uint64_t v17 = 0x726F6F6474756FLL;
  }

  *(void *)(inited + 26_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = &type metadata for String;
  *(void *)(inited + 24sub_4A488(*(void **)(v2 + 152), 0) = v17;
  *(void *)(inited + 248) = v16;
LABEL_13:
  uint64_t v18 = sub_6358(&qword_8C600);
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v18, &protocol witness table for String);
  sub_477B0(v19);
  sub_47744();
  sub_47750(0xD000000000000023LL, (uint64_t)"healthWorkoutStart#confirmSlotValue");
  return sub_140A4();
}

void sub_46E40(uint64_t a1, char a2)
{
  uint64_t v4 = sub_6358(&qword_8C260);
  uint64_t v6 = sub_477A8(v4, v5);
  *(_OWORD *)(v6 + sub_14C98(v0 + 16) = xmmword_63690;
  strcpy((char *)(v6 + 32), "isPunchingOut");
  *(_WORD *)(v6 + 46) = -4864;
  *(_BYTE *)(v6 + 48) = a2;
  uint64_t v7 = (_OWORD *)(v6 + 96);
  sub_47794();
  v8[9] = &type metadata for Bool;
  v8[10] = v9;
  v8[11] = 0xE700000000000000LL;
  if (a1)
  {
    uint64_t v10 = swift_retain(a1);
    uint64_t v11 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v10);
    if (v11
      && (id v12 = v11,
          id v13 = [v11 displayAppName],
          v12,
          v13))
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v16 = v15;

      swift_release(a1);
      *(void *)(v6 + 12sub_4A488(*(void **)(v2 + 152), 0) = &type metadata for String;
      *(void *)(v6 + 96) = v14;
      *(void *)(v6 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v16;
    }

    else
    {
      swift_release(a1);
      *uint64_t v7 = 0u;
      *(_OWORD *)(v6 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    }

    *(void *)(v6 + 128) = 0x5074737269467369LL;
    *(void *)(v6 + 136) = 0xEF70704179747261LL;
    Swift::Bool v17 = App.isFirstParty()();
  }

  else
  {
    Swift::Bool v17 = 0;
    *uint64_t v7 = 0u;
    *(_OWORD *)(v6 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    *(void *)(v6 + 128) = 0x5074737269467369LL;
    *(void *)(v6 + 136) = 0xEF70704179747261LL;
  }

  *(void *)(v6 + 168) = &type metadata for Bool;
  *(_BYTE *)(v6 + sub_14C98(v0 + 144) = v17;
  uint64_t v18 = sub_6358(&qword_8C600);
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)(v6, &type metadata for String, v18, &protocol witness table for String);
  uint64_t v20 = sub_47218(v19);
  swift_bridgeObjectRelease(v19);
  sub_46764(0xD000000000000029LL, 0x800000000006AC00LL, (uint64_t)v20);
  sub_140A4();
  sub_476F8();
}

uint64_t sub_47004(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_6358(&qword_8C260);
  uint64_t inited = swift_initStackObject(v6, v25);
  *(_OWORD *)(inited + sub_14C98(v0 + 16) = xmmword_63690;
  *(void *)(inited + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x646F43726F727265LL;
  *(void *)(inited + 4sub_4A488(*(void **)(v2 + 152), 0) = 0xE900000000000065LL;
  *(void *)(inited + 48) = a2;
  *(void *)(inited + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = &type metadata for Int;
  *(void *)(inited + 8sub_4A488(*(void **)(v2 + 152), 0) = 0x656D614E707061LL;
  *(void *)(inited + sub_14C58(v0 + 88) = 0xE700000000000000LL;
  if (!a1) {
    goto LABEL_6;
  }
  uint64_t v8 = swift_retain(a1);
  uint64_t v9 = (void *)static SAAppInfoFactory.createAppInfo(app:)(v8);
  if (!v9
    || (uint64_t v10 = v9, v11 = [v9 displayAppName], v10, !v11))
  {
    swift_release(a1);
LABEL_6:
    *(_OWORD *)(inited + 96) = 0u;
    *(_OWORD *)(inited + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    goto LABEL_7;
  }

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  swift_release(a1);
  *(void *)(inited + 12sub_4A488(*(void **)(v2 + 152), 0) = &type metadata for String;
  *(void *)(inited + 96) = v12;
  *(void *)(inited + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v14;
LABEL_7:
  *(void *)(inited + 128) = 0x656369766564LL;
  *(void *)(inited + 136) = 0xE600000000000000LL;
  uint64_t v15 = sub_6358(&qword_8F640);
  uint64_t v17 = sub_477A8(v15, v16);
  *(_OWORD *)(v17 + sub_14C98(v0 + 16) = xmmword_61030;
  *(void *)(v17 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x616C507261437369LL;
  *(void *)(v17 + 4sub_4A488(*(void **)(v2 + 152), 0) = 0xE900000000000079LL;
  *(_BYTE *)(v17 + 48) = a3 & 1;
  uint64_t v19 = sub_47788(v17, v18, (uint64_t)&type metadata for Bool);
  *(void *)(inited + 168) = sub_6358(&qword_8F648);
  *(void *)(inited + sub_14C98(v0 + 144) = v19;
  uint64_t v20 = sub_6358(&qword_8C600);
  uint64_t v22 = sub_47788(inited, v21, v20);
  sub_477B0(v22);
  sub_47744();
  sub_47764();
  sub_46764(0xD000000000000021LL, v23, (uint64_t)&type metadata for String);
  return sub_140A4();
}

void sub_471FC(uint64_t a1, uint64_t a2, char a3)
{
  else {
    sub_47004(a1, a2, a3 & 1);
  }
}

void *sub_47218(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v37 = (unint64_t)(v3 + 63) >> 6;
  int64_t v6 = 0LL;
  uint64_t v33 = swift_bridgeObjectRetain() + 104;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_6;
    }

    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v12 >= v37)
    {
      int64_t v14 = v6;
LABEL_12:
      unint64_t v5 = 0LL;
      memset(v41, 0, sizeof(v41));
      int64_t v6 = v14;
      __int128 v40 = 0u;
      goto LABEL_13;
    }

    unint64_t v13 = *(void *)(v2 + 8 * v12);
    if (!v13)
    {
      int64_t v14 = v6 + 1;
      if (v6 + 2 >= v37) {
        goto LABEL_12;
      }
      unint64_t v13 = *(void *)(v2 + 8 * (v6 + 2));
      if (v13)
      {
        int64_t v12 = v6 + 2;
      }

      else
      {
        int64_t v14 = v6 + 2;
        if (v6 + 3 >= v37) {
          goto LABEL_12;
        }
        unint64_t v13 = *(void *)(v2 + 8 * (v6 + 3));
        if (v13)
        {
          int64_t v12 = v6 + 3;
        }

        else
        {
          int64_t v12 = v6 + 4;
          int64_t v14 = v6 + 3;
          if (v6 + 4 >= v37) {
            goto LABEL_12;
          }
          unint64_t v13 = *(void *)(v2 + 8 * v12);
          if (!v13)
          {
            while (v6 + 5 < v37)
            {
              unint64_t v13 = *(void *)(v33 + 8 * v6++);
              if (v13)
              {
                int64_t v12 = v6 + 4;
                goto LABEL_10;
              }
            }

            int64_t v14 = v37 - 1;
            goto LABEL_12;
          }
        }
      }
    }

void sub_47590()
{
  uint64_t v1 = type metadata accessor for CATOption(0LL);
  sub_110C0(v1);
  sub_6590();
}

uint64_t sub_475D0()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_475F4()
{
  return type metadata accessor for HealthCATWrapper(0LL);
}

uint64_t type metadata accessor for HealthCATWrapper(uint64_t a1)
{
  uint64_t result = qword_8F450;
  if (!qword_8F450) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthCATWrapper);
  }
  return result;
}

uint64_t sub_47634(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for CATOption(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_476B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_6358(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  sub_6590();
}

uint64_t sub_476F0(uint64_t a1, uint64_t a2)
{
  return sub_469CC(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2);
}

  ;
}

  ;
}

__n128 *sub_47728(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1953459315LL;
  result[2].n128_u64[1] = 0xE400000000000000LL;
  return result;
}

uint64_t sub_47744()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_47750(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

  ;
}

id sub_47774(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_4777C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Dictionary.init(dictionaryLiteral:)(v4, v5, a3, a4);
}

uint64_t sub_47788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(a1, v3, a3, v4);
}

  ;
}

uint64_t sub_477A8(uint64_t a1, uint64_t a2, ...)
{
  return swift_initStackObject(a1, va);
}

void *sub_477B0(uint64_t a1)
{
  return sub_47218(a1);
}

unint64_t sub_477B8()
{
  return sub_5B934(v1, v0);
}

  ;
}

uint64_t storeEnumTagSinglePayload for HealthActivityUserMode(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_47818 + 4 * asc_65440[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_47838 + 4 * byte_65445[v4]))();
  }
}

_BYTE *sub_47818(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_47838(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_47840(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_47848(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_47850(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_47858(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HealthActivityUserMode()
{
  return &type metadata for HealthActivityUserMode;
}

unint64_t sub_47878()
{
  unint64_t result = qword_8F650;
  if (!qword_8F650)
  {
    unint64_t result = swift_getWitnessTable(&unk_65518, &type metadata for HealthActivityUserMode);
    atomic_store(result, (unint64_t *)&qword_8F650);
  }

  return result;
}

BOOL sub_478B4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_7F548, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

uint64_t sub_478F8()
{
  return 0x6168636C65656877LL;
}

BOOL sub_47924@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_478B4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_47958@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_478F8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_4797C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_47A50();
  unint64_t v5 = sub_47A8C();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v4, v5);
}

unint64_t sub_479D4()
{
  unint64_t result = qword_8F658;
  if (!qword_8F658)
  {
    unint64_t result = swift_getWitnessTable(&unk_65488, &type metadata for HealthActivityUserMode);
    atomic_store(result, (unint64_t *)&qword_8F658);
  }

  return result;
}

unint64_t sub_47A14()
{
  unint64_t result = qword_8F660;
  if (!qword_8F660)
  {
    unint64_t result = swift_getWitnessTable(&unk_65558, &type metadata for HealthActivityUserMode);
    atomic_store(result, (unint64_t *)&qword_8F660);
  }

  return result;
}

unint64_t sub_47A50()
{
  unint64_t result = qword_8F668;
  if (!qword_8F668)
  {
    unint64_t result = swift_getWitnessTable(&unk_654B8, &type metadata for HealthActivityUserMode);
    atomic_store(result, (unint64_t *)&qword_8F668);
  }

  return result;
}

unint64_t sub_47A8C()
{
  unint64_t result = qword_8F670;
  if (!qword_8F670)
  {
    unint64_t result = swift_getWitnessTable(&unk_654E0, &type metadata for HealthActivityUserMode);
    atomic_store(result, (unint64_t *)&qword_8F670);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for HealthActivityLocation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_47B14 + 4 * byte_65585[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_47B48 + 4 * byte_65580[v4]))();
}

uint64_t sub_47B48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_47B50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x47B58LL);
  }
  return result;
}

uint64_t sub_47B64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x47B6CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_47B70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_47B78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthActivityLocation()
{
  return &type metadata for HealthActivityLocation;
}

unint64_t sub_47B98()
{
  unint64_t result = qword_8F678;
  if (!qword_8F678)
  {
    unint64_t result = swift_getWitnessTable(&unk_65658, &type metadata for HealthActivityLocation);
    atomic_store(result, (unint64_t *)&qword_8F678);
  }

  return result;
}

unint64_t sub_47BD4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_7F580, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_47C1C(char a1)
{
  return *(void *)&aIndoor_2[8 * a1];
}

void sub_47C3C()
{
}

void sub_47C48()
{
}

uint64_t sub_47C50(uint64_t a1)
{
  return sub_B7EC(a1, *v1);
}

void sub_47C58(uint64_t a1)
{
}

unint64_t sub_47C60@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_47BD4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_47C8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_47C1C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_47CB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_47D88();
  unint64_t v5 = sub_47DC4();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v4, v5);
}

unint64_t sub_47D0C()
{
  unint64_t result = qword_8F680;
  if (!qword_8F680)
  {
    unint64_t result = swift_getWitnessTable(&unk_655C8, &type metadata for HealthActivityLocation);
    atomic_store(result, (unint64_t *)&qword_8F680);
  }

  return result;
}

unint64_t sub_47D4C()
{
  unint64_t result = qword_8F688;
  if (!qword_8F688)
  {
    unint64_t result = swift_getWitnessTable(&unk_65698, &type metadata for HealthActivityLocation);
    atomic_store(result, (unint64_t *)&qword_8F688);
  }

  return result;
}

unint64_t sub_47D88()
{
  unint64_t result = qword_8F690;
  if (!qword_8F690)
  {
    unint64_t result = swift_getWitnessTable(&unk_655F8, &type metadata for HealthActivityLocation);
    atomic_store(result, (unint64_t *)&qword_8F690);
  }

  return result;
}

unint64_t sub_47DC4()
{
  unint64_t result = qword_8F698;
  if (!qword_8F698)
  {
    unint64_t result = swift_getWitnessTable(&unk_65620, &type metadata for HealthActivityLocation);
    atomic_store(result, (unint64_t *)&qword_8F698);
  }

  return result;
}

uint64_t sub_47E00(unsigned __int8 a1)
{
  if (a1 > 8u) {
    return 0LL;
  }
  else {
    return qword_65860[(char)a1];
  }
}

uint64_t getEnumTagSinglePayload for HealthMagnitudeUnit(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xEB)
  {
    if (a2 + 21 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 21) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 22;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for HealthMagnitudeUnit(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEA) {
    return ((uint64_t (*)(void))((char *)&loc_47EFC + 4 * byte_65715[v4]))();
  }
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_47F30 + 4 * byte_65710[v4]))();
}

uint64_t sub_47F30(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_47F38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x47F40LL);
  }
  return result;
}

uint64_t sub_47F4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x47F54LL);
  }
  *(_BYTE *)unint64_t result = a2 + 21;
  return result;
}

uint64_t sub_47F58(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_47F60(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthMagnitudeUnit()
{
  return &type metadata for HealthMagnitudeUnit;
}

unint64_t sub_47F80()
{
  unint64_t result = qword_8F6A0;
  if (!qword_8F6A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_657F4, &type metadata for HealthMagnitudeUnit);
    atomic_store(result, (unint64_t *)&qword_8F6A0);
  }

  return result;
}

uint64_t sub_47FBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_7F600, a1, a2, &unk_8BC68);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x16) {
    return 22LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_4800C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_48044 + 4 * byte_6571A[a1]))( 0xD000000000000011LL,  0x8000000000068880LL);
}

uint64_t sub_48044()
{
  return 1751346793LL;
}

uint64_t sub_48054()
{
  return 0x73656C696DLL;
}

uint64_t sub_480B8()
{
  return 0x6E6F68746172616DLL;
}

uint64_t sub_480D0()
{
  return 0x736569726F6C6163LL;
}

uint64_t sub_480E8()
{
  return 0x656C756F6ALL;
}

uint64_t sub_480FC()
{
  return 0x6C756F6A6F6C696BLL;
}

uint64_t sub_48118()
{
  return 0x7265702074656566LL;
}

uint64_t sub_4813C(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_48188()
{
  return 0x70206574756E696DLL;
}

uint64_t sub_481AC()
{
  return 0x6D6172676F6C696BLL;
}

uint64_t sub_481C4()
{
  return 1835102823LL;
}

uint64_t sub_481D4()
{
  return 0x646E756F70LL;
}

uint64_t sub_481E8()
{
  return 7172194LL;
}

uint64_t sub_481F8()
{
  return 1885697139LL;
}

uint64_t sub_48208()
{
  return 0x726568746FLL;
}

void sub_4821C(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_48228()
{
}

uint64_t sub_48230(uint64_t a1)
{
  return sub_B824(a1, *v1);
}

void sub_48238(uint64_t a1)
{
}

uint64_t sub_48240@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_47FBC(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_4826C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_4800C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_48294(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_48368();
  unint64_t v5 = sub_483A4();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v4, v5);
}

unint64_t sub_482EC()
{
  unint64_t result = qword_8F6A8;
  if (!qword_8F6A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_65764, &type metadata for HealthMagnitudeUnit);
    atomic_store(result, (unint64_t *)&qword_8F6A8);
  }

  return result;
}

unint64_t sub_4832C()
{
  unint64_t result = qword_8F6B0;
  if (!qword_8F6B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_65834, &type metadata for HealthMagnitudeUnit);
    atomic_store(result, (unint64_t *)&qword_8F6B0);
  }

  return result;
}

unint64_t sub_48368()
{
  unint64_t result = qword_8F6B8;
  if (!qword_8F6B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_65794, &type metadata for HealthMagnitudeUnit);
    atomic_store(result, (unint64_t *)&qword_8F6B8);
  }

  return result;
}

unint64_t sub_483A4()
{
  unint64_t result = qword_8F6C0;
  if (!qword_8F6C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_657BC, &type metadata for HealthMagnitudeUnit);
    atomic_store(result, (unint64_t *)&qword_8F6C0);
  }

  return result;
}

uint64_t sub_483E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v15 = 0LL;
  memset(v14, 0, sizeof(v14));
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0LL;
  memset(v8, 0, sizeof(v8));
  uint64_t v7 = 0LL;
  memset(v6, 0, sizeof(v6));
  uint64_t v5 = 0LL;
  memset(v4, 0, sizeof(v4));
  uint64_t v3 = 0LL;
  memset(v2, 0, sizeof(v2));
  a1[3] = (uint64_t)&type metadata for FlowConfigModel;
  a1[4] = (uint64_t)&protocol witness table for FlowConfigModel;
  *a1 = sub_49E80((uint64_t)&unk_825D0);
  return FlowConfigModel.init(deviceState:aceService:aceServiceAsync:sharedContextService:outputPublisher:flowFinder:networkStatusProvider:)( v14,  v12,  v10,  v8,  v6,  v4,  v2);
}

uint64_t sub_48488@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v22 = 0LL;
  memset(v21, 0, sizeof(v21));
  uint64_t v20 = 0LL;
  memset(v19, 0, sizeof(v19));
  uint64_t v18 = 0LL;
  memset(v17, 0, sizeof(v17));
  uint64_t v16 = 0LL;
  memset(v15, 0, sizeof(v15));
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = 0LL;
  memset(v9, 0, sizeof(v9));
  a1[3] = (uint64_t)&type metadata for FlowConfigModel;
  a1[4] = (uint64_t)&protocol witness table for FlowConfigModel;
  *a1 = sub_49E80((uint64_t)&unk_825D0);
  FlowConfigModel.init(deviceState:aceService:aceServiceAsync:sharedContextService:outputPublisher:flowFinder:networkStatusProvider:)( v21,  v19,  v17,  v15,  v13,  v11,  v9);
  uint64_t v6 = type metadata accessor for FlowRouterX(0LL);
  uint64_t v7 = Logger.workout.unsafeMutableAddressor(v6);
  sub_8894(v7, (uint64_t)v21);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  return OSSignposter.init(logger:)(v5);
}

uint64_t sub_485C4(char *a1)
{
  v267 = a1;
  uint64_t v266 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v258 = *(void *)(v266 - 8);
  sub_C870();
  __chkstk_darwin(v2);
  sub_11060();
  v251 = v3;
  sub_11054();
  __chkstk_darwin(v4);
  sub_39CF4();
  uint64_t v254 = v5;
  sub_11054();
  __chkstk_darwin(v6);
  sub_355E4();
  uint64_t v240 = v7;
  uint64_t v8 = sub_11198();
  uint64_t v9 = type metadata accessor for Parse(v8);
  uint64_t v244 = *(void *)(v9 - 8);
  uint64_t v245 = v9;
  sub_C870();
  __chkstk_darwin(v10);
  sub_C838();
  uint64_t v243 = v11;
  uint64_t v12 = sub_11198();
  uint64_t v247 = type metadata accessor for ExecuteOnRemoteDeviceFlow(v12);
  sub_C870();
  __chkstk_darwin(v13);
  sub_C838();
  uint64_t v246 = v14;
  sub_6358(qword_8C368);
  sub_C870();
  __chkstk_darwin(v15);
  sub_C838();
  uint64_t v255 = v16;
  uint64_t v17 = sub_11198();
  uint64_t v281 = type metadata accessor for DeviceIdiom(v17);
  v279 = *(uint8_t **)(v281 - 8);
  sub_C870();
  __chkstk_darwin(v18);
  sub_11060();
  uint64_t v256 = v19;
  sub_11054();
  __chkstk_darwin(v20);
  sub_39CF4();
  uint64_t v250 = v21;
  sub_11054();
  __chkstk_darwin(v22);
  sub_39CF4();
  v278 = v23;
  sub_11054();
  __chkstk_darwin(v24);
  sub_355E4();
  uint64_t v280 = v25;
  uint64_t v26 = sub_11198();
  uint64_t v257 = type metadata accessor for InputOrigin(v26);
  uint64_t v270 = *(void *)(v257 - 8);
  sub_C870();
  __chkstk_darwin(v27);
  sub_11060();
  v261 = v28;
  sub_11054();
  __chkstk_darwin(v29);
  sub_355E4();
  uint64_t v249 = v30;
  uint64_t v31 = sub_11198();
  uint64_t v32 = type metadata accessor for FlowRouterX(v31);
  sub_C870();
  __chkstk_darwin(v33);
  sub_C838();
  v259 = (void *)v34;
  uint64_t v35 = sub_11198();
  uint64_t v275 = type metadata accessor for Logger(v35);
  uint64_t v269 = *(void *)(v275 - 8);
  sub_C870();
  __chkstk_darwin(v36);
  sub_11060();
  v263 = (os_log_s *)v37;
  sub_11054();
  __chkstk_darwin(v38);
  sub_39CF4();
  uint64_t v282 = v39;
  sub_11054();
  __chkstk_darwin(v40);
  sub_39CF4();
  uint64_t v262 = v41;
  sub_11054();
  __chkstk_darwin(v42);
  sub_355E4();
  v260 = v43;
  uint64_t v44 = sub_11198();
  uint64_t v45 = type metadata accessor for OSSignposter(v44);
  uint64_t v46 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  sub_11060();
  v264 = (char *)v47;
  sub_11054();
  __chkstk_darwin(v48);
  sub_39CF4();
  v253 = v49;
  sub_11054();
  __chkstk_darwin(v50);
  sub_39CF4();
  v242 = v51;
  sub_11054();
  __chkstk_darwin(v52);
  uint64_t v54 = (char *)v236 - v53;
  uint64_t v55 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v277 = *(void *)(v55 - 8);
  sub_C870();
  __chkstk_darwin(v56);
  sub_11060();
  uint64_t v265 = v57;
  sub_11054();
  __chkstk_darwin(v58);
  sub_39CF4();
  uint64_t v252 = v59;
  sub_11054();
  __chkstk_darwin(v60);
  sub_39CF4();
  uint64_t v241 = v61;
  sub_11054();
  uint64_t v63 = __chkstk_darwin(v62);
  uint64_t v65 = (char *)v236 - v64;
  uint64_t v66 = __chkstk_darwin(v63);
  uint64_t v68 = (char *)v236 - v67;
  uint64_t v69 = *(int *)(v32 + 20);
  uint64_t v276 = v1;
  uint64_t v70 = v1 + v69;
  uint64_t v71 = OSSignposter.logHandle.getter(v66);
  OSSignpostID.init(log:)(v71);
  v271 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v272 = v70;
  uint64_t v72 = v271(v54, v70, v45);
  uint64_t v73 = (os_log_s *)OSSignposter.logHandle.getter(v72);
  os_signpost_type_t v74 = static os_signpost_type_t.begin.getter();
  if ((sub_49E38() & 1) != 0)
  {
    id v75 = v68;
    uint64_t v76 = v55;
    uint64_t v77 = (uint8_t *)sub_88B0(2LL);
    *(_WORD *)uint64_t v77 = 0;
    os_signpost_id_t v78 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v73, v74, v78, "makeFlow", "", v77, 2u);
    uint64_t v79 = (uint64_t)v77;
    uint64_t v55 = v76;
    uint64_t v68 = v75;
    sub_8870(v79);
  }

  uint64_t v80 = *(void (**)(char *, char *, uint64_t))(v277 + 16);
  v273 = v68;
  v80(v65, v68, v55);
  uint64_t v81 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v81, *(unsigned int *)(v81 + 48), *(unsigned __int16 *)(v81 + 52));
  uint64_t v82 = OSSignpostIntervalState.init(id:isOpen:)(v65, 1LL);
  uint64_t v83 = *(void (**)(char *, uint64_t))(v46 + 8);
  v83(v54, v45);
  uint64_t v84 = v276;
  uint64_t v85 = sub_49748();
  v274 = (void *)v55;
  if ((v85 & 1) != 0)
  {
    uint64_t v265 = v82;
    uint64_t v86 = Logger.workout.unsafeMutableAddressor(v85);
    sub_8894(v86, (uint64_t)v290);
    uint64_t v87 = *(void (**)(void, void, void))(v269 + 16);
    uint64_t v88 = v260;
    v264 = (char *)v86;
    uint64_t v89 = v275;
    v251 = v87;
    v87(v260, v86, v275);
    uint64_t v90 = v259;
    uint64_t v91 = sub_49850(v84, (uint64_t)v259);
    Logger.logObject.getter(v91);
    os_log_type_t v92 = sub_B33C();
    int v239 = v92;
    BOOL v93 = os_log_type_enabled(v88, v92);
    uint64_t v268 = v45;
    v248 = v83;
    if (v93)
    {
      v238 = v88;
      id v94 = (uint8_t *)sub_88B0(12LL);
      uint64_t v95 = sub_88B0(32LL);
      v287[0] = v95;
      *(_DWORD *)id v94 = 136315138;
      v236[1] = v94 + 4;
      v237 = v94;
      uint64_t v96 = v90[3];
      uint64_t v97 = v90[4];
      sub_49E30(v90);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v97 + 8))(&v284, v96, v97);
      uint64_t v98 = v285;
      uint64_t v99 = v286;
      sub_49E30(&v284);
      uint64_t v100 = v249;
      dispatch thunk of DeviceState.inputOrigin.getter(v98, v99);
      uint64_t v101 = String.init<A>(describing:)(v100, v257);
      unint64_t v103 = v102;
      sub_49DE8();
      *(void *)&__int128 v284 = sub_173E0(v101, v103, v287);
      uint64_t v89 = v275;
      uint64_t v84 = v276;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v284, (char *)&v284 + 8);
      swift_bridgeObjectRelease(v103);
      sub_6468((uint64_t)v90, type metadata accessor for FlowRouterX);
      __int128 v105 = v237;
      unint64_t v104 = v238;
      sub_17C68(&dword_0, v238, (os_log_type_t)v239, "Input origin is: %s", v237);
      sub_B334(v95);
      sub_8870(v95);
      sub_8870((uint64_t)v105);
    }

    else
    {
      sub_6468((uint64_t)v90, type metadata accessor for FlowRouterX);
    }

    uint64_t v269 = *(void *)(v269 + 8);
    ((void (*)(os_log_s *, uint64_t))v269)(v88, v89);
    uint64_t v106 = (os_log_s *)v282;
    uint64_t v120 = sub_6358(&qword_8F6C8);
    uint64_t v121 = *(void *)(v270 + 72);
    uint64_t v122 = *(unsigned __int8 *)(v270 + 80);
    uint64_t v123 = (v122 + 32) & ~v122;
    uint64_t v124 = swift_allocObject(v120, v123 + 3 * v121, v122 | 7);
    *(_OWORD *)(v124 + sub_14C98(v0 + 16) = xmmword_63690;
    uint64_t v125 = v124 + v123;
    sub_49E9C(v124 + v123, enum case for InputOrigin.bluetoothVoiceTrigger(_:));
    sub_49E9C(v125 + v121, enum case for InputOrigin.voiceTrigger(_:));
    sub_49E9C(v125 + 2 * v121, enum case for InputOrigin.remoteButton(_:));
    uint64_t v126 = (void *)v84;
    uint64_t v127 = *(void *)(v84 + 24);
    uint64_t v128 = *(void *)(v84 + 32);
    sub_49E30(v126);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v128 + 8))(&v284, v127, v128);
    uint64_t v129 = v285;
    uint64_t v130 = v286;
    sub_49E30(&v284);
    dispatch thunk of DeviceState.inputOrigin.getter(v129, v130);
    sub_AFF0( &qword_8F6D0,  (uint64_t (*)(uint64_t))&type metadata accessor for InputOrigin,  (uint64_t)&protocol conformance descriptor for InputOrigin);
    if ((sub_49D74(v125) & 1) != 0 || (sub_49D74(v125 + v121) & 1) != 0 || (sub_49D74(v125 + 2 * v121) & 1) != 0)
    {
      sub_49DFC();
      sub_17C4C();
      sub_49DE8();
      sub_49D88();
      uint64_t v131 = sub_19AB0(v267, (uint64_t)&v284);
      sub_49DE8();
      uint64_t v132 = (uint64_t)v264;
      sub_8894((uint64_t)v264, (uint64_t)v289);
      sub_49DF0(v262, v132);
      uint64_t v133 = swift_bridgeObjectRetain_n(v131, 2LL);
      uint64_t v134 = (os_log_s *)Logger.logObject.getter(v133);
      int v135 = static os_log_type_t.debug.getter(v134);
      if (os_log_type_enabled(v134, (os_log_type_t)v135))
      {
        LODWORD(v26sub_4A488(*(void **)(v2 + 152), 0) = v135;
        BOOL v136 = (uint8_t *)sub_88B0(12LL);
        v259 = (void *)sub_88B0(32LL);
        *(void *)&__int128 v284 = v259;
        v261 = v136;
        *(_DWORD *)BOOL v136 = 136315138;
        uint64_t v137 = *(void *)(v131 + 16);
        uint64_t v138 = _swiftEmptyArrayStorage;
        uint64_t v270 = v131;
        if (v137)
        {
          uint64_t v257 = (uint64_t)v134;
          v287[0] = (uint64_t)_swiftEmptyArrayStorage;
          sub_3B5D4(0, v137, 0);
          unint64_t v139 = v131 + ((v279[80] + 32LL) & ~(unint64_t)v279[80]);
          uint64_t v140 = *((void *)v279 + 9);
          uint64_t v141 = (void (*)(uint64_t, unint64_t, uint64_t))*((void *)v279 + 2);
          do
          {
            uint64_t v143 = v280;
            uint64_t v142 = v281;
            v141(v280, v139, v281);
            os_signpost_id_t v144 = v278;
            v141((uint64_t)v278, v143, v142);
            uint64_t v145 = String.init<A>(describing:)(v144, v142);
            uint64_t v147 = v146;
            (*((void (**)(uint64_t, uint64_t))v279 + 1))(v143, v142);
            uint64_t v138 = (void *)v287[0];
            if ((swift_isUniquelyReferenced_nonNull_native(v287[0]) & 1) == 0)
            {
              sub_3B5D4(0, v138[2] + 1LL, 1);
              uint64_t v138 = (void *)v287[0];
            }

            unint64_t v149 = v138[2];
            unint64_t v148 = v138[3];
            if (v149 >= v148 >> 1)
            {
              sub_3B5D4(v148 > 1, v149 + 1, 1);
              uint64_t v138 = (void *)v287[0];
            }

            v138[2] = v149 + 1;
            uint64_t v150 = &v138[2 * v149];
            v150[4] = v145;
            v150[5] = v147;
            v139 += v140;
            --v137;
            uint64_t v106 = (os_log_s *)v282;
          }

          while (v137);
          uint64_t v134 = (os_log_s *)v257;
        }

        uint64_t v155 = v261;
        uint64_t v156 = Array.description.getter(v138, &type metadata for String);
        unint64_t v158 = v157;
        swift_bridgeObjectRelease(v138);
        uint64_t v159 = sub_173E0(v156, v158, (uint64_t *)&v284);
        uint64_t v160 = sub_49E6C(v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v160, v161);
        uint64_t v131 = v270;
        sub_254F8();
        swift_bridgeObjectRelease(v158);
        sub_17C68(&dword_0, v134, (os_log_type_t)v260, "Destinations in priority order for request: %s", v155);
        uint64_t v162 = (uint64_t)v259;
        sub_B334((uint64_t)v259);
        sub_8870(v162);
        sub_8870((uint64_t)v155);

        sub_49E48();
        uint64_t v151 = v268;
        uint64_t v152 = v265;
        uint64_t v154 = v256;
        uint64_t v153 = v281;
      }

      else
      {

        sub_254F8();
        sub_49E48();
        uint64_t v151 = v268;
        uint64_t v152 = v265;
        uint64_t v153 = v281;
        uint64_t v154 = v256;
      }

      uint64_t v163 = v255;
      sub_52820(v131, v255);
      sub_17C4C();
      if (sub_63E0(v163, 1LL, v153) == 1)
      {
        os_signpost_id_t v164 = v248;
        sub_49894(v163);
      }

      else
      {
        v165 = v279;
        uint64_t v166 = v250;
        (*((void (**)(uint64_t, uint64_t, uint64_t))v279 + 4))(v250, v163, v153);
        sub_49D88();
        uint64_t v167 = v280;
        currentIdiom(deviceState:)(&v284);
        sub_49DE8();
        sub_AFF0( &qword_8C440,  (uint64_t (*)(uint64_t))&type metadata accessor for DeviceIdiom,  (uint64_t)&protocol conformance descriptor for DeviceIdiom);
        char v168 = dispatch thunk of static Equatable.== infix(_:_:)(v166, v167, v153);
        uint64_t v169 = (void (*)(uint64_t, uint64_t))*((void *)v165 + 1);
        v169(v167, v153);
        if ((v168 & 1) == 0)
        {
          v278 = v169;
          uint64_t v190 = (uint64_t)v264;
          sub_8894((uint64_t)v264, (uint64_t)v288);
          sub_49DF0((uint64_t)v106, v190);
          uint64_t v191 = (void (*)(uint64_t, uint64_t, uint64_t))*((void *)v165 + 2);
          uint64_t v192 = sub_49E60(v154);
          Logger.logObject.getter(v192);
          os_log_type_t v193 = sub_B33C();
          if (os_log_type_enabled(v106, v193))
          {
            v194 = (uint8_t *)sub_88B0(12LL);
            uint64_t v195 = sub_88B0(32LL);
            *(void *)&__int128 v284 = v195;
            *(_DWORD *)v194 = 136315138;
            v279 = v194 + 4;
            v191(v280, v154, v153);
            uint64_t v196 = String.init<A>(describing:)(v280, v153);
            unint64_t v198 = v197;
            uint64_t v199 = sub_173E0(v196, v197, (uint64_t *)&v284);
            uint64_t v200 = sub_49E6C(v199);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v200, v201);
            unint64_t v202 = v198;
            uint64_t v153 = v281;
            swift_bridgeObjectRelease(v202);
            sub_49E20();
            sub_17C68(&dword_0, v106, v193, "Executing request on remote %s", v194);
            sub_B334(v195);
            sub_8870(v195);
            uint64_t v203 = (uint64_t)v194;
            uint64_t v167 = v280;
            sub_8870(v203);
          }

          else
          {
            sub_49E20();
          }

          sub_49E48();
          sub_49E60(v167);
          uint64_t v209 = v191;
          uint64_t v211 = v244;
          uint64_t v210 = v245;
          uint64_t v212 = v167;
          v213 = *(void (**)(uint64_t, char *, uint64_t))(v244 + 16);
          uint64_t v214 = v153;
          uint64_t v215 = v243;
          v213(v243, v267, v245);
          sub_483E0(v287);
          sub_33E9C((uint64_t *)&v284);
          uint64_t v216 = type metadata accessor for DeviceResolutionService(0LL);
          uint64_t v217 = static DeviceResolutionService.sharedService.getter();
          v283[3] = v216;
          v283[4] = &protocol witness table for DeviceResolutionService;
          v283[0] = v217;
          uint64_t v218 = v246;
          v209(v246, v212, v214);
          v219 = (int *)v247;
          v213(v218 + *(int *)(v247 + 20), (char *)v215, v210);
          sub_B038((uint64_t)v287, v218 + v219[6]);
          sub_25274(&v284, (_OWORD *)(v218 + v219[7]));
          sub_B038((uint64_t)v283, v218 + v219[8]);
          sub_208EC(v215);
          uint64_t v221 = v220;
          _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v283);
          sub_1F08C(&v284);
          _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v287);
          (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v215, v210);
          v222 = v278;
          v278(v212, v214);
          *(void *)(v218 + v219[9]) = v221;
          sub_AFF0(qword_8D9E8, type metadata accessor for ExecuteOnRemoteDeviceFlow, (uint64_t)&unk_62F70);
          uint64_t v282 = Flow.eraseToAnyFlow()(v219, v223);
          sub_6468(v218, type metadata accessor for ExecuteOnRemoteDeviceFlow);
          v222(v250, v214);
          v224 = v242;
          uint64_t v225 = v268;
          uint64_t v226 = v271((char *)v242, v272, v268);
          uint64_t v181 = v224;
          uint64_t v182 = (void *)OSSignposter.logHandle.getter(v226);
          uint64_t v227 = v265;
          uint64_t v228 = sub_49E8C();
          os_signpost_type_t v229 = static os_signpost_type_t.end.getter(v228);
          char v230 = sub_49E38();
          os_signpost_id_t v164 = v248;
          if ((v230 & 1) != 0)
          {
            uint64_t v231 = sub_49E94();
            checkForErrorAndConsumeState(state:)(v231);
            sub_49E40();
            v232 = (_WORD *)sub_88B0(2LL);
            os_signpost_id_t v233 = sub_49E50(v232);
            sub_49D60(&dword_0, v234, v229, v233, "makeFlow");
            sub_8870(v227);
            uint64_t v225 = v268;
          }

          sub_49DB8();
          uint64_t v207 = v224;
          uint64_t v208 = v225;
          goto LABEL_49;
        }

        os_signpost_id_t v164 = v248;
        v169(v166, v153);
        uint64_t v152 = v265;
        uint64_t v151 = v268;
      }

      uint64_t v170 = (uint64_t)v264;
      sub_8894((uint64_t)v264, (uint64_t)&v284);
      uint64_t v171 = v263;
      uint64_t v172 = sub_49DF0((uint64_t)v263, v170);
      Logger.logObject.getter(v172);
      os_log_type_t v173 = sub_B33C();
      BOOL v174 = os_log_type_enabled(v171, v173);
      v175 = v271;
      uint64_t v176 = v253;
      if (v174)
      {
        uint64_t v177 = (uint8_t *)sub_88B0(2LL);
        *(_WORD *)uint64_t v177 = 0;
        _os_log_impl(&dword_0, v171, v173, "Executing request locally", v177, 2u);
        sub_8870((uint64_t)v177);
      }

      sub_49E48();
      uint64_t v178 = v272;
    }

    else
    {
      sub_49DFC();
      sub_17C4C();
      sub_49DE8();
      uint64_t v151 = v268;
      uint64_t v152 = v265;
      v175 = v271;
      uint64_t v178 = v272;
      uint64_t v176 = v253;
      os_signpost_id_t v164 = v248;
    }

    sub_208EC((uint64_t)v267);
    uint64_t v282 = v179;
    uint64_t v180 = v175((char *)v176, v178, v151);
    uint64_t v181 = v176;
    uint64_t v182 = (void *)OSSignposter.logHandle.getter(v180);
    uint64_t v183 = sub_49E8C();
    os_signpost_type_t v184 = static os_signpost_type_t.end.getter(v183);
    if ((sub_49E38() & 1) != 0)
    {
      uint64_t v185 = sub_49E94();
      checkForErrorAndConsumeState(state:)(v185);
      sub_49E40();
      uint64_t v204 = (_WORD *)sub_88B0(2LL);
      os_signpost_id_t v205 = sub_49E50(v204);
      sub_49D60(&dword_0, v206, v184, v205, "makeFlow");
      sub_8870(v152);
      uint64_t v151 = v268;
      os_signpost_id_t v164 = v248;
    }

    sub_49DB8();
    uint64_t v207 = v176;
    uint64_t v208 = v151;
LABEL_49:
    v164((char *)v207, v208);
    uint64_t v107 = v282;
    goto LABEL_50;
  }

  uint64_t v107 = sub_2A5C4();
  uint64_t v108 = (uint64_t)v264;
  uint64_t v109 = v271(v264, v272, v45);
  uint64_t v110 = (void *)OSSignposter.logHandle.getter(v109);
  uint64_t v111 = v265;
  uint64_t v112 = sub_49E8C();
  os_signpost_type_t v113 = static os_signpost_type_t.end.getter(v112);
  char v114 = sub_49E38();
  uint64_t v115 = v266;
  if ((v114 & 1) != 0)
  {
    uint64_t v268 = v45;
    uint64_t v282 = v107;
    uint64_t v116 = v83;
    uint64_t v117 = sub_49E94();
    uint64_t v118 = v251;
    checkForErrorAndConsumeState(state:)(v117);
    sub_49E40();
    uint64_t v119 = v258;
    uint64_t v186 = v265;
    uint64_t v187 = (_WORD *)sub_88B0(2LL);
    *uint64_t v187 = 0;
    os_signpost_id_t v188 = OSSignpostID.rawValue.getter();
    sub_49D60(&dword_0, v189, v113, v188, "makeFlow");
    sub_8870((uint64_t)v187);
    uint64_t v83 = v116;
    uint64_t v107 = v282;
    uint64_t v111 = v186;
    uint64_t v108 = (uint64_t)v264;
    uint64_t v45 = v268;
  }

  uint64_t v181 = *(void (**)(uint64_t, void *))(v277 + 8);
  uint64_t v182 = v274;
  v181(v111, v274);
  v83((char *)v108, v45);
LABEL_50:
  sub_49E40();
  v181((uint64_t)v273, v182);
  return v107;
}

uint64_t sub_49748()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_8734(v0, v1);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 8))(v9, v1, v2);
  uint64_t v3 = v10;
  sub_8734(v9, v10);
  LOBYTE(v3) = dispatch thunk of DeviceState.isCarPlay.getter(v3);
  sub_B038((uint64_t)v9, (uint64_t)v7);
  if ((v3 & 1) != 0)
  {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v7);
    char v4 = 0;
  }

  else
  {
    uint64_t v5 = v8;
    sub_8734(v7, v8);
    LOBYTE(sub_AFB8((uint64_t)va, v5) = dispatch thunk of DeviceState.isCarDNDMode.getter(v5);
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v7);
    char v4 = v5 ^ 1;
  }

  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v9);
  return v4 & 1;
}

uint64_t type metadata accessor for FlowRouterX(uint64_t a1)
{
  uint64_t result = qword_8F730;
  if (!qword_8F730) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FlowRouterX);
  }
  return result;
}

uint64_t sub_49850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FlowRouterX(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_49894(uint64_t a1)
{
  uint64_t v2 = sub_6358(qword_8C368);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_498D4()
{
  if (v0[5]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2);
  }
  if (v0[10]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7);
  }
  if (v0[15]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 12);
  }
  if (v0[20]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 17);
  }
  if (v0[25]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 22);
  }
  if (v0[30]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 27);
  }
  if (v0[35]) {
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 32);
  }
  return swift_deallocObject(v0, 296LL, 7LL);
}

void *sub_49960(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for OSSignposter(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  }

  return v4;
}

uint64_t sub_49A08(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for OSSignposter(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_49A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for OSSignposter(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  return a1;
}

void *sub_49AC0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for OSSignposter(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  return a1;
}

uint64_t sub_49B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + sub_14C98(v0 + 16) = v4;
  *(void *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for OSSignposter(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t sub_49B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + sub_14C98(v0 + 16) = v6;
  *(void *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for OSSignposter(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_49BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_49C00);
}

uint64_t sub_49C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for OSSignposter(0LL);
    return sub_63E0(a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t sub_49C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_49C80);
}

uint64_t sub_49C80(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for OSSignposter(0LL);
    return sub_8760(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

uint64_t sub_49CEC(uint64_t a1)
{
  v4[0] = "(";
  uint64_t result = type metadata accessor for OSSignposter(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_49D60(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
}

uint64_t sub_49D74(uint64_t a1)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v1, v2);
}

uint64_t sub_49D88()
{
  uint64_t v1 = *(void **)(v0 + 328);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_8734(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
}

uint64_t sub_49DB8()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v0 + 336) + 8LL))(v1, *(void *)(v0 + 312));
}

uint64_t sub_49DD0()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v0 + 184) + 88LL))(v1, *(void *)(v0 + 248));
}

uint64_t sub_49DE8()
{
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(v0 + 424));
}

uint64_t sub_49DF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 128))(a1, a2, v3);
}

uint64_t sub_49DFC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 + 280) + 8LL))(v1, v2);
}

uint64_t sub_49E10()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_49E20()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 344))(v2, v1);
}

void *sub_49E30(void *a1)
{
  return sub_8734(a1, v1);
}

uint64_t sub_49E38()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t sub_49E40()
{
  return swift_release(v0);
}

uint64_t sub_49E48()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t sub_49E50(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

uint64_t sub_49E60(uint64_t a1)
{
  return v1(a1, v2, v3);
}

uint64_t sub_49E6C(uint64_t a1)
{
  *(void *)(v1 - 20sub_4A488(*(void **)(v2 + 152), 0) = a1;
  return v1 - 200;
}

uint64_t sub_49E80(uint64_t a1)
{
  return swift_allocObject(a1, 296LL, 7LL);
}

uint64_t sub_49E8C()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t sub_49E94()
{
  return swift_retain(v0);
}

uint64_t sub_49E9C(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_49EA4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = sub_6358(&qword_8CD10);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static TaskPriority.background.getter(v11);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  sub_8760((uint64_t)v13, 0LL, 1LL, v14);
  sub_1EFE0(v5, (uint64_t)v20);
  uint64_t v15 = swift_allocObject(&unk_825F8, 104LL, 7LL);
  *(void *)(v15 + sub_14C98(v0 + 16) = 0LL;
  *(void *)(v15 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0LL;
  __int128 v16 = v20[1];
  *(_OWORD *)(v15 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v20[0];
  *(_OWORD *)(v15 + 48) = v16;
  *(void *)(v15 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v21;
  *(void *)(v15 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a1;
  *(void *)(v15 + 8sub_4A488(*(void **)(v2 + 152), 0) = a2;
  *(_DWORD *)(v15 + sub_14C58(v0 + 88) = a4;
  *(void *)(v15 + 96) = a3;
  swift_bridgeObjectRetain();
  swift_retain(a3);
  uint64_t v17 = sub_4A80C((uint64_t)v13, (uint64_t)&unk_8F770, v15);
  return swift_release(v17);
}

uint64_t sub_49FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a4;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[13] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[14] = swift_task_alloc(v7);
  v4[15] = swift_task_alloc(v7);
  v4[16] = swift_task_alloc(v7);
  return swift_task_switch(sub_4A030, 0LL, 0LL);
}

uint64_t sub_4A030()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void **)(v0 + 88);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_8734(v2, v3);
  uint64_t v5 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v4 + 8))( 0xD00000000000001ALL,  0x800000000006AD50LL,  v3,  v4);
  LOBYTE(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v5;
  uint64_t v6 = Logger.health.unsafeMutableAddressor(v5);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v0 + 96);
  if ((v4 & 1) != 0)
  {
    uint64_t v10 = (uint64_t *)(v0 + 112);
    uint64_t v9 = *(void **)(v0 + 112);
    sub_8894(v6, v0 + 64);
    uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v1 + 16))(v9, v7, v8);
    uint64_t v12 = v9;
    Logger.logObject.getter(v11);
    os_log_type_t v13 = sub_B33C();
    if (sub_1F150(v13))
    {
      uint64_t v14 = (_WORD *)sub_2F894();
      *uint64_t v14 = 0;
      sub_29450(&dword_0, v15, v16, "[AppSelection] not enabled");
      sub_8870((uint64_t)v14);
    }

    uint64_t v17 = *(void *)(v0 + 104);

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  }

  else
  {
    uint64_t v19 = *(os_log_s **)(v0 + 128);
    sub_8894(v6, v0 + 16);
    uint64_t v20 = *(uint64_t (**)(os_log_s *, uint64_t, uint64_t))(v1 + 16);
    uint64_t v21 = v20(v19, v7, v8);
    uint64_t v22 = v19;
    Logger.logObject.getter(v21);
    os_log_type_t v23 = sub_B33C();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)sub_2F894();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_0, v22, v23, "[AppSelection] is enabled", v24, 2u);
      sub_8870((uint64_t)v24);
    }

    uint64_t v25 = *(os_log_s **)(v0 + 120);
    uint64_t v26 = *(void *)(v0 + 128);
    uint64_t v10 = (uint64_t *)(v0 + 120);
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v28 = *(void *)(v0 + 104);

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v18(v26, v27);
    sub_8894(v7, v0 + 40);
    uint64_t v29 = v20(v25, v7, v27);
    Logger.logObject.getter(v29);
    os_log_type_t v30 = sub_B33C();
    if (sub_1F150(v30))
    {
      uint64_t v31 = (_WORD *)sub_2F894();
      _WORD *v31 = 0;
      sub_29450(&dword_0, v32, v33, "[AppSelection] Diagnostics & Usage is not enabled");
      sub_8870((uint64_t)v31);
    }
  }

  uint64_t v34 = *(void *)(v0 + 120);
  uint64_t v35 = *(void *)(v0 + 128);
  uint64_t v36 = *(void *)(v0 + 112);
  v18(*v10, *(void *)(v0 + 96));
  swift_task_dealloc(v35);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4A268()
{
  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t sub_4A2A4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_8F76C);
  *(void *)(v2 + sub_14C98(v0 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_8640;
  return sub_49FB4(a1, v4, v5, v1 + 32);
}

ValueMetadata *type metadata accessor for WorkoutAppSelectionTrainingLogger()
{
  return &type metadata for WorkoutAppSelectionTrainingLogger;
}

uint64_t sub_4A34C(uint64_t a1)
{
  uint64_t v2 = Parse.DirectInvocation.identifier.getter(a1);
  if (v2 == 0xD000000000000034LL && v3 == 0x800000000006AD70LL)
  {
    uint64_t v4 = swift_bridgeObjectRelease(0x800000000006AD70LL);
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 0xD000000000000034LL, 0x800000000006AD70LL, 0LL);
    uint64_t v4 = sub_C090();
    if ((v5 & 1) == 0)
    {
      uint64_t v7 = 3LL;
      goto LABEL_13;
    }
  }

  uint64_t v6 = Parse.DirectInvocation.userData.getter(v4);
  if (!v6)
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    goto LABEL_10;
  }

  sub_5B538(0xD000000000000014LL, 0x800000000006ADB0LL, v6, &v11);
  sub_C090();
  if (!*((void *)&v12 + 1))
  {
LABEL_10:
    sub_2C7A0((uint64_t)&v11);
    goto LABEL_11;
  }

  if ((swift_dynamicCast(&v10, &v11, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_11:
    uint64_t v7 = 2LL;
    goto LABEL_13;
  }

  uint64_t v7 = sub_4A650(v10);
LABEL_13:
  uint64_t v8 = type metadata accessor for Parse.DirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
  return v7;
}

id sub_4A488(void *a1, unsigned __int8 a2)
{
  int v3 = a2;
  sub_2C990();
  id v4 = sub_301E4();
  uint64_t v5 = sub_6358(&qword_8DCB0);
  uint64_t inited = swift_initStackObject(v5, v19);
  *(_OWORD *)(inited + sub_14C98(v0 + 16) = xmmword_61030;
  uint64_t v7 = (int8x16_t *)(inited + 72);
  v18[0] = 0xD000000000000014LL;
  v18[1] = 0x800000000006ADB0LL;
  AnyHashable.init<A>(_:)(v18, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = sub_6358(&qword_8F3D0);
  if (v3 == 2)
  {
    v7->i64[0] = 0LL;
    *(void *)(inited + 8sub_4A488(*(void **)(v2 + 152), 0) = 0LL;
  }

  else
  {
    int32x2_t v8 = vdup_n_s32((v3 & 1) == 0);
    v9.i64[0] = v8.u32[0];
    v9.i64[1] = v8.u32[1];
    *uint64_t v7 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v9, 0x3FuLL)), (int8x16_t)xmmword_65950, (int8x16_t)xmmword_65940);
  }

  uint64_t v10 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_3028C(v10, v4);
  __int128 v11 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_8734(a1, v12);
  uint64_t v14 = (void *)DeviceState.asInvocationContext.getter(v12, v13);
  id v15 = [v11 runSiriKitExecutorCommandWithContext:v14 payload:v4];

  id v16 = [v11 wrapCommandInStartLocalRequest:v15];
  return v16;
}

uint64_t sub_4A650(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_7F4F8, v2);
  sub_C090();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_4A69C(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x64657463656A6572LL;
  }
  else {
    return 0x656D7269666E6F63LL;
  }
}

unint64_t sub_4A6D8(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000014LL;
  }
  else {
    return 0xD000000000000034LL;
  }
}

void sub_4A714(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_19A20();
  uint64_t v8 = sub_6358((uint64_t *)&unk_8F3A0);
  sub_6C04();
  __chkstk_darwin(v9);
  sub_6BD8();
  uint64_t v12 = (void *)(v11 - v10);
  sub_13F34(v2, v11 - v10);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v8);
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)a2 = *v12;
  }

  else
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 32))(v3, v12, v6);
    a1(v3);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
  }

  *(_BYTE *)(a2 + 4sub_4A488(*(void **)(v2 + 152), 0) = EnumCaseMultiPayload == 1;
  sub_10F48();
}

uint64_t sub_4A80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  if (sub_63E0(a1, 1LL, v6) == 1)
  {
    sub_AFB8(a1, &qword_8CD10);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    swift_unknownObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = swift_allocObject(&unk_826C8, 32LL, 7LL);
  *(void *)(v15 + sub_14C98(v0 + 16) = a2;
  *(void *)(v15 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a3;
  if (v14 | v12)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    id v16 = v18;
    void v18[2] = v12;
    void v18[3] = v14;
  }

  else
  {
    id v16 = 0LL;
  }

  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_8F860, v15);
}

void sub_4A950(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(v2 + 56);
  if (v3)
  {
    type metadata accessor for SiriKitIntentExecutionBehavior(0LL);
    id v4 = v3;
    static SiriKitIntentExecutionBehavior.remoteIntentExecution(targetDevice:)();

    sub_6590();
  }

  else
  {
    sub_3E728(a1, a2);
  }

void sub_4A99C(uint64_t a1, uint64_t a2, void *a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v35 = a5;
  uint64_t v36 = a4;
  id v33 = a3;
  uint64_t v34 = a1;
  uint64_t v32 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v6 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_19A20();
  uint64_t v7 = type metadata accessor for CATOption(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_6BD8();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = sub_6358((uint64_t *)&unk_8F3A0);
  sub_6C04();
  uint64_t v14 = __chkstk_darwin(v13);
  id v16 = (uint64_t *)((char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v31 - v17;
  type metadata accessor for CATGlobals(0LL);
  uint64_t v19 = CATGlobals.__allocating_init()();
  uint64_t v20 = sub_6358(&qword_8CB30);
  uint64_t v21 = swift_allocObject( v20,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
        + *(void *)(v8 + 72),
          *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v21 + sub_14C98(v0 + 16) = xmmword_61030;
  static CATOption.defaultMode.getter();
  v37[0] = v21;
  sub_6240( (unint64_t *)&unk_8F3B0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CATOption,  (uint64_t)&protocol conformance descriptor for CATOption);
  uint64_t v23 = v22;
  uint64_t v24 = sub_6358(&qword_8CB38);
  unint64_t v25 = sub_13EF0();
  dispatch thunk of SetAlgebra.init<A>(_:)(v37, v24, v25, v7, v23);
  uint64_t v26 = type metadata accessor for HealthCATWrapper(0LL);
  sub_14DA4(v26);
  uint64_t v27 = sub_466D4(v19, v11);
  id v28 = [v33 code];
  sub_471FC(v34, (uint64_t)v28, 0);
  swift_release(v27);
  sub_13F34((uint64_t)v18, (uint64_t)v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v12);
  if (EnumCaseMultiPayload == 1)
  {
    v37[0] = *v16;
  }

  else
  {
    uint64_t v30 = v32;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 32))(v5, v16, v32);
    sub_4AC10(v5, v37);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v30);
  }

  BOOL v38 = EnumCaseMultiPayload == 1;
  v36(v37);
  sub_AFB8((uint64_t)v37, (uint64_t *)&unk_8F3E0);
  sub_AFB8((uint64_t)v18, (uint64_t *)&unk_8F3A0);
  sub_10F48();
}

uint64_t sub_4AC10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_6358(&qword_8C348);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Device.current.getter(v18);
  static Device.current.getter(v15);
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  sub_8734(v15, v16);
  char v9 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v7, v8);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  sub_8760((uint64_t)v6, 1LL, 1LL, v10);
  uint64_t v11 = type metadata accessor for AceOutput(0LL);
  memset(v13, 0, sizeof(v13));
  uint64_t v14 = 0LL;
  a2[3] = v11;
  a2[4] = &protocol witness table for AceOutput;
  sub_6B9C(a2);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a1,  v18,  v9 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v6,  _swiftEmptyArrayStorage,  v13);
  sub_AFB8((uint64_t)v13, (uint64_t *)&unk_8F3F0);
  sub_AFB8((uint64_t)v6, &qword_8C348);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v18);
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v15);
}

uint64_t sub_4AD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  sub_8760(v11, 1LL, 1LL, v12);
  uint64_t v13 = (void *)swift_allocObject(&unk_826A0, 56LL, 7LL);
  _OWORD v13[2] = 0LL;
  v13[3] = 0LL;
  v13[4] = v5;
  v13[5] = a4;
  v13[6] = a5;
  swift_retain(v5);
  swift_retain(a5);
  uint64_t v14 = sub_4A80C(v11, (uint64_t)&unk_8F850, (uint64_t)v13);
  return swift_release(v14);
}

uint64_t sub_4AE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  return swift_task_switch(sub_4AE48, 0LL, 0LL);
}

uint64_t sub_4AE48()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(**(void **)(v0 + 136));
  id v2 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  uint64_t v3 = type metadata accessor for ResponseFactory(0LL);
  uint64_t v4 = sub_14DA4(v3);
  uint64_t v5 = ResponseFactory.init()(v4);
  *(void *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  *(void *)(v0 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = &protocol witness table for ResponseFactory;
  *(void *)(v0 + 4sub_4A488(*(void **)(v2 + 152), 0) = v5;
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  *(void *)(v0 + sub_14C98(v0 + 16) = 0xD00000000000001ALL;
  *(void *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0x800000000006AE20LL;
  *(void *)(v0 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v2;
  *(void *)(v0 + 8sub_4A488(*(void **)(v2 + 152), 0) = v6;
  uint64_t v7 = (void *)swift_task_alloc(dword_8DC24);
  *(void *)(v0 + 16sub_4A488(*(void **)(v2 + 152), 0) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_4AF5C;
  return sub_2B800(v0 + 88, v0 + 16, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_4AF5C()
{
  return swift_task_switch(sub_4AFB0, 0LL, 0LL);
}

uint64_t sub_4AFB0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for ResumeWorkoutHandleIntentStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin33ResumeWorkoutHandleIntentStrategy);
}

uint64_t sub_4B02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for ResumeWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_4B094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for ResumeWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  v13,  a7);
}

uint64_t sub_4B0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for ResumeWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

void sub_4B164(uint64_t a1, uint64_t a2, void *a3, void (*a4)(void *), uint64_t a5)
{
}

uint64_t sub_4B178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for ResumeWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_4B1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for ResumeWorkoutHandleIntentStrategy();
  return HandleIntentFlowStrategy.makeInProgressResponse(app:intent:intentResponse:_:)(a1, a2, a3, a4, a5, v13, a7);
}

uint64_t sub_4B248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_4AD68(a1, a2, a3, a4, a5);
}

uint64_t sub_4B268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ResumeWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, v5, a3);
}

uint64_t sub_4B2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for ResumeWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, v7, a4);
}

void sub_4B2F0(uint64_t a1, void *a2)
{
}

uint64_t sub_4B310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for ResumeWorkoutHandleIntentStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, v11, a6);
}

void sub_4B368(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_4B394()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_4B3C8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_8F84C);
  *(void *)(v2 + sub_14C98(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1ECE0;
  return sub_4AE2C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_4B448(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + sub_14C98(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_4B4AC;
  return v6(a1);
}

uint64_t sub_4B4AC()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_4B4D4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_4B4F8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_8F85C);
  *(void *)(v2 + sub_14C98(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_4B568;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_8F858 + dword_8F858))(a1, v4);
}

uint64_t sub_4B568()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

void sub_4B58C(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  id v4 = sub_4B7FC(a1);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = *(id *)Log.health.unsafeMutableAddressor(v4);
    uint64_t v7 = static os_log_type_t.debug.getter(v6);
    uint64_t v8 = sub_6358(&qword_8BE60);
    uint64_t v9 = sub_65A4(v8, 72LL);
    *(_OWORD *)(v9 + sub_14C98(v0 + 16) = xmmword_61030;
    id v10 = v5;
    id v11 = [v10 description];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v9 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v12;
    *(void *)(v9 + 4sub_4A488(*(void **)(v2 + 152), 0) = v14;
    os_log(_:dso:log:type:_:)("Created INPauseWorkoutIntent: %@", 32LL, 2LL, &dword_0, v6, v7, v9);

    swift_bridgeObjectRelease(v9);
    id v28 = v10;
    a3(v5, 0LL);
  }

  else
  {
    uint64_t v15 = type metadata accessor for HealthFlowError();
    sub_65A4(v15, 40LL);
    uint64_t v16 = sub_BD3C(0);
    uint64_t v17 = static os_log_type_t.error.getter(v16);
    uint64_t v18 = *(void **)Log.health.unsafeMutableAddressor(v17);
    uint64_t v19 = sub_6358(&qword_8BE60);
    uint64_t v20 = sub_65A4(v19, 72LL);
    *(_OWORD *)(v20 + sub_14C98(v0 + 16) = xmmword_61030;
    id v21 = v18;
    uint64_t v22 = sub_BC64();
    uint64_t v24 = v23;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v20 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v22;
    *(void *)(v20 + 4sub_4A488(*(void **)(v2 + 152), 0) = v24;
    os_log(_:dso:log:_:_:)(v17, &dword_0, v21, "Pause- RCHFlow Strategy: %@", 27LL, 2LL, v20);

    swift_bridgeObjectRelease(v20);
    sub_6240( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v26 = swift_allocError(v15, v25, 0LL, 0LL);
    *uint64_t v27 = v16;
    swift_retain(v16);
    a3((void *)v26, 1LL);
    swift_errorRelease(v26);
    swift_release(v16);
  }

id sub_4B7FC(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8BE48);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v30 = (char *)&v30 - v5;
  uint64_t v6 = type metadata accessor for HealthNLIntent(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NLIntent(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20((char *)&v30 - v18, a1, v13);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v19, v13);
  if (v21 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_6598(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 96));
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v19, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
    sub_4BF30();
    id v22 = sub_50FEC((uint64_t)v8);
    sub_6468((uint64_t)v8, type metadata accessor for HealthNLIntent);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  else
  {
    uint64_t v23 = a1;
    uint64_t v25 = (uint64_t)v30;
    uint64_t v24 = (uint64_t)v31;
    if (v21 == enum case for Parse.directInvocation(_:))
    {
      v20(v17, v23, v13);
      sub_5A890((uint64_t)v17, v25);
      sub_6398(v25, v24);
      uint64_t v26 = type metadata accessor for DirectInvocationData(0LL);
      if (sub_63E0(v24, 1LL, v26) == 1)
      {
        sub_63EC(v25);
        sub_63EC(v24);
        id v22 = 0LL;
      }

      else
      {
        sub_5AE94();
        sub_63EC(v25);
        sub_6468(v24, type metadata accessor for DirectInvocationData);
        uint64_t v27 = sub_6358(&qword_8BE50);
        unint64_t v28 = sub_4BF30();
        else {
          id v22 = 0LL;
        }
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    }

    else
    {
      sub_6598(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
      return 0LL;
    }
  }

  return v22;
}

uint64_t type metadata accessor for PauseWorkoutStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin20PauseWorkoutStrategy);
}

uint64_t sub_4BB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for PauseWorkoutStrategy();
  return RCHFlowStrategy.makeAnnotatedIntentFromParse(parse:currentIntent:completion:)(a1, a2, a3, a4, v11, a6);
}

void sub_4BB70(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
}

uint64_t sub_4BB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for PauseWorkoutStrategy();
  return RCHFlowStrategy.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t sub_4BBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for PauseWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeAppDoesNotSupportIntentResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_4BC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for PauseWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeAppNotFoundOnDeviceResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_4BC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for PauseWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeDeviceIncompatibleResponse(app:intent:_:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_4BCD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for PauseWorkoutStrategy();
  return RouteConfirmIntentResponseFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  v13,  a7);
}

uint64_t sub_4BD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for PauseWorkoutStrategy();
  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, v5, a3);
}

uint64_t sub_4BD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for PauseWorkoutStrategy();
  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, v7, a4);
}

uint64_t sub_4BDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for PauseWorkoutStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, v11, a6);
}

uint64_t sub_4BE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for PauseWorkoutStrategy();
  return IntentErrorHandling.makeErrorResponse(app:intent:error:_:)(a1, a2, a3, a4, a5, v13, a7);
}

void sub_4BE80(uint64_t a1, uint64_t a2)
{
}

void sub_4BEAC(uint64_t a1, uint64_t a2)
{
}

void sub_4BED8(uint64_t a1, uint64_t a2)
{
}

void sub_4BF04(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_4BF30()
{
  unint64_t result = qword_8C7A8;
  if (!qword_8C7A8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INPauseWorkoutIntent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_8C7A8);
  }

  return result;
}

uint64_t sub_4BF6C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_4BFA8 + 4 * byte_65C08[a1]))( 0xD00000000000001DLL,  0x800000000006B110LL);
}

uint64_t sub_4BFA8()
{
  return v0 - 6;
}

uint64_t destroy for BinaryConfirmationSnippetModel(uint64_t *a1)
{
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t *initializeWithCopy for BinaryConfirmationSnippetModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_420EC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[4];
  unint64_t v8 = a2[5];
  swift_bridgeObjectRetain();
  sub_420EC(v7, v8);
  a1[4] = v7;
  a1[5] = v8;
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for BinaryConfirmationSnippetModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_420EC(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_42024(v6, v7);
  a1[2] = a2[2];
  uint64_t v8 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[4];
  unint64_t v10 = a2[5];
  sub_420EC(v9, v10);
  uint64_t v11 = a1[4];
  unint64_t v12 = a1[5];
  a1[4] = v9;
  a1[5] = v10;
  sub_42024(v11, v12);
  a1[6] = a2[6];
  uint64_t v13 = a2[7];
  uint64_t v14 = a1[7];
  a1[7] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v14);
  return a1;
}

__n128 initializeWithTake for BinaryConfirmationSnippetModel(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + sub_14C98(v0 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for BinaryConfirmationSnippetModel(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_42024(v4, v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_OWORD *)(a2 + 32);
  sub_42024(v8, v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = a1[7];
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for BinaryConfirmationSnippetModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BinaryConfirmationSnippetModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 4sub_4A488(*(void **)(v2 + 152), 0) = 0u;
    *(_OWORD *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HealthUIPluginModel()
{
  return &type metadata for HealthUIPluginModel;
}

void sub_4C464()
{
  unk_96FF7 = -18;
}

uint64_t *sub_4C494()
{
  if (qword_8BB98 != -1) {
    swift_once(&qword_8BB98, sub_4C464);
  }
  return &qword_96FE8;
}

uint64_t sub_4C4D4(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(a2);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_4C540()
{
  return 12383LL;
}

uint64_t sub_4C54C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012LL && a2 == 0x800000000006B160LL)
  {
    swift_bridgeObjectRelease(0x800000000006B160LL);
    char v3 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000000006B160LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v3 = v4 ^ 1;
  }

  return v3 & 1;
}

void sub_4C5D0()
{
}

unint64_t sub_4C600()
{
  return 0xD000000000000012LL;
}

void sub_4C61C(void *a1)
{
  char v3 = v1;
  sub_4CDF8(v3, &v32);
  unint64_t v5 = *((void *)&v32 + 1);
  uint64_t v24 = v32;
  uint64_t v6 = v34;
  uint64_t v29 = v33;
  unint64_t v7 = v36;
  uint64_t v25 = v35;
  uint64_t v8 = v38;
  uint64_t v27 = v37;
  uint64_t v28 = sub_6358(&qword_8F988);
  uint64_t v30 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  sub_27F88();
  uint64_t v22 = v2;
  uint64_t v23 = sub_6358(&qword_8F990);
  uint64_t v26 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_8734(a1, v11);
  unint64_t v13 = sub_4CE10();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for HealthUIPluginModel.CodingKeys,  &type metadata for HealthUIPluginModel.CodingKeys,  v13,  v11,  v12);
  uint64_t v14 = v24;
  sub_420EC(v24, v5);
  swift_bridgeObjectRetain();
  uint64_t v15 = v25;
  sub_420EC(v25, v7);
  sub_4CEC4();
  swift_bridgeObjectRetain();
  uint64_t v16 = v23;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v31[0] = v14;
  v31[1] = v5;
  v31[2] = v29;
  v31[3] = v6;
  v31[4] = v15;
  v31[5] = v7;
  v31[6] = v27;
  v31[7] = v8;
  unint64_t v17 = sub_4CF3C();
  uint64_t v18 = v28;
  uint64_t v19 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v31, v20, v28, &type metadata for BinaryConfirmationSnippetModel, v17);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v19, v18);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v16);
  sub_4CF78(v39);
  sub_2544C();
}

void sub_4C830(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v32 = sub_6358(&qword_8F958);
  __chkstk_darwin(v32);
  uint64_t v4 = sub_6358(&qword_8F960);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_27F88();
  uint64_t v7 = a1[3];
  uint64_t v6 = a1[4];
  sub_8734(a1, v7);
  unint64_t v8 = sub_4CE10();
  uint64_t v9 = v7;
  uint64_t v10 = a1;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for HealthUIPluginModel.CodingKeys,  &type metadata for HealthUIPluginModel.CodingKeys,  v8,  v9,  v6);
  if (v34) {
    goto LABEL_8;
  }
  uint64_t v35 = v5;
  uint64_t v11 = KeyedDecodingContainer.allKeys.getter(v4);
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    uint64_t v18 = v4;
LABEL_7:
    uint64_t v19 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v19, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v21 = v20;
    sub_6358(&qword_8F970);
    *uint64_t v21 = &type metadata for HealthUIPluginModel;
    uint64_t v22 = KeyedDecodingContainer.codingPath.getter(v18);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v22,  0xD00000000000002BLL,  0x800000000006B130LL,  0LL);
    uint64_t v23 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  enum case for DecodingError.typeMismatch(_:),  v19);
    swift_willThrow(v23, v24, v25, v26, v27);
    sub_17C70();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v2, v18);
    uint64_t v10 = a1;
LABEL_8:
    _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v10);
    goto LABEL_9;
  }

  uint64_t v13 = v11;
  sub_4CE4C(1LL, v12, v11, v11 + 32, 0LL, (2 * v12) | 1);
  uint64_t v15 = v14;
  unint64_t v17 = v16;
  swift_bridgeObjectRelease(v13);
  if (v15 != v17 >> 1)
  {
    uint64_t v18 = v4;
    goto LABEL_7;
  }

  sub_4CEC4();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  sub_4CF00();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v37);
  sub_4D218();
  sub_17C70();
  sub_4D22C();
  __int128 v33 = v37[1];
  __int128 v36 = v37[0];
  __int128 v31 = v37[2];
  uint64_t v28 = v38;
  uint64_t v29 = v39;
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(a1);
  uint64_t v30 = v40;
  *uint64_t v40 = v36;
  v30[1] = v33;
  v30[2] = v31;
  *((void *)v30 + 6) = v28;
  *((void *)v30 + _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7) = v29;
LABEL_9:
  sub_2544C();
}

void sub_4CB30()
{
}

uint64_t sub_4CB4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_4C4D4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_4CB74(uint64_t a1)
{
  unint64_t v2 = sub_4CEC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_4CB9C(uint64_t a1)
{
  unint64_t v2 = sub_4CEC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_4CBC4(uint64_t a1)
{
}

uint64_t sub_4CBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_4C54C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_4CC1C()
{
  return sub_32864();
}

uint64_t sub_4CC34@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_17EE8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_4CC5C(uint64_t a1)
{
  unint64_t v2 = sub_4CE10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_4CC84(uint64_t a1)
{
  unint64_t v2 = sub_4CE10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_4CCAC()
{
  uint64_t v0 = qword_96FE8;
  swift_bridgeObjectRetain();
  return v0;
}

void sub_4CCE8(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2) {
    sub_4CDF8(v4, a2);
  }
}

void sub_4CD2C(void *a1)
{
}

unint64_t sub_4CD7C()
{
  unint64_t result = qword_8F948;
  if (!qword_8F948)
  {
    unint64_t result = swift_getWitnessTable(&unk_65C9C, &type metadata for HealthUIPluginModel);
    atomic_store(result, (unint64_t *)&qword_8F948);
  }

  return result;
}

unint64_t sub_4CDBC()
{
  unint64_t result = qword_8F950;
  if (!qword_8F950)
  {
    unint64_t result = swift_getWitnessTable(&unk_65C74, &type metadata for HealthUIPluginModel);
    atomic_store(result, (unint64_t *)&qword_8F950);
  }

  return result;
}

_OWORD *sub_4CDF8(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  __int128 v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

unint64_t sub_4CE10()
{
  unint64_t result = qword_8F968;
  if (!qword_8F968)
  {
    unint64_t result = swift_getWitnessTable(&unk_65EF0, &type metadata for HealthUIPluginModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8F968);
  }

  return result;
}

uint64_t sub_4CE4C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((a2 & 0x8000000000000000LL) == 0) {
    return swift_unknownObjectRetain(a3);
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_4CEC4()
{
  unint64_t result = qword_8F978;
  if (!qword_8F978)
  {
    unint64_t result = swift_getWitnessTable(&unk_65EA0, &type metadata for HealthUIPluginModel.BinaryConfirmationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_8F978);
  }

  return result;
}

unint64_t sub_4CF00()
{
  unint64_t result = qword_8F980;
  if (!qword_8F980)
  {
    unint64_t result = swift_getWitnessTable(&unk_65FB8, &type metadata for BinaryConfirmationSnippetModel);
    atomic_store(result, (unint64_t *)&qword_8F980);
  }

  return result;
}

unint64_t sub_4CF3C()
{
  unint64_t result = qword_8F998;
  if (!qword_8F998)
  {
    unint64_t result = swift_getWitnessTable(&unk_65F90, &type metadata for BinaryConfirmationSnippetModel);
    atomic_store(result, (unint64_t *)&qword_8F998);
  }

  return result;
}

uint64_t *sub_4CF78(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  unint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  sub_42024(*a1, a1[1]);
  swift_bridgeObjectRelease(v2);
  sub_42024(v3, v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for HealthUIPluginModel.CodingKeys()
{
  return &type metadata for HealthUIPluginModel.CodingKeys;
}

uint64_t _s24HealthFlowDelegatePlugin19HealthUIPluginModelO10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_4D034 + 4 * byte_65C30[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_4D054 + 4 * byte_65C35[v4]))();
  }
}

_BYTE *sub_4D034(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_4D054(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_4D05C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_4D064(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_4D06C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_4D074(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HealthUIPluginModel.BinaryConfirmationCodingKeys()
{
  return &type metadata for HealthUIPluginModel.BinaryConfirmationCodingKeys;
}

unint64_t sub_4D094()
{
  unint64_t result = qword_8F9A0;
  if (!qword_8F9A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_65DC0, &type metadata for HealthUIPluginModel.BinaryConfirmationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_8F9A0);
  }

  return result;
}

unint64_t sub_4D0D4()
{
  unint64_t result = qword_8F9A8;
  if (!qword_8F9A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_65E78, &type metadata for HealthUIPluginModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8F9A8);
  }

  return result;
}

unint64_t sub_4D114()
{
  unint64_t result = qword_8F9B0;
  if (!qword_8F9B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_65D30, &type metadata for HealthUIPluginModel.BinaryConfirmationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_8F9B0);
  }

  return result;
}

unint64_t sub_4D154()
{
  unint64_t result = qword_8F9B8;
  if (!qword_8F9B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_65D58, &type metadata for HealthUIPluginModel.BinaryConfirmationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_8F9B8);
  }

  return result;
}

unint64_t sub_4D194()
{
  unint64_t result = qword_8F9C0;
  if (!qword_8F9C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_65DE8, &type metadata for HealthUIPluginModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8F9C0);
  }

  return result;
}

unint64_t sub_4D1D4()
{
  unint64_t result = qword_8F9C8;
  if (!qword_8F9C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_65E10, &type metadata for HealthUIPluginModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8F9C8);
  }

  return result;
}

uint64_t sub_4D218()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 208) + 8LL))(v1, v0);
}

uint64_t sub_4D22C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 160) + 8LL))(v0, v1);
}

void sub_4D240()
{
}

ValueMetadata *type metadata accessor for BinaryConfirmationSnippetModel()
{
  return &type metadata for BinaryConfirmationSnippetModel;
}

uint64_t sub_4D25C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD00000000000001DLL && a2 == 0x800000000006B180LL)
  {
    unint64_t v4 = 0x800000000006B180LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000000006B180LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v6 = 0x800000000006B1A0LL;
    if (a2 == 0x800000000006B1A0LL) {
      goto LABEL_11;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000000006B1A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if (a1 == 0xD00000000000001FLL && a2 == 0x800000000006B1C0LL)
  {
    unint64_t v7 = 0x800000000006B1C0LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000000006B1C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x800000000006B1E0LL)
  {
    swift_bridgeObjectRelease(0x800000000006B1E0LL);
    return 3LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000000006B1E0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_4D3F4()
{
  return 4LL;
}

Swift::Int sub_4D3FC(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_4D440(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_4D47C + 4 * byte_65F40[a1]))( 0xD00000000000001DLL,  0x800000000006B180LL);
}

unint64_t sub_4D47C()
{
  return 0xD000000000000012LL;
}

uint64_t sub_4D498()
{
  return v0 + 13;
}

uint64_t sub_4D4C0(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_6358(&qword_8F9E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_8734(a1, v9);
  unint64_t v11 = sub_4D9B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BinaryConfirmationSnippetModel.CodingKeys,  &type metadata for BinaryConfirmationSnippetModel.CodingKeys,  v11,  v9,  v10);
  __int128 v21 = *v3;
  char v20 = 0;
  unint64_t v12 = sub_4DA2C();
  sub_4DC10(v12, v13, v14, (uint64_t)&type metadata for Data);
  if (!v2)
  {
    uint64_t v15 = sub_4DC2C(*((void *)v3 + 2), *((void *)v3 + 3), 1);
    __int128 v21 = v3[2];
    char v20 = 2;
    sub_4DC10(v15, v16, v17, (uint64_t)&type metadata for Data);
    sub_4DC2C(*((void *)v3 + 6), *((void *)v3 + 7), 3);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_4D5FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_6358(&qword_8F9D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_8734(a1, v9);
  unint64_t v11 = sub_4D9B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BinaryConfirmationSnippetModel.CodingKeys,  &type metadata for BinaryConfirmationSnippetModel.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(a1);
  }
  char v37 = 0;
  sub_4D9F0();
  sub_4DC64();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v12);
  uint64_t v34 = a2;
  uint64_t v14 = v35;
  unint64_t v13 = v36;
  LOBYTE(v35) = 1;
  sub_420EC(v14, v36);
  uint64_t v31 = sub_4DC44();
  unint64_t v33 = v13;
  char v37 = 2;
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  sub_4DC64();
  uint64_t v32 = 0LL;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17);
  uint64_t v18 = v16;
  uint64_t v19 = v35;
  LOBYTE(v35) = 3;
  unint64_t v30 = v36;
  sub_420EC(v19, v36);
  uint64_t v20 = sub_4DC44();
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v32 = v20;
  v23(v8, v5);
  uint64_t v24 = sub_4DC88();
  sub_420EC(v24, v25);
  swift_bridgeObjectRetain();
  unint64_t v26 = v30;
  sub_420EC(v6, v30);
  swift_bridgeObjectRetain();
  sub_4DC58();
  sub_4DC80();
  sub_4DC04();
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(a1);
  sub_4DC04();
  sub_4DC80();
  sub_4DC58();
  uint64_t result = swift_bridgeObjectRelease(v22);
  uint64_t v28 = v34;
  *uint64_t v34 = v14;
  v28[1] = v19;
  v28[2] = v31;
  v28[3] = v18;
  v28[4] = v6;
  v28[5] = v26;
  v28[6] = v32;
  v28[7] = v22;
  return result;
}

Swift::Int sub_4D89C()
{
  return sub_4D3FC(*v0);
}

uint64_t sub_4D8A4()
{
  return sub_4D440(*v0);
}

uint64_t sub_4D8AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_4D25C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_4D8D0()
{
  return sub_32864();
}

uint64_t sub_4D8EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_4D3F4();
  *a1 = result;
  return result;
}

uint64_t sub_4D910(uint64_t a1)
{
  unint64_t v2 = sub_4D9B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_4D938(uint64_t a1)
{
  unint64_t v2 = sub_4D9B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_4D960@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    __int128 v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }

  return result;
}

uint64_t sub_4D9A0(void *a1)
{
  return sub_4D4C0(a1);
}

unint64_t sub_4D9B4()
{
  unint64_t result = qword_8F9D8;
  if (!qword_8F9D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_660A4, &type metadata for BinaryConfirmationSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8F9D8);
  }

  return result;
}

unint64_t sub_4D9F0()
{
  unint64_t result = qword_8F9E0;
  if (!qword_8F9E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_8F9E0);
  }

  return result;
}

unint64_t sub_4DA2C()
{
  unint64_t result = qword_8F9F0;
  if (!qword_8F9F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_8F9F0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BinaryConfirmationSnippetModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_4DAB4 + 4 * byte_65F49[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_4DAE8 + 4 * byte_65F44[v4]))();
}

uint64_t sub_4DAE8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4DAF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x4DAF8LL);
  }
  return result;
}

uint64_t sub_4DB04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x4DB0CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_4DB10(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4DB18(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BinaryConfirmationSnippetModel.CodingKeys()
{
  return &type metadata for BinaryConfirmationSnippetModel.CodingKeys;
}

unint64_t sub_4DB38()
{
  unint64_t result = qword_8F9F8;
  if (!qword_8F9F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_6607C, &type metadata for BinaryConfirmationSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8F9F8);
  }

  return result;
}

unint64_t sub_4DB78()
{
  unint64_t result = qword_8FA00;
  if (!qword_8FA00)
  {
    unint64_t result = swift_getWitnessTable(&unk_65FEC, &type metadata for BinaryConfirmationSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8FA00);
  }

  return result;
}

unint64_t sub_4DBB8()
{
  unint64_t result = qword_8FA08;
  if (!qword_8FA08)
  {
    unint64_t result = swift_getWitnessTable(&unk_66014, &type metadata for BinaryConfirmationSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_8FA08);
  }

  return result;
}

uint64_t sub_4DBF4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_4DC04()
{
  return sub_42024(v1, v0);
}

uint64_t sub_4DC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6 - 80, v6 - 81, v4, a4, v5);
}

uint64_t sub_4DC2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 8sub_4A488(*(void **)(v2 + 152), 0) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 80, v3);
}

uint64_t sub_4DC44()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 96, v0);
}

uint64_t sub_4DC58()
{
  return sub_42024(v0, v1);
}

  ;
}

uint64_t sub_4DC80()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_4DC88()
{
  return v0;
}

uint64_t type metadata accessor for HealthNLIntent.HealthAppOntologyNode(uint64_t a1)
{
  return sub_2DA24( a1,  (uint64_t *)&unk_8FA90,  (uint64_t)&nominal type descriptor for HealthNLIntent.HealthAppOntologyNode);
}

uint64_t sub_4DCB0(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_97010);
}

BOOL sub_4DCEC(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_4DCF8(char a1, uint64_t a2)
{
  uint64_t v2 = 0xD000000000000013LL;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0x80000000000685C0LL;
    }
    else {
      unint64_t v3 = 0x80000000000685E0LL;
    }
    uint64_t v4 = 0xD000000000000013LL;
  }

  else
  {
    uint64_t v4 = 0x4E74756F6B726F77LL;
    unint64_t v3 = 0xEB00000000656D61LL;
  }

  if ((_BYTE)a2)
  {
    else {
      unint64_t v5 = 0x80000000000685E0LL;
    }
  }

  else
  {
    uint64_t v2 = 0x4E74756F6B726F77LL;
    unint64_t v5 = 0xEB00000000656D61LL;
  }

  if (v4 != v2 || v3 != v5) {
    sub_5088C(v4, a2, v2);
  }
  sub_C090();
  sub_10F84();
  sub_11120();
}

void sub_4DDD8(uint64_t a1, uint64_t a2)
{
}

void sub_4DDE4(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x616D6D6F43656361LL;
  }
  else {
    uint64_t v3 = 7368801LL;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000LL;
  }
  else {
    unint64_t v4 = 0xEA0000000000646ELL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x616D6D6F43656361LL;
  }
  else {
    uint64_t v5 = 7368801LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEA0000000000646ELL;
  }
  else {
    unint64_t v6 = 0xE300000000000000LL;
  }
  if (v3 != v5 || v4 != v6) {
    sub_5088C(v3, a2, v5);
  }
  sub_C090();
  sub_10F84();
  sub_11120();
}

BOOL sub_4DE60(char a1, char a2)
{
  return qword_66408[a1] == qword_66408[a2];
}

void sub_4DE84(uint64_t a1, uint64_t a2)
{
}

void sub_4DE90(uint64_t a1, uint64_t a2)
{
}

void sub_4DE9C(uint64_t a1, uint64_t a2)
{
}

void sub_4DEA8()
{
  BOOL v5 = v5 && v0 == v1;
  if (!v5) {
    sub_5088C(v2, v3, v4);
  }
  sub_C090();
  sub_10F84();
  sub_11120();
}

void sub_4DF00(uint64_t a1, uint64_t a2)
{
}

void sub_4DF0C()
{
  BOOL v5 = v5 && v0 == v1;
  if (!v5) {
    sub_5088C(v2, v3, v4);
  }
  sub_C090();
  sub_10F84();
  sub_11120();
}

void sub_4DF64(uint64_t a1, uint64_t a2)
{
}

void sub_4DF70(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3();
  uint64_t v7 = v6;
  uint64_t v8 = ((uint64_t (*)(uint64_t))a3)(a2);
  if (v5 != v8 || v7 != v9) {
    sub_5088C(v5, v9, v8);
  }
  sub_C090();
  sub_10F84();
  sub_11120();
}

uint64_t sub_4DFDC()
{
  uint64_t v0 = type metadata accessor for HealthNLIntent(0LL);
  sub_6C04();
  __chkstk_darwin(v1);
  sub_6BD8();
  if (qword_8BBC0 != -1) {
    swift_once(&qword_8BBC0, sub_4ED4C);
  }
  uint64_t v2 = qword_8FA30;
  sub_AFF0((unint64_t *)&qword_8C5F8, type metadata accessor for HealthNLIntent, (uint64_t)&unk_661A8);
  uint64_t v4 = v3;
  sub_508B0(v2);
  if (v24) {
    return v23;
  }
  if (qword_8BBB8 != -1) {
    swift_once(&qword_8BBB8, sub_4ED20);
  }
  sub_508B0(qword_8FA28);
  if (v23 == 20)
  {
    sub_508F4(v23, v7, type metadata accessor for HealthNLIntent);
LABEL_20:
    sub_50964(v8, type metadata accessor for HealthNLIntent);
LABEL_21:
    if (qword_8BC18 != -1) {
      swift_once(&qword_8BC18, sub_4EF38);
    }
    sub_508B0(qword_8FA88);
    return v23;
  }

  uint64_t v9 = sub_2C290(v23);
  if (v9 == 0x6573696372657865LL && v10 == 0xE800000000000000LL)
  {
    uint64_t v15 = sub_10F84();
    sub_508F4(v15, v16, type metadata accessor for HealthNLIntent);
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, 0x6573696372657865LL, 0xE800000000000000LL, 0LL);
    uint64_t v13 = sub_10F84();
    sub_508F4(v13, v14, type metadata accessor for HealthNLIntent);
    if ((v12 & 1) == 0) {
      goto LABEL_20;
    }
  }

  if (qword_8BC10 != -1) {
    swift_once(&qword_8BC10, sub_4EF0C);
  }
  IntentNodeTraversable.value<A>(forNode:)(qword_8FA80, v0, v4);
  uint64_t v8 = v23;
  uint64_t v5 = 0x6961727465726F63LL;
  uint64_t v17 = sub_4E5D0(v23);
  if (v17 == 1701998435 && v18 == 0xE400000000000000LL)
  {
    uint64_t v22 = sub_50934();
    sub_50964(v22, type metadata accessor for HealthNLIntent);
    return v5;
  }

  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, 1701998435LL, 0xE400000000000000LL, 0LL);
  uint64_t v21 = sub_50934();
  sub_50964(v21, type metadata accessor for HealthNLIntent);
  if ((v20 & 1) == 0) {
    goto LABEL_21;
  }
  return v5;
}

BOOL sub_4E344()
{
  BOOL v17 = sub_4F08C();
  if (qword_8BBD0 != -1) {
    swift_once(&qword_8BBD0, sub_4EDAC);
  }
  uint64_t v2 = qword_8FA40;
  uint64_t v3 = type metadata accessor for HealthNLIntent(0LL);
  sub_AFF0((unint64_t *)&qword_8C5F8, type metadata accessor for HealthNLIntent, (uint64_t)&unk_661A8);
  IntentNodeTraversable.value<A>(forNode:)(v2, v3, v4);
  uint64_t v5 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  int v6 = sub_63E0(v0, 1LL, v5);
  sub_10004(v0, &qword_8FC20);
  BOOL v7 = sub_4F214();
  BOOL v16 = v7;
  if (v17)
  {
    sub_508D4(0, 1LL);
    unint64_t v9 = _swiftEmptyArrayStorage[2];
    unint64_t v8 = _swiftEmptyArrayStorage[3];
    if (v9 >= v8 >> 1) {
      sub_508D4(v8 > 1, v9 + 1);
    }
    _swiftEmptyArrayStorage[2] = v9 + 1;
    *((_BYTE *)&_swiftEmptyArrayStorage[4] + vsub_1F08C(v0 + 9) = 1;
  }

  if (v6 == 1)
  {
    if (!v7)
    {
LABEL_9:
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      goto LABEL_20;
    }
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
      sub_508D4(0, _swiftEmptyArrayStorage[2] + 1LL);
    }
    unint64_t v12 = _swiftEmptyArrayStorage[2];
    unint64_t v11 = _swiftEmptyArrayStorage[3];
    if (v12 >= v11 >> 1) {
      sub_508D4(v11 > 1, v12 + 1);
    }
    sub_50978();
    if (!v16) {
      goto LABEL_9;
    }
  }

  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
    sub_508D4(0, _swiftEmptyArrayStorage[2] + 1LL);
  }
  unint64_t v14 = _swiftEmptyArrayStorage[2];
  unint64_t v13 = _swiftEmptyArrayStorage[3];
  unint64_t v10 = v14 + 1;
  if (v14 >= v13 >> 1) {
    sub_508D4(v13 > 1, v14 + 1);
  }
  sub_50978();
LABEL_20:
  swift_release(_swiftEmptyArrayStorage);
  return v10 > 1;
}

unint64_t sub_4E58C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_7F830, v2);
  sub_C090();
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_4E5D0(char a1)
{
  return *(void *)&aCore_1[8 * a1];
}

uint64_t sub_4E5F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return v2 & 1;
}

void sub_4E618()
{
}

uint64_t sub_4E620(uint64_t a1)
{
  return sub_B70C(a1, *v1);
}

void sub_4E628(uint64_t a1)
{
}

unint64_t sub_4E630@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_4E58C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_4E65C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_4E5D0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_4E684(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_507F8();
  unint64_t v5 = sub_50834();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v4, v5);
}

uint64_t sub_4E6D8()
{
  if (qword_8BBA8 != -1) {
    swift_once(&qword_8BBA8, sub_4EC68);
  }
  return swift_retain(qword_8FA18);
}

uint64_t sub_4E718()
{
  uint64_t v0 = sub_6358(&qword_8E1C8);
  uint64_t v1 = swift_allocObject(v0, 592LL, 7LL);
  *(_OWORD *)(v1 + sub_14C98(v0 + 16) = xmmword_66130;
  if (qword_8BBB0 != -1) {
    swift_once(&qword_8BBB0, sub_4ECF4);
  }
  uint64_t v2 = qword_8FA20;
  *(void *)(v1 + 56) = sub_6358(&qword_8FB78);
  sub_4FD60(&qword_8FB80, &qword_8FB78);
  *(void *)(v1 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  *(void *)(v1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v2;
  uint64_t v4 = qword_8BBB8;
  swift_retain(v2);
  if (v4 != -1) {
    swift_once(&qword_8BBB8, sub_4ED20);
  }
  uint64_t v5 = qword_8FA28;
  *(void *)(v1 + 96) = sub_6358(&qword_8FB88);
  sub_4FD60(&qword_8FB90, &qword_8FB88);
  *(void *)(v1 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v6;
  *(void *)(v1 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v5;
  uint64_t v7 = qword_8BC10;
  swift_retain(v5);
  if (v7 != -1) {
    swift_once(&qword_8BC10, sub_4EF0C);
  }
  uint64_t v8 = qword_8FA80;
  *(void *)(v1 + 136) = sub_6358(&qword_8FB98);
  sub_4FD60(&qword_8FBA0, &qword_8FB98);
  *(void *)(v1 + sub_14C98(v0 + 144) = v9;
  *(void *)(v1 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v8;
  uint64_t v10 = qword_8BC18;
  swift_retain(v8);
  if (v10 != -1) {
    swift_once(&qword_8BC18, sub_4EF38);
  }
  uint64_t v11 = qword_8FA88;
  uint64_t v12 = sub_6358(&qword_8FBA8);
  *(void *)(v1 + 176) = v12;
  sub_4FD60(&qword_8FBB0, &qword_8FBA8);
  uint64_t v14 = v13;
  *(void *)(v1 + 18_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v13;
  *(void *)(v1 + 15_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v11;
  uint64_t v15 = qword_8BBC0;
  swift_retain(v11);
  if (v15 != -1) {
    swift_once(&qword_8BBC0, sub_4ED4C);
  }
  uint64_t v16 = qword_8FA30;
  *(void *)(v1 + sub_14C58(v0 + 216) = v12;
  *(void *)(v1 + 22_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v14;
  *(void *)(v1 + 19_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v16;
  uint64_t v17 = qword_8BBC8;
  swift_retain(v16);
  if (v17 != -1) {
    swift_once(&qword_8BBC8, sub_4ED80);
  }
  uint64_t v18 = qword_8FA38;
  *(void *)(v1 + 256) = sub_6358(&qword_8FBB8);
  sub_4FD60(&qword_8FBC0, &qword_8FBB8);
  *(void *)(v1 + 26_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v19;
  *(void *)(v1 + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v18;
  uint64_t v20 = qword_8BBD0;
  swift_retain(v18);
  if (v20 != -1) {
    swift_once(&qword_8BBD0, sub_4EDAC);
  }
  uint64_t v21 = qword_8FA40;
  *(void *)(v1 + 296) = sub_6358(&qword_8FBC8);
  sub_4FD60(&qword_8FBD0, &qword_8FBC8);
  *(void *)(v1 + 30_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v22;
  *(void *)(v1 + 27_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v21;
  uint64_t v23 = qword_8BBD8;
  swift_retain(v21);
  if (v23 != -1) {
    swift_once(&qword_8BBD8, sub_4EDD4);
  }
  uint64_t v24 = qword_8FA48;
  *(void *)(v1 + 336) = sub_6358(&qword_8FBD8);
  sub_4FD60(&qword_8FBE0, &qword_8FBD8);
  *(void *)(v1 + 34_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v25;
  *(void *)(v1 + 31_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v24;
  uint64_t v26 = qword_8BBE0;
  swift_retain(v24);
  if (v26 != -1) {
    swift_once(&qword_8BBE0, sub_4EE04);
  }
  uint64_t v27 = qword_8FA50;
  *(void *)(v1 + 376) = sub_6358(&qword_8FBE8);
  sub_4FD60(&qword_8FBF0, &qword_8FBE8);
  *(void *)(v1 + 38_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v28;
  *(void *)(v1 + 35_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v27;
  uint64_t v29 = qword_8BBF0;
  swift_retain(v27);
  if (v29 != -1) {
    swift_once(&qword_8BBF0, sub_4EE58);
  }
  uint64_t v30 = qword_8FA60;
  *(void *)(v1 + 4sub_14C98(v0 + 16) = type metadata accessor for HealthNLIntent.HealthAppOntologyNode(0LL);
  *(void *)(v1 + 42_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v1 + 39_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v30;
  uint64_t v31 = qword_8BBE8;
  swift_retain(v30);
  if (v31 != -1) {
    swift_once(&qword_8BBE8, sub_4EE30);
  }
  uint64_t v32 = qword_8FA58;
  *(void *)(v1 + 456) = sub_6358(&qword_8FBF8);
  sub_4FD60(&qword_8FC00, &qword_8FBF8);
  *(void *)(v1 + 46_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v33;
  *(void *)(v1 + 43_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v32;
  uint64_t v34 = qword_8BBF8;
  swift_retain(v32);
  if (v34 != -1) {
    swift_once(&qword_8BBF8, sub_4EE8C);
  }
  uint64_t v35 = qword_8FA68;
  *(void *)(v1 + 496) = sub_6358(&qword_8FC08);
  sub_4FD60(&qword_8FC10, &qword_8FC08);
  *(void *)(v1 + 50_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v36;
  *(void *)(v1 + 47_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v35;
  uint64_t v37 = qword_8BC00;
  swift_retain(v35);
  if (v37 != -1) {
    swift_once(&qword_8BC00, sub_4EEBC);
  }
  uint64_t v38 = qword_8FA70;
  *(void *)(v1 + 536) = v12;
  *(void *)(v1 + 54_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v14;
  *(void *)(v1 + 51_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v38;
  uint64_t v39 = qword_8BC08;
  swift_retain(v38);
  if (v39 != -1) {
    swift_once(&qword_8BC08, sub_4EEE4);
  }
  uint64_t v40 = qword_8FA78;
  *(void *)(v1 + 576) = v12;
  *(void *)(v1 + 58_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v14;
  *(void *)(v1 + 55_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v40;
  qword_8FA10 = v1;
  return swift_retain(v40);
}

uint64_t sub_4EC68()
{
  if (qword_8BBA0 != -1) {
    swift_once(&qword_8BBA0, sub_4E718);
  }
  uint64_t v0 = qword_8FA10;
  uint64_t v1 = type metadata accessor for DomainOntologyNode(0LL);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_bridgeObjectRetain();
  uint64_t result = DomainOntologyNode.init(name:childNodes:isInEventTree:)(0x68746C616568LL, 0xE600000000000000LL, v0, 0LL);
  qword_8FA18 = result;
  return result;
}

void sub_4ECF4(uint64_t a1)
{
}

void sub_4ED20(uint64_t a1)
{
}

void sub_4ED4C(uint64_t a1)
{
}

void sub_4ED80(uint64_t a1)
{
}

void sub_4EDAC(uint64_t a1)
{
}

void sub_4EDD4(uint64_t a1)
{
}

void sub_4EE04(uint64_t a1)
{
}

void sub_4EE30(uint64_t a1)
{
}

uint64_t sub_4EE58()
{
  uint64_t v0 = type metadata accessor for HealthNLIntent.HealthAppOntologyNode(0LL);
  sub_14DA4(v0);
  uint64_t result = sub_4FAFC();
  qword_8FA60 = result;
  return result;
}

void sub_4EE8C(uint64_t a1)
{
}

void sub_4EEBC(uint64_t a1)
{
}

void sub_4EEE4(uint64_t a1)
{
}

void sub_4EF0C(uint64_t a1)
{
}

void sub_4EF38(uint64_t a1)
{
}

uint64_t sub_4EF64()
{
  if (qword_8BBC8 != -1) {
    swift_once(&qword_8BBC8, sub_4ED80);
  }
  uint64_t v0 = qword_8FA38;
  uint64_t v1 = type metadata accessor for HealthNLIntent(0LL);
  sub_AFF0((unint64_t *)&qword_8C5F8, type metadata accessor for HealthNLIntent, (uint64_t)&unk_661A8);
  IntentNodeTraversable.value<A>(forNode:)(v0, v1, v2);
  uint64_t result = v11;
  if (v11 && v11 != 1)
  {
    uint64_t v4 = sub_4DFDC();
    if (!v5)
    {
      uint64_t v4 = 0LL;
      uint64_t v5 = 0xE000000000000000LL;
    }

    unsigned __int8 v6 = sub_11B8C(v4, v5) - 14;
    uint64_t v7 = sub_4DFDC();
    if (!v8)
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = 0xE000000000000000LL;
    }

    unsigned __int8 v9 = sub_11B8C(v7, v8);
    if (v9 == 87)
    {
      if (v6 >= 3u) {
        return 2LL;
      }
      return 0LL;
    }

    if (v6 < 3u) {
      return 0LL;
    }
    unsigned __int8 v10 = v9;
    if (v9 > 0xBu) {
      return 2LL;
    }
    uint64_t result = 1LL;
    if (((1 << v10) & 0x821) == 0) {
      return 2LL;
    }
  }

  return result;
}

BOOL sub_4F08C()
{
  uint64_t v0 = sub_6358(&qword_8FC18);
  __chkstk_darwin(v0);
  uint64_t v2 = &v11[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v3 = sub_6358(&qword_8FC60);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned __int8 v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_8BBD8 != -1) {
    swift_once(&qword_8BBD8, sub_4EDD4);
  }
  uint64_t v7 = qword_8FA48;
  uint64_t v8 = type metadata accessor for HealthNLIntent(0LL);
  sub_AFF0((unint64_t *)&qword_8C5F8, type metadata accessor for HealthNLIntent, (uint64_t)&unk_661A8);
  IntentNodeTraversable.value<A>(forNode:)(v7, v8, v9);
  if (sub_63E0((uint64_t)v2, 1LL, v3) == 1)
  {
    sub_10004((uint64_t)v2, &qword_8FC18);
    return 0LL;
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 32))(v6, v2, v3);
    Scalar.unit.getter(&v12, v3);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    return v12 < 7u;
  }

BOOL sub_4F214()
{
  uint64_t v0 = sub_6358(&qword_8FC18);
  __chkstk_darwin(v0);
  uint64_t v2 = &v11[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v3 = sub_6358(&qword_8FC60);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned __int8 v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_8BBD8 != -1) {
    swift_once(&qword_8BBD8, sub_4EDD4);
  }
  uint64_t v7 = qword_8FA48;
  uint64_t v8 = type metadata accessor for HealthNLIntent(0LL);
  sub_AFF0((unint64_t *)&qword_8C5F8, type metadata accessor for HealthNLIntent, (uint64_t)&unk_661A8);
  IntentNodeTraversable.value<A>(forNode:)(v7, v8, v9);
  if (sub_63E0((uint64_t)v2, 1LL, v3) == 1)
  {
    sub_10004((uint64_t)v2, &qword_8FC18);
    return 0LL;
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 32))(v6, v2, v3);
    Scalar.unit.getter(&v12, v3);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    return v12 - 7 < 2;
  }

void sub_4F3A0()
{
  uint64_t v3 = v2 - v1;
  sub_6358(&qword_8FC18);
  sub_6C04();
  __chkstk_darwin(v4);
  sub_6BD8();
  uint64_t v7 = v6 - v5;
  sub_6358(&qword_8FC20);
  sub_6C04();
  __chkstk_darwin(v8);
  sub_6BD8();
  uint64_t v11 = v10 - v9;
  v27[0] = 0LL;
  v27[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(150LL);
  v12._object = (void *)0x800000000006B250LL;
  v12._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v12);
  if (qword_8BBB0 != -1) {
    swift_once(&qword_8BBB0, sub_4ECF4);
  }
  uint64_t v13 = qword_8FA20;
  uint64_t v14 = type metadata accessor for HealthNLIntent(0LL);
  sub_AFF0((unint64_t *)&qword_8C5F8, type metadata accessor for HealthNLIntent, (uint64_t)&unk_661A8);
  uint64_t v16 = v15;
  sub_50870(v13);
  sub_6358(&qword_8FC28);
  sub_508A4();
  unsigned __int16 v17 = sub_50928();
  sub_5096C(v17 | 0x3A6E756F4E2D0000LL);
  if (qword_8BBB8 != -1) {
    swift_once(&qword_8BBB8, sub_4ED20);
  }
  sub_50870(qword_8FA28);
  sub_6358(&qword_8FC30);
  sub_508A4();
  unsigned __int16 v18 = sub_50928();
  sub_50908(v18 | 0x4679646F422D0000LL, 0x7375636Fu);
  if (qword_8BC10 != -1) {
    swift_once(&qword_8BC10, sub_4EF0C);
  }
  sub_50870(qword_8FA80);
  sub_6358(&qword_8FC38);
  sub_50914();
  v19._uint64_t countAndFlagsBits = 0x76697463412D200ALL;
  v19._object = (void *)0xED0000203A797469LL;
  String.append(_:)(v19);
  sub_4DFDC();
  sub_6358(&qword_8F3D0);
  sub_50914();
  sub_10F84();
  uint64_t v20 = sub_50928();
  sub_508DC(v20 & 0xFFFF00000000FFFFLL | 0x636F4C2D0000LL);
  if (qword_8BBC8 != -1) {
    swift_once(&qword_8BBC8, sub_4ED80);
  }
  sub_50870(qword_8FA38);
  sub_6358(&qword_8FC40);
  sub_508A4();
  uint64_t v21 = sub_50928();
  sub_508DC(v21 & 0xFFFF00000000FFFFLL | 0x7275442D0000LL);
  if (qword_8BBD0 != -1) {
    swift_once(&qword_8BBD0, sub_4EDAC);
  }
  sub_50870(qword_8FA40);
  _print_unlocked<A, B>(_:_:)(v11, v27);
  sub_10004(v11, &qword_8FC20);
  sub_50908(0x696E67614D2D200ALL, 0x65647574u);
  if (qword_8BBD8 != -1) {
    swift_once(&qword_8BBD8, sub_4EDD4);
  }
  sub_50870(qword_8FA48);
  _print_unlocked<A, B>(_:_:)(v7, v27);
  sub_10004(v7, &qword_8FC18);
  unsigned __int16 v22 = sub_50928();
  sub_50908(v22 | 0x72656665522D0000LL, 0x65636E65u);
  if (qword_8BBF8 != -1) {
    swift_once(&qword_8BBF8, sub_4EE8C);
  }
  sub_50870(qword_8FA68);
  sub_6358(&qword_8FC48);
  sub_508A4();
  sub_5096C(0x3A65646F4D2D200ALL);
  if (qword_8BBE0 != -1) {
    swift_once(&qword_8BBE0, sub_4EE04);
  }
  sub_50870(qword_8FA50);
  sub_6358(&qword_8FC50);
  sub_508A4();
  v23._uint64_t countAndFlagsBits = 0x203A7070412D200ALL;
  v23._object = (void *)0xE800000000000000LL;
  String.append(_:)(v23);
  if (qword_8BBF0 != -1) {
    swift_once(&qword_8BBF0, sub_4EE58);
  }
  uint64_t v24 = qword_8FA60;
  uint64_t v25 = sub_50954();
  sub_AFF0(&qword_8C918, type metadata accessor for HealthNLIntent.HealthNLApp, (uint64_t)&unk_663C4);
  IntentNodeTraversable.wrappedNonTerminalIntentNode<A>(forOntologyNode:)(v24, v14, v25, v16, v26);
  _print_unlocked<A, B>(_:_:)(v3, v27);
  sub_10004(v3, &qword_8C908);
  sub_10F48();
}

uint64_t sub_4F96C@<X0>(uint64_t a1@<X8>)
{
  return sub_50130((uint64_t (*)(void))&type metadata accessor for NLIntent, a1);
}

uint64_t sub_4F978()
{
  return sub_4E6D8();
}

uint64_t sub_4F990(uint64_t a1)
{
  return NLIntentWrapper.traversableIntentNode.getter(a1, v2);
}

uint64_t sub_4F9E0(uint64_t a1)
{
  return NLIntentWrapper.traversableOntologyNode.getter(a1, v2);
}

void sub_4FA20(uint64_t a1)
{
}

void sub_4FA54(uint64_t a1)
{
}

void sub_4FA7C(uint64_t a1)
{
}

void sub_4FAB0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = sub_6358(a2);
  sub_14DA4(v8);
  *a5 = TerminalOntologyNode.init(name:multicardinal:)(a3, a4, 0LL);
  sub_11120();
}

uint64_t sub_4FAFC()
{
  uint64_t v0 = sub_6358(&qword_8E1C8);
  uint64_t v1 = swift_allocObject(v0, 152LL, 7LL);
  *(_OWORD *)(v1 + sub_14C98(v0 + 16) = xmmword_63690;
  if (qword_8BC20 != -1) {
    swift_once(&qword_8BC20, sub_4FA20);
  }
  uint64_t v2 = qword_96FF8;
  uint64_t v3 = sub_6358(&qword_8FBA8);
  *(void *)(v1 + 56) = v3;
  sub_4FD60(&qword_8FBB0, &qword_8FBA8);
  uint64_t v5 = v4;
  *(void *)(v1 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v4;
  *(void *)(v1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v2;
  uint64_t v6 = qword_8BC28;
  swift_retain(v2);
  if (v6 != -1) {
    swift_once(&qword_8BC28, sub_4FA54);
  }
  uint64_t v7 = qword_97000;
  *(void *)(v1 + 96) = v3;
  *(void *)(v1 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v5;
  *(void *)(v1 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v7;
  uint64_t v8 = qword_8BC30;
  swift_retain(v7);
  if (v8 != -1) {
    swift_once(&qword_8BC30, sub_4FA7C);
  }
  uint64_t v9 = qword_97008;
  *(void *)(v1 + 136) = v3;
  *(void *)(v1 + sub_14C98(v0 + 144) = v5;
  *(void *)(v1 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v9;
  swift_retain(v9);
  return NonTerminalOntologyNode.init(name:multicardinal:childNodes:)(7368801LL, 0xE300000000000000LL, 0LL, v1);
}

void sub_4FC44()
{
}

uint64_t sub_4FC70()
{
  uint64_t v0 = NonTerminalOntologyNode.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_4FC8C()
{
  return type metadata accessor for HealthNLIntent.HealthAppOntologyNode(0LL);
}

uint64_t sub_4FC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4FCA0);
}

uint64_t sub_4FCA0()
{
  uint64_t v2 = sub_2FEE8();
  return sub_63E0(v1, v0, v2);
}

uint64_t sub_4FCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4FCD4);
}

uint64_t sub_4FCD4()
{
  uint64_t v0 = sub_2EC94();
  return sub_8760(v0, v1, v2, v3);
}

uint64_t type metadata accessor for HealthNLIntent(uint64_t a1)
{
  return sub_2DA24(a1, qword_8FB38, (uint64_t)&nominal type descriptor for HealthNLIntent);
}

void sub_4FD08()
{
}

void sub_4FD34()
{
}

void sub_4FD60(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_D958(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for TerminalOntologyNode<A>, v3), a1);
  }

  sub_6590();
}

uint64_t type metadata accessor for HealthNLIntent.HealthNLApp(uint64_t a1)
{
  return sub_2DA24(a1, qword_8FCC0, (uint64_t)&nominal type descriptor for HealthNLIntent.HealthNLApp);
}

uint64_t sub_4FDB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_5095C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a3, a1, v6);
  *(void *)(a3 + *(int *)(sub_50954() + 20)) = a2;
  return swift_retain(a2);
}

void sub_4FE08()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_50954();
  sub_6C04();
  __chkstk_darwin(v4);
  sub_10F8C();
  _StringGuts.grow(_:)(29LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v40 = 0x203A656D616E5BLL;
  unint64_t v41 = 0xE700000000000000LL;
  if (qword_8BC28 != -1) {
    swift_once(&qword_8BC28, sub_4FA54);
  }
  uint64_t v5 = qword_97000;
  sub_AFF0(&qword_8C920, type metadata accessor for HealthNLIntent.HealthNLApp, (uint64_t)&unk_66394);
  uint64_t v7 = v6;
  sub_50880(v5, v3);
  uint64_t v9 = v38;
  unint64_t v8 = v39;
  if (v39)
  {
    unint64_t v36 = 0xD000000000000017LL;
    unint64_t v37 = 0x8000000000068EC0LL;
    unint64_t v10 = sub_10098();
    if ((StringProtocol.contains<A>(_:)(&v36, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0)
    {
      uint64_t v38 = v9;
      unint64_t v39 = v8;
      unint64_t v36 = 0xD000000000000017LL;
      unint64_t v37 = 0x8000000000068EC0LL;
      unint64_t v34 = 0LL;
      unint64_t v35 = 0xE000000000000000LL;
      sub_508C0();
      uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v11,  v12,  v13,  v14,  v15,  v16,  &type metadata for String,  &type metadata for String);
      unint64_t v18 = v17;
      swift_bridgeObjectRelease(v8);
      unint64_t v8 = v18;
    }
  }

  uint64_t v38 = v9;
  unint64_t v39 = v8;
  sub_6358(&qword_8F3D0);
  v19._uint64_t countAndFlagsBits = sub_5098C();
  String.append(_:)(v19);
  sub_50934();
  v20._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v20._object = (void *)0x800000000006B2D0LL;
  String.append(_:)(v20);
  if (qword_8BC30 != -1) {
    swift_once(&qword_8BC30, sub_4FA7C);
  }
  sub_50880(qword_97008, v3);
  uint64_t v22 = v38;
  unint64_t v21 = v39;
  sub_2AEF0(v2, v0, type metadata accessor for HealthNLIntent.HealthNLApp);
  if (!v21)
  {
    IntentNodeTraversable.value<A>(forNode:)(qword_97000, v3, v7);
    uint64_t v22 = v36;
    unint64_t v21 = v37;
    if (v37)
    {
      unint64_t v34 = 0xD000000000000017LL;
      unint64_t v35 = 0x8000000000068EC0LL;
      unint64_t v25 = sub_10098();
      if ((StringProtocol.contains<A>(_:)(&v34, &type metadata for String, &type metadata for String, v25, v25) & 1) != 0)
      {
        unint64_t v36 = v22;
        unint64_t v37 = v21;
        unint64_t v34 = 0xD000000000000017LL;
        unint64_t v35 = 0x8000000000068EC0LL;
        sub_508C0();
        uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v26,  v27,  v28,  v29,  v30,  v31,  &type metadata for String,  &type metadata for String);
        unint64_t v33 = v32;
        sub_50934();
        unint64_t v21 = v33;
      }
    }
  }

  sub_10070(v0, type metadata accessor for HealthNLIntent.HealthNLApp);
  uint64_t v38 = v22;
  unint64_t v39 = v21;
  v23._uint64_t countAndFlagsBits = sub_5098C();
  String.append(_:)(v23);
  sub_C090();
  v24._uint64_t countAndFlagsBits = 93LL;
  v24._object = (void *)0xE100000000000000LL;
  String.append(_:)(v24);
  sub_10F48();
}

uint64_t sub_50124@<X0>(uint64_t a1@<X8>)
{
  return sub_50130((uint64_t (*)(void))&type metadata accessor for NonTerminalIntentNode, a1);
}

uint64_t sub_50130@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, v2, v4);
}

uint64_t sub_50168(uint64_t a1)
{
  return swift_retain(*(void *)(v1 + *(int *)(a1 + 20)));
}

uint64_t sub_5017C(uint64_t a1)
{
  return NonTerminalIntentNodeWrapper.traversableIntentNode.getter(a1, v2);
}

uint64_t sub_501CC(uint64_t a1)
{
  return NonTerminalIntentNodeWrapper.traversableOntologyNode.getter(a1, v2);
}

uint64_t *sub_5020C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for NonTerminalIntentNode(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }

  swift_retain(v9);
  return a1;
}

uint64_t sub_50294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NonTerminalIntentNode(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_release(*(void *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_502D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NonTerminalIntentNode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(a1 + v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t sub_50338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NonTerminalIntentNode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_503A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NonTerminalIntentNode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_50400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NonTerminalIntentNode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7) = *(void *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_50464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_50470);
}

void sub_50470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5095C();
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_63E0(a1, a2, v4);
  }
  else {
    sub_11120();
  }
}

uint64_t sub_504DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_504E8);
}

void sub_504E8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(sub_5095C() - 8) + 84LL) == a3)
  {
    uint64_t v7 = sub_2EC94();
    sub_8760(v7, v8, v9, v10);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    sub_11120();
  }

uint64_t sub_50544(uint64_t a1)
{
  uint64_t result = type metadata accessor for NonTerminalIntentNode(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for WorkoutBodyFocus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for WorkoutBodyFocus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_5068C + 4 * byte_66145[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_506C0 + 4 * byte_66140[v4]))();
}

uint64_t sub_506C0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_506C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x506D0LL);
  }
  return result;
}

uint64_t sub_506DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x506E4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_506E8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_506F0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WorkoutBodyFocus()
{
  return &type metadata for WorkoutBodyFocus;
}

unint64_t sub_50710()
{
  unint64_t result = qword_8FCF8;
  if (!qword_8FCF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_66304, &type metadata for WorkoutBodyFocus);
    atomic_store(result, (unint64_t *)&qword_8FCF8);
  }

  return result;
}

unint64_t sub_50750()
{
  unint64_t result = qword_8FD00;
  if (!qword_8FD00)
  {
    unint64_t result = swift_getWitnessTable(&unk_66274, &type metadata for WorkoutBodyFocus);
    atomic_store(result, (unint64_t *)&qword_8FD00);
  }

  return result;
}

unint64_t sub_50790()
{
  unint64_t result = qword_8FD08;
  if (!qword_8FD08)
  {
    unint64_t result = swift_getWitnessTable(&unk_66344, &type metadata for WorkoutBodyFocus);
    atomic_store(result, (unint64_t *)&qword_8FD08);
  }

  return result;
}

void sub_507CC()
{
}

unint64_t sub_507F8()
{
  unint64_t result = qword_8FD10;
  if (!qword_8FD10)
  {
    unint64_t result = swift_getWitnessTable(&unk_662A4, &type metadata for WorkoutBodyFocus);
    atomic_store(result, (unint64_t *)&qword_8FD10);
  }

  return result;
}

unint64_t sub_50834()
{
  unint64_t result = qword_8FD18;
  if (!qword_8FD18)
  {
    unint64_t result = swift_getWitnessTable(&unk_662CC, &type metadata for WorkoutBodyFocus);
    atomic_store(result, (unint64_t *)&qword_8FD18);
  }

  return result;
}

uint64_t sub_50870(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, v1, v2);
}

uint64_t sub_50880(uint64_t a1, uint64_t a2)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, a2, v2);
}

uint64_t sub_5088C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0LL);
}

void sub_5089C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
}

uint64_t sub_508A4()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 112, v0 - 96);
}

uint64_t sub_508B0(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, v1, v2);
}

  ;
}

void sub_508D4(char a1, uint64_t a2)
{
}

void sub_508DC(uint64_t a1)
{
  v1._uint64_t countAndFlagsBits = a1 & 0xFFFFFFFFFFFFLL | 0x7461000000000000LL;
  v1._object = (void *)0xED0000203A6E6F69LL;
  String.append(_:)(v1);
}

void sub_508F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_50900(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
}

void sub_50908(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = a2 | 0xEE00203A00000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_50914()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 112, v0 - 96);
}

uint64_t sub_50928()
{
  return 8202LL;
}

uint64_t sub_50934()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_50954()
{
  return type metadata accessor for HealthNLIntent.HealthNLApp(0LL);
}

uint64_t sub_5095C()
{
  return type metadata accessor for NonTerminalIntentNode(0LL);
}

void sub_50964(uint64_t a1, uint64_t (*a2)(void))
{
}

void sub_5096C(uint64_t a1)
{
  unint64_t v1 = 0xE900000000000020LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_50978()
{
  *(void *)(v0 + sub_14C98(v0 + 16) = v1;
  *(_BYTE *)(v0 + v2 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 1;
}

uint64_t sub_5098C()
{
  return String.init<A>(describing:)(v1 - 112, v0);
}

_UNKNOWN **sub_50998()
{
  return &off_8FD20;
}

id sub_509A4(uint64_t a1)
{
  return sub_50FF8(a1, (Class *)&OBJC_CLASS___INResumeWorkoutIntent_ptr);
}

id sub_509B0()
{
  uint64_t v2 = type metadata accessor for TerminalElement.Period(0LL);
  uint64_t v61 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_C838();
  uint64_t v60 = v3;
  sub_6358(&qword_8FC20);
  sub_6C04();
  uint64_t v5 = __chkstk_darwin(v4);
  BOOL v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v60 - v8;
  sub_6358(&qword_8FE68);
  sub_6C04();
  __chkstk_darwin(v10);
  sub_11060();
  uint64_t v62 = v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v60 - v13;
  sub_6358(&qword_8FC18);
  sub_6C04();
  uint64_t v16 = __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  Swift::String v20 = (char *)&v60 - v19;
  uint64_t v67 = sub_4DFDC();
  uint64_t v69 = v21;
  uint64_t v22 = sub_4DFDC();
  if (!v23) {
    uint64_t v22 = 0LL;
  }
  unint64_t v24 = 0xE000000000000000LL;
  if (!v23) {
    uint64_t v23 = 0xE000000000000000LL;
  }
  unsigned __int8 v25 = sub_11B8C(v22, v23);
  if (v25 == 87)
  {
    unint64_t v66 = 0LL;
  }

  else
  {
    unint64_t v66 = sub_11B10(v25);
    unint64_t v24 = v26;
  }

  uint64_t v65 = v7;
  uint64_t v63 = v2;
  unint64_t v68 = v24;
  sub_510D4();
  if (qword_8BBD8 != -1) {
    swift_once(&qword_8BBD8, sub_4EDD4);
  }
  uint64_t v27 = qword_8FA48;
  type metadata accessor for HealthNLIntent(0LL);
  sub_17A10((unint64_t *)&qword_8C5F8, type metadata accessor for HealthNLIntent, (uint64_t)&unk_661A8);
  sub_5235C(v27);
  uint64_t v28 = sub_6358(&qword_8FC60);
  sub_523AC((uint64_t)v20, 1LL, v28);
  if (v36)
  {
    sub_6B60((uint64_t)v20, &qword_8FC18);
  }

  else
  {
    Scalar.unit.getter(&v70, v28);
    int v29 = v70;
    (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8LL))(v20, v28);
    if (v29 != 22) {
      sub_47E00(v29);
    }
  }

  sub_5235C(qword_8FA48);
  sub_523AC((uint64_t)v18, 1LL, v28);
  if (v36)
  {
    sub_6B60((uint64_t)v18, &qword_8FC18);
    uint64_t v72 = 0LL;
    char v73 = 1;
  }

  else
  {
    Scalar.value.getter(&v72, v28);
    (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8LL))(v18, v28);
  }

  if (qword_8BBD0 != -1) {
    swift_once(&qword_8BBD0, sub_4EDAC);
  }
  sub_5235C(qword_8FA40);
  uint64_t v30 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  uint64_t v31 = sub_523AC((uint64_t)v9, 1LL, v30);
  if (v36)
  {
    unint64_t v32 = &qword_8FC20;
    uint64_t v33 = (uint64_t)v9;
LABEL_35:
    sub_6B60(v33, v32);
    goto LABEL_36;
  }

  TerminalElement.DateTimeValue.duration.getter(v31);
  unint64_t v34 = *(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8LL);
  v34(v9, v30);
  uint64_t v35 = type metadata accessor for TerminalElement.Duration(0LL);
  uint64_t v37 = sub_523AC((uint64_t)v14, 1LL, v35);
  if (v36)
  {
    unint64_t v32 = &qword_8FE68;
    uint64_t v33 = (uint64_t)v14;
    goto LABEL_35;
  }

  TerminalElement.Duration.duration.getter(v37);
  char v39 = v38;
  sub_52458();
  if ((v39 & 1) == 0)
  {
    uint64_t v40 = (uint64_t)v65;
    sub_5235C(qword_8FA40);
    uint64_t v41 = sub_523AC(v40, 1LL, v30);
    if (v36)
    {
      sub_6B60(v40, &qword_8FC20);
      uint64_t v43 = v63;
      uint64_t v42 = v64;
    }

    else
    {
      uint64_t v44 = v62;
      TerminalElement.DateTimeValue.duration.getter(v41);
      v34((char *)v40, v30);
      uint64_t v46 = sub_523AC(v44, 1LL, v35);
      uint64_t v43 = v63;
      if (!v45)
      {
        uint64_t v42 = v64;
        TerminalElement.Duration.period.getter(v46);
        sub_52458();
        sub_523AC(v42, 1LL, v43);
        if (!v57)
        {
          uint64_t v58 = v60;
          uint64_t v59 = v61;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v60, v42, v43);
          sub_574AC();
          (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v43);
          goto LABEL_36;
        }

        goto LABEL_34;
      }

      sub_6B60(v44, &qword_8FE68);
      uint64_t v42 = v64;
    }

    sub_8760(v42, 1LL, 1LL, v43);
LABEL_34:
    unint64_t v32 = &qword_8FE60;
    uint64_t v33 = v42;
    goto LABEL_35;
  }

LABEL_36:
  if (qword_8BC00 != -1) {
    swift_once(&qword_8BC00, sub_4EEBC);
  }
  sub_5235C(qword_8FA70);
  uint64_t v47 = v70;
  uint64_t v48 = v71;
  if (qword_8BC08 != -1) {
    swift_once(&qword_8BC08, sub_4EEE4);
  }
  sub_5235C(qword_8FA78);
  uint64_t v49 = v70;
  uint64_t v50 = v71;
  id v51 = objc_allocWithZone(&OBJC_CLASS___INWorkoutCustomization);
  id v52 = sub_52278(v47, v48, v49, v50);
  if (qword_8BBF8 != -1) {
    swift_once(&qword_8BBF8, sub_4EE8C);
  }
  sub_5235C(qword_8FA68);
  id v53 = v69;
  if (v69)
  {
    id v54 = objc_allocWithZone(&OBJC_CLASS___INSpeakableString);
    id v53 = sub_521B8(v66, v68, v67, (uint64_t)v53, 0LL, 0LL);
  }

  else
  {
    swift_bridgeObjectRelease(v68);
  }

  id v55 = [objc_allocWithZone(INStartWorkoutIntent) init];

  return v55;
}

id sub_50FD4(uint64_t a1)
{
  return sub_50FF8(a1, (Class *)&OBJC_CLASS___INCancelWorkoutIntent_ptr);
}

id sub_50FE0(uint64_t a1)
{
  return sub_50FF8(a1, (Class *)&OBJC_CLASS___INEndWorkoutIntent_ptr);
}

id sub_50FEC(uint64_t a1)
{
  return sub_50FF8(a1, (Class *)&OBJC_CLASS___INPauseWorkoutIntent_ptr);
}

id sub_50FF8(uint64_t a1, Class *a2)
{
  uint64_t v3 = sub_4DFDC();
  uint64_t v5 = v4;
  uint64_t v6 = sub_4DFDC();
  if (!v7)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0xE000000000000000LL;
  }

  unsigned __int8 v8 = sub_11B8C(v6, v7);
  if (v8 == 87)
  {
    unint64_t v9 = 0LL;
    uint64_t v10 = 0xE000000000000000LL;
  }

  else
  {
    unint64_t v9 = sub_11B10(v8);
    uint64_t v10 = v11;
  }

  if (!v5)
  {
    uint64_t v5 = 0xE000000000000000LL;
    uint64_t v3 = 0LL;
  }

  id v12 = objc_allocWithZone(&OBJC_CLASS___INSpeakableString);
  id v13 = sub_521B8(v9, v10, v3, v5, 0LL, 0LL);
  id v14 = [objc_allocWithZone(*a2) initWithWorkoutName:v13];

  return v14;
}

uint64_t sub_510D4()
{
  uint64_t v0 = sub_4DFDC();
  if (v1) {
    uint64_t v2 = v0;
  }
  else {
    uint64_t v2 = 0LL;
  }
  if (v1) {
    unint64_t v3 = v1;
  }
  else {
    unint64_t v3 = 0xE000000000000000LL;
  }
  char v4 = sub_4EF64();
  if (v4 == 2)
  {
    if (v2 == 1835628403 && v3 == 0xE400000000000000LL)
    {
      swift_bridgeObjectRelease(v3);
      return 2LL;
    }

    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1835628403LL, 0xE400000000000000LL, v2, v3, 0LL);
      swift_bridgeObjectRelease(v3);
      if ((v6 & 1) != 0) {
        return 2LL;
      }
      else {
        return 0LL;
      }
    }
  }

  else
  {
    char v8 = v4;
    swift_bridgeObjectRelease(v3);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

id sub_51194()
{
  return [objc_allocWithZone(INStartWorkoutIntent) init];
}

void sub_511B8()
{
  uint64_t v2 = sub_52404();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_3250C();
  uint64_t v118 = type metadata accessor for UsoEntity_common_WorkoutGoal.DefinedValues(0LL);
  uint64_t v4 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  sub_6BD8();
  uint64_t v7 = v6 - v5;
  uint64_t v116 = sub_6358(&qword_8FE70);
  sub_6C04();
  __chkstk_darwin(v8);
  sub_6BD8();
  uint64_t v11 = v10 - v9;
  sub_6358(&qword_8E688);
  sub_6C04();
  __chkstk_darwin(v12);
  sub_11060();
  uint64_t v117 = v13;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v109 - v16;
  __chkstk_darwin(v15);
  uint64_t v120 = (uint64_t)&v109 - v18;
  sub_6358(&qword_8CD60);
  sub_6C04();
  __chkstk_darwin(v19);
  sub_52380(v20, v109);
  sub_6358(&qword_8CD50);
  sub_6C04();
  __chkstk_darwin(v21);
  sub_C838();
  uint64_t v113 = v22;
  sub_6358(&qword_8CD40);
  sub_6C04();
  __chkstk_darwin(v23);
  sub_C838();
  uint64_t v114 = v24;
  uint64_t v25 = sub_52430();
  if (!v25)
  {
LABEL_4:
    uint64_t v27 = Logger.health.unsafeMutableAddressor(v25);
    sub_8894(v27, (uint64_t)v122);
    uint64_t v28 = sub_52440();
    v29(v28);
    uint64_t v30 = sub_52424();
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v120 = v2;
      uint64_t v33 = sub_88B0(12LL);
      uint64_t v119 = v3;
      unint64_t v34 = (uint8_t *)v33;
      uint64_t v35 = sub_88B0(32LL);
      uint64_t v123 = v35;
      *(_DWORD *)unint64_t v34 = 136315138;
      uint64_t v121 = v1;
      uint64_t v36 = type metadata accessor for UsoTask(0LL);
      sub_52438();
      uint64_t v37 = String.init<A>(describing:)(&v121, v36);
      uint64_t v121 = sub_173E0(v37, v38, &v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
      sub_5236C();
      sub_C090();
      _os_log_impl(&dword_0, v31, v32, "Failed to convert UsoTask to UsoTask_create_common_Workout: %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1LL);
      sub_8870(v35);
      sub_8870((uint64_t)v34);

      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v0, v120);
    }

    else
    {

      sub_5236C();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v2);
    }

    unint64_t v39 = sub_253BC();
    uint64_t v40 = sub_13FF8((uint64_t)&type metadata for IntentConversionError, v39);
    sub_523DC(v40, v41, v42, v43, v44);
    goto LABEL_79;
  }

  uint64_t v26 = v25;
  if (sub_C5D0(v1, 0LL))
  {
    uint64_t v25 = sub_5241C();
    goto LABEL_4;
  }

  uint64_t v110 = v7;
  uint64_t v45 = v4;
  uint64_t v112 = v11;
  uint64_t v46 = sub_52430();
  uint64_t v47 = getWorkoutName(from:fallback:)(v46, 1LL);
  uint64_t v49 = v48;
  swift_release(v46);
  if (v49)
  {
    swift_bridgeObjectRetain_n(v49, 2LL);
    uint64_t v50 = HealthLogName.init(rawValue:)(v47, v49);
    uint64_t v51 = vocabularyIdentifier(for:)(v50);
    if (v52) {
      uint64_t v53 = v51;
    }
    else {
      uint64_t v53 = 0LL;
    }
    if (v52) {
      uint64_t v54 = v52;
    }
    else {
      uint64_t v54 = 0xE000000000000000LL;
    }
    id v55 = objc_allocWithZone(&OBJC_CLASS___INSpeakableString);
    id v111 = sub_5239C(v53, v54, v47, v49);
  }

  else
  {
    id v111 = 0LL;
  }

  uint64_t v56 = (uint64_t)v17;
  uint64_t v57 = sub_52430();
  uint64_t v58 = getAreaType(from:)();
  uint64_t v60 = v59;
  swift_release(v57);
  uint64_t v61 = v118;
  if (v60)
  {
    BOOL v62 = v58 == 1819242352 && v60 == 0xE400000000000000LL;
    if (v62
      || (sub_523EC(1819242352LL, 0xE400000000000000LL) & 1) != 0
      || (v58 == 0x657461776E65706FLL ? (BOOL v63 = v60 == 0xE900000000000072LL) : (BOOL v63 = 0),
          v63 || (sub_523EC(0x657461776E65706FLL, 0xE900000000000072LL) & 1) != 0))
    {
      sub_10F84();
LABEL_32:
      uint64_t v64 = sub_C090();
      goto LABEL_33;
    }
  }

  uint64_t v64 = sub_2B080(v58, v60);
  if ((v65 & 1) == 0 && v64 || v49) {
    goto LABEL_32;
  }
LABEL_33:
  if (dispatch thunk of UsoEntity_common_Workout.goal.getter(v64))
  {
    uint64_t v66 = dispatch thunk of UsoEntity_common_WorkoutGoal.measurement.getter();
    sub_157BC();
    if (v66)
    {
      uint64_t v67 = swift_retain(v66);
      CodeGenBase.entity.getter(v67);
      sub_5244C();
      char v68 = 0;
      goto LABEL_38;
    }
  }

  else
  {
    uint64_t v66 = 0LL;
  }

  uint64_t v49 = 0LL;
  char v68 = 1;
LABEL_38:
  uint64_t v69 = type metadata accessor for UsoEntity_common_Duration(0LL);
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(v122, v49, v69, v69);
  uint64_t v70 = sub_1104C();
  uint64_t v71 = v122[0];
  if (!v122[0]) {
    goto LABEL_48;
  }
  uint64_t v72 = dispatch thunk of UsoEntity_common_Duration.components.getter(v70);
  if (!v72)
  {
LABEL_47:
    sub_1104C();
LABEL_48:
    if ((v68 & 1) != 0) {
      goto LABEL_67;
    }
LABEL_49:
    uint64_t v81 = swift_retain(v66);
    dispatch thunk of UsoEntity_common_Measurement.components.getter(v81);
    sub_5244C();
    if (!v71) {
      goto LABEL_67;
    }
    if ((unint64_t)v71 >> 62)
    {
      if (v71 >= 0) {
        uint64_t v88 = v71 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v88 = v71;
      }
      swift_bridgeObjectRetain();
      uint64_t v89 = _CocoaArrayWrapper.endIndex.getter(v88);
      sub_C090();
      if (v89)
      {
LABEL_52:
        sub_10000(0LL, (v71 & 0xC000000000000001LL) == 0, v71);
        if ((v71 & 0xC000000000000001LL) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v71);
        }
        else {
          swift_retain(*(void *)(v71 + 32));
        }
        uint64_t v82 = sub_C090();
        dispatch thunk of CodeGenListEntry.entry.getter(v122, v82);
        uint64_t v83 = sub_157BC();
        if (v122[0])
        {
          uint64_t v84 = dispatch thunk of UsoEntity_common_MeasurementComponent.unit.getter(v83);
          uint64_t v85 = sub_1104C();
          if (v84)
          {
            uint64_t v86 = v113;
            dispatch thunk of UsoEntity_common_MeasurementUnit.definedValue.getter(v85);
            sub_14DBC();
            uint64_t v87 = sub_52378(v86);
            dispatch thunk of UsoEntity_common_MeasurementUnit.definedValue.getter(v87);
            sub_150EC(v66, v86);
            sub_157BC();
            sub_52378(v86);
          }
        }

        goto LABEL_67;
      }
    }

    else if (*(void *)((char *)&dword_10 + (v71 & 0xFFFFFFFFFFFFFF8LL)))
    {
      goto LABEL_52;
    }

    sub_C090();
    goto LABEL_67;
  }

  uint64_t v73 = v72;
  if (!((unint64_t)v72 >> 62))
  {
LABEL_60:
    sub_1104C();
    sub_10F84();
    if ((v68 & 1) != 0) {
      goto LABEL_67;
    }
    goto LABEL_49;
  }

  if (v72 >= 0) {
    v72 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!_CocoaArrayWrapper.endIndex.getter(v72)) {
    goto LABEL_60;
  }
LABEL_42:
  sub_10000(0LL, (v73 & 0xC000000000000001LL) == 0, v73);
  if ((v73 & 0xC000000000000001LL) != 0)
  {
    uint64_t v74 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v73);
  }

  else
  {
    uint64_t v74 = *(void *)(v73 + 32);
    sub_52438();
  }

  uint64_t v75 = sub_10F84();
  dispatch thunk of CodeGenListEntry.entry.getter(v122, v75);
  uint64_t v76 = swift_release(v74);
  uint64_t v77 = v122[0];
  if (!v122[0]) {
    goto LABEL_47;
  }
  uint64_t v78 = dispatch thunk of UsoEntity_common_DurationComponent.unit.getter(v76);
  uint64_t v79 = swift_release(v77);
  if (!v78) {
    goto LABEL_47;
  }
  uint64_t v80 = v114;
  dispatch thunk of UsoEntity_common_TimeUnit.definedValue.getter(v79);
  sub_14F1C();
  sub_6B60(v80, &qword_8CD40);
  sub_14FF8();
  sub_157BC();
  sub_1104C();
LABEL_67:
  uint64_t v114 = v66;
  uint64_t v90 = swift_retain(v26);
  uint64_t v91 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter(v90);
  uint64_t v92 = sub_5241C();
  if (v91)
  {
    uint64_t v93 = v115;
    dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter(v92);
    sub_155EC();
    sub_157BC();
    sub_6B60(v93, &qword_8CD60);
  }

  uint64_t v94 = v45;
  uint64_t v95 = v120;
  (*(void (**)(uint64_t, void, uint64_t))(v45 + 104))( v120,  enum case for UsoEntity_common_WorkoutGoal.DefinedValues.common_WorkoutGoal_Open(_:),  v61);
  uint64_t v96 = sub_52410(v95, 0LL);
  uint64_t v97 = dispatch thunk of UsoEntity_common_Workout.goal.getter(v96);
  uint64_t v98 = v112;
  if (v97)
  {
    dispatch thunk of UsoEntity_common_WorkoutGoal.definedValue.getter();
    sub_157BC();
  }

  else
  {
    sub_52410(v56, 1LL);
  }

  uint64_t v99 = v117;
  uint64_t v100 = v98 + *(int *)(v116 + 48);
  sub_52314(v95, v98);
  sub_52314(v56, v100);
  sub_523C0(v98);
  if (v62)
  {
    sub_6B60(v56, &qword_8E688);
    sub_6B60(v95, &qword_8E688);
    sub_523C0(v100);
  }

  else
  {
    sub_52314(v98, v99);
    sub_523C0(v100);
    if (v101)
    {
      sub_52378(v56);
      sub_52378(v95);
      uint64_t v102 = sub_52440();
      v103(v102);
    }

    else
    {
      unint64_t v104 = *(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 32);
      uint64_t v117 = v56;
      uint64_t v105 = v110;
      v104(v110, v100, v61);
      sub_17A10( &qword_8FE78,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_WorkoutGoal.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_WorkoutGoal.DefinedValues);
      uint64_t v106 = v99;
      dispatch thunk of static Equatable.== infix(_:_:)(v99, v105, v61);
      uint64_t v107 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
      v107(v105, v61);
      sub_52378(v117);
      sub_52378(v120);
      v107(v106, v61);
    }
  }

  uint64_t v108 = v111;
  sub_52378(v98);
  [objc_allocWithZone(INStartWorkoutIntent) init];
  sub_5241C();

  swift_release(v114);
LABEL_79:
  sub_2544C();
}

id sub_51AA0()
{
  return sub_509B0();
}

void sub_51AB4()
{
}

id sub_51ACC()
{
  return sub_51194();
}

_UNKNOWN **sub_51AE0()
{
  return &off_8FD60;
}

id sub_51AEC(uint64_t a1)
{
  return sub_52058(a1, (Class *)&OBJC_CLASS___INEndWorkoutIntent_ptr);
}

void sub_51AF8(uint64_t a1, uint64_t a2)
{
  sub_51C1C( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for UsoTask_stop_common_Workout,  (void (*)(void *__return_ptr, uint64_t))&dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter,  (Class *)&OBJC_CLASS___INEndWorkoutIntent_ptr,  "Failed to convert UsoTask to UsoTask_stop_common_Workout: %s");
}

uint64_t sub_51B2C@<X0>(uint64_t *a1@<X8>)
{
  return sub_520D0(type metadata accessor for HealthWorkoutEndCATs, (uint64_t)&off_7FE50, a1);
}

id sub_51B40()
{
  return [v0 workoutName];
}

id sub_51B64(uint64_t a1)
{
  return sub_50FF8(a1, (Class *)&OBJC_CLASS___INEndWorkoutIntent_ptr);
}

void sub_51B80(uint64_t a1, uint64_t a2)
{
  sub_523FC( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for UsoTask_stop_common_Workout,  (void (*)(void *__return_ptr, uint64_t))&dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter,  (Class *)&OBJC_CLASS___INEndWorkoutIntent_ptr,  "Failed to convert UsoTask to UsoTask_stop_common_Workout: %s");
}

id sub_51BB4(uint64_t a1)
{
  return sub_52058(a1, (Class *)&OBJC_CLASS___INEndWorkoutIntent_ptr);
}

_UNKNOWN **sub_51BD0()
{
  return &off_8FDA0;
}

id sub_51BDC(uint64_t a1)
{
  return sub_52058(a1, (Class *)&OBJC_CLASS___INPauseWorkoutIntent_ptr);
}

void sub_51BE8(uint64_t a1, uint64_t a2)
{
  sub_51C1C( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for UsoTask_pause_common_Workout,  (void (*)(void *__return_ptr, uint64_t))&dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter,  (Class *)&OBJC_CLASS___INPauseWorkoutIntent_ptr,  "Failed to convert UsoTask to UsoTask_pause_common_Workout: %s");
}

void sub_51C1C( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(void *__return_ptr, uint64_t), Class *a5, const char *a6)
{
  uint64_t v11 = sub_52404();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_3250C();
  static UsoTask_CodegenConverter.convert(task:)(v52);
  if (v52[3])
  {
    uint64_t v13 = a3(0LL);
    uint64_t v14 = swift_dynamicCast(&v53, v52, (char *)&type metadata for Any + 8, v13, 6LL);
    if ((v14 & 1) != 0)
    {
      uint64_t v15 = swift_retain(v53);
      a4(v52, v15);
      sub_1104C();
      uint64_t v16 = getWorkoutName(from:fallback:)(v52[0], 0LL);
      uint64_t v18 = v17;
      sub_157BC();
      if (v18) {
        uint64_t v19 = v16;
      }
      else {
        uint64_t v19 = 0LL;
      }
      uint64_t v20 = 0xE000000000000000LL;
      if (v18) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = 0xE000000000000000LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_52440();
      uint64_t v24 = HealthLogName.init(rawValue:)(v22, v23);
      uint64_t v25 = vocabularyIdentifier(for:)(v24);
      if (v26) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = 0LL;
      }
      if (v26) {
        uint64_t v20 = v26;
      }
      id v28 = objc_allocWithZone(&OBJC_CLASS___INSpeakableString);
      id v29 = sub_5239C(v27, v20, v19, v21);
      [objc_allocWithZone(*a5) initWithWorkoutName:v29];
      sub_1104C();

      goto LABEL_20;
    }
  }

  else
  {
    uint64_t v14 = sub_6B60((uint64_t)v52, &qword_8C600);
  }

  uint64_t v30 = Logger.health.unsafeMutableAddressor(v14);
  sub_8894(v30, (uint64_t)v52);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v6, v30, v11);
  uint64_t v31 = sub_52424();
  os_log_type_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v49 = v11;
    unint64_t v34 = (uint8_t *)sub_88B0(12LL);
    uint64_t v35 = sub_88B0(32LL);
    uint64_t v53 = v35;
    *(_DWORD *)unint64_t v34 = 136315138;
    uint64_t v51 = v7;
    uint64_t v36 = type metadata accessor for UsoTask(0LL);
    sub_52438();
    uint64_t v37 = String.init<A>(describing:)(&v51, v36);
    unint64_t v39 = v38;
    uint64_t v51 = sub_173E0(v37, v38, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52);
    sub_5236C();
    swift_bridgeObjectRelease(v39);
    _os_log_impl(&dword_0, v32, v33, a6, v34, 0xCu);
    swift_arrayDestroy(v35, 1LL);
    sub_8870(v35);
    sub_8870((uint64_t)v34);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v6, v49);
  }

  else
  {

    sub_5236C();
    uint64_t v40 = sub_52440();
    v42(v40, v41);
  }

  unint64_t v43 = sub_253BC();
  uint64_t v44 = sub_13FF8((uint64_t)&type metadata for IntentConversionError, v43);
  sub_523DC(v44, v45, v46, v47, v48);
LABEL_20:
  sub_2544C();
}

uint64_t sub_51EF4@<X0>(uint64_t *a1@<X8>)
{
  return sub_520D0(type metadata accessor for HealthWorkoutPauseCATs, (uint64_t)&off_7FEB0, a1);
}

id sub_51F08(uint64_t a1)
{
  return sub_50FF8(a1, (Class *)&OBJC_CLASS___INPauseWorkoutIntent_ptr);
}

void sub_51F24(uint64_t a1, uint64_t a2)
{
  sub_523FC( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for UsoTask_pause_common_Workout,  (void (*)(void *__return_ptr, uint64_t))&dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter,  (Class *)&OBJC_CLASS___INPauseWorkoutIntent_ptr,  "Failed to convert UsoTask to UsoTask_pause_common_Workout: %s");
}

id sub_51F58(uint64_t a1)
{
  return sub_52058(a1, (Class *)&OBJC_CLASS___INPauseWorkoutIntent_ptr);
}

_UNKNOWN **sub_51F74()
{
  return &off_8FDE0;
}

id sub_51F80(uint64_t a1)
{
  return sub_52058(a1, (Class *)&OBJC_CLASS___INResumeWorkoutIntent_ptr);
}

void sub_51F8C(uint64_t a1, uint64_t a2)
{
  sub_51C1C( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for UsoTask_resume_common_Workout,  (void (*)(void *__return_ptr, uint64_t))&dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter,  (Class *)&OBJC_CLASS___INResumeWorkoutIntent_ptr,  "Failed to convert UsoTask to UsoTask_resume_common_Workout: %s");
}

uint64_t sub_51FC0@<X0>(uint64_t *a1@<X8>)
{
  return sub_520D0(type metadata accessor for HealthWorkoutResumeCATs, (uint64_t)&off_7FE80, a1);
}

id sub_51FD4(uint64_t a1)
{
  return sub_50FF8(a1, (Class *)&OBJC_CLASS___INResumeWorkoutIntent_ptr);
}

void sub_51FF0(uint64_t a1, uint64_t a2)
{
  sub_523FC( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for UsoTask_resume_common_Workout,  (void (*)(void *__return_ptr, uint64_t))&dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter,  (Class *)&OBJC_CLASS___INResumeWorkoutIntent_ptr,  "Failed to convert UsoTask to UsoTask_resume_common_Workout: %s");
}

id sub_52024(uint64_t a1)
{
  return sub_52058(a1, (Class *)&OBJC_CLASS___INResumeWorkoutIntent_ptr);
}

_UNKNOWN **sub_52040()
{
  return &off_8FE20;
}

id sub_5204C(uint64_t a1)
{
  return sub_52058(a1, (Class *)&OBJC_CLASS___INCancelWorkoutIntent_ptr);
}

id sub_52058(uint64_t a1, Class *a2)
{
  return [objc_allocWithZone(*a2) initWithWorkoutName:a1];
}

void sub_52088(uint64_t a1, uint64_t a2)
{
  sub_51C1C( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for UsoTask_cancel_common_Workout,  (void (*)(void *__return_ptr, uint64_t))&dispatch thunk of Uso_VerbTemplate_Reference.reference.getter,  (Class *)&OBJC_CLASS___INCancelWorkoutIntent_ptr,  "Failed to convert UsoTask to UsoTask_cancel_common_Workout: %s");
}

uint64_t sub_520BC@<X0>(uint64_t *a1@<X8>)
{
  return sub_520D0(type metadata accessor for HealthWorkoutCancelCATs, (uint64_t)&off_7FE20, a1);
}

uint64_t sub_520D0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1(0LL);
  static CATOption.defaultMode.getter();
  uint64_t result = CATWrapper.__allocating_init(options:globals:)(v9, 0LL);
  a3[3] = v10;
  a3[4] = a2;
  *a3 = result;
  return result;
}

id sub_5214C(uint64_t a1)
{
  return sub_50FF8(a1, (Class *)&OBJC_CLASS___INCancelWorkoutIntent_ptr);
}

void sub_52168(uint64_t a1, uint64_t a2)
{
  sub_523FC( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for UsoTask_cancel_common_Workout,  (void (*)(void *__return_ptr, uint64_t))&dispatch thunk of Uso_VerbTemplate_Reference.reference.getter,  (Class *)&OBJC_CLASS___INCancelWorkoutIntent_ptr,  "Failed to convert UsoTask to UsoTask_cancel_common_Workout: %s");
}

id sub_5219C(uint64_t a1)
{
  return sub_52058(a1, (Class *)&OBJC_CLASS___INCancelWorkoutIntent_ptr);
}

id sub_521B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }

  else
  {
    NSString v12 = 0LL;
  }

  id v13 = [v6 initWithVocabularyIdentifier:v10 spokenPhrase:v11 pronunciationHint:v12];

  return v13;
}

id sub_52278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v7 = 0LL;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v8 = 0LL;
    goto LABEL_6;
  }

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  id v9 = [v4 initWithFocus:v7 environment:v8];

  return v9;
}

uint64_t sub_52314(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8E688);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_5235C(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, v2, v1);
}

uint64_t sub_5236C()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_52378(uint64_t a1)
{
  return sub_6B60(a1, v1);
}

void sub_52380(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 16sub_4A488(*(void **)(v2 + 152), 0) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

id sub_5239C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_521B8(a1, a2, a3, a4, 0LL, 0LL);
}

uint64_t sub_523AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_63E0(a1, a2, a3);
}

uint64_t sub_523C0(uint64_t a1)
{
  return sub_63E0(a1, 1LL, v1);
}

uint64_t sub_523DC(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a2 = 1;
  return swift_willThrow(a1, a2, a3, a4, a5);
}

uint64_t sub_523EC(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

void sub_523FC( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(void *__return_ptr, uint64_t), Class *a5, const char *a6)
{
}

uint64_t sub_52404()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_52410(uint64_t a1, uint64_t a2)
{
  return sub_8760(a1, a2, 1LL, v2);
}

uint64_t sub_5241C()
{
  return swift_release(v0);
}

uint64_t sub_52424()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t sub_52430()
{
  return getWorkoutEntity(from:)(v0);
}

uint64_t sub_52438()
{
  return swift_retain(v0);
}

uint64_t sub_52440()
{
  return v0;
}

uint64_t sub_5244C()
{
  return swift_release(v0);
}

uint64_t sub_52458()
{
  return v1(v2, v0);
}

uint64_t sub_52464(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8C5F0);
  __chkstk_darwin(v2);
  sub_6BD8();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v38 = v6;
  __chkstk_darwin(v6);
  sub_6BD8();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v36 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_6BD8();
  uint64_t v35 = v12 - v11;
  uint64_t v13 = type metadata accessor for Parse(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_6BD8();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for USOParse(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_6BD8();
  uint64_t v22 = v21 - v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 88))(v17, v13) != enum case for Parse.uso(_:))
  {
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
LABEL_6:
    sub_527F8(v26);
    return 0LL;
  }

  sub_527F8(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 96));
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v22, v17, v18);
  uint64_t v24 = USOParse.userParse.getter(v23);
  uint64_t v25 = Siri_Nlu_External_UserParse.userDialogActs.getter(v24);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v9, v38);
  sub_52814(v25, v5);
  sub_10F84();
  if (sub_63E0(v5, 1LL, v10) == 1)
  {
    sub_527F8(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
    sub_323CC(v5);
    return 0LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v35, v5, v10);
  uint64_t v27 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v35);
  uint64_t v30 = v27;
  uint64_t v31 = v19;
  if ((unint64_t)v27 >> 62)
  {
    if (v27 < 0) {
      uint64_t v33 = v27;
    }
    else {
      uint64_t v33 = v27 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v33);
    sub_10F84();
    if (v34) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  if (!*(void *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_18:
    sub_10F84();
    sub_52804();
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
    goto LABEL_6;
  }

uint64_t sub_5276C(uint64_t a1)
{
  if (!getWorkoutEntity(from:)(a1)) {
    return 0LL;
  }
  uint64_t v1 = dispatch thunk of UsoEntity_common_Workout.workoutClass.getter();
  if (!v1)
  {
    sub_1104C();
    return v1;
  }

  uint64_t v2 = dispatch thunk of UsoEntity_common_WorkoutClass.instructor.getter();
  uint64_t v3 = swift_release(v1);
  if (!v2)
  {
    sub_1104C();
    return 0LL;
  }

  uint64_t v1 = dispatch thunk of UsoEntity_common_WorkoutInstructor.name.getter(v3);
  swift_release(v2);
  sub_1104C();
  return v1;
}

uint64_t sub_527F8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_52804()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_52814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_5282C(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, a2);
}

uint64_t sub_52820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_5282C(a1, (uint64_t (*)(void))&type metadata accessor for DeviceIdiom, a2);
}

uint64_t sub_5282C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = a2(0LL);
  uint64_t v7 = v6;
  if (v5)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))( a3,  a1 + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL)),  v6);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return sub_8760(a3, v8, 1LL, v7);
}

uint64_t sub_528A4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v2 = __CocoaDictionary.startIndex.getter(a1);
    uint64_t v4 = v3;
    char v5 = 1;
  }

  else
  {
    uint64_t v2 = sub_53ED8(a1);
    uint64_t v4 = v6;
    char v5 = v7 & 1;
  }

  uint64_t v8 = sub_53CEC(v1);
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  char v13 = sub_53F80(v2, v4, v5, v8, v9, v11 & 1);
  sub_53FB4(v8, v10, v12);
  if ((v13 & 1) != 0)
  {
    sub_53FB4(v2, v4, v5);
    return 0LL;
  }

  else
  {
    sub_53D3C(v2, v4, v5, v1);
    uint64_t v14 = v15;
    sub_53FB4(v2, v4, v5);
  }

  return v14;
}

uint64_t sub_529A0(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  swift_bridgeObjectRetain(a2);
  uint64_t v5 = 0LL;
  uint64_t v6 = *(void *)&aStart_3[8 * a1];
  uint64_t v7 = qword_667D0[a1];
  while (1)
  {
    uint64_t v8 = *(char *)(a2 + v5 + 32);
    uint64_t v9 = *(void *)&aStart_3[8 * v8];
    uint64_t v10 = qword_667D0[v8];
    if (v9 == v6 && v10 == v7)
    {
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v10);
      uint64_t v14 = v7;
      goto LABEL_13;
    }

    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, qword_667D0[v8], v6, v7, 0LL);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v7);
    if ((v12 & 1) != 0) {
      break;
    }
    if (v2 == ++v5)
    {
      swift_bridgeObjectRelease(a2);
      return 0LL;
    }
  }

  uint64_t v14 = a2;
LABEL_13:
  swift_bridgeObjectRelease(v14);
  return 1LL;
}

uint64_t sub_52A98(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin26SearchForRemoteDevicesFlow_input;
  uint64_t v4 = type metadata accessor for Input(0LL);
  sub_8760(v3, 1LL, 1LL, v4);
  sub_2ADF4(a1, v1 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin26SearchForRemoteDevicesFlow_healthIntent);
  return v1;
}

uint64_t sub_52B04(uint64_t a1)
{
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v4);
  uint64_t v8 = &v13[-v7 - 8];
  uint64_t v9 = type metadata accessor for Input(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(v8, a1, v9);
  sub_8760((uint64_t)v8, 0LL, 1LL, v9);
  sub_53FC0((uint64_t)v8, (uint64_t)v6);
  uint64_t v10 = v1 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin26SearchForRemoteDevicesFlow_input;
  swift_beginAccess(v1 + OBJC_IVAR____TtC24HealthFlowDelegatePlugin26SearchForRemoteDevicesFlow_input, v13, 33LL, 0LL);
  sub_54008((uint64_t)v6, v10);
  swift_endAccess(v13);
  return 1LL;
}

uint64_t sub_52C00()
{
  uint64_t v36 = v2;
  uint64_t v37 = v3;
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  sub_542F4();
  sub_6C04();
  __chkstk_darwin(v7);
  sub_6BD8();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for ExecuteResponse(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_6BD8();
  uint64_t v15 = v14 - v13;
  uint64_t v17 = static os_log_type_t.debug.getter(v16);
  uint64_t v18 = (id *)Log.health.unsafeMutableAddressor(v17);
  id v19 = sub_542C4(v18);
  os_log(_:dso:log:_:_:)(v17, &dword_0, v19, "Running SearchForRemoteDevicesFlow", 34LL, 2LL, _swiftEmptyArrayStorage);

  if (qword_8BBB0 != -1) {
    swift_once(&qword_8BBB0, sub_4ECF4);
  }
  uint64_t v20 = qword_8FA20;
  uint64_t v21 = type metadata accessor for HealthNLIntent(0LL);
  unint64_t v22 = sub_C74C();
  IntentNodeTraversable.value<A>(forNode:)(v20, v21, v22);
  if (LOBYTE(v35[0]) == 9 || (sub_529A0(v35[0], (uint64_t)&off_7F8F8) & 1) == 0)
  {
    sub_2B078();
    static CATOption.defaultMode.getter();
    uint64_t v31 = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
    static Device.current.getter(&v34);
    static AceService.current.getter(&v33);
    DialogFlow.init(catId:wrapper:parameters:snippets:deviceState:aceService:)( 0xD000000000000025LL,  0x8000000000069C40LL,  v31,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage);
    unint64_t v32 = sub_2AE80();
    static ExecuteResponse.complete<A>(next:)(v35, &type metadata for DialogFlow, v32);
    sub_2AEBC((uint64_t)v35);
    v1(v15);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
  }

  else
  {
    ((void (*)(void))type metadata accessor for SeymourRoutingCapability)(0LL);
    uint64_t v23 = (void *)((uint64_t (*)(uint64_t))dispatch thunk of static SeymourRoutingCapability.capabilityDescriptionMatchingSupportStatus(_:))(1LL);
    type metadata accessor for DeviceResolutionService(0LL);
    uint64_t v24 = (void *)static DeviceResolutionService.sharedService.getter();
    uint64_t v25 = sub_6358(&qword_8E9B0);
    uint64_t v26 = sub_1400C(v25);
    *(_OWORD *)(v26 + sub_14C98(v0 + 16) = xmmword_61780;
    *(void *)(v26 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v23;
    v35[0] = v26;
    specialized Array._endMutation()(v26);
    uint64_t v27 = v35[0];
    uint64_t v28 = (void *)sub_1400C((uint64_t)&unk_82F10);
    v28[2] = v1;
    v28[3] = v6;
    v28[4] = v4;
    id v29 = v23;
    swift_retain(v6);
    swift_retain(v4);
    ((void (*)(uint64_t, uint64_t (*)(uint64_t), void *))dispatch thunk of DeviceResolutionService.devicesMatching(capabilityDescriptions:completion:))( v27,  sub_53CE0,  v28);

    swift_bridgeObjectRelease(v27);
    return swift_release(v28);
  }

uint64_t sub_52EB8(uint64_t a1, void (*a2)(_BYTE *))
{
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = &v39[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for ExecuteResponse(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v39[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = (void *)sub_528A4(v11);
  uint64_t v13 = swift_bridgeObjectRelease(a1);
  if (v12)
  {
    uint64_t v14 = static os_log_type_t.debug.getter(v13);
    unsigned int v40 = v14;
    uint64_t v15 = *(void **)Log.health.unsafeMutableAddressor(v14);
    uint64_t v16 = sub_6358(&qword_8BE60);
    uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
    *(_OWORD *)(v17 + sub_14C98(v0 + 16) = xmmword_61030;
    uint64_t v44 = 0LL;
    unint64_t v45 = 0xE000000000000000LL;
    id v18 = v15;
    uint64_t v41 = v8;
    id v19 = v18;
    uint64_t v20 = DeviceUnit.name.getter();
    uint64_t v22 = v21;
    v43[0] = v20;
    v43[1] = v21;
    sub_6358(&qword_8F3D0);
    _print_unlocked<A, B>(_:_:)(v43, &v44);
    swift_bridgeObjectRelease(v22);
    uint64_t v23 = v7;
    uint64_t v24 = a2;
    uint64_t v25 = v44;
    unint64_t v26 = v45;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v17 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v25;
    *(void *)(v17 + 4sub_4A488(*(void **)(v2 + 152), 0) = v26;
    os_log(_:dso:log:_:_:)(v40, &dword_0, v19, "Using device: %@", 16LL, 2LL, v17);

    uint64_t v8 = v41;
    swift_bridgeObjectRelease(v17);
    uint64_t v27 = sub_5325C();
    static ExecuteResponse.complete(next:)(v27);
    swift_release(v27);
    v24(v10);
    uint64_t v7 = v23;
  }

  else
  {
    uint64_t v28 = sub_6358(&qword_8C260);
    uint64_t v29 = swift_allocObject(v28, 80LL, 7LL);
    *(_OWORD *)(v29 + sub_14C98(v0 + 16) = xmmword_61030;
    *(void *)(v29 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 1651664246LL;
    *(void *)(v29 + 4sub_4A488(*(void **)(v2 + 152), 0) = 0xE400000000000000LL;
    if (qword_8BBB0 != -1) {
      swift_once(&qword_8BBB0, sub_4ECF4);
    }
    uint64_t v30 = qword_8FA20;
    uint64_t v31 = type metadata accessor for HealthNLIntent(0LL);
    unint64_t v32 = sub_C74C();
    IntentNodeTraversable.value<A>(forNode:)(v30, v31, v32);
    if (v44 == 9)
    {
      uint64_t v33 = 0LL;
      unint64_t v34 = 0xE000000000000000LL;
    }

    else
    {
      uint64_t v33 = sub_6C64(v44);
      unint64_t v34 = v35;
    }

    *(void *)(v29 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = type metadata accessor for SpeakableString(0LL);
    sub_6B9C((void *)(v29 + 48));
    SpeakableString.init(print:speak:)(v33, v34, 0LL, 0LL);
    type metadata accessor for DialogCATWrapper(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v36 = CATWrapper.__allocating_init(options:globals:)(v6, 0LL);
    static Device.current.getter(v43);
    static AceService.current.getter(v42);
    DialogFlow.init(catId:wrapper:parameters:snippets:deviceState:aceService:)( 0xD000000000000014LL,  0x800000000006B0A0LL,  v36,  v29,  _swiftEmptyArrayStorage);
    unint64_t v37 = sub_2AE80();
    static ExecuteResponse.complete<A>(next:)(&v44, &type metadata for DialogFlow, v37);
    sub_2AEBC((uint64_t)&v44);
    a2(v10);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_5325C()
{
  uint64_t v3 = v2 - v1;
  if (qword_8BBB0 != -1) {
    swift_once(&qword_8BBB0, sub_4ECF4);
  }
  uint64_t v4 = qword_8FA20;
  uint64_t v5 = type metadata accessor for HealthNLIntent(0LL);
  unint64_t v6 = sub_C74C();
  IntentNodeTraversable.value<A>(forNode:)(v4, v5, v6);
  switch(v14[0])
  {
    case 1:
      sub_533F8();
      break;
    case 3:
      sub_537B0();
      break;
    case 2:
      sub_535D4();
      break;
    default:
      sub_2B078();
      static CATOption.defaultMode.getter();
      uint64_t v9 = CATWrapper.__allocating_init(options:globals:)(v3, 0LL);
      static Device.current.getter(v13);
      static AceService.current.getter(v12);
      DialogFlow.init(catId:wrapper:parameters:snippets:deviceState:aceService:)( 0xD000000000000025LL,  0x8000000000069C40LL,  v9,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage);
      unint64_t v10 = sub_2AE80();
      uint64_t v8 = Flow.eraseToAnyFlow()(&type metadata for DialogFlow, v10);
      sub_2AEBC((uint64_t)v14);
      return v8;
  }

  return v7;
}

void sub_533F8()
{
  uint64_t v2 = sub_6358(&qword_8C7C0);
  uint64_t v3 = sub_54104(v2);
  __chkstk_darwin(v3);
  sub_54170();
  __chkstk_darwin(v4);
  sub_542A4();
  sub_6358(&qword_8FFB8);
  sub_6C04();
  __chkstk_darwin(v5);
  sub_540E8();
  sub_54208();
  __chkstk_darwin(v6);
  sub_54154();
  __chkstk_darwin(v7);
  sub_54294();
  sub_540A8(OBJC_IVAR____TtC24HealthFlowDelegatePlugin26SearchForRemoteDevicesFlow_input);
  sub_5426C();
  sub_5421C();
  if (v8)
  {
    uint64_t v9 = sub_54308();
    static os_log_type_t.debug.getter(v9);
    unint64_t v10 = (id *)sub_54300();
    id v11 = sub_542C4(v10);
    sub_54124( (uint64_t)v11,  (uint64_t)&dword_0,  v12,  (uint64_t)"SearchForRemoteDevicesFlow expected to receive Input, didn't find one.");

    sub_2B078();
    sub_54260();
    sub_541C8();
    sub_54254();
    sub_542D4();
    sub_5407C((uint64_t)"healthUnsupported#genericNotSupported");
    unint64_t v13 = sub_2AE80();
    sub_542CC((uint64_t)&type metadata for DialogFlow, v13);
    sub_54248();
  }

  else
  {
    sub_5418C();
    sub_542EC();
    uint64_t v14 = sub_541A0();
    sub_D068(v14);
    uint64_t v15 = sub_6358(&qword_8DBC8);
    sub_542B4(v15);
    uint64_t v16 = type metadata accessor for PauseWorkoutStrategy();
    uint64_t v17 = sub_54278(v16);
    sub_54050(v17);
    uint64_t v18 = sub_6358(&qword_8D510);
    sub_14DA4(v18);
    sub_542E4();
    sub_542DC();
    uint64_t v19 = sub_5413C();
    sub_DC28(v19, (unint64_t *)&qword_8C7A8, &OBJC_CLASS___INPauseWorkoutIntent_ptr);
    uint64_t v20 = sub_54284(OBJC_IVAR____TtC24HealthFlowDelegatePlugin26SearchForRemoteDevicesFlow_healthIntent);
    id v21 = sub_50FEC(v20);
    sub_540C8((uint64_t)v21);
    uint64_t v22 = sub_53C74(&qword_8DBD0, &qword_8DBC8);
    sub_541B8(v22);
    sub_5423C();
    sub_541D8();
    sub_541F8();
  }

  sub_10F48();
}

void sub_535D4()
{
  uint64_t v2 = sub_6358(&qword_8C740);
  uint64_t v3 = sub_54104(v2);
  __chkstk_darwin(v3);
  sub_54170();
  __chkstk_darwin(v4);
  sub_542A4();
  sub_6358(&qword_8FFB8);
  sub_6C04();
  __chkstk_darwin(v5);
  sub_540E8();
  sub_54208();
  __chkstk_darwin(v6);
  sub_54154();
  __chkstk_darwin(v7);
  sub_54294();
  sub_540A8(OBJC_IVAR____TtC24HealthFlowDelegatePlugin26SearchForRemoteDevicesFlow_input);
  sub_5426C();
  sub_5421C();
  if (v8)
  {
    uint64_t v9 = sub_54308();
    static os_log_type_t.debug.getter(v9);
    unint64_t v10 = (id *)sub_54300();
    id v11 = sub_542C4(v10);
    sub_54124( (uint64_t)v11,  (uint64_t)&dword_0,  v12,  (uint64_t)"SearchForRemoteDevicesFlow expected to receive Input, didn't find one.");

    sub_2B078();
    sub_54260();
    sub_541C8();
    sub_54254();
    sub_542D4();
    sub_5407C((uint64_t)"healthUnsupported#genericNotSupported");
    unint64_t v13 = sub_2AE80();
    sub_542CC((uint64_t)&type metadata for DialogFlow, v13);
    sub_54248();
  }

  else
  {
    sub_5418C();
    sub_542EC();
    uint64_t v14 = (void *)sub_541A0();
    sub_CBA4(v14);
    uint64_t v15 = sub_6358(&qword_8DBB8);
    sub_542B4(v15);
    uint64_t v16 = type metadata accessor for EndWorkoutStrategy();
    uint64_t v17 = sub_54278(v16);
    sub_54050(v17);
    uint64_t v18 = sub_6358(&qword_8D478);
    sub_14DA4(v18);
    sub_542E4();
    sub_542DC();
    uint64_t v19 = sub_5413C();
    sub_DC28(v19, (unint64_t *)&qword_8C728, &OBJC_CLASS___INEndWorkoutIntent_ptr);
    uint64_t v20 = sub_54284(OBJC_IVAR____TtC24HealthFlowDelegatePlugin26SearchForRemoteDevicesFlow_healthIntent);
    id v21 = sub_50FE0(v20);
    sub_540C8((uint64_t)v21);
    uint64_t v22 = sub_53C74(&qword_8DBC0, &qword_8DBB8);
    sub_541B8(v22);
    sub_5423C();
    sub_541D8();
    sub_541F8();
  }

  sub_10F48();
}

void sub_537B0()
{
  uint64_t v2 = sub_6358(&qword_8C6B8);
  uint64_t v3 = sub_54104(v2);
  __chkstk_darwin(v3);
  sub_54170();
  __chkstk_darwin(v4);
  sub_542A4();
  sub_6358(&qword_8FFB8);
  sub_6C04();
  __chkstk_darwin(v5);
  sub_540E8();
  sub_54208();
  __chkstk_darwin(v6);
  sub_54154();
  __chkstk_darwin(v7);
  sub_54294();
  sub_540A8(OBJC_IVAR____TtC24HealthFlowDelegatePlugin26SearchForRemoteDevicesFlow_input);
  sub_5426C();
  sub_5421C();
  if (v8)
  {
    uint64_t v9 = sub_54308();
    static os_log_type_t.debug.getter(v9);
    unint64_t v10 = (id *)sub_54300();
    id v11 = sub_542C4(v10);
    sub_54124( (uint64_t)v11,  (uint64_t)&dword_0,  v12,  (uint64_t)"SearchForRemoteDevicesFlow expected to receive Input, didn't find one.");

    sub_2B078();
    sub_54260();
    sub_541C8();
    sub_54254();
    sub_542D4();
    sub_5407C((uint64_t)"healthUnsupported#genericNotSupported");
    unint64_t v13 = sub_2AE80();
    sub_542CC((uint64_t)&type metadata for DialogFlow, v13);
    sub_54248();
  }

  else
  {
    sub_5418C();
    sub_542EC();
    uint64_t v14 = sub_541A0();
    sub_D33C(v14);
    uint64_t v15 = sub_6358(&qword_8DBD8);
    sub_542B4(v15);
    uint64_t v16 = type metadata accessor for ResumeWorkoutStrategy();
    uint64_t v17 = sub_54278(v16);
    sub_54050(v17);
    uint64_t v18 = sub_6358(&qword_8D640);
    sub_14DA4(v18);
    sub_542E4();
    sub_542DC();
    uint64_t v19 = sub_5413C();
    sub_DC28(v19, (unint64_t *)&qword_8BE58, &OBJC_CLASS___INResumeWorkoutIntent_ptr);
    uint64_t v20 = sub_54284(OBJC_IVAR____TtC24HealthFlowDelegatePlugin26SearchForRemoteDevicesFlow_healthIntent);
    id v21 = sub_509A4(v20);
    sub_540C8((uint64_t)v21);
    uint64_t v22 = sub_53C74(&qword_8DBE0, &qword_8DBD8);
    sub_541B8(v22);
    sub_5423C();
    sub_541D8();
    sub_541F8();
  }

  sub_10F48();
}

uint64_t sub_5398C()
{
  return v0;
}

uint64_t sub_539C8()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_539EC()
{
  return type metadata accessor for SearchForRemoteDevicesFlow(0LL);
}

uint64_t type metadata accessor for SearchForRemoteDevicesFlow(uint64_t a1)
{
  uint64_t result = qword_8FEA8;
  if (!qword_8FEA8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchForRemoteDevicesFlow);
  }
  return result;
}

void sub_53A2C(uint64_t a1)
{
  v6[0] = "(";
  uint64_t v2 = type metadata accessor for NLIntent(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_53AC0(319LL);
    if (v5 <= 0x3F)
    {
      _OWORD v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 3LL, v6, a1 + 80);
    }
  }

void sub_53AC0(uint64_t a1)
{
  if (!qword_8FEB8)
  {
    uint64_t v2 = type metadata accessor for Input(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_8FEB8);
    }
  }

uint64_t sub_53B14(uint64_t a1)
{
  return 1LL;
}

uint64_t sub_53B38()
{
  return sub_52C00();
}

uint64_t sub_53B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.execute()[1]);
  *(void *)(v3 + sub_14C98(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1ECE0;
  return Flow.execute()(a1, a2, a3);
}

uint64_t sub_53BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SearchForRemoteDevicesFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_53BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8FFB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_53C34(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8FFB8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_53C74(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_D958(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RCHFlow<A>, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_53CB4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_53CE0(uint64_t a1)
{
  return sub_52EB8(a1, *(void (**)(_BYTE *))(v1 + 16));
}

uint64_t sub_53CEC(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) == 0) {
    return 1LL << *(_BYTE *)(a1 + 32);
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return __CocoaDictionary.endIndex.getter(a1);
}

void sub_53D3C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
      {
LABEL_15:
        id v15 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
        return;
      }

      __break(1u);
LABEL_13:
      if (__CocoaDictionary.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v10 = __CocoaDictionary.Index.key.getter(v6, a2);
        uint64_t v16 = v10;
        uint64_t v11 = type metadata accessor for DeviceUnit(0LL);
        swift_unknownObjectRetain(v10);
        swift_dynamicCast(&v17, &v16, (char *)&type metadata for Swift.AnyObject + 8, v11, 7LL);
        uint64_t v12 = v17;
        swift_unknownObjectRelease(v10);
        unint64_t v6 = sub_5B998((uint64_t)v12);
        char v14 = v13;

        if ((v14 & 1) != 0) {
          goto LABEL_15;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }

uint64_t sub_53ED8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 192LL;
  for (uint64_t i = 12LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_53F80(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) != 0) {
      return static __CocoaDictionary.Index.== infix(_:_:)(result, a2, a4, a5);
    }
  }

  else if ((a6 & 1) == 0)
  {
    if ((_DWORD)a2 == (_DWORD)a5) {
      return result == a4;
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_53FB4(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_53FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8FFB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_54008(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8FFB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_54050(uint64_t a1)
{
  *(void *)(a1 + sub_14C98(v0 + 16) = v2;
  *(void *)(v4 - 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v4 - 328) + 16LL))( v3,  v1,  *(void *)(v4 - 320));
}

uint64_t sub_5407C@<X0>(uint64_t a1@<X8>)
{
  return DialogFlow.init(catId:wrapper:parameters:snippets:deviceState:aceService:)( 0xD000000000000025LL,  (a1 - 32) | 0x8000000000000000LL,  v1,  v2,  v2);
}

uint64_t sub_540A8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 336) = v1;
  return swift_beginAccess(v1 + a1, v2 - 112, 0LL, 0LL);
}

uint64_t sub_540C8(uint64_t a1)
{
  return RCHFlow.__allocating_init(strategy:childFlowFactory:input:intent:)(v3 - 232, v1, v2, a1);
}

uint64_t sub_540E8()
{
  return type metadata accessor for Input(0LL);
}

uint64_t sub_54104(uint64_t result)
{
  *(void *)(v1 - 32sub_4A488(*(void **)(v2 + 152), 0) = result;
  *(void *)(v1 - 328) = *(void *)(result - 8);
  return result;
}

uint64_t sub_54124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_log(_:dso:log:_:_:)(v4, a2, v5, a4, 70LL, 2LL, v6);
}

uint64_t sub_5413C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v2, v0);
}

  ;
}

  ;
}

uint64_t sub_5418C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, v3, v0);
}

uint64_t sub_541A0()
{
  return *(void *)(v0 - 344);
}

uint64_t sub_541B8(uint64_t a1)
{
  return Flow.eraseToAnyFlow()(v1, a1);
}

uint64_t sub_541C8()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t sub_541D8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_541E8(uint64_t a1)
{
  *(void *)(v1 - 34_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a1;
  return type metadata accessor for CATOption(0LL);
}

uint64_t sub_541F8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

  ;
}

uint64_t sub_5421C()
{
  return sub_63E0(v1, 1LL, v0);
}

uint64_t sub_5423C()
{
  return swift_release(v0);
}

uint64_t sub_54248()
{
  return sub_2AEBC(v0 - 232);
}

void *sub_54254()
{
  return static Device.current.getter((void *)(v0 - 272));
}

uint64_t sub_54260()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_5426C()
{
  return sub_53BEC(v0, v1);
}

uint64_t sub_54278(uint64_t a1)
{
  return swift_allocObject(a1, 24LL, 7LL);
}

uint64_t sub_54284@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 - 336) + a1;
}

  ;
}

  ;
}

uint64_t sub_542B4(uint64_t a1)
{
  *(void *)(v1 - 35_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a1;
  return 0LL;
}

id sub_542C4(id *a1)
{
  return *a1;
}

uint64_t sub_542CC(uint64_t a1, uint64_t a2)
{
  return Flow.eraseToAnyFlow()(a1, a2);
}

uint64_t sub_542D4()
{
  return static AceService.current.getter();
}

uint64_t sub_542DC()
{
  return RCHChildFlowFactory.init(producers:)(v0);
}

id sub_542E4()
{
  return v0;
}

uint64_t sub_542EC()
{
  return type metadata accessor for HealthProducers();
}

uint64_t sub_542F4()
{
  return type metadata accessor for CATOption(0LL);
}

uint64_t sub_54300()
{
  return Log.health.unsafeMutableAddressor();
}

uint64_t sub_54308()
{
  return sub_53C34(v0);
}

uint64_t type metadata accessor for WorkoutEndCATPatternsExecutor(uint64_t a1)
{
  return sub_2DA24(a1, (uint64_t *)&unk_8FFC0, (uint64_t)&nominal type descriptor for WorkoutEndCATPatternsExecutor);
}

uint64_t sub_54324(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_97030);
}

void sub_54360()
{
  uint64_t v4 = sub_6358(&qword_8C260);
  uint64_t v5 = (__n128 *)sub_65A4(v4, 176LL);
  sub_2EC14(v5, (__n128)xmmword_63690);
  uint64_t v6 = sub_2EC7C();
  sub_2ED24(v6);
  if (v7)
  {
    sub_10004(v1, &qword_8C258);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }

  else
  {
    uint64_t v8 = sub_2ED5C();
    sub_2ECE8((uint64_t)v8, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_8C250 + 4));
  }

  v5[5].n128_u64[0] = 0x656369766564LL;
  v5[5].n128_u64[1] = 0xE600000000000000LL;
  uint64_t v9 = type metadata accessor for WorkoutEndErrorWithCodeParameters(0LL);
  unint64_t v10 = *(void *)(v0 + *(int *)(v9 + 20));
  if (v10)
  {
    uint64_t v11 = type metadata accessor for SirikitDeviceState(0LL);
    unint64_t v12 = v10;
  }

  else
  {
    unint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    v5[6].n128_u64[1] = 0LL;
    v5[7].n128_u64[0] = 0LL;
  }

  v5[6].n128_u64[0] = v12;
  v5[7].n128_u64[1] = v11;
  v5[8].n128_u64[0] = 0x646F43726F727265LL;
  v5[8].n128_u64[1] = 0xE900000000000065LL;
  uint64_t v13 = v0 + *(int *)(v9 + 24);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    char v14 = 0LL;
    v5[9].n128_u64[1] = 0LL;
    v5[10].n128_u64[0] = 0LL;
    unint64_t v15 = 0LL;
  }

  else
  {
    unint64_t v15 = *(void *)v13;
    char v14 = &type metadata for Double;
  }

  v5[9].n128_u64[0] = v15;
  v5[10].n128_u64[1] = (unint64_t)v14;
  swift_retain(v10);
  sub_2EC84();
}

void sub_544A8()
{
  uint64_t v4 = sub_6358(&qword_8C260);
  uint64_t v5 = (__n128 *)sub_65A4(v4, 176LL);
  sub_2EC14(v5, (__n128)xmmword_63690);
  uint64_t v6 = sub_2EC7C();
  sub_2ED24(v6);
  if (v7)
  {
    sub_10004(v1, &qword_8C258);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }

  else
  {
    uint64_t v8 = sub_2ED5C();
    sub_2ECE8((uint64_t)v8, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_8C250 + 4));
  }

  v5[5].n128_u64[0] = 0x5074737269467369LL;
  v5[5].n128_u64[1] = 0xEF70704179747261LL;
  uint64_t v9 = type metadata accessor for WorkoutEndIntentHandledResponseParameters(0LL);
  v5[6].n128_u8[0] = *(_BYTE *)(v0 + *(int *)(v9 + 20));
  v5[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  strcpy((char *)&v5[8], "isPunchingOut");
  v5[8].n128_u16[7] = -4864;
  unsigned __int8 v10 = *(_BYTE *)(v0 + *(int *)(v9 + 24));
  v5[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[9].n128_u8[0] = v10;
  sub_2EC84();
}

uint64_t sub_545C0(char a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = a5;
  *(void *)(v6 + 96) = a6;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a4;
  *(_BYTE *)(v6 + 83) = a3;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2;
  *(_BYTE *)(v6 + 81) = a1;
  sub_8910();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_545EC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  char v2 = *(_BYTE *)(v0 + 84);
  char v3 = *(_BYTE *)(v0 + 83);
  char v4 = *(_BYTE *)(v0 + 82);
  char v5 = *(_BYTE *)(v0 + 81);
  *(void *)(v0 + sub_14C98(v0 + 16) = 0LL;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(_BYTE *)(v0 + 25) = v5;
  *(_BYTE *)(v0 + 26) = v4;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7) = v3;
  *(_BYTE *)(v0 + 28) = v2;
  *(void *)(v0 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v1;
  *(void *)(v0 + 4sub_4A488(*(void **)(v2 + 152), 0) = 0LL;
  *(_BYTE *)(v0 + 48) = 1;
  *(void *)(v0 + 56) = 0LL;
  *(_BYTE *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(void *)(v0 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
  *(_BYTE *)(v0 + 8sub_4A488(*(void **)(v2 + 152), 0) = 1;
  *(void *)(v0 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_2CB98();
  uint64_t v6 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_2D284;
  unint64_t v7 = sub_54E70();
  return sub_2ECB0(v7, v8, v9, v11);
}

uint64_t sub_54694(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  _OWORD v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for WorkoutEndErrorWithCodeParameters(0LL);
  v3[5] = v4;
  v3[6] = sub_2EC44(v4);
  sub_8910();
  return sub_887C();
}

uint64_t sub_546D8()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  char v3 = (void (*)(uint64_t))v0[2];
  uint64_t v4 = sub_2EC7C();
  sub_8760(v1, 1LL, 1LL, v4);
  *(void *)(v1 + *(int *)(v2 + 20)) = 0LL;
  uint64_t v5 = v1 + *(int *)(v2 + 24);
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  v3(v1);
  sub_54360();
  uint64_t v7 = v6;
  v0[7] = v6;
  uint64_t v8 = (void *)sub_2ECD4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_547A4;
  return v10(0xD000000000000018LL, 0x800000000006B470LL, v7);
}

uint64_t sub_547A4()
{
  if (!v1) {
    *(void *)(v2 + 8sub_4A488(*(void **)(v2 + 152), 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_547EC(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_54828(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_54860(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  _OWORD v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for WorkoutEndUnsupportedSlotValueParameters(0LL);
  v3[5] = sub_2EC44(v4);
  sub_8910();
  return sub_887C();
}

uint64_t sub_548A0()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void (*)(uint64_t))v0[2];
  uint64_t v3 = sub_2EC7C();
  sub_2ECF4(v3);
  v2(v1);
  sub_2CF9C();
  uint64_t v5 = v4;
  v0[6] = v4;
  uint64_t v6 = (void *)sub_2ECD4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_54930;
  return sub_2ECB0(0xD00000000000001FLL, 0x800000000006B450LL, v5, v8);
}

uint64_t sub_54930(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 56);
  *(void *)(*v2 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v1;
  swift_task_dealloc(v5);
  sub_17C4C();
  if (!v1) {
    *(void *)(v4 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a1;
  }
  sub_8910();
  return sub_2EC04(v6, v7, v8);
}

uint64_t sub_54998(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 72), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_549D4(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_54A0C(char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a4;
  *(void *)(v5 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v4;
  *(void *)(v5 + sub_14C98(v0 + 16) = a3;
  *(_BYTE *)(v5 + 8sub_1F08C(v0 + 9) = a2;
  *(_BYTE *)(v5 + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = a1;
  uint64_t v6 = type metadata accessor for WorkoutEndIntentHandledResponseParameters(0LL);
  *(void *)(v5 + 4sub_4A488(*(void **)(v2 + 152), 0) = v6;
  *(void *)(v5 + 48) = sub_2EC44(v6);
  sub_8910();
  return sub_887C();
}

uint64_t sub_54A58()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(_BYTE *)(v0 + 89);
  char v5 = *(_BYTE *)(v0 + 88);
  uint64_t v6 = sub_2EC7C();
  sub_2ECF4(v6);
  *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v5;
  *(_BYTE *)(v1 + *(int *)(v2 + swift_release(*(void *)(v0 + 24)) = v4;
  v3(v1);
  sub_544A8();
  *(void *)(v0 + 56) = v7;
  uint64_t v8 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_54B00;
  unint64_t v9 = sub_54E70();
  return v11(v9);
}

uint64_t sub_54B00()
{
  if (!v1) {
    *(void *)(v2 + 8sub_4A488(*(void **)(v2 + 152), 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_54B48(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_54B84(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_54BBC()
{
  return type metadata accessor for WorkoutEndCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for WorkoutEndIntentHandledResponseParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_901A8, (uint64_t)&nominal type descriptor for WorkoutEndIntentHandledResponseParameters);
}

uint64_t type metadata accessor for WorkoutEndUnsupportedSlotValueParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_90118, (uint64_t)&nominal type descriptor for WorkoutEndUnsupportedSlotValueParameters);
}

uint64_t type metadata accessor for WorkoutEndErrorWithCodeParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_90080, (uint64_t)&nominal type descriptor for WorkoutEndErrorWithCodeParameters);
}

uint64_t sub_54C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_54C0C);
}

void sub_54C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_2ECBC(a1, a2, v4);
  }
  else {
    sub_11120();
  }
}

uint64_t sub_54C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_54C90);
}

void sub_54C90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(sub_6358(&qword_8C258) - 8) + 84LL) == a3)
  {
    uint64_t v8 = sub_2EC94();
    sub_2ECC8(v8, v9, v10, v11);
  }

  else
  {
    *(void *)(v5 + *(int *)(a4 + 20)) = v4;
    sub_11120();
  }

void sub_54CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_54CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_54D08);
}

uint64_t sub_54D08()
{
  uint64_t v2 = sub_6358(&qword_8C258);
  return sub_63E0(v1, v0, v2);
}

uint64_t sub_54D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_54D48);
}

uint64_t sub_54D48()
{
  uint64_t v0 = sub_2EC94();
  return sub_8760(v0, v1, v2, v3);
}

uint64_t sub_54D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_54D80);
}

void sub_54D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_2ECBC(a1, a2, v4);
  }
  else {
    sub_11120();
  }
}

uint64_t sub_54DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_54E08);
}

void sub_54E08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(sub_6358(&qword_8C258) - 8) + 84LL) == a3)
  {
    uint64_t v8 = sub_2EC94();
    sub_2ECC8(v8, v9, v10, v11);
  }

  else
  {
    *(_BYTE *)(v5 + *(int *)(a4 + 20)) = v4 + 1;
    sub_11120();
  }

void sub_54E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t sub_54E70()
{
  return 0xD000000000000020LL;
}

void sub_54E8C(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  id v4 = sub_550F4(a1);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static os_log_type_t.debug.getter(v4);
    uint64_t v7 = *(void **)Log.health.unsafeMutableAddressor(v6);
    uint64_t v8 = sub_6358(&qword_8BE60);
    uint64_t v9 = sub_65A4(v8, 72LL);
    *(_OWORD *)(v9 + sub_14C98(v0 + 16) = xmmword_61030;
    id v10 = v7;
    id v11 = [v5 description];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v9 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v12;
    *(void *)(v9 + 4sub_4A488(*(void **)(v2 + 152), 0) = v14;
    os_log(_:dso:log:_:_:)(v6, &dword_0, v10, "Created INStartWorkoutIntent: %@", 32LL, 2LL, v9);

    swift_bridgeObjectRelease(v9);
    id v28 = v5;
    a3(v5, 0LL);
  }

  else
  {
    uint64_t v15 = type metadata accessor for HealthFlowError();
    sub_65A4(v15, 40LL);
    uint64_t v16 = sub_BD3C(0);
    uint64_t v17 = static os_log_type_t.error.getter(v16);
    uint64_t v18 = *(void **)Log.health.unsafeMutableAddressor(v17);
    uint64_t v19 = sub_6358(&qword_8BE60);
    uint64_t v20 = sub_65A4(v19, 72LL);
    *(_OWORD *)(v20 + sub_14C98(v0 + 16) = xmmword_61030;
    id v21 = v18;
    uint64_t v22 = sub_BC64();
    uint64_t v24 = v23;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_64A0();
    *(void *)(v20 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v22;
    *(void *)(v20 + 4sub_4A488(*(void **)(v2 + 152), 0) = v24;
    os_log(_:dso:log:_:_:)(v17, &dword_0, v21, "StartWorkout- RCHFlow Strategy: %@", 34LL, 2LL, v20);

    swift_bridgeObjectRelease(v20);
    uint64_t v25 = sub_1B7BC( (unint64_t *)&qword_8BE70,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v26 = swift_allocError(v15, v25, 0LL, 0LL);
    *uint64_t v27 = v16;
    swift_retain(v16);
    a3((void *)v26, 1LL);
    swift_errorRelease(v26);
    swift_release(v16);
  }

id sub_550F4(uint64_t a1)
{
  uint64_t v2 = sub_6358(&qword_8BE48);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v30 = (char *)&v30 - v5;
  uint64_t v6 = type metadata accessor for HealthNLIntent(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NLIntent(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20((char *)&v30 - v18, a1, v13);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v19, v13);
  if (v21 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_6598(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 96));
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v19, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
    sub_27F28();
    id v22 = sub_509B0();
    sub_26D70((uint64_t)v8, type metadata accessor for HealthNLIntent);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  else
  {
    uint64_t v23 = a1;
    uint64_t v25 = (uint64_t)v30;
    uint64_t v24 = (uint64_t)v31;
    if (v21 == enum case for Parse.directInvocation(_:))
    {
      v20(v17, v23, v13);
      sub_5A890((uint64_t)v17, v25);
      sub_6398(v25, v24);
      uint64_t v26 = type metadata accessor for DirectInvocationData(0LL);
      if (sub_63E0(v24, 1LL, v26) == 1)
      {
        sub_63EC(v25);
        sub_63EC(v24);
        id v22 = 0LL;
      }

      else
      {
        sub_5AE94();
        sub_63EC(v25);
        sub_26D70(v24, type metadata accessor for DirectInvocationData);
        uint64_t v27 = sub_6358(&qword_8BE50);
        unint64_t v28 = sub_27F28();
        else {
          id v22 = 0LL;
        }
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    }

    else
    {
      sub_6598(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
      return 0LL;
    }
  }

  return v22;
}

uint64_t type metadata accessor for StartWorkoutStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC24HealthFlowDelegatePlugin20StartWorkoutStrategy);
}

uint64_t sub_55410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t started = type metadata accessor for StartWorkoutStrategy();
  return RCHFlowStrategy.makeAnnotatedIntentFromParse(parse:currentIntent:completion:)(a1, a2, a3, a4, started, a6);
}

void sub_55468(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
}

uint64_t sub_55488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t started = type metadata accessor for StartWorkoutStrategy();
  return RCHFlowStrategy.makeParameterMetadata(intent:)(a1, started, a3);
}

uint64_t sub_554C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t started = type metadata accessor for StartWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeAppDoesNotSupportIntentResponse(app:intent:_:)(a1, a2, a3, a4, started, a6);
}

uint64_t sub_55518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t started = type metadata accessor for StartWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeAppNotFoundOnDeviceResponse(app:intent:_:)(a1, a2, a3, a4, started, a6);
}

uint64_t sub_55570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t started = type metadata accessor for StartWorkoutStrategy();
  return ResolveConfirmFlowStrategy.makeDeviceIncompatibleResponse(app:intent:_:)(a1, a2, a3, a4, started, a6);
}

uint64_t sub_555C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t started = type metadata accessor for StartWorkoutStrategy();
  return RouteConfirmIntentResponseFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:_:)( a1,  a2,  a3,  a4,  a5,  started,  a7);
}

uint64_t sub_55630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t started = type metadata accessor for StartWorkoutStrategy();
  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, started, a3);
}

uint64_t sub_55668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t started = type metadata accessor for StartWorkoutStrategy();
  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, started, a4);
}

uint64_t sub_556B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t started = type metadata accessor for StartWorkoutStrategy();
  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, started, a6);
}

uint64_t sub_55710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t started = type metadata accessor for StartWorkoutStrategy();
  return IntentErrorHandling.makeErrorResponse(app:intent:error:_:)(a1, a2, a3, a4, a5, started, a7);
}

uint64_t sub_55778(uint64_t a1, uint64_t a2)
{
  return sub_1B7BC( &qword_902A8,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for StartWorkoutStrategy,  (uint64_t)&unk_669C8);
}

uint64_t sub_557A4(uint64_t a1, uint64_t a2)
{
  return sub_1B7BC( &qword_902B0,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for StartWorkoutStrategy,  (uint64_t)&unk_669F8);
}

uint64_t sub_557D0(uint64_t a1, uint64_t a2)
{
  return sub_1B7BC( &qword_902B8,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for StartWorkoutStrategy,  (uint64_t)&unk_66A40);
}

uint64_t sub_557FC(uint64_t a1, uint64_t a2)
{
  return sub_1B7BC( &qword_902C0,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for StartWorkoutStrategy,  (uint64_t)&unk_66A78);
}

uint64_t type metadata accessor for WorkoutStartCATPatternsExecutor(uint64_t a1)
{
  return sub_2DA24(a1, (uint64_t *)&unk_902C8, (uint64_t)&nominal type descriptor for WorkoutStartCATPatternsExecutor);
}

uint64_t sub_5583C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_97040);
}

void sub_55878()
{
  uint64_t v4 = sub_6358(&qword_8C260);
  uint64_t v5 = (__n128 *)sub_65A4(v4, 176LL);
  sub_2EC14(v5, (__n128)xmmword_63690);
  uint64_t v6 = sub_2EC7C();
  sub_2ED24(v6);
  if (v7)
  {
    sub_10004(v1, &qword_8C258);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }

  else
  {
    uint64_t v8 = sub_2ED5C();
    sub_2ECE8((uint64_t)v8, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_8C250 + 4));
  }

  v5[5].n128_u64[0] = 0x656369766564LL;
  v5[5].n128_u64[1] = 0xE600000000000000LL;
  uint64_t started = type metadata accessor for WorkoutStartErrorWithCodeParameters(0LL);
  unint64_t v10 = *(void *)(v0 + *(int *)(started + 20));
  if (v10)
  {
    uint64_t v11 = type metadata accessor for SirikitDeviceState(0LL);
    unint64_t v12 = v10;
  }

  else
  {
    unint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    v5[6].n128_u64[1] = 0LL;
    v5[7].n128_u64[0] = 0LL;
  }

  v5[6].n128_u64[0] = v12;
  v5[7].n128_u64[1] = v11;
  v5[8].n128_u64[0] = 0x646F43726F727265LL;
  v5[8].n128_u64[1] = 0xE900000000000065LL;
  uint64_t v13 = v0 + *(int *)(started + 24);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    uint64_t v14 = 0LL;
    v5[9].n128_u64[1] = 0LL;
    v5[10].n128_u64[0] = 0LL;
    unint64_t v15 = 0LL;
  }

  else
  {
    unint64_t v15 = *(void *)v13;
    uint64_t v14 = &type metadata for Double;
  }

  v5[9].n128_u64[0] = v15;
  v5[10].n128_u64[1] = (unint64_t)v14;
  swift_retain(v10);
  sub_2EC84();
}

void sub_559C4()
{
  uint64_t v1 = v0;
  sub_6358(&qword_8C258);
  sub_6C04();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  char v7 = (char *)&v15 - v6;
  uint64_t v8 = sub_6358(&qword_8C260);
  uint64_t v9 = sub_65A4(v8, 176LL);
  *(_OWORD *)(v9 + sub_14C98(v0 + 16) = xmmword_63690;
  unint64_t v10 = (void *)(v9 + 48);
  *(void *)(v9 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0x656D614E707061LL;
  *(void *)(v9 + 4sub_4A488(*(void **)(v2 + 152), 0) = 0xE700000000000000LL;
  sub_2D9BC(v1, (uint64_t)v7, &qword_8C258);
  uint64_t v11 = sub_2EC7C();
  if (sub_63E0((uint64_t)v7, 1LL, v11) == 1)
  {
    sub_10004((uint64_t)v7, &qword_8C258);
    *(_OWORD *)unint64_t v10 = 0u;
    *(_OWORD *)(v9 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
  }

  else
  {
    *(void *)(v9 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v11;
    unint64_t v12 = sub_6B9C(v10);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v12, v7, v11);
  }

  *(void *)(v9 + 8sub_4A488(*(void **)(v2 + 152), 0) = 0x6E456E65704F7369LL;
  *(void *)(v9 + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = 0xEB00000000646564LL;
  uint64_t started = type metadata accessor for WorkoutStartUnsupportedSlotValueParameters(0LL);
  *(_BYTE *)(v9 + 96) = *(_BYTE *)(v1 + *(int *)(started + 20));
  *(void *)(v9 + 12sub_4A488(*(void **)(v2 + 152), 0) = &type metadata for Bool;
  *(void *)(v9 + 128) = 1953459315LL;
  *(void *)(v9 + 136) = 0xE400000000000000LL;
  sub_2D9BC(v1 + *(int *)(started + 24), (uint64_t)v5, &qword_8C258);
  if (sub_63E0((uint64_t)v5, 1LL, v11) == 1)
  {
    sub_10004((uint64_t)v5, &qword_8C258);
    *(_OWORD *)(v9 + sub_14C98(v0 + 144) = 0u;
    *(_OWORD *)(v9 + 16sub_4A488(*(void **)(v2 + 152), 0) = 0u;
  }

  else
  {
    *(void *)(v9 + 168) = v11;
    uint64_t v14 = sub_6B9C((void *)(v9 + 144));
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v14, v5, v11);
  }

  sub_2EC84();
}

void sub_55BA8()
{
  uint64_t v4 = sub_6358(&qword_8C260);
  uint64_t v5 = (__n128 *)sub_65A4(v4, 224LL);
  sub_2EC14(v5, (__n128)xmmword_66B20);
  uint64_t v6 = sub_2EC7C();
  sub_2ED24(v6);
  if (v7)
  {
    sub_10004(v1, &qword_8C258);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }

  else
  {
    uint64_t v8 = sub_2ED5C();
    sub_2ECE8((uint64_t)v8, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_8C250 + 4));
  }

  v5[5].n128_u64[0] = 0x5074737269467369LL;
  v5[5].n128_u64[1] = 0xEF70704179747261LL;
  uint64_t started = (int *)type metadata accessor for WorkoutStartIntentHandledResponseParameters(0LL);
  v5[6].n128_u8[0] = *(_BYTE *)(v0 + started[5]);
  v5[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  strcpy((char *)&v5[8], "isPunchingOut");
  v5[8].n128_u16[7] = -4864;
  v5[9].n128_u8[0] = *(_BYTE *)(v0 + started[6]);
  v5[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  strcpy((char *)&v5[11], "isWatchHandoff");
  v5[11].n128_u8[15] = -18;
  unsigned __int8 v10 = *(_BYTE *)(v0 + started[7]);
  v5[13].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[12].n128_u8[0] = v10;
  sub_2EC84();
}

uint64_t sub_55CF8(char a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = a5;
  *(void *)(v6 + 96) = a6;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a4;
  *(_BYTE *)(v6 + 83) = a3;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2;
  *(_BYTE *)(v6 + 81) = a1;
  sub_8910();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_55D24()
{
  uint64_t v1 = *(void *)(v0 + 88);
  char v2 = *(_BYTE *)(v0 + 84);
  char v3 = *(_BYTE *)(v0 + 83);
  char v4 = *(_BYTE *)(v0 + 82);
  char v5 = *(_BYTE *)(v0 + 81);
  *(void *)(v0 + sub_14C98(v0 + 16) = 0LL;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(_BYTE *)(v0 + 25) = v5;
  *(_BYTE *)(v0 + 26) = v4;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7) = v3;
  *(_BYTE *)(v0 + 28) = v2;
  *(void *)(v0 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v1;
  *(void *)(v0 + 4sub_4A488(*(void **)(v2 + 152), 0) = 0LL;
  *(_BYTE *)(v0 + 48) = 1;
  *(void *)(v0 + 56) = 0LL;
  *(_BYTE *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(void *)(v0 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
  *(_BYTE *)(v0 + 8sub_4A488(*(void **)(v2 + 152), 0) = 1;
  *(void *)(v0 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_2CB98();
  uint64_t v6 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_2D284;
  unint64_t v7 = sub_5746C();
  return v9(v7);
}

uint64_t sub_55DD4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  _OWORD v3[4] = v2;
  v3[2] = a1;
  uint64_t started = type metadata accessor for WorkoutStartErrorWithCodeParameters(0LL);
  v3[6] = sub_57448(started);
  sub_8910();
  return sub_887C();
}

uint64_t sub_55E14()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  char v3 = (void (*)(uint64_t))v0[2];
  uint64_t v4 = sub_2EC7C();
  sub_8760(v1, 1LL, 1LL, v4);
  *(void *)(v1 + *(int *)(v2 + 20)) = 0LL;
  uint64_t v5 = v1 + *(int *)(v2 + 24);
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  v3(v1);
  sub_55878();
  uint64_t v7 = v6;
  v0[7] = v6;
  uint64_t v8 = (void *)sub_2ECD4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_55EE0;
  return v10(0xD00000000000001ALL, 0x800000000006B600LL, v7);
}

uint64_t sub_55EE0()
{
  if (!v1) {
    *(void *)(v2 + 8sub_4A488(*(void **)(v2 + 152), 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_55F28(uint64_t a1)
{
  uint64_t v1 = sub_57488();
  return sub_26268(v1, v2);
}

uint64_t sub_55F5C(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_55F94(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a3;
  *(void *)(v4 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v3;
  *(void *)(v4 + sub_14C98(v0 + 16) = a2;
  *(_BYTE *)(v4 + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = a1;
  uint64_t started = type metadata accessor for WorkoutStartUnsupportedSlotValueParameters(0LL);
  *(void *)(v4 + 48) = sub_57448(started);
  sub_8910();
  return sub_887C();
}

uint64_t sub_55FD8()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(_BYTE *)(v0 + 88);
  sub_2EC7C();
  sub_3FBC8(v1);
  sub_3FBC8(v1 + *(int *)(v2 + 24));
  *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v4;
  v3(v1);
  sub_559C4();
  uint64_t v6 = v5;
  *(void *)(v0 + 56) = v5;
  uint64_t v7 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_56094;
  return sub_57460(0xD000000000000021LL, 0x800000000006B5D0LL, v6, v9);
}

uint64_t sub_56094()
{
  if (!v1) {
    *(void *)(v2 + 8sub_4A488(*(void **)(v2 + 152), 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_560DC(uint64_t a1)
{
  uint64_t v1 = sub_57488();
  return sub_26268(v1, v2);
}

uint64_t sub_56110(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_56148(char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a5;
  *(void *)(v6 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v5;
  *(void *)(v6 + sub_14C98(v0 + 16) = a4;
  *(_BYTE *)(v6 + 9sub_4A488(*(void **)(v2 + 152), 0) = a3;
  *(_BYTE *)(v6 + 8sub_1F08C(v0 + 9) = a2;
  *(_BYTE *)(v6 + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = a1;
  uint64_t started = type metadata accessor for WorkoutStartIntentHandledResponseParameters(0LL);
  *(void *)(v6 + 48) = sub_57448(started);
  sub_8910();
  return sub_887C();
}

uint64_t sub_56194()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(_BYTE *)(v0 + 90);
  char v5 = *(_BYTE *)(v0 + 89);
  char v6 = *(_BYTE *)(v0 + 88);
  uint64_t v7 = sub_2EC7C();
  sub_8760(v1, 1LL, 1LL, v7);
  *(_BYTE *)(v1 + v2[5]) = v6;
  *(_BYTE *)(v1 + v2[6]) = v5;
  *(_BYTE *)(v1 + v2[7]) = v4;
  v3(v1);
  sub_55BA8();
  *(void *)(v0 + 56) = v8;
  uint64_t v9 = (void *)sub_2ECD4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v9;
  void *v9 = v0;
  v9[1] = sub_56254;
  unint64_t v10 = sub_5746C();
  return sub_57460(v10, v11, v12, v14);
}

uint64_t sub_56254()
{
  if (!v1) {
    *(void *)(v2 + 8sub_4A488(*(void **)(v2 + 152), 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_5629C(uint64_t a1)
{
  uint64_t v1 = sub_57488();
  return sub_26268(v1, v2);
}

uint64_t sub_562D0(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_56308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_56358(a1, a2, a3);
}

uint64_t sub_56358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_6358((uint64_t *)&off_8C250);
  sub_6C04();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_2D9BC(a1, (uint64_t)v12, (uint64_t *)&off_8C250);
  sub_2ECE8((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_10004(a1, (uint64_t *)&off_8C250);
  return v13;
}

uint64_t sub_5645C()
{
  return type metadata accessor for WorkoutStartCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for WorkoutStartIntentHandledResponseParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_904B8, (uint64_t)&nominal type descriptor for WorkoutStartIntentHandledResponseParameters);
}

uint64_t type metadata accessor for WorkoutStartUnsupportedSlotValueParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_90420, (uint64_t)&nominal type descriptor for WorkoutStartUnsupportedSlotValueParameters);
}

uint64_t type metadata accessor for WorkoutStartErrorWithCodeParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_90388, (uint64_t)&nominal type descriptor for WorkoutStartErrorWithCodeParameters);
}

uint64_t sub_564A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_564AC);
}

void sub_564AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_2ECBC(a1, a2, v4);
  }
  else {
    sub_11120();
  }
}

uint64_t sub_56524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_56530);
}

void sub_56530()
{
  if (*(_DWORD *)(*(void *)(sub_6358(&qword_8C258) - 8) + 84LL) == v3)
  {
    uint64_t v4 = sub_2EC94();
    sub_2ECC8(v4, v5, v6, v7);
  }

  else
  {
    *(void *)(v1 + *(int *)(v2 + 20)) = v0;
    sub_11120();
  }

void sub_56580(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = "\b";
    void v4[2] = &unk_66C10;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

uint64_t *sub_565FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (sub_63E0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_6358(&qword_8C258);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      sub_8760((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (sub_63E0((uint64_t)v12, 1LL, v7))
    {
      uint64_t v13 = sub_6358(&qword_8C258);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      sub_8760((uint64_t)v11, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_56740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t result = sub_63E0(v5, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v5, v4);
  }
  return result;
}

char *sub_567D8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_8760((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_63E0((uint64_t)v10, 1LL, v6))
  {
    uint64_t v11 = sub_6358(&qword_8C258);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    sub_8760((uint64_t)v9, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_568F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_63E0((uint64_t)a1, 1LL, v6);
  int v8 = sub_63E0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      sub_8760((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = sub_63E0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = sub_63E0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_6358(&qword_8C258);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  sub_8760((uint64_t)v12, 0LL, 1LL, v6);
  return a1;
}

char *sub_56AA4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_8760((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_63E0((uint64_t)v10, 1LL, v6))
  {
    uint64_t v11 = sub_6358(&qword_8C258);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    sub_8760((uint64_t)v9, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_56BBC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_63E0((uint64_t)a1, 1LL, v6);
  int v8 = sub_63E0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      sub_8760((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = sub_63E0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = sub_63E0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_6358(&qword_8C258);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  sub_8760((uint64_t)v12, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_56D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_56D78);
}

uint64_t sub_56D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_56D88);
}

void sub_56D8C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = &unk_66C60;
    void v4[2] = v4[0];
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

uint64_t *sub_56E00(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (sub_63E0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_6358(&qword_8C258);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      sub_8760((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v1sub_4A488(*(void **)(v2 + 152), 0) = *((_BYTE *)a2 + v10);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }

  return a1;
}

uint64_t sub_56EEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpeakableString(0LL);
  uint64_t result = sub_63E0(a1, 1LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  }
  return result;
}

void *sub_56F44(void *a1, const void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_8760((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

void *sub_57004(void *a1, const void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_63E0((uint64_t)a1, 1LL, v6);
  int v8 = sub_63E0((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  sub_8760((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

void *sub_57118(void *a1, const void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (sub_63E0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_8760((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

void *sub_571D8(void *a1, const void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = sub_63E0((uint64_t)a1, 1LL, v6);
  int v8 = sub_63E0((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_6358(&qword_8C258);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  sub_8760((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

uint64_t sub_572E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_572F4);
}

void sub_572F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_2ECBC(a1, a2, v4);
  }
  else {
    sub_11120();
  }
}

uint64_t sub_57374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_57380);
}

void sub_57384()
{
  if (*(_DWORD *)(*(void *)(sub_6358(&qword_8C258) - 8) + 84LL) == v3)
  {
    uint64_t v4 = sub_2EC94();
    sub_2ECC8(v4, v5, v6, v7);
  }

  else
  {
    *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v0 + 1;
    sub_11120();
  }

void sub_573D4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = &unk_66C60;
    void v4[2] = &unk_66C60;
    void v4[3] = &unk_66C60;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

uint64_t sub_57448(uint64_t a1)
{
  *(void *)(v1 + 4sub_4A488(*(void **)(v2 + 152), 0) = a1;
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_57460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

unint64_t sub_5746C()
{
  return 0xD000000000000022LL;
}

uint64_t sub_57488()
{
  return *(void *)(v0 + 80);
}

  ;
}

uint64_t sub_574AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TerminalElement.Period(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for TerminalElement.Period.second(_:)) {
    return 6LL;
  }
  if (v6 == enum case for TerminalElement.Period.minute(_:)) {
    return 7LL;
  }
  if (v6 == enum case for TerminalElement.Period.hour(_:)) {
    return 8LL;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0LL;
}

uint64_t type metadata accessor for HealthUnsupportedCATs(uint64_t a1)
{
  uint64_t result = qword_90500;
  if (!qword_90500) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthUnsupportedCATs);
  }
  return result;
}

uint64_t sub_575D0(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_97050);
}

uint64_t sub_5760C()
{
  return type metadata accessor for HealthUnsupportedCATs(0LL);
}

uint64_t type metadata accessor for WorkoutResumeCATPatternsExecutor(uint64_t a1)
{
  return sub_2DA24(a1, (uint64_t *)&unk_90550, (uint64_t)&nominal type descriptor for WorkoutResumeCATPatternsExecutor);
}

uint64_t sub_57628(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_97060);
}

void sub_57664()
{
  uint64_t v4 = sub_6358(&qword_8C260);
  uint64_t v5 = (__n128 *)sub_65A4(v4, 176LL);
  sub_2EC14(v5, (__n128)xmmword_63690);
  uint64_t v6 = sub_2EC7C();
  sub_2ED24(v6);
  if (v7)
  {
    sub_10004(v1, &qword_8C258);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }

  else
  {
    uint64_t v8 = sub_2ED5C();
    sub_2ECE8((uint64_t)v8, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_8C250 + 4));
  }

  v5[5].n128_u64[0] = 0x656369766564LL;
  v5[5].n128_u64[1] = 0xE600000000000000LL;
  uint64_t v9 = type metadata accessor for WorkoutResumeErrorWithCodeParameters(0LL);
  unint64_t v10 = *(void *)(v0 + *(int *)(v9 + 20));
  if (v10)
  {
    uint64_t v11 = type metadata accessor for SirikitDeviceState(0LL);
    unint64_t v12 = v10;
  }

  else
  {
    unint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    v5[6].n128_u64[1] = 0LL;
    v5[7].n128_u64[0] = 0LL;
  }

  v5[6].n128_u64[0] = v12;
  v5[7].n128_u64[1] = v11;
  v5[8].n128_u64[0] = 0x646F43726F727265LL;
  v5[8].n128_u64[1] = 0xE900000000000065LL;
  uint64_t v13 = v0 + *(int *)(v9 + 24);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    int v14 = 0LL;
    v5[9].n128_u64[1] = 0LL;
    v5[10].n128_u64[0] = 0LL;
    unint64_t v15 = 0LL;
  }

  else
  {
    unint64_t v15 = *(void *)v13;
    int v14 = &type metadata for Double;
  }

  v5[9].n128_u64[0] = v15;
  v5[10].n128_u64[1] = (unint64_t)v14;
  swift_retain(v10);
  sub_2EC84();
}

void sub_577AC()
{
  uint64_t v4 = sub_6358(&qword_8C260);
  uint64_t v5 = (__n128 *)sub_65A4(v4, 176LL);
  sub_2EC14(v5, (__n128)xmmword_63690);
  uint64_t v6 = sub_2EC7C();
  sub_2ED24(v6);
  if (v7)
  {
    sub_10004(v1, &qword_8C258);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }

  else
  {
    uint64_t v8 = sub_2ED5C();
    sub_2ECE8((uint64_t)v8, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_8C250 + 4));
  }

  v5[5].n128_u64[0] = 0x5074737269467369LL;
  v5[5].n128_u64[1] = 0xEF70704179747261LL;
  uint64_t v9 = type metadata accessor for WorkoutResumeIntentHandledResponseParameters(0LL);
  v5[6].n128_u8[0] = *(_BYTE *)(v0 + *(int *)(v9 + 20));
  v5[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  strcpy((char *)&v5[8], "isPunchingOut");
  v5[8].n128_u16[7] = -4864;
  unsigned __int8 v10 = *(_BYTE *)(v0 + *(int *)(v9 + 24));
  v5[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[9].n128_u8[0] = v10;
  sub_2EC84();
}

uint64_t sub_578C4(char a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = a5;
  *(void *)(v6 + 96) = a6;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a4;
  *(_BYTE *)(v6 + 83) = a3;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2;
  *(_BYTE *)(v6 + 81) = a1;
  sub_8910();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_578F0()
{
  uint64_t v1 = *(void *)(v0 + 88);
  char v2 = *(_BYTE *)(v0 + 84);
  char v3 = *(_BYTE *)(v0 + 83);
  char v4 = *(_BYTE *)(v0 + 82);
  char v5 = *(_BYTE *)(v0 + 81);
  *(void *)(v0 + sub_14C98(v0 + 16) = 0LL;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(_BYTE *)(v0 + 25) = v5;
  *(_BYTE *)(v0 + 26) = v4;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7) = v3;
  *(_BYTE *)(v0 + 28) = v2;
  *(void *)(v0 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v1;
  *(void *)(v0 + 4sub_4A488(*(void **)(v2 + 152), 0) = 0LL;
  *(_BYTE *)(v0 + 48) = 1;
  *(void *)(v0 + 56) = 0LL;
  *(_BYTE *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(void *)(v0 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
  *(_BYTE *)(v0 + 8sub_4A488(*(void **)(v2 + 152), 0) = 1;
  *(void *)(v0 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_2CB98();
  uint64_t v6 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_2D284;
  unint64_t v7 = sub_2ED08();
  return sub_2ECB0(v7, v8, v9, v11);
}

uint64_t sub_57998(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  _OWORD v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for WorkoutResumeErrorWithCodeParameters(0LL);
  v3[5] = v4;
  v3[6] = sub_2EC44(v4);
  sub_8910();
  return sub_887C();
}

uint64_t sub_579DC()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  char v3 = (void (*)(uint64_t))v0[2];
  uint64_t v4 = sub_2EC7C();
  sub_8760(v1, 1LL, 1LL, v4);
  *(void *)(v1 + *(int *)(v2 + 20)) = 0LL;
  uint64_t v5 = v1 + *(int *)(v2 + 24);
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  v3(v1);
  sub_57664();
  uint64_t v7 = v6;
  v0[7] = v6;
  uint64_t v8 = (void *)sub_2ECD4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_57AA8;
  return v10(0xD00000000000001BLL, 0x800000000006B740LL, v7);
}

uint64_t sub_57AA8()
{
  if (!v1) {
    *(void *)(v2 + 8sub_4A488(*(void **)(v2 + 152), 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_57AF0(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_57B2C(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_57B64(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  _OWORD v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for WorkoutResumeUnsupportedSlotValueParameters(0LL);
  v3[5] = sub_2EC44(v4);
  sub_8910();
  return sub_887C();
}

uint64_t sub_57BA4()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void (*)(uint64_t))v0[2];
  uint64_t v3 = sub_2EC7C();
  sub_2ECF4(v3);
  v2(v1);
  sub_2CF9C();
  uint64_t v5 = v4;
  v0[6] = v4;
  uint64_t v6 = (void *)sub_2ECD4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_57C34;
  return sub_2ECB0(0xD000000000000022LL, 0x800000000006B710LL, v5, v8);
}

uint64_t sub_57C34(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 56);
  *(void *)(*v2 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v1;
  swift_task_dealloc(v5);
  sub_17C4C();
  if (!v1) {
    *(void *)(v4 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a1;
  }
  sub_8910();
  return sub_2EC04(v6, v7, v8);
}

uint64_t sub_57C9C(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 72), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_57CD8(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_57D10(char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a4;
  *(void *)(v5 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v4;
  *(void *)(v5 + sub_14C98(v0 + 16) = a3;
  *(_BYTE *)(v5 + 8sub_1F08C(v0 + 9) = a2;
  *(_BYTE *)(v5 + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = a1;
  uint64_t v6 = type metadata accessor for WorkoutResumeIntentHandledResponseParameters(0LL);
  *(void *)(v5 + 4sub_4A488(*(void **)(v2 + 152), 0) = v6;
  *(void *)(v5 + 48) = sub_2EC44(v6);
  sub_8910();
  return sub_887C();
}

uint64_t sub_57D5C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(_BYTE *)(v0 + 89);
  char v5 = *(_BYTE *)(v0 + 88);
  uint64_t v6 = sub_2EC7C();
  sub_2ECF4(v6);
  *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v5;
  *(_BYTE *)(v1 + *(int *)(v2 + swift_release(*(void *)(v0 + 24)) = v4;
  v3(v1);
  sub_577AC();
  *(void *)(v0 + 56) = v7;
  uint64_t v8 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_57E04;
  unint64_t v9 = sub_2ED08();
  return v11(v9);
}

uint64_t sub_57E04()
{
  if (!v1) {
    *(void *)(v2 + 8sub_4A488(*(void **)(v2 + 152), 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_57E4C(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_57E88(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_57EC0()
{
  return type metadata accessor for WorkoutResumeCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for WorkoutResumeIntentHandledResponseParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_90738, (uint64_t)&nominal type descriptor for WorkoutResumeIntentHandledResponseParameters);
}

uint64_t type metadata accessor for WorkoutResumeUnsupportedSlotValueParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_906A8, (uint64_t)&nominal type descriptor for WorkoutResumeUnsupportedSlotValueParameters);
}

uint64_t type metadata accessor for WorkoutResumeErrorWithCodeParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_90610, (uint64_t)&nominal type descriptor for WorkoutResumeErrorWithCodeParameters);
}

uint64_t sub_57F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_57F10);
}

void sub_57F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_2ECBC(a1, a2, v4);
  }
  else {
    sub_11120();
  }
}

uint64_t sub_57F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_57F94);
}

void sub_57F94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(sub_6358(&qword_8C258) - 8) + 84LL) == a3)
  {
    uint64_t v8 = sub_2EC94();
    sub_2ECC8(v8, v9, v10, v11);
  }

  else
  {
    *(void *)(v5 + *(int *)(a4 + 20)) = v4;
    sub_11120();
  }

void sub_57FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_58000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5800C);
}

uint64_t sub_5800C()
{
  uint64_t v2 = sub_6358(&qword_8C258);
  return sub_63E0(v1, v0, v2);
}

uint64_t sub_58040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5804C);
}

uint64_t sub_5804C()
{
  uint64_t v0 = sub_2EC94();
  return sub_8760(v0, v1, v2, v3);
}

uint64_t sub_58078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_58084);
}

void sub_58084(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_2ECBC(a1, a2, v4);
  }
  else {
    sub_11120();
  }
}

uint64_t sub_58100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5810C);
}

void sub_5810C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(sub_6358(&qword_8C258) - 8) + 84LL) == a3)
  {
    uint64_t v8 = sub_2EC94();
    sub_2ECC8(v8, v9, v10, v11);
  }

  else
  {
    *(_BYTE *)(v5 + *(int *)(a4 + 20)) = v4 + 1;
    sub_11120();
  }

void sub_58164(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t type metadata accessor for WorkoutsConfirmSlotStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WorkoutsConfirmSlotStrategy);
}

void sub_58180( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v148 = a8;
  id v133 = a2;
  uint64_t v146 = a9;
  sub_6358(&qword_8D920);
  sub_6C04();
  __chkstk_darwin(v12);
  sub_C838();
  uint64_t v134 = v13;
  uint64_t v143 = a10;
  uint64_t v138 = *(void *)(a10 + 16);
  uint64_t v14 = type metadata accessor for NeedsConfirmationAnswer(255LL);
  uint64_t v15 = sub_D958(&qword_8CB40);
  uint64_t v147 = type metadata accessor for Result(0LL, v14, v15, &protocol self-conformance witness table for Error);
  uint64_t v144 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v145 = (char *)v128 - v16;
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = *(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8);
  __chkstk_darwin(v17);
  sub_11060();
  uint64_t v149 = v19;
  sub_11054();
  __chkstk_darwin(v20);
  uint64_t v140 = (char *)v128 - v21;
  sub_11054();
  __chkstk_darwin(v22);
  uint64_t v137 = (char *)v128 - v23;
  sub_11054();
  __chkstk_darwin(v24);
  uint64_t v139 = (uint64_t)v128 - v25;
  uint64_t v141 = type metadata accessor for HealthNLIntent(0LL);
  sub_6C04();
  __chkstk_darwin(v26);
  uint64_t v27 = sub_59504();
  uint64_t v28 = type metadata accessor for Parse(v27);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  sub_46698();
  uint64_t v30 = type metadata accessor for NLIntent(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_11060();
  uint64_t v136 = v32;
  sub_11054();
  __chkstk_darwin(v33);
  uint64_t v142 = (void (*)(void, void))((char *)v128 - v34);
  sub_11054();
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v38 = (char *)v128 - v37;
  Input.parse.getter(v36);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v29 + 88))(v11, v28) != enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_5955C(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
    char v65 = (void (*)(void, void))sub_14048();
    sub_1400C((uint64_t)v65);
    uint64_t v66 = sub_BD3C(0);
    uint64_t v67 = Logger.health.unsafeMutableAddressor(v66);
    sub_8894(v67, (uint64_t)v152);
    v18[2](v149, v67, v17);
    uint64_t v68 = sub_14068(v66);
    uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
    os_log_type_t v70 = static os_log_type_t.error.getter(v69);
    uint64_t v71 = v17;
    uint64_t v72 = v18;
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v73 = sub_88B0(22LL);
      uint64_t v74 = (void *)sub_88B0(8LL);
      uint64_t v75 = sub_88B0(32LL);
      uint64_t v131 = v71;
      uint64_t v142 = v65;
      uint64_t v76 = v75;
      uint64_t v150 = (void (*)(void, void))v75;
      *(_DWORD *)uint64_t v73 = 136315394;
      uint64_t v77 = sub_19A08(v143);
      unint64_t v79 = v78;
      uint64_t v151 = sub_59544(v77, v78);
      sub_14050((uint64_t)&v151, (uint64_t)v152);
      swift_bridgeObjectRelease(v79);
      *(_WORD *)(v73 + 1_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 2112;
      uint64_t v80 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      uint64_t v81 = sub_13FF8((uint64_t)v142, v80);
      sub_59534(v81, v82);
      uint64_t v83 = _swift_stdlib_bridgeErrorToNSError(v79);
      uint64_t v151 = v83;
      sub_14050((uint64_t)&v151, (uint64_t)v152);
      *uint64_t v74 = v83;
      sub_B364();
      sub_14080(&dword_0, v69, v70, "%s Error: %@", (uint8_t *)v73);
      sub_6358(&qword_8C360);
      sub_B334((uint64_t)v74);
      sub_8870((uint64_t)v74);
      sub_B334(v76);
      uint64_t v84 = v76;
      char v65 = v142;
      sub_8870(v84);
      sub_8870(v73);

      ((void (*)(uint64_t, uint64_t))v72[1])(v149, v131);
    }

    else
    {

      sub_B364();
      ((void (*)(uint64_t, uint64_t))v18[1])(v149, v17);
    }

    uint64_t v104 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v105 = sub_13FF8((uint64_t)v65, v104);
    sub_594BC(v105, v106);
    swift_retain(v66);
    sub_594B0();
    swift_release(v66);
    uint64_t v107 = sub_594DC();
    goto LABEL_20;
  }

  sub_5955C(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 96));
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v38, v11, v30);
  uint64_t v132 = v31;
  unint64_t v39 = *(void (**)(uint64_t, char *, uint64_t))(v31 + 16);
  uint64_t v149 = v30;
  v39(v10, v38, v30);
  if (qword_8BBE8 != -1) {
    swift_once(&qword_8BBE8, sub_4EE30);
  }
  uint64_t v40 = qword_8FA58;
  uint64_t v41 = sub_17A10((unint64_t *)&qword_8C5F8, type metadata accessor for HealthNLIntent, (uint64_t)&unk_661A8);
  uint64_t v42 = v141;
  uint64_t v141 = v10;
  uint64_t v43 = IntentNodeTraversable.value<A>(forNode:)(v40, v42, v41);
  uint64_t v44 = v17;
  unint64_t v45 = v142;
  int v135 = v38;
  if (v152[0] != 3)
  {
    int v129 = v152[0];
    uint64_t v85 = Logger.health.unsafeMutableAddressor(v43);
    sub_8894(v85, (uint64_t)v152);
    uint64_t v140 = (char *)v18;
    uint64_t v86 = v18[2];
    uint64_t v87 = v139;
    uint64_t v130 = v85;
    sub_59568(v139);
    uint64_t v88 = ((uint64_t (*)(void (*)(void, void), char *, uint64_t))v39)(v45, v38, v149);
    uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
    os_log_type_t v90 = static os_log_type_t.debug.getter(v89);
    BOOL v91 = os_log_type_enabled(v89, v90);
    uint64_t v92 = v132;
    if (v91)
    {
      uint64_t v93 = v45;
      uint64_t v94 = (uint8_t *)sub_88B0(12LL);
      uint64_t v95 = sub_88B0(32LL);
      uint64_t v150 = (void (*)(void, void))v95;
      uint64_t v96 = v149;
      uint64_t v131 = v44;
      v128[2] = v86;
      *(_DWORD *)uint64_t v94 = 136315138;
      v128[1] = v94 + 4;
      uint64_t v97 = sub_17A10( &qword_8D050,  (uint64_t (*)(uint64_t))&type metadata accessor for NLIntent,  (uint64_t)&protocol conformance descriptor for NLIntent);
      uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter(v96, v97);
      uint64_t v151 = sub_59544(v98, v99);
      uint64_t v100 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152);
      sub_10F84();
      uint64_t v142 = *(void (**)(void, void))(v92 + 8);
      v142(v93, v96);
      _os_log_impl(&dword_0, v89, v90, "Confirmation NL: %s", v94, 0xCu);
      sub_B334(v95);
      sub_8870(v95);
      sub_8870((uint64_t)v94);

      uint64_t v101 = v139;
      uint64_t v102 = (char *)*((void *)v140 + 1);
      uint64_t v103 = v100;
    }

    else
    {
      uint64_t v142 = *(void (**)(void, void))(v132 + 8);
      v142(v45, v149);

      uint64_t v102 = (char *)*((void *)v140 + 1);
      uint64_t v101 = v87;
      uint64_t v103 = v17;
    }

    uint64_t v140 = v102;
    ((void (*)(uint64_t, uint64_t))v102)(v101, v103);
    uint64_t v116 = v138;
    uint64_t v117 = v141;
    uint64_t v118 = v141;
    sub_31C78(v138, v138, *(void *)(v143 + 32));
    uint64_t v120 = v119;
    uint64_t v121 = *(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(type metadata accessor for ConfirmationResponse(0LL)
                                                                          - 8)
                                                              + 104LL);
    if (v129)
    {
      sub_594F0(enum case for ConfirmationResponse.rejected(_:), v121);
      sub_59520();
      id v122 = v133;
      uint64_t v123 = v145;
      NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)(v118, v122, v116);
      swift_storeEnumTagMultiPayload(v123, v147, 0LL);
      sub_594B0();

      uint64_t v124 = sub_59574();
    }

    else
    {
      sub_594F0(enum case for ConfirmationResponse.confirmed(_:), v121);
      sub_59520();
      id v126 = v120;
      uint64_t v127 = v145;
      NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)(v118, v126, v116);
      swift_storeEnumTagMultiPayload(v127, v147, 0LL);
      sub_594B0();

      uint64_t v124 = sub_594DC();
    }

    v125(v124);
    sub_C594(v117);
    uint64_t v107 = (uint64_t)v135;
    uint64_t v108 = v149;
    uint64_t v109 = v142;
LABEL_20:
    v109(v107, v108);
    goto LABEL_21;
  }

  uint64_t v46 = sub_14048();
  sub_1400C(v46);
  uint64_t v47 = sub_BD3C(3u);
  uint64_t v48 = Logger.health.unsafeMutableAddressor(v47);
  sub_8894(v48, (uint64_t)v152);
  uint64_t v49 = v140;
  v18[2]((uint64_t)v140, v48, v44);
  uint64_t v50 = sub_14068(v47);
  uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v52 = static os_log_type_t.error.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = sub_88B0(22LL);
    uint64_t v131 = v44;
    uint64_t v54 = v53;
    id v55 = (void *)sub_88B0(8LL);
    uint64_t v142 = (void (*)(void, void))sub_88B0(32LL);
    uint64_t v150 = v142;
    *(_DWORD *)uint64_t v54 = 136315394;
    uint64_t v56 = sub_19A08(v143);
    uint64_t v57 = v18;
    unint64_t v59 = v58;
    uint64_t v151 = sub_59544(v56, v58);
    sub_14050((uint64_t)&v151, (uint64_t)v152);
    swift_bridgeObjectRelease(v59);
    *(_WORD *)(v54 + 1_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 2112;
    uint64_t v60 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v61 = sub_13FF8(v46, v60);
    sub_59534(v61, v62);
    uint64_t v63 = _swift_stdlib_bridgeErrorToNSError(v59);
    uint64_t v151 = v63;
    sub_14050((uint64_t)&v151, (uint64_t)v152);
    *id v55 = v63;
    sub_B364();
    sub_14080(&dword_0, v51, v52, "%s Error: %@", (uint8_t *)v54);
    sub_6358(&qword_8C360);
    sub_B334((uint64_t)v55);
    sub_8870((uint64_t)v55);
    uint64_t v64 = v142;
    sub_B334((uint64_t)v142);
    sub_8870((uint64_t)v64);
    sub_8870(v54);

    ((void (*)(char *, uint64_t))v57[1])(v140, v131);
  }

  else
  {

    sub_B364();
    ((void (*)(char *, uint64_t))v18[1])(v49, v44);
  }

  uint64_t v110 = v149;
  uint64_t v111 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
  uint64_t v112 = sub_13FF8(v46, v111);
  sub_594BC(v112, v113);
  swift_retain(v47);
  sub_594B0();
  swift_release(v47);
  uint64_t v114 = sub_594DC();
  v115(v114);
  sub_C594(v141);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v135, v110);
LABEL_21:
  sub_10F48();
}

void sub_58DE8( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void *), uint64_t a9, uint64_t a10)
{
  uint64_t v65 = a10;
  uint64_t v67 = a9;
  uint64_t v68 = a8;
  uint64_t v66 = type metadata accessor for Logger(0LL);
  uint64_t v64 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  sub_C838();
  uint64_t v63 = v15;
  sub_6358(&qword_8C258);
  sub_6C04();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v61 - v20;
  sub_6358((uint64_t *)&unk_8F3A0);
  sub_6C04();
  __chkstk_darwin(v22);
  uint64_t v23 = sub_59504();
  uint64_t v24 = type metadata accessor for NLContextUpdate(v23);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_46698();
  swift_bridgeObjectRetain();
  v75._uint64_t countAndFlagsBits = a3;
  v75._object = a4;
  unint64_t v26 = sub_3E500(v75);
  if (v26 == 3)
  {
    uint64_t v27 = sub_14048();
    sub_1400C(v27);
    uint64_t v28 = sub_BD3C(2u);
    uint64_t v29 = Logger.health.unsafeMutableAddressor(v28);
    sub_8894(v29, (uint64_t)v74);
    uint64_t v31 = v63;
    uint64_t v30 = v64;
    (*(void (**)(void *, uint64_t, uint64_t))(v64 + 16))(v63, v29, v66);
    uint64_t v32 = sub_14068(v28);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = sub_88B0(22LL);
      uint64_t v36 = sub_88B0(8LL);
      uint64_t v62 = v27;
      uint64_t v37 = (void *)v36;
      uint64_t v61 = sub_88B0(32LL);
      v70[0] = v61;
      *(_DWORD *)uint64_t v35 = 136315394;
      uint64_t v38 = sub_19A08(v65);
      unint64_t v40 = v39;
      uint64_t v69 = sub_59544(v38, v39);
      sub_5954C();
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v35 + 1_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 2112;
      uint64_t v41 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      uint64_t v42 = sub_13FF8(v62, v41);
      uint64_t *v43 = v28;
      swift_retain(v28);
      uint64_t v44 = _swift_stdlib_bridgeErrorToNSError(v42);
      uint64_t v69 = v44;
      sub_5954C();
      *uint64_t v37 = v44;
      sub_59594();
      sub_14080(&dword_0, v33, v34, "%s Error: %@", (uint8_t *)v35);
      sub_6358(&qword_8C360);
      sub_B334((uint64_t)v37);
      uint64_t v45 = (uint64_t)v37;
      uint64_t v27 = v62;
      sub_8870(v45);
      uint64_t v46 = v61;
      sub_B334(v61);
      sub_8870(v46);
      sub_8870(v35);
    }

    else
    {

      sub_59594();
    }

    (*(void (**)(void *, uint64_t))(v30 + 8))(v31, v66);
    os_log_type_t v52 = v68;
    uint64_t v53 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v54 = sub_13FF8(v27, v53);
    *id v55 = v28;
    v70[0] = v54;
    char v73 = 1;
    swift_retain(v28);
    v52(v70);
    swift_release(v28);
    sub_6B60((uint64_t)v70, (uint64_t *)&unk_8F3E0);
  }

  else
  {
    char v47 = v26;
    uint64_t v64 = v25;
    uint64_t v66 = v24;
    sub_34AB8(v26);
    sub_25230(v10, (uint64_t)v70);
    uint64_t v48 = v71;
    uint64_t v49 = v72;
    uint64_t v63 = sub_8734(v70, v71);
    if (v47)
    {
      unint64_t v50 = 0xD000000000000013LL;
      if (v47 == 1) {
        unint64_t v51 = 0x80000000000685C0LL;
      }
      else {
        unint64_t v51 = 0x80000000000685E0LL;
      }
    }

    else
    {
      unint64_t v51 = 0xEB00000000656D61LL;
      unint64_t v50 = 0x4E74756F6B726F77LL;
    }

    String.toSpeakableString.getter(v50, v51);
    sub_10F84();
    type metadata accessor for SpeakableString(0LL);
    uint64_t v56 = 1LL;
    sub_59588((uint64_t)v21, 0LL);
    uint64_t v57 = (*(uint64_t (**)(void))(*(void *)(v65 + 32) + 24LL))(*(void *)(v65 + 16));
    if (v57)
    {
      unint64_t v58 = (void *)v57;
      INSpeakableString.toSpeakableString.getter();

      uint64_t v56 = 0LL;
    }

    uint64_t v59 = v64;
    sub_59588((uint64_t)v19, v56);
    (*(void (**)(char *, char *, uint64_t, uint64_t))(v49 + 8))(v21, v19, v48, v49);
    sub_6B60((uint64_t)v19, &qword_8C258);
    sub_6B60((uint64_t)v21, &qword_8C258);
    uint64_t v60 = _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v70);
    __chkstk_darwin(v60);
    *(&v61 - _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v12;
    sub_4A714((void (*)(uint64_t))sub_27F20, (uint64_t)v70);
    v68(v70);
    sub_6B60((uint64_t)v70, (uint64_t *)&unk_8F3E0);
    sub_6B60(v11, (uint64_t *)&unk_8F3A0);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v12, v66);
  }

  sub_10F48();
}

void sub_592F8( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_5931C()
{
  return NeedsConfirmationFlowStrategy.shouldRequestUnlockForConfirmation(app:intent:parameterName:multicardinalIndex:intentResolutionResult:itemToConfirm:_:)();
}

void sub_59330( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void *), uint64_t a9, uint64_t a10)
{
}

uint64_t sub_5933C()
{
  return NeedsConfirmationFlowStrategy.makeRepromptOnEmptyParse(app:intent:parameterName:multicardinalIndex:intentResolutionResult:itemToConfirm:_:)();
}

uint64_t sub_59350()
{
  return NeedsConfirmationFlowStrategy.makeRepromptOnLowConfidence(app:intent:parameterName:multicardinalIndex:intentResolutionResult:itemToConfirm:_:)();
}

uint64_t sub_59364()
{
  return NeedsConfirmationFlowStrategy.makePromptForDeviceUnlock(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)();
}

uint64_t sub_59370()
{
  return NeedsConfirmationFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:_:)();
}

uint64_t sub_5937C()
{
  return NeedsConfirmationFlowStrategy.makeConfirmationRejectedResponse(app:intent:parameterName:multicardinalIndex:_:)();
}

uint64_t sub_59388(uint64_t a1)
{
  return swift_getWitnessTable(&unk_66EF8, a1);
}

unint64_t sub_59398()
{
  unint64_t result = qword_90810;
  if (!qword_90810)
  {
    unint64_t result = swift_getWitnessTable(&unk_67044, &type metadata for WorkoutsConfirmSlotError);
    atomic_store(result, (unint64_t *)&qword_90810);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for WorkoutsConfirmSlotError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_59414 + 4 * byte_66E80[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_59434 + 4 * byte_66E85[v4]))();
  }
}

_BYTE *sub_59414(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_59434(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_5943C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_59444(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_5944C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_59454(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WorkoutsConfirmSlotError()
{
  return &type metadata for WorkoutsConfirmSlotError;
}

unint64_t sub_59474()
{
  unint64_t result = qword_90818;
  if (!qword_90818)
  {
    unint64_t result = swift_getWitnessTable(&unk_6701C, &type metadata for WorkoutsConfirmSlotError);
    atomic_store(result, (unint64_t *)&qword_90818);
  }

  return result;
}

uint64_t sub_594B0()
{
  return (*(uint64_t (**)(void))(v0 - 176))();
}

uint64_t sub_594BC(uint64_t a1, void *a2)
{
  *a2 = v2;
  uint64_t v4 = *(void **)(v3 - 200);
  *uint64_t v4 = a1;
  return swift_storeEnumTagMultiPayload(v4, *(void *)(v3 - 184), 1LL);
}

uint64_t sub_594DC()
{
  return v0;
}

uint64_t sub_594F0@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void, uint64_t, uint64_t)@<X8>)
{
  return a2(*(void *)(v3 - 288), a1, v2);
}

uint64_t sub_59504()
{
  return 0LL;
}

uint64_t sub_59520()
{
  return sub_8760(v1, 0LL, 1LL, v0);
}

uint64_t sub_59534(uint64_t a1, void *a2)
{
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_59544(uint64_t a1, unint64_t a2)
{
  return sub_173E0(a1, a2, (uint64_t *)(v2 - 152));
}

uint64_t sub_5954C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 160, v0);
}

uint64_t sub_5955C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_59568(uint64_t a1)
{
  return v2(a1, v1, v3);
}

uint64_t sub_59574()
{
  return v0;
}

uint64_t sub_59588(uint64_t a1, uint64_t a2)
{
  return sub_8760(a1, a2, 1LL, v2);
}

uint64_t sub_59594()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_595A0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 224))(a1, v1);
}

uint64_t type metadata accessor for WorkoutPauseCATPatternsExecutor(uint64_t a1)
{
  return sub_2DA24(a1, (uint64_t *)&unk_90820, (uint64_t)&nominal type descriptor for WorkoutPauseCATPatternsExecutor);
}

uint64_t sub_595C0(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_97070);
}

void sub_595FC()
{
  uint64_t v4 = sub_6358(&qword_8C260);
  uint64_t v5 = (__n128 *)sub_65A4(v4, 176LL);
  sub_2EC14(v5, (__n128)xmmword_63690);
  uint64_t v6 = sub_2EC7C();
  sub_2ED24(v6);
  if (v7)
  {
    sub_10004(v1, &qword_8C258);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }

  else
  {
    uint64_t v8 = sub_2ED5C();
    sub_2ECE8((uint64_t)v8, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_8C250 + 4));
  }

  v5[5].n128_u64[0] = 0x656369766564LL;
  v5[5].n128_u64[1] = 0xE600000000000000LL;
  uint64_t v9 = type metadata accessor for WorkoutPauseErrorWithCodeParameters(0LL);
  unint64_t v10 = *(void *)(v0 + *(int *)(v9 + 20));
  if (v10)
  {
    uint64_t v11 = type metadata accessor for SirikitDeviceState(0LL);
    unint64_t v12 = v10;
  }

  else
  {
    unint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    v5[6].n128_u64[1] = 0LL;
    v5[7].n128_u64[0] = 0LL;
  }

  v5[6].n128_u64[0] = v12;
  v5[7].n128_u64[1] = v11;
  v5[8].n128_u64[0] = 0x646F43726F727265LL;
  v5[8].n128_u64[1] = 0xE900000000000065LL;
  uint64_t v13 = v0 + *(int *)(v9 + 24);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    uint64_t v14 = 0LL;
    v5[9].n128_u64[1] = 0LL;
    v5[10].n128_u64[0] = 0LL;
    unint64_t v15 = 0LL;
  }

  else
  {
    unint64_t v15 = *(void *)v13;
    uint64_t v14 = &type metadata for Double;
  }

  v5[9].n128_u64[0] = v15;
  v5[10].n128_u64[1] = (unint64_t)v14;
  swift_retain(v10);
  sub_2EC84();
}

void sub_59744()
{
  uint64_t v4 = sub_6358(&qword_8C260);
  uint64_t v5 = (__n128 *)sub_65A4(v4, 176LL);
  sub_2EC14(v5, (__n128)xmmword_63690);
  uint64_t v6 = sub_2EC7C();
  sub_2ED24(v6);
  if (v7)
  {
    sub_10004(v1, &qword_8C258);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }

  else
  {
    uint64_t v8 = sub_2ED5C();
    sub_2ECE8((uint64_t)v8, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))off_8C250 + 4));
  }

  v5[5].n128_u64[0] = 0x5074737269467369LL;
  v5[5].n128_u64[1] = 0xEF70704179747261LL;
  uint64_t v9 = type metadata accessor for WorkoutPauseIntentHandledResponseParameters(0LL);
  v5[6].n128_u8[0] = *(_BYTE *)(v0 + *(int *)(v9 + 20));
  v5[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  strcpy((char *)&v5[8], "isPunchingOut");
  v5[8].n128_u16[7] = -4864;
  unsigned __int8 v10 = *(_BYTE *)(v0 + *(int *)(v9 + 24));
  v5[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[9].n128_u8[0] = v10;
  sub_2EC84();
}

uint64_t sub_5985C(char a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = a5;
  *(void *)(v6 + 96) = a6;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a4;
  *(_BYTE *)(v6 + 83) = a3;
  *(_BYTE *)(v6 + 8_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2;
  *(_BYTE *)(v6 + 81) = a1;
  sub_8910();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_59888()
{
  uint64_t v1 = *(void *)(v0 + 88);
  char v2 = *(_BYTE *)(v0 + 84);
  char v3 = *(_BYTE *)(v0 + 83);
  char v4 = *(_BYTE *)(v0 + 82);
  char v5 = *(_BYTE *)(v0 + 81);
  *(void *)(v0 + sub_14C98(v0 + 16) = 0LL;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(_BYTE *)(v0 + 25) = v5;
  *(_BYTE *)(v0 + 26) = v4;
  *(_BYTE *)(v0 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 7) = v3;
  *(_BYTE *)(v0 + 28) = v2;
  *(void *)(v0 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v1;
  *(void *)(v0 + 4sub_4A488(*(void **)(v2 + 152), 0) = 0LL;
  *(_BYTE *)(v0 + 48) = 1;
  *(void *)(v0 + 56) = 0LL;
  *(_BYTE *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  *(void *)(v0 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
  *(_BYTE *)(v0 + 8sub_4A488(*(void **)(v2 + 152), 0) = 1;
  *(void *)(v0 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = sub_2CB98();
  uint64_t v6 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_2D284;
  unint64_t v7 = sub_5746C();
  return sub_2ECB0(v7, v8, v9, v11);
}

uint64_t sub_59930(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  _OWORD v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for WorkoutPauseErrorWithCodeParameters(0LL);
  v3[5] = v4;
  v3[6] = sub_2EC44(v4);
  sub_8910();
  return sub_887C();
}

uint64_t sub_59974()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  char v3 = (void (*)(uint64_t))v0[2];
  uint64_t v4 = sub_2EC7C();
  sub_8760(v1, 1LL, 1LL, v4);
  *(void *)(v1 + *(int *)(v2 + 20)) = 0LL;
  uint64_t v5 = v1 + *(int *)(v2 + 24);
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  v3(v1);
  sub_595FC();
  v0[7] = v6;
  unint64_t v7 = (void *)sub_2ECD4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v7;
  sub_5A250(v7, (uint64_t)sub_59A28);
  unint64_t v8 = sub_5A234();
  return v10(v8);
}

uint64_t sub_59A28()
{
  if (!v1) {
    *(void *)(v2 + 8sub_4A488(*(void **)(v2 + 152), 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_59A70(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_59AAC(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_59AE4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  _OWORD v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for WorkoutPauseUnsupportedSlotValueParameters(0LL);
  v3[5] = sub_2EC44(v4);
  sub_8910();
  return sub_887C();
}

uint64_t sub_59B24()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void (*)(uint64_t))v0[2];
  uint64_t v3 = sub_2EC7C();
  sub_8760(v1, 1LL, 1LL, v3);
  v2(v1);
  sub_2CF9C();
  uint64_t v5 = v4;
  v0[6] = v4;
  uint64_t v6 = (void *)sub_2ECD4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[7] = v6;
  sub_5A250(v6, (uint64_t)sub_59BC0);
  return sub_2ECB0(0xD000000000000021LL, 0x800000000006B820LL, v5, v8);
}

uint64_t sub_59BC0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 56);
  *(void *)(*v2 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v1;
  swift_task_dealloc(v5);
  sub_17C4C();
  if (!v1) {
    *(void *)(v4 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a1;
  }
  sub_8910();
  return sub_2EC04(v6, v7, v8);
}

uint64_t sub_59C28(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 72), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_59C64(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_59C9C(char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a4;
  *(void *)(v5 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v4;
  *(void *)(v5 + sub_14C98(v0 + 16) = a3;
  *(_BYTE *)(v5 + 8sub_1F08C(v0 + 9) = a2;
  *(_BYTE *)(v5 + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = a1;
  uint64_t v6 = type metadata accessor for WorkoutPauseIntentHandledResponseParameters(0LL);
  *(void *)(v5 + 4sub_4A488(*(void **)(v2 + 152), 0) = v6;
  *(void *)(v5 + 48) = sub_2EC44(v6);
  sub_8910();
  return sub_887C();
}

uint64_t sub_59CE8()
{
  uint64_t v1 = sub_2EC7C();
  sub_5A1EC(v1);
  sub_59744();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  sub_5A250(v3, (uint64_t)sub_59D64);
  unint64_t v4 = sub_5746C();
  return sub_5A220(v4, v5, v6, v8);
}

uint64_t sub_59D64()
{
  if (!v1) {
    *(void *)(v2 + 8sub_4A488(*(void **)(v2 + 152), 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_59DAC(char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = a4;
  *(void *)(v5 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v4;
  *(void *)(v5 + sub_14C98(v0 + 16) = a3;
  *(_BYTE *)(v5 + 8sub_1F08C(v0 + 9) = a2;
  *(_BYTE *)(v5 + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = a1;
  uint64_t v6 = type metadata accessor for WorkoutPauseIntentHandledResponseParameters(0LL);
  *(void *)(v5 + 4sub_4A488(*(void **)(v2 + 152), 0) = v6;
  *(void *)(v5 + 48) = sub_2EC44(v6);
  sub_8910();
  return sub_887C();
}

uint64_t sub_59DF8()
{
  uint64_t v1 = sub_2EC7C();
  sub_5A1EC(v1);
  sub_59744();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = (void *)sub_15FF8((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  sub_5A250(v3, (uint64_t)sub_59E74);
  unint64_t v4 = sub_5A234();
  return sub_5A220(v4, v5, v6, v8);
}

uint64_t sub_59E74()
{
  if (!v1) {
    *(void *)(v2 + 8sub_4A488(*(void **)(v2 + 152), 0) = v0;
  }
  sub_8910();
  return sub_2EC04(v3, v4, v5);
}

uint64_t sub_59EBC(uint64_t a1)
{
  return sub_26268(*(void *)(v1 + 80), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_59EF8(uint64_t a1)
{
  return sub_26274(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_59F30()
{
  return type metadata accessor for WorkoutPauseCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for WorkoutPauseIntentHandledResponseParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_90A10, (uint64_t)&nominal type descriptor for WorkoutPauseIntentHandledResponseParameters);
}

uint64_t type metadata accessor for WorkoutPauseUnsupportedSlotValueParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_90980, (uint64_t)&nominal type descriptor for WorkoutPauseUnsupportedSlotValueParameters);
}

uint64_t type metadata accessor for WorkoutPauseErrorWithCodeParameters(uint64_t a1)
{
  return sub_2DA24(a1, qword_908E8, (uint64_t)&nominal type descriptor for WorkoutPauseErrorWithCodeParameters);
}

uint64_t sub_59F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_59F80);
}

void sub_59F80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_2ECBC(a1, a2, v4);
  }
  else {
    sub_11120();
  }
}

uint64_t sub_59FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5A004);
}

void sub_5A004(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(sub_6358(&qword_8C258) - 8) + 84LL) == a3)
  {
    uint64_t v8 = sub_2EC94();
    sub_2ECC8(v8, v9, v10, v11);
  }

  else
  {
    *(void *)(v5 + *(int *)(a4 + 20)) = v4;
    sub_11120();
  }

void sub_5A05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_5A070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5A07C);
}

uint64_t sub_5A07C()
{
  uint64_t v2 = sub_6358(&qword_8C258);
  return sub_63E0(v1, v0, v2);
}

uint64_t sub_5A0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5A0BC);
}

uint64_t sub_5A0BC()
{
  uint64_t v0 = sub_2EC94();
  return sub_8760(v0, v1, v2, v3);
}

uint64_t sub_5A0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5A0F4);
}

void sub_5A0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_6358(&qword_8C258);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_2ECBC(a1, a2, v4);
  }
  else {
    sub_11120();
  }
}

uint64_t sub_5A170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5A17C);
}

void sub_5A17C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(sub_6358(&qword_8C258) - 8) + 84LL) == a3)
  {
    uint64_t v8 = sub_2EC94();
    sub_2ECC8(v8, v9, v10, v11);
  }

  else
  {
    *(_BYTE *)(v5 + *(int *)(a4 + 20)) = v4 + 1;
    sub_11120();
  }

void sub_5A1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_5A1EC(uint64_t a1)
{
  *(_BYTE *)(v1 + *(int *)(v2 + 20)) = v5;
  *(_BYTE *)(v1 + *(int *)(v2 + swift_release(*(void *)(v0 + 24)) = v4;
  return v3(v1);
}

uint64_t sub_5A220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

unint64_t sub_5A234()
{
  return 0xD00000000000001ALL;
}

void *sub_5A250@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

void *sub_5A25C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v15 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v15);
  }

  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + sub_14C98(v0 + 16) = a2[2];
    *(void *)(a1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v6;
    *(_BYTE *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *((_BYTE *)a2 + 32);
    uint64_t v7 = a2[5];
    *(void *)(a1 + 4sub_4A488(*(void **)(v2 + 152), 0) = v7;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    uint64_t v8 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v8;
    uint64_t v9 = a2[10];
    uint64_t v10 = *(int *)(a3 + 44);
    uint64_t v11 = (uint64_t)a2 + v10;
    uint64_t v12 = a1 + v10;
    *(void *)(a1 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = a2[9];
    *(void *)(a1 + 8sub_4A488(*(void **)(v2 + 152), 0) = v9;
    uint64_t v13 = type metadata accessor for Parse.DirectInvocation(0LL);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v12, v11, v13);
  }

  return v3;
}

uint64_t sub_5A358(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_5A3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + sub_14C98(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v5;
  *(_BYTE *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 4sub_4A488(*(void **)(v2 + 152), 0) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(int *)(a3 + 44);
  uint64_t v10 = a2 + v9;
  uint64_t v11 = a1 + v9;
  *(void *)(a1 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_4A488(*(void **)(v2 + 152), 0) = v8;
  uint64_t v12 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v11, v10, v12);
  return a1;
}

uint64_t sub_5A490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + sub_14C98(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_4A488(*(void **)(v2 + 152), 0) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a1 + 80);
  *(void *)(a1 + 8sub_4A488(*(void **)(v2 + 152), 0) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(int *)(a3 + 44);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Parse.DirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24LL))(v17, v18, v19);
  return a1;
}

uint64_t sub_5A594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + sub_14C98(v0 + 16) = v4;
  *(_BYTE *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 4sub_4A488(*(void **)(v2 + 152), 0) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_OWORD *)(a1 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_OWORD *)(a2 + 72);
  uint64_t v8 = type metadata accessor for Parse.DirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t sub_5A618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + sub_14C98(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_4A488(*(void **)(v2 + 152), 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a1 + 80);
  *(void *)(a1 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_4A488(*(void **)(v2 + 152), 0) = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(int *)(a3 + 44);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Parse.DirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40LL))(v16, v17, v18);
  return a1;
}

uint64_t sub_5A6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5A6E0);
}

uint64_t sub_5A6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_5BF28();
    return sub_63E0(a1 + *(int *)(a3 + 44), a2, v8);
  }

uint64_t sub_5A750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5A75C);
}

void sub_5A75C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 4sub_4A488(*(void **)(v2 + 152), 0) = (a2 - 1);
    sub_11120();
  }

  else
  {
    uint64_t v7 = sub_5BF28();
    sub_8760(a1 + *(int *)(a4 + 44), a2, a2, v7);
  }

uint64_t type metadata accessor for DirectInvocationData(uint64_t a1)
{
  uint64_t result = qword_90AB0;
  if (!qword_90AB0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DirectInvocationData);
  }
  return result;
}

uint64_t sub_5A7F4(uint64_t a1)
{
  v4[0] = &unk_673C8;
  v4[1] = &unk_673C8;
  void v4[2] = &unk_673E0;
  void v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[4] = &unk_673F8;
  void v4[5] = &unk_673C8;
  v4[6] = &unk_673C8;
  uint64_t result = type metadata accessor for Parse.DirectInvocation(319LL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_5A890(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Parse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_6BD8();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_5BF28();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_6BD8();
  uint64_t v13 = (void *)(v12 - v11);
  uint64_t v14 = type metadata accessor for DirectInvocationData(0LL);
  sub_6C04();
  __chkstk_darwin(v15);
  sub_6BD8();
  uint64_t v18 = v17 - v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v8, v4) == enum case for Parse.directInvocation(_:))
  {
    sub_5BEF8(v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 96));
    (*(void (**)(void *, uint64_t, uint64_t))(v10 + 32))(v13, v8, v9);
    uint64_t v19 = v10;
    uint64_t v20 = v18 + *(int *)(v14 + 44);
    uint64_t v88 = v19;
    uint64_t v21 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(v19 + 16))(v20, v13, v9);
    uint64_t v89 = v13;
    if (Parse.DirectInvocation.userData.getter(v21))
    {
      uint64_t v22 = sub_5BE40();
      sub_5BEA8(v22 & 0xFFFFFFFFFFFFLL | 0x5674000000000000LL, 0xEB00000000627265LL, v23);
      uint64_t v24 = sub_10F84();
      if (v93)
      {
        uint64_t v13 = &type metadata for Any;
        if ((sub_5BE2C(v24, v25, v26, (uint64_t)&type metadata for String) & 1) != 0)
        {
          uint64_t v86 = a1;
          uint64_t v87 = v18;
          if (sub_5BECC())
          {
            sub_5BE8C((uint64_t)"workoutProgramName");
            uint64_t v27 = sub_10F84();
            sub_5BE2C(v27, v28, v29, (uint64_t)&type metadata for String);
            sub_5BEBC();
            if (v32) {
              uint64_t v31 = 0LL;
            }
          }

          else
          {
            sub_5BEB0();
            sub_5BE68();
            sub_5BF38();
          }

          *(void *)uint64_t v18 = v30;
          *(void *)(v18 + 8) = v31;
          if (sub_5BECC())
          {
            sub_5BE8C((uint64_t)"workoutTrainerName");
            uint64_t v35 = sub_10F84();
            if (v93)
            {
              sub_5BE2C(v35, v36, v37, (uint64_t)&type metadata for String);
              sub_5BEBC();
              if (v32) {
                uint64_t v39 = 0LL;
              }
LABEL_24:
              *(void *)(v18 + sub_14C98(v0 + 16) = v38;
              *(void *)(v18 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v39;
              if (sub_5BECC())
              {
                uint64_t v40 = sub_5BE40();
                sub_5BEA8(v40 & 0xFFFFFFFFFFFFLL | 0x4E74000000000000LL, 0xEB000000006E756FLL, v41);
                uint64_t v42 = sub_10F84();
                uint64_t v45 = (void *)v91;
                if (v93)
                {
                  sub_5BE2C(v42, v43, v44, (uint64_t)&type metadata for String);
                  sub_5BEBC();
                  if (v32) {
                    uint64_t v47 = 0LL;
                  }
LABEL_31:
                  *(void *)(v18 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v46;
                  *(void *)(v18 + 8sub_4A488(*(void **)(v2 + 152), 0) = v47;
                  v94._uint64_t countAndFlagsBits = v90;
                  v94._object = v45;
                  char v48 = sub_5B7E4(v94);
                  if (v48 == 5)
                  {
                    sub_5BEF8(a1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
                    sub_5BF18();
                    swift_bridgeObjectRelease(*(void *)(v18 + 8));
                    swift_bridgeObjectRelease(*(void *)(v18 + 24));
                    swift_bridgeObjectRelease(*(void *)(v18 + 80));
                    goto LABEL_13;
                  }

                  *(_BYTE *)(v18 + 48) = v48;
                  uint64_t v49 = a1;
                  if (sub_5BECC())
                  {
                    uint64_t v50 = sub_5BE40();
                    sub_5BEA8(v50 & 0xFFFFFFFFFFFFLL | 0x5374000000000000LL, 0xEF65636E65757165LL, v51);
                    uint64_t v52 = sub_10F84();
                    if (v93)
                    {
                      sub_5BE2C(v52, v53, v54, (uint64_t)&type metadata for String);
                      sub_5BEBC();
                      if (v32) {
                        uint64_t v56 = 0LL;
                      }
LABEL_40:
                      *(void *)(v18 + 56) = v55;
                      *(void *)(v18 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v56;
                      if (sub_5BECC())
                      {
                        uint64_t v57 = sub_5BE40();
                        sub_5BEA8(v57 & 0xFFFFFFFFFFFFLL | 0x4174000000000000LL, 0xEF79746976697463LL, v58);
                        uint64_t v59 = sub_10F84();
                        if (v93)
                        {
                          if ((sub_5BE2C(v59, v60, v61, (uint64_t)&type metadata for String) & 1) != 0)
                          {
                            char v62 = sub_11B8C(v90, v91);
                            goto LABEL_47;
                          }

LABEL_46:
                          char v62 = 87;
LABEL_47:
                          *(_BYTE *)(v18 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v62;
                          if (sub_5BECC())
                          {
                            sub_5BEA8(0xD000000000000011LL, 0x800000000006B8A0LL, &v92);
                            sub_10F84();
                            if (v93)
                            {
                              uint64_t v63 = sub_6358(&qword_8CE68);
                              if ((sub_5BE2C(v63, v64, v65, v63) & 1) != 0)
                              {
                                uint64_t v84 = v9;
                                uint64_t v66 = *(void *)(v90 + 16);
                                if (v66)
                                {
                                  uint64_t v83 = a2;
                                  swift_bridgeObjectRetain();
                                  unint64_t v85 = sub_10098();
                                  uint64_t v67 = (uint64_t *)(v90 + 40);
                                  do
                                  {
                                    uint64_t v68 = *v67;
                                    *(void *)&__int128 v92 = *(v67 - 1);
                                    *((void *)&v92 + 1) = v68;
                                    swift_bridgeObjectRetain();
                                    uint64_t v69 = (void *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)( 124LL,  0xE100000000000000LL,  0x7FFFFFFFFFFFFFFFLL,  1LL,  &type metadata for String,  v85);
                                    if (v69[2])
                                    {
                                      uint64_t v71 = v69[4];
                                      uint64_t v70 = v69[5];
                                      uint64_t v73 = v69[6];
                                      uint64_t v72 = v69[7];
                                      swift_bridgeObjectRetain();
                                      sub_10F84();
                                      uint64_t v74 = static String._fromSubstring(_:)(v71, v70, v73, v72);
                                      uint64_t v76 = v75;
                                      swift_bridgeObjectRelease(v72);
                                      id v77 = objc_allocWithZone(&OBJC_CLASS___INWorkoutAssociatedItem);
                                      id v78 = sub_5B8A4(5LL, v74, v76, 0LL, 0LL);
                                      uint64_t v79 = swift_bridgeObjectRelease(v68);
                                      if (v78)
                                      {
                                        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
                                        unint64_t v81 = *(void *)((char *)&dword_10
                                                        + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
                                        unint64_t v80 = *(void *)((char *)&dword_18
                                                        + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
                                        if (v81 >= v80 >> 1) {
                                          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v80 > 1,  v81 + 1,  1LL);
                                        }
                                        uint64_t v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)( v81,  v78);
                                        specialized Array._endMutation()(v82);
                                      }
                                    }

                                    else
                                    {
                                      swift_bridgeObjectRelease(v68);
                                      sub_10F84();
                                    }

                                    v67 += 2;
                                    --v66;
                                  }

                                  while (v66);
                                  sub_10F84();
                                  a2 = v83;
                                  uint64_t v49 = v86;
                                  uint64_t v18 = v87;
                                }

                                sub_5BEF8(v49, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
                                (*(void (**)(void *, uint64_t))(v88 + 8))(v89, v84);
                                sub_10F84();
                                goto LABEL_63;
                              }

LABEL_62:
                              sub_5BEF8(a1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
                              (*(void (**)(void *, uint64_t))(v88 + 8))(v89, v9);
LABEL_63:
                              *(void *)(v18 + 4sub_4A488(*(void **)(v2 + 152), 0) = &_swiftEmptyArrayStorage;
                              sub_5BC18(v18, a2);
                              sub_5BF50(a2, 0LL);
                              sub_5BC5C(v18);
                              goto LABEL_15;
                            }
                          }

                          else
                          {
                            sub_5BEB0();
                          }

                          sub_5BE68();
                          goto LABEL_62;
                        }
                      }

                      else
                      {
                        sub_5BEB0();
                      }

                      sub_5BE68();
                      goto LABEL_46;
                    }
                  }

                  else
                  {
                    sub_5BEB0();
                  }

                  sub_5BE68();
                  sub_5BF38();
                  goto LABEL_40;
                }
              }

              else
              {
                sub_5BEB0();
                uint64_t v45 = (void *)v91;
              }

              sub_5BE68();
              sub_5BF38();
              goto LABEL_31;
            }
          }

          else
          {
            sub_5BEB0();
          }

          sub_5BE68();
          sub_5BF38();
          goto LABEL_24;
        }

LABEL_12:
        sub_5BEF8(a1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
        sub_5BF18();
LABEL_13:
        uint64_t v33 = v20;
        uint64_t v34 = v9;
        goto LABEL_14;
      }
    }

    else
    {
      sub_5BEB0();
    }

    sub_5BE68();
    goto LABEL_12;
  }

  uint64_t v13 = *(void **)(v5 + 8);
  ((void (*)(uint64_t, uint64_t))v13)(a1, v4);
  uint64_t v33 = v8;
  uint64_t v34 = v4;
LABEL_14:
  ((void (*)(uint64_t, uint64_t))v13)(v33, v34);
  sub_5BF50(a2, 1LL);
LABEL_15:
  sub_10F48();
}

void sub_5AE94()
{
  __asm { BR              X10 }

void sub_5AEC4()
{
  id v1 = [objc_allocWithZone(INStartWorkoutIntent) init];
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_5BBB0(v2, v1);
  sub_10F84();
  v0[3] = sub_AF38(0LL, (unint64_t *)&qword_8C828, &OBJC_CLASS___INStartWorkoutIntent_ptr);
  v0[4] = &off_83340;
  *uint64_t v0 = v1;
  sub_11120();
}

uint64_t sub_5AFF8(char a1)
{
  return *(void *)&aStart_4[8 * a1];
}

void sub_5B018(uint64_t a1@<X8>)
{
  uint64_t v79 = a1;
  sub_6358(&qword_90B08);
  sub_6C04();
  __chkstk_darwin(v2);
  sub_C838();
  uint64_t v70 = v3;
  sub_6358(&qword_90B10);
  sub_6C04();
  __chkstk_darwin(v4);
  sub_C838();
  uint64_t v77 = v5;
  uint64_t v78 = type metadata accessor for NLIntent(0LL);
  uint64_t v69 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  sub_C838();
  uint64_t v68 = v6;
  uint64_t v7 = type metadata accessor for NonTerminalIntentNode(0LL);
  uint64_t v75 = *(void *)(v7 - 8);
  uint64_t v76 = v7;
  __chkstk_darwin(v7);
  sub_11060();
  uint64_t v74 = v8;
  __chkstk_darwin(v9);
  uint64_t v73 = (char *)&v67 - v10;
  uint64_t v80 = type metadata accessor for TerminalIntentNode(0LL);
  uint64_t v11 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  sub_11060();
  uint64_t v67 = v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v67 - v14;
  sub_6358(&qword_90B18);
  sub_6C04();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v17);
  uint64_t v21 = (uint64_t *)((char *)&v67 - v20);
  uint64_t v22 = sub_6358(&qword_8C960);
  uint64_t v23 = *(void *)(v11 + 72);
  uint64_t v71 = v11;
  uint64_t v24 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  uint64_t v81 = v23;
  uint64_t v26 = swift_allocObject(v22, v25 + 2 * v23, v24 | 7);
  *(_OWORD *)(v26 + sub_14C98(v0 + 16) = xmmword_61440;
  *uint64_t v21 = sub_5AFF8(*(_BYTE *)(v1 + 48));
  v21[1] = v27;
  uint64_t v28 = enum case for TerminalElement.Value.string(_:);
  uint64_t v29 = type metadata accessor for TerminalElement.Value(0LL);
  uint64_t v30 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104LL);
  sub_5BE7C();
  sub_5BF00((uint64_t)v21);
  uint64_t v31 = sub_5BE58();
  sub_5BF30(v31 & 0xFFFFFFFFFFFFLL | 0x6556000000000000LL, 0xEA00000000006272LL);
  int v32 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v72 = v25;
  if (v32 == 87)
  {
    unint64_t v33 = 0xE500000000000000LL;
    uint64_t v34 = 0x726568746FLL;
  }

  else
  {
    uint64_t v34 = sub_11BDC(v32);
  }

  uint64_t v35 = v81;
  *uint64_t v19 = v34;
  v19[1] = v33;
  v30(v19, v28, v29);
  sub_5BF00((uint64_t)v19);
  uint64_t v36 = sub_5BE58();
  TerminalIntentNode.init(name:value:semanticTags:)( v36 & 0xFFFFFFFFFFFFLL | 0x6341000000000000LL,  0xEE00797469766974LL,  v19);
  uint64_t v37 = *(void *)(v1 + 64);
  if (v37)
  {
    uint64_t v38 = 2 * v35;
    *uint64_t v21 = *(void *)(v1 + 56);
    v21[1] = v37;
    sub_5BE7C();
    sub_5BED4();
    uint64_t v39 = sub_5BE58();
    sub_5BF30(v39 & 0xFFFFFFFFFFFFLL | 0x6552000000000000LL, 0xEF65636E65726566LL);
    uint64_t v26 = sub_5BF44(1, 3LL);
    *(void *)(v26 + sub_14C98(v0 + 16) = 3LL;
    uint64_t v40 = v72;
    uint64_t v41 = v26 + v72 + v38;
    uint64_t v42 = v71;
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v41, v15, v80);
  }

  else
  {
    uint64_t v42 = v71;
    uint64_t v40 = v72;
  }

  uint64_t v43 = *(void *)(v1 + 80);
  if (v43)
  {
    *uint64_t v21 = *(void *)(v1 + 72);
    v21[1] = v43;
    sub_5BE7C();
    sub_5BED4();
    uint64_t v44 = v67;
    uint64_t v45 = sub_5BE58();
    sub_5BF30(v45 & 0xFFFFFFFFFFFFLL | 0x6F4E000000000000LL, v46);
    unint64_t v48 = *(void *)(v26 + 16);
    unint64_t v47 = *(void *)(v26 + 24);
    if (v48 >= v47 >> 1) {
      uint64_t v26 = sub_5BF44(v47 > 1, v48 + 1);
    }
    uint64_t v50 = v69;
    uint64_t v49 = v70;
    uint64_t v51 = v68;
    *(void *)(v26 + sub_14C98(v0 + 16) = v48 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v42 + 32))(v26 + v40 + v48 * v81, v44, v80);
  }

  else
  {
    uint64_t v50 = v69;
    uint64_t v49 = v70;
    uint64_t v51 = v68;
  }

  uint64_t v52 = sub_5B588(v26);
  swift_bridgeObjectRelease(v26);
  uint64_t v53 = v73;
  uint64_t v54 = sub_5BE58();
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)(v54, 0xE600000000000000LL, v52, _swiftEmptyArrayStorage);
  uint64_t v55 = v74;
  static NonTerminalIntentNode.rootNode(forDomainNode:inEventTree:)(v53, 1LL);
  uint64_t v56 = v76;
  v82[3] = v76;
  v82[4] = &protocol witness table for NonTerminalIntentNode;
  uint64_t v57 = sub_6B9C(v82);
  uint64_t v58 = v75;
  (*(void (**)(void *, uint64_t, uint64_t))(v75 + 16))(v57, v55, v56);
  uint64_t v59 = type metadata accessor for NLState(0LL);
  uint64_t v60 = v77;
  sub_14DB0(v77, v61, v62, v59);
  uint64_t v63 = type metadata accessor for MitigatorClassification(0LL);
  sub_14DB0(v49, v64, v65, v63);
  NLIntent.init(rootNode:score:originalInput:allWordsMatched:primary:usingExplicitInput:intentRank:isNERBasedParse:intentID:nlState:mitigatorClassification:strippedVoiceTrigger:isInvalidVoiceTrigger:isSuggested:metaDomainActions:)( v82,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  1,  0LL,  1,  v60,  v49,  0LL,  0LL,  0,  _swiftEmptyArrayStorage);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  v66(v55, v56);
  v66((uint64_t)v53, v56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v79, v51, v78);
  sub_10F48();
}

double sub_5B538@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_5B934(a1, a2), (v7 & 1) != 0))
  {
    sub_13FB8(*(void *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }

  return result;
}

void *sub_5B588(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TerminalIntentNode(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_3B664(0, v6, 0);
    char v7 = v19;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v10(v5, v8, v2);
      uint64_t v19 = v7;
      unint64_t v12 = v7[2];
      unint64_t v11 = v7[3];
      if (v12 >= v11 >> 1) {
        sub_3B664(v11 > 1, v12 + 1, 1);
      }
      uint64_t v17 = v2;
      uint64_t v18 = &protocol witness table for TerminalIntentNode;
      uint64_t v13 = (char *)sub_6B9C(&v16);
      v10(v13, (uint64_t)v5, v2);
      uint64_t v14 = v19;
      _OWORD v19[2] = v12 + 1;
      sub_D99C(&v16, (uint64_t)&v14[5 * v12 + 4]);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      char v7 = v19;
      v8 += v9;
      --v6;
    }

    while (v6);
  }

  return v7;
}

uint64_t sub_5B6F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_5B728 + 4 * byte_67215[a1]))( 0xD000000000000012LL,  0x800000000006B8C0LL);
}

  ;
}

unint64_t sub_5B7E4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_7ECB0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

void sub_5B82C(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_5B838()
{
}

uint64_t sub_5B840(uint64_t a1)
{
  return sub_B718(a1, *v1);
}

void sub_5B848(uint64_t a1)
{
}

unint64_t sub_5B850@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_5B7E4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_5B87C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_5AFF8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_5B8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  if (a3)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }

  else
  {
    NSString v11 = 0LL;
  }

  id v12 = [v6 initWithItemLabel:a1 itemID:v11 contentRating:a4 itemName:a5];

  return v12;
}

unint64_t sub_5B934(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_5B9C8(a1, a2, v5);
}

unint64_t sub_5B998(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_5BAA8(a1, v4);
}

unint64_t sub_5B9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_5BAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    type metadata accessor for DeviceUnit(0LL);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

void sub_5BBB0(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a2 setAssociatedItems:isa];
}

uint64_t sub_5BC18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DirectInvocationData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_5BC5C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DirectInvocationData(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkoutVerb(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for WorkoutVerb(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_5BD6C + 4 * byte_67222[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_5BDA0 + 4 * byte_6721D[v4]))();
}

uint64_t sub_5BDA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5BDA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x5BDB0LL);
  }
  return result;
}

uint64_t sub_5BDBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x5BDC4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_5BDC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5BDD0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WorkoutVerb()
{
  return &type metadata for WorkoutVerb;
}

unint64_t sub_5BDF0()
{
  unint64_t result = qword_90B20[0];
  if (!qword_90B20[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_674B4, &type metadata for WorkoutVerb);
    atomic_store(result, qword_90B20);
  }

  return result;
}

uint64_t sub_5BE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 128, v5 - 112, v4 + 8, a4, 6LL);
}

uint64_t sub_5BE40()
{
  return 0x756F6B726F77LL;
}

uint64_t sub_5BE58()
{
  return 0x68746C616568LL;
}

uint64_t sub_5BE68()
{
  return sub_2C7A0(v0 - 112);
}

uint64_t sub_5BE70(uint64_t a1, unint64_t *a2)
{
  return sub_AF38(0LL, a2, v2);
}

uint64_t sub_5BE7C()
{
  return v1(v2, v3, v0);
}

double sub_5BE8C@<D0>(uint64_t a1@<X8>)
{
  return sub_5B538(0xD000000000000012LL, (a1 - 32) | 0x8000000000000000LL, v1, (_OWORD *)(v2 - 112));
}

double sub_5BEA8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_5B538(a1, a2, v3, a3);
}

double sub_5BEB0()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
  *(_OWORD *)(v0 - 96) = 0u;
  return result;
}

  ;
}

uint64_t sub_5BECC()
{
  return Parse.DirectInvocation.userData.getter();
}

uint64_t sub_5BED4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_5BEF8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_5BF00(uint64_t a1)
{
  return sub_8760(a1, 0LL, 1LL, v1);
}

id sub_5BF10()
{
  return objc_allocWithZone(*v0);
}

uint64_t sub_5BF18()
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(v1 - 144) + 8LL))(*(void *)(v1 - 136), v0);
}

uint64_t sub_5BF28()
{
  return type metadata accessor for Parse.DirectInvocation(0LL);
}

uint64_t sub_5BF30(uint64_t a1, uint64_t a2)
{
  return TerminalIntentNode.init(name:value:semanticTags:)(a1, a2, v2);
}

  ;
}

uint64_t sub_5BF44(char a1, uint64_t a2)
{
  return sub_F680(a1, a2, 1, v2);
}

uint64_t sub_5BF50(uint64_t a1, uint64_t a2)
{
  return sub_8760(a1, a2, 1LL, v2);
}

unint64_t sub_5BF5C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  id v6 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  id v7 = sub_5C148(0xD000000000000015LL, 0x800000000006B8E0LL);
  if (!v7)
  {
    uint64_t v8 = Logger.health.unsafeMutableAddressor(0LL);
    swift_beginAccess(v8, v16, 0LL, 0LL);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    char v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.debug.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      BOOL v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v12 = 0;
      _os_log_impl(&dword_0, v10, v11, "Error while creating Health user defaults!", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    id v7 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  }

  id v13 = v7;
  unint64_t result = sub_1F050();
  a1[3] = result;
  a1[4] = &off_83478;
  *a1 = v13;
  return result;
}

unint64_t sub_5C0E4()
{
  return (unint64_t)sub_5C108() & 1;
}

id sub_5C108()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 BOOLForKey:v1];

  return v2;
}

id sub_5C148(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithSuiteName:v4];

  return v5;
}

uint64_t sub_5C1A8(void *a1)
{
  return _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(a1 + 35);
}

uint64_t sub_5C1FC(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 6_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + sub_14C98(v0 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 18_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  __int128 v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 22_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 264);
  uint64_t v11 = *(void *)(a2 + 272);
  *(void *)(a1 + 26_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v10;
  *(void *)(a1 + 27_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v11;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 240, a2 + 240);
  __int128 v12 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 30_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 280, a2 + 280);
  return a1;
}

void *sub_5C314(void *a1, void *a2)
{
  return a1;
}

void *sub_5C390(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x140uLL);
}

uint64_t sub_5C398(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + sub_14C98(v0 + 16) = v4;
  *(void *)(a1 + 3_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 4sub_4A488(*(void **)(v2 + 152), 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 8sub_4A488(*(void **)(v2 + 152), 0) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 11_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 112);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 120));
  *(_OWORD *)(a1 + 12sub_4A488(*(void **)(v2 + 152), 0) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 152);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 160));
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 16sub_4A488(*(void **)(v2 + 152), 0) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 19_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 192);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 200));
  *(_OWORD *)(a1 + 20sub_4A488(*(void **)(v2 + 152), 0) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + sub_14C58(v0 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 232);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 240));
  __int128 v7 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 24sub_4A488(*(void **)(v2 + 152), 0) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v7;
  *(void *)(a1 + 27_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 272);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0((void *)(a1 + 280));
  __int128 v8 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 28sub_4A488(*(void **)(v2 + 152), 0) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v8;
  *(void *)(a1 + 31_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(void *)(a2 + 312);
  return a1;
}

uint64_t sub_5C4A0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 320))
    {
      LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_5C4E0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 31_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + sub_14C58(v0 + 216) = 0u;
    *(_OWORD *)(result + 20sub_4A488(*(void **)(v2 + 152), 0) = 0u;
    *(_OWORD *)(result + 18_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12sub_4A488(*(void **)(v2 + 152), 0) = 0u;
    *(_OWORD *)(result + 10_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + (*(void (**)(uint64_t))(v0 + 144))(v0 + 88) = 0u;
    *(_OWORD *)(result + 7_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_4A488(*(void **)(v2 + 152), 0) = 0u;
    *(_OWORD *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 28sub_4A488(*(void **)(v2 + 152), 0) = 0u;
    *(_OWORD *)(result + 26_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 32sub_4A488(*(void **)(v2 + 152), 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32sub_4A488(*(void **)(v2 + 152), 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for WorkoutDisambiguationStrategyAsync( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8830(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WorkoutDisambiguationStrategyAsync);
}

uint64_t sub_5C580( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v49 = a5;
  uint64_t v50 = a8;
  uint64_t v9 = v8;
  uint64_t v57 = a1;
  uint64_t v58 = a2;
  uint64_t v48 = *(void *)(a5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v59 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, *(void *)(v14 + 8));
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v18 = (char *)&v46 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = swift_getAssociatedTypeWitness(0LL, a6);
  uint64_t v51 = *(void *)(v21 - 8);
  uint64_t v52 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  unint64_t v47 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v46 - v24;
  uint64_t v26 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v26) {
    return static Array._allocateUninitialized(_:)(0LL, a4);
  }
  uint64_t v27 = a4;
  Swift::Int v28 = v26;
  uint64_t v63 = ContiguousArray.init()(v27);
  uint64_t v53 = type metadata accessor for ContiguousArray(0LL, v27);
  ContiguousArray.reserveCapacity(_:)(v28);
  uint64_t v55 = a6;
  uint64_t result = dispatch thunk of Collection.startIndex.getter(a3, a6);
  if ((v28 & 0x8000000000000000LL) == 0)
  {
    Swift::Int v30 = v28;
    uint64_t v54 = v20;
    while (v30)
    {
      Swift::Int v60 = v30;
      uint64_t v31 = a3;
      uint64_t v32 = a3;
      uint64_t v33 = v9;
      uint64_t v34 = v55;
      uint64_t v35 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v62, v25, v31, v55);
      uint64_t v36 = *(void (**)(char *))(v15 + 16);
      uint64_t v37 = v15;
      uint64_t v38 = AssociatedTypeWitness;
      v36(v18);
      v35(v62, 0LL);
      uint64_t v39 = v25;
      uint64_t v40 = v18;
      uint64_t v41 = v54;
      uint64_t v42 = v61;
      v57(v40, v59);
      if (v42)
      {
        (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v38);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v52);
        swift_release(v63);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32))(v50, v59, v49);
      }

      uint64_t v61 = 0LL;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v38);
      ContiguousArray.append(_:)(v41, v53);
      uint64_t result = dispatch thunk of Collection.formIndex(after:)(v39, v32, v34);
      Swift::Int v30 = v60 - 1;
      uint64_t v9 = v33;
      a3 = v32;
      uint64_t v15 = v37;
      uint64_t v18 = v40;
      uint64_t v25 = v39;
      if (v60 == 1)
      {
        uint64_t v44 = v51;
        uint64_t v43 = v52;
        uint64_t v45 = v47;
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v47, v39, v52);
        _expectEnd<A>(of:is:)(v9, v45, v32, v55);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v43);
        return v63;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_5C8D0(uint64_t a1, uint64_t a2)
{
  v2[7] = a1;
  _BYTE v2[8] = a2;
  uint64_t v3 = sub_8908();
  void v2[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[10] = v4;
  v2[11] = sub_8860(v4);
  sub_8910();
  return sub_887C();
}

uint64_t sub_5C914()
{
  uint64_t v2 = type metadata accessor for ParameterResolutionRecord(0LL, *(void *)(*(void *)(v0 + 64) + 16LL));
  uint64_t v3 = (void *)ParameterResolutionRecord.result.getter(v2);
  id v4 = [v3 disambiguationItems];

  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, (char *)&type metadata for Any + 8);
  __int128 v6 = sub_39FF4(v5);
  sub_17C4C();
  if (v6)
  {
    sub_6358(&qword_8D060);
    BasicDisambiguationItemContainer.__allocating_init(_:_:)(v6, 0LL);
    sub_88B8();
    uint64_t v7 = sub_B204();
    return v8(v7);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 80);
    uint64_t v11 = *(void *)(v0 + 88);
    uint64_t v12 = *(void *)(v0 + 72);
    uint64_t v13 = type metadata accessor for HealthFlowError();
    sub_1400C(v13);
    uint64_t v14 = sub_BD3C(6u);
    uint64_t v15 = Logger.health.unsafeMutableAddressor(v14);
    sub_8894(v15, v0 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v11, v15, v12);
    uint64_t v16 = swift_retain_n(v14, 2LL);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    BOOL v19 = sub_5E884(v18);
    uint64_t v21 = *(void *)(v0 + 80);
    uint64_t v20 = *(void *)(v0 + 88);
    uint64_t v22 = *(void *)(v0 + 72);
    if (v19)
    {
      uint64_t v41 = *(void *)(v0 + 80);
      uint64_t v23 = *(void *)(v0 + 64);
      uint64_t v24 = sub_88B0(22LL);
      uint64_t v40 = v22;
      uint64_t v25 = (void *)sub_88B0(8LL);
      uint64_t v42 = sub_88B0(32LL);
      uint64_t v39 = v42;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v26 = sub_19A08(v23);
      unint64_t v28 = v27;
      *(void *)(v0 + 4sub_4A488(*(void **)(v2 + 152), 0) = sub_173E0(v26, v27, &v42);
      sub_5E8AC(v0 + 40, v0 + 48);
      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v24 + 1_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 2112;
      uint64_t v29 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      uint64_t v30 = sub_13FF8(v13, v29);
      uint64_t *v31 = v14;
      swift_retain(v14);
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError(v30);
      *(void *)(v0 + 48) = v32;
      sub_5E8AC(v0 + 48, v0 + 56);
      *uint64_t v25 = v32;
      sub_14004(v14);
      sub_5E878(&dword_0, v17, v1, "%s Error: %@");
      sub_6358(&qword_8C360);
      sub_B334((uint64_t)v25);
      sub_8870((uint64_t)v25);
      sub_B334(v39);
      sub_8870(v39);
      sub_8870(v24);

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v20, v40);
    }

    else
    {
      sub_14004(v14);

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }

    uint64_t v33 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v34 = sub_13FF8(v13, v33);
    *uint64_t v35 = v14;
    swift_willThrow(v34, v35, v36, v37, v38);
    sub_2C028();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_5CC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[16] = a3;
  v5[17] = a5;
  v5[14] = a1;
  v5[15] = a2;
  uint64_t v6 = *(void *)(a5 + 16);
  v5[18] = v6;
  uint64_t v7 = type metadata accessor for IntentPromptAnswer(0LL, v6);
  v5[19] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[20] = v8;
  v5[21] = sub_8860(v8);
  uint64_t v9 = type metadata accessor for Parse(0LL);
  v5[22] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[23] = v10;
  _BYTE v5[24] = sub_8860(v10);
  uint64_t v11 = type metadata accessor for Input(0LL);
  v5[25] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[26] = v12;
  v5[27] = sub_8860(v12);
  uint64_t v13 = sub_8908();
  v5[28] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[29] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[30] = swift_task_alloc(v15);
  v5[31] = swift_task_alloc(v15);
  sub_8910();
  return sub_887C();
}

uint64_t sub_5CD20(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t)(v1 + 2);
  uint64_t v4 = v1[31];
  uint64_t v5 = v1[29];
  uint64_t v7 = v2[27];
  uint64_t v6 = v2[28];
  uint64_t v8 = v2[25];
  uint64_t v9 = v2[26];
  uint64_t v10 = v2[15];
  uint64_t v11 = Logger.health.unsafeMutableAddressor(a1);
  sub_8894(v11, v3);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v12(v4, v11, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v10, v8);
  uint64_t v13 = (os_log_s *)sub_1F200();
  os_log_type_t v14 = static os_log_type_t.debug.getter(v13);
  uint64_t v113 = v12;
  uint64_t v115 = v11;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v107 = v2[29];
    uint64_t v15 = v2[27];
    uint64_t v109 = v2[28];
    uint64_t v111 = v2[31];
    uint64_t v16 = v2[25];
    uint64_t v101 = v2[26];
    uint64_t v17 = v2[17];
    uint64_t v18 = sub_88B0(22LL);
    uint64_t v105 = sub_88B0(64LL);
    v118[0] = v105;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v19 = sub_19A08(v17);
    v2[12] = sub_5E8B4(v19, v20, v21, v22, v23, v24, v25, v26, v99, v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 12, v2 + 13);
    sub_17C4C();
    *(_WORD *)(v18 + 1_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 2080;
    uint64_t v27 = sub_17A10( (unint64_t *)&unk_8F410,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v16, v27);
    unint64_t v30 = v29;
    v2[13] = sub_5E8B4(v28, v29, v31, v32, v33, v34, v35, v36, v100, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 13, v2 + 14);
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v15, v16);
    sub_5E878(&dword_0, v13, v14, "%s Received parse: %s");
    swift_arrayDestroy(v105, 2LL);
    sub_8870(v105);
    sub_8870(v18);

    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v107 + 8);
    uint64_t v38 = v37(v111, v109);
  }

  else
  {
    uint64_t v39 = v2[31];
    uint64_t v41 = v2[28];
    uint64_t v40 = v2[29];
    sub_5E8A4(v2[26]);

    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8);
    uint64_t v38 = v37(v39, v41);
  }

  uint64_t v42 = (os_log_s *)v2[24];
  uint64_t v44 = v2[17];
  uint64_t v43 = (uint8_t *)v2[18];
  Input.parse.getter(v38);
  uint64_t v45 = *(void *)(v44 + 32);
  sub_3124C(v42, (uint64_t)v43, v43, (void *)v45);
  unint64_t v47 = v46;
  uint64_t v49 = v2[18];
  sub_5E8A4(v2[23]);
  uint64_t v50 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v45 + 24))(v49, v45);
  uint64_t v112 = v47;
  if (v50)
  {
    uint64_t v51 = v50;
    id v52 = [v50 spokenPhrase];

    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    uint64_t v55 = v54;
  }

  else
  {
    uint64_t v53 = 0LL;
    uint64_t v55 = 0LL;
  }

  uint64_t v56 = sub_6358(&qword_8D048);
  _BYTE v2[8] = PaginatedItemContainer.items.getter(v56);
  uint64_t v57 = swift_task_alloc(32LL);
  *(void *)(v57 + sub_14C98(v0 + 16) = v53;
  *(void *)(v57 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v55;
  uint64_t v58 = sub_6358(&qword_90BF8);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v58);
  Sequence.first(where:)(sub_5E814, v57, v58, WitnessTable);
  swift_task_dealloc(v57);
  swift_bridgeObjectRelease(v2[8]);
  swift_bridgeObjectRelease(v55);
  Swift::Int v60 = (void *)v2[9];
  if (v60)
  {
    uint64_t v114 = v2[27];
    uint64_t v116 = v2[24];
    uint64_t v62 = v2[20];
    uint64_t v61 = v2[21];
    uint64_t v64 = v2[18];
    uint64_t v63 = v2[19];
    v118[3] = sub_AF38(0LL, (unint64_t *)&qword_8C358, &OBJC_CLASS___INSpeakableString_ptr);
    v118[0] = v60;
    id v65 = v60;
    id v66 = v112;
    IntentPromptAnswer.init(answeredValue:updatedIntent:)(v118, v66, v64);
    static DisambiguationResult.chosenItem(_:)(v61, v63);

    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
    sub_B16C();
    sub_B15C();
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    sub_2C028();
    uint64_t v67 = (uint64_t (*)(void))v2[1];
  }

  else
  {
    uint64_t v69 = v2[30];
    uint64_t v70 = v2[28];
    uint64_t v71 = type metadata accessor for HealthFlowError();
    sub_1400C(v71);
    uint64_t v72 = sub_BD3C(5u);
    sub_8894(v115, (uint64_t)(v2 + 5));
    v113(v69, v115, v70);
    swift_retain_n(v72, 2LL);
    uint64_t v73 = (os_log_s *)sub_1F200();
    os_log_type_t v74 = static os_log_type_t.error.getter(v73);
    BOOL v75 = sub_5E884(v74);
    uint64_t v76 = v2[30];
    uint64_t v77 = v2[28];
    if (v75)
    {
      uint64_t v117 = v2[28];
      uint64_t v106 = v71;
      uint64_t v78 = v2[17];
      uint64_t v79 = sub_88B0(22LL);
      uint64_t v108 = (void *)sub_88B0(8LL);
      uint64_t v110 = sub_88B0(32LL);
      v118[0] = v110;
      *(_DWORD *)uint64_t v79 = 136315394;
      uint64_t v80 = sub_19A08(v78);
      v2[10] = sub_5E8B4(v80, v81, v82, v83, v84, v85, v86, v87, v99, (uint64_t)(v2 + 10));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v104, v2 + 11);
      sub_17C4C();
      *(_WORD *)(v79 + 1_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = 2112;
      uint64_t v88 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
      uint64_t v89 = v106;
      uint64_t v90 = sub_13FF8(v106, v88);
      *uint64_t v91 = v72;
      swift_retain(v72);
      uint64_t v92 = _swift_stdlib_bridgeErrorToNSError(v90);
      v2[11] = v92;
      sub_5E8AC((uint64_t)(v2 + 11), (uint64_t)(v2 + 12));
      void *v108 = v92;
      sub_14004(v72);
      sub_5E878(&dword_0, v73, (os_log_type_t)v53, "%s Error: %@");
      sub_6358(&qword_8C360);
      sub_B334((uint64_t)v108);
      sub_8870((uint64_t)v108);
      sub_B334(v110);
      sub_8870(v110);
      sub_8870(v79);

      v37(v76, v117);
    }

    else
    {
      sub_14004(v72);

      v37(v76, v77);
      uint64_t v89 = v71;
    }

    uint64_t v93 = sub_17A10( (unint64_t *)&qword_8BE70,  (uint64_t (*)(uint64_t))type metadata accessor for HealthFlowError,  (uint64_t)&unk_61B3C);
    uint64_t v94 = sub_13FF8(v89, v93);
    *uint64_t v95 = v72;
    swift_willThrow(v94, v95, v96, v97, v98);

    uint64_t v48 = v2[27];
    swift_task_dealloc(v2[31]);
    sub_2C028();
    swift_task_dealloc(v48);
    sub_88B8();
    sub_88D0();
    uint64_t v67 = (uint64_t (*)(void))v2[1];
  }

  return v67();
}

uint64_t sub_5D3C0(id *a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*a1 spokenPhrase];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  if (a3)
  {
    if (v6 == a2 && v8 == a3) {
      LOBYTE(a3) = 1;
    }
    else {
      LOBYTE(a3) = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, a2, a3, 0LL);
    }
  }

  swift_bridgeObjectRelease(v8);
  return a3 & 1;
}

uint64_t sub_5D464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a1;
  v5[8] = a2;
  uint64_t v6 = sub_6358(&qword_8C348);
  v5[11] = sub_8860(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v5[12] = sub_8860(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v5[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[14] = v9;
  v5[15] = sub_8860(v9);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v5[16] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[17] = v11;
  v5[18] = sub_8860(v11);
  uint64_t v12 = sub_8908();
  v5[19] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[20] = v13;
  v5[21] = sub_8860(v13);
  sub_8910();
  return sub_887C();
}

uint64_t sub_5D510(uint64_t a1)
{
  uint64_t v3 = v1[20];
  uint64_t v2 = v1[21];
  uint64_t v4 = v1[19];
  uint64_t v5 = Logger.health.unsafeMutableAddressor(a1);
  sub_8894(v5, (uint64_t)(v1 + 2));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = (os_log_s *)sub_1F200();
  os_log_type_t v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v1[20];
    uint64_t v34 = v1[21];
    uint64_t v9 = v1[19];
    uint64_t v10 = v1[9];
    uint64_t v11 = (uint8_t *)sub_88B0(12LL);
    uint64_t v12 = sub_88B0(32LL);
    uint64_t v35 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_19A08(v10);
    unint64_t v15 = v14;
    v1[6] = sub_173E0(v13, v14, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 6, v1 + 7);
    swift_bridgeObjectRelease(v15);
    _os_log_impl(&dword_0, v6, v7, "%s Generating prompt to disambiguate workoutName", v11, 0xCu);
    sub_B334(v12);
    sub_8870(v12);
    sub_8870((uint64_t)v11);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v34, v9);
  }

  else
  {
    uint64_t v17 = v1[20];
    uint64_t v16 = v1[21];
    uint64_t v18 = v1[19];

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }

  uint64_t v19 = v1[18];
  uint64_t v20 = v1[16];
  uint64_t v21 = v1[11];
  uint64_t v22 = v1[12];
  uint64_t v33 = v1[17];
  uint64_t v23 = sub_6358(&qword_8D048);
  uint64_t v24 = PaginatedItemContainer.items.getter(v23);
  v1[5] = v24;
  uint64_t v25 = sub_6358(&qword_90BF8);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v25);
  uint64_t v28 = sub_5C580( (void (*)(char *, char *))sub_5DA54,  0LL,  v25,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v27);
  swift_bridgeObjectRelease(v24);
  sub_34580(v28);
  uint64_t v29 = swift_bridgeObjectRelease(v28);
  static DialogPhase.clarification.getter(v29);
  OutputGenerationManifest.init(dialogPhase:_:)(v22, nullsub_1, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v21, v19, v20);
  sub_8760(v21, 0LL, 1LL, v20);
  OutputGenerationManifest.nlContextUpdate.setter(v21);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  uint64_t v30 = PaginatedItemContainer.items.getter(v23);
  v1[22] = v30;
  uint64_t v31 = (void *)swift_task_alloc(dword_90C04);
  v1[23] = v31;
  void *v31 = v1;
  v31[1] = sub_5D7D8;
  return sub_5DAB8(v30, v1[9]);
}

uint64_t sub_5D7D8(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 184LL);
  v3[24] = a1;
  v3[25] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v3[22]);
  sub_8910();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_5D848()
{
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = v1[38];
  uint64_t v3 = v1[39];
  sub_8734(v1 + 35, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  v0[26] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_5D8C8;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( v0[7],  v0[24],  v0[15],  v2,  v3);
}

uint64_t sub_5D8C8()
{
  *(void *)(v1 + sub_14C58(v0 + 216) = v0;
  swift_task_dealloc(v2);
  sub_8910();
  return sub_887C();
}

uint64_t sub_5D914()
{
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 112);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_2C028();
  sub_88B8();
  swift_task_dealloc(v4);
  sub_B16C();
  sub_B164();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5D9B4()
{
  return sub_B0E0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5DA00()
{
  sub_5E858();
  sub_5E894();
  sub_88B8();
  sub_88D0();
  sub_B15C();
  sub_B16C();
  sub_B164();
  return sub_B0E0(*(uint64_t (**)(void))(v0 + 8));
}

void sub_5DA54(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 spokenPhrase];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_5DAB8(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  sub_8910();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_5DAD8()
{
  uint64_t v1 = sub_5E048(*(void *)(v0 + 136), *(void *)(v0 + 144));
  *(void *)(v0 + 16sub_4A488(*(void **)(v2 + 152), 0) = v1;
  uint64_t v2 = sub_AF38(0LL, (unint64_t *)&qword_8C888, &OBJC_CLASS___INCancelWorkoutIntent_ptr);
  if (sub_5E84C(v2))
  {
    uint64_t v3 = *sub_8734(*(void **)(v0 + 152), *(void *)(*(void *)(v0 + 152) + 24LL));
    uint64_t v4 = (void *)sub_5E830((uint64_t)&unk_8DEE8);
    *(void *)(v0 + 168) = v4;
    uint64_t v5 = sub_5DD14;
LABEL_11:
    *uint64_t v4 = v0;
    v4[1] = v5;
    return v11(0LL, 1LL, 1LL, 0LL, v1, v3);
  }

  uint64_t v6 = sub_AF38(0LL, (unint64_t *)&qword_8C728, &OBJC_CLASS___INEndWorkoutIntent_ptr);
  if (sub_5E84C(v6))
  {
    uint64_t v3 = *sub_8734((void *)(*(void *)(v0 + 152) + 40LL), *(void *)(*(void *)(v0 + 152) + 64LL));
    uint64_t v4 = (void *)sub_5E830((uint64_t)&unk_901E8);
    *(void *)(v0 + 18_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v4;
    uint64_t v5 = sub_5DDB8;
    goto LABEL_11;
  }

  uint64_t v7 = sub_AF38(0LL, (unint64_t *)&qword_8C7A8, &OBJC_CLASS___INPauseWorkoutIntent_ptr);
  if (sub_5E84C(v7))
  {
    uint64_t v3 = *sub_8734((void *)(*(void *)(v0 + 152) + 80LL), *(void *)(*(void *)(v0 + 152) + 104LL));
    uint64_t v4 = (void *)sub_5E830((uint64_t)&unk_90A50);
    *(void *)(v0 + 20sub_4A488(*(void **)(v2 + 152), 0) = v4;
    uint64_t v5 = sub_5DE5C;
    goto LABEL_11;
  }

  uint64_t v8 = sub_AF38(0LL, (unint64_t *)&qword_8BE58, &OBJC_CLASS___INResumeWorkoutIntent_ptr);
  if (sub_5E84C(v8))
  {
    uint64_t v3 = *sub_8734((void *)(*(void *)(v0 + 152) + 120LL), *(void *)(*(void *)(v0 + 152) + 144LL));
    uint64_t v4 = (void *)sub_5E830((uint64_t)&unk_90778);
    *(void *)(v0 + sub_14C58(v0 + 216) = v4;
    uint64_t v5 = sub_5DF00;
    goto LABEL_11;
  }

  uint64_t v9 = sub_AF38(0LL, (unint64_t *)&qword_8C828, &OBJC_CLASS___INStartWorkoutIntent_ptr);
  if (sub_5E84C(v9))
  {
    uint64_t v3 = *sub_8734((void *)(*(void *)(v0 + 152) + 160LL), *(void *)(*(void *)(v0 + 152) + 184LL));
    uint64_t v4 = (void *)sub_5E830((uint64_t)&unk_904F8);
    *(void *)(v0 + 23_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v4;
    uint64_t v5 = sub_5DFA4;
    goto LABEL_11;
  }

  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000016LL,  0x8000000000068B10LL,  "HealthFlowDelegatePlugin/WorkoutDisambiguationStrategyAsync.swift",  65LL,  2LL,  116LL,  0);
}

uint64_t sub_5DD14()
{
  v3[2] = v1;
  v3[3] = v2;
  _OWORD v3[4] = v0;
  sub_B2D4();
  *(void *)(v4 + 176) = v0;
  swift_task_dealloc(v5);
  sub_8910();
  return sub_887C();
}

uint64_t sub_5DD68()
{
  uint64_t v0 = sub_B204();
  return sub_26268(v0, v1);
}

uint64_t sub_5DD90()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5DDB8()
{
  v3[5] = v1;
  v3[6] = v2;
  v3[7] = v0;
  sub_B2D4();
  *(void *)(v4 + 19_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 2) = v0;
  swift_task_dealloc(v5);
  sub_8910();
  return sub_887C();
}

uint64_t sub_5DE0C()
{
  uint64_t v0 = sub_B204();
  return sub_26268(v0, v1);
}

uint64_t sub_5DE34()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5DE5C()
{
  v3[8] = v1;
  void v3[9] = v2;
  v3[10] = v0;
  sub_B2D4();
  *(void *)(v4 + 208) = v0;
  swift_task_dealloc(v5);
  sub_8910();
  return sub_887C();
}

uint64_t sub_5DEB0()
{
  uint64_t v0 = sub_B204();
  return sub_26268(v0, v1);
}

uint64_t sub_5DED8()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5DF00()
{
  v3[11] = v1;
  v3[12] = v2;
  v3[13] = v0;
  sub_B2D4();
  *(void *)(v4 + 22_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v0;
  swift_task_dealloc(v5);
  sub_8910();
  return sub_887C();
}

uint64_t sub_5DF54()
{
  uint64_t v0 = sub_B204();
  return sub_26268(v0, v1);
}

uint64_t sub_5DF7C()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5DFA4()
{
  v3[14] = v1;
  v3[15] = v2;
  v3[16] = v0;
  sub_B2D4();
  *(void *)(v4 + 24sub_4A488(*(void **)(v2 + 152), 0) = v0;
  swift_task_dealloc(v5);
  sub_8910();
  return sub_887C();
}

uint64_t sub_5DFF8()
{
  uint64_t v0 = sub_B204();
  return sub_26268(v0, v1);
}

uint64_t sub_5E020()
{
  return sub_26274(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5E048(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  v7[1] = *(_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v2 = sub_6358(&qword_90BF8);
  uint64_t v3 = type metadata accessor for DialogStringPair(0LL);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  return sub_5C580( (void (*)(char *, char *))sub_5E7F4,  (uint64_t)v7,  v2,  v3,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v5);
}

uint64_t sub_5E0E4@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = sub_6358(&qword_8C258);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = INSpeakableString.toSpeakableString.getter(v10);
  uint64_t v14 = SpeakableString.print.getter(v13);
  uint64_t v16 = v15;
  uint64_t v17 = a1 + 30;
  uint64_t v18 = a1[33];
  uint64_t v19 = a1[34];
  sub_8734(v17, v18);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v19 + 8))(v35, v18, v19);
  uint64_t v20 = sub_2C7E0(v35, v14, v16);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(v16);
  _s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v35);
  if (v22)
  {
    String.toSpeakableString.getter(v20, v22);
    swift_bridgeObjectRelease(v22);
    uint64_t v23 = 0LL;
  }

  else
  {
    uint64_t v23 = 1LL;
  }

  sub_8760((uint64_t)v8, v23, 1LL, v9);
  uint64_t v24 = type metadata accessor for DialogStringPair.Builder(0LL);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v25 = DialogStringPair.Builder.init()();
  uint64_t v26 = v33;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v6, v12, v9);
  sub_8760((uint64_t)v6, 0LL, 1LL, v9);
  uint64_t v27 = dispatch thunk of DialogStringPair.Builder.withFirst(_:)(v6);
  swift_release(v25);
  sub_26220((uint64_t)v6);
  uint64_t v28 = dispatch thunk of DialogStringPair.Builder.withSecond(_:)(v8);
  uint64_t v29 = swift_release(v27);
  uint64_t v30 = dispatch thunk of DialogStringPair.Builder.build()(v29);
  swift_release(v28);
  sub_26220((uint64_t)v8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v12, v9);
  *uint64_t v34 = v30;
  return result;
}

uint64_t sub_5E324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + sub_14C98(v0 + 16) = a1;
  uint64_t v6 = (void *)swift_task_alloc(dword_90C14);
  *(void *)(v3 + 2_s24HealthFlowDelegatePlugin33WorkoutAppSelectionTrainingLoggerVwxx_0(v0 + 4) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_5E37C;
  return sub_5C8D0(a2, a3);
}

uint64_t sub_5E37C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1) {
    **(void **)(v4 + sub_14C98(v0 + 16) = a1;
  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_5E3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(dword_90C0C);
  *(void *)(v5 + sub_14C98(v0 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_B0C4;
  return sub_5CC60(a1, a2, a3, v11, a5);
}

uint64_t sub_5E448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_90BF4);
  *(void *)(v4 + sub_14C98(v0 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_B0C4;
  return sub_5D464(a1, a2, v9, a4);
}

uint64_t sub_5E4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)[1]);
  *(void *)(v5 + sub_14C98(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_B0C4;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_5E534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)[1]);
  *(void *)(v5 + sub_14C98(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_B0C4;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_5E5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)[1]);
  *(void *)(v4 + sub_14C98(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_B0C4;
  return NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t sub_5E634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)[1]);
  *(void *)(v4 + sub_14C98(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_B0C4;
  return NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t sub_5E6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + sub_14C98(v0 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_AEC8;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_5E748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)[1]);
  *(void *)(v7 + sub_14C98(v0 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = sub_B0C4;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_5E7E4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_67600, a1);
}

uint64_t sub_5E7F4@<X0>(uint64_t *a1@<X8>)
{
  return sub_5E0E4(*(void **)(v1 + 40), a1);
}

uint64_t sub_5E814(id *a1)
{
  return sub_5D3C0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_5E830@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_5E844()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 160));
}

uint64_t sub_5E84C(uint64_t a1)
{
  return swift_dynamicCastMetatype(v1, a1);
}

uint64_t sub_5E858()
{
  return (*(uint64_t (**)(void, void))(v0[14] + 8LL))(v0[15], v0[13]);
}

void sub_5E878(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

BOOL sub_5E884(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_5E894()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_5E8A4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_5E8AC(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_5E8B4( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_173E0(a1, a2, (uint64_t *)va);
}

id objc_msgSend__append_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_append:");
}

id objc_msgSend__append_alt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_append:alt:");
}

id objc_msgSend__translateWord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_translateWord:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByCharactersInSet:");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSubstringsInRange:options:usingBlock:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_punctuationCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 punctuationCharacterSet];
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}