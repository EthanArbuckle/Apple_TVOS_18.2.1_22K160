void *sub_52DC(uint64_t a1)
{
  return sub_52F0(a1);
}

void *sub_52F0(uint64_t a1)
{
  if (qword_FB1B8 != -1) {
    swift_once(&qword_FB1B8, sub_491D8);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_5474(v2, (uint64_t)qword_FD210);
  v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)sub_1B9DC();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_0, v4, v5, "TimerFlowDelegatePlugin: called findFlowForX()", v6, 2u);
    sub_1B904((uint64_t)v6);
  }

  type metadata accessor for ApplicationContext(0LL);
  ((void (*)(void))static ApplicationContext.shared.getter)();
  ApplicationContext.deviceState.getter(v18);
  sub_1BC50();
  uint64_t v7 = v19;
  uint64_t v8 = v20;
  sub_8CFC(v18, v19);
  LOBYTE(v7) = DeviceState.isPhoneOrPad.getter(v7, v8);
  uint64_t v9 = _s20HandleIntentStrategyVwxx_0(v18);
  if ((v7 & 1) != 0)
  {
    type metadata accessor for TimerSessionManager(0LL);
    static TimerSessionManager.shared.getter(v18);
    uint64_t v9 = _s20HandleIntentStrategyVwxx_0(v18);
  }

  static ApplicationContext.shared.getter(v9);
  ApplicationContext.deviceState.getter(v18);
  sub_1BC50();
  sub_319D4(v21);
  sub_5548( a1,  v10,  v11,  v12,  v13,  v14,  v15,  v16,  v18[0],  v18[1],  v18[2],  v19,  v20,  v21[0],  v21[1],  v21[2],  v21[3],  v21[4],  v21[5],  v21[6]);
  return sub_ACD8(v18);
}

uint64_t sub_5474(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void sub_548C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_17DD4();
}

uint64_t sub_54CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for TimerFlowProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC23TimerFlowDelegatePlugin17TimerFlowProvider);
}

uint64_t sub_5530(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_5548( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v282 = v20;
  uint64_t v283 = v24;
  v26 = v25;
  uint64_t v27 = type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
  sub_43628(v27, (uint64_t)&a16);
  uint64_t v273 = v28;
  sub_17B6C();
  __chkstk_darwin(v29);
  sub_433C4();
  uint64_t v253 = v30;
  sub_433B0();
  __chkstk_darwin(v31);
  sub_436A0();
  uint64_t v272 = v32;
  uint64_t v33 = sub_1E818();
  uint64_t v34 = type metadata accessor for Parse.DirectInvocation(v33);
  uint64_t v276 = *(void *)(v34 - 8);
  sub_17B6C();
  __chkstk_darwin(v35);
  sub_433C4();
  uint64_t v255 = v36;
  sub_433B0();
  __chkstk_darwin(v37);
  sub_43404();
  v261 = v38;
  sub_433B0();
  __chkstk_darwin(v39);
  sub_436A0();
  v275 = v40;
  uint64_t v41 = sub_1E818();
  uint64_t v42 = type metadata accessor for Siri_Nlu_External_UserStatedTask(v41);
  sub_43628(v42, (uint64_t)&v290);
  uint64_t v258 = v43;
  sub_17B6C();
  __chkstk_darwin(v44);
  sub_17D14();
  uint64_t v257 = v45;
  uint64_t v46 = sub_1E818();
  uint64_t v47 = type metadata accessor for Siri_Nlu_External_UserDialogAct(v46);
  sub_43628(v47, (uint64_t)&v295);
  uint64_t v277 = v48;
  sub_17B6C();
  __chkstk_darwin(v49);
  sub_17D14();
  uint64_t v286 = v50;
  uint64_t v51 = sub_1E818();
  uint64_t v52 = type metadata accessor for Siri_Nlu_External_UserParse(v51);
  sub_43628(v52, (uint64_t)&v294);
  uint64_t v264 = v53;
  sub_17B6C();
  __chkstk_darwin(v54);
  sub_17D14();
  uint64_t v263 = v55;
  sub_67C4(&qword_FD5E0);
  sub_1BCE0();
  __chkstk_darwin(v56);
  sub_17D14();
  v262 = (uint8_t *)v57;
  uint64_t v58 = sub_1E818();
  uint64_t v59 = type metadata accessor for Siri_Nlu_External_UsoGraph(v58);
  sub_43628(v59, (uint64_t)&v291);
  uint64_t v268 = v60;
  sub_17B6C();
  __chkstk_darwin(v61);
  sub_433C4();
  uint64_t v256 = v62;
  sub_433B0();
  __chkstk_darwin(v63);
  sub_436A0();
  uint64_t v267 = v64;
  uint64_t v65 = sub_1E818();
  uint64_t v66 = type metadata accessor for USOParse(v65);
  sub_43628(v66, (uint64_t)&a13);
  uint64_t v270 = v67;
  sub_17B6C();
  __chkstk_darwin(v68);
  sub_17D14();
  uint64_t v269 = v69;
  uint64_t v70 = sub_1E818();
  type metadata accessor for TimerNLv3Intent(v70);
  sub_1BCE0();
  __chkstk_darwin(v71);
  sub_17D14();
  uint64_t v280 = v72;
  uint64_t v73 = sub_1E818();
  uint64_t v289 = type metadata accessor for NLIntent(v73);
  uint64_t v281 = *(void *)(v289 - 8);
  sub_17B6C();
  __chkstk_darwin(v74);
  sub_433C4();
  uint64_t v274 = v75;
  sub_433B0();
  __chkstk_darwin(v76);
  sub_43404();
  uint64_t v278 = v77;
  sub_433B0();
  __chkstk_darwin(v78);
  uint64_t v279 = (uint64_t)&v251 - v79;
  sub_433B0();
  __chkstk_darwin(v80);
  sub_436A0();
  v284 = (void (*)(uint64_t, uint64_t))v81;
  uint64_t v82 = sub_1E818();
  uint64_t v83 = type metadata accessor for Parse(v82);
  uint64_t v84 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  v287 = (os_log_s **)((char *)&v251 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_433B0();
  uint64_t v87 = __chkstk_darwin(v86);
  v89 = (char *)&v251 - v88;
  __chkstk_darwin(v87);
  v91 = (char *)&v251 - v90;
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v92 = sub_1BD34();
  v93 = (os_log_s *)sub_5474(v92, (uint64_t)qword_FD2E0);
  uint64_t v285 = (uint64_t)v26;
  uint64_t v94 = sub_4C4B4((uint64_t)v91, (uint64_t)v26);
  v288 = v93;
  Logger.logObject.getter(v94);
  os_log_type_t v95 = sub_1BCD0();
  v96 = (uint8_t *)&unk_C2000;
  if (sub_2B854(v95))
  {
    uint64_t v97 = sub_1BA1C(12LL);
    uint64_t v254 = v34;
    v98 = (uint8_t *)v97;
    v26 = (void *)sub_1BA1C(32LL);
    *(void *)&__int128 v293 = v26;
    *(_DWORD *)v98 = 136315138;
    v96 = v98 + 12;
    v252 = v98 + 4;
    sub_4C4B4((uint64_t)v89, (uint64_t)v91);
    uint64_t v99 = String.init<A>(describing:)();
    unint64_t v101 = v100;
    uint64_t v102 = sub_4C664(v99, v100);
    uint64_t v103 = sub_4C3E8(v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, v104, v252, v98 + 12);
    swift_bridgeObjectRelease(v101);
    sub_4C638();
    sub_1E7D8(&dword_0, v93, v21, "Running timer flow with parse: %s", v98);
    sub_1E7D0((uint64_t)v26);
    sub_1B904((uint64_t)v26);
    uint64_t v105 = (uint64_t)v98;
    uint64_t v34 = v254;
    sub_1B904(v105);
  }

  else
  {
    sub_4C638();
  }

  v106 = v287;
  sub_4C4B4((uint64_t)v287, v285);
  int v107 = (*(uint64_t (**)(os_log_s **, uint64_t))(v84 + 88))(v106, v83);
  uint64_t v108 = v286;
  if (v107 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_4C3C4();
    uint64_t v109 = v281;
    v110 = v284;
    uint64_t v111 = v289;
    (*(void (**)(void (*)(uint64_t, uint64_t), os_log_s **, uint64_t))(v281 + 32))(v284, v106, v289);
    v112 = *(os_log_s **)(v109 + 16);
    sub_4C4B4(v279, (uint64_t)v110);
    v113 = (os_log_s *)sub_4C5CC();
    os_log_type_t v114 = static os_log_type_t.default.getter();
    if (sub_4C6CC(v113))
    {
      v115 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v116 = sub_1BA1C(32LL);
      *(void *)&__int128 v293 = v116;
      *(_DWORD *)v115 = 136315138;
      v110 = (void (*)(uint64_t, uint64_t))(v115 + 12);
      v288 = v112;
      sub_4C2F8(&qword_FD5E8, (uint64_t (*)(uint64_t))&type metadata accessor for NLIntent);
      uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter(v111, v117);
      uint64_t v120 = sub_4C664(v118, v119);
      uint64_t v121 = sub_4C3E8(v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v122, v115 + 4, v115 + 12);
      sub_18034();
      sub_4C5A4();
      sub_1E7D8(&dword_0, v113, v114, "Receiving timer NLv3 intent parse: %s", v115);
      sub_1E7D0(v116);
      sub_1B904(v116);
      sub_1B904((uint64_t)v115);
    }

    else
    {
      sub_4C5A4();
    }

    uint64_t v144 = (uint64_t)v284;
    uint64_t v145 = v280;
    sub_4C4B4(v280, (uint64_t)v284);
    sub_4972C();
    sub_1E6E4(v145);
    v110(v144, v111);
    goto LABEL_57;
  }

  if (v107 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_4C3C4();
    v123 = *(os_log_s **)((char *)v106 + *(int *)(sub_67C4((uint64_t *)&unk_FCC60) + 48));
    uint64_t v124 = v281;
    uint64_t v125 = v278;
    v126 = v106;
    uint64_t v127 = v289;
    uint64_t v128 = (*(uint64_t (**)(uint64_t, os_log_s **, uint64_t))(v281 + 32))(v278, v126, v289);
    v129 = (void *)Parse.ServerConversion.siriKitIntent.getter(v128);
    uint64_t v130 = v274;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16))(v274, v125, v127);
    id v131 = v129;
    v132 = (os_log_s *)sub_4C3A0();
    os_log_type_t v133 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v132, v133))
    {
      uint64_t v134 = sub_1BA1C(22LL);
      uint64_t v135 = sub_1BA1C(8LL);
      v288 = v123;
      v136 = (void *)v135;
      v287 = (os_log_s **)sub_1BA1C(32LL);
      *(void *)&__int128 v293 = v287;
      *(_DWORD *)uint64_t v134 = 136315394;
      sub_4C2F8(&qword_FD5E8, (uint64_t (*)(uint64_t))&type metadata accessor for NLIntent);
      uint64_t v138 = dispatch thunk of CustomStringConvertible.description.getter(v289, v137);
      uint64_t v291 = sub_4C664(v138, v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v291, &v292, v134 + 4, v134 + 12);
      sub_18034();
      v140 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
      v140(v130, v289);
      *(_WORD *)(v134 + 12) = 2112;
      uint64_t v291 = (uint64_t)v131;
      id v141 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v291, &v292, v134 + 14, v134 + 22);
      void *v136 = v131;

      _os_log_impl( &dword_0,  v132,  v133,  "Timer NLv3 intent is: %s, Timer SiriKit intent is: %@",  (uint8_t *)v134,  0x16u);
      sub_67C4((uint64_t *)&unk_FD5F0);
      sub_1E7D0((uint64_t)v136);
      uint64_t v127 = v289;
      sub_1B904((uint64_t)v136);
      uint64_t v142 = (uint64_t)v287;
      sub_1E7D0((uint64_t)v287);
      sub_1B904(v142);
      uint64_t v143 = v134;
      uint64_t v125 = v278;
      sub_1B904(v143);
    }

    else
    {
      v140 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
      v140(v130, v127);
    }

    sub_49B24(v131);

    swift_release();
    v140(v125, v127);
    goto LABEL_57;
  }

  if (v107 != enum case for Parse.directInvocation(_:))
  {
    if (v107 == enum case for Parse.NLv4IntentOnly(_:))
    {
      sub_4C3C4();
      v165 = *v106;
      sub_4C3A0();
      os_log_type_t v166 = sub_1BCD0();
      if (sub_2B854(v166))
      {
        v167 = (_WORD *)sub_1BA1C(2LL);
        sub_4C4EC(v167);
        sub_1BBEC(&dword_0, v93, (os_log_type_t)v106, "Timer domain: Hitting SiriX code path", v96);
        sub_1B904((uint64_t)v96);
      }

      sub_49F50(v165);
      swift_unknownObjectRelease(v165);
      goto LABEL_57;
    }

    if (v107 != enum case for Parse.uso(_:))
    {
      sub_4C3A0();
      os_log_type_t v187 = sub_3967C();
      if (sub_329F4(v187))
      {
        v188 = (_WORD *)sub_1BA1C(2LL);
        sub_2BA04(v188);
        sub_39644(&dword_0, v189, v190, "FlowPlugin is unable to consume the timer intent. Exiting the flow.");
        uint64_t v191 = (uint64_t)v106;
        v106 = v287;
        sub_1B904(v191);
      }

      sub_4C544();
      ((void (*)(os_log_s **, uint64_t))v96)(v106, v83);
      goto LABEL_57;
    }

    sub_4C3C4();
    uint64_t v171 = v269;
    (*(void (**)(uint64_t, os_log_s **, uint64_t))(v270 + 32))(v269, v106, v271);
    sub_4C3A0();
    os_log_type_t v172 = sub_2BFB4();
    if (sub_329F4(v172))
    {
      v173 = (_WORD *)sub_1BA1C(2LL);
      sub_2BA04(v173);
      sub_39644(&dword_0, v174, v175, "Timer domain Siri X code path hit: received USO parse.");
      sub_1B904((uint64_t)v106);
    }

    uint64_t v176 = v263;
    uint64_t v178 = USOParse.userParse.getter(v177);
    v179 = (void *)Siri_Nlu_External_UserParse.userDialogActs.getter(v178);
    (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v176, v265);
    uint64_t v180 = v179[2];
    uint64_t v181 = v267;
    if (v180)
    {
      uint64_t v176 = (uint64_t)v179
           + ((*(unsigned __int8 *)(v277 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v277 + 80));
      uint64_t v182 = *(void *)(v277 + 72);
      v183 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v277 + 16);
      sub_33E50();
      uint64_t v184 = v266;
      while (1)
      {
        uint64_t v185 = v183(v108, v176, v184);
        if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter(v185) & 1) != 0) {
          break;
        }
        sub_4C54C(*(uint64_t (**)(uint64_t, uint64_t))(v277 + 8));
        v176 += v182;
        if (!--v180)
        {
          sub_2B7C4();
          uint64_t v186 = 1LL;
          goto LABEL_47;
        }
      }

      sub_2B7C4();
      v192 = v262;
      sub_4C734((uint64_t)v262, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v277 + 32));
      uint64_t v186 = 0LL;
    }

    else
    {
      uint64_t v186 = 1LL;
      uint64_t v184 = v266;
LABEL_47:
      v192 = v262;
    }

    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v192, v186, 1LL, v184);
    sub_2B7C4();
    uint64_t v193 = sub_4C720((uint64_t)v192, 1LL, v184);
    uint64_t v194 = v268;
    if (v157)
    {
      sub_4C6D4(v193, &qword_FD5E0);
      sub_4C3A0();
      os_log_type_t v198 = sub_3967C();
      if (sub_329F4(v198))
      {
        v199 = (_WORD *)sub_1BA1C(2LL);
        sub_2BA04(v199);
        sub_39644(&dword_0, v200, v201, "Failed to parse userParse. Returning noFlow.");
        sub_1B904(v176);
      }

      sub_4C544();
    }

    else
    {
      uint64_t v195 = v257;
      Siri_Nlu_External_UserDialogAct.userStatedTask.getter(v193);
      uint64_t v196 = (*(uint64_t (**)(uint8_t *, uint64_t))(v277 + 8))(v192, v184);
      uint64_t v197 = v256;
      Siri_Nlu_External_UserStatedTask.task.getter(v196);
      (*(void (**)(uint64_t, uint64_t))(v258 + 8))(v195, v259);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v194 + 32))(v181, v197, v260);
      static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v181, 0LL);
      uint64_t v214 = static UsoConversionUtils.convertGraphToTasks(graph:)();
      uint64_t v215 = v214;
      if ((unint64_t)v214 >> 62)
      {
        if (v214 >= 0) {
          v214 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        if (_CocoaArrayWrapper.endIndex.getter(v214)) {
          goto LABEL_65;
        }
      }

      else if (*(void *)((char *)&dword_10 + (v214 & 0xFFFFFFFFFFFFF8LL)))
      {
LABEL_65:
        sub_8EEB4(0LL, (v215 & 0xC000000000000001LL) == 0, v215);
        if ((v215 & 0xC000000000000001LL) != 0)
        {
          uint64_t v216 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v215);
        }

        else
        {
          uint64_t v216 = *(void *)(v215 + 32);
          swift_retain(v216);
        }

        uint64_t v217 = v271;
        uint64_t v218 = v270;
        sub_18034();
        char v219 = sub_6AB8();
        swift_retain(v216);
        sub_6C50(v219, v216);
        sub_2B750();
        sub_4C44C(v216);
        sub_4C530();
        (*(void (**)(uint64_t, uint64_t))(v218 + 8))(v171, v217);
        goto LABEL_57;
      }

      sub_18034();
      sub_4C3A0();
      os_log_type_t v249 = sub_32A5C();
      if (sub_2B854(v249))
      {
        v250 = (_WORD *)sub_1BA1C(2LL);
        sub_4C4EC(v250);
        sub_1BBEC(&dword_0, (os_log_s *)v215, OS_LOG_TYPE_DEFAULT, "USO graph has no tasks. Returning noFlow.", v192);
        sub_1B904((uint64_t)v192);
      }

      sub_4C544();
      sub_2B750();
      sub_4C530();
    }

    v169 = *(void (**)(uint64_t, uint64_t))(v270 + 8);
    uint64_t v168 = v171;
    v202 = &a13;
LABEL_55:
    uint64_t v170 = *(v202 - 32);
    goto LABEL_56;
  }

  sub_4C3C4();
  (*(void (**)(os_log_s *, os_log_s **, uint64_t))(v276 + 32))(v275, v106, v34);
  sub_4C3A0();
  os_log_type_t v146 = sub_2BFB4();
  if (sub_329F4(v146))
  {
    v147 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v147);
    sub_39644(&dword_0, v148, v149, "Timer domain: received direct invocation");
    sub_1B904((uint64_t)v106);
  }

  uint64_t v150 = Parse.DirectInvocation.identifier.getter();
  v152 = v151;
  uint64_t v153 = sub_4C45C(enum case for DirectInvocationUtils.Timer.URI.stopTimer(_:), (uint64_t)&a14);
  uint64_t v154 = DirectInvocationUtils.Timer.URI.rawValue.getter(v153);
  uint64_t v156 = v155;
  sub_4C67C();
  BOOL v157 = v150 == v154 && v152 == (os_log_s *)v156;
  if (v157)
  {
    sub_4C700();
    goto LABEL_34;
  }

  char v158 = sub_4C5C4(v150, (uint64_t)v152, v154, v156);
  swift_bridgeObjectRelease(v156);
  uint64_t v159 = sub_2B7C4();
  if ((v158 & 1) != 0)
  {
LABEL_34:
    sub_4A174();
    uint64_t v168 = sub_4C70C();
    uint64_t v170 = v34;
LABEL_56:
    v169(v168, v170);
    goto LABEL_57;
  }

  v160 = v275;
  uint64_t v161 = Parse.DirectInvocation.userData.getter(v159);
  uint64_t v162 = v276;
  if (!v161) {
    goto LABEL_59;
  }
  v152 = (os_log_s *)v161;
  sub_1C318(1651664246LL, 0xE400000000000000LL, v161, &v293);
  sub_2B7C4();
  if (!v294)
  {
    sub_8CC4((uint64_t)&v293, &qword_FCD20);
    goto LABEL_59;
  }

  if ((swift_dynamicCast(&v291, &v293, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_59:
    v203 = *(void (**)(uint64_t, os_log_s *, uint64_t))(v162 + 16);
    v204 = v261;
    v203((uint64_t)v261, v160, v34);
    sub_4C3A0();
    os_log_type_t v205 = sub_3967C();
    if (os_log_type_enabled(v152, v205))
    {
      v206 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v207 = sub_1BA1C(32LL);
      *(void *)&__int128 v293 = v207;
      *(_DWORD *)v206 = 136315138;
      uint64_t v289 = (uint64_t)(v206 + 4);
      v203(v255, v204, v34);
      uint64_t v208 = String.init<A>(describing:)();
      uint64_t v210 = sub_4C664(v208, v209);
      uint64_t v211 = sub_4C3E8(v210);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v211, v212, v289, v206 + 12);
      sub_17EE8();
      v213 = *(void (**)(uint64_t, uint64_t))(v276 + 8);
      v213((uint64_t)v204, v34);
      sub_1E7D8(&dword_0, v152, v205, "Not able to handle directInvocation: %s", v206);
      sub_1E7D0(v207);
      sub_1B904(v207);
      sub_1B904((uint64_t)v206);
    }

    else
    {
      v213 = *(void (**)(uint64_t, uint64_t))(v162 + 8);
      v213((uint64_t)v204, v34);
    }

    sub_4C544();
    v213((uint64_t)v160, v34);
    goto LABEL_57;
  }

  uint64_t v163 = v291;
  v152 = v292;
  sub_33E50();
  char v164 = sub_7E238(v163, (uint64_t)v152);
  if (v164 == 19)
  {
    sub_2B7C4();
    goto LABEL_59;
  }

  char v220 = v164;
  uint64_t v254 = v34;
  v221 = v160;
  uint64_t v222 = Parse.DirectInvocation.identifier.getter();
  uint64_t v224 = v223;
  uint64_t v225 = sub_4C45C(enum case for DirectInvocationUtils.Timer.URI.undo(_:), (uint64_t)&v284);
  uint64_t v226 = DirectInvocationUtils.Timer.URI.rawValue.getter(v225);
  uint64_t v228 = v227;
  sub_4C67C();
  if (v222 == v226 && v224 == v228)
  {
    sub_4C4A8();
  }

  else
  {
    char v230 = sub_4C5C4(v222, v224, v226, v228);
    swift_bridgeObjectRelease(v228);
    swift_bridgeObjectRelease(v224);
    if ((v230 & 1) == 0)
    {
      sub_2B7C4();
      sub_6C50(v220, 0LL);
      uint64_t v168 = sub_4C70C();
LABEL_77:
      v202 = &v285;
      goto LABEL_55;
    }
  }

  uint64_t v231 = (uint64_t)v275;
  switch(v220)
  {
    case 1:
      sub_2B7C4();
      sub_4C5CC();
      os_log_type_t v232 = sub_2BFB4();
      BOOL v233 = sub_329F4(v232);
      uint64_t v234 = v254;
      if (v233)
      {
        v235 = (_WORD *)sub_1BA1C(2LL);
        sub_2BA04(v235);
        sub_39644(&dword_0, v236, v237, "Undoing a previously deleted alarm");
        sub_1B904(v163);
      }

      sub_8CFC((void *)(v282 + 40), *(void *)(v282 + 64));
      sub_4BBF0();
      break;
    case 2:
      sub_2B7C4();
      sub_4C5CC();
      os_log_type_t v238 = sub_2BFB4();
      BOOL v239 = sub_329F4(v238);
      uint64_t v234 = v254;
      if (v239)
      {
        v240 = (_WORD *)sub_1BA1C(2LL);
        sub_2BA04(v240);
        sub_39644(&dword_0, v241, v242, "Undoing a previously created timer");
        sub_1B904(v163);
      }

      sub_8CFC((void *)(v282 + 40), *(void *)(v282 + 64));
      sub_4BCE0();
      break;
    case 5:
    case 8:
      sub_2B7C4();
      sub_4C570(v282);
      sub_4BDD0();
      v169 = *(void (**)(uint64_t, uint64_t))(v276 + 8);
      uint64_t v168 = v231;
      goto LABEL_77;
    default:
      sub_33E50();
      sub_4C5CC();
      os_log_type_t v243 = sub_32A5C();
      if (sub_2BDE0(v243))
      {
        v244 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v245 = sub_1BA1C(32LL);
        *(void *)&__int128 v293 = v245;
        *(_DWORD *)v244 = 136315138;
        sub_33E50();
        uint64_t v246 = sub_683C(v163, (unint64_t)v152, (uint64_t *)&v293);
        uint64_t v247 = sub_4C3E8(v246);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v247, v248, v244 + 4, v244 + 12);
        swift_bridgeObjectRelease_n(v152, 3LL);
        sub_1E7D8(&dword_0, v221, (os_log_type_t)v224, "Not able to handle specified verb for undo: %s", v244);
        sub_1E7D0(v245);
        sub_1B904(v245);
        sub_1B904((uint64_t)v244);
      }

      else
      {

        sub_4C700();
      }

      uint64_t v234 = v254;
      sub_4C544();
      break;
  }

  (*(void (**)(uint64_t, uint64_t))(v276 + 8))(v231, v234);
LABEL_57:
  sub_17E58();
}

uint64_t sub_67C4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t type metadata accessor for TimerNLv3Intent(uint64_t a1)
{
  uint64_t result = qword_FFE58;
  if (!qword_FFE58) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimerNLv3Intent);
  }
  return result;
}

uint64_t sub_683C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  v6 = sub_6908(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_6A5C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_6A5C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    sub_1BD3C();
  }

  _s20HandleIntentStrategyVwxx_0(v12);
  return v7;
}

void *sub_6908(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1E368((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_7030(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

uint64_t sub_6A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t _s20HandleIntentStrategyVwxx_0(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_6AB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = UsoTask.verbString.getter();
  uint64_t result = sub_7E238(v2, v3);
  if (result == 19)
  {
    if (qword_FB2A0 != -1) {
      swift_once(&qword_FB2A0, sub_84AA0);
    }
    uint64_t v5 = sub_1BD34();
    sub_5474(v5, (uint64_t)qword_FF600);
    uint64_t v6 = swift_retain_n(v0, 2LL);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v10 = swift_slowAlloc(32LL, -1LL);
      uint64_t v15 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v11 = UsoTask.verbString.getter();
      unint64_t v13 = v12;
      uint64_t v14 = sub_683C(v11, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4, v9 + 12);
      sub_4C44C(v1);
      swift_bridgeObjectRelease(v13);
      _os_log_impl(&dword_0, v7, v8, "Unexpected timer verb: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1LL);
      sub_1B904(v10);
      sub_1B904((uint64_t)v9);
    }

    else
    {

      sub_4C44C(v0);
    }

    return 13LL;
  }

  return result;
}

uint64_t sub_6C50(char a1, uint64_t a2)
{
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v4 = sub_1BD34();
  sub_5474(v4, (uint64_t)qword_FD2E0);
  sub_1BD20();
  os_log_type_t v5 = sub_1BCD0();
  if (sub_4C6CC(v2))
  {
    uint64_t v6 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v7 = sub_1BA1C(32LL);
    v17[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = sub_7010(a1);
    unint64_t v10 = v9;
    uint64_t v15 = sub_683C(v8, v9, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    sub_1E7D8(&dword_0, v2, v5, "Routing flow based on verb: %s", v6);
    sub_1E7D0(v7);
    sub_1B904(v7);
    sub_1B904((uint64_t)v6);
  }

  if (!a2) {
    goto LABEL_16;
  }
  type metadata accessor for SiriEnvironment(0LL);
  uint64_t v11 = sub_4C4E4();
  static SiriEnvironment.default.getter(v11);
  SiriEnvironment.currentDevice.getter();
  sub_1BC50();
  char v12 = sub_4A934(a2);
  sub_2B750();
  if ((v12 & 1) == 0)
  {
    sub_4C454();
    sub_4C4E4();
    if (sub_7238())
    {
      if ((static TimerDeviceSupport.supportsSleepTimers()() & 1) != 0)
      {
        sub_4ABC4();
        sub_4C454();
        return swift_release();
      }

      swift_release();
    }

    if ((sub_73F8() & 1) != 0)
    {
      sub_4C558();
      return swift_release();
    }

    sub_4C454();
LABEL_16:
    __asm { BR              X10 }
  }

  sub_4C6BC();
  return swift_release();
}

uint64_t sub_7010(char a1)
{
  return *(void *)&aCheckexicreate[8 * a1];
}

void *sub_7030(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_70C4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1E490(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1E490((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_70C4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return _swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
LABEL_6:
  os_log_type_t v5 = sub_1E42C(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  2,  1122LL,  0);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_7238()
{
  uint64_t v3 = static UsoTask_CodegenConverter.convert(task:)(v0);
  sub_88178(v3, v4, &qword_FCD20, v5, v6);
  if (!v35)
  {
    sub_8800C(v7, &qword_FCD20, v8, v9);
LABEL_8:
    sub_88178(v13, v14, &qword_FCD20, v15, v16);
    if (v35)
    {
      uint64_t v25 = type metadata accessor for UsoTask_stop_uso_NoEntity(0LL);
      if ((sub_87FE4(v25, v26, (uint64_t)&type metadata for Any + 8, v25, v27) & 1) != 0)
      {
        uint64_t v17 = v34;
        if (qword_FB2A0 != -1) {
          swift_once(&qword_FB2A0, sub_84AA0);
        }
        uint64_t v28 = sub_1BD34();
        sub_39658(v28, (uint64_t)qword_FF600);
        os_log_type_t v29 = sub_1BCD0();
        if (!sub_2B854(v29)) {
          goto LABEL_15;
        }
        uint64_t v30 = (_WORD *)sub_1B9DC();
        sub_4C4EC(v30);
        os_log_type_t v21 = "TimerFlowDelegatePlugin found UsoTask_stop_uso_NoEntity.trigger";
        goto LABEL_14;
      }
    }

    else
    {
      sub_8800C(v22, &qword_FCD20, v23, v24);
    }

    uint64_t v32 = 0LL;
    goto LABEL_18;
  }

  uint64_t v10 = type metadata accessor for UsoTask_stop_common_MediaItem(0LL);
  uint64_t v13 = sub_87FE4(v10, v11, (uint64_t)&type metadata for Any + 8, v10, v12);
  if ((v13 & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v17 = v34;
  if (qword_FB2A0 != -1) {
    swift_once(&qword_FB2A0, sub_84AA0);
  }
  uint64_t v18 = sub_1BD34();
  sub_39658(v18, (uint64_t)qword_FF600);
  os_log_type_t v19 = sub_1BCD0();
  if (!sub_2B854(v19)) {
    goto LABEL_15;
  }
  uint64_t v20 = (_WORD *)sub_1B9DC();
  sub_4C4EC(v20);
  os_log_type_t v21 = "TimerFlowDelegatePlugin found UsoTask_stop_common_MediaItem.trigger";
LABEL_14:
  sub_1BBEC(&dword_0, v0, v1, v21, v2);
  sub_1B904((uint64_t)v2);
LABEL_15:

  uint64_t v31 = sub_2F740();
  uint64_t v32 = dispatch thunk of Uso_VerbTemplate_ReferenceControl.trigger.getter(v31);
  sub_4C44C(v17);
LABEL_18:
  sub_8CC4((uint64_t)v36, &qword_FCD20);
  return v32;
}

uint64_t sub_73F8()
{
  if (!v17) {
    goto LABEL_6;
  }
  sub_88178(v1, v2, &qword_FCD20, v3, v4);
  uint64_t v5 = type metadata accessor for UsoTask_stop_common_MediaItem(0LL);
  if (!sub_881CC(v5, v6, v7, v5, v8))
  {
    uint64_t v9 = type metadata accessor for UsoTask_stop_uso_NoEntity(0LL);
    if (!sub_881CC(v9, v10, v11, v9, v12))
    {
      _s20HandleIntentStrategyVwxx_0(v15);
LABEL_6:
      uint64_t v13 = 0LL;
      goto LABEL_7;
    }
  }

  swift_release();
  _s20HandleIntentStrategyVwxx_0(v15);
  uint64_t v13 = 1LL;
LABEL_7:
  sub_8CC4((uint64_t)v16, &qword_FCD20);
  return v13;
}

uint64_t sub_74B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FCD20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_7500(os_log_s *a1)
{
  uint64_t v4 = v1;
  if (!a1 || (uint64_t v1 = a1, (v6 = UsoTask.alarmEntity.getter()) == 0))
  {
LABEL_5:
    if (qword_FB1C0 != -1) {
      swift_once(&qword_FB1C0, sub_496E4);
    }
    uint64_t v7 = sub_1BD34();
    uint64_t v8 = (uint8_t *)sub_5474(v7, (uint64_t)qword_FD2E0);
    sub_1BD20();
    os_log_type_t v9 = sub_1BCD0();
    if (sub_434EC(v9))
    {
      uint64_t v10 = (uint8_t *)sub_1BA1C(2LL);
      *(_WORD *)uint64_t v10 = 0;
      sub_1BBEC( &dword_0,  v1,  (os_log_type_t)v2,  "TimerFlowFactory: deciding between createTimerFlow and createAlarmFlow based on user's intent.",  v10);
      sub_1B904((uint64_t)v10);
    }

    if (!a1) {
      goto LABEL_30;
    }
    sub_7944();
    if (v11)
    {
      uint64_t v12 = v11;
      swift_retain_n(v11, 2LL);
      sub_4C3A0();
      os_log_type_t v13 = sub_1BCD0();
      if (sub_2BAD0(v13))
      {
        uint64_t v14 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v15 = sub_1BA1C(32LL);
        uint64_t v34 = v12;
        uint64_t v35 = v15;
        *(_DWORD *)uint64_t v14 = 136315138;
        type metadata accessor for UsoEntity_common_Timer(0LL);
        sub_4C4E4();
        uint64_t v16 = String.init<A>(describing:)(&v34);
        unint64_t v18 = v17;
        uint64_t v34 = sub_683C(v16, v17, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v14 + 4, v14 + 12);
        sub_4C44C(v12);
        swift_bridgeObjectRelease(v18);
        sub_1E7D8(&dword_0, a1, (os_log_type_t)a1, "TimerFlowFactory: timerEntity: %s", v14);
        sub_1E7D0(v15);
        sub_1B904(v15);
        sub_1B904((uint64_t)v14);
      }

      else
      {

        sub_4C44C(v12);
      }

      UsoEntity_common_Timer.timerType.getter();
      uint64_t v31 = SiriTimerType.rawValue.getter(v30);
      if (v31 == SiriTimerType.rawValue.getter(2LL) && (static TimerDeviceSupport.supportsSleepTimers()() & 1) != 0)
      {
        sub_8CFC((void *)v4 + 5, *((void *)v4 + 8));
        sub_4B6D8();
      }

      else
      {
        UsoEntity_common_Timer.isRightNow.getter();
        sub_4C610();
      }

      sub_4C454();
LABEL_39:
      sub_4C5D4();
      return;
    }

    uint64_t v22 = ((uint64_t (*)(void))UsoTask.verbString.getter)();
    if (v23)
    {
      uint64_t v1 = (os_log_s *)v23;
      if (v22 == 0x656C62616E65LL && v23 == 0xE600000000000000LL)
      {
LABEL_40:
        sub_18034();
        goto LABEL_41;
      }

      uint64_t v2 = sub_4C5C4(v22, v23, 0x656C62616E65LL, 0xE600000000000000LL);
      uint64_t v22 = sub_18034();
      if ((v2 & 1) != 0)
      {
LABEL_41:
        sub_4C3A0();
        os_log_type_t v32 = sub_32A5C();
        if (sub_2B854(v32))
        {
          uint64_t v33 = (_WORD *)sub_1BA1C(2LL);
          sub_4C4EC(v33);
          sub_1BBEC( &dword_0,  v1,  (os_log_type_t)v4,  "TimerEntity is nil in the uso enable or disable task. Returning no flow.",  (uint8_t *)v2);
          sub_1B904(v2);
        }

        sub_4C5D4();
        static FlowSearchResult.noFlow.getter();
        return;
      }
    }

    uint64_t v1 = a1;
    uint64_t v25 = UsoTask.verbString.getter(v22);
    if (!v26)
    {
LABEL_30:
      sub_4C3A0();
      os_log_type_t v28 = sub_32A5C();
      if (sub_434EC(v28))
      {
        os_log_type_t v29 = (_WORD *)sub_1BA1C(2LL);
        sub_2B938(v29);
        sub_1BBEC( &dword_0,  v1,  (os_log_type_t)v2,  "TimerEntity is nil in the uso task. Return createTimerFlow anyways.",  v8);
        sub_1B904((uint64_t)v8);
      }

      sub_4C610();
      goto LABEL_39;
    }

    uint64_t v1 = (os_log_s *)v26;
    if (v25 != 0x656C6261736964LL || v26 != 0xE700000000000000LL)
    {
      uint64_t v2 = sub_4C5C4(v25, v26, 0x656C6261736964LL, 0xE700000000000000LL);
      sub_18034();
      if ((v2 & 1) == 0) {
        goto LABEL_30;
      }
      goto LABEL_41;
    }

    goto LABEL_40;
  }

  uint64_t v2 = v6;
  uint64_t v1 = (os_log_s *)v6;
  if ((UsoEntity_common_Alarm.eligibleForTimerReformation.getter() & 1) != 0)
  {
    sub_4C454();
    goto LABEL_5;
  }

  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v19 = sub_1BD34();
  sub_39658(v19, (uint64_t)qword_FD2E0);
  os_log_type_t v20 = sub_1BCD0();
  if (sub_2B854(v20))
  {
    os_log_type_t v21 = (_WORD *)sub_1BA1C(2LL);
    sub_2B938(v21);
    sub_1BBEC( &dword_0,  v1,  (os_log_type_t)v4,  "TimerFlowFactory: Found alarm parse with invalid signature for timers – returning .noFlow",  v3);
    sub_1B904((uint64_t)v3);
  }

  static FlowSearchResult.noFlow.getter();
  sub_4C5D4();
  swift_release();
}

void sub_7944()
{
  uint64_t v5 = type metadata accessor for UsoEntity_common_TimeUnit.DefinedValues(0LL);
  __chkstk_darwin(v5);
  uint64_t v6 = sub_88094();
  __chkstk_darwin(v6);
  uint64_t v7 = (char *)&loc_7A34 + *((int *)qword_83D28 + sub_8812C());
  __asm { BR              X10 }
}

void sub_7A44()
{
  uint64_t v3 = sub_87FF4();
  if (*(void *)(v2 - 104))
  {
    uint64_t v4 = sub_88444();
    if ((sub_87FBC(v4, (uint64_t)&type metadata for Any) & 1) != 0)
    {
      uint64_t v5 = sub_87FFC();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter(v5);
      sub_78938();
      goto LABEL_10;
    }
  }

  else
  {
    sub_88004(v3, &qword_FCD20);
  }

  if (qword_FB2A0 != -1) {
    swift_once(&qword_FB2A0, sub_84AA0);
  }
  uint64_t v6 = sub_1BD34();
  sub_39658(v6, (uint64_t)qword_FF600);
  os_log_type_t v7 = sub_2BFB4();
  if (sub_329F4(v7))
  {
    uint64_t v8 = (_WORD *)sub_1B9DC();
    sub_2BA04(v8);
    sub_39644(&dword_0, v9, v10, "Parse entity: timer entity not found on checkExistenceTimerTask.");
    sub_1B904(v1);
  }

LABEL_10:
  sub_88108();
}

uint64_t UsoEntity_common_Timer.isRightNow.getter()
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_DateTime.DefinedValues(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1C308();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_67C4(&qword_FDD90);
  sub_1BCE0();
  __chkstk_darwin(v8);
  sub_5E350();
  sub_67C4(&qword_FDD98);
  sub_1BCE0();
  __chkstk_darwin(v9);
  sub_21608();
  uint64_t v12 = v10 - v11;
  __chkstk_darwin(v13);
  sub_5E384();
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v24 - v16;
  if (dispatch thunk of UsoEntity_common_Timer.endTime.getter(v15))
  {
    dispatch thunk of UsoEntity_common_DateTime.definedValue.getter();
    sub_1BC50();
  }

  else
  {
    sub_5E3D0((uint64_t)v17, 1LL);
  }

  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v1,  enum case for UsoEntity_common_DateTime.DefinedValues.common_DateTime_Now(_:),  v2);
  sub_5E3D0(v1, 0LL);
  uint64_t v18 = v0 + *(int *)(v7 + 48);
  sub_8C84((uint64_t)v17, v0, &qword_FDD98);
  sub_8C84(v1, v18, &qword_FDD98);
  sub_5E368(v0);
  if (v20)
  {
    sub_8CC4(v1, &qword_FDD98);
    sub_8CC4((uint64_t)v17, &qword_FDD98);
    sub_5E368(v18);
    if (v20) {
      char v19 = -1;
    }
    else {
      char v19 = 0;
    }
  }

  else
  {
    sub_8C84(v0, v12, &qword_FDD98);
    sub_5E368(v18);
    if (v20)
    {
      sub_433BC(v1);
      sub_433BC((uint64_t)v17);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v12, v2);
      char v19 = 0;
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v18, v2);
      sub_11718( &qword_FDDA0,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_DateTime.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_DateTime.DefinedValues);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v6, v2, v21);
      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v22(v6, v2);
      sub_5E31C(v1);
      sub_5E31C((uint64_t)v17);
      v22(v12, v2);
    }
  }

  sub_5E31C(v0);
  return v19 & 1;
}

void sub_8C84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_67C4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_17DD4();
}

void sub_8CC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_67C4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_17DD4();
}

void *sub_8CFC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

void sub_8D20()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v22 = v7;
  uint64_t v9 = v8;
  uint64_t v10 = v0;
  sub_67C4(&qword_FBDB8);
  sub_1BCE0();
  __chkstk_darwin();
  sub_1C308();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_67C4(v9);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  sub_4C3FC();
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v16 = sub_1BD34();
  sub_39658(v16, (uint64_t)qword_FD2E0);
  os_log_type_t v17 = sub_1BCD0();
  if (sub_4C560(v17))
  {
    uint64_t v18 = (_WORD *)sub_1BA1C(2LL);
    sub_4C658(v18);
    sub_1BBEC(&dword_0, v0, v2, v22, v4);
    uint64_t v10 = v0;
    sub_1B904((uint64_t)v4);
  }

  sub_4C6C4((uint64_t)v10 + 16);
  v6(&v23);
  uint64_t v19 = sub_46210();
  sub_44FF8(v13, v20, v21, v19);
  ((void (*)(uint64_t, uint64_t))v4)(v1, v13);
  sub_8CC4(v13, &qword_FBDB8);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v1, v14);
  sub_17E58();
}

void sub_8EAC()
{
}

uint64_t sub_8ED0(void *a1)
{
  uint64_t TimerIntent = type metadata accessor for CreateTimerIntent(0LL);
  uint64_t TimerIntentResponse = type metadata accessor for CreateTimerIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(TimerIntent, TimerIntentResponse);
  if (qword_FB228 != -1) {
    swift_once(&qword_FB228, sub_66804);
  }
  uint64_t v4 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)( qword_100FB0,  TimerIntent,  TimerIntentResponse);
  uint64_t v6 = v5;
  uint64_t v7 = sub_67C4(&qword_FCD60);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v4, v6, v7);
  unint64_t v8 = sub_9990();
  uint64_t v9 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)( v8,  &_s24UnsupportedValueStrategyVN_0,  v8);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v9);
  uint64_t v10 = _s18NeedsValueStrategyCMa();
  uint64_t v19 = sub_43718(v10);
  uint64_t v11 = sub_E538(&qword_FCD70, (uint64_t (*)(uint64_t))_s18NeedsValueStrategyCMa, (uint64_t)&unk_C2F7C);
  uint64_t v12 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(&v19, v10, v11);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter(v12);
  uint64_t v13 = _s25NeedsConfirmationStrategyCMa();
  uint64_t v19 = sub_43718(v13);
  uint64_t v14 = sub_E538(&qword_FCD78, (uint64_t (*)(uint64_t))_s25NeedsConfirmationStrategyCMa, (uint64_t)&unk_C25B4);
  uint64_t v15 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)(&v19, v13, v14);
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter(v15);
  unint64_t v16 = sub_9A48();
  uint64_t v17 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)( v16,  &_s20HandleIntentStrategyVN_4,  v16);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v17);
  swift_release();
  swift_release();
  return _s20HandleIntentStrategyVwxx_0(a1);
}

void *sub_908C(void *a1)
{
  uint64_t v2 = type metadata accessor for SetTimerAttributeIntent(0LL);
  uint64_t v3 = type metadata accessor for SetTimerAttributeIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(v2, v3);
  if (qword_FB228 != -1) {
    swift_once(&qword_FB228, sub_66804);
  }
  uint64_t v4 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(qword_100FB0, v2, v3);
  uint64_t v6 = v5;
  uint64_t v7 = sub_67C4(&qword_FD480);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v4, v6, v7);
  uint64_t v8 = sub_67C4(&qword_FFBF8);
  unint64_t v9 = sub_A3EFC();
  uint64_t v10 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A, B>(_:)(&unk_1002F8, 0LL, v8, v3, v9);
  uint64_t v11 = RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v10);
  sub_46914(v11, (uint64_t)v27);
  unint64_t v12 = sub_A3F40();
  uint64_t v13 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)(v27, &_s18NeedsValueStrategyVN, v12);
  uint64_t v14 = RCHChildFlowProducersAsync.needsValueFlowProducer.setter(v13);
  sub_46914(v14, (uint64_t)v26);
  unint64_t v15 = sub_A3F7C();
  uint64_t v16 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)( v26,  &_s25NeedsConfirmationStrategyVN_2,  v15);
  uint64_t v17 = RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter(v16);
  sub_46914(v17, (uint64_t)v25);
  unint64_t v18 = sub_A3FB8();
  uint64_t v19 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)( v25,  &_s24UnsupportedValueStrategyVN,  v18);
  uint64_t v20 = RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v19);
  sub_46914(v20, (uint64_t)v24);
  unint64_t v21 = sub_A3FF4();
  uint64_t v22 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)( v24,  &_s20HandleIntentStrategyVN_1,  v21);
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v22);
  _s20HandleIntentStrategyVwxx_0(a1);
  sub_A4030(v24);
  sub_A4064(v25);
  sub_A4098(v26);
  return sub_A40CC(v27);
}

void *sub_9250(void *a1)
{
  uint64_t v2 = type metadata accessor for ResetTimerIntent(0LL);
  uint64_t v3 = type metadata accessor for ResetTimerIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(v2, v3);
  if (qword_FB228 != -1) {
    swift_once(&qword_FB228, sub_66804);
  }
  uint64_t v4 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(qword_100FB0, v2, v3);
  uint64_t v6 = v5;
  uint64_t v7 = sub_67C4(&qword_FD4B8);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v4, v6, v7);
  uint64_t v8 = sub_67C4(&qword_FFC10);
  uint64_t v9 = sub_10D58(&qword_1008F0, &qword_FFC10, (uint64_t)&unk_C5218);
  uint64_t v10 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A, B>(_:)(&unk_1008E8, 0LL, v8, v3, v9);
  uint64_t v11 = RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v10);
  sub_46914(v11, (uint64_t)v24);
  unint64_t v12 = sub_B8490();
  uint64_t v13 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)( v24,  &_s25NeedsConfirmationStrategyVN_1,  v12);
  uint64_t v14 = RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter(v13);
  sub_46914(v14, (uint64_t)v23);
  unint64_t v15 = sub_B84CC();
  uint64_t v16 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)( v23,  &_s20HandleIntentStrategyVN_5,  v15);
  uint64_t v17 = RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v16);
  sub_46914(v17, (uint64_t)v22);
  uint64_t v18 = sub_67C4(&qword_100908);
  uint64_t v19 = sub_10D58(&qword_100910, &qword_100908, (uint64_t)&unk_C3728);
  uint64_t v20 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v22, v18, v19);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v20);
  _s20HandleIntentStrategyVwxx_0(a1);
  sub_B8508((uint64_t)v22);
  sub_B8548(v23);
  return sub_B857C(v24);
}

void *sub_9420(void *a1)
{
  uint64_t v2 = type metadata accessor for DeleteTimerIntent(0LL);
  uint64_t v3 = type metadata accessor for DeleteTimerIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(v2, v3);
  if (qword_FB228 != -1) {
    swift_once(&qword_FB228, sub_66804);
  }
  uint64_t v4 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(qword_100FB0, v2, v3);
  uint64_t v6 = v5;
  uint64_t v7 = sub_67C4((uint64_t *)&unk_FD560);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v4, v6, v7);
  uint64_t v8 = sub_67C4(&qword_FFBB8);
  uint64_t v9 = sub_10D58(&qword_FFBC0, &qword_FFBB8, (uint64_t)&unk_C5218);
  uint64_t v10 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A, B>(_:)(&unk_FFBB0, 0LL, v8, v3, v9);
  uint64_t v11 = RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v10);
  sub_46914(v11, (uint64_t)v24);
  unint64_t v12 = sub_93B78();
  uint64_t v13 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)( v24,  &_s25NeedsConfirmationStrategyVN,  v12);
  uint64_t v14 = RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter(v13);
  sub_46914(v14, (uint64_t)v23);
  unint64_t v15 = sub_93BB4();
  uint64_t v16 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)( v23,  &_s20HandleIntentStrategyVN,  v15);
  uint64_t v17 = RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v16);
  sub_46914(v17, (uint64_t)v22);
  uint64_t v18 = sub_67C4(&qword_FFBD8);
  uint64_t v19 = sub_10D58(&qword_FFBE0, &qword_FFBD8, (uint64_t)&unk_C3728);
  uint64_t v20 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v22, v18, v19);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v20);
  _s20HandleIntentStrategyVwxx_0(a1);
  sub_10DE4((uint64_t)v22);
  sub_10E28(v23);
  return sub_10E5C(v24);
}

void *sub_95F0(void *a1)
{
  uint64_t v2 = type metadata accessor for ResumeTimerIntent(0LL);
  uint64_t v3 = type metadata accessor for ResumeTimerIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(v2, v3);
  if (qword_FB228 != -1) {
    swift_once(&qword_FB228, sub_66804);
  }
  uint64_t v4 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(qword_100FB0, v2, v3);
  uint64_t v6 = v5;
  uint64_t v7 = sub_67C4(&qword_FD4F0);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v4, v6, v7);
  uint64_t v8 = sub_67C4(&qword_FF8C8);
  uint64_t v9 = sub_10D58(&qword_FF8D0, &qword_FF8C8, (uint64_t)&unk_C5218);
  uint64_t v10 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A, B>(_:)(&unk_FF8C0, 0LL, v8, v3, v9);
  uint64_t v11 = RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v10);
  sub_46914(v11, (uint64_t)v24);
  unint64_t v12 = sub_8E884();
  uint64_t v13 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)( v24,  &_s25NeedsConfirmationStrategyVN_0,  v12);
  uint64_t v14 = RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter(v13);
  sub_46914(v14, (uint64_t)v23);
  unint64_t v15 = sub_8E8C0();
  uint64_t v16 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)( v23,  &_s20HandleIntentStrategyVN_2,  v15);
  uint64_t v17 = RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v16);
  sub_46914(v17, (uint64_t)v22);
  uint64_t v18 = sub_67C4(&qword_FF8E8);
  uint64_t v19 = sub_10D58(&qword_FF8F0, &qword_FF8E8, (uint64_t)&unk_C3728);
  uint64_t v20 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v22, v18, v19);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v20);
  _s20HandleIntentStrategyVwxx_0(a1);
  sub_8E8FC((uint64_t)v22);
  sub_8E93C(v23);
  return sub_8E970(v24);
}

void *sub_97C0(void *a1)
{
  uint64_t v2 = type metadata accessor for PauseTimerIntent(0LL);
  uint64_t v3 = type metadata accessor for PauseTimerIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(v2, v3);
  if (qword_FB228 != -1) {
    swift_once(&qword_FB228, sub_66804);
  }
  uint64_t v4 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(qword_100FB0, v2, v3);
  uint64_t v6 = v5;
  uint64_t v7 = sub_67C4(&qword_FCF88);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v4, v6, v7);
  uint64_t v8 = sub_67C4(&qword_FCF98);
  uint64_t v9 = sub_10D58(&qword_FCFA0, &qword_FCF98, (uint64_t)&unk_C5218);
  uint64_t v10 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A, B>(_:)(&unk_FCF90, 0LL, v8, v3, v9);
  uint64_t v11 = RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter(v10);
  sub_46914(v11, (uint64_t)v24);
  unint64_t v12 = sub_467E8();
  uint64_t v13 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)( v24,  &_s25NeedsConfirmationStrategyVN_3,  v12);
  uint64_t v14 = RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter(v13);
  sub_46914(v14, (uint64_t)v23);
  unint64_t v15 = sub_46824();
  uint64_t v16 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)( v23,  &_s20HandleIntentStrategyVN_3,  v15);
  uint64_t v17 = RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v16);
  sub_46914(v17, (uint64_t)v22);
  uint64_t v18 = sub_67C4(&qword_FCFB8);
  uint64_t v19 = sub_10D58(&qword_FCFC0, &qword_FCFB8, (uint64_t)&unk_C3728);
  uint64_t v20 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)(v22, v18, v19);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter(v20);
  _s20HandleIntentStrategyVwxx_0(a1);
  sub_46860((uint64_t)v22);
  sub_468A0(v23);
  return sub_468D4(v24);
}

unint64_t sub_9990()
{
  unint64_t result = qword_FCD68;
  if (!qword_FCD68)
  {
    unint64_t result = swift_getWitnessTable(&unk_C668C, &_s24UnsupportedValueStrategyVN_0);
    atomic_store(result, (unint64_t *)&qword_FCD68);
  }

  return result;
}

uint64_t _s18NeedsValueStrategyCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCV23TimerFlowDelegatePlugin11CreateTimer18NeedsValueStrategy);
}

uint64_t _s25NeedsConfirmationStrategyCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCV23TimerFlowDelegatePlugin11CreateTimer25NeedsConfirmationStrategy);
}

unint64_t sub_9A0C()
{
  unint64_t result = qword_FF598[0];
  if (!qword_FF598[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_C4B38, &_s20HandleIntentStrategyVN_4);
    atomic_store(result, qword_FF598);
  }

  return result;
}

unint64_t sub_9A48()
{
  unint64_t result = qword_FCD80;
  if (!qword_FCD80)
  {
    unint64_t result = swift_getWitnessTable(&unk_C4B68, &_s20HandleIntentStrategyVN_4);
    atomic_store(result, (unint64_t *)&qword_FCD80);
  }

  return result;
}

void sub_9A84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v28 = a3;
  uint64_t v5 = sub_67C4(&qword_FD530);
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_67C4(&qword_FCF88);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_67C4(&qword_FD538);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v26 - v16;
  sub_54CC(v3 + 16, (uint64_t)&v26 - v16);
  sub_8C84(a2, (uint64_t)&v17[*(int *)(v12 + 36)], &qword_FBDB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v26, v8);
  uint64_t v18 = sub_67C4(&qword_FD540);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v11);
  sub_8C84((uint64_t)v17, (uint64_t)v15, &qword_FD538);
  sub_AC3C(&qword_FD548, &qword_FD538);
  uint64_t v21 = v20;
  swift_retain(v19);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v15, v19, v12, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  uint64_t v29 = v22;
  uint64_t v23 = sub_67C4(&qword_FD550);
  sub_AC3C(&qword_FD558, &qword_FD550);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release();
  static FlowSearchResult.flow(_:)(v25);
  swift_release();
  swift_release();
  sub_8CC4((uint64_t)v17, &qword_FD538);
}

void sub_9CF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v28 = a3;
  uint64_t v5 = sub_67C4(&qword_FD4C0);
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_67C4(&qword_FD4B8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_67C4(&qword_FD4C8);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v26 - v16;
  sub_54CC(v3 + 16, (uint64_t)&v26 - v16);
  sub_8C84(a2, (uint64_t)&v17[*(int *)(v12 + 36)], &qword_FBDB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v26, v8);
  uint64_t v18 = sub_67C4(&qword_FD4D0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v11);
  sub_8C84((uint64_t)v17, (uint64_t)v15, &qword_FD4C8);
  sub_AC3C(&qword_FD4D8, &qword_FD4C8);
  uint64_t v21 = v20;
  swift_retain(v19);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v15, v19, v12, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  uint64_t v29 = v22;
  uint64_t v23 = sub_67C4(&qword_FD4E0);
  sub_AC3C(&qword_FD4E8, &qword_FD4E0);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release();
  static FlowSearchResult.flow(_:)(v25);
  swift_release();
  swift_release();
  sub_8CC4((uint64_t)v17, &qword_FD4C8);
}

void sub_9F5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v28 = a3;
  uint64_t v5 = sub_67C4(&qword_FCED8);
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_67C4((uint64_t *)&unk_FD560);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_67C4((uint64_t *)&unk_FD570);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v26 - v16;
  sub_54CC(v3 + 16, (uint64_t)&v26 - v16);
  sub_8C84(a2, (uint64_t)&v17[*(int *)(v12 + 36)], &qword_FBDB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v26, v8);
  uint64_t v18 = sub_67C4(&qword_FCEE0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v11);
  sub_8C84((uint64_t)v17, (uint64_t)v15, (uint64_t *)&unk_FD570);
  sub_AC3C((unint64_t *)&unk_FD580, (uint64_t *)&unk_FD570);
  uint64_t v21 = v20;
  swift_retain(v19);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v15, v19, v12, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  uint64_t v29 = v22;
  uint64_t v23 = sub_67C4(&qword_FCEE8);
  sub_AC3C(&qword_FD590, &qword_FCEE8);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release();
  static FlowSearchResult.flow(_:)(v25);
  swift_release();
  swift_release();
  sub_8CC4((uint64_t)v17, (uint64_t *)&unk_FD570);
}

void sub_A1C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v28 = a3;
  uint64_t v5 = sub_67C4(&qword_FD4F8);
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_67C4(&qword_FD4F0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_67C4(&qword_FD500);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v26 - v16;
  sub_54CC(v3 + 16, (uint64_t)&v26 - v16);
  sub_8C84(a2, (uint64_t)&v17[*(int *)(v12 + 36)], &qword_FBDB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v26, v8);
  uint64_t v18 = sub_67C4(&qword_FD508);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v11);
  sub_8C84((uint64_t)v17, (uint64_t)v15, &qword_FD500);
  sub_AC3C(&qword_FD510, &qword_FD500);
  uint64_t v21 = v20;
  swift_retain(v19);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v15, v19, v12, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  uint64_t v29 = v22;
  uint64_t v23 = sub_67C4(&qword_FD518);
  sub_AC3C((unint64_t *)&unk_FD520, &qword_FD518);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release();
  static FlowSearchResult.flow(_:)(v25);
  swift_release();
  swift_release();
  sub_8CC4((uint64_t)v17, &qword_FD500);
}

void sub_A434(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v28 = a3;
  uint64_t v5 = sub_67C4(&qword_FC610);
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_67C4(&qword_FD440);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_67C4(&qword_FD438);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v26 - v16;
  sub_54CC(v3 + 16, (uint64_t)&v26 - v16);
  sub_8C84(a2, (uint64_t)&v17[*(int *)(v12 + 36)], &qword_FBDB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v26, v8);
  uint64_t v18 = sub_67C4(&qword_FD448);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v11);
  sub_8C84((uint64_t)v17, (uint64_t)v15, &qword_FD438);
  sub_AC3C((unint64_t *)&unk_FD450, &qword_FD438);
  uint64_t v21 = v20;
  swift_retain(v19);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v15, v19, v12, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  uint64_t v29 = v22;
  uint64_t v23 = sub_67C4(&qword_FD470);
  sub_AC3C(&qword_FD478, &qword_FD470);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release();
  static FlowSearchResult.flow(_:)(v25);
  swift_release();
  swift_release();
  sub_8CC4((uint64_t)v17, &qword_FD438);
}

void sub_A6A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v28 = a3;
  uint64_t v5 = sub_67C4((uint64_t *)&unk_FD5B0);
  uint64_t v27 = *(void *)(v5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_67C4(&qword_FCD60);
  uint64_t v9 = *(void *)(v8 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_67C4(&qword_FCF00);
  uint64_t v13 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v26 - v16;
  sub_54CC(v3 + 16, (uint64_t)&v26 - v16);
  sub_8C84(a2, (uint64_t)&v17[*(int *)(v12 + 36)], &qword_FBDB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v26, v8);
  uint64_t v18 = sub_67C4((uint64_t *)&unk_FD5C0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v11);
  sub_8C84((uint64_t)v17, (uint64_t)v15, &qword_FCF00);
  sub_AC3C(&qword_FCF08, &qword_FCF00);
  uint64_t v21 = v20;
  swift_retain(v19);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v15, v19, v12, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  uint64_t v29 = v22;
  uint64_t v23 = sub_67C4((uint64_t *)&unk_FD5D0);
  sub_AC3C(&qword_FCF10, (uint64_t *)&unk_FD5D0);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release();
  static FlowSearchResult.flow(_:)(v25);
  swift_release();
  swift_release();
  sub_8CC4((uint64_t)v17, &qword_FCF00);
}

void sub_A90C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v28 = a3;
  uint64_t v5 = sub_67C4(&qword_FD488);
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_67C4(&qword_FD480);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_67C4(&qword_FD490);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v26 - v16;
  sub_54CC(v3 + 16, (uint64_t)&v26 - v16);
  sub_8C84(a2, (uint64_t)&v17[*(int *)(v12 + 36)], &qword_FBDB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v26, v8);
  uint64_t v18 = sub_67C4(&qword_FD498);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = RCHChildFlowFactory.init(producers:)(v11);
  sub_8C84((uint64_t)v17, (uint64_t)v15, &qword_FD490);
  sub_AC3C(&qword_FD4A0, &qword_FD490);
  uint64_t v21 = v20;
  swift_retain(v19);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v15, v19, v12, v21);
  uint64_t v22 = RCHFlowFactory.makeAppResolvingRCHFlow()(v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  uint64_t v29 = v22;
  uint64_t v23 = sub_67C4(&qword_FD4A8);
  sub_AC3C(&qword_FD4B0, &qword_FD4A8);
  uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
  swift_release();
  static FlowSearchResult.flow(_:)(v25);
  swift_release();
  swift_release();
  sub_8CC4((uint64_t)v17, &qword_FD490);
}

uint64_t sub_AB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for HALTimerDeviceContext(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_67C4(&qword_FBDB8);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v8, 0LL, 1LL, v10);
  }

  return a1;
}

void sub_AC3C(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_15D30(a2);
    atomic_store(sub_2C0AC(v3), a1);
  }

  sub_17DD4();
}

uint64_t sub_AC70(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for HALTimerDeviceContext(0LL);
  uint64_t result = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

void *sub_ACD8(void *a1)
{
  return a1;
}

uint64_t destroy for TimerFlowFactory(void *a1)
{
  return _s20HandleIntentStrategyVwxx_0(a1 + 5);
}

uint64_t sub_AD34()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t sub_AD5C()
{
  uint64_t v1 = sub_67C4((uint64_t *)&unk_FCC70);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_FB1A8 != -1) {
    swift_once(&qword_FB1A8, sub_43D64);
  }
  uint64_t v4 = sub_1BD34();
  sub_5474(v4, (uint64_t)qword_FCD88);
  sub_1BD20();
  os_log_type_t v5 = sub_1BCD0();
  if (os_log_type_enabled(v0, v5))
  {
    __int128 v6 = (uint8_t *)sub_1BA1C(2LL);
    *(_WORD *)__int128 v6 = 0;
    _os_log_impl(&dword_0, v0, v5, "TimerIntents.FlowStrategy.actionForInput() called.", v6, 2u);
    sub_1B904((uint64_t)v6);
  }

  uint64_t v7 = type metadata accessor for DecideAction.PromptExpectation(0LL);
  sub_44FF8((uint64_t)v3, v8, v9, v7);
  sub_6CDC4();
  return sub_DABC((uint64_t)v3, (uint64_t *)&unk_FCC70);
}

void sub_AEBC()
{
  os_log_type_t v4 = v3;
  uint64_t v95 = v5;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v92 = *(void *)(v6 - 8);
  uint64_t v93 = v6;
  sub_17B6C();
  __chkstk_darwin(v7);
  uint64_t v85 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_433B0();
  __chkstk_darwin(v9);
  v91 = (char *)&v84 - v10;
  uint64_t v11 = sub_756E4();
  uint64_t v86 = *(void *)(v11 - 8);
  uint64_t v87 = v11;
  sub_17B6C();
  __chkstk_darwin(v12);
  uint64_t v14 = (uint8_t *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v88 = sub_75730();
  uint64_t v90 = *(void *)(v88 - 8);
  sub_17B6C();
  __chkstk_darwin(v15);
  sub_17D14();
  uint64_t v89 = v16;
  uint64_t v94 = sub_755F4();
  sub_17B6C();
  __chkstk_darwin(v17);
  sub_21608();
  uint64_t v20 = v18 - v19;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v84 - v22;
  uint64_t v24 = sub_75738();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_1810C();
  uint64_t v26 = sub_75818();
  sub_75B18();
  __chkstk_darwin(v27);
  sub_18154();
  Input.parse.getter();
  int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v0, v24);
  if (v28 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_7566C();
    goto LABEL_5;
  }

  if (v28 != enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    if (v28 != enum case for Parse.directInvocation(_:))
    {
      if (v28 == enum case for Parse.NLv4IntentOnly(_:))
      {
        sub_7566C();
        uint64_t v46 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected);
        if (sub_75CD8(v46))
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v47 = sub_1BD34();
          sub_39658(v47, (uint64_t)qword_FEC20);
          os_log_type_t v48 = sub_2BFB4();
          if (!sub_329F4(v48)) {
            goto LABEL_43;
          }
          uint64_t v49 = (_WORD *)sub_1BA1C(2LL);
          sub_4C4EC(v49);
          uint64_t v50 = "validateCancellation: Received UserDialogAct - UserRejected";
        }

        else
        {
          uint64_t v71 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
          if (!sub_75CD8(v71))
          {
            sub_75A14();
            goto LABEL_16;
          }

          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v72 = sub_1BD34();
          sub_39658(v72, (uint64_t)qword_FEC20);
          os_log_type_t v73 = sub_2BFB4();
          if (!sub_329F4(v73))
          {
LABEL_43:

            sub_75990();
            sub_75A14();
            goto LABEL_14;
          }

          uint64_t v74 = (_WORD *)sub_1BA1C(2LL);
          sub_4C4EC(v74);
          uint64_t v50 = "validateCancellation: Received UserDialogAct - UserCancelled";
        }

        sub_1BBEC(&dword_0, (os_log_s *)v25, v4, v50, v14);
        sub_1B904((uint64_t)v14);
        goto LABEL_43;
      }

      if (v28 == enum case for Parse.uso(_:))
      {
        sub_7566C();
        uint64_t v51 = sub_5A434();
        uint64_t v52 = v88;
        uint64_t v55 = sub_2C108(v51, v53, v54);
        uint64_t v56 = USOParse.userParse.getter(v55);
        uint64_t v57 = Siri_Nlu_External_UserParse.userDialogActs.getter(v56);
        (*(void (**)(uint8_t *, uint64_t))(v86 + 8))(v14, v87);
        uint64_t v58 = *(void *)(v57 + 16);
        if (v58)
        {
          uint64_t v25 = v57 + ((*(unsigned __int8 *)(v92 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80));
          uint64_t v59 = *(void *)(v92 + 72);
          uint64_t v60 = *(uint64_t (**)(uint64_t))(v92 + 16);
          uint64_t v94 = v57;
          sub_17C9C();
          uint64_t v61 = (uint64_t)v91;
          while (1)
          {
            uint64_t v62 = sub_757B0(v61);
            uint64_t v63 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v62);
            sub_7553C(v61);
            if ((v63 & 1) != 0) {
              break;
            }
            sub_75B70();
            if (v64)
            {
              uint64_t v63 = v94;
              sub_1BC04();
              sub_1BD3C();
              char v65 = (char)v85;
              while (1)
              {
                uint64_t v66 = sub_75C98();
                uint64_t v67 = v60(v66);
                Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v67);
                sub_75A34();
                if ((v65 & 1) != 0) {
                  break;
                }
                v25 += v59;
                if (!--v58)
                {
                  sub_2B644(v63);
                  uint64_t v52 = v88;
                  goto LABEL_45;
                }
              }

              sub_2B644(v63);
              if (qword_FB258 != -1) {
                swift_once(&qword_FB258, sub_71E18);
              }
              uint64_t v81 = sub_1BD34();
              sub_39658(v81, (uint64_t)qword_FEC20);
              os_log_type_t v82 = sub_2BFB4();
              if (sub_329F4(v82))
              {
                uint64_t v83 = (_WORD *)sub_1BA1C(2LL);
                sub_2BA04(v83);
                uint64_t v80 = "validateCancellation: USO parse userDialogActs contains hasCancelled; returning .cancel()";
                goto LABEL_55;
              }

              goto LABEL_56;
            }
          }

          sub_2B644(v94);
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v75 = sub_1BD34();
          sub_39658(v75, (uint64_t)qword_FEC20);
          os_log_type_t v76 = sub_2BFB4();
          if (sub_329F4(v76))
          {
            uint64_t v77 = (_WORD *)sub_1BA1C(2LL);
            sub_2BA04(v77);
            uint64_t v80 = "validateCancellation: USO parse userDialogActs contains hasRejected; returning .cancel()";
LABEL_55:
            sub_39644(&dword_0, v78, v79, v80);
            sub_1B904(v63);
          }

LABEL_56:
          sub_75990();
          (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v88);
          goto LABEL_14;
        }

        sub_18034();
LABEL_45:
        (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v52);
LABEL_16:
        uint64_t v43 = sub_75AF8();
        uint64_t v44 = v95;
        uint64_t v45 = 1LL;
        goto LABEL_17;
      }
    }

    uint64_t v68 = sub_75AF8();
    sub_44FF8(v95, v69, v70, v68);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v0, v24);
    goto LABEL_18;
  }

  sub_7566C();
  uint64_t v29 = sub_67C4((uint64_t *)&unk_FCC60);
  sub_75CFC(v29);
LABEL_5:
  uint64_t v30 = *(void (**)(uint64_t))(v2 + 32);
  uint64_t v31 = sub_75C30();
  v30(v31);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v23, v1, v26);
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v32 = sub_1BD34();
  sub_75BA4(v32, (uint64_t)qword_FEC20);
  uint64_t v33 = sub_1E720((uint64_t)v23, v20);
  Logger.logObject.getter(v33);
  os_log_type_t v34 = sub_2BFB4();
  BOOL v35 = sub_43670(v34);
  uint64_t v36 = v94;
  if (v35)
  {
    uint64_t v37 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v38 = sub_1BA1C(32LL);
    uint64_t v97 = v38;
    *(_DWORD *)uint64_t v37 = 136315138;
    sub_11718(&qword_FBE60, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C5488);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v36, v39);
    uint64_t v96 = sub_75CCC(v40, v41);
    sub_757DC((uint64_t)&v96, (uint64_t)&v97);
    sub_18034();
    sub_75C84();
    sub_1E7D8(&dword_0, (os_log_s *)v30, (os_log_type_t)v14, "validateCancellation: %s", v37);
    sub_1E7D0(v38);
    sub_1B904(v38);
    sub_1B904((uint64_t)v37);
  }

  else
  {
    sub_75C84();
  }

  if (qword_FB318 != -1) {
    swift_once(&qword_FB318, sub_9707C);
  }
  uint64_t v25 = qword_101168;
  sub_11718((unint64_t *)&qword_FD600, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
  IntentNodeTraversable.value<A>(forNode:)(v25, v36, v42);
  if (v97 - 1 >= 2)
  {
    sub_1E6E4((uint64_t)v23);
    goto LABEL_16;
  }

  sub_75990();
  sub_1E6E4((uint64_t)v23);
LABEL_14:
  uint64_t v43 = sub_75AF8();
  uint64_t v44 = v25;
  uint64_t v45 = 0LL;
LABEL_17:
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v44, v45, 1LL, v43);
LABEL_18:
  sub_17E58();
}

  sub_17E58();
}

void sub_B5F4()
{
  uint64_t v126 = v4;
  uint64_t v127 = v3;
  uint64_t v128 = v5;
  uint64_t v6 = sub_75740();
  uint64_t v117 = *(void *)(v6 - 8);
  uint64_t v118 = v6;
  sub_17B6C();
  __chkstk_darwin(v7);
  uint64_t v116 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_75730();
  uint64_t v120 = *(void *)(v9 - 8);
  uint64_t v121 = v9;
  sub_17B6C();
  __chkstk_darwin(v10);
  sub_17D14();
  uint64_t v119 = v11;
  uint64_t v12 = sub_21530();
  uint64_t v114 = *(void *)(v12 - 8);
  uint64_t v115 = v12;
  sub_17B6C();
  __chkstk_darwin(v13);
  uint64_t v15 = sub_7555C(v14, v112);
  uint64_t v122 = type metadata accessor for DirectInvocationUtils.Timer.URI(v15);
  uint64_t v16 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  uint64_t v18 = (char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v124 = *(void *)(v19 - 8);
  uint64_t v125 = v19;
  sub_17B6C();
  __chkstk_darwin(v20);
  v123 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_755F4();
  sub_17B6C();
  __chkstk_darwin(v23);
  sub_1C308();
  uint64_t v26 = (os_log_s *)(v25 - v24);
  uint64_t v27 = sub_75738();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  sub_18124();
  uint64_t v29 = sub_75818();
  sub_75700();
  __chkstk_darwin(v30);
  sub_1810C();
  sub_2C108((uint64_t)v2, v128, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
  uint64_t v31 = sub_75C98();
  int v33 = v32(v31);
  if (v33 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_75580();
LABEL_5:
    BOOL v35 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v1 + 32);
    v35(v0, v2, v29);
    uint64_t v36 = sub_5A434();
    ((void (*)(uint64_t))v35)(v36);
    if (qword_FB2D0 != -1) {
      swift_once(&qword_FB2D0, sub_96EE4);
    }
    uint64_t v37 = qword_101120;
    sub_11718((unint64_t *)&qword_FD600, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
    IntentNodeTraversable.value<A>(forNode:)(v37, v22, v38);
    uint64_t v27 = v131;
    sub_1E6E4((uint64_t)v26);
    uint64_t v39 = v127;
    if ((_DWORD)v27 == 9) {
      char v40 = 13;
    }
    else {
      char v40 = sub_96B90(v27);
    }
LABEL_27:
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v58 = sub_1BD34();
    sub_39658(v58, (uint64_t)qword_FEC20);
    os_log_type_t v59 = sub_2BFB4();
    if (sub_2B864(v59))
    {
      uint64_t v60 = sub_1BA1C(22LL);
      uint64_t v61 = sub_1BA1C(64LL);
      *(void *)&__int128 v131 = v61;
      *(_DWORD *)uint64_t v60 = 136315394;
      uint64_t v129 = v39;
      swift_getMetatypeMetadata(v126);
      uint64_t v62 = sub_75C1C();
      uint64_t v64 = sub_4C664(v62, v63);
      sub_759B4(v64, v65, v66, v60 + 12);
      sub_17EE8();
      *(_WORD *)(v60 + 12) = 2080;
      LOBYTE(v129) = v40;
      uint64_t v67 = sub_75C1C();
      uint64_t v69 = sub_4C664(v67, v68);
      sub_759B4(v69, v70, v71, v60 + 22);
      sub_17EE8();
      sub_436C0( &dword_0,  (os_log_s *)v27,  (os_log_type_t)v0,  "Testing currentIntentType %s against input verb %s",  (uint8_t *)v60);
      sub_436B8(v61);
      sub_1B904(v61);
      sub_1B904(v60);
    }

    __asm { BR              X10 }
  }

  if (v33 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_75580();
    uint64_t v34 = sub_67C4((uint64_t *)&unk_FCC60);
    sub_7599C(v34);
    goto LABEL_5;
  }

  if (v33 == enum case for Parse.directInvocation(_:))
  {
    sub_75580();
    uint64_t v42 = (uint64_t)v123;
    uint64_t v41 = v124;
    uint64_t v43 = sub_75BE8();
    uint64_t v44 = v125;
    uint64_t v47 = sub_75590(v43, v45, v46);
    Parse.DirectInvocation.identifier.getter(v47);
    sub_75A9C();
    uint64_t v48 = (*(uint64_t (**)(char *, void, uint64_t))(v16 + 104))( v18,  enum case for DirectInvocationUtils.Timer.URI.stopTimer(_:),  v122);
    uint64_t v49 = DirectInvocationUtils.Timer.URI.rawValue.getter(v48);
    uint64_t v51 = v50;
    sub_75D10((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
    BOOL v52 = v0 == v49 && v27 == v51;
    if (v52)
    {
      sub_2B644(v27);
      char v40 = 10;
      uint64_t v39 = v127;
      goto LABEL_26;
    }

    uint64_t v0 = sub_4C5C4(v0, v27, v49, v51);
    sub_18034();
    uint64_t v53 = sub_2B7C4();
    uint64_t v39 = v127;
    if ((v0 & 1) != 0)
    {
      char v40 = 10;
LABEL_26:
      sub_17D0C(v42, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
      goto LABEL_27;
    }

    uint64_t v80 = Parse.DirectInvocation.userData.getter(v53);
    if (v80)
    {
      uint64_t v27 = v80;
      uint64_t v82 = v114;
      uint64_t v81 = v115;
      uint64_t v83 = v113;
      (*(void (**)(uint64_t, void, uint64_t))(v114 + 104))( v113,  enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:),  v115);
      uint64_t v84 = sub_75904();
      uint64_t v0 = v85;
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v83, v81);
      sub_75550(v84, &v131);
      sub_1BC04();
      uint64_t v86 = sub_2B7C4();
      if (v132)
      {
        if ((sub_75A5C(v86, v87, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
        {
          char v40 = sub_7E238(v129, v130);
          if (v40 != 19) {
            goto LABEL_26;
          }
        }
      }

      else
      {
        sub_2B374((uint64_t)&v131, &qword_FCD20);
      }
    }

    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v107 = sub_1BD34();
    sub_39658(v107, (uint64_t)qword_FEC20);
    os_log_type_t v108 = sub_2BFB4();
    if (sub_329F4(v108))
    {
      uint64_t v109 = (_WORD *)sub_1BA1C(2LL);
      sub_2BA04(v109);
      sub_39644( &dword_0,  v110,  v111,  "Unknown direct invocation payload (missing/unknown timer verb). Disallowing input.");
      sub_1B904(v0);
    }

    unint64_t v101 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    uint64_t v99 = v42;
    uint64_t v100 = v44;
    goto LABEL_80;
  }

  if (v33 == enum case for Parse.NLv4IntentOnly(_:))
  {
    sub_75580();
    uint64_t v27 = *v2;
    sub_75928();
    if (sub_75920())
    {
      char v40 = sub_6AB8();
      uint64_t v54 = sub_7010(v40);
      LOBYTE(v0) = v55;
      if (v54 == 1886352499 && v55 == 0xE400000000000000LL)
      {
        sub_1BC04();
        uint64_t v39 = v127;
      }

      else
      {
        char v57 = sub_4C5C4(v54, v55, 1886352499LL, 0xE400000000000000LL);
        sub_1BC04();
        uint64_t v39 = v127;
        if ((v57 & 1) == 0)
        {
          sub_1E808();
LABEL_40:
          sub_1BC50();
          goto LABEL_27;
        }
      }

      LOBYTE(v0) = sub_73F8();
      sub_1E808();
      sub_1BC50();
      if ((v0 & 1) == 0) {
        goto LABEL_27;
      }
    }

    else
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v93 = sub_1BD34();
      sub_39658(v93, (uint64_t)qword_FEC20);
      os_log_type_t v94 = sub_1BCD0();
      if (sub_2B854(v94))
      {
        uint64_t v95 = (_WORD *)sub_1BA1C(2LL);
        sub_4C4EC(v95);
        sub_1BBEC( &dword_0,  v26,  (os_log_type_t)v0,  "No USO task found on input. Deferring to later checks for parse validity.",  (uint8_t *)v1);
        sub_1B904(v1);
        sub_1E808();
      }

      else
      {

        sub_1E808();
      }
    }
  }

  else if (v33 == enum case for Parse.uso(_:))
  {
    sub_75580();
    uint64_t v73 = v119;
    uint64_t v72 = v120;
    uint64_t v74 = sub_75590(v119, (uint64_t)v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 32));
    uint64_t v27 = (uint64_t)v116;
    USOParse.userParse.getter(v74);
    sub_38968();
    uint64_t v76 = v75;
    sub_2BBC0(v117);
    if (v76)
    {
      LOBYTE(v0) = 115;
      char v40 = sub_6AB8();
      sub_7010(v40);
      sub_75BB8();
      if (v52 && v78 == 0xE400000000000000LL)
      {
        sub_2B7C4();
        uint64_t v39 = v127;
      }

      else
      {
        LOBYTE(v0) = sub_4C5C4(v77, v27, 1886352499LL, 0xE400000000000000LL);
        sub_2B7C4();
        uint64_t v39 = v127;
        if ((v0 & 1) == 0)
        {
          sub_17D0C(v73, *(uint64_t (**)(uint64_t, uint64_t))(v72 + 8));
          goto LABEL_40;
        }
      }

      uint64_t v27 = sub_73F8();
      sub_1BC50();
      sub_17D0C(v73, *(uint64_t (**)(uint64_t, uint64_t))(v72 + 8));
      if ((v27 & 1) == 0) {
        goto LABEL_27;
      }
    }

    else
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v102 = sub_1BD34();
      sub_39658(v102, (uint64_t)qword_FEC20);
      os_log_type_t v103 = sub_2BFB4();
      if (sub_329F4(v103))
      {
        uint64_t v104 = (_WORD *)sub_1BA1C(2LL);
        sub_2BA04(v104);
        sub_39644(&dword_0, v105, v106, "No USO task found on input. Deferring to later checks for parse validity.");
        sub_1B904(v0);
      }

      sub_17D0C(v73, *(uint64_t (**)(uint64_t, uint64_t))(v72 + 8));
    }
  }

  else
  {
    if (v33 != enum case for Parse.empty(_:))
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v96 = sub_1BD34();
      sub_39658(v96, (uint64_t)qword_FEC20);
      os_log_type_t v97 = sub_32A5C();
      if (sub_2B854(v97))
      {
        v98 = (_WORD *)sub_1BA1C(2LL);
        sub_4C4EC(v98);
        sub_1BBEC( &dword_0,  v26,  (os_log_type_t)v0,  "Unknown parse type found while testing input validity. Disallowing unknown input.",  (uint8_t *)v1);
        sub_1B904(v1);
      }

      uint64_t v99 = sub_75C98();
LABEL_80:
      v101(v99, v100);
      goto LABEL_41;
    }

    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v88 = sub_1BD34();
    sub_39658(v88, (uint64_t)qword_FEC20);
    os_log_type_t v89 = sub_2BFB4();
    if (sub_329F4(v89))
    {
      uint64_t v90 = (_WORD *)sub_1BA1C(2LL);
      sub_2BA04(v90);
      sub_39644(&dword_0, v91, v92, "Empty parse found while testing valid input. Disallowing empty input.");
      sub_1B904(v0);
    }
  }

LABEL_41:
  sub_17E58();
}

  uint64_t v138 = v369;
  sub_AEBC();
  static ActionForInput.cancel()(v139);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v99, 0LL, 1LL, v131);
  v140 = v137 + *(int *)(v368 + 48);
  sub_43420(v138, v381);
  id v141 = v381;
  sub_8C84(v99, v140, &qword_FEC80);
  sub_4364C(v141);
  if (v93)
  {
    sub_433BC(v99);
    id v141 = v381;
    sub_8CC4(v138, &qword_FEC80);
    sub_4364C(v140);
    if (v93)
    {
      sub_8CC4(v141, &qword_FEC80);
      goto LABEL_64;
    }

    goto LABEL_52;
  }

  sub_4358C(v141, &qword_FEC80, (uint64_t)&v390);
  sub_4364C(v140);
  if (v144)
  {
    sub_4357C(v99);
    sub_4357C(v138);
    (*(void (**)(uint64_t, uint64_t))(v362 + 8))(v56, v131);
LABEL_52:
    sub_8CC4(v141, (uint64_t *)&unk_FCC80);
    goto LABEL_53;
  }

  char v164 = v362;
  v165 = v99;
  os_log_type_t v166 = v56;
  uint64_t v56 = v355;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v362 + 32))(v355, v140, v131);
  sub_4345C( &qword_FCD10,  v167,  (uint64_t (*)(uint64_t))&type metadata accessor for ActionForInput,  (uint64_t)&protocol conformance descriptor for ActionForInput);
  v169 = dispatch thunk of static Equatable.== infix(_:_:)(v166, v56, v131, v168);
  uint64_t v100 = *(uint64_t **)(v164 + 8);
  ((void (*)(uint64_t, uint64_t))v100)(v56, v131);
  sub_433BC(v165);
  sub_433BC(v138);
  ((void (*)(uint64_t, uint64_t))v100)(v166, v131);
  sub_433BC(v381);
  if ((v169 & 1) != 0)
  {
LABEL_64:
    uint64_t v170 = v360;
    sub_434E0(v360, enum case for DecideAction.PromptExpectation.slot(_:));
    sub_433E0(v170);
    uint64_t v171 = v361;
    uint64_t v85 = v361 + v172;
    sub_43420(v111, v361);
    sub_43420(v170, v85);
    v173 = sub_43360(v171);
    if (v93)
    {
      sub_436E4(v173, (uint64_t *)&unk_FCC70);
      sub_43360(v85);
      if (v93)
      {
        sub_8CC4(v171, (uint64_t *)&unk_FCC70);
LABEL_88:
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        v202 = sub_1BD34();
        sub_39658(v202, (uint64_t)qword_FEC20);
        v203 = sub_2BFB4();
        if (sub_329F4(v203))
        {
          v204 = (_WORD *)sub_1BA1C(2LL);
          sub_2BA04(v204);
          sub_39644(&dword_0, v205, v206, "Received cancel input slot prompt input – .cancel()");
          sub_1B904((uint64_t)v100);
        }

        static ActionForInput.cancel()(v207);
        return;
      }
    }

    else
    {
      sub_4358C(v171, (uint64_t *)&unk_FCC70, (uint64_t)v382);
      uint64_t v175 = sub_43360(v85);
      if (!v174)
      {
        sub_4346C();
        sub_4345C( &qword_FCD08,  v199,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
        uint64_t v85 = sub_43450(v56, v111, v201, v200);
        uint64_t v100 = (uint64_t *)v100[1];
        sub_43464(v111);
        sub_433BC(v170);
        sub_43464(v56);
        sub_433BC(v171);
        if ((v85 & 1) != 0) {
          goto LABEL_88;
        }
        goto LABEL_73;
      }

      sub_436E4(v175, (uint64_t *)&unk_FCC70);
      sub_433D8(v56, *(uint64_t (**)(uint64_t, uint64_t))(v383 + 8));
    }

    sub_8CC4(v171, &qword_FCC90);
LABEL_73:
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v176 = sub_1BD34();
    sub_39658(v176, (uint64_t)qword_FEC20);
    uint64_t v177 = sub_2BFB4();
    if (!sub_329F4(v177)) {
      goto LABEL_23;
    }
    uint64_t v178 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v178);
    uint64_t v119 = "Received cancel input on non-confirmation, non-slot prompt input – .ignore()";
LABEL_22:
    sub_39644(&dword_0, v117, v118, v119);
    sub_1B904((uint64_t)v100);
LABEL_23:

    sub_43524();
    return;
  }

  uint64_t v145 = v366;
  sub_AEBC();
  static ActionForInput.cancel()(v146);
  sub_2F75C((uint64_t)v93, 0LL);
  v147 = v144 + *(int *)(v365 + 48);
  sub_756A8(v145, v378);
  uint64_t v148 = v378;
  sub_754CC((uint64_t)v93, v147, &qword_FEC80);
  sub_4C720(v148, 1LL, v137);
  if (v88)
  {
    sub_2B5B8((uint64_t)v93);
    sub_2B374(v145, &qword_FEC80);
    uint64_t v149 = sub_4C720(v147, 1LL, v137);
    if (v88)
    {
      sub_2BAAC(v149, &qword_FEC80);
      goto LABEL_65;
    }

    goto LABEL_52;
  }

  uint64_t v92 = v357;
  sub_754CC(v148, (uint64_t)v357, &qword_FEC80);
  sub_4C720(v147, 1LL, v137);
  if (v153)
  {
    sub_2B990((uint64_t)v93);
    sub_2B990(v145);
    uint64_t v149 = sub_75BCC((uint64_t)v92, *(uint64_t (**)(uint64_t, uint64_t))(v358 + 8));
LABEL_52:
    sub_2BAAC(v149, (uint64_t *)&unk_FCC80);
    goto LABEL_53;
  }

  uint64_t v170 = v358;
  uint64_t v171 = v352;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v358 + 32))(v352, v147, v137);
  sub_11718( &qword_FCD10,  (uint64_t (*)(uint64_t))&type metadata accessor for ActionForInput,  (uint64_t)&protocol conformance descriptor for ActionForInput);
  v173 = dispatch thunk of static Equatable.== infix(_:_:)(v92, v171, v137, v172);
  uint64_t v93 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
  v93(v171, v137);
  sub_2B5B8((uint64_t)v384);
  sub_2B5B8(v145);
  v93((uint64_t)v92, v137);
  os_log_type_t v133 = (uint64_t)v377;
  uint64_t v92 = v381;
  sub_2B5B8(v148);
  if ((v173 & 1) != 0)
  {
LABEL_65:
    uint64_t v174 = v355;
    sub_757D0(v355, enum case for DecideAction.PromptExpectation.slot(_:));
    sub_75644(v174);
    uint64_t v175 = v356;
    uint64_t v49 = v356 + v176;
    sub_756A8(v100, v356);
    sub_756A8(v174, v49);
    sub_490E4(v175);
    if (v88)
    {
      sub_2B374(v174, (uint64_t *)&unk_FCC70);
      uint64_t v178 = sub_490E4(v49);
      if (v88)
      {
        sub_75C3C(v178, (uint64_t *)&unk_FCC70);
LABEL_89:
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        os_log_type_t v205 = sub_1BD34();
        sub_39658(v205, (uint64_t)qword_FEC20);
        v206 = sub_2BFB4();
        if (sub_329F4(v206))
        {
          uint64_t v207 = (_WORD *)sub_1BA1C(2LL);
          sub_2BA04(v207);
          sub_39644(&dword_0, v208, v209, "Received cancel input slot prompt input – .cancel()");
          sub_1B904((uint64_t)v93);
        }

        sub_758E0();
        goto LABEL_59;
      }
    }

    else
    {
      v179 = v347;
      sub_75C14(v175, v177, (uint64_t *)&unk_FCC70);
      sub_490E4(v49);
      if (!v180)
      {
        uint64_t v201 = v382;
        v202 = v374;
        sub_75590(v374, v49, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v382 + 32));
        sub_11718( &qword_FCD08,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
        uint64_t v49 = sub_7569C(v179, v202, v204, v203);
        uint64_t v93 = *(void (**)(uint64_t, uint64_t))(v201 + 8);
        sub_7563C(v202);
        sub_2B5B8(v174);
        sub_7563C(v179);
        sub_2B5B8(v175);
        if ((v49 & 1) != 0) {
          goto LABEL_89;
        }
        goto LABEL_74;
      }

      sub_2B374(v174, (uint64_t *)&unk_FCC70);
      uint64_t v178 = sub_17D0C(v179, *(uint64_t (**)(uint64_t, uint64_t))(v382 + 8));
    }

    sub_75C3C(v178, &qword_FCC90);
LABEL_74:
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v181 = sub_1BD34();
    sub_39658(v181, (uint64_t)qword_FEC20);
    uint64_t v182 = sub_2BFB4();
    if (!sub_329F4(v182)) {
      goto LABEL_23;
    }
    v183 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v183);
    uint64_t v118 = "Received cancel input on non-confirmation, non-slot prompt input – .ignore()";
LABEL_22:
    sub_39644(&dword_0, v116, v117, v118);
    sub_1B904((uint64_t)v93);
LABEL_23:

    sub_7562C();
    goto LABEL_59;
  }

_BYTE *initializeBufferWithCopyOfBuffer for ComposeTimerModel.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_BFC4(unsigned __int8 *a1)
{
  return *a1;
}

void sub_BFCC()
{
  if (v0)
  {
    sub_A2128(v0, 0);
    id v2 = v1;
  }

  else if (UsoTask.alarmEntity.getter())
  {
    sub_A2664();
    id v2 = v5;
    if (!v5) {
      goto LABEL_4;
    }
  }

  else
  {
    id v2 = [sub_A29B0() init];
    sub_A28E4(v2, "setLabel:");
    [(id)objc_opt_self(SiriTimeTimerConstants) defaultDuration];
    uint64_t v6 = sub_A2980();
    sub_A2968(v6, "setType:");
  }

  sub_A291C();
  sub_A29E0();
  sub_C458();
  uint64_t v4 = (void *)sub_A29B8(v3);
  sub_5F80C(v2, "setTargetingInfo:");

LABEL_4:
  sub_2B750();
  sub_37FA0();
}

double UsoEntity_common_Timer.duration.getter()
{
  if (!dispatch thunk of UsoEntity_common_Timer.totalDuration.getter()
    || (double v2 = UsoEntity_common_Duration.valueInSeconds.getter(),
        sub_1BC50(),
        [(id)sub_5E3DC() minimumDuration],
        v3 >= v2))
  {
    if (!dispatch thunk of UsoEntity_common_Timer.endTime.getter()) {
      goto LABEL_10;
    }
    uint64_t v4 = UsoEntity_common_DateTime.toDateTimeWithMeridiemSetByUser()();
    sub_1BC50();
    if (!v4) {
      goto LABEL_10;
    }
    uint64_t v5 = swift_retain(v4);
    uint64_t v6 = static DateTimeInferenceUtils.inferDateTime(from:anchorDate:)(v5, 0LL);
    uint64_t v7 = sub_1E83C();
    if (!v6)
    {
      sub_1E83C();
      goto LABEL_10;
    }

    DateTime.asDate()(v7);
    uint64_t v8 = type metadata accessor for Date(0LL);
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v0, 1LL, v8) == 1)
    {
      sub_1E83C();
      swift_release();
      sub_8CC4(v0, &qword_FD638);
LABEL_10:
      [(id)sub_5E3DC() defaultDuration];
      return v11;
    }

    double v2 = Date.timeIntervalSinceNow.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v0, v8);
    [(id)sub_5E3DC() minimumDuration];
    double v10 = v9;
    swift_release();
    sub_1E83C();
    if (v10 >= v2) {
      goto LABEL_10;
    }
  }

  return v2;
}

void UsoEntity_common_Timer.timerType.getter()
{
  uint64_t v0 = (os_log_s *)type metadata accessor for UsoEntity_appleTimer_TimerAttribute.DefinedValues(0LL);
  uint64_t v1 = *((void *)v0 - 1);
  __chkstk_darwin(v0);
  sub_1C308();
  (*(void (**)(uint64_t, void, os_log_s *))(v1 + 104))( v3 - v2,  enum case for UsoEntity_appleTimer_TimerAttribute.DefinedValues.appleTimer_TimerAttribute_TimerTypeSleep(_:),  v0);
  os_log_type_t v4 = sub_5E3C8();
  sub_5E324(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  if ((v4 & 1) != 0)
  {
    if (qword_FB1F0 != -1) {
      swift_once(&qword_FB1F0, sub_5D8D0);
    }
    uint64_t v5 = sub_1BD34();
    sub_39658(v5, (uint64_t)qword_FDD60);
    os_log_type_t v6 = sub_5E3B4();
    if (os_log_type_enabled(v0, v6))
    {
      uint64_t v7 = (uint8_t *)sub_1B9DC();
      *(_WORD *)uint64_t v7 = 0;
      sub_1BBEC(&dword_0, v0, v6, "USO parse has sleep timer attribute!", v7);
LABEL_10:
      sub_1B904((uint64_t)v7);
    }
  }

  else
  {
    if (qword_FB1F0 != -1) {
      swift_once(&qword_FB1F0, sub_5D8D0);
    }
    uint64_t v8 = sub_1BD34();
    sub_39658(v8, (uint64_t)qword_FDD60);
    os_log_type_t v9 = sub_5E3B4();
    if (sub_329F4(v9))
    {
      uint64_t v7 = (uint8_t *)sub_1B9DC();
      *(_WORD *)uint64_t v7 = 0;
      sub_1BBEC(&dword_0, v0, v4, "USO parse does not have sleep timer attribute", v7);
      goto LABEL_10;
    }
  }

  sub_17B78();
}

void sub_C3B0()
{
}

void sub_C458()
{
}

uint64_t sub_C500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v6 = (void *)swift_task_alloc(dword_FCE6C);
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_C55C;
  return sub_43FCC(a1, v7, a3);
}

uint64_t sub_C55C(uint64_t a1)
{
  uint64_t v4 = sub_1BAE0();
  if (!v1) {
    uint64_t v4 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(v4);
}

uint64_t sub_C598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_FCE7C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_C5FC;
  return sub_43DAC(a1, a2, a3);
}

uint64_t sub_C5FC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t sub_C634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *os_log_type_t v9 = v4;
  v9[1] = sub_C630;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_C6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_FF5FC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_2ADE8;
  return sub_80DE4(a1, a2);
}

uint64_t sub_C704()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FF5F4);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_C630;
  return sub_C75C();
}

uint64_t sub_C75C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FF5E4);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = sub_4C6A8(v1);
  return sub_83530(v2, v3);
}

void sub_C7A0()
{
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_67C4(&qword_100530);
  sub_17B6C();
  __chkstk_darwin(v5);
  uint64_t v65 = (char *)v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_433B0();
  __chkstk_darwin(v7);
  sub_436A0();
  uint64_t v72 = v8;
  sub_67C4(&qword_FBE68);
  sub_17B6C();
  __chkstk_darwin(v9);
  sub_1C308();
  uint64_t v12 = v11 - v10;
  uint64_t v75 = type metadata accessor for RREntity(0LL);
  uint64_t v69 = *(void *)(v75 - 8);
  sub_17B6C();
  __chkstk_darwin(v13);
  sub_433C4();
  uint64_t v68 = v14;
  sub_433B0();
  __chkstk_darwin(v15);
  sub_436A0();
  uint64_t v67 = v16;
  NLContextUpdate.init()();
  uint64_t v17 = type metadata accessor for GroupIdentifierGenerator(0LL);
  sub_2B838(v17);
  uint64_t v66 = GroupIdentifierGenerator.init()();
  unint64_t v18 = v2 >> 62;
  if (v2 >> 62)
  {
    sub_ABE2C();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v0);
    if (v19) {
      goto LABEL_3;
    }
LABEL_22:
    sub_17CD0();
    uint64_t v53 = _swiftEmptyArrayStorage;
    goto LABEL_23;
  }

  uint64_t v19 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(v2);
  if (!v19) {
    goto LABEL_22;
  }
LABEL_3:
  if (v19 < 1)
  {
    __break(1u);
    goto LABEL_36;
  }

  v64[0] = v2 >> 62;
  v64[1] = v4;
  uint64_t v20 = 0LL;
  uint64_t v77 = 0LL;
  uint64_t v73 = _swiftEmptyArrayStorage;
  unint64_t v76 = v2 & 0xC000000000000001LL;
  uint64_t v70 = v19;
  unint64_t v71 = v2;
  do
  {
    if (v76) {
      id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v2);
    }
    else {
      id v21 = sub_2BB50(v2 + 8 * v20);
    }
    uint64_t v22 = v21;
    uint64_t v78 = sub_11274();
    if (v78)
    {
      id v23 = v22;
      uint64_t v79 = (void *)sub_58E1C(v23);
      uint64_t v80 = v24;
      sub_67C4(&qword_FB580);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v27 = v26;
      if (qword_FB218 != -1) {
        swift_once(&qword_FB218, sub_66720);
      }
      uint64_t v28 = qword_100F90;
      uint64_t v29 = *(void *)algn_100F98;
      uint64_t v30 = type metadata accessor for GroupIdentifier(0LL);
      uint64_t v31 = v72;
      uint64_t v74 = v30;
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v72, 1LL, 1LL, v30);
      uint64_t v32 = type metadata accessor for SiriTimer(0LL);
      id v33 = v23;
      swift_bridgeObjectRetain(v29);
      uint64_t v34 = v78;
      swift_retain();
      uint64_t v35 = v27;
      uint64_t v36 = v77;
      RREntity.init<A>(id:appBundleId:usoEntity:intentEntity:group:)(v25, v35, v28, v29, v34, v33, v31, v32);
      if (v36)
      {
        swift_errorRelease(v36);
        _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v12, 1LL, 1LL, v75);

        sub_1BC50();
        sub_DABC(v12, &qword_FBE68);
        uint64_t v77 = 0LL;
        uint64_t v19 = v70;
        unint64_t v2 = v71;
      }

      else
      {
        uint64_t v77 = 0LL;
        uint64_t v37 = v75;
        _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v12, 0LL, 1LL, v75);
        uint64_t v38 = v69;
        uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 32);
        uint64_t v40 = v67;
        uint64_t v41 = v39(v67, v12, v37);
        uint64_t v42 = (uint64_t)v65;
        dispatch thunk of GroupIdentifierGenerator.addGroupIdentifier()(v41);
        _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v42, 0LL, 1LL, v74);
        RREntity.group.setter(v42);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v68, v40, v37);
        uint64_t v43 = v73;
        uint64_t v44 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0) {
          uint64_t v43 = (void *)sub_877CC(0, v43[2] + 1LL, 1, (uint64_t)v43);
        }
        unint64_t v46 = v43[2];
        unint64_t v45 = v43[3];
        uint64_t v73 = v43;
        unint64_t v2 = v71;
        if (v46 >= v45 >> 1)
        {
          char v50 = sub_ABF1C(v45);
          uint64_t v73 = (void *)sub_877CC(v50, v51, v52, (uint64_t)v73);
        }

        uint64_t v47 = v73;
        v73[2] = v46 + 1;
        uint64_t v48 = v69;
        uint64_t v49 = v75;
        v39( (uint64_t)v47 + ((*(unsigned __int8 *)(v48 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))
        + *(void *)(v69 + 72) * v46,
          v68,
          v75);

        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v67, v49);
        uint64_t v19 = v70;
      }
    }

    else
    {
    }

    ++v20;
  }

  while (v19 != v20);
  sub_17CD0();
  unint64_t v18 = v64[0];
  uint64_t v53 = v73;
LABEL_23:
  swift_bridgeObjectRetain(v53);
  NLContextUpdate.rrEntities.setter();
  if (!v18)
  {
    uint64_t v54 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    if (v54) {
      goto LABEL_25;
    }
LABEL_33:
    sub_756F8();
    uint64_t v62 = _swiftEmptyArrayStorage;
LABEL_34:
    NLContextUpdate.applicationContextObjects.setter(v62);
    unint64_t v63 = sub_AAE78(v2);
    NLContextUpdate.displayHints.setter(v63);
    swift_release();
    sub_17E58();
    return;
  }

  sub_ABE2C();
  uint64_t v54 = _CocoaArrayWrapper.endIndex.getter(v19);
  sub_17CD0();
  if (!v54) {
    goto LABEL_33;
  }
LABEL_25:
  uint64_t v79 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v54);
  if ((v54 & 0x8000000000000000LL) == 0)
  {
    uint64_t v55 = 0LL;
    do
    {
      if ((v2 & 0xC000000000000001LL) != 0) {
        id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v2);
      }
      else {
        id v56 = sub_2BB50(v2 + 8 * v55);
      }
      char v57 = v56;
      ++v55;
      id v58 = sub_CFB0();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v59);
      uint64_t v60 = v79[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v60);
      uint64_t v61 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
      specialized ContiguousArray._endMutation()(v61);
    }

    while (v54 != v55);
    uint64_t v62 = v79;
    sub_756F8();
    goto LABEL_34;
  }

LABEL_36:
  __break(1u);
}

  sub_32A38(v6, v7, v8, v9, v10, v11, v12, v13, v39, v40, v41, v44, v45, a2);
  swift_bridgeObjectRelease(v4);
  return 0LL;
}

void sub_CCB4()
{
  uint64_t v3 = type metadata accessor for UsoEntity_common_TimeUnit.DefinedValues(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1813C();
  uint64_t v5 = sub_8830C();
  sub_2B838(v5);
  UsoEntityBuilder_common_Timer.init()();
  uint64_t v6 = type metadata accessor for UsoEntityBuilder_common_TimeUnit(0LL);
  sub_2B838(v6);
  UsoEntityBuilder_common_TimeUnit.init()();
  sub_B83C8( v1,  enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Second(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104));
  dispatch thunk of UsoEntityBuilder_common_TimeUnit.setDefinedValue(value:)(v1);
  uint64_t v7 = sub_1BBE4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  id v8 = sub_5A468(v7, "duration");
  if (v8)
  {
    sub_B8410(v8);
    sub_B83A4();
    uint64_t v9 = type metadata accessor for UsoEntityBuilder_common_Integer(0LL);
    sub_2B838(v9);
    UsoEntityBuilder_common_Integer.init()();
    if ((~*(void *)&v2 & 0x7FF0000000000000LL) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        if (v2 < 9.22337204e18)
        {
          sub_B8314();
          uint64_t v10 = type metadata accessor for UsoEntityBuilder_common_DurationComponent(0LL);
          sub_2B838(v10);
          UsoEntityBuilder_common_DurationComponent.init()();
          uint64_t v11 = sub_4C4E4();
          dispatch thunk of UsoEntityBuilder_common_DurationComponent.setUnit(value:)( v11,  &protocol witness table for UsoEntityBuilder_common_TimeUnit);
          sub_4C454();
          uint64_t v12 = sub_38084();
          dispatch thunk of UsoEntityBuilder_common_DurationComponent.setValue(value:)( v12,  &protocol witness table for UsoEntityBuilder_common_Integer);
          sub_2BB30();
          uint64_t v13 = type metadata accessor for UsoEntityBuilder_common_Duration(0LL);
          sub_2B838(v13);
          UsoEntityBuilder_common_Duration.init()();
          uint64_t v14 = sub_B8378();
          dispatch thunk of UsoEntityBuilder_common_Duration.addComponents(value:)( v14,  &protocol witness table for UsoEntityBuilder_common_DurationComponent);
          sub_1E84C();
          uint64_t v15 = swift_retain();
          dispatch thunk of UsoEntityBuilder_common_Timer.setTotalDuration(value:)( v15,  &protocol witness table for UsoEntityBuilder_common_Duration);
          sub_2BB30();
          sub_1E84C();
          id v8 = (id)sub_4C44C(v4);
          goto LABEL_6;
        }

LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_18;
  }

  __break(1u);
  return result;
}

    sub_DABC(v14, &qword_1008D0);
    uint64_t v34 = v82;
LABEL_24:
    if (qword_FB3F0 != -1) {
      swift_once(&qword_FB3F0, sub_B6DE4);
    }
    unint64_t v46 = sub_1BD34();
    uint64_t v47 = (os_log_s *)sub_5474(v46, (uint64_t)qword_1008B8);
    uint64_t v48 = swift_retain_n(v34, 2LL);
    Logger.logObject.getter(v48);
    uint64_t v49 = sub_1BCD0();
    if (sub_434EC(v49))
    {
      char v50 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v51 = sub_1BA1C(32LL);
      uint64_t v83 = v51;
      *(_DWORD *)char v50 = 136315138;
      static UsoBuilderConversionUtils.convertEntityToGraph(entity:)(v34);
      static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
      uint64_t v53 = v52;
      uint64_t v54 = swift_release();
      id v56 = sub_B83F0(v54, v55, &v83);
      char v57 = sub_ABED0(v56);
      sub_B833C(v57, v58);
      sub_4C44C(v34);
      swift_bridgeObjectRelease(v53);
      sub_1E7D8(&dword_0, v47, (os_log_type_t)v23, "Failed to resolve NoEntity reference to Timer entity:\n %s", v50);
      sub_1E7D0(v51);
      sub_1B904(v51);
      sub_1B904((uint64_t)v50);
      sub_B83D0();
      sub_2B750();
    }

    else
    {

      swift_release_n(v34, 3LL);
      sub_B83D0();
    }

    goto LABEL_29;
  }

  sub_B8070(v14, (uint64_t)v18);
  sub_381CC(v33);
  if (v35)
  {
    sub_DABC((uint64_t)v21, &qword_1008D8);
    sub_DABC((uint64_t)v23, &qword_1008D8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    goto LABEL_18;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v33, v8);
  uint64_t v36 = sub_B80B8();
  uint64_t v37 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v1, v8, v36);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v38(v1, v8);
  sub_B8294((uint64_t)v21);
  sub_B8294((uint64_t)v23);
  v38((uint64_t)v18, v8);
  sub_B8294(v14);
  uint64_t v34 = v82;
  if ((v37 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_20:
  uint64_t v39 = sub_8830C();
  sub_2B838(v39);
  UsoEntityBuilder_common_Timer.init()();
  uint64_t v40 = static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)();
  uint64_t v41 = sub_1BC50();
  if (!v40) {
    goto LABEL_24;
  }
  uint64_t v42 = v77;
  static SiriReferenceResolutionResolver.shared.getter(v41);
  uint64_t v43 = v80;
  SiriReferenceResolutionResolver.resolveReferenceEntity(referenceEntity:)(v40);
  (*(void (**)(uint64_t, _DWORD *))(v78 + 8))(v42, v79);
  uint64_t v44 = type metadata accessor for RREntity(0LL);
  LOBYTE(v23) = v44;
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v43, 1LL, v44) == 1)
  {
    sub_2BE94();
    sub_DABC(v43, &qword_FBE68);
    goto LABEL_24;
  }

  unint64_t v45 = sub_2BF0C();
  uint64_t v59 = (void *)RREntity.convertData<A>(to:)(v45, v45);
  sub_B82C8();
  if (!v59)
  {
    sub_2BE94();
    goto LABEL_24;
  }

  if (qword_FB3F0 != -1) {
    swift_once(&qword_FB3F0, sub_B6DE4);
  }
  uint64_t v60 = sub_1BD34();
  uint64_t v61 = (os_log_s *)sub_5474(v60, (uint64_t)qword_1008B8);
  uint64_t v62 = v59;
  Logger.logObject.getter(v62);
  unint64_t v63 = sub_1BCD0();
  if (sub_434EC(v63))
  {
    uint64_t v64 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v80 = sub_1BA1C(32LL);
    uint64_t v83 = v80;
    *(_DWORD *)uint64_t v64 = 136315138;
    uint64_t v65 = v64 + 12;
    uint64_t v79 = v64 + 4;
    uint64_t v66 = v64;
    uint64_t v67 = v62;
    uint64_t v68 = [v67 description];
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    unint64_t v71 = v70;

    uint64_t v72 = sub_683C(v69, v71, &v83);
    uint64_t v73 = sub_ABED0(v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v73, v74, v79, v65);

    swift_bridgeObjectRelease(v71);
    sub_1E7D8( &dword_0,  v61,  (os_log_type_t)v23,  "resolvedNoEntityReference: Resolved NoEntity reference %s from SRR. Using it to search timer.",  v66);
    uint64_t v75 = v80;
    sub_1E7D0(v80);
    sub_1B904(v75);
    sub_1B904((uint64_t)v66);
    sub_B83D0();
    swift_release();
  }

  else
  {

    swift_release();
    sub_2BE94();
  }

  swift_release();
LABEL_29:
  sub_17E58();
}

LABEL_6:
  id v16 = sub_5A468((uint64_t)v8, "remainingTime");
  if (v16)
  {
    sub_B8410(v16);
    sub_B83A4();
    uint64_t v17 = type metadata accessor for UsoEntityBuilder_common_Integer(0LL);
    sub_2B838(v17);
    UsoEntityBuilder_common_Integer.init()();
    if ((~*(void *)&v2 & 0x7FF0000000000000LL) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        if (v2 < 9.22337204e18)
        {
          sub_B8314();
          uint64_t v18 = type metadata accessor for UsoEntityBuilder_common_DurationComponent(0LL);
          sub_2B838(v18);
          UsoEntityBuilder_common_DurationComponent.init()();
          uint64_t v19 = sub_4C4E4();
          dispatch thunk of UsoEntityBuilder_common_DurationComponent.setUnit(value:)( v19,  &protocol witness table for UsoEntityBuilder_common_TimeUnit);
          sub_4C454();
          uint64_t v20 = sub_38084();
          dispatch thunk of UsoEntityBuilder_common_DurationComponent.setValue(value:)( v20,  &protocol witness table for UsoEntityBuilder_common_Integer);
          sub_2BB30();
          uint64_t v21 = type metadata accessor for UsoEntityBuilder_common_Duration(0LL);
          sub_2B838(v21);
          UsoEntityBuilder_common_Duration.init()();
          uint64_t v22 = sub_B8378();
          dispatch thunk of UsoEntityBuilder_common_Duration.addComponents(value:)( v22,  &protocol witness table for UsoEntityBuilder_common_DurationComponent);
          sub_1E84C();
          uint64_t v23 = swift_retain();
          dispatch thunk of UsoEntityBuilder_common_Timer.setTimeRemaining(value:)( v23,  &protocol witness table for UsoEntityBuilder_common_Duration);
          sub_2BB30();
          sub_1E84C();
          sub_4C44C(v4);
          goto LABEL_11;
        }

LABEL_21:
        __break(1u);
        return;
      }

  return v8;
}

LABEL_20:
      __break(1u);
      goto LABEL_21;
    }

  swift_bridgeObjectRelease(v3);
  return _swiftEmptyArrayStorage;
}

LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

LABEL_11:
  sub_5F3DC(v0, (SEL *)&selRef_label);
  if (v24)
  {
    uint64_t v25 = v24;
    sub_B83AC();
    if (v26) {
      dispatch thunk of UsoEntityBuilder_common_Timer.setName(value:)();
    }
    swift_bridgeObjectRelease(v25);
  }

  sub_4C454();
  sub_88108();
}

  swift_bridgeObjectRelease(a3);
  uint64_t v12 = 0;
  return v12 & 1;
}

id sub_CFB0()
{
  double v2 = v0;
  sub_67C4(&qword_FB530);
  sub_1BCE0();
  __chkstk_darwin(v3);
  sub_1C308();
  uint64_t v6 = v5 - v4;
  id v7 = [objc_allocWithZone(SATimerObject) init];
  uint64_t v8 = sub_B8254((uint64_t)v7, (SEL *)&selRef_label);
  if (v9)
  {
    sub_B83AC();
    if (v13) {
      sub_B83C0(v10, v11, v12, (SEL *)&selRef_setTitle_);
    }
    else {
      uint64_t v8 = swift_bridgeObjectRelease(v11);
    }
  }

  id v14 = sub_5A468(v8, "duration");
  if (v14)
  {
    [v14 doubleValue];
    sub_B83A4();
    id v15 = [objc_allocWithZone(NSNumber) initWithDouble:v1];
    sub_5F80C(v7, "setTimerValue:");
  }

  id v16 = (char *)sub_5A468((uint64_t)v14, "state");
  uint64_t v17 = &SATimerStatePausedValue;
  uint64_t v18 = &SATimerStateRunningValue;
  if (v16 != (_BYTE *)&dword_0 + 1) {
    uint64_t v18 = &SATimerStateUndefinedValue;
  }
  if (v16 != (_BYTE *)&dword_0 + 2) {
    uint64_t v17 = v18;
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v17);
  sub_B83C0(v19, v20, v21, (SEL *)&selRef_setState_);
  uint64_t v22 = sub_5F3DC(v2, (SEL *)&selRef_identifier);
  if (v23)
  {
    uint64_t v24 = v22;
    uint64_t v25 = v23;
    id v26 = v7;
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v27._countAndFlagsBits = v24;
    v27._object = v25;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(v25);
    URL.init(string:)(0xD000000000000017LL, 0x80000000000C9EB0LL);
    swift_bridgeObjectRelease(0x80000000000C9EB0LL);
    uint64_t v28 = type metadata accessor for URL(0LL);
    uint64_t v30 = 0LL;
    if (sub_B8384(v6) != 1)
    {
      URL._bridgeToObjectiveC()(v29);
      uint64_t v30 = v31;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8LL))(v6, v28);
    }

    sub_5F80C(v26, "setIdentifier:");
  }

  if (sub_5A468(v22, "type") == (char *)&dword_0 + 2)
  {
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(SATimerTypeSleepTimerValue);
    sub_B83C0(v32, v33, v34, (SEL *)&selRef_setType_);
  }

  return v7;
}

unint64_t sub_D224(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_D288(a1, a2, v5);
}

unint64_t sub_D288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

_OWORD *sub_D368(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_D378()
{
  double v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PunchOutApp(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1C308();
  uint64_t v10 = v9 - v8;
  sub_67C4(&qword_FBD98);
  sub_1BCE0();
  __chkstk_darwin(v11);
  sub_433C4();
  uint64_t v84 = v12;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v83 = (char *)&v82 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v82 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v82 - v19;
  uint64_t v86 = v7;
  uint64_t v87 = v6;
  if (v5)
  {
    uint64_t v21 = v5;
  }

  else
  {
    uint64_t v22 = type metadata accessor for TimerTimer.Builder(0LL);
    sub_2B838(v22);
    uint64_t v21 = sub_D98C();
  }

  uint64_t v23 = type metadata accessor for DialogDuration.Builder(0LL);
  sub_2B838(v23);
  uint64_t v24 = sub_2F740();
  uint64_t v25 = DialogDuration.Builder.init()(v24);
  id v26 = sub_B82DC(v25, "duration");
  Swift::String v27 = v26;
  if (v26)
  {
    sub_5A468((uint64_t)v26, "doubleValue");
    uint64_t v29 = v28;

    id v26 = v29;
  }

  dispatch thunk of DialogDuration.Builder.withSecs(_:)(v26, v27 == 0LL);
  uint64_t v30 = sub_1BC50();
  uint64_t v31 = dispatch thunk of DialogDuration.Builder.build()(v30);
  sub_2B750();
  id v32 = v3;
  uint64_t v90 = v31;
  dispatch thunk of DialogDuration.mockGlobals.setter(v3);
  uint64_t v33 = sub_B624C();
  id v88 = v32;
  dispatch thunk of DialogDuration.mockGlobals.setter(v3);
  uint64_t v34 = sub_5F3DC(v1, (SEL *)&selRef_label);
  os_log_type_t v89 = v3;
  if (v35)
  {
    uint64_t v36 = v35;
    String.toSpeakableString.getter(v34, v35);
    swift_bridgeObjectRelease(v36);
    sub_1BCD8();
    uint64_t v37 = (uint64_t)v20;
    uint64_t v38 = 0LL;
  }

  else
  {
    sub_1BCD8();
    uint64_t v37 = (uint64_t)v20;
    uint64_t v38 = 1LL;
  }

  sub_8E3CC(v37, v38);
  uint64_t v39 = v21 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_label;
  sub_599A4(v21 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_label, (uint64_t)v91);
  sub_DA74((uint64_t)v20, v39);
  sub_B824C();
  sub_5BDA4();
  uint64_t v40 = sub_DABC((uint64_t)v20, &qword_FBD98);
  id v41 = sub_B82DC(v40, "type");
  SiriTimerType.toSpeakableString()(v41);
  sub_1BCD8();
  sub_8E3CC((uint64_t)v18, 0LL);
  sub_599A4(v21 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_type, (uint64_t)v91);
  sub_B82A8();
  sub_B824C();
  uint64_t v42 = sub_B829C();
  id v43 = sub_B82DC(v42, "state");
  SiriTimerState.toSpeakableString()(v43);
  sub_8E3CC((uint64_t)v18, 0LL);
  sub_599A4(v21 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_state, (uint64_t)v91);
  sub_B82A8();
  sub_B824C();
  sub_B829C();
  uint64_t v44 = sub_38084();
  sub_69274(v44);
  sub_1E83C();
  uint64_t v85 = v33;
  sub_2BB30();
  uint64_t v45 = sub_38084();
  uint64_t v46 = sub_69280(v45);
  sub_1BC50();
  sub_2BB30();
  uint64_t v47 = v86;
  uint64_t v48 = sub_B83C8( v10,  enum case for PunchOutApp.timer(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 104));
  PunchOutApp.toResponseFrameworkCommandAction()(v48);
  sub_1BBE4(v10, *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8));
  sub_599A4(v46 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_action, (uint64_t)v91);
  sub_B82A8();
  sub_B824C();
  sub_B829C();
  uint64_t v49 = sub_5F3DC(v1, (SEL *)&selRef_identifier);
  if (v50)
  {
    uint64_t v51 = v50;
  }

  else
  {
    uint64_t v49 = 0LL;
    uint64_t v51 = 0xE000000000000000LL;
  }

  uint64_t v52 = sub_692C0(v49, v51, 0LL, 0LL);
  swift_bridgeObjectRelease(v51);
  uint64_t v53 = swift_release();
  id v54 = sub_B82DC(v53, "device");
  if (v54)
  {
    uint64_t v55 = v54;
    uint64_t v56 = sub_5F3DC(v54, (SEL *)&selRef_roomName);
    if (v57)
    {
      uint64_t v58 = v57;
      uint64_t v59 = (uint64_t)v83;
      String.toSpeakableString.getter(v56, v57);
      swift_bridgeObjectRelease(v58);
      uint64_t v60 = 0LL;
    }

    else
    {
      uint64_t v60 = 1LL;
      uint64_t v59 = (uint64_t)v83;
    }

    uint64_t v61 = v84;
    uint64_t v62 = 1LL;
    sub_8E3CC(v59, v60);
    uint64_t v63 = v52 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_roomName;
    sub_599A4(v52 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_roomName, (uint64_t)v91);
    sub_DA74(v59, v63);
    sub_B824C();
    uint64_t v64 = sub_2F740();
    uint64_t v65 = sub_34CBC(v64, &qword_FBD98);
    uint64_t v66 = sub_B8254(v65, (SEL *)&selRef_deviceName);
    if (v67)
    {
      uint64_t v68 = v67;
      String.toSpeakableString.getter(v66, v67);
      swift_bridgeObjectRelease(v68);
      uint64_t v62 = 0LL;
    }

    sub_8E3CC(v61, v62);
    uint64_t v69 = v52 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_deviceName;
    sub_599A4(v52 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_deviceName, (uint64_t)v91);
    sub_DA74(v61, v69);
    sub_B824C();
    sub_B8334(v61);
    sub_8E3CC((uint64_t)v18, 1LL);
    uint64_t v70 = v52 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_action;
    sub_599A4(v52 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_action, (uint64_t)v91);
    sub_DA74((uint64_t)v18, v70);
    sub_B824C();
    uint64_t v71 = sub_B8334((uint64_t)v18);
    id v72 = sub_2BD30(v71, "targetMatchType");
    sub_B77C4((uint64_t)v72);
    sub_8E3CC((uint64_t)v18, 0LL);
    uint64_t v73 = v52 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_targetDeviceType;
    sub_599A4(v52 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_targetDeviceType, (uint64_t)v91);
    sub_DA74((uint64_t)v18, v73);
    sub_B824C();
    uint64_t v74 = sub_B8334((uint64_t)v18);
    id v75 = sub_2BD30(v74, "isInRespondingRoom");
    if (v75)
    {
      unint64_t v76 = v75;
      unsigned __int8 v77 = [v75 BOOLValue];
    }

    else
    {
      unsigned __int8 v77 = 0;
    }

    *(_BYTE *)(v52 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isInRespondingRoom) = v77;
    sub_2B750();
  }

  uint64_t v78 = type metadata accessor for TimerTimer(0LL);
  sub_2B838(v78);
  uint64_t v79 = sub_69480(v52);
  sub_1E83C();
  swift_release();
  swift_release();
  swift_beginAccess(v79 + 16, v91, 1LL, 0LL);
  uint64_t v80 = *(void **)(v79 + 16);
  *(void *)(v79 + 16) = v89;
  id v81 = v88;

  sub_88108();
}

uint64_t type metadata accessor for TimerTimer.Builder(uint64_t a1)
{
  return sub_DAF8(a1, qword_FE820, (uint64_t)&nominal type descriptor for TimerTimer.Builder);
}

uint64_t sub_D98C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_label;
  uint64_t v2 = sub_1BCD8();
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v1, 1LL, 1LL, v2);
  sub_6A284(OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_type);
  sub_6A284(OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_state);
  *(void *)(v0 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_remainingTime) = 0LL;
  *(void *)(v0 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_duration) = 0LL;
  sub_6A284(OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_action);
  sub_6A284(OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_roomName);
  sub_6A284(OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_deviceName);
  sub_6A284(OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_targetDeviceType);
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isInRespondingRoom) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isLabelUniqueAcrossGroup) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isLabelUniqueInRoom) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isOnlyMatchingTimerInRoom) = 0;
  sub_6A284(OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_timerIDString);
  return v0;
}

uint64_t sub_DA74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FBD98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_DABC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_67C4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_DAF8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t type metadata accessor for TimerTimer(uint64_t a1)
{
  return sub_DAF8(a1, qword_FE6B8, (uint64_t)&nominal type descriptor for TimerTimer);
}

uint64_t sub_DB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FBD98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_DB84()
{
  return sub_698D8((void (*)(void))sub_693D4);
}

void *sub_DB90(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t type metadata accessor for DefaultCircuitBreaker()
{
  return objc_opt_self(&OBJC_CLASS____TtC23TimerFlowDelegatePlugin21DefaultCircuitBreaker);
}

uint64_t sub_DBEC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_DC14()
{
  uint64_t v0 = type metadata accessor for OSSignpostID(0LL);
  __chkstk_darwin(v0);
  sub_1C308();
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1C308();
  uint64_t v5 = (void *)(v4 - v3);
  uint64_t v6 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1C308();
  uint64_t v10 = v9 - v8;
  uint64_t v20 = type metadata accessor for SiriTimeMeasurement(0LL);
  uint64_t v11 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_1C308();
  uint64_t v14 = v13 - v12;
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))( v10,  enum case for SiriTimeMeasurement.LogDescription.bobcatTimers(_:),  v6);
  if (qword_FB260 != -1) {
    swift_once(&qword_FB260, sub_76030);
  }
  uint64_t v15 = sub_5474(v1, (uint64_t)qword_FEE60);
  (*(void (**)(void *, uint64_t, uint64_t))(v2 + 16))(v5, v15, v1);
  uint64_t v16 = mach_absolute_time();
  uint64_t v17 = SiriTimeMeasurement.init(_:log:startTime:)(v10, v5, v16);
  static os_signpost_type_t.begin.getter(v17);
  static SiriTimeLog.timerExtensionOSLogObject.getter();
  sub_76320();
  sub_762F4();

  uint64_t v18 = sub_76314();
  static os_signpost_type_t.end.getter(v18);
  static SiriTimeLog.timerExtensionOSLogObject.getter();
  sub_76320();
  sub_762F4();

  sub_76314();
  SiriTimeMeasurement.logDelta()();
  SpeakableString.init(print:speak:)(0x746C7561666564LL, 0xE700000000000000LL, 0LL, 0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v14, v20);
}

uint64_t sub_DE28()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t sub_DE4C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 56);
  uint64_t v5 = *v2;
  *(void *)(v5 + 64) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_E0F0, 0LL, 0LL);
  }
  uint64_t v7 = *(void *)(v5 + 40);
  swift_bridgeObjectRelease(*(void *)(v5 + 48));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_DEE0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_67C4(&qword_FBD98);
  v3[5] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_DF40, 0LL, 0LL);
}

uint64_t sub_DF40()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = swift_allocObject(v2, 128LL, 7LL);
  v0[6] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C27E0;
  strcpy((char *)(v3 + 32), "createdTimer");
  *(_BYTE *)(v3 + 45) = 0;
  *(_WORD *)(v3 + 46) = -5120;
  uint64_t v4 = 0LL;
  if (v1)
  {
    uint64_t v4 = type metadata accessor for TimerTimer(0LL);
  }

  else
  {
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  uint64_t v5 = v0[5];
  uint64_t v6 = v0[3];
  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 72) = v4;
  *(void *)(v3 + 80) = 0xD000000000000016LL;
  *(void *)(v3 + 88) = 0x80000000000C7A50LL;
  sub_32FC0(v6, v5, &qword_FBD98);
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  int v8 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v5, 1LL, v7);
  uint64_t v9 = v0[5];
  if (v8 == 1)
  {
    swift_retain();
    sub_DABC(v9, &qword_FBD98);
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
  }

  else
  {
    *(void *)(v3 + 120) = v7;
    uint64_t v10 = sub_DB90((void *)(v3 + 96));
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v10, v9, v7);
    swift_retain();
  }

  v0[7] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_DE4C;
  return v13(0xD000000000000021LL, 0x80000000000C8870LL, v3);
}

uint64_t sub_E0F0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_E130(void *a1)
{
  return sub_E150(a1);
}

uint64_t sub_E150(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_67C4(&qword_FEB58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1C308();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_8CFC(a1, v10);
  unint64_t v12 = sub_E4C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for TimerTimer.CodingKeys,  &type metadata for TimerTimer.CodingKeys,  v12,  v10,  v11);
  uint64_t v13 = v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_label;
  LOBYTE(v20) = 0;
  uint64_t v14 = type metadata accessor for SpeakableString(0LL);
  uint64_t v15 = sub_E538( &qword_FEB60,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
  sub_6A298(v13, (uint64_t)&v20, v5, v14, v15);
  if (!v2)
  {
    sub_6A254(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_type, 1);
    sub_6A254(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_state, 2);
    uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_remainingTime);
    char v19 = 3;
    uint64_t v16 = type metadata accessor for DialogDuration(0LL);
    uint64_t v17 = sub_E538( &qword_FEB68,  (uint64_t (*)(uint64_t))&type metadata accessor for DialogDuration,  (uint64_t)&protocol conformance descriptor for DialogDuration);
    sub_6A298((uint64_t)&v20, (uint64_t)&v19, v5, v16, v17);
    uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_duration);
    char v19 = 4;
    sub_6A298((uint64_t)&v20, (uint64_t)&v19, v5, v16, v17);
    sub_6A254(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_action, 5);
    sub_6A254(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_roomName, 6);
    sub_6A254(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_deviceName, 7);
    sub_6A254(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_targetDeviceType, 8);
    sub_6A2A4(*(unsigned __int8 *)(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isInRespondingRoom), 9);
    sub_6A2A4( *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isLabelUniqueAcrossGroup),  10);
    sub_6A2A4(*(unsigned __int8 *)(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isLabelUniqueInRoom), 11);
    sub_6A2A4( *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isOnlyMatchingTimerInRoom),  12);
    sub_6A254(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_timerIDString, 13);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_E448()
{
  unint64_t result = qword_FEB78;
  if (!qword_FEB78)
  {
    unint64_t result = swift_getWitnessTable(&unk_C3FD4, &type metadata for TimerTimer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FEB78);
  }

  return result;
}

unint64_t sub_E484()
{
  unint64_t result = qword_FEB80;
  if (!qword_FEB80)
  {
    unint64_t result = swift_getWitnessTable(&unk_C3FFC, &type metadata for TimerTimer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FEB80);
  }

  return result;
}

unint64_t sub_E4C0()
{
  unint64_t result = qword_FEB40;
  if (!qword_FEB40)
  {
    unint64_t result = swift_getWitnessTable(&unk_C40C4, &type metadata for TimerTimer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FEB40);
  }

  return result;
}

unint64_t sub_E4FC()
{
  unint64_t result = qword_FEB70;
  if (!qword_FEB70)
  {
    unint64_t result = swift_getWitnessTable(&unk_C409C, &type metadata for TimerTimer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FEB70);
  }

  return result;
}

uint64_t sub_E538(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for TimerTimer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_E5C4 + 4 * byte_C3EB1[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_E5F8 + 4 * byte_C3EAC[v4]))();
}

uint64_t sub_E5F8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E600(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xE608LL);
  }
  return result;
}

uint64_t sub_E614(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xE61CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 13;
  return result;
}

uint64_t sub_E620(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E628(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for TimerTimer.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 13) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 14;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v5 = v6 - 14;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

    uint64_t v22 = (void *)swift_task_alloc(dword_100564);
    v2[27] = v22;
    *uint64_t v22 = v2;
    v22[1] = sub_2A7BC;
    sub_20788();
    return sub_AC948();
  }

  if (v17) {
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v23 = v2[3];
  uint64_t v24 = swift_task_alloc(32LL);
  v2[22] = v24;
  *(void *)(v24 + 16) = v23;
  uint64_t v25 = (void *)swift_task_alloc(dword_10056C);
  v2[23] = v25;
  void *v25 = v2;
  v25[1] = sub_2A69C;
  sub_20788();
  return sub_ACBBC(v26, v27);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v5 = v6 - 19;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  sub_8E570();
  uint64_t v39 = enum case for ConfirmationResponse.rejected(_:);
LABEL_19:
  sub_8E304(v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 104));
  sub_8E2E0();
  uint64_t v40 = sub_8E48C();
  ConfirmIntentAnswer.init(confirmationResponse:intent:)(v33, v9, v40);
  sub_8E4A8();
LABEL_20:
  id v41 = sub_8E37C();
  sub_8E264(v41);
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  sub_1B838();
  sub_1BA8C();
  sub_1BA60();
  sub_1BAD0();
  sub_1BABC();
  uint64_t v42 = sub_1B86C();
  uint64_t v50 = sub_1B8C4(v42, v43, v44, v45, v46, v47, v48, v49, v375, v381, v387);
  uint64_t v58 = sub_1B8BC(v50, v51, v52, v53, v54, v55, v56, v57, v376, v382, v388, v393);
  sub_1B8B4(v58, v59, v60, v61, v62, v63, v64, v65, v377, v383, v389, v394, v397);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v66 = *(uint64_t (**)(void))(v22 + 8);
  return v66();
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x24;
  int v5 = v6 - 36;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_E6BC()
{
  return sub_E6C4(*v0);
}

uint64_t sub_E6C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_E6FC + 4 * byte_C3E9E[a1]))( 0xD000000000000010LL,  0x80000000000C68F0LL);
}

void sub_E71C()
{
}

uint64_t sub_E75C()
{
  return sub_6A52C();
}

void sub_E76C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_E78C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v66 = a3;
  sub_67C4(&qword_FBD98);
  sub_1BCE0();
  __chkstk_darwin(v8);
  sub_433C4();
  uint64_t v64 = v9;
  sub_433B0();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v63 - v12;
  __chkstk_darwin(v11);
  sub_5E384();
  __chkstk_darwin(v14);
  sub_6A518();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v63 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v63 - v20;
  __chkstk_darwin(v19);
  sub_6A508();
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v63 - v23;
  BOOL v25 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000LL;
  if (v25 || (sub_6A274(0x6C6562616CLL, 0xE500000000000000LL) & 1) != 0)
  {
    uint64_t v26 = sub_6A45C(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_label);
    sub_6A36C(v26);
    sub_1BCD8();
    sub_5E300((uint64_t)v24);
    if (!v25) {
      goto LABEL_95;
    }
    uint64_t v27 = (uint64_t)v24;
    goto LABEL_9;
  }

  BOOL v29 = a1 == 1701869940 && a2 == 0xE400000000000000LL;
  if (v29 || (sub_6A274(1701869940LL, 0xE400000000000000LL) & 1) != 0)
  {
    uint64_t v30 = sub_6A45C(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_type);
    sub_6A1B0(v30, v3);
    uint64_t v31 = sub_1BCD8();
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v3, 1LL, v31) != 1)
    {
      id v32 = v66;
      v66[3] = v31;
      sub_DB90(v32);
      uint64_t v33 = *(void (**)(void))(*(void *)(v31 - 8) + 32LL);
LABEL_11:
      v33();
      return;
    }

    uint64_t v27 = v3;
LABEL_9:
    sub_6A1F8(v27);
LABEL_10:
    uint64_t v28 = v66;
    *(_OWORD *)uint64_t v66 = 0u;
    *((_OWORD *)v28 + 1) = 0u;
    return;
  }

  BOOL v34 = a1 == 0x6574617473LL && a2 == 0xE500000000000000LL;
  if (v34 || (sub_6A274(0x6574617473LL, 0xE500000000000000LL) & 1) != 0)
  {
    uint64_t v35 = sub_6A45C(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_state);
    sub_6A1B0(v35, (uint64_t)v21);
    sub_1BCD8();
    sub_5E300((uint64_t)v21);
    if (!v25) {
      goto LABEL_95;
    }
    uint64_t v27 = (uint64_t)v21;
    goto LABEL_9;
  }

  BOOL v36 = a1 == 0x6E696E69616D6572LL && a2 == 0xED0000656D695467LL;
  if (v36 || (sub_6A274(0x6E696E69616D6572LL, 0xED0000656D695467LL) & 1) != 0)
  {
    uint64_t v37 = OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_remainingTime;
LABEL_34:
    uint64_t v38 = *(void *)(v65 + v37);
    if (!v38) {
      goto LABEL_10;
    }
    uint64_t v39 = type metadata accessor for DialogDuration(0LL);
    uint64_t v40 = v66;
    v66[3] = v39;
    void *v40 = v38;
    swift_retain();
    return;
  }

  BOOL v41 = a1 == 0x6E6F697461727564LL && a2 == 0xE800000000000000LL;
  if (v41 || (sub_6A274(0x6E6F697461727564LL, 0xE800000000000000LL) & 1) != 0)
  {
    uint64_t v37 = OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_duration;
    goto LABEL_34;
  }

  BOOL v42 = a1 == 0x6E6F69746361LL && a2 == 0xE600000000000000LL;
  if (v42 || (sub_6A274(0x6E6F69746361LL, 0xE600000000000000LL) & 1) != 0)
  {
    uint64_t v43 = sub_6A45C(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_action);
    sub_6A1B0(v43, (uint64_t)v18);
    sub_1BCD8();
    sub_5E300((uint64_t)v18);
    if (!v25) {
      goto LABEL_95;
    }
    uint64_t v27 = (uint64_t)v18;
    goto LABEL_9;
  }

  BOOL v44 = a1 == 0x656D614E6D6F6F72LL && a2 == 0xE800000000000000LL;
  if (v44 || (sub_6A274(0x656D614E6D6F6F72LL, 0xE800000000000000LL) & 1) != 0)
  {
    uint64_t v45 = sub_6A45C(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_roomName);
    sub_6A1B0(v45, v5);
    sub_1BCD8();
    sub_5E300(v5);
    if (!v25) {
      goto LABEL_95;
    }
    uint64_t v27 = v5;
    goto LABEL_9;
  }

  BOOL v46 = a1 == 0x614E656369766564LL && a2 == 0xEA0000000000656DLL;
  if (v46 || (sub_6A274(0x614E656369766564LL, 0xEA0000000000656DLL) & 1) != 0)
  {
    uint64_t v47 = sub_6A45C(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_deviceName);
    sub_6A1B0(v47, v4);
    sub_1BCD8();
    sub_5E300(v4);
    if (!v25) {
      goto LABEL_95;
    }
    uint64_t v27 = v4;
    goto LABEL_9;
  }

  uint64_t v48 = "targetDeviceType";
  if (a1 == 0xD000000000000010LL && (sub_6A398(), v25)
    || (sub_6A274(0xD000000000000010LL, (unint64_t)(v48 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    uint64_t v49 = sub_6A45C(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_targetDeviceType);
    sub_6A1B0(v49, (uint64_t)v13);
    sub_1BCD8();
    sub_5E300((uint64_t)v13);
    if (!v25) {
      goto LABEL_95;
    }
    uint64_t v27 = (uint64_t)v13;
    goto LABEL_9;
  }

  uint64_t v50 = 0xD000000000000012LL;
  uint64_t v51 = "isInRespondingRoom";
  if (a1 == 0xD000000000000012LL && (sub_6A398(), v25)
    || (sub_6A274(v50, (unint64_t)(v51 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    uint64_t v52 = OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isInRespondingRoom;
  }

  else
  {
    uint64_t v55 = 0xD000000000000018LL;
    uint64_t v56 = "isLabelUniqueAcrossGroup";
    if (a1 == 0xD000000000000018LL && (sub_6A398(), v25)
      || (sub_6A274(v55, (unint64_t)(v56 - 32) | 0x8000000000000000LL) & 1) != 0)
    {
      uint64_t v52 = OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isLabelUniqueAcrossGroup;
    }

    else
    {
      uint64_t v57 = 0xD000000000000013LL;
      uint64_t v58 = "isLabelUniqueInRoom";
      if (a1 == 0xD000000000000013LL && (sub_6A398(), v25)
        || (sub_6A274(v57, (unint64_t)(v58 - 32) | 0x8000000000000000LL) & 1) != 0)
      {
        uint64_t v52 = OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isLabelUniqueInRoom;
      }

      else
      {
        uint64_t v59 = 0xD000000000000019LL;
        uint64_t v60 = "isOnlyMatchingTimerInRoom";
        if (a1 != 0xD000000000000019LL || (sub_6A398(), !v25))
        {
          if ((sub_6A274(v59, (unint64_t)(v60 - 32) | 0x8000000000000000LL) & 1) == 0)
          {
            BOOL v61 = a1 == 0x53444972656D6974LL && a2 == 0xED0000676E697274LL;
            if (!v61 && (sub_6A274(0x53444972656D6974LL, 0xED0000676E697274LL) & 1) == 0) {
              goto LABEL_10;
            }
            uint64_t v62 = v64;
            sub_6A1B0(v65 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_timerIDString, v64);
            sub_1BCD8();
            sub_5E300(v62);
            if (!v25)
            {
LABEL_95:
              sub_6A30C();
              sub_6A440();
              goto LABEL_11;
            }

            uint64_t v27 = v64;
            goto LABEL_9;
          }
        }

        uint64_t v52 = OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isOnlyMatchingTimerInRoom;
      }
    }
  }

  uint64_t v53 = v66;
  char v54 = *(_BYTE *)(v65 + v52);
  v66[3] = &type metadata for Bool;
  *uint64_t v53 = v54;
}

void sub_EE84()
{
  uint64_t v30 = sub_B822C(v1, v28);
  uint64_t v2 = *(void *)(v30 - 8);
  sub_17B6C();
  __chkstk_darwin(v3);
  sub_17D14();
  uint64_t v5 = v4;
  sub_67C4(&qword_FB538);
  sub_1BCE0();
  __chkstk_darwin(v6);
  sub_1C308();
  uint64_t v9 = v8 - v7;
  sub_B8254(v10, (SEL *)&selRef_identifier);
  uint64_t v11 = sub_B8304();
  uint64_t v12 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v9, 1LL, 1LL, v11);
  uint64_t v29 = sub_B8254(v12, (SEL *)&selRef_label);
  id v13 = sub_2BD30(v29, "duration");
  uint64_t v14 = v13;
  if (v13)
  {
    sub_B8360();
  }

  id v15 = sub_2BD30((uint64_t)v13, "remainingTime");
  uint64_t v16 = v15;
  if (v15)
  {
    sub_B836C();
  }

  id v17 = sub_2BD30((uint64_t)v15, "state");
  uint64_t v18 = SiriTimerState.rawValue.getter(v17);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 104))(v5, enum case for PunchOutApp.timer(_:), v30);
  PunchOutApp.url.getter(v19);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v5, v30);
  sub_B81E0(v20, v21, v22, v23, v24, v25, v26, v27, v16 == 0LL, v18, 0, v31);
  sub_88108();
}

uint64_t sub_F078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FCD20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SiriTimePluginModel(uint64_t a1)
{
  return sub_DAF8(a1, qword_FB688, (uint64_t)&nominal type descriptor for SiriTimePluginModel);
}

unint64_t sub_F0D4()
{
  unint64_t result = qword_FC2B0;
  if (!qword_FC2B0)
  {
    uint64_t v1 = type metadata accessor for SiriTimePluginModel(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SiriTimePluginModel, v1);
    atomic_store(result, (unint64_t *)&qword_FC2B0);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SiriTimePluginModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      uint64_t v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      uint64_t v19 = a2[5];
      a1[4] = a2[4];
      a1[5] = v19;
      uint64_t v20 = a2[6];
      uint64_t v21 = a2[7];
      a1[6] = v20;
      a1[7] = v21;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v21);
      id v13 = a1;
      uint64_t v14 = a3;
      uint64_t v15 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *a2;
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for TimerSelectorModel(0LL) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      swift_bridgeObjectRetain(v8);
      uint64_t v12 = sub_67C4(&qword_FB5C0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      id v13 = a1;
      uint64_t v14 = a3;
      uint64_t v15 = 1LL;
    }

    else
    {
      uint64_t v22 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v22);
      id v13 = a1;
      uint64_t v14 = a3;
      uint64_t v15 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v13, v14, v15);
  }

  return a1;
}

void *initializeWithCopy for SiriTimePluginModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    uint64_t v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    uint64_t v14 = a2[3];
    a1[2] = a2[2];
    a1[3] = v14;
    uint64_t v15 = a2[5];
    a1[4] = a2[4];
    a1[5] = v15;
    uint64_t v16 = a2[6];
    uint64_t v17 = a2[7];
    a1[6] = v16;
    a1[7] = v17;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    uint64_t v18 = v17;
LABEL_6:
    swift_bridgeObjectRetain(v18);
    goto LABEL_7;
  }

  if ((_DWORD)EnumCaseMultiPayload != 1)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    goto LABEL_6;
  }

  uint64_t v8 = *a2;
  *a1 = *a2;
  uint64_t v9 = *(int *)(type metadata accessor for TimerSelectorModel(0LL) + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  swift_bridgeObjectRetain(v8);
  uint64_t v12 = sub_67C4(&qword_FB5C0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
LABEL_7:
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t destroy for SiriTimePluginModel(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[3]);
    swift_bridgeObjectRelease(a1[5]);
    uint64_t v4 = a1[7];
    return swift_bridgeObjectRelease(v4);
  }

  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v4 = *a1;
    return swift_bridgeObjectRelease(v4);
  }

  swift_bridgeObjectRelease(*a1);
  int v5 = (char *)a1 + *(int *)(type metadata accessor for TimerSelectorModel(0LL) + 20);
  uint64_t v6 = sub_67C4(&qword_FB5C0);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

void sub_F3F8()
{
}

void SiriTimePluginModel.encode(to:)()
{
  uint64_t v55 = v0;
  uint64_t v4 = v3;
  uint64_t v53 = sub_67C4(&qword_FB458);
  uint64_t v42 = *(void *)(v53 - 8);
  sub_17B6C();
  __chkstk_darwin(v5);
  sub_17F84(v6, v39);
  uint64_t v7 = sub_67C4(&qword_FB460);
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  sub_17B6C();
  __chkstk_darwin(v8);
  sub_17FA0(v9, v40);
  uint64_t v45 = sub_18194();
  sub_17B6C();
  __chkstk_darwin(v10);
  sub_17FBC(v11, v41);
  uint64_t v12 = sub_67C4(&qword_FB468);
  uint64_t v43 = *(void *)(v12 - 8);
  uint64_t v44 = v12;
  sub_17B6C();
  __chkstk_darwin(v13);
  uint64_t v14 = sub_17F68();
  uint64_t v15 = type metadata accessor for SiriTimePluginModel(v14);
  sub_17B6C();
  __chkstk_darwin(v16);
  sub_18154();
  uint64_t v17 = sub_67C4(&qword_FB470);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_17DAC();
  uint64_t v19 = v4[3];
  uint64_t v20 = v4[4];
  sub_8CFC(v4, v19);
  unint64_t v21 = sub_F804();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SiriTimePluginModel.CodingKeys,  &type metadata for SiriTimePluginModel.CodingKeys,  v21,  v19,  v20);
  sub_15E24(v55, (uint64_t)v2, type metadata accessor for SiriTimePluginModel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v15);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_15C88((uint64_t)v2, v46, type metadata accessor for TimerSelectorModel);
      LOBYTE(v54[0]) = 1;
      sub_11E14();
      sub_17F5C((uint64_t)&type metadata for SiriTimePluginModel.TimerSelectorCodingKeys, (uint64_t)v54, v17);
      sub_15CBC((uint64_t)&unk_FB498);
      sub_1829C(v46, v24, v50, v45, v23);
      sub_17E28(v48);
      sub_11E50(v46, type metadata accessor for TimerSelectorModel);
      uint64_t v25 = sub_18278();
      v26(v25, v17);
    }

    else
    {
      uint64_t v30 = v2[1];
      uint64_t v31 = v2[3];
      uint64_t v49 = v2[2];
      uint64_t v51 = *v2;
      uint64_t v32 = v2[5];
      uint64_t v47 = v2[4];
      uint64_t v34 = v2[6];
      uint64_t v33 = v2[7];
      LOBYTE(v54[0]) = 2;
      sub_11D9C();
      sub_17F5C((uint64_t)&type metadata for SiriTimePluginModel.ComposeTimerCodingKeys, (uint64_t)v54, v17);
      v54[0] = v51;
      v54[1] = v30;
      v54[2] = v49;
      v54[3] = v31;
      v54[4] = v47;
      v54[5] = v32;
      v54[6] = v34;
      v54[7] = v33;
      unint64_t v35 = sub_11DD8();
      KeyedEncodingContainer.encode<A>(_:forKey:)(v54, v36, v53, &type metadata for ComposeTimerModel, v35);
      sub_17D0C(v52, *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
      uint64_t v37 = sub_18278();
      v38(v37, v17);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v32);
      sub_17E70();
    }
  }

  else
  {
    uint64_t v27 = *v2;
    LOBYTE(v54[0]) = 0;
    sub_F974();
    sub_17F5C((uint64_t)&type metadata for SiriTimePluginModel.TimerMultiCodingKeys, (uint64_t)v54, v17);
    v54[0] = v27;
    unint64_t v28 = sub_11E78();
    sub_1829C((uint64_t)v54, v29, v44, (uint64_t)&type metadata for TimerSnippetModel, v28);
    sub_17E28(v43);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v1, v17);
    swift_bridgeObjectRelease(v27);
  }

  sub_17B3C();
}

void type metadata accessor for TimerSnippetModel()
{
}

unint64_t sub_F78C()
{
  unint64_t result = qword_FB820;
  if (!qword_FB820)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1EB0, &type metadata for SiriTimePluginModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB820);
  }

  return result;
}

unint64_t sub_F7C8()
{
  unint64_t result = qword_FB8D0;
  if (!qword_FB8D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1E48, &type metadata for SiriTimePluginModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB8D0);
  }

  return result;
}

unint64_t sub_F804()
{
  unint64_t result = qword_FB478;
  if (!qword_FB478)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2488, &type metadata for SiriTimePluginModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB478);
  }

  return result;
}

unint64_t sub_F840()
{
  unint64_t result = qword_FB8C8;
  if (!qword_FB8C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1E20, &type metadata for SiriTimePluginModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB8C8);
  }

  return result;
}

uint64_t sub_F87C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriTimePluginModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_F8C0()
{
  unint64_t result = qword_FB818;
  if (!qword_FB818)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1DF8, &type metadata for SiriTimePluginModel.TimerMultiCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB818);
  }

  return result;
}

unint64_t sub_F8FC()
{
  unint64_t result = qword_FB898;
  if (!qword_FB898)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1D68, &type metadata for SiriTimePluginModel.TimerMultiCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB898);
  }

  return result;
}

unint64_t sub_F938()
{
  unint64_t result = qword_FB8A0;
  if (!qword_FB8A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1D90, &type metadata for SiriTimePluginModel.TimerMultiCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB8A0);
  }

  return result;
}

unint64_t sub_F974()
{
  unint64_t result = qword_FB4A0;
  if (!qword_FB4A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2398, &type metadata for SiriTimePluginModel.TimerMultiCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB4A0);
  }

  return result;
}

uint64_t sub_F9B4()
{
  return sub_11AA4(*v0);
}

uint64_t storeEnumTagSinglePayload for SiriTimePluginModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_FA08 + 4 * byte_C17EB[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_FA3C + 4 * byte_C17E6[v4]))();
}

uint64_t sub_FA3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FA44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xFA4CLL);
  }
  return result;
}

uint64_t sub_FA58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xFA60LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_FA64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FA6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for SiriTimePluginModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

void sub_FB08(uint64_t a1)
{
}

void TimerSnippetModel.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_67C4(&qword_FB518);
  sub_17DC4();
  __chkstk_darwin(v6);
  sub_17DAC();
  sub_17EBC();
  unint64_t v7 = sub_FCB0();
  sub_17E38((uint64_t)&type metadata for TimerSnippetModel.CodingKeys, v8, v7);
  uint64_t v12 = a2;
  uint64_t v9 = sub_67C4(&qword_FB500);
  unint64_t v10 = sub_FCEC((uint64_t)&unk_FB520);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v12, v11, v5, v9, v10);
  sub_17D0C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_17CF0();
}

unint64_t sub_FBFC()
{
  unint64_t result = qword_FB828;
  if (!qword_FB828)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1F68, &type metadata for TimerSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB828);
  }

  return result;
}

unint64_t sub_FC38()
{
  unint64_t result = qword_FB888;
  if (!qword_FB888)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1ED8, &type metadata for TimerSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB888);
  }

  return result;
}

unint64_t sub_FC74()
{
  unint64_t result = qword_FB890;
  if (!qword_FB890)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1F00, &type metadata for TimerSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB890);
  }

  return result;
}

unint64_t sub_FCB0()
{
  unint64_t result = qword_FB4F8;
  if (!qword_FB4F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2348, &type metadata for TimerSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB4F8);
  }

  return result;
}

unint64_t sub_FCEC(uint64_t a1)
{
  unint64_t result = sub_182A8(a1);
  if (!result)
  {
    uint64_t v5 = v4;
    uint64_t v6 = v3;
    uint64_t v7 = sub_15D30(&qword_FB500);
    sub_15CBC(v6);
    unint64_t result = swift_getWitnessTable(v5, v7);
    atomic_store(result, v1);
  }

  return result;
}

uint64_t _s23TimerFlowDelegatePlugin17TimerSnippetModelV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_FDAC + 4 * byte_C17F0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_FDCC + 4 * byte_C17F5[v4]))();
  }
}

_BYTE *sub_FDAC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_FDCC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_FDD4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_FDDC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_FDE4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_FDEC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t _s23TimerFlowDelegatePlugin17TimerSnippetModelV10CodingKeysOwet_0(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

void *initializeWithCopy for SiriTimerSnippetModel(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  a1[4] = v8;
  uint64_t v9 = a3[7];
  unint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for URL(0LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v11, 1LL, v12))
  {
    uint64_t v13 = sub_67C4(&qword_FB530);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v10, 0LL, 1LL, v12);
  }

  uint64_t v14 = a3[8];
  uint64_t v15 = a3[9];
  uint64_t v16 = (void *)((char *)a1 + v14);
  uint64_t v17 = (void *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = (char *)a1 + v15;
  uint64_t v20 = (char *)a2 + v15;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[10];
  uint64_t v22 = a3[11];
  uint64_t v23 = (char *)a1 + v21;
  uint64_t v24 = (char *)a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = (char *)a1 + v22;
  uint64_t v26 = (char *)a2 + v22;
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  swift_bridgeObjectRetain(v18);
  return a1;
}

#error "FFA8: call analysis failed (funcsize=5)"
void SiriTimerSnippetModel.encode(to:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  int a10,  __int16 a11,  char a12,  char a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23)
{
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  sub_17CB0();
  a22 = v28;
  a23 = v29;
  uint64_t v30 = v23;
  uint64_t v32 = v31;
  uint64_t v33 = sub_67C4(&qword_FB570);
  uint64_t v53 = *(void *)(v33 - 8);
  char v54 = v33;
  sub_17B6C();
  __chkstk_darwin(v34);
  sub_17C38();
  unint64_t v35 = sub_67C4(&qword_FB578);
  sub_17DC4();
  __chkstk_darwin(v36);
  sub_17DAC();
  uint64_t v37 = v32[3];
  uint64_t v38 = v32[4];
  sub_8CFC(v32, v37);
  uint64_t v39 = sub_10298();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SiriTimerSnippetModel.CodingKeys,  &type metadata for SiriTimerSnippetModel.CodingKeys,  v39,  v37,  v38);
  uint64_t v40 = *v23;
  uint64_t v41 = v23[1];
  LOBYTE(v56) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v40, v41, &v56, v35);
  if (v24)
  {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v35);
  }

  else
  {
    uint64_t v55 = v25;
    uint64_t v52 = v27;
    uint64_t v56 = *((_OWORD *)v23 + 1);
    a13 = 1;
    sub_182D4();
    sub_182CC((uint64_t)&unk_FB588);
    sub_17B84();
    uint64_t v42 = (int *)type metadata accessor for SiriTimerSnippetModel(0LL);
    uint64_t v56 = *(_OWORD *)((char *)v23 + v42[8]);
    a13 = 3;
    sub_17B84();
    sub_17D3C(v42[9]);
    a13 = 4;
    sub_182D4();
    sub_182CC((uint64_t)&unk_FB598);
    sub_17B84();
    sub_17D3C(v42[10]);
    a13 = 5;
    sub_17B84();
    sub_17D3C(v42[11]);
    a13 = 6;
    uint64_t v43 = sub_182D4();
    sub_182CC((uint64_t)&unk_FB5A8);
    sub_17C84((uint64_t)&v56, (uint64_t)&a13, v35, v43, v44);
    uint64_t v45 = (uint64_t)v23 + v42[7];
    LOBYTE(v56) = 7;
    uint64_t v46 = sub_67C4(&qword_FB530);
    uint64_t v47 = sub_15E44();
    sub_17C84(v45, (uint64_t)&v56, v35, v46, v47);
    if (v30[4])
    {
      uint64_t v48 = v32;
      uint64_t v49 = v32[3];
      uint64_t v50 = v48[4];
      sub_8CFC(v48, v49);
      uint64_t v51 = sub_181E8();
      dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_F3BC8, &unk_F3BC8, v51, v49, v50);
      sub_139AC();
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v55, v54);
    }

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v26, v35);
  }

  sub_17B3C();
}

unint64_t sub_10298()
{
  unint64_t result = qword_FB558;
  if (!qword_FB558)
  {
    unint64_t result = swift_getWitnessTable(&unk_C22F8, &type metadata for SiriTimerSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB558);
  }

  return result;
}

unint64_t sub_102D4()
{
  unint64_t result = qword_FB880;
  if (!qword_FB880)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2008, &type metadata for SiriTimerSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB880);
  }

  return result;
}

unint64_t sub_10310()
{
  unint64_t result = qword_FB830;
  if (!qword_FB830)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2070, &type metadata for SiriTimerSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB830);
  }

  return result;
}

unint64_t sub_1034C()
{
  unint64_t result = qword_FB878;
  if (!qword_FB878)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1FE0, &type metadata for SiriTimerSnippetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB878);
  }

  return result;
}

uint64_t sub_10388()
{
  return sub_10390(*v0);
}

uint64_t sub_10390(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_103C8 + 4 * byte_C17C0[a1]))( 0xD000000000000013LL,  0x80000000000C6B80LL);
}

uint64_t sub_103C8()
{
  return 0x65644972656D6974LL;
}

uint64_t sub_103EC(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_10404()
{
  return 0x6C6562616CLL;
}

uint64_t sub_10418()
{
  return 0x6E6F697461727564LL;
}

uint64_t sub_10430()
{
  return 0x6E696E69616D6572LL;
}

uint64_t sub_10454()
{
  return 0x6574617473LL;
}

uint64_t sub_10468()
{
  return 0x74756F68636E7570LL;
}

void sub_10488(uint64_t a1)
{
  if (!sub_182A8(a1))
  {
    uint64_t v3 = sub_15D30(v2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v3), v1);
  }

  sub_18260();
}

uint64_t storeEnumTagSinglePayload for SiriTimerSnippetModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1051C + 4 * byte_C17E1[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10550 + 4 * byte_C17DC[v4]))();
}

uint64_t sub_10550(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10560LL);
  }
  return result;
}

uint64_t sub_1056C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10574LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_10578(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10580(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for SiriTimerSnippetModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }

uint64_t destroy for SiriTimerSnippetModel(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for URL(0LL);
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(a2 + 32) + 8));
}

uint64_t sub_106A4()
{
  uint64_t v0 = static SiriTimePluginModel.bundleName;
  swift_bridgeObjectRetain(*(void *)algn_100DD8);
  return v0;
}

uint64_t sub_106DC()
{
  return sub_698D8((void (*)(void))sub_106E8);
}

uint64_t sub_106E8()
{
  sub_6A2BC(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_label);
  sub_6A2BC(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_type);
  sub_6A2BC(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_state);
  sub_6A4F0(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_remainingTime);
  sub_6A4F0(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_duration);
  sub_6A2BC(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_action);
  sub_6A2BC(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_roomName);
  sub_6A2BC(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_deviceName);
  sub_6A2BC(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_targetDeviceType);
  sub_6A2BC(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_timerIDString);
  return v0;
}

uint64_t sub_1077C()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_1078C()
{
  return sub_4BEF0("TimerFlowFactory: making decideDismissOrDeleteTimerFlow", (uint64_t)&unk_FD418);
}

uint64_t sub_107A0()
{
  __int16 v1 = (void *)swift_task_alloc(dword_FD414);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_4C6A8(v1);
  return sub_107EC(v2, v3);
}

uint64_t sub_107EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  uint64_t v5 = (void *)swift_task_alloc(dword_FCE9C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_107E8;
  return sub_10C10(a1, v4);
}

uint64_t sub_10844()
{
  if (qword_FB1B0 != -1) {
    swift_once(&qword_FB1B0, sub_45060);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_5474(v1, (uint64_t)qword_FCE80);
  *(void *)(v0 + 240) = v2;
  uint64_t v3 = (void *)v2;
  Logger.logObject.getter(v2);
  os_log_type_t v4 = sub_1BCD0();
  if (sub_1BB80(v4))
  {
    uint64_t v5 = (_WORD *)sub_1B9DC();
    *uint64_t v5 = 0;
    sub_1BAA8(&dword_0, v6, v7, "decideDismissOrDeleteTimerFlow.execute()");
    sub_1B904((uint64_t)v5);
  }

  uint64_t v8 = static SharedContext.current.getter(v18);
  sub_46238((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v18[0]);
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to SiriTimeDeviceContextProvider.fetchTimerContexts()[1]);
  *(void *)(v0 + 248) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10CF8;
  return SiriTimeDeviceContextProvider.fetchTimerContexts()();
}

uint64_t sub_10928()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v2 = (void *)(v0 + 160);
  uint64_t v4 = v2[12];
  uint64_t v6 = v2[8];
  uint64_t v5 = v2[9];
  uint64_t v7 = Array<A>.firingDevices()(v4);
  swift_bridgeObjectRelease(v4);
  sub_8EF8C(v7, v5);
  swift_bridgeObjectRelease(v7);
  sub_8C84(v5, v6, &qword_FBDB8);
  int v8 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v6, 1LL, v3);
  uint64_t v9 = (void *)v2[10];
  if (v8 == 1)
  {
    sub_8CC4(v2[8], &qword_FBDB8);
    Logger.logObject.getter(v10);
    os_log_type_t v11 = sub_1BCD0();
    if (sub_2B854(v11))
    {
      uint64_t v12 = (_WORD *)sub_1B9DC();
      *uint64_t v12 = 0;
      sub_461C0( &dword_0,  v13,  v14,  "DecideDismissOrDeleteTimerFlow: Didn't get a valid halInfo for timer. Running delete timer flow");
      sub_1B904((uint64_t)v12);
    }

    uint64_t v16 = (uint64_t *)(v1 + 128);
    uint64_t v15 = *(char **)(v1 + 128);
    uint64_t v17 = *(void *)(v1 + 216);
    uint64_t v18 = *(void *)(v1 + 160);
    uint64_t v20 = *(uint64_t **)(v1 + 96);
    uint64_t v19 = *(void *)(v1 + 104);

    sub_46230(v19);
    sub_9420(v2 - 18);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v17, 1LL, 1LL, v18);
    sub_454F4(v15, v17, v19, v20);
    sub_46208(v21, &qword_FBDB8);
    uint64_t v22 = v1 + 120;
    uint64_t v2 = (void *)(v1 + 112);
  }

  else
  {
    uint64_t v16 = (uint64_t *)(v1 + 184);
    uint64_t v23 = (*(uint64_t (**)(void, void, void))(*(void *)(v1 + 168) + 32LL))( *(void *)(v1 + 184),  v2[8],  *(void *)(v1 + 160));
    uint64_t v24 = Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (sub_2B854(v25))
    {
      uint64_t v26 = (_WORD *)sub_1B9DC();
      _WORD *v26 = 0;
      sub_461C0(&dword_0, v27, v28, "DecideDismissOrDeleteTimerFlow: Running dismissTimerFlow.");
      sub_1B904((uint64_t)v26);
    }

    uint64_t v29 = *(void *)(v1 + 216);
    uint64_t v30 = *(void *)(v1 + 176);
    uint64_t v31 = (void *)v24;
    uint64_t v32 = *(void *)(v1 + 160);
    uint64_t v33 = *(char **)(v1 + 152);
    uint64_t v45 = *(void *)(v1 + 144);
    uint64_t v46 = *(void *)(v1 + 136);
    uint64_t v34 = *(void *)(v1 + 104);
    uint64_t v44 = *(uint64_t **)(v1 + 96);

    sub_46230(v34);
    sub_46218(v30);
    sub_A4100(v2 - 13, v30);
    sub_46218(v29);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v29, 0LL, 1LL, v32);
    sub_450A8(v33, v29, v34, v44);
    sub_8CC4(v29, &qword_FBDB8);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v46);
    uint64_t v22 = v1 + 168;
  }

  uint64_t v35 = *v16;
  uint64_t v36 = *(void *)(v1 + 232);
  uint64_t v38 = *(void *)(v1 + 208);
  uint64_t v37 = *(void *)(v1 + 216);
  uint64_t v40 = *(void *)(v1 + 176);
  uint64_t v39 = *(void *)(v1 + 184);
  uint64_t v41 = *(void *)(v1 + 152);
  uint64_t v42 = *(void *)(v1 + 128);
  (*(void (**)(uint64_t, void))(*(void *)v22 + 8LL))(v35, *v2);
  sub_8CC4(v36, &qword_FBDB8);
  sub_1BABC();
  sub_1B86C();
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10C10(uint64_t a1, uint64_t a2)
{
  v2[12] = a1;
  v2[13] = a2;
  uint64_t v3 = sub_67C4((uint64_t *)&unk_FD560);
  v2[14] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[15] = v4;
  v2[16] = sub_1B6C8(v4);
  uint64_t v5 = sub_67C4(&qword_FCEA0);
  v2[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[18] = v6;
  v2[19] = sub_1B6C8(v6);
  uint64_t v7 = sub_46210();
  v2[20] = v7;
  v2[21] = *(void *)(v7 - 8);
  v2[22] = sub_1B970();
  v2[23] = sub_1B970();
  uint64_t v8 = type metadata accessor for SiriTimeDeviceContextProvider(0LL);
  v2[24] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[25] = v9;
  v2[26] = sub_1B6C8(v9);
  sub_67C4(&qword_FBDB8);
  v2[27] = sub_1B970();
  v2[28] = sub_1B970();
  v2[29] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_10CF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 256LL) = a1;
  swift_task_dealloc(v2);
  sub_45040();
  sub_1B9B8();
  return sub_20670();
}

uint64_t sub_10D58(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_15D30(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t _s20HandleIntentStrategyVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

__n128 _s20HandleIntentStrategyVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10DE4(uint64_t a1)
{
  uint64_t v2 = sub_67C4(&qword_FFBD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10E28(void *a1)
{
  return a1;
}

void *sub_10E5C(void *a1)
{
  return a1;
}

uint64_t sub_10E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10E90;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_10F10(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_FBF6C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_C5FC;
  return sub_1EF84(a1, a2);
}

uint64_t sub_10F64()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FBF5C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10E90;
  return sub_10FC4();
}

uint64_t sub_10FC4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FBF64);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = sub_207EC(v1);
  return sub_1F04C(v2, v3);
}

uint64_t sub_11018(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimerTimer.Builder(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v5 = sub_D98C();
  id v6 = [a1 device];
  if (v6 && (uint64_t v7 = v6, v8 = [v6 roomID], v7, v8))
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v11 = v10;

    id v12 = a1;
    unint64_t v13 = swift_bridgeObjectRetain(a2);
    uint64_t v14 = (uint64_t)sub_2FEA8(v13, v9, v11, v12);
  }

  else
  {
    uint64_t v14 = (uint64_t)_swiftEmptyArrayStorage;
  }

  id v15 = [a1 label];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    unint64_t v19 = v18;

    swift_bridgeObjectRelease(v19);
    uint64_t v20 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000LL) == 0) {
      uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v20)
    {
      id v21 = a1;
      unint64_t v22 = swift_bridgeObjectRetain(v14);
      char v23 = sub_326E8(v22, v21);
      swift_bridgeObjectRelease(v14);
      *(_BYTE *)(v5 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isLabelUniqueInRoom) = (v23 & 1) == 0;
      id v24 = v21;
      unint64_t v25 = swift_bridgeObjectRetain(a2);
      uint64_t v26 = sub_301AC(v25, v24);
      LOBYTE(v21) = sub_326E8((unint64_t)v26, v24);
      swift_bridgeObjectRelease(v26);
      *(_BYTE *)(v5 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isLabelUniqueAcrossGroup) = (v21 & 1) == 0;
    }
  }

  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0) {
      uint64_t v31 = v14;
    }
    else {
      uint64_t v31 = v14 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v14);
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v14);
  }

  else
  {
    uint64_t v27 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8LL));
  }

  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(v5 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isOnlyMatchingTimerInRoom) = v27 == 0;
  swift_retain();
  sub_D378();
  uint64_t v29 = v28;
  swift_release_n(v5, 2LL);
  return v29;
}

uint64_t sub_11274()
{
  uint64_t v1 = v0;
  uint64_t v2 = static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)();
  if (v2)
  {
    sub_1E83C();
  }

  else
  {
    if (qword_FB3F0 != -1) {
      swift_once(&qword_FB3F0, sub_B6DE4);
    }
    uint64_t v3 = sub_1BD34();
    sub_5474(v3, (uint64_t)qword_1008B8);
    uint64_t v4 = sub_B8324();
    uint64_t v5 = (void *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (sub_2BDE0(v6))
    {
      uint64_t v7 = (_DWORD *)sub_1BA1C(12LL);
      uint64_t v8 = sub_1BA1C(32LL);
      uint64_t v16 = v8;
      *uint64_t v7 = 136315138;
      sub_8830C();
      sub_5BDA4();
      uint64_t v9 = String.init<A>(describing:)();
      unint64_t v11 = v10;
      uint64_t v15 = sub_683C(v9, v10, &v16);
      sub_B8408((uint64_t)&v15, (uint64_t)&v16, (uint64_t)(v7 + 1));
      sub_4C44C(v1);
      swift_bridgeObjectRelease(v11);
      sub_B8218(&dword_0, v12, v13, "Fail to build uso entity %s");
      sub_1E7D0(v8);
      sub_1B904(v8);
      sub_1B904((uint64_t)v7);
      sub_1E83C();
    }

    else
    {

      swift_release_n(v1, 3LL);
    }
  }

  return v2;
}

void sub_113F8()
{
  int v42 = v2;
  uint64_t v4 = v3;
  uint64_t v43 = v5;
  uint64_t v6 = sub_21530();
  uint64_t v40 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_21608();
  uint64_t v41 = v7 - v8;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v37 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = sub_214D0();
  sub_214E4();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  JSONEncoder.init()();
  uint64_t v45 = v4;
  uint64_t v18 = type metadata accessor for UsoEntity(0LL);
  unint64_t v19 = sub_116D8();
  uint64_t v20 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v45, v18, v19);
  unint64_t v22 = v21;
  sub_1BC50();
  uint64_t v23 = (*(uint64_t (**)(char *, void, uint64_t))(v0 + 104))( v16,  enum case for DirectInvocationUtils.Timer.URI.undo(_:),  v13);
  id v24 = v16;
  uint64_t v39 = DirectInvocationUtils.Timer.URI.rawValue.getter(v23);
  uint64_t v38 = v25;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v16, v13);
  uint64_t v26 = sub_67C4(&qword_FBF70);
  uint64_t inited = swift_initStackObject(v26, &v44);
  *(_OWORD *)(inited + 16) = xmmword_C27D0;
  sub_21640(v1, enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:));
  sub_215D8();
  sub_21684();
  sub_21638(v1);
  *(void *)(inited + 32) = v24;
  *(void *)(inited + 40) = v13;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0x657461657263LL;
  *(void *)(inited + 56) = 0xE600000000000000LL;
  uint64_t v28 = sub_21640((uint64_t)v12, enum case for DirectInvocationUtils.Timer.UserInfoKey.usoEntity(_:));
  uint64_t v29 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v28);
  uint64_t v31 = v30;
  sub_21638((uint64_t)v12);
  *(void *)(inited + 80) = v29;
  *(void *)(inited + 88) = v31;
  *(void *)(inited + 120) = sub_67C4(&qword_FBF90);
  *(void *)(inited + 96) = v20;
  *(void *)(inited + 104) = v22;
  uint64_t v32 = v41;
  sub_21640(v41, enum case for DirectInvocationUtils.Timer.UserInfoKey.paused(_:));
  sub_21404(v20, v22);
  uint64_t v33 = sub_215D8();
  uint64_t v35 = v34;
  sub_21638(v32);
  *(void *)(inited + 128) = v33;
  *(void *)(inited + 136) = v35;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = v42 & 1;
  uint64_t v36 = sub_21550();
  Parse.DirectInvocation.init(identifier:userData:)(v39, v38, v36);
  sub_2145C(v20, v22);
  sub_17E58();
}

unint64_t sub_116D8()
{
  unint64_t result = qword_FBF88;
  if (!qword_FBF88)
  {
    uint64_t v1 = type metadata accessor for UsoEntity(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UsoEntity, v1);
    atomic_store(result, (unint64_t *)&qword_FBF88);
  }

  return result;
}

void sub_11718(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_17DD4();
}

void sub_11754()
{
  *(_WORD *)&algn_100DD8[6] = -4864;
}

uint64_t *SiriTimePluginModel.bundleName.unsafeMutableAddressor()
{
  if (qword_FB100 != -1) {
    swift_once(&qword_FB100, sub_11754);
  }
  return &static SiriTimePluginModel.bundleName;
}

void static SiriTimePluginModel.bundleName.getter()
{
  if (qword_FB100 != -1) {
    swift_once(&qword_FB100, sub_11754);
  }
  sub_17C9C();
  sub_17D30();
  sub_17DD4();
}

uint64_t SiriTimePluginModel.snippetHidden(for:idiom:)(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for DeviceIdiom(0LL);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for SiriTimePluginModel(0LL);
  sub_17B6C();
  __chkstk_darwin(v7);
  sub_17C38();
  sub_15E24(v2, v3, v8);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v6);
  if (EnumCaseMultiPayload > 1)
  {
    sub_11E50(v3, type metadata accessor for SiriTimePluginModel);
    sub_180F4(v10, enum case for DeviceIdiom.car(_:));
    sub_1826C();
    sub_17F28();
  }

  else
  {
    sub_180F4(EnumCaseMultiPayload, enum case for DeviceIdiom.car(_:));
    sub_1826C();
    sub_17F28();
    sub_11E50(v3, type metadata accessor for SiriTimePluginModel);
  }

  return a2 & 1;
}

uint64_t sub_11930(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6C754D72656D6974LL && a2 == 0xEA00000000006974LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C754D72656D6974LL, 0xEA00000000006974LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else
  {
    BOOL v6 = a1 == 0x6C655372656D6974LL && a2 == 0xED0000726F746365LL;
    if (v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C655372656D6974LL, 0xED0000726F746365LL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 1LL;
    }

    else if (a1 == 0x5465736F706D6F63LL && a2 == 0xEC00000072656D69LL)
    {
      swift_bridgeObjectRelease(a2);
      return 2LL;
    }

    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x5465736F706D6F63LL, 0xEC00000072656D69LL, a1, a2, 0LL);
      swift_bridgeObjectRelease(a2);
      if ((v8 & 1) != 0) {
        return 2LL;
      }
      else {
        return 3LL;
      }
    }
  }

uint64_t sub_11A9C()
{
  return 3LL;
}

uint64_t sub_11AA4(char a1)
{
  return *(void *)&aTimermultimers[8 * a1];
}

uint64_t sub_11AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_11930(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_11AEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_11A9C();
  *a1 = result;
  return result;
}

uint64_t sub_11B10(uint64_t a1)
{
  unint64_t v2 = sub_F804();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_11B38(uint64_t a1)
{
  unint64_t v2 = sub_F804();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_11B60()
{
  return 1LL;
}

void sub_11B68()
{
}

uint64_t _s23TimerFlowDelegatePlugin04Undoa11ChangeStateB0C13remainingTime33_62B50396D43A4CC5B625338950F1B173LLSdSgvpfi_0()
{
  return 0LL;
}

uint64_t sub_11B98()
{
  return 12383LL;
}

uint64_t sub_11BA4(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(a2);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

void sub_11C14(uint64_t a1)
{
}

uint64_t sub_11C30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_11BA4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_11C58()
{
  return _s23TimerFlowDelegatePlugin04Undoa11ChangeStateB0C13remainingTime33_62B50396D43A4CC5B625338950F1B173LLSdSgvpfi_0();
}

uint64_t sub_11C70@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_11B60();
  *a1 = result & 1;
  return result;
}

uint64_t sub_11C98(uint64_t a1)
{
  unint64_t v2 = sub_11D9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_11CC0(uint64_t a1)
{
  unint64_t v2 = sub_11D9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_11CE8(uint64_t a1)
{
  unint64_t v2 = sub_F974();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_11D10(uint64_t a1)
{
  unint64_t v2 = sub_F974();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_11D38(uint64_t a1)
{
  unint64_t v2 = sub_11E14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_11D60(uint64_t a1)
{
  unint64_t v2 = sub_11E14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t type metadata accessor for TimerSelectorModel(uint64_t a1)
{
  return sub_DAF8(a1, (uint64_t *)&unk_FB7C8, (uint64_t)&nominal type descriptor for TimerSelectorModel);
}

unint64_t sub_11D9C()
{
  unint64_t result = qword_FB480;
  if (!qword_FB480)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2438, &type metadata for SiriTimePluginModel.ComposeTimerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB480);
  }

  return result;
}

unint64_t sub_11DD8()
{
  unint64_t result = qword_FB488;
  if (!qword_FB488)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ComposeTimerModel,  &type metadata for ComposeTimerModel);
    atomic_store(result, (unint64_t *)&qword_FB488);
  }

  return result;
}

unint64_t sub_11E14()
{
  unint64_t result = qword_FB490;
  if (!qword_FB490)
  {
    unint64_t result = swift_getWitnessTable(&unk_C23E8, &type metadata for SiriTimePluginModel.TimerSelectorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB490);
  }

  return result;
}

void sub_11E50(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_17FFC(v2);
  sub_17DD4();
}

unint64_t sub_11E78()
{
  unint64_t result = qword_FB4A8;
  if (!qword_FB4A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for TimerSnippetModel,  &type metadata for TimerSnippetModel);
    atomic_store(result, (unint64_t *)&qword_FB4A8);
  }

  return result;
}

void SiriTimePluginModel.init(from:)()
{
  BOOL v3 = v2;
  uint64_t v82 = v4;
  uint64_t v81 = sub_67C4(&qword_FB4B0);
  uint64_t v78 = *(void *)(v81 - 8);
  sub_17B6C();
  __chkstk_darwin(v5);
  sub_17FD8(v6, v70);
  uint64_t v80 = sub_67C4(&qword_FB4B8);
  uint64_t v77 = *(void *)(v80 - 8);
  sub_17B6C();
  __chkstk_darwin(v7);
  sub_17FA0(v8, v70);
  uint64_t v79 = sub_67C4(&qword_FB4C0);
  uint64_t v76 = *(void *)(v79 - 8);
  sub_17B6C();
  __chkstk_darwin(v9);
  sub_17FBC(v10, v70);
  uint64_t v11 = sub_67C4(&qword_FB4C8);
  uint64_t v86 = *(void *)(v11 - 8);
  uint64_t v87 = v11;
  sub_17B6C();
  __chkstk_darwin(v12);
  sub_17C38();
  uint64_t v13 = type metadata accessor for SiriTimePluginModel(0LL);
  sub_17B6C();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v70 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v70 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v70 - v24;
  uint64_t v27 = v3[3];
  uint64_t v26 = v3[4];
  id v88 = v3;
  sub_8CFC(v3, v27);
  unint64_t v28 = sub_F804();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SiriTimePluginModel.CodingKeys,  &type metadata for SiriTimePluginModel.CodingKeys,  v28,  v27,  v26);
  if (v0)
  {
    uint64_t v29 = v88;
    goto LABEL_12;
  }

  id v72 = v23;
  uint64_t v74 = v20;
  uint64_t v73 = v17;
  id v75 = v25;
  uint64_t v94 = v13;
  uint64_t v30 = v87;
  uint64_t v31 = v1;
  uint64_t v32 = KeyedDecodingContainer.allKeys.getter(v87);
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(v32 + 16);
  if (v34)
  {
    uint64_t v35 = v30;
    uint64_t v71 = 0LL;
    int v36 = *(unsigned __int8 *)(v32 + 32);
    uint64_t v37 = sub_15BD4(1LL, v34, v32, v32 + 32, 0LL, (2 * v34) | 1);
    uint64_t v39 = v38;
    unint64_t v41 = v40;
    swift_bridgeObjectRelease(v33);
    if (v39 == v41 >> 1)
    {
      if (v36)
      {
        if (v36 == 1)
        {
          LOBYTE(v89) = 1;
          sub_11E14();
          uint64_t v42 = v84;
          sub_17D8C((uint64_t)&type metadata for SiriTimePluginModel.TimerSelectorCodingKeys, (uint64_t)&v89);
          sub_18194();
          sub_15CBC((uint64_t)&unk_FB4E0);
          uint64_t v43 = (uint64_t)v74;
          sub_17F48();
          uint64_t v44 = v86;
          sub_17D0C(v42, *(uint64_t (**)(uint64_t, uint64_t))(v77 + 8));
          sub_17D74();
          sub_17D54(v35, *(uint64_t (**)(uint64_t, uint64_t))(v44 + 8));
          swift_storeEnumTagMultiPayload(v43, v94, 1LL);
          sub_181AC(v43, v61, type metadata accessor for SiriTimePluginModel);
          uint64_t v29 = v88;
LABEL_18:
          sub_15C88(v44, v82, type metadata accessor for SiriTimePluginModel);
          goto LABEL_12;
        }

        LOBYTE(v89) = 2;
        sub_11D9C();
        uint64_t v59 = v71;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for SiriTimePluginModel.ComposeTimerCodingKeys,  &v89,  v35,  &type metadata for SiriTimePluginModel.ComposeTimerCodingKeys);
        uint64_t v29 = v88;
        if (v59)
        {
          sub_17D74();
          (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v1, v35);
          goto LABEL_12;
        }

        sub_15C4C();
        sub_17F48();
        uint64_t v60 = v86;
        sub_17F00();
        sub_17D74();
        sub_17F50(*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8));
        uint64_t v67 = v90;
        uint64_t v68 = v91;
        uint64_t v44 = (uint64_t)v73;
        *uint64_t v73 = v89;
        *(void *)(v44 + 16) = v67;
        *(void *)(v44 + 24) = v68;
        __int128 v69 = v93;
        *(_OWORD *)(v44 + 32) = v92;
        *(_OWORD *)(v44 + 48) = v69;
        swift_storeEnumTagMultiPayload(v44, v94, 2LL);
        uint64_t v66 = v44;
      }

      else
      {
        LOBYTE(v89) = 0;
        sub_F974();
        uint64_t v58 = v83;
        sub_17D8C((uint64_t)&type metadata for SiriTimePluginModel.TimerMultiCodingKeys, (uint64_t)&v89);
        uint64_t v44 = v13;
        sub_15CF4();
        sub_17F48();
        uint64_t v29 = v88;
        sub_17D0C(v58, *(uint64_t (**)(uint64_t, uint64_t))(v76 + 8));
        sub_17D74();
        uint64_t v62 = sub_18278();
        sub_17D54(v62, v63);
        uint64_t v64 = v72;
        *id v72 = v89;
        swift_storeEnumTagMultiPayload(v64, v94, 0LL);
        uint64_t v66 = (uint64_t)v64;
      }

      sub_181AC(v66, v65, type metadata accessor for SiriTimePluginModel);
      goto LABEL_18;
    }

    uint64_t v85 = v37;
    uint64_t v29 = v88;
    uint64_t v30 = v35;
  }

  else
  {
    uint64_t v85 = v32;
    uint64_t v29 = v88;
  }

  uint64_t v45 = v86;
  uint64_t v46 = type metadata accessor for DecodingError(0LL);
  swift_allocError(v46, &protocol witness table for DecodingError, 0LL, 0LL);
  uint64_t v48 = v47;
  sub_67C4(&qword_FB4D0);
  *uint64_t v48 = v94;
  uint64_t v49 = KeyedDecodingContainer.codingPath.getter(v30);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v49,  0xD00000000000002BLL,  0x80000000000C6B50LL,  0LL);
  uint64_t v50 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v46 - 8) + 104LL))( v48,  enum case for DecodingError.typeMismatch(_:),  v46);
  swift_willThrow(v50, v51, v52, v53, v54, v55, v56, v57);
  swift_unknownObjectRelease(v85);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v31, v30);
LABEL_12:
  _s20HandleIntentStrategyVwxx_0(v29);
  sub_17B3C();
}

void sub_124C8()
{
}

void TimerSelectorModel.timers.setter()
{
  *uint64_t v1 = v0;
  sub_17DD4();
}

TimerFlowDelegatePlugin::TimerSnippetModel (__swiftcall *TimerSelectorModel.timers.modify())(Swift::OpaquePointer timers)
{
  return TimerSnippetModel.init(timers:);
}

void *TimerSnippetModel.init(from:)(void *a1)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = sub_8CFC(a1, v6);
  unint64_t v9 = sub_FCB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for TimerSnippetModel.CodingKeys,  &type metadata for TimerSnippetModel.CodingKeys,  v9,  v6,  v7);
  if (v1)
  {
    sub_17FF4();
  }

  else
  {
    uint64_t v10 = sub_67C4(&qword_FB500);
    sub_FCEC((uint64_t)&unk_FB508);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v12, v10);
    sub_17D0C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    uint64_t v8 = v12;
    sub_17FF4();
  }

  return v8;
}

uint64_t sub_12638(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7372656D6974LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(a2);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7372656D6974LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

void sub_126B4(uint64_t a1)
{
}

uint64_t sub_126D8()
{
  return 0x7372656D6974LL;
}

void sub_126EC(uint64_t a1)
{
}

uint64_t sub_12714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_12638(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1273C(uint64_t a1)
{
  unint64_t v2 = sub_FCB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_12764(uint64_t a1)
{
  unint64_t v2 = sub_FCB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1278C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = TimerSnippetModel.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void ComposeTimerModel.header.getter()
{
}

void ComposeTimerModel.header.setter()
{
  *uint64_t v1 = v2;
  v1[1] = v0;
  sub_17B78();
}

void ComposeTimerModel.prompt.getter()
{
}

void ComposeTimerModel.prompt.setter()
{
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  sub_17B78();
}

TimerFlowDelegatePlugin::TimerSnippetModel (__swiftcall *ComposeTimerModel.prompt.modify())(Swift::OpaquePointer timers)
{
  return TimerSnippetModel.init(timers:);
}

uint64_t variable initialization expression of SiriTimerSnippetModel.directInvocationPayload()
{
  return 0LL;
}

uint64_t SiriTimerSnippetModel.directInvocationPayload.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

void SiriTimerSnippetModel.directInvocationPayload.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  sub_17DD4();
}

TimerFlowDelegatePlugin::TimerSnippetModel (__swiftcall *ComposeTimerModel.label.modify())(Swift::OpaquePointer timers)
{
  return TimerSnippetModel.init(timers:);
}

uint64_t variable initialization expression of SiriTimerSnippetModel.punchoutURL()
{
  uint64_t v0 = sub_18234();
  type metadata accessor for URL(v0);
  sub_17DEC();
  return sub_17D28(v1, v2, v3, v4);
}

void SiriTimerSnippetModel.punchoutURL.getter()
{
  uint64_t v2 = sub_18234();
  uint64_t v3 = type metadata accessor for SiriTimerSnippetModel(v2);
  sub_17A44(v1 + *(int *)(v3 + 28), v0, &qword_FB530);
  sub_17DD4();
}

uint64_t SiriTimerSnippetModel.punchoutURL.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SiriTimerSnippetModel(0LL) + 28);
  return sub_15D94(a1, v3);
}

TimerFlowDelegatePlugin::TimerSnippetModel (__swiftcall *SiriTimerSnippetModel.punchoutURL.modify())(Swift::OpaquePointer timers)
{
  return TimerSnippetModel.init(timers:);
}

void SiriTimerSnippetModel.label.getter()
{
}

void SiriTimerSnippetModel.label.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for SiriTimerSnippetModel(0LL) + 32));
  swift_bridgeObjectRelease(v5[1]);
  *char v5 = a1;
  v5[1] = a2;
  sub_17B78();
}

TimerFlowDelegatePlugin::TimerSnippetModel (__swiftcall *SiriTimerSnippetModel.label.modify())(Swift::OpaquePointer timers)
{
  return TimerSnippetModel.init(timers:);
}

uint64_t SiriTimerSnippetModel.duration.getter()
{
  uint64_t v0 = type metadata accessor for SiriTimerSnippetModel(0LL);
  return sub_1804C(*(int *)(v0 + 36));
}

void SiriTimerSnippetModel.duration.setter()
{
  uint64_t v0 = sub_17DDC();
  sub_17E78(*(int *)(v0 + 36));
  sub_17B78();
}

TimerFlowDelegatePlugin::TimerSnippetModel (__swiftcall *SiriTimerSnippetModel.duration.modify())(Swift::OpaquePointer timers)
{
  return TimerSnippetModel.init(timers:);
}

uint64_t SiriTimerSnippetModel.remainingTime.getter()
{
  uint64_t v0 = type metadata accessor for SiriTimerSnippetModel(0LL);
  return sub_1804C(*(int *)(v0 + 40));
}

void SiriTimerSnippetModel.remainingTime.setter()
{
  uint64_t v0 = sub_17DDC();
  sub_17E78(*(int *)(v0 + 40));
  sub_17B78();
}

TimerFlowDelegatePlugin::TimerSnippetModel (__swiftcall *SiriTimerSnippetModel.remainingTime.modify())(Swift::OpaquePointer timers)
{
  return TimerSnippetModel.init(timers:);
}

uint64_t SiriTimerSnippetModel.state.getter()
{
  uint64_t v0 = type metadata accessor for SiriTimerSnippetModel(0LL);
  return sub_1804C(*(int *)(v0 + 44));
}

void SiriTimerSnippetModel.state.setter()
{
  uint64_t v0 = sub_17DDC();
  sub_17E78(*(int *)(v0 + 44));
  sub_17B78();
}

TimerFlowDelegatePlugin::TimerSnippetModel (__swiftcall *SiriTimerSnippetModel.state.modify())(Swift::OpaquePointer timers)
{
  return TimerSnippetModel.init(timers:);
}

uint64_t SiriTimerSnippetModel.init(timerIdentifier:directInvocation:label:duration:remainingTime:state:punchoutURL:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t v56 = a8;
  int v55 = a7;
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  uint64_t v50 = a2;
  uint64_t v51 = a13;
  uint64_t v52 = a4;
  sub_67C4(&qword_FB538);
  sub_17B6C();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = &v45[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v17);
  uint64_t v21 = &v45[-v20];
  uint64_t v22 = (int *)type metadata accessor for SiriTimerSnippetModel(0LL);
  a9[3] = 0LL;
  a9[4] = 0LL;
  a9[2] = 0LL;
  uint64_t v23 = (uint64_t)a9 + v22[7];
  type metadata accessor for URL(0LL);
  uint64_t v49 = v23;
  sub_17DEC();
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v24, v25, v26, v27);
  unint64_t v28 = (void *)((char *)a9 + v22[8]);
  *unint64_t v28 = 0LL;
  v28[1] = 0LL;
  uint64_t v29 = (char *)a9 + v22[9];
  *(void *)uint64_t v29 = 0LL;
  v29[8] = 1;
  uint64_t v30 = (char *)a9 + v22[10];
  *(void *)uint64_t v30 = 0LL;
  v30[8] = 1;
  uint64_t v31 = (char *)a9 + v22[11];
  *(void *)uint64_t v31 = 0LL;
  v31[8] = 1;
  uint64_t v32 = v50;
  *a9 = a1;
  a9[1] = v32;
  uint64_t v50 = a3;
  sub_17A44(a3, (uint64_t)v21, &qword_FB538);
  uint64_t v33 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v34 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v21, 1LL, v33);
  if ((_DWORD)v34 == 1)
  {
    sub_17A70((uint64_t)v21, &qword_FB538);
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
  }

  else
  {
    uint64_t v35 = Parse.DirectInvocation.identifier.getter(v34);
    uint64_t v36 = v37;
    (*(void (**)(_BYTE *, uint64_t))(*(void *)(v33 - 8) + 8LL))(v21, v33);
  }

  int v48 = a12;
  uint64_t v47 = a11;
  int v46 = a10;
  swift_bridgeObjectRelease(a9[3]);
  a9[2] = v35;
  a9[3] = v36;
  uint64_t v38 = v50;
  sub_17A44(v50, (uint64_t)v19, &qword_FB538);
  uint64_t v39 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v19, 1LL, v33);
  if ((_DWORD)v39 == 1)
  {
    sub_17A70(v38, &qword_FB538);
    uint64_t v40 = sub_17D30();
    sub_17A70(v40, v41);
    uint64_t v42 = 0LL;
  }

  else
  {
    uint64_t v42 = Parse.DirectInvocation.userData.getter(v39);
    sub_17A70(v38, &qword_FB538);
    (*(void (**)(_BYTE *, uint64_t))(*(void *)(v33 - 8) + 8LL))(v19, v33);
  }

  swift_bridgeObjectRelease(a9[4]);
  a9[4] = v42;
  sub_15D94(v51, v49);
  uint64_t result = swift_bridgeObjectRelease(v28[1]);
  uint64_t v44 = v53;
  *unint64_t v28 = v52;
  v28[1] = v44;
  *(void *)uint64_t v29 = v54;
  v29[8] = v55 & 1;
  *(void *)uint64_t v30 = v56;
  v30[8] = v46 & 1;
  *(void *)uint64_t v31 = v47;
  v31[8] = v48 & 1;
  return result;
}

void SiriTimerSnippetModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  a26 = v29;
  a27 = v30;
  uint64_t v32 = v31;
  uint64_t v78 = v33;
  sub_67C4(&qword_FB540);
  sub_17B6C();
  __chkstk_darwin(v34);
  sub_17F84(v35, v72);
  uint64_t v77 = sub_67C4(&qword_FB548);
  uint64_t v75 = *(void *)(v77 - 8);
  sub_17B6C();
  __chkstk_darwin(v36);
  sub_17FD8(v37, v73);
  sub_67C4(&qword_FB530);
  sub_17B6C();
  __chkstk_darwin(v38);
  sub_17D14();
  uint64_t v79 = v39;
  uint64_t v80 = sub_67C4(&qword_FB550);
  sub_17B6C();
  __chkstk_darwin(v40);
  uint64_t v41 = sub_17F68();
  uint64_t v42 = (int *)type metadata accessor for SiriTimerSnippetModel(v41);
  sub_17B6C();
  __chkstk_darwin(v43);
  sub_18124();
  v28[3] = 0LL;
  v28[4] = 0LL;
  v28[2] = 0LL;
  uint64_t v45 = (char *)v28 + *(int *)(v44 + 28);
  uint64_t v46 = type metadata accessor for URL(0LL);
  uint64_t v82 = (uint64_t)v45;
  sub_17DEC();
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v47, v48, v49, v46);
  uint64_t v50 = (uint64_t *)((char *)v28 + v42[8]);
  *uint64_t v50 = 0LL;
  v50[1] = 0LL;
  uint64_t v83 = v28;
  uint64_t v84 = v50;
  uint64_t v51 = (char *)v28 + v42[9];
  *(void *)uint64_t v51 = 0LL;
  v51[8] = 1;
  uint64_t v52 = (char *)v28 + v42[10];
  *(void *)uint64_t v52 = 0LL;
  v52[8] = 1;
  uint64_t v53 = (char *)v28 + v42[11];
  *(void *)uint64_t v53 = 0LL;
  v53[8] = 1;
  uint64_t v55 = v32[3];
  uint64_t v54 = v32[4];
  uint64_t v81 = v32;
  sub_8CFC(v32, v55);
  unint64_t v56 = sub_10298();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SiriTimerSnippetModel.CodingKeys,  &type metadata for SiriTimerSnippetModel.CodingKeys,  v56,  v55,  v54);
  if (v27)
  {
    _s20HandleIntentStrategyVwxx_0(v32);
    swift_bridgeObjectRelease(v83[3]);
    swift_bridgeObjectRelease(v83[4]);
    sub_17A70(v82, &qword_FB530);
    swift_bridgeObjectRelease(v84[1]);
  }

  else
  {
    a17 = 0;
    uint64_t v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a17, v80);
    if (v58) {
      uint64_t v59 = v57;
    }
    else {
      uint64_t v59 = 0LL;
    }
    unint64_t v60 = 0xE000000000000000LL;
    if (v58) {
      unint64_t v60 = v58;
    }
    *uint64_t v83 = v59;
    v83[1] = v60;
    a16 = 1;
    v83[2] = sub_181DC((uint64_t)&a16);
    v83[3] = v61;
    a15 = 3;
    *uint64_t v84 = sub_181DC((uint64_t)&a15);
    v84[1] = v62;
    a14 = 4;
    *(void *)uint64_t v51 = sub_181D0((uint64_t)&a14);
    v51[8] = v63 & 1;
    a13 = 5;
    *(void *)uint64_t v52 = sub_181D0((uint64_t)&a13);
    v52[8] = v64 & 1;
    a12 = 6;
    *(void *)uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a12, v80);
    v53[8] = v65 & 1;
    a11 = 7;
    sub_15CBC((uint64_t)&unk_FB560);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v46, &a11, v80, v46, v66);
    sub_15D94(v79, v82);
    uint64_t v67 = v32[3];
    uint64_t v68 = v81[4];
    sub_8CFC(v81, v81[3]);
    unint64_t v69 = sub_181E8();
    dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_F3BC8, &unk_F3BC8, v69, v67, v68);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v76, 0LL, 1LL, v77);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v74, v76, v77);
    sub_1327C();
    uint64_t v71 = v70;
    sub_17CA4(*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8));
    sub_180C4();
    swift_bridgeObjectRelease(v83[4]);
    v83[4] = v71;
    sub_15E24((uint64_t)v83, v78, type metadata accessor for SiriTimerSnippetModel);
    sub_18218();
    sub_11E50((uint64_t)v83, type metadata accessor for SiriTimerSnippetModel);
  }

  sub_17B3C();
}

void sub_1327C()
{
  uint64_t v2 = sub_67C4(&qword_FB548);
  uint64_t v31 = *(void *)(v2 - 8);
  sub_17B6C();
  __chkstk_darwin(v3);
  sub_17D14();
  uint64_t v30 = v4;
  Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String);
  uint64_t v5 = KeyedDecodingContainer.allKeys.getter(v2);
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
LABEL_53:
    swift_bridgeObjectRelease(v5);
    sub_17E58();
    return;
  }

  uint64_t v29 = v5;
  uint64_t v7 = (_BYTE *)(v5 + 56);
  uint64_t v32 = v2;
  while (1)
  {
    uint64_t v9 = *((void *)v7 - 3);
    uint64_t v8 = *((void *)v7 - 2);
    uint64_t v10 = *((void *)v7 - 1);
    char v11 = *v7;
    uint64_t v33 = v9;
    uint64_t v34 = v8;
    uint64_t v35 = v10;
    LOBYTE(v36) = v11;
    swift_bridgeObjectRetain(v8);
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v2);
    if ((v13 & 1) == 0) {
      break;
    }
    uint64_t v17 = sub_17D5C();
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v17, v18);
    if ((v20 & 1) == 0)
    {
      uint64_t v36 = &type metadata for Double;
      uint64_t v33 = v19;
      sub_17BFC();
      sub_17B54();
      sub_17BB8();
      if (v14) {
        goto LABEL_57;
      }
      sub_17EDC();
      sub_67C4(&qword_FB8F8);
      if (sub_17BA4())
      {
        sub_17BCC();
        sub_17C50();
        if (!v15) {
          goto LABEL_64;
        }
      }

      if ((v11 & 1) == 0)
      {
        sub_17AF0();
        if (v14) {
          goto LABEL_62;
        }
        goto LABEL_49;
      }

      goto LABEL_44;
    }

    uint64_t v21 = sub_17D5C();
    uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v21, v22);
    if (v24)
    {
      uint64_t v36 = &type metadata for String;
      uint64_t v33 = v23;
      uint64_t v34 = v24;
      sub_17BFC();
      sub_17B54();
      sub_17BB8();
      if (v14) {
        goto LABEL_55;
      }
      sub_17EDC();
      sub_67C4(&qword_FB8F8);
      if (sub_17BA4())
      {
        sub_17BCC();
        sub_17C50();
        if (!v15) {
          goto LABEL_64;
        }
      }

      if ((v11 & 1) == 0)
      {
        sub_17AF0();
        if (v14) {
          goto LABEL_60;
        }
        goto LABEL_49;
      }

LABEL_44:
      sub_18010();
LABEL_50:
      sub_17EE8();
      sub_180D4();
      uint64_t v2 = v32;
      goto LABEL_51;
    }

    uint64_t v25 = sub_17D5C();
    char v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v25);
    if (v26 != 2)
    {
      uint64_t v36 = &type metadata for Bool;
      LOBYTE(v33) = v26 & 1;
      sub_17BFC();
      sub_17B54();
      sub_17BB8();
      if (v14) {
        goto LABEL_58;
      }
      sub_17EDC();
      sub_67C4(&qword_FB8F8);
      if (sub_17BA4())
      {
        sub_17BCC();
        sub_17C50();
        if (!v15) {
          goto LABEL_64;
        }
      }

      if ((v11 & 1) == 0)
      {
        sub_17AF0();
        if (v14) {
          goto LABEL_63;
        }
        goto LABEL_49;
      }

      goto LABEL_44;
    }

    uint64_t v33 = v9;
    uint64_t v34 = v8;
    uint64_t v35 = v10;
    LOBYTE(v36) = v11;
    sub_15DE8();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&unk_F3BC8, &v33, v32, &unk_F3BC8);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v0, 0LL, 1LL, v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v30, v0, v32);
    uint64_t v27 = sub_1327C(v30);
    uint64_t v36 = (void *)sub_67C4(&qword_FB8E8);
    uint64_t v33 = v27;
    sub_17BFC();
    sub_17B54();
    sub_17BB8();
    if (v14) {
      goto LABEL_56;
    }
    sub_17EDC();
    sub_67C4(&qword_FB8F8);
    if (sub_17BA4())
    {
      sub_17BCC();
      sub_17C50();
      if (!v15) {
        goto LABEL_64;
      }
    }

    if ((v11 & 1) != 0)
    {
      sub_18010();
    }

    else
    {
      sub_17AF0();
      if (v14) {
        goto LABEL_61;
      }
      sub_17F3C(v28);
    }

    sub_17EE8();
    sub_180D4();
    uint64_t v2 = v32;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
LABEL_51:
    v7 += 32;
    if (!--v6)
    {
      uint64_t v5 = v29;
      goto LABEL_53;
    }
  }

  uint64_t v36 = &type metadata for Int;
  uint64_t v33 = v12;
  sub_17BFC();
  sub_17B54();
  sub_17BB8();
  if (!v14)
  {
    sub_17EDC();
    sub_67C4(&qword_FB8F8);
    if (sub_17BA4())
    {
      sub_17BCC();
      sub_17C50();
      if (!v15) {
        goto LABEL_64;
      }
    }

    if ((v11 & 1) != 0) {
      goto LABEL_44;
    }
    sub_17AF0();
    if (v14) {
      goto LABEL_59;
    }
LABEL_49:
    sub_17F3C(v16);
    goto LABEL_50;
  }

  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
  __break(1u);
LABEL_63:
  __break(1u);
  __break(1u);
  __break(1u);
LABEL_64:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_139AC()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v50 = sub_67C4(&qword_FB570);
  uint64_t v47 = *(void *)(v50 - 8);
  sub_17B6C();
  __chkstk_darwin(v4);
  sub_17D14();
  uint64_t v46 = v5;
  uint64_t v6 = v3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(v3 + 64);
  int64_t v49 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(v3);
  int64_t v10 = 0LL;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_26:
    uint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v12);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    if (*(void *)(v3 + 16))
    {
      swift_bridgeObjectRetain_n(v19, 2LL);
      unint64_t v20 = sub_D224(v18, v19);
      if ((v21 & 1) != 0)
      {
        sub_6A5C(*(void *)(v3 + 56) + 32 * v20, (uint64_t)&v57);
      }

      else
      {
        __int128 v57 = 0u;
        __int128 v58 = 0u;
      }

      sub_17CD0();
    }

    else
    {
      __int128 v57 = 0u;
      __int128 v58 = 0u;
      swift_bridgeObjectRetain(v19);
    }

    sub_17BDC();
    if (v56)
    {
      uint64_t v22 = sub_17D7C();
      uint64_t v25 = v52;
      sub_18240();
      uint64_t v0 = v1;
      KeyedEncodingContainer.encode(_:forKey:)(v26, v25, v55, v50);
      if (v1)
      {
        swift_bridgeObjectRelease(v25);
LABEL_68:
        sub_17A70((uint64_t)&v57, &qword_FCD20);
        sub_17CD0();
LABEL_69:
        swift_release();
        sub_17B3C();
        return;
      }

      sub_17A70((uint64_t)&v57, &qword_FCD20);
      sub_17CD0();
      swift_bridgeObjectRelease(v25);
    }

    else
    {
      sub_17C6C();
LABEL_37:
      sub_17BDC();
      if (v56)
      {
        uint64_t v27 = sub_17D7C();
        if ((sub_17C30(v27, v28, v29, (uint64_t)&type metadata for Int) & 1) != 0)
        {
          sub_180AC();
          uint64_t v0 = v1;
          KeyedEncodingContainer.encode(_:forKey:)();
          goto LABEL_48;
        }
      }

      else
      {
        sub_17C6C();
      }

      sub_17BDC();
      if (v56)
      {
        uint64_t v30 = sub_17D7C();
        if ((sub_17C30(v30, v31, v32, (uint64_t)&type metadata for Double) & 1) != 0)
        {
          uint64_t v33 = sub_17DF8();
          KeyedEncodingContainer.encode(_:forKey:)(v33);
          goto LABEL_48;
        }
      }

      else
      {
        sub_17C6C();
      }

      sub_17BDC();
      if (!v56)
      {
        sub_17C6C();
        goto LABEL_51;
      }

      uint64_t v34 = sub_17D7C();
      if ((sub_17C30(v34, v35, v36, (uint64_t)&type metadata for Bool) & 1) != 0)
      {
        sub_180AC();
        uint64_t v0 = v1;
        KeyedEncodingContainer.encode(_:forKey:)(v37, v38, v50);
LABEL_48:
        uint64_t v1 = v0;
        if (v0) {
          goto LABEL_68;
        }
        sub_17CE8((uint64_t)&v57);
        sub_17CD0();
      }

      else
      {
LABEL_51:
        sub_17BDC();
        if (v56)
        {
          sub_67C4(&qword_FB8E8);
          uint64_t v39 = sub_17D7C();
          if ((sub_17C30(v39, v40, v41, v42) & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v48 = v51;
          sub_18240();
          sub_15DE8();
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&unk_F3BC8, v55, v50, &unk_F3BC8);
          sub_17CD0();
          uint64_t v0 = v1;
          sub_139AC(v46, v48);
          sub_18034();
          sub_17E28(v47);
          sub_17A70((uint64_t)&v57, &qword_FCD20);
          if (v1) {
            goto LABEL_69;
          }
        }

        else
        {
          sub_17C6C();
LABEL_56:
          sub_17BDC();
          if (!v56)
          {
            sub_17C6C();
            goto LABEL_61;
          }

          uint64_t v43 = sub_67C4(&qword_FB8E0);
          if ((sub_17C30((uint64_t)&v51, (uint64_t)v55, (uint64_t)&type metadata for Any + 8, v43) & 1) != 0)
          {
            uint64_t v44 = v51;
            uint64_t v51 = v18;
            uint64_t v52 = v19;
            uint64_t v53 = 0LL;
            char v54 = 1;
            KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(v55, &v51, v50);
            sub_17CD0();
            uint64_t v0 = v1;
            sub_13EB4((uint64_t)v55, v44);
            swift_bridgeObjectRelease(v44);
            _s20HandleIntentStrategyVwxx_0(v55);
            sub_17CE8((uint64_t)&v57);
            if (v1) {
              goto LABEL_69;
            }
          }

          else
          {
LABEL_61:
            uint64_t v45 = sub_17DF8();
            KeyedEncodingContainer.encodeNil(forKey:)(v45);
            uint64_t v1 = v0;
            sub_17CE8((uint64_t)&v57);
            sub_17CD0();
            if (v0) {
              goto LABEL_69;
            }
          }
        }
      }
    }
  }

  BOOL v13 = __OFADD__(v10++, 1LL);
  if (v13)
  {
    __break(1u);
    goto LABEL_71;
  }

  if (v10 >= v49) {
    goto LABEL_69;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v10);
  if (v14)
  {
LABEL_25:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_26;
  }

  sub_1816C();
  if (v16 == v13) {
    goto LABEL_69;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_24;
  }
  sub_1816C();
  if (v16 == v13) {
    goto LABEL_69;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_24;
  }
  sub_1816C();
  if (v16 == v13) {
    goto LABEL_69;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_24;
  }
  sub_1816C();
  if (v16 == v13) {
    goto LABEL_69;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_24;
  }
  sub_1816C();
  if (v16 == v13) {
    goto LABEL_69;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_24:
    int64_t v10 = v15;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v49) {
      goto LABEL_69;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_25;
    }
  }

LABEL_71:
  __break(1u);
}

  ;
}

void sub_13EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v8 = sub_67C4(&qword_FB570);
  __chkstk_darwin(v8);
  sub_17D14();
  uint64_t v10 = *(void *)(a2 + 16);
  if (!v10) {
    return;
  }
  uint64_t v34 = v9;
  uint64_t v11 = a2 + 32;
  uint64_t v35 = a2;
  sub_17C9C();
  while (1)
  {
    sub_6A5C(v11, (uint64_t)v38);
    sub_17C78();
    if (!sub_17C30( (uint64_t)v37,  (uint64_t)v36,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String)) {
      break;
    }
    uint64_t v12 = v37[0];
    uint64_t v13 = v37[1];
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v3 = *(void *)(a1 + 32);
    sub_DBEC(a1, v4);
    uint64_t v2 = v5;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v12, v13, v4, v3);
    if (v5)
    {
      swift_bridgeObjectRelease(v13);
      goto LABEL_24;
    }

    sub_180DC();
    swift_bridgeObjectRelease(v13);
LABEL_13:
    v11 += 32LL;
    if (!--v10) {
      goto LABEL_25;
    }
  }

  sub_17C78();
  uint64_t v14 = sub_17EF0();
  if (sub_17C30(v14, v15, v16, (uint64_t)&type metadata for Int))
  {
    sub_17C20();
    sub_181BC();
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    goto LABEL_12;
  }

  sub_17C78();
  uint64_t v17 = sub_17EF0();
  if (sub_17C30(v17, v18, v19, (uint64_t)&type metadata for Double))
  {
    sub_17C20();
    uint64_t v20 = sub_181F0();
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v20);
    goto LABEL_12;
  }

  sub_17C78();
  uint64_t v21 = sub_17EF0();
  if (sub_17C30(v21, v22, v23, (uint64_t)&type metadata for Bool))
  {
    sub_17C20();
    sub_181BC();
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
LABEL_12:
    uint64_t v5 = v2;
    sub_180DC();
    if (v2) {
      goto LABEL_25;
    }
    goto LABEL_13;
  }

  sub_17C78();
  sub_67C4(&qword_FB8E8);
  uint64_t v24 = sub_17EF0();
  if (sub_17C30(v24, v25, v26, v27))
  {
    uint64_t v28 = v37[0];
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v33 = *(void *)(a1 + 32);
    sub_DBEC(a1, v3);
    unint64_t v29 = sub_181E8();
    uint64_t v4 = v34;
    dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)(&unk_F3BC8, &unk_F3BC8, v29, v3, v33);
    uint64_t v2 = v5;
    sub_139AC(v34, v28);
    if (v5)
    {
      swift_bridgeObjectRelease(v28);
      sub_1819C();
      goto LABEL_24;
    }

    swift_bridgeObjectRelease(v28);
    sub_1819C();
    goto LABEL_22;
  }

  sub_17C78();
  uint64_t v30 = sub_67C4(&qword_FB8E0);
  if (!sub_17C30((uint64_t)v37, (uint64_t)v36, (uint64_t)&type metadata for Any + 8, v30))
  {
    sub_17C20();
    uint64_t v32 = sub_181F0();
    dispatch thunk of UnkeyedEncodingContainer.encodeNil()(v32);
    uint64_t v5 = v2;
    if (v2) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }

  uint64_t v31 = v37[0];
  sub_17C20();
  dispatch thunk of UnkeyedEncodingContainer.nestedUnkeyedContainer()(v36, v3, v4);
  uint64_t v2 = v5;
  sub_13EB4(v36, v31);
  if (!v5)
  {
    swift_bridgeObjectRelease(v31);
    _s20HandleIntentStrategyVwxx_0(v36);
LABEL_22:
    sub_180DC();
    goto LABEL_13;
  }

  swift_bridgeObjectRelease(v31);
  _s20HandleIntentStrategyVwxx_0(v36);
LABEL_24:
  sub_180DC();
LABEL_25:
  swift_bridgeObjectRelease(v35);
}

void sub_141EC(void *a1)
{
  uint64_t v5 = sub_67C4(&qword_FB548);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1813C();
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_8CFC(a1, v7);
  if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter(v7, v8) & 1) == 0)
  {
    uint64_t v30 = v6;
    uint64_t v9 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v11 = a1[3];
      uint64_t v10 = a1[4];
      uint64_t v12 = sub_DBEC((uint64_t)a1, v11);
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)(v11, v10);
      if (v14) {
        goto LABEL_16;
      }
      sub_17BEC();
      uint64_t v13 = sub_17E48();
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)(v13);
      if ((v15 & 1) != 0
        && (sub_17BEC(),
            uint64_t v16 = sub_17E48(),
            dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)(v16),
            (v17 & 1) != 0)
        && (sub_17BEC(),
            uint64_t v18 = sub_17E48(),
            dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)(v18) == 2))
      {
        sub_17BEC();
        unint64_t v19 = sub_15DE8();
        dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)(&unk_F3BC8, &unk_F3BC8, v19, v10, v11);
        _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v1, 0LL, 1LL, v5);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v2, v1, v5);
        uint64_t v20 = sub_1327C(v2);
        sub_67C4(&qword_FB8E8);
        if ((sub_17CC8() & 1) == 0)
        {
          sub_17C60(0, v9[2] + 1LL);
          uint64_t v9 = v28;
        }

        sub_180E4();
        if (v22)
        {
          sub_17C60(v21 > 1, v20);
          uint64_t v9 = v29;
        }

        sub_17F14();
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v2, v5);
      }

      else
      {
LABEL_16:
        if ((sub_17CC8() & 1) == 0)
        {
          sub_17C60(0, v9[2] + 1LL);
          uint64_t v9 = v26;
        }

        sub_180E4();
        if (v22)
        {
          sub_17C60(v23 > 1, v12);
          uint64_t v9 = v27;
        }

        sub_17F14();
      }

      sub_8CFC(a1, a1[3]);
      uint64_t v24 = sub_17E48();
    }

    while ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter(v24, v25) & 1) == 0);
  }

  sub_17E58();
}

BOOL sub_145F8(char a1, char a2)
{
  return a1 == a2;
}

void sub_14608(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_1462C(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x65644972656D6974LL && a2 == 0xEF7265696669746ELL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65644972656D6974LL, 0xEF7265696669746ELL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v6 = 0x80000000000C6B80LL;
    if (a2 == 0x80000000000C6B80LL) {
      goto LABEL_11;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000000000C6B80LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x80000000000C6BA0LL)
  {
    unint64_t v7 = 0x80000000000C6BA0LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x80000000000C6BA0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  BOOL v8 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000LL;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562616CLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  else
  {
    BOOL v9 = a1 == 0x6E6F697461727564LL && a2 == 0xE800000000000000LL;
    if (v9
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 4LL;
    }

    else
    {
      BOOL v10 = a1 == 0x6E696E69616D6572LL && a2 == 0xED0000656D695467LL;
      if (v10
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E696E69616D6572LL, 0xED0000656D695467LL, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a2);
        return 5LL;
      }

      else
      {
        BOOL v11 = a1 == 0x6574617473LL && a2 == 0xE500000000000000LL;
        if (v11
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(a2);
          return 6LL;
        }

        else if (a1 == 0x74756F68636E7570LL && a2 == 0xEB000000004C5255LL)
        {
          swift_bridgeObjectRelease(a2);
          return 7LL;
        }

        else
        {
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74756F68636E7570LL, 0xEB000000004C5255LL, a1, a2, 0LL);
          swift_bridgeObjectRelease(a2);
          if ((v13 & 1) != 0) {
            return 7LL;
          }
          else {
            return 8LL;
          }
        }
      }
    }
  }

uint64_t variable initialization expression of UndoTimerChangeStateFlow.operation()
{
  return 8LL;
}

BOOL sub_14964(char *a1, char *a2)
{
  return sub_145F8(*a1, *a2);
}

void sub_14970()
{
}

void sub_14988(uint64_t a1)
{
}

uint64_t sub_14990@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1462C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_149B4()
{
  return _s23TimerFlowDelegatePlugin04Undoa11ChangeStateB0C13remainingTime33_62B50396D43A4CC5B625338950F1B173LLSdSgvpfi_0();
}

uint64_t sub_149D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = variable initialization expression of UndoTimerChangeStateFlow.operation();
  *a1 = result;
  return result;
}

uint64_t sub_149F4(uint64_t a1)
{
  unint64_t v2 = sub_10298();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14A1C(uint64_t a1)
{
  unint64_t v2 = sub_10298();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "14A4C: call analysis failed (funcsize=5)"
uint64_t sub_14A58()
{
  return dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
}

uint64_t sub_14AA0()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

void sub_14ACC(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
}

uint64_t sub_14AFC()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_14B08@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_14A58();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_14B34(uint64_t a1)
{
  unint64_t v2 = sub_15DE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14B5C(uint64_t a1)
{
  unint64_t v2 = sub_15DE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TimerSelectorModel.timers.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t property wrapper backing initializer of TimerSelectorModel.header(uint64_t a1, uint64_t a2)
{
  v3[0] = a1;
  v3[1] = a2;
  return Loggable.init(wrappedValue:)(v3, &type metadata for String);
}

uint64_t TimerSelectorModel.header.getter()
{
  uint64_t v0 = sub_67C4(&qword_FB5C0);
  Loggable.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t TimerSelectorModel.header.setter(uint64_t a1, uint64_t a2)
{
  v4[0] = a1;
  v4[1] = a2;
  sub_18178();
  uint64_t v2 = sub_67C4(&qword_FB5C0);
  return Loggable.wrappedValue.setter(v4, v2);
}

void (*TimerSelectorModel.header.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  sub_18178();
  uint64_t v3 = sub_67C4(&qword_FB5C0);
  v2[4] = Loggable.wrappedValue.modify(v2, v3);
  return sub_14C90;
}

void sub_14C90(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32LL))(*a1, 0LL);
  free(v1);
}

uint64_t TimerSelectorModel.init(timers:header:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  type metadata accessor for TimerSelectorModel(0LL);
  v7[0] = a2;
  v7[1] = a3;
  return Loggable.init(wrappedValue:)(v7, &type metadata for String);
}

BOOL sub_14D1C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_14D2C(uint64_t a1, char a2)
{
}

uint64_t sub_14D50(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x7372656D6974LL && a2 == 0xE600000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7372656D6974LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 0x726564616568LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726564616568LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_14E2C()
{
  return 2LL;
}

Swift::Int sub_14E34(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_14E78(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x726564616568LL;
  }
  else {
    return 0x7372656D6974LL;
  }
}

BOOL sub_14EA0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_14D1C(*a1, *a2);
}

Swift::Int sub_14EAC()
{
  return sub_14E34(*v0);
}

void sub_14EB4(uint64_t a1)
{
}

Swift::Int sub_14EBC(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_14EFC()
{
  return sub_14E78(*v0);
}

uint64_t sub_14F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_14D50(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_14F28@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_14E2C();
  *a1 = result;
  return result;
}

uint64_t sub_14F4C(uint64_t a1)
{
  unint64_t v2 = sub_15EC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14F74(uint64_t a1)
{
  unint64_t v2 = sub_15EC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void TimerSelectorModel.encode(to:)()
{
  BOOL v3 = v0;
  uint64_t v4 = sub_67C4(&qword_FB5C8);
  sub_17DC4();
  __chkstk_darwin(v5);
  sub_17EBC();
  unint64_t v6 = sub_15EC0();
  sub_17E38((uint64_t)&type metadata for TimerSelectorModel.CodingKeys, v7, v6);
  uint64_t v15 = *v0;
  char v14 = 0;
  uint64_t v8 = sub_67C4(&qword_FB500);
  unint64_t v9 = sub_FCEC((uint64_t)&unk_FB520);
  sub_182C0((uint64_t)&v15, (uint64_t)&v14, v4, v8, v9);
  if (!v1)
  {
    uint64_t v10 = (uint64_t)v3 + *(int *)(sub_18194() + 20);
    char v13 = 1;
    uint64_t v11 = sub_67C4(&qword_FB5C0);
    sub_15EFC((uint64_t)&unk_FB5D8);
    sub_182C0(v10, (uint64_t)&v13, v4, v11, v12);
  }

  sub_17F50(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_17CF0();
}

void TimerSelectorModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v37 = v10;
  char v13 = v12;
  uint64_t v33 = v14;
  uint64_t v34 = sub_67C4(&qword_FB5C0);
  uint64_t v32 = *(void *)(v34 - 8);
  sub_17B6C();
  __chkstk_darwin(v15);
  char v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = sub_67C4(&qword_FB5E0);
  uint64_t v18 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  sub_18154();
  uint64_t v19 = sub_18194();
  sub_17B6C();
  __chkstk_darwin(v20);
  char v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = v13[3];
  uint64_t v23 = v13[4];
  sub_8CFC(v13, v24);
  unint64_t v25 = sub_15EC0();
  uint64_t v35 = v11;
  uint64_t v26 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for TimerSelectorModel.CodingKeys,  &type metadata for TimerSelectorModel.CodingKeys,  v25,  v24,  v23);
  if (v26)
  {
    sub_18218();
  }

  else
  {
    uint64_t v37 = v13;
    uint64_t v27 = v34;
    sub_67C4(&qword_FB500);
    char v39 = 0;
    sub_FCEC((uint64_t)&unk_FB508);
    uint64_t v28 = v35;
    sub_17F48();
    uint64_t v31 = a10;
    *(void *)char v22 = a10;
    char v38 = 1;
    sub_15EFC((uint64_t)&unk_FB5E8);
    sub_17F48();
    sub_17D0C(v28, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v22[*(int *)(v19 + 20)], v17, v27);
    sub_15E24((uint64_t)v22, v33, type metadata accessor for TimerSelectorModel);
    _s20HandleIntentStrategyVwxx_0(v37);
    uint64_t v29 = sub_17D30();
    sub_11E50(v29, v30);
  }

  sub_17B3C();
}

void sub_1532C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_15340()
{
}

void ComposeTimerModel.label.getter()
{
}

void ComposeTimerModel.label.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  sub_17B78();
}

void ComposeTimerModel.duration.getter()
{
}

void ComposeTimerModel.duration.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  sub_17B78();
}

TimerFlowDelegatePlugin::TimerSnippetModel (__swiftcall *ComposeTimerModel.duration.modify())(Swift::OpaquePointer timers)
{
  return TimerSnippetModel.init(timers:);
}

void __swiftcall ComposeTimerModel.init(header:prompt:label:duration:)( TimerFlowDelegatePlugin::ComposeTimerModel *__return_ptr retstr, Swift::String header, Swift::String prompt, Swift::String_optional label, Swift::String_optional duration)
{
  retstr->header = header;
  retstr->prompt = prompt;
  retstr->label = label;
  retstr->duration = duration;
}

uint64_t sub_15410(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x726564616568LL && a2 == 0xE600000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x726564616568LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else
  {
    BOOL v6 = a1 == 0x74706D6F7270LL && a2 == 0xE600000000000000LL;
    if (v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x74706D6F7270LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 1LL;
    }

    else
    {
      BOOL v7 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000LL;
      if (v7
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562616CLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a2);
        return 2LL;
      }

      else if (a1 == 0x6E6F697461727564LL && a2 == 0xE800000000000000LL)
      {
        swift_bridgeObjectRelease(a2);
        return 3LL;
      }

      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564LL, 0xE800000000000000LL, a1, a2, 0LL);
        swift_bridgeObjectRelease(a2);
        if ((v9 & 1) != 0) {
          return 3LL;
        }
        else {
          return 4LL;
        }
      }
    }
  }

uint64_t sub_15594()
{
  return 4LL;
}

void sub_1559C(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_18290(a1);
  Hasher._combine(_:)(v1);
  sub_18104();
  sub_17E1C();
}

uint64_t sub_155CC(char a1)
{
  return *(void *)&aHeader_1[8 * a1];
}

void sub_155EC(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  sub_18104();
  sub_17E1C();
}

uint64_t sub_15620()
{
  return sub_155CC(*v0);
}

uint64_t sub_15628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_15410(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1564C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_15594();
  *a1 = result;
  return result;
}

uint64_t sub_15670(uint64_t a1)
{
  unint64_t v2 = sub_15F54();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15698(uint64_t a1)
{
  unint64_t v2 = sub_15F54();
  return CodingKey.debugDescription.getter(a1, v2);
}

void ComposeTimerModel.encode(to:)()
{
  unint64_t v4 = sub_15F54();
  sub_17E38((uint64_t)&type metadata for ComposeTimerModel.CodingKeys, v5, v4);
  uint64_t v6 = *v0;
  uint64_t v7 = v0[1];
  char v17 = 0;
  sub_1805C(v6, v7, (uint64_t)&v17);
  if (!v1)
  {
    uint64_t v8 = v0[2];
    uint64_t v9 = v0[3];
    char v16 = 1;
    sub_1805C(v8, v9, (uint64_t)&v16);
    uint64_t v10 = v0[4];
    uint64_t v11 = v0[5];
    char v15 = 2;
    sub_1806C(v10, v11, (uint64_t)&v15);
    uint64_t v12 = v0[6];
    uint64_t v13 = v0[7];
    char v14 = 3;
    sub_1806C(v12, v13, (uint64_t)&v14);
  }

  sub_17F50(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_17CF0();
}

void ComposeTimerModel.init(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = sub_67C4(&qword_FB600);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_18124();
  uint64_t v34 = v29[3];
  uint64_t v35 = v29[4];
  sub_8CFC(v29, v34);
  unint64_t v36 = sub_15F54();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ComposeTimerModel.CodingKeys,  &type metadata for ComposeTimerModel.CodingKeys,  v36,  v34,  v35);
  if (v24)
  {
    sub_17FF4();
    swift_bridgeObjectRelease(0LL);
    sub_17CD0();
  }

  else
  {
    a14 = 0;
    uint64_t v37 = sub_1803C((uint64_t)&a14);
    uint64_t v39 = v38;
    uint64_t v55 = v37;
    a13 = 1;
    swift_bridgeObjectRetain(v38);
    uint64_t v40 = sub_1803C((uint64_t)&a13);
    uint64_t v42 = v41;
    uint64_t v52 = v40;
    uint64_t v53 = v31;
    a12 = 2;
    sub_17C9C();
    uint64_t v54 = v42;
    uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a12, v32);
    uint64_t v45 = v44;
    uint64_t v51 = v43;
    a11 = 3;
    swift_bridgeObjectRetain(v44);
    uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a11, v32);
    uint64_t v48 = v47;
    int64_t v49 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
    uint64_t v50 = v46;
    sub_17D54(v25, v49);
    sub_17C9C();
    swift_bridgeObjectRelease(0LL);
    sub_17FF4();
    sub_18034();
    sub_17CD0();
    swift_bridgeObjectRelease(v54);
    sub_17E70();
    *uint64_t v53 = v55;
    v53[1] = v39;
    v53[2] = v52;
    v53[3] = v54;
    v53[4] = v51;
    v53[5] = v45;
    v53[6] = v50;
    v53[7] = v48;
  }

  sub_17B3C();
}

double sub_159CC@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  if (!v9)
  {
    *a9 = v13;
    a9[1] = v16;
    double result = *(double *)&v19;
    a9[2] = v19;
    a9[3] = v22;
  }

  return result;
}

void sub_15A0C()
{
}

uint64_t variable initialization expression of UndoTimerChangeStateFlow.pauseCatFamilySimple()
{
  return sub_15B60( (void (*)(void))type metadata accessor for PauseTimerCATsSimple,  (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of UndoTimerChangeStateFlow.pauseCatFamily()
{
  return sub_15B60( (void (*)(void))type metadata accessor for PauseTimerCATs_Async,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of UndoTimerChangeStateFlow.resumeCatFamilySimple()
{
  return sub_15B60( (void (*)(void))type metadata accessor for ResumeTimerCATsSimple,  (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of UndoTimerChangeStateFlow.resumeCatFamily()
{
  return sub_15B60( (void (*)(void))type metadata accessor for ResumeTimerCATs_Async,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of UndoTimerChangeStateFlow.pausePatternFamily()
{
  return sub_15B60( (void (*)(void))type metadata accessor for PauseTimerCATPatternsExecutor,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of UndoTimerChangeStateFlow.resumePatternFamily()
{
  return sub_15B60( (void (*)(void))type metadata accessor for ResumeTimerCATPatternsExecutor,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of UndoTimerChangeStateFlow.genericPatternFamily()
{
  return sub_15B60( (void (*)(void))type metadata accessor for TimerBaseCATPatternsExecutor,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of UndoTimerChangeStateFlow.failureReason()
{
  uint64_t v0 = sub_18234();
  type metadata accessor for SiriTimeEventSender.ReasonDescription(v0);
  sub_17DEC();
  return sub_17D28(v1, v2, v3, v4);
}

uint64_t variable initialization expression of UndoCreateTimerFlow.catFamily()
{
  return sub_15B60( (void (*)(void))type metadata accessor for DeleteTimerCATs_Async,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of UndoCreateTimerFlow.patternFamily()
{
  return sub_15B60( (void (*)(void))type metadata accessor for DeleteTimerCATPatternsExecutor,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of UndoCreateTimerFlow.followupPluginAction()
{
  uint64_t v0 = sub_18234();
  type metadata accessor for PluginAction(v0);
  sub_17DEC();
  return sub_17D28(v1, v2, v3, v4);
}

uint64_t variable initialization expression of RecreateDeletedTimerFlow.catFamilySimple()
{
  return sub_15B60( (void (*)(void))type metadata accessor for CreateTimerCATsSimple,  (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of RecreateDeletedTimerFlow.catFamily()
{
  return sub_15B60( (void (*)(void))type metadata accessor for CreateTimerCATs_Async,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of RecreateDeletedTimerFlow.patternFamily()
{
  return sub_15B60( (void (*)(void))type metadata accessor for CreateTimerCATPatternsExecutor,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t sub_15B60(void (*a1)(void), uint64_t (*a2)(uint64_t, void))
{
  return a2(v2, 0LL);
}

uint64_t variable initialization expression of RecreateDeletedTimerFlow.shouldPause()
{
  return 0LL;
}

uint64_t sub_15BD4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((a2 & 0x8000000000000000LL) == 0) {
    return swift_unknownObjectRetain(a3);
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_15C4C()
{
  unint64_t result = qword_FB4D8;
  if (!qword_FB4D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ComposeTimerModel,  &type metadata for ComposeTimerModel);
    atomic_store(result, (unint64_t *)&qword_FB4D8);
  }

  return result;
}

void sub_15C88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = sub_1809C(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(v3, v4, v5);
  sub_17DD4();
}

void sub_15CBC(uint64_t a1)
{
  if (!sub_182A8(a1))
  {
    uint64_t v4 = v3;
    uint64_t v5 = v2(255LL);
    atomic_store(swift_getWitnessTable(v4, v5), v1);
  }

  sub_17DD4();
}

unint64_t sub_15CF4()
{
  unint64_t result = qword_FB4E8;
  if (!qword_FB4E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for TimerSnippetModel,  &type metadata for TimerSnippetModel);
    atomic_store(result, (unint64_t *)&qword_FB4E8);
  }

  return result;
}

uint64_t sub_15D30(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t type metadata accessor for SiriTimerSnippetModel(uint64_t a1)
{
  return sub_DAF8(a1, (uint64_t *)&unk_FB718, (uint64_t)&nominal type descriptor for SiriTimerSnippetModel);
}

uint64_t _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_15D94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FB530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

unint64_t sub_15DE8()
{
  unint64_t result = qword_FB568;
  if (!qword_FB568)
  {
    unint64_t result = swift_getWitnessTable(&unk_C22A8, &unk_F3BC8);
    atomic_store(result, (unint64_t *)&qword_FB568);
  }

  return result;
}

void sub_15E24(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1809C(a1, a2, a3);
  sub_17E8C(v3);
  sub_17DD4();
}

unint64_t sub_15E44()
{
  unint64_t result = qword_FB5B0;
  if (!qword_FB5B0)
  {
    uint64_t v1 = sub_15D30(&qword_FB530);
    sub_15CBC((uint64_t)&unk_FB5B8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_FB5B0);
  }

  return result;
}

unint64_t sub_15EC0()
{
  unint64_t result = qword_FB5D0;
  if (!qword_FB5D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2258, &type metadata for TimerSelectorModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB5D0);
  }

  return result;
}

void sub_15EFC(uint64_t a1)
{
  if (!sub_182A8(a1))
  {
    uint64_t v3 = v2;
    uint64_t v4 = sub_15D30(&qword_FB5C0);
    atomic_store(swift_getWitnessTable(v3, v4), v1);
  }

  sub_18260();
}

unint64_t sub_15F54()
{
  unint64_t result = qword_FB5F8;
  if (!qword_FB5F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2208, &type metadata for ComposeTimerModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB5F8);
  }

  return result;
}

void sub_15F90()
{
}

void sub_15FBC()
{
}

void sub_15FF0()
{
}

void sub_1601C()
{
}

void *assignWithCopy for SiriTimePluginModel(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_11E50((uint64_t)a1, type metadata accessor for SiriTimePluginModel);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v7 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v13 = a2[1];
      a1[1] = v13;
      a1[2] = a2[2];
      uint64_t v14 = a2[3];
      a1[3] = v14;
      a1[4] = a2[4];
      uint64_t v15 = a2[5];
      a1[5] = v15;
      a1[6] = a2[6];
      uint64_t v16 = a2[7];
      a1[7] = v16;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      uint64_t v17 = v16;
    }

    else
    {
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = *a2;
        *a1 = *a2;
        uint64_t v9 = *(int *)(type metadata accessor for TimerSelectorModel(0LL) + 20);
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        swift_bridgeObjectRetain(v8);
        uint64_t v12 = sub_67C4(&qword_FB5C0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
LABEL_8:
        swift_storeEnumTagMultiPayload(a1, a3, v7);
        return a1;
      }

      uint64_t v17 = *a2;
      *a1 = *a2;
    }

    swift_bridgeObjectRetain(v17);
    goto LABEL_8;
  }

  return a1;
}

void *initializeWithTake for SiriTimePluginModel(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(type metadata accessor for TimerSelectorModel(0LL) + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_67C4(&qword_FB5C0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for SiriTimePluginModel(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_11E50((uint64_t)a1, type metadata accessor for SiriTimePluginModel);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(type metadata accessor for TimerSelectorModel(0LL) + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = sub_67C4(&qword_FB5C0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_16300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_16310(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for TimerSelectorModel(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = "@";
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SiriTimerSnippetModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    a1[4] = v9;
    uint64_t v13 = type metadata accessor for URL(0LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v12, 1LL, v13))
    {
      uint64_t v14 = sub_67C4(&qword_FB530);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v11, 0LL, 1LL, v13);
    }

    uint64_t v16 = a3[8];
    uint64_t v17 = a3[9];
    uint64_t v18 = (uint64_t *)((char *)v4 + v16);
    __int128 v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = (char *)v4 + v17;
    __int128 v22 = (char *)a2 + v17;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = a3[10];
    uint64_t v24 = a3[11];
    uint64_t v25 = (char *)v4 + v23;
    uint64_t v26 = (char *)a2 + v23;
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = (char *)v4 + v24;
    uint64_t v28 = (char *)a2 + v24;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    swift_bridgeObjectRetain(v20);
  }

  return v4;
}

void *assignWithCopy for SiriTimerSnippetModel(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[4];
  uint64_t v11 = a2[4];
  a1[4] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for URL(0LL);
  int v16 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v13, 1LL, v15);
  int v17 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v14, 1LL, v15);
  if (!v16)
  {
    uint64_t v18 = *(void *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v13, v14, v15);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v17)
  {
LABEL_6:
    uint64_t v19 = sub_67C4(&qword_FB530);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v13, 0LL, 1LL, v15);
LABEL_7:
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)((char *)a1 + v20);
  __int128 v22 = (void *)((char *)a2 + v20);
  *uint64_t v21 = *v22;
  uint64_t v23 = v22[1];
  uint64_t v24 = v21[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = a3[9];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)uint64_t v26 = v28;
  uint64_t v29 = a3[10];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  LOBYTE(v28) = v31[8];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v28;
  uint64_t v32 = a3[11];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)v34;
  v33[8] = v34[8];
  *(void *)uint64_t v33 = v35;
  return a1;
}

uint64_t initializeWithTake for SiriTimerSnippetModel(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for URL(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_67C4(&qword_FB530);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(void *)uint64_t v13 = *(void *)v14;
  uint64_t v15 = a3[10];
  uint64_t v16 = a3[11];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = a1 + v16;
  uint64_t v20 = a2 + v16;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  return a1;
}

void *assignWithTake for SiriTimerSnippetModel(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for URL(0LL);
  int v15 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v12, 1LL, v14);
  int v16 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v13, 1LL, v14);
  if (!v15)
  {
    uint64_t v17 = *(void *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v12, v13, v14);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v18 = sub_67C4(&qword_FB530);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v12, 0LL, 1LL, v14);
LABEL_7:
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v24 = v20[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = a3[9];
  uint64_t v26 = a3[10];
  uint64_t v27 = (char *)a1 + v25;
  uint64_t v28 = (char *)a2 + v25;
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  uint64_t v29 = (char *)a1 + v26;
  uint64_t v30 = (char *)a2 + v26;
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v30[8];
  uint64_t v31 = a3[11];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  *(void *)uint64_t v32 = *(void *)v33;
  v32[8] = v33[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriTimerSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_169B4);
}

void sub_169B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_182DC(*(void *)(a1 + 8));
    sub_17B78();
  }

  else
  {
    uint64_t v6 = sub_67C4(&qword_FB530);
    sub_17EA4(a1 + *(int *)(a3 + 28), a2, v6);
  }

uint64_t storeEnumTagSinglePayload for SiriTimerSnippetModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_16A1C);
}

void sub_16A1C()
{
  if (v3)
  {
    *(void *)(v1 + 8) = (v0 - 1);
    sub_17B78();
  }

  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = sub_67C4(&qword_FB530);
    sub_17EB0(v1 + *(int *)(v4 + 28), v0, v0, v5);
  }

void sub_16A70(uint64_t a1)
{
  v4[0] = &unk_C1AE8;
  v4[1] = &unk_C1B00;
  void v4[2] = &unk_C1B18;
  sub_16B08(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(v2 - 8) + 64LL;
    v4[4] = &unk_C1B00;
    v4[5] = &unk_C1B30;
    v4[6] = &unk_C1B30;
    v4[7] = &unk_C1B30;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
  }

void sub_16B08(uint64_t a1)
{
  if (!qword_FB728)
  {
    uint64_t v2 = type metadata accessor for URL(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_FB728);
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for TimerSelectorModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    swift_bridgeObjectRetain(v5);
    uint64_t v9 = sub_67C4(&qword_FB5C0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  }

  return a1;
}

uint64_t destroy for TimerSelectorModel(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_67C4(&qword_FB5C0);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *initializeWithCopy for TimerSelectorModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  swift_bridgeObjectRetain(v4);
  uint64_t v8 = sub_67C4(&qword_FB5C0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithCopy for TimerSelectorModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_67C4(&qword_FB5C0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

void *initializeWithTake for TimerSelectorModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_67C4(&qword_FB5C0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for TimerSelectorModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_67C4(&qword_FB5C0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerSelectorModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16DE8);
}

void sub_16DE8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_182DC(*a1);
    sub_17B78();
  }

  else
  {
    uint64_t v6 = sub_67C4(&qword_FB5C0);
    sub_17EA4((uint64_t)a1 + *(int *)(a3 + 20), a2, v6);
  }

uint64_t storeEnumTagSinglePayload for TimerSelectorModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_16E50);
}

void sub_16E50()
{
  if (v3)
  {
    *uint64_t v1 = (v0 - 1);
    sub_17B78();
  }

  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = sub_67C4(&qword_FB5C0);
    sub_17EB0((uint64_t)v1 + *(int *)(v4 + 20), v0, v0, v5);
  }

void sub_16EA4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_16F1C();
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

void sub_16F1C()
{
  if (!qword_FB7D8)
  {
    unint64_t v0 = type metadata accessor for Loggable(0LL, &type metadata for String);
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_FB7D8);
    }
  }

uint64_t initializeBufferWithCopyOfBuffer for ComposeTimerModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for ComposeTimerModel(void *a1)
{
  return swift_bridgeObjectRelease(a1[7]);
}

void *initializeWithCopy for ComposeTimerModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for ComposeTimerModel(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for ComposeTimerModel(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for ComposeTimerModel(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ComposeTimerModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ComposeTimerModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for ComposeTimerModel()
{
}

uint64_t getEnumTagSinglePayload for ComposeTimerModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for ComposeTimerModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_172C4 + 4 * byte_C17CD[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_172F8 + 4 * byte_C17C8[v4]))();
}

uint64_t sub_172F8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17300(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x17308LL);
  }
  return result;
}

uint64_t sub_17314(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1731CLL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_17320(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17328(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComposeTimerModel.CodingKeys()
{
  return &type metadata for ComposeTimerModel.CodingKeys;
}

uint64_t getEnumTagSinglePayload for TimerSelectorModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for TimerSelectorModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_17418 + 4 * byte_C17D7[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1744C + 4 * byte_C17D2[v4]))();
}

uint64_t sub_1744C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17454(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1745CLL);
  }
  return result;
}

uint64_t sub_17468(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x17470LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_17474(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1747C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_17488(_BYTE *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TimerSelectorModel.CodingKeys()
{
  return &type metadata for TimerSelectorModel.CodingKeys;
}

_BYTE *sub_174A4(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SiriTimerSnippetModel.CodingKeys()
{
  return &type metadata for SiriTimerSnippetModel.CodingKeys;
}

uint64_t sub_174BC(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

uint64_t sub_174C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_17500(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  return a1;
}

__n128 sub_1755C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_17570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t sub_175B4(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_175F4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for JSONCodingKeys()
{
}

ValueMetadata *type metadata accessor for TimerSnippetModel.CodingKeys()
{
  return &type metadata for TimerSnippetModel.CodingKeys;
}

ValueMetadata *type metadata accessor for SiriTimePluginModel.CodingKeys()
{
  return &type metadata for SiriTimePluginModel.CodingKeys;
}

ValueMetadata *type metadata accessor for SiriTimePluginModel.TimerMultiCodingKeys()
{
  return &type metadata for SiriTimePluginModel.TimerMultiCodingKeys;
}

ValueMetadata *type metadata accessor for SiriTimePluginModel.TimerSelectorCodingKeys()
{
  return &type metadata for SiriTimePluginModel.TimerSelectorCodingKeys;
}

ValueMetadata *type metadata accessor for SiriTimePluginModel.ComposeTimerCodingKeys()
{
  return &type metadata for SiriTimePluginModel.ComposeTimerCodingKeys;
}

unint64_t sub_17698()
{
  unint64_t result = qword_FB808;
  if (!qword_FB808)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1C88, &type metadata for SiriTimePluginModel.ComposeTimerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB808);
  }

  return result;
}

unint64_t sub_176D8()
{
  unint64_t result = qword_FB810;
  if (!qword_FB810)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1D40, &type metadata for SiriTimePluginModel.TimerSelectorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB810);
  }

  return result;
}

unint64_t sub_17728()
{
  unint64_t result = qword_FB838;
  if (!qword_FB838)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2128, &type metadata for TimerSelectorModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB838);
  }

  return result;
}

unint64_t sub_17768()
{
  unint64_t result = qword_FB840;
  if (!qword_FB840)
  {
    unint64_t result = swift_getWitnessTable(&unk_C21E0, &type metadata for ComposeTimerModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB840);
  }

  return result;
}

unint64_t sub_177A8()
{
  unint64_t result = qword_FB848;
  if (!qword_FB848)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2150, &type metadata for ComposeTimerModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB848);
  }

  return result;
}

unint64_t sub_177E8()
{
  unint64_t result = qword_FB850;
  if (!qword_FB850)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2178, &type metadata for ComposeTimerModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB850);
  }

  return result;
}

unint64_t sub_17828()
{
  unint64_t result = qword_FB858;
  if (!qword_FB858)
  {
    unint64_t result = swift_getWitnessTable(&unk_C2098, &type metadata for TimerSelectorModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB858);
  }

  return result;
}

unint64_t sub_17868()
{
  unint64_t result = qword_FB860;
  if (!qword_FB860)
  {
    unint64_t result = swift_getWitnessTable(&unk_C20C0, &type metadata for TimerSelectorModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB860);
  }

  return result;
}

unint64_t sub_178A8()
{
  unint64_t result = qword_FB868;
  if (!qword_FB868)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1F90, &unk_F3BC8);
    atomic_store(result, (unint64_t *)&qword_FB868);
  }

  return result;
}

unint64_t sub_178E8()
{
  unint64_t result = qword_FB870;
  if (!qword_FB870)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1FB8, &unk_F3BC8);
    atomic_store(result, (unint64_t *)&qword_FB870);
  }

  return result;
}

unint64_t sub_17940()
{
  unint64_t result = qword_FB8A8;
  if (!qword_FB8A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1CB0, &type metadata for SiriTimePluginModel.TimerSelectorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB8A8);
  }

  return result;
}

unint64_t sub_17980()
{
  unint64_t result = qword_FB8B0;
  if (!qword_FB8B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1CD8, &type metadata for SiriTimePluginModel.TimerSelectorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB8B0);
  }

  return result;
}

unint64_t sub_179C0()
{
  unint64_t result = qword_FB8B8;
  if (!qword_FB8B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1BF8, &type metadata for SiriTimePluginModel.ComposeTimerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB8B8);
  }

  return result;
}

unint64_t sub_17A00()
{
  unint64_t result = qword_FB8C0;
  if (!qword_FB8C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_C1C20, &type metadata for SiriTimePluginModel.ComposeTimerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_FB8C0);
  }

  return result;
}

void sub_17A44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_67C4(a3);
  sub_17E8C(v3);
  sub_17DD4();
}

void sub_17A70(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_67C4(a2);
  sub_17FFC(v2);
  sub_17DD4();
}

uint64_t sub_17A98()
{
  if (*(void *)(v0 + 40)) {
    _s20HandleIntentStrategyVwxx_0((void *)(v0 + 16));
  }
  return swift_deallocObject(v0, 48LL, 7LL);
}

_OWORD *sub_17AF0()
{
  *(void *)(v1 + 8 * (v2 >> 6) + 64) |= 1LL << v2;
  uint64_t v5 = (void *)(*(void *)(v1 + 48) + 16 * v2);
  *uint64_t v5 = v3;
  v5[1] = v0;
  return sub_D368((_OWORD *)(v4 - 192), (_OWORD *)(*(void *)(v1 + 56) + 32 * v2));
}

  ;
}

unint64_t sub_17B54()
{
  *(void *)(v3 - 224) = v1;
  return sub_D224(v2, v0);
}

  ;
}

  ;
}

uint64_t sub_17B84()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 96, v3 - 65, v0, v1, v2);
}

BOOL sub_17BA4()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

  ;
}

unint64_t sub_17BCC()
{
  return sub_D224(v1, v0);
}

void sub_17BDC()
{
}

uint64_t sub_17BEC()
{
  return sub_DBEC(v0, *(void *)(v0 + 24));
}

uint64_t sub_17BFC()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_17C18()
{
  return swift_errorRelease(v0);
}

uint64_t sub_17C20()
{
  return sub_DBEC(v0, *(void *)(v0 + 24));
}

uint64_t sub_17C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

  ;
}

  ;
}

void sub_17C60(char a1, uint64_t a2)
{
}

void sub_17C6C()
{
}

uint64_t sub_17C78()
{
  return sub_6A5C(v0 - 112, v0 - 168);
}

uint64_t sub_17C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t _s23TimerFlowDelegatePlugin07ComposeA5ModelV8durationSSSgvpfi_0()
{
  return 0LL;
}

uint64_t sub_17C9C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_17CA4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

uint64_t sub_17CC8()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_17CD0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_17CD8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_17CE8(uint64_t a1)
{
}

  ;
}

  ;
}

uint64_t sub_17D0C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

  ;
}

uint64_t sub_17D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, a2, a3, a4);
}

uint64_t sub_17D30()
{
  return v0;
}

void sub_17D3C(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + a1);
  uint64_t v4 = *v3;
  LOBYTE(v3) = *((_BYTE *)v3 + 8);
  *(void *)(v2 - 96) = v4;
  *(_BYTE *)(v2 - 88) = (_BYTE)v3;
}

uint64_t sub_17D54@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_17D5C()
{
  *(void *)(v4 - 144) = v3;
  *(void *)(v4 - 136) = v2;
  *(void *)(v4 - 128) = v0;
  *(_BYTE *)(v4 - 120) = v1;
  return v4 - 144;
}

uint64_t sub_17D74()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_17D7C()
{
  return v0 - 184;
}

uint64_t sub_17D8C(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_17DDC()
{
  return type metadata accessor for SiriTimerSnippetModel(0LL);
}

  ;
}

uint64_t sub_17DF8()
{
  *(void *)(v2 - 152) = v0;
  *(void *)(v2 - 144) = v1;
  *(void *)(v2 - 136) = 0LL;
  *(_BYTE *)(v2 - 128) = 1;
  return v2 - 152;
}

  ;
}

uint64_t sub_17E28@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_17E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_17E48()
{
  return v0;
}

  ;
}

uint64_t sub_17E70()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_17E78(uint64_t a1@<X8>)
{
  uint64_t v4 = v2 + a1;
  *(void *)uint64_t v4 = v3;
  *(_BYTE *)(v4 + 8) = v1 & 1;
}

uint64_t sub_17E8C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v1, v2, a1);
}

uint64_t sub_17EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, a2, a3);
}

uint64_t sub_17EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, a2, a3, a4);
}

void *sub_17EBC()
{
  return sub_8CFC(v0, v0[3]);
}

  ;
}

uint64_t sub_17EE8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_17EF0()
{
  return v0 - 128;
}

uint64_t sub_17F00()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 240) + 8LL))(v1, v0);
}

_OWORD *sub_17F14()
{
  *(void *)(v1 + 16) = v0;
  return sub_D368((_OWORD *)(v3 - 128), (_OWORD *)(v1 + 32 * v2 + 32));
}

uint64_t sub_17F28()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_17F3C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_17F48()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_17F50@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_17F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a1);
}

uint64_t sub_17F68()
{
  return 0LL;
}

void sub_17F84(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_17FA0(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_17FBC(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_17FD8(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_17FF4()
{
  return _s20HandleIntentStrategyVwxx_0(v0);
}

uint64_t sub_17FFC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

_OWORD *sub_18010()
{
  uint64_t v3 = (void *)(*(void *)(v0 + 56) + 32 * v1);
  _s20HandleIntentStrategyVwxx_0(v3);
  return sub_D368((_OWORD *)(v2 - 192), v3);
}

uint64_t sub_18034()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1803C(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1804C@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t sub_1805C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1806C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1807C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

uint64_t sub_1808C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 8));
}

uint64_t sub_1809C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

void sub_180AC()
{
  *(void *)(v2 - 152) = v0;
  *(void *)(v2 - 144) = v1;
  *(void *)(v2 - 136) = 0LL;
  *(_BYTE *)(v2 - 128) = 1;
}

uint64_t sub_180C4()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 136));
}

uint64_t sub_180D4()
{
  return swift_bridgeObjectRelease(0x8000000000000000LL);
}

uint64_t sub_180DC()
{
  return _s20HandleIntentStrategyVwxx_0((void *)(v0 - 112));
}

  ;
}

uint64_t sub_180F4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

Swift::Int sub_18104()
{
  return Hasher._finalize()();
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_18178()
{
  return type metadata accessor for TimerSelectorModel(0LL);
}

uint64_t sub_18194()
{
  return type metadata accessor for TimerSelectorModel(0LL);
}

uint64_t sub_1819C()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 200) + 8LL))(v0, *(void *)(v1 - 192));
}

void sub_181AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

  ;
}

uint64_t sub_181D0(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_181DC(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

unint64_t sub_181E8()
{
  return sub_15DE8();
}

uint64_t sub_181F0()
{
  return v0;
}

uint64_t sub_18204()
{
  return v0;
}

uint64_t sub_18218()
{
  return _s20HandleIntentStrategyVwxx_0(v0);
}

  ;
}

uint64_t sub_18234()
{
  return 0LL;
}

void sub_18240()
{
  *(void *)(v2 - 152) = v0;
  *(void *)(v2 - 144) = v1;
  *(void *)(v2 - 136) = 0LL;
  *(_BYTE *)(v2 - 128) = 1;
}

uint64_t sub_18254(uint64_t a1)
{
  return swift_allocObject(a1, 48LL, 7LL);
}

  ;
}

uint64_t sub_1826C()
{
  return static DeviceIdiom.== infix(_:_:)(v1, v0);
}

uint64_t sub_18278()
{
  return v0;
}

void sub_18284()
{
}

void *sub_18290(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t sub_1829C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_182A8(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_182B4()
{
  return swift_bridgeObjectRelease(*v0);
}

uint64_t sub_182C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

void sub_182CC(uint64_t a1)
{
}

uint64_t sub_182D4()
{
  return sub_67C4(v0);
}

uint64_t sub_182DC@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

uint64_t sub_182F0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FBC60);
  sub_5474(v0, (uint64_t)qword_FBC60);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_18338(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_F2C80, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

void sub_18388(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_FB108 != -1) {
    swift_once(&qword_FB108, sub_182F0);
  }
  uint64_t v10 = sub_1BD34();
  sub_5474(v10, (uint64_t)qword_FBC60);
  sub_1BD20();
  os_log_type_t v11 = sub_1BCD0();
  if (os_log_type_enabled(v2, v11))
  {
    uint64_t v12 = (uint8_t *)sub_1B9DC();
    *(_WORD *)uint64_t v12 = 0;
    sub_1BBEC(&dword_0, v2, v11, "CreateTimer.NeedsConfirmationStrategy.actionForInput() called)", v12);
    sub_1B904((uint64_t)v12);
  }

  uint64_t v13 = type metadata accessor for HALTimerDeviceContext(0LL);
  sub_1BCA0((uint64_t)v9, 1LL, v14, v13);
  uint64_t v15 = enum case for DecideAction.PromptExpectation.confirmation(_:);
  uint64_t v16 = type metadata accessor for DecideAction.PromptExpectation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(v3, v15, v16);
  sub_1BC80(v3);
  sub_396FC(a1, (uint64_t)v9, 0, v3, a2);
  sub_DABC(v3, (uint64_t *)&unk_FCC70);
  sub_DABC((uint64_t)v9, &qword_FBDB8);
  sub_1BC3C();
}

uint64_t sub_18518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = sub_67C4((uint64_t *)&unk_FCC40);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = sub_1B6C8(v5);
  uint64_t v6 = type metadata accessor for ParameterIdentifier(0LL);
  void v3[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[10] = v7;
  v3[11] = sub_1B6C8(v7);
  sub_67C4(&qword_FBDB0);
  v3[12] = sub_1B970();
  v3[13] = sub_1B970();
  uint64_t v8 = type metadata accessor for ConfirmationResponse(0LL);
  v3[14] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[15] = v9;
  v3[16] = sub_1B6C8(v9);
  uint64_t v10 = type metadata accessor for Parse(0LL);
  v3[17] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[18] = v11;
  v3[19] = sub_1B6C8(v11);
  uint64_t v12 = type metadata accessor for Parse.DirectInvocation(0LL);
  v3[20] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[21] = v13;
  v3[22] = sub_1B6C8(v13);
  sub_1B9B8();
  return sub_1B758();
}

#error "18ABC: call analysis failed (funcsize=301)"
uint64_t sub_18AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  v3[24] = a1;
  v3[25] = a3;
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  v3[26] = sub_1B6C8(*(void *)(v4 - 8));
  uint64_t v5 = sub_67C4(&qword_FBD90);
  v3[27] = sub_1B6C8(*(void *)(v5 - 8));
  sub_67C4(&qword_FBD98);
  v3[28] = sub_1B970();
  v3[29] = sub_1B970();
  v3[30] = sub_1B970();
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v3[31] = v6;
  v3[32] = *(void *)(v6 - 8);
  v3[33] = sub_1B970();
  v3[34] = sub_1B970();
  v3[35] = sub_1B970();
  v3[36] = sub_1B970();
  v3[37] = sub_1B970();
  v3[38] = sub_1B970();
  uint64_t v7 = sub_1BD34();
  v3[39] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[40] = v8;
  v3[41] = sub_1B6C8(v8);
  uint64_t v9 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[42] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[43] = v10;
  v3[44] = sub_1B6C8(v10);
  uint64_t v11 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[45] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[46] = v12;
  v3[47] = sub_1B6C8(v12);
  uint64_t v13 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v3[48] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[49] = v14;
  v3[50] = sub_1B6C8(v14);
  uint64_t v15 = type metadata accessor for NLContextUpdate(0LL);
  v3[51] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[52] = v16;
  v3[53] = sub_1B6C8(v16);
  uint64_t v17 = type metadata accessor for ParameterIdentifier(0LL);
  v3[54] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v3[55] = v18;
  v3[56] = sub_1B6C8(v18);
  uint64_t v19 = type metadata accessor for DialogPhase(0LL);
  v3[57] = v19;
  v3[58] = *(void *)(v19 - 8);
  v3[59] = sub_1B970();
  v3[60] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_18C9C()
{
  if (qword_FB108 != -1) {
    swift_once(&qword_FB108, sub_182F0);
  }
  uint64_t v2 = sub_5474(v1[39], (uint64_t)qword_FBC60);
  uint64_t v3 = (os_log_s *)sub_1BD20();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_1BCF0(v4))
  {
    uint64_t v5 = (uint8_t *)sub_1B9DC();
    *(_WORD *)uint64_t v5 = 0;
    sub_1BBEC(&dword_0, v3, v0, "CreateTimer.NeedsConfirmationStrategy.makePromptForConfirmation() called", v5);
    sub_1B904((uint64_t)v5);
  }

  uint64_t v6 = v1[55];
  uint64_t v7 = (os_log_s *)v1[56];
  uint64_t v8 = v1[54];

  static DialogPhase.confirmation.getter(v9);
  uint64_t v349 = sub_67C4((uint64_t *)&unk_FCC40);
  uint64_t v10 = ParameterResolutionRecord.parameter.getter(v349);
  uint64_t v11 = ParameterIdentifier.name.getter(v10);
  uint64_t v13 = v12;
  v1[61] = v12;
  (*(void (**)(os_log_s *, uint64_t))(v6 + 8))(v7, v8);
  sub_A9100();
  swift_bridgeObjectRetain_n(v13, 2LL);
  sub_1BD00();
  os_log_type_t v14 = sub_1BCD0();
  uint64_t v350 = v11;
  if (os_log_type_enabled(v7, v14))
  {
    uint64_t v15 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v347 = v2;
    uint64_t v16 = sub_1BA1C(32LL);
    uint64_t v351 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    sub_1BD3C();
    v1[23] = sub_683C(v11, (unint64_t)v13, &v351);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 23, v1 + 24, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease_n(v13, 3LL);
    _os_log_impl(&dword_0, v7, v14, "Parameter name: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL);
    uint64_t v17 = v16;
    uint64_t v2 = v347;
    sub_1B904(v17);
    sub_1B904((uint64_t)v15);
  }

  else
  {
    swift_bridgeObjectRelease_n(v13, 2LL);
  }

  uint64_t v19 = v1[49];
  uint64_t v18 = (void *)v1[50];
  static SiriTimeFeatureFlagsImpl.instance.getter(v20);
  Swift::Bool v21 = SiriTimeFeatureFlagsImpl.isConfirmationsResponseFrameworkEnabled()();
  uint64_t v22 = sub_1BBE4((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
  if (v21)
  {
    uint64_t v23 = (void *)static InvocationFactory.makeConfirmAndRejectActions()(v22);

    Swift::String_optional v25 = AceObject.serializeToBase64()();
    v1[62] = v25.value._object;
    if (v25.value._object)
    {
      uint64_t v27 = (void *)static InvocationFactory.makeConfirmAndRejectActions()(v26);
      uint64_t v29 = v28;

      Swift::String_optional v30 = AceObject.serializeToBase64()();
      v1[63] = v30.value._object;
      if (v30.value._object)
      {
        uint64_t v31 = v1[44];
        uint64_t v32 = (void *)v2;
        uint64_t v33 = v1[41];
        uint64_t v35 = v1[39];
        uint64_t v34 = v1[40];
        (*(void (**)(uint64_t, void, void))(v1[43] + 104LL))( v31,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v1[42]);
        (*(void (**)(uint64_t, void *, uint64_t))(v34 + 16))(v33, v32, v35);
        uint64_t v36 = mach_absolute_time();
        SiriTimeMeasurement.init(_:log:startTime:)(v31, v33, v36);
        sub_1BD3C();
        v352._countAndFlagsBits = v350;
        v352._object = v13;
        char v37 = sub_18338(v352);
        if (v37 == 2)
        {
          sub_1BC04();
          swift_bridgeObjectRelease(v25.value._object);
          uint64_t v38 = swift_bridgeObjectRelease(v30.value._object);
          uint64_t v39 = v32;
          Logger.logObject.getter(v38);
          os_log_type_t v40 = sub_1BCD0();
          if (sub_1BB80(v40))
          {
            uint64_t v41 = (_WORD *)sub_1B9DC();
            *uint64_t v41 = 0;
            sub_1BAA8(&dword_0, v42, v43, "Parameter name or type is not supported.");
            sub_1B904((uint64_t)v41);
          }

          uint64_t v44 = v1[60];
          uint64_t v45 = v1[58];

          static DialogPhase.error.getter(v46);
          sub_1BBE4(v44, *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8));
          sub_1BC70(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 32));
          if (qword_FB188 != -1) {
            swift_once(&qword_FB188, sub_4375C);
          }
          uint64_t v47 = (void *)swift_task_alloc(unk_FC7CC);
          v1[69] = v47;
          *uint64_t v47 = v1;
          v47[1] = sub_1988C;
          sub_1B8E8();
          __asm { BR              X1 }
        }

        if ((v37 & 1) == 0)
        {
          if (qword_FB188 != -1) {
            swift_once(&qword_FB188, sub_4375C);
          }
          uint64_t v204 = unk_FC7C4;
          sub_1BD3C();
          swift_bridgeObjectRetain(v30.value._object);
          swift_bridgeObjectRetain(v25.value._object);
          os_log_type_t v205 = (void *)swift_task_alloc(v204);
          v1[64] = v205;
          *os_log_type_t v205 = v1;
          v205[1] = sub_1976C;
          sub_1B8E8();
          __asm { BR              X7 }
        }

        sub_1BC04();
        if (qword_FB188 != -1) {
          swift_once(&qword_FB188, sub_4375C);
        }
        uint64_t v212 = v1[25];
        uint64_t v213 = swift_task_alloc(64LL);
        v1[66] = v213;
        *(void *)(v213 + 16) = v212;
        *(Swift::String_optional *)(v213 + 24) = v30;
        *(Swift::String_optional *)(v213 + 40) = v25;
        uint64_t v214 = (void *)swift_task_alloc(dword_FC74C);
        v1[67] = v214;
        *uint64_t v214 = v1;
        v214[1] = sub_197FC;
        sub_1B8E8();
        return sub_35E44(v215, v216);
      }

      swift_bridgeObjectRelease(v25.value._object);
    }

    sub_1BC04();
    uint64_t v71 = (void *)sub_1BD00();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (sub_1BB80(v72))
    {
      uint64_t v73 = (_WORD *)sub_1B9DC();
      *uint64_t v73 = 0;
      sub_1BAA8(&dword_0, v74, v75, "Could not create direct invocation for confirm or reject actions.");
      sub_1B904((uint64_t)v73);
    }

    uint64_t v76 = sub_67C4((uint64_t *)&unk_FF830);
    uint64_t v77 = sub_10D58((unint64_t *)&qword_FCC50, (uint64_t *)&unk_FF830, (uint64_t)&unk_C4340);
    uint64_t v78 = sub_1B74C(v76, v77);
    *uint64_t v79 = 0;
    swift_willThrow(v78, v79, v80, v81, v82, v83, v84, v85);
    uint64_t v86 = v1[60];
    uint64_t v87 = v1[58];
    uint64_t v242 = v1[57];
    uint64_t v255 = v1[59];
    uint64_t v268 = v1[56];
    uint64_t v280 = v1[50];
    uint64_t v291 = v1[47];
    uint64_t v301 = v1[44];
    uint64_t v310 = v1[41];
    uint64_t v318 = v1[38];
    uint64_t v325 = v1[37];
    uint64_t v331 = v1[36];
    uint64_t v336 = v1[35];
    uint64_t v340 = v1[34];
    uint64_t v343 = v1[33];
    uint64_t v345 = v1[30];
    uint64_t v346 = v1[29];
    uint64_t v348 = v1[28];
    sub_1B9A8();
    uint64_t v89 = sub_1B9B0((unint64_t *)&qword_FBDA0, v88, (uint64_t)&unk_C4408);
    sub_1B694(v89);
    uint64_t v91 = sub_1B670( v90,  (uint64_t)"TimerFlowDelegatePlugin/CreateTimer+NeedsConfirmationStrategy.swift, makePromptForConfirmation(item ToConfirm:resolveRecord:)");
    swift_willThrow(v91, v92, v93, v94, v95, v96, v97, v98);
    swift_errorRelease(v78);
    sub_1B6D8();
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v242);
    uint64_t v99 = sub_1B838();
    uint64_t v107 = sub_1B8C4(v99, v100, v101, v102, v103, v104, v105, v106, v229, v242, v255);
    sub_1B8BC(v107, v108, v109, v110, v111, v112, v113, v114, v230, v243, v256, v268);
    uint64_t v115 = sub_1B86C();
    uint64_t v123 = sub_1B8B4(v115, v116, v117, v118, v119, v120, v121, v122, v231, v244, v257, v269, v280);
    uint64_t v131 = sub_1B864(v123, v124, v125, v126, v127, v128, v129, v130, v232, v245, v258, v270, v281, v291);
    uint64_t v139 = sub_1B874(v131, v132, v133, v134, v135, v136, v137, v138, v233, v246, v259, v271, v282, v292, v301);
    uint64_t v147 = sub_1B8AC(v139, v140, v141, v142, v143, v144, v145, v146, v234, v247, v260, v272, v283, v293, v302, v310);
    uint64_t v155 = sub_1B8A4( v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v235,  v248,  v261,  v273,  v284,  v294,  v303,  v311,  v318);
    uint64_t v163 = sub_1B958( v155,  v156,  v157,  v158,  v159,  v160,  v161,  v162,  v236,  v249,  v262,  v274,  v285,  v295,  v304,  v312,  v319,  v325);
    uint64_t v171 = sub_1B950( v163,  v164,  v165,  v166,  v167,  v168,  v169,  v170,  v237,  v250,  v263,  v275,  v286,  v296,  v305,  v313,  v320,  v326,  v331);
    uint64_t v179 = sub_1B9A0( v171,  v172,  v173,  v174,  v175,  v176,  v177,  v178,  v238,  v251,  v264,  v276,  v287,  v297,  v306,  v314,  v321,  v327,  v332,  v336);
    uint64_t v187 = sub_1B998( v179,  v180,  v181,  v182,  v183,  v184,  v185,  v186,  v239,  v252,  v265,  v277,  v288,  v298,  v307,  v315,  v322,  v328,  v333,  v337,  v340);
    uint64_t v195 = sub_1B990( v187,  v188,  v189,  v190,  v191,  v192,  v193,  v194,  v240,  v253,  v266,  v278,  v289,  v299,  v308,  v316,  v323,  v329,  v334,  v338,  v341,  v343);
    sub_1B988( v195,  v196,  v197,  v198,  v199,  v200,  v201,  v202,  v241,  v254,  v267,  v279,  v290,  v300,  v309,  v317,  v324,  v330,  v335,  v339,  v342,  v344,  v345);
    swift_task_dealloc(v346);
    swift_task_dealloc(v348);
    sub_1B978();
    sub_1B980();
    sub_1B8E8();
    __asm { BR              X0 }
  }

  v353._countAndFlagsBits = v11;
  v353._object = v13;
  char v49 = sub_18338(v353);
  if (v49 == 2)
  {
    sub_1BD00();
    os_log_type_t v50 = sub_1BCD0();
    if (sub_1BB80(v50))
    {
      uint64_t v51 = (_WORD *)sub_1B9DC();
      *uint64_t v51 = 0;
      sub_1BAA8(&dword_0, v52, v53, "Parameter name is not supported.");
      sub_1B904((uint64_t)v51);
    }

    uint64_t v54 = v1[60];
    uint64_t v55 = v1[58];
    uint64_t v56 = v1[26];

    static DialogPhase.error.getter(v57);
    __int128 v58 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8);
    v1[86] = v58;
    sub_1BBE4(v54, v58);
    sub_1BC70(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 32));
    type metadata accessor for TimerBaseCATs_Async(0LL);
    static CATOption.defaultMode.getter();
    v1[87] = CATWrapper.__allocating_init(options:globals:)(v56, 0LL);
    uint64_t v59 = (void *)swift_task_alloc(dword_FC4BC);
    v1[88] = v59;
    *uint64_t v59 = v1;
    v59[1] = sub_1A2F0;
    sub_1B8E8();
    return sub_2FC80();
  }

  if ((v49 & 1) != 0)
  {
    if (qword_FB180 != -1) {
      swift_once(&qword_FB180, sub_43740);
    }
    uint64_t v68 = (void *)ParameterResolutionRecord.intent.getter(v349);
    id v69 = [v68 label];

    if (v69)
    {
      INSpeakableString.toSpeakableString.getter();

      uint64_t v70 = 0LL;
    }

    else
    {
      uint64_t v70 = 1LL;
    }

    uint64_t v217 = v1[28];
    uint64_t v218 = sub_1BCD8();
    sub_1BCA0(v217, v70, v219, v218);
    char v220 = (void *)swift_task_alloc(dword_FCF2C);
    v1[80] = v220;
    *char v220 = v1;
    v220[1] = sub_19EDC;
    sub_1B8E8();
    return sub_462B8(v221, v222);
  }

  else
  {
    uint64_t v61 = (void *)ParameterResolutionRecord.intent.getter(v349);
    id v62 = [v61 type];

    uint64_t v63 = SiriTimerType.rawValue.getter(v62);
    if (v63 == SiriTimerType.rawValue.getter(2LL))
    {
      if (qword_FB180 != -1) {
        swift_once(&qword_FB180, sub_43740);
      }
      uint64_t v64 = v1[30];
      String.toSpeakableString.getter(0x6D69547065656C73LL, 0xEA00000000007265LL);
      uint64_t v65 = sub_1BCD8();
      sub_1BCA0(v64, 0LL, v66, v65);
      uint64_t v67 = (void *)swift_task_alloc(dword_FCF3C);
      v1[74] = v67;
      *uint64_t v67 = v1;
      v67[1] = sub_19A34;
LABEL_50:
      sub_1B8E8();
      return sub_464A8(v227, v228);
    }

    sub_1BC60();
    sub_1BC58();
    sub_1BAC4();
    sub_1BC50();
    uint64_t v207 = v1[15];
    uint64_t v208 = v1[16];
    sub_8CFC(v1 + 12, v207);
    char v209 = dispatch thunk of DeviceState.isAppleTV.getter(v207, v208);
    _s20HandleIntentStrategyVwxx_0(v1 + 12);
    if ((v209 & 1) == 0)
    {
      if (qword_FB180 != -1) {
        swift_once(&qword_FB180, sub_43740);
      }
      uint64_t v223 = v1[29];
      uint64_t v224 = sub_1BCD8();
      sub_1BCA0(v223, 1LL, v225, v224);
      uint64_t v226 = (void *)swift_task_alloc(dword_FCF3C);
      v1[78] = v226;
      *uint64_t v226 = v1;
      v226[1] = sub_19D48;
      goto LABEL_50;
    }

    if (qword_FB180 != -1) {
      swift_once(&qword_FB180, sub_43740);
    }
    uint64_t v210 = (void *)swift_task_alloc(dword_FCF34);
    v1[76] = v210;
    *uint64_t v210 = v1;
    v210[1] = sub_19BC4;
    sub_1B8E8();
    return sub_46438(v211);
  }

uint64_t sub_1976C()
{
  v2[65] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = v2[62];
  swift_bridgeObjectRelease(v2[61]);
  sub_1BC04();
  swift_bridgeObjectRelease(v5);
  if (v1)
  {
    sub_1B9B8();
    return sub_1BB0C();
  }

  else
  {
    v2[71] = v0;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[72] = v7;
    sub_1BB40(v7);
    return sub_1BB20();
  }

uint64_t sub_197FC()
{
  v2[68] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = v2[62];
  swift_bridgeObjectRelease(v2[63]);
  swift_bridgeObjectRelease(v5);
  sub_1BA24();
  if (v1)
  {
    sub_1B9B8();
    return sub_1BB0C();
  }

  else
  {
    v2[71] = v0;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[72] = v7;
    sub_1BB40(v7);
    return sub_1BB20();
  }

uint64_t sub_1988C(uint64_t a1)
{
  uint64_t v11 = (void *)*v2;
  uint64_t v4 = v11;
  sub_1BC0C(&v11);
  v4[70] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_1B9B8();
    return swift_task_switch(v6, v7, v8);
  }

  else
  {
    v4[71] = a1;
    uint64_t v10 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v4[72] = v10;
    *uint64_t v10 = v2;
    v10[1] = sub_19940;
    return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v4[24],  v4[60],  v4[53],  v4[47],  0LL);
  }

uint64_t sub_19940()
{
  *(void *)(v1 + 584) = v0;
  swift_task_dealloc(v2);
  sub_1B9B8();
  return sub_1B758();
}

#error "19A04: call analysis failed (funcsize=42)"
uint64_t sub_19A34()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  sub_1BBCC();
  sub_1BC0C(v2);
  *(void *)(v0 + 600) = v1;
  swift_task_dealloc(v3);
  sub_DABC(*(void *)(v0 + 240), &qword_FBD98);
  sub_1B9B8();
  return sub_1B934();
}

#error "19AE4: call analysis failed (funcsize=74)"
uint64_t sub_19BC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_1BBF4();
  sub_1BD64();
  *(void *)(v1 + 616) = v0;
  swift_task_dealloc(v2);
  sub_1B9B8();
  return sub_1B758();
}

#error "19C68: call analysis failed (funcsize=75)"
uint64_t sub_19D48()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  sub_1BBCC();
  sub_1BC0C(v2);
  *(void *)(v0 + 632) = v1;
  swift_task_dealloc(v3);
  sub_DABC(*(void *)(v0 + 232), &qword_FBD98);
  sub_1B9B8();
  return sub_1B934();
}

#error "19DFC: call analysis failed (funcsize=75)"
uint64_t sub_19EDC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  sub_1BBCC();
  sub_1BC0C(v2);
  *(void *)(v0 + 648) = v1;
  swift_task_dealloc(v3);
  sub_DABC(*(void *)(v0 + 224), &qword_FBD98);
  sub_1B9B8();
  return sub_1B934();
}

#error "19F90: call analysis failed (funcsize=75)"
uint64_t sub_1A070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  sub_1BBF4();
  v3[17] = v1;
  v3[18] = v2;
  v3[19] = v0;
  sub_1BD64();
  *(void *)(v4 + 664) = v0;
  swift_task_dealloc(v5);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_1A0C4()
{
  uint64_t v5 = sub_1BD08(v4, (uint64_t)&protocol witness table for AceOutput);
  sub_1BA68((uint64_t)v5, v6, v0 & 1, v7, v8, v9, v10, (uint64_t)_swiftEmptyArrayStorage, v1, v112, v124, v136, v147);
  sub_1BC04();
  sub_DABC(v1, &qword_FBDA8);
  uint64_t v11 = sub_DABC(v3, &qword_FBD90);
  sub_1BCA8(v11, v12, v13, v14, v15, v16, v17, v18, v101, v113, v125, v137, v148, v157, v165, v172);
  uint64_t v19 = sub_1BAD8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v158 + 8));
  sub_1BC90(v19, v20, v21, v22, v23, v24, v25, v26, v102, v114, v126, v138, v149, v158, v166, v173, v178, v182, v185);
  sub_1B764();
  sub_1BA8C();
  sub_1BA60();
  sub_1BAD0();
  sub_1BABC();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  uint64_t v27 = sub_1B838();
  uint64_t v35 = sub_1B8C4(v27, v28, v29, v30, v31, v32, v33, v34, v103, v115, v127);
  uint64_t v43 = sub_1B8BC(v35, v36, v37, v38, v39, v40, v41, v42, v104, v116, v128, v139);
  uint64_t v51 = sub_1B8B4(v43, v44, v45, v46, v47, v48, v49, v50, v105, v117, v129, v140, v150);
  uint64_t v59 = sub_1B864(v51, v52, v53, v54, v55, v56, v57, v58, v106, v118, v130, v141, v151, v159);
  uint64_t v67 = sub_1B874(v59, v60, v61, v62, v63, v64, v65, v66, v107, v119, v131, v142, v152, v160, v167);
  uint64_t v75 = sub_1B8AC(v67, v68, v69, v70, v71, v72, v73, v74, v108, v120, v132, v143, v153, v161, v168, v174);
  uint64_t v83 = sub_1B8A4(v75, v76, v77, v78, v79, v80, v81, v82, v109, v121, v133, v144, v154, v162, v169, v175, v179);
  uint64_t v91 = sub_1B958(v83, v84, v85, v86, v87, v88, v89, v90, v110, v122, v134, v145, v155, v163, v170, v176, v180, v183);
  sub_1B950(v91, v92, v93, v94, v95, v96, v97, v98, v111, v123, v135, v146, v156, v164, v171, v177, v181, v184, v186);
  uint64_t v99 = (uint64_t (*)(void))sub_1BB00();
  return sub_1B9F8(v99);
}

uint64_t sub_1A1B0()
{
  v3[20] = v1;
  v3[21] = v2;
  v3[22] = v0;
  sub_1BD64();
  *(void *)(v4 + 680) = v0;
  swift_task_dealloc(v5);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_1A204()
{
  uint64_t v5 = sub_1BD08(v4, (uint64_t)&protocol witness table for AceOutput);
  sub_1BA68((uint64_t)v5, v6, v0 & 1, v7, v8, v9, v10, (uint64_t)_swiftEmptyArrayStorage, v1, v112, v124, v136, v147);
  sub_1BC04();
  sub_DABC(v1, &qword_FBDA8);
  uint64_t v11 = sub_DABC(v3, &qword_FBD90);
  sub_1BCA8(v11, v12, v13, v14, v15, v16, v17, v18, v101, v113, v125, v137, v148, v157, v165, v172);
  uint64_t v19 = sub_1BAD8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v158 + 8));
  sub_1BC90(v19, v20, v21, v22, v23, v24, v25, v26, v102, v114, v126, v138, v149, v158, v166, v173, v178, v182, v185);
  sub_1B764();
  sub_1BA8C();
  sub_1BA60();
  sub_1BAD0();
  sub_1BABC();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  uint64_t v27 = sub_1B838();
  uint64_t v35 = sub_1B8C4(v27, v28, v29, v30, v31, v32, v33, v34, v103, v115, v127);
  uint64_t v43 = sub_1B8BC(v35, v36, v37, v38, v39, v40, v41, v42, v104, v116, v128, v139);
  uint64_t v51 = sub_1B8B4(v43, v44, v45, v46, v47, v48, v49, v50, v105, v117, v129, v140, v150);
  uint64_t v59 = sub_1B864(v51, v52, v53, v54, v55, v56, v57, v58, v106, v118, v130, v141, v151, v159);
  uint64_t v67 = sub_1B874(v59, v60, v61, v62, v63, v64, v65, v66, v107, v119, v131, v142, v152, v160, v167);
  uint64_t v75 = sub_1B8AC(v67, v68, v69, v70, v71, v72, v73, v74, v108, v120, v132, v143, v153, v161, v168, v174);
  uint64_t v83 = sub_1B8A4(v75, v76, v77, v78, v79, v80, v81, v82, v109, v121, v133, v144, v154, v162, v169, v175, v179);
  uint64_t v91 = sub_1B958(v83, v84, v85, v86, v87, v88, v89, v90, v110, v122, v134, v145, v155, v163, v170, v176, v180, v183);
  sub_1B950(v91, v92, v93, v94, v95, v96, v97, v98, v111, v123, v135, v146, v156, v164, v171, v177, v181, v184, v186);
  uint64_t v99 = (uint64_t (*)(void))sub_1BB00();
  return sub_1B9F8(v99);
}

uint64_t sub_1A2F0()
{
  *(void *)(v0 + 712) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_release();
  }
  sub_1B9B8();
  return sub_1B934();
}

#error "1A400: call analysis failed (funcsize=59)"
#error "1A498: call analysis failed (funcsize=45)"
#error "1A55C: call analysis failed (funcsize=45)"
#error "1A620: call analysis failed (funcsize=45)"
#error "1A6F8: call analysis failed (funcsize=50)"
#error "1A7B8: call analysis failed (funcsize=44)"
#error "1A878: call analysis failed (funcsize=44)"
#error "1A938: call analysis failed (funcsize=44)"
#error "1A9F8: call analysis failed (funcsize=44)"
#error "1AAD0: call analysis failed (funcsize=50)"
#error "1ABA8: call analysis failed (funcsize=50)"
#error "1AC70: call analysis failed (funcsize=46)"
void sub_1ACCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t TimerPromptConfirmSlotTypeParameters;
  sub_67C4(&qword_FBD98);
  sub_1BCE0();
  __chkstk_darwin(v15);
  sub_17C38();
  String.toSpeakableString.getter(a2, a3);
  sub_1BCD8();
  sub_1BA94();
  TimerPromptConfirmSlotTypeParameters = type metadata accessor for CreateTimerPromptConfirmSlotTypeParameters(0LL);
  sub_1BD44(*(int *)(TimerPromptConfirmSlotTypeParameters + 24));
  swift_bridgeObjectRetain(a5);
  SpeakableString.init(serializedValue:)(a4, a5);
  sub_1BA94();
  sub_1B4F4(v7, a1);
  swift_bridgeObjectRetain(a7);
  SpeakableString.init(serializedValue:)(a6, a7);
  sub_1BA94();
  sub_1BD44(*(int *)(TimerPromptConfirmSlotTypeParameters + 20));
  sub_1BC3C();
}

uint64_t sub_1ADA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_67C4(&qword_FBD98);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = sub_67C4((uint64_t *)&unk_FCC40);
  uint64_t v18 = (void *)ParameterResolutionRecord.intent.getter(v17);
  id v19 = [v18 label];

  if (v19)
  {
    INSpeakableString.toSpeakableString.getter();

    uint64_t v20 = type metadata accessor for SpeakableString(0LL);
    uint64_t v21 = (uint64_t)v16;
    uint64_t v22 = 0LL;
  }

  else
  {
    uint64_t v20 = type metadata accessor for SpeakableString(0LL);
    uint64_t v21 = (uint64_t)v16;
    uint64_t v22 = 1LL;
  }

  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v21, v22, 1LL, v20);
  uint64_t TimerPromptConfirmSlotLabelParameters = type metadata accessor for CreateTimerPromptConfirmSlotLabelParameters(0LL);
  sub_1B4F4((uint64_t)v16, a1 + *(int *)(TimerPromptConfirmSlotLabelParameters + 24));
  swift_bridgeObjectRetain(a4);
  SpeakableString.init(serializedValue:)(a3, a4);
  type metadata accessor for SpeakableString(0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v14, 0LL, 1LL, v20);
  sub_1B4F4((uint64_t)v14, a1);
  swift_bridgeObjectRetain(a6);
  SpeakableString.init(serializedValue:)(a5, a6);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v14, 0LL, 1LL, v20);
  return sub_1B4F4((uint64_t)v14, a1 + *(int *)(TimerPromptConfirmSlotLabelParameters + 20));
}

void sub_1AF64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1AF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_FBCA4);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1B57C;
  return sub_18518(a1, a2, a3);
}

uint64_t sub_1AFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = _s25NeedsConfirmationStrategyCMa();
  *uint64_t v8 = v4;
  v8[1] = sub_C5FC;
  return NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:)( a1,  a2,  v9,  a4);
}

uint64_t sub_1B05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_FBCAC);
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_1B0B4;
  return sub_18AEC(a1, v7, a3);
}

uint64_t sub_1B0B4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = _s25NeedsConfirmationStrategyCMa();
  *uint64_t v10 = v5;
  v10[1] = sub_1B57C;
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:)(a1, a2, a3, v11, a5);
}

uint64_t sub_1B164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = _s25NeedsConfirmationStrategyCMa();
  *uint64_t v10 = v5;
  v10[1] = sub_1B57C;
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:)( a1,  a2,  a3,  v11,  a5);
}

uint64_t sub_1B1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = _s25NeedsConfirmationStrategyCMa();
  *uint64_t v8 = v4;
  v8[1] = sub_1B57C;
  return NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t sub_1B264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = _s25NeedsConfirmationStrategyCMa();
  *uint64_t v8 = v4;
  v8[1] = sub_1B57C;
  return NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t sub_1B2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = _s25NeedsConfirmationStrategyCMa();
  *uint64_t v12 = v6;
  v12[1] = sub_1B57C;
  return NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:)( a1,  a2,  a3,  a4,  v13,  a6);
}

uint64_t sub_1B374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = _s25NeedsConfirmationStrategyCMa();
  *uint64_t v12 = v6;
  v12[1] = sub_1B57C;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, v13, a6);
}

uint64_t sub_1B408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)[1]);
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = _s25NeedsConfirmationStrategyCMa();
  *uint64_t v14 = v7;
  v14[1] = sub_1B57C;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, v15, a7);
}

unint64_t sub_1B4A8()
{
  unint64_t result = qword_FBD48[0];
  if (!qword_FBD48[0])
  {
    uint64_t v1 = _s25NeedsConfirmationStrategyCMa();
    unint64_t result = swift_getWitnessTable(&unk_C257C, v1);
    atomic_store(result, qword_FBD48);
  }

  return result;
}

uint64_t sub_1B4E4(uint64_t a1)
{
  return sub_1ADA8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1B4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FBD98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1B53C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

void sub_1B580()
{
  uint64_t v2 = v0[27];
  *(void *)(v1 - 104) = v0[28];
  *(void *)(v1 - 96) = v2;
  *(void *)(v1 - 88) = v0[26];
}

uint64_t sub_1B5F8()
{
  return swift_task_dealloc(*(void *)(v0 + 480));
}

uint64_t sub_1B654(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1B670@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return static BarbaraWalters.logAndReturnError<A>(context:_:)( 0xD00000000000007CLL,  (a2 - 32) | 0x8000000000000000LL,  a1,  v3,  v2);
}

uint64_t sub_1B694(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

uint64_t sub_1B6AC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1B6C8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_1B6D8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1B6E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, a9);
}

  ;
}

uint64_t sub_1B714(char a1)
{
  return sub_5E844(a1);
}

uint64_t sub_1B730(char a1)
{
  return sub_5E3E4(a1);
}

uint64_t sub_1B74C(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_1B758()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1B764()
{
  return swift_task_dealloc(*(void *)(v1 + 480));
}

uint64_t sub_1B7D0()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  sub_8CFC(v0 + 2, v2);
  return dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v2, v1);
}

uint64_t sub_1B838()
{
  return swift_task_dealloc(v0);
}

  ;
}

uint64_t sub_1B864( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_task_dealloc(a14);
}

uint64_t sub_1B86C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1B874( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_task_dealloc(a15);
}

uint64_t sub_1B87C()
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  sub_8CFC(v0, v2);
  return dispatch thunk of DeviceState.isHomePod.getter(v2, v3);
}

uint64_t sub_1B8A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_task_dealloc(a17);
}

uint64_t sub_1B8AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_task_dealloc(a16);
}

uint64_t sub_1B8B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_task_dealloc(a13);
}

uint64_t sub_1B8BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_task_dealloc(a12);
}

uint64_t sub_1B8C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_task_dealloc(a11);
}

uint64_t sub_1B8CC(uint64_t a1)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)( a1,  v2,  0xD000000000000018LL,  (v1 - 32) | 0x8000000000000000LL,  0LL);
}

  ;
}

uint64_t sub_1B904(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_1B910( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

  ;
}

uint64_t sub_1B934()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1B940@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 1LL;
}

uint64_t sub_1B950( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_task_dealloc(a19);
}

uint64_t sub_1B958( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_task_dealloc(a18);
}

uint64_t sub_1B960()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1B970()
{
  return swift_task_alloc(v0);
}

uint64_t sub_1B978()
{
  return swift_task_dealloc(*(void *)(v0 - 104));
}

uint64_t sub_1B980()
{
  return swift_task_dealloc(*(void *)(v0 - 96));
}

uint64_t sub_1B988( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  return swift_task_dealloc(a23);
}

uint64_t sub_1B990( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return swift_task_dealloc(a22);
}

uint64_t sub_1B998( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return swift_task_dealloc(a21);
}

uint64_t sub_1B9A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_task_dealloc(a20);
}

uint64_t sub_1B9A8()
{
  return sub_67C4(v0);
}

uint64_t sub_1B9B0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10D58(a1, v3, a3);
}

  ;
}

uint64_t sub_1B9C4()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1B9CC()
{
  return swift_task_dealloc(*(void *)(v0 - 88));
}

uint64_t sub_1B9D4()
{
  return swift_willThrow();
}

uint64_t sub_1B9DC()
{
  return swift_slowAlloc(2LL, -1LL);
}

uint64_t sub_1B9E8()
{
  return TemplatingResult.templateIdentifier.getter();
}

uint64_t sub_1B9F8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1BA14()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1BA1C(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_1BA24()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1BA2C()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1BA38()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1BA40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, a17);
}

uint64_t sub_1BA50()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1BA60()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1BA68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a12,  v13,  a3,  a13,  1LL,  1LL,  v14);
}

uint64_t sub_1BA8C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1BA94()
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v0, 0LL, 1LL, v1);
}

void sub_1BAA8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1BABC()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1BAC4()
{
  return ApplicationContext.deviceState.getter();
}

uint64_t sub_1BAD0()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1BAD8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1BAE0()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_1BB00()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1BB0C()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1BB20()
{
  return ((uint64_t (*)(void))PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:))();
}

uint64_t sub_1BB34()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1BB40(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v3 + 192);
}

uint64_t sub_1BB64()
{
  return (*(uint64_t (**)(void, void))(v0[46] + 8LL))(v0[47], v0[45]);
}

uint64_t sub_1BB74(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v2 + 256) + 32LL))( a1,  a2,  *(void *)(v2 + 248));
}

BOOL sub_1BB80(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1BB90@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_1BB98(uint64_t a1, uint64_t a2)
{
  return sub_3301C(v2, a2, v3);
}

  ;
}

uint64_t sub_1BBB4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v3, v2, v1);
}

void sub_1BBCC()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_1BBDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

uint64_t sub_1BBE4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_1BBEC(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1BBF4()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_1BC04()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_1BC0C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1BC18()
{
  return type metadata accessor for AceOutput(0LL);
}

  ;
}

uint64_t sub_1BC50()
{
  return swift_release(v0);
}

uint64_t sub_1BC58()
{
  return static ApplicationContext.shared.getter();
}

uint64_t sub_1BC60()
{
  return type metadata accessor for ApplicationContext(0LL);
}

uint64_t sub_1BC68@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1BC70@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2, v3);
}

uint64_t sub_1BC80(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 0LL, 1LL, v1);
}

uint64_t sub_1BC90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a17 + 8))(a19, a18);
}

uint64_t sub_1BCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, a2, 1LL, a4);
}

uint64_t sub_1BCA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a15 + 8))(v16, a16);
}

double sub_1BCB8()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(void *)(v0 + 88) = 0LL;
  *(_OWORD *)(v0 + 56) = 0u;
  return result;
}

uint64_t sub_1BCD0()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1BCD8()
{
  return type metadata accessor for SpeakableString(0LL);
}

  ;
}

BOOL sub_1BCF0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1BD00()
{
  return Logger.logObject.getter();
}

void *sub_1BD08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[3] = a1;
  v2[4] = a2;
  return sub_DB90(v2);
}

uint64_t sub_1BD14@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_1BD20()
{
  return Logger.logObject.getter();
}

uint64_t sub_1BD28()
{
  return type metadata accessor for CreateTimerIntent(0LL);
}

uint64_t sub_1BD34()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_1BD3C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1BD44@<X0>(uint64_t a1@<X8>)
{
  return sub_1B4F4(v2, v1 + a1);
}

void sub_1BD50()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_1BD64()
{
  *uint64_t v0 = *v1;
}

uint64_t type metadata accessor for ResetTimerCATsSimple(uint64_t a1)
{
  uint64_t result = qword_FBDC0;
  if (!qword_FBDC0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ResetTimerCATsSimple);
  }
  return result;
}

uint64_t sub_1BDA8(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100DE0);
}

uint64_t sub_1BDE4(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_1BDFC, 0LL, 0LL);
}

uint64_t sub_1BDFC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = swift_allocObject(v2, 80LL, 7LL);
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C2640;
  *(void *)(v3 + 32) = 0x6D69547465736572LL;
  *(void *)(v3 + 40) = 0xEB00000000737265LL;
  *(void *)(v3 + 72) = sub_67C4(&qword_FBE28);
  *(void *)(v3 + 48) = v1;
  uint64_t v4 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  swift_bridgeObjectRetain(v1);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1BEEC;
  return v7(0xD000000000000020LL, 0x80000000000C6DA0LL, v3);
}

uint64_t sub_1BEEC(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 40);
  uint64_t v5 = *v2;
  *(void *)(v5 + 48) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_1BF74, 0LL, 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v5 + 32));
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_1BF74()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BFA8()
{
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1C020;
  return ((uint64_t (*)(unint64_t, unint64_t, void *))v3)( 0xD000000000000020LL,  0x80000000000C6D70LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_1C020(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1C074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C0B8(a1, a2, a3);
}

uint64_t sub_1C0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1C308();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_67C4(&qword_FB530);
  __chkstk_darwin(v11);
  sub_1C308();
  uint64_t v14 = v13 - v12;
  sub_1C270(a1, v13 - v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapperSimple.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_1C2B8(a1);
  return v15;
}

uint64_t sub_1C1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1C308();
  uint64_t v8 = v7 - v6;
  sub_1C2F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v9 = CATWrapperSimple.init(useResponseMode:options:)(a1, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  return v9;
}

uint64_t sub_1C24C()
{
  uint64_t v0 = CATWrapperSimple.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_1C268()
{
  return type metadata accessor for ResetTimerCATsSimple(0LL);
}

uint64_t sub_1C270(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FB530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C2B8(uint64_t a1)
{
  uint64_t v2 = sub_67C4(&qword_FB530);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1C2F8()
{
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

  ;
}

double sub_1C318@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_D224(a1, a2), (v7 & 1) != 0))
  {
    sub_6A5C(*(void *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }

  return result;
}

uint64_t sub_1C368()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FBE30);
  sub_5474(v0, (uint64_t)qword_FBE30);
  return static SiriTimeLog.timerPlugin.getter();
}

uint64_t sub_1C3B0(void *a1, uint64_t a2, char a3)
{
  id v5 = a1;
  unint64_t v6 = swift_bridgeObjectRetain(a2);
  uint64_t v7 = (uint64_t)sub_1C638(v6, v5);
  uint64_t v8 = v7;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v22 = v7;
    }
    else {
      uint64_t v22 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    uint64_t v9 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v9 >= 2 && (a3 & 1) != 0)
  {
    if (qword_FB110 != -1) {
      swift_once(&qword_FB110, sub_1C368);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_5474(v10, (uint64_t)qword_FBE30);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      uint64_t v15 = "Found multiple matching timers and multiple quantifier was specified. Using filteredTimers for result.";
LABEL_14:
      _os_log_impl(&dword_0, v12, v13, v15, v14, 2u);
LABEL_19:
      swift_slowDealloc(v14, -1LL, -1LL);
    }
  }

  else
  {
    if (v9 != 1)
    {
      swift_bridgeObjectRelease(v8);
      if (qword_FB110 != -1) {
        swift_once(&qword_FB110, sub_1C368);
      }
      uint64_t v18 = type metadata accessor for Logger(0LL);
      uint64_t v19 = sub_5474(v18, (uint64_t)qword_FBE30);
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v12, v20))
      {
        uint64_t v8 = 0LL;
        goto LABEL_21;
      }

      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( &dword_0,  v12,  v20,  "Found multiple matching timers for disambiguation input. Re-prompting for input.",  v14,  2u);
      uint64_t v8 = 0LL;
      goto LABEL_19;
    }

    if (qword_FB110 != -1) {
      swift_once(&qword_FB110, sub_1C368);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_5474(v16, (uint64_t)qword_FBE30);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      uint64_t v15 = "Found single matching timer for disambiguation input. Using as result.";
      goto LABEL_14;
    }
  }

void *sub_1C638(unint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0LL;
      unint64_t v6 = v3 & 0xC000000000000001LL;
      uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v20 = v3 & 0xFFFFFFFFFFFFFF8LL;
      while (v6)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
LABEL_7:
        uint64_t v9 = v8;
        unint64_t v10 = v5 + 1;
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_15;
        }
        if ((SiriTimer.matches(targetTimer:ignoreRemainingTime:)(a2, 1LL) & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v11 = v6;
          uint64_t v12 = v4;
          uint64_t v13 = v3;
          uint64_t v14 = a2;
          uint64_t v15 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
          uint64_t v16 = v15;
          a2 = v14;
          uint64_t v3 = v13;
          uint64_t v4 = v12;
          unint64_t v6 = v11;
          uint64_t v7 = v20;
          uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v9);
          specialized ContiguousArray._endMutation()(v17);
        }

        else
        {
        }

        ++v5;
        if (v10 == v4) {
          goto LABEL_20;
        }
      }

      if (v5 < *(void *)(v7 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (v3 < 0) {
        uint64_t v18 = v3;
      }
      else {
        uint64_t v18 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v4) {
        goto LABEL_20;
      }
    }

    id v8 = *(id *)(v3 + 8 * v5 + 32);
    goto LABEL_7;
  }

void *sub_1C7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v5)
  {
    while (1)
    {
      uint64_t v20 = a3;
      unint64_t v6 = 0LL;
      while ((a1 & 0xC000000000000001LL) != 0)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
LABEL_7:
        id v8 = v7;
        unint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1LL)) {
          goto LABEL_23;
        }
        uint64_t v10 = sub_B7FF0(v7);
        if (v11)
        {
          uint64_t v12 = v11;
          if (v10 == a2 && v11 == a3)
          {
            uint64_t v15 = swift_bridgeObjectRelease(v11);
          }

          else
          {
            char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, a2, a3, 0LL);
            uint64_t v15 = swift_bridgeObjectRelease(v12);
            if ((v14 & 1) == 0)
            {

LABEL_18:
              a3 = v20;
              goto LABEL_19;
            }
          }

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          uint64_t v16 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
          uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v8);
          specialized ContiguousArray._endMutation()(v17);
          goto LABEL_18;
        }

LABEL_19:
        ++v6;
        if (v9 == v5) {
          goto LABEL_28;
        }
      }

      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      if (a1 < 0) {
        uint64_t v18 = a1;
      }
      else {
        uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v5) {
        goto LABEL_28;
      }
    }

    id v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_7;
  }

LABEL_28:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t static TimerResponseDisambiguationUtils.parsePromptResult<A>(input:items:intentType:)( uint64_t a1, uint64_t a2)
{
  v2[11] = a1;
  v2[12] = a2;
  uint64_t v3 = type metadata accessor for DirectInvocationUtils.Timer.UserInfoKey(0LL);
  v2[13] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[14] = v4;
  v2[15] = sub_1B6C8(v4);
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[16] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[17] = v6;
  v2[18] = sub_1B6C8(v6);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v2[19] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[20] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[21] = swift_task_alloc(v9);
  v2[22] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for USOParse(0LL);
  v2[23] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[24] = v11;
  v2[25] = sub_1B6C8(v11);
  uint64_t v12 = type metadata accessor for TimerNLv3Intent(0LL);
  v2[26] = sub_1B6C8(*(void *)(v12 - 8));
  uint64_t v13 = type metadata accessor for Parse(0LL);
  v2[27] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[28] = v14;
  v2[29] = sub_1B6C8(v14);
  uint64_t v15 = type metadata accessor for NLIntent(0LL);
  v2[30] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[31] = v16;
  v2[32] = sub_1B6C8(v16);
  return swift_task_switch(sub_1CA6C, 0LL, 0LL);
}

uint64_t sub_1CA6C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 224);
  uint64_t v2 = *(void *)(v1 + 232);
  uint64_t v4 = *(void *)(v1 + 216);
  Input.parse.getter(a1);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(void, void))(*(void *)(v1 + 224) + 96LL))( *(void *)(v1 + 232),  *(void *)(v1 + 216));
LABEL_5:
    uint64_t v6 = *(void *)(v1 + 256);
    uint64_t v7 = *(void *)(v1 + 240);
    uint64_t v8 = *(void *)(v1 + 208);
    uint64_t v9 = *(void *)(v1 + 96);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 248) + 32LL);
    v10(v6, *(void *)(v1 + 232), v7);
    v10(v8, v6, v7);
    id v11 = sub_963E0();
    char v12 = sub_968F4();
    uint64_t v13 = sub_1C3B0(v11, v9, v12 & 1);

    sub_1E6E4(v8);
LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v13);
  }

  if (v5 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_1E7C4(*(void *)(v1 + 224));
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
    goto LABEL_5;
  }

  uint64_t v15 = (uint64_t *)(v1 + 72);
  if (v5 != enum case for Parse.directInvocation(_:))
  {
    if (v5 == enum case for Parse.NLv4IntentOnly(_:))
    {
      uint64_t v41 = *(void **)(v1 + 232);
      sub_1E7C4(*(void *)(v1 + 224));
      swift_getObjectType(*v41);
      uint64_t v42 = SIRINLUUserDialogAct.firstUsoTask.getter();
      if (v42)
      {
        if (sub_1D690(v42))
        {
          uint64_t v43 = sub_67C4(&qword_FBE58);
          uint64_t v44 = (__n128 *)sub_1E854(v43);
          sub_1E7F4(v44, v45, v46, v47, v48, v49, v50, v51, (__n128)xmmword_C2690);
          uint64_t v13 = v151[0];
LABEL_53:
          sub_1E84C();
          sub_1E808();
          goto LABEL_6;
        }

        sub_1E84C();
      }

      if (SIRINLUUserDialogAct.firstUsoTask.getter())
      {
        sub_8361C();
        if (v96)
        {
          type metadata accessor for SiriTimer(0LL);
          uint64_t v97 = swift_retain();
          id v98 = sub_B5CB8(v97);
          if (qword_FB110 != -1) {
            swift_once(&qword_FB110, sub_1C368);
          }
          uint64_t v99 = sub_1BD34();
          uint64_t v100 = (os_log_s *)sub_5474(v99, (uint64_t)qword_FBE30);
          id v101 = v98;
          uint64_t v102 = v100;
          Logger.logObject.getter(v101);
          os_log_type_t v103 = sub_1BCD0();
          uint64_t v150 = v101;
          if (sub_1E810(v100))
          {
            uint64_t v148 = v100;
            os_log_type_t v144 = v103;
            uint64_t v104 = (uint8_t *)sub_1BA1C(12LL);
            uint64_t v146 = sub_1BA1C(32LL);
            v151[0] = v146;
            *(_DWORD *)uint64_t v104 = 136315138;
            id v105 = v101;
            id v106 = [v105 description];
            uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
            unint64_t v109 = v108;

            *uint64_t v15 = sub_683C(v107, v109, v151);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, v1 + 80, v104 + 4, v104 + 12);
            sub_18034();

            uint64_t v102 = v148;
            sub_1E7D8(&dword_0, v148, v144, "Converted timer from UsoEntity_common_Timer: %s", v104);
            sub_1E7D0(v146);
            sub_1B904(v146);
            sub_1B904((uint64_t)v104);
          }

          else
          {
          }

          uint64_t v113 = *(void *)(v1 + 96);
          sub_1E6A8();
          UsoEntity_common_Timer.isMultiple.getter();
          uint64_t v115 = v114;
          Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
          char v117 = static NSObject.== infix(_:_:)(v115, isa);

          uint64_t v13 = sub_1C3B0(v150, v113, v117 & 1);
          swift_release();
          goto LABEL_53;
        }

        sub_1E808();
        goto LABEL_63;
      }

      sub_1E808();
    }

    else
    {
      if (v5 != enum case for Parse.uso(_:))
      {
        if (qword_FB110 != -1) {
          swift_once(&qword_FB110, sub_1C368);
        }
        uint64_t v89 = sub_1BD34();
        sub_5474(v89, (uint64_t)qword_FBE30);
        uint64_t v90 = (os_log_s *)sub_1BD20();
        os_log_type_t v91 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = (uint8_t *)sub_1BA1C(2LL);
          *(_WORD *)uint64_t v92 = 0;
          sub_1BBEC(&dword_0, v90, v91, "Unhandled unknown case", v92);
          sub_1B904((uint64_t)v92);
        }

        uint64_t v94 = *(void *)(v1 + 224);
        uint64_t v93 = *(void *)(v1 + 232);
        uint64_t v95 = *(void *)(v1 + 216);

        (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
        goto LABEL_64;
      }

      uint64_t v53 = *(void *)(v1 + 192);
      uint64_t v52 = *(void *)(v1 + 200);
      uint64_t v54 = *(void *)(v1 + 176);
      uint64_t v55 = *(void *)(v1 + 152);
      uint64_t v56 = *(void *)(v1 + 160);
      sub_1E7C4(*(void *)(v1 + 224));
      uint64_t v57 = sub_1E824(v52, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32));
      uint64_t v58 = USOParse.userParse.getter(v57);
      uint64_t v59 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v58);
      uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t))(v56 + 8);
      uint64_t v61 = v60(v54, v55);
      if (v59)
      {
        if (sub_1D690(v59))
        {
          uint64_t v63 = *(void *)(v1 + 192);
          uint64_t v62 = *(void *)(v1 + 200);
          uint64_t v64 = sub_67C4(&qword_FBE58);
          uint64_t v65 = (__n128 *)sub_1E854(v64);
          sub_1E7F4(v65, v66, v67, v68, v69, v70, v71, v72, (__n128)xmmword_C2690);
          uint64_t v13 = v151[0];
          sub_1E83C();
          uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t))(v63 + 8);
LABEL_50:
          uint64_t v112 = v62;
LABEL_67:
          sub_1BBE4(v112, v73);
          goto LABEL_6;
        }

        uint64_t v61 = sub_1E83C();
      }

      uint64_t v118 = *(void *)(v1 + 168);
      uint64_t v119 = *(void *)(v1 + 152);
      uint64_t v120 = USOParse.userParse.getter(v61);
      uint64_t v121 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v120);
      v60(v118, v119);
      if (v121)
      {
        sub_8361C();
        if (v122)
        {
          type metadata accessor for SiriTimer(0LL);
          uint64_t v123 = swift_retain();
          id v124 = sub_B5CB8(v123);
          if (qword_FB110 != -1) {
            swift_once(&qword_FB110, sub_1C368);
          }
          uint64_t v125 = sub_1BD34();
          uint64_t v126 = (os_log_s *)sub_5474(v125, (uint64_t)qword_FBE30);
          id v127 = v124;
          uint64_t v128 = v126;
          Logger.logObject.getter(v127);
          os_log_type_t v129 = sub_1BCD0();
          if (os_log_type_enabled(v126, v129))
          {
            os_log_type_t v145 = v129;
            uint64_t v130 = (uint8_t *)sub_1BA1C(12LL);
            uint64_t v147 = sub_1BA1C(32LL);
            v151[0] = v147;
            *(_DWORD *)uint64_t v130 = 136315138;
            uint64_t v142 = (uint64_t)(v130 + 4);
            uint64_t v143 = v130;
            id v131 = v127;
            id v132 = [v131 description];
            uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
            unint64_t v135 = v134;

            *(void *)(v1 + 80) = sub_683C(v133, v135, v151);
            sub_1E844(v1 + 80, v1 + 88, v142);
            sub_18034();

            uint64_t v128 = v126;
            sub_1E7D8(&dword_0, v126, v145, "Converted timer from UsoEntity_common_Timer: %s", v143);
            sub_1E7D0(v147);
            sub_1B904(v147);
            sub_1B904((uint64_t)v143);
          }

          else
          {
          }

          uint64_t v136 = *(void *)(v1 + 192);
          uint64_t v149 = *(void *)(v1 + 200);
          uint64_t v137 = *(void *)(v1 + 96);
          sub_1E6A8();
          UsoEntity_common_Timer.isMultiple.getter();
          uint64_t v139 = v138;
          Class v140 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
          char v141 = static NSObject.== infix(_:_:)(v139, v140);

          uint64_t v13 = sub_1C3B0(v127, v137, v141 & 1);
          sub_1E83C();

          sub_1E84C();
          uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t))(v136 + 8);
          uint64_t v112 = v149;
          goto LABEL_67;
        }

        (*(void (**)(void, void))(*(void *)(v1 + 192) + 8LL))( *(void *)(v1 + 200),  *(void *)(v1 + 184));
LABEL_63:
        swift_release();
        goto LABEL_64;
      }

      (*(void (**)(void, void))(*(void *)(v1 + 192) + 8LL))( *(void *)(v1 + 200),  *(void *)(v1 + 184));
    }

LABEL_64:
    uint64_t v13 = 0LL;
    goto LABEL_6;
  }

  uint64_t v17 = *(void *)(v1 + 136);
  uint64_t v16 = *(void *)(v1 + 144);
  sub_1E7C4(*(void *)(v1 + 224));
  sub_1E824(v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32));
  if (qword_FB110 != -1) {
    swift_once(&qword_FB110, sub_1C368);
  }
  uint64_t v18 = sub_1BD34();
  sub_5474(v18, (uint64_t)qword_FBE30);
  uint64_t v19 = (os_log_s *)sub_1BD20();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)sub_1BA1C(2LL);
    *(_WORD *)uint64_t v21 = 0;
    sub_1BBEC( &dword_0,  v19,  v20,  "Received directInvocation in ResponseSimpleDisambiguationStrategy.parseDisambiguationResult",  v21);
    sub_1B904((uint64_t)v21);
  }

  uint64_t v23 = Parse.DirectInvocation.userData.getter(v22);
  if (!v23)
  {
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    goto LABEL_29;
  }

  uint64_t v24 = v23;
  uint64_t v26 = *(void *)(v1 + 112);
  uint64_t v25 = *(void *)(v1 + 120);
  uint64_t v27 = *(void *)(v1 + 104);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v26 + 104))( v25,  enum case for DirectInvocationUtils.Timer.UserInfoKey.timerId(_:),  v27);
  uint64_t v29 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v28);
  uint64_t v31 = v30;
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  sub_1C318(v29, v31, v24, (_OWORD *)(v1 + 16));
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v31);
  if (!*(void *)(v1 + 40))
  {
LABEL_29:
    uint64_t v32 = sub_DABC(v1 + 16, &qword_FCD20);
    goto LABEL_30;
  }

  uint64_t v32 = swift_dynamicCast(v1 + 48, v1 + 16, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v32 & 1) != 0)
  {
    uint64_t v34 = *(void *)(v1 + 48);
    unint64_t v33 = *(void *)(v1 + 56);
    uint64_t v35 = HIBYTE(v33) & 0xF;
    if ((v33 & 0x2000000000000000LL) == 0) {
      uint64_t v35 = v34 & 0xFFFFFFFFFFFFLL;
    }
    if (v35)
    {
      uint64_t v36 = swift_bridgeObjectRetain_n(*(void *)(v1 + 56), 2LL);
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
      os_log_type_t v38 = static os_log_type_t.info.getter();
      if (sub_1E810(v37))
      {
        uint64_t v39 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v40 = sub_1BA1C(32LL);
        v151[0] = v40;
        *(_DWORD *)uint64_t v39 = 136315138;
        swift_bridgeObjectRetain(v33);
        *(void *)(v1 + 64) = sub_683C(v34, v33, v151);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v39 + 4, v39 + 12);
        swift_bridgeObjectRelease_n(v33, 3LL);
        sub_1E7D8(&dword_0, v37, v38, "Direct invocation timer ID: %s", v39);
        sub_1E7D0(v40);
        sub_1B904(v40);
        sub_1B904((uint64_t)v39);
      }

      else
      {
        swift_bridgeObjectRelease_n(v33, 2LL);
      }

      uint64_t v110 = *(void *)(v1 + 136);
      uint64_t v62 = *(void *)(v1 + 144);
      uint64_t v111 = swift_bridgeObjectRetain(*(void *)(v1 + 96));
      uint64_t v13 = (uint64_t)sub_1C7BC(v111, v34, v33);
      uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t))(v110 + 8);
      goto LABEL_50;
    }

    uint64_t v32 = swift_bridgeObjectRelease(*(void *)(v1 + 56));
  }

LABEL_30:
  uint64_t v74 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v75 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = (uint8_t *)sub_1BA1C(2LL);
    *(_WORD *)uint64_t v76 = 0;
    sub_1BBEC(&dword_0, v74, v75, "There's no timerId in direct invocation", v76);
    sub_1B904((uint64_t)v76);
  }

  uint64_t v78 = *(void *)(v1 + 136);
  uint64_t v77 = *(void *)(v1 + 144);

  uint64_t v79 = sub_67C4((uint64_t *)&unk_FF830);
  unint64_t v80 = sub_1E324();
  uint64_t v81 = swift_allocError(v79, v80, 0LL, 0LL);
  *uint64_t v82 = 0;
  swift_willThrow(v81, v82, v83, v84, v85, v86, v87, v88);
  sub_1BBE4(v77, *(uint64_t (**)(uint64_t, uint64_t))(v78 + 8));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

    swift_once(&qword_FB1C0, sub_496E4);
    goto LABEL_25;
  }

  sub_8CFC((void *)(v1 + 40), *(void *)(v1 + 64));
  sub_4B6D8();
LABEL_28:
  sub_2B750();
  sub_4C474();
}

uint64_t sub_1D690(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SiriReferenceResolutionResolver(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_67C4(&qword_FBE68);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static UsoTask_CodegenConverter.convert(task:)(a1);
  if (!v25)
  {
    sub_DABC((uint64_t)&v24, &qword_FCD20);
    if (qword_FB110 != -1) {
      swift_once(&qword_FB110, sub_1C368);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_5474(v14, (uint64_t)qword_FBE30);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl( &dword_0,  v16,  v17,  "NLv4TranslationParse: Dialog act is not a UsoTask_noVerb_common_Timer or has no target, cannot support input",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    return 0LL;
  }

  sub_D368(&v24, v26);
  sub_6A5C((uint64_t)v26, (uint64_t)&v24);
  uint64_t v9 = type metadata accessor for UsoTask_noVerb_uso_NoEntity(0LL);
  if ((swift_dynamicCast(&v23, &v24, (char *)&type metadata for Any + 8, v9, 6LL) & 1) == 0)
  {
    _s20HandleIntentStrategyVwxx_0(v26);
    return 0LL;
  }

  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(&v24);
  uint64_t v10 = swift_release();
  if (!(void)v24)
  {
    _s20HandleIntentStrategyVwxx_0(v26);
    swift_release();
    return 0LL;
  }

  static SiriReferenceResolutionResolver.shared.getter(v10);
  uint64_t v11 = swift_retain();
  uint64_t v12 = CodeGenBase.entity.getter(v11);
  swift_release();
  SiriReferenceResolutionResolver.resolveReferenceEntity(referenceEntity:)(v12);
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v13 = type metadata accessor for RREntity(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v8, 1LL, v13) == 1)
  {
    _s20HandleIntentStrategyVwxx_0(v26);
    swift_release();
    swift_release();
    sub_DABC((uint64_t)v8, &qword_FBE68);
    return 0LL;
  }

  uint64_t v19 = type metadata accessor for SiriTimer(0LL);
  uint64_t v21 = RREntity.convertData<A>(to:)(v19, v19);
  _s20HandleIntentStrategyVwxx_0(v26);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8LL))(v8, v13);
  if (!v21) {
    return 0LL;
  }
  return v21;
}

uint64_t static TimerResponseDisambiguationUtils.determineWindowInputType(input:)@<X0>( os_log_s *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v121 = a2;
  uint64_t v3 = type metadata accessor for Input(0LL);
  uint64_t v112 = *(void *)(v3 - 8);
  uint64_t v113 = v3;
  sub_17B6C();
  __chkstk_darwin(v4);
  sub_17D14();
  uint64_t v111 = v5;
  uint64_t v6 = sub_1E818();
  uint64_t v7 = type metadata accessor for DirectInvocationUtils.Timer.UserInfoKey(v6);
  uint64_t v115 = *(void *)(v7 - 8);
  uint64_t v116 = v7;
  sub_17B6C();
  __chkstk_darwin(v8);
  sub_17D14();
  uint64_t v114 = v9;
  uint64_t v10 = sub_1E818();
  uint64_t v117 = type metadata accessor for Parse.DirectInvocation(v10);
  uint64_t v119 = *(uint8_t **)(v117 - 8);
  sub_17B6C();
  __chkstk_darwin(v11);
  sub_17D14();
  uint64_t v118 = v12;
  uint64_t v13 = sub_1E818();
  uint64_t v110 = type metadata accessor for Siri_Nlu_External_UserParse(v13);
  uint64_t v108 = *(void *)(v110 - 8);
  sub_17B6C();
  __chkstk_darwin(v14);
  sub_17D14();
  uint64_t v106 = v15;
  uint64_t v16 = sub_1E818();
  uint64_t v109 = type metadata accessor for USOParse(v16);
  uint64_t v107 = *(void *)(v109 - 8);
  sub_17B6C();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = type metadata accessor for TimerNLv3Intent(0LL);
  sub_17B6C();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)v105 - v24;
  uint64_t v26 = type metadata accessor for Parse(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  v105[1] = (char *)v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)v105 - v30;
  uint64_t v32 = type metadata accessor for NLIntent(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)v105 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Input.parse.getter(v34);
  int v37 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v31, v26);
  if (v37 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_1E7B4();
    goto LABEL_5;
  }

  if (v37 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_1E7B4();
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
LABEL_5:
    os_log_type_t v38 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v38(v36, v31, v32);
    v38(v25, v36, v32);
    uint64_t v39 = v120;
    if (qword_FB110 != -1) {
      swift_once(&qword_FB110, sub_1C368);
    }
    uint64_t v40 = sub_1BD34();
    sub_5474(v40, (uint64_t)qword_FBE30);
    uint64_t v41 = sub_1E720((uint64_t)v25, (uint64_t)v23);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v45 = sub_1BA1C(32LL);
      *(void *)&__int128 v124 = v45;
      *(_DWORD *)uint64_t v44 = 136315138;
      uint64_t v46 = sub_1E764(&qword_FBE60, (uint64_t)&unk_C5488);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v39, v46);
      uint64_t v49 = sub_1E830(v47, v48);
      uint64_t v50 = sub_1E7E0(v49);
      sub_1E844(v50, v51, (uint64_t)(v44 + 4));
      sub_18034();
      sub_1E6E4((uint64_t)v23);
      sub_1E7D8(&dword_0, v42, v43, "TimerDisambiguation.determineInputType(input:) TimerNLIntent: %s", v44);
      sub_1E7D0(v45);
      sub_1B904(v45);
      sub_1B904((uint64_t)v44);
    }

    else
    {
      sub_1E6E4((uint64_t)v23);
    }

    if (qword_FB318 != -1) {
      swift_once(&qword_FB318, sub_9707C);
    }
    uint64_t v52 = qword_101168;
    uint64_t v53 = sub_1E764((unint64_t *)&qword_FD600, (uint64_t)&unk_C54B0);
    IntentNodeTraversable.value<A>(forNode:)(v52, v39, v53);
    __asm { BR              X10 }
  }

  if (v37 != enum case for Parse.directInvocation(_:))
  {
    if (v37 == enum case for Parse.NLv4IntentOnly(_:))
    {
      sub_1E7B4();
      static ResponseDisambigUtils.windowingResponse(for:)(*(void *)v31);
      return sub_1E808();
    }

    if (v37 == enum case for Parse.uso(_:))
    {
      sub_1E7B4();
      uint64_t v83 = v107;
      uint64_t v84 = v109;
      uint64_t v85 = (*(uint64_t (**)(char *, char *, uint64_t))(v107 + 32))(v19, v31, v109);
      uint64_t v86 = v106;
      uint64_t v87 = USOParse.userParse.getter(v85);
      uint64_t v88 = Siri_Nlu_External_UserParse.userDialogActs.getter(v87);
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v86, v110);
      static ResponseDisambigUtils.windowingResponse(for:)(v88);
      swift_bridgeObjectRelease(v88);
      return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v19, v84);
    }

    if (qword_FB110 != -1) {
      swift_once(&qword_FB110, sub_1C368);
    }
    uint64_t v90 = sub_1BD34();
    sub_5474(v90, (uint64_t)qword_FBE30);
    uint64_t v92 = v111;
    uint64_t v91 = v112;
    uint64_t v93 = v113;
    uint64_t v94 = (*(uint64_t (**)(uint64_t, os_log_s *, uint64_t))(v112 + 16))(v111, a1, v113);
    uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (sub_1E810(v95))
    {
      uint64_t v97 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v98 = sub_1BA1C(32LL);
      uint64_t v120 = v98;
      *(void *)&__int128 v124 = v98;
      *(_DWORD *)uint64_t v97 = 136315138;
      uint64_t v119 = v97 + 4;
      Input.parse.getter(v98);
      uint64_t v99 = String.init<A>(describing:)();
      uint64_t v101 = sub_1E830(v99, v100);
      uint64_t v102 = sub_1E7E0(v101);
      sub_1E844(v102, v103, (uint64_t)v119);
      sub_18034();
      (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v92, v113);
      sub_1E7D8( &dword_0,  v95,  v96,  "TimerDisambiguation.determineInputType(input:) Received an unsupported parse for disambiguation window prompt: %s",  v97);
      uint64_t v104 = v120;
      sub_1E7D0(v120);
      sub_1B904(v104);
      sub_1B904((uint64_t)v97);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v92, v93);
    }

    uint64_t v89 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v31, v26);
    return static WindowingDisambiguationInputType.unsupported()(v89);
  }

  sub_1E7B4();
  uint64_t v55 = v118;
  uint64_t v54 = (uint64_t)v119;
  uint64_t v56 = v117;
  (*((void (**)(uint64_t, char *, uint64_t))v119 + 4))(v118, v31, v117);
  if (qword_FB110 != -1) {
    swift_once(&qword_FB110, sub_1C368);
  }
  uint64_t v57 = sub_1BD34();
  sub_5474(v57, (uint64_t)qword_FBE30);
  sub_1BD20();
  os_log_type_t v58 = sub_1BCD0();
  if (os_log_type_enabled(a1, v58))
  {
    uint64_t v59 = (uint8_t *)sub_1BA1C(2LL);
    *(_WORD *)uint64_t v59 = 0;
    sub_1BBEC(&dword_0, a1, v58, "TimerDisambiguation.determineInputType(input:) Received directInvocation", v59);
    sub_1B904((uint64_t)v59);
  }

  uint64_t v61 = Parse.DirectInvocation.userData.getter(v60);
  if (!v61)
  {
    __int128 v124 = 0u;
    __int128 v125 = 0u;
    goto LABEL_31;
  }

  uint64_t v62 = v61;
  uint64_t v64 = v114;
  uint64_t v63 = v115;
  uint64_t v65 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v115 + 104))( v114,  enum case for DirectInvocationUtils.Timer.UserInfoKey.timerId(_:),  v116);
  uint64_t v66 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v65);
  uint64_t v68 = v67;
  sub_1BBE4(v64, *(uint64_t (**)(uint64_t, uint64_t))(v63 + 8));
  sub_1C318(v66, v68, v62, &v124);
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v62);
  if (!*((void *)&v125 + 1))
  {
LABEL_31:
    sub_DABC((uint64_t)&v124, &qword_FCD20);
    goto LABEL_32;
  }

  if ((swift_dynamicCast(&v122, &v124, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_32:
    uint64_t v89 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v55, v56);
    return static WindowingDisambiguationInputType.unsupported()(v89);
  }

  uint64_t v70 = v122;
  unint64_t v69 = v123;
  uint64_t v71 = HIBYTE(v123) & 0xF;
  if ((v123 & 0x2000000000000000LL) == 0) {
    uint64_t v71 = v122 & 0xFFFFFFFFFFFFLL;
  }
  if (!v71)
  {
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v56);
    uint64_t v89 = swift_bridgeObjectRelease(v69);
    return static WindowingDisambiguationInputType.unsupported()(v89);
  }

  uint64_t v72 = sub_1BD3C();
  uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
  os_log_type_t v74 = static os_log_type_t.info.getter();
  if (sub_1E810(v73))
  {
    os_log_type_t v75 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v76 = sub_1BA1C(32LL);
    *(void *)&__int128 v124 = v76;
    *(_DWORD *)os_log_type_t v75 = 136315138;
    sub_1BD3C();
    uint64_t v77 = sub_683C(v70, v69, (uint64_t *)&v124);
    uint64_t v78 = sub_1E7E0(v77);
    uint64_t v55 = v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, v79, v75 + 4, v75 + 12);
    swift_bridgeObjectRelease_n(v69, 3LL);
    sub_1E7D8(&dword_0, v73, v74, "TimerDisambiguation.determineInputType(input:) Direct invocation Timer ID: %s", v75);
    sub_1E7D0(v76);
    uint64_t v80 = v76;
    uint64_t v54 = (uint64_t)v119;
    sub_1B904(v80);
    sub_1B904((uint64_t)v75);
  }

  else
  {

    uint64_t v81 = swift_bridgeObjectRelease_n(v69, 2LL);
  }

  static WindowingDisambiguationInputType.disambiguationChoice()(v81);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v55, v56);
}

unint64_t sub_1E324()
{
  unint64_t result = qword_FCC50;
  if (!qword_FCC50)
  {
    uint64_t v1 = sub_15D30((uint64_t *)&unk_FF830);
    unint64_t result = swift_getWitnessTable(&unk_C4340, v1);
    atomic_store(result, (unint64_t *)&qword_FCC50);
  }

  return result;
}

void *sub_1E368(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_1E42C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_67C4(&qword_FBE70);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_1E490(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_67C4(&qword_FBE70);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1E628(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_1E564(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_1E564(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *sub_1E628(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

unint64_t sub_1E6A8()
{
  unint64_t result = qword_FBE50;
  if (!qword_FBE50)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_FBE50);
  }

  return result;
}

uint64_t sub_1E6E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimerNLv3Intent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1E720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimerNLv3Intent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E764(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for TimerNLv3Intent(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

ValueMetadata *type metadata accessor for TimerResponseDisambiguationUtils()
{
  return &type metadata for TimerResponseDisambiguationUtils;
}

uint64_t sub_1E7B4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v1, v2);
}

uint64_t sub_1E7C4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 96))(v1);
}

uint64_t sub_1E7D0(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

void sub_1E7D8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1E7E0(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t sub_1E7F4( __n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  a1[1] = a9;
  a1[2].n128_u64[0] = v9;
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1E808()
{
  return swift_unknownObjectRelease(v0);
}

BOOL sub_1E810(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1E818()
{
  return 0LL;
}

uint64_t sub_1E824@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_1E830(uint64_t a1, unint64_t a2)
{
  return sub_683C(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t sub_1E83C()
{
  return swift_release(v0);
}

uint64_t sub_1E844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_1E84C()
{
  return swift_release(v0);
}

uint64_t sub_1E854(uint64_t a1)
{
  return swift_allocObject(a1, 40LL, 7LL);
}

uint64_t type metadata accessor for ResetTimerCATs_Async(uint64_t a1)
{
  uint64_t result = qword_FBE78;
  if (!qword_FBE78) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ResetTimerCATs_Async);
  }
  return result;
}

uint64_t sub_1E898(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100DF0);
}

uint64_t sub_1E8D4(uint64_t a1)
{
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1E95C;
  return ((uint64_t (*)(uint64_t, unint64_t, unint64_t, void *))v5)( a1,  0xD00000000000001FLL,  0x80000000000C7140LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_1E95C()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return sub_1ECD4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1E99C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  return swift_task_switch(sub_1E9B8, 0LL, 0LL);
}

uint64_t sub_1E9B8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = swift_allocObject(v2, 80LL, 7LL);
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C2640;
  strcpy((char *)(v3 + 32), "speakableTimer");
  *(_BYTE *)(v3 + 47) = -18;
  uint64_t v4 = 0LL;
  if (v1)
  {
    uint64_t v4 = type metadata accessor for TimerTimer(0LL);
  }

  else
  {
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 72) = v4;
  uint64_t v5 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:) + 1);
  swift_retain();
  unint64_t v6 = (void *)swift_task_alloc(v5);
  v0[6] = v6;
  void *v6 = v0;
  v6[1] = sub_1EAC0;
  return ((uint64_t (*)(void, unint64_t, unint64_t, uint64_t))v8)( v0[2],  0xD00000000000001DLL,  0x80000000000C7120LL,  v3);
}

uint64_t sub_1EAC0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch(sub_1EB34, 0LL, 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v2 + 40));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1EB34()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1EB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1EBB0(a1, a2, a3);
}

uint64_t sub_1EBB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_67C4(&qword_FB530);
  __chkstk_darwin(v10);
  size_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1C270(a1, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_1C2B8(a1);
  return v13;
}

uint64_t sub_1ECB0()
{
  uint64_t v0 = CATWrapper.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_1ECCC()
{
  return type metadata accessor for ResetTimerCATs_Async(0LL);
}

uint64_t sub_1ECD4(uint64_t (*a1)(void))
{
  return a1();
}

void *_s20HandleIntentStrategyVwca(void *a1, void *a2)
{
  return a1;
}

void *sub_1ED04(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

uint64_t _s20HandleIntentStrategyVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t _s20HandleIntentStrategyVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t _s20HandleIntentStrategyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s20HandleIntentStrategyVMa()
{
  return &_s20HandleIntentStrategyVN;
}

uint64_t sub_1EF3C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FBED8);
  sub_5474(v0, (uint64_t)qword_FBED8);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_1EF84(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_67C4(&qword_FBDB8);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_1EFD4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for HALTimerDeviceContext(0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v1, 1LL, 1LL, v2);
  sub_6EB5C();
  uint64_t v4 = v3;
  sub_205D4(v1);
  sub_1BABC();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_1F04C(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  _BYTE v2[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[11] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[12] = v8;
  v2[13] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[14] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[15] = v10;
  v2[16] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DialogPhase(0LL);
  v2[17] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[18] = v12;
  v2[19] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for NLContextUpdate(0LL);
  v2[20] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[21] = v14;
  v2[22] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1F174, 0LL, 0LL);
}

uint64_t sub_1F174()
{
  if (qword_FB118 != -1) {
    swift_once(&qword_FB118, sub_1EF3C);
  }
  uint64_t v1 = sub_5474(*(void *)(v0 + 40), (uint64_t)qword_FBED8);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    *(_WORD *)sub_1B9DC() = 0;
    sub_20800(&dword_0, v2, v3, "DeleteTimer.HandleIntentStrategy.makeIntentHandledResponse() called");
    sub_207A4();
  }

  uint64_t v4 = sub_67C4(&qword_FBF50);
  uint64_t v5 = (void *)IntentResolutionRecord.intentResponse.getter(v4);
  uint64_t v6 = sub_20570(v5);
  if (!v6)
  {
    uint64_t v15 = sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v16 = sub_1E324();
    uint64_t v17 = swift_allocError(v15, v16, 0LL, 0LL);
    *uint64_t v18 = 0;
    swift_willThrow(v17, v18, v19, v20, v21, v22, v23, v24);
    sub_20680();
    sub_1B86C();
    sub_1BA24();
    sub_1BA14();
    sub_1BA38();
    sub_1B838();
    return sub_206D8(*(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v7 = v6;
  uint64_t v8 = NLContextUpdate.init()();
  static DialogPhase.completion.getter(v8);
  uint64_t v9 = sub_17C9C();
  uint64_t v10 = (uint64_t)sub_303F8(v9, v7);
  *(void *)(v0 + 184) = v10;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 >= 0) {
      uint64_t v26 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v26 = v7;
    }
    sub_17C9C();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    sub_18034();
    if (v27 == 1)
    {
      sub_17C9C();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v26);
      sub_18034();
      if (v28) {
        goto LABEL_8;
      }
    }
  }

  else if (*(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8LL)) == 1LL)
  {
LABEL_8:
    sub_8EEB4(0LL, (v7 & 0xC000000000000001LL) == 0, v7);
    if ((v7 & 0xC000000000000001LL) != 0) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v7);
    }
    else {
      id v11 = *(id *)(v7 + 32);
    }
    uint64_t v12 = v11;
    sub_18034();
    if (sub_11274())
    {
      uint64_t v14 = *(void *)(v0 + 120);
      uint64_t v13 = *(void *)(v0 + 128);
      SiriTimerState.rawValue.getter([v12 state]);
      SiriTimerState.rawValue.getter(2LL);
      sub_113F8();
      NLContextUpdate.set(undoDirectInvocation:)(v13);

      swift_release();
      sub_2080C(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
    }

    else
    {
    }

    goto LABEL_20;
  }

  sub_18034();
LABEL_20:
  uint64_t v29 = *(void *)(v0 + 80);
  uint64_t v30 = *(void *)(v0 + 56);
  uint64_t v31 = *(void *)(v0 + 40);
  uint64_t v32 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 72) + 104LL))( v29,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  *(void *)(v0 + 64));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v30, v1, v31);
  uint64_t v33 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v29, v30, v33);
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0) {
      uint64_t v37 = v10;
    }
    else {
      uint64_t v37 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v10);
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease(v10);
  }

  else
  {
    uint64_t v34 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v34 == 1)
  {
    if (qword_FB3C8 != -1) {
      swift_once(&qword_FB3C8, sub_B39AC);
    }
    uint64_t v35 = (void *)swift_task_alloc(dword_FE3E4);
    *(void *)(v0 + 192) = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_1F564;
    return sub_66190(v10);
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    if (qword_FB3C8 != -1) {
      swift_once(&qword_FB3C8, sub_B39AC);
    }
    uint64_t v36 = (void *)swift_task_alloc(dword_FE3DC);
    *(void *)(v0 + 208) = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_1F5F4;
    return sub_66130();
  }

uint64_t sub_1F564()
{
  v2[25] = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(v2[23]);
  if (v1)
  {
    sub_1B9B8();
    return sub_20670();
  }

  else
  {
    v2[28] = v0;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[29] = v7;
    *uint64_t v7 = v3;
    v7[1] = sub_1F67C;
    sub_20738();
    return sub_20660();
  }

uint64_t sub_1F5F4()
{
  v2[27] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_1B9B8();
    return sub_20670();
  }

  else
  {
    v2[28] = v0;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[29] = v7;
    *uint64_t v7 = v3;
    v7[1] = sub_1F67C;
    sub_20738();
    return sub_20660();
  }

uint64_t sub_1F67C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 24Hasher.init(_seed:)(v3, 0LL) = v0;
  swift_task_dealloc(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_1F6D4()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v30 = *(void *)(v0 + 128);
  uint64_t v33 = *(void *)(v0 + 80);
  uint64_t v35 = *(void *)(v0 + 56);

  sub_2080C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1BBE4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1BABC();
  uint64_t v5 = sub_1BA24();
  sub_1BBDC(v5, v6, v7, v8, v9, v10, v11, v12, v30);
  uint64_t v13 = sub_1B838();
  uint64_t v21 = sub_1B910(v13, v14, v15, v16, v17, v18, v19, v20, v31, v33);
  sub_1B8C4(v21, v22, v23, v24, v25, v26, v27, v28, v32, v34, v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1F780()
{
  return sub_20748(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1F7DC()
{
  return sub_20748(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1F838()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_1BBE4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_20680();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  sub_1B838();
  return sub_206D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1F8C4()
{
  if (!v0) {
    return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_1F900()
{
  uint64_t v2 = sub_67C4(&qword_FBF48);
  sub_207C0(101LL, 0x80000000000C71D0LL, v3, v2, (uint64_t)&protocol self-conformance witness table for Error);
  sub_207B4();
  swift_errorRelease(v0);
  return sub_2075C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1F968(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v2[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  _BYTE v2[8] = v6;
  v2[9] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[11] = v8;
  v2[12] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CATOption(0LL);
  v2[13] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v2[14] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[15] = v11;
  v2[16] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DialogPhase(0LL);
  v2[17] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[18] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[19] = swift_task_alloc(v14);
  v2[20] = swift_task_alloc(v14);
  return swift_task_switch(sub_1FA98, 0LL, 0LL);
}

uint64_t sub_1FA98()
{
  if (qword_FB118 != -1) {
    swift_once(&qword_FB118, sub_1EF3C);
  }
  uint64_t v29 = sub_5474(v0[4], (uint64_t)qword_FBED8);
  uint64_t v1 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    *(_WORD *)sub_1B9DC() = 0;
    sub_20800(&dword_0, v1, v2, "DeleteTimer.HandleIntentStrategy.makeFailureHandlingIntentResponse() called");
    sub_207A4();
  }

  uint64_t v3 = v0[13];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[5];
  uint64_t v28 = v0[4];

  uint64_t v10 = static DialogPhase.completion.getter(v9);
  NLContextUpdate.init()(v10);
  type metadata accessor for TimerBaseCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  v0[21] = CATWrapper.__allocating_init(options:globals:)(v3, 0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v5,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v29, v28);
  uint64_t v11 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v5, v6, v11);
  uint64_t v12 = sub_67C4(&qword_FBF50);
  uint64_t v13 = (void *)IntentResolutionRecord.intentResponse.getter(v12);
  uint64_t v14 = dispatch thunk of DeleteTimerIntentResponse.code.getter();

  if (v14 == 100)
  {
    uint64_t v22 = (void *)swift_task_alloc(dword_100574);
    v0[25] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_1FDCC;
    sub_20788();
    return sub_ACD60();
  }

  else if (v14 == 101)
  {
    uint64_t v16 = v0[3];
    uint64_t v17 = swift_task_alloc(32LL);
    v0[22] = v17;
    *(void *)(v17 + 16) = v16;
    uint64_t v18 = (void *)swift_task_alloc(dword_10056C);
    v0[23] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_1FD1C;
    sub_20788();
    return sub_ACBBC(v19, v20);
  }

  else
  {
    uint64_t v24 = v0[19];
    uint64_t v23 = v0[20];
    uint64_t v25 = v0[17];
    uint64_t v26 = v0[18];
    static DialogPhase.error.getter(v15);
    sub_1BBE4(v23, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v23, v24, v25);
    uint64_t v27 = (void *)swift_task_alloc(dword_100564);
    v0[27] = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_1FE54;
    sub_20788();
    return sub_AC948();
  }

uint64_t sub_1FD1C(uint64_t a1)
{
  uint64_t v16 = (void *)*v2;
  uint64_t v4 = v16;
  sub_1BC0C(&v16);
  v4[24] = v1;
  swift_task_dealloc(v5);
  sub_1BA24();
  if (v1)
  {
    sub_1B9B8();
    return swift_task_switch(v6, v7, v8);
  }

  else
  {
    v4[29] = a1;
    uint64_t v10 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v4[30] = v10;
    *uint64_t v10 = v2;
    v10[1] = sub_1FEDC;
    sub_20738();
    return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v11,  v12,  v13,  v14,  v15);
  }

uint64_t sub_1FDCC()
{
  v2[26] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_1B9B8();
    return sub_20670();
  }

  else
  {
    v2[29] = v0;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[30] = v7;
    *uint64_t v7 = v3;
    v7[1] = sub_1FEDC;
    sub_20738();
    return sub_20660();
  }

uint64_t sub_1FE54()
{
  v2[28] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_1B9B8();
    return sub_20670();
  }

  else
  {
    v2[29] = v0;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[30] = v7;
    *uint64_t v7 = v3;
    v7[1] = sub_1FEDC;
    sub_20738();
    return sub_20660();
  }

uint64_t sub_1FEDC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240LL);
  *(void *)(*(void *)v1 + 248LL) = v0;
  swift_task_dealloc(v2);
  sub_1B9B8();
  return sub_1B758();
}

#error "1FFB8: call analysis failed (funcsize=45)"
#error "20018: call analysis failed (funcsize=21)"
#error "2006C: call analysis failed (funcsize=21)"
#error "200C0: call analysis failed (funcsize=21)"
#error "2011C: call analysis failed (funcsize=23)"
void sub_20140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  void *v5;
  uint64_t v2 = sub_67C4(&qword_FBF50);
  uint64_t v5 = (void *)IntentResolutionRecord.intent.getter(v2);
  uint64_t v3 = type metadata accessor for DeleteTimerIntent(0LL);
  uint64_t v4 = IntentTargetable.knownHomePodCount.getter(v3, &protocol witness table for DeleteTimerIntent);

  *(double *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t sub_201B8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FBF44);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = sub_207EC(v1);
  return sub_1F968(v2, v3);
}

uint64_t sub_2020C()
{
  if (!v0) {
    return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_20248()
{
  uint64_t v2 = sub_67C4(&qword_FBF48);
  sub_207C0(109LL, 0x80000000000C7160LL, v3, v2, (uint64_t)&protocol self-conformance witness table for Error);
  sub_207B4();
  swift_errorRelease(v0);
  return sub_2075C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_202B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10E90;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_20330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10E90;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_203AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10E90;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_20428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10E90;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_204A4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FBF3C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_20504;
  return sub_201B8();
}

uint64_t sub_20504()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_2052C()
{
  unint64_t result = qword_FBEF8[0];
  if (!qword_FBEF8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_C2728, &_s20HandleIntentStrategyVN);
    atomic_store(result, qword_FBEF8);
  }

  return result;
}

void sub_20568(uint64_t a1)
{
}

uint64_t sub_20570(void *a1)
{
  id v2 = [a1 deletedTimers];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = type metadata accessor for SiriTimer(0LL);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_205D4(uint64_t a1)
{
  uint64_t v2 = sub_67C4(&qword_FBDB8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_20614(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_20630()
{
  return swift_release(*(void *)(v0 + 168));
}

uint64_t sub_20660()
{
  return ((uint64_t (*)(void))PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:))();
}

uint64_t sub_20670()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_20680()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

  ;
}

uint64_t sub_206B8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_206C8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_206D8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_206F4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void sub_20704()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_20718()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 40) = v0;
  return swift_task_dealloc(v5);
}

  ;
}

uint64_t sub_20748(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_2075C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_2076C()
{
  return (*(uint64_t (**)(void, void))(v0[12] + 8LL))(v0[13], v0[11]);
}

  ;
}

uint64_t sub_207A4()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t sub_207B4()
{
  return swift_willThrow();
}

uint64_t sub_207C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static BarbaraWalters.logAndReturnError<A>(context:_:)( a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL,  a2,  v5,  a4,  a5);
}

void sub_207CC()
{
  *(void *)(v0 + 24) = *(void *)(v0 + 40);
}

uint64_t sub_207E0()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_207EC(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_20800(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_2080C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_20818( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v53 = v25;
  uint64_t v52 = v26;
  int v51 = v27;
  uint64_t v28 = sub_21530();
  sub_214E4();
  __chkstk_darwin(v29);
  sub_214B4();
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)v50 - v31;
  uint64_t v33 = sub_21528();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  sub_2150C();
  uint64_t v35 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v34 + 104))( v20,  enum case for DirectInvocationUtils.Timer.URI.disambiguation(_:),  v33);
  uint64_t v36 = DirectInvocationUtils.Timer.URI.rawValue.getter(v35);
  uint64_t v38 = v37;
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v20, v33);
  v50[1] = sub_20AD4(v36, v38);
  uint64_t v39 = sub_67C4(&qword_FBF80);
  uint64_t inited = swift_initStackObject(v39, &v56);
  *(_OWORD *)(inited + 16) = xmmword_C27E0;
  uint64_t v41 = sub_215C8((uint64_t)v32, enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:));
  uint64_t v42 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v41);
  uint64_t v44 = v43;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v22 + 8);
  v45(v32, v28);
  uint64_t v54 = v42;
  uint64_t v55 = v44;
  sub_21594();
  uint64_t v46 = sub_7010(v51);
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v46;
  *(void *)(inited + 80) = v47;
  sub_215C8(v21, enum case for DirectInvocationUtils.Timer.UserInfoKey.timerId(_:));
  sub_21618();
  sub_21690();
  v45((char *)v21, v28);
  uint64_t v54 = v42;
  uint64_t v55 = v22;
  sub_21594();
  *(void *)(inited + 168) = &type metadata for String;
  uint64_t v48 = v53;
  *(void *)(inited + 144) = v52;
  *(void *)(inited + 152) = v48;
  swift_bridgeObjectRetain(v48);
  uint64_t v49 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable);
  sub_21678(v49, (uint64_t)&a12);
  sub_17E58();
}

id sub_20A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  uint64_t v10 = sub_21620();
  static ApplicationContext.shared.getter(v10);
  ApplicationContext.deviceState.getter(var48);
  sub_1BC50();
  uint64_t v11 = (void *)sub_2155C(var48);
  id v12 = sub_215E8((uint64_t)v11, "runSiriKitExecutorCommandWithContext:payload:");

  uint64_t v13 = _s20HandleIntentStrategyVwxx_0(var48);
  id v14 = sub_21648(v13, "wrapCommandInStartLocalRequest:");

  return v14;
}

id sub_20AD4(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithIdentifier:v5];

  return v6;
}

void sub_20B44()
{
  char v22 = v3;
  uint64_t v4 = sub_21530();
  __chkstk_darwin(v4);
  sub_21608();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  sub_214D0();
  sub_21664();
  __chkstk_darwin(v9);
  sub_214F4();
  uint64_t v10 = sub_215A8( enum case for DirectInvocationUtils.Timer.URI.disambiguation(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
  uint64_t v11 = DirectInvocationUtils.Timer.URI.rawValue.getter(v10);
  sub_21580(v11, v12);
  uint64_t v13 = sub_67C4(&qword_FBF70);
  uint64_t inited = swift_initStackObject(v13, &v23);
  *(_OWORD *)(inited + 16) = xmmword_C27E0;
  sub_215E0(v2, enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:));
  sub_215D8();
  sub_21684();
  sub_215D0(v2);
  *(void *)(inited + 32) = v0;
  *(void *)(inited + 40) = v1;
  uint64_t v15 = sub_7010(v22);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v15;
  *(void *)(inited + 56) = v16;
  uint64_t v17 = sub_215E0(v7, enum case for DirectInvocationUtils.Timer.UserInfoKey.timerId(_:));
  uint64_t v18 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v17);
  uint64_t v20 = v19;
  sub_215D0(v7);
  *(void *)(inited + 80) = v18;
  *(void *)(inited + 88) = v20;
  sub_215B4();
  uint64_t v21 = sub_21550();
  sub_215F8(v21);
  sub_17E58();
}

void sub_20CA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  int v61 = v25;
  int v60 = v26;
  uint64_t v27 = sub_21530();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  sub_214B4();
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v59 - v30;
  uint64_t v32 = sub_21528();
  sub_214E4();
  __chkstk_darwin(v33);
  sub_2150C();
  uint64_t v34 = sub_215A8( enum case for DirectInvocationUtils.Timer.URI.buttonPress(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 104));
  uint64_t v35 = DirectInvocationUtils.Timer.URI.rawValue.getter(v34);
  uint64_t v37 = v36;
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v32);
  id v59 = sub_20AD4(v35, v37);
  uint64_t v38 = sub_67C4(&qword_FBF80);
  uint64_t inited = swift_initStackObject(v38, &v64);
  *(_OWORD *)(inited + 16) = xmmword_C27E0;
  uint64_t v40 = *(void **)(v28 + 104);
  uint64_t v41 = sub_215C8((uint64_t)v31, enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:));
  uint64_t v42 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v41);
  uint64_t v44 = v43;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v28 + 8);
  v45(v31, v27);
  uint64_t v62 = v42;
  uint64_t v63 = v44;
  sub_2162C((uint64_t)&v62);
  uint64_t v46 = sub_7010(v60);
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v46;
  *(void *)(inited + 80) = v47;
  sub_215C8(v21, enum case for DirectInvocationUtils.Timer.UserInfoKey.buttonPressed(_:));
  uint64_t v48 = sub_21618();
  uint64_t v50 = v49;
  v45((char *)v21, v27);
  uint64_t v62 = v48;
  uint64_t v63 = v50;
  sub_2162C((uint64_t)&v62);
  BOOL v51 = (v61 & 1) == 0;
  uint64_t v52 = 7562617LL;
  if ((v61 & 1) != 0) {
    uint64_t v52 = 0x6C65636E6163LL;
  }
  unint64_t v53 = 0xE600000000000000LL;
  *(void *)(inited + 168) = &type metadata for String;
  if (v51) {
    unint64_t v53 = 0xE300000000000000LL;
  }
  *(void *)(inited + 144) = v52;
  *(void *)(inited + 152) = v53;
  uint64_t v54 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable);
  sub_21678(v54, (uint64_t)&a11);
  objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  uint64_t v55 = sub_21620();
  static ApplicationContext.shared.getter(v55);
  ApplicationContext.deviceState.getter(&v62);
  sub_1BC50();
  uint64_t v56 = (void *)sub_2155C(&v62);
  id v57 = sub_215E8((uint64_t)v56, "runSiriKitExecutorCommandWithContext:payload:");

  uint64_t v58 = _s20HandleIntentStrategyVwxx_0(&v62);
  sub_21648(v58, "wrapCommandInStartLocalRequest:");

  sub_17E58();
}

void sub_20F54()
{
}

void sub_20F64()
{
}

void sub_20F74()
{
  uint64_t v18 = v4;
  sub_21530();
  sub_214E4();
  __chkstk_darwin(v5);
  sub_21608();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  sub_214D0();
  sub_21664();
  __chkstk_darwin(v10);
  sub_214F4();
  uint64_t v11 = sub_215A8( enum case for DirectInvocationUtils.Timer.URI.undo(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
  uint64_t v12 = DirectInvocationUtils.Timer.URI.rawValue.getter(v11);
  sub_21580(v12, v13);
  uint64_t v14 = sub_67C4(&qword_FBF70);
  uint64_t inited = swift_initStackObject(v14, &v19);
  *(_OWORD *)(inited + 16) = xmmword_C27E0;
  sub_215E0(v3, enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:));
  sub_215D8();
  sub_21684();
  sub_215D0(v3);
  *(void *)(inited + 32) = v0;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v18;
  *(void *)(inited + 56) = 0xE600000000000000LL;
  uint64_t v16 = sub_215E0(v8, enum case for DirectInvocationUtils.Timer.UserInfoKey.timerId(_:));
  DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v16);
  sub_21690();
  sub_215D0(v8);
  *(void *)(inited + 80) = v8;
  *(void *)(inited + 88) = v2;
  sub_215B4();
  uint64_t v17 = sub_21550();
  sub_215F8(v17);
  sub_17E58();
}

uint64_t sub_210C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v29 = a1;
  uint64_t v30 = a3;
  uint64_t v9 = sub_21530();
  __chkstk_darwin(v9);
  sub_214B4();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = sub_21528();
  sub_214E4();
  __chkstk_darwin(v17);
  sub_214F4();
  uint64_t v18 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v6 + 104))( v4,  enum case for DirectInvocationUtils.Timer.URI.undo(_:),  v16);
  uint64_t v28 = DirectInvocationUtils.Timer.URI.rawValue.getter(v18);
  uint64_t v27 = v19;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v16);
  uint64_t v20 = sub_67C4(&qword_FBF70);
  uint64_t inited = swift_initStackObject(v20, v31);
  *(_OWORD *)(inited + 16) = xmmword_C27D0;
  uint64_t v22 = sub_2165C((uint64_t)v15, enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:));
  DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v22);
  sub_21690();
  sub_21654((uint64_t)v15);
  *(void *)(inited + 32) = v15;
  *(void *)(inited + 40) = v6;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0x6573756170LL;
  *(void *)(inited + 56) = 0xE500000000000000LL;
  uint64_t v23 = sub_2165C((uint64_t)v13, enum case for DirectInvocationUtils.Timer.UserInfoKey.timerId(_:));
  DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v23);
  sub_21690();
  sub_21654((uint64_t)v13);
  *(void *)(inited + 80) = v13;
  *(void *)(inited + 88) = v6;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v29;
  *(void *)(inited + 104) = a2;
  sub_2165C(v5, enum case for DirectInvocationUtils.Timer.UserInfoKey.duration(_:));
  swift_bridgeObjectRetain(a2);
  sub_21618();
  sub_21684();
  sub_21654(v5);
  *(void *)(inited + 128) = v13;
  *(void *)(inited + 136) = a2;
  *(void *)(inited + 168) = &type metadata for Double;
  *(double *)(inited + 144) = a4;
  uint64_t v24 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String);
  return Parse.DirectInvocation.init(identifier:userData:)(v28, v27, v24);
}

uint64_t sub_2130C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_F2CD0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

unint64_t sub_2135C()
{
  unint64_t result = qword_FBF78;
  if (!qword_FBF78)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SKIDirectInvocationPayload);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_FBF78);
  }

  return result;
}

void sub_21398(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setUserData:isa];
}

uint64_t sub_21404(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_21418(result, a2);
  }
  return result;
}

uint64_t sub_21418(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_2145C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_21470(result, a2);
  }
  return result;
}

uint64_t sub_21470(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

  ;
}

uint64_t sub_214D0()
{
  return type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
}

  ;
}

  ;
}

unint64_t sub_2150C()
{
  return sub_2135C();
}

uint64_t sub_21528()
{
  return type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
}

uint64_t sub_21530()
{
  return type metadata accessor for DirectInvocationUtils.Timer.UserInfoKey(0LL);
}

  ;
}

uint64_t sub_21550()
{
  return Dictionary.init(dictionaryLiteral:)(v0, v1);
}

uint64_t sub_2155C(void *a1)
{
  return DeviceState.asInvocationContext.getter(v1, v2);
}

uint64_t sub_21580(uint64_t a1, uint64_t a2)
{
  *(void *)(v5 - 256) = a2;
  *(void *)(v5 - 248) = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
}

uint64_t sub_21594()
{
  return AnyHashable.init<A>(_:)(v2 - 280, v0, v1);
}

uint64_t sub_215A8@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v3, a1, v2);
}

uint64_t sub_215B4()
{
  v0[15] = v2;
  v0[12] = *(void *)(v3 - 232);
  v0[13] = v1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_215C8(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_215D0(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_215D8()
{
  return DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter();
}

uint64_t sub_215E0(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

id sub_215E8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v4, a2, v3, v2);
}

uint64_t sub_215F8(uint64_t a1)
{
  return Parse.DirectInvocation.init(identifier:userData:)(*(void *)(v1 - 248), *(void *)(v1 - 256), a1);
}

  ;
}

uint64_t sub_21618()
{
  return DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter();
}

uint64_t sub_21620()
{
  return type metadata accessor for ApplicationContext(0LL);
}

uint64_t sub_2162C(uint64_t a1)
{
  return AnyHashable.init<A>(_:)(a1, v1, v2);
}

uint64_t sub_21638(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_21640(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

id sub_21648(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_21654(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_2165C(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

  ;
}

void sub_21678(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

  ;
}

  ;
}

uint64_t sub_2169C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FBF98);
  sub_5474(v0, (uint64_t)qword_FBF98);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_216E4()
{
  uint64_t v0 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  sub_1B53C(v0, qword_100E00);
  uint64_t v1 = sub_5474(v0, (uint64_t)qword_100E00);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v0 - 8) + 104LL))( v1,  enum case for SiriTimeEventSender.TaskType.createTimerIntent(_:),  v0);
}

uint64_t sub_2173C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_2225C();
  return Flow.deferToExecuteAsync(_:)(a1, a2, &type metadata for UnsupportedDateTimerFlow, v4);
}

uint64_t sub_21790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a1;
  v3[5] = a3;
  uint64_t v4 = type metadata accessor for NLContextUpdate(0LL);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = sub_1B6C8(v5);
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  void v3[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[10] = v7;
  v3[11] = sub_1B6C8(v7);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v3[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[13] = v9;
  v3[14] = sub_1B6C8(v9);
  uint64_t v10 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[15] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[16] = v11;
  v3[17] = sub_1B6C8(v11);
  uint64_t v12 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[18] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[19] = v13;
  v3[20] = sub_1B6C8(v13);
  uint64_t v14 = sub_67C4(&qword_FBFC8);
  v3[21] = sub_1B6C8(*(void *)(v14 - 8));
  uint64_t v15 = sub_67C4(&qword_FBFD0);
  v3[22] = sub_1B6C8(*(void *)(v15 - 8));
  uint64_t v16 = sub_67C4(&qword_FBFD8);
  v3[23] = sub_1B6C8(*(void *)(v16 - 8));
  uint64_t v17 = type metadata accessor for ActivityType(0LL);
  v3[24] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v3[25] = v18;
  v3[26] = sub_1B6C8(v18);
  return swift_task_switch(sub_218B8, 0LL, 0LL);
}

uint64_t sub_218B8()
{
  if (qword_FB120 != -1) {
    swift_once(&qword_FB120, sub_2169C);
  }
  uint64_t v1 = sub_5474(v0[12], (uint64_t)qword_FBF98);
  v0[27] = v1;
  uint64_t v30 = v1;
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_1BA1C(2LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "In UnsupportedDateTimerFlow execute()", v4, 2u);
    sub_1B904((uint64_t)v4);
  }

  uint64_t v5 = v0[25];
  uint64_t v6 = v0[26];
  uint64_t v7 = v0[24];

  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v6, enum case for ActivityType.failed(_:), v7);
  if (qword_FB128 != -1) {
    swift_once(&qword_FB128, sub_216E4);
  }
  uint64_t v8 = v0[26];
  uint64_t v9 = v0[23];
  uint64_t v11 = v0[21];
  uint64_t v10 = v0[22];
  uint64_t v12 = v0[17];
  uint64_t v24 = v0[25];
  uint64_t v25 = v0[16];
  uint64_t v13 = v0[14];
  uint64_t v26 = v0[24];
  uint64_t v27 = v0[15];
  uint64_t v28 = v0[13];
  uint64_t v29 = v0[12];
  uint64_t v14 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  uint64_t v15 = sub_5474(v14, (uint64_t)qword_100E00);
  uint64_t v16 = enum case for SiriKitReliabilityCodes.unsupportedParameter(_:);
  uint64_t v17 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104LL))(v9, v16, v17);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v9, 0LL, 1LL, v17);
  uint64_t v18 = type metadata accessor for SiriTimeEventSender.Attribute(0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v10, 1LL, 1LL, v18);
  uint64_t v19 = enum case for SiriTimeEventSender.ReasonDescription.timerDurationTooLong(_:);
  uint64_t v20 = type metadata accessor for SiriTimeEventSender.ReasonDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104LL))(v11, v19, v20);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v11, 0LL, 1LL, v20);
  static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v8, v15, v9, v10, v11);
  sub_DABC(v11, &qword_FBFC8);
  sub_DABC(v10, &qword_FBFD0);
  sub_DABC(v9, &qword_FBFD8);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v8, v26);
  (*(void (**)(uint64_t, void, uint64_t))(v25 + 104))( v12,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v13, v30, v29);
  uint64_t v21 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v12, v13, v21);
  uint64_t v22 = (uint64_t **)swift_task_alloc(dword_FC73C);
  v0[28] = (uint64_t)v22;
  *uint64_t v22 = v0;
  v22[1] = (uint64_t *)sub_21BA4;
  return sub_353D0();
}

uint64_t sub_21BA4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 224);
  *(void *)(*v2 + 232) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_21DB0;
  }

  else
  {
    *(void *)(v4 + 240) = a1;
    uint64_t v6 = sub_21C18;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_21C18(uint64_t a1)
{
  uint64_t v2 = static DialogPhase.completion.getter(a1);
  NLContextUpdate.init()(v2);
  os_log_type_t v3 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateFlowPatternResponse(phase:contextUpdate:measure:)[1]);
  v1[31] = v3;
  *os_log_type_t v3 = v1;
  v3[1] = sub_21C8C;
  return PatternExecutionResult.generateFlowPatternResponse(phase:contextUpdate:measure:)(v1[4], v1[11], v1[8], v1[20]);
}

uint64_t sub_21C8C()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 240LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 88LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 64LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 72LL);
  uint64_t v6 = *(void *)(*(void *)v0 + 48LL);
  uint64_t v7 = *(void *)(*(void *)v0 + 56LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 248LL));

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_21D28, 0LL, 0LL);
}

uint64_t sub_21D28()
{
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_21DB0()
{
  uint64_t v6 = sub_222DC();
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  uint64_t v9 = v8;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v10 = *(void *)(v1 + 232);
    uint64_t v0 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v2 = sub_1BA1C(32LL);
    *(_DWORD *)uint64_t v0 = 136315138;
    uint64_t v3 = v0 + 12;
    uint64_t v15 = v2;
    uint64_t v4 = v0 + 4;
    *(void *)(v1 + 16) = v10;
    sub_222DC();
    sub_67C4(&qword_FBF48);
    uint64_t v11 = String.init<A>(describing:)();
    unint64_t v5 = v12;
    *(void *)(v1 + 24) = sub_683C(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v0 + 4, v0 + 12);
    swift_bridgeObjectRelease(v5);
    sub_222B8();
    sub_222B8();
    _os_log_impl(&dword_0, v7, (os_log_type_t)v9, "Failed to execute DialogEngine: %s", v0, 0xCu);
    swift_arrayDestroy(v2, 1LL);
    sub_1B904(v2);
    sub_1B904((uint64_t)v0);

    uint64_t v13 = sub_222B8();
  }

  else
  {
    uint64_t v10 = *(void *)(v1 + 232);
    sub_222B8();
    sub_222B8();
    sub_222B8();
  }

  static ExecuteResponse.complete()(v13);
  sub_22298();
  swift_task_dealloc(v7);
  swift_task_dealloc(v10);
  swift_task_dealloc(v0);
  swift_task_dealloc(v9);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_21F78()
{
  uint64_t v0 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v0);
  type metadata accessor for CreateTimerCATs_Async(0LL);
  sub_222E4();
  uint64_t v1 = sub_222D0();
  type metadata accessor for CreateTimerCATPatternsExecutor(0LL);
  sub_222E4();
  sub_222D0();
  return v1;
}

uint64_t destroy for UnsupportedDateTimerFlow(void *a1)
{
  return swift_release(a1[1]);
}

uint64_t *_s23TimerFlowDelegatePlugin24UnsupportedDateTimerFlowVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for UnsupportedDateTimerFlow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

__n128 initializeWithTake for UnsupportedDateTimerFlow(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for UnsupportedDateTimerFlow(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsupportedDateTimerFlow(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsupportedDateTimerFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UnsupportedDateTimerFlow()
{
  return &type metadata for UnsupportedDateTimerFlow;
}

uint64_t sub_2218C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_C5FC;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_221F4(uint64_t a1, uint64_t a2)
{
  return sub_2173C(a1, a2);
}

uint64_t sub_221FC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = (void *)swift_task_alloc(dword_FBFC4);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1B0B4;
  return sub_21790(a1, v6, v4);
}

unint64_t sub_2225C()
{
  unint64_t result = qword_FD630;
  if (!qword_FD630)
  {
    unint64_t result = swift_getWitnessTable(&unk_C280C, &type metadata for UnsupportedDateTimerFlow);
    atomic_store(result, (unint64_t *)&qword_FD630);
  }

  return result;
}

uint64_t sub_22298()
{
  return swift_task_dealloc(*(void *)(v0 + 208));
}

uint64_t sub_222B8()
{
  return swift_errorRelease(v0);
}

uint64_t sub_222C0()
{
  return (*(uint64_t (**)(void, void))(v0[19] + 8LL))(v0[20], v0[18]);
}

uint64_t sub_222D0()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t sub_222DC()
{
  return swift_errorRetain(v0);
}

uint64_t sub_222E4()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_222F0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FBFE0);
  sub_5474(v0, (uint64_t)qword_FBFE0);
  return static SiriTimeLog.timerFlow.getter();
}

id sub_22338()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*v0);
  return [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
}

uint64_t sub_2237C( void *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  unint64_t v12 = (uint8_t *)(v5 + 16);
  uint64_t v13 = type metadata accessor for ApplicationContext(0LL);
  uint64_t v14 = (os_log_s *)static ApplicationContext.shared.getter(v13);
  ApplicationContext.deviceState.getter(v12);
  sub_1BC50();
  *(void *)(v6 + 72) = 0xD00000000000001CLL;
  *(void *)(v6 + 80) = 0x80000000000C7300LL;
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v15 = sub_1BD34();
  uint64_t v65 = sub_5474(v15, (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v16 = sub_1BCD0();
  if (os_log_type_enabled(v14, v16))
  {
    uint64_t v17 = (_WORD *)sub_1B9DC();
    sub_2BA04(v17);
    sub_1BBEC(&dword_0, v14, v16, "SearchTimer.ResultSetProvider init", v12);
    sub_1B904((uint64_t)v12);
  }

  *(void *)(v6 + 64) = a1;
  *(_BYTE *)(v6 + 112) = a2 & 1;
  if (a4 >> 62)
  {
    id v26 = a1;
    sub_2BE9C();
    uint64_t v18 = sub_2B930();
    if (v18) {
      goto LABEL_7;
    }
LABEL_18:
    sub_17EE8();
    a2 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v18 = *(void *)((char *)&dword_10 + (a4 & 0xFFFFFFFFFFFFF8LL));
  id v19 = a1;
  sub_2BE9C();
  if (!v18) {
    goto LABEL_18;
  }
LABEL_7:
  if (v18 < 1)
  {
    __break(1u);
    goto LABEL_55;
  }

  unint64_t v63 = a5;
  uint64_t v64 = a1;
  for (uint64_t i = 0LL; i != v18; ++i)
  {
    if ((a4 & 0xC000000000000001LL) != 0) {
      id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a4);
    }
    else {
      id v21 = sub_2BB50(a4 + 8 * i);
    }
    uint64_t v22 = v21;
    uint64_t v23 = SiriTimerState.rawValue.getter(objc_msgSend(v21, "state", v63, v64, v65));
    if (v23 == SiriTimerState.rawValue.getter(1LL))
    {
      sub_2C03C();
      uint64_t v24 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
      uint64_t v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
      sub_2C034(v25);
    }

    else
    {
    }
  }

  sub_17EE8();
  a2 = (unint64_t)_swiftEmptyArrayStorage;
  a5 = v63;
  a1 = v64;
LABEL_19:
  *(void *)(v6 + 104) = a5;
  uint64_t v27 = sub_2BB38();
  id v28 = sub_2B7CC(v27, "includeRemoteTimers");
  sub_1E6A8();
  v29.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  Class isa = v29.super.super.isa;
  if (v28)
  {
    id v31 = v28;
    uint64_t v32 = (os_log_s *)static NSObject.== infix(_:_:)(v31, isa);

    if ((v32 & 1) != 0)
    {
      sub_1E84C();
      sub_2B758();
      sub_17EE8();
      sub_2B5C0(a5);
      sub_2BE4C();
      os_log_type_t v33 = sub_1BCD0();
      if (sub_2BA2C(v33))
      {
        uint64_t v34 = (uint8_t *)sub_1BA1C(12LL);
        *(_DWORD *)uint64_t v34 = 134217984;
        if (a5 >> 62)
        {
          sub_2BB38();
          sub_2B980();
          sub_2B9FC();
        }

        uint64_t v35 = sub_2B9FC();
        sub_2B874(v35, v36, (uint64_t)(v34 + 4), (uint64_t)(v34 + 12), v37, v38, v39);
        sub_2B9FC();
        sub_1E7D8(&dword_0, v32, v33, "Using %ld remote timers for matched timers", v34);
        sub_1B904((uint64_t)v34);
      }

      else
      {

        sub_2B644(a5);
      }

      *(void *)(v6 + 88) = a5;
      *(void *)(v6 + 104) = _swiftEmptyArrayStorage;
      sub_2BB38();
      sub_18034();
      *(void *)(v6 + 56) = a5;

      *(void *)(v6 + 96) = _swiftEmptyArrayStorage;
      return v6;
    }
  }

  else
  {
  }

  unint64_t v12 = (uint8_t *)(a3 >> 62);
  if (a3 >> 62)
  {
    sub_2BC5C();
    uint64_t v40 = (os_log_s *)sub_2B930();
    sub_2B758();
    if (v40) {
      goto LABEL_28;
    }
  }

  else
  {
    uint64_t v40 = *(os_log_s **)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
    if (v40)
    {
LABEL_28:
      sub_17EE8();
      sub_2B9FC();
LABEL_29:
      sub_2B5C0(a3);
      sub_2BE4C();
      os_log_type_t v41 = sub_1BCD0();
      if (sub_2BA2C(v41))
      {
        uint64_t v42 = (uint8_t *)sub_1BA1C(12LL);
        *(_DWORD *)uint64_t v42 = 134217984;
        if (v12)
        {
          sub_2BC5C();
          sub_2B980();
          sub_2B758();
        }

        uint64_t v43 = sub_2B758();
        sub_2B874(v43, v44, (uint64_t)(v42 + 4), (uint64_t)(v42 + 12), v45, v46, v47);
        sub_2B758();
        sub_1E7D8(&dword_0, v40, v41, "Using %ld matched for results", v42);
        sub_1B904((uint64_t)v42);
      }

      else
      {

        sub_2B644(a3);
      }

      *(void *)(v6 + 56) = a3;
      *(void *)(v6 + 88) = a3;
      *(void *)(v6 + 96) = a2;
      sub_2BC5C();
      return v6;
    }
  }

  if (!(a5 >> 62))
  {
    uint64_t v40 = *(os_log_s **)((char *)&dword_10 + (a5 & 0xFFFFFFFFFFFFF8LL));
    goto LABEL_41;
  }

LABEL_55:
  sub_2BB38();
  uint64_t v40 = (os_log_s *)sub_2B930();
  sub_2B9FC();
LABEL_41:
  if (v40 == (os_log_s *)((char *)&dword_0 + 1))
  {
    sub_1E84C();
    sub_2B758();
    sub_17EE8();
    sub_2BB38();
    sub_2BE4C();
    os_log_type_t v48 = sub_1BCD0();
    if (sub_2BDE0(v48))
    {
      uint64_t v49 = (uint8_t *)sub_1BA1C(12LL);
      *(_DWORD *)uint64_t v49 = 134217984;
      sub_2B874((uint64_t)v49, v50, (uint64_t)(v49 + 4), (uint64_t)(v49 + 12), v51, v52, v53);
      sub_17E70();
      sub_1E7D8( &dword_0,  (os_log_s *)((char *)&dword_0 + 1),  (os_log_type_t)a3,  "Matched are empty; single otherRemoteTimers – using %ld remote timers for results",
        v49);
      sub_1B904((uint64_t)v49);
    }

    else
    {

      sub_2B9FC();
    }

    *(void *)(v6 + 56) = a5;
    *(void *)(v6 + 88) = a5;
    sub_2BB38();

    *(void *)(v6 + 96) = _swiftEmptyArrayStorage;
    return v6;
  }

  sub_17EE8();
  sub_2B9FC();
  if (!v18) {
    goto LABEL_29;
  }
  sub_2B758();
  swift_retain_n(a2, 2LL);
  sub_2BE4C();
  os_log_type_t v54 = sub_1BCD0();
  if (sub_2BA2C(v54))
  {
    uint64_t v55 = (uint8_t *)sub_1BA1C(12LL);
    *(_DWORD *)uint64_t v55 = 134217984;
    if ((a2 & 0x8000000000000000LL) != 0 || (a2 & 0x4000000000000000LL) != 0)
    {
      uint64_t v62 = sub_2C044();
      _CocoaArrayWrapper.endIndex.getter(v62);
      sub_1E84C();
    }

    uint64_t v56 = sub_1E84C();
    sub_2B874(v56, v57, (uint64_t)(v55 + 4), (uint64_t)(v55 + 12), v58, v59, v60);
    sub_1E84C();
    sub_1E7D8(&dword_0, v40, v54, "Matched are empty; using %ld unmatchedRunningTimers for results", v55);
    sub_1B904((uint64_t)v55);
  }

  else
  {

    swift_release_n(a2, 2LL);
  }

  *(void *)(v6 + 56) = a2;
  swift_retain();

  *(void *)(v6 + 88) = _swiftEmptyArrayStorage;
  *(void *)(v6 + 96) = a2;
  return v6;
}

uint64_t sub_229D4@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*(id *)(v1 + 64) label];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;

    String.toSpeakableString.getter(v5, v7);
    sub_2B9FC();
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  uint64_t v9 = sub_1BCD8();
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, v8, 1LL, v9);
}

void *sub_22A5C()
{
  id v1 = [*(id *)(v0 + 64) duration];
  uint64_t v2 = v1;
  if (v1)
  {
    [v1 doubleValue];
    double v4 = v3;

    [(id)objc_opt_self(SiriTimeTimerConstants) defaultDuration];
    if (v4 == v5)
    {
      return 0LL;
    }

    else
    {
      uint64_t v6 = type metadata accessor for DialogDuration.Builder(0LL);
      uint64_t v7 = sub_2B838(v6);
      DialogDuration.Builder.init()(v7);
      dispatch thunk of DialogDuration.Builder.withSecs(_:)(*(void *)&v4, 0LL);
      uint64_t v8 = sub_1BC50();
      uint64_t v2 = (void *)dispatch thunk of DialogDuration.Builder.build()(v8);
      sub_1E83C();
    }
  }

  return v2;
}

uint64_t sub_22B24()
{
  *(void *)(v1 + 32) = v0;
  return sub_2B82C((uint64_t)sub_22B34);
}

uint64_t sub_22B34()
{
  uint64_t v1 = v0[4];
  static OutputPublisherFactory.makeOutputPublisherAsync()(v11);
  uint64_t v2 = type metadata accessor for ResponseFactory(0LL);
  sub_2B838(v2);
  uint64_t v3 = sub_2C0DC();
  void v12[3] = v2;
  v12[4] = &protocol witness table for ResponseFactory;
  v12[0] = v3;
  uint64_t v4 = type metadata accessor for PatternFlowProvider(0LL);
  sub_2B838(v4);
  uint64_t v5 = PatternFlowProvider.init(outputPublisher:responseGenerator:)(v11, v12);
  v0[5] = v5;
  v0[2] = v5;
  v0[3] = v1;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to PatternFlowProviding.makeResultSetFlow<A>(provider:)[1]);
  v0[6] = v6;
  uint64_t v7 = _s17ResultSetProviderCMa();
  sub_2B2E8((unint64_t *)&unk_FC2C8, v8, (uint64_t (*)(uint64_t))_s17ResultSetProviderCMa);
  void *v6 = v0;
  v6[1] = sub_22C30;
  return PatternFlowProviding.makeResultSetFlow<A>(provider:)( v0 + 3,  v4,  v7,  &protocol witness table for PatternFlowProvider,  v9);
}

uint64_t sub_22C30()
{
  *(void *)(v1 + 56) = v0;
  swift_task_dealloc(v2);
  sub_1E83C();
  if (v0)
  {
    sub_1B9B8();
    return sub_20670();
  }

  else
  {
    uint64_t v4 = sub_2C058();
    return v5(v4);
  }

uint64_t sub_22C94()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CA0()
{
  v1[25] = v0;
  uint64_t v2 = sub_2BB7C();
  v1[26] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[27] = v3;
  v1[28] = sub_1B6C8(v3);
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  v1[29] = sub_1B6C8(*(void *)(v4 - 8));
  uint64_t v5 = sub_2C0F4();
  v1[30] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[31] = v6;
  v1[32] = sub_1B6C8(v6);
  uint64_t v7 = sub_1BD34();
  v1[33] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v1[34] = v8;
  v1[35] = sub_1B6C8(v8);
  uint64_t v9 = sub_2BD40();
  v1[36] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v1[37] = v10;
  v1[38] = sub_1B6C8(v10);
  uint64_t v11 = sub_2BD38();
  v1[39] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v1[40] = v12;
  v1[41] = sub_2B4DC(v12);
  v1[42] = sub_1B970();
  uint64_t v13 = sub_2BB74();
  v1[43] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v1[44] = v14;
  v1[45] = sub_1B6C8(v14);
  uint64_t v15 = sub_2BF34();
  v1[46] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v1[47] = v16;
  v1[48] = sub_2B4DC(v16);
  v1[49] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_22D98()
{
  uint64_t v3 = (void *)v0[25];
  uint64_t v4 = (os_log_s *)v3[5];
  uint64_t v5 = v3[6];
  sub_8CFC(v3 + 2, (uint64_t)v4);
  uint64_t v6 = sub_2BFC4();
  if ((dispatch thunk of DeviceState.isAppleTV.getter(v6, v7) & 1) != 0)
  {
    v0[50] = [objc_allocWithZone(PBSScheduledSleepManager) init];
    uint64_t v8 = (void *)swift_task_alloc(async function pointer to PBSScheduledSleepManager.getCurrentScheduledSleepWrapper()[1]);
    v0[51] = v8;
    uint64_t v9 = sub_2BE20(v8, (uint64_t)sub_22FB4);
    return PBSScheduledSleepManager.getCurrentScheduledSleepWrapper()(v9);
  }

  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v43 = sub_5474(v0[33], (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v11 = sub_2BFB4();
  if (sub_2B864(v11))
  {
    uint64_t v12 = (_WORD *)sub_1B9DC();
    sub_2B938(v12);
    sub_1BBEC(&dword_0, v4, (os_log_type_t)v5, "SearchTimer.ResultSetProvider makeEmptyResultSetFlow", v1);
    sub_1B904((uint64_t)v1);
  }

  sub_2B9C8();
  uint64_t v14 = sub_2BDF0(v13, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
  sub_2BC24(v14, v15, v16, v17, v18, v19, v20, v21, v39, v41, v43);
  uint64_t v22 = mach_absolute_time();
  uint64_t v23 = sub_2BBFC(v22);
  static SiriTimeFeatureFlagsImpl.instance.getter(v23);
  BOOL v24 = SiriTimeFeatureFlagsImpl.isCrossDeviceEnabled()();
  sub_2BC80(v24, v25, v26, v27, v28, v29, v30, v31, v40, v42);
  if ((v2 & 1) != 0)
  {
    unint64_t v32 = *(void *)(v0[25] + 104LL);
    if (v32 >> 62)
    {
      sub_17C9C();
      uint64_t v34 = sub_2BDC0();
      sub_18034();
      if (v34) {
        goto LABEL_10;
      }
    }

    else if (*(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFF8LL)))
    {
LABEL_10:
      sub_2BFE0();
      sub_2BDC8();
      v0[61] = sub_2BEEC();
      os_log_type_t v33 = (void *)swift_task_alloc(dword_FDA8C);
      v0[62] = v33;
      sub_2BE20(v33, (uint64_t)sub_23620);
      return sub_2B884();
    }
  }

  sub_2C0E4();
  sub_2BDC8();
  v0[66] = sub_2BEFC();
  sub_2BAF8();
  uint64_t v35 = (void *)sub_2C084();
  v0[67] = v35;
  uint64_t v36 = sub_2BE08(v35, (uint64_t)sub_237F4);
  return sub_2B8A0(v36, v37, v38);
}

uint64_t sub_22FB4()
{
  *(void *)(v2 + 416) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    *(void *)(v2 + 424) = v0;
  }
  sub_1B9B8();
  return sub_20670();
}

uint64_t sub_23008()
{
  uint64_t v5 = *(void **)(v2 + 424);

  if (!v5)
  {

    if (qword_FB130 != -1) {
      swift_once(&qword_FB130, sub_222F0);
    }
    uint64_t v47 = sub_5474(*(void *)(v2 + 264), (uint64_t)qword_FBFE0);
    sub_1BD20();
    os_log_type_t v15 = sub_2BFB4();
    if (sub_2B864(v15))
    {
      uint64_t v16 = (_WORD *)sub_1B9DC();
      sub_2B938(v16);
      sub_1BBEC(&dword_0, v0, (os_log_type_t)v1, "SearchTimer.ResultSetProvider makeEmptyResultSetFlow", v3);
      sub_1B904((uint64_t)v3);
    }

    sub_2B9C8();
    uint64_t v18 = sub_2BDF0(v17, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
    sub_2BC24(v18, v19, v20, v21, v22, v23, v24, v25, v43, v45, v47);
    uint64_t v26 = mach_absolute_time();
    uint64_t v27 = sub_2BBFC(v26);
    static SiriTimeFeatureFlagsImpl.instance.getter(v27);
    BOOL v28 = SiriTimeFeatureFlagsImpl.isCrossDeviceEnabled()();
    sub_2BC80(v28, v29, v30, v31, v32, v33, v34, v35, v44, v46);
    if ((v4 & 1) != 0)
    {
      unint64_t v36 = *(void *)(*(void *)(v2 + 200) + 104LL);
      if (v36 >> 62)
      {
        sub_17C9C();
        uint64_t v38 = sub_2BDC0();
        sub_18034();
        if (v38) {
          goto LABEL_14;
        }
      }

      else if (*(void *)((char *)&dword_10 + (v36 & 0xFFFFFFFFFFFFF8LL)))
      {
LABEL_14:
        sub_2BFE0();
        sub_2BDC8();
        *(void *)(v2 + 488) = sub_2BEEC();
        uint64_t v37 = (void *)swift_task_alloc(dword_FDA8C);
        *(void *)(v2 + 496) = v37;
        sub_2BE20(v37, (uint64_t)sub_23620);
        return sub_2B884();
      }
    }

    sub_2C0E4();
    sub_2BDC8();
    *(void *)(v2 + 528) = sub_2BEFC();
    sub_2BAF8();
    uint64_t v39 = (void *)sub_2C084();
    *(void *)(v2 + 536) = v39;
    uint64_t v40 = sub_2BE08(v39, (uint64_t)sub_237F4);
    return sub_2B8A0(v40, v41, v42);
  }

  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  *(void *)(v2 + 432) = sub_5474(*(void *)(v2 + 264), (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v6 = sub_1BCD0();
  if (sub_1BB80(v6))
  {
    uint64_t v7 = (_WORD *)sub_1B9DC();
    sub_2BA04(v7);
    sub_1BAA8(&dword_0, v8, v9, "Generating Apple TV timer output");
    sub_1B904(v1);
  }

  uint64_t v10 = v2 + 16;
  id v11 = [objc_allocWithZone(PBSSystemService) init];
  *(void *)(v2 + 440) = v11;
  *(void *)(v2 + 56) = v2 + 580;
  *(void *)(v2 + 16) = v2;
  *(void *)(v2 + 24) = sub_232D4;
  uint64_t v12 = swift_continuation_init(v2 + 16, 0LL);
  *(void *)(v2 + 160) = _NSConcreteStackBlock;
  uint64_t v13 = (void *)(v2 + 160);
  v13[1] = 0x40000000LL;
  v13[2] = sub_23B98;
  v13[3] = &unk_F4280;
  v13[4] = v12;
  [v11 presentControlCenterSleepTimerPanelWithCompletion:v13];
  return swift_continuation_await(v10);
}

uint64_t sub_232D4()
{
  return sub_1B758();
}

uint64_t sub_2330C(uint64_t a1)
{
  uint64_t v3 = *(os_log_s **)(v2 + 432);
  int v4 = *(unsigned __int8 *)(v2 + 580);
  Logger.logObject.getter(a1);
  os_log_type_t v5 = sub_1BCD0();
  if (sub_1BB80(v5))
  {
    os_log_type_t v6 = (_DWORD *)sub_1BA1C(8LL);
    _DWORD *v6 = 67109120;
    *(_DWORD *)(v2 + 576) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 576, v2 + 580, v6 + 1, v6 + 2);
    sub_2C008(&dword_0, v3, v1, "Presented control center: %{BOOL}d");
    sub_1B904((uint64_t)v6);
  }

  if (qword_FB408 != -1) {
    swift_once(&qword_FB408, sub_BB940);
  }
  uint64_t v7 = qword_101298;
  uint64_t v10 = (uint64_t (*)(char, char, uint64_t))((char *)&dword_FEFC0 + dword_FEFC0);
  uint64_t v8 = (void *)swift_task_alloc(unk_FEFC4);
  *(void *)(v2 + 448) = v8;
  sub_2BE20(v8, (uint64_t)sub_23430);
  return v10(0, 1, v7);
}

uint64_t sub_23430()
{
  *(void *)(v2 + 456) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    *(void *)(v2 + 464) = v0;
  }
  sub_1B9B8();
  return sub_20670();
}

uint64_t sub_23484()
{
  uint64_t v2 = v0[37];
  uint64_t v1 = v0[38];
  uint64_t v4 = v0[35];
  uint64_t v3 = v0[36];
  uint64_t v6 = static DialogPhase.completion.getter(v5);
  sub_2BD90(v6, (uint64_t)TimerSnippetModel.init(timers:));
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v3);
  sub_2BCE4();
  uint64_t v7 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v1, v4, v7);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateFlow(manifest:measure:)[1]);
  v0[59] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_23558;
  uint64_t v9 = sub_2B9E8(v0[49]);
  return ((uint64_t (*)(uint64_t))PatternExecutionResult.generateFlow(manifest:measure:))(v9);
}

uint64_t sub_23558()
{
  uint64_t v1 = (void *)v0[58];
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[40];
  sub_2B71C();
  *(void *)(v5 + 480) = v4;
  sub_2B988(v6);

  sub_2B5AC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1B9B8();
  return sub_2B998(v7, v8, v9);
}

#error "23614: call analysis failed (funcsize=23)"
uint64_t sub_23620(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  sub_2BB40();
  sub_1BC0C(v4);
  *(void *)(v2 + 504) = v1;
  swift_task_dealloc(v5);
  sub_1E83C();
  if (!v1) {
    *(void *)(v2 + 512) = a1;
  }
  sub_1B9B8();
  return sub_2B44C();
}

uint64_t sub_23684(uint64_t a1)
{
  uint64_t v2 = static DialogPhase.completion.getter(a1);
  NLContextUpdate.init()(v2);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)[1]);
  v1[65] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_23714;
  return DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)( v1 + 15,  v1[45],  v1[28],  v1[41],  0LL,  0LL,  0LL,  0LL);
}

uint64_t sub_23714()
{
  uint64_t v1 = (void *)v0[64];
  uint64_t v2 = v0[44];
  uint64_t v3 = v0[27];
  sub_2B4F0(v0[65]);

  sub_2B5AC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1B9B8();
  return sub_2B998(v4, v5, v6);
}

#error "237E8: call analysis failed (funcsize=30)"
uint64_t sub_237F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  sub_2BB40();
  sub_1BC0C(v4);
  *(void *)(v2 + 544) = v1;
  swift_task_dealloc(v5);
  sub_1E83C();
  if (!v1) {
    *(void *)(v2 + 552) = a1;
  }
  sub_1B9B8();
  return sub_2B44C();
}

uint64_t sub_2385C(uint64_t a1)
{
  uint64_t v2 = static DialogPhase.completion.getter(a1);
  sub_2BD90(v2, (uint64_t)TimerSnippetModel.init(timers:));
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generatePatternOutput(manifest:measure:)[1]);
  v1[70] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_238E0;
  return PatternExecutionResult.generatePatternOutput(manifest:measure:)(v1 + 10, v1[48], v1[41]);
}

uint64_t sub_238E0()
{
  uint64_t v2 = *(void **)(v1 + 552);
  uint64_t v3 = *(void *)(v1 + 376);
  sub_1BD64();
  *(void *)(v4 + 568) = v0;
  swift_task_dealloc(v5);
  sub_2B73C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));

  sub_1B9B8();
  return sub_1BB0C();
}

#error "239B4: call analysis failed (funcsize=30)"
uint64_t sub_239C0()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  sub_2B500();

  sub_2B454();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  sub_1B838();
  sub_1BA8C();
  sub_1BA60();
  sub_1BAD0();
  sub_1BABC();
  uint64_t v1 = (uint64_t (*)(void))sub_2BE7C();
  return sub_206D8(v1);
}

uint64_t sub_23A1C()
{
  sub_2B454();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  sub_1B838();
  sub_1BA8C();
  sub_1BA60();
  sub_1BAD0();
  sub_1BABC();
  uint64_t v1 = (uint64_t (*)(void))sub_2BE7C();
  return sub_206D8(v1);
}

uint64_t sub_23A78()
{
  uint64_t v1 = (uint64_t (*)(void))sub_2BE7C();
  return sub_206D8(v1);
}

uint64_t sub_23AD8()
{
  uint64_t v1 = (uint64_t (*)(void))sub_2BE7C();
  return sub_206D8(v1);
}

uint64_t sub_23B38()
{
  uint64_t v1 = (uint64_t (*)(void))sub_2BE7C();
  return sub_206D8(v1);
}

uint64_t sub_23B98(uint64_t a1, char a2)
{
  return sub_23BA0(*(void *)(a1 + 32), a2);
}

uint64_t sub_23BA0(uint64_t a1, char a2)
{
  **(_BYTE **)(*(void *)(a1 + 64) + 4Hasher.init(_seed:)(v3, 0LL) = a2;
  return swift_continuation_resume();
}

uint64_t sub_23BB0()
{
  v1[74] = v0;
  uint64_t v2 = sub_2BF34();
  v1[75] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[76] = v3;
  v1[77] = sub_1B6C8(v3);
  uint64_t v4 = type metadata accessor for SiriTimePluginModel(0LL);
  v1[78] = v4;
  v1[79] = sub_1B6C8(*(void *)(v4 - 8));
  uint64_t v5 = sub_67C4(&qword_FBD98);
  v1[80] = sub_2B4DC(*(void *)(v5 - 8));
  v1[81] = sub_1B970();
  v1[82] = sub_1B970();
  v1[83] = sub_1B970();
  v1[84] = sub_1B970();
  v1[85] = sub_1B970();
  v1[86] = sub_1B970();
  v1[87] = sub_1B970();
  v1[88] = sub_1B970();
  uint64_t v6 = sub_1BD34();
  v1[89] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[90] = v7;
  v1[91] = sub_1B6C8(v7);
  uint64_t v8 = sub_2BD40();
  v1[92] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v1[93] = v9;
  v1[94] = sub_1B6C8(v9);
  uint64_t v10 = sub_2BD38();
  v1[95] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v1[96] = v11;
  v1[97] = sub_2B4DC(v11);
  v1[98] = sub_1B970();
  v1[99] = sub_1B970();
  v1[100] = sub_1B970();
  uint64_t v12 = sub_2C0F4();
  v1[101] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v1[102] = v13;
  v1[103] = sub_1B6C8(v13);
  uint64_t v14 = sub_2BB7C();
  v1[104] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v1[105] = v15;
  v1[106] = sub_1B6C8(v15);
  uint64_t v16 = sub_2BB74();
  v1[107] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v1[108] = v17;
  v1[109] = sub_2B4DC(v17);
  v1[110] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_23D14()
{
  uint64_t v2 = *(id **)(*(void *)(v0 + 592) + 56LL);
  if ((unint64_t)v2 >> 62)
  {
    sub_17C9C();
    if (sub_2BDC0()) {
      goto LABEL_3;
    }
LABEL_34:
    sub_18034();
    *(_BYTE *)(v0 + 1272) = 0;
    uint64_t v59 = sub_67C4((uint64_t *)&unk_FF830);
    sub_AC3C((unint64_t *)&qword_FCC50, (uint64_t *)&unk_FF830);
    uint64_t v61 = v60;
    uint64_t v62 = sub_2C08C();
    swift_allocError(v62, v63, 0LL, 0LL);
    uint64_t v64 = static BarbaraWalters.logAndReturnError<A>(context:_:)( 0xD000000000000054LL,  0x80000000000C73C0LL,  v0 + 1272,  v59,  v61);
    swift_willThrow(v64, v65, v66, v67, v68, v69, v70, v71);
    uint64_t v160 = *(void *)(v0 + 704);
    uint64_t v171 = *(void *)(v0 + 696);
    uint64_t v181 = *(void *)(v0 + 688);
    uint64_t v190 = *(void *)(v0 + 680);
    uint64_t v198 = *(void *)(v0 + 672);
    uint64_t v205 = *(void *)(v0 + 664);
    uint64_t v211 = *(void *)(v0 + 656);
    uint64_t v216 = *(void *)(v0 + 648);
    uint64_t v220 = *(void *)(v0 + 640);
    uint64_t v223 = *(void *)(v0 + 632);
    uint64_t v225 = *(void *)(v0 + 616);
    swift_task_dealloc(*(void *)(v0 + 880));
    sub_1B86C();
    sub_1BA24();
    sub_1BABC();
    sub_1BA14();
    sub_1BA38();
    sub_1B838();
    sub_1BA8C();
    sub_1BA60();
    uint64_t v72 = sub_1BAD0();
    uint64_t v80 = sub_1BBDC(v72, v73, v74, v75, v76, v77, v78, v79, v160);
    uint64_t v88 = sub_1B910(v80, v81, v82, v83, v84, v85, v86, v87, v161, v171);
    uint64_t v96 = sub_1B8C4(v88, v89, v90, v91, v92, v93, v94, v95, v162, v172, v181);
    uint64_t v104 = sub_1B8BC(v96, v97, v98, v99, v100, v101, v102, v103, v163, v173, v182, v190);
    uint64_t v112 = sub_1B8B4(v104, v105, v106, v107, v108, v109, v110, v111, v164, v174, v183, v191, v198);
    uint64_t v120 = sub_1B864(v112, v113, v114, v115, v116, v117, v118, v119, v165, v175, v184, v192, v199, v205);
    uint64_t v128 = sub_1B874(v120, v121, v122, v123, v124, v125, v126, v127, v166, v176, v185, v193, v200, v206, v211);
    uint64_t v136 = sub_1B8AC(v128, v129, v130, v131, v132, v133, v134, v135, v167, v177, v186, v194, v201, v207, v212, v216);
    uint64_t v144 = sub_1B8A4( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v168,  v178,  v187,  v195,  v202,  v208,  v213,  v217,  v220);
    uint64_t v152 = sub_1B958( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v169,  v179,  v188,  v196,  v203,  v209,  v214,  v218,  v221,  v223);
    sub_1B950( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v170,  v180,  v189,  v197,  v204,  v210,  v215,  v219,  v222,  v224,  v225);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v3 = *(void *)((char *)&dword_10 + ((unint64_t)v2 & 0xFFFFFFFFFFFFF8LL));
  sub_17C9C();
  if (!v3) {
    goto LABEL_34;
  }
LABEL_3:
  sub_8EEB4(0LL, ((unint64_t)v2 & 0xC000000000000001LL) == 0, v2);
  else {
    id v4 = v2[4];
  }
  uint64_t v5 = v4;
  *(void *)(v0 + 888) = v4;
  sub_18034();
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v6 = sub_5474(*(void *)(v0 + 712), (uint64_t)qword_FBFE0);
  *(void *)(v0 + 896) = v6;
  sub_1BD20();
  os_log_type_t v7 = sub_1BCD0();
  if (sub_2BAD0(v7))
  {
    uint64_t v8 = (uint8_t *)sub_1B9DC();
    *(_WORD *)uint64_t v8 = 0;
    sub_1BBEC(&dword_0, (os_log_s *)v2, v1, "SearchTimer.ResultSetProvider makeSingleItemFlow", v8);
    sub_1B904((uint64_t)v8);
  }

  uint64_t v9 = *(void *)(v0 + 848);
  uint64_t v10 = *(void *)(v0 + 592);

  static DialogPhase.completion.getter(v11);
  uint64_t v12 = sub_67C4(&qword_FBE58);
  uint64_t inited = swift_initStackObject(v12, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_C2690;
  *(void *)(inited + 32) = v5;
  specialized Array._endMutation()(inited, v14, v15, v16, v17, v18, v19, v20);
  id v21 = v5;
  sub_C7A0();
  sub_18034();
  uint64_t v22 = *(os_log_s **)(v10 + 88);
  if ((unint64_t)v22 >> 62)
  {
    sub_17C9C();
    uint64_t v23 = sub_2C020();
    sub_18034();
  }

  else
  {
    uint64_t v23 = *(void *)((char *)&dword_10 + ((unint64_t)v22 & 0xFFFFFFFFFFFFF8LL));
  }

  sub_2BFD8();
  uint64_t v24 = (uint8_t *)sub_1BCD0();
  BOOL v25 = sub_2BA2C((os_log_type_t)v24);
  if (v23)
  {
    if (v25)
    {
      uint64_t v26 = (uint8_t *)sub_1B9DC();
      *(_WORD *)uint64_t v26 = 0;
      sub_1BBEC( &dword_0,  v22,  (os_log_type_t)v24,  "SearchTimer.ResultSetProvider makeSingleItemFlow for matched timer",  v26);
      sub_1B904((uint64_t)v26);
    }

    sub_2BF8C();
    static SiriTimeFeatureFlagsImpl.instance.getter(v27);
    BOOL v28 = SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
    sub_2B944(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    if (v28)
    {
      sub_2BFD8();
      os_log_type_t v29 = sub_1BCD0();
      if (sub_1BB80(v29))
      {
        uint64_t v30 = (_WORD *)sub_1B9DC();
        sub_2B938(v30);
        sub_1BBEC( &dword_0,  (os_log_s *)v28,  (os_log_type_t)v6,  "[SearchTimer.ResultSetProvider.makeSingleItemFlow] Using multi-timer RF 2.0 path.",  v24);
        sub_1B904((uint64_t)v24);
      }

      sub_2C0EC();
      sub_2BB94();
      uint64_t v31 = *(void *)(v0 + 120);
      uint64_t v32 = *(void *)(v0 + 128);
      id v33 = sub_2BA10();
      sub_58E1C(v33);
      *(void *)(v0 + 1040) = v34;
      uint64_t v35 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
      *(void *)(v0 + 1048) = v35;
      unint64_t v36 = sub_24E18;
    }

    else
    {
      sub_2C0EC();
      sub_2BB94();
      uint64_t v31 = *(void *)(v0 + 80);
      uint64_t v32 = *(void *)(v0 + 88);
      id v44 = sub_2BA10();
      sub_58E1C(v44);
      *(void *)(v0 + 1200) = v45;
      uint64_t v35 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
      *(void *)(v0 + 1208) = v35;
      unint64_t v36 = sub_25E48;
    }
  }

  else
  {
    if (v25)
    {
      uint64_t v37 = (uint8_t *)sub_1B9DC();
      *(_WORD *)uint64_t v37 = 0;
      sub_1BBEC( &dword_0,  v22,  (os_log_type_t)v24,  "SearchTimer.ResultSetProvider makeSingleItemFlow for unmatched timer",  v37);
      sub_1B904((uint64_t)v37);
    }

    sub_2BF8C();
    static SiriTimeFeatureFlagsImpl.instance.getter(v38);
    BOOL v39 = SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
    sub_2B944(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    if (!v39)
    {
      id v49 = [*(id *)(*(void *)(v0 + 592) + 64) allAvailableTargets];
      if (v49)
      {
        uint64_t v50 = type metadata accessor for SiriDevice(0LL);
        unint64_t v51 = sub_2C0B8(v50);

        if (v51 >> 62)
        {
          sub_2B630();
          sub_2B930();
          sub_1BC04();
        }

        sub_1BC04();
      }

      uint64_t v52 = *(void *)(v0 + 752);
      uint64_t v53 = *(void *)(v0 + 728);
      uint64_t v54 = *(void *)(v0 + 720);
      uint64_t v55 = *(void *)(v0 + 712);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 744) + 104LL))( v52,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  *(void *)(v0 + 736));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v53, v6, v55);
      uint64_t v56 = mach_absolute_time();
      SiriTimeMeasurement.init(_:log:startTime:)(v52, v53, v56);
      if (qword_FB408 != -1) {
        swift_once(&qword_FB408, sub_BB940);
      }
      uint64_t v57 = *(void *)(*(void *)(v0 + 592) + 96LL);
      sub_2B5C0(v57);
      *(void *)(v0 + 992) = sub_2C064(v57, v57);
      sub_17EE8();
      uint64_t v226 = (char *)&dword_FEFB0 + dword_FEFB0;
      swift_retain();
      uint64_t v58 = (void *)sub_2C084();
      *(void *)(v0 + 1000) = v58;
      *uint64_t v58 = v0;
      v58[1] = sub_24C94;
      __asm { BR              X8; sub_76D84 }
    }

    sub_2BFD8();
    os_log_type_t v40 = sub_1BCD0();
    if (sub_1BB80(v40))
    {
      uint64_t v41 = (_WORD *)sub_1B9DC();
      sub_2B938(v41);
      sub_1BBEC( &dword_0,  (os_log_s *)v39,  (os_log_type_t)v6,  "[SearchTimer.ResultSetProvider.makeSingleItemFlow] Using multi-timer RF 2.0 path",  v24);
      sub_1B904((uint64_t)v24);
    }

    sub_2C0EC();
    sub_2BB94();
    uint64_t v31 = *(void *)(v0 + 480);
    uint64_t v32 = *(void *)(v0 + 488);
    id v42 = sub_2BA10();
    sub_58E1C(v42);
    *(void *)(v0 + 904) = v43;
    uint64_t v35 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
    *(void *)(v0 + 912) = v35;
    unint64_t v36 = sub_24438;
  }

  *uint64_t v35 = v0;
  v35[1] = v36;
  uint64_t v46 = sub_2BFC4();
  return dispatch thunk of SessionManaging.sessionIDString(for:)(v46, v47, v31, v32);
}

uint64_t sub_24438()
{
  *(void *)(v1 + 920) = v0;
  *(void *)(v1 + 928) = v2;
  sub_2B988(v3);
  sub_18034();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_24480()
{
  uint64_t v1 = v0[112];
  uint64_t v2 = v0[94];
  uint64_t v3 = v0[93];
  uint64_t v4 = v0[92];
  uint64_t v5 = v0[91];
  uint64_t v6 = v0[90];
  uint64_t v7 = v0[89];
  _s20HandleIntentStrategyVwxx_0(v0 + 57);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v2,  enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:),  v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v1, v7);
  uint64_t v8 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v2, v5, v8);
  if (qword_FB400 != -1) {
    swift_once(&qword_FB400, sub_BB924);
  }
  uint64_t v9 = v0[88];
  uint64_t v10 = v0[87];
  uint64_t v11 = v0[86];
  uint64_t v12 = v0[74];
  uint64_t v13 = *(void *)(v12 + 96);
  sub_2B5C0(v13);
  uint64_t v14 = sub_303F8(v13, v13);
  v0[117] = v14;
  swift_bridgeObjectRelease(v13);
  sub_229D4(v9);
  uint64_t v15 = sub_22A5C();
  v0[118] = v15;
  id v16 = sub_2B7CC((uint64_t)v15, "type");
  SiriTimerType.toSpeakableString()(v16);
  sub_1BCD8();
  uint64_t v17 = sub_2BF9C(v10);
  id v18 = sub_2B7CC(v17, "state");
  SiriTimerState.toSpeakableString()(v18);
  sub_2BF9C(v11);
  uint64_t v19 = *(void *)(v12 + 56);
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0) {
      uint64_t v23 = v19;
    }
    else {
      uint64_t v23 = v19 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_17C9C();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v23);
    sub_18034();
  }

  else
  {
    uint64_t v20 = *(void *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFF8LL));
  }

  id v21 = (void *)swift_task_alloc(dword_FC6E4);
  v0[119] = v21;
  *id v21 = v0;
  v21[1] = sub_24678;
  return sub_34618((uint64_t)v14, v0[88], (uint64_t)v15, v0[87], v0[86], COERCE__INT64((double)v20), 0, 0LL);
}

uint64_t sub_24678()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 952LL);
  uint64_t v2 = *(void **)v1;
  v2[120] = v4;
  v2[121] = v0;
  sub_2B988(v3);
  uint64_t v5 = v2[117];
  if (v0)
  {
    uint64_t v6 = v2[88];
    uint64_t v7 = v2[87];
    uint64_t v8 = v2[86];
    swift_bridgeObjectRelease(v5);
    sub_2B750();
    sub_18034();
    sub_2B5B8(v8);
    sub_2B5B8(v7);
    sub_2B5B8(v6);
  }

  else
  {
    uint64_t v9 = v2[88];
    uint64_t v10 = v2[87];
    uint64_t v11 = v2[86];
    swift_bridgeObjectRelease(v5);
    sub_2B750();
    sub_2B990(v11);
    sub_2B990(v10);
    sub_2B990(v9);
  }

  sub_1B9B8();
  return sub_1BB0C();
}

uint64_t sub_24754( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  os_log_type_t v26 = sub_1BCD0();
  if (sub_1BB80(v26))
  {
    uint64_t v27 = (_WORD *)sub_1B9DC();
    sub_2BA04(v27);
    sub_1BAA8( &dword_0,  v28,  v29,  "[SearchTimer.ResultSetProvider.makeSingleItemFlow] Creating response using ResponseFactory...");
    sub_1B904(v23);
  }

  uint64_t v30 = v24[116];

  if (v30)
  {
    unint64_t v31 = v24[116];
    uint64_t v32 = (os_log_s *)v24[112];
    uint64_t v33 = sub_2B5C0(v31);
    Logger.logObject.getter(v33);
    os_log_type_t v34 = sub_1BCD0();
    if (sub_2BDE0(v34))
    {
      uint64_t v35 = v24[115];
      unint64_t v36 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v37 = sub_1BA1C(32LL);
      a22 = v37;
      *(_DWORD *)unint64_t v36 = 136315138;
      swift_bridgeObjectRetain(v31);
      v24[73] = sub_683C(v35, v31, &a22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 73, v24 + 74, v36 + 4, v36 + 12);
      sub_2BFBC(v31);
      sub_1E7D8( &dword_0,  v32,  v25,  "[SearchTimer.ResultSetProvider.makeSingleItemFlow] We have a live activity: %s",  v36);
      swift_arrayDestroy(v37, 1LL);
      sub_1B904(v37);
      sub_1B904((uint64_t)v36);
    }

    else
    {
      sub_2B644(v31);
    }

    v24[20] = v24[78];
    sub_2B9B0((unint64_t *)&qword_FC2B0, v47, type metadata accessor for SiriTimePluginModel);
    v24[21] = v48;
    sub_2BFD0();
    sub_67C4(&qword_FC2C0);
    uint64_t v49 = sub_2BF24();
    uint64_t v50 = (__n128 *)sub_2B95C(v49);
    sub_2C0FC(v50, (__n128)xmmword_C2640);
    sub_2BD5C();
    unint64_t v51 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    v24[122] = v51;
    *unint64_t v51 = v24;
    v51[1] = sub_24A64;
    sub_2BCF8();
  }

  else
  {
    uint64_t v38 = (os_log_s *)sub_2BE00();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      os_log_type_t v40 = (uint8_t *)sub_1B9DC();
      *(_WORD *)os_log_type_t v40 = 0;
      sub_1BBEC( &dword_0,  v38,  v39,  "[SearchTimer.ResultSetProvider.makeSingleItemFlow] Using multi-timer snippet model for single unmatched timer instead.",  v40);
      sub_1B904((uint64_t)v40);
    }

    uint64_t v41 = v24[78];

    v24[50] = v41;
    sub_2B9B0((unint64_t *)&qword_FC2B0, v42, type metadata accessor for SiriTimePluginModel);
    v24[51] = v43;
    sub_2BFD0();
    sub_67C4(&qword_FC2C0);
    uint64_t v44 = sub_2BF24();
    uint64_t v45 = (__n128 *)sub_2B95C(v44);
    sub_2C0FC(v45, (__n128)xmmword_C2640);
    sub_2BD5C();
    uint64_t v46 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    v24[123] = v46;
    *uint64_t v46 = v24;
    v46[1] = sub_24B80;
    sub_2BCF8();
  }

  return sub_2B5E4();
}

uint64_t sub_24A64()
{
  uint64_t v1 = sub_2B7C4();
  sub_2BAAC(v1, &qword_FC2B8);
  sub_1B9B8();
  return sub_2B44C();
}

#error "24B04: call analysis failed (funcsize=52)"
uint64_t sub_24B80()
{
  uint64_t v0;
  uint64_t v1;
  sub_1BBF4();
  uint64_t v1 = sub_2B4F0(*(void *)(v0 + 984));
  sub_2BAAC(v1, &qword_FC2B8);
  sub_1B9B8();
  return sub_1B758();
}

#error "24C18: call analysis failed (funcsize=52)"
uint64_t sub_24C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  sub_20704();
  sub_1BC0C(v4);
  v2[126] = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(v2[124]);
  if (v1)
  {
    sub_1B9B8();
    return sub_20670();
  }

  else
  {
    v2[127] = v0;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateFlow(phase:contextUpdate:measure:)[1]);
    v2[128] = (uint64_t)v7;
    *uint64_t v7 = v3;
    v7[1] = sub_24D2C;
    uint64_t v8 = sub_2B9E8(v2[110]);
    return PatternExecutionResult.generateFlow(phase:contextUpdate:measure:)(v8);
  }

uint64_t sub_24D2C()
{
  uint64_t v1 = *(void **)(v0 + 1016);
  sub_2B71C();
  *(void *)(v3 + 1032) = v2;
  sub_2B988(v4);

  sub_1B9B8();
  return sub_1B758();
}

#error "24DE0: call analysis failed (funcsize=42)"
uint64_t sub_24E18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_2B72C();
  sub_2B71C();
  *(void *)(v1 + 1056) = v0;
  *(void *)(v1 + 1064) = v2;
  sub_2B988(v3);
  sub_18034();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_24E60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  a22 = v24;
  uint64_t v27 = (uint64_t *)v24[79];
  _s20HandleIntentStrategyVwxx_0(v24 + 12);
  uint64_t v28 = sub_67C4(&qword_FC2C0);
  uint64_t v29 = *(void *)(sub_2BF24() - 8);
  uint64_t v30 = *(void *)(v29 + 72);
  uint64_t v31 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v32 = (v31 + 32) & ~v31;
  uint64_t v33 = swift_allocObject(v28, v32 + v30, v31 | 7);
  *(_OWORD *)(v33 + 16) = xmmword_C2640;
  sub_EE84();
  *uint64_t v27 = v33;
  uint64_t v34 = sub_2BFC4();
  swift_storeEnumTagMultiPayload(v34, v35, 0LL);
  uint64_t v36 = sub_2BF0C();
  uint64_t v37 = sub_17C9C();
  uint64_t v38 = 0LL;
  uint64_t v39 = Array<A>.analyzeGrouping()(v37, v36);
  sub_18034();
  uint64_t v40 = sub_266D8(v39);
  sub_2B758();
  v24[134] = v40;
  sub_2BD80();
  if (v41)
  {
    sub_2B61C();
    uint64_t v38 = sub_2B980();
    sub_18034();
  }

  else
  {
    sub_2BBB4();
  }

  uint64_t v42 = v24[74];
  if (v38)
  {
    uint64_t v43 = (uint64_t)(v24 + 72);
    uint64_t v44 = *(void *)(v42 + 88);
    sub_2B5C0(v44);
    unint64_t v45 = (unint64_t)sub_2BF84(v44, v44);
    v24[141] = v45;
    sub_2B7C4();
    a12 = _swiftEmptyArrayStorage;
    if (v45 >> 62)
    {
      sub_2B630();
      uint64_t v46 = sub_2B930();
      if (v46) {
        goto LABEL_6;
      }
    }

    else
    {
      uint64_t v46 = *(void *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFF8LL));
      sub_1BD3C();
      if (v46)
      {
LABEL_6:
        if (v46 >= 1)
        {
          for (uint64_t i = 0LL; i != v46; ++i)
          {
            if ((v45 & 0xC000000000000001LL) != 0) {
              uint64_t v32 = sub_2BCB4();
            }
            else {
              sub_2BE3C();
            }
            if (*(_BYTE *)(v32 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isInRespondingRoom) == 1)
            {
              sub_2C03C();
              uint64_t v48 = a12[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v48);
              uint64_t v43 = (uint64_t)&a12;
              uint64_t v49 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v32);
              sub_2C034(v49);
            }

            else
            {
              sub_2BE94();
            }
          }

          sub_1BC04();
          uint64_t v50 = a12;
          goto LABEL_31;
        }

        __break(1u);
LABEL_51:
        sub_2B630();
        uint64_t result = sub_2B930();
        uint64_t v52 = result;
        if (!result) {
          goto LABEL_52;
        }
LABEL_18:
        if (v52 < 1)
        {
          __break(1u);
          return result;
        }

        for (uint64_t j = 0LL; j != v52; ++j)
        {
          if ((v45 & 0xC000000000000001LL) != 0) {
            uint64_t v32 = sub_2BCB4();
          }
          else {
            sub_2BE3C();
          }
          if (*(_BYTE *)(v32 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isInRespondingRoom) == 1)
          {
            sub_2C03C();
            uint64_t v55 = a12[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v55);
            uint64_t v43 = (uint64_t)&a12;
            uint64_t v56 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v32);
            sub_2C034(v56);
          }

          else
          {
            sub_2BE94();
          }
        }

        sub_1BC04();
        uint64_t v57 = a12;
        goto LABEL_53;
      }
    }

    sub_1BC04();
    uint64_t v50 = _swiftEmptyArrayStorage;
LABEL_31:
    v24[142] = v50;
    sub_2BD80();
    if (v58) {
      goto LABEL_43;
    }
    uint64_t v59 = *(void *)((char *)&dword_10 + (v43 & 0xFFFFFFFFFFFFF8LL));
    sub_2B5C0(v43);
    for (; v59; uint64_t v59 = sub_2BDC0())
    {
      uint64_t v60 = 0LL;
      while (1)
      {
        id v61 = (v43 & 0xC000000000000001LL) != 0 ? (id)sub_2BCD4(v60) : sub_2BB50(v43 + 8 * v60);
        uint64_t v62 = v61;
        uint64_t v63 = v60 + 1;
        if (__OFADD__(v60, 1LL)) {
          break;
        }
        id v64 = sub_2B7CC((uint64_t)v61, "type");
        uint64_t v65 = SiriTimerType.rawValue.getter(v64);
        if (v65 == sub_2BCDC())
        {
          sub_2B594();
          sub_2BF14();
          uint64_t v59 = v66;

          goto LABEL_45;
        }

        ++v60;
        if (v63 == v59)
        {
          sub_2B594();
          uint64_t v59 = 0LL;
          goto LABEL_45;
        }
      }

      __break(1u);
LABEL_43:
      sub_2B5C0(v43);
    }

    sub_2B594();
LABEL_45:
    v24[143] = v59;
    uint64_t v67 = v24[94];
    uint64_t v68 = v24[91];
    (*(void (**)(uint64_t, void, void))(v24[93] + 104LL))( v67,  enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:),  v24[92]);
    sub_2BCE4();
    uint64_t v69 = mach_absolute_time();
    uint64_t v70 = SiriTimeMeasurement.init(_:log:startTime:)(v67, v68, v69);
    if (qword_FB400 != -1) {
      uint64_t v70 = swift_once(&qword_FB400, sub_BB924);
    }
    id v71 = sub_2B7CC(v70, "label");
    if (v71)
    {
      uint64_t v72 = v71;
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      uint64_t v75 = v74;

      String.toSpeakableString.getter(v73, v75);
      swift_bridgeObjectRelease(v75);
    }

    uint64_t v76 = v24[81];
    uint64_t v77 = v24[80];
    uint64_t v78 = sub_1BCD8();
    uint64_t v79 = sub_2BC38(v78);
    v24[144] = v79;
    sub_2B7CC((uint64_t)v79, "type");
    sub_2BFF4();
    uint64_t v80 = sub_2B678(v76);
    sub_2B7CC(v80, "state");
    sub_2BFEC();
    sub_2B678(v77);
    uint64_t v81 = (void *)swift_task_alloc(dword_FC6D4);
    v24[145] = v81;
    *uint64_t v81 = v24;
    v81[1] = sub_258D8;
    sub_2BB10(v24[82]);
    sub_20788();
    return sub_34054(v82, v83, v84, v85, v86, v87, v88, v89);
  }

  uint64_t v43 = (uint64_t)(v24 + 70);
  uint64_t v51 = *(void *)(v42 + 96);
  sub_2B5C0(v51);
  unint64_t v45 = (unint64_t)sub_2BF84(v51, v51);
  v24[135] = v45;
  sub_2B758();
  a12 = _swiftEmptyArrayStorage;
  if (v45 >> 62) {
    goto LABEL_51;
  }
  uint64_t v52 = *(void *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFF8LL));
  uint64_t result = sub_1BD3C();
  if (v52) {
    goto LABEL_18;
  }
LABEL_52:
  sub_1BC04();
  uint64_t v57 = _swiftEmptyArrayStorage;
LABEL_53:
  v24[136] = v57;
  sub_2BD80();
  if (v90) {
    goto LABEL_65;
  }
  uint64_t v91 = *(void *)((char *)&dword_10 + (v43 & 0xFFFFFFFFFFFFF8LL));
  sub_2B5C0(v43);
  for (; v91; uint64_t v91 = _CocoaArrayWrapper.endIndex.getter(v99))
  {
    uint64_t v92 = 0LL;
    while (1)
    {
      id v93 = (v43 & 0xC000000000000001LL) != 0 ? (id)sub_2BCD4(v92) : sub_2BB50(v43 + 8 * v92);
      uint64_t v94 = v93;
      uint64_t v95 = v92 + 1;
      if (__OFADD__(v92, 1LL)) {
        break;
      }
      id v96 = sub_2B7CC((uint64_t)v93, "type");
      uint64_t v97 = SiriTimerType.rawValue.getter(v96);
      if (v97 == sub_2BCDC())
      {
        sub_2B594();
        sub_2BF14();
        uint64_t v91 = v98;

        goto LABEL_70;
      }

      ++v92;
      if (v95 == v91)
      {
        sub_2B594();
        uint64_t v91 = 0LL;
        goto LABEL_70;
      }
    }

    __break(1u);
LABEL_65:
    if (v43 < 0) {
      uint64_t v99 = v43;
    }
    else {
      uint64_t v99 = v43 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_2B5C0(v43);
  }

  sub_2B594();
LABEL_70:
  v24[137] = v91;
  uint64_t v100 = v24[112];
  uint64_t v101 = v24[94];
  uint64_t v102 = v24[91];
  uint64_t v103 = v24[90];
  uint64_t v104 = v24[89];
  sub_2BCC0(v24[93]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))(v102, v100, v104);
  uint64_t v105 = mach_absolute_time();
  uint64_t v106 = SiriTimeMeasurement.init(_:log:startTime:)(v101, v102, v105);
  if (qword_FB400 != -1) {
    uint64_t v106 = swift_once(&qword_FB400, sub_BB924);
  }
  id v107 = sub_2B7CC(v106, "label");
  if (v107)
  {
    uint64_t v108 = v107;
    uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    uint64_t v111 = v110;

    String.toSpeakableString.getter(v109, v111);
    sub_2B7C4();
  }

  uint64_t v112 = v24[84];
  uint64_t v113 = v24[83];
  uint64_t v114 = sub_1BCD8();
  uint64_t v115 = sub_2BC38(v114);
  v24[138] = v115;
  sub_2B7CC((uint64_t)v115, "type");
  sub_2BFF4();
  uint64_t v116 = sub_2B678(v112);
  sub_2B7CC(v116, "state");
  sub_2BFEC();
  sub_2B678(v113);
  uint64_t v117 = (void *)swift_task_alloc(dword_FC6DC);
  v24[139] = v117;
  *uint64_t v117 = v24;
  v117[1] = sub_255D0;
  sub_2BB10(v24[85]);
  sub_20788();
  return sub_34358(v118, v119, v120, v121, v122, v123, v124, v125);
}

uint64_t sub_255D0()
{
  v2[62] = v1;
  v2[63] = v3;
  v2[64] = v0;
  sub_1BC0C(v4);
  v2[140] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    uint64_t v6 = v2[85];
    uint64_t v7 = v2[84];
    uint64_t v8 = v2[83];
    swift_release();
    sub_2B7C4();
    sub_1E83C();
    sub_18034();
    sub_2B5B8(v8);
    sub_2B5B8(v7);
    sub_2B5B8(v6);
  }

  else
  {
    uint64_t v9 = v2[85];
    uint64_t v10 = v2[84];
    uint64_t v11 = v2[83];
    swift_release();
    sub_2B7C4();
    sub_1E83C();
    sub_2B990(v11);
    sub_2B990(v10);
    sub_2B990(v9);
  }

  sub_1B9B8();
  return sub_2B44C();
}

uint64_t sub_256BC()
{
  uint64_t v2 = v0[63];
  uint64_t v3 = v0[133];
  swift_release();
  v0[147] = v2;
  if (v3)
  {
    uint64_t v4 = v0[133];
    uint64_t v5 = (os_log_s *)v0[112];
    uint64_t v6 = sub_2B5C0(v4);
    Logger.logObject.getter(v6);
    os_log_type_t v7 = sub_1BCD0();
    if (sub_2BAD0(v7))
    {
      uint64_t v8 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v22 = sub_1BA1C(32LL);
      *(_DWORD *)uint64_t v8 = 136315138;
      sub_1BD3C();
      uint64_t v9 = sub_2BDB0();
      sub_2BAB4(v9);
      sub_2BFBC(v4);
      sub_1E7D8( &dword_0,  v5,  (os_log_type_t)v1,  "[SearchTimer.ResultSetProvider.makeIntentHandledResponse] We have a live activity: %s",  v8);
      sub_2BDA0();
      sub_1B904(v22);
      sub_1B904((uint64_t)v8);
    }

    else
    {
      sub_2B644(v4);
    }

    sub_2BF3C();
    sub_2B9B0((unint64_t *)&qword_FC2B0, v17, type metadata accessor for SiriTimePluginModel);
    v0[41] = v18;
    uint64_t v19 = sub_2BEE4();
    sub_2BA7C((uint64_t)v19);
    uint64_t v20 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    v0[148] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_25BE4;
    sub_2BB84();
    sub_2BD14();
  }

  else
  {
    uint64_t v10 = (os_log_s *)sub_2BE00();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (sub_2BD70(v11))
    {
      uint64_t v12 = (uint8_t *)sub_1B9DC();
      *(_WORD *)uint64_t v12 = 0;
      sub_1BBEC( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "[SearchTimer.ResultSetProvider.makeIntentHandledResponse] Using multi-timer snippet model for single matched timer instead.",  v12);
      sub_1B904((uint64_t)v12);
    }

    sub_2BD48();
    v0[30] = v1;
    sub_2B9B0((unint64_t *)&qword_FC2B0, v13, type metadata accessor for SiriTimePluginModel);
    v0[31] = v14;
    uint64_t v15 = sub_2BEE4();
    sub_2C0C4((uint64_t)v15);
    id v16 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    v0[149] = v16;
    *id v16 = v0;
    v16[1] = sub_25D1C;
    sub_2BB84();
    sub_2BA88();
  }

  return sub_2B5E4();
}

uint64_t sub_258D8()
{
  v2[65] = v1;
  v2[66] = v3;
  v2[67] = v0;
  sub_1BC0C(v4);
  v2[146] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    uint64_t v6 = v2[82];
    uint64_t v7 = v2[81];
    uint64_t v8 = v2[80];
    swift_release();
    sub_2B7C4();
    sub_1E83C();
    sub_18034();
    sub_2B5B8(v8);
    sub_2B5B8(v7);
    sub_2B5B8(v6);
  }

  else
  {
    uint64_t v9 = v2[82];
    uint64_t v10 = v2[81];
    uint64_t v11 = v2[80];
    swift_release();
    sub_2B7C4();
    sub_1E83C();
    sub_2B990(v11);
    sub_2B990(v10);
    sub_2B990(v9);
  }

  sub_1B9B8();
  return sub_2B44C();
}

uint64_t sub_259C8()
{
  uint64_t v2 = v0[66];
  uint64_t v3 = v0[133];
  swift_release();
  v0[147] = v2;
  if (v3)
  {
    uint64_t v4 = v0[133];
    uint64_t v5 = (os_log_s *)v0[112];
    uint64_t v6 = sub_2B5C0(v4);
    Logger.logObject.getter(v6);
    os_log_type_t v7 = sub_1BCD0();
    if (sub_2BAD0(v7))
    {
      uint64_t v8 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v22 = sub_1BA1C(32LL);
      *(_DWORD *)uint64_t v8 = 136315138;
      sub_1BD3C();
      uint64_t v9 = sub_2BDB0();
      sub_2BAB4(v9);
      sub_2BFBC(v4);
      sub_1E7D8( &dword_0,  v5,  (os_log_type_t)v1,  "[SearchTimer.ResultSetProvider.makeIntentHandledResponse] We have a live activity: %s",  v8);
      sub_2BDA0();
      sub_1B904(v22);
      sub_1B904((uint64_t)v8);
    }

    else
    {
      sub_2B644(v4);
    }

    sub_2BF3C();
    sub_2B9B0((unint64_t *)&qword_FC2B0, v17, type metadata accessor for SiriTimePluginModel);
    v0[41] = v18;
    uint64_t v19 = sub_2BEE4();
    sub_2BA7C((uint64_t)v19);
    uint64_t v20 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    v0[148] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_25BE4;
    sub_2BB84();
    sub_2BD14();
  }

  else
  {
    uint64_t v10 = (os_log_s *)sub_2BE00();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (sub_2BD70(v11))
    {
      uint64_t v12 = (uint8_t *)sub_1B9DC();
      *(_WORD *)uint64_t v12 = 0;
      sub_1BBEC( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "[SearchTimer.ResultSetProvider.makeIntentHandledResponse] Using multi-timer snippet model for single matched timer instead.",  v12);
      sub_1B904((uint64_t)v12);
    }

    sub_2BD48();
    v0[30] = v1;
    sub_2B9B0((unint64_t *)&qword_FC2B0, v13, type metadata accessor for SiriTimePluginModel);
    v0[31] = v14;
    uint64_t v15 = sub_2BEE4();
    sub_2C0C4((uint64_t)v15);
    id v16 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    v0[149] = v16;
    *id v16 = v0;
    v16[1] = sub_25D1C;
    sub_2BB84();
    sub_2BA88();
  }

  return sub_2B5E4();
}

uint64_t sub_25BE4()
{
  uint64_t v1 = sub_2B7C4();
  sub_2BAAC(v1, &qword_FC2B8);
  sub_1B9B8();
  return sub_2B44C();
}

#error "25CA0: call analysis failed (funcsize=57)"
uint64_t sub_25D1C()
{
  uint64_t v0;
  uint64_t v1;
  sub_1BBF4();
  uint64_t v1 = sub_2B4F0(*(void *)(v0 + 1192));
  sub_2BAAC(v1, &qword_FC2B8);
  sub_1B9B8();
  return sub_1B758();
}

#error "25DCC: call analysis failed (funcsize=57)"
uint64_t sub_25E48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_2B72C();
  sub_2B71C();
  *(void *)(v1 + 1216) = v0;
  *(void *)(v1 + 1224) = v2;
  sub_2B988(v3);
  sub_18034();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_25E90()
{
  uint64_t v1 = _s20HandleIntentStrategyVwxx_0(v0 + 7);
  sub_2BE64(v1, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
  sub_2BCA0();
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = sub_2BBE8(v2);
  if (qword_FB408 != -1) {
    uint64_t v3 = swift_once(&qword_FB408, sub_BB940);
  }
  uint64_t v4 = (void *)v0[111];
  uint64_t v5 = qword_101298;
  uint64_t v6 = *(unsigned __int8 *)(v0[74] + 112LL);
  id v7 = sub_2BD30(v3, "type");
  uint64_t v8 = SiriTimerType.rawValue.getter(v7);
  BOOL v9 = v8 == sub_2BCDC();
  uint64_t v10 = unk_FEFBC;
  uint64_t v14 = (char *)&dword_FEFB8 + dword_FEFB8;
  id v11 = v4;
  uint64_t v12 = (void *)swift_task_alloc(v10);
  v0[154] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_25FBC;
  return ((uint64_t (*)(uint64_t, BOOL, uint64_t, void))v14)(v6, v9, v5, v0[111]);
}

uint64_t sub_25FBC()
{
  v2[155] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    swift_bridgeObjectRelease(v2[153]);
  }
  else {
    v2[156] = v0;
  }
  sub_1B9B8();
  return sub_20670();
}

uint64_t sub_26018()
{
  uint64_t v1 = v0[153];
  uint64_t v2 = v0[152];
  uint64_t v3 = v0[109];
  uint64_t v4 = v0[106];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[108] + 16))(v3, v0[110], v0[107]);
  uint64_t v5 = (void *)swift_task_alloc(48LL);
  v5[2] = v4;
  v5[3] = v2;
  v5[4] = v1;
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_2B2DC, v5);
  sub_18034();
  sub_1BA14();
  uint64_t v6 = (uint64_t **)swift_task_alloc(async function pointer to PatternExecutionResult.generateFlow(manifest:measure:)[1]);
  v0[157] = (uint64_t)v6;
  _DWORD *v6 = v0;
  v6[1] = (uint64_t *)sub_260D8;
  sub_2B9E8(v0[77]);
  return sub_2BCCC();
}

uint64_t sub_260D8()
{
  uint64_t v1 = *(void **)(v0 + 1248);
  uint64_t v2 = *(void *)(v0 + 608);
  sub_2B71C();
  *(void *)(v4 + 1264) = v3;
  sub_2B988(v5);

  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1B9B8();
  return sub_2B44C();
}

#error "261AC: call analysis failed (funcsize=42)"
#error "2627C: call analysis failed (funcsize=52)"
#error "26324: call analysis failed (funcsize=42)"
#error "263A4: call analysis failed (funcsize=47)"
#error "26464: call analysis failed (funcsize=47)"
#error "2654C: call analysis failed (funcsize=42)"
uint64_t sub_26584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v4 = sub_67C4(&qword_FBD98);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_229D4((uint64_t)v6);
  id v7 = (int *)type metadata accessor for SearchForTimersHandledOtherMultiParameters(0LL);
  sub_1BD44(v7[16]);
  uint64_t v8 = sub_22A5C();
  BOOL v9 = v7[15];
  swift_release();
  *(void *)(a1 + v9) = v8;
  uint64_t v10 = *(void **)(a2 + 64);
  SiriTimerType.toSpeakableString()([v10 type]);
  sub_1BCD8();
  sub_1BC80((uint64_t)v6);
  sub_1BD44(v7[17]);
  SiriTimerState.toSpeakableString()([v10 state]);
  sub_1BC80((uint64_t)v6);
  sub_1BD44(v7[14]);
  id v11 = *(void *)(a2 + 56);
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0) {
      uint64_t v15 = v11;
    }
    else {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_17C9C();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v15);
    sub_18034();
  }

  else
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v13 = a1 + v7[18];
  *(double *)uint64_t v13 = (double)v12;
  *(_BYTE *)(v13 + 8) = 0;
  uint64_t result = swift_release();
  *(void *)(a1 + 24) = 0LL;
  return result;
}

uint64_t sub_266D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimerGrouping(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = type metadata accessor for TimerTimerGrouping.Builder();
  swift_initStackObject(v6, v18);
  id v7 = (_BYTE *)sub_64C04();
  v7[16] = *(void *)(a1 + 16) == 0LL;
  uint64_t v8 = *(void (**)(char *, void, uint64_t))(v3 + 104);
  v8(v5, enum case for TimerGrouping.statePaused(_:), v2);
  char v9 = sub_2AF88((uint64_t)v5, a1);
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  v7[21] = v9 & 1;
  v8(v5, enum case for TimerGrouping.stateRunning(_:), v2);
  char v11 = sub_2AF88((uint64_t)v5, a1);
  v10(v5, v2);
  v7[20] = v11 & 1;
  v8(v5, enum case for TimerGrouping.device(_:), v2);
  char v12 = sub_2AF88((uint64_t)v5, a1);
  v10(v5, v2);
  v7[19] = v12 & 1;
  v8(v5, enum case for TimerGrouping.room(_:), v2);
  char v13 = sub_2AF88((uint64_t)v5, a1);
  v10(v5, v2);
  v7[18] = v13 & 1;
  v8(v5, enum case for TimerGrouping.label(_:), v2);
  char v14 = sub_2AF88((uint64_t)v5, a1);
  v10(v5, v2);
  v7[17] = v14 & 1;
  v8(v5, enum case for TimerGrouping.duration(_:), v2);
  LOBYTE(a1) = sub_2AF88((uint64_t)v5, a1);
  v10(v5, v2);
  v7[22] = a1 & 1;
  uint64_t v15 = type metadata accessor for TimerTimerGrouping();
  swift_allocObject(v15, 31LL, 7LL);
  return sub_64C40(v7);
}

uint64_t sub_2690C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_67C4(&qword_FBD90);
  __chkstk_darwin(v7);
  char v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v9, a2, v10);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v9, 0LL, 1LL, v10);
  OutputGenerationManifest.nlContextUpdate.setter(v9);
  swift_bridgeObjectRetain(a4);
  return OutputGenerationManifest.applicationSessionID.setter(a3, a4);
}

uint64_t sub_269D4()
{
  v1[25] = v0;
  uint64_t v2 = sub_2BF34();
  v1[26] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[27] = v3;
  v1[28] = sub_1B6C8(v3);
  uint64_t v4 = sub_2BF2C();
  v1[29] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[30] = v5;
  v1[31] = sub_1B6C8(v5);
  uint64_t v6 = sub_2BB74();
  v1[32] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[33] = v7;
  v1[34] = sub_1B6C8(v7);
  uint64_t v8 = sub_67C4(&qword_FBD98);
  v1[35] = sub_2B4DC(*(void *)(v8 - 8));
  v1[36] = sub_1B970();
  v1[37] = sub_1B970();
  v1[38] = sub_1B970();
  v1[39] = sub_1B970();
  v1[40] = sub_1B970();
  uint64_t v9 = sub_1BD34();
  v1[41] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v1[42] = v10;
  v1[43] = sub_1B6C8(v10);
  uint64_t v11 = sub_2BD40();
  v1[44] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v1[45] = v12;
  v1[46] = sub_1B6C8(v12);
  uint64_t v13 = sub_2BD38();
  v1[47] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v1[48] = v14;
  v1[49] = sub_2B4DC(v14);
  v1[50] = sub_1B970();
  v1[51] = sub_1B970();
  uint64_t v15 = *(void *)(sub_2BF24() - 8);
  v1[52] = v15;
  v1[53] = sub_1B6C8(v15);
  uint64_t v16 = type metadata accessor for SiriTimePluginModel(0LL);
  v1[54] = v16;
  v1[55] = sub_1B6C8(*(void *)(v16 - 8));
  uint64_t v17 = sub_2C0F4();
  v1[56] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v1[57] = v18;
  v1[58] = sub_1B6C8(v18);
  uint64_t v19 = sub_2BB7C();
  v1[59] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v1[60] = v20;
  v1[61] = sub_1B6C8(v20);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_26B3C()
{
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v4 = (os_log_s *)sub_5474(v2[41], (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v5 = sub_1BCD0();
  if (sub_2B854(v5))
  {
    uint64_t v6 = (_WORD *)sub_1B9DC();
    sub_2B938(v6);
    sub_1BBEC(&dword_0, v0, (os_log_type_t)v1, "SearchTimer.ResultSetProvider makeAllResultsFlow", v3);
    sub_1B904((uint64_t)v3);
  }

  uint64_t v7 = v2[25];

  if (!(*(void *)(v7 + 56) >> 62))
  {
    sub_2BBB4();
    if (v1) {
      goto LABEL_7;
    }
LABEL_48:
    uint64_t v52 = (void *)swift_task_alloc(dword_FC02C);
    v2[62] = v52;
    *uint64_t v52 = v2;
    v52[1] = sub_27670;
    sub_2B904();
    return sub_22CA0();
  }

  sub_2B61C();
  uint64_t v1 = sub_2B980();
  sub_18034();
  if (!v1) {
    goto LABEL_48;
  }
LABEL_7:
  if (*(void *)(v7 + 56) >> 62) {
    goto LABEL_50;
  }
  sub_2BBB4();
LABEL_9:
  if (v1 == 1)
  {
    uint64_t v8 = (void *)swift_task_alloc(dword_FC034);
    v2[63] = v8;
    *uint64_t v8 = v2;
    v8[1] = sub_27708;
    sub_2B904();
    return sub_23BB0();
  }

  if (*(void *)(v7 + 56) >> 62)
  {
    sub_2B61C();
    uint64_t v1 = sub_2B980();
    uint64_t v10 = sub_18034();
  }

  else
  {
    sub_2BBB4();
  }

  if (v1)
  {
    sub_1BD3C();
    sub_C7A0();
    uint64_t v11 = sub_1BC04();
  }

  else
  {
    uint64_t v11 = NLContextUpdate.init()(v10);
  }

  uint64_t v12 = v2[57];
  uint64_t v13 = v2[58];
  uint64_t v14 = v2[56];
  static SiriTimeFeatureFlagsImpl.instance.getter(v11);
  BOOL v15 = SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  if (!v15)
  {
    uint64_t v29 = v2[43];
    uint64_t v31 = v2[41];
    uint64_t v30 = v2[42];
    (*(void (**)(void, void, void))(v2[45] + 104LL))( v2[46],  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v2[44]);
    (*(void (**)(uint64_t, os_log_s *, uint64_t))(v30 + 16))(v29, v4, v31);
    mach_absolute_time();
    uint64_t v32 = sub_2C08C();
    uint64_t v35 = SiriTimeMeasurement.init(_:log:startTime:)(v32, v33, v34);
    static WindowedPaginationParameters.makeNoPagination()(v35);
    v2[82] = *(void *)(v7 + 56);
    uint64_t v36 = dword_FC064;
    sub_1BD3C();
    uint64_t v37 = (void *)swift_task_alloc(v36);
    v2[83] = v37;
    *uint64_t v37 = v2;
    v37[1] = sub_27CF4;
    sub_2B9E8(v2[31]);
    sub_2B904();
    return sub_29774(v38, v39);
  }

  Logger.logObject.getter(v16);
  os_log_type_t v17 = sub_1BCD0();
  if (sub_2B854(v17))
  {
    uint64_t v18 = (_WORD *)sub_1B9DC();
    sub_2B938(v18);
    sub_1BBEC( &dword_0,  v4,  (os_log_type_t)v14,  "[SearchTimer.ResultSetProvider.makeAllResultsFlow] Using multi-timer RF 2.0 path",  (uint8_t *)v15);
    sub_1B904(v15);
  }

  unint64_t v19 = *(void *)(v7 + 56);
  if (v19 >> 62)
  {
    sub_2B630();
    uint64_t v20 = sub_2B930();
  }

  else
  {
    uint64_t v20 = *(void *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFF8LL));
    sub_1BD3C();
  }

  uint64_t v114 = v4;
  if (!v20)
  {
    sub_1BC04();
    uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_33;
  }

  uint64_t v115 = _swiftEmptyArrayStorage;
  uint64_t v21 = (uint64_t)&v115;
  sub_2AE2C(0LL, v20 & ~(v20 >> 63), 0);
  if ((v20 & 0x8000000000000000LL) == 0)
  {
    uint64_t v22 = 0LL;
    uint64_t v23 = v2[52];
    uint64_t v7 = (uint64_t)v115;
    do
    {
      if ((v19 & 0xC000000000000001LL) != 0) {
        uint64_t v24 = sub_2BCB4();
      }
      else {
        uint64_t v24 = (uint64_t)sub_2BB50(v19 + 8 * v22);
      }
      uint64_t v25 = (void *)v24;
      sub_EE84();

      uint64_t v115 = (void *)v7;
      unint64_t v27 = *(void *)(v7 + 16);
      unint64_t v26 = *(void *)(v7 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_2AE2C(v26 > 1, v27 + 1, 1);
        uint64_t v7 = (uint64_t)v115;
      }

      uint64_t v28 = v2[53];
      ++v22;
      *(void *)(v7 + 16) = v27 + 1;
      sub_2B268( v28,  v7 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))
      + *(void *)(v23 + 72) * v27);
    }

    while (v20 != v22);
    sub_1BC04();
LABEL_33:
    uint64_t v41 = v2[54];
    uint64_t v40 = (uint64_t *)v2[55];
    uint64_t v4 = (os_log_s *)v2[25];
    uint64_t *v40 = v7;
    swift_storeEnumTagMultiPayload(v40, v41, 0LL);
    if (*((void *)v4 + 11) >> 62)
    {
      sub_2B61C();
      unint64_t v19 = sub_2B980();
      sub_18034();
      if (v19)
      {
LABEL_35:
        uint64_t v42 = sub_2BF0C();
        uint64_t v43 = sub_17C9C();
        uint64_t v44 = Array<A>.analyzeGrouping()(v43, v42);
        sub_18034();
        uint64_t v45 = sub_266D8(v44);
        sub_17E70();
        v2[73] = v45;
        uint64_t v21 = *((void *)v4 + 11);
        uint64_t v20 = (uint64_t)v114;
        if (!((unint64_t)v21 >> 62))
        {
          sub_2BBB4();
          sub_2B5C0(v21);
          goto LABEL_82;
        }

        goto LABEL_81;
      }
    }

    else
    {
      sub_2BBB4();
      if (v19) {
        goto LABEL_35;
      }
    }

    unint64_t v50 = v2[25];
    uint64_t v53 = *(void *)(v50 + 96);
    sub_2B5C0(v53);
    uint64_t v20 = (uint64_t)sub_2BF84(v53, v53);
    unint64_t v113 = v19;
    v2[64] = v20;
    sub_17E70();
    uint64_t v115 = _swiftEmptyArrayStorage;
    if (!((unint64_t)v20 >> 62))
    {
      uint64_t v54 = *(void *)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFF8LL));
      uint64_t result = sub_2BC5C();
      goto LABEL_56;
    }

    goto LABEL_102;
  }

  while (1)
  {
    __break(1u);
LABEL_81:
    sub_2B5C0(v21);
    uint64_t v65 = sub_2B980();
    if (v65)
    {
      uint64_t v46 = 0LL;
      while (1)
      {
        id v47 = (v21 & 0xC000000000000001LL) != 0 ? (id)sub_2BCD4(v46) : sub_2BB50(v21 + 8 * v46);
        uint64_t v48 = v47;
        uint64_t v49 = v46 + 1;
        if (__OFADD__(v46, 1LL)) {
          break;
        }
        uint64_t v7 = SiriTimerType.rawValue.getter([v47 type]);
        if (v7 == sub_2BCDC())
        {
          sub_2B594();
          sub_D378();
          unint64_t v50 = v51;

          goto LABEL_46;
        }

        ++v46;
        if (v49 == v65)
        {
          sub_2B594();
          unint64_t v50 = 0LL;
LABEL_46:
          uint64_t v20 = (uint64_t)v114;
          goto LABEL_83;
        }
      }

      __break(1u);
LABEL_50:
      sub_2B61C();
      uint64_t v1 = sub_2B980();
      sub_18034();
      goto LABEL_9;
    }

LABEL_82:
    sub_2B594();
    unint64_t v50 = 0LL;
LABEL_83:
    v2[74] = v50;
    uint64_t v66 = *((void *)v4 + 11);
    sub_2B5C0(v66);
    unint64_t v67 = (unint64_t)sub_2BF84(v66, v66);
    sub_2BE5C();
    uint64_t v115 = _swiftEmptyArrayStorage;
    if (v67 >> 62)
    {
      sub_2BE9C();
      uint64_t v68 = sub_2B930();
      sub_17EE8();
    }

    else
    {
      uint64_t v68 = *(void *)((char *)&dword_10 + (v67 & 0xFFFFFFFFFFFFF8LL));
    }

    unint64_t v113 = v50;
    if (!v68)
    {
      uint64_t v69 = v4;
      sub_17EE8();
      uint64_t v75 = _swiftEmptyArrayStorage;
      goto LABEL_97;
    }

    if (v68 >= 1) {
      break;
    }
    __break(1u);
LABEL_102:
    sub_2BC5C();
    uint64_t result = sub_2B930();
    uint64_t v54 = result;
LABEL_56:
    if (v54)
    {
      if (v54 < 1)
      {
        __break(1u);
        return result;
      }

      for (uint64_t i = 0LL; i != v54; ++i)
      {
        if ((v20 & 0xC000000000000001LL) != 0)
        {
          uint64_t v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v20);
          uint64_t v57 = v56;
        }

        else
        {
          uint64_t v57 = *(void *)(v20 + 8 * i + 32);
          uint64_t v56 = swift_retain();
        }

        if (*(_BYTE *)(v57 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isInRespondingRoom) == 1)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v56);
          uint64_t v58 = v115[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v58);
          uint64_t v59 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v57);
          specialized ContiguousArray._endMutation()(v59);
        }

        else
        {
          sub_2BE54();
        }
      }

      sub_2B758();
      uint64_t v60 = v115;
    }

    else
    {
      sub_2B758();
      uint64_t v60 = _swiftEmptyArrayStorage;
    }

    v2[65] = v60;
    uint64_t v21 = *(void *)(v50 + 96);
    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0) {
        uint64_t v91 = *(void *)(v50 + 96);
      }
      else {
        uint64_t v91 = v21 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_2B5C0(*(void *)(v50 + 96));
      uint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v91);
      if (!v61)
      {
LABEL_107:
        sub_2B594();
LABEL_108:
        v2[66] = v61;
        uint64_t v92 = sub_2BF0C();
        uint64_t v93 = sub_17C9C();
        uint64_t v94 = Array<A>.analyzeGrouping()(v93, v92);
        if (v113)
        {
          sub_17C18();
          sub_18034();
          uint64_t v95 = 0LL;
        }

        else
        {
          uint64_t v96 = v94;
          sub_18034();
          uint64_t v95 = sub_266D8(v96);
          sub_2BE5C();
        }

        v2[67] = v95;
        sub_2BCC0(v2[45]);
        sub_2BBA0();
        uint64_t v97 = mach_absolute_time();
        sub_2BC10(v97);
        if (qword_FB400 != -1) {
          swift_once(&qword_FB400, sub_BB924);
        }
        uint64_t v98 = v2[39];
        uint64_t v99 = v2[38];
        sub_229D4(v2[40]);
        uint64_t v100 = sub_22A5C();
        v2[68] = v100;
        id v101 = sub_2BD30((uint64_t)v100, "type");
        SiriTimerType.toSpeakableString()(v101);
        sub_1BCD8();
        uint64_t v102 = sub_1BC80(v98);
        id v103 = sub_2BD30(v102, "state");
        SiriTimerState.toSpeakableString()(v103);
        sub_1BC80(v99);
        uint64_t v104 = (void *)swift_task_alloc(dword_FC6DC);
        v2[69] = v104;
        *uint64_t v104 = v2;
        v104[1] = sub_277A0;
        sub_2B9E8(v2[40]);
        sub_2B904();
        return sub_34358(v105, v106, v107, v108, v109, v110, v111, v112);
      }
    }

    else
    {
      uint64_t v61 = *(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8LL));
      sub_2B5C0(*(void *)(v50 + 96));
      if (!v61) {
        goto LABEL_107;
      }
    }

    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v62 = (v21 & 0xC000000000000001LL) != 0 ? (os_log_s *)sub_2BCD4(v7) : (os_log_s *)sub_2BB50(v21 + 8 * v7);
      uint64_t v4 = v62;
      uint64_t v20 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        break;
      }
      uint64_t v63 = SiriTimerType.rawValue.getter(-[os_log_s type](v62, "type"));
      if (v63 == sub_2BCDC())
      {
        sub_2B594();
        sub_D378();
        uint64_t v61 = v64;

        goto LABEL_108;
      }

      ++v7;
      if (v20 == v61)
      {
        sub_2B594();
        uint64_t v61 = 0LL;
        goto LABEL_108;
      }
    }

    __break(1u);
  }

  uint64_t v69 = v4;
  for (uint64_t j = 0LL; j != v68; ++j)
  {
    if ((v67 & 0xC000000000000001LL) != 0)
    {
      uint64_t v71 = specialized _ArrayBuffer._getElementSlowPath(_:)(j, v67);
      uint64_t v72 = v71;
    }

    else
    {
      uint64_t v72 = *(void *)(v67 + 8 * j + 32);
      uint64_t v71 = swift_retain();
    }

    if (*(_BYTE *)(v72 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isInRespondingRoom) == 1)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v71);
      uint64_t v73 = v115[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v73);
      uint64_t v74 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v72);
      specialized ContiguousArray._endMutation()(v74);
    }

    else
    {
      swift_release();
    }
  }

  sub_17EE8();
  uint64_t v75 = v115;
LABEL_97:
  v2[75] = v75;
  sub_2BCC0(v2[45]);
  sub_2BBA0();
  uint64_t v76 = mach_absolute_time();
  sub_2BC10(v76);
  if (qword_FB400 != -1) {
    swift_once(&qword_FB400, sub_BB924);
  }
  uint64_t v77 = v2[36];
  uint64_t v78 = v2[35];
  sub_229D4(v2[37]);
  uint64_t v79 = sub_22A5C();
  v2[76] = v79;
  sub_2BD30((uint64_t)v79, "type");
  sub_2BFF4();
  sub_1BCD8();
  uint64_t v80 = sub_1BC80(v77);
  sub_2BD30(v80, "state");
  sub_2BFEC();
  sub_1BC80(v78);
  uint64_t v81 = *((void *)v69 + 11);
  sub_2B5C0(v81);
  v2[77] = sub_303F8(v81, v81);
  sub_18034();
  uint64_t v82 = (void *)swift_task_alloc(dword_FC6D4);
  v2[78] = v82;
  *uint64_t v82 = v2;
  v82[1] = sub_27A3C;
  sub_2B9E8(v2[37]);
  sub_2B904();
  return sub_34054(v83, v84, v85, v86, v87, v88, v89, v90);
}

uint64_t sub_27670(uint64_t a1)
{
  uint64_t v4 = *v2;
  sub_2B714(*(void *)(v3 + 496), v5);
  sub_2B538();
  sub_1BA8C();
  sub_1BA60();
  sub_1BAD0();
  sub_1B86C();
  sub_1BA24();
  sub_2C0D0();
  sub_1BA14();
  uint64_t v6 = sub_1BA38();
  uint64_t v14 = sub_1B8C4(v6, v7, v8, v9, v10, v11, v12, v13, v72, a1, v89);
  uint64_t v22 = sub_1B8BC(v14, v15, v16, v17, v18, v19, v20, v21, v73, v81, v90, v97);
  uint64_t v30 = sub_1B8B4(v22, v23, v24, v25, v26, v27, v28, v29, v74, v82, v91, v98, v104);
  uint64_t v38 = sub_1B864(v30, v31, v32, v33, v34, v35, v36, v37, v75, v83, v92, v99, v105, v110);
  uint64_t v46 = sub_1B874(v38, v39, v40, v41, v42, v43, v44, v45, v76, v84, v93, v100, v106, v111, v115);
  uint64_t v54 = sub_1B8A4(v46, v47, v48, v49, v50, v51, v52, v53, v77, v85, v94, v101, v107, v112, v116, v119, v122);
  uint64_t v62 = sub_1B958(v54, v55, v56, v57, v58, v59, v60, v61, v78, v86, v95, v102, v108, v113, v117, v120, v123, v125);
  sub_1B950(v62, v63, v64, v65, v66, v67, v68, v69, v79, v87, v96, v103, v109, v114, v118, v121, v124, v126, v127);
  uint64_t v70 = sub_1B838();
  if (!v1) {
    uint64_t v70 = v88;
  }
  return sub_2B8BC(v70, *(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_27708(uint64_t a1)
{
  uint64_t v4 = *v2;
  sub_2B714(*(void *)(v3 + 504), v5);
  sub_2B538();
  sub_1BA8C();
  sub_1BA60();
  sub_1BAD0();
  sub_1B86C();
  sub_1BA24();
  sub_2C0D0();
  sub_1BA14();
  uint64_t v6 = sub_1BA38();
  uint64_t v14 = sub_1B8C4(v6, v7, v8, v9, v10, v11, v12, v13, v72, a1, v89);
  uint64_t v22 = sub_1B8BC(v14, v15, v16, v17, v18, v19, v20, v21, v73, v81, v90, v97);
  uint64_t v30 = sub_1B8B4(v22, v23, v24, v25, v26, v27, v28, v29, v74, v82, v91, v98, v104);
  uint64_t v38 = sub_1B864(v30, v31, v32, v33, v34, v35, v36, v37, v75, v83, v92, v99, v105, v110);
  uint64_t v46 = sub_1B874(v38, v39, v40, v41, v42, v43, v44, v45, v76, v84, v93, v100, v106, v111, v115);
  uint64_t v54 = sub_1B8A4(v46, v47, v48, v49, v50, v51, v52, v53, v77, v85, v94, v101, v107, v112, v116, v119, v122);
  uint64_t v62 = sub_1B958(v54, v55, v56, v57, v58, v59, v60, v61, v78, v86, v95, v102, v108, v113, v117, v120, v123, v125);
  sub_1B950(v62, v63, v64, v65, v66, v67, v68, v69, v79, v87, v96, v103, v109, v114, v118, v121, v124, v126, v127);
  uint64_t v70 = sub_1B838();
  if (!v1) {
    uint64_t v70 = v88;
  }
  return sub_2B8BC(v70, *(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_277A0()
{
  v2[70] = v0;
  swift_task_dealloc(v4);
  uint64_t v5 = v2[39];
  uint64_t v6 = v2[40];
  uint64_t v7 = v2[38];
  if (v0)
  {
    sub_2BB30();
    sub_2BE54();
    sub_17EE8();
  }

  else
  {
    sub_2BE54();
    sub_17EE8();
    v2[71] = v1;
    sub_2BB30();
  }

  sub_2B5B8(v7);
  sub_2B5B8(v5);
  sub_2B5B8(v6);
  sub_1B9B8();
  return sub_2B8E8(v8, v9, v10);
}

uint64_t sub_27860()
{
  v1[20] = v0;
  sub_2B9B0((unint64_t *)&qword_FC2B0, v2, type metadata accessor for SiriTimePluginModel);
  v1[21] = v3;
  uint64_t v4 = sub_2BFD0();
  sub_2BA7C((uint64_t)v4);
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  v1[72] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_27908;
  return sub_2BA6C();
}

uint64_t sub_27908()
{
  uint64_t v1 = (void *)v0[71];
  uint64_t v2 = v0[33];
  sub_2B4F0(v0[72]);

  uint64_t v3 = sub_2B73C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_2BAAC(v3, &qword_FC2B8);
  sub_1B9B8();
  return sub_1BB0C();
}

#error "279C4: call analysis failed (funcsize=53)"
uint64_t sub_27A3C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sub_2B500();
  sub_2C098();
  sub_1BC0C(v3);
  v2[79] = v0;
  swift_task_dealloc(v4);
  uint64_t v5 = v2[36];
  uint64_t v6 = v2[37];
  uint64_t v7 = v2[35];
  if (v0)
  {
    sub_2BB30();
    sub_2BE5C();
    sub_2BE94();
  }

  else
  {
    sub_2BE5C();
    sub_2BE94();
    v2[80] = v1;
    sub_2BB30();
  }

  sub_2B5B8(v7);
  sub_2B5B8(v5);
  sub_2B5B8(v6);
  sub_1B9B8();
  return sub_2B8E8(v8, v9, v10);
}

uint64_t sub_27AFC()
{
  v1[5] = v0;
  sub_2B9B0((unint64_t *)&qword_FC2B0, v2, type metadata accessor for SiriTimePluginModel);
  v1[6] = v3;
  uint64_t v4 = sub_DB90(v1 + 2);
  sub_2BA7C((uint64_t)v4);
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  v1[81] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_27BBC;
  return sub_2BA6C();
}

uint64_t sub_27BBC()
{
  uint64_t v1 = (void *)v0[80];
  uint64_t v2 = v0[33];
  sub_2B4F0(v0[81]);

  uint64_t v3 = sub_2B73C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_2BAAC(v3, &qword_FC2B8);
  sub_1B9B8();
  return sub_1BB0C();
}

#error "27C7C: call analysis failed (funcsize=53)"
uint64_t sub_27CF4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sub_2BF54();
  uint64_t v3 = v2;
  sub_2BB40();
  uint64_t v4 = v1[30];
  sub_1BC0C(v5);
  v1[84] = v0;
  swift_task_dealloc(v6);
  uint64_t v7 = v1[31];
  uint64_t v8 = v1[29];
  if (!v0) {
    v1[85] = v3;
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v8);
  sub_2B7C4();
  sub_1B9B8();
  return sub_1BB0C();
}

uint64_t sub_27D74(uint64_t a1)
{
  uint64_t v2 = v1[61];
  uint64_t v3 = v1[34];
  static DialogPhase.completion.getter(a1);
  uint64_t v4 = swift_task_alloc(32LL);
  *(void *)(v4 + 16) = v2;
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_2B260, v4);
  sub_1BA24();
  uint64_t v5 = (uint64_t **)swift_task_alloc(async function pointer to PatternExecutionResult.generateFlow(manifest:measure:)[1]);
  v1[86] = (uint64_t)v5;
  *uint64_t v5 = v1;
  v5[1] = (uint64_t *)sub_27E0C;
  sub_2B9E8(v1[28]);
  return sub_2BCCC();
}

uint64_t sub_27E0C()
{
  uint64_t v1 = *(void **)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 216);
  sub_2B71C();
  *(void *)(v4 + 696) = v3;
  sub_2B988(v5);

  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1B9B8();
  return sub_2B44C();
}

#error "27EE8: call analysis failed (funcsize=42)"
#error "27FB8: call analysis failed (funcsize=52)"
#error "2808C: call analysis failed (funcsize=52)"
#error "28138: call analysis failed (funcsize=43)"
uint64_t sub_28168(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v3 = sub_67C4(&qword_FBD90);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(v5, a2, v6);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v5, 0LL, 1LL, v6);
  return OutputGenerationManifest.nlContextUpdate.setter(v5);
}

uint64_t sub_2820C(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = sub_2BF2C();
  v3[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  void v3[9] = v6;
  v3[10] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_2BB74();
  v3[11] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[12] = v8;
  v3[13] = sub_1B6C8(v8);
  uint64_t v9 = sub_2BF34();
  v3[14] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[15] = v10;
  v3[16] = sub_2B4DC(v10);
  v3[17] = sub_1B970();
  uint64_t v11 = sub_2BB7C();
  v3[18] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[19] = v12;
  v3[20] = sub_1B6C8(v12);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_282B4()
{
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v3 = sub_1BD34();
  sub_5474(v3, (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v4 = sub_1BCD0();
  if (sub_1BB80(v4))
  {
    uint64_t v5 = (_WORD *)sub_1B9DC();
    sub_2BA04(v5);
    sub_1BAA8(&dword_0, v6, v7, "SearchTimer.ResultSetProvider makeWindowFlow");
    sub_1B904(v1);
  }

  uint64_t v8 = v2[20];
  uint64_t v9 = v2[17];
  uint64_t v43 = v2[19];
  uint64_t v44 = v2[18];
  uint64_t v10 = v2[15];
  uint64_t v40 = v10;
  uint64_t v41 = v8;
  uint64_t v11 = v2[13];
  uint64_t v39 = v2[14];
  uint64_t v42 = v11;
  uint64_t v13 = v2[11];
  uint64_t v12 = v2[12];
  uint64_t v14 = v2[8];
  uint64_t v34 = v2[10];
  uint64_t v35 = v2[9];
  uint64_t v36 = v2[6];
  uint64_t v37 = v2[5];
  uint64_t v32 = v2[16];
  uint64_t v33 = v2[4];

  sub_A9100();
  static DialogPhase.clarification.getter(v15);
  uint64_t v38 = v9;
  static OutputGenerationManifest.defaultManifest(for:contextUpdate:sessionID:responseViewId:dismissAssistant:)( v11,  v8,  0LL,  0LL,  0LL,  0LL,  0LL);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  sub_2C108(v32, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  uint64_t v16 = type metadata accessor for ResponseFactory(0LL);
  sub_2B838(v16);
  uint64_t v47 = v16;
  uint64_t v48 = &protocol witness table for ResponseFactory;
  v46[0] = sub_2C0DC();
  sub_2C108(v34, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v35 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_F4268, v19 + 8, v17 | 7);
  *(void *)(v20 + 16) = v36;
  sub_2C108(v20 + v18, v34, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
  *(void *)(v20 + v19) = v37;
  uint64_t v21 = type metadata accessor for YesNoSearchWindowStrategy(0LL);
  sub_2B838(v21);
  swift_retain();
  sub_2BE9C();
  uint64_t v22 = YesNoSearchWindowStrategy.init(manifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:nlv3ActionForInput:nlv3ParseConfirmation:promptPatternExecutionProducer:)( v32,  v46,  &unk_FC270,  0LL,  &unk_FC278,  0LL,  sub_28A04,  0LL,  &unk_FC280,  0LL,  &unk_FC290,  v20);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v45);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v23 = sub_2C0DC();
  uint64_t v47 = v16;
  uint64_t v48 = &protocol witness table for ResponseFactory;
  v46[0] = v23;
  uint64_t v24 = type metadata accessor for PatternFlowProvider(0LL);
  sub_2B838(v24);
  v2[2] = PatternFlowProvider.init(outputPublisher:responseGenerator:)(v45, v46);
  sub_2B2E8(&qword_FC298, 255LL, (uint64_t (*)(uint64_t))&type metadata accessor for YesNoSearchWindowStrategy);
  uint64_t v26 = PatternFlowProviding.makeResponseFlowWithContinuationPrompt<A>(strategy:)( v22,  v24,  v21,  &protocol witness table for PatternFlowProvider,  v25);
  swift_release();
  v2[3] = v26;
  uint64_t v27 = sub_67C4(&qword_FC2A0);
  sub_AC3C(&qword_FC2A8, &qword_FC2A0);
  Flow.eraseToAnyValueFlow()(v27, v28);
  sub_2B750();
  sub_2BE54();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v44);
  sub_1BA14();
  sub_1B86C();
  sub_1BA38();
  swift_task_dealloc(v42);
  sub_1BA24();
  uint64_t v29 = sub_2BB58();
  return v30(v29);
}

uint64_t sub_28648(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for NLContextUpdate(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v1[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_286D0, 0LL, 0LL);
}

uint64_t sub_286D0()
{
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v1 = sub_1BD34();
  sub_5474(v1, (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v2 = sub_1BCD0();
  if (sub_1BB80(v2))
  {
    uint64_t v3 = (_WORD *)sub_1B9DC();
    sub_2BA04(v3);
    sub_1BAA8(&dword_0, v4, v5, "SearchTimer.ResultSetProvider window prompt producing rejection output");
    sub_1B904(v0);
  }

  sub_2C028();
  uint64_t v7 = static DialogPhase.canceled.getter(v6);
  NLContextUpdate.init()(v7);
  uint64_t v8 = (void *)swift_task_alloc(dword_FC694);
  uint64_t v9 = sub_2BC64(v8);
  return sub_2BA5C(v9, v10, v11);
}

uint64_t sub_2878C()
{
  if (v0)
  {
    sub_1B9B8();
    return sub_2B44C();
  }

  else
  {
    sub_2C014();
    sub_1BABC();
    uint64_t v4 = (uint64_t (*)(void))sub_1BB00();
    return sub_2B64C(v4);
  }

uint64_t sub_2880C(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for NLContextUpdate(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  v1[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_28894, 0LL, 0LL);
}

uint64_t sub_28894()
{
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v1 = sub_1BD34();
  sub_5474(v1, (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v2 = sub_1BCD0();
  if (sub_1BB80(v2))
  {
    uint64_t v3 = (_WORD *)sub_1B9DC();
    sub_2BA04(v3);
    sub_1BAA8(&dword_0, v4, v5, "SearchTimer.ResultSetProvider window prompt producing cancel output");
    sub_1B904(v0);
  }

  sub_2C028();
  uint64_t v7 = static DialogPhase.canceled.getter(v6);
  NLContextUpdate.init()(v7);
  uint64_t v8 = (void *)swift_task_alloc(dword_FC694);
  uint64_t v9 = sub_2BC64(v8);
  return sub_2BA5C(v9, v10, v11);
}

uint64_t sub_28950()
{
  if (v0)
  {
    sub_1B9B8();
    return sub_2B44C();
  }

  else
  {
    sub_2C014();
    sub_1BABC();
    uint64_t v4 = (uint64_t (*)(void))sub_1BB00();
    return sub_2B64C(v4);
  }

uint64_t sub_289D0()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_28A04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimerNLv3Intent(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_5474(v5, (uint64_t)qword_FBFE0);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "SearchTimer.ResultSetProvider Window prompt parsing nlv3 ActionForInput", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v4, a1, v10);
  if (qword_FB318 != -1) {
    swift_once(&qword_FB318, sub_9707C);
  }
  uint64_t v11 = qword_101168;
  sub_2B2E8((unint64_t *)&qword_FD600, 255LL, type metadata accessor for TimerNLv3Intent);
  uint64_t v13 = IntentNodeTraversable.value<A>(forNode:)(v11, v2, v12);
  if (v14[15] == 3) {
    static ActionForInput.ignore()(v13);
  }
  else {
    static ActionForInput.handle()(v13);
  }
  sub_2B2AC((uint64_t)v4, type metadata accessor for TimerNLv3Intent);
}

uint64_t sub_28BE0(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_67C4(&qword_FBDB0);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TimerNLv3Intent(0LL);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_28C60, 0LL, 0LL);
}

uint64_t sub_28C60()
{
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v4 = sub_1BD34();
  sub_5474(v4, (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v5 = sub_1BCD0();
  if (sub_2B854(v5))
  {
    uint64_t v6 = (_WORD *)sub_1B9DC();
    sub_2B938(v6);
    sub_1BBEC(&dword_0, v0, v1, "SearchTimer.ResultSetProvider Window prompt parsing nlv3 window action", v3);
    sub_1B904((uint64_t)v3);
  }

  type metadata accessor for NLIntent(0LL);
  uint64_t v7 = sub_2C08C();
  v8(v7);
  if (qword_FB318 != -1) {
    swift_once(&qword_FB318, sub_9707C);
  }
  uint64_t v10 = *(void *)(v2 + 40);
  uint64_t v11 = qword_101168;
  sub_2B9B0((unint64_t *)&qword_FD600, v9, type metadata accessor for TimerNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)(v11, v10, v12);
  if (*(unsigned __int8 *)(v2 + 56) - 1 >= 2)
  {
    if (*(_BYTE *)(v2 + 56))
    {
      uint64_t v16 = type metadata accessor for ConfirmationResponse(0LL);
      uint64_t v17 = 1LL;
      goto LABEL_13;
    }

    uint64_t v13 = *(void *)(v2 + 32);
    uint64_t v14 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
  }

  else
  {
    uint64_t v13 = *(void *)(v2 + 32);
    uint64_t v14 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
  }

  uint64_t v15 = *v14;
  uint64_t v16 = type metadata accessor for ConfirmationResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(v13, v15, v16);
  uint64_t v17 = 0LL;
LABEL_13:
  uint64_t v18 = *(void *)(v2 + 48);
  uint64_t v19 = *(void *)(v2 + 32);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v19, v17, 1LL, v16);
  SimpleConfirmationResponseProvider.init(_:)(v19);
  sub_2B2AC(v18, type metadata accessor for TimerNLv3Intent);
  sub_1B86C();
  sub_1BA24();
  uint64_t v20 = (uint64_t (*)(void))sub_1BB00();
  return sub_2B64C(v20);
}

uint64_t sub_28E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_FC064);
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_28EA8;
  return sub_29774(a2, a3);
}

uint64_t sub_28EA8(uint64_t a1)
{
  uint64_t v4 = sub_2B4F0(*((void *)*v2 + 2));
  if (!v1) {
    uint64_t v4 = a1;
  }
  return sub_2B748(v4, v2[1]);
}

uint64_t sub_28EEC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  uint64_t v4 = sub_2BB74();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_1B6C8(v5);
  uint64_t v6 = sub_1BD34();
  v3[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v3[9] = v7;
  v3[10] = sub_1B6C8(v7);
  uint64_t v8 = sub_2BD40();
  v3[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[12] = v9;
  v3[13] = sub_1B6C8(v9);
  uint64_t v10 = sub_2BD38();
  v3[14] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[15] = v11;
  v3[16] = sub_1B6C8(v11);
  uint64_t v12 = sub_2BB7C();
  v3[17] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[18] = v13;
  v3[19] = sub_1B6C8(v13);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_28F94()
{
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  sub_5474(v3[8], (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v5 = sub_2BFB4();
  if (sub_2B864(v5))
  {
    uint64_t v6 = (_WORD *)sub_1B9DC();
    sub_2B938(v6);
    sub_1BBEC(&dword_0, v0, v2, "SearchTimer.ResultSetProvider makeFinalWindowFlow", v4);
    sub_1B904((uint64_t)v4);
  }

  uint64_t v7 = v3[4];

  unint64_t v9 = *(void *)(v7 + 56);
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain(v9);
    uint64_t v10 = sub_2B980();
    uint64_t v8 = sub_2B7C4();
  }

  else
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v10 == 1)
  {
    Logger.logObject.getter(v8);
    os_log_type_t v11 = sub_1BCD0();
    if (sub_1BB80(v11))
    {
      uint64_t v12 = (_WORD *)sub_1B9DC();
      sub_2BA04(v12);
      sub_1BAA8( &dword_0,  v13,  v14,  "SearchTimer.ResultSetProvider Bypassing windowing flow for single item presentation");
      sub_1B904(1LL);
    }

    uint64_t v15 = (uint64_t **)swift_task_alloc(dword_FC034);
    v3[20] = (uint64_t)v15;
    *uint64_t v15 = v3;
    v15[1] = (uint64_t *)sub_29168;
    return sub_23BB0();
  }

  else
  {
    sub_C7A0();
    sub_2BE64(v17, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
    sub_2BCA0();
    uint64_t v18 = mach_absolute_time();
    sub_2BBE8(v18);
    uint64_t v19 = (uint64_t **)swift_task_alloc(dword_FC064);
    v3[21] = (uint64_t)v19;
    *uint64_t v19 = v3;
    v19[1] = (uint64_t *)sub_291E0;
    uint64_t v20 = sub_2B9E8(v3[2]);
    return sub_29774(v20, v21);
  }

uint64_t sub_29168(uint64_t a1)
{
  uint64_t v5 = *v2;
  sub_2B714(*(void *)(v3 + 160), v6);
  swift_task_dealloc(*(void *)(v3 + 152));
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  uint64_t v7 = sub_1B838();
  if (!v1) {
    uint64_t v7 = a1;
  }
  return sub_2B748(v7, *(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_291E0()
{
  *(void *)(v2 + 176) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    *(void *)(v2 + 184) = v0;
  }
  sub_1B9B8();
  return sub_20670();
}

uint64_t sub_29234(uint64_t a1)
{
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateFlow(phase:contextUpdate:measure:)[1]);
  *(void *)(v1 + 192) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_29294;
  uint64_t v3 = sub_2B9E8(*(void *)(v1 + 56));
  return PatternExecutionResult.generateFlow(phase:contextUpdate:measure:)(v3);
}

uint64_t sub_29294()
{
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 48);
  sub_2B71C();
  *(void *)(v4 + 200) = v3;
  sub_2B988(v5);

  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1B9B8();
  return sub_2B44C();
}

uint64_t sub_292F0()
{
  uint64_t v1 = *(void *)(v0 + 144);
  sub_1BB90(*(void *)(v0 + 120));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_2BAE0();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  uint64_t v2 = sub_2BB58();
  return v3(v2);
}

uint64_t sub_29354()
{
  uint64_t v1 = *(void *)(v0 + 144);
  sub_1BB90(*(void *)(v0 + 120));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_2BAE0();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_293B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_FC04C);
  *(void *)(v2 + 32) = v5;
  sub_2BE20(v5, (uint64_t)sub_29410);
  return sub_28EEC(a1, a2);
}

uint64_t sub_29410()
{
  *(void *)(v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    sub_1B9B8();
    return sub_2B44C();
  }

  else
  {
    uint64_t v4 = sub_2C058();
    return sub_2B748(v4, v5);
  }

uint64_t sub_29468()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = sub_67C4(&qword_FBF48);
  uint64_t v3 = static BarbaraWalters.logAndReturnError<A>(context:_:)( 0xD000000000000078LL,  0x80000000000C7320LL,  v0 + 24,  v2,  &protocol self-conformance witness table for Error);
  swift_willThrow(v3, v4, v5, v6, v7, v8, v9, v10);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_294F8(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = sub_67C4(&qword_FC250);
  v2[5] = sub_1B6C8(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for ResponseMode(0LL);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[7] = v5;
  _BYTE v2[8] = sub_2B4DC(v5);
  v2[9] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_29560()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = type metadata accessor for SiriEnvironment(0LL);
  static SiriEnvironment.default.getter(v5);
  SiriEnvironment.currentRequest.getter();
  uint64_t v6 = sub_1BC50();
  CurrentRequest.responseMode.getter(v6);
  uint64_t v7 = sub_2B750();
  static ResponseMode.voiceOnly.getter(v7);
  uint64_t v8 = sub_2C08C();
  char v9 = static ResponseMode.== infix(_:_:)(v8);
  uint64_t v10 = *(os_log_s **)(v4 + 8);
  ((void (*)(uint64_t, uint64_t))v10)(v2, v3);
  ((void (*)(uint64_t, uint64_t))v10)(v1, v3);
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v11 = sub_1BD34();
  sub_5474(v11, (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v12 = sub_1BCD0();
  if (sub_2B854(v12))
  {
    uint64_t v13 = (_DWORD *)sub_1BA1C(8LL);
    *uint64_t v13 = 67109120;
    *(_DWORD *)(v0 + 80) = v9 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 84, v13 + 1, v13 + 2);
    sub_2C008( &dword_0,  v10,  (os_log_type_t)v1,  "[ResultSetProvider.makeWindowingConfiguration] Using windowing configuration = %{BOOL}d");
    sub_1B904((uint64_t)v13);
  }

  if ((v9 & 1) != 0)
  {
    uint64_t v14 = *(void *)(v0 + 40);
    *(void *)(v0 + 16) = *(void *)(v0 + 32);
    uint64_t v15 = sub_67C4(&qword_FC260);
    uint64_t v16 = _s17ResultSetProviderCMa();
    sub_2B2E8(&qword_FC268, v17, (uint64_t (*)(uint64_t))_s17ResultSetProviderCMa);
    static PromptFlowProviderType.continuation<A>(_:)(v0 + 16, v15, v16, v18);
    WindowingConfiguration.init(promptFlowProviderType:padding:windowSizeOverride:)( v14,  1LL,  0LL,  1LL,  (char *)&type metadata for () + 8,  v15);
    uint64_t v19 = 0LL;
  }

  else
  {
    uint64_t v19 = 1LL;
  }

  uint64_t v20 = *(void *)(v0 + 24);
  uint64_t v21 = sub_67C4(&qword_FC258);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v20, v19, 1LL, v21);
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  uint64_t v22 = (uint64_t (*)(void))sub_1BB00();
  return sub_2B64C(v22);
}

uint64_t sub_29774(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  void v3[9] = a1;
  return sub_2B82C((uint64_t)sub_29788);
}

void sub_29788()
{
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v3 = sub_1BD34();
  sub_5474(v3, (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v4 = sub_1BCD0();
  if (sub_1BB80(v4))
  {
    uint64_t v5 = (_WORD *)sub_1B9DC();
    sub_2BA04(v5);
    sub_1BAA8(&dword_0, v6, v7, "SearchTimer.ResultSetProvider executePatternForWindow");
    sub_1B904(v1);
  }

  uint64_t v8 = v2[11];

  id v9 = [*(id *)(v8 + 64) allAvailableTargets];
  if (v9)
  {
    uint64_t v10 = type metadata accessor for SiriDevice(0LL);
    unint64_t v11 = sub_2C0B8(v10);

    if (v11 >> 62)
    {
      sub_2B630();
      sub_2B930();
      sub_1BC04();
    }

    sub_1BC04();
  }

  unint64_t v12 = *(void *)(v2[11] + 104LL);
  if (v12 >> 62)
  {
    sub_1BD3C();
    sub_2C020();
    sub_1BC04();
  }

  uint64_t v13 = v2[10];
  uint64_t v14 = sub_2C044();
  v2[12] = sub_2C064(v14, v13);
  uint64_t v15 = sub_2BF0C();
  uint64_t v16 = Array<A>.analyzeGrouping()(v13, v15);
  if (v12)
  {
    sub_17C18();
    uint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v17 = sub_266D8(v16);
    sub_17E70();
  }

  v2[13] = v17;
  uint64_t v18 = *(void *)(v2[11] + 88LL);
  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0) {
      uint64_t v25 = *(void *)(v2[11] + 88LL);
    }
    else {
      uint64_t v25 = v18 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_2C044();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v25);
    sub_17E70();
  }

  else
  {
    uint64_t v19 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v19)
  {
    if (qword_FB408 != -1) {
      swift_once(&qword_FB408, sub_BB940);
    }
    WindowedPaginationParameters.isConclusion.getter();
    WindowedPaginationParameters.isFirstWindow.getter();
    WindowedPaginationParameters.isLastWindow.getter();
    WindowedPaginationParameters.isNextWindowLastWindow.getter();
    uint64_t v20 = unk_FEFA4;
    swift_retain();
    swift_retain();
    uint64_t v21 = (void *)swift_task_alloc(v20);
    v2[16] = v21;
    *uint64_t v21 = v2;
    v21[1] = sub_29BB0;
    sub_20788();
    __asm { BR              X8 }
  }

  if (qword_FB408 != -1) {
    swift_once(&qword_FB408, sub_BB940);
  }
  WindowedPaginationParameters.isConclusion.getter();
  WindowedPaginationParameters.isFirstWindow.getter();
  WindowedPaginationParameters.isLastWindow.getter();
  WindowedPaginationParameters.isNextWindowLastWindow.getter();
  uint64_t v23 = unk_FEF9C;
  uint64_t v26 = (char *)&dword_FEF98 + dword_FEF98;
  swift_retain();
  swift_retain();
  uint64_t v24 = (void *)swift_task_alloc(v23);
  v2[14] = v24;
  *uint64_t v24 = v2;
  v24[1] = sub_29B20;
  __asm { BR              X8 }

uint64_t sub_29B20(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v6 = v3;
  void v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  sub_1BC0C(&v6);
  v3[15] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v3[12]);
  sub_1B9B8();
  return sub_2B44C();
}

uint64_t sub_29B88()
{
  uint64_t v0 = sub_2BB58();
  return sub_2BB68(v0, v1);
}

uint64_t sub_29BB0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v6 = v3;
  v3[5] = v2;
  v3[6] = a1;
  v3[7] = v1;
  sub_1BC0C(&v6);
  v3[17] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v3[12]);
  sub_1B9B8();
  return sub_2B44C();
}

uint64_t sub_29C18()
{
  uint64_t v0 = sub_2BB58();
  return sub_2BB68(v0, v1);
}

uint64_t sub_29C40()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_29C68()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_29C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_67C4(&qword_FBD98);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_229D4((uint64_t)v8);
  id v9 = (int *)type metadata accessor for SearchForTimersHandledOtherMultiParameters(0LL);
  sub_2BC94(v9[16]);
  uint64_t v10 = sub_22A5C();
  uint64_t v11 = v9[15];
  swift_release();
  *(void *)(a1 + v11) = v10;
  unint64_t v12 = *(void **)(a2 + 64);
  SiriTimerType.toSpeakableString()([v12 type]);
  sub_1BCD8();
  sub_2B678((uint64_t)v8);
  sub_2BC94(v9[17]);
  SiriTimerState.toSpeakableString()([v12 state]);
  sub_2B678((uint64_t)v8);
  sub_2BC94(v9[14]);
  unint64_t v13 = *(void *)(a2 + 56);
  if (v13 >> 62)
  {
    sub_17C9C();
    uint64_t v14 = sub_2C020();
    sub_18034();
  }

  else
  {
    uint64_t v14 = *(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v15 = a1 + v9[18];
  *(double *)uint64_t v15 = (double)v14;
  *(_BYTE *)(v15 + 8) = 0;
  swift_retain();
  uint64_t result = sub_1BC50();
  *(void *)(a1 + 24) = a3;
  return result;
}

uint64_t sub_29DF4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  return v0;
}

uint64_t sub_29E40()
{
  return swift_deallocClassInstance(v0, 113LL, 7LL);
}

uint64_t _s17ResultSetProviderCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCV23TimerFlowDelegatePlugin11SearchTimer17ResultSetProvider);
}

uint64_t sub_29E80()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 56LL));
}

id sub_29E8C()
{
  return sub_22338();
}

uint64_t sub_29EAC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 80LL));
  return v1;
}

uint64_t sub_29EDC()
{
  uint64_t v1 = ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded()();
  return sub_2A160(*(uint64_t (**)(uint64_t))(v0 + 8), v0, v1);
}

uint64_t sub_29F14()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FC02C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2B3A4;
  return sub_22CA0();
}

uint64_t sub_29F5C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FC034);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2B3A4;
  return sub_23BB0();
}

uint64_t sub_29FA4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FC03C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2B3A4;
  return sub_269D4();
}

uint64_t sub_29FEC(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_FC05C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_2A040;
  return sub_294F8(a1);
}

uint64_t sub_2A040()
{
  return sub_1ECD4(v0[1]);
}

uint64_t sub_2A074(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)swift_task_alloc(dword_FC054);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_2B3A4;
  return sub_293B8(a1, v4);
}

uint64_t sub_2A0D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)swift_task_alloc(dword_FC044);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_2B3A4;
  return sub_2820C(a1, v4);
}

void sub_2A134(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_2A160(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_2A174(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_67C4(&qword_FBDB8);
  v2[4] = sub_1B6C8(*(void *)(v3 - 8));
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_2A1B8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for HALTimerDeviceContext(0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v1, 1LL, 1LL, v2);
  sub_6EB5C();
  sub_2BAAC(v3, &qword_FBDB8);
  sub_1BABC();
  uint64_t v4 = sub_2C058();
  return v5(v4);
}

uint64_t sub_2A230(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return sub_2B82C((uint64_t)sub_2A240);
}

uint64_t sub_2A240()
{
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v3 = sub_1BD34();
  sub_5474(v3, (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v4 = sub_2BFB4();
  if (sub_2B864(v4))
  {
    uint64_t v5 = (_WORD *)sub_1B9DC();
    sub_2B938(v5);
    sub_1BBEC( &dword_0,  v0,  (os_log_type_t)v1,  "SearchTimer.HandleIntentStrategy.makeIntentHandledResponse() called",  v2);
    sub_1B904((uint64_t)v2);
  }

  uint64_t v7 = (void *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (sub_1BB80(v8))
  {
    id v9 = (_WORD *)sub_1B9DC();
    sub_2BA04(v9);
    sub_1BAA8(&dword_0, v10, v11, "Timers #response enabled – allowing ResultSet output to handle rendering");
    sub_1B904(v1);
  }

  type metadata accessor for EmptyOutput(0LL);
  static EmptyOutput.instance.getter();
  unint64_t v12 = (uint64_t (*)(void))sub_1BB00();
  return sub_2B64C(v12);
}

uint64_t sub_2A33C(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_1BD34();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = sub_1B6C8(v4);
  uint64_t v5 = sub_2BD40();
  v2[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  _BYTE v2[8] = v6;
  v2[9] = sub_1B6C8(v6);
  uint64_t v7 = sub_2BD38();
  v2[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[11] = v8;
  v2[12] = sub_1B6C8(v8);
  uint64_t v9 = type metadata accessor for CATOption(0LL);
  v2[13] = sub_1B6C8(*(void *)(v9 - 8));
  uint64_t v10 = sub_2BB7C();
  v2[14] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[15] = v11;
  v2[16] = sub_1B6C8(v11);
  uint64_t v12 = sub_2BB74();
  v2[17] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[18] = v13;
  v2[19] = sub_1B6C8(v13);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_2A3F4()
{
  if (qword_FB130 != -1) {
    swift_once(&qword_FB130, sub_222F0);
  }
  uint64_t v30 = sub_5474(v2[4], (uint64_t)qword_FBFE0);
  sub_1BD20();
  os_log_type_t v4 = sub_1BCD0();
  if (sub_1BB80(v4))
  {
    uint64_t v5 = (_WORD *)sub_1B9DC();
    sub_2B938(v5);
    sub_1BBEC(&dword_0, v1, v0, "SearchTimer.HandleIntentStrategy.makeFailureHandlingIntentResponse() called", v3);
    sub_1B904((uint64_t)v3);
  }

  uint64_t v6 = v2[13];
  uint64_t v8 = v2[8];
  uint64_t v7 = v2[9];
  uint64_t v10 = v2[6];
  uint64_t v9 = v2[7];
  uint64_t v28 = v2[5];
  uint64_t v29 = v2[4];

  uint64_t v12 = static DialogPhase.error.getter(v11);
  NLContextUpdate.init()(v12);
  sub_2C0E4();
  static CATOption.defaultMode.getter();
  v2[20] = CATWrapper.__allocating_init(options:globals:)(v6, 0LL);
  uint64_t v13 = sub_67C4(&qword_FC320);
  uint64_t v14 = (void *)IntentResolutionRecord.intentResponse.getter(v13);
  v2[21] = v14;
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))( v7,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v10, v30, v29);
  uint64_t v15 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v7, v10, v15);
  uint64_t v16 = sub_32928(v14);
  if (v16)
  {
    if ((unint64_t)v16 >> 62)
    {
      if (v16 >= 0) {
        v16 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v16);
    }

    else
    {
      uint64_t v17 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8LL));
    }

    sub_2B758();
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  uint64_t v18 = sub_4DA14(v14);
  if (v18)
  {
    if ((unint64_t)v18 >> 62)
    {
      if (v18 >= 0) {
        v18 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    }

    else
    {
      uint64_t v19 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8LL));
    }

    sub_18034();
    if (!v17)
    {
      if (v19)
      {
        uint64_t v20 = (void *)swift_task_alloc(dword_100574);
        v2[25] = v20;
        *uint64_t v20 = v2;
        v20[1] = sub_2A748;
        sub_20788();
        return sub_ACD60();
      }

      goto LABEL_18;
    }

uint64_t sub_2A69C(uint64_t a1)
{
  v3[24] = v1;
  swift_task_dealloc(v6);
  sub_1BA24();
  if (v1)
  {
    sub_1B9B8();
    return sub_2B44C();
  }

  else
  {
    v3[29] = a1;
    uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v3[30] = v8;
    *uint64_t v8 = v2;
    v8[1] = sub_2A830;
    return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v3[2],  v3[19],  v3[16],  v3[12],  0LL);
  }

uint64_t sub_2A748()
{
  v2[26] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_1B9B8();
    return sub_20670();
  }

  else
  {
    v2[29] = v0;
    uint64_t v6 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[30] = v6;
    sub_2BA38(v6);
    return sub_20660();
  }

uint64_t sub_2A7BC()
{
  v2[28] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_1B9B8();
    return sub_20670();
  }

  else
  {
    v2[29] = v0;
    uint64_t v6 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[30] = v6;
    sub_2BA38(v6);
    return sub_20660();
  }

uint64_t sub_2A830()
{
  *(void *)(v1 + 248) = v0;
  swift_task_dealloc(v2);
  sub_1B9B8();
  return sub_1B758();
}

#error "2A8F0: call analysis failed (funcsize=36)"
#error "2A940: call analysis failed (funcsize=23)"
#error "2A99C: call analysis failed (funcsize=23)"
#error "2A9F8: call analysis failed (funcsize=23)"
#error "2AA5C: call analysis failed (funcsize=25)"
void sub_2AA84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  void *v5;
  uint64_t v2 = sub_67C4(&qword_FC320);
  uint64_t v5 = (void *)IntentResolutionRecord.intent.getter(v2);
  uint64_t v3 = type metadata accessor for SearchTimerIntent(0LL);
  uint64_t v4 = IntentTargetable.knownHomePodCount.getter(v3, &protocol witness table for SearchTimerIntent);

  *(double *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t sub_2AAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_C630;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_2AB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_C630;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_2ABF4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_FC32C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_C630;
  return sub_2A230(a1);
}

uint64_t sub_2AC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_C630;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_2ACC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_C630;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, a3, a4);
}

uint64_t sub_2AD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_FC31C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_C630;
  return sub_2A33C(a1, a2);
}

uint64_t sub_2AD94(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_FC334);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_2ADE8;
  return sub_2A174(a1, a2);
}

uint64_t sub_2ADE8(uint64_t a1)
{
  return v1[1](a1);
}

size_t sub_2AE2C(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_2AE48(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_2AE48(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_67C4(&qword_FC2C0);
  uint64_t v11 = *(void *)(type metadata accessor for SiriTimerSnippetModel(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_24;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SiriTimerSnippetModel(0LL) - 8) + 80LL);
  uint64_t v18 = (v17 + 32) & ~v17;
  unint64_t v19 = (unint64_t)v15 + v18;
  unint64_t v20 = a4 + v18;
  if ((v5 & 1) != 0)
  {
    sub_87DF0(v20, v8, v19);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_87EDC(v20, v8, v19);
  }

  swift_release();
  return (size_t)v15;
}

uint64_t sub_2AF88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimerGrouping(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16)
    && (uint64_t v7 = *(void *)(a2 + 40),
        sub_2B2E8(&qword_FC240, 255LL, (uint64_t (*)(uint64_t))&type metadata accessor for TimerGrouping),
        uint64_t v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8),
        uint64_t v10 = -1LL << *(_BYTE *)(a2 + 32),
        unint64_t v11 = v9 & ~v10,
        ((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0))
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v19 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(void *)(a2 + 48) + v13 * v11, v4);
      sub_2B2E8(&qword_FC248, 255LL, (uint64_t (*)(uint64_t))&type metadata accessor for TimerGrouping);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t sub_2B114()
{
  uint64_t v1 = sub_2BF2C();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_2B1A0()
{
  uint64_t v2 = sub_2BF2C();
  uint64_t v3 = *(void *)(v0
                 + ((*(void *)(*(void *)(v2 - 8) + 64LL)
  uint64_t v4 = (void *)swift_task_alloc(dword_FC28C);
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_2B224;
  uint64_t v5 = sub_2BFC4();
  return sub_28E44(v5, v6, v3);
}

uint64_t sub_2B224()
{
  uint64_t v1 = sub_2C058();
  return sub_2B748(v1, v2);
}

uint64_t sub_2B260(uint64_t a1)
{
  return sub_28168(a1, *(void *)(v1 + 16));
}

uint64_t sub_2B268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriTimerSnippetModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_2B2AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_2BBC0(*(void *)(v2 - 8));
  sub_17DD4();
}

uint64_t sub_2B2DC(uint64_t a1)
{
  return sub_2690C(a1, v1[2], v1[3], v1[4]);
}

void sub_2B2E8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v4 = a3(a2);
    atomic_store(sub_2C0AC(v4), a1);
  }

  sub_17DD4();
}

ValueMetadata *_s20HandleIntentStrategyVMa_0()
{
  return &_s20HandleIntentStrategyVN_0;
}

unint64_t sub_2B330()
{
  unint64_t result = qword_FC2D8[0];
  if (!qword_FC2D8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_C29C8, &_s20HandleIntentStrategyVN_0);
    atomic_store(result, qword_FC2D8);
  }

  return result;
}

void sub_2B36C(uint64_t a1)
{
}

void sub_2B374(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_67C4(a2);
  sub_2BBC0(*(void *)(v2 - 8));
  sub_17DD4();
}

uint64_t sub_2B3AC(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_2B410(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_2B44C()
{
  return swift_task_switch();
}

uint64_t sub_2B454()
{
  return swift_task_dealloc(*(void *)(v0 + 392));
}

uint64_t sub_2B474(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_2B490(uint64_t (*a1)(void))
{
  return a1();
}

void sub_2B4AC()
{
}

uint64_t sub_2B4DC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_2B4F0(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

  ;
}

  ;
}

uint64_t sub_2B538()
{
  return swift_task_dealloc(*(void *)(v0 + 488));
}

uint64_t sub_2B594()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_2B5A0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_2B5AC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_2B5B8(uint64_t a1)
{
}

uint64_t sub_2B5C0(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_2B5C8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_2B5E4()
{
  return ((uint64_t (*)(void))DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:))();
}

uint64_t sub_2B600(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_2B61C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_2B630()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_2B644(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_2B64C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_2B654(void *a1)
{
  return Output.generateFlow()(v1, v2);
}

uint64_t sub_2B678(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 0LL, 1LL, v1);
}

uint64_t sub_2B688@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_2B694()
{
  uint64_t v2 = *(void **)(v0 + 888);
  *(void *)(v1 - 80) = *(void *)(v0 + 848);
}

  ;
}

uint64_t sub_2B714@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  return swift_task_dealloc(a1);
}

void sub_2B71C()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_2B72C()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_2B73C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_2B748(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_2B750()
{
  return swift_release(v0);
}

uint64_t sub_2B758()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_2B798()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 80) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_2B7C4()
{
  return swift_bridgeObjectRelease(v0);
}

id sub_2B7CC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_2B7D4()
{
}

void sub_2B800()
{
}

uint64_t sub_2B82C(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_2B838(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_2B844( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, a9);
}

BOOL sub_2B854(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_2B864(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_2B874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8 = va_arg(va1, void);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, a3, a4);
}

uint64_t sub_2B884()
{
  return sub_5A788();
}

uint64_t sub_2B8A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_2B8BC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_2B8D8()
{
  return *(void *)(v0 - 80);
}

uint64_t sub_2B8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

  ;
}

uint64_t sub_2B920( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a17 + 8))(a20, a19);
}

uint64_t sub_2B930()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

_WORD *sub_2B938(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_2B944@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_2B950@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_2B95C(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_2B980()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_2B988@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

void sub_2B990(uint64_t a1)
{
}

uint64_t sub_2B998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void sub_2B9B0(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
}

void sub_2B9B8()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_2B9C8()
{
}

uint64_t sub_2B9E8@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_2B9F4()
{
  return Output.generateFlow()();
}

uint64_t sub_2B9FC()
{
  return swift_bridgeObjectRelease(v0);
}

_WORD *sub_2BA04(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

id sub_2BA10()
{
  return v1;
}

BOOL sub_2BA2C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_2BA38(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t sub_2BA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_33530(a1, a2, a3);
}

uint64_t sub_2BA6C()
{
  return ((uint64_t (*)(void))DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:))();
}

uint64_t sub_2BA7C(uint64_t a1)
{
  return sub_F87C(v1, a1);
}

uint64_t sub_2BA88()
{
  *(void *)(v2 + 16) = (v0 - 32) | 0x8000000000000000LL;
  return v1;
}

void sub_2BAAC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_2BAB4(uint64_t a1)
{
  *(void *)(v2 + 568) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v2 + 576, v1, v4);
}

BOOL sub_2BAD0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_2BAE0()
{
  return swift_task_dealloc(*(void *)(v0 + 152));
}

uint64_t sub_2BAF8()
{
  return swift_retain(v0);
}

uint64_t sub_2BB10@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_2BB30()
{
  return swift_release(v0);
}

uint64_t sub_2BB38()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_2BB40()
{
  *(void *)(v1 - 8) = *v0;
}

id sub_2BB50@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_2BB58()
{
  return v0;
}

uint64_t sub_2BB68(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_2BB74()
{
  return type metadata accessor for DialogPhase(0LL);
}

uint64_t sub_2BB7C()
{
  return type metadata accessor for NLContextUpdate(0LL);
}

  ;
}

uint64_t sub_2BB94()
{
  return static TimerSessionManager.shared.getter();
}

uint64_t sub_2BBA0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v2, v1, v3);
}

  ;
}

uint64_t sub_2BBC0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

  ;
}

uint64_t sub_2BBE8(uint64_t a1)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, a1);
}

uint64_t sub_2BBFC(uint64_t a1)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, a1);
}

uint64_t sub_2BC10(uint64_t a1)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, a1);
}

uint64_t sub_2BC24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, a11, v13);
}

void *sub_2BC38(uint64_t a1)
{
  return sub_22A5C();
}

uint64_t sub_2BC5C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_2BC64(void *a1)
{
  *(void *)(v2 + 72) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t sub_2BC80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 8))(v10, a10);
}

uint64_t sub_2BC94@<X0>(uint64_t a1@<X8>)
{
  return sub_1B4F4(v2, v1 + a1);
}

uint64_t sub_2BCA0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_2BCB4()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_2BCC0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 104))(v1);
}

uint64_t sub_2BCCC()
{
  return PatternExecutionResult.generateFlow(manifest:measure:)();
}

uint64_t sub_2BCD4(uint64_t a1)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

uint64_t sub_2BCDC()
{
  return SiriTimerType.rawValue.getter(2LL);
}

uint64_t sub_2BCE4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v0, v3);
}

uint64_t sub_2BCF8()
{
  *(void *)(v2 + 16) = (v0 - 32) | 0x8000000000000000LL;
  return v1;
}

uint64_t sub_2BD14()
{
  *(void *)(v2 + 16) = (v0 - 32) | 0x8000000000000000LL;
  return v1;
}

id sub_2BD30(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_2BD38()
{
  return type metadata accessor for SiriTimeMeasurement(0LL);
}

uint64_t sub_2BD40()
{
  return type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
}

void sub_2BD48()
{
}

uint64_t sub_2BD5C()
{
  *uint64_t v1 = v2;
  return swift_storeEnumTagMultiPayload(v1, v0, 0LL);
}

BOOL sub_2BD70(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_2BD90(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t sub_2BDA0()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_2BDB0()
{
  return sub_683C(v1, v0, (uint64_t *)(v2 + 24));
}

uint64_t sub_2BDC0()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_2BDC8()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_2BDD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a14 + 8))(a16, a15);
}

BOOL sub_2BDE0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_2BDF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

uint64_t sub_2BE00()
{
  return Logger.logObject.getter();
}

uint64_t sub_2BE08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void *sub_2BE20@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_2BE2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return (*(uint64_t (**)(void, uint64_t))(a19 + 8))(*(void *)(v20 - 80), a20);
}

uint64_t sub_2BE3C()
{
  return swift_retain(*(void *)(v0 + 8 * v1 + 32));
}

uint64_t sub_2BE4C()
{
  return Logger.logObject.getter();
}

uint64_t sub_2BE54()
{
  return swift_release(v0);
}

uint64_t sub_2BE5C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_2BE64(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

uint64_t sub_2BE74()
{
  return swift_release(*(void *)(v0 + 104));
}

uint64_t sub_2BE7C()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_2BE88()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_2BE94()
{
  return swift_release(v0);
}

uint64_t sub_2BE9C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_2BEA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return a17;
}

uint64_t sub_2BEB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a9;
}

uint64_t sub_2BEC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a15 + 8))(a18, a16);
}

uint64_t sub_2BED4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a18, a16);
}

void *sub_2BEE4()
{
  return sub_DB90(v0);
}

uint64_t sub_2BEEC()
{
  return CATWrapperSimple.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t sub_2BEFC()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t sub_2BF0C()
{
  return type metadata accessor for SiriTimer(0LL);
}

void sub_2BF14()
{
}

uint64_t sub_2BF24()
{
  return type metadata accessor for SiriTimerSnippetModel(0LL);
}

uint64_t sub_2BF2C()
{
  return type metadata accessor for WindowedPaginationParameters(0LL);
}

uint64_t sub_2BF34()
{
  return type metadata accessor for OutputGenerationManifest(0LL);
}

void sub_2BF3C()
{
  *(void *)(v0 + 320) = *(void *)(v0 + 624);
}

  ;
}

  ;
}

void *sub_2BF84(uint64_t a1, uint64_t a2)
{
  return sub_303F8(a1, a2);
}

void sub_2BF8C()
{
}

uint64_t sub_2BF9C(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 0LL, 1LL, v1);
}

void sub_2BFAC(uint64_t a1)
{
  *(void *)(v2 - 80) = a1;
}

uint64_t sub_2BFB4()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_2BFBC(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

uint64_t sub_2BFC4()
{
  return v0;
}

void *sub_2BFD0()
{
  return sub_DB90(v0);
}

uint64_t sub_2BFD8()
{
  return Logger.logObject.getter();
}

uint64_t sub_2BFE0()
{
  return type metadata accessor for TimerBaseCATsSimple(0LL);
}

uint64_t sub_2BFEC()
{
  return SiriTimerState.toSpeakableString()();
}

uint64_t sub_2BFF4()
{
  return SiriTimerType.toSpeakableString()();
}

uint64_t sub_2BFFC()
{
  return static DialogPhase.completion.getter();
}

void sub_2C008(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_2C014()
{
  return swift_task_dealloc(*(void *)(v0 + 64));
}

uint64_t sub_2C020()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

void sub_2C028()
{
}

uint64_t sub_2C034(uint64_t a1)
{
  return specialized ContiguousArray._endMutation()(a1);
}

uint64_t sub_2C03C()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_2C044()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_2C04C()
{
}

uint64_t sub_2C058()
{
  return v0;
}

void *sub_2C064(uint64_t a1, uint64_t a2)
{
  return sub_303F8(a1, a2);
}

void sub_2C070()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_2C084()
{
  return swift_task_alloc(v0);
}

uint64_t sub_2C08C()
{
  return v0;
}

void sub_2C098()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_2C0AC(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_2C0B8(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

uint64_t sub_2C0C4(uint64_t a1)
{
  return sub_F87C(v1, a1);
}

uint64_t sub_2C0D0()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_2C0DC()
{
  return ResponseFactory.init()();
}

uint64_t sub_2C0E4()
{
  return type metadata accessor for TimerBaseCATPatternsExecutor(0LL);
}

uint64_t sub_2C0EC()
{
  return type metadata accessor for TimerSessionManager(0LL);
}

uint64_t sub_2C0F4()
{
  return type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
}

void sub_2C0FC(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  sub_EE84();
}

uint64_t sub_2C108@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_2C110(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for PauseTimerCATsSimple,  (uint64_t (*)(char *, void))&CATWrapperSimple.__allocating_init(options:globals:),  &qword_100E18);
}

uint64_t sub_2C12C(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for PauseTimerCATs_Async,  (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:),  &qword_100E20);
}

uint64_t sub_2C148(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for PauseTimerCATPatternsExecutor,  (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:),  &qword_100E28);
}

uint64_t sub_2C164( uint64_t a1, void (*a2)(void), uint64_t (*a3)(char *, void), uint64_t *a4)
{
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2(0LL);
  static CATOption.defaultMode.getter();
  uint64_t result = a3(v8, 0LL);
  *a4 = result;
  return result;
}

uint64_t type metadata accessor for SetTimerAttributeCATsSimple(uint64_t a1)
{
  uint64_t result = qword_FC338;
  if (!qword_FC338) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SetTimerAttributeCATsSimple);
  }
  return result;
}

uint64_t sub_2C224(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100E30);
}

uint64_t sub_2C260(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  return swift_task_switch(sub_2C27C, 0LL, 0LL);
}

uint64_t sub_2C27C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = swift_allocObject(v2, 128LL, 7LL);
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C27E0;
  *(void *)(v3 + 32) = 0x6954746567726174LL;
  *(void *)(v3 + 40) = 0xEB0000000072656DLL;
  if (v1)
  {
    uint64_t v4 = type metadata accessor for TimerTimer(0LL);
    uint64_t v5 = v1;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v4 = 0LL;
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  uint64_t v6 = v0[3];
  *(void *)(v3 + 48) = v5;
  *(void *)(v3 + 72) = v4;
  strcpy((char *)(v3 + 80), "updatedTimer");
  *(_BYTE *)(v3 + 93) = 0;
  *(_WORD *)(v3 + 94) = -5120;
  uint64_t v7 = 0LL;
  if (v6)
  {
    uint64_t v7 = type metadata accessor for TimerTimer(0LL);
  }

  else
  {
    *(void *)(v3 + 104) = 0LL;
    *(void *)(v3 + 112) = 0LL;
  }

  *(void *)(v3 + 96) = v6;
  *(void *)(v3 + 120) = v7;
  uint64_t v8 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  swift_retain();
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v0[6] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_2C3D0;
  return v11(0xD000000000000027LL, 0x80000000000C7460LL, v3);
}

uint64_t sub_2C3D0(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 48);
  uint64_t v5 = *v2;
  *(void *)(v5 + 56) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_2C458, 0LL, 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v5 + 40));
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_2C458()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2C48C()
{
  return type metadata accessor for SetTimerAttributeCATsSimple(0LL);
}

ValueMetadata *_s20HandleIntentStrategyVMa_1()
{
  return &_s20HandleIntentStrategyVN_1;
}

uint64_t sub_2C4A4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FC390);
  sub_5474(v0, (uint64_t)qword_FC390);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_2C4EC(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_67C4(&qword_FBDB8);
  v2[4] = sub_1B6C8(*(void *)(v3 - 8));
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_2C530()
{
  uint64_t v1 = type metadata accessor for HALTimerDeviceContext(0LL);
  sub_2F6C0(v1);
  sub_6EB5C();
  uint64_t v3 = v2;
  sub_2F77C(v2, &qword_FBDB8);
  sub_1BABC();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_2C59C(uint64_t a1, uint64_t a2)
{
  v2[33] = a1;
  v2[34] = a2;
  uint64_t v3 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[35] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[36] = v4;
  v2[37] = sub_1B6C8(v4);
  uint64_t v5 = sub_67C4(&qword_FBD98);
  v2[38] = sub_1B6C8(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for SetTimerAttributeHandledOnWatchParameters(0LL);
  v2[39] = v6;
  v2[40] = sub_1B6C8(*(void *)(v6 - 8));
  uint64_t v7 = sub_67C4(&qword_FC418);
  v2[41] = sub_2B4DC(*(void *)(v7 - 8));
  v2[42] = sub_1B970();
  uint64_t v8 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v2[43] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[44] = v9;
  v2[45] = sub_1B6C8(v9);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v2[46] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[47] = v11;
  v2[48] = sub_1B6C8(v11);
  uint64_t v12 = type metadata accessor for DialogPhase(0LL);
  v2[49] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[50] = v13;
  v2[51] = sub_2B4DC(v13);
  v2[52] = sub_1B970();
  uint64_t v14 = type metadata accessor for Logger(0LL);
  v2[53] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[54] = v15;
  v2[55] = sub_1B6C8(v15);
  uint64_t v16 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v2[56] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[57] = v17;
  v2[58] = sub_1B6C8(v17);
  uint64_t v18 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[59] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v2[60] = v19;
  v2[61] = sub_2B4DC(v19);
  v2[62] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_2C718()
{
  if (qword_FB150 != -1) {
    swift_once(&qword_FB150, sub_2C4A4);
  }
  uint64_t v2 = sub_5474(*(void *)(v1 + 424), (uint64_t)qword_FC390);
  *(void *)(v1 + 504) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_WORD *)sub_1B9DC();
    sub_2BA04(v5);
    _os_log_impl(&dword_0, v3, v4, "SetTimerAttribute.HandleIntentStrategy.makeIntentHandledResponse() called", v0, 2u);
    sub_2F5C0();
  }

  uint64_t v6 = sub_67C4(&qword_FC400);
  uint64_t v7 = (void *)IntentResolutionRecord.intentResponse.getter(v6);
  id v8 = [v7 updatedTimer];
  *(void *)(v1 + 512) = v8;

  if (v8)
  {
    uint64_t v10 = v1 + 56;
    ((void (*)(void))static AceService.currentAsync.getter)();
    uint64_t v11 = *(void *)(v1 + 40);
    uint64_t v12 = *(void *)(v1 + 48);
    sub_8CFC((void *)(v1 + 16), v11);
    ((void (*)(uint64_t, uint64_t))dispatch thunk of AceServiceInvokerAsync.currentStartRequestId())(v11, v12);
    uint64_t v14 = v13;
    _s20HandleIntentStrategyVwxx_0((void *)(v1 + 16));
    if (v14)
    {
      uint64_t v15 = *(void *)(v1 + 496);
      uint64_t v16 = *(void *)(v1 + 464);
      uint64_t v94 = *(void *)(v1 + 480);
      uint64_t v98 = *(void *)(v1 + 472);
      uint64_t v17 = *(void *)(v1 + 432);
      uint64_t v18 = *(void *)(v1 + 440);
      uint64_t v19 = *(void *)(v1 + 424);
      (*(void (**)(uint64_t, void, void))(*(void *)(v1 + 456) + 104LL))( v16,  enum case for SiriTimeMeasurement.LogDescription.siriSuggestionsDonation(_:),  *(void *)(v1 + 448));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v18, v2, v19);
      uint64_t v20 = mach_absolute_time();
      SiriTimeMeasurement.init(_:log:startTime:)(v16, v18, v20);
      sub_67C4(&qword_FC420);
      uint64_t v21 = sub_2F768();
      uint64_t v23 = Dictionary.init(dictionaryLiteral:)(v21, v22);
      uint64_t v24 = sub_2F768();
      uint64_t v10 = v1 + 56;
      uint64_t v26 = Dictionary.init(dictionaryLiteral:)(v24, v25);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v23);
      sub_18034();
      SiriTimeMeasurement.logDelta()();
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v15, v98);
    }

    uint64_t v27 = (void *)IntentResolutionRecord.intent.getter(v6);
    *(void *)(v1 + 520) = v27;
    static DialogPhase.completion.getter(v27);
    uint64_t v28 = sub_67C4(&qword_FBE58);
    *(void *)(v1 + 528) = v28;
    uint64_t inited = swift_initStackObject(v28, v10);
    *(_OWORD *)(inited + 16) = xmmword_C2690;
    *(void *)(inited + 32) = v8;
    specialized Array._endMutation()(inited, v30, v31, v32, v33, v34, v35, v36);
    id v37 = v8;
    sub_C7A0();
    sub_18034();
    id v38 = [v27 targetTimer];
    if (v38)
    {
      uint64_t v39 = v38;
      sub_D378();
      uint64_t v41 = v40;
    }

    else
    {
      uint64_t v41 = 0LL;
    }

    *(void *)(v1 + 536) = v41;
    sub_D378();
    *(void *)(v1 + 544) = v84;
    type metadata accessor for TimerSessionManager(0LL);
    static TimerSessionManager.shared.getter((void *)(v1 + 96));
    uint64_t v85 = *(void *)(v1 + 120);
    uint64_t v86 = *(void *)(v1 + 128);
    sub_8CFC((void *)(v1 + 96), v85);
    uint64_t v87 = sub_58E1C(v37);
    uint64_t v89 = v88;
    *(void *)(v1 + 552) = v88;
    uint64_t v90 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
    *(void *)(v1 + 560) = v90;
    *uint64_t v90 = v1;
    v90[1] = sub_2CB70;
    return dispatch thunk of SessionManaging.sessionIDString(for:)(v87, v89, v85, v86);
  }

  else
  {
    uint64_t v42 = (void *)Logger.logObject.getter(v9);
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (sub_1BB80(v43))
    {
      uint64_t v44 = (_WORD *)sub_1B9DC();
      sub_2BA04(v44);
      sub_1BAA8(&dword_0, v45, v46, "Intent Handled dialog called but no timer was updated");
      sub_2F5C0();
    }

    sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v47 = sub_1E324();
    uint64_t v48 = sub_2F6A0(v47);
    *uint64_t v49 = 5;
    uint64_t v91 = v48;
    swift_willThrow(v48, v49, v50, v51, v52, v53, v54, v55);
    uint64_t v56 = sub_2F5EC();
    uint64_t v95 = v58;
    uint64_t v99 = v57;
    uint64_t v101 = *(void *)(v1 + 296);
    swift_task_dealloc(v56);
    sub_1B86C();
    sub_1BA24();
    sub_1BA14();
    sub_1BA38();
    sub_1B838();
    sub_1BA8C();
    sub_1BA60();
    sub_1BAD0();
    uint64_t v59 = sub_1BABC();
    uint64_t v67 = sub_1B910(v59, v60, v61, v62, v63, v64, v65, v66, v91, v95);
    uint64_t v75 = sub_1B8C4(v67, v68, v69, v70, v71, v72, v73, v74, v92, v96, v99);
    sub_1B8BC(v75, v76, v77, v78, v79, v80, v81, v82, v93, v97, v100, v101);
    return sub_2F3C8(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_2CB70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 560);
  *(void *)(v3 + 568) = a1;
  *(void *)(v3 + 576) = a2;
  sub_2B988(v4);
  sub_18034();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_2CBF4()
{
  uint64_t v1 = *(void *)(v0 + 576);
  uint64_t v162 = *(void *)(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v142 = *(void *)(v0 + 456);
  uint64_t v147 = *(void *)(v0 + 448);
  uint64_t v152 = *(void *)(v0 + 432);
  uint64_t v157 = *(void *)(v0 + 424);
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 96));
  uint64_t v4 = type metadata accessor for ApplicationContext(0LL);
  static ApplicationContext.shared.getter(v4);
  ApplicationContext.deviceState.getter((void *)(v0 + 136));
  sub_1BC50();
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 168);
  sub_8CFC((void *)(v0 + 136), v5);
  uint64_t v7 = v6;
  uint64_t v8 = v1;
  int v9 = dispatch thunk of DeviceState.isWatch.getter(v5, v7) & (v1 != 0);
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 136));
  (*(void (**)(uint64_t, void, uint64_t))(v142 + 104))( v2,  enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:),  v147);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 16))(v3, v162, v157);
  uint64_t v10 = mach_absolute_time();
  uint64_t v11 = SiriTimeMeasurement.init(_:log:startTime:)(v2, v3, v10);
  static ApplicationContext.shared.getter(v11);
  ApplicationContext.deviceState.getter((void *)(v0 + 176));
  sub_1BC50();
  uint64_t v12 = *(void *)(v0 + 200);
  uint64_t v13 = *(void *)(v0 + 208);
  sub_8CFC((void *)(v0 + 176), v12);
  uint64_t v14 = dispatch thunk of DeviceState.isWatch.getter(v12, v13);
  uint64_t v15 = _s20HandleIntentStrategyVwxx_0((void *)(v0 + 176));
  if ((v14 & 1) != 0 && !v9)
  {
    uint64_t v16 = sub_2F714();
    Logger.logObject.getter(v16);
    os_log_type_t v17 = sub_1BCD0();
    if (sub_1BB80(v17))
    {
      uint64_t v18 = (_WORD *)sub_1B9DC();
      sub_2BA04(v18);
      sub_1BAA8( &dword_0,  v19,  v20,  "[SetTimerAttribute.HandleIntentStrategy.makeIntentHandledResponse] Using watchOS pattern");
      sub_2F5C0();
    }

    uint64_t v21 = *(void *)(v0 + 528);
    uint64_t v22 = *(void **)(v0 + 512);

    uint64_t v23 = swift_allocObject(v21, 40LL, 7LL);
    *(_OWORD *)(v23 + 16) = xmmword_C2690;
    *(void *)(v23 + 32) = v22;
    uint64_t v168 = v23;
    specialized Array._endMutation()(v23, v24, v25, v26, v27, v28, v29, v30);
    id v31 = v22;
    id v32 = sub_4C75C(v168, 0xDu);
    *(void *)(v0 + 688) = v32;
    uint64_t v33 = sub_18034();
    if (v32)
    {
      uint64_t v34 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
      *(void *)(v0 + 256) = 0LL;
      id v35 = [v34 archivedDataWithRootObject:v32 requiringSecureCoding:1 error:v0 + 256];
      id v36 = *(id *)(v0 + 256);
      if (v35)
      {
        uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
        unint64_t v39 = v38;

        *(void *)(v0 + 696) = v37;
        *(void *)(v0 + 704) = v39;
        if (qword_FB250 != -1) {
          swift_once(&qword_FB250, sub_6CDA8);
        }
        uint64_t v40 = *(void *)(v0 + 544);
        uint64_t v41 = *(void *)(v0 + 536);
        uint64_t v43 = *(void *)(v0 + 312);
        uint64_t v42 = *(void **)(v0 + 320);
        uint64_t v44 = *(void *)(v0 + 304);
        swift_retain();
        swift_retain();
        sub_21418(v37, v39);
        *uint64_t v42 = 0LL;
        v42[1] = 0LL;
        uint64_t v45 = (uint64_t)v42 + *(int *)(v43 + 24);
        type metadata accessor for SpeakableString(0LL);
        sub_2F75C(v45, 1LL);
        Swift::String v46 = Data.base64EncodedString(options:)(0LL);
        SpeakableString.init(serializedValue:)(v46._countAndFlagsBits, v46._object);
        sub_2F75C(v44, 0LL);
        sub_1B4F4(v44, v45);
        swift_retain();
        swift_release();
        *uint64_t v42 = v41;
        swift_retain();
        sub_2BB30();
        v42[1] = v40;
        sub_5A950();
        *(void *)(v0 + 712) = v47;
        *(void *)(v0 + 720) = v48;
        *uint64_t v48 = v0;
        v48[1] = sub_2DA94;
        sub_2F678();
        __asm { BR              X3 }
      }

      uint64_t v92 = v36;
      uint64_t v93 = *(void **)(v0 + 520);
      uint64_t v94 = *(void **)(v0 + 512);
      uint64_t v95 = *(void *)(v0 + 480);
      uint64_t v96 = *(void *)(v0 + 472);
      uint64_t v134 = *(void *)(v0 + 400);
      uint64_t v138 = *(void *)(v0 + 488);
      uint64_t v166 = *(void *)(v0 + 384);
      uint64_t v143 = *(void *)(v0 + 392);
      uint64_t v148 = *(void *)(v0 + 376);
      uint64_t v158 = *(void *)(v0 + 416);
      uint64_t v163 = *(void *)(v0 + 368);
      uint64_t v97 = _convertNSErrorToError(_:)(v36);

      uint64_t v153 = v97;
      swift_willThrow(v98, v99, v100, v101, v102, v103, v104, v105);

      sub_2BB30();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v138, v96);
      uint64_t v81 = v134;
    }

    else
    {
      uint64_t v62 = *(void **)(v0 + 504);
      Logger.logObject.getter(v33);
      os_log_type_t v63 = sub_1BCD0();
      if (sub_1BB80(v63))
      {
        uint64_t v64 = (_WORD *)sub_1B9DC();
        sub_2BA04(v64);
        sub_1BAA8( &dword_0,  v65,  v66,  "[SetTimerAttribute.HandleIntentStrategy.makeIntentHandledResponse] Could not get timer action from timer.");
        sub_2F5C0();
      }

      uint64_t v67 = *(void **)(v0 + 520);
      uint64_t v68 = *(void **)(v0 + 512);
      uint64_t v69 = *(void *)(v0 + 480);
      uint64_t v70 = *(void *)(v0 + 488);
      uint64_t v71 = *(void *)(v0 + 472);
      uint64_t v138 = *(void *)(v0 + 400);
      uint64_t v143 = *(void *)(v0 + 392);
      uint64_t v166 = *(void *)(v0 + 384);
      uint64_t v148 = *(void *)(v0 + 376);
      uint64_t v158 = *(void *)(v0 + 416);
      uint64_t v163 = *(void *)(v0 + 368);

      sub_67C4((uint64_t *)&unk_FF830);
      unint64_t v72 = sub_1E324();
      uint64_t v73 = sub_2F6A0(v72);
      *uint64_t v74 = 1;
      uint64_t v153 = v73;
      swift_willThrow(v73, v74, v75, v76, v77, v78, v79, v80);

      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v71);
      uint64_t v81 = v138;
    }

    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v158, v143);
    sub_2F720(v148, v134, v138, v143, v148, v153, v158, v163, v166);
    uint64_t v106 = sub_2F5EC();
    uint64_t v159 = v108;
    uint64_t v164 = v107;
    uint64_t v167 = *(void *)(v0 + 296);
    swift_task_dealloc(v106);
    sub_1B86C();
    sub_1BA24();
    sub_1BA14();
    sub_1BA38();
    sub_1B838();
    sub_1BA8C();
    sub_1BA60();
    sub_1BAD0();
    uint64_t v109 = sub_1BABC();
    uint64_t v117 = sub_1B864(v109, v110, v111, v112, v113, v114, v115, v116, v135, v139, v144, v149, v154, v159);
    uint64_t v125 = sub_1B874(v117, v118, v119, v120, v121, v122, v123, v124, v136, v140, v145, v150, v155, v160, v164);
    sub_1B8AC(v125, v126, v127, v128, v129, v130, v131, v132, v137, v141, v146, v151, v156, v161, v165, v167);
    sub_2F678();
    __asm { BR              X0 }
  }

  uint64_t v51 = *(void *)(v0 + 352);
  uint64_t v50 = *(void **)(v0 + 360);
  uint64_t v52 = *(void *)(v0 + 344);
  static SiriTimeFeatureFlagsImpl.instance.getter(v15);
  Swift::Bool v53 = SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
  (*(void (**)(void *, uint64_t))(v51 + 8))(v50, v52);
  if (!v53)
  {
    uint64_t v55 = sub_2F714();
    Logger.logObject.getter(v55);
    os_log_type_t v56 = sub_1BCD0();
    if (sub_1BB80(v56))
    {
      uint64_t v57 = (_WORD *)sub_1B9DC();
      sub_2BA04(v57);
      sub_1BAA8( &dword_0,  v58,  v59,  "[SetTimerAttribute.HandleIntentStrategy.makeIntentHandledResponse] Using non-watchOS pattern");
      sub_2F5C0();
    }

    if (qword_FB250 != -1) {
      swift_once(&qword_FB250, sub_6CDA8);
    }
    swift_retain();
    sub_2F740();
    uint64_t v60 = (void *)sub_2C084();
    *(void *)(v0 + 648) = v60;
    *uint64_t v60 = v0;
    v60[1] = sub_2D88C;
    sub_2F678();
    __asm { BR              X3 }
  }

  if (v9)
  {
    uint64_t v54 = sub_2F784();
    sub_2F6C0(v54);
LABEL_22:
    if (qword_FB248 != -1) {
      swift_once(&qword_FB248, sub_6CD8C);
    }
    sub_2F740();
    uint64_t v87 = (void *)sub_2C084();
    *(void *)(v0 + 584) = v87;
    uint64_t v88 = sub_2D41C;
    goto LABEL_25;
  }

  uint64_t v82 = *(uint64_t **)(v0 + 336);
  uint64_t v83 = sub_67C4(&qword_FC2C0);
  uint64_t v84 = type metadata accessor for SiriTimerSnippetModel(0LL);
  uint64_t v85 = swift_allocObject( v83,  ((*(unsigned __int8 *)(*(void *)(v84 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v84 - 8) + 80LL))
        + *(void *)(*(void *)(v84 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v84 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v85 + 16) = xmmword_C2640;
  sub_EE84();
  *uint64_t v82 = v85;
  uint64_t v86 = sub_2F784();
  swift_storeEnumTagMultiPayload(v82, v86, 0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v82, 0LL, 1LL, v86);
  if (v8) {
    goto LABEL_22;
  }
  if (qword_FB248 != -1) {
    swift_once(&qword_FB248, sub_6CD8C);
  }
  sub_2F740();
  uint64_t v87 = (void *)sub_2C084();
  *(void *)(v0 + 616) = v87;
  uint64_t v88 = sub_2D648;
LABEL_25:
  *uint64_t v87 = v0;
  v87[1] = v88;
  sub_2F678();
  return sub_2C260(v89, v90);
}

uint64_t sub_2D41C(uint64_t a1)
{
  v2[74] = v1;
  swift_task_dealloc(v6);
  swift_release();
  if (v1)
  {
    sub_18034();
    sub_1B9B8();
    return sub_2F414(v7, v8, v9);
  }

  else
  {
    v2[75] = a1;
    uint64_t v11 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)[1]);
    v2[76] = v11;
    *uint64_t v11 = v3;
    v11[1] = sub_2D518;
    uint64_t v12 = sub_2F6FC();
    return DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)( v12,  v13,  v14,  v15,  v16,  v17,  0LL,  0LL);
  }

uint64_t sub_2D518()
{
  uint64_t v1 = *(void **)(v0 + 600);
  sub_2B4F0(*(void *)(v0 + 608));
  sub_18034();

  sub_1B9B8();
  return sub_2F414(v2, v3, v4);
}

#error "2D5F8: call analysis failed (funcsize=45)"
uint64_t sub_2D648()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_1BBCC();
  uint64_t v2 = v0[77];
  v0[78] = v3;
  v0[79] = v1;
  sub_2B988(v2);
  swift_release();
  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_2D6F4()
{
  uint64_t v1 = *(void *)(v0 + 328);
  sub_2F27C(*(void *)(v0 + 336), v1);
  uint64_t v2 = sub_2F784();
  uint64_t v3 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v1, 1LL, v2);
  uint64_t v4 = *(void *)(v0 + 328);
  if ((_DWORD)v3 == 1)
  {
    sub_2F77C(v3, &qword_FC418);
    *(_OWORD *)(v0 + 216) = 0u;
    *(_OWORD *)(v0 + 232) = 0u;
    *(void *)(v0 + 248) = 0LL;
  }

  else
  {
    *(void *)(v0 + 240) = v2;
    *(void *)(v0 + 248) = sub_F0D4();
    uint64_t v5 = sub_DB90((void *)(v0 + 216));
    sub_2F2C4(v4, (uint64_t)v5);
  }

  uint64_t v6 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  *(void *)(v0 + 640) = v6;
  void *v6 = v0;
  v6[1] = sub_2D80C;
  return DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)( *(void *)(v0 + 264),  *(void *)(v0 + 416),  *(void *)(v0 + 384),  v0 + 216,  *(void *)(v0 + 488),  0LL,  0LL,  0LL);
}

uint64_t sub_2D80C()
{
  uint64_t v1 = *(void **)(v0 + 624);
  sub_2B4F0(*(void *)(v0 + 640));

  sub_2F77C(v2, &qword_FC2B8);
  sub_1B9B8();
  return sub_2F414(v3, v4, v5);
}

uint64_t sub_2D88C(uint64_t a1)
{
  v2[82] = a1;
  v2[83] = v1;
  swift_task_dealloc(v6);
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v7, v8, v9);
  }

  else
  {
    uint64_t v11 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[84] = v11;
    *uint64_t v11 = v3;
    v11[1] = sub_2D950;
    sub_2F6FC();
    sub_20738();
    return sub_20660();
  }

uint64_t sub_2D950()
{
  *(void *)(v0 + 680) = v1;
  swift_task_dealloc(v3);

  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

#error "2DA44: call analysis failed (funcsize=41)"
uint64_t sub_2DA94()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_1BBCC();
  uint64_t v2 = v0[90];
  v0[91] = v3;
  v0[92] = v1;
  sub_2B988(v2);
  swift_bridgeObjectRelease(v0[89]);
  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_2DB40()
{
  uint64_t v2 = v0[51];
  uint64_t v1 = v0[52];
  uint64_t v3 = v0[49];
  uint64_t v4 = v0[50];
  uint64_t v5 = v0[48];
  sub_2F308(v0[40]);
  sub_2F5E0();
  sub_2BB30();
  sub_1E83C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  uint64_t v6 = swift_task_alloc(32LL);
  *(void *)(v6 + 16) = v5;
  OutputGenerationManifest.init(dialogPhase:_:)(v2, sub_2B260, v6);
  sub_1BABC();
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generatePatternOutput(manifest:measure:)[1]);
  v0[93] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_2DC60;
  return PatternExecutionResult.generatePatternOutput(manifest:measure:)(v0[33], v0[37], v0[61]);
}

uint64_t sub_2DC60()
{
  v0[94] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[91];
  (*(void (**)(void, void))(v0[36] + 8LL))(v0[37], v0[35]);

  sub_1B9B8();
  return sub_2F414(v5, v6, v7);
}

#error "2DDC8: call analysis failed (funcsize=76)"
#error "2DEB4: call analysis failed (funcsize=49)"
#error "2DF58: call analysis failed (funcsize=45)"
#error "2E010: call analysis failed (funcsize=45)"
#error "2E0B8: call analysis failed (funcsize=42)"
#error "2E160: call analysis failed (funcsize=42)"
#error "2E244: call analysis failed (funcsize=67)"
uint64_t sub_2E2D0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = (void *)swift_task_alloc(dword_FC414);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = sub_207EC(v1);
  return sub_2C59C(v2, v3);
}

uint64_t sub_2E324()
{
  if (!v0) {
    return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_2E360()
{
  uint64_t v2 = sub_67C4(&qword_FBF48);
  sub_207C0(107LL, 0x80000000000C7510LL, v3, v2, (uint64_t)&protocol self-conformance witness table for Error);
  sub_207B4();
  swift_errorRelease(v0);
  return sub_2075C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_2E3C8(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  _BYTE v2[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[11] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[12] = v8;
  v2[13] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CATOption(0LL);
  v2[14] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v2[15] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[16] = v11;
  v2[17] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DialogPhase(0LL);
  v2[18] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[19] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[20] = swift_task_alloc(v14);
  v2[21] = swift_task_alloc(v14);
  return swift_task_switch(sub_2E4F8, 0LL, 0LL);
}

uint64_t sub_2E4F8()
{
  if (qword_FB150 != -1) {
    swift_once(&qword_FB150, sub_2C4A4);
  }
  uint64_t v45 = sub_5474(v0[5], (uint64_t)qword_FC390);
  uint64_t v1 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)sub_1B9DC();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl( &dword_0,  v1,  v2,  "SetTimerAttribute.HandleIntentStrategy.makeFailureHandlingIntentResponse() called",  v3,  2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }

  uint64_t v44 = sub_67C4(&qword_FC400);
  uint64_t v4 = (void *)IntentResolutionRecord.intent.getter(v44);
  v0[22] = v4;
  id v42 = v4;
  id v5 = [v4 toDuration];
  if (v5)
  {
    uint64_t v6 = v5;
    [v5 doubleValue];
    double v8 = v7;

    BOOL v43 = v8 > 86400.0;
  }

  else
  {
    BOOL v43 = 0;
  }

  uint64_t v9 = v0[14];
  uint64_t v10 = v0[9];
  uint64_t v11 = v0[10];
  uint64_t v13 = v0[7];
  uint64_t v12 = v0[8];
  uint64_t v14 = v0[5];
  uint64_t v15 = v0[6];
  uint64_t v16 = static DialogPhase.error.getter(v5);
  NLContextUpdate.init()(v16);
  type metadata accessor for TimerBaseCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  v0[23] = CATWrapper.__allocating_init(options:globals:)(v9, 0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))( v11,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v45, v14);
  uint64_t v17 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v11, v13, v17);
  uint64_t v18 = (void *)IntentResolutionRecord.intentResponse.getter(v44);
  unint64_t v19 = dispatch thunk of SetTimerAttributeIntentResponse.code.getter();

  if (v19 < 7)
  {
    uint64_t v20 = (void *)swift_task_alloc(dword_100564);
    v0[36] = v20;
    uint64_t v21 = sub_2EBCC;
LABEL_10:
    *uint64_t v20 = v0;
    v20[1] = v21;
    sub_2F514();
    return sub_AC948();
  }

  switch(v19)
  {
    case 'd':
      uint64_t v28 = (void *)swift_task_alloc(dword_100574);
      v0[27] = v28;
      *uint64_t v28 = v0;
      v28[1] = sub_2E9D8;
      sub_2F514();
      return sub_ACD60();
    case 'f':
      if (v43)
      {
        uint64_t v29 = v0[14];
        type metadata accessor for CreateTimerCATPatternsExecutor(0LL);
        static CATOption.defaultMode.getter();
        v0[29] = CATWrapper.__allocating_init(options:globals:)(v29, 0LL);
        uint64_t v30 = (void *)swift_task_alloc(dword_FC73C);
        v0[30] = v30;
        *uint64_t v30 = v0;
        v30[1] = sub_2EA50;
        sub_2F514();
        return sub_353D0();
      }

      else
      {
        id v35 = [v42 toLabel];

        if (!v35)
        {
          uint64_t v20 = (void *)swift_task_alloc(dword_100564);
          v0[34] = v20;
          uint64_t v21 = sub_2EB54;
          goto LABEL_10;
        }

        uint64_t v37 = v0[20];
        uint64_t v38 = v0[21];
        uint64_t v39 = v0[18];
        uint64_t v40 = v0[19];
        static DialogPhase.completion.getter(v36);
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v38, v37, v39);
        if (qword_FB250 != -1) {
          swift_once(&qword_FB250, sub_6CDA8);
        }
        uint64_t v41 = (void *)swift_task_alloc(dword_FDAEC);
        v0[32] = v41;
        *uint64_t v41 = v0;
        v41[1] = sub_2EADC;
        sub_2F514();
        return sub_5ACDC();
      }

    case 'e':
      uint64_t v23 = v0[4];
      uint64_t v24 = swift_task_alloc(32LL);
      v0[24] = v24;
      *(void *)(v24 + 16) = v23;
      uint64_t v25 = (void *)swift_task_alloc(dword_10056C);
      v0[25] = v25;
      void *v25 = v0;
      v25[1] = sub_2E94C;
      sub_2F514();
      return sub_ACBBC(v26, v27);
    default:
      v0[2] = v19;
      sub_2F514();
      return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v31, v32, v33, v34);
  }

uint64_t sub_2E94C()
{
  v3[26] = v1;
  swift_task_dealloc(v5);
  sub_1BA24();
  if (v1)
  {
    sub_1B9B8();
    return sub_2F658(v6, v7, v8);
  }

  else
  {
    v3[38] = v0;
    uint64_t v10 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v3[39] = v10;
    *uint64_t v10 = v2;
    v10[1] = sub_2EC44;
    sub_20738();
    return sub_2F668();
  }

uint64_t sub_2E9D8(uint64_t a1)
{
  *(void *)(v2 + 224) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v6, v7, v8);
  }

  else
  {
    *(void *)(v2 + 304) = a1;
    uint64_t v10 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    uint64_t v11 = (void *)sub_2F78C(v10);
    sub_2F4C0(v11);
    return sub_20660();
  }

uint64_t sub_2EA50()
{
  v3[31] = v1;
  swift_task_dealloc(v5);
  sub_1E83C();
  if (v1)
  {
    sub_1B9B8();
    return sub_2F658(v6, v7, v8);
  }

  else
  {
    v3[38] = v0;
    uint64_t v10 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v3[39] = v10;
    *uint64_t v10 = v2;
    v10[1] = sub_2EC44;
    sub_20738();
    return sub_2F668();
  }

uint64_t sub_2EADC(uint64_t a1)
{
  *(void *)(v2 + 264) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v6, v7, v8);
  }

  else
  {
    *(void *)(v2 + 304) = a1;
    uint64_t v10 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    uint64_t v11 = (void *)sub_2F78C(v10);
    sub_2F4C0(v11);
    return sub_20660();
  }

uint64_t sub_2EB54(uint64_t a1)
{
  *(void *)(v2 + 280) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v6, v7, v8);
  }

  else
  {
    *(void *)(v2 + 304) = a1;
    uint64_t v10 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    uint64_t v11 = (void *)sub_2F78C(v10);
    sub_2F4C0(v11);
    return sub_20660();
  }

uint64_t sub_2EBCC(uint64_t a1)
{
  *(void *)(v2 + 296) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v6, v7, v8);
  }

  else
  {
    *(void *)(v2 + 304) = a1;
    uint64_t v10 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    uint64_t v11 = (void *)sub_2F78C(v10);
    sub_2F4C0(v11);
    return sub_20660();
  }

uint64_t sub_2EC44()
{
  uint64_t v3 = *(void *)(v2 + 312);
  void *v4 = *v1;
  *(void *)(v2 + 320) = v0;
  swift_task_dealloc(v3);
  sub_1B9B8();
  return sub_1B758();
}

#error "2ED18: call analysis failed (funcsize=43)"
#error "2ED6C: call analysis failed (funcsize=22)"
#error "2EDC4: call analysis failed (funcsize=22)"
#error "2EE1C: call analysis failed (funcsize=22)"
#error "2EE74: call analysis failed (funcsize=22)"
#error "2EECC: call analysis failed (funcsize=22)"
#error "2EF24: call analysis failed (funcsize=22)"
#error "2EF84: call analysis failed (funcsize=24)"
void sub_2EFB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  void *v5;
  uint64_t v2 = sub_67C4(&qword_FC400);
  uint64_t v5 = (void *)IntentResolutionRecord.intent.getter(v2);
  uint64_t v3 = type metadata accessor for SetTimerAttributeIntent(0LL);
  uint64_t v4 = IntentTargetable.knownHomePodCount.getter(v3, &protocol witness table for SetTimerAttributeIntent);

  *(double *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t sub_2F028()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FC3FC);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = sub_207EC(v1);
  return sub_2E3C8(v2, v3);
}

uint64_t sub_2F07C()
{
  if (!v0) {
    return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_2F0B8()
{
  uint64_t v2 = sub_67C4(&qword_FBF48);
  sub_207C0(115LL, 0x80000000000C7490LL, v3, v2, (uint64_t)&protocol self-conformance witness table for Error);
  sub_207B4();
  swift_errorRelease(v0);
  return sub_2075C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_2F120()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FC40C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_C630;
  return sub_2E2D0();
}

uint64_t sub_2F180()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FC3F4);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2A040;
  return sub_2F028();
}

uint64_t sub_2F1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_FC42C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_2ADE8;
  return sub_2C4EC(a1, a2);
}

unint64_t sub_2F238()
{
  unint64_t result = qword_FC3B0[0];
  if (!qword_FC3B0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_C2AD8, &_s20HandleIntentStrategyVN_1);
    atomic_store(result, qword_FC3B0);
  }

  return result;
}

void sub_2F274(uint64_t a1)
{
}

uint64_t sub_2F27C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FC418);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_2F2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriTimePluginModel(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_2F308(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SetTimerAttributeHandledOnWatchParameters(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_2F344(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_67C4(a2);
  sub_2BBC0(*(void *)(v3 - 8));
  return a1;
}

uint64_t sub_2F378()
{
  return sub_2D590();
}

uint64_t sub_2F3C8(uint64_t (*a1)(void))
{
  return a1();
}

void sub_2F3E4()
{
}

uint64_t sub_2F414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_2F420()
{
  return (*(uint64_t (**)(void, void))(v0[60] + 8LL))(v0[61], v0[59]);
}

uint64_t sub_2F470()
{
  return swift_task_dealloc(*(void *)(v0 + 496));
}

  ;
}

uint64_t sub_2F4C0(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return *(void *)(v2 + 24);
}

uint64_t sub_2F4E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v11, a10);
}

uint64_t sub_2F4F4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_2F504()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

  ;
}

void sub_2F534()
{
}

void sub_2F574()
{
}

uint64_t sub_2F5B0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_2F5C0()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

void sub_2F5D0()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_2F5E0()
{
  return sub_21470(v0, v1);
}

uint64_t sub_2F5EC()
{
  return *(void *)(v0 + 496);
}

uint64_t sub_2F614()
{
  return *(void *)(v0 + 496);
}

uint64_t sub_2F638()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_2F648()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_2F658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_2F668()
{
  return ((uint64_t (*)(void))PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:))();
}

  ;
}

uint64_t sub_2F694()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_2F6A0(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

uint64_t sub_2F6B4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a5);
}

uint64_t sub_2F6C0(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v1, 1LL, 1LL, a1);
}

uint64_t sub_2F6D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 8))(a12, a11);
}

  ;
}

uint64_t sub_2F6FC()
{
  return *(void *)(v0 + 264);
}

uint64_t sub_2F714()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 576));
}

uint64_t sub_2F720@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a9, a8);
}

  ;
}

uint64_t sub_2F740()
{
  return swift_retain(v0);
}

void sub_2F748()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_2F75C(uint64_t a1, uint64_t a2)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, a2, 1LL, v2);
}

uint64_t sub_2F768()
{
  return v0;
}

uint64_t sub_2F77C(uint64_t a1, uint64_t *a2)
{
  return sub_2F344(v2, a2);
}

uint64_t sub_2F784()
{
  return type metadata accessor for SiriTimePluginModel(0LL);
}

uint64_t sub_2F78C(uint64_t result)
{
  *(void *)(v1 + 312) = result;
  return result;
}

uint64_t sub_2F798()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_2F7A4()
{
  return *(void *)(v0 + 8);
}

uint64_t type metadata accessor for ResumeTimerCATsSimple(uint64_t a1)
{
  uint64_t result = qword_FC430;
  if (!qword_FC430) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ResumeTimerCATsSimple);
  }
  return result;
}

uint64_t sub_2F7E8(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100E40);
}

uint64_t sub_2F824(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2B82C((uint64_t)sub_2F834);
}

uint64_t sub_2F834()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = sub_2FB40(v2);
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C2640;
  *(void *)(v3 + 32) = 0x72656D6974LL;
  *(void *)(v3 + 40) = 0xE500000000000000LL;
  uint64_t v4 = 0LL;
  if (v1)
  {
    uint64_t v4 = type metadata accessor for TimerTimer(0LL);
  }

  else
  {
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 72) = v4;
  uint64_t v5 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc(v5);
  v0[5] = v6;
  void *v6 = v0;
  v6[1] = sub_2F914;
  unint64_t v7 = sub_2FB30();
  return v9(v7);
}

uint64_t sub_2F914()
{
  if (v1) {
    return sub_20670();
  }
  swift_bridgeObjectRelease(*(void *)(v2 + 32));
  return sub_2FB20(v0, *(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_2F964()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_2F990(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2B82C((uint64_t)sub_2F9A0);
}

uint64_t sub_2F9A0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = sub_2FB40(v2);
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C2640;
  strcpy((char *)(v3 + 32), "resumedTimers");
  *(_WORD *)(v3 + 46) = -4864;
  *(void *)(v3 + 72) = sub_67C4(&qword_FBE28);
  *(void *)(v3 + 48) = v1;
  uint64_t v4 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  swift_bridgeObjectRetain(v1);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_2F914;
  unint64_t v6 = sub_2FB30();
  return v8(v6);
}

uint64_t sub_2FA84()
{
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1C020;
  unint64_t v2 = sub_2FB30();
  return v4(v2);
}

uint64_t sub_2FAF4()
{
  return type metadata accessor for ResumeTimerCATsSimple(0LL);
}

uint64_t sub_2FAFC()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 40);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 48) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_2FB20(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

unint64_t sub_2FB30()
{
  return 0xD000000000000021LL;
}

uint64_t sub_2FB40(uint64_t a1)
{
  return swift_allocObject(a1, 80LL, 7LL);
}

uint64_t type metadata accessor for TimerBaseCATs_Async(uint64_t a1)
{
  uint64_t result = qword_FC498;
  if (!qword_FC498) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimerBaseCATs_Async);
  }
  return result;
}

uint64_t sub_2FB84(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100E50);
}

uint64_t sub_2FBC0()
{
  uint64_t v1 = sub_2FE64((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)sub_2FE84(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_107E8;
  sub_2FE78();
  sub_2FE9C();
  sub_2FE90();
  return sub_2FE58(v3, v4, v5, v6, v7);
}

uint64_t sub_2FC20()
{
  uint64_t v1 = sub_2FE64((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)sub_2FE84(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_107E8;
  sub_2FE78();
  sub_2FE9C();
  sub_2FE90();
  return sub_2FE58(v3, v4, v5, v6, v7);
}

uint64_t sub_2FC80()
{
  uint64_t v1 = sub_2FE64((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)sub_2FE84(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_107E8;
  sub_2FE78();
  sub_2FE9C();
  sub_2FE90();
  return sub_2FE58(v3, v4, v5, v6, v7);
}

uint64_t sub_2FCE0()
{
  uint64_t v1 = sub_2FE64((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)sub_2FE84(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_2FD40;
  sub_2FE78();
  sub_2FE9C();
  sub_2FE90();
  return sub_2FE58(v3, v4, v5, v6, v7);
}

uint64_t sub_2FD40()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2FD88()
{
  uint64_t v1 = sub_2FE64((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)sub_2FE84(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_107E8;
  sub_2FE78();
  sub_2FE90();
  return sub_2FE58(v3, v4, v5, v6, v7);
}

uint64_t sub_2FDEC()
{
  uint64_t v1 = sub_2FE64((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v2 = (void *)sub_2FE84(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_107E8;
  sub_2FE78();
  sub_2FE90();
  return sub_2FE58(v3, v4, v5, v6, v7);
}

uint64_t sub_2FE50()
{
  return type metadata accessor for TimerBaseCATs_Async(0LL);
}

uint64_t sub_2FE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_2FE64@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

  ;
}

uint64_t sub_2FE84(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

  ;
}

uint64_t sub_2FE9C()
{
  return v0;
}

void *sub_2FEA8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_44;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v7)
  {
    while (1)
    {
      uint64_t v38 = a2;
      unint64_t v8 = 0LL;
      uint64_t v42 = v6 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v43 = v6 & 0xC000000000000001LL;
      uint64_t v39 = v6;
      uint64_t v41 = v7;
      while (v43)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
LABEL_7:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_43;
        }
        id v12 = [v9 device];
        if (v12)
        {
          uint64_t v13 = v12;
          id v14 = [v12 roomID];

          if (v14)
          {
            uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
            uint64_t v17 = v16;

            if (v15 == a2 && v17 == a3)
            {
              swift_bridgeObjectRelease(a3);
            }

            else
            {
              char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v15, v17, 0LL);
              swift_bridgeObjectRelease(v17);
              if ((v19 & 1) == 0)
              {

LABEL_38:
                uint64_t v7 = v41;
                goto LABEL_39;
              }
            }

            id v20 = [v10 identifier];
            if (v20)
            {
              uint64_t v21 = v20;
              uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
              uint64_t v24 = v23;
            }

            else
            {
              uint64_t v22 = 0LL;
              uint64_t v24 = 0LL;
            }

            uint64_t v25 = a3;
            id v26 = [a4 identifier];
            if (v26)
            {
              uint64_t v27 = v26;
              uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
              uint64_t v30 = v29;

              if (v24)
              {
                if (v30)
                {
                  if (v22 == v28 && v24 == v30)
                  {

                    swift_bridgeObjectRelease(v24);
                    swift_bridgeObjectRelease(v30);
                    goto LABEL_37;
                  }

                  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v28, v30, 0LL);
                  swift_bridgeObjectRelease(v24);
                  uint64_t v33 = swift_bridgeObjectRelease(v30);
                  if ((v32 & 1) != 0)
                  {
LABEL_35:

                    goto LABEL_37;
                  }

LABEL_34:
                  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v33);
                  uint64_t v34 = _swiftEmptyArrayStorage[2];
                  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
                  uint64_t v35 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v10);
                  specialized ContiguousArray._endMutation()(v35);
LABEL_37:
                  a3 = v25;
                  a2 = v38;
                  uint64_t v6 = v39;
                  goto LABEL_38;
                }

LABEL_31:
                uint64_t v30 = v24;
              }

              else if (!v30)
              {
                goto LABEL_35;
              }

              uint64_t v33 = swift_bridgeObjectRelease(v30);
              goto LABEL_34;
            }

            if (!v24) {
              goto LABEL_35;
            }
            goto LABEL_31;
          }
        }

LABEL_39:
        ++v8;
        if (v11 == v7) {
          goto LABEL_48;
        }
      }

      if (v8 < *(void *)(v42 + 16)) {
        break;
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      if (v6 < 0) {
        uint64_t v36 = v6;
      }
      else {
        uint64_t v36 = v6 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v36);
      if (!v7) {
        goto LABEL_48;
      }
    }

    id v9 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_7;
  }

LABEL_48:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v6);

  return _swiftEmptyArrayStorage;
}

void *sub_301AC(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = a1;
  uint64_t v36 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_33;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v5)
  {
    while (1)
    {
      uint64_t v30 = v3;
      uint64_t v31 = v5;
      unint64_t v6 = 0LL;
      uint64_t v33 = v4 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v34 = v4 & 0xC000000000000001LL;
      uint64_t v7 = (SEL *)&unk_FA000;
      uint64_t v32 = v4;
      while (v34)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
LABEL_7:
        id v9 = v8;
        unint64_t v10 = v6 + 1;
        if (__OFADD__(v6, 1LL)) {
          goto LABEL_32;
        }
        id v11 = [v8 v7[150]];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
          uint64_t v3 = v14;
        }

        else
        {
          uint64_t v13 = 0LL;
          uint64_t v3 = 0LL;
        }

        uint64_t v15 = v7;
        id v16 = objc_msgSend(a2, v7[150], v30);
        if (!v16)
        {
          uint64_t v21 = v31;
          if (!v3) {
            goto LABEL_25;
          }
LABEL_21:
          id v20 = v3;
LABEL_23:
          uint64_t v24 = swift_bridgeObjectRelease(v20);
          goto LABEL_24;
        }

        uint64_t v17 = v16;
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        id v20 = v19;

        if (!v3)
        {
          uint64_t v21 = v31;
          if (!v20) {
            goto LABEL_25;
          }
          goto LABEL_23;
        }

        uint64_t v21 = v31;
        if (!v20) {
          goto LABEL_21;
        }
        BOOL v22 = v13 == v18 && v3 == v20;
        if (v22)
        {

          swift_bridgeObjectRelease(v3);
          swift_bridgeObjectRelease(v20);
          goto LABEL_27;
        }

        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v3, v18, v20, 0LL);
        swift_bridgeObjectRelease(v3);
        uint64_t v24 = swift_bridgeObjectRelease(v20);
        if ((v23 & 1) != 0)
        {
LABEL_25:

          goto LABEL_27;
        }

LABEL_24:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
        uint64_t v25 = v36[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
        uint64_t v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v9);
        uint64_t v3 = &v36;
        specialized ContiguousArray._endMutation()(v26);
LABEL_27:
        ++v6;
        BOOL v22 = v10 == v21;
        uint64_t v7 = v15;
        uint64_t v4 = v32;
        if (v22)
        {
          uint64_t v27 = v36;
          goto LABEL_38;
        }
      }

      if (v6 < *(void *)(v33 + 16)) {
        break;
      }
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      if (v4 < 0) {
        uint64_t v28 = v4;
      }
      else {
        uint64_t v28 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v28);
      if (!v5) {
        goto LABEL_37;
      }
    }

    id v8 = *(id *)(v4 + 8 * v6 + 32);
    goto LABEL_7;
  }

        sub_5E324(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
        goto LABEL_25;
      }

    unint64_t v6 = (v13 - 1) & v13;
    id v11 = __clz(__rbit64(v13)) + (v14 << 6);
    id v9 = v14;
  }

  uint64_t v15 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_36:
    swift_release();
    sub_7F4F0(a1);
    return (uint64_t)v3;
  }

  uint64_t v13 = *(void *)(v29 + 8 * v15);
  if (v13)
  {
    id v14 = v9 + 5;
    goto LABEL_24;
  }

  while (1)
  {
    id v14 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v14 >= v28) {
      goto LABEL_36;
    }
    uint64_t v13 = *(void *)(v29 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_24;
    }
  }

LABEL_37:
  uint64_t v27 = _swiftEmptyArrayStorage;
LABEL_38:

  swift_bridgeObjectRelease(v4);
  return v27;
}

void *sub_303F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v6)
  {
    while (1)
    {
      uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v6);
      if (v6 < 0) {
        break;
      }
      uint64_t v8 = 0LL;
      while (v6 != v8)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
        }
        else {
          id v9 = *(id *)(a1 + 8 * v8 + 32);
        }
        unint64_t v10 = v9;
        uint64_t v11 = sub_11018(v9, a2);

        if (v3)
        {
          sub_2B9FC();
          swift_release();
          return v10;
        }

        ++v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        uint64_t v13 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
        uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        specialized ContiguousArray._endMutation()(v14);
        if (v6 == v8)
        {
          unint64_t v10 = _swiftEmptyArrayStorage;
          sub_2B9FC();
          return v10;
        }
      }

      __break(1u);
LABEL_14:
      if (a1 < 0) {
        uint64_t v15 = a1;
      }
      else {
        uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v15);
      swift_bridgeObjectRelease(a1);
      if (!v6) {
        goto LABEL_18;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_18:
    sub_2B9FC();
    return _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_30574()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FC518);
  sub_5474(v0, (uint64_t)qword_FC518);
  return static SiriTimeLog.timerPlugin.getter();
}

Swift::Int sub_305BC(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_30600()
{
  return sub_305BC(*v0);
}

uint64_t sub_30608(__int128 *a1)
{
  uint64_t v2 = v1;
  *(_BYTE *)(v1 + 16) = 0;
  *(void *)(v1 + 64) = 0LL;
  *(void *)(v1 + 72) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v1 + 80) = 0;
  if (qword_FB158 != -1) {
    swift_once(&qword_FB158, sub_30574);
  }
  uint64_t v4 = sub_1BD34();
  uint64_t v5 = (os_log_s *)sub_5474(v4, (uint64_t)qword_FC518);
  Logger.logObject.getter(v5);
  os_log_type_t v6 = sub_1BCD0();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)sub_1B9DC();
    *(_WORD *)uint64_t v7 = 0;
    sub_1BBEC(&dword_0, v5, v6, "RemoteTimerContinuationFlow.init", v7);
    sub_1B904((uint64_t)v7);
  }

  sub_5530(a1, v2 + 24);
  return v2;
}

void sub_306EC(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for ActionForInput(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v7 = __chkstk_darwin(v6);
  id v9 = (char *)v24 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = sub_67C4(&qword_FBDB8);
  __chkstk_darwin(v10);
  sub_17D14();
  v24[9] = v11;
  uint64_t v12 = type metadata accessor for Parse(0LL);
  v24[7] = *(void *)(v12 - 8);
  v24[8] = v12;
  __chkstk_darwin(v12);
  sub_17D14();
  v24[6] = v13;
  if (qword_FB158 != -1) {
    swift_once(&qword_FB158, sub_30574);
  }
  uint64_t v14 = sub_1BD34();
  uint64_t v15 = sub_5474(v14, (uint64_t)qword_FC518);
  swift_retain_n(v2, 2LL);
  sub_32A18();
  os_log_type_t v16 = sub_1BCD0();
  if (sub_1BB80(v16))
  {
    v24[1] = a1;
    uint64_t v17 = sub_1BA1C(12LL);
    void v24[5] = v4;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = sub_1BA1C(32LL);
    v24[2] = v5;
    uint64_t v20 = v19;
    v26[0] = v19;
    v24[3] = v15;
    v24[4] = v9;
    *(_DWORD *)uint64_t v18 = 136315138;
    LOBYTE(v25) = *((_BYTE *)v2 + 16);
    uint64_t v21 = String.init<A>(describing:)();
    unint64_t v23 = v22;
    uint64_t v25 = sub_683C(v21, v22, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v18 + 4, v18 + 12);
    sub_32A0C();
    swift_bridgeObjectRelease(v23);
    sub_1E7D8(&dword_0, v2, v1, "RemoteTimerContinuationFlow.on(input:) state %s", v18);
    sub_1E7D0(v20);
    sub_1B904(v20);
    sub_1B904((uint64_t)v18);
  }

  else
  {

    sub_32A0C();
  }

  __asm { BR              X10 }

uint64_t sub_30D40(uint64_t a1)
{
  v2[34] = a1;
  v2[35] = v1;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[36] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[37] = v4;
  v2[38] = sub_1B6C8(v4);
  uint64_t v5 = type metadata accessor for CATOption(0LL);
  v2[39] = sub_1B6C8(*(void *)(v5 - 8));
  uint64_t v6 = sub_1BD34();
  v2[40] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[41] = v7;
  v2[42] = sub_1B6C8(v7);
  uint64_t v8 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v2[43] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[44] = v9;
  v2[45] = sub_1B6C8(v9);
  uint64_t v10 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[46] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[47] = v11;
  v2[48] = sub_1B6C8(v11);
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  v2[49] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[50] = v13;
  v2[51] = sub_1B6C8(v13);
  uint64_t v14 = sub_67C4(&qword_FC610);
  v2[52] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[53] = v15;
  v2[54] = sub_1B6C8(v15);
  return swift_task_switch(sub_30E34, 0LL, 0LL);
}

uint64_t sub_30E34()
{
  if (qword_FB158 != -1) {
    swift_once(&qword_FB158, sub_30574);
  }
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = (os_log_s *)sub_5474(*(void *)(v0 + 320), (uint64_t)qword_FC518);
  *(void *)(v0 + 440) = v2;
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 280);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v9 = sub_1BA1C(32LL);
    uint64_t v20 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    *(_BYTE *)(v0 + 504) = *(_BYTE *)(v7 + 16);
    uint64_t v10 = String.init<A>(describing:)();
    unint64_t v12 = v11;
    *(void *)(v0 + 264) = sub_683C(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    sub_32A0C();
    sub_1E7D8(&dword_0, v4, v5, "RemoteTimerContinuationFlow.execute() state %s", v8);
    sub_1E7D0(v9);
    sub_1B904(v9);
    sub_1B904((uint64_t)v8);
  }

  else
  {
    sub_32A0C();
  }

  uint64_t v13 = *(void *)(v0 + 280);
  uint64_t v14 = swift_beginAccess(v13 + 64, v0 + 216, 0LL, 0LL);
  uint64_t v15 = *(void *)(v13 + 64);
  *(void *)(v0 + 448) = v15;
  if (v15) {
    __asm { BR              X11 }
  }

  Logger.logObject.getter(v14);
  os_log_type_t v16 = sub_32A5C();
  if (sub_1BB80(v16))
  {
    uint64_t v17 = (_WORD *)sub_1B9DC();
    sub_2BA04(v17);
    sub_1BBEC(&dword_0, v2, (os_log_type_t)v13, "Unable to parse intent", (uint8_t *)v4);
    sub_1B904((uint64_t)v4);
  }

  static ExecuteResponse.complete()(v18);
  sub_329D8();
  sub_1BABC();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  sub_1B838();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3158C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 472);
  *(void *)(*v2 + 480) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 456);
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease(v6);
    uint64_t v7 = sub_31804;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v4 + 456));
    swift_release();
    *(void *)(v4 + 488) = a1;
    uint64_t v7 = sub_3162C;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_3162C(uint64_t a1)
{
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)[1]);
  v1[62] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_316A8;
  return DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)( v1 + 22,  v1[38],  v1[51],  v1[48],  0LL,  0LL,  0LL,  0LL);
}

uint64_t sub_316A8()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 488LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 296LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 304LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 288LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 496LL));

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_31720, 0LL, 0LL);
}

uint64_t sub_31720()
{
  uint64_t v1 = *(void **)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v11 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v7 = *(void *)(v0 + 208);
  sub_8CFC((void *)(v0 + 176), v6);
  uint64_t v8 = Output.generateFlow()(v6, v7);
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 176));
  static ExecuteResponse.ongoing(next:)(v8);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v11, v10);
  sub_329D8();
  sub_1BABC();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  sub_1B838();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_31804()
{
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v2 = *(os_log_s **)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 408);
  (*(void (**)(void, void))(*(void *)(v0 + 376) + 8LL))(*(void *)(v0 + 384), *(void *)(v0 + 368));
  sub_1BBE4(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  swift_errorRetain(v1);
  uint64_t v5 = swift_errorRetain(v1);
  Logger.logObject.getter(v5);
  os_log_type_t v6 = sub_32A5C();
  if (sub_2B854(v6))
  {
    uint64_t v7 = *(void *)(v0 + 480);
    uint64_t v8 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v9 = sub_1BA1C(32LL);
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v18 = v9;
    *(void *)(v0 + 240) = v7;
    swift_errorRetain(v7);
    sub_67C4(&qword_FBF48);
    uint64_t v10 = String.init<A>(describing:)();
    unint64_t v12 = v11;
    *(void *)(v0 + 248) = sub_683C(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    sub_1E7D8( &dword_0,  v2,  (os_log_type_t)v3,  "RemoteTimerContinuationFlow: Error outputting prompt confirmation: %s",  v8);
    sub_1E7D0(v9);
    sub_1B904(v9);
    sub_1B904((uint64_t)v8);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 480);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  uint64_t v14 = *(void *)(v0 + 480);
  uint64_t v15 = *(void **)(v0 + 448);
  *(_BYTE *)(*(void *)(v0 + 280) + 16LL) = 4;
  static ExecuteResponse.complete()(v16);
  swift_errorRelease(v14);

  sub_329D8();
  sub_1BABC();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  sub_1B838();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_319D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TimerFlowProvider();
  uint64_t v3 = swift_allocObject(v2, 56LL, 7LL);
  uint64_t result = sub_5530(v5, v3 + 16);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_F49D8;
  *a1 = v3;
  return result;
}

void sub_31A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FC618);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for RCHFlowResult.complete<A, B>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = (void *)v7[1];
    uint64_t v10 = (os_log_s *)v7[2];
    swift_release();
    swift_beginAccess(a2 + 64, v73, 1LL, 0LL);
    unint64_t v11 = *(void **)(a2 + 64);
    *(void *)(a2 + 64) = v9;
    unint64_t v12 = v9;

    uint64_t v13 = sub_32940(v10, (SEL *)&selRef_matchedTimers);
    uint64_t v14 = (uint64_t)_swiftEmptyArrayStorage;
    if (v13) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = (uint64_t)_swiftEmptyArrayStorage;
    }
    uint64_t v16 = sub_32940(v10, (SEL *)&selRef_remoteTimers);
    if (v16) {
      uint64_t v14 = v16;
    }
    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0) {
        uint64_t v71 = v15;
      }
      else {
        uint64_t v71 = v15 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v15);
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v71);
      swift_bridgeObjectRelease(v15);
    }

    else
    {
      uint64_t v17 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8LL));
    }

    *(_BYTE *)(a2 + 80) = v17 != 0;
    unint64_t v18 = (unint64_t)v14 >> 62;
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0) {
        uint64_t v72 = v14;
      }
      else {
        uint64_t v72 = v14 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v14);
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease(v15);
      uint64_t v15 = v14;
    }

    else
    {
      uint64_t v19 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v15);
    if (!v19)
    {
      swift_bridgeObjectRelease(v14);
      if (v17)
      {
        if (qword_FB158 != -1) {
          swift_once(&qword_FB158, sub_30574);
        }
        uint64_t v35 = type metadata accessor for Logger(0LL);
        uint64_t v36 = sub_5474(v35, (uint64_t)qword_FC518);
        uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v37, v38)) {
          goto LABEL_67;
        }
        uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v39 = 0;
        uint64_t v40 = "RemoteTimerContinuationFlow: should have already read remote timers – setting state .complete";
      }

      else
      {
        if (qword_FB158 != -1) {
          swift_once(&qword_FB158, sub_30574);
        }
        uint64_t v46 = type metadata accessor for Logger(0LL);
        uint64_t v47 = sub_5474(v46, (uint64_t)qword_FC518);
        uint64_t v37 = (os_log_s *)Logger.logObject.getter(v47);
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v37, v38)) {
          goto LABEL_67;
        }
        uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v39 = 0;
        uint64_t v40 = "RemoteTimerContinuationFlow: No timers found at all – setting state .complete";
      }

LABEL_66:
      _os_log_impl(&dword_0, v37, v38, v40, v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
      uint64_t v65 = v12;
LABEL_68:

      goto LABEL_69;
    }

    if (v17) {
      goto LABEL_46;
    }
    if (v18)
    {
      uint64_t v48 = v14 < 0 ? v14 : v14 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v14);
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v48);
      swift_bridgeObjectRelease(v14);
    }

    else
    {
      uint64_t v20 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8LL));
    }

    if (v20 < 2)
    {
LABEL_46:
      id v49 = -[os_log_s associatedDeviceTarget](v12, "associatedDeviceTarget");

      if (v49)
      {
        id v50 = -[os_log_s associatedDeviceTarget](v12, "associatedDeviceTarget");
        id v51 = [v50 isInRespondingRoom];

        sub_1E6A8();
        v52.super.super.Class isa = NSNumber.init(integerLiteral:)(1LL).super.super.isa;
        if (!v51)
        {
          swift_bridgeObjectRelease(v14);

LABEL_62:
          if (qword_FB158 != -1) {
            swift_once(&qword_FB158, sub_30574);
          }
          uint64_t v63 = type metadata accessor for Logger(0LL);
          uint64_t v64 = sub_5474(v63, (uint64_t)qword_FC518);
          uint64_t v37 = (os_log_s *)Logger.logObject.getter(v64);
          os_log_type_t v38 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v37, v38))
          {
            uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v39 = 0;
            uint64_t v40 = "RemoteTimerContinuationFlow: associatedDeviceTarget was not in responding room (do not read other remo"
                  "te timers) - setting state .complete";
            goto LABEL_66;
          }

LABEL_67:
          uint64_t v65 = v37;
          uint64_t v37 = v10;
          uint64_t v10 = v12;
          goto LABEL_68;
        }

        id v53 = v51;
        char v54 = static NSObject.== infix(_:_:)(v53, v52.super.super.isa);

        if ((v54 & 1) == 0) {
          goto LABEL_56;
        }
      }

      if (v18)
      {
        uint64_t v56 = v14 < 0 ? v14 : v14 & 0xFFFFFFFFFFFFFF8LL;
        swift_bridgeObjectRetain(v14);
        uint64_t v55 = _CocoaArrayWrapper.endIndex.getter(v56);
        swift_bridgeObjectRelease(v14);
      }

      else
      {
        uint64_t v55 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8LL));
      }

      if (v55 < 2)
      {
LABEL_56:
        swift_bridgeObjectRelease(v14);
        goto LABEL_62;
      }

      if (qword_FB158 != -1) {
        swift_once(&qword_FB158, sub_30574);
      }
      uint64_t v57 = type metadata accessor for Logger(0LL);
      uint64_t v58 = sub_5474(v57, (uint64_t)qword_FC518);
      uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v60 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v61 = 0;
        uint64_t v62 = "RemoteTimerContinuationFlow: has both local and remote timers to respond – setting state .shouldPromptRemote";
LABEL_75:
        _os_log_impl(&dword_0, v59, v60, v62, v61, 2u);
        swift_slowDealloc(v61, -1LL, -1LL);
        uint64_t v69 = v12;
LABEL_77:

        uint64_t v70 = *(void *)(a2 + 72);
        *(void *)(a2 + 72) = v14;
        swift_bridgeObjectRelease(v70);
        char v66 = 1;
        goto LABEL_70;
      }
    }

    else
    {
      if (qword_FB158 != -1) {
        swift_once(&qword_FB158, sub_30574);
      }
      uint64_t v67 = type metadata accessor for Logger(0LL);
      uint64_t v68 = sub_5474(v67, (uint64_t)qword_FC518);
      uint64_t v59 = (os_log_s *)Logger.logObject.getter(v68);
      os_log_type_t v60 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v61 = 0;
        uint64_t v62 = "RemoteTimerContinuationFlow: no local matched timers with matched remote timers – setting state .shouldPromptRemote";
        goto LABEL_75;
      }
    }

    uint64_t v69 = v59;
    uint64_t v59 = v10;
    uint64_t v10 = v12;
    goto LABEL_77;
  }

  if (v8 == enum case for RCHFlowResult.error<A, B>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v21 = *v7;
    if (qword_FB158 != -1) {
      swift_once(&qword_FB158, sub_30574);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_5474(v22, (uint64_t)qword_FC518);
    swift_errorRetain(v21);
    uint64_t v23 = swift_errorRetain(v21);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      v73[0] = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v74 = v21;
      swift_errorRetain(v21);
      sub_67C4(&qword_FBF48);
      uint64_t v28 = String.init<A>(describing:)();
      unint64_t v30 = v29;
      uint64_t v74 = sub_683C(v28, v29, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v30);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl(&dword_0, v24, v25, "RemoteTimerContinuationFlow: Error handling base search flow: %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);

      swift_errorRelease(v21);
LABEL_69:
      char v66 = 4;
LABEL_70:
      *(_BYTE *)(a2 + 16) = v66;
      return;
    }

    swift_errorRelease(v21);
    swift_errorRelease(v21);
    swift_errorRelease(v21);
LABEL_31:

    goto LABEL_69;
  }

  if (v8 == enum case for RCHFlowResult.cancelled<A, B>(_:))
  {
    if (qword_FB158 != -1) {
      swift_once(&qword_FB158, sub_30574);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    uint64_t v32 = sub_5474(v31, (uint64_t)qword_FC518);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v34 = 0;
      _os_log_impl( &dword_0,  v24,  v33,  "RemoteTimerContinuationFlow: Parent flow returned .cancelled – setting state .complete",  v34,  2u);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    goto LABEL_31;
  }

  if (qword_FB158 != -1) {
    swift_once(&qword_FB158, sub_30574);
  }
  uint64_t v41 = type metadata accessor for Logger(0LL);
  uint64_t v42 = sub_5474(v41, (uint64_t)qword_FC518);
  unint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl( &dword_0,  v43,  v44,  "RemoteTimerContinuationFlow: Unknown state response in RemoteTimerContinuationFlow (state .begin)",  v45,  2u);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  *(_BYTE *)(a2 + 16) = 4;
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_323E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = sub_32998( (unint64_t *)&unk_FD460,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for RemoteTimerContinuationFlow,  (uint64_t)&unk_C2CAC);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v5, v6);
}

uint64_t sub_32450()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  return v0;
}

uint64_t sub_3247C()
{
  return swift_deallocClassInstance(v0, 81LL, 7LL);
}

uint64_t type metadata accessor for RemoteTimerContinuationFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC23TimerFlowDelegatePlugin27RemoteTimerContinuationFlow);
}

uint64_t getEnumTagSinglePayload for RemoteTimerContinuationFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for RemoteTimerContinuationFlow.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_32590 + 4 * byte_C2BEA[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_325C4 + 4 * byte_C2BE5[v4]))();
}

uint64_t sub_325C4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_325CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x325D4LL);
  }
  return result;
}

uint64_t sub_325E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x325E8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_325EC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_325F4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteTimerContinuationFlow.State()
{
  return &type metadata for RemoteTimerContinuationFlow.State;
}

unint64_t sub_32614()
{
  unint64_t result = qword_FC5F0[0];
  if (!qword_FC5F0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_C2C84, &type metadata for RemoteTimerContinuationFlow.State);
    atomic_store(result, qword_FC5F0);
  }

  return result;
}

uint64_t sub_32650(uint64_t a1)
{
  return v1 & 1;
}

uint64_t sub_32674(uint64_t a1, uint64_t a2)
{
  return sub_323E4(a1, a2);
}

uint64_t sub_32694(uint64_t a1)
{
  int v3 = (void *)swift_task_alloc(dword_FC60C);
  *(void *)(v1 + 16) = v3;
  *int v3 = v1;
  v3[1] = sub_1B0B4;
  return sub_30D40(a1);
}

uint64_t sub_326E8(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = a1;
  if (a1 >> 62) {
    goto LABEL_32;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  uint64_t v6 = swift_bridgeObjectRetain(a1);
  if (v5)
  {
    do
    {
      uint64_t v39 = v3;
      uint64_t v40 = v5;
      uint64_t v41 = v4;
      unint64_t v44 = v4 & 0xC000000000000001LL;
      uint64_t v14 = 4LL;
      uint64_t v15 = (SEL *)&unk_FA000;
      while (1)
      {
        id v16 = v44
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, v4)
            : *(id *)(v4 + 8 * v14);
        uint64_t v17 = v16;
        uint64_t v18 = v14 - 3;
        if (__OFADD__(v14 - 4, 1LL)) {
          break;
        }
        id v19 = [v16 v15[122]];
        if (v19)
        {
          uint64_t v3 = (uint64_t)v19;
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          uint64_t v22 = v21;
        }

        else
        {
          uint64_t v20 = 0LL;
          uint64_t v22 = 0LL;
        }

        uint64_t v23 = v15;
        id v24 = objc_msgSend(a2, v15[122], v39);
        if (!v24)
        {
          if (!v22) {
            goto LABEL_27;
          }
LABEL_21:

          uint64_t v34 = v22;
LABEL_24:
          uint64_t v6 = swift_bridgeObjectRelease(v34);
          uint64_t v4 = v41;
          uint64_t v15 = v23;
          goto LABEL_25;
        }

        uint64_t v3 = (uint64_t)v24;
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        uint64_t v34 = v33;

        if (!v22)
        {
          if (!v34)
          {
LABEL_27:
            sub_32A38((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, v39, v40, v41, v44, v45, a2);
            swift_bridgeObjectRelease(v42);

            return 1LL;
          }

          goto LABEL_24;
        }

        if (!v34) {
          goto LABEL_21;
        }
        if (v20 == v32 && v22 == v34)
        {
          sub_32A38((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, v39, v40, v41, v44, v45, a2);
          swift_bridgeObjectRelease(v43);

          swift_bridgeObjectRelease(v22);
          uint64_t v36 = v34;
LABEL_29:
          swift_bridgeObjectRelease(v36);
          return 1LL;
        }

        uint64_t v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v32, v34, 0LL);

        swift_bridgeObjectRelease(v22);
        uint64_t v6 = swift_bridgeObjectRelease(v34);
        uint64_t v4 = v41;
        uint64_t v15 = v23;
        if ((v3 & 1) != 0)
        {
          sub_32A38(v6, v7, v8, v9, v10, v11, v12, v13, v39, v40, v41, v44, v45, a2);
          uint64_t v36 = v4;
          goto LABEL_29;
        }

LABEL_25:
        ++v14;
        if (v18 == v40) {
          goto LABEL_36;
        }
      }

      __break(1u);
LABEL_32:
      if (v4 < 0) {
        uint64_t v38 = v4;
      }
      else {
        uint64_t v38 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v4);
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v38);
      uint64_t v5 = v6;
    }

    while (v6);
  }

void sub_32920(uint64_t a1)
{
}

uint64_t sub_32928(void *a1)
{
  return sub_32940(a1, (SEL *)&selRef_matchedTimers);
}

uint64_t sub_32934(void *a1)
{
  return sub_32940(a1, (SEL *)&selRef_remoteTimers);
}

uint64_t sub_32940(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for SiriTimer(0LL);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  return v5;
}

uint64_t sub_32998(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_329D8()
{
  return swift_task_dealloc(*(void *)(v0 + 432));
}

BOOL sub_329F4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_32A04(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_32A0C()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_32A18()
{
  return Logger.logObject.getter();
}

uint64_t sub_32A20()
{
  return dispatch thunk of static Equatable.== infix(_:_:)(v3, v2, v1, v0);
}

void sub_32A38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t sub_32A40()
{
  return swift_beginAccess(v0 + 64, v1 - 104, 32LL, 0LL);
}

uint64_t sub_32A54()
{
  return swift_endAccess(v0 - 104);
}

uint64_t sub_32A5C()
{
  return static os_log_type_t.error.getter();
}

unint64_t sub_32A64()
{
  return sub_1E6A8();
}

id sub_32A6C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_32A78()
{
  return Logger.logObject.getter();
}

uint64_t type metadata accessor for DismissTimerCATs_Async(uint64_t a1)
{
  uint64_t result = qword_FC620;
  if (!qword_FC620) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DismissTimerCATs_Async);
  }
  return result;
}

uint64_t sub_32AB8(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100E60);
}

uint64_t sub_32AF4(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 89) = a3;
  *(_BYTE *)(v6 + 88) = a2;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a4;
  unint64_t v7 = (*(void *)(*(void *)(sub_67C4(&qword_FBD98) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 48) = swift_task_alloc(v7);
  *(void *)(v6 + 56) = swift_task_alloc(v7);
  return swift_task_switch(sub_32B6C, 0LL, 0LL);
}

uint64_t sub_32B6C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(_BYTE *)(v0 + 89);
  char v4 = *(_BYTE *)(v0 + 88);
  uint64_t v5 = sub_67C4(&qword_FBE20);
  uint64_t v6 = swift_allocObject(v5, 224LL, 7LL);
  *(void *)(v0 + 64) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_C2D10;
  *(void *)(v6 + 32) = 0x6E6F737265507369LL;
  *(void *)(v6 + 40) = 0xEA00000000006C61LL;
  *(_BYTE *)(v6 + 48) = v4;
  *(void *)(v6 + 72) = &type metadata for Bool;
  *(void *)(v6 + 80) = 0x6E756D6D6F437369LL;
  *(void *)(v6 + 88) = 0xEA00000000006C61LL;
  *(_BYTE *)(v6 + 96) = v3;
  unint64_t v7 = (void *)(v6 + 144);
  *(void *)(v6 + 120) = &type metadata for Bool;
  *(void *)(v6 + 128) = 0x614E656369766564LL;
  *(void *)(v6 + 136) = 0xEA0000000000656DLL;
  sub_32FC0(v2, v1, &qword_FBD98);
  uint64_t v8 = type metadata accessor for SpeakableString(0LL);
  int v9 = sub_33010(v1);
  uint64_t v10 = *(void *)(v0 + 56);
  if (v9 == 1)
  {
    sub_DABC(*(void *)(v0 + 56), &qword_FBD98);
    *(_OWORD *)unint64_t v7 = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
  }

  else
  {
    *(void *)(v6 + 168) = v8;
    uint64_t v11 = sub_DB90(v7);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v11, v10, v8);
  }

  uint64_t v12 = *(void *)(v0 + 48);
  uint64_t v13 = *(void *)(v0 + 32);
  *(void *)(v6 + 176) = 0x656D614E6D6F6F72LL;
  *(void *)(v6 + 184) = 0xE800000000000000LL;
  sub_32FC0(v13, v12, &qword_FBD98);
  int v14 = sub_33010(v12);
  uint64_t v15 = *(void *)(v0 + 48);
  if (v14 == 1)
  {
    sub_DABC(*(void *)(v0 + 48), &qword_FBD98);
    *(_OWORD *)(v6 + 192) = 0u;
    *(_OWORD *)(v6 + 208) = 0u;
  }

  else
  {
    *(void *)(v6 + 216) = v8;
    id v16 = sub_DB90((void *)(v6 + 192));
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v16, v15, v8);
  }

  *(void *)(v0 + 72) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_32D90;
  return ((uint64_t (*)(void, unint64_t, unint64_t, uint64_t))v19)( *(void *)(v0 + 16),  0xD000000000000025LL,  0x80000000000C7860LL,  v6);
}

uint64_t sub_32D90()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch(sub_32E14, 0LL, 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v2 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  return sub_33004(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_32E14()
{
  return sub_33004(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_32E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_32EA4(a1, a2, a3);
}

uint64_t sub_32EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_67C4(&qword_FB530);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_32FC0(a1, (uint64_t)v12, &qword_FB530);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_DABC(a1, &qword_FB530);
  return v13;
}

uint64_t sub_32FB8()
{
  return type metadata accessor for DismissTimerCATs_Async(0LL);
}

uint64_t sub_32FC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_67C4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_33004(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_33010(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, 1LL, v1);
}

uint64_t sub_3301C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v67 = a3;
  uint64_t v7 = sub_67C4(&qword_FBD90);
  __chkstk_darwin(v7);
  int v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DialogPhase(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  int v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  id v16 = (char *)&v64 - v15;
  uint64_t v17 = type metadata accessor for TimerAnalyticsServiceImpl();
  swift_initStaticObject(v17, &unk_FB438);
  sub_7E4B8(a2, v3, a1);
  uint64_t v18 = type metadata accessor for ApplicationContext(0LL);
  static ApplicationContext.shared.getter(v18);
  ApplicationContext.deviceState.getter(v69);
  sub_1BC50();
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, a1, v10);
  static DialogPhase.clarification.getter(v19);
  sub_33CAC();
  char v20 = sub_33D4C();
  uint64_t v21 = sub_33D84((uint64_t)v14);
  if ((v20 & 1) != 0)
  {
    sub_33D84((uint64_t)v16);
    sub_33D24();
    uint64_t v22 = sub_33D9C();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL))(v9, v67, v22);
    sub_33D64((uint64_t)v9);
    sub_33D8C();
    sub_33E3C(v23, (uint64_t)&protocol witness table for AceOutput);
    sub_33DB4();
    uint64_t v24 = static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v4,  v69);
    sub_33E58(v24, &qword_FBDA8);
    uint64_t v25 = &qword_FBD90;
    uint64_t v26 = v9;
  }

  else
  {
    uint64_t v65 = v9;
    uint64_t v66 = a2;
    static DialogPhase.summary.getter(v21);
    char v27 = sub_33D4C();
    uint64_t v28 = sub_33D84((uint64_t)v14);
    if ((v27 & 1) != 0
      || (static DialogPhase.status.getter(v28), char v29 = sub_33D4C(), v30 = sub_33D84((uint64_t)v14), (v29 & 1) != 0))
    {
      sub_33D84((uint64_t)v16);
      sub_33D24();
      uint64_t v31 = sub_33D9C();
      uint64_t v32 = (uint64_t)v65;
      sub_33DA8((uint64_t)v65, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16LL));
      sub_33D64(v32);
      sub_33D8C();
      sub_33E3C(v33, (uint64_t)&protocol witness table for AceOutput);
      sub_33DB4();
      uint64_t v34 = static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v4,  v69);
    }

    else
    {
      static DialogPhase.confirmation.getter(v30);
      char v36 = sub_33D4C();
      uint64_t v37 = sub_33D84((uint64_t)v14);
      if ((v36 & 1) == 0)
      {
        static DialogPhase.error.getter(v37);
        char v46 = sub_33D4C();
        uint64_t v47 = sub_33D84((uint64_t)v14);
        if ((v46 & 1) != 0)
        {
          sub_33D84((uint64_t)v16);
          sub_33D24();
          uint64_t v48 = sub_33D9C();
          uint64_t v49 = (uint64_t)v65;
          sub_33DA8((uint64_t)v65, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16LL));
          sub_33D64(v49);
          sub_33D8C();
          sub_33DD8(v50, (uint64_t)&protocol witness table for AceOutput);
          sub_33DB4();
          uint64_t v51 = sub_33E00();
          uint64_t v52 = static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)(v51);
        }

        else
        {
          static DialogPhase.confirmed.getter(v47);
          char v53 = sub_33D4C();
          uint64_t v54 = sub_33D84((uint64_t)v14);
          uint64_t v49 = (uint64_t)v65;
          if ((v53 & 1) != 0)
          {
            sub_33D84((uint64_t)v16);
            sub_33D24();
            uint64_t v55 = sub_33D9C();
            sub_33DA8(v49, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16LL));
            sub_33D64(v49);
            sub_33D8C();
            sub_33DD8(v56, (uint64_t)&protocol witness table for AceOutput);
            sub_33DB4();
            uint64_t v57 = sub_33E20();
            uint64_t v52 = static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)(v57);
          }

          else
          {
            static DialogPhase.canceled.getter(v54);
            char v58 = sub_33D4C();
            sub_33D84((uint64_t)v14);
            sub_33D84((uint64_t)v16);
            char v59 = sub_33D24();
            if ((v58 & 1) != 0)
            {
              type metadata accessor for AceOutput(0LL);
              sub_33D8C();
              sub_33DD8(v60, (uint64_t)&protocol witness table for AceOutput);
              static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)( v4,  v69,  v59 & 1,  v66,  1LL,  v68);
              uint64_t v25 = &qword_FBDA8;
              uint64_t v26 = v68;
              goto LABEL_7;
            }

            uint64_t v61 = type metadata accessor for NLContextUpdate(0LL);
            sub_33DA8(v49, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16LL));
            sub_33D64(v49);
            sub_33D8C();
            sub_33DD8(v62, (uint64_t)&protocol witness table for AceOutput);
            uint64_t v63 = sub_33E00();
            uint64_t v52 = static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)(v63);
          }
        }

        sub_33E58(v52, &qword_FBDA8);
        uint64_t v25 = &qword_FBD90;
        uint64_t v26 = (_BYTE *)v49;
        goto LABEL_7;
      }

      sub_33D84((uint64_t)v16);
      sub_33D24();
      uint64_t v38 = sub_33D9C();
      uint64_t v32 = (uint64_t)v65;
      sub_33DA8((uint64_t)v65, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16LL));
      sub_33D64(v32);
      sub_33D8C();
      sub_33E3C(v39, (uint64_t)&protocol witness table for AceOutput);
      sub_33DB4();
      uint64_t v40 = sub_33E20();
      uint64_t v34 = static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v40,  v41,  v42,  v43,  v44,  v45,  v32);
    }

    sub_33E58(v34, &qword_FBDA8);
    uint64_t v25 = &qword_FBD90;
    uint64_t v26 = (_BYTE *)v32;
  }

LABEL_7:
  sub_DABC((uint64_t)v26, v25);
  return _s20HandleIntentStrategyVwxx_0(v69);
}

uint64_t sub_33530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  void v3[2] = a1;
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  v3[5] = sub_1B6C8(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v3[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[7] = v6;
  v3[8] = sub_1B6C8(v6);
  uint64_t v7 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  void v3[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[10] = v8;
  v3[11] = sub_1B6C8(v8);
  uint64_t v9 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[13] = v10;
  v3[14] = sub_1B6C8(v10);
  return swift_task_switch(sub_335D4, 0LL, 0LL);
}

uint64_t sub_335D4()
{
  if (qword_FB160 != -1) {
    swift_once(&qword_FB160, sub_338E8);
  }
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = sub_5474(v4, (uint64_t)qword_FC678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  uint64_t v7 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, v7);
  type metadata accessor for TimerBaseCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  v0[15] = CATWrapper.__allocating_init(options:globals:)(v5, 0LL);
  uint64_t v8 = (void *)swift_task_alloc(dword_10055C);
  v0[16] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_336E0;
  return sub_AC43C();
}

uint64_t sub_336E0(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 128LL);
  uint64_t v5 = *(void **)v2;
  v5[17] = v1;
  swift_task_dealloc(v4);
  swift_release();
  if (v1) {
    return sub_2B44C();
  }
  v5[18] = a1;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  v5[19] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_3379C;
  return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v5[2],  v5[3],  v5[4],  v5[14],  0LL);
}

uint64_t sub_3379C()
{
  uint64_t v3 = *(void **)(*(void *)v1 + 144LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 16Hasher.init(_seed:)(v3, 0LL) = v0;
  swift_task_dealloc(v2);

  return sub_2B44C();
}

uint64_t sub_33800()
{
  uint64_t v1 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 104) + 8LL))(v1, *(void *)(v0 + 96));
  swift_task_dealloc(v1);
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  return sub_2B64C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_33860()
{
  return sub_33DC4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_338A4()
{
  return sub_33DC4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_338E8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FC678);
  sub_5474(v0, (uint64_t)qword_FC678);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_33930(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 104) = a3;
  *(void *)(v4 + 112) = v3;
  *(_BYTE *)(v4 + 144) = a2;
  *(void *)(v4 + 96) = a1;
  return swift_task_switch(sub_33950, 0LL, 0LL);
}

uint64_t sub_33950()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 144);
  uint64_t v3 = type metadata accessor for ApplicationContext(0LL);
  static ApplicationContext.shared.getter(v3);
  ApplicationContext.deviceState.getter((void *)(v0 + 16));
  sub_1BC50();
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  sub_8CFC((void *)(v0 + 16), v4);
  char v6 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v4, v5);
  uint64_t v7 = type metadata accessor for ViewFactory(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  ViewFactory.init(ttsEnabled:)(v6 & 1);
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 16));
  unint64_t v8 = dispatch thunk of ViewFactory.makeUtteranceViews(template:listenAfterSpeaking:canUseServerTTS:)(v1, v2, 1LL);
  sub_1BC50();
  uint64_t v9 = type metadata accessor for TimerAnalyticsServiceImpl();
  uint64_t inited = swift_initStaticObject(v9, &unk_FB438);
  if (v8 >> 62)
  {
    sub_33E48(inited, &qword_FC6A8, &OBJC_CLASS___SAAceView_ptr);
    sub_33E50();
    uint64_t v13 = sub_33E60();
    sub_2B7C4();
  }

  else
  {
    uint64_t v11 = sub_33E50();
    uint64_t v12 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v11);
    sub_33E48(v12, &qword_FC6A8, &OBJC_CLASS___SAAceView_ptr);
    uint64_t v13 = v8;
  }

  sub_7E4B8(v13, *(void *)(v0 + 112), *(void *)(v0 + 104));
  swift_bridgeObjectRelease(v13);
  id v14 = [objc_allocWithZone(SAUIAddViews) init];
  uint64_t v15 = v14;
  *(void *)(v0 + 120) = v14;
  if (v8 >> 62)
  {
    sub_33E48((uint64_t)v14, &qword_FC6A8, &OBJC_CLASS___SAAceView_ptr);
    sub_33E50();
    uint64_t v18 = sub_33E60();
    sub_2B7C4();
  }

  else
  {
    uint64_t v16 = sub_33E50();
    uint64_t v17 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v16);
    sub_33E48(v17, &qword_FC6A8, &OBJC_CLASS___SAAceView_ptr);
    uint64_t v18 = v8;
  }

  sub_2B7C4();
  sub_7F2C4(v18, v15);
  uint64_t v19 = DialogPhase.aceValue.getter();
  sub_7F2E0(v19, v20, v15);
  static AceService.currentAsync.getter();
  uint64_t v22 = *(void *)(v0 + 80);
  uint64_t v21 = *(void *)(v0 + 88);
  sub_8CFC((void *)(v0 + 56), v22);
  uint64_t v23 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
  *(void *)(v0 + 128) = v23;
  uint64_t v24 = sub_33E48((uint64_t)v23, &qword_FC6B0, &OBJC_CLASS___SABaseCommand_ptr);
  *uint64_t v23 = v0;
  v23[1] = sub_33BC0;
  return AceServiceInvokerAsync.submit<A>(_:)(v15, v22, v24, v21);
}

uint64_t sub_33BC0(void *a1)
{
  *(void *)(*(void *)v2 + 136LL) = v1;
  swift_task_dealloc();
  if (!v1) {

  }
  return sub_2B44C();
}

uint64_t sub_33C28()
{
  uint64_t v1 = *(void **)(v0 + 120);
  uint64_t v2 = _s20HandleIntentStrategyVwxx_0((void *)(v0 + 56));
  static ExecuteResponse.complete()(v2);

  return sub_2B64C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_33C6C()
{
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_33CAC()
{
  unint64_t result = qword_FC698;
  if (!qword_FC698)
  {
    uint64_t v1 = type metadata accessor for DialogPhase(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DialogPhase, v1);
    atomic_store(result, &qword_FC698);
  }

  return result;
}

uint64_t sub_33CEC(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_33D24()
{
  uint64_t v1 = *(void *)(v0 - 96);
  uint64_t v2 = *(void *)(v0 - 88);
  sub_8CFC((void *)(v0 - 120), v1);
  return dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v1, v2);
}

uint64_t sub_33D4C()
{
  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v1, v0, v3);
}

uint64_t sub_33D64(uint64_t a1)
{
  return type metadata accessor for AceOutput(0LL);
}

uint64_t sub_33D84(uint64_t a1)
{
  return v1(a1, v2);
}

double sub_33D8C()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  *(void *)(v0 - 128) = 0LL;
  return result;
}

uint64_t sub_33D9C()
{
  return type metadata accessor for NLContextUpdate(0LL);
}

uint64_t sub_33DA8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

  ;
}

uint64_t sub_33DC4(uint64_t (*a1)(void))
{
  return a1();
}

void *sub_33DD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[3] = a1;
  v2[4] = a2;
  return sub_DB90(v2);
}

uint64_t sub_33DE4()
{
  return (*(uint64_t (**)(void, void))(v0[13] + 8LL))(v0[14], v0[12]);
}

uint64_t sub_33E00()
{
  return v0;
}

uint64_t sub_33E20()
{
  return v0;
}

void *sub_33E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[3] = a1;
  v2[4] = a2;
  return sub_DB90(v2);
}

uint64_t sub_33E48(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_33CEC(0LL, a2, a3);
}

uint64_t sub_33E50()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_33E58(uint64_t a1, uint64_t *a2)
{
  return sub_DABC(v2 - 160, a2);
}

uint64_t sub_33E60()
{
  return _bridgeCocoaArray<A>(_:)(v0, v1);
}

uint64_t type metadata accessor for SearchForTimersCATsSimple(uint64_t a1)
{
  uint64_t result = qword_FC6B8;
  if (!qword_FC6B8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchForTimersCATsSimple);
  }
  return result;
}

uint64_t sub_33EA4(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100E70);
}

uint64_t sub_33EE0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  sub_1B9B8();
  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_33EFC()
{
  uint64_t v2 = v1[2];
  uint64_t v3 = sub_67C4(&qword_FBE20);
  uint64_t v4 = sub_34D60(v3, 80LL);
  v1[4] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_C2640;
  *(void *)(v4 + 32) = 0x7372656D6974LL;
  *(void *)(v4 + 40) = 0xE600000000000000LL;
  *(void *)(v4 + 72) = sub_67C4(&qword_FBE28);
  *(void *)(v4 + 48) = v2;
  sub_34DEC((int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  swift_bridgeObjectRetain(v2);
  uint64_t v5 = (void *)swift_task_alloc(v0);
  v1[5] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_33FD0;
  return v7(0xD000000000000028LL, 0x80000000000C79E0LL, v4);
}

uint64_t sub_33FD0(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 40);
  uint64_t v5 = *v2;
  *(void *)(v5 + 48) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_1B9B8();
    return swift_task_switch(v6, v7, v8);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v5 + 32));
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }

uint64_t sub_34054( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_67C4(&qword_FBD98);
  v8[11] = sub_34C04(v9);
  v8[12] = sub_1B970();
  v8[13] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_340A4()
{
  uint64_t v4 = sub_67C4(&qword_FBE20);
  uint64_t v5 = sub_34D60(v4, 416LL);
  v1[14] = v5;
  *(_OWORD *)(v5 + 16) = xmmword_C2D50;
  *(void *)(v5 + 32) = v3;
  *(void *)(v5 + 40) = 0x80000000000C78D0LL;
  sub_34CC4(v0, v6, &qword_FBD98);
  uint64_t v7 = sub_1BCD8();
  uint64_t v8 = sub_34D38(v7);
  if (v9)
  {
    sub_34CBC(v8, &qword_FBD98);
    sub_34CF0();
  }

  else
  {
    *(void *)(v5 + 72) = v0;
    uint64_t v10 = sub_34CB4();
    sub_34BA4((uint64_t)v10);
  }

  uint64_t v11 = v1[3];
  uint64_t v12 = sub_34DC4(v3 + 3);
  if (v11)
  {
    uint64_t v12 = type metadata accessor for DialogDuration(v12);
  }

  else
  {
    *(void *)(v5 + 104) = 0LL;
    *(void *)(v5 + 112) = 0LL;
  }

  sub_34BC8(v12);
  sub_34CC4(v14, v13, &qword_FBD98);
  sub_34D90();
  if (v9)
  {
    uint64_t v15 = sub_34CFC();
    sub_34CBC(v15, &qword_FBD98);
    sub_34CF0();
  }

  else
  {
    *(void *)(v5 + 168) = v0;
    uint64_t v16 = sub_34CB4();
    sub_34BA4((uint64_t)v16);
    sub_34CFC();
  }

  uint64_t v17 = sub_34CCC();
  sub_34CC4(v17, v18, &qword_FBD98);
  uint64_t v19 = sub_34E00();
  if (v9)
  {
    sub_34CBC(v19, &qword_FBD98);
    sub_34CF0();
  }

  else
  {
    *(void *)(v5 + 216) = v0;
    uint64_t v20 = sub_34CB4();
    sub_34BA4((uint64_t)v20);
  }

  uint64_t v21 = v1[7];
  strcpy((char *)(v5 + 224), "matchedTimers");
  *(_WORD *)(v5 + 238) = -4864;
  uint64_t v22 = sub_67C4(&qword_FBE28);
  sub_34C88(v22);
  if (v21)
  {
    uint64_t v23 = type metadata accessor for TimerTimer(0LL);
    uint64_t v24 = v21;
  }

  else
  {
    uint64_t v24 = 0LL;
    uint64_t v23 = 0LL;
    *(void *)(v5 + 296) = 0LL;
    *(void *)(v5 + 304) = 0LL;
  }

  uint64_t v25 = v1[9];
  *(void *)(v5 + 288) = v24;
  *(void *)(v5 + 312) = v23;
  *(void *)(v5 + 320) = v3 + 10;
  uint64_t v26 = sub_34C1C((uint64_t)"matchedTimersInRespondingRoom");
  if (v25)
  {
    uint64_t v26 = type metadata accessor for TimerTimerGrouping();
  }

  else
  {
    *(void *)(v5 + 392) = 0LL;
    *(void *)(v5 + 400) = 0LL;
  }

  *(void *)(v5 + 384) = v25;
  *(void *)(v5 + 408) = v26;
  sub_34D04();
  sub_2F740();
  sub_2C044();
  swift_retain();
  char v27 = (void *)swift_task_alloc(v2);
  v1[15] = v27;
  *char v27 = v1;
  v27[1] = sub_342C4;
  uint64_t v28 = sub_34D1C(v3 + 11);
  return sub_34C70(v28, v29, v30, v31);
}

uint64_t sub_342C4()
{
  if (v0)
  {
    sub_1B9B8();
    return sub_2F658(v1, v2, v3);
  }

  else
  {
    sub_34DB8();
    sub_1BABC();
    sub_1BA24();
    sub_1BA14();
    uint64_t v5 = sub_34D80();
    return sub_34BB8(v5, v6);
  }

uint64_t sub_34314()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRelease(*(void *)(v0 + 112));
  sub_1BABC();
  swift_task_dealloc(v1);
  sub_1BA24();
  return sub_2075C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_34358( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_67C4(&qword_FBD98);
  v8[11] = sub_34C04(v9);
  v8[12] = sub_1B970();
  v8[13] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_343A8()
{
  uint64_t v4 = sub_67C4(&qword_FBE20);
  uint64_t v5 = sub_34D60(v4, 416LL);
  v1[14] = v5;
  *(_OWORD *)(v5 + 16) = xmmword_C2D50;
  *(void *)(v5 + 32) = v3;
  *(void *)(v5 + 40) = 0x80000000000C78D0LL;
  sub_34CC4(v0, v6, &qword_FBD98);
  uint64_t v7 = sub_1BCD8();
  uint64_t v8 = sub_34D38(v7);
  if (v9)
  {
    sub_34CBC(v8, &qword_FBD98);
    sub_34CF0();
  }

  else
  {
    *(void *)(v5 + 72) = v0;
    uint64_t v10 = sub_34CB4();
    sub_34BA4((uint64_t)v10);
  }

  uint64_t v11 = v1[3];
  uint64_t v12 = sub_34DC4(v3 + 3);
  if (v11)
  {
    uint64_t v12 = type metadata accessor for DialogDuration(v12);
  }

  else
  {
    *(void *)(v5 + 104) = 0LL;
    *(void *)(v5 + 112) = 0LL;
  }

  sub_34BC8(v12);
  sub_34CC4(v14, v13, &qword_FBD98);
  sub_34D90();
  if (v9)
  {
    uint64_t v15 = sub_34CFC();
    sub_34CBC(v15, &qword_FBD98);
    sub_34CF0();
  }

  else
  {
    *(void *)(v5 + 168) = v0;
    uint64_t v16 = sub_34CB4();
    sub_34BA4((uint64_t)v16);
    sub_34CFC();
  }

  uint64_t v17 = sub_34CCC();
  sub_34CC4(v17, v18, &qword_FBD98);
  uint64_t v19 = sub_34E00();
  if (v9)
  {
    sub_34CBC(v19, &qword_FBD98);
    sub_34CF0();
  }

  else
  {
    *(void *)(v5 + 216) = v0;
    uint64_t v20 = sub_34CB4();
    sub_34BA4((uint64_t)v20);
  }

  uint64_t v21 = v1[7];
  *(void *)(v5 + 224) = 0x65686374616D6E75LL;
  *(void *)(v5 + 232) = 0xEF7372656D695464LL;
  uint64_t v22 = sub_67C4(&qword_FBE28);
  sub_34C88(v22);
  if (v21)
  {
    uint64_t v23 = type metadata accessor for TimerTimer(0LL);
    uint64_t v24 = v21;
  }

  else
  {
    uint64_t v24 = 0LL;
    uint64_t v23 = 0LL;
    *(void *)(v5 + 296) = 0LL;
    *(void *)(v5 + 304) = 0LL;
  }

  uint64_t v25 = v1[9];
  *(void *)(v5 + 288) = v24;
  *(void *)(v5 + 312) = v23;
  *(void *)(v5 + 320) = v3 + 6;
  uint64_t v26 = sub_34C1C((uint64_t)"unmatchedInRespondingRoom");
  if (v25)
  {
    uint64_t v26 = type metadata accessor for TimerTimerGrouping();
  }

  else
  {
    *(void *)(v5 + 392) = 0LL;
    *(void *)(v5 + 400) = 0LL;
  }

  *(void *)(v5 + 384) = v25;
  *(void *)(v5 + 408) = v26;
  sub_34D04();
  sub_2F740();
  sub_2C044();
  swift_retain();
  char v27 = (void *)swift_task_alloc(v2);
  v1[15] = v27;
  *char v27 = v1;
  v27[1] = sub_345C8;
  uint64_t v28 = sub_34D1C(v3 + 13);
  return sub_34C70(v28, v29, v30, v31);
}

uint64_t sub_345C8()
{
  if (v0)
  {
    sub_1B9B8();
    return sub_2F658(v1, v2, v3);
  }

  else
  {
    sub_34DB8();
    sub_1BABC();
    sub_1BA24();
    sub_1BA14();
    uint64_t v5 = sub_34D80();
    return sub_34BB8(v5, v6);
  }

uint64_t sub_34618( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v9 + 64) = a8;
  *(void *)(v9 + 72) = v8;
  *(_BYTE *)(v9 + 128) = a7;
  *(void *)(v9 + 48) = a5;
  *(void *)(v9 + 56) = a6;
  *(void *)(v9 + 32) = a3;
  *(void *)(v9 + 40) = a4;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = sub_67C4(&qword_FBD98);
  *(void *)(v9 + 80) = sub_34C04(v10);
  *(void *)(v9 + 88) = sub_1B970();
  *(void *)(v9 + 96) = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_34678()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v4 = sub_67C4(&qword_FBE20);
  uint64_t v5 = sub_34D60(v4, 368LL);
  *(void *)(v0 + 104) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_C2D60;
  *(void *)(v5 + 32) = 0x736D657469LL;
  *(void *)(v5 + 40) = 0xE500000000000000LL;
  uint64_t v6 = sub_67C4(&qword_FBE28);
  *(void *)(v5 + 48) = v3;
  *(void *)(v5 + 72) = v6;
  *(void *)(v5 + 80) = 0xD000000000000013LL;
  *(void *)(v5 + 88) = 0x80000000000C78D0LL;
  sub_32FC0(v2, v1, &qword_FBD98);
  uint64_t v7 = sub_1BCD8();
  int v8 = sub_33010(v1);
  uint64_t v9 = *(void *)(v0 + 96);
  if (v8 == 1)
  {
    sub_2C044();
    sub_DABC(v9, &qword_FBD98);
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
  }

  else
  {
    *(void *)(v5 + 120) = v7;
    uint64_t v11 = sub_DB90((void *)(v5 + 96));
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v11, v9, v7);
    sub_2C044();
  }

  uint64_t v12 = *(void *)(v0 + 32);
  *(void *)(v5 + 128) = 0xD000000000000016LL;
  *(void *)(v5 + 136) = 0x80000000000C78F0LL;
  uint64_t v13 = 0LL;
  if (v12)
  {
    uint64_t v13 = type metadata accessor for DialogDuration(0LL);
  }

  else
  {
    *(void *)(v5 + 152) = 0LL;
    *(void *)(v5 + 160) = 0LL;
  }

  uint64_t v14 = *(void *)(v0 + 88);
  uint64_t v15 = *(void *)(v0 + 40);
  *(void *)(v5 + 144) = v12;
  *(void *)(v5 + 168) = v13;
  strcpy((char *)(v5 + 176), "requestedType");
  *(_WORD *)(v5 + 190) = -4864;
  sub_34CC4(v15, v10, &qword_FBD98);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v14, 1LL, v7) == 1)
  {
    uint64_t v16 = sub_34CFC();
    sub_34CBC(v16, &qword_FBD98);
    sub_34CF0();
  }

  else
  {
    *(void *)(v5 + 216) = v7;
    uint64_t v18 = sub_34CB4();
    sub_34BA4((uint64_t)v18);
    sub_34CFC();
  }

  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v20 = *(void *)(v0 + 48);
  strcpy((char *)(v5 + 224), "requestedState");
  *(_BYTE *)(v5 + 239) = -18;
  sub_34CC4(v20, v17, &qword_FBD98);
  uint64_t v21 = sub_33010(v19);
  if ((_DWORD)v21 == 1)
  {
    sub_34CBC(v21, &qword_FBD98);
    sub_34CF0();
  }

  else
  {
    *(void *)(v5 + 264) = v7;
    uint64_t v22 = sub_34CB4();
    sub_34BA4((uint64_t)v22);
  }

  char v23 = *(_BYTE *)(v0 + 128);
  *(void *)(v5 + 272) = 0x6574496C61746F74LL;
  *(void *)(v5 + 280) = 0xEA0000000000736DLL;
  if ((v23 & 1) != 0)
  {
    uint64_t v25 = 0LL;
    uint64_t v24 = 0LL;
    *(void *)(v5 + 296) = 0LL;
    *(void *)(v5 + 304) = 0LL;
  }

  else
  {
    uint64_t v24 = *(void *)(v0 + 56);
    uint64_t v25 = &type metadata for Double;
  }

  uint64_t v26 = *(void *)(v0 + 64);
  *(void *)(v5 + 288) = v24;
  *(void *)(v5 + 312) = v25;
  *(void *)(v5 + 320) = 0x676E6970756F7267LL;
  *(void *)(v5 + 328) = 0xE800000000000000LL;
  uint64_t v27 = 0LL;
  if (v26)
  {
    uint64_t v27 = type metadata accessor for TimerTimerGrouping();
  }

  else
  {
    *(void *)(v5 + 344) = 0LL;
    *(void *)(v5 + 352) = 0LL;
  }

  *(void *)(v5 + 336) = v26;
  *(void *)(v5 + 360) = v27;
  sub_34DEC((int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  sub_2F740();
  uint64_t v28 = (void *)swift_task_alloc(v5 + 240);
  *(void *)(v0 + 112) = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_34994;
  return v30(0xD00000000000003CLL, 0x80000000000C7910LL, v5);
}

uint64_t sub_34994()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 112);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_1B9B8();
    return sub_2F658(v4, v5, v6);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 104));
    sub_1BABC();
    sub_1BA24();
    sub_1BA14();
    uint64_t v8 = sub_34D80();
    return sub_34BB8(v8, v9);
  }

uint64_t sub_34A0C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  sub_1BABC();
  swift_task_dealloc(v1);
  sub_1BA24();
  return sub_2075C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_34A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_34A94(a1, a2, a3);
}

uint64_t sub_34A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1C308();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_67C4(&qword_FB530);
  __chkstk_darwin(v11);
  sub_1C308();
  uint64_t v14 = v13 - v12;
  sub_32FC0(a1, v13 - v12, &qword_FB530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapperSimple.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_DABC(a1, &qword_FB530);
  return v15;
}

uint64_t sub_34B98()
{
  return type metadata accessor for SearchForTimersCATsSimple(0LL);
}

uint64_t sub_34BA4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(a1, v2, v1);
}

uint64_t sub_34BB8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_34BC8(uint64_t result)
{
  *(void *)(v2 + 96) = v1;
  *(void *)(v2 + 120) = result;
  strcpy((char *)(v2 + 128), "requestedType");
  *(_WORD *)(v2 + 142) = -4864;
  return result;
}

uint64_t sub_34C04(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_34C1C@<X0>(uint64_t a1@<X8>)
{
  v3[41] = (a1 - 32) | 0x8000000000000000LL;
  v3[42] = v1;
  v3[45] = v2;
  v3[46] = 0x676E6970756F7267LL;
  v3[47] = 0xE800000000000000LL;
  return 0LL;
}

uint64_t sub_34C4C()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 120);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 128) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_34C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_34C88(uint64_t result)
{
  v2[30] = v1;
  v2[33] = result;
  v2[34] = 0x6D69547065656C73LL;
  v2[35] = 0xEA00000000007265LL;
  return result;
}

void *sub_34CB4()
{
  return sub_DB90(v0);
}

uint64_t sub_34CBC(uint64_t a1, uint64_t *a2)
{
  return sub_DABC(v2, a2);
}

uint64_t sub_34CC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_32FC0(a1, v3, a3);
}

uint64_t sub_34CCC()
{
  uint64_t result = *(void *)(v1 + 40);
  *(void *)(v2 + 176) = v0;
  *(void *)(v2 + 184) = 0xEE00657461745364LL;
  return result;
}

double sub_34CF0()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t sub_34CFC()
{
  return swift_retain(v0);
}

uint64_t sub_34D04()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_34D1C@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_34D38(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v1, 1LL, a1);
}

uint64_t sub_34D60(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t sub_34D68( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[9] = a8;
  v9[10] = v8;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  v9[4] = a3;
  v9[2] = result;
  return result;
}

uint64_t sub_34D80()
{
  return v0;
}

uint64_t sub_34D90()
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v1, 1LL, v0);
}

uint64_t sub_34DB8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 112));
}

uint64_t sub_34DC4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = (v1 - 32) | 0x8000000000000000LL;
  return 0LL;
}

  ;
}

char *sub_34DEC@<X0>(int *a1@<X8>)
{
  return (char *)a1 + *a1;
}

uint64_t sub_34E00()
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v1, 1LL, v0);
}

uint64_t type metadata accessor for CreateTimerCATPatternsExecutor(uint64_t a1)
{
  return sub_DAF8(a1, (uint64_t *)&unk_FC728, (uint64_t)&nominal type descriptor for CreateTimerCATPatternsExecutor);
}

uint64_t sub_34E38(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100E80);
}

void sub_34E74()
{
  uint64_t v5 = (char *)&v18 - v4;
  uint64_t v6 = sub_67C4(&qword_FBE20);
  uint64_t v7 = sub_34D60(v6, 224LL);
  *(_OWORD *)(v7 + 16) = xmmword_C2D10;
  *(void *)(v7 + 32) = 7368801LL;
  *(void *)(v7 + 40) = 0xE300000000000000LL;
  uint64_t v8 = *v1;
  if (*v1)
  {
    uint64_t v9 = type metadata accessor for SirikitApp(0LL);
    uint64_t v10 = v8;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
    *(void *)(v7 + 56) = 0LL;
    *(void *)(v7 + 64) = 0LL;
  }

  *(void *)(v7 + 48) = v10;
  *(void *)(v7 + 72) = v9;
  strcpy((char *)(v7 + 80), "createdTimer");
  *(_BYTE *)(v7 + 93) = 0;
  *(_WORD *)(v7 + 94) = -5120;
  uint64_t v11 = v1[1];
  if (v11)
  {
    uint64_t v12 = type metadata accessor for TimerTimer(0LL);
    uint64_t v13 = v11;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v12 = 0LL;
    *(void *)(v7 + 104) = 0LL;
    *(void *)(v7 + 112) = 0LL;
  }

  *(void *)(v7 + 96) = v13;
  *(void *)(v7 + 120) = v12;
  *(void *)(v7 + 128) = 0xD000000000000016LL;
  *(void *)(v7 + 136) = 0x80000000000C7A50LL;
  uint64_t TimerHandledOnWatchParameters = type metadata accessor for CreateTimerHandledOnWatchParameters(0LL);
  sub_8C84((uint64_t)v1 + *(int *)(TimerHandledOnWatchParameters + 24), (uint64_t)v5, &qword_FBD98);
  uint64_t v15 = sub_1BCD8();
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v5, 1LL, v15) == 1)
  {
    swift_retain();
    sub_38084();
    sub_17A70((uint64_t)v5, &qword_FBD98);
    *(_OWORD *)(v7 + 144) = 0u;
    *(_OWORD *)(v7 + 160) = 0u;
  }

  else
  {
    *(void *)(v7 + 168) = v15;
    uint64_t v16 = sub_DB90((void *)(v7 + 144));
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v16, v5, v15);
    swift_retain();
    sub_38084();
  }

  *(void *)(v7 + 176) = 0x6174614477656976LL;
  *(void *)(v7 + 184) = 0xE800000000000000LL;
  sub_8C84((uint64_t)v1 + *(int *)(TimerHandledOnWatchParameters + 28), v0, &qword_FBD98);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v0, 1LL, v15) == 1)
  {
    sub_17A70(v0, &qword_FBD98);
    *(_OWORD *)(v7 + 192) = 0u;
    *(_OWORD *)(v7 + 208) = 0u;
  }

  else
  {
    *(void *)(v7 + 216) = v15;
    uint64_t v17 = sub_DB90((void *)(v7 + 192));
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v17, v0, v15);
  }

  sub_17E58();
}

void sub_350C4(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = sub_67C4(&qword_FBE20);
  uint64_t v16 = sub_34D60(v15, 176LL);
  *(_OWORD *)(v16 + 16) = xmmword_C27D0;
  uint64_t v17 = (void *)(v16 + 48);
  strcpy((char *)(v16 + 32), "cancelAction");
  *(_BYTE *)(v16 + 45) = 0;
  *(_WORD *)(v16 + 46) = -5120;
  sub_8C84(v4, (uint64_t)v14, &qword_FBD98);
  uint64_t v18 = sub_1BCD8();
  sub_381CC((uint64_t)v14);
  if (v19)
  {
    sub_17A70((uint64_t)v14, &qword_FBD98);
    *(_OWORD *)uint64_t v17 = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
  }

  else
  {
    *(void *)(v16 + 72) = v18;
    uint64_t v20 = sub_DB90(v17);
    sub_3822C( (uint64_t)v20,  (uint64_t)v14,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32LL));
  }

  strcpy((char *)(v16 + 80), "confirmAction");
  *(_WORD *)(v16 + 94) = -4864;
  uint64_t v21 = a1(0LL);
  sub_8C84(v4 + *(int *)(v21 + 20), (uint64_t)v12, &qword_FBD98);
  sub_381CC((uint64_t)v12);
  if (v19)
  {
    sub_17A70((uint64_t)v12, &qword_FBD98);
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
  }

  else
  {
    *(void *)(v16 + 120) = v18;
    uint64_t v22 = sub_DB90((void *)(v16 + 96));
    sub_3822C( (uint64_t)v22,  (uint64_t)v12,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32LL));
  }

  *(void *)(v16 + 128) = a2;
  *(void *)(v16 + 136) = a3;
  sub_8C84(v4 + *(int *)(v21 + 24), v3, &qword_FBD98);
  sub_381CC(v3);
  if (v19)
  {
    sub_17A70(v3, &qword_FBD98);
    *(_OWORD *)(v16 + 144) = 0u;
    *(_OWORD *)(v16 + 160) = 0u;
  }

  else
  {
    *(void *)(v16 + 168) = v18;
    char v23 = sub_DB90((void *)(v16 + 144));
    sub_3822C((uint64_t)v23, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32LL));
  }

  sub_17E58();
}

uint64_t sub_352EC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return sub_2B82C((uint64_t)sub_352FC);
}

uint64_t sub_352FC()
{
  uint64_t v1 = sub_1BC58();
  sub_38098(v1, v2);
  uint64_t v3 = sub_1BC50();
  uint64_t v5 = sub_3808C(v3, v4);
  sub_38220(v5);
  uint64_t v6 = sub_67C4(&qword_FBE20);
  uint64_t v7 = (void *)sub_2FB40(v6);
  sub_37F74(v7);
  sub_37EB0(v8);
  uint64_t v9 = (void *)sub_381AC();
  *(void *)(v0 + 40) = v9;
  sub_380D4(v9, (uint64_t)sub_35388);
  unint64_t v10 = sub_37F20();
  return sub_37F14(v10, v11, v12, v13);
}

uint64_t sub_35388()
{
  if (!v1) {
    *(void *)(v2 + 56) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v3, v4, v5);
}

uint64_t sub_353D0()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_37E70;
  return sub_38068(0xD000000000000020LL, 0x80000000000C7BC0LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_35430(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  unint64_t v3 = (*(void *)(*(void *)(sub_67C4(&qword_FBD98) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[4] = swift_task_alloc(v3);
  v2[5] = swift_task_alloc(v3);
  uint64_t TimerHandledParameters = type metadata accessor for CreateTimerHandledParameters(0LL);
  v2[6] = TimerHandledParameters;
  v2[7] = sub_37EE0(TimerHandledParameters);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_354A4()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = (void *)v0[7];
  uint64_t v3 = v0[3];
  *uint64_t v2 = 0LL;
  uint64_t v4 = (uint64_t)v2 + *(int *)(v1 + 20);
  uint64_t v5 = sub_1BCD8();
  sub_38074(v4);
  *uint64_t v2 = v3;
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_duration);
  uint64_t v7 = v0[5];
  if (v6)
  {
    swift_retain();
    sub_76078();
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v7, 0LL, 1LL, v5);
  }

  else
  {
    sub_38074(v0[5]);
    swift_retain();
  }

  __n128 v8 = (uint64_t *)v0[7];
  sub_1B4F4(v0[5], v4);
  uint64_t v9 = sub_67C4(&qword_FBE20);
  uint64_t v11 = sub_34D60(v9, 128LL);
  v0[8] = v11;
  *(_OWORD *)(v11 + 16) = xmmword_C27E0;
  strcpy((char *)(v11 + 32), "createdTimer");
  *(_BYTE *)(v11 + 45) = 0;
  *(_WORD *)(v11 + 46) = -5120;
  uint64_t v12 = *v8;
  if (*v8)
  {
    uint64_t v13 = type metadata accessor for TimerTimer(0LL);
    uint64_t v14 = v12;
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v13 = 0LL;
    *(void *)(v11 + 56) = 0LL;
    *(void *)(v11 + 64) = 0LL;
  }

  uint64_t v15 = v0[4];
  *(void *)(v11 + 48) = v14;
  *(void *)(v11 + 72) = v13;
  *(void *)(v11 + 80) = 0xD000000000000016LL;
  *(void *)(v11 + 88) = 0x80000000000C7A50LL;
  sub_382AC(v13, v10, &qword_FBD98);
  int v16 = sub_33010(v15);
  uint64_t v17 = v0[4];
  if (v16 == 1)
  {
    sub_38084();
    sub_17A70(v17, &qword_FBD98);
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
  }

  else
  {
    uint64_t v18 = sub_3825C();
    sub_38198((uint64_t)v18);
    sub_38084();
  }

  char v19 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[9] = v19;
  sub_380D4(v19, (uint64_t)sub_35668);
  unint64_t v20 = sub_3815C();
  return sub_38014(v20, v21, v22, v23);
}

uint64_t sub_35668()
{
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v3, v4, v5);
}

uint64_t sub_356B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  sub_38060(a1, type metadata accessor for CreateTimerHandledParameters);
  swift_release();
  sub_1BABC();
  sub_1B86C();
  swift_task_dealloc(v2);
  return sub_2B748(*(void *)(v1 + 88), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_35714(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  sub_38060(a1, type metadata accessor for CreateTimerHandledParameters);
  swift_release();
  sub_1BABC();
  sub_1B86C();
  swift_task_dealloc(v2);
  return sub_2B64C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_35774(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_67C4(&qword_FBD98);
  v2[4] = sub_37EE0(v3);
  uint64_t TimerHandledParameters = type metadata accessor for CreateTimerHandledParameters(0LL);
  v2[5] = TimerHandledParameters;
  v2[6] = sub_37EE0(TimerHandledParameters);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_357C8()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void *)v0[6];
  uint64_t v3 = (uint64_t *)v0[3];
  uint64_t v4 = v0[4];
  *uint64_t v2 = 0LL;
  uint64_t v5 = (uint64_t)v2 + *(int *)(v1 + 20);
  uint64_t v6 = sub_1BCD8();
  sub_38074(v5);
  uint64_t v7 = *v3;
  *uint64_t v2 = v7;
  uint64_t v8 = sub_67C4(&qword_FBE20);
  uint64_t v9 = sub_34D60(v8, 128LL);
  v0[7] = v9;
  uint64_t v10 = sub_37F48((__n128 *)v9, (__n128)xmmword_C27E0);
  *(void *)(v9 + 48) = v7;
  *(void *)(v9 + 72) = v10;
  *(void *)(v9 + 80) = 0xD000000000000016LL;
  *(void *)(v9 + 88) = 0x80000000000C7A50LL;
  sub_8C84(v5, v4, &qword_FBD98);
  int v11 = sub_33010(v4);
  uint64_t v12 = v0[4];
  if (v11 == 1)
  {
    sub_382A0();
    sub_17A70(v12, &qword_FBD98);
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
  }

  else
  {
    *(void *)(v9 + 120) = v6;
    uint64_t v13 = sub_DB90((void *)(v9 + 96));
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v13, v12, v6);
    sub_382A0();
  }

  uint64_t v14 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v14;
  sub_380D4(v14, (uint64_t)sub_35904);
  unint64_t v15 = sub_3815C();
  return sub_38014(v15, v16, v17, v18);
}

uint64_t sub_35904()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v3, v4, v5);
}

uint64_t sub_3594C(uint64_t a1)
{
  uint64_t v1 = sub_381F8();
  return sub_2B748(v1, v2);
}

uint64_t sub_3598C(uint64_t a1)
{
  return sub_2B64C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_359D0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  uint64_t TimerHandledOnWatchParameters = type metadata accessor for CreateTimerHandledOnWatchParameters(0LL);
  v3[5] = TimerHandledOnWatchParameters;
  v3[6] = sub_37EE0(TimerHandledOnWatchParameters);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_35A14()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = (void *)v0[6];
  uint64_t v3 = (void (*)(void *))v0[2];
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
  uint64_t v4 = (uint64_t)v1 + *(int *)(v2 + 24);
  sub_1BCD8();
  sub_381E8(v4);
  sub_381E8((uint64_t)v1 + *(int *)(v2 + 28));
  v3(v1);
  sub_34E74();
  v0[7] = v5;
  v0[8] = v6;
  void *v6 = v0;
  v6[1] = sub_35AE0;
  sub_3814C();
  return v8(0xD00000000000001ALL);
}

uint64_t sub_35AE0()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v3, v4, v5);
}

uint64_t sub_35B28(uint64_t a1)
{
  uint64_t v1 = sub_381F8();
  return sub_2BB68(v1, v2);
}

uint64_t sub_35B5C(uint64_t a1)
{
  return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_35B94(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_2B82C((uint64_t)sub_35BA4);
}

uint64_t sub_35BA4()
{
  unint64_t v2 = v1[3];
  uint64_t v3 = sub_67C4(&qword_FBE20);
  uint64_t v4 = (__n128 *)sub_2FB40(v3);
  v1[4] = v4;
  v4[4].n128_u64[1] = sub_37F48(v4, (__n128)xmmword_C2640);
  v4[3].n128_u64[0] = v2;
  sub_38208();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc(v0);
  v1[5] = v5;
  sub_380D4(v5, (uint64_t)sub_35C38);
  unint64_t v6 = sub_3813C(24LL);
  return sub_38124(v6, v7, v8, v9);
}

uint64_t sub_35C38()
{
  if (!v1) {
    *(void *)(v2 + 56) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v3, v4, v5);
}

uint64_t sub_35C80()
{
  return sub_2BB68(*(void *)(v0 + 56), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_35CB0()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_35CDC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_2B82C((uint64_t)sub_35CEC);
}

uint64_t sub_35CEC()
{
  uint64_t v2 = (unint64_t *)v1[3];
  unint64_t v3 = *v2;
  v1[4] = *v2;
  uint64_t v4 = sub_67C4(&qword_FBE20);
  uint64_t v5 = (__n128 *)sub_2FB40(v4);
  v1[5] = v5;
  v5[4].n128_u64[1] = sub_37F48(v5, (__n128)xmmword_C2640);
  v5[3].n128_u64[0] = v3;
  uint64_t v6 = sub_38208();
  swift_retain_n(v6, 2LL);
  uint64_t v7 = (void *)swift_task_alloc(v0);
  v1[6] = v7;
  sub_380D4(v7, (uint64_t)sub_35D8C);
  unint64_t v8 = sub_3813C(24LL);
  return sub_38124(v8, v9, v10, v11);
}

uint64_t sub_35D8C()
{
  uint64_t v4 = v3[6];
  *uint64_t v5 = *v2;
  v3[7] = v1;
  swift_task_dealloc(v4);
  sub_1BC04();
  if (!v1) {
    v3[8] = v0;
  }
  sub_1B9B8();
  return sub_2F658(v6, v7, v8);
}

uint64_t sub_35DE8()
{
  return sub_2BB68(*(void *)(v0 + 64), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_35E18()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_35E44(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  uint64_t TimerPromptConfirmSlotLabelParameters = type metadata accessor for CreateTimerPromptConfirmSlotLabelParameters(0LL);
  v3[5] = TimerPromptConfirmSlotLabelParameters;
  v3[6] = sub_37EE0(TimerPromptConfirmSlotLabelParameters);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_35E88()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  unint64_t v3 = (void (*)(uint64_t))v0[2];
  sub_1BCD8();
  sub_380F0(v1);
  sub_380F0(v1 + *(int *)(v2 + 20));
  sub_380F0(v1 + *(int *)(v2 + 24));
  v3(v1);
  sub_38284();
  sub_350C4(v4, v5, v6);
  v0[7] = v7;
  uint64_t v8 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_35F44;
  sub_3814C();
  unint64_t v9 = sub_3813C(34LL);
  return v10(v9);
}

uint64_t sub_35F44()
{
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v3, v4, v5);
}

uint64_t sub_35F8C(uint64_t a1)
{
  uint64_t v1 = sub_381F8();
  return sub_2BB68(v1, v2);
}

uint64_t sub_35FC0(uint64_t a1)
{
  return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_35FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  void v7[2] = a1;
  uint64_t TimerPromptConfirmSlotTypeParameters = type metadata accessor for CreateTimerPromptConfirmSlotTypeParameters(0LL);
  void v7[9] = TimerPromptConfirmSlotTypeParameters;
  v7[10] = sub_37EE0(TimerPromptConfirmSlotTypeParameters);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_36044()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v8 = v0[3];
  uint64_t v7 = v0[4];
  sub_1BCD8();
  sub_380E0(v1);
  sub_380E0(v1 + *(int *)(v2 + 20));
  sub_380E0(v1 + *(int *)(v2 + 24));
  sub_1ACCC(v1, v8, v7, v6, v5, v4, v3);
  sub_38268();
  sub_350C4(v9, v10, v11);
  v0[11] = v12;
  uint64_t v13 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[12] = v13;
  sub_380D4(v13, (uint64_t)sub_36120);
  sub_3814C();
  unint64_t v14 = sub_3813C(33LL);
  return sub_37F14(v14, v15, v16, v17);
}

uint64_t sub_36120()
{
  uint64_t v4 = v3[12];
  *uint64_t v5 = *v2;
  v3[13] = v1;
  swift_task_dealloc(v4);
  sub_1BC04();
  if (!v1) {
    v3[14] = v0;
  }
  sub_1B9B8();
  return sub_2F658(v6, v7, v8);
}

uint64_t sub_3617C()
{
  return sub_2B748(*(void *)(v1 + 112), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_361D8()
{
  return sub_2B64C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_36230()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_37E70;
  return sub_38068(0xD00000000000001DLL, 0x80000000000C7B20LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_36290(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  uint64_t v4 = sub_67C4(&qword_FBD98);
  v3[5] = sub_37EE0(v4);
  uint64_t TimerPromptLabelDuplicateParameters = type metadata accessor for CreateTimerPromptLabelDuplicateParameters(0LL);
  v3[6] = TimerPromptLabelDuplicateParameters;
  v3[7] = sub_37EE0(TimerPromptLabelDuplicateParameters);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_362E8()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = (uint64_t *)v0[7];
  uint64_t v3 = (void (*)(uint64_t *))v0[2];
  *uint64_t v2 = 0LL;
  uint64_t v4 = (uint64_t)v2 + *(int *)(v1 + 20);
  sub_1BCD8();
  sub_38074(v4);
  v3(v2);
  uint64_t v5 = sub_67C4(&qword_FBE20);
  uint64_t v7 = sub_34D60(v5, 128LL);
  v0[8] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_C27E0;
  *(void *)(v7 + 32) = 0x6E6F697461727564LL;
  *(void *)(v7 + 40) = 0xE800000000000000LL;
  uint64_t v8 = *v2;
  if (v8)
  {
    uint64_t v9 = type metadata accessor for DialogDuration(0LL);
    uint64_t v10 = v8;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
    *(void *)(v7 + 56) = 0LL;
    *(void *)(v7 + 64) = 0LL;
  }

  uint64_t v11 = v0[5];
  *(void *)(v7 + 48) = v10;
  *(void *)(v7 + 72) = v9;
  *(void *)(v7 + 80) = 0x62614C72656D6974LL;
  *(void *)(v7 + 88) = 0xEA00000000006C65LL;
  sub_382AC(v9, v6, &qword_FBD98);
  int v12 = sub_33010(v11);
  uint64_t v13 = v0[5];
  if (v12 == 1)
  {
    sub_38084();
    sub_17A70(v13, &qword_FBD98);
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 112) = 0u;
  }

  else
  {
    unint64_t v14 = sub_3825C();
    sub_38198((uint64_t)v14);
    sub_38084();
  }

  uint64_t v15 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[9] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_36454;
  sub_3814C();
  return sub_38014(0xD000000000000020LL, v16, v7, v18);
}

uint64_t sub_36454()
{
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v3, v4, v5);
}

uint64_t sub_3649C(uint64_t a1)
{
  return sub_2B748(*(void *)(v1 + 88), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_364E4(uint64_t a1)
{
  return sub_2B64C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_36528()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_36588;
  return sub_38068(0xD00000000000001CLL, 0x80000000000C7AD0LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_36588(uint64_t a1)
{
  uint64_t v6 = *v2;
  uint64_t v4 = swift_task_dealloc(*(void *)(*v2 + 16));
  if (!v1) {
    uint64_t v4 = a1;
  }
  return sub_2B748(v4, *(uint64_t (**)(void))(v6 + 8));
}

void sub_365D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_36620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_67C4(&qword_FB530);
  sub_1BCE0();
  __chkstk_darwin(v10);
  int v12 = (char *)&v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_8C84(a1, (uint64_t)v12, &qword_FB530);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_17A70(a1, &qword_FB530);
  sub_17E58();
}

uint64_t sub_36718()
{
  return type metadata accessor for CreateTimerCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for CreateTimerHandledOnWatchParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FCA88, (uint64_t)&nominal type descriptor for CreateTimerHandledOnWatchParameters);
}

uint64_t type metadata accessor for CreateTimerHandledParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FC9F8, (uint64_t)&nominal type descriptor for CreateTimerHandledParameters);
}

uint64_t type metadata accessor for CreateTimerPromptLabelDuplicateParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FC968, (uint64_t)&nominal type descriptor for CreateTimerPromptLabelDuplicateParameters);
}

uint64_t type metadata accessor for CreateTimerPromptConfirmSlotLabelParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FC8D0, (uint64_t)&nominal type descriptor for CreateTimerPromptConfirmSlotLabelParameters);
}

uint64_t type metadata accessor for CreateTimerPromptConfirmSlotTypeParameters(uint64_t a1)
{
  return sub_DAF8( a1,  (uint64_t *)&unk_FC830,  (uint64_t)&nominal type descriptor for CreateTimerPromptConfirmSlotTypeParameters);
}

uint64_t sub_3679C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_367A8);
}

uint64_t sub_367AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_367B8);
}

void sub_367C0(uint64_t a1)
{
  if (!qword_FC840)
  {
    uint64_t v2 = type metadata accessor for SpeakableString(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_FC840);
    }
  }

void sub_36814(void *a1, void *a2, uint64_t a3)
{
  if ((*(_DWORD *)(*(void *)(a3 - 8) + 80LL) & 0x20000) != 0)
  {
    *a1 = *a2;
    swift_retain();
  }

  else
  {
    uint64_t v6 = sub_1BCD8();
    if (sub_37ED4((uint64_t)a2))
    {
      uint64_t v7 = sub_67C4(&qword_FBD98);
      sub_37FD8(v7);
    }

    else
    {
      sub_37F08((uint64_t)a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_37E7C((uint64_t)a1);
    }

    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t)a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    if (sub_37ED4((uint64_t)a2 + v8))
    {
      uint64_t v11 = sub_67C4(&qword_FBD98);
      sub_37FC4(v11);
    }

    else
    {
      sub_37F40(v9, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_37E7C(v9);
    }

    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (uint64_t)a1 + v12;
    if (sub_37ED4((uint64_t)a2 + v12))
    {
      uint64_t v14 = sub_67C4(&qword_FBD98);
      sub_38000(v14);
    }

    else
    {
      sub_37F08(v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_37E7C(v13);
    }
  }

  sub_37FA0();
}

void sub_36938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1BCD8();
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  else {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v6, v4);
  }
}

void sub_369DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1BCD8();
  if (sub_37ED4(a2))
  {
    uint64_t v7 = sub_67C4(&qword_FBD98);
    sub_37FD8(v7);
  }

  else
  {
    sub_37F08(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_37E7C(a1);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  if (sub_37ED4(a2 + v8))
  {
    uint64_t v11 = sub_67C4(&qword_FBD98);
    sub_37FC4(v11);
  }

  else
  {
    sub_37F40(v9, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_37E7C(v9);
  }

  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  if (sub_37ED4(a2 + v12))
  {
    uint64_t v14 = sub_67C4(&qword_FBD98);
    sub_38000(v14);
  }

  else
  {
    sub_37F08(v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
    sub_37E7C(v13);
  }

  sub_37FA0();
}

void sub_36AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1BCD8();
  int v7 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, 1LL, v6);
  int v8 = sub_37ED4(a2);
  if (v7)
  {
    if (!v8)
    {
      sub_37F08(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_37E7C(a1);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    sub_38134(a1, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
LABEL_6:
    uint64_t v10 = sub_67C4(&qword_FBD98);
    sub_37FD8(v10);
    goto LABEL_7;
  }

  sub_37F08(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24));
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  int v14 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1 + v11, 1LL, v6);
  int v15 = sub_37ED4(v13);
  if (v14)
  {
    if (!v15)
    {
      sub_37F40(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
      sub_37E7C(v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    sub_38134(v12, *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
LABEL_12:
    uint64_t v17 = sub_67C4(&qword_FBD98);
    sub_37FC4(v17);
    goto LABEL_13;
  }

  sub_37F40(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 24));
LABEL_13:
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  int v21 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1 + v18, 1LL, v6);
  int v22 = sub_37ED4(v20);
  if (!v21)
  {
    uint64_t v23 = *(void *)(v6 - 8);
    if (!v22)
    {
      sub_37F08(v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 24));
      goto LABEL_19;
    }

    sub_38134(v19, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    goto LABEL_18;
  }

  if (v22)
  {
LABEL_18:
    uint64_t v24 = sub_67C4(&qword_FBD98);
    sub_38000(v24);
    goto LABEL_19;
  }

  sub_37F08(v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
  sub_37E7C(v19);
LABEL_19:
  sub_1BC3C();
}

void sub_36C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1BCD8();
  if (sub_37ED4(a2))
  {
    uint64_t v7 = sub_67C4(&qword_FBD98);
    sub_37FD8(v7);
  }

  else
  {
    sub_37F08(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_37E7C(a1);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  if (sub_37ED4(a2 + v8))
  {
    uint64_t v11 = sub_67C4(&qword_FBD98);
    sub_37FC4(v11);
  }

  else
  {
    sub_37F40(v9, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_37E7C(v9);
  }

  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  if (sub_37ED4(a2 + v12))
  {
    uint64_t v14 = sub_67C4(&qword_FBD98);
    sub_38000(v14);
  }

  else
  {
    sub_37F08(v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_37E7C(v13);
  }

  sub_37FA0();
}

void sub_36D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1BCD8();
  int v7 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, 1LL, v6);
  int v8 = sub_37ED4(a2);
  if (v7)
  {
    if (!v8)
    {
      sub_37F08(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
      sub_37E7C(a1);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    sub_38134(a1, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
LABEL_6:
    uint64_t v10 = sub_67C4(&qword_FBD98);
    sub_37FD8(v10);
    goto LABEL_7;
  }

  sub_37F08(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 40));
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  int v14 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1 + v11, 1LL, v6);
  int v15 = sub_37ED4(v13);
  if (v14)
  {
    if (!v15)
    {
      sub_37F40(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
      sub_37E7C(v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    sub_38134(v12, *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
LABEL_12:
    uint64_t v17 = sub_67C4(&qword_FBD98);
    sub_37FC4(v17);
    goto LABEL_13;
  }

  sub_37F40(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 40));
LABEL_13:
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  int v21 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1 + v18, 1LL, v6);
  int v22 = sub_37ED4(v20);
  if (!v21)
  {
    uint64_t v23 = *(void *)(v6 - 8);
    if (!v22)
    {
      sub_37F08(v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40));
      goto LABEL_19;
    }

    sub_38134(v19, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    goto LABEL_18;
  }

  if (v22)
  {
LABEL_18:
    uint64_t v24 = sub_67C4(&qword_FBD98);
    sub_38000(v24);
    goto LABEL_19;
  }

  sub_37F08(v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
  sub_37E7C(v19);
LABEL_19:
  sub_1BC3C();
}

uint64_t sub_36F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_36F40);
}

uint64_t sub_36F44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FBD98);
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, a2, v4);
}

uint64_t sub_36F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_36F88);
}

uint64_t sub_36F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FBD98);
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, a2, a2, v4);
}

void sub_36FC8(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = v4[0];
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

uint64_t sub_3704C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_37058);
}

uint64_t sub_3705C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_37068);
}

void sub_37070(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    sub_38084();
  }

  else
  {
    uint64_t v4 = sub_1BCD8();
    sub_38084();
    if (sub_38050())
    {
      uint64_t v5 = sub_67C4(&qword_FBD98);
      sub_37FEC(v5);
    }

    else
    {
      sub_37F90(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL));
      sub_37FB0();
    }
  }

  sub_37FA0();
}

uint64_t sub_37104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_1BCD8();
  uint64_t result = sub_37ED4(v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

void sub_37164(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v2 = sub_1BCD8();
  sub_38084();
  if (sub_38050())
  {
    uint64_t v3 = sub_67C4(&qword_FBD98);
    sub_37FEC(v3);
  }

  else
  {
    sub_37F90(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL));
    sub_37FB0();
  }

  sub_37FA0();
}

void sub_371D4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v5 = (uint64_t)a1 + *(int *)(a3 + 20);
  uint64_t v6 = sub_1BCD8();
  int v7 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v5, 1LL, v6);
  int v8 = sub_38050();
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      sub_37F90(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24));
      goto LABEL_7;
    }

    sub_381BC(v9);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_67C4(&qword_FBD98);
    sub_37FEC(v10);
    goto LABEL_7;
  }

  sub_37F90(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL));
  sub_37FB0();
LABEL_7:
  sub_37FA0();
}

void sub_37288(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v2 = sub_1BCD8();
  if (sub_38050())
  {
    uint64_t v3 = sub_67C4(&qword_FBD98);
    sub_37FEC(v3);
  }

  else
  {
    sub_37F90(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL));
    sub_37FB0();
  }

  sub_17B78();
}

void sub_372F0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v5 = (uint64_t)a1 + *(int *)(a3 + 20);
  uint64_t v6 = sub_1BCD8();
  int v7 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v5, 1LL, v6);
  int v8 = sub_38050();
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      sub_37F90(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 40));
      goto LABEL_7;
    }

    sub_381BC(v9);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_67C4(&qword_FBD98);
    sub_37FEC(v10);
    goto LABEL_7;
  }

  sub_37F90(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
  sub_37FB0();
LABEL_7:
  sub_37FA0();
}

uint64_t sub_3739C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_373A8);
}

void sub_373AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    sub_38100();
    sub_17B78();
  }

  else
  {
    uint64_t v6 = sub_67C4(&qword_FBD98);
    sub_17EA4(a1 + *(int *)(a3 + 20), a2, v6);
  }

uint64_t sub_37404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_37410);
}

void sub_37414()
{
  if (v3)
  {
    *uint64_t v1 = v0;
    sub_17B78();
  }

  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = sub_67C4(&qword_FBD98);
    sub_17EB0((uint64_t)v1 + *(int *)(v4 + 20), v0, v0, v5);
  }

void sub_37468(uint64_t a1)
{
  v4[0] = "\b";
  sub_367C0(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

uint64_t *sub_374DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    int v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain();
  }

  else
  {
    int v7 = a1;
    a1[1] = a2[1];
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SpeakableString(0LL);
    swift_retain();
    swift_retain();
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v10, 1LL, v11))
    {
      uint64_t v12 = sub_67C4(&qword_FBD98);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v9, 0LL, 1LL, v11);
    }

    uint64_t v13 = *(int *)(a3 + 28);
    int v14 = (char *)v7 + v13;
    int v15 = (char *)a2 + v13;
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v15, 1LL, v11))
    {
      uint64_t v16 = sub_67C4(&qword_FBD98);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v14, v15, v11);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v14, 0LL, 1LL, v11);
    }
  }

  return v7;
}

uint64_t sub_37650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t result = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v6, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v6, v5);
  }
  return result;
}

void *sub_37700(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  swift_retain();
  swift_retain();
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_67C4(&qword_FBD98);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  int v14 = (char *)a2 + v12;
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v14, 1LL, v10))
  {
    uint64_t v15 = sub_67C4(&qword_FBD98);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v13, v14, v10);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v13, 0LL, 1LL, v10);
  }

  return a1;
}

void *sub_37844(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  int v10 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v7, 1LL, v9);
  int v11 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v8, 1LL, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_67C4(&qword_FBD98);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  int v17 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a1 + v14, 1LL, v9);
  int v18 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v16, 1LL, v9);
  if (!v17)
  {
    uint64_t v19 = *(void *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v15, v16, v9);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }

  if (v18)
  {
LABEL_12:
    uint64_t v20 = sub_67C4(&qword_FBD98);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v15, v16, v9);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v15, 0LL, 1LL, v9);
  return a1;
}

_OWORD *sub_37A30(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_67C4(&qword_FBD98);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v13, 1LL, v9))
  {
    uint64_t v14 = sub_67C4(&qword_FBD98);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v12, v13, v9);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v12, 0LL, 1LL, v9);
  }

  return a1;
}

void *sub_37B5C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  int v10 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v7, 1LL, v9);
  int v11 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v8, 1LL, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_67C4(&qword_FBD98);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  int v17 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a1 + v14, 1LL, v9);
  int v18 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v16, 1LL, v9);
  if (!v17)
  {
    uint64_t v19 = *(void *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v15, v16, v9);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }

  if (v18)
  {
LABEL_12:
    uint64_t v20 = sub_67C4(&qword_FBD98);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v15, v16, v9);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v15, 0LL, 1LL, v9);
  return a1;
}

uint64_t sub_37D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_37D44);
}

void sub_37D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    sub_38100();
    sub_17B78();
  }

  else
  {
    uint64_t v6 = sub_67C4(&qword_FBD98);
    sub_17EA4(a1 + *(int *)(a3 + 24), a2, v6);
  }

uint64_t sub_37D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_37DA8);
}

void sub_37DA8()
{
  if (v3)
  {
    *uint64_t v1 = v0;
    sub_17B78();
  }

  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = sub_67C4(&qword_FBD98);
    sub_17EB0((uint64_t)v1 + *(int *)(v4 + 24), v0, v0, v5);
  }

void sub_37DFC(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = "\b";
  sub_367C0(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

uint64_t sub_37E7C(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 0LL, 1LL, v1);
}

uint64_t sub_37E8C()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 40);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 48) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_37EB0(__n128 a1)
{
  *(void *)(v3 + 32) = v2;
  v2[1] = a1;
  v2[3].n128_u64[0] = v1;
  return swift_retain(v1);
}

uint64_t sub_37ED4(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, 1LL, v1);
}

uint64_t sub_37EE0(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_37EF4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_37F08@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_37F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

unint64_t sub_37F20()
{
  return 0xD000000000000011LL;
}

uint64_t sub_37F40@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_37F48(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  strcpy((char *)&a1[2], "createdTimer");
  a1[2].n128_u8[13] = 0;
  a1[2].n128_u16[7] = -5120;
  return type metadata accessor for TimerTimer(0LL);
}

void *sub_37F74(void *result)
{
  result[4] = 0x656369766564LL;
  result[5] = 0xE600000000000000LL;
  result[9] = v1;
  return result;
}

uint64_t sub_37F90@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2, v3);
}

  ;
}

uint64_t sub_37FB0()
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v0, 0LL, 1LL, v1);
}

void *sub_37FC4(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

void *sub_37FD8(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

void *sub_37FEC(uint64_t a1)
{
  return memcpy(v1, v2, *(void *)(*(void *)(a1 - 8) + 64LL));
}

void *sub_38000(uint64_t a1)
{
  return memcpy(v2, v1, *(void *)(*(void *)(a1 - 8) + 64LL));
}

uint64_t sub_38014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_3802C()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 72) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_38050()
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v0, 1LL, v1);
}

void sub_38060(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_38068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_38074(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 1LL, 1LL, v1);
}

uint64_t sub_38084()
{
  return swift_retain(v0);
}

uint64_t sub_3808C(uint64_t a1, uint64_t a2, ...)
{
  return SirikitDeviceState.__allocating_init(from:)(va);
}

void *sub_38098(uint64_t a1, uint64_t a2, ...)
{
  return ApplicationContext.deviceState.getter((uint64_t *)va);
}

uint64_t sub_380A4()
{
  return type metadata accessor for ApplicationContext(0LL);
}

uint64_t sub_380B0()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 80) = v0;
  return swift_task_dealloc(v5);
}

void *sub_380D4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_380E0(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 1LL, 1LL, v1);
}

uint64_t sub_380F0(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 1LL, 1LL, v1);
}

uint64_t sub_38100()
{
  uint64_t v1 = *v0;
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_38124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_38134@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

unint64_t sub_3813C(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

  ;
}

unint64_t sub_3815C()
{
  return 0xD000000000000013LL;
}

  ;
}

uint64_t sub_38198(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(a1, v2, v1);
}

uint64_t sub_381AC()
{
  return swift_task_alloc(v0);
}

uint64_t sub_381B4()
{
  return type metadata accessor for SirikitDeviceState(0LL);
}

uint64_t sub_381BC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_381CC(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, 1LL, v1);
}

uint64_t sub_381E8(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 1LL, 1LL, v1);
}

uint64_t sub_381F8()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_38208()
{
  return v0;
}

uint64_t sub_38220(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t sub_3822C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

  ;
}

void *sub_3825C()
{
  *(void *)(v2 + 120) = v0;
  return sub_DB90(v1);
}

  ;
}

  ;
}

uint64_t sub_382A0()
{
  return swift_retain_n(v0, 2LL);
}

void sub_382AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_382B8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FCAE8);
  sub_5474(v0, (uint64_t)qword_FCAE8);
  return static SiriTimeLog.timerFlow.getter();
}

void *sub_38300(uint64_t a1, void *a2)
{
  if (SIRINLUUserDialogAct.firstUsoTask.getter())
  {
    sub_383C0();
    sub_396D0();
    return a2;
  }

  else
  {
    if (qword_FB168 != -1) {
      swift_once(&qword_FB168, sub_382B8);
    }
    uint64_t v5 = sub_1BD34();
    sub_39658(v5, (uint64_t)qword_FCAE8);
    os_log_type_t v6 = sub_3967C();
    if (sub_329F4(v6))
    {
      uint64_t v7 = (_WORD *)sub_1BA1C(2LL);
      sub_2BA04(v7);
      sub_39644(&dword_0, v8, v9, "No firstUsoTask contained in userDialogAct. Returning nil intent.");
      sub_1B904(v2);
    }

    return 0LL;
  }

void sub_383C0()
{
  uint64_t v0 = sub_67C4(&qword_FBDB8);
  __chkstk_darwin(v0);
  sub_1C308();
  uint64_t v1 = type metadata accessor for HALTimerDeviceContext(0LL);
  __chkstk_darwin(v1);
  sub_1C308();
  if (qword_FB168 != -1) {
    swift_once(&qword_FB168, sub_382B8);
  }
  uint64_t v2 = sub_1BD34();
  sub_5474(v2, (uint64_t)qword_FCAE8);
  uint64_t v3 = sub_396C4();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v7 = sub_1BA1C(32LL);
    v21[0] = v7;
    *(_DWORD *)os_log_type_t v6 = 136315138;
    type metadata accessor for UsoTask(0LL);
    swift_retain();
    uint64_t v8 = String.init<A>(describing:)();
    unint64_t v10 = v9;
    uint64_t v11 = sub_683C(v8, v9, v21);
    uint64_t v12 = sub_1E7E0(v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v12, v13, v6 + 4, v6 + 12);
    sub_3969C();
    swift_bridgeObjectRelease(v10);
    sub_1E7D8(&dword_0, v4, v5, "Building SK intent from task: %s", v6);
    sub_1E7D0(v7);
    sub_1B904(v7);
    sub_1B904((uint64_t)v6);
  }

  else
  {

    sub_3969C();
  }

  if (!sub_7238())
  {
LABEL_12:
    uint64_t v20 = (char *)&loc_3863C + 4 * byte_C2F14[sub_6AB8()];
    __asm { BR              X10 }
  }

  id v14 = sub_38D7C();
  if (!v14)
  {
    swift_release();
    goto LABEL_12;
  }

  uint64_t v15 = (void *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (sub_329F4(v16))
  {
    int v17 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v17);
    sub_39644( &dword_0,  v18,  v19,  "TimerFlowDelegatePlugin found trigger in stop task, attempting sleep timer intent creation");
    sub_1B904(v1);
  }

  swift_release();
  sub_17E58();
}

void sub_38968()
{
  uint64_t v0 = (void *)type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v1 = *(v0 - 1);
  __chkstk_darwin(v0);
  sub_1C308();
  uint64_t v46 = v3 - v2;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1C308();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_67C4(&qword_FD5E0);
  __chkstk_darwin(v9);
  sub_1C308();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v45 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v47 = (char *)&v42 - v17;
  uint64_t v18 = Siri_Nlu_External_UserParse.userDialogActs.getter(v16);
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)(v18 + 16);
  if (v20)
  {
    uint64_t v42 = v1;
    uint64_t v43 = v0;
    uint64_t v44 = v13;
    unint64_t v21 = v18 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v22 = *(void *)(v5 + 72);
    uint64_t v23 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      uint64_t v24 = v23(v8, v21, v4);
      if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter(v24) & 1) != 0) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
      v21 += v22;
      if (!--v20)
      {
        uint64_t v25 = 1LL;
        goto LABEL_8;
      }
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v12, v8, v4);
    uint64_t v25 = 0LL;
LABEL_8:
    uint64_t v0 = v43;
    uint64_t v13 = v44;
    uint64_t v1 = v42;
  }

  else
  {
    uint64_t v25 = 1LL;
  }

  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v12, v25, 1LL, v4);
  swift_bridgeObjectRelease(v19);
  uint64_t v26 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v12, 1LL, v4);
  if ((_DWORD)v26 == 1)
  {
    sub_DABC(v12, &qword_FD5E0);
    if (qword_FB168 != -1) {
      swift_once(&qword_FB168, sub_382B8);
    }
    uint64_t v31 = sub_1BD34();
    sub_39658(v31, (uint64_t)qword_FCAE8);
    os_log_type_t v32 = sub_3967C();
    if (sub_329F4(v32))
    {
      uint64_t v33 = (_WORD *)sub_1BA1C(2LL);
      sub_2BA04(v33);
      sub_39644(&dword_0, v34, v35, "Failed to parse userParse. Returning nil intent.");
      sub_1B904(v5);
    }

    goto LABEL_17;
  }

  uint64_t v27 = v46;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter(v26);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v12, v4);
  uint64_t v29 = v45;
  Siri_Nlu_External_UserStatedTask.task.getter(v28);
  (*(void (**)(uint64_t, void *))(v1 + 8))(v27, v0);
  uint64_t v30 = v47;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v29, v13);
  static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v30, 0LL);
  uint64_t v36 = static UsoConversionUtils.convertGraphToTasks(graph:)();
  uint64_t v37 = v36;
  if ((unint64_t)v36 >> 62)
  {
    if (v36 >= 0) {
      v36 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    if (_CocoaArrayWrapper.endIndex.getter(v36)) {
      goto LABEL_20;
    }
  }

  else if (*(void *)((char *)&dword_10 + (v36 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_20:
    sub_8EEB4(0LL, (v37 & 0xC000000000000001LL) == 0, v37);
    if ((v37 & 0xC000000000000001LL) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v37);
    }
    else {
      swift_retain(*(void *)(v37 + 32));
    }
    sub_18034();
    sub_3966C();
    swift_release();
    goto LABEL_17;
  }

  sub_18034();
  if (qword_FB168 != -1) {
    swift_once(&qword_FB168, sub_382B8);
  }
  uint64_t v38 = sub_1BD34();
  uint64_t v39 = (os_log_s *)sub_39658(v38, (uint64_t)qword_FCAE8);
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v41);
    _os_log_impl(&dword_0, v39, v40, "USO tasks graph has no tasks. Returning nil intent.", 0LL, 2u);
    sub_1B904(0LL);
  }

  swift_release();
  sub_3966C();
LABEL_17:
  sub_17E58();
}

id sub_38D7C()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_EventTrigger.dateTimeTrigger.getter();
  if (!v0) {
    return 0LL;
  }
  id v1 = (id)dispatch thunk of UsoEntity_common_DateTime.offsetValue.getter(v0);
  if (v1)
  {
    double v2 = UsoEntity_common_Duration.valueInSeconds.getter();
    swift_release();
    if (v2 > 0.0)
    {
      if (qword_FB168 != -1) {
        swift_once(&qword_FB168, sub_382B8);
      }
      uint64_t v3 = type metadata accessor for Logger(0LL);
      uint64_t v4 = sub_5474(v3, (uint64_t)qword_FCAE8);
      uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v7 = 134217984;
        double v14 = v2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v7 + 4, v7 + 12);
        _os_log_impl( &dword_0,  v5,  v6,  "makeSleepTimersIntent found valid parameters to create sleep timer for seconds: %f",  v7,  0xCu);
        swift_slowDealloc(v7, -1LL, -1LL);
      }

      id v1 = [objc_allocWithZone((Class)type metadata accessor for CreateTimerIntent(0)) init];
      CreateTimerIntent.duration.setter([v1 setLabel:0], v2);
      [v1 setType:2];
      goto LABEL_9;
    }

    if (qword_FB168 != -1) {
      swift_once(&qword_FB168, sub_382B8);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_5474(v8, (uint64_t)qword_FCAE8);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( &dword_0,  v10,  v11,  "TimerFlowDelegatePlugin was presented a sleep timer ontology, but with a duration of zero seconds.",  v12,  2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    swift_release();
    return 0LL;
  }

LABEL_9:
  swift_release();
  return v1;
}

uint64_t sub_38FC8()
{
  if (v5)
  {
    UsoEntity_common_Timer.duration.getter();
    sub_32A64();
    UsoEntity_common_Timer.isMultiple.getter();
    id v1 = v0;
    Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
    char v3 = static NSObject.== infix(_:_:)(v1, isa);

    sub_2B750();
  }

  else
  {
    char v3 = 1;
  }

  return v3 & 1;
}

uint64_t sub_39058()
{
  uint64_t v0 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(&v5);
  uint64_t v1 = v5;
  if (!v5) {
    return 0LL;
  }
  uint64_t v2 = dispatch thunk of UsoEntity_common_Alarm.endDateTime.getter(v0);
  uint64_t v3 = sub_2B750();
  if (!v2) {
    return 0LL;
  }
  dispatch thunk of UsoEntity_common_DateTime.offsetValue.getter(v3);
  sub_396D0();
  if (!v1) {
    return 0LL;
  }
  sub_2B750();
  return 1LL;
}

uint64_t sub_390B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0LL);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  os_log_type_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

void sub_3917C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_391BC()
{
  if (qword_FB168 != -1) {
    swift_once(&qword_FB168, sub_382B8);
  }
  uint64_t v3 = sub_1BD34();
  sub_39658(v3, (uint64_t)qword_FCAE8);
  os_log_type_t v4 = sub_3967C();
  if (os_log_type_enabled(v0, v4))
  {
    uint64_t v5 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v6 = sub_1BA1C(32LL);
    uint64_t v18 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    LOBYTE(v17) = v1;
    uint64_t v13 = sub_396E4(v6, (uint64_t)&type metadata for TimerNLv4Constants.TimerVerb, v7, v8, v9, v10, v11, v12, v17);
    unint64_t v15 = v14;
    uint64_t v17 = sub_683C(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v2 + 8, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v15);
    sub_1E7D8(&dword_0, v0, v4, "Calling verb %s for disambiguation selection is invalid", v5);
    sub_1E7D0(v6);
    sub_1B904(v6);
    sub_1B904((uint64_t)v5);
  }

  return 0LL;
}

uint64_t sub_39638()
{
  return swift_retain(v0);
}

void sub_39644(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_39658(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_5474(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_3966C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_3967C()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_39684(uint64_t a1)
{
  return swift_dynamicCast(v2 - 152, v2 - 144, v1 + 8, a1, 6LL);
}

uint64_t sub_3969C()
{
  return swift_release_n(v0, 2LL);
}

NSNumber sub_396A8()
{
  return NSNumber.init(BOOLeanLiteral:)(0);
}

uint64_t sub_396B4()
{
  return v0;
}

uint64_t sub_396C4()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t sub_396D0()
{
  return swift_release(v0);
}

id sub_396DC()
{
  return v0;
}

uint64_t sub_396E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return String.init<A>(describing:)(&a9);
}

uint64_t sub_396F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_32FC0(v3 - 112, v3 - 144, a3);
}

void sub_396FC(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_39724(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_3974C( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v349 = a8;
  uint64_t v350 = a7;
  uint64_t v352 = a6;
  v364 = a5;
  int v348 = a3;
  uint64_t v356 = a2;
  v387 = (uint8_t *)a1;
  v382[1] = a9;
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  sub_43628(v10, (uint64_t)&v369);
  uint64_t v339 = v11;
  sub_17B6C();
  __chkstk_darwin(v12);
  sub_17D14();
  uint64_t v14 = sub_43410(v13);
  uint64_t v351 = type metadata accessor for TimerNLv3Intent(v14);
  sub_1BCE0();
  __chkstk_darwin(v15);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v16);
  sub_436A0();
  uint64_t v18 = sub_43410(v17);
  uint64_t v19 = type metadata accessor for Input(v18);
  sub_43628(v19, (uint64_t)&v373);
  uint64_t v345 = v20;
  sub_17B6C();
  __chkstk_darwin(v21);
  sub_17D14();
  uint64_t v23 = sub_43410(v22);
  uint64_t v24 = type metadata accessor for USOParse(v23);
  sub_43628(v24, (uint64_t)&v375);
  uint64_t v342 = v25;
  sub_17B6C();
  __chkstk_darwin(v26);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v27);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v28);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v29);
  sub_436A0();
  uint64_t v31 = sub_43410(v30);
  uint64_t v32 = type metadata accessor for NLIntent(v31);
  sub_43628(v32, (uint64_t)&v386);
  uint64_t v353 = v33;
  sub_17B6C();
  __chkstk_darwin(v34);
  sub_17D14();
  uint64_t v36 = sub_43410(v35);
  uint64_t v37 = type metadata accessor for Parse(v36);
  sub_43628(v37, (uint64_t)&v391);
  uint64_t v370 = v38;
  sub_17B6C();
  __chkstk_darwin(v39);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v40);
  sub_436A0();
  uint64_t v42 = sub_43410(v41);
  uint64_t v374 = type metadata accessor for ActionForInput(v42);
  uint64_t v362 = *(void *)(v374 - 8);
  sub_17B6C();
  __chkstk_darwin(v43);
  sub_17D14();
  uint64_t v355 = v44;
  uint64_t v368 = sub_67C4((uint64_t *)&unk_FCC80);
  sub_1BCE0();
  __chkstk_darwin(v45);
  sub_17D14();
  uint64_t v381 = v46;
  sub_67C4(&qword_FEC80);
  sub_1BCE0();
  __chkstk_darwin(v47);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v48);
  sub_43404();
  v386 = v49;
  sub_433B0();
  __chkstk_darwin(v50);
  sub_436A0();
  uint64_t v52 = sub_43410(v51);
  uint64_t v53 = type metadata accessor for DecideAction.PromptExpectation(v52);
  uint64_t v54 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  sub_17D14();
  uint64_t v379 = v55;
  uint64_t v56 = sub_67C4(&qword_FCC90);
  sub_1BCE0();
  __chkstk_darwin(v57);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v58);
  sub_43404();
  uint64_t v373 = v59;
  sub_433B0();
  __chkstk_darwin(v60);
  sub_43404();
  uint64_t v378 = v61;
  sub_433B0();
  __chkstk_darwin(v62);
  sub_43404();
  v382[0] = v63;
  sub_433B0();
  __chkstk_darwin(v64);
  uint64_t v66 = (char *)&v335 - v65;
  sub_67C4((uint64_t *)&unk_FCC70);
  sub_1BCE0();
  __chkstk_darwin(v67);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v68);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v69);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v70);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v71);
  sub_43404();
  uint64_t v372 = v72;
  sub_433B0();
  __chkstk_darwin(v73);
  sub_43404();
  uint64_t v375 = v74;
  sub_433B0();
  __chkstk_darwin(v75);
  sub_43404();
  uint64_t v376 = v76;
  sub_433B0();
  __chkstk_darwin(v77);
  sub_43404();
  uint64_t v371 = v78;
  sub_433B0();
  uint64_t v80 = __chkstk_darwin(v79);
  uint64_t v82 = (char *)&v335 - v81;
  uint64_t v83 = __chkstk_darwin(v80);
  uint64_t v85 = (uint64_t)&v335 - v84;
  __chkstk_darwin(v83);
  uint64_t v87 = (char *)&v335 - v86;
  uint64_t v88 = *(void (**)(void))(v54 + 104);
  unsigned int v380 = enum case for DecideAction.PromptExpectation.roomConfirmation(_:);
  uint64_t v383 = v54;
  v384 = v88;
  v88((char *)&v335 - v86);
  sub_1BC80((uint64_t)v87);
  uint64_t v385 = v56;
  uint64_t v89 = (uint64_t)&v66[*(int *)(v56 + 48)];
  uint64_t v377 = a4;
  sub_43420(a4, (uint64_t)v66);
  sub_43420((uint64_t)v87, v89);
  sub_43360((uint64_t)v66);
  if (v93)
  {
    sub_433BC((uint64_t)v87);
    sub_43360(v89);
    if (v90) {
      uint64_t v91 = (uint64_t *)&unk_FCC70;
    }
    else {
      uint64_t v91 = &qword_FCC90;
    }
    if (v90) {
      char v92 = -1;
    }
    else {
      char v92 = 0;
    }
  }

  else
  {
    sub_8C84((uint64_t)v66, v85, (uint64_t *)&unk_FCC70);
    sub_43360(v89);
    if (v93)
    {
      sub_8CC4((uint64_t)v87, (uint64_t *)&unk_FCC70);
      sub_433D8(v85, *(uint64_t (**)(uint64_t, uint64_t))(v383 + 8));
      char v92 = 0;
      uint64_t v91 = &qword_FCC90;
    }

    else
    {
      uint64_t v94 = v383;
      uint64_t v95 = v379;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v383 + 32))(v379, v89, v53);
      sub_4345C( &qword_FCD08,  v96,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
      char v92 = sub_43450(v85, v95, v98, v97);
      uint64_t v56 = *(void *)(v94 + 8);
      ((void (*)(uint64_t, uint64_t))v56)(v95, v53);
      uint64_t v91 = (uint64_t *)&unk_FCC70;
      sub_8CC4((uint64_t)v87, (uint64_t *)&unk_FCC70);
      ((void (*)(uint64_t, uint64_t))v56)(v85, v53);
    }
  }

  uint64_t v99 = (uint64_t)v386;
  uint64_t v100 = &qword_FCC90;
  sub_8CC4((uint64_t)v66, v91);
  sub_71E58( (uint64_t)v387,  v92 & 1,  v101,  v102,  v103,  v104,  v105,  v106,  v335,  v336,  v337,  v338,  v339,  v340,  v341,  v342,  v343,  v344,  v345,  v346);
  if ((v107 & 1) == 0)
  {
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v114 = sub_1BD34();
    sub_39658(v114, (uint64_t)qword_FEC20);
    os_log_type_t v115 = sub_2BFB4();
    if (!sub_329F4(v115)) {
      goto LABEL_23;
    }
    uint64_t v116 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v116);
    uint64_t v119 = "decideActionForInput(input:type:halInfo: ... no valid timer input";
    goto LABEL_22;
  }

  sub_434E0((uint64_t)v82, enum case for DecideAction.PromptExpectation.confirmation(_:));
  sub_433E0((uint64_t)v82);
  uint64_t v108 = v382[0];
  uint64_t v110 = v382[0] + v109;
  uint64_t v111 = v377;
  sub_43420(v377, v382[0]);
  sub_43420((uint64_t)v82, v110);
  sub_43360(v108);
  if (v93)
  {
    sub_8CC4((uint64_t)v82, (uint64_t *)&unk_FCC70);
    sub_43360(v110);
    uint64_t v112 = v376;
    if (v93)
    {
      sub_4357C(v382[0]);
      sub_8C84(v111, v112, (uint64_t *)&unk_FCC70);
      goto LABEL_33;
    }

    goto LABEL_27;
  }

  uint64_t v120 = v371;
  sub_8C84(v108, v371, (uint64_t *)&unk_FCC70);
  sub_43360(v110);
  if (v121)
  {
    sub_8CC4((uint64_t)v82, (uint64_t *)&unk_FCC70);
    sub_433D8(v120, *(uint64_t (**)(uint64_t, uint64_t))(v383 + 8));
    uint64_t v112 = v376;
LABEL_27:
    sub_8CC4(v382[0], &qword_FCC90);
    sub_8C84(v111, v112, (uint64_t *)&unk_FCC70);
    goto LABEL_29;
  }

  sub_43488();
  sub_4345C( &qword_FCD08,  v122,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
  char v125 = sub_43450(v120, v99, v124, v123);
  uint64_t v126 = v99;
  uint64_t v99 = (uint64_t)v386;
  sub_43464(v126);
  sub_433BC((uint64_t)v82);
  sub_43464(v120);
  uint64_t v100 = &qword_FCC90;
  sub_433BC(v108);
  uint64_t v112 = v376;
  sub_43420(v111, v376);
  if ((v125 & 1) != 0) {
    goto LABEL_33;
  }
LABEL_29:
  uint64_t v127 = v375;
  sub_434E0(v375, v380);
  sub_433E0(v127);
  uint64_t v128 = v378;
  uint64_t v130 = v378 + v129;
  sub_43420(v112, v378);
  sub_43420(v127, v130);
  sub_43360(v128);
  if (v93)
  {
    sub_433BC(v127);
    sub_433BC(v112);
    uint64_t v113 = sub_43360(v130);
    uint64_t v131 = v374;
    if (!v93) {
      goto LABEL_40;
    }
LABEL_33:
    sub_436E4(v113, (uint64_t *)&unk_FCC70);
    goto LABEL_34;
  }

  sub_4358C(v128, (uint64_t *)&unk_FCC70, (uint64_t)&v392);
  sub_43360(v130);
  uint64_t v131 = v374;
  if (v136)
  {
    sub_4357C(v375);
    sub_4357C(v112);
    sub_433D8(v56, *(uint64_t (**)(uint64_t, uint64_t))(v383 + 8));
LABEL_40:
    sub_8CC4(v378, &qword_FCC90);
    uint64_t v137 = v381;
    goto LABEL_41;
  }

  sub_43488();
  sub_4345C( &qword_FCD08,  v153,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
  char v156 = sub_43450(v56, v99, v155, v154);
  uint64_t v157 = v99;
  uint64_t v99 = (uint64_t)v386;
  sub_43464(v157);
  sub_433BC(v375);
  sub_433BC(v112);
  sub_43464(v56);
  uint64_t v100 = &qword_FCC90;
  sub_433BC(v128);
  uint64_t v137 = v381;
  if ((v156 & 1) != 0)
  {
LABEL_34:
    uint64_t v132 = v372;
    sub_434E0(v372, v380);
    sub_433E0(v132);
    uint64_t v133 = v373;
    uint64_t v135 = v373 + v134;
    sub_43420(v111, v373);
    sub_43420(v132, v135);
    sub_43360(v133);
    if (v93)
    {
      sub_433BC(v132);
      sub_43360(v135);
    }

    else
    {
      uint64_t v142 = v366;
      sub_8C84(v133, v366, (uint64_t *)&unk_FCC70);
      sub_43360(v135);
      if (v143)
      {
        sub_8CC4(v132, (uint64_t *)&unk_FCC70);
        sub_433D8(v142, *(uint64_t (**)(uint64_t, uint64_t))(v383 + 8));
      }

      else
      {
        sub_4346C();
        sub_4345C( &qword_FCD08,  v158,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
        sub_43450(v142, v111, v160, v159);
        sub_43464(v111);
        sub_433BC(v132);
        sub_43464(v142);
      }
    }

    sub_433BC(v133);
    sub_70A20();
    return;
  }

LABEL_53:
  uint64_t v100 = v367;
  sub_43584();
  uint64_t v85 = v364(v100);
  uint64_t v145 = *(void (**)(uint64_t *, uint64_t))(v370 + 8);
  uint64_t v146 = v365;
  sub_436C8((uint64_t)v100);
  if ((v85 & 1) == 0)
  {
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v161 = sub_1BD34();
    sub_39658(v161, (uint64_t)qword_FEC20);
    os_log_type_t v162 = sub_2BFB4();
    if (!sub_329F4(v162)) {
      goto LABEL_23;
    }
    uint64_t v163 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v163);
    uint64_t v119 = "Disallowing timer input based on allowed input types for current stack state.";
    goto LABEL_22;
  }

  uint64_t v147 = v357;
  uint64_t v148 = v359;
  sub_43584();
  uint64_t v149 = (uint64_t (**)(uint64_t, uint64_t))v370;
  int v150 = (*(uint64_t (**)(uint64_t *, uint64_t))(v370 + 88))(v148, v146);
  if (v150 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_433D8((uint64_t)v148, v149[12]);
    uint64_t v151 = v363;
    uint64_t v152 = v358;
    goto LABEL_79;
  }

  uint64_t v151 = v363;
  uint64_t v152 = v358;
  if (v150 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_433D8((uint64_t)v148, *(uint64_t (**)(uint64_t, uint64_t))(v370 + 96));
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
LABEL_79:
    uint64_t v179 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v353 + 32);
    uint64_t v180 = v354;
    v179((uint64_t)v354, v148, v147);
    v179((uint64_t)v151, v180, v147);
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v181 = sub_1BD34();
    uint64_t v182 = (os_log_s *)sub_5474(v181, (uint64_t)qword_FEC20);
    sub_1E720((uint64_t)v151, v152);
    uint64_t v183 = (os_log_s *)sub_2BFD8();
    os_log_type_t v184 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v183, v184))
    {
      uint64_t v56 = sub_1BA1C(12LL);
      uint64_t v185 = sub_1BA1C(32LL);
      uint64_t v389 = v185;
      *(_DWORD *)uint64_t v56 = 136315138;
      sub_4345C(&qword_FBE60, v186, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C5488);
      uint64_t v188 = dispatch thunk of CustomStringConvertible.description.getter(v351, v187);
      uint64_t v190 = sub_4351C(v188, v189);
      uint64_t v191 = sub_435B8(v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v191, v192, v193, v56 + 12);
      sub_18034();
      sub_1E6E4(v152);
      sub_1E7D8(&dword_0, v183, v184, "TimerNLIntent: %s", (uint8_t *)v56);
      sub_1E7D0(v185);
      sub_1B904(v185);
      sub_1B904(v56);
    }

    else
    {
      sub_1E6E4(v152);
    }

    uint64_t v194 = v356;
    uint64_t v195 = (uint64_t)v367;
    sub_43584();
    sub_6F040();
    uint64_t v197 = v196;
    sub_436C8(v195);
    if (v197)
    {
      uint64_t v198 = sub_434C0();
      if (!swift_dynamicCastClass(v197, v198))
      {
        id v213 = v197;
        sub_2BFD8();
        os_log_type_t v214 = sub_3967C();
        if (sub_43670(v214))
        {
          uint64_t v215 = sub_1BA1C(22LL);
          uint64_t v216 = sub_1BA1C(64LL);
          uint64_t v389 = v216;
          *(_DWORD *)uint64_t v215 = 136315394;
          uint64_t v388 = sub_683C(v350, v349, &v389);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v388, &v389, v215 + 4, v215 + 12);
          *(_WORD *)(v215 + 12) = 2080;
          v387 = (uint8_t *)(v215 + 14);
          id v217 = v213;
          id v218 = [v217 description];
          uint64_t v219 = static String._unconditionallyBridgeFromObjectiveC(_:)(v218);
          unint64_t v221 = v220;

          uint64_t v388 = sub_683C(v219, v221, &v389);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v388, &v389, v387, v215 + 22);

          swift_bridgeObjectRelease(v221);
          sub_436C0( &dword_0,  v182,  (os_log_type_t)v56,  "Flows stack receives unexpected from input. Expecting: %s, Generated: %s",  (uint8_t *)v215);
          sub_436B8(v216);
          sub_1B904(v216);
          sub_1B904(v215);
        }

        else
        {
        }

        uint64_t v236 = (uint64_t)v363;
        sub_43524();

        uint64_t v212 = v236;
        goto LABEL_119;
      }

      sub_435E0();
    }

    else
    {
      sub_2BFD8();
      os_log_type_t v208 = sub_3967C();
      if (sub_329F4(v208))
      {
        uint64_t v209 = (_WORD *)sub_1BA1C(2LL);
        sub_2BA04(v209);
        sub_39644(&dword_0, v210, v211, "Unable to parse intent from parse");
        sub_1B904(v194);
      }

      sub_43524();
    }

    uint64_t v212 = (uint64_t)v363;
LABEL_119:
    sub_1E6E4(v212);
    return;
  }

  if (v150 == enum case for Parse.directInvocation(_:))
  {
    sub_435E0();
LABEL_99:
    sub_436C8((uint64_t)v148);
    return;
  }

  if (v150 != enum case for Parse.NLv4IntentOnly(_:))
  {
    if (v150 != enum case for Parse.uso(_:))
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v255 = sub_1BD34();
      sub_5474(v255, (uint64_t)qword_FEC20);
      uint64_t v256 = v345;
      uint64_t v257 = (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(v345 + 16))(v343, v387, v344);
      Logger.logObject.getter(v257);
      os_log_type_t v258 = sub_3967C();
      if (sub_43670(v258))
      {
        uint64_t v259 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v260 = sub_1BA1C(32LL);
        uint64_t v389 = v260;
        *(_DWORD *)uint64_t v259 = 136315138;
        v387 = v259 + 4;
        Input.parse.getter(v260);
        uint64_t v261 = String.init<A>(describing:)();
        uint64_t v263 = sub_4351C(v261, v262);
        uint64_t v264 = sub_435A0(v263);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v264, v265, v266, v259 + 12);
        sub_18034();
        sub_2B950(*(uint64_t (**)(uint64_t, uint64_t))(v345 + 8));
        sub_1E7D8( &dword_0,  (os_log_s *)v149,  (os_log_type_t)v56,  "Received unsupported parse in decideActionForInput: %s",  v259);
        sub_1E7D0(v260);
        sub_1B904(v260);
        uint64_t v267 = (uint64_t)v259;
        uint64_t v148 = v359;
        sub_1B904(v267);
      }

      else
      {
        sub_2B950(*(uint64_t (**)(uint64_t, uint64_t))(v256 + 8));
      }

      sub_43524();
      goto LABEL_99;
    }

    sub_433D8((uint64_t)v148, *(uint64_t (**)(uint64_t, uint64_t))(v370 + 96));
    uint64_t v237 = v342;
    uint64_t v238 = v347;
    uint64_t v239 = sub_2BFC4();
    uint64_t v240 = v346;
    v241(v239);
    uint64_t v242 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v237 + 16);
    uint64_t v243 = v341;
    uint64_t v244 = v242(v341, v238, v240);
    if ((v348 & 1) != 0
      && (uint64_t v245 = v338,
          uint64_t v246 = USOParse.userParse.getter(v244),
          uint64_t v247 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v246),
          (*(void (**)(uint64_t, uint64_t))(v339 + 8))(v245, v340),
          v247))
    {
      char v248 = sub_6AB8();
      swift_release();
      uint64_t v249 = sub_7010(v248);
      uint64_t v251 = (os_log_s *)v250;
      if (v249 == 0x627265566F6ELL && v250 == 0xE600000000000000LL)
      {
        sub_2B7C4();
        uint64_t v254 = *(void (**)(uint64_t, uint64_t))(v237 + 8);
        sub_434A4();
LABEL_162:
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v326 = sub_1BD34();
        sub_5474(v326, (uint64_t)qword_FEC20);
        uint64_t v327 = v337;
        uint64_t v328 = v242(v337, v347, v240);
        Logger.logObject.getter(v328);
        os_log_type_t v329 = sub_2BFB4();
        if (os_log_type_enabled(v251, v329))
        {
          uint64_t v330 = (uint8_t *)sub_1BA1C(12LL);
          uint64_t v331 = sub_1BA1C(32LL);
          uint64_t v389 = v331;
          *(_DWORD *)uint64_t v330 = 136315138;
          v242(v336, v327, v346);
          uint64_t v332 = String.init<A>(describing:)();
          unint64_t v334 = v333;
          uint64_t v388 = sub_4351C(v332, v333);
          uint64_t v240 = v346;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v388, &v389, v330 + 4, v330 + 12);
          swift_bridgeObjectRelease(v334);
          v254(v327, v240);
          sub_1E7D8(&dword_0, v251, v329, "decideActionForInput decide handle disambiguation UsoParse: %s", v330);
          sub_1E7D0(v331);
          sub_1B904(v331);
          sub_1B904((uint64_t)v330);
        }

        else
        {
          sub_434A4();
        }

        sub_435E0();
        v254(v347, v240);
        return;
      }

      char v253 = sub_4354C(v249, v250);
      sub_2B7C4();
      uint64_t v254 = *(void (**)(uint64_t, uint64_t))(v237 + 8);
      sub_434A4();
      if ((v253 & 1) != 0) {
        goto LABEL_162;
      }
    }

    else
    {
      uint64_t v254 = *(void (**)(uint64_t, uint64_t))(v237 + 8);
      sub_434A4();
    }

    uint64_t v285 = v367;
    sub_43584();
    sub_4370C();
    uint64_t v287 = v286;
    v145(v285, v365);
    v386 = v254;
    if (v287 && (v288 = sub_434C0(), (uint64_t v289 = sub_4368C(v288)) != 0))
    {
      uint64_t v290 = (void *)v289;
      uint64_t v291 = qword_FB258;
      id v292 = v287;
      if (v291 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v293 = sub_1BD34();
      uint64_t v294 = (os_log_s *)sub_5474(v293, (uint64_t)qword_FEC20);
      id v295 = v292;
      Logger.logObject.getter(v295);
      os_log_type_t v296 = sub_1BCD0();
      if (sub_2BDE0(v296))
      {
        uint64_t v297 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v298 = sub_1BA1C(32LL);
        uint64_t v389 = v298;
        *(_DWORD *)uint64_t v297 = 136315138;
        v387 = v297 + 4;
        id v299 = v295;
        id v300 = [v290 description];
        static String._unconditionallyBridgeFromObjectiveC(_:)(v300);

        uint64_t v301 = sub_435D0();
        uint64_t v302 = sub_435A0(v301);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v302, v303, v304, v297 + 12);

        sub_2BE5C();
        sub_1E7D8(&dword_0, v294, (os_log_type_t)v254, "Handling action for intent: %s", v297);
        sub_1E7D0(v298);
        uint64_t v305 = v298;
        uint64_t v240 = v346;
        sub_1B904(v305);
        sub_1B904((uint64_t)v297);
      }

      else
      {
      }

      sub_435E0();
    }

    else
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v306 = sub_1BD34();
      uint64_t v307 = (os_log_s *)sub_5474(v306, (uint64_t)qword_FEC20);
      id v295 = v287;
      Logger.logObject.getter(v295);
      os_log_type_t v308 = sub_32A5C();
      if (sub_2BDE0(v308))
      {
        uint64_t v309 = sub_1BA1C(22LL);
        uint64_t v310 = sub_1BA1C(64LL);
        uint64_t v389 = v310;
        *(_DWORD *)uint64_t v309 = 136315394;
        uint64_t v388 = sub_435D0();
        sub_43680(v388, (uint64_t)&v389, v311, v309 + 12);
        *(_WORD *)(v309 + 12) = 2080;
        uint64_t v388 = (uint64_t)v287;
        id v312 = v295;
        sub_67C4(&qword_FEC50);
        uint64_t v313 = sub_435E8();
        uint64_t v388 = sub_4351C(v313, v314);
        sub_43680(v388, v243 + 8, v315, v309 + 22);

        sub_2BE5C();
        sub_436C0( &dword_0,  v307,  (os_log_type_t)v254,  "decideActionForInput: Intent from parse does not match IntentType. Expected %s, received %s",  (uint8_t *)v309);
        sub_436B8(v310);
        uint64_t v316 = v310;
        uint64_t v240 = v346;
        sub_1B904(v316);
        sub_1B904(v309);
      }

      else
      {
      }

      sub_43524();
    }

    v386(v347, v240);
    return;
  }

  sub_433D8((uint64_t)v148, *(uint64_t (**)(uint64_t, uint64_t))(v370 + 96));
  uint64_t v222 = *v148;
  if ((v348 & 1) == 0
    || (swift_getObjectType(*v148), uint64_t v151 = (os_log_s *)v222, !SIRINLUUserDialogAct.firstUsoTask.getter()))
  {
LABEL_110:
    uint64_t v228 = v367;
    sub_43584();
    sub_4370C();
    uint64_t v230 = v229;
    v145(v228, v146);
    if (v230 && (uint64_t v231 = sub_434C0(), sub_4368C(v231)))
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v232 = sub_1BD34();
      sub_39658(v232, (uint64_t)qword_FEC20);
      os_log_type_t v233 = sub_1BCD0();
      if (sub_434EC(v233))
      {
        uint64_t v234 = (uint8_t *)sub_1BA1C(2LL);
        *(_WORD *)uint64_t v234 = 0;
        sub_1BBEC(&dword_0, v151, (os_log_type_t)v56, "decideActionForInput: Handling action for intent", v234);
        sub_1B904((uint64_t)v234);
      }

      static ActionForInput.handle()(v235);
      sub_1E808();
    }

    else
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v268 = sub_1BD34();
      uint64_t v269 = (os_log_s *)sub_5474(v268, (uint64_t)qword_FEC20);
      id v270 = v230;
      Logger.logObject.getter(v270);
      os_log_type_t v271 = sub_32A5C();
      BOOL v272 = sub_43598(v269);
      unint64_t v273 = v349;
      if (v272)
      {
        uint64_t v274 = sub_1BA1C(22LL);
        uint64_t v275 = sub_1BA1C(64LL);
        uint64_t v389 = v275;
        *(_DWORD *)uint64_t v274 = 136315394;
        uint64_t v276 = sub_683C(v350, v273, &v389);
        uint64_t v277 = sub_435B8(v276);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v277, v278, v279, v280);
        *(_WORD *)(v274 + 12) = 2080;
        uint64_t v388 = (uint64_t)v230;
        id v281 = v270;
        sub_67C4(&qword_FEC50);
        uint64_t v282 = String.init<A>(describing:)();
        unint64_t v284 = v283;
        uint64_t v388 = sub_4351C(v282, v283);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v388, &v389, v274 + 14, v274 + 22);

        swift_bridgeObjectRelease(v284);
        sub_436C0( &dword_0,  v269,  v271,  "decideActionForInput: Intent from parse does not match IntentType. Expected %s, received %s",  (uint8_t *)v274);
        sub_436B8(v275);
        sub_1B904(v275);
        sub_1B904(v274);
      }

      else
      {
      }

      sub_43524();
      sub_1E808();
    }

    return;
  }

  LOBYTE(v56) = 110;
  char v223 = sub_6AB8();
  swift_release();
  uint64_t v224 = sub_7010(v223);
  uint64_t v151 = (os_log_s *)v225;
  if (v224 == 0x627265566F6ELL && v225 == 0xE600000000000000LL)
  {
    sub_18034();
  }

  else
  {
    char v227 = sub_4354C(v224, v225);
    sub_18034();
    if ((v227 & 1) == 0) {
      goto LABEL_110;
    }
  }

  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v317 = sub_1BD34();
  uint64_t v318 = (os_log_s *)sub_5474(v317, (uint64_t)qword_FEC20);
  uint64_t v319 = swift_unknownObjectRetain_n(v222, 2LL);
  Logger.logObject.getter(v319);
  os_log_type_t v320 = sub_1BCD0();
  if (sub_434EC(v320))
  {
    uint64_t v321 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v322 = sub_1BA1C(32LL);
    uint64_t v388 = v222;
    uint64_t v389 = v322;
    *(_DWORD *)uint64_t v321 = 136315138;
    swift_unknownObjectRetain(v222);
    sub_67C4(&qword_FCD00);
    uint64_t v323 = sub_435E8();
    uint64_t v388 = sub_4351C(v323, v324);
    sub_43668((uint64_t)&v388, v152 + 8, (uint64_t)(v321 + 4));
    sub_436D0();
    sub_2BE5C();
    sub_1E7D8( &dword_0,  v318,  (os_log_type_t)0x6Eu,  "decideActionForInput decide handle disambiguation userDialogAct: %s",  v321);
    sub_1E7D0(v322);
    sub_1B904(v322);
    sub_1B904((uint64_t)v321);
  }

  else
  {

    uint64_t v325 = sub_436D0();
  }

  static ActionForInput.handle()(v325);
  sub_1E808();
}

  uint64_t v154 = v359;
  sub_7585C();
  sub_B5F4();
  uint64_t v49 = v155;
  char v156 = *(void **)(v364 + 8);
  uint64_t v157 = v360;
  sub_7589C(v154);
  if ((v49 & 1) == 0)
  {
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v167 = sub_1BD34();
    sub_39658(v167, (uint64_t)qword_FEC20);
    uint64_t v168 = sub_2BFB4();
    if (!sub_329F4(v168)) {
      goto LABEL_23;
    }
    char v169 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v169);
    uint64_t v118 = "Disallowing timer input based on allowed input types for current stack state.";
    goto LABEL_22;
  }

  sub_759DC();
  ((void (*)(void))Input.parse.getter)();
  uint64_t v158 = (os_log_s *)v364;
  uint64_t v159 = (*(uint64_t (**)(uint64_t, uint64_t))(v364 + 88))(v49, v157);
  if (v159 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_7568C();
LABEL_80:
    os_log_type_t v184 = v49;
    uint64_t v185 = *(os_log_s **)(v348 + 32);
    uint64_t v186 = v349;
    uint64_t v187 = v350;
    ((void (*)(uint64_t, uint64_t, os_log_s *))v185)(v349, v184, v350);
    sub_75CF0();
    ((void (*)(uint64_t *, uint64_t, os_log_s *))v185)(v92, v186, v187);
    uint64_t v188 = v351;
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    unint64_t v189 = sub_1BD34();
    uint64_t v190 = sub_5474(v189, (uint64_t)qword_FEC20);
    sub_1E720((uint64_t)v92, v188);
    sub_758B8();
    uint64_t v191 = sub_2BFB4();
    if (sub_1E810(v185))
    {
      uint64_t v192 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v193 = sub_1BA1C(32LL);
      sub_75CE4(v193);
      *(_DWORD *)uint64_t v192 = 136315138;
      sub_11718(&qword_FBE60, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C5488);
      uint64_t v195 = dispatch thunk of CustomStringConvertible.description.getter(v346, v194);
      uint64_t v187 = (os_log_s *)v196;
      v386 = sub_4351C(v195, v196);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v386, v387, v192 + 4, v192 + 12);
      sub_18034();
      sub_75A2C();
      sub_1E7D8(&dword_0, v185, v191, "TimerNLIntent: %s", v192);
      sub_1E7D0((uint64_t)v92);
      sub_75CF0();
      sub_1B904(v197);
      uint64_t v198 = (uint64_t)v192;
      uint64_t v154 = v359;
      sub_1B904(v198);
    }

    else
    {
      sub_75A2C();
    }

    sub_7585C();
    sub_7584C();
    uint64_t v200 = v199;
    sub_7589C(v154);
    if (v200)
    {
      if (sub_759E8((uint64_t)v200))
      {
        sub_755D4();
      }

      else
      {
        uint64_t v200 = v200;
        sub_758B8();
        uint64_t v215 = sub_32A5C();
        if (sub_434EC(v215))
        {
          uint64_t v216 = sub_1BA1C(22LL);
          uint64_t v385 = sub_1BA1C(64LL);
          v387[0] = v385;
          *(_DWORD *)uint64_t v216 = 136315394;
          id v217 = sub_7583C();
          v386 = sub_4351C(v217, v218);
          char v92 = v387;
          sub_756B0((uint64_t)&v386, (uint64_t)v387, v219, v216 + 12);
          sub_2BE5C();
          *(_WORD *)(v216 + 12) = 2080;
          unint64_t v220 = v200;
          unint64_t v221 = sub_75C70((uint64_t)[v220 description]);
          char v223 = v222;

          v386 = sub_683C(v221, v223, v387);
          sub_75CF0();
          sub_756B0(v224, v225, v226, v227);

          sub_2B758();
          sub_436C0( &dword_0,  v187,  (os_log_type_t)v154,  "Flows stack receives unexpected from input. Expecting: %s, Generated: %s",  (uint8_t *)v216);
          uint64_t v228 = v385;
          sub_436B8(v385);
          sub_1B904(v228);
          sub_1B904(v216);
        }

        else
        {
        }

        sub_7562C();
      }
    }

    else
    {
      sub_758B8();
      uint64_t v210 = sub_3967C();
      if (sub_329F4(v210))
      {
        uint64_t v211 = (_WORD *)sub_1BA1C(2LL);
        sub_2BA04(v211);
        sub_39644(&dword_0, v212, v213, "Unable to parse intent from parse");
        sub_1B904(v190);
      }

      sub_7562C();
    }

    sub_1E6E4((uint64_t)v92);
    goto LABEL_59;
  }

  if (v159 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_7568C();
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
    goto LABEL_80;
  }

  if (v159 == enum case for Parse.directInvocation(_:))
  {
    sub_755D4();
    os_log_type_t v214 = v49;
LABEL_99:
    sub_7589C(v214);
    goto LABEL_59;
  }

  if (v159 != enum case for Parse.NLv4IntentOnly(_:))
  {
    if (v159 != enum case for Parse.uso(_:))
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v256 = sub_1BD34();
      sub_75BA4(v256, (uint64_t)qword_FEC20);
      uint64_t v257 = v341;
      os_log_type_t v258 = sub_59EF4(v133, v385, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v341 + 16));
      Logger.logObject.getter(v258);
      uint64_t v259 = sub_3967C();
      if (sub_43670(v259))
      {
        uint64_t v260 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v261 = sub_1BA1C(32LL);
        unint64_t v262 = sub_75B7C(v261);
        *(_DWORD *)uint64_t v260 = 136315138;
        Input.parse.getter(v262);
        uint64_t v263 = String.init<A>(describing:)();
        v386 = sub_4351C(v263, v264);
        sub_43668((uint64_t)&v386, (uint64_t)v387, (uint64_t)(v260 + 4));
        sub_18034();
        sub_75878();
        sub_75634(v133, v265);
        sub_1E7D8( &dword_0,  (os_log_s *)v49,  (os_log_type_t)v154,  "Received unsupported parse in decideActionForInput: %s",  v260);
        sub_1E7D0(v133);
        sub_1B904(v133);
        sub_1B904((uint64_t)v260);
      }

      else
      {
        sub_433D8(v133, *(uint64_t (**)(uint64_t, uint64_t))(v257 + 8));
      }

      sub_7562C();
      os_log_type_t v214 = v354;
      goto LABEL_99;
    }

    sub_7568C();
    uint64_t v240 = v339;
    uint64_t v241 = v49;
    uint64_t v242 = v343;
    sub_75BF4(v343, v241, *(uint64_t (**)(uint64_t, uint64_t, void))(v339 + 32));
    uint64_t v243 = *(void (**)(uint64_t, uint64_t, os_log_s *))(v240 + 16);
    uint64_t v244 = v340;
    v243(v340, v242, v158);
    if ((v344 & 0x100000000LL) != 0
      && (sub_759DC(),
          uint64_t v246 = USOParse.userParse.getter(v245),
          uint64_t v247 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v246),
          char v248 = sub_757BC(),
          sub_75634(v248, v249),
          v247))
    {
      uint64_t v250 = (os_log_s *)sub_75758();
      sub_1BC50();
      sub_75BC4();
      sub_75BB8();
      if (v88) {
        char v253 = v252 == 0xE600000000000000LL;
      }
      else {
        char v253 = 0;
      }
      if (v253)
      {
        sub_2B7C4();
        uint64_t v255 = *(void (**)(uint64_t, uint64_t))(v240 + 8);
        sub_756CC(v340);
LABEL_163:
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        os_log_type_t v320 = sub_1BD34();
        sub_75BA4(v320, (uint64_t)qword_FEC20);
        uint64_t v321 = v335;
        uint64_t v322 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v243)(v335, v343, v345);
        Logger.logObject.getter(v322);
        uint64_t v323 = sub_2BFB4();
        if (sub_2B864(v323))
        {
          unint64_t v324 = v345;
          uint64_t v325 = (uint8_t *)sub_1BA1C(12LL);
          uint64_t v326 = sub_1BA1C(32LL);
          v387[0] = v326;
          sub_758C8(4.8149e-34);
          uint64_t v385 = v327;
          uint64_t v328 = sub_75BE8();
          ((void (*)(uint64_t))v243)(v328);
          os_log_type_t v329 = String.init<A>(describing:)();
          uint64_t v331 = sub_4351C(v329, v330);
          uint64_t v332 = sub_755B8(v331);
          sub_758C0(v332, v333, v385);
          sub_17EE8();
          v255(v321, v324);
          sub_1E7D8( &dword_0,  v250,  (os_log_type_t)v244,  "decideActionForInput decide handle disambiguation UsoParse: %s",  v325);
          sub_1E7D0(v326);
          sub_1B904(v326);
          sub_1B904((uint64_t)v325);
        }

        else
        {
          sub_756CC(v321);
        }

        sub_755D4();
LABEL_172:
        sub_756CC(v343);
        goto LABEL_59;
      }

      uint64_t v254 = sub_4354C(v251, (uint64_t)v250);
      sub_2B7C4();
      uint64_t v255 = *(void (**)(uint64_t, uint64_t))(v240 + 8);
      sub_756CC(v340);
      if ((v254 & 1) != 0) {
        goto LABEL_163;
      }
    }

    else
    {
      sub_756CC(v244);
    }

    sub_7585C();
    sub_7584C();
    uint64_t v285 = v284;
    ((void (*)(uint64_t, uint64_t))v156)(v154, v360);
    if (v285 && (uint64_t v286 = sub_759E8((uint64_t)v285)) != 0)
    {
      uint64_t v287 = v286;
      uint64_t v288 = (os_log_s *)qword_FB258;
      uint64_t v289 = v285;
      if (v288 != (os_log_s *)-1LL) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v290 = sub_1BD34();
      sub_75BA4(v290, (uint64_t)qword_FEC20);
      uint64_t v291 = v289;
      Logger.logObject.getter(v291);
      id v292 = sub_1BCD0();
      if (sub_2BDE0(v292))
      {
        uint64_t v293 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v294 = sub_1BA1C(32LL);
        v386 = v287;
        v387[0] = v294;
        id v295 = sub_759F4(4.8149e-34);
        os_log_type_t v296 = v363;
        WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v363);
        uint64_t v298 = String.init<A>(describing:)(&v386, v296, WitnessTable);
        v386 = sub_4351C(v298, v299);
        sub_757DC((uint64_t)&v386, (uint64_t)v387);

        sub_756F8();
        sub_1E7D8(&dword_0, v288, (os_log_type_t)v240, "Handling action for intent: %s", v293);
        sub_1E7D0(v294);
        sub_1B904(v294);
        sub_1B904((uint64_t)v293);
      }

      else
      {
      }

      sub_755D4();
    }

    else
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      id v300 = sub_1BD34();
      uint64_t v301 = (os_log_s *)sub_5474(v300, (uint64_t)qword_FEC20);
      uint64_t v291 = v285;
      Logger.logObject.getter(v291);
      uint64_t v302 = sub_32A5C();
      if (sub_2BDE0(v302))
      {
        uint64_t v303 = sub_1BA1C(22LL);
        uint64_t v304 = sub_1BA1C(64LL);
        sub_75CE4(v304);
        *(_DWORD *)uint64_t v303 = 136315394;
        uint64_t v305 = sub_7583C();
        v386 = sub_4351C(v305, v306);
        sub_756B0((uint64_t)&v386, (uint64_t)v387, v307, v303 + 12);
        sub_2BE5C();
        *(_WORD *)(v303 + 12) = 2080;
        v386 = (uint64_t)v285;
        os_log_type_t v308 = v291;
        sub_67C4(&qword_FEC50);
        uint64_t v309 = sub_435E8();
        v386 = sub_4351C(v309, v310);
        sub_756B0((uint64_t)&v386, (uint64_t)v156 + 8, v311, v303 + 22);

        sub_2BE5C();
        sub_436C0( &dword_0,  v301,  (os_log_type_t)v240,  "decideActionForInput: Intent from parse does not match IntentType. Expected %s, received %s",  (uint8_t *)v303);
        sub_436B8((uint64_t)v92);
        sub_1B904((uint64_t)v92);
        sub_1B904(v303);
      }

      else
      {
      }

      sub_7562C();
    }

    goto LABEL_172;
  }

  sub_7568C();
  uint64_t v229 = *(void *)v49;
  if ((v344 & 0x100000000LL) == 0 || (sub_75928(), !sub_75920()))
  {
LABEL_110:
    sub_7585C();
    sub_7584C();
    uint64_t v236 = v235;
    sub_7589C(v154);
    if (v236 && sub_759E8((uint64_t)v236))
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v237 = sub_1BD34();
      sub_39658(v237, (uint64_t)qword_FEC20);
      uint64_t v238 = sub_1BCD0();
      if (sub_434EC(v238))
      {
        uint64_t v239 = (uint8_t *)sub_1BA1C(2LL);
        *(_WORD *)uint64_t v239 = 0;
        sub_1BBEC(&dword_0, v158, (os_log_type_t)v154, "decideActionForInput: Handling action for intent", v239);
        sub_1B904((uint64_t)v239);
      }

      sub_755D4();
      sub_1E808();
    }

    else
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v266 = sub_1BD34();
      uint64_t v267 = (void *)sub_5474(v266, (uint64_t)qword_FEC20);
      uint64_t v268 = v236;
      Logger.logObject.getter(v268);
      uint64_t v269 = sub_32A5C();
      if (sub_2BAD0(v269))
      {
        id v270 = sub_1BA1C(22LL);
        os_log_type_t v271 = sub_1BA1C(64LL);
        sub_75B7C(v271);
        *(_DWORD *)id v270 = 136315394;
        BOOL v272 = sub_7583C();
        v386 = sub_4351C(v272, v273);
        sub_757E8(v386, (uint64_t)v387, v274, v270 + 12);
        sub_756F8();
        *(_WORD *)(v270 + 12) = 2080;
        v386 = (uint64_t)v236;
        uint64_t v275 = v268;
        sub_67C4(&qword_FEC50);
        uint64_t v276 = sub_75710();
        v386 = sub_4351C(v276, v277);
        sub_757E8(v386, (uint64_t)v387, v278, v270 + 22);

        sub_756F8();
        sub_75A6C();
        sub_436C0(v279, v280, v281, v282, v283);
        sub_436B8(v133);
        sub_1B904(v133);
        sub_1B904(v270);
      }

      else
      {
      }

      sub_7562C();
      sub_1E808();
    }

    goto LABEL_59;
  }

  LOBYTE(v154) = 110;
  uint64_t v230 = sub_6AB8();
  sub_1BC50();
  uint64_t v231 = sub_7010(v230);
  uint64_t v158 = (os_log_s *)v232;
  if (v231 == 0x627265566F6ELL && v232 == 0xE600000000000000LL)
  {
    sub_18034();
  }

  else
  {
    uint64_t v234 = sub_4354C(v231, v232);
    sub_18034();
    uint64_t v154 = v359;
    if ((v234 & 1) == 0) {
      goto LABEL_110;
    }
  }

  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  id v312 = sub_1BD34();
  sub_75BA4(v312, (uint64_t)qword_FEC20);
  uint64_t v313 = sub_75B28(v229);
  Logger.logObject.getter(v313);
  unint64_t v314 = sub_1BCD0();
  if (sub_434EC(v314))
  {
    uint64_t v315 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v316 = sub_1BA1C(32LL);
    v386 = v229;
    v387[0] = v316;
    *(_DWORD *)uint64_t v315 = 136315138;
    swift_unknownObjectRetain(v229);
    sub_67C4(&qword_FCD00);
    uint64_t v317 = sub_435E8();
    uint64_t v319 = sub_4351C(v317, v318);
    sub_755DC(v319);
    sub_436D0();
    sub_2BE5C();
    sub_1E7D8( &dword_0,  v158,  (os_log_type_t)v154,  "decideActionForInput decide handle disambiguation userDialogAct: %s",  v315);
    sub_1E7D0(v316);
    sub_1B904(v316);
    sub_1B904((uint64_t)v315);
  }

  else
  {

    sub_436D0();
  }

  sub_755D4();
  sub_1E808();
LABEL_59:
  sub_17E58();
}

void sub_3B620(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_3B648(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_3B670(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_3B698(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_3B6C0(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

uint64_t sub_3B6E8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FCB00);
  sub_5474(v0, (uint64_t)qword_FCB00);
  return static SiriTimeLog.timerFlow.getter();
}

void sub_3B730(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_67C4(&qword_FBDB8);
  sub_1BCE0();
  __chkstk_darwin(v9);
  sub_17DAC();
  if (qword_FB170 != -1) {
    swift_once(&qword_FB170, sub_3B6E8);
  }
  uint64_t v10 = sub_1BD34();
  sub_39658(v10, (uint64_t)qword_FCB00);
  os_log_type_t v11 = sub_1BCD0();
  if (sub_43598(v2))
  {
    uint64_t v12 = (uint8_t *)sub_1BA1C(2LL);
    *(_WORD *)uint64_t v12 = 0;
    sub_1BBEC(&dword_0, v2, v11, "CreateTimer.NeedsValueStrategy.actionForInput() called)", v12);
    sub_1B904((uint64_t)v12);
  }

  uint64_t v13 = type metadata accessor for HALTimerDeviceContext(0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v3, 1LL, 1LL, v13);
  uint64_t v14 = enum case for DecideAction.PromptExpectation.slot(_:);
  uint64_t v15 = type metadata accessor for DecideAction.PromptExpectation(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104LL))(v8, v14, v15);
  sub_1BC80((uint64_t)v8);
  sub_3974C( a1,  v3,  0,  (uint64_t)v8,  (uint64_t (*)(uint64_t *))sub_3DCB4,  (uint64_t)&type metadata accessor for CreateTimerIntent,  0xD000000000000011LL,  0x80000000000C7CA0LL,  a2);
  sub_8CC4((uint64_t)v8, (uint64_t *)&unk_FCC70);
  sub_8CC4(v3, &qword_FBDB8);
}

uint64_t sub_3B8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  v4[18] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[19] = v6;
  v4[20] = sub_1B6C8(v6);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  v4[21] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[22] = v8;
  v4[23] = sub_1B6C8(v8);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  v4[24] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[25] = v10;
  v4[26] = sub_1B6C8(v10);
  uint64_t v11 = sub_67C4(&qword_FD5E0);
  v4[27] = sub_1B6C8(*(void *)(v11 - 8));
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  v4[28] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[29] = v13;
  v4[30] = sub_2B4DC(v13);
  v4[31] = sub_1B970();
  uint64_t v14 = type metadata accessor for USOParse(0LL);
  v4[32] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[33] = v15;
  v4[34] = sub_1B6C8(v15);
  uint64_t v16 = type metadata accessor for Input(0LL);
  v4[35] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v4[36] = v17;
  v4[37] = sub_2B4DC(v17);
  v4[38] = sub_1B970();
  v4[39] = sub_1B970();
  uint64_t v18 = type metadata accessor for TimerNLv3Intent(0LL);
  v4[40] = v18;
  v4[41] = sub_2B4DC(*(void *)(v18 - 8));
  v4[42] = sub_1B970();
  uint64_t v19 = type metadata accessor for Parse(0LL);
  v4[43] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v4[44] = v20;
  v4[45] = sub_2B4DC(v20);
  v4[46] = sub_1B970();
  uint64_t v21 = type metadata accessor for NLIntent(0LL);
  v4[47] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v4[48] = v22;
  v4[49] = sub_1B6C8(v22);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_3BA60()
{
  unint64_t v1 = (unint64_t)v0;
  uint64_t v2 = (uint64_t)(v0 + 5);
  uint64_t v3 = (uint64_t)(v0 + 10);
  v408 = v0 + 11;
  v412 = v0 + 4;
  uint64_t v4 = v0[46];
  uint64_t v5 = v0[44];
  uint64_t v6 = *(void *)(v1 + 344);
  uint64_t v7 = sub_67C4((uint64_t *)&unk_FCC40);
  uint64_t v8 = (void *)ParameterResolutionRecord.intent.getter(v7);
  Input.parse.getter(v8);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6);
  v420 = v8;
  if (v9 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v405 = v2;
    (*(void (**)(void, void))(*(void *)(v1 + 352) + 96LL))( *(void *)(v1 + 368),  *(void *)(v1 + 344));
LABEL_5:
    uint64_t v402 = v3;
    uint64_t v10 = *(void *)(v1 + 392);
    uint64_t v11 = *(void *)(v1 + 376);
    uint64_t v12 = *(void *)(v1 + 336);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 384) + 32LL);
    v13(v10, *(void *)(v1 + 368), v11);
    v13(v12, v10, v11);
    id v14 = sub_3D2B4();
    sub_4361C();
    if (!v15) {
      swift_once(&qword_FB170, sub_3B6E8);
    }
    uint64_t v16 = *(void *)(v1 + 328);
    uint64_t v17 = *(void *)(v1 + 336);
    uint64_t v18 = sub_1BD34();
    sub_5474(v18, (uint64_t)qword_FCB00);
    sub_1E720(v17, v16);
    uint64_t v19 = (os_log_s *)sub_32A18();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = sub_43598(v19);
    uint64_t v22 = *(os_log_s **)(v1 + 328);
    uint64_t v416 = v1;
    if (v21)
    {
      uint64_t v395 = (uint64_t)v14;
      uint64_t v23 = *(void *)(v1 + 320);
      uint64_t v24 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v25 = sub_1BA1C(32LL);
      *(void *)&__int128 v423 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      sub_4345C(&qword_FBE60, v26, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C5488);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v23, v27);
      unint64_t v30 = v29;
      *(void *)(v1 + 80) = sub_43574( v28,  v29,  v31,  v32,  v33,  v34,  v35,  v36,  v376,  v377,  (uint64_t)v378,  v380,  v381,  v385,  (uint64_t)v391,  v395);
      sub_43614(v402, (uint64_t)v408, (uint64_t)(v24 + 4));
      unint64_t v37 = v30;
      id v14 = (id)v394;
      swift_bridgeObjectRelease(v37);
      sub_1E6E4((uint64_t)v22);
      sub_1E7D8(&dword_0, v19, v20, "NLIntent:%s", v24);
      sub_1E7D0(v25);
      sub_1B904(v25);
      sub_1B904((uint64_t)v24);
    }

    else
    {
      sub_1E6E4((uint64_t)v22);
    }

    id v38 = v14;
    sub_32A18();
    os_log_type_t v39 = sub_1BCD0();
    if (os_log_type_enabled(v22, v39))
    {
      uint64_t v40 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v41 = sub_1BA1C(32LL);
      *(void *)&__int128 v423 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      v408 = v40 + 4;
      id v42 = v38;
      uint64_t v43 = sub_436EC((uint64_t)[v42 description]);

      uint64_t v45 = sub_436DC(v43, v44, (uint64_t *)&v423);
      uint64_t v46 = sub_435F8(v45, v412);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v46, v405, v47, v40 + 12);
      sub_2B7C4();

      sub_1E7D8(&dword_0, v22, v39, "Updated SK intent:%s", v40);
      sub_1E7D0(v41);
      sub_1B904(v41);
      sub_1B904((uint64_t)v40);
    }

    else
    {
    }

    uint64_t v48 = (void *)v416;
    uint64_t v49 = *(void *)(v416 + 336);
    __int128 v423 = 0u;
    __int128 v424 = 0u;
    id v50 = v38;
    uint64_t v51 = sub_43698();

    uint64_t v52 = sub_43644();
    IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v423, v51, v52);

    sub_4356C( v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v376,  v377,  (uint64_t)v378,  v380,  v381,  v385,  (uint64_t)v391,  v394,  v402,  v405,  (uint64_t)v408,  (uint64_t)v412,  v416,  v420);
    sub_1E6E4(v49);
    goto LABEL_14;
  }

  if (v9 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v405 = v2;
    sub_43564(*(uint64_t (**)(uint64_t))(*(void *)(v1 + 352) + 96LL));
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
    goto LABEL_5;
  }

  uint64_t v67 = v1 + 56;
  if (v9 == enum case for Parse.NLv4IntentOnly(_:))
  {
    uint64_t v413 = v1 + 104;
    uint64_t v68 = *(uint64_t **)(v1 + 368);
    sub_43564(*(uint64_t (**)(uint64_t))(*(void *)(v1 + 352) + 96LL));
    uint64_t v69 = *v68;
    swift_getObjectType(*v68);
    if (SIRINLUUserDialogAct.firstUsoTask.getter())
    {
      uint64_t v70 = (void *)sub_43644();
      swift_retain();
      uint64_t v401 = (uint64_t)v70;
      sub_BFCC();
      if (v71)
      {
        uint64_t v72 = v71;
        uint64_t v406 = v69;
        sub_4361C();
        if (!v15) {
          swift_once(&qword_FB170, sub_3B6E8);
        }
        uint64_t v73 = sub_1BD34();
        sub_5474(v73, (uint64_t)qword_FCB00);
        id v74 = v8;
        sub_32A18();
        os_log_type_t v75 = sub_1BCD0();
        v421 = v74;
        if (sub_434D0(v75))
        {
          uint64_t v76 = (uint8_t *)sub_1BA1C(12LL);
          uint64_t v386 = sub_1BA1C(32LL);
          *(void *)&__int128 v423 = v386;
          *(_DWORD *)uint64_t v76 = 136315138;
          id v77 = v74;
          uint64_t v379 = (uint64_t)v70;
          uint64_t v78 = (uint64_t *)(v1 + 48);
          id v79 = [v77 description];
          unint64_t v80 = v1;
          uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
          LODWORD(v377) = v69;
          LOBYTE(v69) = v67;

          uint64_t v82 = v81;
          unint64_t v1 = v80;
          *uint64_t v78 = sub_436DC(v82, v83, (uint64_t *)&v423);
          sub_436AC((uint64_t)v78, v67, v84, v85, v86, v87, v88, v89, v376, v377, v379, (uint64_t)(v76 + 4));
          sub_2B7C4();

          sub_1E7D8(&dword_0, v378, (os_log_type_t)v377, "Current SK intent %s", v76);
          sub_1E7D0(v386);
          sub_1B904(v386);
          sub_1B904((uint64_t)v76);
        }

        else
        {
        }

        uint64_t v168 = (uint64_t *)(v1 + 96);
        char v169 = (os_log_s *)ParameterResolutionRecord.intent.getter(v7);
        uint64_t Timer = CreateTimerIntent.duration.getter();
        uint64_t v171 = v169;
        CreateTimerIntent.duration.setter(Timer, v172);
        uint64_t v173 = v72;
        sub_32A18();
        os_log_type_t v174 = sub_1BCD0();
        v417 = (void *)v1;
        v393 = v173;
        if (sub_434D0(v174))
        {
          v387 = v169;
          uint64_t v72 = (_DWORD *)sub_1BA1C(12LL);
          uint64_t v382 = sub_1BA1C(32LL);
          *(void *)&__int128 v423 = v382;
          *uint64_t v72 = 136315138;
          uint64_t v175 = v173;
          id v176 = [v175 description];
          uint64_t v177 = static String._unconditionallyBridgeFromObjectiveC(_:)(v176);
          uint64_t v179 = v178;

          uint64_t v180 = v177;
          uint64_t v168 = (uint64_t *)(v1 + 96);
          uint64_t v182 = sub_436DC(v180, v181, (uint64_t *)&v423);
          uint64_t v183 = sub_435F8(v182, v408);
          sub_436AC( (uint64_t)v183,  v1 + 96,  v184,  v185,  v186,  v187,  v188,  v189,  v376,  v377,  (uint64_t)v378,  (uint64_t)(v72 + 1));
          uint64_t v190 = v179;
          char v169 = v387;
          swift_bridgeObjectRelease(v190);

          sub_1E7D8(&dword_0, v171, (os_log_type_t)v69, "UsoGraph createTimerIntent:%s", (uint8_t *)v72);
          sub_1E7D0(v382);
          sub_1B904(v382);
          sub_1B904((uint64_t)v72);
        }

        else
        {
        }

        uint64_t v191 = v169;
        sub_32A18();
        os_log_type_t v192 = sub_1BCD0();
        if (sub_434D0(v192))
        {
          uint64_t v193 = (uint8_t *)sub_1BA1C(12LL);
          v408 = (void *)sub_1BA1C(32LL);
          *(void *)&__int128 v423 = v408;
          *(_DWORD *)uint64_t v193 = 136315138;
          uint64_t v194 = v191;
          uint64_t v195 = sub_436EC((uint64_t)-[os_log_s description](v194, "description"));
          unint64_t v197 = v196;

          *uint64_t v168 = sub_683C(v195, v197, (uint64_t *)&v423);
          sub_43668((uint64_t)v168, v413, (uint64_t)(v193 + 4));
          swift_bridgeObjectRelease(v197);

          sub_1E7D8(&dword_0, v171, (os_log_type_t)v69, "Updated SK intent:%s", v193);
          sub_1E7D0((uint64_t)v408);
          sub_1B904((uint64_t)v408);
          sub_1B904((uint64_t)v193);
        }

        else
        {
        }

        uint64_t v48 = v417;
        __int128 v423 = 0u;
        __int128 v424 = 0u;
        uint64_t v198 = v191;
        uint64_t v199 = sub_43698();

        IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v423, v199, v401);
        swift_release();

        swift_unknownObjectRelease(v406);
        goto LABEL_14;
      }

      swift_release();
    }

    sub_4361C();
    if (!v15) {
      swift_once(&qword_FB170, sub_3B6E8);
    }
    uint64_t v135 = (_BYTE *)(v1 + 400);
    uint64_t v136 = sub_1BD34();
    sub_5474(v136, (uint64_t)qword_FCB00);
    uint64_t v137 = sub_4352C();
    uint64_t v138 = (os_log_s *)Logger.logObject.getter(v137);
    os_log_type_t v139 = static os_log_type_t.error.getter();
    if (sub_43604(v139))
    {
      v408 = (void *)(v1 + 400);
      uint64_t v398 = *(void *)(v1 + 288);
      uint64_t v401 = *(void *)(v1 + 280);
      unint64_t v140 = v1;
      uint64_t v141 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v404 = v69;
      uint64_t v142 = sub_1BA1C(32LL);
      *(void *)&__int128 v423 = v142;
      *(_DWORD *)uint64_t v141 = 136315138;
      Input.parse.getter(v142);
      uint64_t v135 = v408;
      uint64_t v143 = String.init<A>(describing:)();
      unint64_t v145 = v144;
      *(void *)(v140 + 104) = sub_43574( v143,  v144,  v146,  v147,  v148,  v149,  v150,  v151,  v376,  v377,  (uint64_t)v378,  v380,  v381,  v385,  (uint64_t)v391,  v398);
      sub_43614(v413, v140 + 112, (uint64_t)(v141 + 4));
      swift_bridgeObjectRelease(v145);
      sub_43564(*(uint64_t (**)(uint64_t))(v399 + 8));
      sub_1E7D8(&dword_0, v138, (os_log_type_t)v7, "Failed to parse userDialogAct into createTimerIntent: %s", v141);
      sub_1E7D0(v142);
      uint64_t v152 = v142;
      uint64_t v69 = v404;
      sub_1B904(v152);
      uint64_t v153 = (uint64_t)v141;
      unint64_t v1 = v140;
      sub_1B904(v153);
    }

    else
    {
      sub_1BB90(*(void *)(v1 + 288));
    }

    *uint64_t v135 = 0;
    uint64_t v154 = sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v155 = sub_1E324();
    uint64_t v156 = sub_2BFC4();
    sub_1B74C(v156, v157);
    unint64_t v158 = sub_43384();
    uint64_t v160 = static BarbaraWalters.logAndReturnError<A>(context:_:)(v158, v159, v135, v154, v155);
    sub_436F4(v160, v161, v162, v163, v164, v165, v166, v167);

    swift_unknownObjectRelease(v69);
LABEL_65:
    unint64_t v250 = v1;
    uint64_t v251 = *(void *)(v1 + 272);
    uint64_t v252 = *(void *)(v250 + 248);
    sub_434FC();
    swift_task_dealloc(v253);
    sub_1BABC();
    sub_1B86C();
    sub_1BA24();
    sub_1BA14();
    sub_1BA38();
    sub_1B838();
    sub_1BA8C();
    swift_task_dealloc(v251);
    swift_task_dealloc(v252);
    swift_task_dealloc(v401);
    swift_task_dealloc(v404);
    swift_task_dealloc(v408);
    swift_task_dealloc(v413);
    swift_task_dealloc(v420);
    uint64_t v65 = *(uint64_t (**)(void))(v250 + 8);
    return v65();
  }

  uint64_t v409 = v1 + 24;
  if (v9 != enum case for Parse.uso(_:))
  {
    unint64_t v110 = v1 + 404;
    sub_4361C();
    if (!v15) {
      swift_once(&qword_FB170, sub_3B6E8);
    }
    uint64_t v111 = sub_1BD34();
    sub_5474(v111, (uint64_t)qword_FCB00);
    uint64_t v112 = sub_4352C();
    uint64_t v113 = (os_log_s *)Logger.logObject.getter(v112);
    os_log_type_t v114 = static os_log_type_t.error.getter();
    if (sub_43604(v114))
    {
      uint64_t v397 = *(void *)(v1 + 288);
      uint64_t v401 = *(void *)(v1 + 280);
      os_log_type_t v115 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v404 = v1 + 404;
      uint64_t v116 = sub_1BA1C(32LL);
      *(void *)&__int128 v423 = v116;
      *(_DWORD *)os_log_type_t v115 = 136315138;
      Input.parse.getter(v116);
      uint64_t v117 = String.init<A>(describing:)();
      unint64_t v119 = v118;
      *(void *)(v1 + 24) = sub_43574( v117,  v118,  v120,  v121,  v122,  v123,  v124,  v125,  v376,  v377,  (uint64_t)v378,  v380,  v381,  v385,  (uint64_t)v391,  v397);
      sub_43614(v409, (uint64_t)v412, (uint64_t)(v115 + 4));
      swift_bridgeObjectRelease(v119);
      sub_43564(*(uint64_t (**)(uint64_t))(v394 + 8));
      sub_1E7D8(&dword_0, v113, (os_log_type_t)v7, "Received unsupported parse: %s", v115);
      sub_1E7D0(v116);
      uint64_t v126 = v116;
      unint64_t v110 = v1 + 404;
      sub_1B904(v126);
      sub_1B904((uint64_t)v115);
    }

    else
    {
      sub_1BB90(*(void *)(v1 + 288));
    }

    uint64_t v127 = *(void *)(v1 + 368);
    uint64_t v129 = *(void *)(v1 + 344);
    uint64_t v128 = *(void *)(v1 + 352);
    *(_BYTE *)(v1 + 404) = 0;
    uint64_t v130 = sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v131 = sub_1E324();
    sub_1B74C(v130, v131);
    unint64_t v132 = sub_43384();
    unint64_t v134 = v110;
    goto LABEL_63;
  }

  uint64_t v391 = (os_log_s *)(v1 + 56);
  uint64_t v404 = v2;
  uint64_t v90 = *(void *)(v1 + 368);
  uint64_t v92 = *(void *)(v1 + 264);
  uint64_t v91 = *(void *)(v1 + 272);
  char v93 = *(uint8_t **)(v1 + 256);
  sub_43564(*(uint64_t (**)(uint64_t))(*(void *)(v1 + 352) + 96LL));
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v92 + 32))(v91, v90, v93);
  sub_4361C();
  if (!v15) {
    swift_once(&qword_FB170, sub_3B6E8);
  }
  uint64_t v394 = v1 + 48;
  uint64_t v94 = sub_1BD34();
  v412 = (void *)sub_5474(v94, (uint64_t)qword_FCB00);
  uint64_t v95 = (os_log_s *)Logger.logObject.getter(v412);
  os_log_type_t v96 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v97 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v97);
    sub_1BBEC(&dword_0, v95, v96, "Received an USO parse in CreateTimer.parseResponseValue().", v93);
    sub_1B904((uint64_t)v93);
  }

  uint64_t v99 = *(void *)(v1 + 200);
  uint64_t v98 = *(void *)(v1 + 208);

  uint64_t v101 = USOParse.userParse.getter(v100);
  uint64_t v102 = Siri_Nlu_External_UserParse.userDialogActs.getter(v101);
  sub_433D8(v98, *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8));
  uint64_t v103 = *(void *)(v102 + 16);
  if (v103)
  {
    uint64_t v104 = *(void *)(v1 + 176);
    unint64_t v105 = v102 + ((*(unsigned __int8 *)(v104 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80));
    uint64_t v106 = *(void *)(v104 + 72);
    char v107 = *(uint64_t (**)(void, unint64_t, void))(v104 + 16);
    swift_bridgeObjectRetain(v102);
    while (1)
    {
      uint64_t v108 = v107(*(void *)(v1 + 184), v105, *(void *)(v1 + 168));
      if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter(v108) & 1) != 0) {
        break;
      }
      (*(void (**)(void, void))(v104 + 8))(*(void *)(v1 + 184), *(void *)(v1 + 168));
      v105 += v106;
      if (!--v103)
      {
        sub_1BC04();
        goto LABEL_33;
      }
    }

    uint64_t v200 = *(void *)(v1 + 216);
    uint64_t v202 = *(void *)(v1 + 176);
    uint64_t v201 = *(void *)(v1 + 184);
    uint64_t v203 = *(void *)(v1 + 168);
    sub_1BC04();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v202 + 32))(v200, v201, v203);
    uint64_t v109 = 0LL;
  }

  else
  {
LABEL_33:
    uint64_t v109 = 1LL;
  }

  uint64_t v204 = *(void *)(v1 + 216);
  uint64_t v205 = *(void *)(v1 + 168);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v204, v109, 1LL, v205);
  sub_1BC04();
  uint64_t v206 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v204, 1LL, v205);
  if ((_DWORD)v206 == 1)
  {
    sub_8CC4(*(void *)(v1 + 216), &qword_FD5E0);
    unint64_t v216 = v1 + 403;
    (*(void (**)(void, void, void))(*(void *)(v1 + 288) + 16LL))( *(void *)(v1 + 304),  *(void *)(v1 + 120),  *(void *)(v1 + 280));
    id v217 = (os_log_s *)sub_43544();
    os_log_type_t v218 = static os_log_type_t.error.getter();
    if (sub_43598(v217))
    {
      uint64_t v220 = *(void *)(v1 + 304);
      uint64_t v401 = *(void *)(v1 + 288);
      uint64_t v409 = *(void *)(v1 + 280);
      unint64_t v221 = (uint8_t *)sub_1BA1C(12LL);
      v412 = (void *)(v1 + 403);
      uint64_t v222 = sub_1BA1C(32LL);
      *(void *)&__int128 v423 = v222;
      *(_DWORD *)unint64_t v221 = 136315138;
      Input.parse.getter(v222);
      uint64_t v223 = String.init<A>(describing:)();
      unint64_t v225 = v224;
      *(void *)(v1 + 40) = sub_43574( v223,  v224,  v226,  v227,  v228,  v229,  v230,  v231,  v376,  v377,  (uint64_t)v378,  v380,  v381,  v385,  (uint64_t)v391,  v394);
      sub_43614(v404, v394, (uint64_t)(v221 + 4));
      swift_bridgeObjectRelease(v225);
      (*(void (**)(uint64_t, uint64_t))(v401 + 8))(v220, v409);
      sub_1E7D8(&dword_0, v217, v218, "Failed to parse userParse from parse: %s.", v221);
      sub_1E7D0(v222);
      uint64_t v232 = v222;
      unint64_t v216 = v1 + 403;
      sub_1B904(v232);
      sub_1B904((uint64_t)v221);
    }

    else
    {
      sub_1BB90(*(void *)(v1 + 288));
    }

    uint64_t v128 = *(void *)(v1 + 264);
    uint64_t v127 = *(void *)(v1 + 272);
    uint64_t v129 = *(void *)(v1 + 256);
    *(_BYTE *)(v1 + 403) = 0;
    uint64_t v130 = sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v131 = sub_1E324();
    sub_1B74C(v130, v131);
    unint64_t v132 = sub_43384();
    unint64_t v134 = v216;
LABEL_63:
    uint64_t v233 = static BarbaraWalters.logAndReturnError<A>(context:_:)(v132, v133, v134, v130, v131);
    uint64_t v241 = sub_436F4(v233, v234, v235, v236, v237, v238, v239, v240);
    sub_4356C( v241,  v242,  v243,  v244,  v245,  v246,  v247,  v248,  v376,  v377,  (uint64_t)v378,  v380,  v381,  v385,  (uint64_t)v391,  v394,  v401,  v404,  v409,  (uint64_t)v412,  v415,  v420);
    uint64_t v249 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
LABEL_64:
    v249(v127, v129);
    goto LABEL_65;
  }

  uint64_t v403 = v3;
  uint64_t v207 = *(void *)(v1 + 248);
  uint64_t v208 = *(void *)(v1 + 216);
  uint64_t v383 = *(void *)(v1 + 232);
  uint64_t v388 = *(void *)(v1 + 224);
  uint64_t v209 = *(void *)(v1 + 176);
  uint64_t v210 = *(void *)(v1 + 152);
  uint64_t v211 = *(void *)(v1 + 160);
  uint64_t v212 = *(void *)(v1 + 144);
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter(v206);
  uint64_t v213 = sub_433D8(v208, *(uint64_t (**)(uint64_t, uint64_t))(v209 + 8));
  Siri_Nlu_External_UserStatedTask.task.getter(v213);
  (*(void (**)(uint64_t, uint64_t))(v210 + 8))(v211, v212);
  uint64_t v214 = sub_2BFC4();
  v215(v214);
  id v254 = (id)static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v207, 0LL);
  v418 = (void *)v1;
  uint64_t v255 = static UsoConversionUtils.convertGraphToTasks(graph:)();
  uint64_t v256 = v255;
  if ((unint64_t)v255 >> 62)
  {
    if (v255 >= 0) {
      v255 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v257 = _CocoaArrayWrapper.endIndex.getter(v255);
  }

  else
  {
    uint64_t v257 = *(void *)((char *)&dword_10 + (v255 & 0xFFFFFFFFFFFFF8LL));
  }

  if (!v257)
  {
    uint64_t v390 = (uint64_t)v254;
    sub_18034();
    sub_43544();
    os_log_type_t v273 = sub_32A5C();
    if (sub_1BB80(v273))
    {
      uint64_t v274 = (uint8_t *)sub_1BA1C(2LL);
      *(_WORD *)uint64_t v274 = 0;
      sub_1BBEC(&dword_0, (os_log_s *)v256, (os_log_type_t)v207, "USO graph has no tasks.", v274);
      sub_1B904((uint64_t)v274);
    }

    uint64_t v275 = *(void *)(v1 + 264);
    uint64_t v127 = *(void *)(v1 + 272);
    uint64_t v129 = *(void *)(v1 + 256);
    uint64_t v276 = *(void *)(v1 + 232);

    *(_BYTE *)(v1 + 401) = 0;
    uint64_t v277 = sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v1 = sub_1E324();
    uint64_t v278 = sub_1B74C(v277, v1);
    unint64_t v279 = sub_43384();
    uint64_t v281 = sub_43634(v279, v280, (uint64_t)v418 + 401);
    swift_willThrow(v281, v282, v283, v284, v285, v286, v287, v288);
    uint64_t v289 = swift_release();
    sub_4356C( v289,  v290,  v291,  v292,  v293,  v294,  v295,  v296,  v376,  v377,  (uint64_t)v378,  v380,  v383,  v390,  (uint64_t)v391,  v278,  v403,  v404,  v409,  (uint64_t)v412,  (uint64_t)v418,  v420);
    sub_2B5A0(*(uint64_t (**)(uint64_t, uint64_t))(v276 + 8));
    uint64_t v249 = *(void (**)(uint64_t, uint64_t))(v275 + 8);
    goto LABEL_64;
  }

  sub_8EEB4(0LL, (v256 & 0xC000000000000001LL) == 0, v256);
  if ((v256 & 0xC000000000000001LL) != 0)
  {
    uint64_t v258 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v256);
  }

  else
  {
    uint64_t v258 = *(void *)(v256 + 32);
    swift_retain();
  }

  sub_18034();
  uint64_t v259 = (os_log_s *)sub_43644();
  swift_retain();
  uint64_t v260 = v259;
  sub_BFCC();
  if (!v261)
  {
    uint64_t v410 = v1 + 402;
    swift_retain_n(v258, 2LL);
    uint64_t v297 = (os_log_s *)sub_43544();
    os_log_type_t v298 = static os_log_type_t.error.getter();
    if (sub_43598(v297))
    {
      id v299 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v300 = sub_1BA1C(32LL);
      *(void *)&__int128 v423 = v300;
      *(_DWORD *)id v299 = 136315138;
      uint64_t v301 = UsoTask.verbString.getter(v300);
      uint64_t v309 = sub_43574( v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v376,  v377,  (uint64_t)v378,  v380,  v383,  v388,  (uint64_t)v391,  v394);
      uint64_t v310 = sub_435F8(v309, v391);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v310, v1 + 64, v299 + 4, v299 + 12);
      sub_18034();
      sub_43700();
      sub_1E7D8(&dword_0, v297, v298, "Could not create IntentType from given task: %s", v299);
      sub_1E7D0(v300);
      sub_1B904(v300);
      sub_1B904((uint64_t)v299);
    }

    else
    {
      sub_43700();
    }

    uint64_t v353 = *(void *)(v1 + 264);
    uint64_t v414 = *(void *)(v1 + 272);
    uint64_t v354 = *(void *)(v1 + 256);
    uint64_t v355 = *(void *)(v1 + 232);
    *(_BYTE *)(v1 + 402) = 0;
    uint64_t v356 = sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v1 = sub_1E324();
    uint64_t v357 = sub_1B74C(v356, v1);
    unint64_t v358 = sub_43384();
    uint64_t v360 = sub_43634(v358, v359, v410);
    swift_willThrow(v360, v361, v362, v363, v364, v365, v366, v367);
    uint64_t v368 = swift_release();
    sub_4356C( v368,  v369,  v370,  v371,  v372,  v373,  v374,  v375,  v376,  v377,  (uint64_t)v378,  v380,  v383,  v388,  (uint64_t)v391,  v357,  v403,  v404,  v410,  v414,  (uint64_t)v418,  v420);
    swift_release();
    sub_2B5A0(*(uint64_t (**)(uint64_t, uint64_t))(v355 + 8));
    (*(void (**)(uint64_t, uint64_t))(v353 + 8))(v413, v354);
    goto LABEL_65;
  }

  unint64_t v262 = v261;
  uint64_t v407 = v258;
  id v263 = v420;
  sub_43544();
  os_log_type_t v264 = sub_1BCD0();
  v384 = (void *)(v1 + 64);
  uint64_t v389 = (uint64_t)v254;
  uint64_t v400 = (uint64_t)v259;
  v422 = v263;
  if (sub_434EC(v264))
  {
    LODWORD(v391) = v258;
    unint64_t v265 = v1;
    uint64_t v377 = v1 + 16;
    uint64_t v266 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v380 = sub_1BA1C(32LL);
    *(void *)&__int128 v423 = v380;
    uint64_t v378 = (os_log_s *)v266;
    *(_DWORD *)uint64_t v266 = 136315138;
    uint64_t v376 = (uint64_t)(v266 + 4);
    id v267 = v263;
    id v268 = [v267 description];
    uint64_t v259 = (os_log_s *)static String._unconditionallyBridgeFromObjectiveC(_:)(v268);
    id v254 = v269;

    uint64_t v270 = sub_683C((uint64_t)v259, (unint64_t)v254, (uint64_t *)&v423);
    os_log_type_t v271 = sub_435F8(v270, (void *)(v1 + 16));
    sub_43668((uint64_t)v271, v409, v272);
    swift_bridgeObjectRelease(v254);

    LOBYTE(v259) = (_BYTE)v266;
    sub_1E7D8(&dword_0, v260, (os_log_type_t)v391, "Current SK intent %s", v266);
    sub_1E7D0(v380);
    sub_1B904(v380);
    sub_1B904((uint64_t)v266);
  }

  else
  {

    unint64_t v265 = v1;
  }

  uint64_t v311 = (uint64_t *)(v265 + 72);
  id v312 = (os_log_s *)ParameterResolutionRecord.intent.getter(v7);
  uint64_t v313 = CreateTimerIntent.duration.getter();
  unint64_t v314 = v312;
  CreateTimerIntent.duration.setter(v313, v315);
  id v316 = v262;
  sub_43544();
  os_log_type_t v317 = sub_1BCD0();
  v411 = v316;
  if (sub_1BB80(v317))
  {
    uint64_t v318 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v391 = v312;
    uint64_t v319 = sub_1BA1C(32LL);
    *(void *)&__int128 v423 = v319;
    *(_DWORD *)uint64_t v318 = 136315138;
    uint64_t v380 = (uint64_t)(v318 + 4);
    id v254 = v316;
    id v320 = [v254 description];
    uint64_t v321 = v311;
    uint64_t v322 = static String._unconditionallyBridgeFromObjectiveC(_:)(v320);
    unint64_t v324 = v323;

    uint64_t v325 = v322;
    uint64_t v311 = v321;
    uint64_t v326 = (SEL *)&unk_FA000;
    *uint64_t v311 = sub_683C(v325, v324, (uint64_t *)&v423);
    sub_43668((uint64_t)v311, v403, (uint64_t)(v318 + 4));
    swift_bridgeObjectRelease(v324);

    sub_1E7D8(&dword_0, v314, (os_log_type_t)v259, "UsoGraph createTimerIntent:%s", v318);
    sub_1E7D0(v319);
    uint64_t v327 = v319;
    id v312 = v391;
    sub_1B904(v327);
    sub_1B904((uint64_t)v318);
  }

  else
  {

    uint64_t v326 = (SEL *)&unk_FA000;
  }

  uint64_t v328 = v312;
  sub_43544();
  os_log_type_t v329 = sub_1BCD0();
  if (sub_1BB80(v329))
  {
    uint64_t v330 = (uint8_t *)sub_1BA1C(12LL);
    v412 = (void *)sub_1BA1C(32LL);
    *(void *)&__int128 v423 = v412;
    *(_DWORD *)uint64_t v330 = 136315138;
    uint64_t v403 = (uint64_t)(v330 + 4);
    uint64_t v331 = v328;
    uint64_t v332 = sub_436EC((uint64_t)[v331 v326[124]]);
    unint64_t v333 = v311;
    uint64_t v334 = v332;
    unint64_t v336 = v335;

    uint64_t v337 = sub_683C(v334, v336, (uint64_t *)&v423);
    uint64_t v338 = sub_435F8(v337, v384);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v338, v333, v330 + 4, v330 + 12);
    sub_1BC04();

    sub_1E7D8(&dword_0, v314, (os_log_type_t)v259, "Updated SK intent:%s", v330);
    sub_1E7D0((uint64_t)v412);
    sub_1B904((uint64_t)v412);
    sub_1B904((uint64_t)v330);
  }

  else
  {
  }

  uint64_t v339 = v418[33];
  uint64_t v340 = v418[31];
  uint64_t v341 = v418[29];
  uint64_t v342 = v418[28];
  __int128 v423 = 0u;
  __int128 v424 = 0u;
  uint64_t v343 = v328;
  uint64_t v344 = sub_43698();

  IntentPromptAnswer.init(answeredValue:updatedIntent:)(&v423, v344, v400);
  swift_release();

  sub_4356C( v345,  v346,  v347,  v348,  v349,  v350,  v351,  v352,  v376,  v377,  (uint64_t)v378,  v380,  (uint64_t)v384,  v389,  (uint64_t)v391,  v400,  v403,  v407,  (uint64_t)v411,  (uint64_t)v412,  (uint64_t)v418,  v422);
  swift_release();
  uint64_t v48 = v419;
  (*(void (**)(uint64_t, uint64_t))(v341 + 8))(v340, v342);
  sub_2B73C(*(uint64_t (**)(uint64_t, uint64_t))(v339 + 8));
LABEL_14:
  uint64_t v62 = v48[45];
  uint64_t v61 = v48[46];
  uint64_t v392 = v48[34];
  uint64_t v396 = v48[31];
  sub_434FC();
  uint64_t v63 = v48[14];
  uint64_t v64 = sub_67C4(&qword_FCC58);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v63, 0LL, 1LL, v64);
  sub_1BA8C();
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  sub_1BABC();
  sub_1BA38();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  swift_task_dealloc(v392);
  swift_task_dealloc(v396);
  swift_task_dealloc(v401);
  swift_task_dealloc(v406);
  swift_task_dealloc(v408);
  swift_task_dealloc(v413);
  swift_task_dealloc(v421);
  uint64_t v65 = (uint64_t (*)(void))v48[1];
  return v65();
}

id sub_3D2B4()
{
  uint64_t v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_67C4((uint64_t *)&unk_FCC20);
  sub_1BCE0();
  __chkstk_darwin(v4);
  sub_17DAC();
  if (qword_FB2F8 != -1) {
    swift_once(&qword_FB2F8, sub_96FBC);
  }
  uint64_t v5 = qword_101148;
  type metadata accessor for TimerNLv3Intent(0LL);
  sub_4345C((unint64_t *)&qword_FD600, v6, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
  sub_434B0(v5);
  uint64_t v7 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  uint64_t v8 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v3, 1LL, v7);
  if ((_DWORD)v8 == 1)
  {
    int v9 = &qword_FCC18;
    uint64_t v10 = (uint64_t)v3;
LABEL_8:
    sub_8CC4(v10, v9);
LABEL_9:
    [(id)objc_opt_self(SiriTimeTimerConstants) defaultDuration];
    double v15 = v14;
    goto LABEL_10;
  }

  TerminalElement.DateTimeValue.duration.getter(v8);
  sub_2B5A0(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL));
  uint64_t v11 = type metadata accessor for TerminalElement.Duration(0LL);
  uint64_t v12 = sub_43360(v0);
  if (v13)
  {
    int v9 = (uint64_t *)&unk_FCC20;
    uint64_t v10 = v0;
    goto LABEL_8;
  }

  *(double *)&uint64_t v23 = COERCE_DOUBLE(TerminalElement.Duration.duration.getter(v12));
  char v25 = v24;
  sub_433D8(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL));
  if ((v25 & 1) != 0) {
    goto LABEL_9;
  }
  double v15 = *(double *)&v23;
LABEL_10:
  if (qword_FB2E0 != -1) {
    swift_once(&qword_FB2E0, sub_96F34);
  }
  sub_434B0(qword_101130);
  uint64_t v16 = v27;
  if (v27)
  {
    uint64_t v17 = v26;
    sub_432E8();
    sub_5D868(v17, v16);
    uint64_t v19 = v18;
  }

  else
  {
    uint64_t v19 = 0LL;
  }

  if (qword_FB2F0 != -1) {
    swift_once(&qword_FB2F0, sub_96F94);
  }
  sub_434B0(qword_101140);
  if ((_BYTE)v26) {
    uint64_t v20 = 1LL;
  }
  else {
    uint64_t v20 = 2LL;
  }
  id v21 = [objc_allocWithZone((Class)sub_43644()) init];
  CreateTimerIntent.duration.setter([v21 setLabel:v19], v15);
  [v21 setType:v20];

  return v21;
}

uint64_t sub_3D56C(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = sub_1BD34();
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = sub_1B6C8(v3);
  uint64_t v4 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v1[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[7] = v5;
  v1[8] = sub_1B6C8(v5);
  uint64_t v6 = type metadata accessor for SiriTimeMeasurement(0LL);
  void v1[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[10] = v7;
  v1[11] = sub_1B6C8(v7);
  uint64_t v8 = type metadata accessor for NLContextUpdate(0LL);
  v1[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v1[13] = v9;
  v1[14] = sub_1B6C8(v9);
  uint64_t v10 = type metadata accessor for DialogPhase(0LL);
  v1[15] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v1[16] = v11;
  v1[17] = sub_1B6C8(v11);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_3D620(uint64_t a1)
{
  uint64_t v3 = v1[7];
  uint64_t v2 = v1[8];
  uint64_t v4 = v1[6];
  static DialogPhase.clarification.getter(a1);
  sub_A9334();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v2,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v4);
  if (qword_FB170 != -1) {
    swift_once(&qword_FB170, sub_3B6E8);
  }
  uint64_t v6 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v7 = v1[3];
  uint64_t v8 = sub_5474(v7, (uint64_t)qword_FCB00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  mach_absolute_time();
  uint64_t v9 = sub_2BFC4();
  SiriTimeMeasurement.init(_:log:startTime:)(v9, v10, v11);
  if (qword_FB188 != -1) {
    swift_once(&qword_FB188, sub_4375C);
  }
  uint64_t v12 = (void *)swift_task_alloc(dword_FC754);
  v1[18] = v12;
  *uint64_t v12 = v1;
  v12[1] = sub_3D74C;
  return sub_36230();
}

uint64_t sub_3D74C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 144LL);
  uint64_t v5 = *(void **)v2;
  v5[19] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_1B9B8();
    return swift_task_switch(v6, v7, v8);
  }

  else
  {
    v5[20] = a1;
    uint64_t v10 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v5[21] = v10;
    *uint64_t v10 = v5;
    v10[1] = sub_3D804;
    return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v5[2],  v5[17],  v5[14],  v5[11],  0LL);
  }

uint64_t sub_3D804()
{
  uint64_t v3 = *(void **)(*(void *)v1 + 160LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc(v2);

  sub_1B9B8();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_3D868()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8LL))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1BABC();
  sub_1BA24();
  sub_1BA38();
  sub_1B838();
  sub_1BA8C();
  return sub_206D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3D8E0()
{
  return sub_206D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3D938()
{
  return sub_206D8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_3D990(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_3D9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_FCB44);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_107E8;
  return sub_3B8F8(a1, a2, a3);
}

uint64_t sub_3DA10(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_FCB4C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_2FD40;
  return sub_3D56C(a1);
}

uint64_t sub_3DA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = _s18NeedsValueStrategyCMa();
  *uint64_t v8 = v4;
  v8[1] = sub_107E8;
  return NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t sub_3DADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = _s18NeedsValueStrategyCMa();
  *uint64_t v8 = v4;
  v8[1] = sub_107E8;
  return NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t sub_3DB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = _s18NeedsValueStrategyCMa();
  *uint64_t v12 = v6;
  v12[1] = sub_107E8;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, v13, a6);
}

uint64_t sub_3DBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v14 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)[1]);
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = _s18NeedsValueStrategyCMa();
  *double v14 = v7;
  v14[1] = sub_107E8;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, v15, a7);
}

void sub_3DC88(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_3DCB4(uint64_t a1)
{
  uint64_t v124 = a1;
  uint64_t v1 = type metadata accessor for DirectInvocationUtils.Timer.UserInfoKey(0LL);
  uint64_t v111 = *(void *)(v1 - 8);
  uint64_t v112 = v1;
  __chkstk_darwin(v1);
  unint64_t v110 = (char *)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = type metadata accessor for TimerNLv3Intent(0LL);
  __chkstk_darwin(v123);
  uint64_t v4 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v114 = *(void *)(v5 - 8);
  uint64_t v115 = v5;
  __chkstk_darwin(v5);
  uint64_t v113 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for USOParse(0LL);
  uint64_t v117 = *(void *)(v7 - 8);
  uint64_t v118 = v7;
  __chkstk_darwin(v7);
  uint64_t v116 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v120 = *(void *)(v13 - 8);
  uint64_t v121 = v13;
  __chkstk_darwin(v13);
  unint64_t v119 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Parse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for NLIntent(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t TimerIntent = type metadata accessor for CreateTimerIntent(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v124, v15);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (v23 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
LABEL_5:
    char v24 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v24(v22, v18, v19);
    v24(v4, v22, v19);
    if (qword_FB2D0 != -1) {
      swift_once(&qword_FB2D0, sub_96EE4);
    }
    uint64_t v25 = qword_101120;
    sub_43324((unint64_t *)&qword_FD600, 255LL, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
    IntentNodeTraversable.value<A>(forNode:)(v25, v123, v26);
    int v27 = v127;
    sub_1E6E4((uint64_t)v4);
    if (v27 == 9) {
      char v28 = 13;
    }
    else {
      char v28 = sub_96B90(v27);
    }
    goto LABEL_32;
  }

  if (v23 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
    goto LABEL_5;
  }

  if (v23 != enum case for Parse.directInvocation(_:))
  {
    if (v23 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v52 = *(void *)v18;
      swift_getObjectType(*(void *)v18);
      if (SIRINLUUserDialogAct.firstUsoTask.getter())
      {
        char v28 = sub_6AB8();
        uint64_t v53 = sub_7010(v28);
        uint64_t v55 = v54;
        if (v53 == 1886352499 && v54 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v54);
        }

        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v55);
          if ((v57 & 1) == 0)
          {
            swift_unknownObjectRelease(v52);
LABEL_45:
            swift_release();
            goto LABEL_32;
          }
        }

        char v93 = sub_73F8();
        swift_unknownObjectRelease(v52);
        swift_release();
        if ((v93 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v88 = type metadata accessor for Logger(0LL);
        uint64_t v89 = sub_5474(v88, (uint64_t)qword_FEC20);
        uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v92 = 0;
          _os_log_impl( &dword_0,  v90,  v91,  "No USO task found on input. Deferring to later checks for parse validity.",  v92,  2u);
          swift_slowDealloc(v92, -1LL, -1LL);
          swift_unknownObjectRelease(v52);
        }

        else
        {

          swift_unknownObjectRelease(v52);
        }
      }
    }

    else
    {
      if (v23 != enum case for Parse.uso(_:))
      {
        if (v23 == enum case for Parse.empty(_:))
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v83 = type metadata accessor for Logger(0LL);
          uint64_t v84 = sub_5474(v83, (uint64_t)qword_FEC20);
          uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
          os_log_type_t v86 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v85, v86))
          {
            uint64_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v87 = 0;
            _os_log_impl( &dword_0,  v85,  v86,  "Empty parse found while testing valid input. Disallowing empty input.",  v87,  2u);
            swift_slowDealloc(v87, -1LL, -1LL);
          }
        }

        else
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v94 = type metadata accessor for Logger(0LL);
          uint64_t v95 = sub_5474(v94, (uint64_t)qword_FEC20);
          os_log_type_t v96 = (os_log_s *)Logger.logObject.getter(v95);
          os_log_type_t v97 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v96, v97))
          {
            uint64_t v98 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v98 = 0;
            _os_log_impl( &dword_0,  v96,  v97,  "Unknown parse type found while testing input validity. Disallowing unknown input.",  v98,  2u);
            swift_slowDealloc(v98, -1LL, -1LL);
          }

          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        }

        return 0LL;
      }

      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v72 = v116;
      uint64_t v71 = v117;
      uint64_t v73 = v118;
      uint64_t v74 = (*(uint64_t (**)(char *, char *, uint64_t))(v117 + 32))(v116, v18, v118);
      os_log_type_t v75 = v113;
      USOParse.userParse.getter(v74);
      sub_38968();
      uint64_t v77 = v76;
      (*(void (**)(char *, uint64_t))(v114 + 8))(v75, v115);
      if (v77)
      {
        char v28 = sub_6AB8();
        uint64_t v78 = sub_7010(v28);
        uint64_t v80 = v79;
        if (v78 == 1886352499 && v79 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v79);
        }

        else
        {
          char v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v80);
          if ((v82 & 1) == 0)
          {
            (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
            goto LABEL_45;
          }
        }

        char v104 = sub_73F8();
        swift_release();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
        if ((v104 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v99 = type metadata accessor for Logger(0LL);
        uint64_t v100 = sub_5474(v99, (uint64_t)qword_FEC20);
        uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
        os_log_type_t v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v103 = 0;
          _os_log_impl( &dword_0,  v101,  v102,  "No USO task found on input. Deferring to later checks for parse validity.",  v103,  2u);
          swift_slowDealloc(v103, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
      }
    }

    return 1LL;
  }

  (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
  uint64_t v29 = v120;
  unint64_t v30 = v119;
  uint64_t v31 = v121;
  uint64_t v32 = (*(uint64_t (**)(void))(v120 + 32))();
  uint64_t v33 = Parse.DirectInvocation.identifier.getter(v32);
  uint64_t v35 = v34;
  uint64_t v36 = (*(uint64_t (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for DirectInvocationUtils.Timer.URI.stopTimer(_:),  v9);
  uint64_t v37 = DirectInvocationUtils.Timer.URI.rawValue.getter(v36);
  uint64_t v39 = v38;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v33 == v37 && v35 == v39)
  {
    swift_bridgeObjectRelease_n(v35, 2LL);
  }

  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v39, 0LL);
    swift_bridgeObjectRelease(v39);
    uint64_t v42 = swift_bridgeObjectRelease(v35);
    if ((v41 & 1) == 0)
    {
      uint64_t v43 = Parse.DirectInvocation.userData.getter(v42);
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v46 = v110;
        uint64_t v45 = v111;
        uint64_t v47 = v112;
        uint64_t v48 = (*(uint64_t (**)(char *, void, uint64_t))(v111 + 104))( v110,  enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:),  v112);
        uint64_t v49 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v48);
        uint64_t v51 = v50;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
        sub_1C318(v49, v51, v44, &v127);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v44);
        if (v128)
        {
          char v28 = sub_7E238(v125, v126);
          if (v28 == 19) {
            goto LABEL_74;
          }
          goto LABEL_31;
        }

        sub_8CC4((uint64_t)&v127, &qword_FCD20);
      }

LABEL_74:
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v105 = type metadata accessor for Logger(0LL);
      uint64_t v106 = sub_5474(v105, (uint64_t)qword_FEC20);
      char v107 = (os_log_s *)Logger.logObject.getter(v106);
      os_log_type_t v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v109 = 0;
        _os_log_impl( &dword_0,  v107,  v108,  "Unknown direct invocation payload (missing/unknown timer verb). Disallowing input.",  v109,  2u);
        swift_slowDealloc(v109, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      return 0LL;
    }
  }

  char v28 = 10;
LABEL_31:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
LABEL_32:
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  uint64_t v59 = sub_5474(v58, (uint64_t)qword_FEC20);
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc(22LL, -1LL);
    uint64_t v63 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v127 = v63;
    *(_DWORD *)uint64_t v62 = 136315394;
    uint64_t v125 = TimerIntent;
    sub_67C4(&qword_FCD18);
    uint64_t v64 = String.init<A>(describing:)();
    unint64_t v66 = v65;
    uint64_t v125 = sub_683C(v64, v65, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v66);
    *(_WORD *)(v62 + 12) = 2080;
    LOBYTE(v125) = v28;
    uint64_t v67 = String.init<A>(describing:)();
    unint64_t v69 = v68;
    uint64_t v125 = sub_683C(v67, v68, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 14, v62 + 22);
    swift_bridgeObjectRelease(v69);
    _os_log_impl( &dword_0,  v60,  v61,  "Testing currentIntentType %s against input verb %s",  (uint8_t *)v62,  0x16u);
    swift_arrayDestroy(v63, 2LL);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  return (0x621Au >> v28) & 1;
}

      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v105 = type metadata accessor for Logger(0LL);
      uint64_t v106 = sub_5474(v105, (uint64_t)qword_FEC20);
      char v107 = (os_log_s *)Logger.logObject.getter(v106);
      os_log_type_t v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v109 = 0;
        _os_log_impl( &dword_0,  v107,  v108,  "Unknown direct invocation payload (missing/unknown timer verb). Disallowing input.",  v109,  2u);
        swift_slowDealloc(v109, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      return 0LL;
    }
  }

  char v28 = 10;
LABEL_31:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
LABEL_32:
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  uint64_t v59 = sub_5474(v58, (uint64_t)qword_FEC20);
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc(22LL, -1LL);
    uint64_t v63 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v127 = v63;
    *(_DWORD *)uint64_t v62 = 136315394;
    uint64_t v125 = v122;
    sub_67C4(&qword_FCD30);
    uint64_t v64 = String.init<A>(describing:)();
    unint64_t v66 = v65;
    uint64_t v125 = sub_683C(v64, v65, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v66);
    *(_WORD *)(v62 + 12) = 2080;
    LOBYTE(v125) = v28;
    uint64_t v67 = String.init<A>(describing:)();
    unint64_t v69 = v68;
    uint64_t v125 = sub_683C(v67, v68, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 14, v62 + 22);
    swift_bridgeObjectRelease(v69);
    _os_log_impl( &dword_0,  v60,  v61,  "Testing currentIntentType %s against input verb %s",  (uint8_t *)v62,  0x16u);
    swift_arrayDestroy(v63, 2LL);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  return (0x6404u >> v28) & 1;
}

      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v105 = type metadata accessor for Logger(0LL);
      uint64_t v106 = sub_5474(v105, (uint64_t)qword_FEC20);
      char v107 = (os_log_s *)Logger.logObject.getter(v106);
      os_log_type_t v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v109 = 0;
        _os_log_impl( &dword_0,  v107,  v108,  "Unknown direct invocation payload (missing/unknown timer verb). Disallowing input.",  v109,  2u);
        swift_slowDealloc(v109, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      return 0LL;
    }
  }

  char v28 = 10;
LABEL_31:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
LABEL_32:
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  uint64_t v59 = sub_5474(v58, (uint64_t)qword_FEC20);
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc(22LL, -1LL);
    uint64_t v63 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v127 = v63;
    *(_DWORD *)uint64_t v62 = 136315394;
    uint64_t v125 = v122;
    sub_67C4(&qword_FCD48);
    uint64_t v64 = String.init<A>(describing:)();
    unint64_t v66 = v65;
    uint64_t v125 = sub_683C(v64, v65, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v66);
    *(_WORD *)(v62 + 12) = 2080;
    LOBYTE(v125) = v28;
    uint64_t v67 = String.init<A>(describing:)();
    unint64_t v69 = v68;
    uint64_t v125 = sub_683C(v67, v68, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 14, v62 + 22);
    swift_bridgeObjectRelease(v69);
    _os_log_impl( &dword_0,  v60,  v61,  "Testing currentIntentType %s against input verb %s",  (uint8_t *)v62,  0x16u);
    swift_arrayDestroy(v63, 2LL);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  return (0x6100u >> v28) & 1;
}

      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v105 = type metadata accessor for Logger(0LL);
      uint64_t v106 = sub_5474(v105, (uint64_t)qword_FEC20);
      char v107 = (os_log_s *)Logger.logObject.getter(v106);
      os_log_type_t v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v109 = 0;
        _os_log_impl( &dword_0,  v107,  v108,  "Unknown direct invocation payload (missing/unknown timer verb). Disallowing input.",  v109,  2u);
        swift_slowDealloc(v109, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      return 0LL;
    }
  }

  char v28 = 10;
LABEL_31:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
LABEL_32:
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  uint64_t v59 = sub_5474(v58, (uint64_t)qword_FEC20);
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc(22LL, -1LL);
    uint64_t v63 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v127 = v63;
    *(_DWORD *)uint64_t v62 = 136315394;
    uint64_t v125 = v122;
    sub_67C4(&qword_FCD40);
    uint64_t v64 = String.init<A>(describing:)();
    unint64_t v66 = v65;
    uint64_t v125 = sub_683C(v64, v65, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v66);
    *(_WORD *)(v62 + 12) = 2080;
    LOBYTE(v125) = v28;
    uint64_t v67 = String.init<A>(describing:)();
    unint64_t v69 = v68;
    uint64_t v125 = sub_683C(v67, v68, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 14, v62 + 22);
    swift_bridgeObjectRelease(v69);
    _os_log_impl( &dword_0,  v60,  v61,  "Testing currentIntentType %s against input verb %s",  (uint8_t *)v62,  0x16u);
    swift_arrayDestroy(v63, 2LL);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  return (0x66080u >> v28) & 1;
}

      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v105 = type metadata accessor for Logger(0LL);
      uint64_t v106 = sub_5474(v105, (uint64_t)qword_FEC20);
      char v107 = (os_log_s *)Logger.logObject.getter(v106);
      os_log_type_t v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v109 = 0;
        _os_log_impl( &dword_0,  v107,  v108,  "Unknown direct invocation payload (missing/unknown timer verb). Disallowing input.",  v109,  2u);
        swift_slowDealloc(v109, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      return 0LL;
    }
  }

  char v28 = 10;
LABEL_31:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
LABEL_32:
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  uint64_t v59 = sub_5474(v58, (uint64_t)qword_FEC20);
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc(22LL, -1LL);
    uint64_t v63 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v127 = v63;
    *(_DWORD *)uint64_t v62 = 136315394;
    uint64_t v125 = v122;
    sub_67C4(&qword_FCD28);
    uint64_t v64 = String.init<A>(describing:)();
    unint64_t v66 = v65;
    uint64_t v125 = sub_683C(v64, v65, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v66);
    *(_WORD *)(v62 + 12) = 2080;
    LOBYTE(v125) = v28;
    uint64_t v67 = String.init<A>(describing:)();
    unint64_t v69 = v68;
    uint64_t v125 = sub_683C(v67, v68, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 14, v62 + 22);
    swift_bridgeObjectRelease(v69);
    _os_log_impl( &dword_0,  v60,  v61,  "Testing currentIntentType %s against input verb %s",  (uint8_t *)v62,  0x16u);
    swift_arrayDestroy(v63, 2LL);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  return (0x6400u >> v28) & 1;
}

      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v105 = type metadata accessor for Logger(0LL);
      uint64_t v106 = sub_5474(v105, (uint64_t)qword_FEC20);
      char v107 = (os_log_s *)Logger.logObject.getter(v106);
      os_log_type_t v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v109 = 0;
        _os_log_impl( &dword_0,  v107,  v108,  "Unknown direct invocation payload (missing/unknown timer verb). Disallowing input.",  v109,  2u);
        swift_slowDealloc(v109, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      return 0LL;
    }
  }

  char v28 = 10;
LABEL_31:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
LABEL_32:
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  uint64_t v59 = sub_5474(v58, (uint64_t)qword_FEC20);
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc(22LL, -1LL);
    uint64_t v63 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v127 = v63;
    *(_DWORD *)uint64_t v62 = 136315394;
    uint64_t v125 = v122;
    sub_67C4(&qword_FCD38);
    uint64_t v64 = String.init<A>(describing:)();
    unint64_t v66 = v65;
    uint64_t v125 = sub_683C(v64, v65, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v66);
    *(_WORD *)(v62 + 12) = 2080;
    LOBYTE(v125) = v28;
    uint64_t v67 = String.init<A>(describing:)();
    unint64_t v69 = v68;
    uint64_t v125 = sub_683C(v67, v68, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 14, v62 + 22);
    swift_bridgeObjectRelease(v69);
    _os_log_impl( &dword_0,  v60,  v61,  "Testing currentIntentType %s against input verb %s",  (uint8_t *)v62,  0x16u);
    swift_arrayDestroy(v63, 2LL);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  return (0x7000u >> v28) & 1;
}

      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v105 = type metadata accessor for Logger(0LL);
      uint64_t v106 = sub_5474(v105, (uint64_t)qword_FEC20);
      char v107 = (os_log_s *)Logger.logObject.getter(v106);
      os_log_type_t v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v109 = 0;
        _os_log_impl( &dword_0,  v107,  v108,  "Unknown direct invocation payload (missing/unknown timer verb). Disallowing input.",  v109,  2u);
        swift_slowDealloc(v109, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      return 0LL;
    }
  }

  char v28 = 10;
LABEL_31:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
LABEL_32:
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  uint64_t v59 = sub_5474(v58, (uint64_t)qword_FEC20);
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc(22LL, -1LL);
    uint64_t v63 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v127 = v63;
    *(_DWORD *)uint64_t v62 = 136315394;
    uint64_t v125 = v122;
    sub_67C4((uint64_t *)&unk_FCD50);
    uint64_t v64 = String.init<A>(describing:)();
    unint64_t v66 = v65;
    uint64_t v125 = sub_683C(v64, v65, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v66);
    *(_WORD *)(v62 + 12) = 2080;
    LOBYTE(v125) = v28;
    uint64_t v67 = String.init<A>(describing:)();
    unint64_t v69 = v68;
    uint64_t v125 = sub_683C(v67, v68, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v62 + 14, v62 + 22);
    swift_bridgeObjectRelease(v69);
    _os_log_impl( &dword_0,  v60,  v61,  "Testing currentIntentType %s against input verb %s",  (uint8_t *)v62,  0x16u);
    swift_arrayDestroy(v63, 2LL);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  return (0x6020u >> v28) & 1;
}

    swift_once(&qword_FB3E8, sub_B5C9C);
    goto LABEL_52;
  }

  swift_bridgeObjectRelease(*(void *)(v1 + 680));
  if (qword_FB3E8 != -1) {
    swift_once(&qword_FB3E8, sub_B5C9C);
  }
  uint64_t v115 = (void *)swift_task_alloc(dword_FF144);
  *(void *)(v1 + 832) = v115;
  uint8_t *v115 = v1;
  v115[1] = sub_61758;
  sub_64214();
  return sub_7CDF8();
}

uint64_t sub_3E904(uint64_t a1)
{
  uint64_t v124 = a1;
  uint64_t v1 = type metadata accessor for DirectInvocationUtils.Timer.UserInfoKey(0LL);
  uint64_t v111 = *(void *)(v1 - 8);
  uint64_t v112 = v1;
  __chkstk_darwin(v1);
  unint64_t v110 = (char *)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = type metadata accessor for TimerNLv3Intent(0LL);
  __chkstk_darwin(v123);
  uint64_t v4 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v114 = *(void *)(v5 - 8);
  uint64_t v115 = v5;
  __chkstk_darwin(v5);
  uint64_t v113 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for USOParse(0LL);
  uint64_t v117 = *(void *)(v7 - 8);
  uint64_t v118 = v7;
  __chkstk_darwin(v7);
  uint64_t v116 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v120 = *(void *)(v13 - 8);
  uint64_t v121 = v13;
  __chkstk_darwin(v13);
  unint64_t v119 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Parse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for NLIntent(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for DeleteTimerIntent(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v124, v15);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (v23 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
LABEL_5:
    char v24 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v24(v22, v18, v19);
    v24(v4, v22, v19);
    if (qword_FB2D0 != -1) {
      swift_once(&qword_FB2D0, sub_96EE4);
    }
    uint64_t v25 = qword_101120;
    sub_43324((unint64_t *)&qword_FD600, 255LL, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
    IntentNodeTraversable.value<A>(forNode:)(v25, v123, v26);
    int v27 = v127;
    sub_1E6E4((uint64_t)v4);
    if (v27 == 9) {
      char v28 = 13;
    }
    else {
      char v28 = sub_96B90(v27);
    }
    goto LABEL_32;
  }

  if (v23 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
    goto LABEL_5;
  }

  if (v23 != enum case for Parse.directInvocation(_:))
  {
    if (v23 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v52 = *(void *)v18;
      swift_getObjectType(*(void *)v18);
      if (SIRINLUUserDialogAct.firstUsoTask.getter())
      {
        char v28 = sub_6AB8();
        uint64_t v53 = sub_7010(v28);
        uint64_t v55 = v54;
        if (v53 == 1886352499 && v54 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v54);
        }

        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v55);
          if ((v57 & 1) == 0)
          {
            swift_unknownObjectRelease(v52);
LABEL_45:
            swift_release();
            goto LABEL_32;
          }
        }

        char v93 = sub_73F8();
        swift_unknownObjectRelease(v52);
        swift_release();
        if ((v93 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v88 = type metadata accessor for Logger(0LL);
        uint64_t v89 = sub_5474(v88, (uint64_t)qword_FEC20);
        uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v92 = 0;
          _os_log_impl( &dword_0,  v90,  v91,  "No USO task found on input. Deferring to later checks for parse validity.",  v92,  2u);
          swift_slowDealloc(v92, -1LL, -1LL);
          swift_unknownObjectRelease(v52);
        }

        else
        {

          swift_unknownObjectRelease(v52);
        }
      }
    }

    else
    {
      if (v23 != enum case for Parse.uso(_:))
      {
        if (v23 == enum case for Parse.empty(_:))
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v83 = type metadata accessor for Logger(0LL);
          uint64_t v84 = sub_5474(v83, (uint64_t)qword_FEC20);
          uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
          os_log_type_t v86 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v85, v86))
          {
            uint64_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v87 = 0;
            _os_log_impl( &dword_0,  v85,  v86,  "Empty parse found while testing valid input. Disallowing empty input.",  v87,  2u);
            swift_slowDealloc(v87, -1LL, -1LL);
          }
        }

        else
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v94 = type metadata accessor for Logger(0LL);
          uint64_t v95 = sub_5474(v94, (uint64_t)qword_FEC20);
          os_log_type_t v96 = (os_log_s *)Logger.logObject.getter(v95);
          os_log_type_t v97 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v96, v97))
          {
            uint64_t v98 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v98 = 0;
            _os_log_impl( &dword_0,  v96,  v97,  "Unknown parse type found while testing input validity. Disallowing unknown input.",  v98,  2u);
            swift_slowDealloc(v98, -1LL, -1LL);
          }

          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        }

        return 0LL;
      }

      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v72 = v116;
      uint64_t v71 = v117;
      uint64_t v73 = v118;
      uint64_t v74 = (*(uint64_t (**)(char *, char *, uint64_t))(v117 + 32))(v116, v18, v118);
      os_log_type_t v75 = v113;
      USOParse.userParse.getter(v74);
      sub_38968();
      uint64_t v77 = v76;
      (*(void (**)(char *, uint64_t))(v114 + 8))(v75, v115);
      if (v77)
      {
        char v28 = sub_6AB8();
        uint64_t v78 = sub_7010(v28);
        uint64_t v80 = v79;
        if (v78 == 1886352499 && v79 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v79);
        }

        else
        {
          char v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v80);
          if ((v82 & 1) == 0)
          {
            (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
            goto LABEL_45;
          }
        }

        char v104 = sub_73F8();
        swift_release();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
        if ((v104 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v99 = type metadata accessor for Logger(0LL);
        uint64_t v100 = sub_5474(v99, (uint64_t)qword_FEC20);
        uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
        os_log_type_t v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v103 = 0;
          _os_log_impl( &dword_0,  v101,  v102,  "No USO task found on input. Deferring to later checks for parse validity.",  v103,  2u);
          swift_slowDealloc(v103, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
      }
    }

    return 1LL;
  }

  (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
  uint64_t v29 = v120;
  unint64_t v30 = v119;
  uint64_t v31 = v121;
  uint64_t v32 = (*(uint64_t (**)(void))(v120 + 32))();
  uint64_t v33 = Parse.DirectInvocation.identifier.getter(v32);
  uint64_t v35 = v34;
  uint64_t v36 = (*(uint64_t (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for DirectInvocationUtils.Timer.URI.stopTimer(_:),  v9);
  uint64_t v37 = DirectInvocationUtils.Timer.URI.rawValue.getter(v36);
  uint64_t v39 = v38;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v33 == v37 && v35 == v39)
  {
    swift_bridgeObjectRelease_n(v35, 2LL);
  }

  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v39, 0LL);
    swift_bridgeObjectRelease(v39);
    uint64_t v42 = swift_bridgeObjectRelease(v35);
    if ((v41 & 1) == 0)
    {
      uint64_t v43 = Parse.DirectInvocation.userData.getter(v42);
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v46 = v110;
        uint64_t v45 = v111;
        uint64_t v47 = v112;
        uint64_t v48 = (*(uint64_t (**)(char *, void, uint64_t))(v111 + 104))( v110,  enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:),  v112);
        uint64_t v49 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v48);
        uint64_t v51 = v50;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
        sub_1C318(v49, v51, v44, &v127);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v44);
        if (v128)
        {
          char v28 = sub_7E238(v125, v126);
          if (v28 == 19) {
            goto LABEL_74;
          }
          goto LABEL_31;
        }

        sub_8CC4((uint64_t)&v127, &qword_FCD20);
      }

uint64_t sub_3F554(uint64_t a1)
{
  uint64_t v124 = a1;
  uint64_t v1 = type metadata accessor for DirectInvocationUtils.Timer.UserInfoKey(0LL);
  uint64_t v111 = *(void *)(v1 - 8);
  uint64_t v112 = v1;
  __chkstk_darwin(v1);
  unint64_t v110 = (char *)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = type metadata accessor for TimerNLv3Intent(0LL);
  __chkstk_darwin(v123);
  uint64_t v4 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v114 = *(void *)(v5 - 8);
  uint64_t v115 = v5;
  __chkstk_darwin(v5);
  uint64_t v113 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for USOParse(0LL);
  uint64_t v117 = *(void *)(v7 - 8);
  uint64_t v118 = v7;
  __chkstk_darwin(v7);
  uint64_t v116 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v120 = *(void *)(v13 - 8);
  uint64_t v121 = v13;
  __chkstk_darwin(v13);
  unint64_t v119 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Parse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for NLIntent(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for ResumeTimerIntent(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v124, v15);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (v23 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
LABEL_5:
    char v24 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v24(v22, v18, v19);
    v24(v4, v22, v19);
    if (qword_FB2D0 != -1) {
      swift_once(&qword_FB2D0, sub_96EE4);
    }
    uint64_t v25 = qword_101120;
    sub_43324((unint64_t *)&qword_FD600, 255LL, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
    IntentNodeTraversable.value<A>(forNode:)(v25, v123, v26);
    int v27 = v127;
    sub_1E6E4((uint64_t)v4);
    if (v27 == 9) {
      char v28 = 13;
    }
    else {
      char v28 = sub_96B90(v27);
    }
    goto LABEL_32;
  }

  if (v23 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
    goto LABEL_5;
  }

  if (v23 != enum case for Parse.directInvocation(_:))
  {
    if (v23 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v52 = *(void *)v18;
      swift_getObjectType(*(void *)v18);
      if (SIRINLUUserDialogAct.firstUsoTask.getter())
      {
        char v28 = sub_6AB8();
        uint64_t v53 = sub_7010(v28);
        uint64_t v55 = v54;
        if (v53 == 1886352499 && v54 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v54);
        }

        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v55);
          if ((v57 & 1) == 0)
          {
            swift_unknownObjectRelease(v52);
LABEL_45:
            swift_release();
            goto LABEL_32;
          }
        }

        char v93 = sub_73F8();
        swift_unknownObjectRelease(v52);
        swift_release();
        if ((v93 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v88 = type metadata accessor for Logger(0LL);
        uint64_t v89 = sub_5474(v88, (uint64_t)qword_FEC20);
        uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v92 = 0;
          _os_log_impl( &dword_0,  v90,  v91,  "No USO task found on input. Deferring to later checks for parse validity.",  v92,  2u);
          swift_slowDealloc(v92, -1LL, -1LL);
          swift_unknownObjectRelease(v52);
        }

        else
        {

          swift_unknownObjectRelease(v52);
        }
      }
    }

    else
    {
      if (v23 != enum case for Parse.uso(_:))
      {
        if (v23 == enum case for Parse.empty(_:))
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v83 = type metadata accessor for Logger(0LL);
          uint64_t v84 = sub_5474(v83, (uint64_t)qword_FEC20);
          uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
          os_log_type_t v86 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v85, v86))
          {
            uint64_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v87 = 0;
            _os_log_impl( &dword_0,  v85,  v86,  "Empty parse found while testing valid input. Disallowing empty input.",  v87,  2u);
            swift_slowDealloc(v87, -1LL, -1LL);
          }
        }

        else
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v94 = type metadata accessor for Logger(0LL);
          uint64_t v95 = sub_5474(v94, (uint64_t)qword_FEC20);
          os_log_type_t v96 = (os_log_s *)Logger.logObject.getter(v95);
          os_log_type_t v97 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v96, v97))
          {
            uint64_t v98 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v98 = 0;
            _os_log_impl( &dword_0,  v96,  v97,  "Unknown parse type found while testing input validity. Disallowing unknown input.",  v98,  2u);
            swift_slowDealloc(v98, -1LL, -1LL);
          }

          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        }

        return 0LL;
      }

      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v72 = v116;
      uint64_t v71 = v117;
      uint64_t v73 = v118;
      uint64_t v74 = (*(uint64_t (**)(char *, char *, uint64_t))(v117 + 32))(v116, v18, v118);
      os_log_type_t v75 = v113;
      USOParse.userParse.getter(v74);
      sub_38968();
      uint64_t v77 = v76;
      (*(void (**)(char *, uint64_t))(v114 + 8))(v75, v115);
      if (v77)
      {
        char v28 = sub_6AB8();
        uint64_t v78 = sub_7010(v28);
        uint64_t v80 = v79;
        if (v78 == 1886352499 && v79 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v79);
        }

        else
        {
          char v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v80);
          if ((v82 & 1) == 0)
          {
            (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
            goto LABEL_45;
          }
        }

        char v104 = sub_73F8();
        swift_release();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
        if ((v104 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v99 = type metadata accessor for Logger(0LL);
        uint64_t v100 = sub_5474(v99, (uint64_t)qword_FEC20);
        uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
        os_log_type_t v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v103 = 0;
          _os_log_impl( &dword_0,  v101,  v102,  "No USO task found on input. Deferring to later checks for parse validity.",  v103,  2u);
          swift_slowDealloc(v103, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
      }
    }

    return 1LL;
  }

  (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
  uint64_t v29 = v120;
  unint64_t v30 = v119;
  uint64_t v31 = v121;
  uint64_t v32 = (*(uint64_t (**)(void))(v120 + 32))();
  uint64_t v33 = Parse.DirectInvocation.identifier.getter(v32);
  uint64_t v35 = v34;
  uint64_t v36 = (*(uint64_t (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for DirectInvocationUtils.Timer.URI.stopTimer(_:),  v9);
  uint64_t v37 = DirectInvocationUtils.Timer.URI.rawValue.getter(v36);
  uint64_t v39 = v38;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v33 == v37 && v35 == v39)
  {
    swift_bridgeObjectRelease_n(v35, 2LL);
  }

  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v39, 0LL);
    swift_bridgeObjectRelease(v39);
    uint64_t v42 = swift_bridgeObjectRelease(v35);
    if ((v41 & 1) == 0)
    {
      uint64_t v43 = Parse.DirectInvocation.userData.getter(v42);
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v46 = v110;
        uint64_t v45 = v111;
        uint64_t v47 = v112;
        uint64_t v48 = (*(uint64_t (**)(char *, void, uint64_t))(v111 + 104))( v110,  enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:),  v112);
        uint64_t v49 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v48);
        uint64_t v51 = v50;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
        sub_1C318(v49, v51, v44, &v127);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v44);
        if (v128)
        {
          char v28 = sub_7E238(v125, v126);
          if (v28 == 19) {
            goto LABEL_74;
          }
          goto LABEL_31;
        }

        sub_8CC4((uint64_t)&v127, &qword_FCD20);
      }

uint64_t sub_401A4(uint64_t a1)
{
  uint64_t v124 = a1;
  uint64_t v1 = type metadata accessor for DirectInvocationUtils.Timer.UserInfoKey(0LL);
  uint64_t v111 = *(void *)(v1 - 8);
  uint64_t v112 = v1;
  __chkstk_darwin(v1);
  unint64_t v110 = (char *)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = type metadata accessor for TimerNLv3Intent(0LL);
  __chkstk_darwin(v123);
  uint64_t v4 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v114 = *(void *)(v5 - 8);
  uint64_t v115 = v5;
  __chkstk_darwin(v5);
  uint64_t v113 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for USOParse(0LL);
  uint64_t v117 = *(void *)(v7 - 8);
  uint64_t v118 = v7;
  __chkstk_darwin(v7);
  uint64_t v116 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v120 = *(void *)(v13 - 8);
  uint64_t v121 = v13;
  __chkstk_darwin(v13);
  unint64_t v119 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Parse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for NLIntent(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for ResetTimerIntent(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v124, v15);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (v23 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
LABEL_5:
    char v24 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v24(v22, v18, v19);
    v24(v4, v22, v19);
    if (qword_FB2D0 != -1) {
      swift_once(&qword_FB2D0, sub_96EE4);
    }
    uint64_t v25 = qword_101120;
    sub_43324((unint64_t *)&qword_FD600, 255LL, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
    IntentNodeTraversable.value<A>(forNode:)(v25, v123, v26);
    int v27 = v127;
    sub_1E6E4((uint64_t)v4);
    if (v27 == 9) {
      char v28 = 13;
    }
    else {
      char v28 = sub_96B90(v27);
    }
    goto LABEL_32;
  }

  if (v23 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
    goto LABEL_5;
  }

  if (v23 != enum case for Parse.directInvocation(_:))
  {
    if (v23 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v52 = *(void *)v18;
      swift_getObjectType(*(void *)v18);
      if (SIRINLUUserDialogAct.firstUsoTask.getter())
      {
        char v28 = sub_6AB8();
        uint64_t v53 = sub_7010(v28);
        uint64_t v55 = v54;
        if (v53 == 1886352499 && v54 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v54);
        }

        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v55);
          if ((v57 & 1) == 0)
          {
            swift_unknownObjectRelease(v52);
LABEL_45:
            swift_release();
            goto LABEL_32;
          }
        }

        char v93 = sub_73F8();
        swift_unknownObjectRelease(v52);
        swift_release();
        if ((v93 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v88 = type metadata accessor for Logger(0LL);
        uint64_t v89 = sub_5474(v88, (uint64_t)qword_FEC20);
        uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v92 = 0;
          _os_log_impl( &dword_0,  v90,  v91,  "No USO task found on input. Deferring to later checks for parse validity.",  v92,  2u);
          swift_slowDealloc(v92, -1LL, -1LL);
          swift_unknownObjectRelease(v52);
        }

        else
        {

          swift_unknownObjectRelease(v52);
        }
      }
    }

    else
    {
      if (v23 != enum case for Parse.uso(_:))
      {
        if (v23 == enum case for Parse.empty(_:))
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v83 = type metadata accessor for Logger(0LL);
          uint64_t v84 = sub_5474(v83, (uint64_t)qword_FEC20);
          uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
          os_log_type_t v86 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v85, v86))
          {
            uint64_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v87 = 0;
            _os_log_impl( &dword_0,  v85,  v86,  "Empty parse found while testing valid input. Disallowing empty input.",  v87,  2u);
            swift_slowDealloc(v87, -1LL, -1LL);
          }
        }

        else
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v94 = type metadata accessor for Logger(0LL);
          uint64_t v95 = sub_5474(v94, (uint64_t)qword_FEC20);
          os_log_type_t v96 = (os_log_s *)Logger.logObject.getter(v95);
          os_log_type_t v97 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v96, v97))
          {
            uint64_t v98 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v98 = 0;
            _os_log_impl( &dword_0,  v96,  v97,  "Unknown parse type found while testing input validity. Disallowing unknown input.",  v98,  2u);
            swift_slowDealloc(v98, -1LL, -1LL);
          }

          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        }

        return 0LL;
      }

      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v72 = v116;
      uint64_t v71 = v117;
      uint64_t v73 = v118;
      uint64_t v74 = (*(uint64_t (**)(char *, char *, uint64_t))(v117 + 32))(v116, v18, v118);
      os_log_type_t v75 = v113;
      USOParse.userParse.getter(v74);
      sub_38968();
      uint64_t v77 = v76;
      (*(void (**)(char *, uint64_t))(v114 + 8))(v75, v115);
      if (v77)
      {
        char v28 = sub_6AB8();
        uint64_t v78 = sub_7010(v28);
        uint64_t v80 = v79;
        if (v78 == 1886352499 && v79 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v79);
        }

        else
        {
          char v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v80);
          if ((v82 & 1) == 0)
          {
            (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
            goto LABEL_45;
          }
        }

        char v104 = sub_73F8();
        swift_release();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
        if ((v104 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v99 = type metadata accessor for Logger(0LL);
        uint64_t v100 = sub_5474(v99, (uint64_t)qword_FEC20);
        uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
        os_log_type_t v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v103 = 0;
          _os_log_impl( &dword_0,  v101,  v102,  "No USO task found on input. Deferring to later checks for parse validity.",  v103,  2u);
          swift_slowDealloc(v103, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
      }
    }

    return 1LL;
  }

  (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
  uint64_t v29 = v120;
  unint64_t v30 = v119;
  uint64_t v31 = v121;
  uint64_t v32 = (*(uint64_t (**)(void))(v120 + 32))();
  uint64_t v33 = Parse.DirectInvocation.identifier.getter(v32);
  uint64_t v35 = v34;
  uint64_t v36 = (*(uint64_t (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for DirectInvocationUtils.Timer.URI.stopTimer(_:),  v9);
  uint64_t v37 = DirectInvocationUtils.Timer.URI.rawValue.getter(v36);
  uint64_t v39 = v38;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v33 == v37 && v35 == v39)
  {
    swift_bridgeObjectRelease_n(v35, 2LL);
  }

  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v39, 0LL);
    swift_bridgeObjectRelease(v39);
    uint64_t v42 = swift_bridgeObjectRelease(v35);
    if ((v41 & 1) == 0)
    {
      uint64_t v43 = Parse.DirectInvocation.userData.getter(v42);
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v46 = v110;
        uint64_t v45 = v111;
        uint64_t v47 = v112;
        uint64_t v48 = (*(uint64_t (**)(char *, void, uint64_t))(v111 + 104))( v110,  enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:),  v112);
        uint64_t v49 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v48);
        uint64_t v51 = v50;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
        sub_1C318(v49, v51, v44, &v127);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v44);
        if (v128)
        {
          char v28 = sub_7E238(v125, v126);
          if (v28 == 19) {
            goto LABEL_74;
          }
          goto LABEL_31;
        }

        sub_8CC4((uint64_t)&v127, &qword_FCD20);
      }

uint64_t sub_40DF8(uint64_t a1)
{
  uint64_t v124 = a1;
  uint64_t v1 = type metadata accessor for DirectInvocationUtils.Timer.UserInfoKey(0LL);
  uint64_t v111 = *(void *)(v1 - 8);
  uint64_t v112 = v1;
  __chkstk_darwin(v1);
  unint64_t v110 = (char *)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = type metadata accessor for TimerNLv3Intent(0LL);
  __chkstk_darwin(v123);
  uint64_t v4 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v114 = *(void *)(v5 - 8);
  uint64_t v115 = v5;
  __chkstk_darwin(v5);
  uint64_t v113 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for USOParse(0LL);
  uint64_t v117 = *(void *)(v7 - 8);
  uint64_t v118 = v7;
  __chkstk_darwin(v7);
  uint64_t v116 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v120 = *(void *)(v13 - 8);
  uint64_t v121 = v13;
  __chkstk_darwin(v13);
  unint64_t v119 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Parse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for NLIntent(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for DismissTimerIntent(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v124, v15);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (v23 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
LABEL_5:
    char v24 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v24(v22, v18, v19);
    v24(v4, v22, v19);
    if (qword_FB2D0 != -1) {
      swift_once(&qword_FB2D0, sub_96EE4);
    }
    uint64_t v25 = qword_101120;
    sub_43324((unint64_t *)&qword_FD600, 255LL, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
    IntentNodeTraversable.value<A>(forNode:)(v25, v123, v26);
    int v27 = v127;
    sub_1E6E4((uint64_t)v4);
    if (v27 == 9) {
      char v28 = 13;
    }
    else {
      char v28 = sub_96B90(v27);
    }
    goto LABEL_32;
  }

  if (v23 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
    goto LABEL_5;
  }

  if (v23 != enum case for Parse.directInvocation(_:))
  {
    if (v23 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v52 = *(void *)v18;
      swift_getObjectType(*(void *)v18);
      if (SIRINLUUserDialogAct.firstUsoTask.getter())
      {
        char v28 = sub_6AB8();
        uint64_t v53 = sub_7010(v28);
        uint64_t v55 = v54;
        if (v53 == 1886352499 && v54 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v54);
        }

        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v55);
          if ((v57 & 1) == 0)
          {
            swift_unknownObjectRelease(v52);
LABEL_45:
            swift_release();
            goto LABEL_32;
          }
        }

        char v93 = sub_73F8();
        swift_unknownObjectRelease(v52);
        swift_release();
        if ((v93 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v88 = type metadata accessor for Logger(0LL);
        uint64_t v89 = sub_5474(v88, (uint64_t)qword_FEC20);
        uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v92 = 0;
          _os_log_impl( &dword_0,  v90,  v91,  "No USO task found on input. Deferring to later checks for parse validity.",  v92,  2u);
          swift_slowDealloc(v92, -1LL, -1LL);
          swift_unknownObjectRelease(v52);
        }

        else
        {

          swift_unknownObjectRelease(v52);
        }
      }
    }

    else
    {
      if (v23 != enum case for Parse.uso(_:))
      {
        if (v23 == enum case for Parse.empty(_:))
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v83 = type metadata accessor for Logger(0LL);
          uint64_t v84 = sub_5474(v83, (uint64_t)qword_FEC20);
          uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
          os_log_type_t v86 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v85, v86))
          {
            uint64_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v87 = 0;
            _os_log_impl( &dword_0,  v85,  v86,  "Empty parse found while testing valid input. Disallowing empty input.",  v87,  2u);
            swift_slowDealloc(v87, -1LL, -1LL);
          }
        }

        else
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v94 = type metadata accessor for Logger(0LL);
          uint64_t v95 = sub_5474(v94, (uint64_t)qword_FEC20);
          os_log_type_t v96 = (os_log_s *)Logger.logObject.getter(v95);
          os_log_type_t v97 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v96, v97))
          {
            uint64_t v98 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v98 = 0;
            _os_log_impl( &dword_0,  v96,  v97,  "Unknown parse type found while testing input validity. Disallowing unknown input.",  v98,  2u);
            swift_slowDealloc(v98, -1LL, -1LL);
          }

          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        }

        return 0LL;
      }

      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v72 = v116;
      uint64_t v71 = v117;
      uint64_t v73 = v118;
      uint64_t v74 = (*(uint64_t (**)(char *, char *, uint64_t))(v117 + 32))(v116, v18, v118);
      os_log_type_t v75 = v113;
      USOParse.userParse.getter(v74);
      sub_38968();
      uint64_t v77 = v76;
      (*(void (**)(char *, uint64_t))(v114 + 8))(v75, v115);
      if (v77)
      {
        char v28 = sub_6AB8();
        uint64_t v78 = sub_7010(v28);
        uint64_t v80 = v79;
        if (v78 == 1886352499 && v79 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v79);
        }

        else
        {
          char v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v80);
          if ((v82 & 1) == 0)
          {
            (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
            goto LABEL_45;
          }
        }

        char v104 = sub_73F8();
        swift_release();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
        if ((v104 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v99 = type metadata accessor for Logger(0LL);
        uint64_t v100 = sub_5474(v99, (uint64_t)qword_FEC20);
        uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
        os_log_type_t v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v103 = 0;
          _os_log_impl( &dword_0,  v101,  v102,  "No USO task found on input. Deferring to later checks for parse validity.",  v103,  2u);
          swift_slowDealloc(v103, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
      }
    }

    return 1LL;
  }

  (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
  uint64_t v29 = v120;
  unint64_t v30 = v119;
  uint64_t v31 = v121;
  uint64_t v32 = (*(uint64_t (**)(void))(v120 + 32))();
  uint64_t v33 = Parse.DirectInvocation.identifier.getter(v32);
  uint64_t v35 = v34;
  uint64_t v36 = (*(uint64_t (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for DirectInvocationUtils.Timer.URI.stopTimer(_:),  v9);
  uint64_t v37 = DirectInvocationUtils.Timer.URI.rawValue.getter(v36);
  uint64_t v39 = v38;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v33 == v37 && v35 == v39)
  {
    swift_bridgeObjectRelease_n(v35, 2LL);
  }

  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v39, 0LL);
    swift_bridgeObjectRelease(v39);
    uint64_t v42 = swift_bridgeObjectRelease(v35);
    if ((v41 & 1) == 0)
    {
      uint64_t v43 = Parse.DirectInvocation.userData.getter(v42);
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v46 = v110;
        uint64_t v45 = v111;
        uint64_t v47 = v112;
        uint64_t v48 = (*(uint64_t (**)(char *, void, uint64_t))(v111 + 104))( v110,  enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:),  v112);
        uint64_t v49 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v48);
        uint64_t v51 = v50;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
        sub_1C318(v49, v51, v44, &v127);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v44);
        if (v128)
        {
          char v28 = sub_7E238(v125, v126);
          if (v28 == 19) {
            goto LABEL_74;
          }
          goto LABEL_31;
        }

        sub_8CC4((uint64_t)&v127, &qword_FCD20);
      }

uint64_t sub_41A48(uint64_t a1)
{
  uint64_t v124 = a1;
  uint64_t v1 = type metadata accessor for DirectInvocationUtils.Timer.UserInfoKey(0LL);
  uint64_t v111 = *(void *)(v1 - 8);
  uint64_t v112 = v1;
  __chkstk_darwin(v1);
  unint64_t v110 = (char *)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = type metadata accessor for TimerNLv3Intent(0LL);
  __chkstk_darwin(v123);
  uint64_t v4 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v114 = *(void *)(v5 - 8);
  uint64_t v115 = v5;
  __chkstk_darwin(v5);
  uint64_t v113 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for USOParse(0LL);
  uint64_t v117 = *(void *)(v7 - 8);
  uint64_t v118 = v7;
  __chkstk_darwin(v7);
  uint64_t v116 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v120 = *(void *)(v13 - 8);
  uint64_t v121 = v13;
  __chkstk_darwin(v13);
  unint64_t v119 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Parse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for NLIntent(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for SetTimerAttributeIntent(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v124, v15);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (v23 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
LABEL_5:
    char v24 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v24(v22, v18, v19);
    v24(v4, v22, v19);
    if (qword_FB2D0 != -1) {
      swift_once(&qword_FB2D0, sub_96EE4);
    }
    uint64_t v25 = qword_101120;
    sub_43324((unint64_t *)&qword_FD600, 255LL, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
    IntentNodeTraversable.value<A>(forNode:)(v25, v123, v26);
    int v27 = v127;
    sub_1E6E4((uint64_t)v4);
    if (v27 == 9) {
      char v28 = 13;
    }
    else {
      char v28 = sub_96B90(v27);
    }
    goto LABEL_32;
  }

  if (v23 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
    goto LABEL_5;
  }

  if (v23 != enum case for Parse.directInvocation(_:))
  {
    if (v23 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v52 = *(void *)v18;
      swift_getObjectType(*(void *)v18);
      if (SIRINLUUserDialogAct.firstUsoTask.getter())
      {
        char v28 = sub_6AB8();
        uint64_t v53 = sub_7010(v28);
        uint64_t v55 = v54;
        if (v53 == 1886352499 && v54 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v54);
        }

        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v55);
          if ((v57 & 1) == 0)
          {
            swift_unknownObjectRelease(v52);
LABEL_45:
            swift_release();
            goto LABEL_32;
          }
        }

        char v93 = sub_73F8();
        swift_unknownObjectRelease(v52);
        swift_release();
        if ((v93 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v88 = type metadata accessor for Logger(0LL);
        uint64_t v89 = sub_5474(v88, (uint64_t)qword_FEC20);
        uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v92 = 0;
          _os_log_impl( &dword_0,  v90,  v91,  "No USO task found on input. Deferring to later checks for parse validity.",  v92,  2u);
          swift_slowDealloc(v92, -1LL, -1LL);
          swift_unknownObjectRelease(v52);
        }

        else
        {

          swift_unknownObjectRelease(v52);
        }
      }
    }

    else
    {
      if (v23 != enum case for Parse.uso(_:))
      {
        if (v23 == enum case for Parse.empty(_:))
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v83 = type metadata accessor for Logger(0LL);
          uint64_t v84 = sub_5474(v83, (uint64_t)qword_FEC20);
          uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
          os_log_type_t v86 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v85, v86))
          {
            uint64_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v87 = 0;
            _os_log_impl( &dword_0,  v85,  v86,  "Empty parse found while testing valid input. Disallowing empty input.",  v87,  2u);
            swift_slowDealloc(v87, -1LL, -1LL);
          }
        }

        else
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v94 = type metadata accessor for Logger(0LL);
          uint64_t v95 = sub_5474(v94, (uint64_t)qword_FEC20);
          os_log_type_t v96 = (os_log_s *)Logger.logObject.getter(v95);
          os_log_type_t v97 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v96, v97))
          {
            uint64_t v98 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v98 = 0;
            _os_log_impl( &dword_0,  v96,  v97,  "Unknown parse type found while testing input validity. Disallowing unknown input.",  v98,  2u);
            swift_slowDealloc(v98, -1LL, -1LL);
          }

          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        }

        return 0LL;
      }

      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v72 = v116;
      uint64_t v71 = v117;
      uint64_t v73 = v118;
      uint64_t v74 = (*(uint64_t (**)(char *, char *, uint64_t))(v117 + 32))(v116, v18, v118);
      os_log_type_t v75 = v113;
      USOParse.userParse.getter(v74);
      sub_38968();
      uint64_t v77 = v76;
      (*(void (**)(char *, uint64_t))(v114 + 8))(v75, v115);
      if (v77)
      {
        char v28 = sub_6AB8();
        uint64_t v78 = sub_7010(v28);
        uint64_t v80 = v79;
        if (v78 == 1886352499 && v79 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v79);
        }

        else
        {
          char v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v80);
          if ((v82 & 1) == 0)
          {
            (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
            goto LABEL_45;
          }
        }

        char v104 = sub_73F8();
        swift_release();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
        if ((v104 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v99 = type metadata accessor for Logger(0LL);
        uint64_t v100 = sub_5474(v99, (uint64_t)qword_FEC20);
        uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
        os_log_type_t v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v103 = 0;
          _os_log_impl( &dword_0,  v101,  v102,  "No USO task found on input. Deferring to later checks for parse validity.",  v103,  2u);
          swift_slowDealloc(v103, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
      }
    }

    return 1LL;
  }

  (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
  uint64_t v29 = v120;
  unint64_t v30 = v119;
  uint64_t v31 = v121;
  uint64_t v32 = (*(uint64_t (**)(void))(v120 + 32))();
  uint64_t v33 = Parse.DirectInvocation.identifier.getter(v32);
  uint64_t v35 = v34;
  uint64_t v36 = (*(uint64_t (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for DirectInvocationUtils.Timer.URI.stopTimer(_:),  v9);
  uint64_t v37 = DirectInvocationUtils.Timer.URI.rawValue.getter(v36);
  uint64_t v39 = v38;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v33 == v37 && v35 == v39)
  {
    swift_bridgeObjectRelease_n(v35, 2LL);
  }

  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v39, 0LL);
    swift_bridgeObjectRelease(v39);
    uint64_t v42 = swift_bridgeObjectRelease(v35);
    if ((v41 & 1) == 0)
    {
      uint64_t v43 = Parse.DirectInvocation.userData.getter(v42);
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v46 = v110;
        uint64_t v45 = v111;
        uint64_t v47 = v112;
        uint64_t v48 = (*(uint64_t (**)(char *, void, uint64_t))(v111 + 104))( v110,  enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:),  v112);
        uint64_t v49 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v48);
        uint64_t v51 = v50;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
        sub_1C318(v49, v51, v44, &v127);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v44);
        if (v128)
        {
          char v28 = sub_7E238(v125, v126);
          if (v28 == 19) {
            goto LABEL_74;
          }
          goto LABEL_31;
        }

        sub_8CC4((uint64_t)&v127, &qword_FCD20);
      }

uint64_t sub_42698(uint64_t a1)
{
  uint64_t v124 = a1;
  uint64_t v1 = type metadata accessor for DirectInvocationUtils.Timer.UserInfoKey(0LL);
  uint64_t v111 = *(void *)(v1 - 8);
  uint64_t v112 = v1;
  __chkstk_darwin(v1);
  unint64_t v110 = (char *)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = type metadata accessor for TimerNLv3Intent(0LL);
  __chkstk_darwin(v123);
  uint64_t v4 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v114 = *(void *)(v5 - 8);
  uint64_t v115 = v5;
  __chkstk_darwin(v5);
  uint64_t v113 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for USOParse(0LL);
  uint64_t v117 = *(void *)(v7 - 8);
  uint64_t v118 = v7;
  __chkstk_darwin(v7);
  uint64_t v116 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v120 = *(void *)(v13 - 8);
  uint64_t v121 = v13;
  __chkstk_darwin(v13);
  unint64_t v119 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Parse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for NLIntent(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for PauseTimerIntent(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v124, v15);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
  if (v23 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
LABEL_5:
    char v24 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v24(v22, v18, v19);
    v24(v4, v22, v19);
    if (qword_FB2D0 != -1) {
      swift_once(&qword_FB2D0, sub_96EE4);
    }
    uint64_t v25 = qword_101120;
    sub_43324((unint64_t *)&qword_FD600, 255LL, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
    IntentNodeTraversable.value<A>(forNode:)(v25, v123, v26);
    int v27 = v127;
    sub_1E6E4((uint64_t)v4);
    if (v27 == 9) {
      char v28 = 13;
    }
    else {
      char v28 = sub_96B90(v27);
    }
    goto LABEL_32;
  }

  if (v23 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
    sub_67C4((uint64_t *)&unk_FCC60);
    swift_release();
    goto LABEL_5;
  }

  if (v23 != enum case for Parse.directInvocation(_:))
  {
    if (v23 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v52 = *(void *)v18;
      swift_getObjectType(*(void *)v18);
      if (SIRINLUUserDialogAct.firstUsoTask.getter())
      {
        char v28 = sub_6AB8();
        uint64_t v53 = sub_7010(v28);
        uint64_t v55 = v54;
        if (v53 == 1886352499 && v54 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v54);
        }

        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v55);
          if ((v57 & 1) == 0)
          {
            swift_unknownObjectRelease(v52);
LABEL_45:
            swift_release();
            goto LABEL_32;
          }
        }

        char v93 = sub_73F8();
        swift_unknownObjectRelease(v52);
        swift_release();
        if ((v93 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v88 = type metadata accessor for Logger(0LL);
        uint64_t v89 = sub_5474(v88, (uint64_t)qword_FEC20);
        uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v92 = 0;
          _os_log_impl( &dword_0,  v90,  v91,  "No USO task found on input. Deferring to later checks for parse validity.",  v92,  2u);
          swift_slowDealloc(v92, -1LL, -1LL);
          swift_unknownObjectRelease(v52);
        }

        else
        {

          swift_unknownObjectRelease(v52);
        }
      }
    }

    else
    {
      if (v23 != enum case for Parse.uso(_:))
      {
        if (v23 == enum case for Parse.empty(_:))
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v83 = type metadata accessor for Logger(0LL);
          uint64_t v84 = sub_5474(v83, (uint64_t)qword_FEC20);
          uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
          os_log_type_t v86 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v85, v86))
          {
            uint64_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v87 = 0;
            _os_log_impl( &dword_0,  v85,  v86,  "Empty parse found while testing valid input. Disallowing empty input.",  v87,  2u);
            swift_slowDealloc(v87, -1LL, -1LL);
          }
        }

        else
        {
          if (qword_FB258 != -1) {
            swift_once(&qword_FB258, sub_71E18);
          }
          uint64_t v94 = type metadata accessor for Logger(0LL);
          uint64_t v95 = sub_5474(v94, (uint64_t)qword_FEC20);
          os_log_type_t v96 = (os_log_s *)Logger.logObject.getter(v95);
          os_log_type_t v97 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v96, v97))
          {
            uint64_t v98 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v98 = 0;
            _os_log_impl( &dword_0,  v96,  v97,  "Unknown parse type found while testing input validity. Disallowing unknown input.",  v98,  2u);
            swift_slowDealloc(v98, -1LL, -1LL);
          }

          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        }

        return 0LL;
      }

      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v72 = v116;
      uint64_t v71 = v117;
      uint64_t v73 = v118;
      uint64_t v74 = (*(uint64_t (**)(char *, char *, uint64_t))(v117 + 32))(v116, v18, v118);
      os_log_type_t v75 = v113;
      USOParse.userParse.getter(v74);
      sub_38968();
      uint64_t v77 = v76;
      (*(void (**)(char *, uint64_t))(v114 + 8))(v75, v115);
      if (v77)
      {
        char v28 = sub_6AB8();
        uint64_t v78 = sub_7010(v28);
        uint64_t v80 = v79;
        if (v78 == 1886352499 && v79 == 0xE400000000000000LL)
        {
          swift_bridgeObjectRelease(v79);
        }

        else
        {
          char v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, 1886352499LL, 0xE400000000000000LL, 0LL);
          swift_bridgeObjectRelease(v80);
          if ((v82 & 1) == 0)
          {
            (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
            goto LABEL_45;
          }
        }

        char v104 = sub_73F8();
        swift_release();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
        if ((v104 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v99 = type metadata accessor for Logger(0LL);
        uint64_t v100 = sub_5474(v99, (uint64_t)qword_FEC20);
        uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
        os_log_type_t v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v103 = 0;
          _os_log_impl( &dword_0,  v101,  v102,  "No USO task found on input. Deferring to later checks for parse validity.",  v103,  2u);
          swift_slowDealloc(v103, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
      }
    }

    return 1LL;
  }

  (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
  uint64_t v29 = v120;
  unint64_t v30 = v119;
  uint64_t v31 = v121;
  uint64_t v32 = (*(uint64_t (**)(void))(v120 + 32))();
  uint64_t v33 = Parse.DirectInvocation.identifier.getter(v32);
  uint64_t v35 = v34;
  uint64_t v36 = (*(uint64_t (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for DirectInvocationUtils.Timer.URI.stopTimer(_:),  v9);
  uint64_t v37 = DirectInvocationUtils.Timer.URI.rawValue.getter(v36);
  uint64_t v39 = v38;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v33 == v37 && v35 == v39)
  {
    swift_bridgeObjectRelease_n(v35, 2LL);
  }

  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v39, 0LL);
    swift_bridgeObjectRelease(v39);
    uint64_t v42 = swift_bridgeObjectRelease(v35);
    if ((v41 & 1) == 0)
    {
      uint64_t v43 = Parse.DirectInvocation.userData.getter(v42);
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v46 = v110;
        uint64_t v45 = v111;
        uint64_t v47 = v112;
        uint64_t v48 = (*(uint64_t (**)(char *, void, uint64_t))(v111 + 104))( v110,  enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:),  v112);
        uint64_t v49 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v48);
        uint64_t v51 = v50;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
        sub_1C318(v49, v51, v44, &v127);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v44);
        if (v128)
        {
          char v28 = sub_7E238(v125, v126);
          if (v28 == 19) {
            goto LABEL_74;
          }
          goto LABEL_31;
        }

        sub_8CC4((uint64_t)&v127, &qword_FCD20);
      }

unint64_t sub_432E8()
{
  unint64_t result = qword_FCC30;
  if (!qword_FCC30)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INSpeakableString);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_FCC30);
  }

  return result;
}

void sub_43324(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (!*a1)
  {
    uint64_t v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }

  sub_17DD4();
}

uint64_t sub_43360(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, 1LL, v1);
}

void sub_4337C( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>)
{
}

unint64_t sub_43384()
{
  return 0xD000000000000066LL;
}

void sub_433A0()
{
  *(void *)(v1 - 256) = v0;
}

  ;
}

void sub_433BC(uint64_t a1)
{
}

  ;
}

uint64_t sub_433D8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_433E0(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 0LL, 1LL, v1);
}

  ;
}

uint64_t sub_43410@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0LL;
}

void sub_43420(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_43428()
{
  return (*(uint64_t (**)(void, void))(v0[10] + 8LL))(v0[11], v0[9]);
}

uint64_t sub_43450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

void sub_4345C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
}

uint64_t sub_43464(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_4346C()
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v2 - 144) + 32LL))( *(void *)(v2 - 184),  v0,  v1);
}

uint64_t sub_43488()
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v2 - 144) + 32LL))( *(void *)(v2 - 184),  v0,  v1);
}

uint64_t sub_434A4()
{
  return v0(v2, v1);
}

uint64_t sub_434B0(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, v1, v2);
}

uint64_t sub_434C0()
{
  return (*(uint64_t (**)(void))(v0 - 424))(0LL);
}

BOOL sub_434D0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_434E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 136))(a1, a2, v2);
}

BOOL sub_434EC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_4351C(uint64_t a1, unint64_t a2)
{
  return sub_683C(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_43524()
{
  return static ActionForInput.ignore()();
}

uint64_t sub_4352C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v0);
}

uint64_t sub_43544()
{
  return Logger.logObject.getter();
}

uint64_t sub_4354C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x627265566F6ELL, 0xE600000000000000LL, 0LL);
}

uint64_t sub_43564@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  return a1(v1);
}

void sub_4356C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
}

uint64_t sub_43574( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  return sub_683C(a1, a2, (uint64_t *)va);
}

void sub_4357C(uint64_t a1)
{
}

uint64_t sub_43584()
{
  return Input.parse.getter();
}

void sub_4358C(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
}

BOOL sub_43598(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_435A0(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_435B8(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_435D0()
{
  return sub_683C(v1, v0, (uint64_t *)(v2 - 96));
}

uint64_t sub_435E0()
{
  return static ActionForInput.handle()();
}

uint64_t sub_435E8()
{
  return String.init<A>(describing:)(v0 - 104);
}

void *sub_435F8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return a2;
}

BOOL sub_43604(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_43614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

  ;
}

uint64_t sub_43628@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  return result;
}

uint64_t sub_43634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static BarbaraWalters.logAndReturnError<A>(context:_:)(a1, a2, a3, v3, v4);
}

uint64_t sub_43644()
{
  return type metadata accessor for CreateTimerIntent(0LL);
}

uint64_t sub_4364C(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, 1LL, v1);
}

uint64_t sub_43668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

BOOL sub_43670(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_43680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 104, a2, v4, a4);
}

uint64_t sub_4368C(uint64_t a1)
{
  return swift_dynamicCastClass(v1, a1);
}

uint64_t sub_43698()
{
  return INIntent.withEndpointId.getter();
}

  ;
}

uint64_t sub_436AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a12, v12);
}

uint64_t sub_436B8(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2LL);
}

void sub_436C0(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_436C8(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_436D0()
{
  return swift_unknownObjectRelease_n(v0, 2LL);
}

uint64_t sub_436DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_683C(a1, v3, a3);
}

void sub_436E4(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_436EC(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_436F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_43700()
{
  return swift_release_n(v0, 2LL);
}

void sub_4370C()
{
}

uint64_t sub_43718(uint64_t a1)
{
  return swift_allocObject(a1, 16LL, 7LL);
}

uint64_t sub_43724(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for CreateTimerCATsSimple,  (uint64_t (*)(char *, void))&CATWrapperSimple.__allocating_init(options:globals:),  &qword_100E90);
}

uint64_t sub_43740(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for CreateTimerCATs_Async,  (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:),  &qword_100E98);
}

uint64_t sub_4375C(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for CreateTimerCATPatternsExecutor,  (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:),  &qword_100EA0);
}

uint64_t sub_43778(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for ResetTimerCATsSimple,  (uint64_t (*)(char *, void))&CATWrapperSimple.__allocating_init(options:globals:),  &qword_100EA8);
}

uint64_t sub_43794(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for ResetTimerCATs_Async,  (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:),  &qword_100EB0);
}

uint64_t sub_437B0(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for ResetTimerCATPatternsExecutor,  (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:),  &qword_100EB8);
}

uint64_t sub_437CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

void sub_437D4(uint64_t a1)
{
  v4[0] = "(";
  sub_43D10(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 2LL, v4, a1 + 32);
  }

void *sub_43848(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for HALTimerDeviceContext(0LL);
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v10, 1LL, v11))
    {
      uint64_t v12 = sub_67C4(&qword_FBDB8);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v9, 0LL, 1LL, v11);
    }
  }

  return v4;
}

void *sub_43940(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(int *)(a3 + 36);
  __int128 v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HALTimerDeviceContext(0LL);
  int v10 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v7, 1LL, v9);
  int v11 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v8, 1LL, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_67C4(&qword_FBDB8);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v7, 0LL, 1LL, v9);
  return a1;
}

uint64_t sub_43A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = (void *)(a1 + v5);
  __int128 v7 = (const void *)(a2 + v5);
  uint64_t v8 = type metadata accessor for HALTimerDeviceContext(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v7, 1LL, v8))
  {
    uint64_t v9 = sub_67C4(&qword_FBDB8);
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v6, 0LL, 1LL, v8);
  }

  return a1;
}

uint64_t sub_43AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for HALTimerDeviceContext(0LL);
  int v11 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v8, 1LL, v10);
  int v12 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_67C4(&qword_FBDB8);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v8, 0LL, 1LL, v10);
  return a1;
}

uint64_t sub_43C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_43C10);
}

uint64_t sub_43C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_67C4(&qword_FBDB8);
    return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1 + *(int *)(a3 + 36), a2, v8);
  }

uint64_t sub_43C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_43C94);
}

uint64_t sub_43C94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_67C4(&qword_FBDB8);
    return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }

  return result;
}

uint64_t _s17FlowStrategyAsyncVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_44F6C(a1, a2, a3, a4, (uint64_t)&_s17FlowStrategyAsyncVMn);
}

void sub_43D10(uint64_t a1)
{
  if (!qword_FCE20[0])
  {
    uint64_t v2 = type metadata accessor for HALTimerDeviceContext(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, qword_FCE20);
    }
  }

uint64_t sub_43D64()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FCD88);
  sub_5474(v0, (uint64_t)qword_FCD88);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_43DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  uint64_t v4 = sub_67C4(&qword_FBDB8);
  v3[7] = sub_1B6C8(*(void *)(v4 - 8));
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_43DF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (qword_FB1A8 != -1) {
    swift_once(&qword_FB1A8, sub_43D64);
  }
  uint64_t v25 = (void *)v22[5];
  uint64_t v26 = sub_1BD34();
  int v27 = (os_log_s *)sub_5474(v26, (uint64_t)qword_FCD88);
  Logger.logObject.getter(v25);
  os_log_type_t v28 = sub_1BCD0();
  if (sub_1BB80(v28))
  {
    a9 = v22 + 2;
    a10 = v22 + 3;
    unint64_t v30 = (void *)v22[5];
    uint64_t v29 = v22[6];
    uint64_t v31 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v32 = sub_1BA1C(32LL);
    a11 = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    v22[2] = v30;
    uint64_t v33 = *(void *)(v29 + 16);
    id v34 = v30;
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v33);
    uint64_t v36 = String.init<A>(describing:)(v22 + 2, v33, WitnessTable);
    unint64_t v38 = v37;
    v22[3] = sub_683C(v36, v37, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 3, v22 + 4, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease(v38);

    _os_log_impl( &dword_0,  v27,  (os_log_type_t)v25,  "TimerIntents.FlowStrategy.makeIntentExecutionBehavior(app:intent:) called with intent %s",  v31,  0xCu);
    swift_arrayDestroy(v32, 1LL);
    sub_1B904(v32);
    sub_1B904((uint64_t)v31);
  }

  else
  {
    uint64_t v39 = (void *)v22[5];
  }

  uint64_t v40 = v22[7];
  uint64_t v41 = type metadata accessor for HALTimerDeviceContext(0LL);
  sub_44FF8(v40, v42, v43, v41);
  sub_6EB5C();
  sub_DABC(v40, &qword_FBDB8);
  sub_1BABC();
  sub_45014();
  return v45(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_43FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  void v4[3] = a1;
  uint64_t v5 = type metadata accessor for SiriTimeAppBundleId(0LL);
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  void v4[8] = sub_1B6C8(v6);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_44018( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (qword_FB1A8 != -1) {
    swift_once(&qword_FB1A8, sub_43D64);
  }
  uint64_t v25 = sub_1BD34();
  sub_5474(v25, (uint64_t)qword_FCD88);
  uint64_t v26 = (os_log_s *)sub_1BD20();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    os_log_type_t v28 = (_WORD *)sub_1BA1C(2LL);
    *os_log_type_t v28 = 0;
    sub_45030(&dword_0, v26, v29, "TimerIntents.FlowStrategy.makeIntentFromParse() called.");
    sub_1B904((uint64_t)v28);
  }

  sub_6F040();
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = swift_dynamicCastUnknownClass(v30, *(void *)(*(void *)(v22 + 32) + 16LL));
    if (v32)
    {
      uint64_t v33 = (void *)v32;
      id v34 = objc_allocWithZone(&OBJC_CLASS____INPBIntentMetadata);
      id v35 = v31;
      id v36 = [v34 init];
      [v33 _setMetadata:v36];

      id v37 = [v33 _metadata];
      if (v37)
      {
        unint64_t v38 = v37;
        uint64_t v40 = *(void *)(v22 + 56);
        uint64_t v39 = *(void *)(v22 + 64);
        uint64_t v41 = *(void *)(v22 + 48);
        uint64_t v42 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v40 + 104))( v39,  enum case for SiriTimeAppBundleId.timerExtension(_:),  v41);
        SiriTimeAppBundleId.rawValue.getter(v42);
        uint64_t v44 = v43;
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
        NSString v45 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v44);
        [v38 setSystemExtensionBundleId:v45];
      }

      id v46 = v35;
      uint64_t v47 = (void *)INIntent.withEndpointId.getter();

      INIntent.withIntentId.getter();
      sub_1BA14();
      sub_45014();
      return v49(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14);
    }
  }

  char v57 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v58 = static os_log_type_t.error.getter();
  BOOL v59 = os_log_type_enabled(v57, v58);
  uint64_t v60 = *(void *)(v22 + 32);
  if (v59)
  {
    os_log_type_t v61 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v62 = sub_1BA1C(32LL);
    *(_DWORD *)os_log_type_t v61 = 136315138;
    a9 = v61 + 4;
    a10 = v62;
    uint64_t v63 = *(void *)(v60 + 16);
    uint64_t v64 = _typeName(_:qualified:)(v63, 0LL);
    unint64_t v66 = v65;
    *(void *)(v22 + 16) = sub_683C(v64, v65, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 16, v22 + 24, v61 + 4, v61 + 12);
    swift_bridgeObjectRelease(v66);
    _os_log_impl(&dword_0, v57, v58, "Intent is nil or cannot cast converted intent to IntentType %s", v61, 0xCu);
    swift_arrayDestroy(v62, 1LL);
    sub_1B904(v62);
    sub_1B904((uint64_t)v61);
  }

  else
  {

    uint64_t v63 = *(void *)(v60 + 16);
  }

  uint64_t v68 = *(void *)(v22 + 32);
  *(_BYTE *)(v22 + 72) = 0;
  uint64_t v69 = type metadata accessor for TimerIntents.FlowError(0LL, v63, *(void *)(v68 + 24), v67);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_C4340, v69);
  sub_45004(v69);
  uint64_t v71 = static BarbaraWalters.logAndReturnError<A>(context:_:)( 0xD000000000000062LL,  0x80000000000C7D80LL,  v22 + 72,  v69,  WitnessTable);
  swift_willThrow(v71, v72, v73, v74, v75, v76, v77, v78);
  sub_1BABC();
  sub_45014();
  return v79(v79, v80, v81, v82, v83, v84, v85, v86, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_443B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  __int128 v5[2] = a1;
  uint64_t v6 = type metadata accessor for NLContextUpdate(0LL);
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = sub_1B6C8(v7);
  uint64_t v8 = type metadata accessor for DialogPhase(0LL);
  v5[8] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[9] = v9;
  v5[10] = sub_1B6C8(v9);
  uint64_t v10 = type metadata accessor for CATOption(0LL);
  v5[11] = sub_1B6C8(*(void *)(v10 - 8));
  uint64_t v11 = sub_1BD34();
  v5[12] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[13] = v12;
  v5[14] = sub_1B6C8(v12);
  uint64_t v13 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v5[15] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[16] = v14;
  v5[17] = sub_1B6C8(v14);
  uint64_t v15 = type metadata accessor for SiriTimeMeasurement(0LL);
  v5[18] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v5[19] = v16;
  v5[20] = sub_1B6C8(v16);
  uint64_t v17 = sub_67C4(&qword_FBFC8);
  v5[21] = sub_1B6C8(*(void *)(v17 - 8));
  uint64_t v18 = sub_67C4(&qword_FBFD0);
  v5[22] = sub_1B6C8(*(void *)(v18 - 8));
  uint64_t v19 = sub_67C4(&qword_FBFD8);
  v5[23] = sub_1B6C8(*(void *)(v19 - 8));
  uint64_t v20 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  v5[24] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v5[25] = v21;
  v5[26] = sub_1B6C8(v21);
  uint64_t v22 = type metadata accessor for ActivityType(0LL);
  v5[27] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v5[28] = v23;
  v5[29] = sub_1B6C8(v23);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_44500()
{
  if (qword_FB1A8 != -1) {
    swift_once(&qword_FB1A8, sub_43D64);
  }
  uint64_t v2 = sub_5474(*(void *)(v1 + 96), (uint64_t)qword_FCD88);
  sub_1BD20();
  os_log_type_t v3 = sub_1BCD0();
  if (os_log_type_enabled(v0, v3))
  {
    uint64_t v4 = (_WORD *)sub_1BA1C(2LL);
    _WORD *v4 = 0;
    sub_45030(&dword_0, v0, v5, "TimerIntents.FlowStrategy.makeFailureConfirmingIntentResponse() called");
    sub_1B904((uint64_t)v4);
  }

  uint64_t v6 = *(void *)(v1 + 24);

  uint64_t TimerIntentResponse = type metadata accessor for CreateTimerIntentResponse(0LL);
  if (swift_dynamicCastClass(v6, TimerIntentResponse))
  {
    if (dispatch thunk of CreateTimerIntentResponse.code.getter(*(id *)(v1 + 24)) == 101)
    {
      uint64_t v8 = *(void *)(v1 + 232);
      uint64_t v9 = *(void *)(v1 + 208);
      uint64_t v46 = *(void *)(v1 + 216);
      uint64_t v48 = *(void *)(v1 + 224);
      uint64_t v10 = *(void *)(v1 + 192);
      uint64_t v11 = *(void *)(v1 + 200);
      uint64_t v45 = v10;
      uint64_t v13 = *(void *)(v1 + 176);
      uint64_t v12 = *(void *)(v1 + 184);
      uint64_t v14 = *(void *)(v1 + 168);
      (*(void (**)(uint64_t, void))(v48 + 104))(v8, enum case for ActivityType.failed(_:));
      (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))( v9,  enum case for SiriTimeEventSender.TaskType.createTimerIntent(_:),  v10);
      uint64_t v15 = enum case for SiriKitReliabilityCodes.unsupportedParameter(_:);
      uint64_t v16 = type metadata accessor for SiriKitReliabilityCodes(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(v12, v15, v16);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v12, 0LL, 1LL, v16);
      uint64_t v17 = type metadata accessor for SiriTimeEventSender.Attribute(0LL);
      sub_44FF8(v13, v18, v19, v17);
      uint64_t v20 = enum case for SiriTimeEventSender.ReasonDescription.sleepUnavailable(_:);
      uint64_t v21 = type metadata accessor for SiriTimeEventSender.ReasonDescription(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104LL))(v14, v20, v21);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v14, 0LL, 1LL, v21);
      static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v8, v9, v12, v13, v14);
      sub_DABC(v14, &qword_FBFC8);
      sub_DABC(v13, &qword_FBFD0);
      sub_DABC(v12, &qword_FBFD8);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v45);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v8, v46);
    }

    uint64_t v22 = *(void *)(v1 + 136);
    uint64_t v23 = *(void *)(v1 + 112);
    uint64_t v24 = *(void *)(v1 + 96);
    uint64_t v25 = *(void *)(v1 + 104);
    uint64_t v26 = *(void *)(v1 + 88);
    (*(void (**)(uint64_t, void, void))(*(void *)(v1 + 128) + 104LL))( v22,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  *(void *)(v1 + 120));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v2, v24);
    uint64_t v27 = mach_absolute_time();
    SiriTimeMeasurement.init(_:log:startTime:)(v22, v23, v27);
    type metadata accessor for CreateTimerCATPatternsExecutor(0LL);
    static CATOption.defaultMode.getter();
    *(void *)(v1 + 240) = CATWrapper.__allocating_init(options:globals:)(v26, 0LL);
    os_log_type_t v28 = (void *)swift_task_alloc(dword_FC764);
    *(void *)(v1 + 248) = v28;
    *os_log_type_t v28 = v1;
    v28[1] = sub_44930;
    return sub_36528();
  }

  else
  {
    unint64_t v30 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (sub_1BB80(v31))
    {
      uint64_t v32 = (uint8_t *)sub_1BA1C(2LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl( &dword_0,  v30,  (os_log_type_t)v2,  "TimerIntents.FlowStrategy.makeFailureConfirmingIntentResponse was called with an unexpected response type",  v32,  2u);
      sub_1B904((uint64_t)v32);
    }

    uint64_t v33 = *(void *)(v1 + 32);

    *(_BYTE *)(v1 + 288) = 4;
    uint64_t v35 = type metadata accessor for TimerIntents.FlowError(0LL, *(void *)(v33 + 16), *(void *)(v33 + 24), v34);
    uint64_t WitnessTable = swift_getWitnessTable(&unk_C4340, v35);
    sub_45004(v35);
    uint64_t v37 = static BarbaraWalters.logAndReturnError<A>(context:_:)( 0xD000000000000078LL,  0x80000000000C7DF0LL,  v1 + 288,  v35,  WitnessTable);
    swift_willThrow(v37, v38, v39, v40, v41, v42, v43, v44);
    uint64_t v47 = *(void *)(v1 + 56);
    swift_task_dealloc(*(void *)(v1 + 232));
    sub_1B86C();
    sub_1BA24();
    sub_1BA14();
    sub_1BA38();
    sub_1B838();
    sub_1BA8C();
    sub_1BA60();
    sub_1BAD0();
    sub_1BABC();
    swift_task_dealloc(v47);
    return sub_20614(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_44930(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 248);
  *(void *)(v3 + 256) = a1;
  *(void *)(v3 + 264) = v1;
  swift_task_dealloc(v4);
  swift_release();
  sub_1B9B8();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_449A0(uint64_t a1)
{
  uint64_t v2 = static DialogPhase.completion.getter(a1);
  NLContextUpdate.init()(v2);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  v1[34] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_44A18;
  return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v1[2],  v1[10],  v1[7],  v1[20],  0LL);
}

uint64_t sub_44A18()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 272LL);
  *(void *)(*(void *)v1 + 28Hasher.init(_seed:)(v3, 0LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v2[32];
  uint64_t v6 = v2[9];
  uint64_t v5 = v2[10];
  uint64_t v8 = v2[7];
  uint64_t v7 = v2[8];
  uint64_t v11 = v2 + 5;
  uint64_t v9 = v2[5];
  uint64_t v10 = v11[1];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  sub_1B9B8();
  return swift_task_switch(v12, v13, v14);
}

uint64_t sub_44AC4()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v15 = *(void *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 80);
  uint64_t v17 = *(void *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_1BABC();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  sub_1B838();
  uint64_t v4 = sub_1BA60();
  sub_1B910(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return sub_20614(*(uint64_t (**)(void))(v0 + 8));
}

#error "44BC4: call analysis failed (funcsize=24)"
#error "44C24: call analysis failed (funcsize=24)"
uint64_t sub_44C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v9;
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to RCHFlowStrategyAsync.makeErrorResponse(error:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1B57C;
  return RCHFlowStrategyAsync.makeErrorResponse(error:)(a1, a2, a3, a4);
}

uint64_t sub_44CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1B57C;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)(a1, a2, a3, a4, a5);
}

uint64_t sub_44D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1B57C;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)(a1, a2, a3, a4, a5);
}

uint64_t sub_44DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1B57C;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)(a1, a2, a3, a4, a5);
}

uint64_t sub_44E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)[1]);
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_1B0B4;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_44ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_FCE74);
  *(void *)(v5 + 16) = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_1B57C;
  return sub_443B4(a1, v10, v11, a4, a5);
}

uint64_t sub_44F3C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_C3040, a1);
}

uint64_t sub_44F4C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_C3070, a1);
}

uint64_t sub_44F5C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_C30A8, a1);
}

uint64_t sub_44F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_44F98()
{
  return swift_task_dealloc(*(void *)(v0 + 232));
}

uint64_t sub_44FC0(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_44FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 1LL, 1LL, a4);
}

uint64_t sub_45004(uint64_t a1)
{
  return swift_allocError(a1, v1, 0LL, 0LL);
}

  ;
}

void sub_45030(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_45040()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_45050()
{
}

uint64_t sub_45060()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FCE80);
  sub_5474(v0, (uint64_t)qword_FCE80);
  return static SiriTimeLog.timerFlow.getter();
}

void sub_450A8(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v51 = a2;
  uint64_t v6 = sub_67C4(&qword_FCEA8);
  uint64_t v55 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_67C4(&qword_FCEB0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v53 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v13 = sub_67C4(&qword_FCEA0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v45 - v18;
  if (qword_FB1B0 != -1) {
    swift_once(&qword_FB1B0, sub_45060);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_5474(v20, (uint64_t)qword_FCE80);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v52 = a1;
  uint64_t v56 = v21;
  uint64_t v22 = ((uint64_t (*)(char *, char *, uint64_t))v21)(v19, a1, v13);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v46 = v8;
    uint64_t v25 = swift_slowAlloc(12LL, -1LL);
    uint64_t v48 = v12;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v49 = a4;
    uint64_t v28 = v27;
    uint64_t v58 = v27;
    uint64_t v47 = v6;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v45 = v26 + 4;
    v56(v17, v19, v13);
    uint64_t v29 = String.init<A>(describing:)();
    unint64_t v31 = v30;
    uint64_t v57 = sub_683C(v29, v30, &v58);
    uint64_t v6 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v45, v26 + 12);
    unint64_t v32 = v31;
    uint64_t v8 = v46;
    swift_bridgeObjectRelease(v32);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    _os_log_impl(&dword_0, v23, v24, "Initializing next flow: %s", v26, 0xCu);
    swift_arrayDestroy(v28, 1LL);
    uint64_t v33 = v28;
    a4 = v49;
    swift_slowDealloc(v33, -1LL, -1LL);
    uint64_t v34 = v26;
    uint64_t v12 = v48;
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }

  sub_54CC(v50, (uint64_t)v12);
  sub_8C84(v51, (uint64_t)&v12[*(int *)(v8 + 36)], &qword_FBDB8);
  v56(v17, v52, v13);
  uint64_t v35 = sub_67C4(&qword_FCEB8);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  uint64_t v36 = RCHChildFlowFactory.init(producers:)(v17);
  uint64_t v37 = v53;
  sub_8C84((uint64_t)v12, v53, &qword_FCEB0);
  sub_46184(&qword_FCEC0, &qword_FCEB0, (uint64_t)&unk_C30F8);
  uint64_t v39 = v38;
  swift_retain();
  uint64_t v40 = v54;
  RCHFlowFactory.init(strategy:childFlowFactory:)(v37, v36, v8, v39);
  uint64_t v41 = RCHFlowFactory.makeAppResolvingRCHFlow()(v6);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v6);
  uint64_t v58 = v41;
  uint64_t v42 = sub_67C4(&qword_FCEC8);
  sub_46184(&qword_FCED0, &qword_FCEC8, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v44 = Flow.eraseToAnyFlow()(v42, v43);
  swift_release();
  a4[3] = type metadata accessor for AnyFlow(0LL);
  a4[4] = (uint64_t)&protocol witness table for AnyFlow;
  swift_release();
  *a4 = v44;
  sub_8CC4((uint64_t)v12, &qword_FCEB0);
}

void sub_454F4(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v51 = a2;
  uint64_t v6 = sub_67C4(&qword_FCED8);
  uint64_t v55 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_67C4((uint64_t *)&unk_FD570);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v53 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v13 = sub_67C4((uint64_t *)&unk_FD560);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v45 - v18;
  if (qword_FB1B0 != -1) {
    swift_once(&qword_FB1B0, sub_45060);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_5474(v20, (uint64_t)qword_FCE80);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v52 = a1;
  uint64_t v56 = v21;
  uint64_t v22 = ((uint64_t (*)(char *, char *, uint64_t))v21)(v19, a1, v13);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v46 = v8;
    uint64_t v25 = swift_slowAlloc(12LL, -1LL);
    uint64_t v48 = v12;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v49 = a4;
    uint64_t v28 = v27;
    uint64_t v58 = v27;
    uint64_t v47 = v6;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v45 = v26 + 4;
    v56(v17, v19, v13);
    uint64_t v29 = String.init<A>(describing:)();
    unint64_t v31 = v30;
    uint64_t v57 = sub_683C(v29, v30, &v58);
    uint64_t v6 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v45, v26 + 12);
    unint64_t v32 = v31;
    uint64_t v8 = v46;
    swift_bridgeObjectRelease(v32);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    _os_log_impl(&dword_0, v23, v24, "Initializing next flow: %s", v26, 0xCu);
    swift_arrayDestroy(v28, 1LL);
    uint64_t v33 = v28;
    a4 = v49;
    swift_slowDealloc(v33, -1LL, -1LL);
    uint64_t v34 = v26;
    uint64_t v12 = v48;
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }

  sub_54CC(v50, (uint64_t)v12);
  sub_8C84(v51, (uint64_t)&v12[*(int *)(v8 + 36)], &qword_FBDB8);
  v56(v17, v52, v13);
  uint64_t v35 = sub_67C4(&qword_FCEE0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  uint64_t v36 = RCHChildFlowFactory.init(producers:)(v17);
  uint64_t v37 = v53;
  sub_8C84((uint64_t)v12, v53, (uint64_t *)&unk_FD570);
  sub_46184((unint64_t *)&unk_FD580, (uint64_t *)&unk_FD570, (uint64_t)&unk_C30F8);
  uint64_t v39 = v38;
  swift_retain();
  uint64_t v40 = v54;
  RCHFlowFactory.init(strategy:childFlowFactory:)(v37, v36, v8, v39);
  uint64_t v41 = RCHFlowFactory.makeAppResolvingRCHFlow()(v6);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v6);
  uint64_t v58 = v41;
  uint64_t v42 = sub_67C4(&qword_FCEE8);
  sub_46184(&qword_FD590, &qword_FCEE8, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v44 = Flow.eraseToAnyFlow()(v42, v43);
  swift_release();
  a4[3] = type metadata accessor for AnyFlow(0LL);
  a4[4] = (uint64_t)&protocol witness table for AnyFlow;
  swift_release();
  *a4 = v44;
  sub_8CC4((uint64_t)v12, (uint64_t *)&unk_FD570);
}

void sub_45940(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v51 = a2;
  uint64_t v6 = sub_67C4((uint64_t *)&unk_FD5B0);
  uint64_t v55 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_67C4(&qword_FCF00);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v53 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v13 = sub_67C4(&qword_FCD60);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v45 - v18;
  if (qword_FB1B0 != -1) {
    swift_once(&qword_FB1B0, sub_45060);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_5474(v20, (uint64_t)qword_FCE80);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v52 = a1;
  uint64_t v56 = v21;
  uint64_t v22 = ((uint64_t (*)(char *, char *, uint64_t))v21)(v19, a1, v13);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v46 = v8;
    uint64_t v25 = swift_slowAlloc(12LL, -1LL);
    uint64_t v48 = v12;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v49 = a4;
    uint64_t v28 = v27;
    uint64_t v58 = v27;
    uint64_t v47 = v6;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v45 = v26 + 4;
    v56(v17, v19, v13);
    uint64_t v29 = String.init<A>(describing:)();
    unint64_t v31 = v30;
    uint64_t v57 = sub_683C(v29, v30, &v58);
    uint64_t v6 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v45, v26 + 12);
    unint64_t v32 = v31;
    uint64_t v8 = v46;
    swift_bridgeObjectRelease(v32);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    _os_log_impl(&dword_0, v23, v24, "Initializing next flow: %s", v26, 0xCu);
    swift_arrayDestroy(v28, 1LL);
    uint64_t v33 = v28;
    a4 = v49;
    swift_slowDealloc(v33, -1LL, -1LL);
    uint64_t v34 = v26;
    uint64_t v12 = v48;
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }

  sub_54CC(v50, (uint64_t)v12);
  sub_8C84(v51, (uint64_t)&v12[*(int *)(v8 + 36)], &qword_FBDB8);
  v56(v17, v52, v13);
  uint64_t v35 = sub_67C4((uint64_t *)&unk_FD5C0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  uint64_t v36 = RCHChildFlowFactory.init(producers:)(v17);
  uint64_t v37 = v53;
  sub_8C84((uint64_t)v12, v53, &qword_FCF00);
  sub_46184(&qword_FCF08, &qword_FCF00, (uint64_t)&unk_C30F8);
  uint64_t v39 = v38;
  swift_retain();
  uint64_t v40 = v54;
  RCHFlowFactory.init(strategy:childFlowFactory:)(v37, v36, v8, v39);
  uint64_t v41 = RCHFlowFactory.makeAppResolvingRCHFlow()(v6);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v6);
  uint64_t v58 = v41;
  uint64_t v42 = sub_67C4((uint64_t *)&unk_FD5D0);
  sub_46184(&qword_FCF10, (uint64_t *)&unk_FD5D0, (uint64_t)&protocol conformance descriptor for AnyValueFlow<A>);
  uint64_t v44 = Flow.eraseToAnyFlow()(v42, v43);
  swift_release();
  a4[3] = type metadata accessor for AnyFlow(0LL);
  a4[4] = (uint64_t)&protocol witness table for AnyFlow;
  swift_release();
  *a4 = v44;
  sub_8CC4((uint64_t)v12, &qword_FCF00);
}

uint64_t sub_45D8C(uint64_t a1, uint64_t a2)
{
  v2[9] = a1;
  v2[10] = a2;
  uint64_t v3 = sub_67C4(&qword_FBDB8);
  v2[11] = sub_1B6C8(*(void *)(v3 - 8));
  uint64_t v4 = sub_67C4(&qword_FCD60);
  v2[12] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[13] = v5;
  v2[14] = sub_1B6C8(v5);
  uint64_t v6 = type metadata accessor for SiriTimeDeviceContextProvider(0LL);
  v2[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[16] = v7;
  v2[17] = sub_1B6C8(v7);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_45E0C()
{
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_8CFC(v1, v2);
  if ((dispatch thunk of DeviceState.isHomePod.getter(v2, v3) & 1) != 0)
  {
    if (qword_FB1B0 != -1) {
      swift_once(&qword_FB1B0, sub_45060);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_5474(v4, (uint64_t)qword_FCE80);
    *(void *)(v0 + 144) = v5;
    uint64_t v6 = (void *)v5;
    Logger.logObject.getter(v5);
    os_log_type_t v7 = sub_1BCD0();
    if (sub_1BB80(v7))
    {
      uint64_t v8 = (_WORD *)sub_1B9DC();
      *uint64_t v8 = 0;
      sub_1BAA8(&dword_0, v9, v10, "decideCreateSleepTimerFlow.execute()");
      sub_1B904((uint64_t)v8);
    }

    uint64_t v11 = static SharedContext.current.getter(v27);
    sub_46238((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, v27[0]);
    uint64_t v19 = (void *)swift_task_alloc(async function pointer to SiriTimeDeviceContextProvider.isNothingPlaying.getter[1]);
    *(void *)(v0 + 152) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_45FA4;
    return SiriTimeDeviceContextProvider.isNothingPlaying.getter();
  }

  else
  {
    uint64_t v22 = *(void *)(v0 + 104);
    uint64_t v21 = *(char **)(v0 + 112);
    uint64_t v23 = *(void *)(v0 + 96);
    sub_54CC(*(void *)(v0 + 80), v0 + 16);
    sub_8ED0((void *)(v0 + 16));
    uint64_t v24 = sub_46210();
    sub_461E4(v24);
    sub_46224(v21, v25);
    sub_46208(v26, &qword_FBDB8);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v21, v23);
    sub_461D4();
    sub_1BABC();
    sub_1B86C();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_45FA4(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  *(_BYTE *)(*(void *)v1 + 16Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  sub_45040();
  sub_1B9B8();
  return sub_20670();
}

uint64_t sub_46004(uint64_t a1)
{
  if (*(_BYTE *)(v1 + 160) == 1)
  {
    uint64_t v2 = *(uint64_t **)(v1 + 72);
    *(void *)(v1 + 56) = sub_21F78();
    *(void *)(v1 + 64) = v3;
    unint64_t v4 = sub_46148();
    uint64_t v5 = Flow.eraseToAnyFlow()(&type metadata for UnsupportedCreateSleepTimerFlow, v4);
    swift_release();
    swift_release();
    v2[3] = type metadata accessor for AnyFlow(0LL);
    v2[4] = (uint64_t)&protocol witness table for AnyFlow;
    *uint64_t v2 = v5;
  }

  else
  {
    uint64_t v6 = *(void **)(v1 + 144);
    Logger.logObject.getter(a1);
    os_log_type_t v7 = sub_1BCD0();
    if (sub_2B854(v7))
    {
      uint64_t v8 = (_WORD *)sub_1B9DC();
      *uint64_t v8 = 0;
      sub_461C0(&dword_0, v9, v10, "Device has media playing; allowing sleep timer creation");
      sub_1B904((uint64_t)v8);
    }

    uint64_t v12 = *(void *)(v1 + 104);
    uint64_t v11 = *(char **)(v1 + 112);
    uint64_t v13 = *(void *)(v1 + 96);
    sub_46230(*(void *)(v1 + 80));
    sub_8ED0((void *)(v1 + 16));
    uint64_t v14 = sub_46210();
    sub_461E4(v14);
    sub_46224(v11, v15);
    sub_46208(v16, &qword_FBDB8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v13);
  }

  sub_461D4();
  sub_1BABC();
  sub_1B86C();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_46148()
{
  unint64_t result = qword_FCEF8;
  if (!qword_FCEF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_C5F70, &type metadata for UnsupportedCreateSleepTimerFlow);
    atomic_store(result, (unint64_t *)&qword_FCEF8);
  }

  return result;
}

void sub_46184(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = sub_15D30(a2);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_17DD4();
}

void sub_461C0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_461D4()
{
  return swift_task_dealloc(*(void *)(v0 + 136));
}

uint64_t sub_461E4(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v1, 1LL, 1LL, a1);
}

void sub_46208(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_46210()
{
  return type metadata accessor for HALTimerDeviceContext(0LL);
}

uint64_t sub_46218(uint64_t a1)
{
  return v1(a1, v2, v3);
}

void sub_46224(char *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_46230(uint64_t a1)
{
  return sub_54CC(a1, v1);
}

uint64_t sub_46238( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return SiriTimeDeviceContextProvider.init(sharedContext:)(&a9);
}

uint64_t type metadata accessor for CreateTimerCATs_Async(uint64_t a1)
{
  uint64_t result = qword_FCF18;
  if (!qword_FCF18) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CreateTimerCATs_Async);
  }
  return result;
}

uint64_t sub_4627C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100EC0);
}

uint64_t sub_462B8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  uint64_t v4 = sub_67C4(&qword_FBD98);
  v3[5] = sub_37EE0(v4);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_462FC()
{
  uint64_t v2 = v1[5];
  uint64_t v3 = sub_67C4(&qword_FBE20);
  uint64_t v4 = (__n128 *)sub_2FB40(v3);
  v1[6] = (uint64_t)v4;
  os_log_type_t v5 = sub_46760(v4, (__n128)xmmword_C2640);
  v5[2].n128_u64[0] = v6 | 0x62614C7200000000LL;
  v5[2].n128_u64[1] = 0xEA00000000006C65LL;
  sub_46754((uint64_t)v5, v7, &qword_FBD98);
  uint64_t v8 = type metadata accessor for SpeakableString(0LL);
  sub_46720(v8);
  if (v9)
  {
    sub_DABC(v2, &qword_FBD98);
    *uint64_t v0 = 0u;
    v0[1] = 0u;
  }

  else
  {
    uint64_t v10 = sub_46748();
    sub_4670C((uint64_t)v10);
  }

  uint64_t v11 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v1[7] = (uint64_t)v11;
  *uint64_t v11 = v1;
  v11[1] = sub_463EC;
  return sub_466F8(v1[2], 0xD000000000000018LL, 0x80000000000C7F00LL, (uint64_t)v4, v13);
}

uint64_t sub_463EC()
{
  if (v1)
  {
    sub_1B9B8();
    return sub_1B934();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 48));
    sub_1BABC();
    return sub_33004(*(uint64_t (**)(void))(v2 + 8));
  }

uint64_t sub_46438(uint64_t a1)
{
  uint64_t v3 = (void *)sub_2FE64((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_466D0;
  return sub_2FE58(a1, 0xD000000000000018LL, 0x80000000000C6C90LL, (uint64_t)_swiftEmptyArrayStorage, v5);
}

uint64_t sub_464A8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  uint64_t v4 = sub_67C4(&qword_FBD98);
  v3[5] = sub_37EE0(v4);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_464EC()
{
  uint64_t v2 = v1[5];
  uint64_t v3 = sub_67C4(&qword_FBE20);
  uint64_t v4 = (__n128 *)sub_2FB40(v3);
  v1[6] = (uint64_t)v4;
  os_log_type_t v5 = sub_46760(v4, (__n128)xmmword_C2640);
  v5[2].n128_u64[0] = v6 | 0x7079547200000000LL;
  v5[2].n128_u64[1] = 0xE900000000000065LL;
  sub_46754((uint64_t)v5, v7, &qword_FBD98);
  uint64_t v8 = type metadata accessor for SpeakableString(0LL);
  sub_46720(v8);
  if (v9)
  {
    sub_DABC(v2, &qword_FBD98);
    *uint64_t v0 = 0u;
    v0[1] = 0u;
  }

  else
  {
    uint64_t v10 = sub_46748();
    sub_4670C((uint64_t)v10);
  }

  uint64_t v11 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v1[7] = (uint64_t)v11;
  *uint64_t v11 = v1;
  v11[1] = sub_465DC;
  return sub_466F8(v1[2], 0xD000000000000017LL, 0x80000000000C7EE0LL, (uint64_t)v4, v13);
}

uint64_t sub_465DC()
{
  if (v1)
  {
    sub_1B9B8();
    return sub_1B934();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 48));
    sub_1BABC();
    return sub_33004(*(uint64_t (**)(void))(v2 + 8));
  }

uint64_t sub_46628()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_46658(uint64_t a1)
{
  uint64_t v3 = (void *)sub_2FE64((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1E95C;
  return sub_2FE58(a1, 0xD000000000000027LL, 0x80000000000C7EB0LL, (uint64_t)_swiftEmptyArrayStorage, v5);
}

uint64_t sub_466C8()
{
  return type metadata accessor for CreateTimerCATs_Async(0LL);
}

uint64_t sub_466D8()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 56);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 64) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_466F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_4670C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(a1, v2, v1);
}

uint64_t sub_46720(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v1, 1LL, a1);
}

void *sub_46748()
{
  *(void *)(v2 + 72) = v1;
  return sub_DB90(v0);
}

uint64_t sub_46754(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_32FC0(v3, v4, a3);
}

__n128 *sub_46760(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

void *sub_46774(uint64_t a1)
{
  return sub_93058(a1);
}

uint64_t sub_46788(void *a1, uint64_t a2)
{
  *a1 = sub_46774(a2);
  return sub_46908(*(uint64_t (**)(void))(v2 + 8));
}

unint64_t sub_467E8()
{
  unint64_t result = qword_FCFA8;
  if (!qword_FCFA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_C65E4, &_s25NeedsConfirmationStrategyVN_3);
    atomic_store(result, (unint64_t *)&qword_FCFA8);
  }

  return result;
}

unint64_t sub_46824()
{
  unint64_t result = qword_FCFB0;
  if (!qword_FCFB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_C4658, &_s20HandleIntentStrategyVN_3);
    atomic_store(result, (unint64_t *)&qword_FCFB0);
  }

  return result;
}

uint64_t sub_46860(uint64_t a1)
{
  uint64_t v2 = sub_67C4(&qword_FCFB8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_468A0(void *a1)
{
  return a1;
}

void *sub_468D4(void *a1)
{
  return a1;
}

uint64_t sub_46908(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_46914(uint64_t a1, uint64_t a2)
{
  return sub_54CC(v2, a2);
}

uint64_t type metadata accessor for ResetTimerCATPatternsExecutor(uint64_t a1)
{
  return sub_DAF8(a1, (uint64_t *)&unk_FCFC8, (uint64_t)&nominal type descriptor for ResetTimerCATPatternsExecutor);
}

uint64_t sub_46930(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100ED0);
}

void sub_4696C()
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_67C4(&qword_FBE20);
  uint64_t v6 = sub_34D60(v5, 176LL);
  *(_OWORD *)(v6 + 16) = xmmword_C27D0;
  *(void *)(v6 + 32) = 7368801LL;
  *(void *)(v6 + 40) = 0xE300000000000000LL;
  uint64_t v7 = *v0;
  if (*v0)
  {
    uint64_t v8 = type metadata accessor for SirikitApp(0LL);
    uint64_t v9 = v7;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v8 = 0LL;
    *(void *)(v6 + 56) = 0LL;
    *(void *)(v6 + 64) = 0LL;
  }

  *(void *)(v6 + 48) = v9;
  *(void *)(v6 + 72) = v8;
  *(void *)(v6 + 80) = 0x6D69547465736572LL;
  *(void *)(v6 + 88) = 0xEB00000000737265LL;
  uint64_t v10 = v0[1];
  uint64_t v11 = sub_67C4(&qword_FBE28);
  *(void *)(v6 + 96) = v10;
  *(void *)(v6 + 120) = v11;
  *(void *)(v6 + 128) = 0x6174614477656976LL;
  *(void *)(v6 + 136) = 0xE800000000000000LL;
  uint64_t v12 = type metadata accessor for ResetTimerHandledOnWatchParameters(0LL);
  sub_8C84((uint64_t)v0 + *(int *)(v12 + 24), v4, &qword_FBD98);
  uint64_t v13 = sub_1BCD8();
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v4, 1LL, v13) == 1)
  {
    swift_retain();
    sub_2BC5C();
    sub_17A70(v4, &qword_FBD98);
    sub_4917C();
  }

  else
  {
    *(void *)(v6 + 168) = v13;
    uint64_t v14 = sub_49150();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v14, v4, v13);
    swift_retain();
    sub_2BC5C();
  }

  sub_37FA0();
}

void sub_46AF8()
{
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = sub_67C4(&qword_FBE20);
  uint64_t v8 = (__n128 *)sub_34D60(v7, 176LL);
  sub_49090(v8, (__n128)xmmword_C27D0);
  sub_491CC(v0);
  uint64_t v9 = sub_1BCD8();
  sub_490E4((uint64_t)v6);
  if (v10)
  {
    sub_17A70((uint64_t)v6, &qword_FBD98);
    sub_4917C();
  }

  else
  {
    v8[4].n128_u64[1] = v9;
    uint64_t v11 = sub_49150();
    sub_4913C((uint64_t)v11);
  }

  sub_49100();
  v8[5].n128_u64[0] = v12;
  v8[5].n128_u64[1] = v13;
  uint64_t v14 = type metadata accessor for ResetTimerPromptExistingTimerParameters(0LL);
  sub_8C84(v0 + *(int *)(v14 + 20), (uint64_t)v4, &qword_FBD98);
  sub_490E4((uint64_t)v4);
  if (v10)
  {
    sub_17A70((uint64_t)v4, &qword_FBD98);
    sub_4917C();
  }

  else
  {
    v8[7].n128_u64[1] = v9;
    uint64_t v15 = sub_49150();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v15, v4, v9);
  }

  strcpy((char *)&v8[8], "speakableTimer");
  v8[8].n128_u8[15] = -18;
  unint64_t v16 = *(void *)(v0 + *(int *)(v14 + 24));
  if (v16)
  {
    uint64_t v17 = type metadata accessor for TimerTimer(0LL);
  }

  else
  {
    uint64_t v17 = 0LL;
    v8[9].n128_u64[1] = 0LL;
    v8[10].n128_u64[0] = 0LL;
  }

  v8[9].n128_u64[0] = v16;
  v8[10].n128_u64[1] = v17;
  swift_retain();
  sub_37FA0();
}

void sub_46C94()
{
  uint64_t v1 = v0;
  sub_67C4(&qword_FBD98);
  sub_1BCE0();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v8 = sub_67C4(&qword_FBE20);
  uint64_t v9 = sub_34D60(v8, 128LL);
  sub_49090((__n128 *)v9, (__n128)xmmword_C27E0);
  sub_491CC(v1);
  uint64_t v10 = sub_1BCD8();
  sub_490E4((uint64_t)v7);
  if (v11)
  {
    sub_17A70((uint64_t)v7, &qword_FBD98);
    sub_4917C();
  }

  else
  {
    *(void *)(v9 + 72) = v10;
    unint64_t v12 = sub_49150();
    sub_4913C((uint64_t)v12);
  }

  sub_49100();
  *(void *)(v9 + 80) = v13;
  *(void *)(v9 + 88) = v14;
  uint64_t v15 = type metadata accessor for ResetTimerPromptResetAllParameters(0LL);
  sub_8C84(v1 + *(int *)(v15 + 20), (uint64_t)v5, &qword_FBD98);
  sub_490E4((uint64_t)v5);
  if (v11)
  {
    sub_17A70((uint64_t)v5, &qword_FBD98);
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
  }

  else
  {
    *(void *)(v9 + 120) = v10;
    unint64_t v16 = sub_DB90((void *)(v9 + 96));
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v16, v5, v10);
  }

  sub_37FA0();
}

uint64_t sub_46DE4()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1C020;
  return sub_38068(0xD000000000000015LL, 0x80000000000C7FE0LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_46E44()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_4908C;
  return sub_38068(0xD000000000000016LL, 0x80000000000C7FC0LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_46EA4(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2B82C((uint64_t)sub_46EB4);
}

uint64_t sub_46EB4()
{
  unint64_t v2 = v1[2];
  uint64_t v3 = sub_67C4(&qword_FBE20);
  uint64_t v4 = (__n128 *)sub_34D60(v3, 80LL);
  v1[4] = v4;
  sub_490BC(v4, (__n128)xmmword_C2640);
  v4[4].n128_u64[1] = sub_67C4(&qword_FBE28);
  v4[3].n128_u64[0] = v2;
  sub_49124();
  uint64_t v5 = (void *)swift_task_alloc(v0);
  v1[5] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_46F50;
  sub_3814C();
  unint64_t v6 = sub_3813C(23LL);
  return sub_38124(v6, v7, v8, v9);
}

uint64_t sub_46F50()
{
  if (v1)
  {
    sub_1B9B8();
    return sub_20670();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 32));
    return sub_2FB20(v0, *(uint64_t (**)(void))(v3 + 8));
  }

uint64_t sub_46F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = type metadata accessor for ResetTimerHandledOnWatchParameters(0LL);
  v4[6] = v5;
  v4[7] = sub_37EE0(v5);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_46FE0()
{
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = (void (*)(void *))v0[3];
  uint64_t v3 = v0[2];
  uint64_t v4 = (uint64_t)v1 + *(int *)(v0[6] + 24LL);
  uint64_t v5 = sub_1BCD8();
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v4, 1LL, 1LL, v5);
  *uint64_t v1 = 0LL;
  v1[1] = v3;
  swift_bridgeObjectRetain(v3);
  v2(v1);
  sub_4696C();
  v0[8] = v6;
  uint64_t v7 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_470A0;
  unint64_t v8 = sub_3813C(25LL);
  return v9(v8);
}

uint64_t sub_470A0()
{
  void *v4 = *v2;
  *(void *)(v3 + 80) = v1;
  swift_task_dealloc();
  sub_1BC04();
  if (!v1) {
    *(void *)(v3 + 88) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v5, v6, v7);
}

uint64_t sub_470FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v1 + 88));
}

uint64_t sub_47140(uint64_t a1)
{
  return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_47178(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2B82C((uint64_t)sub_47188);
}

uint64_t sub_47188()
{
  unint64_t v2 = v1[2];
  uint64_t v3 = sub_67C4(&qword_FBE20);
  uint64_t v4 = (__n128 *)sub_34D60(v3, 80LL);
  v1[4] = v4;
  sub_490BC(v4, (__n128)xmmword_C2640);
  v4[4].n128_u64[1] = sub_67C4(&qword_FBE28);
  v4[3].n128_u64[0] = v2;
  sub_49124();
  uint64_t v5 = (void *)swift_task_alloc(v0);
  v1[5] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_47224;
  sub_3814C();
  unint64_t v6 = sub_3813C(24LL);
  return sub_38124(v6, v7, v8, v9);
}

uint64_t sub_47224()
{
  if (v1)
  {
    sub_1B9B8();
    return sub_20670();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 32));
    return sub_2FB20(v0, *(uint64_t (**)(void))(v3 + 8));
  }

uint64_t sub_47270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  void v6[3] = a2;
  uint64_t v7 = sub_67C4(&qword_FBD98);
  v6[8] = sub_37EE0(v7);
  uint64_t v8 = type metadata accessor for ResetTimerPromptExistingTimerParameters(0LL);
  v6[9] = v8;
  v6[10] = sub_37EE0(v8);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_472CC()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  sub_1BCD8();
  sub_380E0(v1);
  uint64_t v7 = v1 + *(int *)(v2 + 20);
  sub_380E0(v7);
  uint64_t v8 = *(int *)(v2 + 24);
  *(void *)(v1 + sub_88074(v1, v8) = 0LL;
  swift_bridgeObjectRetain(v5);
  SpeakableString.init(serializedValue:)(v6, v5);
  uint64_t v9 = sub_49194();
  sub_1B4F4(v9, v7);
  sub_2BC5C();
  SpeakableString.init(serializedValue:)(v3, v4);
  uint64_t v10 = sub_49194();
  sub_1B4F4(v10, v1);
  sub_D378();
  uint64_t v12 = v11;
  swift_release();
  *(void *)(v1 + sub_88074(v1, v8) = v12;
  sub_46AF8();
  v0[11] = v13;
  uint64_t v14 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[12] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_473F4;
  sub_3814C();
  unint64_t v15 = sub_3813C(30LL);
  return v16(v15);
}

uint64_t sub_473F4()
{
  uint64_t v4 = v3[12];
  *uint64_t v5 = *v2;
  v3[13] = v1;
  swift_task_dealloc(v4);
  sub_1BC04();
  if (!v1) {
    v3[14] = v0;
  }
  sub_1B9B8();
  return sub_2F658(v6, v7, v8);
}

uint64_t sub_47450()
{
  sub_1BABC();
  swift_task_dealloc(v0);
  return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v1 + 112));
}

uint64_t sub_474BC()
{
  sub_1BABC();
  swift_task_dealloc(v0);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_47524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  __int128 v5[2] = a1;
  uint64_t v6 = type metadata accessor for ResetTimerPromptResetAllParameters(0LL);
  v5[7] = v6;
  v5[8] = sub_37EE0(v6);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_4756C()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  sub_1BCD8();
  sub_49158(v1);
  sub_49158(v1 + *(int *)(v2 + 20));
  sub_8AB38(v1, v6, v5, v4, v3);
  sub_46C94();
  v0[9] = v7;
  uint64_t v8 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_47630;
  unint64_t v9 = sub_3813C(25LL);
  return v10(v9);
}

uint64_t sub_47630()
{
  uint64_t v4 = v3[10];
  *uint64_t v5 = *v2;
  v3[11] = v1;
  swift_task_dealloc(v4);
  sub_1BC04();
  if (!v1) {
    v3[12] = v0;
  }
  sub_1B9B8();
  return sub_2F658(v6, v7, v8);
}

uint64_t sub_4768C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 48);
  sub_38060(a1, type metadata accessor for ResetTimerPromptResetAllParameters);
  sub_1BC04();
  swift_bridgeObjectRelease(v2);
  sub_1BABC();
  return sub_2FB20(*(void *)(v1 + 96), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_476E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 48);
  sub_38060(a1, type metadata accessor for ResetTimerPromptResetAllParameters);
  sub_1BC04();
  swift_bridgeObjectRelease(v2);
  sub_1BABC();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_4773C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_4778C(a1, a2, a3);
}

uint64_t sub_4778C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1C308();
  uint64_t v10 = v9 - v8;
  sub_67C4(&qword_FB530);
  sub_1BCE0();
  __chkstk_darwin(v11);
  sub_1C308();
  uint64_t v14 = v13 - v12;
  sub_8C84(a1, v13 - v12, &qword_FB530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapper.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_17A70(a1, &qword_FB530);
  return v15;
}

uint64_t sub_47888()
{
  return type metadata accessor for ResetTimerCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for ResetTimerHandledOnWatchParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FD098, (uint64_t)&nominal type descriptor for ResetTimerHandledOnWatchParameters);
}

uint64_t *sub_478A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain();
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[1];
    a1[1] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for SpeakableString(0LL);
    swift_retain();
    swift_bridgeObjectRetain(v6);
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v9, 1LL, v10))
    {
      uint64_t v11 = sub_67C4(&qword_FBD98);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v8, 0LL, 1LL, v10);
    }
  }

  return v5;
}

uint64_t sub_47998(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  uint64_t result = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

void *sub_47A0C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for SpeakableString(0LL);
  swift_retain();
  swift_bridgeObjectRetain(v4);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v7, 1LL, v8))
  {
    uint64_t v9 = sub_67C4(&qword_FBD98);
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v6, 0LL, 1LL, v8);
  }

  return a1;
}

void *sub_47AD0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  int v12 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v9, 1LL, v11);
  int v13 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v10, 1LL, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v9, v10, v11);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_67C4(&qword_FBD98);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v9, 0LL, 1LL, v11);
  return a1;
}

void *sub_47BFC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for SpeakableString(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v7, 1LL, v8))
  {
    uint64_t v9 = sub_67C4(&qword_FBD98);
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v6, 0LL, 1LL, v8);
  }

  return a1;
}

void *sub_47CA8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  int v11 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v8, 1LL, v10);
  int v12 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_67C4(&qword_FBD98);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v8, 0LL, 1LL, v10);
  return a1;
}

uint64_t sub_47DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_47DD0);
}

void sub_47DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_17B78();
  }

  else
  {
    uint64_t v6 = sub_67C4(&qword_FBD98);
    sub_17EA4(a1 + *(int *)(a3 + 24), a2, v6);
  }

uint64_t sub_47E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_47E44);
}

void sub_47E44()
{
  if (v3 == 0x7FFFFFFF)
  {
    *(void *)(v1 + 8) = (v0 - 1);
    sub_17B78();
  }

  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = sub_67C4(&qword_FBD98);
    sub_17EB0(v1 + *(int *)(v4 + 24), v0, v0, v5);
  }

void sub_47EA0(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_367C0(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

uint64_t type metadata accessor for ResetTimerPromptResetAllParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FD1D8, (uint64_t)&nominal type descriptor for ResetTimerPromptResetAllParameters);
}

uint64_t type metadata accessor for ResetTimerPromptExistingTimerParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FD140, (uint64_t)&nominal type descriptor for ResetTimerPromptExistingTimerParameters);
}

uint64_t *sub_47F48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_67C4(&qword_FBD98);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = *(int *)(a3 + 20);
    int v11 = (char *)a1 + v10;
    int v12 = (char *)a2 + v10;
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_67C4(&qword_FBD98);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }

    *(uint64_t *)((char *)a1 + *(int *)(a3 + _s20HandleIntentStrategyVwxx_0((void *)(v0 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }

  swift_retain();
  return a1;
}

uint64_t sub_48098(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  return swift_release();
}

char *sub_4812C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_67C4(&qword_FBD98);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_67C4(&qword_FBD98);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_retain();
  return a1;
}

char *sub_48254(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_67C4(&qword_FBD98);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  int v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_67C4(&qword_FBD98);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_48420(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_67C4(&qword_FBD98);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_67C4(&qword_FBD98);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *sub_48544(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_67C4(&qword_FBD98);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  int v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_67C4(&qword_FBD98);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v12, 0LL, 1LL, v6);
LABEL_13:
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_release();
  return a1;
}

uint64_t sub_48708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_48714);
}

void sub_48714(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FBD98);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_17EA4(a1, a2, v4);
  }
  else {
    sub_17B78();
  }
}

uint64_t sub_4878C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_48798);
}

void sub_48798(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(sub_67C4(&qword_FBD98) - 8) + 84LL) == a3)
  {
    uint64_t v8 = sub_491B8();
    sub_17EB0(v8, v9, v10, v11);
  }

  else
  {
    *(void *)(v5 + *(int *)(a4 + _s20HandleIntentStrategyVwxx_0((void *)(v0 + 24)) = v4;
    sub_17B78();
  }

void sub_487F0(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = "\b";
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

uint64_t *sub_48864(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString(0LL);
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_67C4(&qword_FBD98);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (char *)a1 + v10;
    int v12 = (char *)a2 + v10;
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v12, 1LL, v7))
    {
      uint64_t v13 = sub_67C4(&qword_FBD98);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v11, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_489A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString(0LL);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t result = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v5, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v5, v4);
  }
  return result;
}

char *sub_48A38(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_67C4(&qword_FBD98);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v10, 1LL, v6))
  {
    uint64_t v11 = sub_67C4(&qword_FBD98);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_48B48(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_67C4(&qword_FBD98);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  int v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_67C4(&qword_FBD98);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v12, 0LL, 1LL, v6);
  return a1;
}

char *sub_48CF0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_67C4(&qword_FBD98);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v10, 1LL, v6))
  {
    uint64_t v11 = sub_67C4(&qword_FBD98);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v9, 0LL, 1LL, v6);
  }

  return a1;
}

char *sub_48E00(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  int v7 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_67C4(&qword_FBD98);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  int v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)&a1[v11], 1LL, v6);
  int v15 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v13, 1LL, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }

  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_67C4(&qword_FBD98);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v12, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_48FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_48FB4);
}

uint64_t sub_48FB4()
{
  uint64_t v2 = sub_67C4(&qword_FBD98);
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v1, v0, v2);
}

uint64_t sub_48FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_48FF4);
}

uint64_t sub_48FF4()
{
  uint64_t v0 = sub_491B8();
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v0, v1, v2, v3);
}

void sub_49020(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

__n128 *sub_49090(__n128 *result, __n128 a2)
{
  result[1] = a2;
  strcpy((char *)&result[2], "cancelAction");
  result[2].n128_u8[13] = 0;
  result[2].n128_u16[7] = -5120;
  return result;
}

__n128 *sub_490BC(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6D69547465736572LL;
  result[2].n128_u64[1] = 0xEB00000000737265LL;
  return result;
}

uint64_t sub_490E4(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, 1LL, v1);
}

  ;
}

uint64_t sub_49124()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_4913C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(a1, v2, v1);
}

void *sub_49150()
{
  return sub_DB90(v0);
}

uint64_t sub_49158(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 1LL, 1LL, v1);
}

  ;
}

double sub_4917C()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

  ;
}

uint64_t sub_49194()
{
  return v0;
}

uint64_t sub_491B8()
{
  return v0;
}

void sub_491CC(uint64_t a1)
{
}

uint64_t sub_491D8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FD210);
  sub_5474(v0, (uint64_t)qword_FD210);
  return static SiriTimeLog.timerPlugin.getter();
}

uint64_t sub_49220()
{
  uint64_t v1 = swift_allocObject(v0, 16LL, 7LL);
  sub_49254();
  return v1;
}

uint64_t sub_49254()
{
  uint64_t v1 = type metadata accessor for TimerFlowDelegatePlugin();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v1);
  id v3 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  static CATExecutor.registerBundle(bundle:templateDir:)();

  return v0;
}

uint64_t sub_492DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FlowSearchResult(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_FB1B8 != -1) {
    swift_once(&qword_FB1B8, sub_491D8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_5474(v6, (uint64_t)qword_FD210);
  int v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)sub_1B9DC();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_0, v8, v9, "TimerFlowDelegatePlugin: called makeFlowFor()", v10, 2u);
    sub_1B904((uint64_t)v10);
  }

  uint64_t v11 = type metadata accessor for ApplicationContext(0LL);
  static ApplicationContext.shared.getter(v11);
  ApplicationContext.deviceState.getter(v24);
  sub_1BC50();
  sub_319D4(v25);
  sub_5548( a1,  v12,  v13,  v14,  v15,  v16,  v17,  v18,  v24[0],  v24[1],  v24[2],  v24[3],  v24[4],  v25[0],  v25[1],  v25[2],  v25[3],  v25[4],  v25[5],  v25[6]);
  uint64_t v19 = sub_ACD8(v24);
  uint64_t v20 = FlowSearchResult.flow.getter(v19);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (!v20)
  {
    uint64_t v21 = type metadata accessor for NoOpFlow(0LL);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    v24[0] = NoOpFlow.init()();
    uint64_t v22 = sub_32998( (unint64_t *)&qword_FD2D8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NoOpFlow,  (uint64_t)&protocol conformance descriptor for NoOpFlow);
    uint64_t v20 = Flow.eraseToAnyFlow()(v21, v22);
    swift_release();
  }

  return v20;
}

uint64_t type metadata accessor for TimerFlowDelegatePlugin()
{
  return objc_opt_self(&OBJC_CLASS____TtC23TimerFlowDelegatePlugin23TimerFlowDelegatePlugin);
}

uint64_t sub_494DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_49220();
  *a1 = result;
  return result;
}

uint64_t sub_4950C(uint64_t a1)
{
  return sub_492DC(a1);
}

uint64_t sub_49524(uint64_t a1, uint64_t a2)
{
  return sub_32998( &qword_FD2D0,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for TimerFlowDelegatePlugin,  (uint64_t)&unk_C3298);
}

uint64_t initializeWithCopy for TimerFlowFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

void *assignWithCopy for TimerFlowFactory(void *a1, void *a2)
{
  return a1;
}

void *initializeWithTake for TimerFlowFactory(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for TimerFlowFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s20HandleIntentStrategyVwxx_0((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerFlowFactory(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(sub_8CFC(v0, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_8CFC(v0, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_8CFC(v0, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimerFlowFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for TimerFlowFactory()
{
  return &type metadata for TimerFlowFactory;
}

uint64_t sub_496E4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FD2E0);
  sub_5474(v0, (uint64_t)qword_FD2E0);
  return static SiriTimeLog.timerFlow.getter();
}

void sub_4972C()
{
  uint64_t v2 = v1;
  sub_67C4(&qword_FCC18);
  sub_1BCE0();
  __chkstk_darwin(v3);
  sub_1C308();
  uint64_t v14 = type metadata accessor for TimerNLv3Intent(0LL);
  sub_1BCE0();
  __chkstk_darwin(v4);
  sub_18124();
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v5 = sub_1BD34();
  sub_5474(v5, (uint64_t)qword_FD2E0);
  sub_1E720(v2, v0);
  uint64_t v6 = (os_log_s *)sub_4C4DC();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    int v8 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v9 = sub_1BA1C(32LL);
    uint64_t v16 = v9;
    *(_DWORD *)int v8 = 136315138;
    sub_4C2F8(&qword_FBE60, type metadata accessor for TimerNLv3Intent);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v14, v10);
    uint64_t v15 = sub_683C(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    sub_18034();
    sub_1E6E4(v0);
    sub_1E7D8(&dword_0, v6, v7, "Routing flow based on nlv3 intent: %s", v8);
    sub_1E7D0(v9);
    sub_1B904(v9);
    sub_1B904((uint64_t)v8);
  }

  else
  {
    sub_1E6E4(v0);
  }

  if (qword_FB2D0 != -1) {
    swift_once(&qword_FB2D0, sub_96EE4);
  }
  uint64_t v13 = qword_101120;
  sub_4C2F8((unint64_t *)&qword_FD600, type metadata accessor for TimerNLv3Intent);
  sub_4C41C(v13);
  __asm { BR              X10 }

void sub_49B24(void *a1)
{
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v2 = sub_1BD34();
  uint64_t v3 = (os_log_s *)sub_5474(v2, (uint64_t)qword_FD2E0);
  id v4 = a1;
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)sub_1BA1C(12LL);
    int v8 = (void *)sub_1BA1C(8LL);
    *(_DWORD *)os_log_type_t v7 = 138412290;
    uint64_t v38 = (uint64_t)v4;
    id v9 = v4;
    sub_4C6E8((uint64_t)&v38, (uint64_t)v39);
    *int v8 = v4;

    sub_1E7D8(&dword_0, v5, v6, "Routing flow based on SiriKit intent: %@", v7);
    sub_67C4((uint64_t *)&unk_FD5F0);
    sub_1E7D0((uint64_t)v8);
    sub_1B904((uint64_t)v8);
    sub_1B904((uint64_t)v7);
  }

  else
  {
  }

  uint64_t TimerIntent = type metadata accessor for CreateTimerIntent(0LL);
  uint64_t v11 = sub_4C3B8(TimerIntent);
  if (v11)
  {
    unint64_t v12 = (void *)v11;
    id v13 = v4;
    uint64_t v14 = SiriTimerType.rawValue.getter([v12 type]);
    uint64_t v15 = SiriTimerType.rawValue.getter(2LL);
    if (v14 == v15 && (static TimerDeviceSupport.supportsSleepTimers()(v15) & 1) != 0)
    {
      sub_4C32C();
      sub_4B6D8();
    }

    else
    {
      sub_4C32C();
      sub_8EAC();
    }
  }

  else
  {
    uint64_t v16 = type metadata accessor for DeleteTimerIntent(0LL);
    if (sub_4C3B8(v16))
    {
      sub_4C558();
    }

    else
    {
      uint64_t v17 = type metadata accessor for PauseTimerIntent(0LL);
      if (sub_4C3B8(v17))
      {
        sub_4C32C();
        sub_4B768();
      }

      else
      {
        uint64_t v18 = type metadata accessor for ResetTimerIntent(0LL);
        if (sub_4C3B8(v18))
        {
          sub_4C32C();
          sub_4B7B0();
        }

        else
        {
          uint64_t v19 = type metadata accessor for ResumeTimerIntent(0LL);
          if (sub_4C3B8(v19))
          {
            sub_4C32C();
            sub_4B78C();
          }

          else
          {
            uint64_t v20 = type metadata accessor for SearchTimerIntent(0LL);
            if (sub_4C3B8(v20))
            {
              sub_4C32C();
              sub_4B7F8();
            }

            else
            {
              uint64_t v21 = type metadata accessor for SetTimerAttributeIntent(0LL);
              if (sub_4C3B8(v21))
              {
                sub_4C32C();
                sub_4B7D4();
              }

              else
              {
                id v22 = v4;
                Logger.logObject.getter(v22);
                os_log_type_t v23 = sub_32A5C();
                if (sub_2BDE0(v23))
                {
                  uint64_t v24 = (uint8_t *)sub_1BA1C(12LL);
                  uint64_t v25 = sub_1BA1C(32LL);
                  uint64_t v38 = v25;
                  *(_DWORD *)uint64_t v24 = 136315138;
                  id v26 = v22;
                  id v27 = [v26 description];
                  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
                  unint64_t v30 = v29;

                  sub_683C(v28, v30, &v38);
                  sub_4C748();
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(v31, v32, v24 + 4, v24 + 12);

                  sub_17EE8();
                  sub_1E7D8( &dword_0,  v3,  (os_log_type_t)v5,  "FlowPlugin is unable to consume the SiriKit intent %s. Exiting the flow.",  v24);
                  sub_1E7D0(v25);
                  sub_1B904(v25);
                  sub_1B904((uint64_t)v24);
                }

                else
                {
                }

                uint64_t v33 = type metadata accessor for ABCReport(0LL);
                v39[2] = v33;
                v39[3] = &protocol witness table for ABCReport;
                uint64_t v34 = sub_DB90(&v38);
                *uint64_t v34 = swift_getObjectType(v22);
                uint64_t v35 = enum case for UnhandledAbortSubtype.unknownIntent(_:);
                uint64_t v36 = type metadata accessor for UnhandledAbortSubtype(0LL);
                (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 104LL))(v34, v35, v36);
                (*(void (**)(void *, void, uint64_t))(*(void *)(v33 - 8) + 104LL))( v34,  enum case for ABCReport.unhandledAbort(_:),  v33);
                static BarbaraWalters.stopThePresses(for:)(&v38);
                uint64_t v37 = _s20HandleIntentStrategyVwxx_0(&v38);
                static FlowSearchResult.noFlow.getter(v37);
              }
            }
          }
        }
      }
    }
  }

void sub_49F50(os_log_s *a1)
{
  uint64_t v3 = v2;
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v5 = sub_1BD34();
  sub_5474(v5, (uint64_t)qword_FD2E0);
  swift_unknownObjectRetain_n(a1, 2LL);
  sub_4C3A0();
  os_log_type_t v6 = sub_1BCD0();
  if (os_log_type_enabled(v2, v6))
  {
    os_log_type_t v7 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v8 = sub_1BA1C(32LL);
    uint64_t v19 = v8;
    *(_DWORD *)os_log_type_t v7 = 136315138;
    swift_unknownObjectRetain(a1);
    sub_67C4(&qword_FCD00);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v1 = (uint8_t *)v10;
    sub_683C(v9, v10, &v19);
    sub_4C748();
    sub_4C6E8(v11, v12);
    sub_4C6DC();
    sub_2B7C4();
    sub_1E7D8(&dword_0, v2, v6, "Routing flow based on nlv4 intent: %s", v7);
    sub_1E7D0(v8);
    sub_1B904(v8);
    uint64_t v13 = (uint64_t)v7;
    uint64_t v3 = v2;
    sub_1B904(v13);
  }

  else
  {

    sub_4C6DC();
  }

  swift_getObjectType(a1);
  uint64_t v14 = SIRINLUUserDialogAct.firstUsoTask.getter();
  if (v14)
  {
    uint64_t v15 = v14;
    char v16 = sub_6AB8();
    sub_4C4E4();
    sub_6C50(v16, v15);
    sub_4C44C(v15);
  }

  else
  {
    sub_4C3A0();
    os_log_type_t v17 = sub_32A5C();
    if (sub_434EC(v17))
    {
      uint64_t v18 = (_WORD *)sub_1BA1C(2LL);
      sub_4C658(v18);
      sub_1BBEC(&dword_0, a1, (os_log_type_t)a1, "UsoTask is empty! Calling createTimerFlow anyways", v1);
      sub_1B904((uint64_t)v1);
    }

    sub_8CFC((void *)v3 + 5, *((void *)v3 + 8));
    sub_8EAC();
  }

uint64_t sub_4A174()
{
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v3 = sub_1BD34();
  sub_39658(v3, (uint64_t)qword_FD2E0);
  os_log_type_t v4 = sub_1BCD0();
  if (sub_434EC(v4))
  {
    uint64_t v5 = (_WORD *)sub_1BA1C(2LL);
    sub_2B938(v5);
    sub_1BBEC( &dword_0,  v0,  v1,  "TimerFlowFactory: deciding between deleteTimerFlow and dismissTimerFlow based on firing timer info from device context.",  v2);
    sub_1B904((uint64_t)v2);
  }

  sub_8CFC((void *)v0 + 5, *((void *)v0 + 8));
  return sub_1078C();
}

void sub_4A238()
{
  uint64_t v5 = v0;
  uint64_t v93 = v6;
  uint64_t v91 = v7;
  sub_67C4(&qword_FD610);
  sub_1BCE0();
  __chkstk_darwin(v8);
  uint64_t v82 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1E818();
  uint64_t v11 = type metadata accessor for NamedParseTransformer(v10);
  uint64_t v83 = *(void *)(v11 - 8);
  uint64_t v84 = v11;
  sub_17B6C();
  __chkstk_darwin(v12);
  sub_17D14();
  uint64_t v81 = v13;
  sub_67C4(&qword_FD618);
  sub_1BCE0();
  __chkstk_darwin(v14);
  sub_1810C();
  sub_67C4(&qword_FD620);
  sub_1BCE0();
  __chkstk_darwin(v15);
  sub_17D14();
  uint64_t v89 = v16;
  uint64_t v17 = sub_1E818();
  uint64_t v18 = (os_log_s *)type metadata accessor for TerminalElement.Qualifier(v17);
  sub_4C66C();
  __chkstk_darwin(v19);
  uint64_t v85 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_433B0();
  __chkstk_darwin(v21);
  os_log_type_t v23 = (char *)&v80 - v22;
  sub_67C4(&qword_FCC18);
  sub_1BCE0();
  __chkstk_darwin(v24);
  sub_21608();
  uint64_t v27 = v25 - v26;
  __chkstk_darwin(v28);
  unint64_t v30 = (char *)&v80 - v29;
  sub_67C4(&qword_FD628);
  sub_1BCE0();
  __chkstk_darwin(v31);
  sub_4C3FC();
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v88 = v1;
  uint64_t v90 = v18;
  uint64_t v32 = sub_1BD34();
  sub_5474(v32, (uint64_t)qword_FD2E0);
  sub_1BD20();
  os_log_type_t v33 = sub_1BCD0();
  if (sub_2B854(v33))
  {
    uint64_t v34 = (_WORD *)sub_1BA1C(2LL);
    sub_4C4EC(v34);
    sub_1BBEC( &dword_0,  v18,  (os_log_type_t)v1,  "TimerFlowFactory: deciding between createTimerFlow and createAlarmFlow based on user's NLv3 intent.",  v2);
    sub_1B904((uint64_t)v2);
  }

  uint64_t v86 = v23;
  uint64_t v87 = v3;
  uint64_t v92 = v5;

  if (qword_FB2F8 != -1) {
    swift_once(&qword_FB2F8, sub_96FBC);
  }
  uint64_t v35 = qword_101148;
  type metadata accessor for TimerNLv3Intent(0LL);
  sub_4C2F8((unint64_t *)&qword_FD600, type metadata accessor for TimerNLv3Intent);
  sub_4C3A8(v35);
  uint64_t v36 = type metadata accessor for TerminalElement.DateTimeValue(0LL);
  uint64_t v37 = sub_4C720((uint64_t)v30, 1LL, v36);
  if (v42)
  {
    sub_8CC4((uint64_t)v30, &qword_FCC18);
    uint64_t v38 = type metadata accessor for TerminalElement.Time(0LL);
    sub_44FF8(v4, v39, v40, v38);
LABEL_12:
    sub_8CC4(v4, &qword_FD628);
    sub_4C4DC();
    os_log_type_t v43 = sub_2BFB4();
    if (sub_329F4(v43))
    {
      uint64_t v44 = (_WORD *)sub_1BA1C(2LL);
      sub_2BA04(v44);
      sub_39644(&dword_0, v45, v46, "No startTime found in timerIntent. Returning createTimerFlow");
      sub_1B904(v36);
    }

    sub_4C570((uint64_t)v92);
    goto LABEL_15;
  }

  TerminalElement.DateTimeValue.startTime.getter(v37);
  uint64_t v5 = *(void **)(*(void *)(v36 - 8) + 8LL);
  ((void (*)(char *, uint64_t))v5)(v30, v36);
  uint64_t v41 = type metadata accessor for TerminalElement.Time(0LL);
  sub_4C720(v4, 1LL, v41);
  if (v42) {
    goto LABEL_12;
  }
  sub_8CC4(v4, &qword_FD628);
  sub_4C3A8(qword_101148);
  int v47 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v27, 1LL, v36);
  if (v47 == 1)
  {
    sub_8CC4(v27, &qword_FCC18);
  }

  else
  {
    uint64_t v48 = TerminalElement.DateTimeValue.toDateTimeWithMeridiemSetByUser()();
    ((void (*)(uint64_t, uint64_t))v5)(v27, v36);
    if (v48)
    {
      if (qword_FB2F0 != -1) {
        swift_once(&qword_FB2F0, sub_96F94);
      }
      sub_4C3A8(qword_101140);
      if ((v94 & 1) != 0)
      {
        sub_4ADDC();
LABEL_33:
        swift_release();
        goto LABEL_16;
      }

      sub_2BE54();
    }
  }

  if (qword_FB2F0 != -1) {
    swift_once(&qword_FB2F0, sub_96F94);
  }
  uint64_t v49 = qword_101140;
  uint64_t v50 = sub_4C3A8(qword_101140);
  if ((v94 & 1) == 0 && (static TimerDeviceSupport.supportsSleepTimers()(v50) & 1) != 0)
  {
    sub_8CFC(v92 + 5, v92[8]);
    sub_4B6D8();
    goto LABEL_16;
  }

  sub_4C3A8(v49);
  uint64_t v51 = v92;
  if (v94 == 1)
  {
    uint64_t v53 = v92[3];
    uint64_t v52 = v92[4];
    sub_8CFC(v92, v53);
    if ((dispatch thunk of DeviceState.isAppleTV.getter(v53, v52) & 1) != 0)
    {
      uint64_t v54 = sub_21F78();
      unint64_t v56 = sub_4C648(v54, v55);
      Flow.eraseToAnyFlow()(&type metadata for UnsupportedDateTimerFlow, v56);
      sub_4C3DC();
      sub_2B750();
      sub_4C414();
      goto LABEL_33;
    }
  }

  uint64_t v57 = v88;
  sub_96A7C(v88);
  uint64_t v58 = (void *)type metadata accessor for TerminalElement.Date(0LL);
  uint64_t v59 = sub_4C720(v57, 1LL, (uint64_t)v58);
  if (v42)
  {
    sub_4C6D4(v59, &qword_FD618);
    uint64_t v62 = v89;
    sub_44FF8(v89, v60, v61, (uint64_t)v90);
LABEL_39:
    sub_8CC4(v62, &qword_FD620);
    sub_8CFC(v51 + 5, v51[8]);
LABEL_15:
    sub_8EAC();
    goto LABEL_16;
  }

  uint64_t v62 = v89;
  TerminalElement.Date.qualifier.getter(v59);
  (*(void (**)(uint64_t, void *))(*(v58 - 1) + 8LL))(v57, v58);
  uint64_t v63 = (uint64_t)v90;
  sub_4C720(v62, 1LL, (uint64_t)v90);
  if (v64) {
    goto LABEL_39;
  }
  unint64_t v66 = v86;
  uint64_t v65 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 32))(v86, v62, v63);
  uint64_t v67 = v85;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v85, v66, v63);
  int v68 = (*(uint64_t (**)(char *, uint64_t))(v65 + 88))(v67, v63);
  if (v68 == enum case for TerminalElement.Qualifier.every(_:))
  {
    sub_4C4DC();
    os_log_type_t v69 = sub_2BFB4();
    if (sub_329F4(v69))
    {
      uint64_t v70 = (_WORD *)sub_1BA1C(2LL);
      sub_2BA04(v70);
      sub_39644( &dword_0,  v71,  v72,  "Found startTime with recurrence qualifier in timerIntent. Transforming to alarm flow");
      sub_1B904(v62);
    }

    uint64_t v73 = type metadata accessor for Parse(0LL);
    uint64_t v74 = v82;
    Transformer.init(transform:)(sub_4C04C, 0LL, v73, v73);
    uint64_t v75 = v81;
    NamedParseTransformer.init(transformer:)(v74);
    static FlowSearchResult.reform(transformer:exclude:)(v75, 1LL);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v75, v84);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v63);
  }

  else
  {
    uint64_t v76 = sub_21F78();
    unint64_t v78 = sub_4C648(v76, v77);
    Flow.eraseToAnyFlow()(&type metadata for UnsupportedDateTimerFlow, v78);
    sub_4C3DC();
    sub_2B750();
    sub_4C414();
    sub_1BC50();
    uint64_t v79 = *(void (**)(char *, uint64_t))(v65 + 8);
    v79(v66, v63);
    v79(v67, v63);
  }

LABEL_16:
  sub_17E58();
}

uint64_t sub_4A934(uint64_t a1)
{
  if ((dispatch thunk of CurrentDevice.isAppleTV.getter() & 1) == 0) {
    goto LABEL_6;
  }
  static UsoTask_CodegenConverter.convert(task:)(a1);
  sub_8C84((uint64_t)v35, (uint64_t)v33, &qword_FCD20);
  if (!v34)
  {
    sub_4C6A0(v4, &qword_FCD20);
    goto LABEL_8;
  }

  sub_8C84((uint64_t)v33, (uint64_t)v32, &qword_FCD20);
  uint64_t v5 = type metadata accessor for UsoTask_stop_uso_NoEntity(0LL);
  uint64_t v8 = sub_4C34C(v5, v6, v7, v5);
  if (!(_DWORD)v8)
  {
    uint64_t v9 = type metadata accessor for UsoTask_stop_common_Timer(0LL);
    uint64_t v8 = sub_4C34C(v9, v10, v11, v9);
    if (!(_DWORD)v8)
    {
      common_uint64_t Timer = type metadata accessor for UsoTask_create_common_Timer(0LL);
      if (sub_4C3D4((uint64_t)v31, (uint64_t)v32, (uint64_t)&type metadata for Any + 8, common_Timer))
      {
LABEL_11:
        uint64_t v15 = sub_4C740();
        static SiriTimeFeatureFlagsImpl.instance.getter(v15);
        SiriTimeFeatureFlagsImpl.isSleepTimersEnabled()();
        sub_4C4BC();
        sub_4357C((uint64_t)v35);
        char v12 = v1 ^ 1;
        sub_4C58C();
        sub_4357C((uint64_t)v33);
        return v12 & 1;
      }

      uint64_t v16 = type metadata accessor for UsoTask_disable_common_Setting(0LL);
      uint64_t v17 = type metadata accessor for UsoTask_enable_common_Setting(0LL);
      uint64_t v18 = type metadata accessor for UsoTask_request_common_Timer(0LL);
      if (sub_4C34C(v18, v19, v20, v18)
        || (uint64_t v21 = type metadata accessor for UsoTask_summarise_common_Timer(0LL),
            sub_4C34C(v21, v22, v23, v21))
        || (uint64_t v24 = type metadata accessor for UsoTask_checkExistence_common_Timer(0LL),
            sub_4C34C(v24, v25, v26, v24)))
      {
LABEL_18:
        sub_4C740();
        sub_4C58C();
        sub_8CC4((uint64_t)v33, &qword_FCD20);
        ((void (*)(void))static SiriTimeFeatureFlagsImpl.instance.getter)();
        SiriTimeFeatureFlagsImpl.isSleepTimersEnabled()();
        sub_4C4BC();
        sub_8CC4((uint64_t)v35, &qword_FCD20);
        char v12 = v1 ^ 1;
        return v12 & 1;
      }

      uint64_t v27 = type metadata accessor for UsoTask_reset_common_Timer(0LL);
      uint64_t v30 = sub_4C34C(v27, v28, v29, v27);
      if ((_DWORD)v30) {
        goto LABEL_11;
      }
      sub_4C6A0(v30, &qword_FCD20);
      sub_4C58C();
LABEL_8:
      sub_8CC4((uint64_t)v33, &qword_FCD20);
      char v12 = 1;
      return v12 & 1;
    }
  }

  sub_4C6A0(v8, &qword_FCD20);
  sub_4C740();
  sub_4C58C();
  sub_8CC4((uint64_t)v33, &qword_FCD20);
LABEL_6:
  char v12 = 0;
  return v12 & 1;
}

void sub_4ABC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = dispatch thunk of UsoEntity_common_EventTrigger.dateTimeTrigger.getter();
  if (!v2)
  {
    sub_4C474();
    static FlowSearchResult.noFlow.getter();
    return;
  }

  uint64_t v3 = dispatch thunk of UsoEntity_common_DateTime.offsetValue.getter(v2);
  if (!v3
    || (v4 = (os_log_s *)v3, uint64_t v5 = dispatch thunk of UsoEntity_common_Duration.components.getter(), sub_1BC50(), !v5))
  {
    static FlowSearchResult.noFlow.getter();
    sub_4C474();
    swift_release();
    return;
  }

  if (!((unint64_t)v5 >> 62))
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v5);
    if (v6) {
      goto LABEL_6;
    }
LABEL_23:
    sub_4C4A8();
    goto LABEL_24;
  }

  if (v5 >= 0) {
    uint64_t v4 = (os_log_s *)(v5 & 0xFFFFFFFFFFFFFF8LL);
  }
  else {
    uint64_t v4 = (os_log_s *)v5;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v4);
  if (!v6) {
    goto LABEL_23;
  }
LABEL_6:
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v7 = 0LL;
  double v8 = 0.0;
  do
  {
    if ((v5 & 0xC000000000000001LL) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
    }
    else {
      swift_retain(*(void *)(v5 + 8 * v7 + 32));
    }
    uint64_t v9 = dispatch thunk of CodeGenListEntry.entry.getter(&v14);
    uint64_t v4 = v14;
    if (v14)
    {
      double v10 = UsoEntity_common_DurationComponent.valueInSeconds.getter(v9);
      sub_2BE54();
      sub_1BC50();
    }

    else
    {
      sub_2BE54();
      double v10 = 0.0;
    }

    ++v7;
    double v8 = v8 + v10;
  }

  while (v6 != v7);
  sub_4C4A8();
  if (v8 <= 0.0)
  {
LABEL_24:
    if (qword_FB1C0 == -1)
    {
LABEL_25:
      uint64_t v11 = sub_1BD34();
      sub_39658(v11, (uint64_t)qword_FD2E0);
      os_log_type_t v12 = sub_32A5C();
      if (sub_434EC(v12))
      {
        uint64_t v13 = (_WORD *)sub_1BA1C(2LL);
        sub_2B938(v13);
        sub_1BBEC( &dword_0,  v4,  (os_log_type_t)v1,  "TimerFlowDelegatePlugin was presented a sleep timer ontology, but with a duration of zero seconds.",  (uint8_t *)v5);
        sub_1B904(v5);
      }

      static FlowSearchResult.noFlow.getter();
      goto LABEL_28;
    }

void sub_4ADDC()
{
  uint64_t v130 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_67C4(&qword_FD638);
  sub_1BCE0();
  __chkstk_darwin(v6);
  uint64_t v125 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1E818();
  uint64_t v9 = type metadata accessor for DateComponents(v8);
  uint64_t v132 = *(void *)(v9 - 8);
  uint64_t v133 = v9;
  sub_17B6C();
  __chkstk_darwin(v10);
  sub_433C4();
  uint64_t v119 = v11;
  sub_433B0();
  __chkstk_darwin(v12);
  uint64_t v120 = (char *)&v107 - v13;
  sub_433B0();
  __chkstk_darwin(v14);
  sub_43404();
  uint64_t v122 = v15;
  sub_433B0();
  __chkstk_darwin(v16);
  sub_43404();
  uint64_t v123 = v17;
  sub_433B0();
  __chkstk_darwin(v18);
  sub_43404();
  uint64_t v124 = v19;
  sub_433B0();
  __chkstk_darwin(v20);
  sub_436A0();
  uint64_t v128 = v21;
  uint64_t v22 = sub_1E818();
  uint64_t v23 = type metadata accessor for Calendar(v22);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_18124();
  uint64_t v134 = type metadata accessor for Date(0LL);
  uint64_t v131 = *(void *)(v134 - 8);
  sub_17B6C();
  __chkstk_darwin(v25);
  sub_433C4();
  uint64_t v121 = v26;
  sub_433B0();
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v107 - v28;
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v30 = sub_1BD34();
  uint64_t v31 = sub_5474(v30, (uint64_t)qword_FD2E0);
  uint64_t v32 = swift_retain_n(v3, 2LL);
  uint64_t v126 = v31;
  os_log_type_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = v29;
    uint64_t v36 = v5;
    uint64_t v37 = sub_1BA1C(12LL);
    uint64_t v129 = v35;
    uint64_t v38 = (uint8_t *)v37;
    uint64_t v118 = sub_1BA1C(32LL);
    uint64_t v135 = v3;
    uint64_t v136 = v118;
    uint64_t v127 = v23;
    *(_DWORD *)uint64_t v38 = 136315138;
    uint64_t v117 = v38 + 4;
    uint64_t v39 = v1;
    uint64_t v40 = v24;
    uint64_t v41 = type metadata accessor for DateTime(0LL);
    sub_4C2F8(&qword_FD650, (uint64_t (*)(uint64_t))&type metadata accessor for DateTime);
    uint64_t v43 = v42;
    uint64_t v44 = v41;
    uint64_t v24 = v40;
    uint64_t v1 = v39;
    uint64_t v5 = v36;
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v44, v43);
    uint64_t v47 = sub_4C4D0(v45, v46);
    uint64_t v48 = sub_4C494(v47);
    uint64_t v23 = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v48, v49, v117, v38 + 12);
    sub_4C44C(v3);
    sub_18034();
    sub_1E7D8(&dword_0, v33, v34, "TimerFlowFactory: In createTimerOrReformToAlarm with %s", v38);
    uint64_t v50 = v118;
    sub_1E7D0(v118);
    sub_1B904(v50);
    uint64_t v29 = v129;
    sub_1B904((uint64_t)v38);
  }

  else
  {

    uint64_t v51 = sub_4C44C(v3);
  }

  uint64_t v52 = Date.init()(v51);
  static Calendar.current.getter(v52);
  Swift::Bool v53 = DateTime.isValidForReformationFromTimer()();
  uint64_t v54 = v132;
  if (!v53 || (uint64_t v55 = static DateTimeInferenceUtils.inferDateTime(from:anchorDate:)(v3, 0LL)) == 0)
  {
    sub_4C4F8();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v1, v23);
LABEL_11:
    uint64_t v79 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
    goto LABEL_12;
  }

  uint64_t v56 = v55;
  uint64_t v117 = v5;
  uint64_t v116 = v1;
  uint64_t v118 = v24;
  uint64_t v127 = v23;
  uint64_t v57 = sub_67C4(&qword_FD640);
  uint64_t v58 = *(void *)(type metadata accessor for Calendar.Component(0LL) - 8);
  uint64_t v59 = *(void *)(v58 + 72);
  uint64_t v60 = *(unsigned __int8 *)(v58 + 80);
  uint64_t v61 = (v60 + 32) & ~v60;
  uint64_t v111 = v60 | 7;
  uint64_t v62 = swift_allocObject(v57, v61 + 5 * v59, v60 | 7);
  *(_OWORD *)(v62 + 16) = xmmword_C33C0;
  uint64_t v113 = v61;
  uint64_t v63 = v62 + v61;
  sub_4C42C(v63, enum case for Calendar.Component.year(_:));
  sub_4C42C(v63 + v59, enum case for Calendar.Component.month(_:));
  sub_4C42C(v63 + 2 * v59, enum case for Calendar.Component.day(_:));
  unsigned int v110 = enum case for Calendar.Component.hour(_:);
  sub_4C42C(v63 + 3 * v59, enum case for Calendar.Component.hour(_:));
  uint64_t v112 = v59;
  sub_4C42C(v63 + 4 * v59, enum case for Calendar.Component.minute(_:));
  uint64_t v115 = sub_4C060(v62);
  uint64_t v64 = v128;
  uint64_t v114 = v56;
  static DateTimeInferenceUtils.dateComponents(forDateTime:)(v56);
  uint64_t v65 = v124;
  uint64_t v109 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 16);
  uint64_t v66 = v109(v124, v64, v133);
  uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
  os_log_type_t v68 = static os_log_type_t.default.getter();
  BOOL v69 = sub_4C6CC(v67);
  uint64_t v129 = v29;
  if (v69)
  {
    uint64_t v70 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v108 = sub_1BA1C(32LL);
    uint64_t v136 = v108;
    *(_DWORD *)uint64_t v70 = 136315138;
    char v107 = v70 + 4;
    sub_4C2F8(&qword_FD648, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents);
    uint64_t v72 = sub_4C6F4(v71, v71);
    uint64_t v74 = sub_4C4D0(v72, v73);
    uint64_t v75 = sub_4C494(v74);
    uint64_t v29 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, v76, v107, v70 + 12);
    sub_18034();
    uint64_t v132 = *(void *)(v132 + 8);
    ((void (*)(uint64_t, uint64_t))v132)(v65, v54);
    sub_1E7D8(&dword_0, v67, v68, "TimerFlowFactory: reference date from utterance: %s", v70);
    uint64_t v77 = v108;
    sub_1E7D0(v108);
    sub_1B904(v77);
    uint64_t v78 = (uint64_t)v70;
    uint64_t v64 = v128;
    sub_1B904(v78);
  }

  else
  {
    uint64_t v132 = *(void *)(v54 + 8);
    ((void (*)(uint64_t, uint64_t))v132)(v65, v133);
  }

  uint64_t v80 = (uint64_t)v125;
  uint64_t v81 = v116;
  Calendar.date(from:)(v64);
  sub_4C720(v80, 1LL, v134);
  if (v82)
  {
    swift_bridgeObjectRelease(v115);
    sub_8CC4(v80, &qword_FD638);
    sub_4C570(v130);
    sub_8EAC();
    swift_release();
    ((void (*)(uint64_t, uint64_t))v132)(v64, v133);
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v81, v127);
    goto LABEL_11;
  }

  uint64_t v83 = v121;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 32))(v121, v80, v134);
  uint64_t v84 = v115;
  Calendar.dateComponents(_:from:)(v115, v83);
  Calendar.dateComponents(_:from:)(v84, v29);
  sub_17EE8();
  uint64_t v85 = v113;
  uint64_t v86 = swift_allocObject(v57, v113 + v112, v111);
  *(_OWORD *)(v86 + 16) = xmmword_C2640;
  sub_4C42C(v86 + v85, v110);
  sub_4C060(v86);
  uint64_t v87 = (uint64_t)v120;
  Calendar.dateComponents(_:from:to:)();
  sub_2B7C4();
  uint64_t v88 = v119;
  uint64_t v89 = v109(v119, v87, v133);
  uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
  os_log_type_t v91 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v93 = (uint8_t *)sub_1BA1C(12LL);
    uint64_t v94 = sub_1BA1C(32LL);
    uint64_t v136 = v94;
    *(_DWORD *)uint64_t v93 = 136315138;
    sub_4C2F8(&qword_FD648, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents);
    uint64_t v96 = sub_4C6F4(v95, v95);
    uint64_t v98 = sub_4C4D0(v96, v97);
    uint64_t v99 = sub_4C494(v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v99, v100, v93 + 4, v93 + 12);
    sub_18034();
    uint64_t v101 = v87;
    uint64_t v87 = (uint64_t)v120;
    ((void (*)(uint64_t, uint64_t))v132)(v88, v101);
    sub_1E7D8(&dword_0, v90, v91, "TimerFlowFactory: deltaComponments: %s", v93);
    sub_1E7D0(v94);
    sub_1B904(v94);
    sub_1B904((uint64_t)v93);
  }

  else
  {
    ((void (*)(uint64_t, uint64_t))v132)(v88, v133);
  }

  unint64_t v102 = DateComponents.hour.getter();
  uint64_t v29 = v129;
  uint64_t v103 = v118;
  if ((v104 & 1) != 0 || v102 < 0x18)
  {
    sub_4C4F8();
  }

  else
  {
    uint64_t v136 = sub_21F78();
    uint64_t v137 = v105;
    unint64_t v106 = sub_2225C();
    Flow.eraseToAnyFlow()(&type metadata for UnsupportedDateTimerFlow, v106);
    sub_4C3DC();
    sub_2B750();
    sub_4C414();
    sub_2BE54();
  }

  swift_release();
  sub_4C630(v87);
  sub_4C630(v122);
  sub_4C630(v123);
  uint64_t v79 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
  v79(v121, v134);
  sub_4C630(v128);
  (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v116, v127);
LABEL_12:
  v79((uint64_t)v29, v134);
  sub_17E58();
}

uint64_t sub_4B6D8()
{
  return sub_4BEF0("TimerFlowFactory: making createTimerFlow for sleep timer.", (uint64_t)&unk_FD5A0);
}

uint64_t sub_4B6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  uint64_t v5 = (void *)swift_task_alloc(dword_FCEF4);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_107E8;
  return sub_45D8C(a1, v4);
}

void sub_4B744()
{
}

void sub_4B768()
{
}

void sub_4B78C()
{
}

void sub_4B7B0()
{
}

void sub_4B7D4()
{
}

void sub_4B7F8()
{
  uint64_t v31 = v4;
  sub_67C4(&qword_FBDB8);
  sub_1BCE0();
  __chkstk_darwin(v5);
  sub_1C308();
  uint64_t v8 = v7 - v6;
  uint64_t v30 = sub_67C4(&qword_FD440);
  uint64_t v9 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_1C308();
  uint64_t v12 = v11 - v10;
  type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  sub_4C66C();
  __chkstk_darwin(v13);
  sub_4C3FC();
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v14 = sub_1BD34();
  uint64_t v15 = (os_log_s *)sub_5474(v14, (uint64_t)qword_FD2E0);
  sub_1BD20();
  os_log_type_t v16 = sub_1BCD0();
  if (sub_4C560(v16))
  {
    uint64_t v17 = (_WORD *)sub_1BA1C(2LL);
    sub_4C658(v17);
    sub_1BBEC(&dword_0, v1, v3, "TimerFlowFactory: making searchTimerFlow.", v0);
    sub_1B904((uint64_t)v0);
  }

  static SiriTimeFeatureFlagsImpl.instance.getter(v18);
  BOOL v19 = SiriTimeFeatureFlagsImpl.isCrossDeviceEnabled()();
  uint64_t v20 = sub_4C54C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (v19)
  {
    Logger.logObject.getter(v20);
    os_log_type_t v21 = sub_1BCD0();
    if (sub_434EC(v21))
    {
      uint64_t v22 = (_WORD *)sub_1BA1C(2LL);
      sub_4C658(v22);
      sub_1BBEC( &dword_0,  v15,  (os_log_type_t)v8,  "Using RemoteTimerContinuationFlow for Cross-Device Flow",  (uint8_t *)v19);
      sub_1B904(v19);
    }

    sub_4C6C4((uint64_t)v1 + 16);
    uint64_t v23 = type metadata accessor for RemoteTimerContinuationFlow();
    swift_allocObject(v23, 81LL, 7LL);
    *(void *)&v32[0] = sub_30608(v32);
    sub_4C2F8( (unint64_t *)&unk_FD460,  (uint64_t (*)(uint64_t))type metadata accessor for RemoteTimerContinuationFlow);
    uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
    sub_4C454();
    static FlowSearchResult.flow(_:)(v25);
    sub_2B750();
  }

  else
  {
    sub_4C6C4((uint64_t)v1 + 16);
    sub_4D56C(v32, 0);
    uint64_t v26 = sub_46210();
    sub_44FF8(v8, v27, v28, v26);
    sub_A434(v12, v8, v31);
    sub_4C6D4(v29, &qword_FBDB8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v30);
  }

  sub_17E58();
}

void sub_4BA68()
{
  char v2 = v1;
  uint64_t v26 = v3;
  uint64_t v4 = sub_67C4(&qword_FD438);
  sub_1BCE0();
  __chkstk_darwin(v5);
  sub_21608();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v27[-1] - v10;
  uint64_t v12 = sub_67C4(&qword_FD440);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_21608();
  uint64_t v16 = v14 - v15;
  __chkstk_darwin(v17);
  uint64_t v18 = v0 + 16;
  sub_54CC(v18, (uint64_t)v27);
  sub_4D56C(v27, v2);
  sub_54CC(v18, (uint64_t)v11);
  uint64_t v19 = (uint64_t)&v11[*(int *)(v4 + 36)];
  uint64_t v20 = sub_46210();
  sub_44FF8(v19, v21, v22, v20);
  sub_4C734(v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16));
  uint64_t v23 = sub_67C4(&qword_FD448);
  sub_2B838(v23);
  uint64_t v24 = RCHChildFlowFactory.init(producers:)(v16);
  sub_8C84((uint64_t)v11, v8, &qword_FD438);
  sub_AC3C((unint64_t *)&unk_FD450, &qword_FD438);
  RCHFlowFactory.init(strategy:childFlowFactory:)(v8, v24, v4, v25);
  sub_4357C((uint64_t)v11);
  sub_4C54C(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  sub_17E58();
}

void sub_4BBF0()
{
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v3 = sub_1BD34();
  sub_39658(v3, (uint64_t)qword_FD2E0);
  os_log_type_t v4 = sub_1BCD0();
  if (sub_2B854(v4))
  {
    uint64_t v5 = (_WORD *)sub_1BA1C(2LL);
    sub_4C4EC(v5);
    sub_1BBEC(&dword_0, v0, v1, "TimerFlowFactory: making recreateDeletedTimerFlow.", v2);
    sub_1B904((uint64_t)v2);
  }

  type metadata accessor for RecreateDeletedTimerFlow(0LL);
  RecreateDeletedTimerFlow.__allocating_init()();
  sub_4C2F8(&qword_FD430, type metadata accessor for RecreateDeletedTimerFlow);
  sub_4C5B4(v6);
  sub_4C688();
  sub_4C414();
  sub_1BC50();
  sub_4C51C();
}

void sub_4BCE0()
{
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v3 = sub_1BD34();
  sub_39658(v3, (uint64_t)qword_FD2E0);
  os_log_type_t v4 = sub_1BCD0();
  if (sub_2B854(v4))
  {
    uint64_t v5 = (_WORD *)sub_1BA1C(2LL);
    sub_4C4EC(v5);
    sub_1BBEC(&dword_0, v0, v1, "TimerFlowFactory: making undoCreateTimerFlow", v2);
    sub_1B904((uint64_t)v2);
  }

  type metadata accessor for UndoCreateTimerFlow(0LL);
  UndoCreateTimerFlow.__allocating_init()();
  sub_4C2F8(&qword_FD428, type metadata accessor for UndoCreateTimerFlow);
  sub_4C5B4(v6);
  sub_4C688();
  sub_4C414();
  sub_1BC50();
  sub_4C51C();
}

uint64_t sub_4BDD0()
{
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v3 = sub_1BD34();
  sub_39658(v3, (uint64_t)qword_FD2E0);
  os_log_type_t v4 = sub_1BCD0();
  if (sub_434EC(v4))
  {
    uint64_t v5 = (_WORD *)sub_1BA1C(2LL);
    sub_2B938(v5);
    sub_1BBEC(&dword_0, v0, v1, "TimerFlowFactory: making undoTimerChangeStateFlow", v2);
    sub_1B904((uint64_t)v2);
  }

  uint64_t v6 = type metadata accessor for UndoTimerChangeStateFlow(0LL);
  sub_54CC((uint64_t)v0 + 16, (uint64_t)v9);
  v9[0] = UndoTimerChangeStateFlow.__allocating_init(deviceState:)((uint64_t)v9);
  sub_4C2F8(&qword_FD420, type metadata accessor for UndoTimerChangeStateFlow);
  Flow.eraseToAnyFlow()(v6, v7);
  sub_4C3DC();
  sub_4C414();
  return sub_1BC50();
}

uint64_t sub_4BEF0(const char *a1, uint64_t a2)
{
  if (qword_FB1C0 != -1) {
    swift_once(&qword_FB1C0, sub_496E4);
  }
  uint64_t v6 = sub_1BD34();
  sub_39658(v6, (uint64_t)qword_FD2E0);
  os_log_type_t v7 = sub_1BCD0();
  if (sub_2BAD0(v7))
  {
    uint64_t v8 = (uint8_t *)sub_1BA1C(2LL);
    *(_WORD *)uint64_t v8 = 0;
    sub_1BBEC(&dword_0, v2, v3, a1, v8);
    sub_1B904((uint64_t)v8);
  }

  uint64_t v9 = type metadata accessor for AsyncConstructingFlow(0LL);
  sub_2B838(v9);
  sub_4C4E4();
  AsyncConstructingFlow.init(_:)(a2, v2);
  Flow.eraseToAnyFlow()(v9, &protocol witness table for AsyncConstructingFlow);
  sub_4C3DC();
  sub_4C414();
  return sub_1BC50();
}

uint64_t sub_4C004()
{
  os_log_type_t v1 = (void *)swift_task_alloc(dword_FD59C);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_4C6A8(v1);
  return sub_4B6EC(v2, v3);
}

uint64_t sub_4C04C@<X0>(void (*a1)(void, void)@<X0>, uint64_t a2@<X8>)
{
  return sub_B3A48(a1, a2);
}

uint64_t sub_4C060(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  os_log_type_t v7 = (char *)&v30 - v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }

  sub_67C4(&qword_FD658);
  uint64_t result = static _SetStorage.allocate(capacity:)(v8);
  uint64_t v10 = (void *)result;
  uint64_t v32 = *(void *)(a1 + 16);
  if (!v32)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v10;
  }

  unint64_t v11 = 0LL;
  uint64_t v34 = result + 56;
  uint64_t v12 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v30 = a1;
  uint64_t v31 = a1 + ((v12 + 32) & ~v12);
  while (v11 < *(void *)(a1 + 16))
  {
    uint64_t v13 = *(void *)(v35 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
    v14(v7, v31 + v13 * v11, v2);
    uint64_t v15 = v10[5];
    sub_4C2F8(&qword_FD660, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component);
    uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v2, v16);
    uint64_t v18 = -1LL << *((_BYTE *)v10 + 32);
    unint64_t v19 = v17 & ~v18;
    unint64_t v20 = v19 >> 6;
    uint64_t v21 = *(void *)(v34 + 8 * (v19 >> 6));
    uint64_t v22 = 1LL << v19;
    if (((1LL << v19) & v21) != 0)
    {
      unint64_t v33 = v11;
      uint64_t v23 = ~v18;
      while (1)
      {
        v14(v5, v10[6] + v19 * v13, v2);
        sub_4C2F8(&qword_FD668, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v7, v2, v24);
        uint64_t v26 = *(void (**)(char *, uint64_t))(v35 + 8);
        v26(v5, v2);
        if ((v25 & 1) != 0) {
          break;
        }
        unint64_t v19 = (v19 + 1) & v23;
        unint64_t v20 = v19 >> 6;
        uint64_t v21 = *(void *)(v34 + 8 * (v19 >> 6));
        uint64_t v22 = 1LL << v19;
        if ((v21 & (1LL << v19)) == 0)
        {
          a1 = v30;
          unint64_t v11 = v33;
          goto LABEL_10;
        }
      }

      uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v7, v2);
      a1 = v30;
      unint64_t v11 = v33;
    }

    else
    {
LABEL_10:
      *(void *)(v34 + 8 * v20) = v22 | v21;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v35 + 32))(v10[6] + v19 * v13, v7, v2);
      uint64_t v27 = v10[2];
      BOOL v28 = __OFADD__(v27, 1LL);
      uint64_t v29 = v27 + 1;
      if (v28) {
        goto LABEL_18;
      }
      v10[2] = v29;
    }

    if (++v11 == v32) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void sub_4C2F8(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(sub_2C0AC(v3), a1);
  }

  sub_17DD4();
}

void *sub_4C32C()
{
  return sub_8CFC((void *)(v0 + 40), *(void *)(v0 + 64));
}

uint64_t sub_4C34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 152, v5 - 144, v4, a4, 0LL);
}

void *sub_4C360()
{
  return sub_8CFC((void *)(v0 + 40), *(void *)(v0 + 64));
}

void *sub_4C380()
{
  return sub_8CFC((void *)(v0 + 40), *(void *)(v0 + 64));
}

uint64_t sub_4C3A0()
{
  return Logger.logObject.getter();
}

uint64_t sub_4C3A8(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, v1, v2);
}

uint64_t sub_4C3B8(uint64_t a1)
{
  return swift_dynamicCastClass(v1, a1);
}

uint64_t sub_4C3C4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v0, v1);
}

uint64_t sub_4C3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 0LL);
}

uint64_t sub_4C3DC()
{
  return swift_release(v0);
}

uint64_t sub_4C3E8(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

  ;
}

uint64_t sub_4C414()
{
  return static FlowSearchResult.flow(_:)(v0);
}

uint64_t sub_4C41C(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(a1, *(void *)(v2 - 104), v1);
}

uint64_t sub_4C42C(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_4C434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v6 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v4 + 8, a1, 6LL);
}

uint64_t sub_4C44C(uint64_t a1)
{
  return swift_release_n(a1, 2LL);
}

uint64_t sub_4C454()
{
  return swift_release(v0);
}

uint64_t sub_4C45C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return v2(*(void *)(a2 - 256), a1, *(void *)(v3 - 280));
}

  ;
}

uint64_t sub_4C494(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_4C4A8()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_4C4B4(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_4C4BC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_4C4D0(uint64_t a1, unint64_t a2)
{
  return sub_683C(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t sub_4C4DC()
{
  return Logger.logObject.getter();
}

uint64_t sub_4C4E4()
{
  return swift_retain(v0);
}

_WORD *sub_4C4EC(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

void sub_4C4F8()
{
}

  ;
}

uint64_t sub_4C530()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 392));
}

uint64_t sub_4C544()
{
  return static FlowSearchResult.noFlow.getter();
}

uint64_t sub_4C54C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_4C558()
{
  return sub_4A174();
}

BOOL sub_4C560(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void *sub_4C570@<X0>(uint64_t a1@<X8>)
{
  return sub_8CFC((void *)(a1 + 40), *(void *)(a1 + 64));
}

uint64_t sub_4C58C()
{
  return _s20HandleIntentStrategyVwxx_0((void *)(v0 - 144));
}

void sub_4C594()
{
}

uint64_t sub_4C5A4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_4C5B4(uint64_t a1)
{
  return Flow.eraseToAnyFlow()(v1, a1);
}

uint64_t sub_4C5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t sub_4C5CC()
{
  return Logger.logObject.getter();
}

  ;
}

void sub_4C5F0()
{
}

void sub_4C610()
{
}

uint64_t sub_4C630(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_4C638()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

unint64_t sub_4C648(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 88) = a2;
  return sub_2225C();
}

_WORD *sub_4C658(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_4C664(uint64_t a1, unint64_t a2)
{
  return sub_683C(a1, a2, (uint64_t *)(v2 - 120));
}

  ;
}

uint64_t sub_4C67C()
{
  return v1(v0, v2);
}

uint64_t sub_4C688()
{
  return swift_release(v0);
}

void sub_4C694(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_8C84((uint64_t)va1, (uint64_t)va, a3);
}

void sub_4C6A0(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_4C6A8(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_4C6BC()
{
  return static FlowSearchResult.noFlow.getter();
}

uint64_t sub_4C6C4(uint64_t a1)
{
  return sub_54CC(a1, v1 - 120);
}

BOOL sub_4C6CC(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_4C6D4(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_4C6DC()
{
  return swift_unknownObjectRelease_n(v0, 2LL);
}

uint64_t sub_4C6E8(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_4C6F4(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(*(void *)(v2 - 128), a2);
}

uint64_t sub_4C700()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_4C70C()
{
  return *(void *)(v0 - 264);
}

uint64_t sub_4C720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, a2, a3);
}

uint64_t sub_4C734@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_4C740()
{
  return swift_release(*(void *)(v0 - 152));
}

  ;
}

id sub_4C75C(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v55 = a1;
    }
    else {
      uint64_t v55 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_2BB38();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v55);
    sub_2B9FC();
  }

  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v4)
  {
    if (qword_FB1C8 != -1) {
      swift_once(&qword_FB1C8, sub_4CBFC);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_5474(v5, (uint64_t)qword_FD670);
    uint64_t v6 = swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v9 = 134217984;
      if (v3)
      {
        if (a1 < 0) {
          uint64_t v17 = a1;
        }
        else {
          uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
        }
        sub_2BB38();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v17);
        sub_2B9FC();
      }

      else
      {
        uint64_t v10 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
      }

      sub_2B9FC();
      uint64_t v57 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v9 + 4, v9 + 12);
      sub_2B9FC();
      _os_log_impl( &dword_0,  v7,  v8,  "Converting [SiriTimer] to [STTimerShowTimerAndPerformAction]: %ld timers",  v9,  0xCu);
      sub_1B904((uint64_t)v9);
    }

    else
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
    }

    if (v4 >= 1)
    {
      sub_2BB38();
      uint64_t v18 = 0LL;
      unint64_t v19 = _swiftEmptyArrayStorage;
      do
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a1);
        }
        else {
          id v20 = *(id *)(a1 + 8 * v18 + 32);
        }
        uint64_t v21 = v20;
        uint64_t v59 = v20;
        sub_4CC44(&v59, a2, &v57);

        uint64_t v22 = v57;
        if (v57)
        {
          uint64_t v23 = v58;
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
          {
            sub_4D560(0, v19[2] + 1LL);
            unint64_t v19 = v27;
          }

          unint64_t v25 = v19[2];
          unint64_t v24 = v19[3];
          if (v25 >= v24 >> 1)
          {
            sub_4D560(v24 > 1, v25 + 1);
            unint64_t v19 = v28;
          }

          v19[2] = v25 + 1;
          uint64_t v26 = &v19[2 * v25];
          v26[4] = v22;
          void v26[5] = v23;
        }

        ++v18;
      }

      while (v4 != v18);
      sub_2B9FC();
      id v29 = [objc_allocWithZone(STTimerShowTimerAndPerformAction) init];
      uint64_t v30 = v19[2];
      uint64_t v31 = _swiftEmptyArrayStorage;
      if (v30)
      {
        uint64_t v57 = (uint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v30);
        uint64_t v32 = (void **)(v19 + 4);
        do
        {
          unint64_t v33 = *v32;
          v32 += 2;
          id v34 = v33;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v34);
          uint64_t v35 = *(void *)(v57 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v35);
          uint64_t v36 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v34);
          specialized ContiguousArray._endMutation()(v36);
          --v30;
        }

        while (v30);
        uint64_t v37 = (void *)v57;
      }

      else
      {
        uint64_t v37 = _swiftEmptyArrayStorage;
      }

      sub_33CEC(0LL, &qword_FD688, &OBJC_CLASS___STTimer_ptr);
      v38.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v37);
      uint64_t v57 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v39 = v19[2];
      if (v39)
      {
        swift_bridgeObjectRetain(v19);
        uint64_t v40 = 5LL;
        do
        {
          uint64_t v41 = (void *)v19[v40];
          if (v41)
          {
            id v42 = v41;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            unint64_t v44 = *(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFFF8LL));
            unint64_t v43 = *(void *)((char *)&dword_18 + (v57 & 0xFFFFFFFFFFFFFF8LL));
            if (v44 >= v43 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1LL);
            }
            uint64_t v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
            specialized Array._endMutation()(v45, v46, v47, v48, v49, v50, v51, v52);
          }

          v40 += 2LL;
          --v39;
        }

        while (v39);
        swift_bridgeObjectRelease(v19);
        uint64_t v31 = (void *)v57;
      }

      swift_bridgeObjectRelease(v19);
      uint64_t v53 = sub_4D408(a2);
      id v16 = sub_4D41C((uint64_t)v38.super.isa, (uint64_t)v31, v53, v29);

      return v16;
    }

    __break(1u);
    goto LABEL_51;
  }

  if (qword_FB1C8 != -1) {
LABEL_51:
  }
    swift_once(&qword_FB1C8, sub_4CBFC);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_5474(v11, (uint64_t)qword_FD670);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "getSTTimerAction received an empty array of timers: returning nil.", v15, 2u);
    sub_1B904((uint64_t)v15);
  }

  return 0LL;
}

uint64_t sub_4CBFC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FD670);
  sub_5474(v0, (uint64_t)qword_FD670);
  return static SiriTimeLog.timerFlow.getter();
}

void sub_4CC44(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = sub_B7FF0(*a1);
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10)
  {
    swift_bridgeObjectRelease(v7);
LABEL_11:
    if (qword_FB1C8 != -1) {
      swift_once(&qword_FB1C8, sub_4CBFC);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    sub_5474(v29, (uint64_t)qword_FD670);
    id v30 = v5;
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      uint64_t v70 = v34;
      *(_DWORD *)unint64_t v33 = 136315138;
      id v35 = v30;
      id v36 = [v35 description];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      unint64_t v39 = v38;

      uint64_t v68 = sub_683C(v37, v39, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v33 + 4, v33 + 12);

      swift_bridgeObjectRelease(v39);
      _os_log_impl(&dword_0, v31, v32, "Timer ID was nil! %s", v33, 0xCu);
      swift_arrayDestroy(v34, 1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {
    }

    goto LABEL_17;
  }

  sub_33CEC(0LL, &qword_FD688, &OBJC_CLASS___STTimer_ptr);
  id v11 = sub_4D16C(v5);
  if (!v11)
  {
    swift_bridgeObjectRelease(v9);
LABEL_17:
    *a3 = 0LL;
    a3[1] = 0LL;
    return;
  }

  uint64_t v12 = v11;
  if (qword_FB1C8 != -1) {
    swift_once(&qword_FB1C8, sub_4CBFC);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_5474(v13, (uint64_t)qword_FD670);
  id v14 = v12;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t type = v16;
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v64 = swift_slowAlloc(32LL, -1LL);
    uint64_t v70 = v64;
    uint64_t v66 = v8;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v18 = v17 + 12;
    uint64_t v62 = v17 + 4;
    buf = v17;
    id v19 = v14;
    id v20 = [v19 description];
    uint64_t v21 = v12;
    uint64_t v22 = a2;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v67 = a3;
    unint64_t v25 = v24;

    uint64_t v26 = v23;
    a2 = v22;
    uint64_t v12 = v21;
    uint64_t v68 = sub_683C(v26, v25, &v70);
    uint64_t v27 = v18;
    uint64_t v8 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v62, v27);

    unint64_t v28 = v25;
    a3 = v67;
    swift_bridgeObjectRelease(v28);
    _os_log_impl(&dword_0, v15, type, "STTimer: %s", buf, 0xCu);
    swift_arrayDestroy(v64, 1LL);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_slowDealloc(buf, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v40 = sub_7010(a2);
  uint64_t v42 = v41;
  if (v40 == 0x6E776F6E6B6E75LL && v41 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(v9);
    uint64_t v9 = v42;
  }

  else
  {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, 0x6E776F6E6B6E75LL, 0xE700000000000000LL, 0LL);
    swift_bridgeObjectRelease(v42);
    if ((v44 & 1) == 0 && a2 <= 0x12u && ((1 << a2) & 0x611A4) != 0)
    {
      id v45 = [objc_allocWithZone(SASTCommandTemplateAction) init];
      uint64_t v46 = sub_67C4(&qword_FBE58);
      uint64_t v47 = swift_allocObject(v46, 40LL, 7LL);
      *(_OWORD *)(v47 + 16) = xmmword_C2690;
      id v53 = sub_20A24(a2, v8, v9, v48, v49, v50, v51, v52);
      uint64_t v54 = swift_bridgeObjectRelease(v9);
      *(void *)(v47 + 32) = v53;
      uint64_t v70 = v47;
      specialized Array._endMutation()(v54, v55, v56, v57, v58, v59, v60, v61);
      sub_4D4FC(v70, v45);
      *a3 = v12;
      a3[1] = v45;
      return;
    }
  }

  swift_bridgeObjectRelease(v9);
  *a3 = v12;
  a3[1] = 0LL;
}

id sub_4D16C(void *a1)
{
  id v2 = a1;
  uint64_t v3 = sub_58E1C(v2);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    uint64_t v7 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000LL) == 0) {
      uint64_t v7 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v7)
    {
      id v8 = [v2 duration];
      if (v8)
      {
        uint64_t v9 = v8;
        id v10 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) init];
        sub_4D4AC(v5, v6, v10);
        id v11 = [v2 remainingTime];
        [v10 setValue:v11];

        return v10;
      }
    }

    swift_bridgeObjectRelease(v6);
  }

  if (qword_FB1C8 != -1) {
    swift_once(&qword_FB1C8, sub_4CBFC);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_5474(v12, (uint64_t)qword_FD670);
  id v13 = v2;
  id v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v17;
    *(_DWORD *)os_log_type_t v16 = 136315138;
    id v13 = v13;
    id v18 = [v13 description];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    unint64_t v21 = v20;

    uint64_t v23 = sub_683C(v19, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v16 + 4, v16 + 12);

    swift_bridgeObjectRelease(v21);
    _os_log_impl(&dword_0, v14, v15, "STTimer(siriTimer:) Timer ID or duration was nil! %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
  }

  return 0LL;
}

uint64_t sub_4D408(char a1)
{
  return qword_C33D8[a1];
}

id sub_4D41C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  id v9 = [a4 _initWithTimers:a1 templateActions:isa timerAction:a3];

  return v9;
}

void sub_4D4AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setIdentifier:v5];
}

void sub_4D4FC(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setCommands:isa];
}

void sub_4D560(char a1, uint64_t a2)
{
}

void *sub_4D56C(void *a1, char a2)
{
  uint64_t v4 = type metadata accessor for SearchTimerIntent(0LL);
  uint64_t v5 = type metadata accessor for SearchTimerIntentResponse(0LL);
  RCHChildFlowProducersAsync.init()(v4, v5);
  if (qword_FB228 != -1) {
    swift_once(&qword_FB228, sub_66804);
  }
  uint64_t v6 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)(qword_100FB0, v4, v5);
  uint64_t v8 = v7;
  uint64_t v9 = sub_67C4(&qword_FD440);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter(v6, v8, v9);
  sub_54CC((uint64_t)a1, (uint64_t)v14);
  uint64_t v10 = swift_allocObject(&unk_F4A60, 17LL, 7LL);
  *(_BYTE *)(v10 + 16) = a2 & 1;
  unint64_t v11 = sub_4D9A4();
  uint64_t v12 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:responseFlowProducer:)( v14,  &unk_FD718,  v10,  &_s20HandleIntentStrategyVN_0,  v11);
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter(v12);
  _s20HandleIntentStrategyVwxx_0(a1);
  return sub_4D9E0(v14);
}

uint64_t sub_4D6B4(uint64_t a1, uint64_t a2, char a3)
{
  *(_BYTE *)(v3 + 64) = a3;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  return swift_task_switch(sub_4D6D0, 0LL, 0LL);
}

uint64_t sub_4D6D0()
{
  uint64_t v1 = dispatch thunk of SearchTimerIntentResponse.code.getter();
  uint64_t v2 = SearchTimerIntentResponseCode.rawValue.getter(v1);
  if (v2 == SearchTimerIntentResponseCode.rawValue.getter(5LL))
  {
    uint64_t v3 = type metadata accessor for NoOpFlow(0LL);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    *(void *)(v0 + 16) = NoOpFlow.init()();
    unint64_t v4 = sub_4DA70();
    uint64_t v5 = Flow.eraseToAnyFlow()(v3, v4);
    swift_release();
    return sub_2B748(v5, *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    unint64_t v7 = *(unsigned __int8 *)(v0 + 64);
    uint64_t v9 = *(void **)(v0 + 24);
    uint64_t v8 = *(void **)(v0 + 32);
    uint64_t v10 = sub_32928(v8);
    if (v10) {
      unint64_t v11 = (void *)v10;
    }
    else {
      unint64_t v11 = _swiftEmptyArrayStorage;
    }
    uint64_t v12 = sub_4DA14(v8);
    if (v12) {
      id v13 = (void *)v12;
    }
    else {
      id v13 = _swiftEmptyArrayStorage;
    }
    uint64_t v14 = sub_32934(v8);
    if (v14) {
      os_log_type_t v15 = (void *)v14;
    }
    else {
      os_log_type_t v15 = _swiftEmptyArrayStorage;
    }
    uint64_t v16 = _s17ResultSetProviderCMa();
    swift_allocObject(v16, 113LL, 7LL);
    *(void *)(v0 + 40) = sub_2237C( v9,  v7,  (unint64_t)v11,  (unint64_t)v13,  (unint64_t)v15);
    uint64_t v17 = (void *)swift_task_alloc(dword_FC024);
    *(void *)(v0 + 48) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_4D828;
    return sub_22B24();
  }

uint64_t sub_4D828(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 48);
  uint64_t v5 = *v2;
  *(void *)(v5 + 56) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_4D8B0, 0LL, 0LL);
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_4D8B0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4D8E4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_4D8F4(uint64_t a1, uint64_t a2)
{
  char v6 = *(_BYTE *)(v2 + 16);
  unint64_t v7 = (void *)swift_task_alloc(dword_FD714);
  *(void *)(v3 + 16) = v7;
  *unint64_t v7 = v3;
  v7[1] = sub_4D958;
  return sub_4D6B4(a1, a2, v6);
}

uint64_t sub_4D958(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return sub_2B748(a1, *(uint64_t (**)(void))(v4 + 8));
}

unint64_t sub_4D9A4()
{
  unint64_t result = qword_FD720;
  if (!qword_FD720)
  {
    unint64_t result = swift_getWitnessTable(&unk_C29F8, &_s20HandleIntentStrategyVN_0);
    atomic_store(result, (unint64_t *)&qword_FD720);
  }

  return result;
}

void *sub_4D9E0(void *a1)
{
  return a1;
}

uint64_t sub_4DA14(void *a1)
{
  id v1 = [a1 unmatchedTimers];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for SiriTimer(0LL);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

unint64_t sub_4DA70()
{
  unint64_t result = qword_FD2D8;
  if (!qword_FD2D8)
  {
    uint64_t v1 = type metadata accessor for NoOpFlow(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NoOpFlow, v1);
    atomic_store(result, (unint64_t *)&qword_FD2D8);
  }

  return result;
}

void sub_4DAB0(uint64_t a1, uint64_t a2)
{
}

void sub_4DABC(uint64_t a1, uint64_t a2)
{
}

void sub_4DAC8(uint64_t a1, uint64_t a2)
{
}

void sub_4DAD4(uint64_t a1, uint64_t a2)
{
}

void sub_4DAE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3();
  uint64_t v7 = v6;
  if (v5 != ((uint64_t (*)(uint64_t))a3)(a2) || v7 != v8)
  {
    uint64_t v10 = v8;
    uint64_t v11 = sub_5A3C8();
    sub_4C5C4(v11, v12, v13, v10);
  }

  sub_2B7C4();
  sub_18034();
  sub_17B78();
}

void *sub_4DB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *(void *)(type metadata accessor for URL(0LL) - 8);
  sub_17B6C();
  __chkstk_darwin(v5);
  sub_17D14();
  uint64_t v25 = v6;
  uint64_t v28 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  sub_17B6C();
  __chkstk_darwin(v7);
  sub_17D14();
  uint64_t v8 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    uint64_t v9 = 4LL;
    while (1)
    {
      id v10 = (a1 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a1)
          : *(id *)(a1 + 8 * v9);
      if (__OFADD__(v9 - 4, 1LL)) {
        break;
      }
      uint64_t v29 = v9 - 3;
      uint64_t v11 = v10;
      id v12 = [v10 timerID];
      uint64_t v13 = a3;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v14 = UUID.uuidString.getter();
      uint64_t v16 = v15;
      sub_5A308(v28);
      if (v14 == a2 && v16 == a3) {
        goto LABEL_20;
      }
      sub_5A078();
      sub_5A530();
      if ((v14 & 1) != 0) {
        goto LABEL_21;
      }
      id v18 = [v11 timerURL];
      a3 = v25;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = URL.absoluteString.getter();
      uint64_t v21 = v20;
      sub_5A308(v26);
      if (v19 == a2 && v21 == v13)
      {
LABEL_20:
        sub_2BE5C();
LABEL_21:
        sub_17CD0();
        sub_2BE5C();
        return v11;
      }

      sub_5A078();
      sub_5A530();
      if ((v19 & 1) != 0) {
        goto LABEL_21;
      }

      ++v9;
      if (v29 == v8) {
        goto LABEL_27;
      }
    }

    __break(1u);
LABEL_23:
    if (a1 < 0) {
      uint64_t v23 = a1;
    }
    else {
      uint64_t v23 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

LABEL_27:
  sub_17CD0();
  sub_2BE5C();
  return 0LL;
}

void *UndoTimerChangeStateFlow.__allocating_init(deviceState:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SiriTimerManagerImpl(0LL);
  sub_2B838(v2);
  SiriTimerManagerImpl.init()();
  [objc_allocWithZone(MTTimerManager) init];
  sub_548C(a1, (uint64_t)v10);
  uint64_t v3 = type metadata accessor for UndoTimerChangeStateFlow(0LL);
  sub_2B838(v3);
  uint64_t v4 = sub_5A434();
  uint64_t v8 = sub_58EE4(v4, v5, v6, v7);
  sub_17FF4();
  return v8;
}

uint64_t type metadata accessor for UndoTimerChangeStateFlow(uint64_t a1)
{
  uint64_t result = qword_FD810;
  if (!qword_FD810) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UndoTimerChangeStateFlow);
  }
  return result;
}

uint64_t sub_4DE58()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FD728);
  sub_5474(v0, (uint64_t)qword_FD728);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_4DEA0(uint64_t a1)
{
  return sub_4DED8( a1,  (uint64_t (*)(void))&type metadata accessor for SiriTimeEventSender.TaskType,  qword_100EE0,  &enum case for SiriTimeEventSender.TaskType.undoModifyTimer(_:));
}

uint64_t sub_4DEBC(uint64_t a1)
{
  return sub_4DED8( a1,  (uint64_t (*)(void))&type metadata accessor for SiriTimeEventSender.Attribute,  qword_100EF8,  &enum case for SiriTimeEventSender.Attribute.corrections(_:));
}

uint64_t sub_4DED8(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, unsigned int *a4)
{
  uint64_t v6 = a2(0LL);
  sub_1B53C(v6, a3);
  uint64_t v7 = sub_5474(v6, (uint64_t)a3);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104LL))(v7, *a4, v6);
}

uint64_t UndoTimerChangeStateFlow.on(input:)()
{
  uint64_t v107 = v1;
  uint64_t v2 = type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
  uint64_t v109 = *(void *)(v2 - 8);
  uint64_t v110 = v2;
  sub_17B6C();
  __chkstk_darwin(v3);
  sub_17D14();
  uint64_t v108 = v4;
  uint64_t v113 = type metadata accessor for DirectInvocationUtils.Timer.UserInfoKey(0LL);
  uint64_t v5 = *(void *)(v113 - 8);
  uint64_t v6 = __chkstk_darwin(v113);
  uint64_t v112 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v102 - v9;
  __chkstk_darwin(v8);
  id v12 = (char *)&v102 - v11;
  uint64_t v13 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_1C308();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for Parse(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_1C308();
  uint64_t v22 = v21 - v20;
  Input.parse.getter(v23);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v19 + 88))(v22, v18) != enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v18);
    return 0LL;
  }

  sub_433D8(v22, *(uint64_t (**)(uint64_t, uint64_t))(v19 + 96));
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v17, v22, v13);
  uint64_t v25 = Parse.DirectInvocation.userData.getter(v24);
  uint64_t v26 = v17;
  if (!v25)
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v13);
    return 0LL;
  }

  uint64_t v105 = v13;
  uint64_t v27 = v14;
  uint64_t v28 = v26;
  uint64_t v29 = *(uint64_t (**)(char *, void, uint64_t))(v5 + 104);
  uint64_t v30 = v29(v12, enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:), v113);
  uint64_t v106 = v25;
  uint64_t v31 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v30);
  uint64_t v33 = v32;
  sub_5A620((uint64_t)v12);
  uint64_t v34 = v31;
  uint64_t v35 = v106;
  sub_1C318(v34, v33, v106, &v116);
  uint64_t v36 = sub_1BC04();
  if (!v117)
  {
    uint64_t v41 = v35;
LABEL_11:
    swift_bridgeObjectRelease(v41);
    sub_17A70((uint64_t)&v116, &qword_FCD20);
LABEL_14:
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v28, v105);
    return 0LL;
  }

  if ((sub_59E7C(v36, v37, v38, (uint64_t)&type metadata for String) & 1) == 0)
  {
    uint64_t v42 = v35;
LABEL_13:
    swift_bridgeObjectRelease(v42);
    goto LABEL_14;
  }

  char v39 = sub_7E238(v114, v115);
  if (v39 == 19)
  {
    sub_5A5C0(v28, *(uint64_t (**)(uint64_t, void))(v14 + 8));
    uint64_t v40 = v35;
LABEL_7:
    swift_bridgeObjectRelease(v40);
    return 0LL;
  }

  char v44 = v39;
  uint64_t v45 = v29(v10, enum case for DirectInvocationUtils.Timer.UserInfoKey.timerId(_:), v113);
  uint64_t v46 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v45);
  uint64_t v48 = v47;
  sub_5A620((uint64_t)v10);
  uint64_t v49 = v106;
  sub_1C318(v46, v48, v106, &v116);
  uint64_t v50 = sub_1BC04();
  if (!v117)
  {
    uint64_t v41 = v49;
    goto LABEL_11;
  }

  if ((sub_59E7C(v50, v51, v52, (uint64_t)&type metadata for String) & 1) == 0)
  {
    uint64_t v42 = v49;
    goto LABEL_13;
  }

  uint64_t v53 = v115;
  uint64_t v103 = v114;
  uint64_t v54 = sub_5A580();
  BOOL v56 = v54 == 0x6573756170LL && v55 == 0xE500000000000000LL;
  char v104 = (uint8_t *)v53;
  if (v56)
  {
    sub_2B7C4();
  }

  else
  {
    char v57 = sub_59CE0(v54, v55);
    uint64_t v58 = sub_2B7C4();
    if ((v57 & 1) == 0) {
      goto LABEL_30;
    }
  }

  uint64_t v59 = (uint64_t)v112;
  uint64_t v60 = v29(v112, enum case for DirectInvocationUtils.Timer.UserInfoKey.duration(_:), v113);
  uint64_t v61 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v60);
  uint64_t v63 = v62;
  sub_5A620(v59);
  sub_1C318(v61, v63, v106, &v116);
  uint64_t v64 = sub_1BC04();
  if (!v117)
  {
    swift_bridgeObjectRelease(v104);
    sub_2B7C4();
    sub_17A70((uint64_t)&v116, &qword_FCD20);
    uint64_t v81 = v14;
LABEL_50:
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v28, v105);
    return 0LL;
  }

  uint64_t v58 = sub_59E7C(v64, v65, v66, (uint64_t)&type metadata for Double);
  if (!(_DWORD)v58)
  {
    uint64_t v81 = v14;
    sub_1BC04();
    swift_bridgeObjectRelease(v106);
    goto LABEL_50;
  }

  uint64_t v67 = v111 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_remainingTime;
  *(void *)uint64_t v67 = v114;
  *(_BYTE *)(v67 + 8) = 0;
LABEL_30:
  uint64_t v68 = v28;
  uint64_t v69 = Parse.DirectInvocation.identifier.getter(v58);
  uint64_t v71 = v70;
  uint64_t v72 = v108;
  uint64_t v73 = v109;
  uint64_t v74 = sub_59EF4( v108,  enum case for DirectInvocationUtils.Timer.URI.undo(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v109 + 104));
  uint64_t v75 = DirectInvocationUtils.Timer.URI.rawValue.getter(v74);
  uint64_t v77 = v76;
  sub_433D8(v72, *(uint64_t (**)(uint64_t, uint64_t))(v73 + 8));
  if (v69 == v75 && v71 == v77)
  {
    swift_bridgeObjectRelease_n(v71, 2LL);
    uint64_t v80 = v104;
  }

  else
  {
    char v79 = sub_4C5C4(v69, v71, v75, v77);
    sub_1BC04();
    sub_2B7C4();
    uint64_t v80 = v104;
    if ((v79 & 1) == 0)
    {
LABEL_35:
      sub_5A5C0(v68, *(uint64_t (**)(uint64_t, void))(v27 + 8));
      sub_1BC04();
      uint64_t v40 = v106;
      goto LABEL_7;
    }
  }

  uint64_t v82 = sub_5A580();
  if (v82 == 0x6573756170LL && v83 == 0xE500000000000000LL) {
    goto LABEL_51;
  }
  char v85 = sub_59CE0(v82, v83);
  sub_2B7C4();
  if ((v85 & 1) != 0) {
    goto LABEL_52;
  }
  uint64_t v86 = sub_5A580();
  if (v86 == 0x656D75736572LL && v87 == 0xE600000000000000LL)
  {
LABEL_51:
    sub_2B7C4();
    goto LABEL_52;
  }

  char v89 = sub_4C5C4(v86, v87, 0x656D75736572LL, 0xE600000000000000LL);
  sub_2B7C4();
  if ((v89 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_52:
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v90 = v68;
  uint64_t v91 = sub_1BD34();
  uint64_t v92 = (os_log_s *)sub_39658(v91, (uint64_t)qword_FD728);
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (_WORD *)sub_1B9DC();
    sub_2BA04(v94);
    sub_1BBEC(&dword_0, v92, v93, "UndoTimerChangeStateFlow: accepting input.", v80);
    uint64_t v95 = (uint64_t)v80;
    uint64_t v80 = v104;
    sub_1B904(v95);
  }

  uint64_t v96 = v111;
  uint64_t v97 = *(void *)(v111 + 128);
  *(void *)(v111 + 120) = v103;
  *(void *)(v96 + 128) = v80;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = v106;
  sub_A3B94(v106, v107);
  swift_bridgeObjectRelease(v98);
  sub_5A5C0(v90, *(uint64_t (**)(uint64_t, void))(v27 + 8));
  sub_599A4( v96 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_followupPluginAction,  (uint64_t)&v116);
  uint64_t v99 = sub_5A3C8();
  sub_5913C(v99, v100, v101);
  swift_endAccess(&v116);
  *(_BYTE *)(v96 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_operation) = v44;
  return 1LL;
}

uint64_t UndoTimerChangeStateFlow.execute(completion:)()
{
  uint64_t v0 = type metadata accessor for UndoTimerChangeStateFlow(0LL);
  sub_11718( &qword_FD420,  type metadata accessor for UndoTimerChangeStateFlow,  (uint64_t)&protocol conformance descriptor for UndoTimerChangeStateFlow);
  uint64_t v1 = sub_5A3C8();
  return Flow.deferToExecuteAsync(_:)(v1, v2, v0, v3);
}

uint64_t UndoTimerChangeStateFlow.execute()(uint64_t a1)
{
  v2[145] = v1;
  v2[144] = a1;
  v2[146] = *v1;
  uint64_t v3 = sub_67C4(&qword_FD740);
  v2[147] = sub_1B6C8(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for PluginAction(0LL);
  v2[148] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[149] = v5;
  v2[150] = sub_1B6C8(v5);
  uint64_t v6 = type metadata accessor for ResumeTimerHandledOnWatchParameters(0LL);
  v2[151] = v6;
  v2[152] = sub_1B6C8(*(void *)(v6 - 8));
  uint64_t v7 = sub_67C4(&qword_FBD98);
  v2[153] = sub_1B6C8(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for PauseTimerHandledOnWatchParameters(0LL);
  v2[154] = v8;
  v2[155] = sub_1B6C8(*(void *)(v8 - 8));
  uint64_t v9 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[156] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[157] = v10;
  v2[158] = sub_2B4DC(v10);
  v2[159] = sub_1B970();
  v2[160] = sub_1B970();
  v2[161] = sub_1B970();
  uint64_t v11 = type metadata accessor for SiriTimePluginModel(0LL);
  v2[162] = v11;
  v2[163] = sub_2B4DC(*(void *)(v11 - 8));
  v2[164] = sub_1B970();
  uint64_t v12 = sub_1BD34();
  v2[165] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[166] = v13;
  v2[167] = sub_1B6C8(v13);
  uint64_t v14 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v2[168] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[169] = v15;
  v2[170] = sub_1B6C8(v15);
  uint64_t v16 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[171] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[172] = v17;
  v2[173] = sub_2B4DC(v17);
  v2[174] = sub_1B970();
  uint64_t v18 = type metadata accessor for DialogPhase(0LL);
  v2[175] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v2[176] = v19;
  v2[177] = sub_2B4DC(v19);
  v2[178] = sub_1B970();
  v2[179] = sub_1B970();
  v2[180] = sub_1B970();
  v2[181] = sub_1B970();
  v2[182] = sub_1B970();
  uint64_t v20 = sub_2BB7C();
  v2[183] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v2[184] = v21;
  v2[185] = sub_2B4DC(v21);
  v2[186] = sub_1B970();
  uint64_t v22 = sub_5A13C();
  v2[187] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v2[188] = v23;
  v2[189] = sub_1B6C8(v23);
  uint64_t v24 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v2[190] = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  v2[191] = v25;
  v2[192] = sub_1B6C8(v25);
  uint64_t v26 = sub_67C4(&qword_FBFC8);
  v2[193] = sub_2B4DC(*(void *)(v26 - 8));
  v2[194] = sub_1B970();
  uint64_t v27 = sub_67C4(&qword_FBFD0);
  v2[195] = sub_1B6C8(*(void *)(v27 - 8));
  uint64_t v28 = sub_67C4(&qword_FBFD8);
  v2[196] = sub_1B6C8(*(void *)(v28 - 8));
  uint64_t v29 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  v2[197] = v29;
  uint64_t v30 = *(void *)(v29 - 8);
  v2[198] = v30;
  v2[199] = sub_1B6C8(v30);
  uint64_t v31 = type metadata accessor for ActivityType(0LL);
  v2[200] = v31;
  uint64_t v32 = *(void *)(v31 - 8);
  v2[201] = v32;
  v2[202] = sub_1B6C8(v32);
  sub_1B9B8();
  return sub_1B758();
}

#error "4EB64: call analysis failed (funcsize=367)"
uint64_t sub_4EF28()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sub_599D8();
  uint64_t v1 = *(void **)(v0 + 1656);
  sub_2B71C();
  *(void *)(v3 + 1672) = v2;
  sub_2B988(v4);

  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_4EF94()
{
  uint64_t v3 = (void *)v1[209];
  sub_5A238();
  uint64_t v4 = sub_5A1B8();
  v1[210] = (uint64_t)v4;
  uint64_t v5 = sub_18034();
  if (v4)
  {
    if (sub_5A468(v5, "state") == (char *)&dword_0 + 2)
    {
      sub_59CA4();
      if (qword_FB1D0 != -1) {
        swift_once(&qword_FB1D0, sub_4DE58);
      }
      sub_39658(v1[165], (uint64_t)qword_FD728);
      os_log_type_t v6 = sub_1BCD0();
      if (sub_2B854(v6))
      {
        uint64_t v7 = (_WORD *)sub_1B9DC();
        sub_2B938(v7);
        sub_461C0( &dword_0,  v8,  v9,  "UndoTimerChangeStateFlow: Attempting to pause a paused timer: returning .failureTimerAlreadyPaused");
        sub_1B904(v2);
      }

      sub_2BF0C();
      v1[211] = SiriTimer.__allocating_init(mtTimer:)(v4);
      uint64_t v10 = (uint64_t **)swift_task_alloc(dword_FD7BC);
      v1[212] = (uint64_t)v10;
      *uint64_t v10 = v1;
      v10[1] = (uint64_t *)sub_4F1BC;
      sub_59BE4();
      sub_5A4F8();
      return sub_59EA4(v11, v12);
    }

    else
    {
      uint64_t v20 = (void *)swift_task_alloc(dword_FD7C4);
      v1[213] = (uint64_t)v20;
      sub_5A034(v20, (uint64_t)sub_4F220);
      uint64_t v21 = sub_59F84();
      return sub_584E0(v21);
    }
  }

  else
  {
    sub_59CA4();
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    sub_39658(v1[165], (uint64_t)qword_FD728);
    os_log_type_t v14 = sub_32A5C();
    if (sub_1BB80(v14))
    {
      uint64_t v15 = (_WORD *)sub_1B9DC();
      sub_2BA04(v15);
      sub_1BAA8( &dword_0,  v16,  v17,  "UndoTimerChangeStateFlow: mtTimerManager.timersSync returned no timer with matching timerID: no timer to change.");
      sub_1B904(v0);
    }

    uint64_t v18 = (uint64_t **)swift_task_alloc(dword_FD774);
    v1[217] = (uint64_t)v18;
    *uint64_t v18 = v1;
    v18[1] = (uint64_t *)sub_4F73C;
    uint64_t v19 = sub_59BE4();
    return sub_59C4C(v19);
  }

uint64_t sub_4F1BC()
{
  uint64_t v1 = *(void **)(v0 + 1688);
  sub_2B4F0(*(void *)(v0 + 1696));

  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_4F220()
{
  *(_BYTE *)(v1 + 2504) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_4F284()
{
  if (*(_BYTE *)(v1 + 2504) == 1)
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_FD7CC);
    *(void *)(v1 + 1712) = v2;
    *uint64_t v2 = v1;
    v2[1] = sub_4F3E0;
    uint64_t v3 = sub_59F84();
    return sub_57F04(v3, v4);
  }

  else
  {
    sub_59CA4();
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    sub_39658(*(void *)(v1 + 1320), (uint64_t)qword_FD728);
    os_log_type_t v6 = sub_32A5C();
    if (sub_1BB80(v6))
    {
      uint64_t v7 = (_WORD *)sub_1B9DC();
      sub_2BA04(v7);
      sub_1BAA8(&dword_0, v8, v9, "UndoTimerChangeStateFlow: Failed to pause mtTimer");
      sub_1B904(v0);
    }

    sub_59C94();
    sub_59C1C(v10, enum case for SiriTimeEventSender.ReasonDescription.failedToPauseTimer(_:));
    uint64_t v11 = (void *)swift_task_alloc(dword_FD76C);
    *(void *)(v1 + 1728) = v11;
    *uint64_t v11 = v1;
    v11[1] = sub_4F5F0;
    uint64_t v12 = sub_59BE4();
    return sub_59C38(v12, v13);
  }

uint64_t sub_4F3E0()
{
  *(void *)(v1 + 1720) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_4F444()
{
  uint64_t v2 = *(void **)(v1 + 1720);
  if (v2)
  {

    *(void *)(v1 + 1832) = *(void *)(v1 + 1720);
    *(void *)(v1 + 1824) = v2;
    id v3 = v2;
    uint64_t v4 = sub_67C4(&qword_FBE58);
    *(void *)(v1 + 1840) = v4;
    uint64_t v5 = (__n128 *)sub_1E854(v4);
    sub_5A158(v5, v6, v7, v8, v9, v10, v11, v12, (__n128)xmmword_C2690);
    id v13 = v3;
    sub_5A228();
    sub_18034();
    sub_5A380();
    sub_5A588(v14);
    sub_2C0EC();
    sub_2BB94();
    sub_5A018();
    uint64_t v15 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
    *(void *)(v1 + 1856) = v15;
    sub_5A4C4(v15, (uint64_t)sub_501D0);
    sub_59E0C(v16);
    return sub_59EFC();
  }

  else
  {
    sub_59CA4();
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    sub_39658(*(void *)(v1 + 1320), (uint64_t)qword_FD728);
    os_log_type_t v18 = sub_32A5C();
    if (sub_1BB80(v18))
    {
      uint64_t v19 = (_WORD *)sub_1B9DC();
      sub_2BA04(v19);
      sub_1BAA8(&dword_0, v20, v21, "UndoTimerChangeStateFlow: Failed to pause mtTimer");
      sub_1B904(v0);
    }

    sub_59C94();
    sub_59C1C(v22, enum case for SiriTimeEventSender.ReasonDescription.failedToPauseTimer(_:));
    uint64_t v23 = (void *)swift_task_alloc(dword_FD76C);
    *(void *)(v1 + 1728) = v23;
    uint64_t v24 = sub_5A250(v23);
    return sub_59F10(v24, v25);
  }

uint64_t sub_4F5F0()
{
  uint64_t v1 = *(void *)(v0 + 1504);
  sub_2B4F0(*(void *)(v0 + 1728));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1B9B8();
  return sub_2F414(v2, v3, v4);
}

#error "4F6C4: call analysis failed (funcsize=53)"
uint64_t sub_4F73C()
{
  uint64_t v0;
  sub_59984();
  sub_2B4F0(*(void *)(v0 + 1736));
  sub_1B9B8();
  return sub_1B758();
}

#error "4F7F4: call analysis failed (funcsize=53)"
uint64_t sub_4F86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_599D8();
  sub_2B71C();
  *(void *)(v1 + 1752) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_4F8D0()
{
  uint64_t v2 = v0 + 87;
  uint64_t v3 = (void *)v0[219];
  if (!v3)
  {
    _s20HandleIntentStrategyVwxx_0(v2);
LABEL_10:
    uint64_t v15 = (void *)swift_task_alloc(dword_FD7A4);
    v0[221] = (uint64_t)v15;
    sub_5A034(v15, (uint64_t)sub_4FB6C);
    return sub_56068();
  }

  uint64_t v4 = _s20HandleIntentStrategyVwxx_0(v2);
  id v5 = sub_5A468(v4, "state");
  uint64_t v6 = (void *)SiriTimerState.rawValue.getter(v5);
  if (v6 != (void *)SiriTimerState.rawValue.getter(2LL))
  {

    goto LABEL_10;
  }

  sub_59CA4();
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  sub_39658(v0[165], (uint64_t)qword_FD728);
  os_log_type_t v7 = sub_1BCD0();
  if (sub_2B854(v7))
  {
    uint64_t v8 = (_WORD *)sub_1B9DC();
    sub_2B938(v8);
    sub_461C0( &dword_0,  v9,  v10,  "UndoTimerChangeStateFlow: Attempting to pause a paused timer: returning .failureTimerAlreadyPaused");
    sub_1B904(v1);
  }

  uint64_t v11 = (uint64_t **)swift_task_alloc(dword_FD7BC);
  v0[220] = (uint64_t)v11;
  *uint64_t v11 = v0;
  v11[1] = (uint64_t *)sub_4FA3C;
  sub_59BE4();
  sub_5A4F8();
  return sub_59EA4(v12, v13);
}

uint64_t sub_4FA3C()
{
  return sub_1B758();
}

#error "4FAF4: call analysis failed (funcsize=53)"
uint64_t sub_4FB6C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  sub_599D8();
  sub_2B71C();
  *(_BYTE *)(v1 + 2505) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_4FBD0()
{
  if (*(_BYTE *)(v0 + 2505) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_FD7AC);
    *(void *)(v0 + 1776) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_4FCB8;
    return sub_55A60(*(double *)(v0 + 1640));
  }

  else
  {
    *(_BYTE *)(v0 + 2508) = 0;
    sub_59B28();
    sub_59BB4();
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SiriTimerManagerIOS.currentTimer()[1]);
    *(void *)(v0 + 1808) = v3;
    sub_5A0C8(v3, (uint64_t)sub_5001C);
    sub_59CAC();
    return sub_59AF8();
  }

uint64_t sub_4FCB8()
{
  *(_BYTE *)(v1 + 2506) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_4FD1C()
{
  if (*(_BYTE *)(v0 + 2506) == 1)
  {
    sub_59B28();
    sub_59BB4();
    uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SiriTimerManagerIOS.currentTimer()[1]);
    uint64_t v2 = sub_4FDE0;
    *(void *)(v0 + 1784) = v1;
  }

  else
  {
    *(_BYTE *)(v0 + 2508) = 0;
    sub_59B28();
    sub_59BB4();
    uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SiriTimerManagerIOS.currentTimer()[1]);
    uint64_t v2 = sub_5001C;
    *(void *)(v0 + 1808) = v1;
  }

  sub_5A0C8(v1, (uint64_t)v2);
  sub_59CAC();
  return sub_59AF8();
}

uint64_t sub_4FDE0()
{
  *(void *)(v1 + 1792) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_4FE44()
{
  uint64_t v1 = *(void *)(v0 + 1792);
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 296));
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_FD7B4);
    *(void *)(v0 + 1800) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_4FF28;
    uint64_t v3 = sub_59F84();
    return sub_5668C(v3);
  }

  else
  {
    *(_BYTE *)(v0 + 2508) = 0;
    sub_59B28();
    sub_59BB4();
    id v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SiriTimerManagerIOS.currentTimer()[1]);
    *(void *)(v0 + 1808) = v5;
    sub_5A0C8(v5, (uint64_t)sub_5001C);
    sub_59CAC();
    return sub_59AF8();
  }

uint64_t sub_4FF28()
{
  *(_BYTE *)(v1 + 2507) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_4FF8C()
{
  *(_BYTE *)(v0 + 2508) = *(_BYTE *)(v0 + 2507);
  sub_59B28();
  sub_59BB4();
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SiriTimerManagerIOS.currentTimer()[1]);
  *(void *)(v0 + 1808) = v1;
  sub_5A0C8(v1, (uint64_t)sub_5001C);
  sub_59CAC();
  return sub_59AF8();
}

uint64_t sub_5001C()
{
  *(void *)(v1 + 1816) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_50080()
{
  uint64_t v2 = *(void *)(v1 + 1816);
  int v3 = *(unsigned __int8 *)(v1 + 2508);
  _s20HandleIntentStrategyVwxx_0((void *)(v1 + 736));
  if (v3 != 1 || v2 == 0)
  {
    sub_5A0B4();
    sub_215A8( enum case for SiriTimeEventSender.ReasonDescription.failedToPauseTimer(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 104));
    id v5 = (void *)swift_task_alloc(dword_FD76C);
    *(void *)(v1 + 2072) = v5;
    uint64_t v6 = sub_5A250(v5);
    return sub_59F10(v6, v7);
  }

  else
  {
    uint64_t v8 = *(void **)(v1 + 1816);
    *(void *)(v1 + 1832) = v8;
    *(void *)(v1 + 1824) = v8;
    id v9 = v8;
    uint64_t v10 = sub_67C4(&qword_FBE58);
    *(void *)(v1 + 1840) = v10;
    uint64_t v11 = (__n128 *)sub_1E854(v10);
    sub_5A158(v11, v12, v13, v14, v15, v16, v17, v18, (__n128)xmmword_C2690);
    id v19 = v9;
    sub_5A228();
    sub_18034();
    sub_5A380();
    sub_5A588(v20);
    sub_2C0EC();
    sub_2BB94();
    sub_5A018();
    uint64_t v21 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
    *(void *)(v1 + 1856) = v21;
    sub_5A4C4(v21, (uint64_t)sub_501D0);
    sub_59E0C(v22);
    return sub_59EFC();
  }

uint64_t sub_501D0()
{
  *(void *)(v1 + 1864) = v0;
  *(void *)(v1 + 1872) = v2;
  sub_2B988(v3);
  sub_18034();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_50240()
{
  uint64_t v4 = *(void *)(v1 + 840);
  uint64_t v5 = *(void *)(v1 + 848);
  *(_BYTE *)(v1 + 2509) = sub_5A180() & 1;
  sub_5A0F0();
  sub_3822C( v2,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 104));
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  sub_5A504();
  uint64_t v6 = sub_5474(v4, (uint64_t)qword_FD728);
  *(void *)(v1 + 1880) = v6;
  sub_5A0D4();
  uint64_t v7 = mach_absolute_time();
  uint64_t v8 = sub_5A1A4(v7);
  static ApplicationContext.shared.getter(v8);
  sub_5A328();
  sub_1BC50();
  uint64_t v9 = *(void *)(v1 + 928);
  char v10 = sub_5A1E0();
  _s20HandleIntentStrategyVwxx_0((void *)v0);
  if (v5 & 1 | ((v10 & 1) == 0))
  {
    sub_5A104();
    SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
    sub_5A470();
    uint64_t v11 = *(void *)(v1 + 1848);
    uint64_t v12 = sub_1E854(*(void *)(v1 + 1840));
    *(_OWORD *)(v12 + 16) = xmmword_C2690;
    *(void *)(v12 + 32) = v11;
    sub_59DDC(v12, v13, v14, v15, v16, v17, v18, v19);
    if ((v6 & 1) != 0)
    {
      *(void *)(v1 + 1888) = v408;
      uint64_t v20 = dword_100204;
      swift_retain();
      uint64_t v21 = (void *)swift_task_alloc(v20);
      *(void *)(v1 + 1896) = v21;
      sub_59EE8(v21, (uint64_t)sub_508C8);
      sub_59F4C();
      return sub_A2AA4(v22);
    }

    else
    {
      *(void *)(v1 + 1928) = v408;
      uint64_t v61 = dword_100A7C;
      swift_retain();
      uint64_t v62 = (void *)swift_task_alloc(v61);
      *(void *)(v1 + 1936) = v62;
      sub_59EE8(v62, (uint64_t)sub_50BC4);
      sub_59F4C();
      return sub_BAB2C(v63);
    }
  }

  id v24 = *(id *)(v1 + 1824);
  uint64_t v25 = sub_1E854(*(void *)(v1 + 1840));
  *(_OWORD *)(v25 + 16) = xmmword_C2690;
  *(void *)(v25 + 32) = v24;
  sub_59DDC(v25, v26, v27, v28, v29, v30, v31, v32);
  id v33 = v24;
  id v34 = sub_5A614();
  *(void *)(v1 + 1976) = v34;
  sub_2B7C4();
  if (v34)
  {
    uint64_t v35 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
    *(void *)(v1 + 1136) = 0LL;
    id v36 = sub_5A448(v35, "archivedDataWithRootObject:requiringSecureCoding:error:");
    uint64_t v37 = *(void **)(v1 + 1136);
    if (v36)
    {
      id v38 = v36;
      uint64_t v39 = *(void *)(v1 + 1848);
      uint64_t v40 = *(void *)(v1 + 1840);
      id v41 = v37;
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
      sub_5A518();
      *(void *)(v1 + 1984) = v24;
      *(void *)(v1 + 1992) = v9;
      uint64_t v42 = sub_1E854(v40);
      *(_OWORD *)(v42 + 16) = xmmword_C2690;
      *(void *)(v42 + 32) = v39;
      sub_59DDC(v42, v43, v44, v45, v46, v47, v48, v49);
      *(void *)(v1 + 2000) = v408;
      swift_retain();
      sub_5A5C8();
      uint64_t v50 = sub_5A204();
      sub_59FB4(v50);
      uint64_t v51 = sub_5A370();
      SpeakableString.init(serializedValue:)(v51, v52);
      uint64_t v53 = sub_5A16C();
      sub_5A5B4(v53, v54, &qword_FBD98);
      uint64_t v55 = type metadata accessor for SirikitApp(0LL);
      if (qword_FB228 != -1) {
        swift_once(&qword_FB228, sub_66804);
      }
      BOOL v56 = *(uint64_t **)(v1 + 1240);
      uint64_t v57 = swift_retain();
      SirikitApp.init(app:)(v57);
      sub_5A554();
      *BOOL v56 = v55;
      sub_BA500();
      uint64_t v59 = v58;
      *(void *)(v1 + 2008) = v58;
      uint64_t v60 = (void *)sub_5A5DC();
      *(void *)(v1 + 2016) = v60;
      sub_59EE8(v60, (uint64_t)sub_50E78);
      return sub_59D10( 0xD000000000000019LL,  0x80000000000C8180LL,  v59,  (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:)
                                 + (void)v24));
    }

    id v24 = v37;
    sub_1BC04();
    uint64_t v78 = _convertNSErrorToError(_:)(v37);

    uint64_t v402 = v78;
    swift_willThrow(v79, v80, v81, v82, v83, v84, v85, v86);
  }

  else
  {
    uint64_t v64 = swift_bridgeObjectRelease(*(void *)(v1 + 1872));
    Logger.logObject.getter(v64);
    os_log_type_t v65 = sub_1BCD0();
    if (sub_2B854(v65))
    {
      uint64_t v66 = (_WORD *)sub_1B9DC();
      sub_2B938(v66);
      sub_461C0(&dword_0, v67, v68, "Could not get timer action from timer.");
      sub_1B904((uint64_t)v24);
    }

    sub_5A090();
    sub_59EF4( v6,  enum case for SiriTimeEventSender.ReasonDescription.failedToCastTimer(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104));
    sub_1BC80(v6);
    sub_5A3E4();
    sub_599A4(v5 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason, v1 + 1088);
    sub_5A404();
    sub_5A1D8();
    sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v69 = sub_5A12C();
    uint64_t v70 = sub_2F6A0(v69);
    *uint64_t v71 = 1;
    uint64_t v402 = v70;
    swift_willThrow(v70, v71, v72, v73, v74, v75, v76, v77);
  }

  uint64_t v87 = *(void **)(v1 + 1880);
  sub_5A358();
  sub_59B18(enum case for SiriTimeEventSender.ReasonDescription.errorProducingOutput(_:), v88);
  sub_2B678((uint64_t)v24);
  sub_59ABC((uint64_t)v24);
  uint64_t v89 = v5 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason;
  sub_599A4(v5 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason, v1 + 1016);
  sub_59B08();
  uint64_t v90 = sub_59E74();
  Logger.logObject.getter(v90);
  os_log_type_t v91 = sub_32A5C();
  if (sub_2B854(v91))
  {
    uint64_t v92 = (_WORD *)sub_1B9DC();
    sub_2B938(v92);
    sub_461C0(&dword_0, v93, v94, "UndoTimerChangeStateFlow: Error publishing Success output.");
    sub_1B904(v89);
  }

  uint64_t v95 = *(void **)(v1 + 1832);
  uint64_t v96 = *(void **)(v1 + 1824);
  uint64_t v407 = *(void *)(v1 + 1488);
  uint64_t v405 = *(void *)(v1 + 1472);
  uint64_t v406 = *(void *)(v1 + 1464);
  uint64_t v404 = *(void *)(v1 + 1456);
  uint64_t v97 = *(void *)(v1 + 1408);
  swift_errorRelease(v402);
  sub_1E83C();

  sub_59B94();
  sub_17D54(v404, *(uint64_t (**)(uint64_t, uint64_t))(v97 + 8));
  (*(void (**)(uint64_t, uint64_t))(v405 + 8))(v407, v406);
  sub_59974();
  sub_59998();
  sub_599FC();
  sub_1BA38();
  sub_1B838();
  sub_1BA8C();
  sub_1BA60();
  sub_1BAD0();
  sub_1BABC();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  uint64_t v98 = swift_task_dealloc();
  uint64_t v106 = sub_1B910(v98, v99, v100, v101, v102, v103, v104, v105, v235, v252);
  uint64_t v114 = sub_1B8C4(v106, v107, v108, v109, v110, v111, v112, v113, v236, v253, v269);
  uint64_t v122 = sub_1B8BC(v114, v115, v116, v117, v118, v119, v120, v121, v237, v254, v270, v285);
  uint64_t v130 = sub_1B8B4(v122, v123, v124, v125, v126, v127, v128, v129, v238, v255, v271, v286, v300);
  uint64_t v138 = sub_1B864(v130, v131, v132, v133, v134, v135, v136, v137, v239, v256, v272, v287, v301, v314);
  uint64_t v146 = sub_1B874(v138, v139, v140, v141, v142, v143, v144, v145, v240, v257, v273, v288, v302, v315, v327);
  uint64_t v154 = sub_1B8AC(v146, v147, v148, v149, v150, v151, v152, v153, v241, v258, v274, v289, v303, v316, v328, v339);
  uint64_t v162 = sub_1B8A4(v154, v155, v156, v157, v158, v159, v160, v161, v242, v259, v275, v290, v304, v317, v329, v340, v350);
  uint64_t v170 = sub_1B958( v162,  v163,  v164,  v165,  v166,  v167,  v168,  v169,  v243,  v260,  v276,  v291,  v305,  v318,  v330,  v341,  v351,  v360);
  uint64_t v178 = sub_1B950( v170,  v171,  v172,  v173,  v174,  v175,  v176,  v177,  v244,  v261,  v277,  v292,  v306,  v319,  v331,  v342,  v352,  v361,  v369);
  uint64_t v186 = sub_1B9A0( v178,  v179,  v180,  v181,  v182,  v183,  v184,  v185,  v245,  v262,  v278,  v293,  v307,  v320,  v332,  v343,  v353,  v362,  v370,  v377);
  uint64_t v194 = sub_1B998( v186,  v187,  v188,  v189,  v190,  v191,  v192,  v193,  v246,  v263,  v279,  v294,  v308,  v321,  v333,  v344,  v354,  v363,  v371,  v378,  v384);
  uint64_t v202 = sub_1B990( v194,  v195,  v196,  v197,  v198,  v199,  v200,  v201,  v247,  v264,  v280,  v295,  v309,  v322,  v334,  v345,  v355,  v364,  v372,  v379,  v385,  v390);
  uint64_t v210 = sub_1B988( v202,  v203,  v204,  v205,  v206,  v207,  v208,  v209,  v248,  v265,  v281,  v296,  v310,  v323,  v335,  v346,  v356,  v365,  v373,  v380,  v386,  v391,  v395);
  uint64_t v218 = sub_59AD0( v210,  v211,  v212,  v213,  v214,  v215,  v216,  v217,  v249,  v266,  v282,  v297,  v311,  v324,  v336,  v347,  v357,  v366,  v374,  v381,  v387,  v392,  v396,  v399);
  uint64_t v226 = sub_59AC8( v218,  v219,  v220,  v221,  v222,  v223,  v224,  v225,  v250,  v267,  v283,  v298,  v312,  v325,  v337,  v348,  v358,  v367,  v375,  v382,  v388,  v393,  v397,  v400,  v402);
  sub_5A134( v226,  v227,  v228,  v229,  v230,  v231,  v232,  v233,  v251,  v268,  v284,  v299,  v313,  v326,  v338,  v349,  v359,  v368,  v376,  v383,  v389,  v394,  v398,  v401,  v403,  v404);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_5A124();
  uint64_t v234 = (uint64_t (*)(void))sub_5A2FC();
  return sub_59D2C(v234);
}

uint64_t sub_508C8()
{
  v0[238] = v2;
  v0[239] = v1;
  sub_2B988(v3);
  swift_bridgeObjectRelease(v0[236]);
  if (v1) {
    sub_18034();
  }
  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_50974()
{
  if (*(_BYTE *)(v0 + 2509) != 1 || *(void *)(v0 + 1872) == 0LL)
  {
    uint64_t v2 = *(void *)(v0 + 1296);
    sub_67C4(&qword_FC2C0);
    uint64_t v3 = sub_5A4B8();
    uint64_t v4 = (__n128 *)sub_59E50(v3);
    sub_5A5A8(v4, (__n128)xmmword_C2640);
    sub_5A110();
    *(void *)(v0 + 600) = v2;
    sub_11718( (unint64_t *)&qword_FC2B0,  type metadata accessor for SiriTimePluginModel,  (uint64_t)&protocol conformance descriptor for SiriTimePluginModel);
    *(void *)(v0 + 608) = v5;
    uint64_t v6 = sub_DB90((void *)(v0 + 576));
    sub_5A5F4((uint64_t)v6);
  }

  else
  {
    *(void *)(v0 + 608) = 0LL;
    *(_OWORD *)(v0 + 576) = 0u;
    *(_OWORD *)(v0 + 592) = 0u;
  }

  uint64_t v7 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  *(void *)(v0 + 1920) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_50AA8;
  sub_5A288();
  return sub_59E20();
}

uint64_t sub_50AA8()
{
  uint64_t v1 = v0 + 576;
  uint64_t v2 = *(void **)(v0 + 1904);
  sub_2B4F0(*(void *)(v0 + 1920));

  sub_2B7C4();
  sub_17A70(v1, &qword_FC2B8);
  sub_1B9B8();
  return sub_2F414(v3, v4, v5);
}

uint64_t sub_50B30()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 2056) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_51370;
  sub_59BF4();
  return sub_59CF8();
}

uint64_t sub_50BC4()
{
  v0[243] = v2;
  v0[244] = v1;
  sub_2B988(v3);
  swift_bridgeObjectRelease(v0[241]);
  if (v1) {
    sub_18034();
  }
  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_50C70(uint64_t a1)
{
  uint64_t v2 = v1[234];
  uint64_t v3 = v1[233];
  uint64_t v4 = v1[186];
  static DialogPhase.completion.getter(a1);
  uint64_t v5 = (void *)sub_5A248();
  __int128 v5[2] = v4;
  v5[3] = v3;
  v5[4] = v2;
  sub_5A218((uint64_t)v5, (uint64_t)sub_59168);
  sub_18034();
  sub_1BA14();
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generatePatternOutput(manifest:measure:)[1]);
  v1[245] = v6;
  void *v6 = v1;
  v6[1] = sub_50D3C;
  return sub_59E38();
}

uint64_t sub_50D3C()
{
  v0[246] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[243];
  sub_59D58(v0[161]);

  sub_1B9B8();
  return sub_2F414(v5, v6, v7);
}

uint64_t sub_50DE4()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 2056) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_51370;
  sub_59BF4();
  return sub_59CF8();
}

uint64_t sub_50E78()
{
  v0[253] = v2;
  v0[254] = v1;
  sub_2B988(v3);
  swift_bridgeObjectRelease(v0[251]);
  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_50F18()
{
  uint64_t v1 = v0[234];
  uint64_t v9 = v0[186];
  uint64_t v10 = v0[233];
  uint64_t v2 = v0[182];
  uint64_t v3 = v0[180];
  uint64_t v4 = v0[176];
  uint64_t v5 = v0[175];
  sub_11E50(v0[155], type metadata accessor for PauseTimerHandledOnWatchParameters);
  sub_59FF0();
  sub_18034();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  uint64_t v6 = (void *)sub_5A248();
  v6[2] = v9;
  void v6[3] = v10;
  v6[4] = v1;
  OutputGenerationManifest.init(dialogPhase:_:)(v3, sub_59650, v6);
  swift_bridgeObjectRelease(v1);
  sub_1BABC();
  uint64_t v7 = (uint64_t **)swift_task_alloc(async function pointer to PatternExecutionResult.generatePatternOutput(manifest:measure:)[1]);
  v0[255] = (uint64_t)v7;
  *uint64_t v7 = v0;
  v7[1] = (uint64_t *)sub_51058;
  return PatternExecutionResult.generatePatternOutput(manifest:measure:)(v0 + 57, v0[160], v0[174]);
}

uint64_t sub_51058()
{
  v0[256] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = (void *)v0[253];
  sub_59D58(v0[160]);

  sub_1B9B8();
  return sub_2F414(v5, v6, v7);
}

#error "5124C: call analysis failed (funcsize=109)"
uint64_t sub_512C4()
{
  uint64_t v0;
  void *v1;

  sub_5A594();
  sub_59CBC((__int128 *)(v0 + 456));
  sub_59DB0();
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 2056) = v1;
  sub_5A0C8(v1, (uint64_t)sub_51370);
  sub_59BF4();
  return sub_59CF8();
}

uint64_t sub_51370()
{
  *(void *)(v1 + 2064) = v0;
  swift_task_dealloc(v2);
  sub_1B9B8();
  return sub_1B758();
}

#error "514C4: call analysis failed (funcsize=80)"
uint64_t sub_5153C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sub_59984();
  uint64_t v1 = *(void *)(v0 + 1504);
  sub_2B4F0(*(void *)(v0 + 2072));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1B9B8();
  return sub_2F414(v2, v3, v4);
}

#error "51610: call analysis failed (funcsize=53)"
uint64_t sub_51688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sub_59984();
  uint64_t v1 = *(void *)(v0 + 1504);
  sub_2B4F0(*(void *)(v0 + 2080));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1B9B8();
  return sub_2F414(v2, v3, v4);
}

uint64_t sub_51700()
{
  uint64_t v1 = *(void **)(v0 + 2096);
  sub_2B71C();
  *(void *)(v3 + 2112) = v2;
  sub_2B988(v4);

  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5176C()
{
  uint64_t v3 = (void *)v1[264];
  sub_5A238();
  uint64_t v4 = sub_5A1B8();
  v1[265] = (uint64_t)v4;
  uint64_t v5 = sub_18034();
  if (v4)
  {
    if (sub_5A468(v5, "state") == (char *)&dword_0 + 3)
    {
      sub_59CA4();
      if (qword_FB1D0 != -1) {
        swift_once(&qword_FB1D0, sub_4DE58);
      }
      sub_39658(v1[165], (uint64_t)qword_FD728);
      os_log_type_t v6 = sub_1BCD0();
      if (sub_2B854(v6))
      {
        uint64_t v7 = (_WORD *)sub_1B9DC();
        sub_2B938(v7);
        sub_461C0( &dword_0,  v8,  v9,  "UndoTimerChangeStateFlow: Attempting to resume a running timer: returning .failureTimerAlreadyRunning");
        sub_1B904(v2);
      }

      sub_2BF0C();
      v1[266] = SiriTimer.__allocating_init(mtTimer:)(v4);
      uint64_t v10 = (uint64_t **)swift_task_alloc(dword_FD794);
      v1[267] = (uint64_t)v10;
      *uint64_t v10 = v1;
      v10[1] = (uint64_t *)sub_51998;
      sub_59BE4();
      sub_5A4F8();
      return sub_59EB8(v11, v12);
    }

    else
    {
      uint64_t v20 = (void *)swift_task_alloc(dword_FD79C);
      v1[268] = (uint64_t)v20;
      sub_5A034(v20, (uint64_t)sub_51AD0);
      uint64_t v21 = sub_59F84();
      return sub_57A74(v21, 3LL);
    }
  }

  else
  {
    sub_59CA4();
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    sub_39658(v1[165], (uint64_t)qword_FD728);
    os_log_type_t v14 = sub_32A5C();
    if (sub_1BB80(v14))
    {
      uint64_t v15 = (_WORD *)sub_1B9DC();
      sub_2BA04(v15);
      sub_1BAA8( &dword_0,  v16,  v17,  "UndoTimerChangeStateFlow: mtTimerManager.timersSync returned no timer with matching timerID: no timer to change.");
      sub_1B904(v0);
    }

    uint64_t v18 = (uint64_t **)swift_task_alloc(dword_FD774);
    v1[271] = (uint64_t)v18;
    *uint64_t v18 = v1;
    v18[1] = (uint64_t *)sub_51D4C;
    uint64_t v19 = sub_59BE4();
    return sub_59C4C(v19);
  }

uint64_t sub_51998()
{
  uint64_t v1 = *(void **)(v0 + 2128);
  sub_2B4F0(*(void *)(v0 + 2136));

  sub_1B9B8();
  return sub_1B758();
}

#error "51A58: call analysis failed (funcsize=53)"
uint64_t sub_51AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_599D8();
  sub_2B71C();
  *(void *)(v1 + 2152) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_51B34()
{
  uint64_t v2 = *(void **)(v1 + 2152);
  if (v2)
  {

    *(void *)(v1 + 2256) = *(void *)(v1 + 2152);
    *(void *)(v1 + 2248) = v2;
    id v3 = v2;
    uint64_t v4 = sub_67C4(&qword_FBE58);
    *(void *)(v1 + 2264) = v4;
    uint64_t v5 = (__n128 *)sub_1E854(v4);
    sub_5A144(v5, v6, v7, v8, v9, v10, v11, v12, (__n128)xmmword_C2690);
    id v13 = v3;
    sub_5A4AC();
    sub_18034();
    sub_2C0EC();
    sub_2BB94();
    sub_5A018();
    os_log_type_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
    *(void *)(v1 + 2272) = v14;
    sub_5A4D8(v14, (uint64_t)sub_52680);
    sub_59E0C(v15);
    return sub_59ECC();
  }

  else
  {
    sub_59CA4();
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    sub_39658(*(void *)(v1 + 1320), (uint64_t)qword_FD728);
    os_log_type_t v17 = sub_32A5C();
    if (sub_1BB80(v17))
    {
      uint64_t v18 = (_WORD *)sub_1B9DC();
      sub_2BA04(v18);
      sub_1BAA8(&dword_0, v19, v20, "UndoTimerChangeStateFlow: Failed to resume mtTimer");
      sub_1B904(v0);
    }

    sub_59C94();
    sub_59C1C(v21, enum case for SiriTimeEventSender.ReasonDescription.failedToResumeTimer(_:));
    uint64_t v22 = (void *)swift_task_alloc(dword_FD76C);
    *(void *)(v1 + 2160) = v22;
    *uint64_t v22 = v1;
    v22[1] = sub_51CD4;
    uint64_t v23 = sub_59BE4();
    return sub_59C38(v23, v24);
  }

uint64_t sub_51CD4()
{
  uint64_t v1 = *(void *)(v0 + 1504);
  sub_2B4F0(*(void *)(v0 + 2160));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1B9B8();
  return sub_2F414(v2, v3, v4);
}

uint64_t sub_51D4C()
{
  return sub_1B758();
}

uint64_t sub_51DA8()
{
  *(void *)(v1 + 2184) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_51E0C()
{
  uint64_t v2 = (void *)v1[273];
  if (!v2)
  {
    sub_59CA4();
    sub_17FF4();
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    sub_39658(v1[165], (uint64_t)qword_FD728);
    os_log_type_t v10 = sub_32A5C();
    if (sub_1BB80(v10))
    {
      uint64_t v11 = (_WORD *)sub_1B9DC();
      sub_2BA04(v11);
      sub_1BAA8( &dword_0,  v12,  v13,  "UndoTimerChangeStateFlow: siriTimerManager.currentTimerSync get nil result: no timers to operate on.");
      sub_1B904(v0);
    }

    uint64_t v8 = (uint64_t **)swift_task_alloc(dword_FD774);
    v1[280] = (uint64_t)v8;
    uint64_t v9 = sub_52624;
    goto LABEL_24;
  }

  sub_17FF4();
  uint64_t v3 = SiriTimerState.rawValue.getter([v2 state]);
  if (v3 == SiriTimerState.rawValue.getter(0LL))
  {
    sub_59CA4();
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    sub_39658(v1[165], (uint64_t)qword_FD728);
    os_log_type_t v4 = sub_1BCD0();
    if (sub_1BB80(v4))
    {
      uint64_t v5 = (_WORD *)sub_1B9DC();
      sub_2BA04(v5);
      sub_1BAA8( &dword_0,  v6,  v7,  "UndoTimerChangeStateFlow: Timer has an unknown state (meaning there's no timer set on phone): No timers to operate on.");
      sub_1B904(v0);
    }

    uint64_t v8 = (uint64_t **)swift_task_alloc(dword_FD774);
    v1[279] = (uint64_t)v8;
    uint64_t v9 = sub_525C8;
LABEL_24:
    *uint64_t v8 = v1;
    v8[1] = (uint64_t *)v9;
    uint64_t v24 = sub_59BE4();
    return sub_59C4C(v24);
  }

  uint64_t v14 = sub_58E1C(v2);
  if (!v15)
  {
LABEL_19:
    sub_59CA4();
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    sub_39658(v1[165], (uint64_t)qword_FD728);
    os_log_type_t v20 = sub_32A5C();
    if (sub_1BB80(v20))
    {
      uint64_t v21 = (_WORD *)sub_1B9DC();
      sub_2BA04(v21);
      sub_1BAA8( &dword_0,  v22,  v23,  "UndoTimerChangeStateFlow: UndoTimerChangeState target timer id does not match current timer id.");
      sub_1B904(v0);
    }

    uint64_t v8 = (uint64_t **)swift_task_alloc(dword_FD774);
    v1[278] = (uint64_t)v8;
    uint64_t v9 = sub_5256C;
    goto LABEL_24;
  }

  uint64_t v2 = (void *)v15;
  uint64_t v16 = v1[204];
  uint64_t v17 = v1[203];
  if (v15 == v16 && v14 == v17)
  {
    uint64_t v19 = sub_18034();
  }

  else
  {
    uint64_t v0 = sub_4C5C4(v14, v15, v17, v16);
    uint64_t v19 = sub_18034();
    if ((v0 & 1) == 0) {
      goto LABEL_19;
    }
  }

  id v26 = sub_5A468(v19, "state");
  uint64_t v27 = (void *)SiriTimerState.rawValue.getter(v26);
  if (v27 == (void *)SiriTimerState.rawValue.getter(1LL))
  {
    sub_59CA4();
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    sub_39658(v1[165], (uint64_t)qword_FD728);
    os_log_type_t v28 = sub_1BCD0();
    if (sub_2B854(v28))
    {
      uint64_t v29 = (_WORD *)sub_1B9DC();
      sub_2B938(v29);
      sub_461C0( &dword_0,  v30,  v31,  "UndoTimerChangeStateFlow: Attempting to resume a running timer: returning .failureTimerAlreadyRunning");
      sub_1B904((uint64_t)&unk_FA000);
    }

    uint64_t v32 = (uint64_t **)swift_task_alloc(dword_FD794);
    v1[274] = (uint64_t)v32;
    *uint64_t v32 = v1;
    v32[1] = (uint64_t *)sub_521A8;
    sub_59BE4();
    sub_5A4F8();
    return sub_59EB8(v33, v34);
  }

  else
  {
    uint64_t v35 = (void *)swift_task_alloc(dword_FD77C);
    v1[275] = (uint64_t)v35;
    sub_5A034(v35, (uint64_t)sub_522D8);
    uint64_t v36 = sub_59F84();
    return sub_5580C(v36);
  }

uint64_t sub_521A8()
{
  return sub_1B758();
}

#error "52260: call analysis failed (funcsize=53)"
uint64_t sub_522D8()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  sub_599D8();
  sub_2B71C();
  *(_BYTE *)(v1 + 2510) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5233C()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SiriTimerManagerIOS.currentTimer()[1]);
  *(void *)(v0 + 2208) = v1;
  sub_5A0C8(v1, (uint64_t)sub_523B8);
  sub_59CAC();
  return sub_59AF8();
}

uint64_t sub_523B8()
{
  *(void *)(v1 + 2216) = v0;
  sub_2B988(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5241C()
{
  uint64_t v1 = *(void *)(v0 + 2216);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 2510);

  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 56));
  if ((_DWORD)v2 != 1 || v1 == 0)
  {
    sub_5A0B4();
    sub_215A8( enum case for SiriTimeEventSender.ReasonDescription.failedToResumeTimer(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
    os_log_type_t v4 = (void *)swift_task_alloc(dword_FD76C);
    *(void *)(v0 + 2488) = v4;
    void *v4 = v0;
    v4[1] = sub_540AC;
    uint64_t v5 = sub_59BE4();
    return sub_59C38(v5, v6);
  }

  else
  {
    uint64_t v7 = *(void **)(v0 + 2216);
    *(void *)(v0 + 2256) = v7;
    *(void *)(v0 + 2248) = v7;
    id v8 = v7;
    uint64_t v9 = sub_67C4(&qword_FBE58);
    *(void *)(v0 + 2264) = v9;
    os_log_type_t v10 = (__n128 *)sub_1E854(v9);
    sub_5A144(v10, v11, v12, v13, v14, v15, v16, v17, (__n128)xmmword_C2690);
    id v18 = v8;
    sub_5A4AC();
    sub_18034();
    sub_2C0EC();
    sub_2BB94();
    sub_5A018();
    uint64_t v19 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
    *(void *)(v0 + 2272) = v19;
    sub_5A4D8(v19, (uint64_t)sub_52680);
    sub_59E0C(v20);
    return sub_59ECC();
  }

uint64_t sub_5256C()
{
  return sub_1B758();
}

uint64_t sub_525C8()
{
  return sub_1B758();
}

uint64_t sub_52624()
{
  return sub_1B758();
}

uint64_t sub_52680()
{
  *(void *)(v1 + 2280) = v0;
  *(void *)(v1 + 2288) = v2;
  sub_2B988(v3);
  sub_18034();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_526F0()
{
  uint64_t v4 = *(void *)(v1 + 160);
  uint64_t v5 = *(void *)(v1 + 168);
  *(_BYTE *)(v1 + 2511) = sub_5A180() & 1;
  sub_5A0F0();
  sub_3822C( v2,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 104));
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  sub_5A504();
  uint64_t v6 = sub_5474(v4, (uint64_t)qword_FD728);
  *(void *)(v1 + 2296) = v6;
  sub_5A0D4();
  uint64_t v7 = mach_absolute_time();
  uint64_t v8 = sub_5A1A4(v7);
  static ApplicationContext.shared.getter(v8);
  sub_5A328();
  sub_1BC50();
  uint64_t v9 = *(void *)(v1 + 248);
  char v10 = sub_5A1E0();
  _s20HandleIntentStrategyVwxx_0((void *)v0);
  if (v5 & 1 | ((v10 & 1) == 0))
  {
    sub_5A104();
    SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
    sub_5A470();
    uint64_t v11 = *(void *)(v1 + 2264);
    if ((v6 & 1) != 0)
    {
      uint64_t v12 = (__n128 *)sub_1E854(v11);
      sub_59FE0(v12, (__n128)xmmword_C2690);
      v12[2].n128_u64[0] = v13;
      sub_59EE0(v13, v14, v15, v16, v17, v18, v19, v20);
      *(void *)(v1 + 2304) = v12;
      uint64_t v21 = (void *)swift_task_alloc(dword_FC44C);
      *(void *)(v1 + 2312) = v21;
      sub_59EE8(v21, (uint64_t)sub_52D1C);
      sub_5A338();
      sub_59F4C();
      return sub_2F990(v22);
    }

    else
    {
      uint64_t v61 = (__n128 *)sub_1E854(v11);
      sub_59FE0(v61, (__n128)xmmword_C2690);
      v61[2].n128_u64[0] = v62;
      sub_59EE0(v62, v63, v64, v65, v66, v67, v68, v69);
      *(void *)(v1 + 2344) = v61;
      uint64_t v70 = (void *)swift_task_alloc(dword_FF154);
      *(void *)(v1 + 2352) = v70;
      sub_59EE8(v70, (uint64_t)sub_53230);
      sub_5A338();
      sub_59F4C();
      return sub_7D020(v71);
    }
  }

  id v24 = *(id *)(v1 + 2248);
  uint64_t v25 = sub_1E854(*(void *)(v1 + 2264));
  *(_OWORD *)(v25 + 16) = xmmword_C2690;
  *(void *)(v25 + 32) = v24;
  sub_59DDC(v25, v26, v27, v28, v29, v30, v31, v32);
  id v33 = v24;
  id v34 = sub_5A614();
  *(void *)(v1 + 2392) = v34;
  sub_2B7C4();
  if (v34)
  {
    uint64_t v35 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
    *(void *)(v1 + 1144) = 0LL;
    id v36 = sub_5A448(v35, "archivedDataWithRootObject:requiringSecureCoding:error:");
    uint64_t v37 = *(void **)(v1 + 1144);
    if (v36)
    {
      id v38 = v36;
      uint64_t v39 = *(void *)(v1 + 2264);
      id v40 = v37;
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
      sub_5A518();
      *(void *)(v1 + 2400) = v24;
      *(void *)(v1 + 2408) = v9;
      id v41 = (__n128 *)sub_1E854(v39);
      sub_59FE0(v41, (__n128)xmmword_C2690);
      v41[2].n128_u64[0] = v42;
      sub_59EE0(v42, v43, v44, v45, v46, v47, v48, v49);
      *(void *)(v1 + 2416) = v41;
      sub_5A5C8();
      uint64_t v50 = sub_5A204();
      sub_59FB4(v50);
      uint64_t v51 = sub_5A370();
      SpeakableString.init(serializedValue:)(v51, v52);
      uint64_t v53 = sub_5A16C();
      sub_5A5B4(v53, v54, &qword_FBD98);
      uint64_t v55 = type metadata accessor for SirikitApp(0LL);
      if (qword_FB228 != -1) {
        swift_once(&qword_FB228, sub_66804);
      }
      BOOL v56 = *(uint64_t **)(v1 + 1216);
      uint64_t v57 = swift_retain();
      SirikitApp.init(app:)(v57);
      sub_5A554();
      *BOOL v56 = v55;
      sub_7C460();
      uint64_t v59 = v58;
      *(void *)(v1 + 2424) = v58;
      uint64_t v60 = (void *)sub_5A5DC();
      *(void *)(v1 + 2432) = v60;
      sub_59EE8(v60, (uint64_t)sub_536C4);
      return sub_59D10( 0xD00000000000001ALL,  0x80000000000C8140LL,  v59,  (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:)
                                 + (void)v24));
    }

    id v24 = v37;
    sub_1BC04();
    uint64_t v86 = _convertNSErrorToError(_:)(v37);

    uint64_t v412 = v86;
    swift_willThrow(v87, v88, v89, v90, v91, v92, v93, v94);
  }

  else
  {
    uint64_t v72 = swift_bridgeObjectRelease(*(void *)(v1 + 2288));
    Logger.logObject.getter(v72);
    os_log_type_t v73 = sub_1BCD0();
    if (sub_2B854(v73))
    {
      uint64_t v74 = (_WORD *)sub_1B9DC();
      sub_2B938(v74);
      sub_461C0(&dword_0, v75, v76, "Could not get timer action from timer.");
      sub_1B904((uint64_t)v24);
    }

    sub_5A090();
    sub_59EF4( v6,  enum case for SiriTimeEventSender.ReasonDescription.failedToCastTimer(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104));
    sub_1BC80(v6);
    sub_5A3E4();
    sub_599A4(v5 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason, v1 + 1064);
    sub_5A404();
    sub_5A1D8();
    sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v77 = sub_5A12C();
    uint64_t v78 = sub_2F6A0(v77);
    *uint64_t v79 = 1;
    uint64_t v412 = v78;
    swift_willThrow(v78, v79, v80, v81, v82, v83, v84, v85);
  }

  uint64_t v95 = *(void **)(v1 + 2296);
  sub_5A358();
  sub_59B18(enum case for SiriTimeEventSender.ReasonDescription.errorProducingOutput(_:), v96);
  sub_2B678((uint64_t)v24);
  sub_59ABC((uint64_t)v24);
  uint64_t v97 = v5 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason;
  sub_599A4(v5 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason, v1 + 1040);
  sub_59B08();
  uint64_t v98 = sub_59E74();
  Logger.logObject.getter(v98);
  os_log_type_t v99 = sub_32A5C();
  if (sub_2B854(v99))
  {
    uint64_t v100 = (_WORD *)sub_1B9DC();
    sub_2B938(v100);
    sub_461C0(&dword_0, v101, v102, "UndoTimerChangeStateFlow: Error publishing Success output.");
    sub_1B904(v97);
  }

  uint64_t v103 = *(void **)(v1 + 2256);
  uint64_t v104 = *(void **)(v1 + 2248);
  swift_errorRelease(v412);

  sub_59AE8();
  sub_59B84();
  sub_59974();
  sub_59998();
  sub_599FC();
  sub_1BA38();
  sub_1B838();
  sub_1BA8C();
  sub_1BA60();
  sub_1BAD0();
  sub_1BABC();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  uint64_t v105 = swift_task_dealloc();
  uint64_t v113 = sub_1B910(v105, v106, v107, v108, v109, v110, v111, v112, v242, v259);
  uint64_t v121 = sub_1B8C4(v113, v114, v115, v116, v117, v118, v119, v120, v243, v260, v276);
  uint64_t v129 = sub_1B8BC(v121, v122, v123, v124, v125, v126, v127, v128, v244, v261, v277, v292);
  uint64_t v137 = sub_1B8B4(v129, v130, v131, v132, v133, v134, v135, v136, v245, v262, v278, v293, v307);
  uint64_t v145 = sub_1B864(v137, v138, v139, v140, v141, v142, v143, v144, v246, v263, v279, v294, v308, v321);
  uint64_t v153 = sub_1B874(v145, v146, v147, v148, v149, v150, v151, v152, v247, v264, v280, v295, v309, v322, v334);
  uint64_t v161 = sub_1B8AC(v153, v154, v155, v156, v157, v158, v159, v160, v248, v265, v281, v296, v310, v323, v335, v346);
  uint64_t v169 = sub_1B8A4(v161, v162, v163, v164, v165, v166, v167, v168, v249, v266, v282, v297, v311, v324, v336, v347, v357);
  uint64_t v177 = sub_1B958( v169,  v170,  v171,  v172,  v173,  v174,  v175,  v176,  v250,  v267,  v283,  v298,  v312,  v325,  v337,  v348,  v358,  v367);
  uint64_t v185 = sub_1B950( v177,  v178,  v179,  v180,  v181,  v182,  v183,  v184,  v251,  v268,  v284,  v299,  v313,  v326,  v338,  v349,  v359,  v368,  v376);
  uint64_t v193 = sub_1B9A0( v185,  v186,  v187,  v188,  v189,  v190,  v191,  v192,  v252,  v269,  v285,  v300,  v314,  v327,  v339,  v350,  v360,  v369,  v377,  v384);
  uint64_t v201 = sub_1B998( v193,  v194,  v195,  v196,  v197,  v198,  v199,  v200,  v253,  v270,  v286,  v301,  v315,  v328,  v340,  v351,  v361,  v370,  v378,  v385,  v391);
  uint64_t v209 = sub_1B990( v201,  v202,  v203,  v204,  v205,  v206,  v207,  v208,  v254,  v271,  v287,  v302,  v316,  v329,  v341,  v352,  v362,  v371,  v379,  v386,  v392,  v397);
  uint64_t v217 = sub_1B988( v209,  v210,  v211,  v212,  v213,  v214,  v215,  v216,  v255,  v272,  v288,  v303,  v317,  v330,  v342,  v353,  v363,  v372,  v380,  v387,  v393,  v398,  v402);
  uint64_t v225 = sub_59AD0( v217,  v218,  v219,  v220,  v221,  v222,  v223,  v224,  v256,  v273,  v289,  v304,  v318,  v331,  v343,  v354,  v364,  v373,  v381,  v388,  v394,  v399,  v403,  v406);
  uint64_t v233 = sub_59AC8( v225,  v226,  v227,  v228,  v229,  v230,  v231,  v232,  v257,  v274,  v290,  v305,  v319,  v332,  v344,  v355,  v365,  v374,  v382,  v389,  v395,  v400,  v404,  v407,  v409);
  sub_5A134( v233,  v234,  v235,  v236,  v237,  v238,  v239,  v240,  v258,  v275,  v291,  v306,  v320,  v333,  v345,  v356,  v366,  v375,  v383,  v390,  v396,  v401,  v405,  v408,  v410,  v411);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_5A124();
  uint64_t v241 = (uint64_t (*)(void))sub_5A2FC();
  return sub_59D2C(v241);
}

uint64_t sub_52D1C()
{
  v0[290] = v2;
  v0[291] = v1;
  sub_2B988(v3);
  swift_bridgeObjectRelease(v0[288]);
  if (v1) {
    sub_18034();
  }
  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_52DC8(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(v1 + 2511);
  uint64_t v3 = *(void *)(v1 + 2288);
  static DialogPhase.completion.getter(a1);
  if (v2 != 1 || v3 == 0)
  {
    uint64_t v5 = *(void *)(v1 + 1296);
    sub_67C4(&qword_FC2C0);
    uint64_t v6 = sub_5A4B8();
    uint64_t v7 = (__n128 *)sub_59E50(v6);
    sub_5A5A8(v7, (__n128)xmmword_C2640);
    sub_5A110();
    *(void *)(v1 + 560) = v5;
    sub_11718( (unint64_t *)&qword_FC2B0,  type metadata accessor for SiriTimePluginModel,  (uint64_t)&protocol conformance descriptor for SiriTimePluginModel);
    *(void *)(v1 + 568) = v8;
    uint64_t v9 = sub_DB90((void *)(v1 + 536));
    sub_5A5F4((uint64_t)v9);
  }

  else
  {
    *(void *)(v1 + 568) = 0LL;
    *(_OWORD *)(v1 + 536) = 0u;
    *(_OWORD *)(v1 + 552) = 0u;
  }

  char v10 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
  *(void *)(v1 + 2336) = v10;
  *char v10 = v1;
  v10[1] = sub_52F04;
  sub_5A288();
  return sub_59E20();
}

uint64_t sub_52F04()
{
  uint64_t v1 = (uint64_t)(v0 + 67);
  int v2 = (void *)v0[290];
  uint64_t v3 = v0[176];
  sub_2B4F0(v0[292]);

  sub_2B7C4();
  sub_2B5AC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_17A70(v1, &qword_FC2B8);
  sub_1B9B8();
  return swift_task_switch(v4, v5, v6);
}

#error "531B8: call analysis failed (funcsize=147)"
uint64_t sub_53230()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_59BD0();
  sub_59D48();
  v0[295] = v2;
  v0[296] = v1;
  sub_2B988(v3);
  swift_bridgeObjectRelease(v0[293]);
  if (v1) {
    sub_18034();
  }
  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_532DC(uint64_t a1)
{
  uint64_t v2 = v1[286];
  uint64_t v3 = v1[285];
  uint64_t v4 = v1[185];
  static DialogPhase.completion.getter(a1);
  uint64_t v5 = (void *)sub_5A248();
  __int128 v5[2] = v4;
  v5[3] = v3;
  v5[4] = v2;
  sub_5A218((uint64_t)v5, (uint64_t)sub_59650);
  sub_18034();
  sub_1BA14();
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generatePatternOutput(manifest:measure:)[1]);
  v1[297] = v6;
  void *v6 = v1;
  v6[1] = sub_533A8;
  return sub_59E38();
}

uint64_t sub_533A8()
{
  v0[298] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[295];
  sub_59D58(v0[159]);

  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

#error "5364C: call analysis failed (funcsize=147)"
uint64_t sub_536C4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_59BD0();
  sub_59D48();
  v0[305] = v2;
  v0[306] = v1;
  sub_2B988(v3);
  swift_bridgeObjectRelease(v0[303]);
  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_53764()
{
  uint64_t v1 = v0[286];
  uint64_t v2 = v0[285];
  uint64_t v3 = v0[185];
  uint64_t v4 = v0[177];
  sub_11E50(v0[152], type metadata accessor for ResumeTimerHandledOnWatchParameters);
  sub_59FF0();
  uint64_t v5 = sub_18034();
  static DialogPhase.completion.getter(v5);
  uint64_t v6 = (void *)sub_5A248();
  v6[2] = v3;
  void v6[3] = v2;
  v6[4] = v1;
  OutputGenerationManifest.init(dialogPhase:_:)(v4, sub_59650, v6);
  swift_bridgeObjectRelease(v1);
  sub_1BABC();
  uint64_t v7 = (uint64_t **)swift_task_alloc(async function pointer to PatternExecutionResult.generatePatternOutput(manifest:measure:)[1]);
  v0[307] = (uint64_t)v7;
  *uint64_t v7 = v0;
  v7[1] = (uint64_t *)sub_53880;
  return PatternExecutionResult.generatePatternOutput(manifest:measure:)(v0 + 82, v0[158], v0[173]);
}

uint64_t sub_53880()
{
  *(void *)(v0 + 2464) = v1;
  swift_task_dealloc();
  sub_59D58(*(void *)(v0 + 1264));
  sub_1B9B8();
  return sub_2F414(v3, v4, v5);
}

#error "53A60: call analysis failed (funcsize=107)"
#error "53D78: call analysis failed (funcsize=188)"
uint64_t sub_53DF0()
{
  uint64_t v0;
  uint64_t v1;
  sub_59984();
  sub_1BD64();
  *(void *)(v1 + 2480) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

#error "54034: call analysis failed (funcsize=136)"
uint64_t sub_540AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sub_59984();
  uint64_t v1 = *(void *)(v0 + 1504);
  sub_2B4F0(*(void *)(v0 + 2488));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1B9B8();
  return sub_2F414(v2, v3, v4);
}

#error "54180: call analysis failed (funcsize=53)"
uint64_t sub_541F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sub_59984();
  uint64_t v1 = *(void *)(v0 + 1504);
  sub_2B4F0(*(void *)(v0 + 2496));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1B9B8();
  return sub_2F414(v2, v3, v4);
}

#error "5437C: call analysis failed (funcsize=94)"
#error "54500: call analysis failed (funcsize=94)"
#error "54684: call analysis failed (funcsize=94)"
#error "5482C: call analysis failed (funcsize=103)"
#error "549C0: call analysis failed (funcsize=98)"
#error "54B3C: call analysis failed (funcsize=92)"
#error "54CB8: call analysis failed (funcsize=92)"
#error "54E34: call analysis failed (funcsize=92)"
#error "54FDC: call analysis failed (funcsize=103)"
#error "55190: call analysis failed (funcsize=105)"
uint64_t sub_55208(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[24];
  uint64_t v2 = sub_67C4(&qword_FBFD0);
  __chkstk_darwin(v2);
  uint64_t v44 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_67C4(&qword_FBFD8);
  __chkstk_darwin(v4);
  uint64_t v47 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SiriTimeEventSender.TaskType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  uint64_t v49 = v7;
  __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ActivityType(0LL);
  char v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_67C4(&qword_FBFC8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v43 - v17;
  uint64_t v19 = type metadata accessor for SiriTimeEventSender.ReasonDescription(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = a1 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason;
  swift_beginAccess(v23, v50, 0LL, 0LL);
  sub_59624(v23, (uint64_t)v18, &qword_FBFC8);
  id v24 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v18, 1LL, v19);
  uint64_t v46 = v9;
  if (v24 == 1)
  {
    sub_17A70((uint64_t)v18, &qword_FBFC8);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for ActivityType.completed(_:), v9);
    if (qword_FB1D8 != -1) {
      swift_once(&qword_FB1D8, sub_4DEA0);
    }
    uint64_t v25 = v48;
    uint64_t v26 = sub_5474(v48, (uint64_t)qword_100EE0);
    uint64_t v27 = v49;
    uint64_t v28 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v45, v26, v25);
    uint64_t v29 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    uint64_t v30 = v47;
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v47, 1LL, 1LL, v29);
    if (qword_FB1E0 != -1) {
      swift_once(&qword_FB1E0, sub_4DEBC);
    }
    uint64_t v31 = type metadata accessor for SiriTimeEventSender.Attribute(0LL);
    uint64_t v32 = sub_5474(v31, (uint64_t)qword_100EF8);
    id v33 = (uint64_t)v44;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16LL))(v44, v32, v31);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v33, 0LL, 1LL, v31);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v16, 1LL, 1LL, v19);
    static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v12, v28, v30, v33, v16);
    sub_17A70((uint64_t)v16, &qword_FBFC8);
    sub_17A70(v33, &qword_FBFD0);
    sub_17A70(v30, &qword_FBFD8);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v46);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for ActivityType.failed(_:), v9);
    if (qword_FB1D8 != -1) {
      swift_once(&qword_FB1D8, sub_4DEA0);
    }
    uint64_t v43 = v10;
    uint64_t v35 = v48;
    id v36 = sub_5474(v48, (uint64_t)qword_100EE0);
    uint64_t v37 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v45, v36, v35);
    id v38 = type metadata accessor for SiriKitReliabilityCodes(0LL);
    uint64_t v39 = v47;
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v47, 1LL, 1LL, v38);
    if (qword_FB1E0 != -1) {
      swift_once(&qword_FB1E0, sub_4DEBC);
    }
    id v40 = type metadata accessor for SiriTimeEventSender.Attribute(0LL);
    id v41 = sub_5474(v40, (uint64_t)qword_100EF8);
    uint64_t v42 = (uint64_t)v44;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16LL))(v44, v41, v40);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v42, 0LL, 1LL, v40);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v16, v22, v19);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v16, 0LL, 1LL, v19);
    static SiriTimeEventSender.sendEvent(activityType:taskType:reason:attribute:description:)(v12, v37, v39, v42, v16);
    sub_17A70((uint64_t)v16, &qword_FBFC8);
    sub_17A70(v42, &qword_FBFD0);
    sub_17A70(v39, &qword_FBFD8);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v35);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v46);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }

uint64_t sub_55768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_2BB7C();
  sub_59EF4(v9, a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL));
  sub_1BC80(v9);
  OutputGenerationManifest.nlContextUpdate.setter(v9);
  swift_bridgeObjectRetain(a4);
  uint64_t v11 = sub_5A3C8();
  return OutputGenerationManifest.applicationSessionID.setter(v11, v12);
}

uint64_t sub_5580C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2B82C((uint64_t)sub_5581C);
}

uint64_t sub_5581C()
{
  uint64_t v1 = (int8x16_t *)sub_5A044();
  sub_5A2AC(v1);
  uint64_t v2 = swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  uint64_t v3 = (void *)sub_5A4EC(v2);
  *uint64_t v3 = v0;
  v3[1] = sub_558A8;
  sub_1B9B8();
  return sub_59B44();
}

uint64_t sub_558A8()
{
  return sub_1B758();
}

uint64_t sub_558E8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_67C4(&qword_FDA48);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  sub_548C(a2 + 72, (uint64_t)v19);
  uint64_t v9 = v20;
  uint64_t v18 = v21;
  v17[1] = sub_8CFC(v19, v20);
  type metadata accessor for ResumeTimerIntent(0LL);
  sub_33CEC(0LL, (unint64_t *)&qword_FBE50, &OBJC_CLASS___NSNumber_ptr);
  id v10 = a3;
  v11.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
  uint64_t v12 = (void *)sub_A1FC0(v10, v11.super.super.isa);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v6);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_F4CE0, v14 + v8, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v15 + v14,  (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  dispatch thunk of SiriTimerManagerIOS.resumeCurrentTimer(intent:completion:)(v12, sub_595D8, v15, v9, v18);
  swift_release();

  return _s20HandleIntentStrategyVwxx_0(v19);
}

uint64_t sub_55A60(double a1)
{
  *(void *)(v2 + 24) = v1;
  *(double *)(v2 + 16) = a1;
  return sub_2B82C((uint64_t)sub_55A74);
}

uint64_t sub_55A74()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[2];
  uint64_t v3 = sub_5A044();
  v0[4] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  uint64_t v5 = (void *)sub_5A4EC(v4);
  *uint64_t v5 = v0;
  v5[1] = sub_55B10;
  sub_5A2A0();
  sub_1B9B8();
  return sub_59B44();
}

uint64_t sub_55B10()
{
  return sub_1B758();
}

uint64_t sub_55B50()
{
  return sub_5A0E8();
}

uint64_t sub_55B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FDA48);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_548C(a2 + 72, (uint64_t)v17);
  uint64_t v7 = v18;
  uint64_t v8 = v19;
  sub_8CFC(v17, v18);
  type metadata accessor for SetTimerAttributeIntent(0LL);
  v9.super.super.Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  sub_A1FC4(0LL, v9.super.super.isa, 0LL);
  NSNumber v11 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_F4BF0, v13 + v6, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v14 + v13,  (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  dispatch thunk of SiriTimerManagerIOS.setTimerDurationAndStart(intent:completion:)(v11, sub_59434, v14, v7, v8);
  swift_release();

  return _s20HandleIntentStrategyVwxx_0(v17);
}

uint64_t sub_55CB0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimerOperationError(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v34[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v34[-1] - v7;
  uint64_t v9 = sub_67C4(&qword_FDA60);
  __chkstk_darwin(v9);
  NSNumber v11 = (id *)((char *)&v34[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_59624(a1, (uint64_t)v11, &qword_FDA60);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    uint64_t v12 = *(void (**)(char *, id *, uint64_t))(v3 + 32);
    v12(v8, v11, v2);
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = sub_5474(v13, (uint64_t)qword_FD728);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "UndoTimerChangeStateFlow: set and start timer failed", v17, 2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    LOBYTE(v34[0]) = 0;
    uint64_t v18 = sub_67C4(&qword_FDA48);
    CheckedContinuation.resume(returning:)(v34, v18);
    uint64_t v19 = type metadata accessor for ABCReport(0LL);
    v34[3] = v19;
    v34[4] = &protocol witness table for ABCReport;
    uint64_t v20 = sub_DB90(v34);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    sub_11718( &qword_FDA58,  (uint64_t (*)(uint64_t))&type metadata accessor for TimerOperationError,  (uint64_t)&protocol conformance descriptor for TimerOperationError);
    uint64_t v22 = swift_allocError(v2, v21, 0LL, 0LL);
    v12(v23, (id *)v6, v2);
    *uint64_t v20 = _convertErrorToNSError(_:)(v22);
    uint64_t v24 = enum case for ErrorSubType.managerReturnedError(_:);
    uint64_t v25 = type metadata accessor for ErrorSubType(0LL);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104LL))(v20, v24, v25);
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v20,  enum case for ABCReport.timerUndoHandle(_:),  v19);
    static BarbaraWalters.stopThePresses(for:)(v34);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    _s20HandleIntentStrategyVwxx_0(v34);
    return swift_errorRelease(v22);
  }

  else
  {

    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_5474(v27, (uint64_t)qword_FD728);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_0, v29, v30, "UndoTimerChangeStateFlow: set and start timer completion", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    LOBYTE(v34[0]) = 1;
    uint64_t v32 = sub_67C4(&qword_FDA48);
    return CheckedContinuation.resume(returning:)(v34, v32);
  }

uint64_t sub_56068()
{
  *(void *)(v1 + 16) = v0;
  return sub_2B82C((uint64_t)sub_56078);
}

uint64_t sub_56078()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_560F8;
  sub_5A2A0();
  sub_1B9B8();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_560F8()
{
  return sub_1B758();
}

uint64_t sub_5612C()
{
  return sub_5A0E8();
}

uint64_t sub_56134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FDA48);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = a2 + 72;
  sub_548C(a2 + 72, (uint64_t)v23);
  uint64_t v8 = v24;
  uint64_t v9 = v25;
  sub_8CFC(v23, v24);
  valid = (void *)dispatch thunk of SiriTimerManagerIOS.getCurrentValidTimer()(v8, v9);

  _s20HandleIntentStrategyVwxx_0(v23);
  if (valid)
  {
    sub_548C(v7, (uint64_t)v23);
    uint64_t v11 = v24;
    uint64_t v12 = v25;
    sub_8CFC(v23, v24);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
    uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v14 = (v13 + 16) & ~v13;
    uint64_t v15 = swift_allocObject(&unk_F4C18, v14 + v6, v13 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v15 + v14,  (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
    dispatch thunk of SiriTimerManagerIOS.stopCurrentTimer(completion:)(sub_59480, v15, v11, v12);
    swift_release();
    return _s20HandleIntentStrategyVwxx_0(v23);
  }

  else
  {
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_5474(v17, (uint64_t)qword_FD728);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_0, v19, v20, "UndoTimerChangeStateFlow: no need to stop timer as its already done.", v21, 2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    LOBYTE(v23[0]) = 1;
    return CheckedContinuation.resume(returning:)(v23, v4);
  }

uint64_t sub_56358(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v37 = a2;
  uint64_t v7 = type metadata accessor for TimerOperationError(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v38[-1] - v12;
  uint64_t v14 = sub_67C4(&qword_FDA50);
  sub_17B6C();
  __chkstk_darwin(v15);
  sub_1C308();
  uint64_t v18 = (os_log_s *)(v17 - v16);
  sub_59624(a1, v17 - v16, &qword_FDA50);
  if (swift_getEnumCaseMultiPayload(v18, v14) == 1)
  {
    uint64_t v19 = *(void (**)(char *, os_log_s *, uint64_t))(v8 + 32);
    v19(v13, v18, v7);
    uint64_t v20 = v8;
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    uint64_t v21 = sub_1BD34();
    sub_39658(v21, (uint64_t)qword_FD728);
    os_log_type_t v22 = sub_32A5C();
    if (os_log_type_enabled(v18, v22))
    {
      uint64_t v23 = (uint8_t *)sub_1B9DC();
      *(_WORD *)uint64_t v23 = 0;
      sub_1BBEC(&dword_0, v18, v22, a4, v23);
      sub_1B904((uint64_t)v23);
    }

    LOBYTE(v38[0]) = 0;
    uint64_t v24 = sub_67C4(&qword_FDA48);
    sub_5A424(v24);
    uint64_t v25 = type metadata accessor for ABCReport(0LL);
    v38[3] = v25;
    v38[4] = &protocol witness table for ABCReport;
    uint64_t v26 = sub_DB90(v38);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v11, v13, v7);
    sub_11718( &qword_FDA58,  (uint64_t (*)(uint64_t))&type metadata accessor for TimerOperationError,  (uint64_t)&protocol conformance descriptor for TimerOperationError);
    uint64_t v28 = swift_allocError(v7, v27, 0LL, 0LL);
    v19(v29, (os_log_s *)v11, v7);
    void *v26 = _convertErrorToNSError(_:)(v28);
    uint64_t v30 = enum case for ErrorSubType.managerReturnedError(_:);
    uint64_t v31 = type metadata accessor for ErrorSubType(0LL);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104LL))(v26, v30, v31);
    sub_215A8( enum case for ABCReport.timerUndoHandle(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104LL));
    static BarbaraWalters.stopThePresses(for:)(v38);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v7);
    _s20HandleIntentStrategyVwxx_0(v38);
    return swift_errorRelease(v28);
  }

  else
  {
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    uint64_t v33 = sub_1BD34();
    sub_39658(v33, (uint64_t)qword_FD728);
    os_log_type_t v34 = sub_1BCD0();
    if (sub_2B854(v34))
    {
      uint64_t v35 = (uint8_t *)sub_1B9DC();
      *(_WORD *)uint64_t v35 = 0;
      sub_1BBEC(&dword_0, v18, (os_log_type_t)v7, a3, v35);
      sub_1B904((uint64_t)v35);
    }

    LOBYTE(v38[0]) = 1;
    uint64_t v36 = sub_67C4(&qword_FDA48);
    return sub_5A424(v36);
  }

uint64_t sub_5668C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2B82C((uint64_t)sub_5669C);
}

uint64_t sub_5669C()
{
  uint64_t v1 = (int8x16_t *)sub_5A044();
  sub_5A2AC(v1);
  uint64_t v2 = swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  uint64_t v3 = (void *)sub_5A4EC(v2);
  *uint64_t v3 = v0;
  v3[1] = sub_558A8;
  sub_1B9B8();
  return sub_59B44();
}

uint64_t sub_56728(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_67C4(&qword_FDA48);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  sub_548C(a2 + 72, (uint64_t)v19);
  uint64_t v9 = v20;
  uint64_t v18 = v21;
  v17[1] = sub_8CFC(v19, v20);
  type metadata accessor for PauseTimerIntent(0LL);
  sub_33CEC(0LL, (unint64_t *)&qword_FBE50, &OBJC_CLASS___NSNumber_ptr);
  id v10 = a3;
  v11.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
  uint64_t v12 = (void *)sub_A1FC0(v10, v11.super.super.isa);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v6);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_F4BC8, v14 + v8, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v15 + v14,  (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  dispatch thunk of SiriTimerManagerIOS.pauseCurrentTimer(intent:completion:)(v12, sub_59410, v15, v9, v18);
  swift_release();

  return _s20HandleIntentStrategyVwxx_0(v19);
}

uint64_t sub_568A0(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = sub_67C4(&qword_FBFC8);
  v3[8] = sub_2B4DC(*(void *)(v4 - 8));
  void v3[9] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_568F0()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = sub_5A13C();
  sub_59EF4(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL));
  sub_1BC80(v1);
  sub_59DCC();
  sub_599A4(v3 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason, (uint64_t)(v0 + 2));
  sub_59D90();
  sub_5A440();
  uint64_t v5 = (void *)swift_task_alloc(dword_100564);
  v0[10] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_569A4;
  return sub_AC948();
}

uint64_t sub_569A4(uint64_t a1)
{
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v4, v5, v6);
  }

  else
  {
    uint64_t v8 = (void *)swift_task_alloc(dword_FD824);
    *(void *)(v2 + 104) = v8;
    *uint64_t v8 = v3;
    v8[1] = sub_56A04;
    uint64_t v9 = sub_59F84();
    return sub_59C84(v9);
  }

uint64_t sub_56A04()
{
  return sub_1B758();
}

uint64_t sub_56A40()
{
  return sub_2075C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_56A74()
{
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v2 = sub_1BD34();
  sub_39658(v2, (uint64_t)qword_FD728);
  os_log_type_t v3 = sub_32A5C();
  if (sub_2B854(v3))
  {
    uint64_t v4 = (_WORD *)sub_1B9DC();
    sub_2B938(v4);
    sub_461C0(&dword_0, v5, v6, "UndoTimerChangeStateFlow: Error publishing generic failure output.");
    sub_1B904(v1);
  }

  sub_222B8();
  sub_59D04();
  sub_59F24();
  sub_1B86C();
  sub_1BA24();
  return sub_599EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_56B18()
{
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v2 = sub_1BD34();
  sub_39658(v2, (uint64_t)qword_FD728);
  os_log_type_t v3 = sub_32A5C();
  if (sub_2B854(v3))
  {
    uint64_t v4 = (_WORD *)sub_1B9DC();
    sub_2B938(v4);
    sub_461C0(&dword_0, v5, v6, "UndoTimerChangeStateFlow: Error publishing generic failure output.");
    sub_1B904(v1);
  }

  sub_222B8();
  sub_59D04();
  sub_59F24();
  sub_1B86C();
  sub_1BA24();
  return sub_599EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_56BC0(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = sub_67C4(&qword_FBFC8);
  v2[7] = sub_2B4DC(*(void *)(v3 - 8));
  _BYTE v2[8] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_56C0C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[6];
  uint64_t v3 = sub_5A13C();
  sub_59C68(v3);
  sub_1BC80(v1);
  sub_59DCC();
  sub_599A4(v2 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason, (uint64_t)(v0 + 2));
  sub_59D90();
  sub_5A440();
  uint64_t v4 = (void *)swift_task_alloc(dword_100574);
  v0[9] = v4;
  void *v4 = v0;
  v4[1] = sub_56CB8;
  return sub_ACD60();
}

uint64_t sub_56CB8(uint64_t a1)
{
  NSNumber v11 = (void *)*v2;
  uint64_t v4 = v11;
  sub_1BC0C(&v11);
  v4[10] = a1;
  v4[11] = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v5, v6, v7);
  }

  else
  {
    uint64_t v9 = (void *)swift_task_alloc(dword_FD824);
    v4[12] = v9;
    *uint64_t v9 = v2;
    v9[1] = sub_56D34;
    uint64_t v10 = sub_59F84();
    return sub_59C84(v10);
  }

uint64_t sub_56D34()
{
  *(void *)(v1 + 104) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_56D80()
{
  sub_5A4A4();
  sub_1BABC();
  sub_1B86C();
  return sub_2075C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_56DC0()
{
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v2 = sub_1BD34();
  sub_39658(v2, (uint64_t)qword_FD728);
  os_log_type_t v3 = sub_32A5C();
  if (sub_2B854(v3))
  {
    uint64_t v4 = (_WORD *)sub_1B9DC();
    sub_2B938(v4);
    sub_461C0(&dword_0, v5, v6, "UndoTimerChangeStateFlow: Error publishing timerNotFound failure output.");
    sub_1B904(v1);
  }

  sub_222B8();
  sub_5A5E8();
  sub_59F24();
  sub_1B86C();
  sub_1BA24();
  return sub_599EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_56E64()
{
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v2 = sub_1BD34();
  sub_39658(v2, (uint64_t)qword_FD728);
  os_log_type_t v3 = sub_32A5C();
  if (sub_2B854(v3))
  {
    uint64_t v4 = (_WORD *)sub_1B9DC();
    sub_2B938(v4);
    sub_461C0(&dword_0, v5, v6, "UndoTimerChangeStateFlow: Error publishing timerNotFound failure output.");
    sub_1B904(v1);
  }

  sub_222B8();
  sub_5A5E8();
  sub_59F24();
  sub_1B86C();
  sub_1BA24();
  return sub_599EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_56F10(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = sub_67C4(&qword_FBFC8);
  v3[8] = sub_2B4DC(*(void *)(v4 - 8));
  void v3[9] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_56F60()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[7];
  uint64_t v3 = sub_5A13C();
  sub_59C68(v3);
  sub_1BC80(v1);
  sub_59DCC();
  sub_599A4(v2 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason, (uint64_t)(v0 + 2));
  sub_59D90();
  sub_5A440();
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v5 = unk_FF234;
  sub_5A3A0();
  uint64_t v6 = (void *)swift_task_alloc(v5);
  v0[10] = v6;
  void *v6 = v0;
  v6[1] = sub_5702C;
  return v8(v4, v0[6]);
}

uint64_t sub_5702C()
{
  *(void *)(v2 + 88) = v1;
  *(void *)(v2 + 96) = v0;
  sub_2B988(v3);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_57080()
{
  id v1 = *(id *)(v0 + 88);
  uint64_t v2 = (void *)sub_1B970();
  *(void *)(v0 + 104) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_570D4;
  return sub_575C0(*(void *)(v0 + 88));
}

uint64_t sub_570D4()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc();

  sub_1B9B8();
  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_5713C()
{
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v2 = sub_1BD34();
  sub_39658(v2, (uint64_t)qword_FD728);
  os_log_type_t v3 = sub_32A5C();
  if (sub_2B854(v3))
  {
    uint64_t v4 = (_WORD *)sub_1B9DC();
    sub_2B938(v4);
    sub_461C0(&dword_0, v5, v6, "UndoTimerChangeStateFlow: Error publishing timerAlreadyRunning failure output.");
    sub_1B904(v1);
  }

  sub_222B8();
  sub_59D04();
  sub_59F24();
  sub_1B86C();
  sub_1BA24();
  return sub_599EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_571E0()
{
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v2 = sub_1BD34();
  sub_39658(v2, (uint64_t)qword_FD728);
  os_log_type_t v3 = sub_32A5C();
  if (sub_2B854(v3))
  {
    uint64_t v4 = (_WORD *)sub_1B9DC();
    sub_2B938(v4);
    sub_461C0(&dword_0, v5, v6, "UndoTimerChangeStateFlow: Error publishing timerAlreadyRunning failure output.");
    sub_1B904(v1);
  }

  sub_222B8();
  sub_59D04();
  sub_59F24();
  sub_1B86C();
  sub_1BA24();
  return sub_599EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_57288(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = sub_67C4(&qword_FBFC8);
  v3[8] = sub_2B4DC(*(void *)(v4 - 8));
  void v3[9] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_572D8()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[7];
  uint64_t v3 = sub_5A13C();
  sub_59C68(v3);
  sub_1BC80(v1);
  sub_59DCC();
  sub_599A4(v2 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason, (uint64_t)(v0 + 2));
  sub_59D90();
  sub_5A440();
  uint64_t v4 = *(void *)(v2 + 48);
  sub_8CFC( (void *)(v2 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_deviceState),  *(void *)(v2 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_deviceState + 24));
  uint64_t v5 = sub_5A434();
  char v7 = sub_BB814(v5, v6);
  uint64_t v8 = unk_100B6C;
  sub_5A3A0();
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v0[10] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_573D8;
  return v11(v7 & 1, v4, v0[6]);
}

uint64_t sub_573D8(uint64_t a1)
{
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v4, v5, v6);
  }

  else
  {
    uint64_t v8 = (void *)swift_task_alloc(dword_FD824);
    *(void *)(v2 + 104) = v8;
    *uint64_t v8 = v3;
    v8[1] = sub_57438;
    uint64_t v9 = sub_59F84();
    return sub_59C84(v9);
  }

uint64_t sub_57438()
{
  return sub_1B758();
}

uint64_t sub_57474()
{
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v2 = sub_1BD34();
  sub_39658(v2, (uint64_t)qword_FD728);
  os_log_type_t v3 = sub_32A5C();
  if (sub_2B854(v3))
  {
    uint64_t v4 = (_WORD *)sub_1B9DC();
    sub_2B938(v4);
    sub_461C0(&dword_0, v5, v6, "UndoTimerChangeStateFlow: Error publishing timerAlreadyPaused failure output.");
    sub_1B904(v1);
  }

  sub_222B8();
  sub_59D04();
  sub_59F24();
  sub_1B86C();
  sub_1BA24();
  return sub_599EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_57518()
{
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v2 = sub_1BD34();
  sub_39658(v2, (uint64_t)qword_FD728);
  os_log_type_t v3 = sub_32A5C();
  if (sub_2B854(v3))
  {
    uint64_t v4 = (_WORD *)sub_1B9DC();
    sub_2B938(v4);
    sub_461C0(&dword_0, v5, v6, "UndoTimerChangeStateFlow: Error publishing timerAlreadyPaused failure output.");
    sub_1B904(v1);
  }

  sub_222B8();
  sub_59D04();
  sub_59F24();
  sub_1B86C();
  sub_1BA24();
  return sub_599EC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_575C0(uint64_t a1)
{
  v1[12] = a1;
  uint64_t v2 = sub_1BD34();
  v1[13] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[14] = v3;
  v1[15] = sub_1B6C8(v3);
  uint64_t v4 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v1[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[17] = v5;
  v1[18] = sub_1B6C8(v5);
  uint64_t v6 = type metadata accessor for SiriTimeMeasurement(0LL);
  v1[19] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[20] = v7;
  v1[21] = sub_1B6C8(v7);
  uint64_t v8 = sub_2BB7C();
  v1[22] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v1[23] = v9;
  v1[24] = sub_1B6C8(v9);
  uint64_t v10 = type metadata accessor for DialogPhase(0LL);
  v1[25] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v1[26] = v11;
  v1[27] = sub_1B6C8(v11);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_57670(uint64_t a1)
{
  uint64_t v2 = static DialogPhase.error.getter(a1);
  uint64_t v3 = NLContextUpdate.init()(v2);
  sub_59C1C(v3, enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:));
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v4 = v1[18];
  uint64_t v5 = v1[14];
  uint64_t v6 = v1[15];
  uint64_t v7 = sub_5474(v1[13], (uint64_t)qword_FD728);
  sub_59EF4(v6, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  uint64_t v8 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v4, v6, v8);
  uint64_t v9 = (uint64_t **)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  v1[28] = (uint64_t)v9;
  *uint64_t v9 = v1;
  v9[1] = (uint64_t *)sub_57784;
  return PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)( v1 + 2,  v1[27],  v1[24],  v1[21],  0LL);
}

uint64_t sub_57784()
{
  *(void *)(v1 + 232) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_577D0()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  sub_8CFC(v0 + 7, v1);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v0[30] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_5784C;
  uint64_t v4 = sub_5A338();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v4, v1, v2);
}

uint64_t sub_5784C()
{
  *(void *)(v1 + 248) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_57898()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v23 = *(void *)(v0 + 144);
  uint64_t v25 = *(void *)(v0 + 120);
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 16));
  sub_17D54(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_433D8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_59DA0();
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 56));
  sub_1B86C();
  sub_1BA14();
  uint64_t v5 = sub_1B838();
  uint64_t v13 = sub_1B910(v5, v6, v7, v8, v9, v10, v11, v12, v0 + 56, v23);
  sub_1B8C4(v13, v14, v15, v16, v17, v18, v19, v20, v22, v24, v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_57948()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 184);
  (*(void (**)(void, void))(*(void *)(v0 + 160) + 8LL))(*(void *)(v0 + 168), *(void *)(v0 + 152));
  sub_2B5AC(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_5A060();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_579C4()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 16));
  sub_17D54(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_433D8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v5 = sub_5A434();
  v6(v5);
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 56));
  sub_5A060();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_57A74(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  void v3[9] = v2;
  v3[7] = a1;
  return sub_2B82C((uint64_t)sub_57A88);
}

uint64_t sub_57A88()
{
  id v1 = [*(id *)(v0 + 56) mutableCopy];
  _bridgeAnyObjectToAny(_:)(v1);
  swift_unknownObjectRelease(v1);
  uint64_t v2 = sub_33CEC(0LL, &qword_FDA68, &OBJC_CLASS___MTMutableTimer_ptr);
  if (swift_dynamicCast(v0 + 48, v0 + 16, (char *)&type metadata for Any + 8, v2, 6LL))
  {
    uint64_t v3 = *(void *)(v0 + 64);
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v5 = *(void **)(v0 + 48);
    *(void *)(v0 + 80) = v5;
    [v5 setState:v3];
    uint64_t v6 = sub_5A044();
    *(void *)(v0 + 88) = v6;
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 96) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_57C28;
    sub_5A2A0();
    sub_1B9B8();
    return sub_59B44();
  }

  else
  {
    if (qword_FB1D0 != -1) {
      swift_once(&qword_FB1D0, sub_4DE58);
    }
    uint64_t v9 = sub_1BD34();
    sub_39658(v9, (uint64_t)qword_FD728);
    os_log_type_t v10 = sub_32A5C();
    if (sub_1BB80(v10))
    {
      uint64_t v11 = (_WORD *)sub_1B9DC();
      sub_2BA04(v11);
      sub_1BAA8(&dword_0, v12, v13, "UndoTimerChangeStateFlow: Failed to get mutableTimer copy");
      sub_1B904((uint64_t)v1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

uint64_t sub_57C28()
{
  return sub_1B758();
}

uint64_t sub_57C60()
{
  if (*(_BYTE *)(v0 + 104) == 1)
  {
    sub_2BF0C();
    uint64_t v1 = sub_5A414();
  }

  else
  {

    uint64_t v1 = 0LL;
  }

  return sub_2BB68(v1, *(uint64_t (**)(void))(v0 + 8));
}

void sub_57CA4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_67C4(&qword_FDA48);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = [*(id *)(a2 + 112) updateTimer:a3];
  if (v9)
  {
    os_log_type_t v10 = v9;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v26((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v6);
    uint64_t v25 = a1;
    uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v12 = (v11 + 24) & ~v11;
    uint64_t v13 = swift_allocObject(&unk_F4C40, v12 + v8, v11 | 7);
    *(void *)(v13 + 16) = a3;
    uint64_t v14 = v13 + v12;
    uint64_t v15 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
    v15(v14, (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
    uint64_t v31 = sub_594F4;
    uint64_t v32 = v13;
    aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256LL;
    uint64_t v29 = sub_ADF24;
    uint64_t v30 = &unk_F4C58;
    uint64_t v16 = _Block_copy(&aBlock);
    id v17 = v10;
    id v18 = a3;
    swift_release();
    id v19 = [v17 addSuccessBlock:v16];
    _Block_release(v16);

    v26((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v25, v6);
    uint64_t v20 = (v11 + 16) & ~v11;
    uint64_t v21 = swift_allocObject(&unk_F4C90, v20 + v8, v11 | 7);
    v15(v21 + v20, (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
    uint64_t v31 = sub_59554;
    uint64_t v32 = v21;
    aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256LL;
    uint64_t v29 = sub_ADF24;
    uint64_t v30 = &unk_F4CA8;
    uint64_t v22 = _Block_copy(&aBlock);
    id v23 = v17;
    swift_release();
    id v24 = [v23 addFailureBlock:v22];

    _Block_release(v22);
  }

uint64_t sub_57F04(uint64_t a1, double a2)
{
  *(void *)(v3 + 32) = v2;
  *(double *)(v3 + 24) = a2;
  *(void *)(v3 + 16) = a1;
  return sub_2B82C((uint64_t)sub_57F1C);
}

uint64_t sub_57F1C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = [objc_allocWithZone(MTMutableTimer) initWithState:2 duration:*(double *)(v0 + 24)];
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = sub_58E84(v1);
  if (v4)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t v3 = sub_2B7C4();
  }

  else
  {
    NSString v5 = 0LL;
  }

  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void **)(v0 + 16);
  sub_5A600(v3, "setTitle:");

  id v8 = [v7 sound];
  sub_5A600((uint64_t)v8, "setSound:");

  uint64_t v9 = sub_5A044();
  *(void *)(v0 + 48) = v9;
  *(void *)(v9 + 16) = v6;
  *(void *)(v9 + 24) = v2;
  os_log_type_t v10 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v10;
  *os_log_type_t v10 = v0;
  v10[1] = sub_58050;
  sub_5A2A0();
  sub_1B9B8();
  return sub_59B44();
}

uint64_t sub_58050()
{
  return sub_1B758();
}

uint64_t sub_58088()
{
  if (*(_BYTE *)(v0 + 64) == 1)
  {
    sub_2BF0C();
    uint64_t v1 = sub_5A414();
  }

  else
  {

    uint64_t v1 = 0LL;
  }

  return sub_2BB68(v1, *(uint64_t (**)(void))(v0 + 8));
}

void sub_580CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_67C4(&qword_FDA48);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = [*(id *)(a2 + 112) addTimer:a3];
  if (v9)
  {
    os_log_type_t v10 = v9;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v26((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v6);
    uint64_t v25 = a1;
    uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v12 = (v11 + 24) & ~v11;
    uint64_t v13 = swift_allocObject(&unk_F4A88, v12 + v8, v11 | 7);
    *(void *)(v13 + 16) = a3;
    uint64_t v14 = v13 + v12;
    uint64_t v15 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
    v15(v14, (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
    uint64_t v31 = sub_592D8;
    uint64_t v32 = v13;
    aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256LL;
    uint64_t v29 = sub_ADF24;
    uint64_t v30 = &unk_F4AA0;
    uint64_t v16 = _Block_copy(&aBlock);
    id v17 = v10;
    id v18 = a3;
    swift_release();
    id v19 = [v17 addSuccessBlock:v16];
    _Block_release(v16);

    v26((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v25, v6);
    uint64_t v20 = (v11 + 16) & ~v11;
    uint64_t v21 = swift_allocObject(&unk_F4AD8, v20 + v8, v11 | 7);
    v15(v21 + v20, (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
    uint64_t v31 = sub_59300;
    uint64_t v32 = v21;
    aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256LL;
    uint64_t v29 = sub_ADF24;
    uint64_t v30 = &unk_F4AF0;
    uint64_t v22 = _Block_copy(&aBlock);
    id v23 = v17;
    swift_release();
    id v24 = [v23 addFailureBlock:v22];

    _Block_release(v22);
  }

uint64_t sub_5832C(uint64_t a1, void *a2, uint64_t a3, const char *a4)
{
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v7 = sub_1BD34();
  uint64_t v8 = (os_log_s *)sub_5474(v7, (uint64_t)qword_FD728);
  id v9 = a2;
  os_log_type_t v10 = v8;
  Logger.logObject.getter(v9);
  os_log_type_t v11 = sub_1BCD0();
  if (sub_2BAD0(v11))
  {
    uint64_t v12 = (_DWORD *)sub_1BA1C(12LL);
    uint64_t v13 = sub_1BA1C(32LL);
    uint64_t v23 = v13;
    *uint64_t v12 = 136315138;
    id v14 = [v9 timerIDString];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v16 = v15;

    uint64_t v17 = sub_5A3C8();
    uint64_t v22 = sub_683C(v17, v18, v19);
    sub_5A53C((uint64_t)&v22, (uint64_t)&v23);

    swift_bridgeObjectRelease(v16);
    sub_5A498(&dword_0, v10, v4, a4);
    sub_5A480();
    sub_1B904(v13);
    sub_1B904((uint64_t)v12);
  }

  else
  {
  }

  LOBYTE(v23) = 1;
  uint64_t v20 = sub_67C4(&qword_FDA48);
  return CheckedContinuation.resume(returning:)(&v23, v20);
}

uint64_t sub_584E0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2B82C((uint64_t)sub_584F0);
}

uint64_t sub_584F0()
{
  uint64_t v1 = sub_5A044();
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  uint64_t v3 = (void *)sub_5A4EC(v2);
  *uint64_t v3 = v0;
  v3[1] = sub_558A8;
  sub_5A2A0();
  sub_1B9B8();
  return sub_59B44();
}

void sub_5857C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_67C4(&qword_FDA48);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = [a2 timerIDString];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  id v13 = [*(id *)(a3 + 112) removeTimer:a2];
  if (v13)
  {
    id v14 = v13;
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v30((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v6);
    uint64_t v29 = a1;
    uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v16 = (v15 + 32) & ~v15;
    uint64_t v28 = v15 | 7;
    uint64_t v17 = swift_allocObject(&unk_F4B28, v16 + v8, v15 | 7);
    *(void *)(v17 + 16) = v10;
    *(void *)(v17 + 24) = v12;
    unint64_t v18 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
    v18(v17 + v16, (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
    uint64_t v35 = sub_59370;
    uint64_t v36 = v17;
    aBlock = _NSConcreteStackBlock;
    uint64_t v32 = 1107296256LL;
    uint64_t v33 = sub_ADF24;
    os_log_type_t v34 = &unk_F4B40;
    id v19 = _Block_copy(&aBlock);
    id v20 = v14;
    swift_release();
    id v21 = [v20 addSuccessBlock:v19];
    _Block_release(v19);

    v30((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v29, v6);
    uint64_t v22 = (v15 + 16) & ~v15;
    uint64_t v23 = swift_allocObject(&unk_F4B78, v22 + v8, v28);
    v18(v23 + v22, (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
    uint64_t v35 = sub_593B8;
    uint64_t v36 = v23;
    aBlock = _NSConcreteStackBlock;
    uint64_t v32 = 1107296256LL;
    uint64_t v33 = sub_ADF24;
    os_log_type_t v34 = &unk_F4B90;
    id v24 = _Block_copy(&aBlock);
    id v25 = v20;
    swift_release();
    id v26 = [v25 addFailureBlock:v24];

    _Block_release(v24);
  }

  else
  {
    swift_bridgeObjectRelease(v12);
  }

uint64_t sub_58824(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_5474(v5, (uint64_t)qword_FD728);
  uint64_t v6 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v10;
    *(_DWORD *)id v9 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v13 = sub_683C(a2, a3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl(&dword_0, v7, v8, "UndoTimerChangeStateFlow: removed mtTimer successfully, which had ID %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  LOBYTE(v14) = 1;
  uint64_t v11 = sub_67C4(&qword_FDA48);
  return CheckedContinuation.resume(returning:)(&v14, v11);
}

uint64_t sub_589F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), const char *a4)
{
  if (qword_FB1D0 != -1) {
    swift_once(&qword_FB1D0, sub_4DE58);
  }
  uint64_t v8 = sub_1BD34();
  sub_5474(v8, (uint64_t)qword_FD728);
  sub_222DC();
  uint64_t v9 = sub_222DC();
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = a3();
  if (sub_2BAD0(v11))
  {
    uint64_t v12 = (_DWORD *)sub_1BA1C(12LL);
    uint64_t v13 = (void *)sub_1BA1C(8LL);
    *uint64_t v12 = 138412290;
    sub_222DC();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v21 = v14;
    sub_5A53C((uint64_t)&v21, (uint64_t)v22);
    *uint64_t v13 = v14;
    sub_222B8();
    sub_222B8();
    sub_5A498(&dword_0, v10, v4, a4);
    sub_67C4((uint64_t *)&unk_FD5F0);
    sub_5A480();
    sub_1B904((uint64_t)v13);
    sub_1B904((uint64_t)v12);
  }

  else
  {
    sub_222B8();
    sub_222B8();
  }

  LOBYTE(v21) = 0;
  uint64_t v15 = sub_67C4(&qword_FDA48);
  CheckedContinuation.resume(returning:)(&v21, v15);
  uint64_t v16 = type metadata accessor for ABCReport(0LL);
  v22[2] = v16;
  v22[3] = &protocol witness table for ABCReport;
  uint64_t v17 = sub_DB90(&v21);
  *uint64_t v17 = _convertErrorToNSError(_:)(a1);
  uint64_t v18 = enum case for ErrorSubType.managerReturnedError(_:);
  uint64_t v19 = type metadata accessor for ErrorSubType(0LL);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104LL))(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v17,  enum case for ABCReport.timerUndoHandle(_:),  v16);
  static BarbaraWalters.stopThePresses(for:)(&v21);
  return _s20HandleIntentStrategyVwxx_0(&v21);
}

uint64_t UndoTimerChangeStateFlow.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 128));
  sub_17A70(v0 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_followupPluginAction, &qword_FD740);
  _s20HandleIntentStrategyVwxx_0((void *)(v0
                                          + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_deviceState));
  sub_17A70(v0 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason, &qword_FBFC8);
  return v0;
}

uint64_t UndoTimerChangeStateFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_58CB8()
{
  return UndoTimerChangeStateFlow.on(input:)() & 1;
}

uint64_t sub_58CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_2ADE8;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_58D44()
{
  return UndoTimerChangeStateFlow.execute(completion:)();
}

uint64_t sub_58D64(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_FD764);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_58DB8;
  return UndoTimerChangeStateFlow.execute()(a1);
}

uint64_t sub_58DB8()
{
  return v0[1]();
}

uint64_t sub_58DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UndoTimerChangeStateFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_58E1C(void *a1)
{
  id v2 = [a1 identifier];

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  return sub_5A434();
}

uint64_t sub_58E84(void *a1)
{
  id v1 = [a1 title];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void *sub_58EE4(uint64_t a1, uint64_t a2, __int128 *a3, void *a4)
{
  uint64_t v8 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for SiriTimerManagerImpl(0LL);
  id v20 = &protocol witness table for SiriTimerManagerImpl;
  *(void *)&__int128 v18 = a1;
  type metadata accessor for PauseTimerCATsSimple(0LL);
  static CATOption.defaultMode.getter();
  a4[2] = CATWrapperSimple.__allocating_init(options:globals:)(v10, 0LL);
  type metadata accessor for PauseTimerCATs_Async(0LL);
  static CATOption.defaultMode.getter();
  a4[3] = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  type metadata accessor for ResumeTimerCATsSimple(0LL);
  static CATOption.defaultMode.getter();
  a4[4] = CATWrapperSimple.__allocating_init(options:globals:)(v10, 0LL);
  type metadata accessor for ResumeTimerCATs_Async(0LL);
  static CATOption.defaultMode.getter();
  a4[5] = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  type metadata accessor for PauseTimerCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  a4[6] = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  type metadata accessor for ResumeTimerCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  a4[7] = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  type metadata accessor for TimerBaseCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  a4[8] = CATWrapper.__allocating_init(options:globals:)(v10, 0LL);
  a4[15] = 0LL;
  a4[16] = 0LL;
  uint64_t v11 = (uint64_t)a4 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_followupPluginAction;
  uint64_t v12 = type metadata accessor for PluginAction(0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v11, 1LL, 1LL, v12);
  *((_BYTE *)a4 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_operation) = 8;
  uint64_t v13 = (char *)a4 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_remainingTime;
  *(void *)uint64_t v13 = 0LL;
  v13[8] = 1;
  uint64_t v14 = (uint64_t)a4 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_failureReason;
  uint64_t v15 = type metadata accessor for SiriTimeEventSender.ReasonDescription(0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v14, 1LL, 1LL, v15);
  sub_5530(&v18, (uint64_t)(a4 + 9));
  sub_5530(a3, (uint64_t)a4 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin24UndoTimerChangeStateFlow_deviceState);
  a4[14] = a2;
  return a4;
}

void sub_59110(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_5A008(a1, a2, a3);
  sub_5A1CC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_17DD4();
}

void sub_5913C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_5A008(a1, a2, a3);
  sub_5A1CC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL));
  sub_17DD4();
}

uint64_t sub_59168(uint64_t a1)
{
  return sub_55768(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_59184()
{
  return type metadata accessor for UndoTimerChangeStateFlow(0LL);
}

void sub_5918C(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[7] = "(";
  v6[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[9] = &unk_C3568;
  sub_59280( 319LL,  (unint64_t *)&qword_FD828,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction);
  if (v3 <= 0x3F)
  {
    v6[10] = *(void *)(v2 - 8) + 64LL;
    v6[11] = &unk_C3580;
    v6[12] = "(";
    v6[13] = &unk_C3598;
    sub_59280( 319LL,  (unint64_t *)&unk_FD830,  (uint64_t (*)(uint64_t))&type metadata accessor for SiriTimeEventSender.ReasonDescription);
    if (v5 <= 0x3F)
    {
      v6[14] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 15LL, v6, a1 + 80);
    }
  }

void sub_59280(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

void sub_592CC(uint64_t a1)
{
}

void sub_592D8(uint64_t a1)
{
}

uint64_t sub_592E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_592F4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_59300()
{
}

void sub_59314(uint64_t a1)
{
}

uint64_t sub_5931C()
{
  return sub_59F74(v0, v1, v2);
}

uint64_t sub_59370(uint64_t a1)
{
  return sub_58824(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_593B8()
{
}

void sub_593CC()
{
  uint64_t v0 = sub_59F90();
  sub_589F0(v0, v1, v2, v3);
  sub_17B78();
}

uint64_t sub_59404(uint64_t a1)
{
  return sub_56728(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_59410()
{
}

uint64_t sub_59424(uint64_t a1)
{
  return sub_55B58(a1, *(void *)(v1 + 16));
}

uint64_t sub_59434(uint64_t a1)
{
  return sub_55CB0(a1);
}

uint64_t sub_59474(uint64_t a1)
{
  return sub_56134(a1, v1);
}

void sub_59480()
{
}

void sub_59494(uint64_t a1)
{
}

uint64_t sub_594A0()
{
  sub_5A348();
  return sub_59F74(v0, v1, v2);
}

void sub_594F4(uint64_t a1)
{
}

void sub_59500(uint64_t a1, const char *a2)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(sub_67C4(&qword_FDA48) - 8) + 80LL);
  sub_5832C(a1, *(void **)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
  sub_17B78();
}

void sub_59554()
{
}

uint64_t sub_59568(uint64_t a1)
{
  return sub_558E8(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_59574()
{
  uint64_t v1 = sub_67C4(&qword_FDA48);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_595D8()
{
}

void sub_595EC()
{
  uint64_t v0 = sub_59F90();
  sub_56358(v0, v1, v2, v3);
  sub_17B78();
}

void sub_59624(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_5A008(a1, a2, a3);
  sub_5A1CC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_17DD4();
}

uint64_t sub_59668()
{
  return sub_4F668();
}

uint64_t sub_596B4()
{
  return sub_519FC();
}

uint64_t sub_59700()
{
  return sub_5A0A8();
}

uint64_t sub_5975C()
{
  return sub_59C2C();
}

uint64_t sub_597A4()
{
  uint64_t v2 = v0[202];
  uint64_t v3 = v0[153];
  *(void *)(v1 - 120) = v0[155];
  *(void *)(v1 - 112) = v3;
  uint64_t v4 = v0[150];
  *(void *)(v1 - 104) = v0[152];
  *(void *)(v1 - 96) = v4;
  *(void *)(v1 - 88) = v0[147];
  return swift_task_dealloc(v2);
}

uint64_t sub_59850(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_5986C()
{
  uint64_t v2 = v0[202];
  uint64_t v3 = v0[152];
  *(void *)(v1 - 128) = v0[153];
  *(void *)(v1 - 120) = v3;
  uint64_t v4 = v0[147];
  *(void *)(v1 - 112) = v0[150];
  *(void *)(v1 - 104) = v4;
  return swift_task_dealloc(v2);
}

uint64_t sub_59918()
{
  uint64_t v2 = v0[186];
  uint64_t v3 = v0[184];
  *(void *)(v1 - 104) = v0[183];
  *(void *)(v1 - 96) = v2;
  *(void *)(v1 - 120) = v0[182];
  *(void *)(v1 - 112) = v3;
  return swift_errorRelease(*(void *)(v1 - 88));
}

  ;
}

uint64_t sub_59974()
{
  return static ExecuteResponse.complete()();
}

void sub_59984()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_59998()
{
  return sub_55208(v0);
}

uint64_t sub_599A4(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

uint64_t sub_599B0()
{
  return swift_errorRelease(*(void *)(v0 - 88));
}

void sub_599D8()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_599EC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_599FC()
{
  uint64_t v2 = v0[202];
  uint64_t v3 = v0[147];
  *(void *)(v1 - 136) = v0[150];
  *(void *)(v1 - 128) = v3;
  return swift_task_dealloc(v2);
}

  ;
}

void sub_59ABC(uint64_t a1)
{
}

uint64_t sub_59AC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  return swift_task_dealloc(a25);
}

uint64_t sub_59AD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  return swift_task_dealloc(a24);
}

uint64_t sub_59AD8()
{
  return swift_task_dealloc(*(void *)(v0 - 112));
}

uint64_t sub_59AE0()
{
  return swift_task_dealloc(*(void *)(v0 - 120));
}

uint64_t sub_59AE8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_59AF8()
{
  return ((uint64_t (*)(void))dispatch thunk of SiriTimerManagerIOS.currentTimer())();
}

void sub_59B08()
{
}

uint64_t sub_59B18@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 104))(v2, a1, v3);
}

void sub_59B28()
{
}

uint64_t sub_59B38()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_59B44()
{
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_59B4C()
{
  return ((uint64_t (*)(void))dispatch thunk of OutputPublisherAsync.publish(output:))();
}

uint64_t sub_59B68(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_59B84()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_59B94()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_59BA4()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 112) + 8LL))( *(void *)(v0 - 96),  *(void *)(v0 - 104));
}

void *sub_59BB4()
{
  return sub_8CFC(v1, v0);
}

void sub_59BD0()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_59BE4()
{
  return *(void *)(v0 + 1152);
}

uint64_t sub_59BF4()
{
  return v0;
}

uint64_t sub_59C0C()
{
  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v2 - 120), v1);
}

uint64_t sub_59C1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

uint64_t sub_59C2C()
{
  return ((uint64_t (*)(void))sub_4F798)();
}

uint64_t sub_59C38(uint64_t a1, uint64_t a2)
{
  return sub_568A0(a1, a2);
}

uint64_t sub_59C4C(uint64_t a1)
{
  return sub_56BC0(a1);
}

void sub_59C60(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_59C68(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v1, v2, a1);
}

uint64_t sub_59C84(uint64_t a1)
{
  return sub_575C0(a1);
}

void sub_59C94()
{
}

uint64_t sub_59CA4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 1632));
}

uint64_t sub_59CAC()
{
  return v0;
}

void *sub_59CBC(__int128 *a1)
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()(v2);
}

void sub_59CD4(void *a1@<X8>)
{
}

uint64_t sub_59CE0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x6573756170LL, 0xE500000000000000LL, 0LL);
}

uint64_t sub_59CF8()
{
  return ((uint64_t (*)(void))dispatch thunk of OutputPublisherAsync.publish(output:))();
}

void sub_59D04()
{
}

uint64_t sub_59D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_59D2C(uint64_t (*a1)(void))
{
  return a1();
}

void sub_59D48()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_59D58(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 1256) + 8LL))(a1, *(void *)(v1 + 1248));
}

uint64_t sub_59D68()
{
  return swift_errorRelease(*(void *)(v0 - 104));
}

void sub_59D90()
{
}

uint64_t sub_59DA0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void *sub_59DB0()
{
  return sub_8CFC(v1, v0);
}

void sub_59DCC()
{
}

uint64_t sub_59DDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 - 104) = a1;
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_59DE8(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  uint64_t v6 = (void *)(v3 - 8);
  void *v6 = *v2;
  uint64_t v7 = v5[10];
  void *v6 = *v2;
  v5[11] = a1;
  v5[12] = v1;
  return swift_task_dealloc(v7);
}

uint64_t sub_59E0C@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_59E20()
{
  return ((uint64_t (*)(void))DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:))();
}

uint64_t sub_59E38()
{
  return ((uint64_t (*)(void))PatternExecutionResult.generatePatternOutput(manifest:measure:))();
}

uint64_t sub_59E50(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_59E74()
{
  return swift_endAccess(v0);
}

uint64_t sub_59E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 128, v5 - 112, v4 + 8, a4, 6LL);
}

uint64_t sub_59E90( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 6;
  *(void *)(v8 - 104) = a1;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_59EA4(uint64_t a1, uint64_t a2)
{
  return sub_57288(a1, a2);
}

uint64_t sub_59EB8(uint64_t a1, uint64_t a2)
{
  return sub_56F10(a1, a2);
}

uint64_t sub_59ECC()
{
  return ((uint64_t (*)(void))dispatch thunk of SessionManaging.sessionIDString(for:))();
}

uint64_t sub_59EE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8);
}

void *sub_59EE8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_59EF4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_59EFC()
{
  return ((uint64_t (*)(void))dispatch thunk of SessionManaging.sessionIDString(for:))();
}

uint64_t sub_59F10(uint64_t a1, uint64_t a2)
{
  return sub_568A0(a1, a2);
}

uint64_t sub_59F24()
{
  return static ExecuteResponse.complete()();
}

uint64_t sub_59F2C()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 104);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 112) = v0;
  return swift_task_dealloc(v5);
}

  ;
}

  ;
}

uint64_t sub_59F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_59F84()
{
  return v0;
}

uint64_t sub_59F90()
{
  return v0;
}

uint64_t sub_59FB4(uint64_t a1)
{
  *uint64_t v3 = 0LL;
  v3[1] = v1;
  return swift_bridgeObjectRetain(v1);
}

void sub_59FE0(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  sub_D378();
}

uint64_t sub_59FF0()
{
  return sub_21470(v1, v0);
}

uint64_t sub_59FFC()
{
  return sub_21470(v1, v0);
}

uint64_t sub_5A008(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_67C4(a3);
}

void *sub_5A018()
{
  return sub_8CFC(v0, v1);
}

void *sub_5A034@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_5A044()
{
  return swift_task_alloc(32LL);
}

  ;
}

uint64_t sub_5A060()
{
  return swift_task_dealloc(*(void *)(v0 + 216));
}

uint64_t sub_5A078()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v0, v1, v3, 0LL);
}

void sub_5A090()
{
}

uint64_t sub_5A0A8()
{
  return ((uint64_t (*)(void))sub_52204)();
}

uint64_t sub_5A0B4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 1632));
}

void *sub_5A0C8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_5A0D4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v2, v1, v3);
}

uint64_t sub_5A0E8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5A0F0()
{
  return _s20HandleIntentStrategyVwxx_0(v0);
}

uint64_t sub_5A104()
{
  return static SiriTimeFeatureFlagsImpl.instance.getter();
}

uint64_t sub_5A110()
{
  *uint64_t v0 = v2;
  return swift_storeEnumTagMultiPayload(v0, v1, 0LL);
}

uint64_t sub_5A124()
{
  return swift_task_dealloc(*(void *)(v0 - 128));
}

unint64_t sub_5A12C()
{
  return sub_1E324();
}

uint64_t sub_5A134( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  return swift_task_dealloc(a26);
}

uint64_t sub_5A13C()
{
  return type metadata accessor for SiriTimeEventSender.ReasonDescription(0LL);
}

uint64_t sub_5A144( __n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  a1[1] = a9;
  a1[2].n128_u64[0] = v9;
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_5A158( __n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  a1[1] = a9;
  a1[2].n128_u64[0] = v9;
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_5A16C()
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v0, 0LL, 1LL, v1);
}

uint64_t sub_5A180()
{
  return dispatch thunk of DeviceState.isWatch.getter(v1, v2);
}

uint64_t sub_5A1A4(uint64_t a1)
{
  return SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, a1);
}

void *sub_5A1B8()
{
  return sub_4DB50(v1, v2, v0);
}

uint64_t sub_5A1CC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_5A1D8()
{
  return swift_endAccess(v0);
}

uint64_t sub_5A1E0()
{
  return dispatch thunk of DeviceState.isWatch.getter(v1, v2);
}

uint64_t sub_5A204()
{
  return type metadata accessor for SpeakableString(0LL);
}

uint64_t sub_5A218(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, v3);
}

void sub_5A228()
{
}

uint64_t sub_5A238()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 1632));
}

uint64_t sub_5A248()
{
  return swift_task_alloc(48LL);
}

uint64_t sub_5A250(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 1152);
}

uint64_t sub_5A268(void *a1)
{
  return type metadata accessor for ApplicationContext(0LL);
}

void sub_5A288()
{
  *(void *)(v1 + 16) = (v0 - 32) | 0x8000000000000000LL;
}

  ;
}

int8x16_t sub_5A2AC(int8x16_t *a1)
{
  v1[2].i64[0] = (uint64_t)a1;
  int8x16_t result = vextq_s8(v1[1], v1[1], 8uLL);
  a1[1] = result;
  return result;
}

  ;
}

  ;
}

uint64_t sub_5A2FC()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_5A308@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_5A318()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 96) + 8LL))(v0, *(void *)(v1 - 88));
}

void *sub_5A328()
{
  return ApplicationContext.deviceState.getter(*(void **)(v0 - 128));
}

uint64_t sub_5A338()
{
  return v0;
}

uint64_t sub_5A348()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

  ;
}

uint64_t sub_5A370()
{
  return Data.base64EncodedString(options:)(0LL)._countAndFlagsBits;
}

void sub_5A380()
{
}

void sub_5A390()
{
}

id sub_5A3A0()
{
  return v0;
}

  ;
}

uint64_t sub_5A3C8()
{
  return v0;
}

void sub_5A3D4()
{
}

void sub_5A3E4()
{
}

void sub_5A3F4()
{
}

void sub_5A404()
{
}

uint64_t sub_5A414()
{
  return SiriTimer.__allocating_init(mtTimer:)(v0);
}

uint64_t sub_5A424(uint64_t a1)
{
  return CheckedContinuation.resume(returning:)(v1 - 120, a1);
}

uint64_t sub_5A434()
{
  return v0;
}

uint64_t sub_5A440()
{
  return swift_endAccess(v0);
}

id sub_5A448(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v3, 1, v2);
}

void sub_5A458()
{
}

id sub_5A468(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_5A470()
{
  return v2(v1, v0);
}

uint64_t sub_5A480()
{
  return swift_arrayDestroy(v0, 1LL);
}

void sub_5A48C(uint64_t a1)
{
}

void sub_5A498(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_5A4A4()
{
  return static ExecuteResponse.complete()();
}

void sub_5A4AC()
{
}

uint64_t sub_5A4B8()
{
  return type metadata accessor for SiriTimerSnippetModel(0LL);
}

void *sub_5A4C4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *int8x16_t result = v2;
  result[1] = a2;
  return result;
}

void *sub_5A4D8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *int8x16_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_5A4EC(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

  ;
}

  ;
}

void sub_5A518()
{
}

uint64_t sub_5A524()
{
  return static ApplicationContext.shared.getter();
}

uint64_t sub_5A530()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_5A53C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_5A548()
{
  return swift_task_alloc(v0);
}

uint64_t sub_5A554()
{
  return swift_release(*v0);
}

void *sub_5A560()
{
  return ApplicationContext.deviceState.getter(v0);
}

  ;
}

uint64_t sub_5A580()
{
  return sub_7010(v0);
}

uint64_t sub_5A588(uint64_t a1)
{
  *(void *)(v1 + 1848) = a1;
  return static DialogPhase.completion.getter();
}

uint64_t sub_5A594()
{
  return sub_21470(v1, v0);
}

void sub_5A5A0(uint64_t a1, uint64_t *a2)
{
}

void sub_5A5A8(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  sub_EE84();
}

void sub_5A5B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_5A5C0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 200));
}

uint64_t sub_5A5C8()
{
  return sub_21418(v0, v1);
}

uint64_t sub_5A5D4()
{
  return swift_endAccess(v0);
}

uint64_t sub_5A5DC()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

void sub_5A5E8()
{
}

uint64_t sub_5A5F4(uint64_t a1)
{
  return sub_2F2C4(v1, a1);
}

id sub_5A600(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

void sub_5A60C()
{
}

id sub_5A614()
{
  return sub_4C75C(v0, 0xDu);
}

uint64_t sub_5A620(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t type metadata accessor for TimerBaseCATsSimple(uint64_t a1)
{
  uint64_t result = qword_FDA70;
  if (!qword_FDA70) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimerBaseCATsSimple);
  }
  return result;
}

uint64_t sub_5A660(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100F10);
}

uint64_t sub_5A69C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2B82C((uint64_t)sub_5A6AC);
}

uint64_t sub_5A6AC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = sub_2FB40(v2);
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C2640;
  *(void *)(v3 + 32) = 0x736D657469LL;
  *(void *)(v3 + 40) = 0xE500000000000000LL;
  *(void *)(v3 + 72) = sub_67C4(&qword_FBE28);
  *(void *)(v3 + 48) = v1;
  uint64_t v4 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  swift_bridgeObjectRetain(v1);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_2F914;
  return v7(0xD000000000000025LL, 0x80000000000C84B0LL, v3);
}

uint64_t sub_5A788()
{
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1C020;
  return ((uint64_t (*)(unint64_t, unint64_t, void *))v3)( 0xD000000000000016LL,  0x80000000000C8490LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_5A800(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2B82C((uint64_t)sub_5A810);
}

uint64_t sub_5A810()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = sub_2FB40(v2);
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C2640;
  *(void *)(v3 + 32) = 0x72656D6974LL;
  *(void *)(v3 + 40) = 0xE500000000000000LL;
  uint64_t v4 = 0LL;
  if (v1)
  {
    uint64_t v4 = type metadata accessor for TimerTimer(0LL);
  }

  else
  {
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 72) = v4;
  uint64_t v5 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:) + 1);
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc(v5);
  v0[5] = v6;
  void *v6 = v0;
  v6[1] = sub_2F914;
  return v8(0xD000000000000023LL, 0x80000000000C8460LL, v3);
}

uint64_t sub_5A8F8()
{
  return type metadata accessor for TimerBaseCATsSimple(0LL);
}

uint64_t type metadata accessor for SetTimerAttributeCATPatternsExecutor(uint64_t a1)
{
  return sub_DAF8(a1, (uint64_t *)&unk_FDAD8, (uint64_t)&nominal type descriptor for SetTimerAttributeCATPatternsExecutor);
}

uint64_t sub_5A914(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100F20);
}

void sub_5A950()
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_67C4(&qword_FBE20);
  uint64_t v6 = sub_34D60(v5, 176LL);
  sub_5BCFC((__n128 *)v6, (__n128)xmmword_C27D0);
  uint64_t v7 = *v0;
  if (*v0)
  {
    sub_5BD90();
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v8 = 0LL;
    *(void *)(v6 + 56) = 0LL;
    *(void *)(v6 + 64) = 0LL;
  }

  *(void *)(v6 + 48) = v8;
  sub_5BDD0();
  *(void *)(v6 + 72) = v9;
  *(void *)(v6 + 80) = v10;
  *(void *)(v6 + 88) = 0xEC00000072656D69LL;
  uint64_t v11 = v0[1];
  if (v11)
  {
    uint64_t v12 = sub_5BD90();
    uint64_t v13 = v11;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v12 = 0LL;
    *(void *)(v6 + 104) = 0LL;
    *(void *)(v6 + 112) = 0LL;
  }

  *(void *)(v6 + 96) = v13;
  *(void *)(v6 + 120) = v12;
  *(void *)(v6 + 128) = 0x6174614477656976LL;
  *(void *)(v6 + 136) = 0xE800000000000000LL;
  uint64_t v14 = type metadata accessor for SetTimerAttributeHandledOnWatchParameters(0LL);
  sub_32FC0((uint64_t)v0 + *(int *)(v14 + 24), v4, &qword_FBD98);
  uint64_t v15 = sub_1BCD8();
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v4, 1LL, v15) == 1)
  {
    swift_retain();
    sub_5BDA4();
    sub_DABC(v4, &qword_FBD98);
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
  }

  else
  {
    *(void *)(v6 + 168) = v15;
    uint64_t v16 = sub_49150();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v16, v4, v15);
    swift_retain();
    sub_5BDA4();
  }

  sub_37FA0();
}

void sub_5AAD0()
{
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t v7 = sub_67C4(&qword_FBE20);
  uint64_t v8 = sub_34D60(v7, 176LL);
  *(_OWORD *)(v8 + 16) = xmmword_C27D0;
  strcpy((char *)(v8 + 32), "cancelAction");
  *(_BYTE *)(v8 + 45) = 0;
  *(_WORD *)(v8 + 46) = -5120;
  sub_32FC0(v0, (uint64_t)v6, &qword_FBD98);
  uint64_t v9 = sub_1BCD8();
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v6, 1LL, v9) == 1)
  {
    sub_DABC((uint64_t)v6, &qword_FBD98);
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
  }

  else
  {
    *(void *)(v8 + 72) = v9;
    uint64_t v10 = sub_49150();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v10, v6, v9);
  }

  strcpy((char *)(v8 + 80), "confirmAction");
  *(_WORD *)(v8 + 94) = -4864;
  uint64_t v11 = sub_5BDE4();
  sub_32FC0(v0 + *(int *)(v11 + 20), (uint64_t)v4, &qword_FBD98);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v4, 1LL, v9) == 1)
  {
    sub_DABC((uint64_t)v4, &qword_FBD98);
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
  }

  else
  {
    *(void *)(v8 + 120) = v9;
    uint64_t v12 = sub_49150();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v12, v4, v9);
  }

  strcpy((char *)(v8 + 128), "speakableTimer");
  *(_BYTE *)(v8 + 143) = -18;
  uint64_t v13 = *(void *)(v0 + *(int *)(v11 + 24));
  if (v13)
  {
    uint64_t v14 = sub_5BD90();
  }

  else
  {
    uint64_t v14 = 0LL;
    *(void *)(v8 + 152) = 0LL;
    *(void *)(v8 + 160) = 0LL;
  }

  *(void *)(v8 + 144) = v13;
  *(void *)(v8 + 168) = v14;
  swift_retain();
  sub_37FA0();
}

uint64_t sub_5ACDC()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1C020;
  return sub_38068(0xD00000000000001ELL, 0x80000000000C8590LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_5AD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  void v3[2] = a1;
  sub_1B9B8();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_5AD5C()
{
  unint64_t v1 = v0[3];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = (__n128 *)sub_34D60(v2, 128LL);
  v0[5] = v3;
  sub_5BCFC(v3, (__n128)xmmword_C27E0);
  if (v1)
  {
    type metadata accessor for TimerTimer(0LL);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  unint64_t v4 = v0[4];
  v3[3].n128_u64[0] = v1;
  sub_5BDD0();
  v3[4].n128_u64[1] = v5;
  v3[5].n128_u64[0] = v6;
  v3[5].n128_u64[1] = 0xEC00000072656D69LL;
  v3[7].n128_u64[1] = sub_5BD90();
  v3[6].n128_u64[0] = v4;
  swift_retain();
  sub_5BDA4();
  uint64_t v8 = (void *)swift_task_alloc(v7);
  v0[6] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_5AE50;
  return sub_5BD24(0xD000000000000019LL, 0x80000000000C85B0LL, (uint64_t)v3, v10);
}

uint64_t sub_5AE50()
{
  void *v4 = *v2;
  *(void *)(v3 + 56) = v1;
  swift_task_dealloc();
  sub_1BC04();
  if (!v1) {
    *(void *)(v3 + 64) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v5, v6, v7);
}

uint64_t sub_5AEAC()
{
  return sub_2BB68(*(void *)(v0 + 64), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5AEE4()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5AF18()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_4908C;
  return sub_38068(0xD000000000000020LL, 0x80000000000C8560LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_5AF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  void v6[3] = a2;
  uint64_t v7 = sub_67C4(&qword_FBD98);
  v6[8] = sub_37EE0(v7);
  uint64_t v8 = sub_5BDE4();
  v6[9] = v8;
  v6[10] = sub_37EE0(v8);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5AFD0()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v16 = v0[6];
  uint64_t v5 = v0[4];
  sub_1BCD8();
  sub_49158(v1);
  uint64_t v6 = v1 + *(int *)(v2 + 20);
  sub_49158(v6);
  uint64_t v7 = *(int *)(v2 + 24);
  *(void *)(v1 + vstatic OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = 0LL;
  sub_D378();
  *(void *)(v1 + vstatic OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = v8;
  swift_bridgeObjectRetain(v4);
  SpeakableString.init(serializedValue:)(v5, v4);
  uint64_t v9 = sub_5BDAC();
  sub_1B4F4(v9, v1);
  swift_bridgeObjectRetain(v3);
  SpeakableString.init(serializedValue:)(v16, v3);
  uint64_t v10 = sub_5BDAC();
  sub_1B4F4(v10, v6);
  sub_5AAD0();
  v0[11] = v11;
  uint64_t v12 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[12] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_5B0E4;
  unint64_t v13 = sub_5BD38();
  return v14(v13);
}

uint64_t sub_5B0E4()
{
  void *v4 = *v2;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  sub_1BC04();
  if (!v1) {
    *(void *)(v3 + 112) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v5, v6, v7);
}

uint64_t sub_5B140()
{
  swift_bridgeObjectRelease(v1);
  sub_1BC04();
  sub_1BABC();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 112));
}

uint64_t sub_5B1A0()
{
  swift_bridgeObjectRelease(v1);
  sub_1BC04();
  sub_1BABC();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5B1FC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  uint64_t v4 = sub_5BDE4();
  v3[5] = v4;
  v3[6] = sub_37EE0(v4);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5B23C()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = (void (*)(uint64_t))v0[2];
  sub_1BCD8();
  sub_380F0(v1);
  sub_380F0(v1 + *(int *)(v2 + 20));
  *(void *)(v1 + *(int *)(v2 + swift_bridgeObjectRelease(*(void *)(v0 + 24)) = 0LL;
  v3(v1);
  sub_5AAD0();
  v0[7] = v4;
  uint64_t v5 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_5B2D0;
  unint64_t v6 = sub_5BD38();
  return sub_5BD24(v6, v7, v8, v9);
}

uint64_t sub_5B2D0()
{
  void *v4 = *v2;
  *(void *)(v3 + 72) = v1;
  swift_task_dealloc();
  sub_1BC04();
  if (!v1) {
    *(void *)(v3 + 80) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v5, v6, v7);
}

uint64_t sub_5B32C()
{
  return sub_2BB68(*(void *)(v0 + 80), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5B35C()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5B388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5B3D8(a1, a2, a3);
}

uint64_t sub_5B3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1C308();
  uint64_t v10 = v9 - v8;
  sub_67C4(&qword_FB530);
  sub_1BCE0();
  __chkstk_darwin(v11);
  sub_1C308();
  uint64_t v14 = v13 - v12;
  sub_32FC0(a1, v13 - v12, &qword_FB530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  uint64_t v15 = CATWrapper.init(templateDir:options:globals:)(v14, v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_DABC(a1, &qword_FB530);
  return v15;
}

uint64_t sub_5B4D4()
{
  return type metadata accessor for SetTimerAttributeCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for SetTimerAttributePromptExistingParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FDB98, (uint64_t)&nominal type descriptor for SetTimerAttributePromptExistingParameters);
}

uint64_t sub_5B4F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SetTimerAttributePromptExistingParameters(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_5B52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5B538);
}

void sub_5B538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_67C4(&qword_FBD98);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    sub_17EA4(a1, a2, v6);
  }

  else
  {
    sub_5BD58(*(void *)(a1 + *(int *)(a3 + 24)));
    sub_17B78();
  }

uint64_t sub_5B598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5B5A4);
}

void sub_5B5A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_67C4(&qword_FBD98);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    sub_17EB0(a1, a2, a2, v8);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + swift_bridgeObjectRelease(*(void *)(v0 + 24)) = a2;
    sub_17B78();
  }

void sub_5B60C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = "\b";
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

uint64_t type metadata accessor for SetTimerAttributeHandledOnWatchParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FDC40, (uint64_t)&nominal type descriptor for SetTimerAttributeHandledOnWatchParameters);
}

uint64_t *sub_5B694(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain();
  }

  else
  {
    uint64_t v5 = a1;
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for SpeakableString(0LL);
    swift_retain();
    swift_retain();
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v8, 1LL, v9))
    {
      uint64_t v10 = sub_67C4(&qword_FBD98);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v7, 0LL, 1LL, v9);
    }
  }

  return v5;
}

uint64_t sub_5B788(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  uint64_t result = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

void *sub_5B7FC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for SpeakableString(0LL);
  swift_retain();
  swift_retain();
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v7, 1LL, v8))
  {
    uint64_t v9 = sub_67C4(&qword_FBD98);
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v6, 0LL, 1LL, v8);
  }

  return a1;
}

void *sub_5B8C0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  int v10 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v7, 1LL, v9);
  int v11 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v8, 1LL, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_67C4(&qword_FBD98);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v7, 0LL, 1LL, v9);
  return a1;
}

_OWORD *sub_5B9EC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SpeakableString(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = sub_67C4(&qword_FBD98);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

void *sub_5BA98(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  int v10 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v7, 1LL, v9);
  int v11 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v8, 1LL, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_67C4(&qword_FBD98);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v7, 0LL, 1LL, v9);
  return a1;
}

uint64_t sub_5BBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5BBC0);
}

void sub_5BBC0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    sub_5BD58(*a1);
    sub_17B78();
  }

  else
  {
    uint64_t v6 = sub_67C4(&qword_FBD98);
    sub_17EA4((uint64_t)a1 + *(int *)(a3 + 24), a2, v6);
  }

uint64_t sub_5BC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5BC28);
}

void sub_5BC28(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 2147483646)
  {
    *a1 = a2;
    sub_17B78();
  }

  else
  {
    uint64_t v7 = sub_67C4(&qword_FBD98);
    sub_17EB0((uint64_t)a1 + *(int *)(a4 + 24), a2, a2, v7);
  }

void sub_5BC88(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = "\b";
  sub_367C0(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

__n128 *sub_5BCFC(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6954746567726174LL;
  result[2].n128_u64[1] = 0xEB0000000072656DLL;
  return result;
}

uint64_t sub_5BD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

unint64_t sub_5BD38()
{
  return 0xD000000000000020LL;
}

uint64_t sub_5BD58@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  int v1 = a1 - 1;
  if (v1 < 0) {
    int v1 = -1;
  }
  return (v1 + 1);
}

uint64_t sub_5BD78()
{
  return sub_5B4F0(*(void *)(v0 + 80));
}

uint64_t sub_5BD90()
{
  return type metadata accessor for TimerTimer(0LL);
}

uint64_t sub_5BD98()
{
  return sub_5B4F0(*(void *)(v0 + 48));
}

uint64_t sub_5BDA4()
{
  return swift_retain(v0);
}

uint64_t sub_5BDAC()
{
  return v0;
}

  ;
}

uint64_t sub_5BDE4()
{
  return type metadata accessor for SetTimerAttributePromptExistingParameters(0LL);
}

uint64_t type metadata accessor for TimerUnsupportedValueStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_44F6C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimerUnsupportedValueStrategy);
}

uint64_t sub_5BDF8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FDC80);
  sub_5474(v0, (uint64_t)qword_FDC80);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_5BE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[25] = a2;
  v3[26] = a3;
  v3[24] = a1;
  uint64_t v5 = type metadata accessor for NLContextUpdate(0LL);
  v3[27] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[28] = v6;
  v3[29] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v3[30] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[31] = v8;
  v3[32] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_67C4(&qword_FDD48);
  v3[33] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TimerHandlerError(0LL);
  v3[34] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[35] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[36] = swift_task_alloc(v12);
  v3[37] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  v3[38] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[39] = v14;
  v3[40] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[41] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[42] = v16;
  v3[43] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[44] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v3[45] = v18;
  v3[46] = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for CATOption(0LL);
  v3[47] = swift_task_alloc((*(void *)(*(void *)(v19 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(a3 + 16);
  v3[48] = v20;
  uint64_t v21 = type metadata accessor for ParameterResolutionRecord(0LL, v20);
  v3[49] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v3[50] = v22;
  unint64_t v23 = (*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[51] = swift_task_alloc(v23);
  v3[52] = swift_task_alloc(v23);
  return swift_task_switch(sub_5C004, 0LL, 0LL);
}

uint64_t sub_5C004()
{
  if (qword_FB1E8 != -1) {
    swift_once(&qword_FB1E8, sub_5BDF8);
  }
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[50];
  uint64_t v4 = v0[25];
  uint64_t v5 = sub_5474(v0[38], (uint64_t)qword_FDC80);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v7 = v6(v1, v4, v2);
  uint64_t v55 = v5;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[52];
  if (v10)
  {
    uint64_t v12 = v0[51];
    uint64_t v53 = v0[50];
    uint64_t v13 = v0[49];
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v56 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    v6(v12, v11, v13);
    uint64_t v16 = String.init<A>(describing:)();
    unint64_t v18 = v17;
    v0[23] = sub_683C(v16, v17, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v11, v13);
    _os_log_impl( &dword_0,  v8,  v9,  "[TimerUnsupportedValueStrategy.makeUnsupportedValueOutput] Called with resolveRecord %s",  v14,  0xCu);
    swift_arrayDestroy(v15, 1LL);
    sub_1B904(v15);
    sub_1B904((uint64_t)v14);
  }

  else
  {
    (*(void (**)(void, void))(v0[50] + 8LL))(v0[52], v0[49]);
  }

  uint64_t v19 = v0[47];
  uint64_t v52 = v0[49];
  uint64_t v20 = v0[42];
  uint64_t v21 = v0[43];
  uint64_t v23 = v0[40];
  uint64_t v22 = v0[41];
  uint64_t v24 = v0[38];
  uint64_t v25 = v0[39];
  uint64_t v26 = v0[33];
  uint64_t v54 = v0[34];
  type metadata accessor for TimerBaseCATPatternsExecutor(0LL);
  sub_2BDC8();
  v0[53] = CATWrapper.__allocating_init(options:globals:)(v19, 0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v21,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v55, v24);
  uint64_t v27 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v21, v23, v27);
  uint64_t v28 = (void *)ParameterResolutionRecord.result.getter(v52);
  id v29 = [v28 unsupportedReason];

  static TimerHandlerError.from(unsupportedReason:)(v29);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v26, 1LL, v54) == 1)
  {
    sub_DABC(v0[33], &qword_FDD48);
    uint64_t v30 = (void *)swift_task_alloc(dword_100564);
    v0[69] = v30;
    uint64_t v31 = sub_5C980;
LABEL_20:
    sub_5D358(v30, (uint64_t)v31);
    sub_2B904();
    return sub_AC948();
  }

  uint64_t v32 = v0[36];
  uint64_t v33 = v0[37];
  uint64_t v34 = v0[34];
  uint64_t v35 = v0[35];
  (*(void (**)(uint64_t, void, uint64_t))(v35 + 32))(v33, v0[33], v34);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v32, v33, v34);
  int v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 88))(v32, v34);
  if (v36 == enum case for TimerHandlerError.noResultsAfterFiltering(_:))
  {
    uint64_t v37 = (void *)v0[36];
    (*(void (**)(void *, void))(v0[35] + 96LL))(v37, v0[34]);
    swift_bridgeObjectRelease(*v37);
LABEL_10:
    id v38 = (void *)swift_task_alloc(dword_100574);
    v0[57] = v38;
    sub_5D358(v38, (uint64_t)sub_5C64C);
    sub_2B904();
    return sub_ACD60();
  }

  if (v36 == enum case for TimerHandlerError.generic(_:)
    || v36 == enum case for TimerHandlerError.timersAmbiguous(_:)
    || v36 == enum case for TimerHandlerError.durationNeedsValue(_:))
  {
    goto LABEL_19;
  }

  if (v36 == enum case for TimerHandlerError.durationTooLong(_:))
  {
    sub_5D378();
    sub_2BDC8();
    v0[61] = sub_5D368();
    uint64_t v42 = (void *)swift_task_alloc(dword_FC73C);
    v0[62] = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_5C78C;
    sub_2B904();
    return sub_353D0();
  }

  if (v36 == enum case for TimerHandlerError.failedToAdd(_:)) {
    goto LABEL_19;
  }
  if (v36 == enum case for TimerHandlerError.noResults(_:)) {
    goto LABEL_10;
  }
  if (v36 == enum case for TimerHandlerError.noTimersExist(_:))
  {
    uint64_t v43 = v0[48];
    uint64_t v45 = v0[25];
    uint64_t v44 = v0[26];
    uint64_t v46 = (void *)swift_task_alloc(48LL);
    v0[54] = v46;
    v46[2] = v43;
    void v46[3] = *(void *)(v44 + 24);
    v46[4] = v45;
    uint64_t v47 = (void *)swift_task_alloc(dword_10056C);
    v0[55] = v47;
    *uint64_t v47 = v0;
    v47[1] = sub_5C5A8;
    sub_2B904();
    return sub_ACBBC(v48, v49);
  }

  if (v36 == enum case for TimerHandlerError.setAttributeUnsupported(_:))
  {
LABEL_19:
    uint64_t v30 = (void *)swift_task_alloc(dword_100564);
    v0[59] = v30;
    uint64_t v31 = sub_5C6EC;
    goto LABEL_20;
  }

  if (v36 == enum case for TimerHandlerError.pauseResumeSleepTimersUnsupported(_:))
  {
    uint64_t v50 = (void *)swift_task_alloc(dword_10057C);
    v0[67] = v50;
    sub_5D358(v50, (uint64_t)sub_5C8E0);
    sub_2B904();
    return sub_ACDC0();
  }

  else if (v36 == enum case for TimerHandlerError.createSleepTimerNothingPlaying(_:))
  {
    sub_5D378();
    sub_2BDC8();
    v0[64] = sub_5D368();
    uint64_t v51 = (void *)swift_task_alloc(dword_FC764);
    v0[65] = v51;
    *uint64_t v51 = v0;
    v51[1] = sub_5C834;
    sub_2B904();
    return sub_36528();
  }

  else
  {
    sub_2B904();
    return _diagnoseUnexpectedEnumCase<A>(type:)();
  }

uint64_t sub_5C5A8()
{
  void v3[2] = v1;
  v3[3] = v2;
  v3[4] = v0;
  sub_1BD64();
  *(void *)(v4 + 448) = v0;
  swift_task_dealloc();
  sub_1B86C();
  sub_1B9B8();
  return sub_1B934();
}

uint64_t sub_5C600()
{
  uint64_t v0 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  uint64_t v1 = (void *)sub_5D34C(v0);
  sub_5D2DC(v1);
  return sub_5D2FC();
}

uint64_t sub_5C64C()
{
  v3[5] = v1;
  v3[6] = v2;
  v3[7] = v0;
  sub_1BD64();
  *(void *)(v4 + 464) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5C6A0()
{
  uint64_t v0 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  uint64_t v1 = (void *)sub_5D34C(v0);
  sub_5D2DC(v1);
  return sub_5D2FC();
}

uint64_t sub_5C6EC()
{
  v3[8] = v1;
  void v3[9] = v2;
  v3[10] = v0;
  sub_1BD64();
  *(void *)(v4 + 480) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5C740()
{
  uint64_t v0 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  uint64_t v1 = (void *)sub_5D34C(v0);
  sub_5D2DC(v1);
  return sub_5D2FC();
}

uint64_t sub_5C78C()
{
  v3[11] = v1;
  v3[12] = v2;
  v3[13] = v0;
  sub_1BD64();
  *(void *)(v4 + 504) = v0;
  swift_task_dealloc();
  swift_release();
  sub_1B9B8();
  return sub_1B934();
}

uint64_t sub_5C7E8()
{
  uint64_t v0 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  uint64_t v1 = (void *)sub_5D34C(v0);
  sub_5D2DC(v1);
  return sub_5D2FC();
}

uint64_t sub_5C834()
{
  v3[14] = v1;
  v3[15] = v2;
  v3[16] = v0;
  sub_1BD64();
  *(void *)(v4 + 528) = v0;
  swift_task_dealloc();
  swift_release();
  sub_1B9B8();
  return sub_1B934();
}

uint64_t sub_5C894()
{
  uint64_t v0 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  uint64_t v1 = (void *)sub_5D34C(v0);
  sub_5D2DC(v1);
  return sub_5D2FC();
}

uint64_t sub_5C8E0()
{
  v3[17] = v1;
  v3[18] = v2;
  v3[19] = v0;
  sub_1BD64();
  *(void *)(v4 + 544) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5C934()
{
  uint64_t v0 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  uint64_t v1 = (void *)sub_5D34C(v0);
  sub_5D2DC(v1);
  return sub_5D2FC();
}

uint64_t sub_5C980()
{
  v3[20] = v1;
  v3[21] = v2;
  v3[22] = v0;
  sub_1BD64();
  *(void *)(v4 + 560) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5C9D4()
{
  uint64_t v0 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
  uint64_t v1 = (void *)sub_5D34C(v0);
  sub_5D2DC(v1);
  return sub_5D2FC();
}

uint64_t sub_5CA1C()
{
  uint64_t v3 = v1[31];
  uint64_t v2 = v1[32];
  uint64_t v4 = v1[30];
  uint64_t v5 = v1[28];
  sub_1BD64();
  *(void *)(v6 + 584) = v0;
  swift_task_dealloc();
  sub_2B944(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1B9B8();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_5CAAC()
{
  uint64_t v1 = *(void **)(v0 + 568);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v22 = *(void *)(v0 + 288);
  swift_release();

  sub_2B944(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1BABC();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1B838();
  uint64_t v3 = sub_1BA8C();
  uint64_t v11 = sub_1BBDC(v3, v4, v5, v6, v7, v8, v9, v10, v20);
  sub_1B910(v11, v12, v13, v14, v15, v16, v17, v18, v21, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "5CBC8: call analysis failed (funcsize=24)"
#error "5CC28: call analysis failed (funcsize=24)"
#error "5CC88: call analysis failed (funcsize=24)"
#error "5CCE8: call analysis failed (funcsize=24)"
#error "5CD48: call analysis failed (funcsize=24)"
#error "5CDA8: call analysis failed (funcsize=24)"
#error "5CE08: call analysis failed (funcsize=24)"
#error "5CE70: call analysis failed (funcsize=26)"
uint64_t sub_5CE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Bool v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;
  uint64_t v18;
  void v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v5 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static SiriTimeFeatureFlagsImpl.instance.getter(v7);
  uint64_t v10 = SiriTimeFeatureFlagsImpl.isCrossDeviceEnabled()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    uint64_t v12 = type metadata accessor for ParameterResolutionRecord(0LL, a3);
    uint64_t v18 = ParameterResolutionRecord.intent.getter(v12);
    uint64_t v13 = sub_67C4(&qword_FDD50);
    if ((swift_dynamicCast(v16, &v18, a3, v13, 6LL) & 1) != 0)
    {
      sub_5530(v16, (uint64_t)v19);
      uint64_t v14 = v20;
      uint64_t v15 = v21;
      sub_8CFC(v19, v20);
      *(double *)a1 = IntentTargetable.knownHomePodCount.getter(v14, v15);
      *(_BYTE *)(a1 + 8) = 0;
      return _s20HandleIntentStrategyVwxx_0(v19);
    }

    else
    {
      uint64_t v17 = 0LL;
      memset(v16, 0, sizeof(v16));
      return sub_DABC((uint64_t)v16, &qword_FDD58);
    }
  }

  return result;
}

uint64_t sub_5CFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_FDD44);
  *(void *)(v3 + 32) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_5D02C;
  return sub_5BE40(a1, a2, a3);
}

uint64_t sub_5D02C()
{
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (!v0) {
    return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5D078()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = sub_67C4(&qword_FBF48);
  uint64_t v3 = static BarbaraWalters.logAndReturnError<A>(context:_:)( 0xD000000000000067LL,  0x80000000000C85D0LL,  v0 + 24,  v2,  &protocol self-conformance witness table for Error);
  swift_willThrow(v3, v4, v5, v6, v7, v8, v9, v10);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5D108(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  sub_1B9B8();
  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_5D124()
{
  uint64_t v1 = type metadata accessor for ParameterResolutionRecord(0LL, *(void *)(*(void *)(v0 + 24) + 16LL));
  uint64_t v2 = ParameterResolutionRecord.intent.getter(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_5D164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_FDD3C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_20504;
  return sub_5CFC4(a1, a2, a3);
}

uint64_t sub_5D1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_FDD34);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_C55C;
  return sub_5D108(a1, a2);
}

uint64_t sub_5D220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10E90;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t sub_5D29C(uint64_t a1)
{
  return sub_5CE84(a1, *(void *)(v1 + 32), *(void *)(v1 + 16));
}

uint64_t sub_5D2A8()
{
  return (*(uint64_t (**)(void, void))(v0[45] + 8LL))(v0[46], v0[44]);
}

uint64_t sub_5D2DC(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 192);
}

uint64_t sub_5D2FC()
{
  return ((uint64_t (*)(void))PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:))();
}

uint64_t sub_5D308()
{
  *(void *)(v1 + 568) = v0;
  return static DialogPhase.error.getter();
}

uint64_t sub_5D318()
{
  return swift_release(*(void *)(v0 + 424));
}

uint64_t sub_5D328()
{
  return (*(uint64_t (**)(void, void))(v0[35] + 8LL))(v0[37], v0[34]);
}

uint64_t sub_5D338()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_5D344()
{
  return NLContextUpdate.init()();
}

uint64_t sub_5D34C(uint64_t result)
{
  *(void *)(v1 + 576) = result;
  return result;
}

void *sub_5D358@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_5D368()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t sub_5D378()
{
  return type metadata accessor for CreateTimerCATPatternsExecutor(0LL);
}

void UsoEntity_common_Timer.isMultiple.getter()
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1C308();
  uint64_t v57 = v5 - v4;
  uint64_t v6 = sub_67C4(&qword_FDD78);
  sub_1BCE0();
  __chkstk_darwin(v7);
  sub_21608();
  uint64_t v59 = v8 - v9;
  __chkstk_darwin(v10);
  uint64_t v12 = &v54[-v11];
  sub_67C4(&qword_FDD80);
  sub_1BCE0();
  __chkstk_darwin(v13);
  sub_21608();
  uint64_t v16 = v14 - v15;
  __chkstk_darwin(v17);
  sub_5E384();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v58 = &v54[-v20];
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = &v54[-v22];
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = &v54[-v25];
  uint64_t v27 = __chkstk_darwin(v24);
  id v29 = &v54[-v28];
  uint64_t v60 = v0;
  if (dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter(v27))
  {
    dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter();
    sub_1BC50();
  }

  else
  {
    sub_5E330((uint64_t)v29, 1LL);
  }

  uint64_t v62 = v3;
  uint64_t v30 = *(void (**)(_BYTE *, void, uint64_t))(v3 + 104);
  v30(v26, enum case for UsoEntity_common_Quantifier.DefinedValues.common_Quantifier_All(_:), v2);
  sub_5E330((uint64_t)v26, 0LL);
  uint64_t v61 = v6;
  uint64_t v31 = (uint64_t)&v12[*(int *)(v6 + 48)];
  sub_8C84((uint64_t)v29, (uint64_t)v12, &qword_FDD80);
  sub_8C84((uint64_t)v26, v31, &qword_FDD80);
  sub_5E300((uint64_t)v12);
  if (v33)
  {
    sub_8CC4((uint64_t)v26, &qword_FDD80);
    sub_8CC4((uint64_t)v29, &qword_FDD80);
    uint64_t v32 = sub_5E300(v31);
    if (v33) {
      goto LABEL_22;
    }
    goto LABEL_12;
  }

  sub_8C84((uint64_t)v12, (uint64_t)v23, &qword_FDD80);
  sub_5E300(v31);
  if (v33)
  {
    sub_433BC((uint64_t)v26);
    sub_433BC((uint64_t)v29);
    uint64_t v32 = (*(uint64_t (**)(_BYTE *, uint64_t))(v62 + 8))(v23, v2);
LABEL_12:
    sub_5E3A0(v32, &qword_FDD78);
    uint64_t v34 = v61;
    goto LABEL_13;
  }

  uint64_t v36 = v62;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 32);
  uint64_t v56 = v16;
  uint64_t v38 = v57;
  sub_5E3A8(v57, v37);
  sub_11718( &qword_FDD88,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_Quantifier.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_Quantifier.DefinedValues);
  int v55 = sub_5E3BC((uint64_t)v23, v38, v40, v39);
  id v41 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  uint64_t v42 = v38;
  uint64_t v16 = v56;
  v41(v42, v2);
  sub_5E398((uint64_t)v26);
  sub_5E398((uint64_t)v29);
  v41((uint64_t)v23, v2);
  sub_5E398((uint64_t)v12);
  uint64_t v34 = v61;
  if ((v55 & 1) != 0) {
    goto LABEL_23;
  }
LABEL_13:
  if (dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter(v43))
  {
    uint64_t v35 = v58;
    dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter();
    sub_1BC50();
  }

  else
  {
    uint64_t v35 = v58;
    sub_5E330((uint64_t)v58, 1LL);
  }

  uint64_t v44 = v59;
  v30((_BYTE *)v1, enum case for UsoEntity_common_Quantifier.DefinedValues.common_Quantifier_Multiple(_:), v2);
  sub_5E330(v1, 0LL);
  uint64_t v45 = v44 + *(int *)(v34 + 48);
  sub_8C84((uint64_t)v35, v44, &qword_FDD80);
  sub_8C84(v1, v45, &qword_FDD80);
  sub_5E300(v44);
  if (v33)
  {
    sub_5E31C(v1);
    sub_5E31C((uint64_t)v35);
    uint64_t v32 = sub_5E300(v45);
    if (!v33) {
      goto LABEL_27;
    }
LABEL_22:
    sub_5E3A0(v32, &qword_FDD80);
    goto LABEL_23;
  }

  sub_8C84(v44, v16, &qword_FDD80);
  sub_5E300(v45);
  if (v47)
  {
    sub_433BC(v1);
    sub_433BC((uint64_t)v35);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v16, v2);
LABEL_27:
    sub_5E3A0(v32, &qword_FDD78);
LABEL_29:
    Swift::Int v46 = 0LL;
    goto LABEL_30;
  }

  uint64_t v48 = v62;
  uint64_t v49 = v57;
  sub_5E3A8(v57, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 32));
  sub_11718( &qword_FDD88,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_common_Quantifier.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_common_Quantifier.DefinedValues);
  char v52 = sub_5E3BC(v16, v49, v51, v50);
  uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v53(v49, v2);
  sub_5E31C(v1);
  sub_5E31C((uint64_t)v35);
  v53(v16, v2);
  sub_5E31C(v44);
  if ((v52 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_23:
  Swift::Int v46 = 1LL;
LABEL_30:
  sub_33CEC(0LL, (unint64_t *)&qword_FBE50, &OBJC_CLASS___NSNumber_ptr);
  NSNumber.init(integerLiteral:)(v46);
  sub_17E58();
}

void sub_5D868(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [v4 initWithSpokenPhrase:v5];

  sub_17B78();
}

uint64_t sub_5D8D0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FDD60);
  sub_5474(v0, (uint64_t)qword_FDD60);
  return static SiriTimeLog.timerFlow.getter();
}

id UsoEntity_common_Timer.remainingTime.getter()
{
  if (!dispatch thunk of UsoEntity_common_Timer.timeRemaining.getter()) {
    return [(id)objc_opt_self(SiriTimeTimerConstants) defaultDuration];
  }
  UsoEntity_common_Duration.valueInSeconds.getter();
  return (id)sub_1BC50();
}

void UsoEntity_common_Timer.label.getter()
{
  if (v0)
  {
    uint64_t v1 = v0;
    Swift::String v2 = String.labelCapitalization()();
    swift_bridgeObjectRelease(v1);
    sub_33CEC(0LL, (unint64_t *)&qword_FCC30, &OBJC_CLASS___INSpeakableString_ptr);
    sub_5D868(v2._countAndFlagsBits, (uint64_t)v2._object);
  }

  sub_17B78();
}

uint64_t sub_5D9E4(uint64_t a1)
{
  uint64_t v2 = dispatch thunk of UsoEntity_common_Timer.attributes.getter();
  if (!v2) {
    goto LABEL_9;
  }
  uint64_t v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0) {
      v2 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v2);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }

  uint64_t v4 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8LL));
  if (!v4)
  {
LABEL_8:
    swift_bridgeObjectRelease(v3);
LABEL_9:
    char v5 = 0;
    return v5 & 1;
  }

LABEL_4:
  __chkstk_darwin(v4);
  void v7[2] = a1;
  char v5 = sub_5E164((uint64_t (*)(uint64_t *))sub_5E2E4, (uint64_t)v7, v3);
  swift_bridgeObjectRelease(v3);
  return v5 & 1;
}

void UsoEntity_common_Timer.timerState.getter()
{
  uint64_t v1 = (os_log_s *)type metadata accessor for UsoEntity_appleTimer_TimerAttribute.DefinedValues(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  __chkstk_darwin(v1);
  sub_21608();
  char v5 = (char *)(v3 - v4);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v39 - v7;
  uint64_t v9 = sub_67C4(&qword_FDDA8);
  uint64_t v10 = *(void *)(v2 + 72);
  uint64_t v11 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(v9, v12 + 2 * v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_C27E0;
  uint64_t v40 = v13;
  uint64_t v14 = v13 + v12;
  uint64_t v15 = *(void (**)(uint64_t))(v2 + 104);
  HIDWORD(v39) = enum case for UsoEntity_appleTimer_TimerAttribute.DefinedValues.appleTimer_TimerAttribute_TimerAttributesPaused(_:);
  v15(v14);
  uint64_t v16 = v10;
  uint64_t v17 = v14 + v10;
  int v18 = enum case for UsoEntity_appleTimer_TimerAttribute.DefinedValues.appleTimer_TimerAttribute_TimerAttributesRunning(_:);
  ((void (*)(uint64_t, void, os_log_s *))v15)( v17,  enum case for UsoEntity_appleTimer_TimerAttribute.DefinedValues.appleTimer_TimerAttribute_TimerAttributesRunning(_:),  v1);
  char v19 = 0;
  unint64_t v20 = 0LL;
  do
  {
    char v21 = v19;
    if (v20 >= *(void *)(v40 + 16))
    {
      __break(1u);
      goto LABEL_27;
    }

    uint64_t v22 = *(void (**)(char *, unint64_t, os_log_s *))(v2 + 16);
    v22(v8, v14 + v20 * v16, v1);
    v22(v5, (unint64_t)v8, v1);
    int v23 = (*(uint64_t (**)(char *, os_log_s *))(v2 + 88))(v5, v1);
    if (v23 == v18)
    {
      if ((sub_5E3C8() & 1) != 0)
      {
        swift_bridgeObjectRelease(v40);
        if (qword_FB1F0 != -1) {
          swift_once(&qword_FB1F0, sub_5D8D0);
        }
        uint64_t v28 = sub_1BD34();
        id v29 = (void *)sub_39658(v28, (uint64_t)qword_FDD60);
        os_log_type_t v30 = static os_log_type_t.info.getter();
        if (sub_434EC(v30))
        {
          uint64_t v31 = (_WORD *)sub_1B9DC();
          *uint64_t v31 = 0;
          sub_5E33C(&dword_0, v32, v33, "USO parse has timer state of .running");
          sub_1B904((uint64_t)v31);
        }

LABEL_8:
      sub_5E324(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      goto LABEL_10;
    }

    if (v23 == HIDWORD(v39))
    {
      if ((sub_5E3C8() & 1) != 0)
      {
        swift_bridgeObjectRelease(v40);
        if (qword_FB1F0 != -1) {
          swift_once(&qword_FB1F0, sub_5D8D0);
        }
        uint64_t v34 = sub_1BD34();
        id v29 = (void *)sub_39658(v34, (uint64_t)qword_FDD60);
        os_log_type_t v35 = static os_log_type_t.info.getter();
        if (sub_434EC(v35))
        {
          uint64_t v36 = (_WORD *)sub_1B9DC();
          *uint64_t v36 = 0;
          sub_5E33C(&dword_0, v37, v38, "USO parse has timer state of .paused");
          sub_1B904((uint64_t)v36);
        }

        goto LABEL_24;
      }

      goto LABEL_8;
    }

    uint64_t v24 = *(void (**)(char *, os_log_s *))(v2 + 8);
    v24(v8, v1);
    v24(v5, v1);
LABEL_10:
    char v19 = 1;
    unint64_t v20 = 1LL;
  }

  while ((v21 & 1) == 0);
  os_log_type_t v0 = v40;
  swift_setDeallocating(v40);
  sub_5E2A0();
  if (qword_FB1F0 != -1) {
LABEL_27:
  }
    swift_once(&qword_FB1F0, sub_5D8D0);
  uint64_t v25 = sub_1BD34();
  sub_39658(v25, (uint64_t)qword_FDD60);
  os_log_type_t v26 = sub_5E3B4();
  if (sub_329F4(v26))
  {
    uint64_t v27 = (uint8_t *)sub_1B9DC();
    *(_WORD *)uint64_t v27 = 0;
    sub_1BBEC(&dword_0, v1, v0, "USO parse has timer state of .unknown", v27);
    sub_1B904((uint64_t)v27);
  }

LABEL_25:
  sub_17E58();
}

  sub_8EEB4(0LL, (v9 & 0xC000000000000001LL) == 0, v9);
  if ((v9 & 0xC000000000000001LL) != 0) {
    uint64_t v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
  }
  else {
    uint64_t v12 = *(id *)(v9 + 32);
  }
  uint64_t v13 = v12;
  *(void *)(v1 + 672) = v12;
  sub_2B7C4();
  uint64_t v14 = sub_67C4(&qword_FBE58);
  uint64_t inited = swift_initStackObject(v14, v1 + 16);
  *(_OWORD *)(inited + 16) = xmmword_C2690;
  *(void *)(inited + 32) = v13;
  v234[0] = inited;
  specialized Array._endMutation()(inited, v16, v17, v18, v19, v20, v21, v22);
  int v23 = v13;
  sub_C7A0();
  sub_18034();
  uint64_t v24 = v23;
  uint64_t v25 = sub_58E1C(v24);
  if (v26)
  {
    uint64_t v27 = v25;
    uint64_t v28 = v26;
    if (v10)
    {
      if (v9 < 0) {
        os_log_type_t v30 = v9;
      }
      else {
        os_log_type_t v30 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_33E50();
      id v29 = _CocoaArrayWrapper.endIndex.getter(v30);
      sub_2B7C4();
    }

    else
    {
      id v29 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
    }

    if (v29 == 1)
    {
      uint64_t v31 = [v24 remainingTime];
      if (v31 || (uint64_t v31 = [v24 duration]) != 0)
      {
        [v31 doubleValue];
        uint64_t v33 = v32;
      }

      else
      {
        uint64_t v33 = 0.0;
      }

      uint64_t v34 = *(void *)(v1 + 600);
      os_log_type_t v35 = *(void *)(v1 + 592);
      uint64_t v36 = *(void *)(v1 + 584);
      sub_210C4(v27, v28, v34, v33);
      swift_bridgeObjectRelease(v28);
      NLContextUpdate.set(undoDirectInvocation:)(v34);
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    }

    else
    {
      uint64_t v25 = swift_bridgeObjectRelease(v28);
    }
  }

  static DialogPhase.completion.getter(v25);
  uint64_t v37 = sub_33E50();
  *(void *)(v1 + 680) = sub_303F8(v37, v9);
  if (v10)
  {
    if (v9 < 0) {
      uint64_t v39 = v9;
    }
    else {
      uint64_t v39 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_33E50();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v39);
    sub_2B7C4();
  }

  else
  {
    uint64_t v38 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
  }

  *(void *)(v1 + 688) = v38;
  if (v38 == 1)
  {
    type metadata accessor for TimerSessionManager(0LL);
    static TimerSessionManager.shared.getter((void *)(v1 + 216));
    sub_8CFC((void *)(v1 + 216), *(void *)(v1 + 240));
    sub_58E1C(v24);
    *(void *)(v1 + 696) = v40;
    id v41 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
    *(void *)(v1 + 704) = v41;
    *id v41 = v1;
    v41[1] = sub_606A8;
    sub_64214();
    return dispatch thunk of SessionManaging.sessionIDString(for:)(v42, v43, v44, v45);
  }

  *(_OWORD *)(v1 + 728) = 0u;
  uint64_t v231 = *(void *)(v1 + 648);
  uint64_t v233 = *(void *)(v1 + 528);
  uint64_t v48 = *(void *)(v1 + 496);
  char v47 = *(void *)(v1 + 504);
  uint64_t v49 = *(void *)(v1 + 480);
  uint64_t v218 = *(void *)(v1 + 488);
  uint64_t v224 = *(void *)(v1 + 472);
  uint64_t v228 = *(void *)(v1 + 464);
  uint64_t v50 = type metadata accessor for ApplicationContext(0LL);
  static ApplicationContext.shared.getter(v50);
  ApplicationContext.deviceState.getter((void *)(v1 + 96));
  sub_1BC50();
  char v52 = *(void *)(v1 + 120);
  uint64_t v51 = *(void *)(v1 + 128);
  sub_8CFC((void *)(v1 + 96), v52);
  dispatch thunk of DeviceState.isWatch.getter(v52, v51);
  _s20HandleIntentStrategyVwxx_0((void *)(v1 + 96));
  (*(void (**)(uint64_t, void, uint64_t))(v48 + 104))( v47,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v224 + 16))(v49, v231, v228);
  uint64_t v53 = mach_absolute_time();
  uint64_t v54 = SiriTimeMeasurement.init(_:log:startTime:)(v47, v49, v53);
  static ApplicationContext.shared.getter(v54);
  ApplicationContext.deviceState.getter((void *)(v1 + 136));
  sub_1BC50();
  int v55 = *(void *)(v1 + 160);
  uint64_t v56 = *(void *)(v1 + 168);
  sub_8CFC((void *)(v1 + 136), v55);
  uint64_t v57 = sub_64594(v55);
  _s20HandleIntentStrategyVwxx_0((void *)(v1 + 136));
  if ((v57 & 1) != 0)
  {
    uint64_t v58 = sub_64554();
    *(void *)(v1 + 848) = v58;
    sub_18034();
    if (v58)
    {
      uint64_t v59 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
      *(void *)(v1 + 344) = 0LL;
      uint64_t v60 = sub_64668(v59, "archivedDataWithRootObject:requiringSecureCoding:error:", (uint64_t)v58);
      uint64_t v61 = *(void **)(v1 + 344);
      if (v60)
      {
        uint64_t v62 = v60;
        uint64_t v63 = v61;
        uint64_t v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v62);
        uint64_t v66 = v65;

        *(void *)(v1 + 856) = v64;
        *(void *)(v1 + 864) = v66;
        if (qword_FB3E8 != -1) {
          swift_once(&qword_FB3E8, sub_B5C9C);
        }
        uint64_t v67 = (void *)sub_5A248();
        sub_645A8(v67);
        uint64_t v68 = (void *)swift_task_alloc(dword_FF14C);
        *(void *)(v1 + 880) = v68;
        sub_64504(v68, (uint64_t)sub_6189C);
        sub_64214();
        return sub_7CE58(v69, v70, v71);
      }

      uint64_t v116 = *(void *)(v1 + 680);
      uint64_t v117 = *(void **)(v1 + 672);
      uint64_t v118 = *(void **)(v1 + 656);
      sub_644A8();
      uint64_t v212 = *(void *)(v1 + 544);
      uint64_t v219 = *(void *)(v1 + 536);
      uint64_t v119 = *(void *)(v1 + 528);
      uint64_t v120 = *(void *)(v1 + 520);
      uint64_t v121 = *(void *)(v1 + 512);
      uint64_t v122 = v61;
      swift_bridgeObjectRelease(0LL);
      swift_bridgeObjectRelease(v116);
      uint64_t v123 = _convertNSErrorToError(_:)(v61);

      uint64_t v200 = v123;
      swift_willThrow(v124, v125, v126, v127, v128, v129, v130, v131);

      (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v119, v121);
      (*(void (**)(uint64_t, uint64_t))(v212 + 8))(v224, v219);
    }

    else
    {
      swift_bridgeObjectRelease(0LL);
      uint64_t v97 = sub_2B7C4();
      Logger.logObject.getter(v97);
      uint64_t v98 = sub_1BCD0();
      if (sub_1BB80(v98))
      {
        os_log_type_t v99 = (_WORD *)sub_1B9DC();
        sub_2BA04(v99);
        sub_1BAA8(&dword_0, v100, v101, "Could not get timer action from timer.");
        sub_1B904(v55);
      }

      uint64_t v102 = *(void **)(v1 + 672);
      uint64_t v103 = *(void **)(v1 + 656);
      sub_644A8();
      sub_6444C();
      uint64_t v104 = sub_182D4();
      sub_64320((unint64_t *)&qword_FCC50, v105, (uint64_t)&unk_C4340);
      uint64_t v107 = sub_1B74C(v104, v106);
      *uint64_t v108 = 1;
      uint64_t v200 = v107;
      sub_64328(v107, (uint64_t)v108, v109, v110, v111, v112, v113, v114);

      sub_641B0();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v224, v50);
    }

    (*(void (**)(uint64_t, uint64_t))(v228 + 8))(v233, v231);
LABEL_71:
    sub_64370();
    uint64_t v206 = v144;
    uint64_t v213 = v143;
    uint64_t v220 = *(void *)(v1 + 432);
    uint64_t v225 = *(void *)(v1 + 424);
    uint64_t v229 = *(void *)(v1 + 416);
    uint64_t v232 = *(void *)(v1 + 408);
    swift_task_dealloc();
    sub_1BA38();
    sub_1B838();
    sub_1BA8C();
    sub_1BA60();
    sub_1BAD0();
    sub_1BABC();
    sub_1B86C();
    sub_1BA24();
    uint64_t v145 = sub_1BA14();
    uint64_t v153 = sub_1B8C4(v145, v146, v147, v148, v149, v150, v151, v152, v194, v200, v206);
    uint64_t v161 = sub_1B8BC(v153, v154, v155, v156, v157, v158, v159, v160, v195, v201, v207, v213);
    uint64_t v169 = sub_1B8B4(v161, v162, v163, v164, v165, v166, v167, v168, v196, v202, v208, v214, v220);
    uint64_t v177 = sub_1B864(v169, v170, v171, v172, v173, v174, v175, v176, v197, v203, v209, v215, v221, v225);
    uint64_t v185 = sub_1B874(v177, v178, v179, v180, v181, v182, v183, v184, v198, v204, v210, v216, v222, v226, v229);
    sub_1B8AC(v185, v186, v187, v188, v189, v190, v191, v192, v199, v205, v211, v217, v223, v227, v230, v232);
    swift_task_dealloc();
    sub_64214();
    __asm { BR              X0 }
  }

  sub_64524();
  uint64_t v72 = SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
  os_log_type_t v73 = sub_64444(v57, *(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
  if (v72)
  {
    uint64_t v74 = *(void **)(v1 + 648);
    Logger.logObject.getter(v73);
    uint64_t v75 = sub_1BCD0();
    if (sub_1BB80(v75))
    {
      uint64_t v76 = (_WORD *)sub_1B9DC();
      sub_2BA04(v76);
      sub_1BAA8( &dword_0,  v77,  v78,  "[ResumeTimer.HandleIntentStrategy.makeIntentHandledResponse] Using multi-timer RF 2.0 path");
      sub_1B904(v72);
    }

    uint64_t v80 = *(void *)(v1 + 688);
    uint64_t v81 = _swiftEmptyArrayStorage;
    if (!v80) {
      goto LABEL_53;
    }
    v234[0] = _swiftEmptyArrayStorage;
    sub_645F4(v79, v80 & ~(v80 >> 63));
    if ((v80 & 0x8000000000000000LL) == 0)
    {
      uint64_t v81 = (void *)v234[0];
      uint64_t v82 = (id *)(*(void *)(v1 + 664) + 32LL);
      do
      {
        uint64_t v83 = *(void *)(v1 + 664);
        if ((v83 & 0xC000000000000001LL) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v83);
        }
        else {
          uint64_t v84 = *v82;
        }
        sub_645BC();

        v234[0] = v81;
        uint64_t v85 = v81[3];
        if (v81[2] >= v85 >> 1)
        {
          sub_64588(v85 > 1);
          uint64_t v81 = (void *)v234[0];
        }

        sub_642F0();
      }

      while (v234);
LABEL_53:
      **(void **)(v1 + 432) = v81;
      uint64_t v89 = sub_2F784();
      sub_644D0(v89);
      uint64_t v90 = sub_6460C();
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v90, v91, v92, v93);
      if (qword_FB3D8 != -1) {
        swift_once(&qword_FB3D8, sub_B5C64);
      }
      uint64_t v94 = (void *)swift_task_alloc(dword_FC44C);
      *(void *)(v1 + 744) = v94;
      sub_64504(v94, (uint64_t)sub_60E10);
      sub_2B9E8(v95);
      sub_64214();
      return sub_2F990(v96);
    }

    __break(1u);
    goto LABEL_74;
  }

  sub_644C4();
  if (v57 == 1)
  {
    if (qword_FB3E8 == -1)
    {
LABEL_52:
      uint64_t v86 = (void *)swift_task_alloc(dword_FF154);
      *(void *)(v1 + 816) = v86;
      sub_64504(v86, (uint64_t)sub_6160C);
      sub_2B9E8(v87);
      sub_64214();
      return sub_7D020(v88);
    }

  uint64_t v12 = v9 & 0xC000000000000001LL;
  sub_8EEB4(0LL, (v9 & 0xC000000000000001LL) == 0, v9);
  if ((v9 & 0xC000000000000001LL) != 0) {
    uint64_t v13 = (id)sub_7C318();
  }
  else {
    uint64_t v13 = *(id *)(v9 + 32);
  }
  uint64_t v14 = v13;
  *(void *)(v1 + 600) = v13;
  sub_2B7C4();
  uint64_t v15 = sub_67C4(&qword_FBE58);
  uint64_t inited = swift_initStackObject(v15, v1 + 16);
  *(_OWORD *)(inited + 16) = xmmword_C2690;
  *(void *)(inited + 32) = v14;
  uint64_t v262 = (void *)inited;
  specialized Array._endMutation()(inited, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v24 = v14;
  sub_C7A0();
  sub_18034();
  sub_58E1C(v24);
  if (v25)
  {
    os_log_type_t v26 = v25;
    if (v10)
    {
      if (v9 < 0) {
        uint64_t v28 = v9;
      }
      else {
        uint64_t v28 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_33E50();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v28);
      sub_2B7C4();
    }

    else
    {
      uint64_t v27 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
    }

    if (v27 == 1)
    {
      id v29 = *(void *)(v1 + 536);
      os_log_type_t v30 = *(void *)(v1 + 528);
      uint64_t v31 = *(void *)(v1 + 520);
      sub_20F64();
      swift_bridgeObjectRelease(v26);
      NLContextUpdate.set(undoDirectInvocation:)(v29);
      uint64_t v32 = v31;
      uint64_t v12 = v9 & 0xC000000000000001LL;
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v32);
    }

    else
    {
      swift_bridgeObjectRelease(v26);
    }
  }

  uint64_t v33 = sub_33E50();
  uint64_t v34 = sub_303F8(v33, v9);
  *(void *)(v1 + 608) = v34;
  static DialogPhase.completion.getter(v34);
  if (v10)
  {
    if (v9 < 0) {
      uint64_t v36 = v9;
    }
    else {
      uint64_t v36 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_33E50();
    os_log_type_t v35 = _CocoaArrayWrapper.endIndex.getter(v36);
    sub_2B7C4();
  }

  else
  {
    os_log_type_t v35 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
  }

  *(void *)(v1 + 616) = v35;
  if (v35 == 1)
  {
    type metadata accessor for TimerSessionManager(0LL);
    static TimerSessionManager.shared.getter((void *)(v1 + 216));
    uint64_t v37 = *(void *)(v1 + 240);
    uint64_t v38 = *(void *)(v1 + 248);
    sub_8CFC((void *)(v1 + 216), v37);
    if (v12)
    {
      sub_33E50();
      uint64_t v39 = (id)sub_7C318();
      sub_2B7C4();
    }

    else
    {
      uint64_t v39 = *(id *)(v9 + 32);
    }

    unint64_t v77 = sub_58E1C(v39);
    uint64_t v79 = v78;
    *(void *)(v1 + 624) = v78;
    uint64_t v80 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
    *(void *)(v1 + 632) = v80;
    *uint64_t v80 = v1;
    v80[1] = sub_7959C;
    return dispatch thunk of SessionManaging.sessionIDString(for:)(v77, v79, v37, v38);
  }

  *(_OWORD *)(v1 + 656) = 0u;
  uint64_t v258 = *(void *)(v1 + 584);
  uint64_t v261 = *(void *)(v1 + 464);
  id v41 = *(void (***)(void, void, void))(v1 + 432);
  uint64_t v40 = *(void *)(v1 + 440);
  uint64_t v42 = *(void *)(v1 + 416);
  uint64_t v243 = *(void *)(v1 + 424);
  uint64_t v249 = *(void *)(v1 + 408);
  uint64_t v254 = *(void *)(v1 + 400);
  uint64_t v43 = type metadata accessor for ApplicationContext(0LL);
  static ApplicationContext.shared.getter(v43);
  ApplicationContext.deviceState.getter((void *)(v1 + 96));
  sub_1BC50();
  uint64_t v45 = *(void *)(v1 + 120);
  uint64_t v44 = *(void *)(v1 + 128);
  sub_8CFC((void *)(v1 + 96), v45);
  dispatch thunk of DeviceState.isWatch.getter(v45, v44);
  _s20HandleIntentStrategyVwxx_0((void *)(v1 + 96));
  v41[13](v40, enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:), v243);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v249 + 16))(v42, v258, v254);
  Swift::Int v46 = mach_absolute_time();
  char v47 = SiriTimeMeasurement.init(_:log:startTime:)(v40, v42, v46);
  static ApplicationContext.shared.getter(v47);
  ApplicationContext.deviceState.getter((void *)(v1 + 136));
  sub_1BC50();
  uint64_t v48 = *(void *)(v1 + 160);
  uint64_t v49 = *(void *)(v1 + 168);
  sub_8CFC((void *)(v1 + 136), v48);
  uint64_t v50 = sub_64594(v48);
  _s20HandleIntentStrategyVwxx_0((void *)(v1 + 136));
  if ((v50 & 1) != 0)
  {
    uint64_t v51 = sub_7C270();
    *(void *)(v1 + 768) = v51;
    sub_18034();
    if (v51)
    {
      char v52 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
      *(void *)(v1 + 272) = 0LL;
      uint64_t v53 = sub_64668(v52, "archivedDataWithRootObject:requiringSecureCoding:error:", (uint64_t)v51);
      uint64_t v54 = *(void **)(v1 + 272);
      if (v53)
      {
        int v55 = v53;
        uint64_t v56 = v54;
        uint64_t v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v55);
        uint64_t v59 = v58;

        *(void *)(v1 + 776) = v57;
        *(void *)(v1 + 784) = v59;
        if (qword_FB148 != -1) {
          swift_once(&qword_FB148, sub_2C148);
        }
        uint64_t v60 = (void *)sub_5A248();
        sub_7C2E0(v60);
        uint64_t v61 = (void *)swift_task_alloc(dword_100A74);
        *(void *)(v1 + 800) = v61;
        sub_7C14C(v61, (uint64_t)sub_7A648);
        return sub_7C108(v62, (uint64_t)sub_7BE9C, (uint64_t)v55);
      }

      uint64_t v115 = *(void *)(v1 + 608);
      uint64_t v116 = *(void **)(v1 + 600);
      sub_7C228();
      uint64_t v117 = *(void *)(v1 + 480);
      uint64_t v243 = *(void *)(v1 + 472);
      uint64_t v118 = *(void *)(v1 + 456);
      uint64_t v119 = *(void *)(v1 + 464);
      uint64_t v120 = *(void *)(v1 + 448);
      uint64_t v121 = v54;
      swift_bridgeObjectRelease(0LL);
      swift_bridgeObjectRelease(v115);
      uint64_t v122 = _convertNSErrorToError(_:)(v54);

      uint64_t v213 = v122;
      swift_willThrow(v123, v124, v125, v126, v127, v128, v129, v130);

      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v119, v120);
      uint64_t v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v117 + 8))(v249, v243);
    }

    else
    {
      uint64_t v92 = *(void *)(v1 + 608);
      swift_bridgeObjectRelease(0LL);
      uint64_t v93 = sub_2B7C4();
      Logger.logObject.getter(v93);
      uint64_t v94 = sub_1BCD0();
      if (sub_1BB80(v94))
      {
        uint64_t v95 = (_WORD *)sub_1B9DC();
        sub_2BA04(v95);
        sub_1BAA8(&dword_0, v96, v97, "Could not get timer action from timer.");
        sub_1B904(v48);
      }

      sub_7C0A4();
      sub_67C4((uint64_t *)&unk_FF830);
      uint64_t v98 = sub_5A12C();
      os_log_type_t v99 = sub_2F6A0(v98);
      sub_7C168(v99, v100, v101, v102, v103, v104, v105, v106, 1);

      sub_2B950(*(uint64_t (**)(uint64_t, uint64_t))(v92 + 8));
      uint64_t v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v42, v43);
    }

    sub_7C260( v107,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  v205,  v213,  v221,  v229,  v236,  v243,  v249,  v254,  v258,  v261);
LABEL_67:
    sub_7BFB8();
    sub_1B838();
    sub_1BA8C();
    sub_1BA60();
    sub_1BAD0();
    sub_1BABC();
    sub_1B86C();
    sub_1BA24();
    sub_1BA14();
    uint64_t v141 = sub_1BA38();
    uint64_t v149 = sub_1B8C4(v141, v142, v143, v144, v145, v146, v147, v148, v205, v213, v221);
    uint64_t v157 = sub_1B8BC(v149, v150, v151, v152, v153, v154, v155, v156, v206, v214, v222, v229);
    uint64_t v165 = sub_1B8B4(v157, v158, v159, v160, v161, v162, v163, v164, v207, v215, v223, v230, v236);
    uint64_t v173 = sub_1B864(v165, v166, v167, v168, v169, v170, v171, v172, v208, v216, v224, v231, v237, v242);
    uint64_t v181 = sub_1B874(v173, v174, v175, v176, v177, v178, v179, v180, v209, v217, v225, v232, v238, v244, v248);
    uint64_t v189 = sub_1B8AC(v181, v182, v183, v184, v185, v186, v187, v188, v210, v218, v226, v233, v239, v245, v250, v253);
    uint64_t v197 = sub_1B8A4( v189,  v190,  v191,  v192,  v193,  v194,  v195,  v196,  v211,  v219,  v227,  v234,  v240,  v246,  v251,  v255,  v257);
    sub_1B958( v197,  v198,  v199,  v200,  v201,  v202,  v203,  v204,  v212,  v220,  v228,  v235,  v241,  v247,  v252,  v256,  v259,  v260);
    return sub_2B490(*(uint64_t (**)(void))(v1 + 8));
  }

  sub_7C298();
  uint64_t v64 = SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
  uint64_t v65 = sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
  if (v64)
  {
    uint64_t v66 = *(void **)(v1 + 584);
    Logger.logObject.getter(v65);
    uint64_t v67 = sub_1BCD0();
    if (sub_1BB80(v67))
    {
      uint64_t v68 = (_WORD *)sub_1B9DC();
      sub_2BA04(v68);
      sub_1BAA8( &dword_0,  v69,  v70,  "[PauseTimer.HandleIntentStrategy.makeIntentHandledResponse] Using multi-timer RF 2.0 path");
      sub_1B904(v64);
    }

    uint64_t v71 = *(void *)(v1 + 616);
    uint64_t v72 = _swiftEmptyArrayStorage;
    if (v71)
    {
      sub_7C1F0();
      if ((v71 & 0x8000000000000000LL) != 0) {
        __break(1u);
      }
      sub_7C280();
      do
      {
        os_log_type_t v73 = *(void *)(v1 + 592);
        if ((v73 & 0xC000000000000001LL) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)(v71, v73);
        }
        else {
          uint64_t v74 = *(id *)(v1 + 96 + 8 * v71);
        }
        sub_7C2F4();

        sub_7C324();
        if (v76)
        {
          sub_7C1D8(v75);
          uint64_t v72 = v262;
        }

        sub_7C074();
      }

      while ((void *)v71 != v66);
    }

    **(void **)(v1 + 368) = v72;
    uint64_t v84 = sub_2F784();
    sub_644D0(v84);
    uint64_t v85 = sub_6460C();
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v85, v86, v87, v88);
    if (qword_FB138 != -1) {
      swift_once(&qword_FB138, sub_2C110);
    }
    uint64_t v89 = (void *)swift_task_alloc(dword_100204);
    *(void *)(v1 + 672) = v89;
    sub_7C14C(v89, (uint64_t)sub_79BB0);
    uint64_t v91 = sub_2B9E8(v90);
    return sub_7C0D0(v91);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 592));
    if (qword_FB148 != -1) {
      swift_once(&qword_FB148, sub_2C148);
    }
    uint64_t v81 = (void *)swift_task_alloc(dword_100A7C);
    *(void *)(v1 + 728) = v81;
    sub_7C14C(v81, (uint64_t)sub_7A370);
    uint64_t v83 = sub_2B9E8(v82);
    return sub_7C0EC(v83);
  }

  sub_8EEB4(0LL, (v9 & 0xC000000000000001LL) == 0, v9);
  if ((v9 & 0xC000000000000001LL) != 0) {
    uint64_t v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
  }
  else {
    uint64_t v12 = *(id *)(v9 + 32);
  }
  uint64_t v13 = v12;
  *(void *)(v1 + 624) = v12;
  sub_2B7C4();
  uint64_t v14 = sub_67C4(&qword_FBE58);
  uint64_t inited = swift_initStackObject(v14, v1 + 16);
  *(_OWORD *)(inited + 16) = xmmword_C2690;
  *(void *)(inited + 32) = v13;
  v190[0] = inited;
  specialized Array._endMutation()(inited, v16, v17, v18, v19, v20, v21, v22);
  int v23 = v13;
  sub_C7A0();
  uint64_t v24 = sub_18034();
  static DialogPhase.completion.getter(v24);
  uint64_t v25 = sub_33E50();
  *(void *)(v1 + 632) = sub_303F8(v25, v9);
  if (v10)
  {
    sub_33E50();
    os_log_type_t v26 = sub_2B930();
    sub_2B7C4();
  }

  else
  {
    os_log_type_t v26 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
  }

  *(void *)(v1 + 640) = v26;
  if (v26 == 1)
  {
    type metadata accessor for TimerSessionManager(0LL);
    static TimerSessionManager.shared.getter((void *)(v1 + 216));
    sub_8CFC((void *)(v1 + 216), *(void *)(v1 + 240));
    sub_58E1C(v23);
    *(void *)(v1 + 648) = v27;
    uint64_t v28 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
    *(void *)(v1 + 656) = v28;
    *uint64_t v28 = v1;
    v28[1] = sub_9D81C;
    sub_A0050();
    return dispatch thunk of SessionManaging.sessionIDString(for:)(v29, v30, v31, v32);
  }

  *(_OWORD *)(v1 + 680) = 0u;
  uint64_t v184 = *(void *)(v1 + 608);
  os_log_type_t v35 = *(void *)(v1 + 496);
  uint64_t v34 = *(void *)(v1 + 504);
  uint64_t v36 = *(void *)(v1 + 480);
  uint64_t v169 = *(void *)(v1 + 488);
  uint64_t v173 = *(void *)(v1 + 472);
  uint64_t v179 = *(void *)(v1 + 464);
  uint64_t v37 = type metadata accessor for ApplicationContext(0LL);
  static ApplicationContext.shared.getter(v37);
  ApplicationContext.deviceState.getter((void *)(v1 + 96));
  sub_1BC50();
  uint64_t v39 = *(void *)(v1 + 120);
  uint64_t v38 = *(void *)(v1 + 128);
  sub_8CFC((void *)(v1 + 96), v39);
  dispatch thunk of DeviceState.isWatch.getter(v39, v38);
  _s20HandleIntentStrategyVwxx_0((void *)(v1 + 96));
  (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))( v34,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v169);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v173 + 16))(v36, v184, v179);
  uint64_t v40 = mach_absolute_time();
  id v41 = SiriTimeMeasurement.init(_:log:startTime:)(v34, v36, v40);
  static ApplicationContext.shared.getter(v41);
  ApplicationContext.deviceState.getter((void *)(v1 + 136));
  sub_1BC50();
  uint64_t v42 = *(void *)(v1 + 160);
  uint64_t v43 = *(void *)(v1 + 168);
  sub_8CFC((void *)(v1 + 136), v42);
  uint64_t v44 = sub_64594(v42);
  _s20HandleIntentStrategyVwxx_0((void *)(v1 + 136));
  if ((v44 & 1) != 0)
  {
    uint64_t v45 = sub_A01BC();
    *(void *)(v1 + 784) = v45;
    sub_18034();
    if (v45)
    {
      Swift::Int v46 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
      *(void *)(v1 + 344) = 0LL;
      char v47 = sub_64668(v46, "archivedDataWithRootObject:requiringSecureCoding:error:", (uint64_t)v45);
      uint64_t v48 = *(void **)(v1 + 344);
      if (v47)
      {
        uint64_t v49 = v47;
        uint64_t v50 = v48;
        uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v49);
        uint64_t v53 = v52;

        *(void *)(v1 + 792) = v51;
        *(void *)(v1 + 800) = v53;
        if (qword_FB1A0 != -1) {
          swift_once(&qword_FB1A0, sub_437B0);
        }
        uint64_t v54 = (void *)sub_5A248();
        sub_A01F0(v54);
        int v55 = (void *)swift_task_alloc(dword_FCFF4);
        *(void *)(v1 + 816) = v55;
        sub_A01A4(v55, (uint64_t)sub_9EA1C);
        sub_A0050();
        return sub_46F9C(v56, v57, v58);
      }

      uint64_t v105 = *(void *)(v1 + 632);
      uint64_t v106 = *(void **)(v1 + 624);
      uint64_t v185 = *(void *)(v1 + 584);
      uint64_t v188 = *(void *)(v1 + 600);
      uint64_t v174 = *(void *)(v1 + 576);
      uint64_t v180 = *(void *)(v1 + 592);
      uint64_t v107 = *(void *)(v1 + 544);
      uint64_t v165 = *(void *)(v1 + 536);
      uint64_t v108 = *(void *)(v1 + 528);
      uint64_t v109 = *(void *)(v1 + 520);
      uint64_t v110 = *(void *)(v1 + 512);
      uint64_t v111 = v48;
      swift_bridgeObjectRelease(0LL);
      swift_bridgeObjectRelease(v105);
      uint64_t v112 = _convertNSErrorToError(_:)(v48);

      uint64_t v169 = v112;
      swift_willThrow(v113, v114, v115, v116, v117, v118, v119, v120);

      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v108, v110);
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v174, v165);
    }

    else
    {
      uint64_t v86 = *(void *)(v1 + 632);
      swift_bridgeObjectRelease(0LL);
      uint64_t v87 = sub_2B7C4();
      Logger.logObject.getter(v87);
      uint64_t v88 = sub_1BCD0();
      if (sub_1BB80(v88))
      {
        uint64_t v89 = (_WORD *)sub_1B9DC();
        sub_2BA04(v89);
        sub_1BAA8(&dword_0, v90, v91, "Could not get timer action from timer.");
        sub_1B904(v42);
      }

      uint64_t v92 = *(void **)(v1 + 624);
      uint64_t v180 = *(void *)(v1 + 592);
      uint64_t v185 = *(void *)(v1 + 584);
      uint64_t v188 = *(void *)(v1 + 600);
      sub_A0178();
      sub_67C4((uint64_t *)&unk_FF830);
      uint64_t v93 = sub_5A12C();
      uint64_t v94 = sub_2F6A0(v93);
      sub_7C168(v94, v95, v96, v97, v98, v99, v100, v101, 1);

      sub_2B950(*(uint64_t (**)(uint64_t, uint64_t))(v86 + 8));
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v36, v37);
    }

    (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v188, v185);
LABEL_53:
    sub_A0130();
    uint64_t v175 = v131;
    uint64_t v181 = v130;
    uint64_t v186 = *(void *)(v1 + 408);
    uint64_t v189 = *(void *)(v1 + 392);
    swift_task_dealloc();
    sub_1B86C();
    sub_1BA24();
    sub_1BA14();
    sub_1BA38();
    sub_1B838();
    sub_1BA8C();
    sub_1BA60();
    sub_1BAD0();
    uint64_t v132 = sub_1BABC();
    uint64_t v140 = sub_1B8C4(v132, v133, v134, v135, v136, v137, v138, v139, v165, v169, v175);
    uint64_t v148 = sub_1B8BC(v140, v141, v142, v143, v144, v145, v146, v147, v166, v170, v176, v181);
    uint64_t v156 = sub_1B8B4(v148, v149, v150, v151, v152, v153, v154, v155, v167, v171, v177, v182, v186);
    sub_1B864(v156, v157, v158, v159, v160, v161, v162, v163, v168, v172, v178, v183, v187, v189);
    sub_A0050();
    __asm { BR              X0 }
  }

  sub_64524();
  uint64_t v59 = SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
  uint64_t v60 = sub_64444(v44, *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
  if (v59)
  {
    uint64_t v61 = *(void **)(v1 + 608);
    Logger.logObject.getter(v60);
    uint64_t v62 = sub_1BCD0();
    if (sub_1BB80(v62))
    {
      uint64_t v63 = (_WORD *)sub_1B9DC();
      sub_2BA04(v63);
      sub_1BAA8( &dword_0,  v64,  v65,  "[ResetTimer.HandleIntentStrategy.makeIntentHandledResponse] Using multi-timer RF 2.0 path");
      sub_1B904(v59);
    }

    uint64_t v67 = *(void *)(v1 + 640);
    uint64_t v68 = _swiftEmptyArrayStorage;
    if (!v67) {
      goto LABEL_39;
    }
    v190[0] = _swiftEmptyArrayStorage;
    sub_645F4(v66, v67 & ~(v67 >> 63));
    if ((v67 & 0x8000000000000000LL) == 0)
    {
      uint64_t v68 = (void *)v190[0];
      uint64_t v69 = (id *)(*(void *)(v1 + 616) + 32LL);
      do
      {
        uint64_t v70 = *(void *)(v1 + 616);
        if ((v70 & 0xC000000000000001LL) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v70);
        }
        else {
          uint64_t v71 = *v69;
        }
        sub_645BC();

        v190[0] = v68;
        uint64_t v72 = v68[3];
        if (v68[2] >= v72 >> 1)
        {
          sub_64588(v72 > 1);
          uint64_t v68 = (void *)v190[0];
        }

        sub_A00A0();
      }

      while (v190);
LABEL_39:
      **(void **)(v1 + 432) = v68;
      uint64_t v78 = sub_2F784();
      sub_644D0(v78);
      uint64_t v79 = sub_6460C();
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v79, v80, v81, v82);
      if (qword_FB190 != -1) {
        swift_once(&qword_FB190, sub_43778);
      }
      uint64_t v83 = (void *)swift_task_alloc(dword_FBDD4);
      *(void *)(v1 + 696) = v83;
      sub_A01A4(v83, (uint64_t)sub_9DFA4);
      sub_2B9E8(v84);
      sub_A0050();
      return sub_1BDE4(v85);
    }

    __break(1u);
    goto LABEL_57;
  }

  os_log_type_t v73 = *(void *)(v1 + 632);
  sub_A020C();
  if (v73 >> 62)
  {
    sub_33E50();
    uint64_t v74 = sub_2B930();
    sub_2B7C4();
  }

  else
  {
    uint64_t v74 = *(void *)((char *)&dword_10 + (v73 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v74 >= 2)
  {
    if (qword_FB1A0 == -1)
    {
LABEL_38:
      uint64_t v75 = (void *)swift_task_alloc(dword_FCFEC);
      *(void *)(v1 + 752) = v75;
      sub_A01A4(v75, (uint64_t)sub_9E78C);
      sub_2B9E8(v76);
      sub_A0050();
      return sub_46EA4(v77);
    }

uint64_t sub_5DDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v2 = type metadata accessor for UsoEntity_appleTimer_TimerAttribute.DefinedValues(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v27 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_67C4(&qword_FDDB0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_67C4(&qword_FDDB8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v27 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = dispatch thunk of CodeGenListEntry.entry.getter(&v29);
  if (v29)
  {
    uint64_t v18 = CodeGenBase.entity.getter(v17);
    swift_release();
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  uint64_t v19 = type metadata accessor for UsoEntity_appleTimer_TimerAttribute(0LL);
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&v30, v18, v19, v19);
  uint64_t v20 = swift_release();
  if (!v30) {
    goto LABEL_11;
  }
  dispatch thunk of UsoEntity_appleTimer_TimerAttribute.definedValue.getter(v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v14, v28, v2);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v14, 0LL, 1LL, v2);
  uint64_t v21 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_8C84((uint64_t)v16, (uint64_t)v7, &qword_FDDB8);
  sub_8C84((uint64_t)v14, v21, &qword_FDDB8);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v7, 1LL, v2) != 1)
  {
    sub_8C84((uint64_t)v7, (uint64_t)v11, &qword_FDDB8);
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v21, 1LL, v2) != 1)
    {
      uint64_t v24 = v27;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v27, v21, v2);
      sub_11718( (unint64_t *)&unk_FDDC0,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity_appleTimer_TimerAttribute.DefinedValues,  (uint64_t)&protocol conformance descriptor for UsoEntity_appleTimer_TimerAttribute.DefinedValues);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v24, v2, v25);
      swift_release();
      os_log_type_t v26 = *(void (**)(char *, uint64_t))(v3 + 8);
      v26(v27, v2);
      sub_8CC4((uint64_t)v14, &qword_FDDB8);
      sub_8CC4((uint64_t)v16, &qword_FDDB8);
      v26(v11, v2);
      sub_8CC4((uint64_t)v7, &qword_FDDB8);
      return v22 & 1;
    }

    swift_release();
    sub_8CC4((uint64_t)v14, &qword_FDDB8);
    sub_8CC4((uint64_t)v16, &qword_FDDB8);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
    goto LABEL_10;
  }

  swift_release();
  sub_8CC4((uint64_t)v14, &qword_FDDB8);
  sub_8CC4((uint64_t)v16, &qword_FDDB8);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v21, 1LL, v2) != 1)
  {
LABEL_10:
    sub_8CC4((uint64_t)v7, &qword_FDDB0);
LABEL_11:
    char v22 = 0;
    return v22 & 1;
  }

  sub_8CC4((uint64_t)v7, &qword_FDDB8);
  char v22 = 1;
  return v22 & 1;
}

uint64_t sub_5E164(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a3);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      if ((a3 & 0xC000000000000001LL) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a3);
      }

      else
      {
        uint64_t v8 = *(void *)(a3 + 8 * v7);
        swift_retain(v8);
      }

      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v16 = v8;
      char v10 = a1(&v16);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        swift_release(v8);
        return v12 & 1;
      }

      char v11 = v10;
      swift_release(v8);
      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        char v12 = 1;
        return v12 & 1;
      }

      ++v7;
      if (v9 == v6) {
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_16:
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

uint64_t sub_5E2A0()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UsoEntity_appleTimer_TimerAttribute.DefinedValues(0LL)
                                      - 8)
                          + 80LL);
  swift_arrayDestroy(v0 + ((v1 + 32) & ~v1), *(void *)(v0 + 16));
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_5E2E4(uint64_t a1)
{
  return sub_5DDE8(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_5E300(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, 1LL, v1);
}

void sub_5E31C(uint64_t a1)
{
}

uint64_t sub_5E324@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_5E330(uint64_t a1, uint64_t a2)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, a2, 1LL, v2);
}

void sub_5E33C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

uint64_t sub_5E368(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, 1LL, v1);
}

  ;
}

void sub_5E398(uint64_t a1)
{
}

void sub_5E3A0(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_5E3A8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_5E3B4()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_5E3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

uint64_t sub_5E3C8()
{
  return sub_5D9E4(v0);
}

uint64_t sub_5E3D0(uint64_t a1, uint64_t a2)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, a2, 1LL, v2);
}

uint64_t sub_5E3DC()
{
  return objc_opt_self(*(void *)(v0 + 1952));
}

uint64_t sub_5E3E4(char a1)
{
  uint64_t v2 = sub_5F868(a1);
  uint64_t v3 = sub_5F624(v2);
  uint64_t v4 = sub_5F844(v3);
  v1[12] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[13] = v5;
  v1[14] = sub_2B4DC(v5);
  v1[15] = sub_1B970();
  uint64_t v6 = sub_67C4(&qword_FDDF8);
  v1[16] = sub_2B4DC(*(void *)(v6 - 8));
  v1[17] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5E454()
{
  if (qword_FB200 != -1) {
    swift_once(&qword_FB200, sub_5ED6C);
  }
  uint64_t v1 = (void *)swift_task_alloc(dword_FC4B4);
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_5E4D0;
  return sub_2FC20();
}

uint64_t sub_5E4D0()
{
  return sub_1B758();
}

uint64_t sub_5E50C()
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v3[20] = v5;
  sub_1BD14(v5);
  sub_5F85C();
  sub_2B758();
  uint64_t v6 = type metadata accessor for TemplatingSection(0LL);
  sub_5F708(v6);
  if (v7)
  {
    sub_5EDE4(v1);
    uint64_t v9 = 0LL;
    uint64_t v0 = 0LL;
  }

  else
  {
    sub_5F75C();
    uint64_t v8 = sub_5F518();
    uint64_t v9 = v2;
    TemplatingText.text.getter(v8);
    sub_5F670();
  }

  v3[22] = v9;
  v3[23] = v0;
  char v10 = (void *)swift_task_alloc(dword_FC4CC);
  v3[24] = v10;
  *char v10 = v3;
  v10[1] = sub_5E5C8;
  return sub_2FD88();
}

uint64_t sub_5E5C8()
{
  if (v1) {
    swift_bridgeObjectRelease(*(void *)(v0 + 184));
  }
  sub_1B9B8();
  return sub_1B934();
}

uint64_t sub_5E60C()
{
  if (v7)
  {
    sub_5EDE4(*(void *)(v1 + 128));
    if (v3)
    {
      uint64_t v8 = *(void *)(v1 + 184);
LABEL_11:
      uint64_t v36 = v8;
LABEL_14:
      swift_bridgeObjectRelease(v36);
      sub_67C4((uint64_t *)&unk_FDE00);
      unint64_t v37 = sub_5EE24();
      uint64_t v38 = sub_2F6A0(v37);
      sub_5F880(v38, v39, v40, v41, v42, v43, v44, v45);
      sub_5F548();
      sub_1B86C();
      sub_1BA24();
      sub_1BA14();
      sub_1BA38();
      return sub_2F3C8(*(uint64_t (**)(void))(v1 + 8));
    }

    uint64_t v0 = 0LL;
LABEL_13:
    uint64_t v36 = v0;
    goto LABEL_14;
  }

  sub_5F598();
  uint64_t v9 = sub_5F518();
  TemplatingText.text.getter(v9);
  sub_5F688();
  if (!v3) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v1 + 184);
  if (!v0) {
    goto LABEL_11;
  }
  char v10 = (void *)(v1 + 16);
  if (qword_FB1F8 != -1) {
    swift_once(&qword_FB1F8, sub_5ED24);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_5474(v11, (uint64_t)qword_FDDD0);
  sub_5F7EC();
  uint64_t v12 = sub_5F88C();
  uint64_t v13 = (void *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (sub_434D0(v14))
  {
    sub_5F608();
    uint64_t v6 = sub_5F6E0();
    uint64_t v88 = v6;
    uint64_t v15 = sub_5F78C(4.8151e-34);
    uint64_t v20 = sub_5F76C(v15, v16, v17, v18, v19);
    sub_5F6C8(v20, v21, v22, v23, v24, v25, v26, v27, v73, v76, v79);
    sub_2BFBC(v8);
    uint64_t v28 = sub_5F734();
    uint64_t v33 = sub_5F77C(v28, v29, v30, v31, v32);
    sub_5F658(v33);
    sub_2BFBC(v0);
    sub_5F6F4(&dword_0, v34, v35, "Building confirmation sleep button view with text: %s, %s");
    sub_5F7AC();
    sub_1B904(v6);
    char v10 = (void *)v82;
    sub_1B904(v1 + 16);
  }

  else
  {
    sub_2B644(v8);
    sub_2B644(v0);
  }

  sub_5F7CC(v47, v48, v49, v50, v51, v52, v53, v54, v73, v76, v79, v82, v2, v88, v90, v92, v94, v96, v98, v100);
  sub_5F79C(v55, v56, v57, v58, v59, v60, v61, v62, v74, v77, v80, v83, v85, v89, v91, v93, v95, v97, v99, v101);
  uint64_t v63 = sub_5F814();
  static ApplicationContext.shared.getter(v63);
  sub_5F874();
  swift_release();
  uint64_t v64 = sub_5F6A0();
  uint64_t v65 = _s20HandleIntentStrategyVwxx_0(v10);
  uint64_t v72 = *(void *)(v1 + 176);
  if ((v64 & 1) != 0) {
    sub_5F5D0(v65, v66, v72, v67, v68, v69, v70, v71, v75, v78, v81, v84, v86);
  }
  else {
    sub_5F5EC(v65, v66, v72, v67, v68, v69, v70, v71, v75, v78, v81, v84, v86);
  }
  sub_5F640();
  swift_bridgeObjectRelease(v0);

  sub_1BA14();
  sub_1BA38();
  swift_task_dealloc(v10);
  swift_task_dealloc(v6);
  swift_task_dealloc(v4);
  return sub_5F52C(v87, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_5E844(char a1)
{
  uint64_t v2 = sub_5F868(a1);
  uint64_t v3 = sub_5F624(v2);
  uint64_t v4 = sub_5F844(v3);
  v1[12] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[13] = v5;
  v1[14] = sub_2B4DC(v5);
  v1[15] = sub_1B970();
  uint64_t v6 = sub_67C4(&qword_FDDF8);
  v1[16] = sub_2B4DC(*(void *)(v6 - 8));
  v1[17] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5E8B4()
{
  if (qword_FB200 != -1) {
    swift_once(&qword_FB200, sub_5ED6C);
  }
  uint64_t v1 = (void *)swift_task_alloc(dword_FC4C4);
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_5E930;
  return sub_2FCE0();
}

uint64_t sub_5E930()
{
  return sub_1B758();
}

uint64_t sub_5E96C()
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v3[20] = v5;
  sub_1BD14(v5);
  sub_5F85C();
  sub_2B758();
  uint64_t v6 = type metadata accessor for TemplatingSection(0LL);
  sub_5F708(v6);
  if (v7)
  {
    sub_5EDE4(v1);
    uint64_t v9 = 0LL;
    uint64_t v0 = 0LL;
  }

  else
  {
    sub_5F75C();
    uint64_t v8 = sub_5F518();
    uint64_t v9 = v2;
    TemplatingText.text.getter(v8);
    sub_5F670();
  }

  v3[22] = v9;
  v3[23] = v0;
  char v10 = (void *)swift_task_alloc(dword_FC4D4);
  v3[24] = v10;
  *char v10 = v3;
  v10[1] = sub_5EA28;
  return sub_2FDEC();
}

uint64_t sub_5EA28()
{
  if (v1) {
    swift_bridgeObjectRelease(*(void *)(v0 + 184));
  }
  sub_1B9B8();
  return sub_1B934();
}

uint64_t sub_5EA6C()
{
  if (v7)
  {
    sub_5EDE4(*(void *)(v1 + 128));
    if (v3)
    {
      uint64_t v8 = *(void *)(v1 + 184);
LABEL_11:
      uint64_t v36 = v8;
LABEL_14:
      swift_bridgeObjectRelease(v36);
      sub_67C4((uint64_t *)&unk_FDE00);
      unint64_t v37 = sub_5EE24();
      uint64_t v38 = sub_2F6A0(v37);
      sub_5F880(v38, v39, v40, v41, v42, v43, v44, v45);
      sub_5F548();
      sub_1B86C();
      sub_1BA24();
      sub_1BA14();
      sub_1BA38();
      return sub_2F3C8(*(uint64_t (**)(void))(v1 + 8));
    }

    uint64_t v0 = 0LL;
LABEL_13:
    uint64_t v36 = v0;
    goto LABEL_14;
  }

  sub_5F598();
  uint64_t v9 = sub_5F518();
  TemplatingText.text.getter(v9);
  sub_5F688();
  if (!v3) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v1 + 184);
  if (!v0) {
    goto LABEL_11;
  }
  char v10 = (void *)(v1 + 16);
  if (qword_FB1F8 != -1) {
    swift_once(&qword_FB1F8, sub_5ED24);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_5474(v11, (uint64_t)qword_FDDD0);
  sub_5F7EC();
  uint64_t v12 = sub_5F88C();
  uint64_t v13 = (void *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (sub_434D0(v14))
  {
    sub_5F608();
    uint64_t v6 = sub_5F6E0();
    uint64_t v88 = v6;
    uint64_t v15 = sub_5F78C(4.8151e-34);
    uint64_t v20 = sub_5F76C(v15, v16, v17, v18, v19);
    sub_5F6C8(v20, v21, v22, v23, v24, v25, v26, v27, v73, v76, v79);
    sub_2BFBC(v8);
    uint64_t v28 = sub_5F734();
    uint64_t v33 = sub_5F77C(v28, v29, v30, v31, v32);
    sub_5F658(v33);
    sub_2BFBC(v0);
    sub_5F6F4(&dword_0, v34, v35, "Building confirmation button view with text: %s, %s");
    sub_5F7AC();
    sub_1B904(v6);
    char v10 = (void *)v82;
    sub_1B904(v1 + 16);
  }

  else
  {
    sub_2B644(v8);
    sub_2B644(v0);
  }

  sub_5F7CC(v47, v48, v49, v50, v51, v52, v53, v54, v73, v76, v79, v82, v2, v88, v90, v92, v94, v96, v98, v100);
  sub_5F79C(v55, v56, v57, v58, v59, v60, v61, v62, v74, v77, v80, v83, v85, v89, v91, v93, v95, v97, v99, v101);
  uint64_t v63 = sub_5F814();
  static ApplicationContext.shared.getter(v63);
  sub_5F874();
  swift_release();
  uint64_t v64 = sub_5F6A0();
  uint64_t v65 = _s20HandleIntentStrategyVwxx_0(v10);
  uint64_t v72 = *(void *)(v1 + 176);
  if ((v64 & 1) != 0) {
    sub_5F5D0(v65, v66, v72, v67, v68, v69, v70, v71, v75, v78, v81, v84, v86);
  }
  else {
    sub_5F5EC(v65, v66, v72, v67, v68, v69, v70, v71, v75, v78, v81, v84, v86);
  }
  sub_5F640();
  swift_bridgeObjectRelease(v0);

  sub_1BA14();
  sub_1BA38();
  swift_task_dealloc(v10);
  swift_task_dealloc(v6);
  swift_task_dealloc(v4);
  return sub_5F52C(v87, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_5ECA4()
{
  return sub_33DC4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5ECE4()
{
  return sub_33DC4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_5ED24()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FDDD0);
  sub_5474(v0, (uint64_t)qword_FDDD0);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_5ED6C()
{
  uint64_t v0 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for TimerBaseCATs_Async(0LL);
  static CATOption.defaultMode.getter();
  uint64_t result = CATWrapper.__allocating_init(options:globals:)(v2, 0LL);
  qword_FDDE8 = result;
  return result;
}

uint64_t sub_5EDE4(uint64_t a1)
{
  uint64_t v2 = sub_67C4(&qword_FDDF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_5EE24()
{
  unint64_t result = qword_FBDA0;
  if (!qword_FBDA0)
  {
    uint64_t v1 = sub_15D30((uint64_t *)&unk_FDE00);
    unint64_t result = swift_getWitnessTable(&unk_C4408, v1);
    atomic_store(result, (unint64_t *)&qword_FBDA0);
  }

  return result;
}

void sub_5EE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v12 = sub_67C4(&qword_FBE58);
  uint64_t v13 = sub_1E854(v12);
  *(_OWORD *)(v13 + 16) = xmmword_C2690;
  *(void *)(v13 + 32) = a5;
  sub_5F50C(v13, v14, v15, v16, v17, v18, v19, v20);
  swift_bridgeObjectRetain(a2);
  id v21 = a5;
  uint64_t v22 = (void *)sub_5F8A0(a1, a2);
  uint64_t v23 = sub_1E854(v12);
  *(_OWORD *)(v23 + 16) = xmmword_C2690;
  *(void *)(v23 + 32) = a6;
  sub_5F50C(v23, v24, v25, v26, v27, v28, v29, v30);
  swift_bridgeObjectRetain(a4);
  id v31 = a6;
  uint64_t v32 = (void *)sub_5F8A0(a3, a4);
  id v33 = [objc_allocWithZone(SASTItemGroup) init];
  uint64_t v34 = sub_18254(v12);
  *(_OWORD *)(v34 + 16) = xmmword_C3780;
  *(void *)(v34 + 32) = v22;
  *(void *)(v34 + 40) = v32;
  sub_5F50C(v34, v35, v36, v37, v38, v39, v40, v41);
  id v42 = v22;
  id v43 = v32;
  sub_5F324(v52, v33, (uint64_t *)&unk_FDE80, (SEL *)&selRef_setTemplateItems_);
  uint64_t v44 = sub_1E854(v12);
  *(_OWORD *)(v44 + 16) = xmmword_C2690;
  *(void *)(v44 + 32) = v33;
  sub_5F50C(v44, v45, v46, v47, v48, v49, v50, v51);

  sub_5F5B4();
}

void sub_5EFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v12 = sub_5F898(objc_allocWithZone(&OBJC_CLASS___SAUIConfirmationView));
  sub_5F29C(a1, a2, v12);
  sub_5F2E0(a3, a4, v12);
  uint64_t v13 = sub_67C4(&qword_FBE58);
  uint64_t v14 = sub_1E854(v13);
  *(_OWORD *)(v14 + 16) = xmmword_C2690;
  *(void *)(v14 + 32) = a5;
  sub_5F50C(v14, v15, v16, v17, v18, v19, v20, v21);
  id v22 = a5;
  sub_5F7BC((uint64_t)v22, v23, v24, (SEL *)&selRef_setConfirmCommands_);
  uint64_t v25 = sub_1E854(v13);
  *(_OWORD *)(v25 + 16) = xmmword_C2690;
  *(void *)(v25 + 32) = a6;
  sub_5F50C(v25, v26, v27, v28, v29, v30, v31, v32);
  id v33 = a6;
  sub_5F7BC((uint64_t)v33, v34, v35, (SEL *)&selRef_setDenyCommands_);
  id v36 = sub_5F898(objc_allocWithZone(&OBJC_CLASS___SAUIConfirmationOption));
  sub_5F3DC(v12, (SEL *)&selRef_confirmText);
  if (v37)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    sub_2B758();
  }

  else
  {
    NSString v38 = 0LL;
  }

  sub_5F80C(v36, "setLabel:");

  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(SAUIConfirmationOptionConfirmationOptionTypeCONFIRMValue);
  sub_5F38C(v39, v40, v36);
  if (sub_5F438(v12, (SEL *)&selRef_confirmCommands))
  {
    sub_67C4((uint64_t *)&unk_FD700);
    v41.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_2B758();
  }

  else
  {
    v41.super.Class isa = 0LL;
  }

  sub_5F80C(v36, "setCommands:");

  id v42 = sub_5F898(objc_allocWithZone(&OBJC_CLASS___SAUIConfirmationOption));
  sub_5F3DC(v12, (SEL *)&selRef_denyText);
  if (v43)
  {
    NSString v44 = String._bridgeToObjectiveC()();
    sub_17E70();
  }

  else
  {
    NSString v44 = 0LL;
  }

  sub_5F80C(v42, "setLabel:");

  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(SAUIConfirmationOptionConfirmationOptionTypeDENYValue);
  sub_5F38C(v45, v46, v42);
  if (sub_5F438(v12, (SEL *)&selRef_denyCommands))
  {
    sub_67C4((uint64_t *)&unk_FD700);
    v47.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_17E70();
  }

  else
  {
    v47.super.Class isa = 0LL;
  }

  sub_5F80C(v42, "setCommands:");

  uint64_t v48 = sub_18254(v13);
  *(_OWORD *)(v48 + 16) = xmmword_C3780;
  *(void *)(v48 + 32) = v36;
  *(void *)(v48 + 40) = v42;
  sub_5F50C(v48, v49, v50, v51, v52, v53, v54, v55);
  id v56 = v36;
  id v57 = v42;
  sub_5F494(v66, v12);
  uint64_t v58 = sub_1E854(v13);
  *(_OWORD *)(v58 + 16) = xmmword_C2690;
  *(void *)(v58 + 32) = v12;
  sub_5F50C(v58, v59, v60, v61, v62, v63, v64, v65);

  sub_5F5B4();
}

void sub_5F29C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setConfirmText:v4];
}

void sub_5F2E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setDenyText:v4];
}

void sub_5F324(uint64_t a1, void *a2, uint64_t *a3, SEL *a4)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  objc_msgSend(a2, *a4, isa);
}

void sub_5F38C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setType:v5];
}

uint64_t sub_5F3DC(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_5F438(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = sub_67C4((uint64_t *)&unk_FD700);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  return v5;
}

void sub_5F494(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setAllConfirmationOptions:isa];
}

uint64_t sub_5F50C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_5F518()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 8LL))(v1, v0);
}

uint64_t sub_5F52C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_5F548()
{
  return swift_task_dealloc(*(void *)(v0 + 136));
}

uint64_t sub_5F558()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 192);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 200) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_5F578()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 144);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 152) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_5F598()
{
  return TemplatingSection.content.getter();
}

  ;
}

void sub_5F5D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_5F5EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t sub_5F608()
{
  return swift_slowAlloc(22LL, -1LL);
}

uint64_t sub_5F624(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  uint64_t v2 = *(void *)(a1 - 8);
  *(void *)(v1 + 80) = v2;
  return swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_5F640()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_5F658(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v4, v2, v5 + 22);
}

uint64_t sub_5F670()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_5F688()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_5F6A0()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  sub_8CFC(v1, v2);
  return dispatch thunk of DeviceState.isWatch.getter(v2, v3);
}

uint64_t sub_5F6C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 + 56) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, v13, v12, v14 + 12);
}

uint64_t sub_5F6E0()
{
  return swift_slowAlloc(64LL, -1LL);
}

void sub_5F6F4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_5F708(uint64_t a1)
{
  *(void *)(v2 + 168) = a1;
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v1, 1LL, a1);
}

uint64_t sub_5F734()
{
  *(_WORD *)(v1 + 12) = 2080;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_5F748()
{
  return TemplatingResult.sections.getter();
}

uint64_t sub_5F75C()
{
  return TemplatingSection.content.getter();
}

uint64_t sub_5F76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_683C(a2, v5, (uint64_t *)va);
}

uint64_t sub_5F77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_683C(a5, v5, (uint64_t *)va);
}

uint64_t sub_5F78C(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

void sub_5F79C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

uint64_t sub_5F7AC()
{
  return swift_arrayDestroy(v0, 2LL);
}

void sub_5F7BC(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
}

void sub_5F7CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

uint64_t sub_5F7DC()
{
  return v2(v0, v1);
}

uint64_t sub_5F7EC()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_5F7FC()
{
  return TemplatingResult.sections.getter();
}

id sub_5F80C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_5F814()
{
  return type metadata accessor for ApplicationContext(0LL);
}

uint64_t sub_5F820()
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v1, 1LL, v0);
}

uint64_t sub_5F844(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return type metadata accessor for TemplatingResult(0LL);
}

uint64_t sub_5F850()
{
  return sub_8EF80(v1, v0);
}

uint64_t sub_5F85C()
{
  return sub_8EF80(v1, v0);
}

uint64_t sub_5F868(char a1)
{
  *(_BYTE *)(v1 + 208) = a1;
  return type metadata accessor for TemplatingText(0LL);
}

void *sub_5F874()
{
  return ApplicationContext.deviceState.getter(v0);
}

uint64_t sub_5F880( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_5F88C()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

id sub_5F898(void *a1)
{
  return [a1 *(SEL *)(v1 + 1064)];
}

uint64_t sub_5F8A0(uint64_t a1, uint64_t a2)
{
  return SASTButtonItem.init(label:commands:)(a1, a2, v2);
}

ValueMetadata *_s20HandleIntentStrategyVMa_2()
{
  return &_s20HandleIntentStrategyVN_2;
}

uint64_t sub_5F8BC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FDEA0);
  sub_5474(v0, (uint64_t)qword_FDEA0);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_5F904(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_67C4(&qword_FBDB8);
  v2[4] = sub_1B6C8(*(void *)(v3 - 8));
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_5F948()
{
  uint64_t v1 = sub_6462C();
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v1, v2, v3, v4);
  sub_6EB5C();
  uint64_t v6 = v5;
  sub_64464(v5, &qword_FBDB8);
  sub_1BABC();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_5F9B8(uint64_t a1, uint64_t a2)
{
  v2[45] = a1;
  v2[46] = a2;
  uint64_t v3 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[47] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[48] = v4;
  v2[49] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void *)(type metadata accessor for SiriTimerSnippetModel(0LL) - 8);
  v2[50] = v5;
  v2[51] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v6 = (*(void *)(*(void *)(sub_67C4(&qword_FC418) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[52] = swift_task_alloc(v6);
  v2[53] = swift_task_alloc(v6);
  v2[54] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v2[55] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[56] = v8;
  v2[57] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v2[58] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[59] = v10;
  v2[60] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v2[61] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[62] = v12;
  v2[63] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[64] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[65] = v14;
  v2[66] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DialogPhase(0LL);
  v2[67] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[68] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[69] = swift_task_alloc(v17);
  v2[70] = swift_task_alloc(v17);
  v2[71] = swift_task_alloc(v17);
  v2[72] = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[73] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v2[74] = v19;
  v2[75] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for NLContextUpdate(0LL);
  v2[76] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v2[77] = v21;
  unint64_t v22 = (*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[78] = swift_task_alloc(v22);
  v2[79] = swift_task_alloc(v22);
  v2[80] = swift_task_alloc(v22);
  return swift_task_switch(sub_5FC04, 0LL, 0LL);
}

uint64_t sub_5FC04()
{
  if (qword_FB208 != -1) {
    swift_once(&qword_FB208, sub_5F8BC);
  }
  uint64_t v2 = sub_5474(*(void *)(v1 + 464), (uint64_t)qword_FDEA0);
  *(void *)(v1 + 648) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_WORD *)sub_1B9DC();
    sub_2BA04(v5);
    sub_1BBEC(&dword_0, v3, v4, "ResumeTimer.HandleIntentStrategy.makeIntentHandledResponse() called", v0);
    sub_1B904((uint64_t)v0);
  }

  uint64_t v6 = sub_67C4(&qword_FDF08);
  uint64_t v7 = (void *)IntentResolutionRecord.intentResponse.getter(v6);
  *(void *)(v1 + 656) = v7;
  uint64_t v8 = sub_63F08(v7);
  *(void *)(v1 + 664) = v8;
  if (!v8) {
    goto LABEL_70;
  }
  uint64_t v9 = v8;
  unint64_t v10 = (unint64_t)v8 >> 62;
  if (!((unint64_t)v8 >> 62))
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8LL));
    sub_33E50();
    if (v11) {
      goto LABEL_8;
    }
    goto LABEL_69;
  }

  if (v8 < 0) {
    uint64_t v132 = v8;
  }
  else {
    uint64_t v132 = v8 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_33E50();
  if (!_CocoaArrayWrapper.endIndex.getter(v132))
  {
LABEL_69:
    sub_4C700();
LABEL_70:
    sub_182D4();
    sub_64320((unint64_t *)&qword_FCC50, v133, (uint64_t)&unk_C4340);
    uint64_t v135 = sub_6419C(v134);
    _BYTE *v136 = 5;
    uint64_t v200 = v135;
    sub_64328(v135, (uint64_t)v136, v137, v138, v139, v140, v141, v142);

    goto LABEL_71;
  }

uint64_t sub_606A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 704);
  *(void *)(v3 + 712) = a1;
  *(void *)(v3 + 720) = a2;
  sub_2B988(v4);
  sub_18034();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_6072C()
{
  uint64_t v1 = *(void *)(v0 + 720);
  uint64_t v2 = *(void *)(v0 + 712);
  *(void *)(v0 + 736) = v1;
  *(void *)(v0 + 728) = v2;
  uint64_t v192 = *(void *)(v0 + 648);
  uint64_t v195 = *(void *)(v0 + 528);
  uint64_t v3 = *(void *)(v0 + 504);
  uint64_t v4 = *(void *)(v0 + 480);
  uint64_t v170 = *(void *)(v0 + 496);
  uint64_t v177 = *(void *)(v0 + 488);
  uint64_t v183 = *(void *)(v0 + 472);
  uint64_t v188 = *(void *)(v0 + 464);
  uint64_t v5 = type metadata accessor for ApplicationContext(0LL);
  static ApplicationContext.shared.getter(v5);
  ApplicationContext.deviceState.getter((void *)(v0 + 96));
  sub_1BC50();
  uint64_t v6 = *(void *)(v0 + 120);
  sub_8CFC((void *)(v0 + 96), v6);
  uint64_t v162 = v1;
  int v7 = sub_64594(v6) & (v1 != 0);
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 96));
  (*(void (**)(uint64_t, void, uint64_t))(v170 + 104))( v3,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v177);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v183 + 16))(v4, v192, v188);
  uint64_t v8 = mach_absolute_time();
  uint64_t v9 = SiriTimeMeasurement.init(_:log:startTime:)(v3, v4, v8);
  static ApplicationContext.shared.getter(v9);
  ApplicationContext.deviceState.getter((void *)(v0 + 136));
  sub_1BC50();
  uint64_t v10 = *(void *)(v0 + 160);
  uint64_t v11 = *(void *)(v0 + 168);
  sub_8CFC((void *)(v0 + 136), v10);
  uint64_t v12 = sub_64594(v10);
  sub_643D8();
  if ((v12 & 1) != 0 && !v7)
  {
    id v13 = sub_64554();
    *(void *)(v0 + 848) = v13;
    sub_18034();
    if (v13)
    {
      uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
      *(void *)(v0 + 344) = 0LL;
      id v15 = sub_64668(v14, "archivedDataWithRootObject:requiringSecureCoding:error:", (uint64_t)v13);
      uint64_t v16 = *(void **)(v0 + 344);
      if (v15)
      {
        uint64_t v17 = v15;
        id v18 = v16;
        uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
        uint64_t v21 = v20;

        *(void *)(v0 + 856) = v19;
        *(void *)(v0 + 864) = v21;
        if (qword_FB3E8 != -1) {
          swift_once(&qword_FB3E8, sub_B5C9C);
        }
        uint64_t v22 = (void *)sub_5A248();
        sub_645A8(v22);
        id v23 = (void *)swift_task_alloc(dword_FF14C);
        *(void *)(v0 + 880) = v23;
        sub_644F4(v23, (uint64_t)sub_6189C);
        sub_2F678();
        return sub_7CE58(v24, v25, v26);
      }

      uint64_t v80 = *(void **)(v0 + 672);
      uint64_t v81 = *(void **)(v0 + 656);
      sub_6448C();
      uint64_t v170 = *(void *)(v0 + 544);
      uint64_t v177 = *(void *)(v0 + 536);
      uint64_t v82 = *(void *)(v0 + 528);
      uint64_t v83 = *(void *)(v0 + 520);
      uint64_t v84 = *(void *)(v0 + 512);
      id v85 = v16;
      swift_bridgeObjectRelease(v162);
      sub_2B7C4();
      uint64_t v86 = _convertNSErrorToError(_:)(v16);

      uint64_t v154 = v86;
      swift_willThrow(v87, v88, v89, v90, v91, v92, v93, v94);

      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
      uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v170 + 8))(v183, v177);
    }

    else
    {
      swift_bridgeObjectRelease(*(void *)(v0 + 680));
      uint64_t v43 = swift_bridgeObjectRelease(v162);
      Logger.logObject.getter(v43);
      os_log_type_t v44 = sub_1BCD0();
      if (sub_1BB80(v44))
      {
        uint64_t v45 = (_WORD *)sub_1B9DC();
        sub_2BA04(v45);
        sub_1BAA8(&dword_0, v46, v47, "Could not get timer action from timer.");
        sub_1B904(v0 + 136);
      }

      uint64_t v48 = *(void **)(v0 + 672);
      uint64_t v49 = *(void **)(v0 + 656);
      sub_6448C();
      sub_6444C();
      uint64_t v50 = sub_182D4();
      sub_64320((unint64_t *)&qword_FCC50, v51, (uint64_t)&unk_C4340);
      uint64_t v53 = sub_1B74C(v50, v52);
      *uint64_t v54 = 1;
      sub_6424C(v53, (uint64_t)v54, v55, v56, v57, v58, v59, v60);

      sub_641B0();
      uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 104))(v183, v4);
    }

    sub_2BDD0(v61, v62, v63, v64, v65, v66, v67, v68, v154, v162, v170, v177, v183, v188, v192, v195);
    sub_64370();
    uint64_t v163 = v96;
    uint64_t v171 = v95;
    uint64_t v178 = *(void *)(v0 + 432);
    uint64_t v184 = *(void *)(v0 + 424);
    uint64_t v189 = *(void *)(v0 + 416);
    uint64_t v193 = *(void *)(v0 + 408);
    uint64_t v196 = *(void *)(v0 + 392);
    swift_task_dealloc();
    sub_1BA38();
    sub_1B838();
    sub_1BA8C();
    sub_1BA60();
    sub_1BAD0();
    sub_1BABC();
    sub_1B86C();
    sub_1BA24();
    uint64_t v97 = sub_1BA14();
    uint64_t v105 = sub_1B910(v97, v98, v99, v100, v101, v102, v103, v104, v155, v163);
    uint64_t v113 = sub_1B8C4(v105, v106, v107, v108, v109, v110, v111, v112, v156, v164, v171);
    uint64_t v121 = sub_1B8BC(v113, v114, v115, v116, v117, v118, v119, v120, v157, v165, v172, v178);
    uint64_t v129 = sub_1B8B4(v121, v122, v123, v124, v125, v126, v127, v128, v158, v166, v173, v179, v184);
    uint64_t v137 = sub_1B864(v129, v130, v131, v132, v133, v134, v135, v136, v159, v167, v174, v180, v185, v189);
    uint64_t v145 = sub_1B874(v137, v138, v139, v140, v141, v142, v143, v144, v160, v168, v175, v181, v186, v190, v193);
    sub_1B8AC(v145, v146, v147, v148, v149, v150, v151, v152, v161, v169, v176, v182, v187, v191, v194, v196);
    sub_2F678();
    __asm { BR              X0 }
  }

  sub_64524();
  BOOL v28 = SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
  uint64_t v29 = sub_64444(v12, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  if (v28)
  {
    uint64_t v30 = *(void **)(v0 + 648);
    Logger.logObject.getter(v29);
    os_log_type_t v31 = sub_1BCD0();
    if (sub_1BB80(v31))
    {
      double v32 = (_WORD *)sub_1B9DC();
      sub_2BA04(v32);
      sub_1BAA8( &dword_0,  v33,  v34,  "[ResumeTimer.HandleIntentStrategy.makeIntentHandledResponse] Using multi-timer RF 2.0 path");
      sub_1B904(v28);
    }

    if (v7)
    {
      sub_2F784();
      uint64_t v36 = sub_6462C();
    }

    else
    {
      uint64_t v69 = *(void *)(v0 + 688);
      uint64_t v70 = _swiftEmptyArrayStorage;
      if (v69)
      {
        v197[0] = _swiftEmptyArrayStorage;
        sub_645F4(v35, v69 & ~(v69 >> 63));
        if (v69 < 0) {
          __break(1u);
        }
        uint64_t v70 = (void *)v197[0];
        uint64_t v71 = (id *)(*(void *)(v0 + 664) + 32LL);
        do
        {
          uint64_t v72 = *(void *)(v0 + 664);
          if ((v72 & 0xC000000000000001LL) != 0) {
            specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v72);
          }
          else {
            id v73 = *v71;
          }
          sub_645BC();

          v197[0] = v70;
          unint64_t v74 = v70[3];
          if (v70[2] >= v74 >> 1)
          {
            sub_64588(v74 > 1);
            uint64_t v70 = (void *)v197[0];
          }

          sub_642F0();
        }

        while (v197);
      }

      **(void **)(v0 + 432) = v70;
      uint64_t v76 = sub_2F784();
      sub_644D0(v76);
      uint64_t v36 = sub_6460C();
    }

    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v36, v37, v38, v39);
    if (qword_FB3D8 != -1) {
      swift_once(&qword_FB3D8, sub_B5C64);
    }
    uint64_t v77 = (void *)swift_task_alloc(dword_FC44C);
    *(void *)(v0 + 744) = v77;
    sub_644F4(v77, (uint64_t)sub_60E10);
    sub_2B9E8(v78);
    sub_2F678();
    return sub_2F990(v79);
  }

  else
  {
    sub_644C4();
    if (v12 == 1)
    {
      if (qword_FB3E8 != -1) {
        swift_once(&qword_FB3E8, sub_B5C9C);
      }
      uint64_t v40 = (void *)swift_task_alloc(dword_FF154);
      *(void *)(v0 + 816) = v40;
      sub_644F4(v40, (uint64_t)sub_6160C);
      sub_2B9E8(v41);
      sub_2F678();
      return sub_7D020(v42);
    }

    else
    {
      swift_bridgeObjectRelease(*(void *)(v0 + 680));
      if (qword_FB3E8 != -1) {
        swift_once(&qword_FB3E8, sub_B5C9C);
      }
      os_log_type_t v75 = (void *)swift_task_alloc(dword_FF144);
      *(void *)(v0 + 832) = v75;
      *os_log_type_t v75 = v0;
      v75[1] = sub_61758;
      sub_2F678();
      return sub_7CDF8();
    }
  }

uint64_t sub_60E10()
{
  uint64_t v2 = v0[93];
  v0[94] = v3;
  v0[95] = v1;
  sub_2B988(v2);
  if (v1)
  {
    swift_bridgeObjectRelease(v0[85]);
    sub_2B7C4();
    sub_18034();
  }

  else
  {
    sub_64640();
  }

  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_60ED0()
{
  uint64_t v1 = *(void *)(v0 + 736);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 648);
    swift_bridgeObjectRelease(*(void *)(v0 + 664));
    uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
    Logger.logObject.getter(v3);
    os_log_type_t v4 = sub_1BCD0();
    if (sub_2BDE0(v4))
    {
      uint64_t v5 = (_DWORD *)sub_1BA1C(12LL);
      uint64_t v6 = sub_1BA1C(32LL);
      uint64_t v51 = v6;
      *uint64_t v5 = 136315138;
      uint64_t v7 = sub_33E50();
      uint64_t v9 = sub_6465C(v7, v8, &v51);
      *(void *)(v0 + 336) = v9;
      sub_64534(v9, v0 + 344);
      sub_645E8();
      sub_6446C( &dword_0,  v10,  v11,  "[ResumeTimer.HandleIntentStrategy.makeIntentHandledResponse] We have a live activity: %s");
      sub_644E4();
      sub_1B904(v6);
      sub_1B904((uint64_t)v5);
    }

    else
    {
      sub_4C700();
    }

    uint64_t v19 = (_OWORD *)(v0 + 56);
    uint64_t v20 = *(void *)(v0 + 632);
    uint64_t v21 = *(void *)(v0 + 616);
    uint64_t v22 = *(void *)(v0 + 424);
    static DialogPhase.completion.getter(v23);
    sub_64564(v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
    sub_64648();
    uint64_t v24 = sub_2F784();
    uint64_t v25 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v22, 1LL, v24);
    uint64_t v26 = *(void *)(v0 + 424);
    if ((_DWORD)v25 == 1)
    {
      sub_64464(v25, &qword_FC418);
      *uint64_t v19 = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
      *(void *)(v0 + 88) = 0LL;
    }

    else
    {
      *(void *)(v0 + 80) = v24;
      *(void *)(v0 + 88) = sub_F0D4();
      uint64_t v27 = sub_DB90((void *)(v0 + 56));
      sub_6400C(v26, (uint64_t)v27, type metadata accessor for SiriTimePluginModel);
    }

    BOOL v28 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    *(void *)(v0 + 768) = v28;
    *BOOL v28 = v0;
    v28[1] = sub_612EC;
    uint64_t v29 = *(void *)(v0 + 736);
    uint64_t v30 = *(void *)(v0 + 728);
    uint64_t v31 = *(void *)(v0 + 632);
    uint64_t v32 = *(void *)(v0 + 568);
    uint64_t v33 = *(void *)(v0 + 528);
    uint64_t v34 = *(void *)(v0 + 360);
    unint64_t v52 = 0x80000000000C8120LL;
    return DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)( v34,  v32,  v31,  v19,  v33,  v30,  v29,  0xD000000000000019LL);
  }

  else
  {
    uint64_t v12 = *(os_log_s **)(v0 + 648);
    uint64_t v13 = swift_bridgeObjectRetain(*(void *)(v0 + 664));
    Logger.logObject.getter(v13);
    os_log_type_t v14 = sub_1BCD0();
    if (sub_1BB80(v14))
    {
      uint64_t v15 = *(void *)(v0 + 688);
      uint64_t v16 = *(void *)(v0 + 664);
      uint64_t v17 = (uint8_t *)sub_1BA1C(12LL);
      *(_DWORD *)uint64_t v17 = 134217984;
      *(void *)(v0 + 352) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v16);
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "[ResumeTimer.HandleIntentStrategy.makeIntentHandledResponse] Using multi-timer snippet model for %ld running timers.",  v17,  0xCu);
      sub_1B904((uint64_t)v17);
    }

    else
    {

      uint64_t v18 = sub_2B7C4();
    }

    uint64_t v36 = (_OWORD *)(v0 + 176);
    uint64_t v37 = *(void *)(v0 + 624);
    uint64_t v38 = *(void *)(v0 + 616);
    uint64_t v39 = *(void *)(v0 + 416);
    static DialogPhase.completion.getter(v18);
    sub_64564(v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16));
    sub_64648();
    uint64_t v40 = sub_2F784();
    int v41 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v39, 1LL, v40);
    uint64_t v42 = *(void *)(v0 + 416);
    if (v41 == 1)
    {
      sub_8CC4(*(void *)(v0 + 416), &qword_FC418);
      *uint64_t v36 = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
      *(void *)(v0 + 208) = 0LL;
    }

    else
    {
      *(void *)(v0 + 200) = v40;
      *(void *)(v0 + 208) = sub_F0D4();
      uint64_t v43 = sub_DB90((void *)(v0 + 176));
      sub_6400C(v42, (uint64_t)v43, type metadata accessor for SiriTimePluginModel);
    }

    sub_644C4();
    if (v40 <= 1) {
      unint64_t v44 = 0xD000000000000019LL;
    }
    else {
      unint64_t v44 = 0xD000000000000018LL;
    }
    if (v40 <= 1) {
      unint64_t v45 = 0x80000000000C8120LL;
    }
    else {
      unint64_t v45 = 0x80000000000C86B0LL;
    }
    uint64_t v46 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    *(void *)(v0 + 792) = v46;
    *uint64_t v46 = v0;
    v46[1] = sub_61460;
    uint64_t v47 = *(void *)(v0 + 624);
    uint64_t v48 = *(void *)(v0 + 560);
    uint64_t v49 = *(void *)(v0 + 528);
    uint64_t v50 = *(void *)(v0 + 360);
    unint64_t v52 = v45;
    return DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)( v50,  v48,  v47,  v36,  v49,  0LL,  0LL,  v44);
  }

uint64_t sub_612EC()
{
  uint64_t v1 = v0[77];
  uint64_t v2 = v0[68];
  sub_2B714(v0[96], v3);
  sub_2B7C4();
  os_log_type_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  v0[97] = v4;
  sub_2B5AC(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  v0[98] = v5;
  uint64_t v6 = sub_2B5A0(v5);
  sub_64464(v6, &qword_FC2B8);
  sub_1B9B8();
  return sub_2B8E8(v7, v8, v9);
}

#error "61418: call analysis failed (funcsize=49)"
uint64_t sub_61460( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sub_2B500();
  a19 = v22;
  a20 = v23;
  a18 = v20;
  sub_645C8();
  uint64_t v24 = v21[77];
  uint64_t v25 = v21[70];
  uint64_t v26 = v21[68];
  uint64_t v27 = v21[67];
  else {
    BOOL v28 = 0x80000000000C86B0LL;
  }
  sub_2B714(v21[99], &a18);
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  v21[100] = v29;
  sub_2B73C(v29);
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8);
  v21[101] = v30;
  uint64_t v31 = v30(v25, v27);
  sub_64464(v31, &qword_FC2B8);
  sub_1B9B8();
  return sub_2B8E8(v32, v33, v34);
}

#error "615C4: call analysis failed (funcsize=49)"
uint64_t sub_6160C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sub_1BBCC();
  v0[32] = v2;
  v0[33] = v3;
  v0[34] = v1;
  sub_1BC0C(v4);
  v0[103] = v1;
  swift_task_dealloc();
  sub_64640();
  if (v1) {
    sub_18034();
  }
  sub_1B9B8();
  return sub_2F414(v5, v6, v7);
}

uint64_t sub_616BC()
{
  uint64_t v1 = (void *)sub_5A248();
  uint64_t v2 = sub_64544(v1);
  sub_64434((uint64_t)v2, (uint64_t)sub_2B2DC);
  sub_2B7C4();
  sub_1BA38();
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generatePatternOutput(manifest:measure:)[1]);
  *(void *)(v0 + 904) = v3;
  sub_643E0(v3);
  return sub_64234();
}

uint64_t sub_61758()
{
  v0[35] = v2;
  v0[36] = v3;
  v0[37] = v1;
  sub_1BC0C(v4);
  v0[105] = v1;
  swift_task_dealloc();
  if (v1) {
    swift_bridgeObjectRelease(v0[92]);
  }
  sub_1B9B8();
  return sub_2F414(v5, v6, v7);
}

uint64_t sub_61800()
{
  uint64_t v1 = (void *)sub_5A248();
  uint64_t v2 = sub_64544(v1);
  sub_64434((uint64_t)v2, (uint64_t)sub_2B2DC);
  sub_2B7C4();
  sub_1BA38();
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generatePatternOutput(manifest:measure:)[1]);
  *(void *)(v0 + 904) = v3;
  sub_643E0(v3);
  return sub_64234();
}

uint64_t sub_6189C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v8 = v3;
  v3[38] = v2;
  v3[39] = a1;
  v3[40] = v1;
  sub_1BC0C(&v8);
  v3[111] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease(v3[85]);
  if (v1) {
    sub_18034();
  }
  sub_1B86C();
  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_61968()
{
  sub_2F5E0();
  sub_641D4();
  uint64_t v1 = (void *)sub_5A248();
  uint64_t v2 = sub_64544(v1);
  sub_64434((uint64_t)v2, (uint64_t)sub_2B2DC);
  sub_2B7C4();
  sub_1BA38();
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generatePatternOutput(manifest:measure:)[1]);
  *(void *)(v0 + 904) = v3;
  sub_643E0(v3);
  return sub_64234();
}

uint64_t sub_61A18()
{
  v0[114] = v1;
  swift_task_dealloc();
  (*(void (**)(void, void))(v0[48] + 8LL))(v0[49], v0[47]);
  sub_1B9B8();
  return sub_2F414(v3, v4, v5);
}

#error "61B5C: call analysis failed (funcsize=57)"
#error "61BFC: call analysis failed (funcsize=50)"
#error "61CE4: call analysis failed (funcsize=46)"
#error "61D9C: call analysis failed (funcsize=46)"
#error "61E6C: call analysis failed (funcsize=64)"
#error "61F2C: call analysis failed (funcsize=48)"
uint64_t sub_61FA0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v2 = sub_67C4(&qword_FBD98);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = Data.base64EncodedString(options:)(0LL);
  SpeakableString.init(serializedValue:)(v5._countAndFlagsBits, v5._object);
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v4, 0LL, 1LL, v6);
  uint64_t v7 = type metadata accessor for ResumeTimerHandledOnWatchParameters(0LL);
  sub_1B4F4((uint64_t)v4, (uint64_t)a1 + *(int *)(v7 + 24));
  type metadata accessor for SirikitApp(0LL);
  uint64_t v8 = sub_67C4(&qword_FDF08);
  uint64_t v9 = IntentResolutionRecord.app.getter(v8);
  uint64_t v10 = SirikitApp.init(app:)(v9);
  unint64_t result = swift_release();
  *a1 = v10;
  return result;
}

uint64_t sub_62094(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_FDF1C);
  *(void *)(v2 + 32) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_620F4;
  return sub_5F9B8(a1, a2);
}

uint64_t sub_620F4()
{
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (!v0) {
    return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_62140()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = sub_67C4(&qword_FBF48);
  uint64_t v3 = static BarbaraWalters.logAndReturnError<A>(context:_:)( 0xD000000000000065LL,  0x80000000000C8640LL,  v0 + 24,  v2,  &protocol self-conformance witness table for Error);
  swift_willThrow(v3, v4, v5, v6, v7, v8, v9, v10);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_621D0(uint64_t a1, uint64_t a2)
{
  v2[42] = a1;
  v2[43] = a2;
  uint64_t v3 = sub_2F784();
  v2[44] = v3;
  v2[45] = sub_1B6C8(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v2[46] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[47] = v5;
  v2[48] = sub_1B6C8(v5);
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  v2[49] = sub_1B6C8(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v2[50] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[51] = v8;
  v2[52] = sub_1B6C8(v8);
  uint64_t v9 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v2[53] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[54] = v10;
  v2[55] = sub_1B6C8(v10);
  uint64_t v11 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[56] = v11;
  v2[57] = *(void *)(v11 - 8);
  v2[58] = sub_1B970();
  v2[59] = sub_1B970();
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  v2[60] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[61] = v13;
  v2[62] = sub_1B6C8(v13);
  uint64_t v14 = type metadata accessor for DialogPhase(0LL);
  v2[63] = v14;
  v2[64] = *(void *)(v14 - 8);
  v2[65] = sub_1B970();
  v2[66] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_622F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t *a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  a22 = v24;
  if (qword_FB208 != -1) {
    swift_once(&qword_FB208, sub_5F8BC);
  }
  uint64_t v27 = sub_5474(v24[50], (uint64_t)qword_FDEA0);
  v24[67] = v27;
  uint64_t v123 = v27;
  BOOL v28 = (os_log_s *)v27;
  Logger.logObject.getter(v27);
  os_log_type_t v29 = sub_1BCD0();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)sub_1B9DC();
    *(_WORD *)uint64_t v30 = 0;
    sub_1BBEC(&dword_0, v28, v29, "ResumeTimer.HandleIntentStrategy.makeFailureHandlingIntentResponse() called", v30);
    sub_1B904((uint64_t)v30);
  }

  uint64_t v31 = v24[59];
  uint64_t v32 = v24[55];
  uint64_t v126 = v24;
  uint64_t v33 = v24[54];
  uint64_t v34 = v24[53];
  uint64_t v35 = v24[52];
  uint64_t v36 = v24[51];
  uint64_t v37 = v126[50];
  uint64_t v38 = v126[49];
  uint64_t v121 = v31;
  uint64_t v122 = v126[43];

  uint64_t v40 = static DialogPhase.completion.getter(v39);
  NLContextUpdate.init()(v40);
  uint64_t v41 = enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 104);
  uint64_t v43 = v126;
  v126[68] = (uint64_t)v42;
  v42(v32, v41, v34);
  unint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  v126[69] = (uint64_t)v44;
  v44(v35, v123, v37);
  uint64_t v45 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v32, v35, v45);
  type metadata accessor for TimerBaseCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  v126[70] = CATWrapper.__allocating_init(options:globals:)(v38, 0LL);
  uint64_t v46 = sub_67C4(&qword_FDF08);
  uint64_t v47 = (void *)IntentResolutionRecord.intentResponse.getter(v46);
  uint64_t v48 = dispatch thunk of ResumeTimerIntentResponse.code.getter();

  switch(v48)
  {
    case 'd':
      uint64_t v50 = (void *)swift_task_alloc(dword_100574);
      v126[74] = (uint64_t)v50;
      sub_6459C(v50, (uint64_t)sub_62BC0);
      sub_20788();
      return sub_ACD60();
    case 'e':
      uint64_t v64 = v126[43];
      uint64_t v65 = swift_task_alloc(32LL);
      v126[71] = v65;
      *(void *)(v65 + 16) = v64;
      uint64_t v66 = (uint64_t **)swift_task_alloc(dword_10056C);
      v126[72] = (uint64_t)v66;
      *uint64_t v66 = v126;
      v66[1] = (uint64_t *)sub_62B1C;
      sub_2B9E8((uint64_t)sub_64004);
      sub_20788();
      return sub_ACBBC(v67, v68);
    case 'f':
      uint64_t v69 = (void *)IntentResolutionRecord.intentResponse.getter(v46);
      uint64_t v70 = sub_63F64(v69);
      if (!v70) {
        goto LABEL_30;
      }
      uint64_t v71 = v70;
      if ((unint64_t)v70 >> 62)
      {
        if (v70 >= 0) {
          v70 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        if (_CocoaArrayWrapper.endIndex.getter(v70)) {
          goto LABEL_16;
        }
      }

      else if (*(void *)((char *)&dword_10 + (v70 & 0xFFFFFFFFFFFFFF8LL)))
      {
LABEL_16:
        sub_8EEB4(0LL, (v71 & 0xC000000000000001LL) == 0, v71);
        if ((v71 & 0xC000000000000001LL) != 0) {
          id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v71);
        }
        else {
          id v72 = *(id *)(v71 + 32);
        }
        id v73 = v72;
        sub_18034();
        id v74 = v73;
        sub_D378();
        uint64_t v76 = v75;

        goto LABEL_31;
      }

      uint64_t v70 = sub_18034();
LABEL_30:
      uint64_t v76 = 0LL;
      id v73 = 0LL;
LABEL_31:
      v126[79] = (uint64_t)v73;
      v126[78] = v76;
      uint64_t v88 = v126[47];
      uint64_t v87 = (os_log_s *)v126[48];
      uint64_t v89 = v126[46];
      static SiriTimeFeatureFlagsImpl.instance.getter(v70);
      Swift::Bool v90 = SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
      sub_64444((uint64_t)v87, *(uint64_t (**)(uint64_t, uint64_t))(v88 + 8));
      if (v90 && v73)
      {
        id v91 = v73;
        sub_64654();
        os_log_type_t v92 = sub_1BCD0();
        if (sub_2BDE0(v92))
        {
          uint64_t v93 = (uint8_t *)sub_1B9DC();
          *(_WORD *)uint64_t v93 = 0;
          sub_1BBEC( &dword_0,  v87,  (os_log_type_t)v73,  "[ResumeTimer.HandleIntentStrategy.makeFailureHandlingIntentResponse] Using multi-timer RF 2.0 path for failu reTimerAlreadyRunning",  v93);
          sub_1B904((uint64_t)v93);
        }

        id v94 = v91;
        sub_64654();
        os_log_type_t v95 = sub_1BCD0();
        if (sub_2BDE0(v95))
        {
          uint64_t v96 = (uint8_t *)sub_1BA1C(12LL);
          uint64_t v97 = sub_1BA1C(32LL);
          a13 = v97;
          *(_DWORD *)uint64_t v96 = 136315138;
          id v98 = v94;
          id v99 = [v98 description];
          uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
          unint64_t v102 = v101;

          uint64_t v43 = v126;
          v126[41] = sub_683C(v100, v102, &a13);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v126 + 41, v126 + 42, v96 + 4, v96 + 12);
          swift_bridgeObjectRelease(v102);

          _os_log_impl( &dword_0,  v87,  (os_log_type_t)v73,  "[ResumeTimer.HandleIntentStrategy.makeFailureHandlingIntentResponse] Resumed timer: %s",  v96,  0xCu);
          swift_arrayDestroy(v97, 1LL);
          sub_1B904(v97);
          sub_1B904((uint64_t)v96);
        }

        else
        {
        }

        type metadata accessor for TimerSessionManager(0LL);
        static TimerSessionManager.shared.getter(v43 + 7);
        sub_8CFC(v43 + 7, v43[10]);
        sub_58E1C(v94);
        v43[80] = v115;
        uint64_t v116 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SessionManaging.sessionIDString(for:)[1]);
        v43[81] = (uint64_t)v116;
        sub_6459C(v116, (uint64_t)sub_62CF8);
        sub_20788();
        return dispatch thunk of SessionManaging.sessionIDString(for:)(v117, v118, v119, v120);
      }

      else
      {
        sub_64654();
        os_log_type_t v103 = sub_1BCD0();
        if (sub_1BB80(v103))
        {
          uint64_t v104 = (uint8_t *)sub_1B9DC();
          *(_WORD *)uint64_t v104 = 0;
          sub_1BBEC( &dword_0,  v87,  (os_log_type_t)v89,  "[ResumeTimer.HandleIntentStrategy.makeFailureHandlingIntentResponse] Using RF 1.0 pattern",  v104);
          sub_1B904((uint64_t)v104);
        }

        if (qword_FB3E8 != -1) {
          swift_once(&qword_FB3E8, sub_B5C9C);
        }
        uint64_t v105 = unk_FF254;
        uint64_t v125 = (char *)&dword_FF250 + dword_FF250;
        swift_retain();
        uint64_t v106 = (uint64_t **)swift_task_alloc(v105);
        v126[91] = (uint64_t)v106;
        *uint64_t v106 = v126;
        v106[1] = (uint64_t *)sub_632E8;
        sub_20788();
        return v109(v107, v108, v109, v110, v111, v112, v113, v114, v121, v122, v125, v126, a13, a14, a15, a16);
      }

    case 'g':
      if (qword_FB3E8 != -1) {
        swift_once(&qword_FB3E8, sub_B5C9C);
      }
      uint64_t v124 = (char *)&dword_FF248 + dword_FF248;
      uint64_t v77 = (uint64_t **)swift_task_alloc(unk_FF24C);
      v126[76] = (uint64_t)v77;
      *uint64_t v77 = v126;
      v77[1] = (uint64_t *)sub_62C5C;
      sub_20788();
      return v79(v78, v79, v80, v81, v82, v83, v84, v85, v121, v122, v124, v126, a13, a14, a15, a16);
    default:
      uint64_t v52 = v126[66];
      uint64_t v53 = v126[65];
      uint64_t v54 = v126[63];
      uint64_t v55 = v126[64];
      static DialogPhase.error.getter(v49);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v52, v54);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v52, v53, v54);
      uint64_t v56 = (void *)IntentResolutionRecord.intent.getter(v46);
      id v57 = [v56 targetTimer];

      id v58 = [v57 shouldMatchAny];
      sub_1E6A8();
      v59.super.super.Class isa = NSNumber.init(integerLiteral:)(1LL).super.super.isa;
      Class isa = v59.super.super.isa;
      if (v58)
      {
        id v61 = v58;
        char v62 = static NSObject.== infix(_:_:)(v61, isa);

        if ((v62 & 1) != 0)
        {
          if (qword_FB3E8 != -1) {
            swift_once(&qword_FB3E8, sub_B5C9C);
          }
          uint64_t v63 = (void *)swift_task_alloc(dword_FF134);
          v126[93] = (uint64_t)v63;
          sub_6459C(v63, (uint64_t)sub_63394);
          sub_20788();
          return sub_7CD38();
        }
      }

      else
      {
      }

      if (qword_FB3E8 != -1) {
        swift_once(&qword_FB3E8, sub_B5C9C);
      }
      uint64_t v86 = (void *)swift_task_alloc(dword_FF13C);
      v126[95] = (uint64_t)v86;
      sub_6459C(v86, (uint64_t)sub_63430);
      sub_20788();
      return sub_7CD98();
  }

uint64_t sub_62B1C()
{
  v0[22] = v2;
  v0[23] = v3;
  v0[24] = v1;
  sub_1BC0C(v4);
  v0[73] = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B934();
}

uint64_t sub_62B78()
{
  uint64_t v1 = *(void **)(v0 + 184);
  *(void *)(v0 + 776) = v1;
  id v2 = v1;
  uint64_t v3 = sub_64364();
  uint64_t v4 = (void *)sub_64480(v3);
  sub_64178(v4);
  return sub_5D2FC();
}

uint64_t sub_62BC0()
{
  v3[25] = v1;
  v3[26] = v2;
  v3[27] = v0;
  sub_1BD64();
  *(void *)(v4 + 600) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_62C14()
{
  uint64_t v1 = *(void **)(v0 + 208);
  *(void *)(v0 + 776) = v1;
  id v2 = v1;
  uint64_t v3 = sub_64364();
  uint64_t v4 = (void *)sub_64480(v3);
  sub_64178(v4);
  return sub_5D2FC();
}

uint64_t sub_62C5C()
{
  v3[28] = v1;
  v3[29] = v2;
  v3[30] = v0;
  sub_1BD64();
  *(void *)(v4 + 616) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_62CB0()
{
  uint64_t v1 = *(void **)(v0 + 232);
  *(void *)(v0 + 776) = v1;
  id v2 = v1;
  uint64_t v3 = sub_64364();
  uint64_t v4 = (void *)sub_64480(v3);
  sub_64178(v4);
  return sub_5D2FC();
}

uint64_t sub_62CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 648);
  *(void *)(v3 + 656) = a1;
  *(void *)(v3 + 664) = a2;
  sub_2B988(v4);
  sub_18034();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_62D50()
{
  uint64_t v14 = (void (*)(uint64_t, void, uint64_t))v0[68];
  uint64_t v15 = v0[67];
  uint64_t v16 = (void (*)(uint64_t, uint64_t, uint64_t))v0[69];
  uint64_t v1 = v0[55];
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[53];
  uint64_t v4 = v0[50];
  uint64_t v6 = v0[44];
  uint64_t v5 = (uint64_t *)v0[45];
  _s20HandleIntentStrategyVwxx_0(v0 + 7);
  uint64_t v7 = sub_67C4(&qword_FC2C0);
  uint64_t v8 = type metadata accessor for SiriTimerSnippetModel(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_C2640;
  sub_EE84();
  *uint64_t v5 = v9;
  swift_storeEnumTagMultiPayload(v5, v6, 0LL);
  v14(v1, enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:), v3);
  v16(v2, v15, v4);
  uint64_t v10 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v1, v2, v10);
  if (qword_FB3D8 != -1) {
    swift_once(&qword_FB3D8, sub_B5C64);
  }
  uint64_t v11 = (void *)swift_task_alloc(dword_FC444);
  v0[84] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_62EB4;
  sub_2B9E8(v0[78]);
  sub_20788();
  return sub_2F824(v12);
}

uint64_t sub_62EB4()
{
  uint64_t v2 = v0[84];
  v0[85] = v3;
  v0[86] = v1;
  sub_2B988(v2);
  if (v1) {
    swift_bridgeObjectRelease(v0[83]);
  }
  sub_1B9B8();
  return sub_1B934();
}

uint64_t sub_62F14(uint64_t a1)
{
  uint64_t v3 = (void *)v2[67];
  if (v2[83])
  {
    uint64_t v4 = sub_33E50();
    Logger.logObject.getter(v4);
    os_log_type_t v5 = sub_1BCD0();
    if (sub_2BDE0(v5))
    {
      uint64_t v6 = (_DWORD *)sub_1BA1C(12LL);
      uint64_t v7 = sub_1BA1C(32LL);
      uint64_t v33 = v7;
      _DWORD *v6 = 136315138;
      uint64_t v8 = sub_33E50();
      uint64_t v10 = sub_6465C(v8, v9, &v33);
      v2[40] = v10;
      sub_64534(v10, (uint64_t)(v2 + 41));
      sub_645E8();
      sub_6446C( &dword_0,  v11,  v12,  "[ResumeTimer.HandleIntentStrategy.makeFailureHandlingIntentResponse] We have a live activity: %s");
      sub_644E4();
      sub_1B904(v7);
      sub_1B904((uint64_t)v6);
    }

    else
    {
      sub_4C700();
    }

    uint64_t v28 = v2[44];
    uint64_t v27 = v2[45];
    static DialogPhase.completion.getter(v29);
    v2[20] = v28;
    v2[21] = sub_F0D4();
    uint64_t v30 = sub_DB90(v2 + 17);
    sub_F87C(v27, (uint64_t)v30);
    uint64_t v31 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    v2[87] = v31;
    uint64_t v22 = sub_64410(v31);
    uint64_t v26 = v2 + 17;
  }

  else
  {
    Logger.logObject.getter(a1);
    os_log_type_t v13 = sub_1BCD0();
    if (sub_1BB80(v13))
    {
      uint64_t v14 = (_WORD *)sub_1B9DC();
      sub_2BA04(v14);
      sub_1BAA8( &dword_0,  v15,  v16,  "[ResumeTimer.HandleIntentStrategy.makeFailureHandlingIntentResponse] Using multi-timer snippet model for single running timer instead.");
      sub_1B904(v1);
    }

    uint64_t v18 = v2[44];
    uint64_t v17 = v2[45];

    static DialogPhase.completion.getter(v19);
    v2[15] = v18;
    v2[16] = sub_F0D4();
    uint64_t v20 = sub_DB90(v2 + 12);
    sub_F87C(v17, (uint64_t)v20);
    uint64_t v21 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    v2[89] = v21;
    uint64_t v22 = sub_64410(v21);
    uint64_t v26 = v2 + 12;
  }

  return DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)( v22,  v23,  v24,  v26,  v25,  0LL,  0LL,  0LL);
}

uint64_t sub_63108()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v6 = v1;
  uint64_t v2 = v1[64];
  sub_2B714(v1[87], &v6);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  v1[88] = v3;
  uint64_t v4 = sub_2B73C(v3);
  sub_64464(v4, &qword_FC2B8);
  sub_1B9B8();
  return sub_1BB0C();
}

#error "631B8: call analysis failed (funcsize=33)"
uint64_t sub_631F8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  void *v6;
  uint64_t v1 = (void *)*v0;
  uint64_t v6 = v1;
  uint64_t v2 = v1[64];
  sub_2B714(v1[89], &v6);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  v1[90] = v3;
  uint64_t v4 = sub_2B73C(v3);
  sub_64464(v4, &qword_FC2B8);
  sub_1B9B8();
  return sub_1BB0C();
}

#error "632A8: call analysis failed (funcsize=33)"
uint64_t sub_632E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  sub_1BBF4();
  v3[31] = v1;
  v3[32] = v2;
  v3[33] = v0;
  sub_1BD64();
  *(void *)(v4 + 736) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_6333C()
{
  uint64_t v1 = (void *)v0[79];
  swift_release();

  uint64_t v2 = (void *)v0[32];
  v0[97] = v2;
  id v3 = v2;
  uint64_t v4 = sub_64364();
  os_log_type_t v5 = (void *)sub_64480(v4);
  sub_64178(v5);
  return sub_5D2FC();
}

uint64_t sub_63394()
{
  v3[34] = v1;
  v3[35] = v2;
  v3[36] = v0;
  sub_1BD64();
  *(void *)(v4 + 752) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_633E8()
{
  uint64_t v1 = *(void **)(v0 + 280);
  *(void *)(v0 + 776) = v1;
  id v2 = v1;
  uint64_t v3 = sub_64364();
  uint64_t v4 = (void *)sub_64480(v3);
  sub_64178(v4);
  return sub_5D2FC();
}

uint64_t sub_63430()
{
  v3[37] = v1;
  v3[38] = v2;
  v3[39] = v0;
  sub_1BD64();
  *(void *)(v4 + 768) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_63484()
{
  uint64_t v1 = *(void **)(v0 + 304);
  *(void *)(v0 + 776) = v1;
  id v2 = v1;
  uint64_t v3 = sub_64364();
  uint64_t v4 = (void *)sub_64480(v3);
  sub_64178(v4);
  return sub_5D2FC();
}

uint64_t sub_634CC()
{
  *(void *)(v0 + 792) = v1;
  swift_task_dealloc();
  if (!v1) {

  }
  sub_1B9B8();
  return sub_1B934();
}

uint64_t sub_63520()
{
  uint64_t v1 = *(void **)(v0 + 776);
  uint64_t v6 = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 512);
  uint64_t v3 = *(void *)(v0 + 488);
  uint64_t v4 = *(void *)(v0 + 456);
  swift_release();
  sub_2B5A0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));

  sub_2B5AC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_64444(v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_640B0();
  sub_1BABC();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  sub_1B838();
  sub_1BA8C();
  sub_1BA60();
  sub_1BAD0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "63668: call analysis failed (funcsize=51)"
#error "63740: call analysis failed (funcsize=51)"
#error "63818: call analysis failed (funcsize=51)"
#error "63930: call analysis failed (funcsize=67)"
#error "63A20: call analysis failed (funcsize=57)"
#error "63AF8: call analysis failed (funcsize=51)"
#error "63BD0: call analysis failed (funcsize=51)"
uint64_t sub_63C0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  sub_1B918();
  uint64_t v1 = *(uint64_t **)(v0 + 560);

  sub_1BC50();
  uint64_t v21 = *(void *)(v0 + 528);
  uint64_t v22 = *(void **)(v0 + 776);
  uint64_t v19 = *(void *)(v0 + 512);
  uint64_t v20 = *(void *)(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 488);
  uint64_t v17 = *(void *)(v0 + 480);
  uint64_t v18 = *(void *)(v0 + 496);
  uint64_t v3 = type metadata accessor for ABCReport(0LL);
  sub_64258(v3, (uint64_t)&protocol witness table for ABCReport);
  *uint64_t v1 = sub_64264();
  uint64_t v4 = sub_64400();
  os_log_type_t v5 = sub_64160(v4);
  sub_641C0(v5, enum case for ABCReport.dialog(_:));
  sub_643F8();
  sub_643D8();
  sub_182D4();
  sub_64320((unint64_t *)&qword_FBDA0, v6, (uint64_t)&unk_C4408);
  uint64_t v16 = sub_6419C(v7);
  sub_64328(v16, v8, v9, v10, v11, v12, v13, v14);
  sub_64408();
  sub_641B0();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v18, v17);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);

  sub_640B0();
  sub_1BABC();
  sub_1B86C();
  sub_1BA24();
  sub_1BA14();
  sub_1BA38();
  sub_1B838();
  sub_1BA8C();
  sub_1BA60();
  sub_1BAD0();
  return sub_1B6AC(*(uint64_t (**)(void))(v0 + 8));
}

void sub_63D44(uint64_t a1)
{
  uint64_t v2 = sub_67C4(&qword_FDF08);
  os_log_type_t v5 = (void *)IntentResolutionRecord.intent.getter(v2);
  uint64_t v3 = type metadata accessor for ResumeTimerIntent(0LL);
  double v4 = IntentTargetable.knownHomePodCount.getter(v3, &protocol witness table for ResumeTimerIntent);

  *(double *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t sub_63DBC(uint64_t a1, uint64_t a2)
{
  os_log_type_t v5 = (void *)swift_task_alloc(dword_FDF14);
  *(void *)(v2 + 16) = v5;
  *os_log_type_t v5 = v2;
  v5[1] = sub_10E90;
  return sub_62094(a1, a2);
}

uint64_t sub_63E1C(uint64_t a1, uint64_t a2)
{
  os_log_type_t v5 = (void *)swift_task_alloc(dword_FDF04);
  *(void *)(v2 + 16) = v5;
  *os_log_type_t v5 = v2;
  v5[1] = sub_20504;
  return sub_621D0(a1, a2);
}

uint64_t sub_63E74(uint64_t a1, uint64_t a2)
{
  os_log_type_t v5 = (void *)swift_task_alloc(dword_FDF24);
  *(void *)(v2 + 16) = v5;
  *os_log_type_t v5 = v2;
  v5[1] = sub_C5FC;
  return sub_5F904(a1, a2);
}

unint64_t sub_63ECC()
{
  unint64_t result = qword_FDEC0[0];
  if (!qword_FDEC0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_C37B8, &_s20HandleIntentStrategyVN_2);
    atomic_store(result, qword_FDEC0);
  }

  return result;
}

uint64_t sub_63F08(void *a1)
{
  id v1 = [a1 resumedTimers];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for SiriTimer(0LL);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_63F64(void *a1)
{
  id v2 = [a1 resumedTimers];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = type metadata accessor for SiriTimer(0LL);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_63FC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SiriTimePluginModel(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_64004(uint64_t a1)
{
}

void sub_6400C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  sub_17DD4();
}

uint64_t sub_6404C(uint64_t *a1)
{
  return sub_61FA0(a1);
}

uint64_t sub_64058()
{
  return swift_task_dealloc(*(void *)(v0 + 640));
}

uint64_t sub_640B0()
{
  return swift_task_dealloc(*(void *)(v0 + 528));
}

uint64_t sub_640D4()
{
  return type metadata accessor for ABCReport(0LL);
}

uint64_t sub_64100@<X0>(uint64_t (*a1)(void, void)@<X8>)
{
  return a1(*(void *)(v1 + 640), *(void *)(v1 + 608));
}

uint64_t sub_64160(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v2, v1, a1);
}

uint64_t sub_64178(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 336);
}

uint64_t sub_6419C(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

uint64_t sub_641B0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_641C0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(v2, a2, v3);
}

uint64_t sub_641D4()
{
  uint64_t v2 = v1[72];
  uint64_t v3 = v1[69];
  uint64_t v4 = v1[68];
  uint64_t v5 = v1[67];
  v1[112] = v0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
}

uint64_t sub_64204( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a12 + 8))(a14, a13);
}

  ;
}

uint64_t sub_64234()
{
  return ((uint64_t (*)(void))PatternExecutionResult.generatePatternOutput(manifest:measure:))();
}

uint64_t sub_6424C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

void *sub_64258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = a2;
  return sub_DB90(v2);
}

uint64_t sub_64264()
{
  return _convertErrorToNSError(_:)(v0);
}

void sub_64270()
{
}

void sub_642AC()
{
}

uint64_t sub_642E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a11, a10);
}

void sub_642F0()
{
  uint64_t v6 = *(void *)(v1 + 408);
  *(void *)(v3 + 16) = v2;
  sub_6400C( v6,  v3 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
  + *(void *)(v4 + 72) * v5,
    v0);
}

void sub_64320(unint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_64328( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

  ;
}

uint64_t sub_64364()
{
  return swift_task_alloc(v0);
}

uint64_t sub_64370()
{
  return *(void *)(v0 + 640);
}

void sub_643A4()
{
}

uint64_t sub_643CC()
{
  return swift_release(*(void *)(v0 + 560));
}

uint64_t sub_643D8()
{
  return _s20HandleIntentStrategyVwxx_0(v0);
}

uint64_t sub_643E0(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 360);
}

uint64_t sub_643F8()
{
  return static BarbaraWalters.stopThePresses(for:)(v0);
}

uint64_t sub_64400()
{
  return type metadata accessor for DialogLayerErrorSubType(0LL);
}

uint64_t sub_64408()
{
  return swift_errorRelease(v0);
}

uint64_t sub_64410(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  uint64_t result = *(void *)(v2 + 336);
  *(void *)(v3 + 16) = 0LL;
  return result;
}

uint64_t sub_64434(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, v3);
}

uint64_t sub_64444@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_6444C()
{
}

void sub_64464(uint64_t a1, uint64_t *a2)
{
}

void sub_6446C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_64480(uint64_t result)
{
  *(void *)(v1 + 784) = result;
  return result;
}

  ;
}

  ;
}

uint64_t sub_644C4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 664));
}

uint64_t sub_644D0(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(v1, a1, 0LL);
}

uint64_t sub_644E4()
{
  return swift_arrayDestroy(v0, 1LL);
}

void *sub_644F4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

void *sub_64504@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_64514()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_64524()
{
  return static SiriTimeFeatureFlagsImpl.instance.getter();
}

uint64_t sub_64534(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, a2, v4, v3);
}

void *sub_64544(void *result)
{
  result[2] = v3;
  result[3] = v2;
  result[4] = v1;
  return result;
}

id sub_64554()
{
  return sub_4C75C(*(void *)(v0 + 664), 0xDu);
}

uint64_t sub_64564@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_64570( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a16, a15);
}

uint64_t sub_6457C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a10, a9);
}

size_t sub_64588(size_t a1)
{
  return sub_2AE2C(a1, v1, 1);
}

uint64_t sub_64594(uint64_t a1)
{
  return dispatch thunk of DeviceState.isWatch.getter(a1, v1);
}

void *sub_6459C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

void *sub_645A8(void *result)
{
  *(void *)(v3 + 872) = result;
  result[2] = v1;
  result[3] = v2;
  result[4] = v4;
  return result;
}

void sub_645BC()
{
}

void sub_645C8()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_645DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t))
{
  return a13(a12, a11);
}

uint64_t sub_645E8()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

size_t sub_645F4(uint64_t a1, int64_t a2)
{
  return sub_2AE2C(0LL, a2, 0);
}

uint64_t sub_64600()
{
  return v0(v1, v2);
}

uint64_t sub_6460C()
{
  return v0;
}

uint64_t sub_64620()
{
  return v2(v1, v0);
}

uint64_t sub_6462C()
{
  return v0;
}

uint64_t sub_64640()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 680));
}

uint64_t sub_64648()
{
  return sub_2F27C(v0, v1);
}

uint64_t sub_64654()
{
  return Logger.logObject.getter();
}

uint64_t sub_6465C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_683C(v4, v3, a3);
}

id sub_64668(id a1, SEL a2, uint64_t a3)
{
  return objc_msgSend(a1, a2, a3, 1, v3);
}

uint64_t type metadata accessor for TimeSuggestionsCATsSimple(uint64_t a1)
{
  uint64_t result = qword_FDF28;
  if (!qword_FDF28) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimeSuggestionsCATsSimple);
  }
  return result;
}

uint64_t sub_646AC(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100F30);
}

uint64_t sub_646E8()
{
  return type metadata accessor for TimeSuggestionsCATsSimple(0LL);
}

uint64_t type metadata accessor for ResumeTimerCATs_Async(uint64_t a1)
{
  uint64_t result = qword_FDF78;
  if (!qword_FDF78) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ResumeTimerCATs_Async);
  }
  return result;
}

uint64_t sub_64728(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100F40);
}

uint64_t sub_64764(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  return swift_task_switch(sub_64780, 0LL, 0LL);
}

uint64_t sub_64780()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = swift_allocObject(v2, 80LL, 7LL);
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C2640;
  strcpy((char *)(v3 + 32), "speakableTimer");
  *(_BYTE *)(v3 + 4static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = -18;
  uint64_t v4 = 0LL;
  if (v1)
  {
    uint64_t v4 = type metadata accessor for TimerTimer(0LL);
  }

  else
  {
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 72) = v4;
  uint64_t v5 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:) + 1);
  swift_retain();
  os_log_type_t v6 = (void *)swift_task_alloc(v5);
  v0[6] = v6;
  void *v6 = v0;
  v6[1] = sub_1EAC0;
  return ((uint64_t (*)(void, unint64_t, unint64_t, uint64_t))v8)( v0[2],  0xD00000000000001ELL,  0x80000000000C8780LL,  v3);
}

uint64_t sub_64888(uint64_t a1)
{
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1E95C;
  return ((uint64_t (*)(uint64_t, unint64_t, unint64_t, void *))v5)( a1,  0xD000000000000024LL,  0x80000000000C8750LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_64910()
{
  return type metadata accessor for ResumeTimerCATs_Async(0LL);
}

uint64_t type metadata accessor for DeleteTimerCATs_Async(uint64_t a1)
{
  uint64_t result = qword_FDFD8;
  if (!qword_FDFD8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeleteTimerCATs_Async);
  }
  return result;
}

uint64_t sub_64950(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100F50);
}

uint64_t sub_6498C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  return swift_task_switch(sub_649A8, 0LL, 0LL);
}

uint64_t sub_649A8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = swift_allocObject(v2, 80LL, 7LL);
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C2640;
  strcpy((char *)(v3 + 32), "speakableTimer");
  *(_BYTE *)(v3 + 4static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = -18;
  uint64_t v4 = 0LL;
  if (v1)
  {
    uint64_t v4 = type metadata accessor for TimerTimer(0LL);
  }

  else
  {
    *(void *)(v3 + 56) = 0LL;
    *(void *)(v3 + 64) = 0LL;
  }

  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 72) = v4;
  uint64_t v5 = *((unsigned int *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:) + 1);
  swift_retain();
  os_log_type_t v6 = (void *)swift_task_alloc(v5);
  v0[6] = v6;
  void *v6 = v0;
  v6[1] = sub_1EAC0;
  return ((uint64_t (*)(void, unint64_t, unint64_t, uint64_t))v8)( v0[2],  0xD00000000000001ELL,  0x80000000000C8810LL,  v3);
}

uint64_t sub_64AB0(uint64_t a1)
{
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1E95C;
  return ((uint64_t (*)(uint64_t, unint64_t, unint64_t, void *))v5)( a1,  0xD000000000000024LL,  0x80000000000C87E0LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_64B38()
{
  return type metadata accessor for DeleteTimerCATs_Async(0LL);
}

uint64_t sub_64B40()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FE038);
  sub_5474(v0, (uint64_t)qword_FE038);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t type metadata accessor for CreateTimerCATsSimple(uint64_t a1)
{
  uint64_t result = qword_FE050;
  if (!qword_FE050) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CreateTimerCATsSimple);
  }
  return result;
}

uint64_t sub_64BC0(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100F60);
}

uint64_t sub_64BFC()
{
  return type metadata accessor for CreateTimerCATsSimple(0LL);
}

uint64_t sub_64C04()
{
  uint64_t result = v0;
  *(_DWORD *)(v0 + 19) = 0;
  *(_DWORD *)(v0 + 16) = 0;
  return result;
}

uint64_t sub_64C14()
{
  return swift_deallocClassInstance(v0, 23LL, 7LL);
}

unint64_t sub_64C24()
{
  return 0xD000000000000013LL;
}

uint64_t sub_64C40(_BYTE *a1)
{
  *(void *)(v1 + 16) = 0LL;
  *(_BYTE *)(v1 + 24) = a1[16];
  *(_BYTE *)(v1 + 25) = a1[17];
  *(_BYTE *)(v1 + 26) = a1[18];
  *(_BYTE *)(v1 + 2static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = a1[19];
  *(_BYTE *)(v1 + 28) = a1[20];
  *(_BYTE *)(v1 + 29) = a1[21];
  char v2 = a1[22];
  swift_release(a1);
  *(_BYTE *)(v1 + 30) = v2;
  return v1;
}

double sub_64C9C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5 = a1 == 0x6970756F72476F6ELL && a2 == 0xEA0000000000676ELL;
  if (v5 || (sub_658A4(0x6970756F72476F6ELL, 0xEA0000000000676ELL) & 1) != 0)
  {
    char v9 = v3[24];
LABEL_43:
    *(void *)(a3 + 24) = &type metadata for Bool;
    *(_BYTE *)a3 = v9;
    return result;
  }

  BOOL v10 = a1 == 0x6562614C656D6173LL && a2 == 0xE90000000000006CLL;
  if (v10 || (unsigned int v11 = sub_658C4(), (sub_658A4(v11 | 0x6562614C00000000LL, v12) & 1) != 0))
  {
    char v9 = v3[25];
    goto LABEL_43;
  }

  BOOL v13 = a1 == 0x6D6F6F52656D6173LL && a2 == 0xE800000000000000LL;
  if (v13 || (unsigned int v14 = sub_658C4(), (sub_658A4(v14 | 0x6D6F6F5200000000LL, 0xE800000000000000LL) & 1) != 0))
  {
    char v9 = v3[26];
    goto LABEL_43;
  }

  BOOL v15 = a1 == 0x69766544656D6173LL && a2 == 0xEA00000000006563LL;
  if (v15 || (unsigned int v16 = sub_658C4(), (sub_658A4(v16 | 0x6976654400000000LL, v17) & 1) != 0))
  {
    char v9 = v3[27];
    goto LABEL_43;
  }

  BOOL v18 = a1 == 0x696E6E75526C6C61LL && a2 == 0xEA0000000000676ELL;
  if (v18 || (sub_658A4(0x696E6E75526C6C61LL, 0xEA0000000000676ELL) & 1) != 0)
  {
    char v9 = v3[28];
    goto LABEL_43;
  }

  BOOL v19 = a1 == 0x65737561506C6C61LL && a2 == 0xE900000000000064LL;
  if (v19 || (sub_658A4(0x65737561506C6C61LL, 0xE900000000000064LL) & 1) != 0)
  {
    char v9 = v3[29];
    goto LABEL_43;
  }

  BOOL v20 = a1 == 0x61727544656D6173LL && a2 == 0xEC0000006E6F6974LL;
  if (v20 || (unsigned int v21 = sub_658C4(), (sub_658A4(v21 | 0x6172754400000000LL, 0xEC0000006E6F6974LL) & 1) != 0))
  {
    char v9 = v3[30];
    goto LABEL_43;
  }

  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

unint64_t sub_64ED0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_F3048, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_64F1C(char a1)
{
  return *(void *)&aNogroupisamela[8 * a1];
}

void sub_64F3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_64F48()
{
}

uint64_t sub_64F50(uint64_t a1)
{
  return sub_7E138(a1, *v1);
}

void sub_64F58(uint64_t a1)
{
}

unint64_t sub_64F60@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_64ED0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_64F8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_64F1C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_64FB4()
{
  return sub_64F1C(*v0);
}

uint64_t sub_64FBC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_64F18(a1);
  *a2 = result;
  return result;
}

void sub_64FE0(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_64FEC(uint64_t a1)
{
  unint64_t v2 = sub_65634();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_65014(uint64_t a1)
{
  unint64_t v2 = sub_65634();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_6503C()
{
  return swift_deallocClassInstance(v0, 31LL, 7LL);
}

uint64_t type metadata accessor for TimerTimerGrouping()
{
  return objc_opt_self(&OBJC_CLASS____TtC23TimerFlowDelegatePlugin18TimerTimerGrouping);
}

uint64_t sub_65080(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_67C4(&qword_FE3A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_8CFC(a1, v9);
  unint64_t v11 = sub_65634();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for TimerTimerGrouping.CodingKeys,  &type metadata for TimerTimerGrouping.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = v3[24];
  char v27 = 0;
  sub_65884(v12, (uint64_t)&v27);
  if (!v2)
  {
    uint64_t v13 = v3[25];
    char v26 = 1;
    sub_65884(v13, (uint64_t)&v26);
    uint64_t v14 = v3[26];
    char v25 = 2;
    sub_65884(v14, (uint64_t)&v25);
    uint64_t v15 = v3[27];
    char v24 = 3;
    sub_65884(v15, (uint64_t)&v24);
    uint64_t v16 = v3[28];
    char v23 = 4;
    sub_65884(v16, (uint64_t)&v23);
    uint64_t v17 = v3[29];
    char v22 = 5;
    sub_65884(v17, (uint64_t)&v22);
    uint64_t v18 = v3[30];
    char v21 = 6;
    sub_65884(v18, (uint64_t)&v21);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_65208(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, 31LL, 7LL);
  sub_65274(a1);
  return v3;
}

uint64_t type metadata accessor for TimerTimerGrouping.Builder()
{
  return objc_opt_self(&OBJC_CLASS____TtCC23TimerFlowDelegatePlugin18TimerTimerGrouping7Builder);
}

uint64_t sub_65274(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_67C4(&qword_FE390);
  __chkstk_darwin(v5);
  *(void *)(v1 + 16) = 0LL;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_8CFC(a1, v6);
  unint64_t v8 = sub_65634();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for TimerTimerGrouping.CodingKeys,  &type metadata for TimerTimerGrouping.CodingKeys,  v8,  v6,  v7);
  if (v2)
  {

    uint64_t v9 = type metadata accessor for TimerTimerGrouping();
    swift_deallocPartialClassInstance(v1, v9, 31LL, 7LL);
  }

  else
  {
    char v18 = 0;
    *(_BYTE *)(v1 + 24) = sub_65894((uint64_t)&v18) & 1;
    char v17 = 1;
    *(_BYTE *)(v1 + 25) = sub_65894((uint64_t)&v17) & 1;
    char v16 = 2;
    *(_BYTE *)(v1 + 26) = sub_65894((uint64_t)&v16) & 1;
    char v15 = 3;
    *(_BYTE *)(v1 + 2static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = sub_65894((uint64_t)&v15) & 1;
    char v14 = 4;
    *(_BYTE *)(v1 + 28) = sub_65894((uint64_t)&v14) & 1;
    char v13 = 5;
    *(_BYTE *)(v1 + 29) = sub_65894((uint64_t)&v13) & 1;
    char v12 = 6;
    char v11 = sub_65894((uint64_t)&v12);
    sub_658B4();
    *(_BYTE *)(v3 + 30) = v11 & 1;
  }

  _s20HandleIntentStrategyVwxx_0(a1);
  return v3;
}

unint64_t sub_6545C()
{
  return 0xD000000000000013LL;
}

void *sub_65478()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 16, v5, 0LL, 0LL);
  uint64_t v2 = *(void **)(v1 + 16);
  id v3 = v2;
  return v2;
}

void sub_654BC(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess(v3 + 16, v5, 1LL, 0LL);
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = a1;
}

uint64_t (*sub_65504(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

double sub_65548@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_64C9C(a1, a2, a3);
}

uint64_t sub_65568@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_65208(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_65590(void *a1)
{
  return sub_65080(a1);
}

uint64_t sub_655B0()
{
  return sub_655F8(&qword_FE380, (uint64_t)&unk_C3A00);
}

uint64_t sub_655D4()
{
  return sub_655F8(&qword_FE388, (uint64_t)&unk_C39D8);
}

uint64_t sub_655F8(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for TimerTimerGrouping();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_65634()
{
  unint64_t result = qword_FE398;
  if (!qword_FE398)
  {
    unint64_t result = swift_getWitnessTable(&unk_C3B8C, &type metadata for TimerTimerGrouping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FE398);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for TimerTimerGrouping.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for TimerTimerGrouping.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_65744 + 4 * byte_C3935[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_65778 + 4 * byte_C3930[v4]))();
}

uint64_t sub_65778(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_65780(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x65788LL);
  }
  return result;
}

uint64_t sub_65794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x6579CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_657A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_657A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TimerTimerGrouping.CodingKeys()
{
  return &type metadata for TimerTimerGrouping.CodingKeys;
}

unint64_t sub_657C8()
{
  unint64_t result = qword_FE3A8;
  if (!qword_FE3A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_C3B64, &type metadata for TimerTimerGrouping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FE3A8);
  }

  return result;
}

unint64_t sub_65808()
{
  unint64_t result = qword_FE3B0;
  if (!qword_FE3B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_C3A9C, &type metadata for TimerTimerGrouping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FE3B0);
  }

  return result;
}

unint64_t sub_65848()
{
  unint64_t result = qword_FE3B8;
  if (!qword_FE3B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_C3AC4, &type metadata for TimerTimerGrouping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_FE3B8);
  }

  return result;
}

uint64_t sub_65884(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t sub_65894(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_658A4(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_658B4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_658C4()
{
  return 1701667187LL;
}

uint64_t type metadata accessor for DeleteTimerCATPatternsExecutor(uint64_t a1)
{
  return sub_DAF8(a1, (uint64_t *)&unk_FE3C0, (uint64_t)&nominal type descriptor for DeleteTimerCATPatternsExecutor);
}

uint64_t sub_658E4(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100F70);
}

void sub_65920()
{
  uint64_t v3 = __chkstk_darwin(v2);
  int v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  BOOL v7 = (char *)&v19 - v6;
  uint64_t v8 = sub_67C4(&qword_FBE20);
  uint64_t v9 = sub_34D60(v8, 176LL);
  sub_49090((__n128 *)v9, (__n128)xmmword_C27D0);
  sub_491CC(v0);
  uint64_t v10 = sub_1BCD8();
  sub_490E4((uint64_t)v7);
  if (v11)
  {
    sub_17A70((uint64_t)v7, &qword_FBD98);
    *uint64_t v1 = 0u;
    v1[1] = 0u;
  }

  else
  {
    *(void *)(v9 + 72) = v10;
    char v12 = sub_49150();
    sub_4913C((uint64_t)v12);
  }

  sub_49100();
  *(void *)(v9 + 80) = v13;
  *(void *)(v9 + 88) = v14;
  uint64_t v15 = type metadata accessor for DeleteTimerConfirmExistingParameters(0LL);
  sub_8C84(v0 + *(int *)(v15 + 20), (uint64_t)v5, &qword_FBD98);
  sub_490E4((uint64_t)v5);
  if (v11)
  {
    sub_17A70((uint64_t)v5, &qword_FBD98);
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
  }

  else
  {
    *(void *)(v9 + 120) = v10;
    char v16 = sub_49150();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v16, v5, v10);
  }

  strcpy((char *)(v9 + 128), "speakableTimer");
  *(_BYTE *)(v9 + 143) = -18;
  uint64_t v17 = *(void *)(v0 + *(int *)(v15 + 24));
  if (v17)
  {
    uint64_t v18 = type metadata accessor for TimerTimer(0LL);
  }

  else
  {
    uint64_t v18 = 0LL;
    *(void *)(v9 + 152) = 0LL;
    *(void *)(v9 + 160) = 0LL;
  }

  *(void *)(v9 + 144) = v17;
  *(void *)(v9 + 168) = v18;
  swift_retain();
  sub_37FA0();
}

void sub_65AC4()
{
  uint64_t v2 = v0;
  sub_67C4(&qword_FBD98);
  sub_1BCE0();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = sub_67C4(&qword_FBE20);
  uint64_t v10 = sub_34D60(v9, 128LL);
  sub_49090((__n128 *)v10, (__n128)xmmword_C27E0);
  sub_491CC(v2);
  uint64_t v11 = sub_1BCD8();
  sub_490E4((uint64_t)v8);
  if (v12)
  {
    sub_17A70((uint64_t)v8, &qword_FBD98);
    *uint64_t v1 = 0u;
    v1[1] = 0u;
  }

  else
  {
    *(void *)(v10 + 72) = v11;
    uint64_t v13 = sub_49150();
    sub_4913C((uint64_t)v13);
  }

  sub_49100();
  *(void *)(v10 + 80) = v14;
  *(void *)(v10 + 88) = v15;
  uint64_t v16 = type metadata accessor for DeleteTimerConfirmMultiParameters(0LL);
  sub_8C84(v2 + *(int *)(v16 + 20), (uint64_t)v6, &qword_FBD98);
  sub_490E4((uint64_t)v6);
  if (v12)
  {
    sub_17A70((uint64_t)v6, &qword_FBD98);
    *(_OWORD *)(v10 + 96) = 0u;
    *(_OWORD *)(v10 + 112) = 0u;
  }

  else
  {
    *(void *)(v10 + 120) = v11;
    uint64_t v17 = sub_DB90((void *)(v10 + 96));
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v17, v6, v11);
  }

  sub_37FA0();
}

uint64_t sub_65C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  void v6[3] = a2;
  uint64_t v7 = sub_67C4(&qword_FBD98);
  v6[8] = sub_37EE0(v7);
  uint64_t v8 = type metadata accessor for DeleteTimerConfirmExistingParameters(0LL);
  v6[9] = v8;
  v6[10] = sub_37EE0(v8);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_65C74()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v16 = v0[6];
  uint64_t v5 = v0[4];
  sub_1BCD8();
  sub_49158(v1);
  uint64_t v6 = v1 + *(int *)(v2 + 20);
  sub_49158(v6);
  uint64_t v7 = *(int *)(v2 + 24);
  *(void *)(v1 + vstatic OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = 0LL;
  sub_D378();
  *(void *)(v1 + vstatic OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = v8;
  swift_bridgeObjectRetain(v4);
  SpeakableString.init(serializedValue:)(v5, v4);
  uint64_t v9 = sub_5BDAC();
  sub_1B4F4(v9, v1);
  swift_bridgeObjectRetain(v3);
  SpeakableString.init(serializedValue:)(v16, v3);
  uint64_t v10 = sub_5BDAC();
  sub_1B4F4(v10, v6);
  sub_65920();
  v0[11] = v11;
  char v12 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[12] = v12;
  *char v12 = v0;
  v12[1] = sub_65D90;
  sub_3814C();
  unint64_t v13 = sub_3813C(27LL);
  return v14(v13);
}

uint64_t sub_65D90()
{
  void *v4 = *v2;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  sub_1BC04();
  if (!v1) {
    *(void *)(v3 + 112) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v5, v6, v7);
}

uint64_t sub_65DEC()
{
  swift_bridgeObjectRelease(v1);
  sub_1BC04();
  sub_1BABC();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 112));
}

uint64_t sub_65E58()
{
  swift_bridgeObjectRelease(v1);
  sub_1BC04();
  sub_1BABC();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_65EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  __int128 v5[2] = a1;
  uint64_t v6 = type metadata accessor for DeleteTimerConfirmMultiParameters(0LL);
  v5[7] = v6;
  v5[8] = sub_37EE0(v6);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_65F08()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  sub_1BCD8();
  sub_49158(v1);
  sub_49158(v1 + *(int *)(v2 + 20));
  sub_6884C(v1, v6, v5, v4, v3);
  sub_65AC4();
  v0[9] = v7;
  uint64_t v8 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_65FC4;
  sub_3814C();
  unint64_t v9 = sub_3813C(24LL);
  return v10(v9);
}

uint64_t sub_65FC4()
{
  void *v4 = *v2;
  *(void *)(v3 + 88) = v1;
  swift_task_dealloc();
  sub_1BC04();
  if (!v1) {
    *(void *)(v3 + 96) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v5, v6, v7);
}

uint64_t sub_66020(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 48);
  sub_38060(a1, type metadata accessor for DeleteTimerConfirmMultiParameters);
  sub_1BC04();
  swift_bridgeObjectRelease(v2);
  sub_1BABC();
  return sub_2FB20(*(void *)(v1 + 96), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_66074(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 48);
  sub_38060(a1, type metadata accessor for DeleteTimerConfirmMultiParameters);
  sub_1BC04();
  swift_bridgeObjectRelease(v2);
  sub_1BABC();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_660D0()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1C020;
  return sub_38068(0xD000000000000017LL, 0x80000000000C8A20LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_66130()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_4908C;
  return sub_38068(0xD000000000000018LL, 0x80000000000C8A00LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_66190(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  sub_1B9B8();
  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_661AC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = sub_34D60(v2, 80LL);
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C2640;
  strcpy((char *)(v3 + 32), "deletedTimers");
  *(_WORD *)(v3 + 46) = -4864;
  *(void *)(v3 + 72) = sub_67C4(&qword_FBE28);
  *(void *)(v3 + 48) = v1;
  swift_bridgeObjectRetain(v1);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_6628C;
  sub_3814C();
  unint64_t v6 = sub_3813C(25LL);
  return v7(v6);
}

uint64_t sub_6628C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 40);
  uint64_t v5 = *v2;
  *(void *)(v5 + 48) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_1B9B8();
    return swift_task_switch(v6, v7, v8);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v5 + 32));
    return sub_2FB20(a1, *(uint64_t (**)(void))(v5 + 8));
  }

uint64_t sub_66304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_66354(a1, a2, a3);
}

uint64_t sub_66354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_67C4(&qword_FB530);
  sub_1BCE0();
  __chkstk_darwin(v10);
  char v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_8C84(a1, (uint64_t)v12, &qword_FB530);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_17A70(a1, &qword_FB530);
  return v13;
}

uint64_t sub_66460()
{
  return type metadata accessor for DeleteTimerCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for DeleteTimerConfirmMultiParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FE528, (uint64_t)&nominal type descriptor for DeleteTimerConfirmMultiParameters);
}

uint64_t type metadata accessor for DeleteTimerConfirmExistingParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FE490, (uint64_t)&nominal type descriptor for DeleteTimerConfirmExistingParameters);
}

uint64_t sub_66490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6649C);
}

uint64_t sub_6649C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_67C4(&qword_FBD98);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(sub_88074(v1, v8) = -1;
  }
  int v9 = v8 - 1;
  if (v9 < 0) {
    int v9 = -1;
  }
  return (v9 + 1);
}

uint64_t sub_66524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_66530);
}

uint64_t sub_66530(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result = sub_67C4(&qword_FBD98);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = sub_491B8();
    return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v9, v10, v11, v12);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + swift_bridgeObjectRelease(*(void *)(v0 + 24)) = a2;
  }

  return result;
}

void sub_6659C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = "\b";
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

uint64_t sub_66610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6661C);
}

uint64_t sub_6661C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FBD98);
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1, a2, v4);
}

uint64_t sub_66654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_66660);
}

uint64_t sub_66660()
{
  uint64_t v0 = sub_491B8();
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v0, v1, v2, v3);
}

  ;
}

uint64_t type metadata accessor for TimeSuggestionsCATs_Async(uint64_t a1)
{
  uint64_t result = qword_FE560;
  if (!qword_FE560) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimeSuggestionsCATs_Async);
  }
  return result;
}

uint64_t sub_666DC(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100F80);
}

uint64_t sub_66718()
{
  return type metadata accessor for TimeSuggestionsCATs_Async(0LL);
}

uint64_t sub_66720(uint64_t a1)
{
  return sub_66750(a1, &enum case for SiriTimeAppBundleId.clockApp(_:), &qword_100F90, algn_100F98);
}

uint64_t sub_66738(uint64_t a1)
{
  return sub_66750( a1,  (unsigned int *)&enum case for SiriTimeAppBundleId.timerExtension(_:),  &qword_100FA0,  algn_100FA8);
}

uint64_t sub_66750(uint64_t a1, unsigned int *a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for SiriTimeAppBundleId(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (*(uint64_t (**)(char *, void, uint64_t))(v8 + 104))(v10, *a2, v7);
  uint64_t v12 = SiriTimeAppBundleId.rawValue.getter(v11);
  uint64_t v14 = v13;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *a3 = v12;
  *a4 = v14;
  return result;
}

uint64_t sub_66804()
{
  if (qword_FB218 != -1) {
    swift_once(&qword_FB218, sub_66720);
  }
  uint64_t v0 = qword_100F90;
  uint64_t v1 = *(void *)algn_100F98;
  uint64_t v2 = qword_FB220;
  swift_bridgeObjectRetain(*(void *)algn_100F98);
  if (v2 != -1) {
    swift_once(&qword_FB220, sub_66738);
  }
  uint64_t v3 = qword_100FA0;
  uint64_t v4 = *(void *)algn_100FA8;
  uint64_t v5 = type metadata accessor for App(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  swift_bridgeObjectRetain(v4);
  uint64_t result = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)( v0,  v1,  v3,  v4,  0LL,  0LL,  0LL,  0LL);
  qword_100FB0 = result;
  return result;
}

ValueMetadata *_s25NeedsConfirmationStrategyVMa()
{
  return &_s25NeedsConfirmationStrategyVN;
}

uint64_t sub_668FC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FE5B0);
  sub_5474(v0, (uint64_t)qword_FE5B0);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_66944()
{
  uint64_t v0 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static SiriTimeFeatureFlagsImpl.instance.getter(v2);
  Swift::Bool v5 = SiriTimeFeatureFlagsImpl.isCrossDeviceEnabled()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (v5)
  {
    uint64_t v6 = sub_67C4(&qword_FE630);
    uint64_t v7 = (void *)ParameterResolutionRecord.intent.getter(v6);
    id v8 = [v7 targetTimer];

    id v9 = [v8 shouldMatchAny];
    sub_1E6A8();
    v10.super.super.Class isa = NSNumber.init(integerLiteral:)(1LL).super.super.isa;
    Class isa = v10.super.super.isa;
    if (v9)
    {
      id v12 = v9;
      char v13 = static NSObject.== infix(_:_:)(v12, isa);

      if ((v13 & 1) != 0)
      {
        uint64_t v14 = (void *)ParameterResolutionRecord.intent.getter(v6);
        id v15 = [v14 targetingInfo];

        if (!v15)
        {
          if (qword_FB230 != -1) {
            swift_once(&qword_FB230, sub_668FC);
          }
          uint64_t v16 = type metadata accessor for Logger(0LL);
          uint64_t v17 = sub_5474(v16, (uint64_t)qword_FE5B0);
          uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
          os_log_type_t v19 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v18, v19))
          {
            uint64_t v21 = 1LL;
            goto LABEL_16;
          }

          uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v20 = 0;
          _os_log_impl(&dword_0, v18, v19, "ResolveRecord indicates we are searching for a room confirmation", v20, 2u);
          uint64_t v21 = 1LL;
          goto LABEL_14;
        }
      }
    }

    else
    {
    }
  }

  if (qword_FB230 != -1) {
    swift_once(&qword_FB230, sub_668FC);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_5474(v22, (uint64_t)qword_FE5B0);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v18, v24))
  {
    uint64_t v21 = 0LL;
    goto LABEL_16;
  }

  uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v20 = 0;
  _os_log_impl(&dword_0, v18, v24, "ResolveRecord not searching for room confirmation", v20, 2u);
  uint64_t v21 = 0LL;
LABEL_14:
  swift_slowDealloc(v20, -1LL, -1LL);
LABEL_16:

  return v21;
}

uint64_t sub_66C04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = v7 - v6;
  sub_67C4(&qword_FBDB8);
  sub_1BCE0();
  __chkstk_darwin(v9);
  sub_1C308();
  uint64_t v12 = v11 - v10;
  if (qword_FB230 != -1) {
    swift_once(&qword_FB230, sub_668FC);
  }
  uint64_t v13 = sub_1BD34();
  sub_5474(v13, (uint64_t)qword_FE5B0);
  sub_1BD20();
  os_log_type_t v14 = sub_1BCD0();
  if (os_log_type_enabled(v2, v14))
  {
    id v15 = (uint8_t *)sub_1B9DC();
    *(_WORD *)id v15 = 0;
    _os_log_impl(&dword_0, v2, v14, "DeleteTimer.NeedsConfirmationStrategy.actionForInput() called)", v15, 2u);
    sub_1B904((uint64_t)v15);
  }

  uint64_t v16 = type metadata accessor for HALTimerDeviceContext(0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v12, 1LL, 1LL, v16);
  char v17 = sub_66944();
  uint64_t v18 = type metadata accessor for DecideAction.PromptExpectation(0LL);
  os_log_type_t v19 = (unsigned int *)&enum case for DecideAction.PromptExpectation.roomConfirmation(_:);
  if ((v17 & 1) == 0) {
    os_log_type_t v19 = (unsigned int *)&enum case for DecideAction.PromptExpectation.confirmation(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104LL))(v8, *v19, v18);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v8, 0LL, 1LL, v18);
  sub_39724(a1, v12, 0, v8, a2);
  sub_DABC(v8, (uint64_t *)&unk_FCC70);
  return sub_DABC(v12, &qword_FBDB8);
}

uint64_t sub_66DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  void v4[8] = a2;
  uint64_t v5 = sub_67C4(&qword_FBDB0);
  v4[11] = sub_1B6C8(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for ActionForInput(0LL);
  v4[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[13] = v7;
  v4[14] = sub_2B4DC(v7);
  v4[15] = sub_1B970();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_66E50()
{
  if (qword_FB230 != -1) {
    swift_once(&qword_FB230, sub_668FC);
  }
  uint64_t v1 = sub_1BD34();
  sub_5474(v1, (uint64_t)qword_FE5B0);
  uint64_t v2 = (os_log_s *)sub_1BD20();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  uint64_t v4 = v3;
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = (_WORD *)sub_1B9DC();
    sub_691E0(v5);
    sub_69084( &dword_0,  v2,  (os_log_type_t)v4,  "DeleteTimer.NeedsConfirmationStrategy.parseConfirmationResponse() called");
    sub_69074();
  }

  uint64_t v6 = sub_67C4(&qword_FE630);
  id v7 = [(id)ParameterResolutionRecord.result.getter(v6) itemToConfirm];
  sub_69128();
  _bridgeAnyObjectToAny(_:)(v4);
  swift_unknownObjectRelease(v4);
  uint64_t v8 = type metadata accessor for SiriTimer(0LL);
  if (sub_691C8(v0 + 48, v9, (uint64_t)&type metadata for Any + 8, v8))
  {
    uint64_t v10 = *(void **)(v0 + 48);
    id v11 = [objc_allocWithZone((Class)type metadata accessor for DeleteTimerIntent(0)) init];
    [v11 setTargetTimer:v10];
    if ((sub_66944() & 1) != 0)
    {
      uint64_t v12 = *(void *)(v0 + 64);
      sub_70A20();
      sub_71C70(v12, v13, v14, v15, v16, v17, v18, v19, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48);
      __asm { BR              X10 }
    }

    uint64_t v32 = *(void *)(v0 + 88);
    uint64_t v33 = enum case for ConfirmationResponse.confirmed(_:);
    uint64_t v34 = type metadata accessor for ConfirmationResponse(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104LL))(v32, v33, v34);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v32, 0LL, 1LL, v34);
    id v35 = v11;
    INIntent.withEndpointId.getter();
    sub_69128();
    sub_691D4(v32);

    swift_task_dealloc();
    sub_1BABC();
    sub_1B86C();
    uint64_t v31 = (uint64_t (*)(void))sub_1BB00();
  }

  else
  {
    *(_BYTE *)(v0 + 128) = 3;
    uint64_t v21 = sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v22 = sub_1E324();
    swift_allocError(v21, v22, 0LL, 0LL);
    uint64_t v23 = static BarbaraWalters.logAndReturnError<A>(context:_:)( 0xD000000000000074LL,  0x80000000000C8B40LL,  v0 + 128,  v21,  v22);
    swift_willThrow(v23, v24, v25, v26, v27, v28, v29, v30);
    sub_1BABC();
    sub_1B86C();
    sub_1BA14();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v31();
}

uint64_t sub_67388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  void v3[9] = a3;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  v3[12] = sub_2B4DC(v5);
  v3[13] = sub_1B970();
  v3[14] = sub_1B970();
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  v3[15] = sub_1B6C8(*(void *)(v6 - 8));
  uint64_t v7 = sub_1BD34();
  v3[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[17] = v8;
  v3[18] = sub_1B6C8(v8);
  uint64_t v9 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[19] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[20] = v10;
  v3[21] = sub_1B6C8(v10);
  uint64_t v11 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[22] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[23] = v12;
  v3[24] = sub_2B4DC(v12);
  v3[25] = sub_1B970();
  v3[26] = sub_1B970();
  uint64_t v13 = type metadata accessor for NLContextUpdate(0LL);
  v3[27] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[28] = v14;
  v3[29] = sub_2B4DC(v14);
  v3[30] = sub_1B970();
  v3[31] = sub_1B970();
  uint64_t v15 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v3[32] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[33] = v16;
  v3[34] = sub_1B6C8(v16);
  uint64_t v17 = type metadata accessor for DialogPhase(0LL);
  v3[35] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v3[36] = v18;
  v3[37] = sub_1B6C8(v18);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_674BC()
{
  if (qword_FB230 != -1) {
    swift_once(&qword_FB230, sub_668FC);
  }
  uint64_t v3 = sub_5474(v1[16], (uint64_t)qword_FE5B0);
  sub_1BD20();
  os_log_type_t v4 = sub_1BCD0();
  if (sub_2BAD0(v4))
  {
    uint64_t v5 = (_WORD *)sub_1B9DC();
    sub_691E0(v5);
    sub_69084(&dword_0, v0, v2, "DeleteTimer.NeedsConfirmationStrategy.makePromptForConfirmation() called");
    sub_69074();
  }

  uint64_t v6 = v1[8];

  sub_6A5C(v6, (uint64_t)(v1 + 2));
  uint64_t v7 = type metadata accessor for SiriTimer(0LL);
  uint64_t v9 = sub_691C8((uint64_t)(v1 + 6), v8, (uint64_t)&type metadata for Any + 8, v7);
  if (!(_DWORD)v9)
  {
    sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v30 = sub_1E324();
    uint64_t v31 = sub_2F6A0(v30);
    *uint64_t v32 = 1;
    sub_691EC(v31, (uint64_t)v32, v33, v34, v35, v36, v37, v38);
    goto LABEL_12;
  }

  uint64_t v10 = (void *)v1[6];
  v1[38] = v10;
  uint64_t v11 = static DialogPhase.confirmation.getter(v9);
  static SiriTimeFeatureFlagsImpl.instance.getter(v11);
  Swift::Bool v12 = SiriTimeFeatureFlagsImpl.isCrossDeviceEnabled()();
  sub_691B0();
  if (v12)
  {
    id v13 = [v10 shouldMatchAny];
    sub_32A64();
    v14.super.super.Class isa = sub_690FC().super.super.isa;
    Class isa = v14.super.super.isa;
    if (v13)
    {
      id v16 = v13;
      char v17 = static NSObject.== infix(_:_:)(v16, isa);

      if ((v17 & 1) != 0)
      {
        uint64_t v18 = sub_67C4(&qword_FE630);
        id v19 = [(id)ParameterResolutionRecord.intent.getter(v18) targetingInfo];
        sub_69128();

        if (!isa)
        {
          uint64_t v21 = v1[20];
          uint64_t v20 = v1[21];
          uint64_t v23 = v1[18];
          uint64_t v22 = v1[19];
          uint64_t v24 = v1[16];
          uint64_t v25 = v1[17];
          uint64_t v26 = v1[15];
          sub_A9614();
          (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))( v20,  enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:),  v22);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v3, v24);
          uint64_t v27 = mach_absolute_time();
          SiriTimeMeasurement.init(_:log:startTime:)(v20, v23, v27);
          type metadata accessor for DeleteTimerCATsSimple(0LL);
          static CATOption.defaultMode.getter();
          v1[39] = CATWrapperSimple.__allocating_init(options:globals:)(v26, 0LL);
          uint64_t v28 = (void *)swift_task_alloc(dword_100D8C);
          v1[40] = v28;
          *uint64_t v28 = v1;
          v28[1] = sub_67D80;
          sub_2B904();
          return sub_BEA54();
        }
      }
    }

    else
    {
    }

    id v72 = [v10 device];

    if (v72)
    {
      uint64_t v74 = v1[20];
      uint64_t v73 = v1[21];
      uint64_t v76 = v1[18];
      uint64_t v75 = v1[19];
      uint64_t v77 = v1[17];
      uint64_t v78 = v1[15];
      sub_A9100();
      (*(void (**)(uint64_t, void, uint64_t))(v74 + 104))( v73,  enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:),  v75);
      sub_691BC(v76, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 16));
      uint64_t v79 = mach_absolute_time();
      SiriTimeMeasurement.init(_:log:startTime:)(v73, v76, v79);
      type metadata accessor for TimerBaseCATsSimple(0LL);
      static CATOption.defaultMode.getter();
      v1[44] = CATWrapperSimple.__allocating_init(options:globals:)(v78, 0LL);
      sub_D378();
      v1[45] = v80;
      uint64_t v81 = (void *)swift_task_alloc(dword_FDA94);
      v1[46] = v81;
      sub_69188(v81, (uint64_t)sub_67F20);
      sub_2B904();
      return sub_5A800(v82);
    }
  }

  uint64_t v83 = (void *)v1[32];
  sub_A9100();
  static SiriTimeFeatureFlagsImpl.instance.getter(v84);
  Swift::Bool v85 = SiriTimeFeatureFlagsImpl.isConfirmationsResponseFrameworkEnabled()();
  uint64_t v86 = sub_691B0();
  if (v85)
  {
    uint64_t v87 = (void *)static InvocationFactory.makeConfirmAndRejectActions()(v86);

    object = AceObject.serializeToBase64()().value._object;
    v1[50] = object;
    if (object)
    {
      id v91 = (void *)static InvocationFactory.makeConfirmAndRejectActions()(v90);
      uint64_t v93 = v92;

      id v94 = AceObject.serializeToBase64()().value._object;
      v1[51] = v94;
      if (v94)
      {
        uint64_t v165 = v10;
        uint64_t v95 = v1[21];
        uint64_t v96 = v1[18];
        uint64_t v97 = v1[17];
        (*(void (**)(uint64_t, void, void))(v1[20] + 104LL))( v95,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v1[19]);
        sub_691BC(v96, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 16));
        uint64_t v98 = mach_absolute_time();
        SiriTimeMeasurement.init(_:log:startTime:)(v95, v96, v98);
        uint64_t v99 = sub_67C4(&qword_FE630);
        uint64_t v100 = (void *)ParameterResolutionRecord.intent.getter(v99);
        id v101 = [v100 targetTimer];

        id v102 = [v101 shouldMatchAny];
        sub_32A64();
        v103.super.super.Class isa = sub_690FC().super.super.isa;
        Class v104 = v103.super.super.isa;
        if (v102)
        {
          id v105 = v102;
          char v106 = static NSObject.== infix(_:_:)(v105, v104);

          uint64_t v107 = v165;
          if ((v106 & 1) != 0)
          {
            if (qword_FB3C8 != -1) {
              swift_once(&qword_FB3C8, sub_B39AC);
            }
            uint64_t v108 = unk_FE42C;
            sub_6914C();
            swift_bridgeObjectRetain(object);
            uint64_t v109 = (void *)swift_task_alloc(v108);
            v1[52] = v109;
            sub_69188(v109, (uint64_t)sub_680B0);
            sub_2B904();
            __asm { BR              X5 }
          }
        }

        else
        {

          uint64_t v107 = v165;
        }

        if (qword_FB3C8 != -1) {
          swift_once(&qword_FB3C8, sub_B39AC);
        }
        uint64_t v143 = unk_FE434;
        sub_6914C();
        swift_bridgeObjectRetain(object);
        id v144 = v107;
        uint64_t v145 = (void *)swift_task_alloc(v143);
        v1[54] = v145;
        sub_69188(v145, (uint64_t)sub_68134);
        sub_2B904();
        __asm { BR              X6 }
      }

      uint64_t v90 = swift_bridgeObjectRelease(object);
    }

    uint64_t v125 = (os_log_s *)Logger.logObject.getter(v90);
    os_log_type_t v126 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v125, v126))
    {
      uint64_t v127 = (uint8_t *)sub_1B9DC();
      *(_WORD *)uint64_t v127 = 0;
      _os_log_impl(&dword_0, v125, v126, "Could not create direct invocation for confirm or reject actions.", v127, 2u);
      sub_1B904((uint64_t)v127);
    }

    uint64_t v128 = v1[36];
    uint64_t v129 = v1[37];
    uint64_t v130 = v1[35];
    uint64_t v132 = v1[28];
    uint64_t v131 = v1[29];
    uint64_t v133 = v1[27];

    sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v134 = sub_1E324();
    uint64_t v135 = sub_2F6A0(v134);
    _BYTE *v136 = 0;
    sub_691EC(v135, (uint64_t)v136, v137, v138, v139, v140, v141, v142);

    (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v131, v133);
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v129, v130);
LABEL_12:
    uint64_t v155 = v1[15];
    uint64_t v159 = v1[14];
    uint64_t v162 = v1[13];
    uint64_t v164 = v1[12];
    swift_task_dealloc();
    sub_1B86C();
    sub_1BA24();
    sub_1BA14();
    sub_1BA38();
    sub_1B838();
    sub_1BA8C();
    sub_1BA60();
    sub_1BAD0();
    uint64_t v39 = sub_1BABC();
    uint64_t v47 = sub_1B8C4(v39, v40, v41, v42, v43, v44, v45, v46, v147, v151, v155);
    uint64_t v55 = sub_1B8BC(v47, v48, v49, v50, v51, v52, v53, v54, v148, v152, v156, v159);
    uint64_t v63 = sub_1B8B4(v55, v56, v57, v58, v59, v60, v61, v62, v149, v153, v157, v160, v162);
    sub_1B864(v63, v64, v65, v66, v67, v68, v69, v70, v150, v154, v158, v161, v163, v164);
    sub_2B904();
    __asm { BR              X0 }
  }

  uint64_t v111 = sub_67C4(&qword_FE630);
  id v112 = [(id)ParameterResolutionRecord.intent.getter(v111) targetTimer];
  sub_69128();
  id v114 = sub_69198(v113, "shouldMatchAny");

  sub_32A64();
  v115.super.super.Class isa = sub_690FC().super.super.isa;
  Class v116 = v115.super.super.isa;
  if (v114)
  {
    id v117 = v114;
    char v118 = static NSObject.== infix(_:_:)(v117, v116);

    if ((v118 & 1) != 0)
    {
      if (qword_FB3C0 != -1) {
        swift_once(&qword_FB3C0, sub_B3998);
      }
      uint64_t v119 = (void *)swift_task_alloc(dword_FDFF4);
      v1[59] = v119;
      *uint64_t v119 = v1;
      v119[1] = sub_682BC;
      sub_2B904();
      return sub_64AB0(v120);
    }
  }

  else
  {
  }

  if (qword_FB3C0 != -1) {
    swift_once(&qword_FB3C0, sub_B3998);
  }
  sub_D378();
  v1[61] = v121;
  uint64_t v122 = (void *)swift_task_alloc(dword_FDFEC);
  v1[62] = v122;
  *uint64_t v122 = v1;
  v122[1] = sub_683A0;
  sub_2B904();
  return sub_6498C(v123, v124);
}

uint64_t sub_67D80(uint64_t a1)
{
  uint64_t v18 = (void *)*v2;
  os_log_type_t v4 = v18;
  sub_1BC0C(&v18);
  v4[41] = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    sub_1B9B8();
    return swift_task_switch(v5, v6, v7);
  }

  else
  {
    v4[42] = a1;
    uint64_t v9 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)[1]);
    v4[43] = v9;
    *uint64_t v9 = v2;
    v9[1] = sub_67E34;
    sub_69130();
    return DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)( v10,  v11,  v12,  v13,  v14,  v15,  v16,  v17);
  }

uint64_t sub_67E34()
{
  uint64_t v1 = *(void **)(v0 + 336);
  sub_2B4F0(*(void *)(v0 + 344));

  sub_1B9B8();
  return sub_1B758();
}

#error "67EE0: call analysis failed (funcsize=45)"
uint64_t sub_67F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  sub_2F748();
  sub_1BC0C(v4);
  v3[47] = v1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  if (v1)
  {
    sub_1B9B8();
    return sub_2F658(v5, v6, v7);
  }

  else
  {
    v3[48] = v0;
    uint64_t v9 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)[1]);
    v3[49] = v9;
    *uint64_t v9 = v2;
    v9[1] = sub_67FC4;
    sub_69130();
    return DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)( v10,  v11,  v12,  v13,  v14,  v15,  v16,  v17);
  }

uint64_t sub_67FC4()
{
  uint64_t v1 = *(void **)(v0 + 384);
  sub_2B4F0(*(void *)(v0 + 392));

  sub_1B9B8();
  return sub_1B758();
}

#error "68070: call analysis failed (funcsize=45)"
uint64_t sub_680B0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  sub_2F748();
  sub_1BC0C(v3);
  v2[53] = v1;
  swift_task_dealloc();
  os_log_type_t v4 = v2[50];
  swift_bridgeObjectRelease(v2[51]);
  swift_bridgeObjectRelease(v4);
  if (v1)
  {
    sub_1B9B8();
    return sub_2F658(v5, v6, v7);
  }

  else
  {
    v2[56] = v0;
    uint64_t v9 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[57] = v9;
    sub_690D8(v9);
    return sub_2F668();
  }

uint64_t sub_68134()
{
  v2[55] = v1;
  swift_task_dealloc();
  uint64_t v4 = v2[50];
  swift_bridgeObjectRelease(v2[51]);
  swift_bridgeObjectRelease(v4);
  if (v1)
  {
    sub_1B9B8();
    return sub_2F658(v5, v6, v7);
  }

  else
  {
    v2[56] = v0;
    uint64_t v9 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[57] = v9;
    sub_690D8(v9);
    return sub_2F668();
  }

uint64_t sub_681B8()
{
  *os_log_type_t v2 = *v1;
  *(void *)(v3 + 464) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

#error "6827C: call analysis failed (funcsize=45)"
uint64_t sub_682BC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  sub_1BBF4();
  *os_log_type_t v2 = *v1;
  *(void *)(v3 + 480) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

#error "68360: call analysis failed (funcsize=37)"
uint64_t sub_683A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v7 = *v1;
  os_log_type_t v2 = v7;
  sub_1BC0C(&v7);
  *(void *)(v2 + 504) = v0;
  swift_task_dealloc();
  swift_release();
  sub_1B9B8();
  return swift_task_switch(v3, v4, v5);
}

#error "6845C: call analysis failed (funcsize=38)"
#error "68514: call analysis failed (funcsize=37)"
#error "685A8: call analysis failed (funcsize=37)"
#error "68624: call analysis failed (funcsize=31)"
#error "686A0: call analysis failed (funcsize=31)"
#error "68748: call analysis failed (funcsize=42)"
#error "687BC: call analysis failed (funcsize=29)"
#error "68830: call analysis failed (funcsize=29)"
uint64_t sub_6884C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sub_67C4(&qword_FBD98);
  sub_1BCE0();
  __chkstk_darwin(v10);
  sub_1C308();
  uint64_t v13 = v12 - v11;
  swift_bridgeObjectRetain(a3);
  SpeakableString.init(serializedValue:)(a2, a3);
  type metadata accessor for SpeakableString(0LL);
  sub_69174();
  sub_1B4F4(v13, a1);
  swift_bridgeObjectRetain(a5);
  SpeakableString.init(serializedValue:)(a4, a5);
  sub_69174();
  uint64_t v14 = type metadata accessor for DeleteTimerConfirmMultiParameters(0LL);
  return sub_1B4F4(v13, a1 + *(int *)(v14 + 20));
}

uint64_t sub_6891C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_FE62C);
  *(void *)(v3 + 32) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_68984;
  return sub_67388(a1, a2, a3);
}

uint64_t sub_68984()
{
  uint64_t v2 = *v1;
  *uint64_t v3 = v2;
  *(void *)(v4 + 40) = v0;
  swift_task_dealloc();
  if (!v0) {
    return sub_1ECD4(*(uint64_t (**)(void))(v2 + 8));
  }
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_689D4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = sub_67C4(&qword_FBF48);
  uint64_t v3 = static BarbaraWalters.logAndReturnError<A>(context:_:)( 0xD00000000000007CLL,  0x80000000000C8AC0LL,  v0 + 24,  v2,  &protocol self-conformance witness table for Error);
  swift_willThrow(v3, v4, v5, v6, v7, v8, v9, v10);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_68A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_FE63C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_C630;
  return sub_66DE4(a1, a2, a3);
}

uint64_t sub_68AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_2ADE8;
  return NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:)( a1,  a2,  a3,  a4);
}

uint64_t sub_68B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_FE624);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_2A040;
  return sub_6891C(a1, a2, a3);
}

uint64_t sub_68BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_C630;
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:)(a1, a2, a3, a4, a5);
}

uint64_t sub_68C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:)[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_C630;
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_68CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_C630;
  return NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t sub_68D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_C630;
  return NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t sub_68DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_C630;
  return NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_68E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)[1]);
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_C630;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_68ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)[1]);
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = sub_C630;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, a6, a7);
}

unint64_t sub_68F78()
{
  unint64_t result = qword_FE5D8[0];
  if (!qword_FE5D8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_C3D8C, &_s25NeedsConfirmationStrategyVN);
    atomic_store(result, qword_FE5D8);
  }

  return result;
}

uint64_t sub_68FB4()
{
  return swift_task_dealloc(*(void *)(v0 + 296));
}

void sub_68FF4()
{
}

void sub_6904C(void *a1@<X8>)
{
}

uint64_t sub_69074()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

void sub_69084(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

  ;
}

uint64_t sub_690AC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void sub_690BC()
{
}

uint64_t sub_690D8(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v3 + 56);
}

NSNumber sub_690FC()
{
  return NSNumber.init(integerLiteral:)(1LL);
}

void sub_69108()
{
}

uint64_t sub_6911C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_69128()
{
}

  ;
}

uint64_t sub_6914C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_69160(uint64_t a1, uint64_t a2)
{
  return sub_3301C(v3, a2, v2);
}

uint64_t sub_69174()
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v1, 0LL, 1LL, v0);
}

uint64_t sub_69188@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

id sub_69198(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_691A0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(v1);
}

uint64_t sub_691B0()
{
  return v2(v0, v1);
}

uint64_t sub_691BC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_691C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, v4, a3, a4, 6LL);
}

uint64_t sub_691D4(uint64_t a1)
{
  return NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)(a1, v2, v1);
}

_WORD *sub_691E0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_691EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t type metadata accessor for SearchForTimersCATs_Async(uint64_t a1)
{
  uint64_t result = qword_FE640;
  if (!qword_FE640) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchForTimersCATs_Async);
  }
  return result;
}

uint64_t sub_69230(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_100FB8);
}

uint64_t sub_6926C()
{
  return type metadata accessor for SearchForTimersCATs_Async(0LL);
}

uint64_t sub_69274(uint64_t a1)
{
  return sub_6928C(a1, &OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_remainingTime);
}

uint64_t sub_69280(uint64_t a1)
{
  return sub_6928C(a1, &OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_duration);
}

uint64_t sub_6928C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(v2 + *a2);
  *(void *)(v2 + *a2) = a1;
  swift_retain(a1);
  swift_release(v3);
  return swift_retain(v2);
}

uint64_t sub_692C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = &v18[-v12 - 8];
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a2);
  SpeakableString.init(print:speak:)(a1, a2, a3, a4);
  uint64_t v14 = sub_1BCD8();
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v13, 0LL, 1LL, v14);
  sub_DB3C((uint64_t)v13, v4);
  uint64_t v15 = v5 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_timerIDString;
  swift_beginAccess(v5 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_timerIDString, v18, 33LL, 0LL);
  sub_1B4F4(v4, v15);
  swift_endAccess(v18);
  return swift_retain();
}

uint64_t sub_693D4()
{
  return v0;
}

uint64_t sub_69460()
{
  return 0x69542E72656D6974LL;
}

uint64_t sub_69480(uint64_t a1)
{
  *(void *)(v1 + 16) = 0LL;
  uint64_t v4 = a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_label;
  sub_6A2D0(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_label, (uint64_t)v20);
  sub_6A36C(v4);
  sub_6A2C4(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_label);
  uint64_t v5 = a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_type;
  sub_6A2D0(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_type, (uint64_t)v19);
  sub_6A36C(v5);
  sub_6A2C4(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_type);
  uint64_t v6 = a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_state;
  sub_6A2D0(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_state, (uint64_t)v18);
  sub_6A36C(v6);
  sub_6A2C4(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_state);
  *(void *)(v1 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_remainingTime) = *(void *)(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_remainingTime);
  *(void *)(v1 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_duration) = *(void *)(a1
                                                                                               + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_duration);
  uint64_t v7 = a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_action;
  sub_6A2D0(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_action, (uint64_t)v17);
  sub_6A36C(v7);
  sub_6A2C4(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_action);
  uint64_t v8 = a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_roomName;
  sub_6A2D0(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_roomName, (uint64_t)v16);
  sub_6A36C(v8);
  sub_6A2C4(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_roomName);
  uint64_t v9 = a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_deviceName;
  sub_6A2D0(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_deviceName, (uint64_t)v15);
  sub_6A36C(v9);
  sub_6A2C4(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_deviceName);
  uint64_t v10 = a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_targetDeviceType;
  sub_6A2D0(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_targetDeviceType, (uint64_t)v14);
  sub_6A36C(v10);
  sub_6A2C4(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_targetDeviceType);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isInRespondingRoom) = *(_BYTE *)(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isInRespondingRoom);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isLabelUniqueAcrossGroup) = *(_BYTE *)(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isLabelUniqueAcrossGroup);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isLabelUniqueInRoom) = *(_BYTE *)(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isLabelUniqueInRoom);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isOnlyMatchingTimerInRoom) = *(_BYTE *)(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_isOnlyMatchingTimerInRoom);
  uint64_t v11 = a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_timerIDString;
  sub_6A2D0(a1 + OBJC_IVAR____TtCC23TimerFlowDelegatePlugin10TimerTimer7Builder_timerIDString, (uint64_t)v13);
  sub_6A36C(v11);
  swift_retain();
  swift_retain();
  swift_release();
  sub_6A2C4(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_timerIDString);
  return v1;
}

unint64_t sub_696EC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_F3110, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE) {
    return 14LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_69738(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_69770 + 4 * byte_C3E90[a1]))( 0xD000000000000010LL,  0x80000000000C68F0LL);
}

void sub_69790()
{
}

uint64_t sub_697D0()
{
  return sub_6A52C();
}

void sub_697E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_697EC()
{
}

uint64_t sub_697F4(uint64_t a1)
{
  return sub_7E144(a1, *v1);
}

void sub_697FC(uint64_t a1)
{
}

unint64_t sub_69804@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_696EC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_69830@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_69738(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_69858@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_69734(a1);
  *a2 = result;
  return result;
}

void sub_6987C(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_69888(uint64_t a1)
{
  unint64_t v2 = sub_E4C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_698B0(uint64_t a1)
{
  unint64_t v2 = sub_E4C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_698D8(void (*a1)(void))
{
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

void sub_698FC(uint64_t a1)
{
  uint64_t v4 = "\b";
  sub_367C0(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = v5;
    uint64_t v8 = "\b";
    uint64_t v9 = "\b";
    uint64_t v10 = v5;
    uint64_t v11 = v5;
    uint64_t v12 = v5;
    uint64_t v13 = v5;
    uint64_t v14 = &unk_C3EF0;
    uint64_t v15 = &unk_C3EF0;
    uint64_t v16 = &unk_C3EF0;
    uint64_t v17 = &unk_C3EF0;
    uint64_t v18 = v5;
    swift_updateClassMetadata2(a1, 256LL, 15LL, &v4, a1 + 80);
  }

uint64_t sub_69994(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_69A7C(a1);
  return v3;
}

uint64_t sub_699E0()
{
  return type metadata accessor for TimerTimer.Builder(0LL);
}

void sub_699E8(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = v4[0];
    void v4[3] = "\b";
    v4[4] = "\b";
    v4[5] = v4[0];
    v4[6] = v4[0];
    v4[7] = v4[0];
    void v4[8] = v4[0];
    void v4[9] = &unk_C3EF0;
    v4[10] = &unk_C3EF0;
    v4[11] = &unk_C3EF0;
    v4[12] = &unk_C3EF0;
    v4[13] = v4[0];
    swift_updateClassMetadata2(a1, 256LL, 14LL, v4, a1 + 80);
  }

uint64_t sub_69A7C(void *a1)
{
  uint64_t v55 = v7;
  sub_433B0();
  __chkstk_darwin(v8);
  uint64_t v56 = (char *)v52 - v9;
  sub_433B0();
  __chkstk_darwin(v10);
  uint64_t v57 = (char *)v52 - v11;
  sub_433B0();
  __chkstk_darwin(v12);
  sub_6A508();
  __chkstk_darwin(v13);
  sub_6A518();
  __chkstk_darwin(v14);
  sub_5E384();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)v52 - v17;
  __chkstk_darwin(v16);
  uint64_t v58 = (char *)v52 - v19;
  uint64_t v59 = sub_67C4(&qword_FEB38);
  uint64_t v20 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  sub_1C308();
  uint64_t v62 = v2;
  *(void *)(v2 + 16) = 0LL;
  uint64_t v21 = a1[3];
  uint64_t v22 = a1[4];
  uint64_t v60 = a1;
  sub_8CFC(a1, v21);
  unint64_t v23 = sub_E4C0();
  uint64_t v24 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for TimerTimer.CodingKeys,  &type metadata for TimerTimer.CodingKeys,  v23,  v21,  v22);
  if (v24)
  {
    uint64_t v50 = v62;

    uint64_t v28 = v60;
    uint64_t v29 = type metadata accessor for TimerTimer(0LL);
    swift_deallocPartialClassInstance( v50,  v29,  *(unsigned int *)(*(void *)v50 + 48LL),  *(unsigned __int16 *)(*(void *)v50 + 52LL));
    uint64_t v51 = v28;
  }

  else
  {
    uint64_t v53 = v3;
    uint64_t v54 = v18;
    v52[1] = v1;
    v52[2] = v4;
    uint64_t v61 = v20;
    uint64_t v25 = type metadata accessor for SpeakableString(0LL);
    LOBYTE(v64) = 0;
    uint64_t v26 = sub_E538( &qword_FEB48,  (uint64_t (*)(uint64_t))&type metadata accessor for SpeakableString,  (uint64_t)&protocol conformance descriptor for SpeakableString);
    uint64_t v27 = v59;
    sub_6A32C(v25, (uint64_t)&v64, v59, v25, v26);
    uint64_t v31 = v62;
    sub_6A550(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_label);
    sub_6A404(1);
    sub_6A32C(v25, v32, v27, v25, v26);
    sub_6A550(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_type);
    sub_6A404(2);
    uint64_t v33 = v53;
    uint64_t v58 = 0LL;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, v34, v59, v25, v26);
    uint64_t v54 = (char *)v26;
    sub_DB3C(v33, v31 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_state);
    uint64_t v35 = type metadata accessor for DialogDuration(0LL);
    char v63 = 3;
    uint64_t v36 = sub_E538( &qword_FEB50,  (uint64_t (*)(uint64_t))&type metadata accessor for DialogDuration,  (uint64_t)&protocol conformance descriptor for DialogDuration);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v35, &v63, v59, v35, v36);
    *(void *)(v31 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_remainingTime) = v64;
    char v63 = 4;
    sub_6A2FC(v35, (uint64_t)&v63, v59, v35);
    *(void *)(v31 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_duration) = v64;
    sub_6A404(5);
    uint64_t v37 = v59;
    sub_6A2FC(v25, v38, v59, v25);
    sub_6A3D8(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_action);
    sub_6A404(6);
    sub_6A2DC(v39, v40);
    sub_6A3D8(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_roomName);
    sub_6A404(7);
    sub_6A2DC(v41, v42);
    sub_6A3D8(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_deviceName);
    sub_6A404(8);
    sub_6A2DC(v43, v44);
    sub_6A3D8(OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_targetDeviceType);
    LOBYTE(v64) = 9;
    uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)(&v64, v37);
    sub_6A44C(v45, OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isInRespondingRoom);
    uint64_t v46 = sub_6A338(10);
    sub_6A44C(v46, OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isLabelUniqueAcrossGroup);
    uint64_t v47 = sub_6A338(11);
    sub_6A44C(v47, OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isLabelUniqueInRoom);
    uint64_t v48 = sub_6A338(12);
    sub_6A44C(v48, OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_isOnlyMatchingTimerInRoom);
    sub_6A404(13);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, v49, v59, v25, v54);
    sub_6A4B4();
    uint64_t v50 = v62;
    sub_DB3C(v55, v62 + OBJC_IVAR____TtC23TimerFlowDelegatePlugin10TimerTimer_timerIDString);
    uint64_t v51 = v60;
  }

  _s20HandleIntentStrategyVwxx_0(v51);
  return v50;
}

uint64_t sub_6A11C()
{
  return sub_69460();
}

uint64_t sub_6A130@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_69994(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_6A158()
{
  return sub_E538(&qword_FEB28, type metadata accessor for TimerTimer, (uint64_t)&unk_C3F38);
}

uint64_t sub_6A184()
{
  return sub_E538(&qword_FEB30, type metadata accessor for TimerTimer, (uint64_t)&unk_C3F10);
}

uint64_t sub_6A1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_67C4(&qword_FBD98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_6A1F8(uint64_t a1)
{
  uint64_t v2 = sub_67C4(&qword_FBD98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for TimerTimer.CodingKeys()
{
  return &type metadata for TimerTimer.CodingKeys;
}

uint64_t sub_6A254@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(v5 - 72) = a2;
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, v5 - 72, v2, v3, v4);
}

uint64_t sub_6A274(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_6A284@<X0>(uint64_t a1@<X8>)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v2 + a1, 1LL, 1LL, v1);
}

uint64_t sub_6A298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_6A2A4@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(v3 - 72) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 72, v2);
}

uint64_t sub_6A2BC@<X0>(uint64_t a1@<X8>)
{
  return sub_6A1F8(v1 + a1);
}

uint64_t sub_6A2C4@<X0>(uint64_t a1@<X8>)
{
  return sub_DB3C(v2, v1 + a1);
}

uint64_t sub_6A2D0(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t sub_6A2DC(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v4, a2, v2, v4, v3);
}

uint64_t sub_6A2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, v4);
}

void *sub_6A30C()
{
  uint64_t v2 = *(void **)(v1 - 88);
  v2[3] = v0;
  return sub_DB90(v2);
}

uint64_t sub_6A318()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 104) + 8LL))(v0, *(void *)(v1 - 120));
}

uint64_t sub_6A32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_6A338@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 72, *(void *)(v1 - 120));
}

void sub_6A350()
{
  *(_DWORD *)(v0 - 120) = 0;
  *(_DWORD *)(v0 - 104) = 0;
}

uint64_t sub_6A36C(uint64_t a1)
{
  return sub_6A1B0(a1, v1);
}

uint64_t sub_6A374()
{
  return 0x6E696E69616D6572LL;
}

  ;
}

uint64_t sub_6A3A8@<X0>(uint64_t a1@<X8>)
{
  return sub_6A1F8(v1 + a1);
}

uint64_t sub_6A3B0()
{
  return 0x614E656369766564LL;
}

uint64_t sub_6A3CC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_6A3D8@<X0>(uint64_t a1@<X8>)
{
  return sub_DB3C(v2, v1 + a1);
}

void sub_6A3E4()
{
  *(_DWORD *)(v0 - 120) = 1;
}

void sub_6A404(char a1@<W8>)
{
  *(_BYTE *)(v1 - 72) = a1;
}

uint64_t sub_6A410()
{
  return 0x656D614E6D6F6F72LL;
}

uint64_t sub_6A428()
{
  return 0x6E6F697461727564LL;
}

  ;
}

uint64_t sub_6A44C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(*(void *)(v2 - 96) + a2) = result & 1;
  return result;
}

uint64_t sub_6A45C@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 - 96) + a1;
}

void sub_6A468()
{
  *(_DWORD *)(v0 - 120) = 0;
  *(_DWORD *)(v0 - 104) = 0;
}

void sub_6A484()
{
  *(_DWORD *)(v0 - 120) = 0;
  *(_DWORD *)(v0 - 104) = 0;
}

uint64_t sub_6A4A0()
{
  return 0x6E6F69746361LL;
}

uint64_t sub_6A4B4()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 104) + 8LL))(v0, *(void *)(v1 - 120));
}

uint64_t sub_6A4C8()
{
  return 0x6574617473LL;
}

uint64_t sub_6A4DC()
{
  return 0x6C6562616CLL;
}

uint64_t sub_6A4F0@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

uint64_t sub_6A4F8()
{
  return 1701869940LL;
}

  ;
}

  ;
}

uint64_t sub_6A52C()
{
  return 0x53444972656D6974LL;
}

uint64_t sub_6A550@<X0>(uint64_t a1@<X8>)
{
  return sub_DB3C(v2, v1 + a1);
}

  ;
}

ValueMetadata *_s25NeedsConfirmationStrategyVMa_0()
{
  return &_s25NeedsConfirmationStrategyVN_0;
}

uint64_t sub_6A578()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FEB88);
  sub_5474(v0, (uint64_t)qword_FEB88);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_6A5C0()
{
  uint64_t v0 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static SiriTimeFeatureFlagsImpl.instance.getter(v2);
  Swift::Bool v5 = SiriTimeFeatureFlagsImpl.isCrossDeviceEnabled()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (v5)
  {
    uint64_t v6 = sub_67C4(&qword_FEC08);
    uint64_t v7 = (void *)ParameterResolutionRecord.intent.getter(v6);
    id v8 = [v7 targetTimer];

    id v9 = [v8 shouldMatchAny];
    sub_1E6A8();
    v10.super.super.Class isa = NSNumber.init(integerLiteral:)(1LL).super.super.isa;
    Class isa = v10.super.super.isa;
    if (v9)
    {
      id v12 = v9;
      char v13 = static NSObject.== infix(_:_:)(v12, isa);

      if ((v13 & 1) != 0)
      {
        uint64_t v14 = (void *)ParameterResolutionRecord.intent.getter(v6);
        id v15 = [v14 targetingInfo];

        if (!v15)
        {
          if (qword_FB238 != -1) {
            swift_once(&qword_FB238, sub_6A578);
          }
          uint64_t v16 = type metadata accessor for Logger(0LL);
          uint64_t v17 = sub_5474(v16, (uint64_t)qword_FEB88);
          uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
          os_log_type_t v19 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v18, v19))
          {
            uint64_t v21 = 1LL;
            goto LABEL_16;
          }

          uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v20 = 0;
          _os_log_impl(&dword_0, v18, v19, "ResolveRecord indicates we are searching for a room confirmation", v20, 2u);
          uint64_t v21 = 1LL;
          goto LABEL_14;
        }
      }
    }

    else
    {
    }
  }

  if (qword_FB238 != -1) {
    swift_once(&qword_FB238, sub_6A578);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_5474(v22, (uint64_t)qword_FEB88);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v18, v24))
  {
    uint64_t v21 = 0LL;
    goto LABEL_16;
  }

  uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v20 = 0;
  _os_log_impl(&dword_0, v18, v24, "ResolveRecord not searching for room confirmation", v20, 2u);
  uint64_t v21 = 0LL;
LABEL_14:
  swift_slowDealloc(v20, -1LL, -1LL);
LABEL_16:

  return v21;
}

uint64_t sub_6A880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = v7 - v6;
  sub_67C4(&qword_FBDB8);
  sub_1BCE0();
  __chkstk_darwin(v9);
  sub_1C308();
  uint64_t v12 = v11 - v10;
  if (qword_FB238 != -1) {
    swift_once(&qword_FB238, sub_6A578);
  }
  uint64_t v13 = sub_1BD34();
  sub_5474(v13, (uint64_t)qword_FEB88);
  sub_1BD20();
  os_log_type_t v14 = sub_1BCD0();
  if (os_log_type_enabled(v2, v14))
  {
    id v15 = (uint8_t *)sub_1B9DC();
    *(_WORD *)id v15 = 0;
    sub_1BBEC(&dword_0, v2, v14, "ResumeTimer.NeedsConfirmationStrategy.actionForInput() called)", v15);
    sub_1B904((uint64_t)v15);
  }

  uint64_t v16 = type metadata accessor for HALTimerDeviceContext(0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v12, 1LL, 1LL, v16);
  char v17 = sub_6A5C0();
  uint64_t v18 = type metadata accessor for DecideAction.PromptExpectation(0LL);
  os_log_type_t v19 = (unsigned int *)&enum case for DecideAction.PromptExpectation.roomConfirmation(_:);
  if ((v17 & 1) == 0) {
    os_log_type_t v19 = (unsigned int *)&enum case for DecideAction.PromptExpectation.confirmation(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104LL))(v8, *v19, v18);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v8, 0LL, 1LL, v18);
  sub_3B620(a1, v12, 0, v8, a2);
  sub_2F344(v8, (uint64_t *)&unk_FCC70);
  return sub_2F344(v12, &qword_FBDB8);
}

uint64_t sub_6AA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  void v4[8] = a2;
  uint64_t v5 = sub_67C4(&qword_FBDB0);
  v4[11] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ActionForInput(0LL);
  v4[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[13] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v4[14] = swift_task_alloc(v8);
  v4[15] = swift_task_alloc(v8);
  return swift_task_switch(sub_6AAF4, 0LL, 0LL);
}

uint64_t sub_6AAF4()
{
  if (qword_FB238 != -1) {
    swift_once(&qword_FB238, sub_6A578);
  }
  uint64_t v1 = sub_1BD34();
  sub_5474(v1, (uint64_t)qword_FEB88);
  uint64_t v2 = (os_log_s *)sub_1BD20();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_1B9DC();
    *(_WORD *)uint64_t v4 = 0;
    sub_1BBEC(&dword_0, v2, v3, "ResumeTimer.NeedsConfirmationStrategy.parseConfirmationResponse() called", v4);
    sub_1B904((uint64_t)v4);
  }

  uint64_t v5 = sub_67C4(&qword_FEC08);
  uint64_t v6 = (void *)ParameterResolutionRecord.result.getter(v5);
  id v7 = [v6 itemToConfirm];
  _bridgeAnyObjectToAny(_:)(v7);
  swift_unknownObjectRelease(v7);
  uint64_t v8 = type metadata accessor for SiriTimer(0LL);
  if (swift_dynamicCast(v0 + 6, v0 + 2, (char *)&type metadata for Any + 8, v8, 6LL))
  {
    uint64_t v9 = (void *)v0[6];
    type metadata accessor for ResumeTimerIntent(0LL);
    id v10 = v9;
    uint64_t v11 = (void *)sub_A1FC0(v10, [v10 shouldMatchAny]);
    if ((sub_6A5C0() & 1) != 0)
    {
      uint64_t v12 = v0[8];
      sub_70A20();
      sub_71C70(v12, v13, v14, v15, v16, v17, v18, v19, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49);
      __asm { BR              X10 }
    }

    uint64_t v33 = v0[11];
    uint64_t v34 = enum case for ConfirmationResponse.confirmed(_:);
    uint64_t v35 = type metadata accessor for ConfirmationResponse(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104LL))(v33, v34, v35);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v33, 0LL, 1LL, v35);
    id v36 = v11;
    INIntent.withEndpointId.getter();

    sub_6CD4C(v33);
    swift_task_dealloc();
    sub_1BABC();
    sub_1B86C();
    uint64_t v32 = (uint64_t (*)(void))sub_1BB00();
  }

  else
  {
    uint64_t v21 = sub_1B9A8();
    uint64_t v23 = sub_1B9B0((unint64_t *)&qword_FCC50, v22, (uint64_t)&unk_C4340);
    uint64_t v24 = sub_1B74C(v21, v23);
    _BYTE *v25 = 3;
    sub_64328(v24, (uint64_t)v25, v26, v27, v28, v29, v30, v31);

    sub_1BABC();
    sub_1BA14();
    sub_1BA38();
    uint64_t v32 = (uint64_t (*)(void))v0[1];
  }

  return v32();
}

uint64_t sub_6B054()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FEC1C);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = sub_6CCEC(v1);
  return sub_6AA5C(v2, v3, v4);
}

uint64_t sub_6B0AC()
{
  if (!v0) {
    return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_6B0E8()
{
  uint64_t v2 = sub_67C4(&qword_FBF48);
  sub_207C0(116LL, 0x80000000000C8D20LL, v3, v2, (uint64_t)&protocol self-conformance witness table for Error);
  sub_207B4();
  swift_errorRelease(v0);
  return sub_2075C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_6B150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[12] = a1;
  v3[13] = a3;
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v3[14] = v4;
  v3[15] = *(void *)(v4 - 8);
  v3[16] = sub_1B970();
  v3[17] = sub_1B970();
  v3[18] = sub_1B970();
  uint64_t v5 = type metadata accessor for CATOption(0LL);
  v3[19] = sub_1B6C8(*(void *)(v5 - 8));
  uint64_t v6 = sub_1BD34();
  v3[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[21] = v7;
  v3[22] = sub_1B6C8(v7);
  uint64_t v8 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[24] = v9;
  v3[25] = sub_1B6C8(v9);
  uint64_t v10 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[26] = v10;
  v3[27] = *(void *)(v10 - 8);
  v3[28] = sub_1B970();
  v3[29] = sub_1B970();
  v3[30] = sub_1B970();
  uint64_t v11 = type metadata accessor for NLContextUpdate(0LL);
  v3[31] = v11;
  v3[32] = *(void *)(v11 - 8);
  v3[33] = sub_1B970();
  v3[34] = sub_1B970();
  v3[35] = sub_1B970();
  uint64_t v12 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v3[36] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[37] = v13;
  v3[38] = sub_1B6C8(v13);
  uint64_t v14 = type metadata accessor for DialogPhase(0LL);
  v3[39] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[40] = v15;
  v3[41] = sub_1B6C8(v15);
  sub_1B9B8();
  return sub_1B758();
}

#error "6B5D8: call analysis failed (funcsize=543)"
uint64_t sub_6BB98(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v18 = (void *)*v2;
  uint64_t v4 = v18;
  sub_1BC0C(&v18);
  v4[47] = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    sub_1B9B8();
    return swift_task_switch(v5, v6, v7);
  }

  else
  {
    v4[48] = a1;
    uint64_t v9 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)[1]);
    v4[49] = v9;
    *uint64_t v9 = v2;
    v9[1] = sub_6BC4C;
    sub_69130();
    return DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)( v10,  v11,  v12,  v13,  v14,  v15,  v16,  v17);
  }

uint64_t sub_6BC4C()
{
  uint64_t v1 = *(void **)(v0 + 384);
  sub_2B4F0(*(void *)(v0 + 392));

  sub_1B9B8();
  return sub_1B758();
}

#error "6BD08: call analysis failed (funcsize=49)"
uint64_t sub_6BD48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sub_2F748();
  sub_1BC0C(v4);
  v3[53] = v1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  if (v1)
  {
    sub_1B9B8();
    return sub_2B44C();
  }

  else
  {
    v3[54] = v0;
    uint64_t v6 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)[1]);
    v3[55] = v6;
    void *v6 = v2;
    v6[1] = sub_6BDF4;
    sub_69130();
    return DialogExecutionResult.generateOutput(dialogPhase:context:measure:sessionID:responseViewId:)( v7,  v8,  v9,  v10,  v11,  v12,  v13,  v14);
  }

uint64_t sub_6BDF4()
{
  uint64_t v1 = *(void **)(v0 + 432);
  sub_2B4F0(*(void *)(v0 + 440));

  sub_1B9B8();
  return sub_1B758();
}

#error "6BE8C: call analysis failed (funcsize=42)"
uint64_t sub_6BED4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;
  sub_2F748();
  sub_1BC0C(v3);
  v2[59] = v1;
  swift_task_dealloc();
  uint64_t v4 = v2[56];
  swift_bridgeObjectRelease(v2[57]);
  swift_bridgeObjectRelease(v4);
  if (v1)
  {
    sub_1B9B8();
    return sub_2B44C();
  }

  else
  {
    v2[62] = v0;
    uint64_t v6 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[63] = v6;
    sub_6CC3C(v6);
    return sub_2F668();
  }

uint64_t sub_6BF60()
{
  v2[61] = v1;
  swift_task_dealloc();
  uint64_t v4 = v2[56];
  swift_bridgeObjectRelease(v2[57]);
  swift_bridgeObjectRelease(v4);
  if (v1)
  {
    sub_1B9B8();
    return sub_2B44C();
  }

  else
  {
    v2[62] = v0;
    uint64_t v6 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[63] = v6;
    sub_6CC3C(v6);
    return sub_2F668();
  }

uint64_t sub_6BFEC()
{
  *uint64_t v2 = *v1;
  *(void *)(v3 + 512) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

#error "6C0B4: call analysis failed (funcsize=48)"
uint64_t sub_6C0FC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  sub_1BBF4();
  *uint64_t v2 = *v1;
  *(void *)(v3 + 528) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

#error "6C1A8: call analysis failed (funcsize=39)"
uint64_t sub_6C1E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v4 = *v1;
  uint64_t v2 = v4;
  sub_1BC0C(&v4);
  *(void *)(v2 + 552) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_1B9B8();
  return sub_2B44C();
}

#error "6C2A8: call analysis failed (funcsize=40)"
#error "6C328: call analysis failed (funcsize=35)"
#error "6C3B4: call analysis failed (funcsize=35)"
#error "6C42C: call analysis failed (funcsize=30)"
#error "6C4A4: call analysis failed (funcsize=30)"
#error "6C5A0: call analysis failed (funcsize=51)"
#error "6C67C: call analysis failed (funcsize=65)"
#error "6C794: call analysis failed (funcsize=67)"
uint64_t sub_6C7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sub_67C4(&qword_FBD98);
  sub_1BCE0();
  __chkstk_darwin(v10);
  sub_1C308();
  uint64_t v13 = v12 - v11;
  swift_bridgeObjectRetain(a3);
  SpeakableString.init(serializedValue:)(a2, a3);
  type metadata accessor for SpeakableString(0LL);
  sub_69174();
  uint64_t v14 = type metadata accessor for ResumeTimerPromptAllParameters(0LL);
  sub_1B4F4(v13, a1 + *(int *)(v14 + 20));
  swift_bridgeObjectRetain(a5);
  SpeakableString.init(serializedValue:)(a4, a5);
  sub_69174();
  return sub_1B4F4(v13, a1);
}

uint64_t sub_6C8B4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FEC04);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = sub_6CCEC(v1);
  return sub_6B150(v2, v3, v4);
}

uint64_t sub_6C90C()
{
  if (!v0) {
    return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_6C948()
{
  uint64_t v2 = sub_67C4(&qword_FBF48);
  sub_207C0(124LL, 0x80000000000C8CA0LL, v3, v2, (uint64_t)&protocol self-conformance witness table for Error);
  sub_207B4();
  swift_errorRelease(v0);
  return sub_2075C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_6C9B4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FEC14);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_C630;
  return sub_6B054();
}

uint64_t sub_6CA1C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FEBFC);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2A040;
  return sub_6C8B4();
}

unint64_t sub_6CA88()
{
  unint64_t result = qword_FEBB0[0];
  if (!qword_FEBB0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_C413C, &_s25NeedsConfirmationStrategyVN_0);
    atomic_store(result, qword_FEBB0);
  }

  return result;
}

uint64_t sub_6CAC4()
{
  return swift_task_dealloc(*(void *)(v0 + 328));
}

void sub_6CB04()
{
  uint64_t v2 = *(void **)(v0 + 352);
  *(void *)(v1 - 80) = *(void *)(v0 + 128);
}

void sub_6CB68(void *a1@<X8>)
{
  *(void *)(v2 - 80) = *(void *)(v1 + 128);
}

uint64_t sub_6CB90()
{
  return swift_task_dealloc(*(void *)(v0 + 328));
}

uint64_t sub_6CBD0()
{
  return type metadata accessor for ABCReport(0LL);
}

uint64_t sub_6CBFC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void sub_6CC0C()
{
}

uint64_t sub_6CC30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a13, a12);
}

uint64_t sub_6CC3C(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v3 + 96);
}

uint64_t sub_6CC60(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v1, v2, a1);
}

uint64_t sub_6CC78()
{
  return swift_task_dealloc(*(void *)(v0 - 80));
}

uint64_t sub_6CC80(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v3, a2, v2);
}

  ;
}

BOOL sub_6CCAC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_6CCBC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(v1);
}

uint64_t sub_6CCCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 8))(v10, a10);
}

uint64_t sub_6CCDC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_6CCEC(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return v3;
}

id sub_6CD04(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

id sub_6CD0C()
{
  return [v0 *(SEL *)(v1 + 1544)];
}

  ;
}

uint64_t sub_6CD2C()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_6CD38()
{
  return v2(v0, v1);
}

uint64_t sub_6CD44()
{
  return Logger.logObject.getter();
}

uint64_t sub_6CD4C(uint64_t a1)
{
  return NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)(a1, v2, v1);
}

uint64_t sub_6CD58(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_6CD64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a10, a9);
}

uint64_t sub_6CD70(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for SetTimerAttributeCATs_Async,  (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:),  &qword_1010A8);
}

uint64_t sub_6CD8C(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for SetTimerAttributeCATsSimple,  (uint64_t (*)(char *, void))&CATWrapperSimple.__allocating_init(options:globals:),  &qword_1010B0);
}

uint64_t sub_6CDA8(uint64_t a1)
{
  return sub_2C164( a1,  (void (*)(void))type metadata accessor for SetTimerAttributeCATPatternsExecutor,  (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:),  &qword_1010B8);
}

void sub_6CDC4()
{
  uint64_t v363 = v1;
  uint64_t v3 = v2;
  HIDWORD(v344) = v4;
  uint64_t v353 = v5;
  uint64_t v385 = v6;
  uint64_t v379 = v7;
  uint64_t v8 = sub_75B00();
  sub_43628(v8, (uint64_t)&v373);
  uint64_t v341 = v9;
  sub_17B6C();
  __chkstk_darwin(v10);
  uint64_t v377 = (char *)&v334 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_756E4();
  sub_43628(v12, (uint64_t)&v369);
  uint64_t v337 = v13;
  sub_17B6C();
  __chkstk_darwin(v14);
  sub_17D14();
  uint64_t v16 = sub_7567C(v15);
  sub_43628(v16, (uint64_t)&v376);
  uint64_t v339 = v17;
  sub_17B6C();
  __chkstk_darwin(v18);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v19);
  sub_433A0();
  __chkstk_darwin(v20);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v21);
  sub_436A0();
  uint64_t v343 = v22;
  uint64_t v346 = sub_755F4();
  sub_17B6C();
  __chkstk_darwin(v23);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v24);
  uint64_t v26 = sub_43410((uint64_t)&v334 - v25);
  uint64_t v27 = type metadata accessor for NLIntent(v26);
  sub_43628(v27, (uint64_t)&v381);
  uint64_t v348 = v28;
  sub_17B6C();
  __chkstk_darwin(v29);
  sub_17D14();
  uint64_t v31 = sub_43410(v30);
  uint64_t v360 = type metadata accessor for Parse(v31);
  uint64_t v364 = *(void *)(v360 - 8);
  sub_17B6C();
  __chkstk_darwin(v32);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v33);
  sub_436A0();
  uint64_t v35 = sub_43410(v34);
  uint64_t v370 = type metadata accessor for ActionForInput(v35);
  uint64_t v358 = *(void *)(v370 - 8);
  sub_17B6C();
  __chkstk_darwin(v36);
  sub_17D14();
  uint64_t v352 = v37;
  uint64_t v365 = sub_67C4((uint64_t *)&unk_FCC80);
  sub_17B6C();
  __chkstk_darwin(v38);
  sub_17D14();
  uint64_t v378 = v39;
  sub_67C4(&qword_FEC80);
  sub_17B6C();
  __chkstk_darwin(v40);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v41);
  sub_43404();
  uint64_t v384 = (void (*)(uint64_t, uint64_t))v42;
  sub_433B0();
  __chkstk_darwin(v43);
  sub_436A0();
  uint64_t v45 = sub_43410(v44);
  uint64_t v46 = type metadata accessor for DecideAction.PromptExpectation(v45);
  uint64_t v47 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  sub_17FBC(v48, v334);
  uint64_t v49 = (uint64_t)&qword_FCC90;
  uint64_t v50 = sub_67C4(&qword_FCC90);
  sub_17B6C();
  __chkstk_darwin(v51);
  sub_433A0();
  __chkstk_darwin(v52);
  sub_43404();
  uint64_t v369 = v53;
  sub_433B0();
  __chkstk_darwin(v54);
  sub_43404();
  uint64_t v373 = v55;
  sub_433B0();
  __chkstk_darwin(v56);
  sub_43404();
  uint64_t v371 = v57;
  sub_433B0();
  __chkstk_darwin(v58);
  uint64_t v60 = (char *)&v334 - v59;
  sub_67C4((uint64_t *)&unk_FCC70);
  sub_17B6C();
  __chkstk_darwin(v61);
  sub_433A0();
  __chkstk_darwin(v62);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v63);
  sub_433A0();
  __chkstk_darwin(v64);
  sub_43404();
  uint64_t v368 = v65;
  sub_433B0();
  __chkstk_darwin(v66);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v67);
  sub_43404();
  uint64_t v372 = v68;
  sub_433B0();
  __chkstk_darwin(v69);
  sub_43404();
  uint64_t v375 = v70;
  sub_433B0();
  __chkstk_darwin(v71);
  sub_43404();
  uint64_t v367 = v72;
  sub_433B0();
  __chkstk_darwin(v73);
  sub_75A8C();
  uint64_t v75 = __chkstk_darwin(v74);
  uint64_t v77 = (char *)&v334 - v76;
  __chkstk_darwin(v75);
  uint64_t v79 = (char *)&v334 - v78;
  uint64_t v80 = *(void (**)(void))(v47 + 104);
  HIDWORD(v376) = enum case for DecideAction.PromptExpectation.roomConfirmation(_:);
  uint64_t v382 = v47;
  uint64_t v383 = v80;
  v80((char *)&v334 - v78);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v79, 0LL, 1LL, v46);
  uint64_t v380 = v3;
  uint64_t v381 = (uint64_t *)v50;
  uint64_t v81 = (uint64_t)&v60[*(int *)(v50 + 48)];
  uint64_t v82 = sub_75C64();
  sub_756A8(v82, v83);
  sub_756A8((uint64_t)v79, v81);
  sub_490E4((uint64_t)v60);
  if (v88)
  {
    sub_2B5B8((uint64_t)v79);
    sub_490E4(v81);
    if (v85) {
      uint64_t v86 = (uint64_t *)&unk_FCC70;
    }
    else {
      uint64_t v86 = &qword_FCC90;
    }
    if (v85) {
      char v87 = -1;
    }
    else {
      char v87 = 0;
    }
  }

  else
  {
    sub_75C14((uint64_t)v60, v84, (uint64_t *)&unk_FCC70);
    sub_490E4(v81);
    if (v88)
    {
      sub_2B374((uint64_t)v79, (uint64_t *)&unk_FCC70);
      sub_17D0C((uint64_t)v77, *(uint64_t (**)(uint64_t, uint64_t))(v382 + 8));
      char v87 = 0;
      uint64_t v86 = &qword_FCC90;
    }

    else
    {
      uint64_t v89 = v374;
      sub_75590(v374, v81, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v382 + 32));
      sub_11718( &qword_FCD08,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
      char v87 = sub_7569C((uint64_t)v77, v89, v91, v90);
      sub_7563C(v89);
      uint64_t v86 = (uint64_t *)&unk_FCC70;
      sub_2B374((uint64_t)v79, (uint64_t *)&unk_FCC70);
      sub_7563C((uint64_t)v77);
    }
  }

  os_log_type_t v92 = v381;
  uint64_t v93 = v384;
  sub_2B374((uint64_t)v60, v86);
  sub_71E58( v385,  v87 & 1,  v94,  v95,  v96,  v97,  v98,  v99,  v334,  v335,  v336,  v337,  v338,  v339,  v340,  v341,  v342,  v343,  v344,  v345);
  uint64_t v100 = v380;
  if ((v101 & 1) == 0)
  {
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v113 = sub_1BD34();
    sub_39658(v113, (uint64_t)qword_FEC20);
    os_log_type_t v114 = sub_2BFB4();
    if (!sub_329F4(v114)) {
      goto LABEL_23;
    }
    NSNumber v115 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v115);
    char v118 = "decideActionForInput(input:type:halInfo: ... no valid timer input";
    goto LABEL_22;
  }

  sub_757D0(v0, enum case for DecideAction.PromptExpectation.confirmation(_:));
  sub_75644(v0);
  uint64_t v102 = v371;
  uint64_t v104 = v371 + v103;
  sub_75BD4(v100, v371);
  sub_75BD4(v0, v104);
  uint64_t v105 = sub_490E4(v102);
  if (v88)
  {
    sub_7590C(v105, (uint64_t *)&unk_FCC70);
    uint64_t v107 = sub_490E4(v104);
    uint64_t v108 = v377;
    uint64_t v109 = v372;
    if (v88)
    {
      sub_2B990(v102);
      uint64_t v110 = sub_75A7C();
      sub_754CC(v110, v111, (uint64_t *)&unk_FCC70);
      goto LABEL_33;
    }

    goto LABEL_27;
  }

  uint64_t v119 = v367;
  sub_75A24(v102, v106, (uint64_t *)&unk_FCC70);
  uint64_t v121 = sub_490E4(v104);
  uint64_t v109 = v372;
  if (v120)
  {
    sub_7590C(v121, (uint64_t *)&unk_FCC70);
    uint64_t v122 = sub_757BC();
    uint64_t v107 = sub_17D0C(v122, v123);
    uint64_t v108 = v377;
LABEL_27:
    sub_75C3C(v107, &qword_FCC90);
    uint64_t v124 = sub_75A7C();
    sub_754CC(v124, v125, v126);
    goto LABEL_29;
  }

  uint64_t v127 = v374;
  sub_75590(v374, v104, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v382 + 32));
  sub_11718( &qword_FCD08,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
  char v130 = sub_7569C(v119, v127, v129, v128);
  sub_7563C(v127);
  sub_2B374(v0, (uint64_t *)&unk_FCC70);
  sub_7563C(v119);
  uint64_t v93 = v384;
  sub_2B374(v102, (uint64_t *)&unk_FCC70);
  uint64_t v131 = sub_75A7C();
  sub_75BD4(v131, v132);
  uint64_t v108 = v377;
  if ((v130 & 1) != 0) {
    goto LABEL_33;
  }
LABEL_29:
  uint64_t v133 = (uint64_t)v108;
  sub_757D0(v109, HIDWORD(v376));
  sub_75644(v109);
  uint64_t v134 = v373;
  uint64_t v136 = v373 + v135;
  sub_756A8(v0, v373);
  sub_756A8(v109, v136);
  sub_490E4(v134);
  if (v88)
  {
    sub_2B5B8(v109);
    sub_2B5B8(v0);
    uint64_t v112 = sub_490E4(v136);
    uint64_t v137 = v370;
    if (!v88) {
      goto LABEL_40;
    }
LABEL_33:
    sub_7590C(v112, (uint64_t *)&unk_FCC70);
    goto LABEL_34;
  }

  uint64_t v142 = v362;
  sub_754CC(v134, v362, (uint64_t *)&unk_FCC70);
  sub_490E4(v136);
  if (v143)
  {
    sub_2B990(v109);
    sub_2B990(v0);
    sub_17D0C(v142, *(uint64_t (**)(uint64_t, uint64_t))(v382 + 8));
    uint64_t v137 = v370;
LABEL_40:
    sub_2B374(v373, &qword_FCC90);
    uint64_t v144 = v378;
    goto LABEL_41;
  }

  uint64_t v160 = v374;
  sub_75590(v374, v136, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v382 + 32));
  sub_11718( &qword_FCD08,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
  char v163 = sub_7569C(v142, v160, v162, v161);
  sub_7563C(v160);
  sub_2B5B8(v109);
  sub_2B5B8(v375);
  sub_7563C(v142);
  uint64_t v93 = v384;
  uint64_t v133 = (uint64_t)v377;
  sub_2B5B8(v134);
  uint64_t v137 = v370;
  uint64_t v144 = v378;
  if ((v163 & 1) != 0)
  {
LABEL_34:
    uint64_t v138 = v368;
    sub_757D0(v368, HIDWORD(v376));
    sub_75644(v138);
    uint64_t v139 = v369;
    uint64_t v141 = v369 + v140;
    sub_756A8(v100, v369);
    sub_756A8(v138, v141);
    sub_490E4(v139);
    if (v88)
    {
      sub_2B5B8(v138);
      sub_490E4(v141);
    }

    else
    {
      uint64_t v150 = v361;
      sub_754CC(v139, v361, (uint64_t *)&unk_FCC70);
      uint64_t v152 = sub_490E4(v141);
      if (v151)
      {
        sub_7590C(v152, (uint64_t *)&unk_FCC70);
        sub_17D0C(v150, *(uint64_t (**)(uint64_t, uint64_t))(v382 + 8));
      }

      else
      {
        uint64_t v164 = v374;
        sub_75590(v374, v141, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v382 + 32));
        sub_11718( &qword_FCD08,  (uint64_t (*)(uint64_t))&type metadata accessor for DecideAction.PromptExpectation,  (uint64_t)&protocol conformance descriptor for DecideAction.PromptExpectation);
        sub_7569C(v150, v164, v166, v165);
        sub_7563C(v164);
        sub_2B5B8(v138);
        sub_7563C(v150);
      }
    }

    sub_2B5B8(v139);
    sub_70A20();
    goto LABEL_59;
  }

void sub_6EB5C()
{
  uint64_t v3 = v2;
  uint64_t v62 = v4;
  uint64_t v64 = v5;
  uint64_t v6 = type metadata accessor for SiriKitIntentHandler(0LL);
  uint64_t v65 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  sub_17B6C();
  __chkstk_darwin(v7);
  sub_17D14();
  uint64_t v63 = v8;
  uint64_t v68 = sub_46210();
  uint64_t v9 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  sub_1C308();
  uint64_t v12 = v11 - v10;
  sub_67C4(&qword_FBDB8);
  sub_17B6C();
  __chkstk_darwin(v13);
  sub_21608();
  sub_75A8C();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v59 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v59 - v18;
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v20 = sub_1BD34();
  uint64_t v21 = sub_5474(v20, (uint64_t)qword_FEC20);
  uint64_t v67 = v3;
  sub_754CC(v3, (uint64_t)v19, &qword_FBDB8);
  sub_758B8();
  os_log_type_t v22 = sub_1BCD0();
  uint64_t v23 = v22;
  if (os_log_type_enabled(v0, v22))
  {
    uint64_t v24 = sub_1BA1C(12LL);
    uint64_t v61 = v9;
    uint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = sub_1BA1C(32LL);
    uint64_t v60 = v12;
    uint64_t v27 = v26;
    uint64_t v70 = v26;
    uint64_t v59 = v21;
    *(_DWORD *)uint64_t v25 = 136315138;
    sub_754CC((uint64_t)v19, (uint64_t)v17, &qword_FBDB8);
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v69 = sub_683C(v28, v29, &v70);
    uint64_t v21 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v25 + 4, v25 + 12);
    sub_2B758();
    sub_2B374((uint64_t)v19, &qword_FBDB8);
    sub_1E7D8( &dword_0,  v0,  (os_log_type_t)v23,  "makeIntentExecutionBehavior: Deciding execution behavior with halInfo: %s",  v25);
    sub_1E7D0(v27);
    uint64_t v30 = v27;
    uint64_t v12 = v60;
    sub_1B904(v30);
    uint64_t v31 = (uint64_t)v25;
    uint64_t v9 = v61;
    sub_1B904(v31);
  }

  else
  {
    sub_2B374((uint64_t)v19, &qword_FBDB8);
  }

  sub_754CC(v67, v1, &qword_FBDB8);
  uint64_t v32 = sub_4C720(v1, 1LL, v68);
  if (v33)
  {
    sub_7590C(v32, &qword_FBDB8);
  }

  else
  {
    uint64_t v34 = sub_75C44();
    uint64_t v36 = v35(v34);
    uint64_t v23 = HALTimerDeviceContext.firingTimers.getter(v36);
    BOOL v37 = sub_75458(v23);
    sub_2B7C4();
    if (v37
      || (uint64_t v38 = HALDeviceContext.remoteDevice.getter(v68, &protocol witness table for HALTimerDeviceContext)) == 0)
    {
      sub_75AB0();
    }

    else
    {
      uint64_t v23 = v38;
      HALTimerDeviceContext.remoteExecutionId.getter();
      uint64_t v40 = v39;
      swift_bridgeObjectRelease(v39);
      if (!v40)
      {
        id v50 = (id)v23;
        uint64_t v51 = (os_log_s *)sub_758B8();
        os_log_type_t v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = (uint8_t *)sub_1BA1C(12LL);
          uint64_t v54 = sub_1BA1C(32LL);
          uint64_t v61 = v9;
          uint64_t v55 = v54;
          uint64_t v70 = v54;
          *(_DWORD *)uint64_t v53 = 136315138;
          uint64_t v56 = DeviceUnit.identifier.getter();
          uint64_t v69 = sub_75CCC(v56, v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v53 + 4, v53 + 12);

          sub_18034();
          sub_1E7D8(&dword_0, v51, v52, "makeIntentExecutionBehavior: Handle on target device: %s", v53);
          sub_1E7D0(v55);
          uint64_t v58 = v55;
          uint64_t v9 = v61;
          sub_1B904(v58);
          sub_1B904((uint64_t)v53);
        }

        else
        {
        }

        type metadata accessor for SiriKitIntentExecutionBehavior(0LL);
        static SiriKitIntentExecutionBehavior.remoteIntentExecution(targetDevice:)(v50);

        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v68);
        goto LABEL_17;
      }

      sub_75AB0();
    }
  }

  sub_758B8();
  os_log_type_t v41 = sub_2BFB4();
  if (sub_329F4(v41))
  {
    uint64_t v42 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v42);
    sub_39644( &dword_0,  v43,  v44,  "makeIntentExecutionBehavior: No eligible devices for remote execution found. Continuing local execution.");
    sub_1B904(v21);
  }

  type metadata accessor for SiriKitIntentExecutionBehavior(0LL);
  swift_retain();
  uint64_t v45 = v62;
  uint64_t v46 = static TimerIntentHandlerRouter.getIntentHandler(intent:)(v62);
  sub_33E48(v46, &qword_FEC88, &OBJC_CLASS___INIntent_ptr);
  id v47 = v45;
  uint64_t v48 = v63;
  uint64_t v49 = sub_75D20();
  SiriKitIntentHandler.init<A>(app:intentHandler:intent:)(v49);
  static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)(v48);
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v48, v66);
LABEL_17:
  sub_17E58();
}

void sub_6F040()
{
  int v4 = v3;
  uint64_t v327 = v5;
  uint64_t v6 = sub_21530();
  sub_43628(v6, (uint64_t)&v334 + 8);
  uint64_t v305 = v7;
  sub_17B6C();
  __chkstk_darwin(v8);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v9);
  sub_433A0();
  __chkstk_darwin(v10);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v11);
  sub_436A0();
  uint64_t v303 = v12;
  uint64_t v310 = type metadata accessor for DirectInvocationUtils.Timer.URI(0LL);
  uint64_t v308 = *(void *)(v310 - 8);
  sub_17B6C();
  __chkstk_darwin(v13);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v14);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v15);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v16);
  sub_436A0();
  uint64_t v306 = v17;
  v317[0] = sub_75800();
  sub_75700();
  __chkstk_darwin(v18);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v19);
  sub_433A0();
  __chkstk_darwin(v20);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v21);
  sub_75A8C();
  __chkstk_darwin(v22);
  uint64_t v24 = (uint64_t *)&v293[-v23];
  uint64_t v25 = sub_75740();
  sub_43628(v25, (uint64_t)&v324);
  uint64_t v297 = v26;
  sub_17B6C();
  __chkstk_darwin(v27);
  sub_17D14();
  uint64_t v29 = sub_7567C(v28);
  sub_43628(v29, (uint64_t)&v329);
  uint64_t v300 = v30;
  sub_17B6C();
  __chkstk_darwin(v31);
  sub_17D14();
  uint64_t v33 = sub_43410(v32);
  uint64_t v34 = type metadata accessor for HALTimerDeviceContext(v33);
  uint64_t v318 = *(void *)(v34 - 8);
  sub_17B6C();
  __chkstk_darwin(v35);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v36);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v37);
  uint64_t v313 = &v293[-v38];
  v317[1] = sub_755F4();
  sub_17B6C();
  __chkstk_darwin(v39);
  sub_433A0();
  __chkstk_darwin(v40);
  sub_436A0();
  uint64_t v322 = v41;
  uint64_t v42 = sub_75818();
  uint64_t v323 = *(void *)(v42 - 8);
  uint64_t v324 = v42;
  sub_17B6C();
  __chkstk_darwin(v43);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v44);
  sub_436A0();
  uint64_t v321 = v45;
  uint64_t v46 = sub_756D8();
  uint64_t v328 = *(uint8_t **)(v46 - 8);
  uint64_t v329 = (uint64_t *)v46;
  sub_17B6C();
  __chkstk_darwin(v47);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v48);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v49);
  sub_436A0();
  uint64_t v326 = v50;
  uint64_t v319 = sub_67C4(&qword_FBDB8);
  sub_17B6C();
  __chkstk_darwin(v51);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v52);
  sub_433A0();
  __chkstk_darwin(v53);
  sub_43404();
  uint64_t v320 = v54;
  sub_433B0();
  uint64_t v56 = __chkstk_darwin(v55);
  uint64_t v58 = (uint64_t)&v293[-v57];
  __chkstk_darwin(v56);
  uint64_t v60 = &v293[-v59];
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v61 = sub_1BD34();
  sub_75BA4(v61, (uint64_t)qword_FEC20);
  uint64_t v325 = v4;
  sub_75C14((uint64_t)v4, v62, &qword_FBDB8);
  uint64_t v311 = v0;
  Logger.logObject.getter(v63);
  os_log_type_t v64 = sub_1BCD0();
  if (os_log_type_enabled(v0, v64))
  {
    uint64_t v316 = v1;
    uint64_t v65 = sub_1BA1C(12LL);
    uint64_t v309 = v34;
    uint64_t v66 = (uint8_t *)v65;
    uint64_t v67 = sub_1BA1C(32LL);
    *(void *)&__int128 v333 = v67;
    *(_DWORD *)uint64_t v66 = 136315138;
    uint64_t v1 = (uint64_t)(v66 + 4);
    sub_754CC((uint64_t)v60, v58, &qword_FBDB8);
    uint64_t v68 = String.init<A>(describing:)();
    uint64_t v70 = sub_75C00(v68, v69);
    sub_1E7E0(v70);
    sub_75CC0();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v72, v73, v66 + 12);
    sub_1BC04();
    sub_2B374((uint64_t)v60, &qword_FBDB8);
    sub_1E7D8(&dword_0, v0, v64, "TimerFlowUtils makeIntentFromParse() called with halInfo: %s", v66);
    sub_1E7D0(v67);
    sub_1B904(v67);
    uint64_t v74 = (uint64_t)v66;
    uint64_t v34 = v309;
    sub_1B904(v74);
  }

  else
  {
    sub_2B374((uint64_t)v60, &qword_FBDB8);
  }

  uint64_t v75 = v327;
  uint64_t v76 = v328;
  uint64_t v77 = (void (*)(uint64_t *, void *, uint64_t *))*((void *)v328 + 2);
  uint64_t v78 = v326;
  uint64_t v79 = v329;
  v77(v326, v327, v329);
  int v80 = (*((uint64_t (**)(uint64_t *, uint64_t *))v76 + 11))(v78, v79);
  if (v80 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_755A8();
    uint64_t v82 = v323;
    uint64_t v81 = v324;
    uint64_t v83 = v321;
    sub_75590(v321, (uint64_t)v78, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v323 + 32));
    uint64_t v84 = v322;
    sub_75590(v322, v83, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 16));
    uint64_t v85 = v320;
    sub_75A24((uint64_t)v325, v86, &qword_FBDB8);
    uint64_t v87 = sub_4C720(v85, 1LL, v34);
    if (v111)
    {
      sub_75AA8(v87, &qword_FBDB8);
      sub_96BA4();
    }

    else
    {
      uint64_t v94 = v318;
      uint64_t v95 = v313;
      uint64_t v96 = sub_59EF4((uint64_t)v313, v85, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v318 + 32));
      HALTimerDeviceContext.toDismissTimerIntent.getter(v96);
      if (qword_FB318 != -1) {
        swift_once(&qword_FB318, sub_9707C);
      }
      sub_11718((unint64_t *)&qword_FD600, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
      uint64_t v97 = sub_75B48();
      uint64_t v100 = IntentNodeTraversable.value<A>(forNode:)(v97, v98, v99);
      if (!(_BYTE)v333)
      {
        sub_33E48(v100, (unint64_t *)&qword_FBE50, &OBJC_CLASS___NSNumber_ptr);
        Class isa = sub_690FC().super.super.isa;
        sub_32A6C((uint64_t)isa, "setSkipConfirmation:");
      }

      sub_433D8((uint64_t)v95, *(uint64_t (**)(uint64_t, uint64_t))(v94 + 8));
    }

    sub_1E6E4(v84);
    uint64_t v102 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
    uint64_t v103 = v83;
    goto LABEL_54;
  }

  if (v80 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_755A8();
    sub_67C4((uint64_t *)&unk_FCC60);
    uint64_t v88 = v323;
    uint64_t v81 = v324;
    uint64_t v89 = v314;
    sub_75590(v314, (uint64_t)v78, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v323 + 32));
    sub_75590(v315, v89, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 16));
    uint64_t v90 = v312;
    sub_75A24((uint64_t)v325, v91, &qword_FBDB8);
    uint64_t v92 = sub_4C720(v90, 1LL, v34);
    if (v111)
    {
      sub_75AA8(v92, &qword_FBDB8);
      Parse.ServerConversion.siriKitIntent.getter(v93);
      sub_2BB30();
    }

    else
    {
      uint64_t v115 = v318;
      uint64_t v116 = v307;
      uint64_t v117 = sub_59EF4(v307, v90, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v318 + 32));
      HALTimerDeviceContext.toDismissTimerIntent.getter(v117);
      if (qword_FB318 != -1) {
        swift_once(&qword_FB318, sub_9707C);
      }
      sub_11718((unint64_t *)&qword_FD600, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
      uint64_t v118 = sub_75B48();
      uint64_t v121 = IntentNodeTraversable.value<A>(forNode:)(v118, v119, v120);
      if ((_BYTE)v333)
      {
        sub_2BB30();
      }

      else
      {
        sub_33E48(v121, (unint64_t *)&qword_FBE50, &OBJC_CLASS___NSNumber_ptr);
        Class v137 = sub_690FC().super.super.isa;
        sub_32A6C((uint64_t)v137, "setSkipConfirmation:");
        sub_2BB30();
      }

      sub_433D8(v116, *(uint64_t (**)(uint64_t, uint64_t))(v115 + 8));
    }

    sub_75C84();
    uint64_t v102 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    uint64_t v103 = v89;
    goto LABEL_54;
  }

  if (v80 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v309 = v34;
    sub_755A8();
    uint64_t v316 = v1;
    (*(void (**)(uint64_t *, uint64_t *, void))(v1 + 32))(v24, v78, v317[0]);
    sub_75A1C();
    sub_75A9C();
    uint64_t v104 = v308;
    uint64_t v105 = *(void (**)(void))(v308 + 104);
    uint64_t v106 = v306;
    uint64_t v107 = (void (*)(uint64_t))v310;
    ((void (*)(uint64_t, void, uint64_t))v105)( v306,  enum case for DirectInvocationUtils.Timer.URI.undo(_:),  v310);
    uint64_t v108 = sub_75AE0();
    uint64_t v110 = v109;
    (*(void (**)(uint64_t, void (*)(uint64_t)))(v104 + 8))(v106, v107);
    BOOL v111 = v58 == v108 && v75 == (void *)v110;
    if (v111)
    {
      sub_2B644((uint64_t)v75);
    }

    else
    {
      uint64_t v58 = sub_75524();
      sub_18034();
      sub_2B7C4();
      if ((v58 & 1) == 0)
      {
        uint64_t v329 = v24;
        sub_75A1C();
        sub_75A9C();
        sub_75748(enum case for DirectInvocationUtils.Timer.URI.disambiguation(_:), (uint64_t)&v330);
        sub_75AE0();
        sub_756B8();
        if (v58 == v108 && v75 == (void *)v110)
        {
          uint64_t v113 = sub_2B644((uint64_t)v75);
          os_log_type_t v114 = (uint8_t *)&enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:);
        }

        else
        {
          uint64_t v58 = sub_75524();
          sub_18034();
          uint64_t v113 = sub_2B7C4();
          os_log_type_t v114 = (uint8_t *)&enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:);
          if ((v58 & 1) == 0) {
            goto LABEL_87;
          }
        }

        uint64_t v110 = (uint64_t)v329;
        uint64_t v165 = Parse.DirectInvocation.userData.getter(v113);
        if (v165)
        {
          uint64_t v75 = (void *)v165;
          os_log_type_t v114 = *(uint8_t **)(v305 + 104);
          uint64_t v166 = sub_75950();
          uint64_t v167 = ((uint64_t (*)(uint64_t))v114)(v166);
          uint64_t v168 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v167);
          uint64_t v58 = v169;
          sub_7589C(v110);
          uint64_t v170 = v168;
          uint64_t v171 = v310;
          sub_75550(v170, &v333);
          sub_1BC04();
          uint64_t v165 = sub_2B7C4();
          if (!*((void *)&v334 + 1)) {
            goto LABEL_86;
          }
          uint64_t v173 = sub_75B5C();
          uint64_t v58 = v173;
          uint64_t v110 = (uint64_t)v329;
          uint64_t v165 = Parse.DirectInvocation.userData.getter(v173);
          if (v165)
          {
            uint64_t v75 = (void *)v165;
            uint64_t v174 = sub_7596C();
            ((void (*)(uint64_t))v114)(v174);
            uint64_t v110 = sub_75904();
            os_log_type_t v114 = v175;
            sub_7589C(v171);
            sub_1C318(v110, (uint64_t)v114, (uint64_t)v75, &v333);
            swift_bridgeObjectRelease(v114);
            uint64_t v165 = sub_2B7C4();
            if (*((void *)&v334 + 1))
            {
              if ((sub_75514(v165, v176, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
              {
                type metadata accessor for SiriTimer(0LL);
                uint64_t v177 = sub_17D30();
                uint64_t v110 = (uint64_t)sub_B62E4(v177, v178);
                sub_3917C(v110, v58);
                uint64_t v75 = v179;

                uint64_t v24 = v329;
                if (v75)
                {
                  sub_75508();
                  os_log_type_t v180 = sub_75B9C();
                  if (sub_2BDE0(v180))
                  {
                    os_log_type_t v114 = (uint8_t *)sub_1BA1C(12LL);
                    uint64_t v181 = sub_1BA1C(32LL);
                    *(void *)&__int128 v333 = v181;
                    *(_DWORD *)os_log_type_t v114 = 136315138;
                    LOBYTE(v331) = v58;
                    uint64_t v24 = &v331;
                    uint64_t v182 = String.init<A>(describing:)();
                    uint64_t v331 = sub_75C00(v182, v183);
                    sub_757DC((uint64_t)&v331, (uint64_t)&v332);
                    sub_1BC04();
                    sub_1E7D8(&dword_0, (os_log_s *)v110, (os_log_type_t)v105, "Making intent for verb: %s", v114);
                    sub_1E7D0(v181);
                    sub_1B904(v181);
                    sub_1B904((uint64_t)v114);
                  }

                  id v184 = v75;
                  sub_75508();
                  os_log_type_t v185 = sub_75B9C();
                  if (sub_434EC(v185))
                  {
                    uint64_t v186 = (uint8_t *)sub_1BA1C(12LL);
                    uint64_t v187 = sub_1BA1C(32LL);
                    *(void *)&__int128 v333 = v187;
                    *(_DWORD *)uint64_t v186 = 136315138;
                    uint64_t v328 = v186 + 4;
                    id v188 = v184;
                    uint64_t v189 = sub_75C70((uint64_t)[v188 description]);
                    unint64_t v191 = v190;

                    uint64_t v192 = sub_683C(v189, v191, (uint64_t *)&v333);
                    uint64_t v193 = sub_1E7E0(v192);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(v193, v194, v328, v186 + 12);

                    sub_2BE5C();
                    sub_1E7D8(&dword_0, (os_log_s *)v110, (os_log_type_t)v114, "Intent: %s", v186);
                    sub_1E7D0(v187);
                    sub_1B904(v187);
                    sub_1B904((uint64_t)v186);
                  }

                  else
                  {
                  }

                  sub_75878();
                  uint64_t v103 = (uint64_t)v329;
                  goto LABEL_150;
                }

                goto LABEL_134;
              }

LABEL_87:
              uint64_t v24 = v329;
              sub_75A1C();
              sub_75A9C();
              sub_75748(enum case for DirectInvocationUtils.Timer.URI.handleVerbAction(_:), (uint64_t)&v322);
              sub_75AE0();
              sub_756B8();
              if ((uint8_t *)v58 == v114 && v75 == (void *)v110)
              {
                sub_2B644((uint64_t)v75);
              }

              else
              {
                uint64_t v58 = sub_75524();
                sub_18034();
                sub_2B7C4();
                if ((v58 & 1) == 0) {
                  goto LABEL_134;
                }
              }

              uint64_t v200 = sub_758E8();
              if (v200)
              {
                uint64_t v75 = (void *)v200;
                uint64_t v201 = v305;
                uint64_t v202 = *(uint64_t (**)(uint64_t))(v305 + 104);
                uint64_t v203 = sub_75950();
                uint64_t v204 = v202(v203);
                uint64_t v205 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v204);
                uint64_t v58 = v206;
                os_log_type_t v114 = *(uint8_t **)(v201 + 8);
                ((void (*)(uint64_t, void *))v114)( v110,  &enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:));
                uint64_t v207 = v205;
                uint64_t v208 = v310;
                sub_75550(v207, &v333);
                sub_1BC04();
                uint64_t v200 = sub_2B7C4();
                if (!*((void *)&v334 + 1)) {
                  goto LABEL_133;
                }
                char v210 = sub_75B5C();
                if (v210 == 19) {
                  goto LABEL_134;
                }
                uint64_t v110 = 0x657461657263LL;
                uint64_t v211 = sub_7010(v210);
                uint64_t v75 = (void *)v212;
                if (v211 == 0x657461657263LL && v212 == 0xE600000000000000LL)
                {
                  sub_2B7C4();
                }

                else
                {
                  uint64_t v110 = sub_4C5C4(v211, v212, 0x657461657263LL, 0xE600000000000000LL);
                  sub_2B7C4();
                  if ((v110 & 1) == 0) {
                    goto LABEL_134;
                  }
                }

                uint64_t v200 = sub_758E8();
                if (v200)
                {
                  uint64_t v75 = (void *)v200;
                  uint64_t v255 = sub_7596C();
                  v202(v255);
                  uint64_t v110 = sub_75904();
                  uint64_t v58 = v256;
                  ((void (*)(uint64_t, void *))v114)( v208,  &enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:));
                  sub_75550(v110, &v333);
                  sub_1BC04();
                  uint64_t v200 = sub_2B7C4();
                  if (*((void *)&v334 + 1))
                  {
                    uint64_t v257 = sub_33E48(v200, (unint64_t *)&qword_FBE50, &OBJC_CLASS___NSNumber_ptr);
                    if ((sub_75514(v257, v258, (uint64_t)&type metadata for Any + 8, v257) & 1) != 0)
                    {
                      os_log_type_t v259 = (void *)v331;
                      sub_75508();
                      os_log_type_t v260 = sub_2BFB4();
                      if (sub_329F4(v260))
                      {
                        uint64_t v261 = (uint8_t *)sub_1BA1C(2LL);
                        *(_WORD *)uint64_t v261 = 0;
                        sub_1BBEC( &dword_0,  (os_log_s *)v75,  (os_log_type_t)v110,  "Timer domain handling create timer action valid duration",  v261);
                        sub_1B904((uint64_t)v261);
                      }

                      uint64_t v262 = sub_758E8();
                      if (v262)
                      {
                        uint64_t v263 = v262;
                        uint64_t v264 = sub_75B30((uint64_t)&v331);
                        v202(v264);
                        uint64_t v265 = sub_75904();
                        uint64_t v267 = v266;
                        sub_75C24();
                        sub_1C318(v265, v267, v263, &v333);
                        sub_2B758();
                        uint64_t v262 = sub_2B7C4();
                        if (*((void *)&v334 + 1))
                        {
                          sub_75514(v262, v268, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
LABEL_159:
                          sub_43644();
                          [v259 doubleValue];
                          uint64_t v290 = sub_17D30();
                          sub_A21C4(v290, v291, v292);

                          goto LABEL_160;
                        }
                      }

                      else
                      {
                        __int128 v333 = 0u;
                        __int128 v334 = 0u;
                      }

                      sub_758D8(v262, &qword_FCD20);
                      goto LABEL_159;
                    }

LABEL_134:
                    sub_75A1C();
                    sub_75A9C();
                    sub_75748(enum case for DirectInvocationUtils.Timer.URI.stopTimer(_:), (uint64_t)&v321);
                    sub_75AE0();
                    sub_756B8();
                    if ((uint8_t *)v58 == v114 && v75 == (void *)v110)
                    {
                      sub_2B644((uint64_t)v75);
                      uint64_t v271 = v309;
                      uint64_t v272 = (uint64_t)v325;
                    }

                    else
                    {
                      uint64_t v58 = sub_75524();
                      sub_18034();
                      sub_2B7C4();
                      uint64_t v271 = v309;
                      uint64_t v272 = (uint64_t)v325;
                      if ((v58 & 1) == 0)
                      {
                        sub_75AD0();
                        uint64_t v273 = v294;
                        sub_7582C(v294);
                        sub_75508();
                        os_log_type_t v274 = sub_3967C();
                        if (sub_2B864(v274))
                        {
                          uint64_t v233 = sub_1BA1C(12LL);
                          uint64_t v234 = sub_1BA1C(32LL);
                          *(void *)&__int128 v333 = v234;
                          *(_DWORD *)uint64_t v233 = 136315138;
                          uint64_t v105 = (void (*)(void))(v233 + 12);
                          uint64_t v329 = (uint64_t *)(v233 + 4);
                          uint64_t v275 = v317[0];
                          sub_75870(v302, v273);
                          uint64_t v276 = sub_75C50();
                          uint64_t v278 = sub_7580C(v276, v277);
                          sub_75768(v278);
                          sub_17EE8();
                          sub_75AC0();
                          ((void (*)(uint64_t, uint64_t))(v233 + 12))(v273, v275);
                          uint64_t v244 = "Timer received an unsupported direct invocation: %s";
                          goto LABEL_141;
                        }

                        uint64_t v245 = (void (*)(uint64_t, uint64_t))*((void *)v114 + 1);
                        uint64_t v246 = v273;
LABEL_114:
                        uint64_t v247 = v317[0];
                        v245(v246, v317[0]);
                        v245((uint64_t)v24, v247);
                        goto LABEL_56;
                      }
                    }

                    uint64_t v279 = v296;
                    sub_75A24(v272, v270, &qword_FBDB8);
                    uint64_t v280 = sub_4C720((uint64_t)v279, 1LL, v271);
                    uint64_t v108 = v316;
                    if (v111)
                    {
                      sub_75AA8(v280, &qword_FBDB8);
                      sub_75508();
                      os_log_type_t v281 = sub_3967C();
                      if (sub_329F4(v281))
                      {
                        uint64_t v282 = (_WORD *)sub_1BA1C(2LL);
                        sub_2BA04(v282);
                        sub_39644( &dword_0,  v283,  v284,  "TimerToDismiss is empty or remoteDevice is nil, falling back to cancel timer.");
                        sub_1B904(v58);
                      }

                      [objc_allocWithZone((Class)sub_75D08()) init];
                    }

                    else
                    {
                      uint64_t v285 = v318;
                      uint64_t v286 = v295;
                      uint64_t v287 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(v318 + 32))(v295, v279, v271);
                      HALTimerDeviceContext.toDismissTimerIntent.getter(v287);
                      (*(void (**)(uint64_t, uint64_t))(v285 + 8))(v286, v271);
                    }

                    goto LABEL_148;
                  }

LABEL_133:
                  sub_758D8(v200, &qword_FCD20);
                  goto LABEL_134;
                }
              }

              __int128 v333 = 0u;
              __int128 v334 = 0u;
              goto LABEL_133;
            }

LABEL_86:
            sub_758D8(v165, &qword_FCD20);
            goto LABEL_87;
          }
        }

        __int128 v333 = 0u;
        __int128 v334 = 0u;
        goto LABEL_86;
      }
    }

    uint64_t v122 = sub_758E8();
    if (!v122) {
      goto LABEL_63;
    }
    uint64_t v75 = (void *)v122;
    uint64_t v123 = v305;
    uint64_t v105 = *(void (**)(void))(v305 + 104);
    uint64_t v124 = sub_75B30((uint64_t)&v333);
    v105(v124);
    uint64_t v125 = sub_75904();
    uint64_t v58 = v126;
    uint64_t v108 = *(void *)(v123 + 8);
    sub_75C24();
    sub_75550(v125, &v333);
    uint64_t v127 = sub_1BC04();
    if (!*((void *)&v334 + 1))
    {
      uint64_t v155 = sub_2B7C4();
      sub_758D8(v155, &qword_FCD20);
LABEL_63:
      sub_75AD0();
      uint64_t v2 = v304;
      sub_7582C(v304);
      sub_75508();
      os_log_type_t v156 = sub_3967C();
      if (sub_2B864(v156))
      {
        uint64_t v157 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v158 = sub_1BA1C(32LL);
        *(void *)&__int128 v333 = v158;
        sub_758C8(4.8149e-34);
        uint64_t v329 = v159;
        uint64_t v160 = sub_75C44();
        v107(v160);
        uint64_t v161 = String.init<A>(describing:)();
        uint64_t v163 = sub_7580C(v161, v162);
        sub_75768(v163);
        sub_17EE8();
        sub_75AC0();
        sub_75BDC();
        sub_1E7D8(&dword_0, (os_log_s *)v75, (os_log_type_t)v58, "Malformed userData for direct invocation: %s", v157);
        sub_1E7D0(v158);
        sub_1B904(v158);
        sub_1B904((uint64_t)v157);

        uint64_t v164 = sub_75C78();
LABEL_65:
        v105(v164);
        goto LABEL_56;
      }

LABEL_113:
      uint64_t v245 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
      uint64_t v246 = v2;
      goto LABEL_114;
    }

    if ((sub_75514(v127, v128, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) == 0)
    {
LABEL_46:
      sub_2B7C4();
      goto LABEL_63;
    }

    int v129 = sub_75B5C();
    switch(v129)
    {
      case 1:
        uint64_t v214 = sub_75884(enum case for DirectInvocationUtils.Timer.UserInfoKey.usoEntity(_:), (uint64_t)&v316);
        DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v214);
        sub_758F0();
        sub_75550((uint64_t)&enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:), &v333);
        sub_1BC04();
        uint64_t v215 = sub_2B7C4();
        if (*((void *)&v334 + 1))
        {
          if ((sub_75514(v215, v216, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data) & 1) != 0)
          {
            uint64_t v217 = v331;
            uint64_t v108 = v332;
            uint64_t v218 = type metadata accessor for JSONDecoder(0LL);
            swift_allocObject(v218, *(unsigned int *)(v218 + 48), *(unsigned __int16 *)(v218 + 52));
            JSONDecoder.init()();
            uint64_t v219 = type metadata accessor for UsoEntity(0LL);
            sub_11718( (unint64_t *)&unk_FEC40,  (uint64_t (*)(uint64_t))&type metadata accessor for UsoEntity,  (uint64_t)&protocol conformance descriptor for UsoEntity);
            dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v333, v219, v217, v108, v219, v220);
            sub_1BC50();
            uint64_t v58 = v333;
            uint64_t v288 = type metadata accessor for UsoEntity_common_Timer(0LL);
            uint64_t v289 = swift_retain();
            static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&v333, v289, v288, v288);
            sub_1E83C();
            uint64_t v75 = (void *)v333;
            if ((void)v333)
            {
              sub_43644();
              sub_A2128((uint64_t)v75, 1);
              sub_75914();
              sub_1E83C();
LABEL_160:
              sub_75878();
              goto LABEL_149;
            }

            sub_1E83C();
            sub_75914();
          }
        }

        else
        {
          sub_758D8(v215, &qword_FCD20);
        }

        sub_75CC0();
        sub_75508();
        os_log_type_t v248 = sub_3967C();
        if (sub_329F4(v248))
        {
          uint64_t v249 = (_WORD *)sub_1BA1C(2LL);
          sub_2BA04(v249);
          uint64_t v252 = "The userData has a malformed or missing usoEntity to create.";
LABEL_121:
          sub_39644(&dword_0, v250, v251, v252);
          sub_1B904(v58);
        }

        break;
      case 2:
        uint64_t v221 = sub_75884(enum case for DirectInvocationUtils.Timer.UserInfoKey.timerId(_:), (uint64_t)v317);
        DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v221);
        sub_758F0();
        sub_75550((uint64_t)&enum case for DirectInvocationUtils.Timer.UserInfoKey.verb(_:), &v333);
        sub_1BC04();
        uint64_t v222 = sub_2B7C4();
        if (*((void *)&v334 + 1))
        {
          sub_75514(v222, v223, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
          sub_75CC0();
          if ((v224 & 1) != 0)
          {
            id v225 = [objc_allocWithZone((Class)sub_75D08()) init];
            type metadata accessor for SiriTimer(0LL);
            uint64_t v226 = sub_5A434();
            id v228 = sub_B62E4(v226, v227);
            sub_32A6C((uint64_t)v228, "setTargetTimer:");

            id v229 = [v225 targetTimer];
            if (v229)
            {
              char v230 = v229;
              sub_33E48((uint64_t)v229, (unint64_t *)&qword_FBE50, &OBJC_CLASS___NSNumber_ptr);
              Class v231 = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
              [v230 setShouldMatchAny:v231];
            }

LABEL_148:
            uint64_t v102 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
LABEL_149:
            uint64_t v103 = (uint64_t)v24;
LABEL_150:
            uint64_t v138 = v317[0];
            goto LABEL_55;
          }
        }

        else
        {
          sub_758D8(v222, &qword_FCD20);
          sub_75CC0();
        }

        sub_75508();
        os_log_type_t v253 = sub_3967C();
        if (sub_329F4(v253))
        {
          char v254 = (_WORD *)sub_1BA1C(2LL);
          sub_2BA04(v254);
          uint64_t v252 = "The userData has a malformed or missing timerId to delete.";
          goto LABEL_121;
        }

        break;
      case 19:
        goto LABEL_46;
      default:
        sub_2B7C4();
        sub_75AD0();
        sub_7582C(v2);
        sub_75508();
        os_log_type_t v232 = sub_3967C();
        if (sub_2B864(v232))
        {
          uint64_t v233 = sub_1BA1C(12LL);
          uint64_t v234 = sub_1BA1C(32LL);
          *(void *)&__int128 v333 = v234;
          *(_DWORD *)uint64_t v233 = 136315138;
          uint64_t v105 = (void (*)(void))(v233 + 12);
          uint64_t v235 = sub_75C44();
          uint64_t v329 = (uint64_t *)v2;
          uint64_t v236 = v317[0];
          sub_75870(v235, v237);
          uint64_t v238 = sub_75C50();
          uint64_t v240 = sub_7580C(v238, v239);
          uint64_t v241 = sub_75A44(v240);
          sub_758C0(v241, v242, v243);
          sub_17EE8();
          sub_75AC0();
          ((void (*)(uint64_t *, uint64_t))(v233 + 12))(v329, v236);
          uint64_t v244 = "Unsupported verb or userData for undo direct invocation: %s";
LABEL_141:
          sub_1E7D8(&dword_0, (os_log_s *)v75, (os_log_type_t)v58, v244, (uint8_t *)v233);
          sub_1E7D0(v234);
          sub_1B904(v234);
          sub_1B904(v233);

          uint64_t v164 = (uint64_t)v24;
          goto LABEL_65;
        }

        goto LABEL_113;
    }

    (*(void (**)(uint64_t *, void))(v108 + 8))(v24, v317[0]);
    goto LABEL_56;
  }

  if (v80 == enum case for Parse.NLv4IntentOnly(_:))
  {
    sub_755A8();
    if (sub_38300(*v78, v325))
    {
      sub_75A14();
    }

    else
    {
      sub_75508();
      os_log_type_t v153 = sub_3967C();
      if (sub_329F4(v153))
      {
        uint64_t v154 = (_WORD *)sub_1BA1C(2LL);
        sub_4C4EC(v154);
        sub_1BBEC( &dword_0,  (os_log_s *)v75,  (os_log_type_t)v76,  "Failed to parse timer NLv4Intent from userDialogAct",  (uint8_t *)v1);
        sub_1B904(v1);
      }

      sub_75A14();
    }
  }

  else if (v80 == enum case for Parse.uso(_:))
  {
    sub_755A8();
    uint64_t v130 = v300;
    uint64_t v131 = v299;
    uint64_t v132 = sub_75C64();
    uint64_t v81 = v301;
    sub_75590(v132, v133, v134);
    sub_75AE8();
    sub_38968();
    if (v135)
    {
      sub_383C0();
      uint64_t v75 = v136;
      sub_1BC50();
      sub_75634(v58, *(uint64_t (**)(uint64_t, void))(v297 + 8));
      if (v75)
      {
        uint64_t v102 = *(void (**)(uint64_t, uint64_t))(v130 + 8);
        uint64_t v103 = v131;
LABEL_54:
        uint64_t v138 = v81;
LABEL_55:
        v102(v103, v138);
        goto LABEL_56;
      }
    }

    else
    {
      sub_75634(v58, *(uint64_t (**)(uint64_t, void))(v297 + 8));
    }

    sub_75508();
    os_log_type_t v195 = sub_3967C();
    if (sub_329F4(v195))
    {
      unint64_t v196 = (_WORD *)sub_1BA1C(2LL);
      sub_2BA04(v196);
      sub_39644(&dword_0, v197, v198, "Failed to parse timer intent from USO parse");
      sub_1B904(v58);
    }

    (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v131, v81);
  }

  else
  {
    uint64_t v139 = v298;
    uint64_t v140 = sub_75C98();
    ((void (*)(uint64_t))v77)(v140);
    sub_75508();
    os_log_type_t v141 = sub_3967C();
    if (sub_2B864(v141))
    {
      uint64_t v142 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v143 = sub_1BA1C(32LL);
      *(void *)&__int128 v333 = v143;
      *(_DWORD *)uint64_t v142 = 136315138;
      uint64_t v144 = sub_75BE8();
      ((void (*)(uint64_t))v77)(v144);
      uint64_t v145 = String.init<A>(describing:)();
      uint64_t v147 = sub_7580C(v145, v146);
      uint64_t v148 = sub_75A44(v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v148, v149, v150, v142 + 12);
      sub_17EE8();
      char v151 = (void (*)(uint64_t, uint64_t *))*((void *)v328 + 1);
      v151(v139, v329);
      sub_1E7D8(&dword_0, (os_log_s *)v75, (os_log_type_t)v58, "Received an unsupported parse: %s", v142);
      sub_1E7D0(v143);
      uint64_t v152 = v143;
      uint64_t v79 = v329;
      sub_1B904(v152);
      sub_1B904((uint64_t)v142);
    }

    else
    {
      char v151 = (void (*)(uint64_t, uint64_t *))*((void *)v328 + 1);
      v151(v139, v79);
    }

    v151((uint64_t)v78, v79);
  }

void sub_70A20()
{
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v262 = v5;
  uint64_t v235 = sub_75B00();
  sub_75700();
  __chkstk_darwin(v6);
  sub_1C308();
  uint64_t v9 = (os_log_s *)(v8 - v7);
  uint64_t v10 = sub_21530();
  sub_43628(v10, (uint64_t)&v268);
  uint64_t v238 = v11;
  sub_17B6C();
  __chkstk_darwin(v12);
  sub_17D14();
  uint64_t v237 = v13;
  sub_67C4(&qword_FBDB0);
  sub_17B6C();
  __chkstk_darwin(v14);
  uint64_t v16 = sub_7555C(v15, v231[0]);
  uint64_t v17 = (os_log_s *)type metadata accessor for ConfirmationResponse(v16);
  uint64_t v243 = *((void *)v17 - 1);
  sub_17B6C();
  __chkstk_darwin(v18);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v19);
  uint64_t v246 = (char *)v231 - v20;
  uint64_t v254 = sub_75800();
  uint64_t v250 = *(void *)(v254 - 8);
  sub_17B6C();
  __chkstk_darwin(v21);
  sub_433A0();
  __chkstk_darwin(v22);
  sub_433A0();
  __chkstk_darwin(v23);
  sub_436A0();
  uint64_t v251 = v24;
  uint64_t v255 = sub_759A8();
  uint64_t v253 = *(void *)(v255 - 8);
  sub_17B6C();
  __chkstk_darwin(v25);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v26);
  sub_433A0();
  __chkstk_darwin(v27);
  sub_433A0();
  __chkstk_darwin(v28);
  sub_436A0();
  uint64_t v252 = v29;
  uint64_t v234 = sub_756E4();
  uint64_t v233 = *(void *)(v234 - 8);
  sub_17B6C();
  __chkstk_darwin(v30);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v31);
  sub_436A0();
  uint64_t v33 = sub_7567C(v32);
  uint64_t v241 = *(void *)(v33 - 8);
  sub_17B6C();
  __chkstk_darwin(v34);
  sub_17D14();
  uint64_t v36 = sub_43410(v35);
  uint64_t v249 = type metadata accessor for SiriTimeFeatureFlagsImpl(v36);
  uint64_t v248 = *(void *)(v249 - 8);
  sub_17B6C();
  __chkstk_darwin(v37);
  sub_17D14();
  uint64_t v247 = v38;
  uint64_t v260 = sub_755F4();
  sub_17B6C();
  __chkstk_darwin(v39);
  uint64_t v259 = (uint64_t)v231 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_433B0();
  __chkstk_darwin(v41);
  sub_436A0();
  uint64_t v261 = v42;
  uint64_t v43 = sub_756D8();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v263 = v43;
  uint64_t v264 = v44;
  sub_17B6C();
  __chkstk_darwin(v45);
  sub_433A0();
  __chkstk_darwin(v46);
  uint64_t v48 = (uint64_t *)((char *)v231 - v47);
  uint64_t v258 = sub_75818();
  uint64_t v256 = *(void *)(v258 - 8);
  sub_17B6C();
  __chkstk_darwin(v49);
  sub_17FBC(v50, v231[0]);
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v51 = sub_1BD34();
  uint64_t v52 = sub_5474(v51, (uint64_t)qword_FEC20);
  uint64_t v53 = (void *)v52;
  Logger.logObject.getter(v52);
  os_log_type_t v54 = sub_1BCD0();
  if (sub_2BAD0(v54))
  {
    uint64_t v55 = (_WORD *)sub_1BA1C(2LL);
    os_log_type_t v232 = v48;
    uint64_t v56 = v4;
    uint64_t v57 = v9;
    char v58 = v2;
    uint64_t v59 = v0;
    uint64_t v60 = v17;
    uint64_t v61 = v33;
    uint64_t v62 = v52;
    uint64_t v63 = v55;
    *uint64_t v55 = 0;
    sub_75A6C();
    sub_1BBEC(v64, v65, v66, v67, v68);
    uint64_t v69 = (uint64_t)v63;
    uint64_t v52 = v62;
    uint64_t v33 = v61;
    uint64_t v17 = v60;
    uint64_t v0 = v59;
    char v2 = v58;
    uint64_t v9 = v57;
    uint64_t v4 = v56;
    uint64_t v48 = v232;
    sub_1B904(v69);
  }

  Input.parse.getter();
  uint64_t v70 = v264;
  uint64_t v71 = sub_75C78();
  int v73 = v72(v71);
  if (v73 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_433D8((uint64_t)v48, *(uint64_t (**)(uint64_t, uint64_t))(v70 + 96));
LABEL_9:
    uint64_t v75 = v257;
    uint64_t v76 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v256 + 32);
    uint64_t v77 = (os_log_s *)v258;
    v76((uint64_t)v257, v48, v258);
    uint64_t v78 = v261;
    v76(v261, v75, (uint64_t)v77);
    sub_1E720(v78, v259);
    sub_4C3A0();
    os_log_type_t v79 = sub_2BFB4();
    BOOL v80 = os_log_type_enabled(v77, v79);
    uint64_t v81 = v260;
    if (v80)
    {
      uint64_t v82 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v83 = sub_1BA1C(32LL);
      *(void *)&__int128 v267 = v83;
      *(_DWORD *)uint64_t v82 = 136315138;
      sub_11718(&qword_FBE60, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C5488);
      uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter(v81, v84);
      uint64_t v87 = sub_4C664(v85, v86);
      uint64_t v88 = sub_75718(v87);
      sub_43668(v88, v89, v90);
      sub_18034();
      sub_75A2C();
      sub_1E7D8(&dword_0, v77, v79, "validateConfirmation: %s", v82);
      sub_1E7D0(v83);
      sub_1B904(v83);
      sub_1B904((uint64_t)v82);
    }

    else
    {
      sub_75A2C();
    }

    if (qword_FB318 != -1) {
      swift_once(&qword_FB318, sub_9707C);
    }
    uint64_t v91 = qword_101168;
    sub_11718((unint64_t *)&qword_FD600, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
    uint64_t v93 = IntentNodeTraversable.value<A>(forNode:)(v91, v81, v92);
    if (v267 - 1 >= 2)
    {
      if ((_BYTE)v267) {
        static ActionForInput.ignore()(v93);
      }
      else {
        static ActionForInput.handle()(v93);
      }
    }

    else
    {
      sub_758E0();
    }

    sub_1E6E4(v78);
    goto LABEL_29;
  }

  if (v73 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_433D8((uint64_t)v48, *(uint64_t (**)(uint64_t, uint64_t))(v70 + 96));
    uint64_t v74 = sub_67C4((uint64_t *)&unk_FCC60);
    sub_7599C(v74);
    goto LABEL_9;
  }

  if (v73 != enum case for Parse.directInvocation(_:))
  {
    if (v73 != enum case for Parse.NLv4IntentOnly(_:))
    {
      if (v73 == enum case for Parse.uso(_:))
      {
        uint64_t v261 = v52;
        sub_433D8((uint64_t)v48, *(uint64_t (**)(uint64_t, uint64_t))(v70 + 96));
        uint64_t v131 = v240;
        uint64_t v132 = sub_758A4();
        sub_3822C(v132, v133, v134);
        sub_759DC();
        uint64_t v136 = USOParse.userParse.getter(v135);
        uint64_t v137 = Siri_Nlu_External_UserParse.userDialogActs.getter(v136);
        sub_75C5C((uint64_t)v9);
        sub_759DC();
        static SiriTimeFeatureFlagsImpl.instance.getter(v138);
        BOOL v139 = SiriTimeFeatureFlagsImpl.isCrossDeviceEnabled()();
        uint64_t v140 = sub_757BC();
        sub_75634(v140, v141);
        uint64_t v142 = v236;
        if (!v139 || (v2 & 1) == 0) {
          goto LABEL_50;
        }
        sub_755CC();
        os_log_type_t v143 = sub_1BCD0();
        if (sub_2B854(v143))
        {
          uint64_t v144 = (_WORD *)sub_1BA1C(2LL);
          sub_4C4EC(v144);
          sub_1BBEC(&dword_0, (os_log_s *)v139, (os_log_type_t)v17, "Searching for room confirmation", (uint8_t *)v0);
          sub_1B904(v0);
        }

        uint64_t v145 = sub_75AE8();
        uint64_t v146 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v145);
        sub_75C5C((uint64_t)v17);
        if (v146 && (int v147 = sub_83F68(), sub_1BC50(), v147 != 3))
        {
          sub_756F8();
          sub_755D4();
        }

        else
        {
LABEL_50:
          uint64_t v148 = *(void *)(v137 + 16);
          if (v148)
          {
            uint64_t v263 = v33;
            uint64_t v264 = v137;
            uint64_t v149 = v137
                 + ((*(unsigned __int8 *)(v253 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v253 + 80));
            uint64_t v131 = *(void *)(v253 + 72);
            uint64_t v150 = *(uint64_t (**)(uint64_t))(v253 + 16);
            swift_bridgeObjectRetain(v137);
            uint64_t v260 = v148;
            uint64_t v151 = v252;
            while (1)
            {
              uint64_t v152 = sub_757B0(v151);
              char v153 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v152);
              sub_7553C(v151);
              if ((v153 & 1) != 0) {
                break;
              }
              sub_75B70();
              if (v98)
              {
                sub_18034();
                sub_17C9C();
                while (1)
                {
                  uint64_t v154 = sub_757B0((uint64_t)v142);
                  char v155 = Siri_Nlu_External_UserDialogAct.hasWantedToProceed.getter(v154);
                  sub_7553C((uint64_t)v142);
                  if ((v155 & 1) != 0) {
                    break;
                  }
                  sub_75B70();
                  if (v98)
                  {
                    sub_2B7C4();
                    sub_33E50();
                    uint64_t v156 = v245;
                    do
                    {
                      uint64_t v157 = sub_757B0(v156);
                      uint64_t v158 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v157);
                      sub_7553C(v156);
                      if ((v158 & 1) != 0)
                      {
                        sub_2B644(v264);
                        sub_755CC();
                        os_log_type_t v224 = sub_2BFB4();
                        if (!sub_329F4(v224)) {
                          goto LABEL_122;
                        }
                        id v225 = (_WORD *)sub_1BA1C(2LL);
                        sub_2BA04(v225);
                        id v228 = "validateConfirmation: USO parse userDialogActs contains hasRejected; returning .cancel()";
                        goto LABEL_121;
                      }

                      sub_75B70();
                    }

                    while (!v98);
                    uint64_t v158 = v264;
                    sub_2B7C4();
                    sub_33E50();
                    char v159 = v231[0];
                    while (1)
                    {
                      uint64_t v160 = sub_75C8C();
                      uint64_t v161 = v150(v160);
                      Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v161);
                      sub_75A34();
                      if ((v159 & 1) != 0) {
                        break;
                      }
                      sub_75B64();
                      if (v98)
                      {
                        sub_2B644(v264);
                        uint64_t v33 = v263;
                        sub_75CF0();
                        goto LABEL_88;
                      }
                    }

                    sub_2B644(v264);
                    sub_755CC();
                    os_log_type_t v229 = sub_2BFB4();
                    if (sub_329F4(v229))
                    {
                      char v230 = (_WORD *)sub_1BA1C(2LL);
                      sub_2BA04(v230);
                      id v228 = "validateConfirmation: USO parse userDialogActs contains hasCancelled; returning .cancel()";
LABEL_121:
                      sub_39644(&dword_0, v226, v227, v228);
                      sub_1B904(v149);
                    }

LABEL_122:
                    sub_758E0();
                    goto LABEL_102;
                  }
                }

                sub_2B644(v264);
                sub_755CC();
                os_log_type_t v216 = sub_2BFB4();
                if (!sub_329F4(v216)) {
                  goto LABEL_101;
                }
                uint64_t v217 = (_WORD *)sub_1BA1C(2LL);
                sub_2BA04(v217);
                uint64_t v198 = "validateConfirmation: USO parse userDialogActs contains hasWantedToProceed; returning .handle()";
                goto LABEL_100;
              }
            }

            sub_2B644(v264);
            sub_755CC();
            os_log_type_t v194 = sub_2BFB4();
            if (!sub_329F4(v194)) {
              goto LABEL_101;
            }
            os_log_type_t v195 = (_WORD *)sub_1BA1C(2LL);
            sub_2BA04(v195);
            uint64_t v198 = "validateConfirmation: USO parse userDialogActs contains hasAccepted; returning .handle()";
LABEL_100:
            sub_39644(&dword_0, v196, v197, v198);
            sub_1B904(v149);
LABEL_101:

            sub_755D4();
LABEL_102:
            sub_75878();
            uint64_t v163 = v240;
            uint64_t v164 = v263;
            goto LABEL_103;
          }

          sub_756F8();
LABEL_88:
          sub_7562C();
        }

        (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v131, v33);
        goto LABEL_29;
      }

      uint64_t v165 = v235;
      sub_3822C((uint64_t)v9, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
      sub_4C3A0();
      os_log_type_t v166 = sub_75CB8();
      if (sub_1E810(v17))
      {
        uint64_t v167 = sub_1BA1C(12LL);
        uint64_t v261 = v0;
        uint64_t v168 = (uint8_t *)v167;
        uint64_t v169 = sub_1BA1C(32LL);
        *(void *)&__int128 v267 = v169;
        *(_DWORD *)uint64_t v168 = 136315138;
        os_log_type_t v232 = v48;
        Input.parse.getter();
        uint64_t v170 = String.init<A>(describing:)();
        uint64_t v172 = sub_4C664(v170, v171);
        uint64_t v173 = sub_75718(v172);
        sub_1E844(v173, v174, v175);
        sub_18034();
        uint64_t v176 = sub_757BC();
        v177(v176, v165);
        sub_1E7D8(&dword_0, v17, v166, "validateConfirmation: Received unsupported parse for confirmation: %s", v168);
        sub_1E7D0(v169);
        sub_1B904(v169);
        sub_1B904((uint64_t)v168);
      }

      else
      {
        sub_75930(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
      }

      sub_7562C();
      uint64_t v163 = sub_75C78();
LABEL_103:
      v162(v163, v164);
      goto LABEL_29;
    }

    uint64_t v110 = sub_433D8((uint64_t)v48, *(uint64_t (**)(uint64_t, uint64_t))(v70 + 96));
    uint64_t v111 = *v48;
    uint64_t v112 = v247;
    static SiriTimeFeatureFlagsImpl.instance.getter(v110);
    BOOL v113 = SiriTimeFeatureFlagsImpl.isCrossDeviceEnabled()();
    sub_75634(v112, *(uint64_t (**)(uint64_t, void))(v248 + 8));
    if (v113 && (v2 & 1) != 0)
    {
      sub_4C3A0();
      os_log_type_t v114 = sub_1BCD0();
      if (sub_2B854(v114))
      {
        uint64_t v115 = (_WORD *)sub_1BA1C(2LL);
        sub_4C4EC(v115);
        sub_1BBEC(&dword_0, (os_log_s *)v113, (os_log_type_t)v112, "Searching for room confirmation", (uint8_t *)v0);
        sub_1B904(v0);
      }

      sub_75928();
      uint64_t v116 = sub_75920();
      if (v116)
      {
        BOOL v113 = v116;
        LODWORD(v112) = sub_83F68();
        sub_1BC50();
        if ((_DWORD)v112 != 3) {
          goto LABEL_75;
        }
      }
    }

    uint64_t v117 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted);
    if (sub_75544(v117) || (uint64_t v118 = objc_opt_self(&OBJC_CLASS___SIRINLUUserWantedToProceed), sub_75544(v118)))
    {
      sub_75B28(v111);
      sub_4C3A0();
      os_log_type_t v119 = sub_1BCD0();
      if (sub_434EC(v119))
      {
        uint64_t v120 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v121 = sub_1BA1C(32LL);
        *(void *)&__int128 v267 = v121;
        *(_DWORD *)uint64_t v120 = 136315138;
        uint64_t v265 = v111;
        swift_unknownObjectRetain(v111);
        sub_67C4(&qword_FCD00);
        uint64_t v122 = sub_75C1C();
        uint64_t v265 = sub_4C664(v122, v123);
        sub_43668((uint64_t)&v265, (uint64_t)&v266, (uint64_t)(v120 + 4));
        sub_436D0();
        sub_2BE5C();
        sub_1E7D8( &dword_0,  (os_log_s *)v113,  (os_log_type_t)v0,  "validateConfirmation: Received UserDialogAct - %s",  v120);
        sub_1E7D0(v121);
        sub_1B904(v121);
        sub_1B904((uint64_t)v120);
      }

      else
      {

        sub_436D0();
      }

LABEL_75:
      sub_755D4();
LABEL_76:
      sub_1E808();
      goto LABEL_29;
    }

    uint64_t v199 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected);
    if (sub_75544(v199))
    {
      sub_4C3A0();
      os_log_type_t v200 = sub_1BCD0();
      if (!sub_2B854(v200))
      {
LABEL_113:

        sub_758E0();
        goto LABEL_76;
      }

      uint64_t v201 = (_WORD *)sub_1BA1C(2LL);
      sub_4C4EC(v201);
      uint64_t v202 = "validateConfirmation: Received UserDialogAct - UserRejected";
    }

    else
    {
      uint64_t v221 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
      if (!sub_75544(v221))
      {
        sub_7562C();
        goto LABEL_76;
      }

      sub_4C3A0();
      os_log_type_t v222 = sub_1BCD0();
      if (!sub_2B854(v222)) {
        goto LABEL_113;
      }
      uint64_t v223 = (_WORD *)sub_1BA1C(2LL);
      sub_4C4EC(v223);
      uint64_t v202 = "validateConfirmation: Received UserDialogAct - UserCancelled";
    }

    sub_1BBEC(&dword_0, (os_log_s *)v113, (os_log_type_t)v112, v202, (uint8_t *)v0);
    sub_1B904(v0);
    goto LABEL_113;
  }

  sub_433D8((uint64_t)v48, *(uint64_t (**)(uint64_t, uint64_t))(v70 + 96));
  uint64_t v94 = v250;
  uint64_t v95 = v48;
  uint64_t v96 = v251;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v250 + 32))(v251, v95, v254);
  sub_759DC();
  static DirectInvocationUtils.siriKitConfirmationResponse(_:)(v96);
  uint64_t v97 = sub_4C720((uint64_t)v9, 1LL, (uint64_t)v17);
  if (v98)
  {
    sub_75AA8(v97, &qword_FBDB0);
    uint64_t v99 = sub_758E8();
    uint64_t v100 = v244;
    if (!v99)
    {
LABEL_83:
      id v184 = *(void (**)(uint64_t))(v94 + 16);
      uint64_t v185 = sub_758A4();
      v184(v185);
      sub_4C3A0();
      os_log_type_t v186 = sub_2BFB4();
      if (sub_2B864(v186))
      {
        uint64_t v187 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v188 = sub_1BA1C(32LL);
        *(void *)&__int128 v267 = v188;
        sub_758C8(4.8149e-34);
        uint64_t v264 = v189;
        uint64_t v190 = sub_758A4();
        v184(v190);
        sub_75C64();
        uint64_t v191 = String.init<A>(describing:)();
        uint64_t v265 = sub_4C664(v191, v192);
        sub_758C0((uint64_t)&v265, (uint64_t)&v266, v264);
        sub_17EE8();
        uint64_t v193 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
        uint64_t v96 = v251;
        sub_75C5C(v100);
        sub_1E7D8( &dword_0,  v9,  (os_log_type_t)v17,  "validateConfirmation: Request was not cancelled by user. Proceed with directInvocation %s",  v187);
        sub_1E7D0(v188);
        sub_1B904(v188);
        sub_1B904((uint64_t)v187);
      }

      else
      {
        uint64_t v193 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
        v193(v100, v254);
      }

      sub_755D4();
      v193(v96, v254);
      goto LABEL_29;
    }

    uint64_t v9 = (os_log_s *)v99;
    uint64_t v101 = v238;
    uint64_t v102 = v237;
    uint64_t v103 = (*(uint64_t (**)(void *, void, uint64_t))(v238 + 104))( v237,  enum case for DirectInvocationUtils.Timer.UserInfoKey.buttonPressed(_:),  v239);
    uint64_t v104 = DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter(v103);
    LOBYTE(v1static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = v105;
    sub_17D0C((uint64_t)v102, *(uint64_t (**)(uint64_t, uint64_t))(v101 + 8));
    sub_75550(v104, &v267);
    sub_1BC04();
    uint64_t v106 = sub_2B7C4();
    if (!v268)
    {
      sub_2B374((uint64_t)&v267, &qword_FCD20);
      goto LABEL_83;
    }

    if ((sub_75A5C(v106, v107, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) == 0)
    {
LABEL_26:
      uint64_t v94 = v250;
      goto LABEL_83;
    }

    uint64_t v108 = v265;
    uint64_t v17 = v266;
    sub_1BD3C();
    v269._countAndFlagsBits = v108;
    v269._object = v17;
    char v109 = sub_2130C(v269);
    if (v109 == 2)
    {
      sub_1BC04();
      goto LABEL_26;
    }

    char v203 = v109;
    sub_1BD3C();
    sub_4C3A0();
    os_log_type_t v204 = sub_1BCD0();
    if (sub_2BAD0(v204))
    {
      uint64_t v205 = (_DWORD *)sub_1BA1C(12LL);
      uint64_t v206 = sub_1BA1C(32LL);
      *(void *)&__int128 v267 = v206;
      *uint64_t v205 = 136315138;
      sub_1BD3C();
      uint64_t v207 = sub_683C(v108, (unint64_t)v17, (uint64_t *)&v267);
      uint64_t v208 = sub_75718(v207);
      uint64_t v96 = v251;
      sub_1E844(v208, v209, v210);
      swift_bridgeObjectRelease_n(v17, 3LL);
      sub_75A6C();
      sub_1E7D8(v211, v212, v213, v214, v215);
      sub_1E7D0(v206);
      sub_1B904(v206);
      sub_1B904((uint64_t)v205);
    }

    else
    {

      sub_2B644((uint64_t)v17);
    }

    uint64_t v218 = v250;
    if ((v203 & 1) != 0)
    {
      char v220 = sub_4C5C4(0x6C65636E6163LL, 0xE600000000000000LL, 7562617LL, 0xE300000000000000LL);
      uint64_t v219 = swift_bridgeObjectRelease(0xE600000000000000LL);
      if ((v220 & 1) == 0)
      {
        static ActionForInput.cancel()(v219);
        goto LABEL_117;
      }
    }

    else
    {
      uint64_t v219 = swift_bridgeObjectRelease(0xE300000000000000LL);
    }

    static ActionForInput.handle()(v219);
LABEL_117:
    unint64_t v162 = *(void (**)(uint64_t, uint64_t))(v218 + 8);
    goto LABEL_71;
  }

  uint64_t v124 = v243;
  uint64_t v125 = (uint64_t)v246;
  uint64_t v126 = sub_75D20();
  v127(v126);
  (*(void (**)(uint64_t, uint64_t, os_log_s *))(v124 + 16))(v242, v125, v17);
  uint64_t v128 = sub_75C30();
  int v130 = v129(v128);
  if (v130 == enum case for ConfirmationResponse.confirmed(_:))
  {
    sub_755D4();
LABEL_70:
    sub_75664(v125, *(uint64_t (**)(uint64_t, uint64_t))(v124 + 8));
    unint64_t v162 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
LABEL_71:
    uint64_t v163 = v96;
    uint64_t v164 = v254;
    goto LABEL_103;
  }

  if (v130 == enum case for ConfirmationResponse.rejected(_:))
  {
    sub_758E0();
    goto LABEL_70;
  }

  sub_4C3A0();
  os_log_type_t v178 = sub_3967C();
  if (sub_329F4(v178))
  {
    uint64_t v179 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v179);
    sub_39644( &dword_0,  v180,  v181,  "validateConfirmation: Received an unknown, unhandled SiriKit confirmation, returning .ignore() for interaction");
    uint64_t v125 = (uint64_t)v246;
    sub_1B904((uint64_t)v17);
  }

  sub_7562C();
  uint64_t v182 = *(void (**)(uint64_t, os_log_s *))(v124 + 8);
  v182(v125, v17);
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v96, v254);
  uint64_t v183 = sub_75C30();
  ((void (*)(uint64_t))v182)(v183);
LABEL_29:
  sub_17E58();
}

void sub_71C70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v25 = sub_75740();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_75730();
  sub_75B88();
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = sub_75738();
  sub_75B18();
  __chkstk_darwin(v33);
  sub_18154();
  Input.parse.getter(v34);
  int v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v20, v32);
  if (v35 == enum case for Parse.NLv4IntentOnly(_:))
  {
    sub_433D8(v20, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
    sub_75928();
    if (sub_75920())
    {
      sub_83F68();
      sub_1E83C();
    }

    sub_1E808();
  }

  else if (v35 == enum case for Parse.uso(_:))
  {
    sub_433D8(v20, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 96));
    uint64_t v36 = sub_2C108((uint64_t)v31, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32));
    uint64_t v37 = USOParse.userParse.getter(v36);
    uint64_t v38 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v37);
    sub_75664((uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    if (v38)
    {
      sub_83F68();
      swift_release();
      uint64_t v39 = sub_75D20();
      v40(v39);
    }

    else
    {
      uint64_t v41 = sub_75D20();
      v43(v41, v42);
    }
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v32);
  }

  sub_17E58();
}

uint64_t sub_71E18()
{
  uint64_t v0 = sub_1BD34();
  sub_1B53C(v0, qword_FEC20);
  uint64_t v1 = sub_17D30();
  sub_5474(v1, v2);
  return static SiriTimeLog.timerFlow.getter();
}

void sub_71E58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v24;
  a20 = v25;
  v162[3] = v26;
  uint64_t v28 = v27;
  uint64_t v29 = sub_75B00();
  uint64_t v173 = *(void *)(v29 - 8);
  uint64_t v174 = v29;
  sub_17B6C();
  __chkstk_darwin(v30);
  uint64_t v171 = (uint64_t)v162 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = sub_75800();
  uint64_t v180 = *(void *)(v32 - 8);
  uint64_t v181 = (void (*)(void, void))v32;
  sub_17B6C();
  __chkstk_darwin(v33);
  uint64_t v179 = (char *)v162 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  sub_43628(v35, (uint64_t)&a14);
  uint64_t v165 = v36;
  sub_17B6C();
  __chkstk_darwin(v37);
  sub_17D14();
  uint64_t v164 = v38;
  sub_67C4(&qword_FD5E0);
  sub_17B6C();
  __chkstk_darwin(v39);
  uint64_t v41 = sub_43410((uint64_t)v162 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v42 = type metadata accessor for Siri_Nlu_External_UsoGraph(v41);
  sub_43628(v42, (uint64_t)&a15);
  uint64_t v170 = v43;
  sub_17B6C();
  __chkstk_darwin(v44);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v45);
  sub_436A0();
  uint64_t v169 = v46;
  uint64_t v172 = sub_759A8();
  uint64_t v186 = *(void *)(v172 - 8);
  sub_17B6C();
  __chkstk_darwin(v47);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v48);
  uint64_t v185 = (uint8_t *)v162 - v49;
  sub_433B0();
  __chkstk_darwin(v50);
  sub_43404();
  uint64_t v182 = v51;
  sub_433B0();
  __chkstk_darwin(v52);
  sub_43404();
  uint64_t v183 = v53;
  sub_433B0();
  __chkstk_darwin(v54);
  id v184 = (char *)v162 - v55;
  uint64_t v175 = sub_756E4();
  sub_75B18();
  __chkstk_darwin(v56);
  sub_433A0();
  __chkstk_darwin(v57);
  uint64_t v59 = (char *)v162 - v58;
  uint64_t v60 = sub_75730();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v176 = v60;
  uint64_t v177 = v61;
  sub_17B6C();
  __chkstk_darwin(v62);
  os_log_type_t v178 = (char *)v162 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_756D8();
  sub_75B88();
  __chkstk_darwin(v64);
  sub_21608();
  __chkstk_darwin(v65);
  uint64_t v67 = (char *)v162 - v66;
  sub_75818();
  sub_75700();
  __chkstk_darwin(v68);
  sub_18124();
  Input.parse.getter();
  int v69 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v67, v20);
  if (v69 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_75598();
LABEL_5:
    uint64_t v71 = sub_75C8C();
    sub_59EF4(v71, v72, v73);
    sub_74268();
    uint64_t v74 = sub_75C78();
    v75(v74);
    goto LABEL_6;
  }

  if (v69 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_75598();
    uint64_t v70 = sub_67C4((uint64_t *)&unk_FCC60);
    sub_75CFC(v70);
    goto LABEL_5;
  }

  if (v69 == enum case for Parse.directInvocation(_:))
  {
    sub_75598();
    uint64_t v77 = v179;
    uint64_t v76 = v180;
    uint64_t v78 = v181;
    (*(void (**)(char *, char *, void (*)(void, void)))(v180 + 32))(v179, v67, v181);
    static DirectInvocationUtils.isQuickStopDirectInvocation(_:)(v77);
    (*(void (**)(char *, void))(v76 + 8))(v77, v78);
    goto LABEL_6;
  }

  if (v69 == enum case for Parse.NLv4IntentOnly(_:))
  {
    sub_75598();
    uint64_t v79 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
    if (sub_75544(v79)
      || (uint64_t v80 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected), sub_75544(v80))
      || (uint64_t v81 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted), sub_75544(v81))
      || (uint64_t v82 = objc_opt_self(&OBJC_CLASS___SIRINLUUserWantedToProceed), sub_75544(v82)))
    {
      sub_1E808();
    }

    else
    {
      sub_75928();
      uint64_t v154 = sub_75920();
      if (v154)
      {
        uint64_t v155 = v154;
        if ((sub_74598(v154) & 1) != 0 || (sub_7593C() & 1) != 0)
        {
          sub_1E808();
          sub_1E83C();
        }

        else
        {
          sub_75198(v155);
          sub_1E808();
          sub_1E83C();
        }
      }

      else
      {
        if (qword_FB258 != -1) {
          swift_once(&qword_FB258, sub_71E18);
        }
        uint64_t v156 = sub_1BD34();
        sub_39658(v156, (uint64_t)qword_FEC20);
        os_log_type_t v157 = sub_1BCD0();
        if (sub_2B854(v157))
        {
          uint64_t v158 = (_WORD *)sub_1BA1C(2LL);
          sub_4C4EC(v158);
          sub_1BBEC( &dword_0,  v28,  (os_log_type_t)v67,  "NLv4IntentOnly parse received is NOT valid timer input: not able to get timerTask",  v21);
          sub_1B904((uint64_t)v21);
          sub_1E808();
        }

        else
        {

          sub_1E808();
        }
      }
    }

    goto LABEL_6;
  }

  if (v69 != enum case for Parse.uso(_:))
  {
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v113 = sub_1BD34();
    sub_5474(v113, (uint64_t)qword_FEC20);
    uint64_t v114 = v173;
    uint64_t v115 = v171;
    uint64_t v116 = sub_59EF4(v171, (uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v173 + 16));
    uint64_t v117 = (os_log_s *)Logger.logObject.getter(v116);
    os_log_type_t v118 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v117, v118))
    {
      os_log_type_t v119 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v186 = sub_1BA1C(32LL);
      uint64_t v187 = v186;
      *(_DWORD *)os_log_type_t v119 = 136315138;
      uint64_t v185 = v119 + 4;
      Input.parse.getter();
      uint64_t v120 = String.init<A>(describing:)();
      uint64_t v122 = sub_4351C(v120, v121);
      uint64_t v123 = sub_755B8(v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v123, v124, v185, v119 + 12);
      sub_18034();
      (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v115, v174);
      sub_1E7D8(&dword_0, v117, v118, "Parse received is NOT valid timer input: %s", v119);
      uint64_t v125 = v186;
      sub_1E7D0(v186);
      sub_1B904(v125);
      sub_1B904((uint64_t)v119);
    }

    else
    {
      sub_433D8(v115, *(uint64_t (**)(uint64_t, uint64_t))(v114 + 8));
    }

    (*(void (**)(char *, uint64_t))(v22 + 8))(v67, v20);
    goto LABEL_6;
  }

  sub_75598();
  uint64_t v83 = sub_5A434();
  uint64_t v84 = v176;
  uint64_t v86 = v85(v83);
  uint64_t v87 = USOParse.userParse.getter(v86);
  uint64_t v88 = Siri_Nlu_External_UserParse.userDialogActs.getter(v87);
  uint64_t v89 = *(void (**)(char *, uint64_t))(v23 + 8);
  v89(v59, v175);
  uint64_t v90 = *(void *)(v88 + 16);
  if (!v90)
  {
    uint64_t v112 = sub_2B7C4();
    uint64_t v94 = v172;
    uint64_t v111 = v186;
LABEL_33:
    uint64_t v126 = v166;
    uint64_t v127 = USOParse.userParse.getter(v112);
    uint64_t v128 = (void *)Siri_Nlu_External_UserParse.userDialogActs.getter(v127);
    v89((char *)v126, v175);
    int v129 = (uint8_t *)v128[2];
    uint64_t v130 = v167;
    if (v129)
    {
      sub_75CA4();
      uint64_t v131 = *(void *)(v111 + 72);
      uint64_t v132 = *(uint64_t (**)(uint64_t))(v111 + 16);
      sub_33E50();
      while (1)
      {
        uint64_t v133 = sub_75C30();
        uint64_t v134 = v132(v133);
        if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter(v134) & 1) != 0) {
          break;
        }
        sub_75BCC(v130, *(uint64_t (**)(uint64_t, uint64_t))(v111 + 8));
        v126 += v131;
        if (!--v129)
        {
          sub_2B7C4();
          goto LABEL_38;
        }
      }

      sub_2B7C4();
      uint64_t v136 = v168;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 32))(v168, v130, v94);
      uint64_t v135 = 0LL;
    }

    else
    {
LABEL_38:
      uint64_t v135 = 1LL;
      uint64_t v136 = v168;
    }

    sub_2F75C(v136, v135);
    sub_2B7C4();
    uint64_t v137 = sub_4C720(v136, 1LL, v94);
    uint64_t v139 = v169;
    uint64_t v138 = v170;
    if (v140)
    {
      sub_2BAAC(v137, &qword_FD5E0);
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v146 = sub_1BD34();
      sub_39658(v146, (uint64_t)qword_FEC20);
      os_log_type_t v147 = sub_3967C();
      if (sub_329F4(v147))
      {
        uint64_t v148 = (_WORD *)sub_1BA1C(2LL);
        sub_2BA04(v148);
        sub_39644(&dword_0, v149, v150, "Failed to parse userParse. Not valid timer input.");
        sub_1B904(v126);
      }
    }

    else
    {
      sub_759DC();
      Siri_Nlu_External_UserDialogAct.userStatedTask.getter(v141);
      uint64_t v142 = sub_75BCC(v136, *(uint64_t (**)(uint64_t, uint64_t))(v111 + 8));
      uint64_t v143 = v163;
      Siri_Nlu_External_UserStatedTask.task.getter(v142);
      uint64_t v144 = sub_757BC();
      sub_75634(v144, v145);
      sub_75BF4(v139, v143, *(uint64_t (**)(uint64_t, uint64_t, void))(v138 + 32));
      static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v139, 0LL);
      uint64_t v151 = static UsoConversionUtils.convertGraphToTasks(graph:)();
      uint64_t v152 = v151;
      if ((unint64_t)v151 >> 62)
      {
        if (v151 >= 0) {
          v151 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        if (_CocoaArrayWrapper.endIndex.getter(v151)) {
          goto LABEL_53;
        }
      }

      else if (*(void *)((char *)&dword_10 + (v151 & 0xFFFFFFFFFFFFF8LL)))
      {
LABEL_53:
        sub_8EEB4(0LL, (v152 & 0xC000000000000001LL) == 0, v152);
        if ((v152 & 0xC000000000000001LL) != 0)
        {
          uint64_t v153 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v152);
        }

        else
        {
          uint64_t v153 = *(void *)(v152 + 32);
          swift_retain(v153);
        }

        sub_18034();
        if ((sub_74598(v153) & 1) == 0 && (sub_7593C() & 1) == 0) {
          sub_75198(v153);
        }
        swift_release();
        sub_1E83C();
        sub_75634(v139, *(uint64_t (**)(uint64_t, void))(v138 + 8));
        (*(void (**)(char *))(v177 + 8))(v178);
        goto LABEL_6;
      }

      sub_18034();
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v159 = sub_1BD34();
      sub_39658(v159, (uint64_t)qword_FEC20);
      os_log_type_t v160 = sub_32A5C();
      if (sub_2B854(v160))
      {
        uint64_t v161 = (_WORD *)sub_1BA1C(2LL);
        sub_4C4EC(v161);
        sub_1BBEC( &dword_0,  (os_log_s *)v152,  OS_LOG_TYPE_DEFAULT,  "USO tasks graph has no tasks. Not valid timer input.",  v129);
        sub_1B904((uint64_t)v129);
      }

      swift_release();
      sub_75634(v139, *(uint64_t (**)(uint64_t, void))(v138 + 8));
    }

    (*(void (**)(char *, uint64_t))(v177 + 8))(v178, v84);
    goto LABEL_6;
  }

  uint64_t v181 = (void (*)(void, void))v89;
  uint64_t v91 = v186;
  sub_75CA4();
  uint64_t v92 = *(void *)(v91 + 72);
  uint64_t v93 = *(uint64_t (**)(uint64_t))(v91 + 16);
  sub_33E50();
  uint64_t v94 = v172;
  uint64_t v95 = (uint64_t)v184;
  while (1)
  {
    uint64_t v96 = sub_75C8C();
    uint64_t v97 = v93(v96);
    char v98 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v97);
    uint64_t v99 = v183;
    uint64_t v100 = sub_75820(v183);
    char v101 = (v98 & 1) != 0 ? 1 : Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v100);
    uint64_t v102 = v99;
    uint64_t v103 = v182;
    sub_7553C(v102);
    uint64_t v104 = sub_75820(v103);
    if ((v101 & 1) != 0) {
      break;
    }
    char v105 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v104);
    uint64_t v106 = v103;
    char v107 = v105;
    sub_7553C(v106);
    uint64_t v108 = (uint64_t)v185;
    uint64_t v109 = sub_75820((uint64_t)v185);
    if ((v107 & 1) != 0) {
      goto LABEL_49;
    }
    char v110 = Siri_Nlu_External_UserDialogAct.hasWantedToProceed.getter(v109);
    sub_7553C(v108);
    sub_7553C(v95);
    if ((v110 & 1) != 0) {
      goto LABEL_50;
    }
    v67 += v92;
    --v90;
    uint64_t v111 = v186;
    if (!v90)
    {
      uint64_t v112 = sub_2B644(v88);
      uint64_t v84 = v176;
      uint64_t v89 = (void (*)(char *, uint64_t))v181;
      goto LABEL_33;
    }
  }

  sub_7553C(v103);
  uint64_t v108 = (uint64_t)v185;
  sub_75820((uint64_t)v185);
LABEL_49:
  sub_7553C(v108);
  sub_7553C(v95);
LABEL_50:
  sub_2B644(v88);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v178, v176);
LABEL_6:
  sub_17E58();
}

void sub_7295C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v335 = v23;
  uint64_t v336 = v24;
  int v324 = v25;
  uint64_t v27 = v26;
  sub_67C4(&qword_FBDB0);
  sub_17B6C();
  __chkstk_darwin(v28);
  sub_17D14();
  uint64_t v316 = v29;
  uint64_t v30 = type metadata accessor for ConfirmationResponse(0LL);
  sub_43628(v30, (uint64_t)&a15);
  uint64_t v306 = v31;
  sub_17B6C();
  __chkstk_darwin(v32);
  sub_433A0();
  __chkstk_darwin(v33);
  uint64_t v310 = (char *)v298 - v34;
  uint64_t v35 = sub_75800();
  sub_43628(v35, (uint64_t)&a18);
  uint64_t v319 = v36;
  sub_17B6C();
  __chkstk_darwin(v37);
  sub_17D14();
  uint64_t v39 = sub_43410(v38);
  uint64_t v40 = type metadata accessor for Siri_Nlu_External_UserDialogAct(v39);
  uint64_t v325 = *(void *)(v40 - 8);
  uint64_t v326 = v40;
  sub_17B6C();
  __chkstk_darwin(v41);
  sub_433C4();
  uint64_t v321 = v42;
  sub_433B0();
  __chkstk_darwin(v43);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v44);
  sub_433A0();
  __chkstk_darwin(v45);
  sub_43404();
  sub_433A0();
  __chkstk_darwin(v46);
  sub_436A0();
  uint64_t v48 = sub_43410(v47);
  uint64_t v304 = type metadata accessor for Siri_Nlu_External_UserParse(v48);
  uint64_t v303 = *(void *)(v304 - 8);
  sub_17B6C();
  __chkstk_darwin(v49);
  sub_433A0();
  __chkstk_darwin(v50);
  sub_436A0();
  uint64_t v52 = sub_7567C(v51);
  uint64_t v53 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v52 - 8);
  __chkstk_darwin(v52);
  sub_433A0();
  __chkstk_darwin(v54);
  uint64_t v337 = (char *)v298 - v55;
  sub_433B0();
  __chkstk_darwin(v56);
  sub_436A0();
  uint64_t v58 = sub_43410(v57);
  uint64_t v312 = type metadata accessor for Input(v58);
  uint64_t v311 = *(void *)(v312 - 8);
  sub_17B6C();
  __chkstk_darwin(v59);
  sub_433C4();
  sub_433A0();
  __chkstk_darwin(v60);
  sub_436A0();
  uint64_t v331 = v61;
  sub_67C4(&qword_FBDB8);
  sub_17B6C();
  __chkstk_darwin(v62);
  sub_17D14();
  uint64_t v322 = v63;
  uint64_t v334 = sub_755F4();
  sub_17B6C();
  __chkstk_darwin(v64);
  uint64_t v330 = (uint64_t)v298 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_433B0();
  __chkstk_darwin(v66);
  sub_436A0();
  uint64_t v339 = v67;
  uint64_t v68 = (os_log_s *)sub_756D8();
  sub_75700();
  __chkstk_darwin(v69);
  sub_433C4();
  uint64_t v323 = v70;
  sub_433B0();
  __chkstk_darwin(v71);
  sub_436A0();
  uint64_t v338 = (os_log_s *)v72;
  uint64_t v329 = sub_75818();
  uint64_t v327 = *(void *)(v329 - 8);
  sub_17B6C();
  __chkstk_darwin(v73);
  sub_17FBC(v74, v298[0]);
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v75 = sub_1BD34();
  uint64_t v76 = (os_log_s *)sub_5474(v75, (uint64_t)qword_FEC20);
  uint64_t v77 = v76;
  Logger.logObject.getter(v76);
  os_log_type_t v78 = sub_75B9C();
  if (os_log_type_enabled(v76, v78))
  {
    uint64_t v333 = v20;
    uint64_t v79 = v68;
    uint64_t v80 = sub_1BA1C(12LL);
    uint64_t v308 = v52;
    uint64_t v81 = (uint8_t *)v80;
    uint64_t v82 = sub_1BA1C(32LL);
    uint64_t v332 = v76;
    uint64_t v305 = v53;
    uint64_t v83 = v82;
    v341[0] = v82;
    *(_DWORD *)uint64_t v81 = 136315138;
    uint64_t v340 = v335;
    swift_getMetatypeMetadata(v335);
    uint64_t v84 = sub_75710();
    unint64_t v86 = v85;
    uint64_t v340 = sub_4351C(v84, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, v341, v81 + 4, v81 + 12);
    unint64_t v87 = v86;
    uint64_t v68 = v79;
    uint64_t v20 = v333;
    swift_bridgeObjectRelease(v87);
    sub_1E7D8(&dword_0, v76, v78, "TimerFlowUtils.decideActionForDisambiguationInput with intent type: %s", v81);
    sub_1E7D0(v83);
    uint64_t v88 = v83;
    uint64_t v53 = v305;
    uint64_t v76 = v332;
    sub_1B904(v88);
    uint64_t v89 = (uint64_t)v81;
    uint64_t v52 = v308;
    sub_1B904(v89);
  }

  sub_71E58( v27,  0LL,  v90,  v91,  v92,  v93,  v94,  v95,  v298[0],  v298[1],  (uint64_t)v299,  v300,  v301,  v302,  v303,  v304,  (uint64_t)v305,  v306,  v307,  v308);
  uint64_t v97 = v337;
  uint64_t v98 = (uint64_t)v338;
  if ((v96 & 1) == 0)
  {
    sub_757C8();
    goto LABEL_53;
  }

  Input.parse.getter(v96);
  uint64_t v99 = sub_75C8C();
  int v101 = v100(v99);
  if (v101 == enum case for Parse.NLv3IntentOnly(_:))
  {
    sub_75664(v98, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 96));
    goto LABEL_11;
  }

  if (v101 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    sub_75664(v98, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 96));
    uint64_t v102 = sub_67C4((uint64_t *)&unk_FCC60);
    sub_7599C(v102);
LABEL_11:
    uint64_t v333 = v20;
    uint64_t v103 = v328;
    uint64_t v104 = *(void (**)(uint64_t))(v327 + 32);
    uint64_t v105 = sub_758A4();
    uint64_t v106 = v329;
    v104(v105);
    char v107 = v339;
    ((void (*)(void (*)(void, void), uint64_t, uint64_t))v104)(v339, v103, v106);
    uint64_t v108 = v330;
    sub_1E720((uint64_t)v107, v330);
    sub_1BD00();
    os_log_type_t v109 = sub_2BFB4();
    if (os_log_type_enabled((os_log_t)v104, v109))
    {
      uint64_t v110 = sub_1BA1C(12LL);
      uint64_t v332 = v76;
      uint64_t v111 = v108;
      uint64_t v112 = (uint8_t *)v110;
      uint64_t v113 = sub_1BA1C(32LL);
      uint64_t v338 = (os_log_s *)v27;
      sub_75B7C(v113);
      *(_DWORD *)uint64_t v112 = 136315138;
      sub_11718(&qword_FBE60, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C5488);
      uint64_t v115 = dispatch thunk of CustomStringConvertible.description.getter(v334, v114);
      uint64_t v117 = sub_4351C(v115, v116);
      uint64_t v118 = sub_755B8(v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v118, v119, v112 + 4, v112 + 12);
      sub_18034();
      sub_1E6E4(v111);
      sub_1E7D8(&dword_0, (os_log_s *)v104, v109, "TimerNLIntent: %s", v112);
      sub_1E7D0(v27);
      sub_1B904(v27);
      sub_1B904((uint64_t)v112);
    }

    else
    {
      sub_1E6E4(v108);
    }

    if (qword_FB318 != -1) {
      swift_once(&qword_FB318, sub_9707C);
    }
    uint64_t v120 = qword_101168;
    sub_11718((unint64_t *)&qword_FD600, type metadata accessor for TimerNLv3Intent, (uint64_t)&unk_C54B0);
    IntentNodeTraversable.value<A>(forNode:)(v120, v334, v121);
    __asm { BR              X10 }
  }

  if (v101 != enum case for Parse.directInvocation(_:))
  {
    if (v101 == enum case for Parse.NLv4IntentOnly(_:))
    {
      uint64_t v135 = v20;
      uint64_t v136 = v338;
      sub_75664((uint64_t)v338, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 96));
      uint64_t v137 = *(void *)v136;
      if ((v324 & 1) != 0)
      {
        uint64_t v138 = objc_opt_self(&OBJC_CLASS___SIRINLUUserAccepted);
        if (sub_757F4(v138)
          || (uint64_t v139 = objc_opt_self(&OBJC_CLASS___SIRINLUUserWantedToProceed), sub_757F4(v139))
          || (uint64_t v140 = objc_opt_self(&OBJC_CLASS___SIRINLUUserRejected), sub_757F4(v140)))
        {
          sub_75B28(v137);
          sub_1BD00();
          os_log_type_t v141 = sub_2BFB4();
          if (sub_2B864(v141))
          {
            uint64_t v142 = (uint8_t *)sub_1BA1C(12LL);
            uint64_t v143 = sub_1BA1C(32LL);
            uint64_t v340 = v137;
            v341[0] = v143;
            sub_759C8(4.8149e-34);
            sub_67C4(&qword_FCD00);
            uint64_t v144 = sub_435E8();
            uint64_t v146 = sub_4351C(v144, v145);
            sub_755DC(v146);
            sub_75868(v137);
            sub_2BE5C();
            os_log_type_t v147 = "Received UserDialogAct - %s";
LABEL_30:
            sub_1E7D8(&dword_0, v136, (os_log_type_t)v68, v147, v142);
            sub_1E7D0(v143);
            sub_1B904(v143);
            sub_1B904((uint64_t)v142);

LABEL_106:
            sub_756F0();
LABEL_107:
            sub_75D18();
            goto LABEL_53;
          }

          goto LABEL_105;
        }
      }

      else
      {
        uint64_t v169 = objc_opt_self(&OBJC_CLASS___SIRINLUUserCancelled);
        if (sub_757F4(v169))
        {
          sub_1BD00();
          os_log_type_t v170 = sub_2BFB4();
          if (sub_329F4(v170))
          {
            uint64_t v171 = (_WORD *)sub_1BA1C(2LL);
            sub_2BA04(v171);
            sub_39644(&dword_0, v172, v173, "Received UserDialogAct - UserCancelled");
            sub_1B904((uint64_t)v68);
          }

          sub_75C0C();
          goto LABEL_107;
        }
      }

      swift_getObjectType(v137);
      uint64_t v202 = v137;
      if (SIRINLUUserDialogAct.firstUsoTask.getter())
      {
        uint64_t v136 = (os_log_s *)sub_75758();
        sub_1BC50();
        sub_75BC4();
        sub_75BB8();
        BOOL v205 = v205 && v204 == 0xE600000000000000LL;
        if (v205)
        {
          sub_2B7C4();
        }

        else
        {
          uint64_t v202 = sub_4354C(v203, (uint64_t)v136);
          sub_2B7C4();
          if ((v202 & 1) == 0) {
            goto LABEL_77;
          }
        }

        sub_75B28(v137);
        sub_1BD00();
        os_log_type_t v273 = sub_2BFB4();
        if (sub_2B864(v273))
        {
          uint64_t v142 = (uint8_t *)sub_1BA1C(12LL);
          uint64_t v143 = sub_1BA1C(32LL);
          uint64_t v340 = v137;
          v341[0] = v143;
          sub_759C8(4.8149e-34);
          sub_67C4(&qword_FCD00);
          uint64_t v274 = sub_435E8();
          uint64_t v276 = sub_4351C(v274, v275);
          sub_755DC(v276);
          sub_75868(v137);
          sub_2BE5C();
          os_log_type_t v147 = "decideActionForDisambiguationInput: decide handle disambiguation userDialogAct: %s";
          goto LABEL_30;
        }

LABEL_105:
        sub_75868(v137);
        goto LABEL_106;
      }

LABEL_77:
      sub_75A04();
      uint64_t v206 = sub_46210();
      sub_75784(v206);
      uint64_t v208 = (void *)v207;
      sub_2BAAC(v207, &qword_FBDB8);
      sub_75664((uint64_t)v136, *(uint64_t (**)(uint64_t, uint64_t))(v135 + 8));
      if (v208 && (uint64_t v209 = swift_dynamicCastUnknownClass(v208, v335)) != 0)
      {
        uint64_t v210 = v209;
        id v211 = v208;
        sub_1BD00();
        os_log_type_t v212 = sub_1BCD0();
        if (sub_2BDE0(v212))
        {
          os_log_type_t v213 = (uint8_t *)sub_1BA1C(12LL);
          uint64_t v214 = sub_1BA1C(32LL);
          uint64_t v340 = v210;
          v341[0] = v214;
          *(_DWORD *)os_log_type_t v213 = 136315138;
          id v215 = v211;
          uint64_t v216 = v335;
          uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v335);
          uint64_t v218 = String.init<A>(describing:)(&v340, v216, WitnessTable);
          unint64_t v220 = v219;
          uint64_t v221 = sub_4351C(v218, v219);
          uint64_t v222 = sub_755B8(v221);
          sub_1E844(v222, v223, (uint64_t)(v213 + 4));

          swift_bridgeObjectRelease(v220);
          sub_1E7D8( &dword_0,  (os_log_s *)v202,  (os_log_type_t)&type metadata for Any,  "decideActionForDisambiguationInput: Handling action for intent: %s",  v213);
          sub_1E7D0(v214);
          sub_1B904(v214);
          sub_1B904((uint64_t)v213);
        }

        else
        {
        }

        sub_756F0();
        sub_75D18();
      }

      else
      {
        id v211 = v208;
        sub_1BD00();
        os_log_type_t v253 = sub_32A5C();
        if (sub_2BDE0(v253))
        {
          uint64_t v254 = sub_1BA1C(22LL);
          uint64_t v255 = sub_1BA1C(64LL);
          sub_75B7C(v255);
          *(_DWORD *)uint64_t v254 = 136315394;
          uint64_t v256 = sub_758B0(v335);
          uint64_t v340 = sub_4351C(v256, v257);
          sub_757E8(v340, (uint64_t)v341, v258, v254 + 12);
          sub_756F8();
          *(_WORD *)(v254 + 12) = 2080;
          uint64_t v340 = (uint64_t)v208;
          id v259 = v211;
          sub_67C4(&qword_FEC50);
          uint64_t v260 = sub_75710();
          uint64_t v340 = sub_4351C(v260, v261);
          sub_757E8(v340, (uint64_t)v341, v262, v254 + 22);

          sub_756F8();
          sub_436C0( &dword_0,  (os_log_s *)v202,  (os_log_type_t)&type metadata for Any,  "decideActionForDisambiguationInput: Intent from parse does not match IntentType. Expected %s, received %s",  (uint8_t *)v254);
          sub_436B8(v27);
          sub_1B904(v27);
          sub_1B904(v254);
        }

        else
        {
        }

        sub_757C8();
        sub_75D18();
      }

      goto LABEL_53;
    }

    if (v101 != enum case for Parse.uso(_:))
    {
      uint64_t v174 = v311;
      uint64_t v175 = v302;
      uint64_t v176 = v27;
      uint64_t v177 = v312;
      sub_3822C(v302, v176, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v311 + 16));
      sub_1BD00();
      os_log_type_t v178 = sub_75CB8();
      if (sub_1E810(v68))
      {
        uint64_t v179 = sub_1BA1C(12LL);
        uint64_t v333 = v20;
        uint64_t v180 = (uint8_t *)v179;
        uint64_t v181 = sub_1BA1C(32LL);
        uint64_t v182 = sub_75CE4(v181);
        *(_DWORD *)uint64_t v180 = 136315138;
        Input.parse.getter(v182);
        sub_75BE8();
        uint64_t v183 = String.init<A>(describing:)();
        uint64_t v340 = sub_4351C(v183, v184);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, v341, v180 + 4, v180 + 12);
        sub_18034();
        sub_75878();
        sub_75634(v175, v185);
        sub_1E7D8(&dword_0, v68, v178, "Received unsupported parse for confirmation: %s", v180);
        sub_1E7D0(v52);
        sub_1B904(v52);
        uint64_t v186 = (uint64_t)v180;
        uint64_t v20 = v333;
        sub_1B904(v186);
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v175, v177);
      }

      sub_757C8();
      (*(void (**)(os_log_s *, os_log_s *))(v20 + 8))(v338, v68);
      goto LABEL_53;
    }

    uint64_t v332 = v76;
    uint64_t v333 = v20;
    uint64_t v155 = (uint64_t)v338;
    sub_75664((uint64_t)v338, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 96));
    uint64_t v305 = v53;
    uint64_t v156 = v307;
    sub_59EF4(v307, v155, v53[4]);
    uint64_t v157 = sub_75B08();
    uint64_t v158 = Siri_Nlu_External_UserParse.userDialogActs.getter(v157);
    uint64_t v159 = sub_757BC();
    uint64_t v339 = v160;
    v160(v159, v304);
    uint64_t v161 = *(void *)(v158 + 16);
    uint64_t v308 = v52;
    v298[0] = (uint64_t)v68;
    if ((v324 & 1) != 0)
    {
      if (v161)
      {
        sub_75600();
        uint64_t v53 = v315;
        while (1)
        {
          uint64_t v162 = sub_75988((uint64_t)v53, (uint64_t)v68);
          char v163 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v162);
          uint64_t v164 = v313;
          uint64_t v165 = sub_75988(v313, (uint64_t)v53);
          char v166 = (v163 & 1) != 0 ? 1 : Siri_Nlu_External_UserDialogAct.hasWantedToProceed.getter(v165);
          sub_7553C(v164);
          uint64_t v167 = v314;
          uint64_t v53 = v315;
          uint64_t v168 = sub_75870(v314, (uint64_t)v315);
          if ((v166 & 1) != 0) {
            break;
          }
          LOBYTE(v20) = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v168);
          sub_7553C(v167);
          sub_7553C((uint64_t)v53);
          if ((v20 & 1) != 0) {
            goto LABEL_112;
          }
          sub_75B64();
          uint64_t v97 = v337;
          if (v205) {
            goto LABEL_62;
          }
        }

        sub_7553C(v167);
        sub_7553C((uint64_t)v53);
LABEL_112:
        sub_2B644(v334);
        sub_755CC();
        os_log_type_t v291 = sub_2BFB4();
        if (sub_329F4(v291))
        {
          double v292 = (_WORD *)sub_1BA1C(2LL);
          sub_2BA04(v292);
          sub_39644( &dword_0,  v293,  v294,  "USO parse userDialogActs contains hasAccepted, hasWantedToProceed or hasRejected; returning .handle() since "
            "these are window actions");
          sub_1B904((uint64_t)v68);
        }

        static ActionForInput.handle()(v295);
        goto LABEL_115;
      }
    }

    else if (v161)
    {
      sub_75600();
      uint64_t v53 = v299;
      while (1)
      {
        uint64_t v193 = sub_75988((uint64_t)v53, (uint64_t)v68);
        char v194 = Siri_Nlu_External_UserDialogAct.hasRejected.getter(v193);
        uint64_t v195 = sub_757BC();
        sub_75D10(v195, v196);
        if ((v194 & 1) != 0) {
          break;
        }
        sub_75B64();
        if (v205)
        {
LABEL_62:
          uint64_t v158 = v334;
          sub_18034();
          uint64_t v52 = v308;
          uint64_t v156 = v307;
          LOBYTE(v68) = v298[0];
          goto LABEL_63;
        }
      }

      sub_2B644(v334);
      sub_755CC();
      os_log_type_t v251 = sub_2BFB4();
      if (!sub_329F4(v251)) {
        goto LABEL_97;
      }
      uint64_t v252 = (_WORD *)sub_1BA1C(2LL);
      sub_2BA04(v252);
      uint64_t v250 = "USO parse userDialogActs contains hasRejected, and we're in a non-windowed config -- returning .cancel()!";
      goto LABEL_96;
    }

LABEL_63:
    if (*(void *)(v158 + 16))
    {
      uint64_t v68 = (os_log_s *)(v158
                       + ((*(unsigned __int8 *)(v325 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v325 + 80)));
      uint64_t v53 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v158;
      sub_17C9C();
      uint64_t v197 = v321;
      while (1)
      {
        uint64_t v198 = sub_5A434();
        uint64_t v200 = sub_75988(v198, v199);
        char v201 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter(v200);
        sub_75D10(v197, *(uint64_t (**)(uint64_t, uint64_t))(v325 + 8));
        if ((v201 & 1) != 0) {
          break;
        }
        sub_75B64();
        if (v205)
        {
          sub_2B644((uint64_t)v53);
          uint64_t v52 = v308;
          LOBYTE(v68) = v298[0];
          uint64_t v156 = v307;
          uint64_t v97 = v337;
          goto LABEL_82;
        }
      }

      sub_2B644((uint64_t)v53);
      sub_755CC();
      os_log_type_t v246 = sub_2BFB4();
      if (!sub_329F4(v246)) {
        goto LABEL_97;
      }
      uint64_t v247 = (_WORD *)sub_1BA1C(2LL);
      sub_2BA04(v247);
      uint64_t v250 = "USO parse userDialogActs contains hasCancelled; returning .cancel()";
LABEL_96:
      sub_39644(&dword_0, v248, v249, v250);
      sub_1B904((uint64_t)v68);
LABEL_97:

      sub_75C0C();
LABEL_115:
      sub_75878();
      uint64_t v297 = v307;
LABEL_128:
      v296(v297, v308);
      goto LABEL_53;
    }

    sub_18034();
LABEL_82:
    uint64_t v224 = sub_75B08();
    uint64_t v225 = Siri_Nlu_External_UserParse.firstUsoTask.getter(v224);
    v339(v53, v304);
    uint64_t v226 = v335;
    if (v225)
    {
      uint64_t v227 = (os_log_s *)sub_75758();
      sub_1BC50();
      sub_75BC4();
      sub_75BB8();
      if (v205 && v229 == 0xE600000000000000LL)
      {
        sub_2B7C4();
      }

      else
      {
        uint64_t v225 = sub_4354C(v228, (uint64_t)v227);
        sub_2B7C4();
        if ((v225 & 1) == 0) {
          goto LABEL_88;
        }
      }

      uint64_t v277 = (uint64_t)v305;
      uint64_t v278 = v305[2];
      uint64_t v279 = sub_75C44();
      ((void (*)(uint64_t))v278)(v279);
      sub_755CC();
      os_log_type_t v280 = sub_2BFB4();
      if (sub_2B864(v280))
      {
        os_log_type_t v281 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v339 = (void (*)(void, void))sub_1BA1C(32LL);
        v341[0] = v339;
        sub_758C8(4.8149e-34);
        uint64_t v338 = (os_log_s *)v282;
        uint64_t v283 = sub_75C64();
        sub_75988(v283, v284);
        sub_758A4();
        uint64_t v285 = String.init<A>(describing:)();
        uint64_t v287 = sub_4351C(v285, v286);
        uint64_t v288 = sub_755B8(v287);
        sub_758C0(v288, v289, (uint64_t)v338);
        sub_17EE8();
        (*(void (**)(char *, uint64_t))(v277 + 8))(v97, v52);
        sub_1E7D8( &dword_0,  v227,  (os_log_type_t)v68,  "decideActionForDisambiguationInput decide handle disambiguation UsoParse: %s",  v281);
        uint64_t v290 = v339;
        sub_1E7D0((uint64_t)v339);
        sub_1B904((uint64_t)v290);
        sub_1B904((uint64_t)v281);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v277 + 8))(v97, v52);
      }

      sub_756F0();
      sub_75BDC();
      goto LABEL_53;
    }

LABEL_88:
    sub_75A04();
    uint64_t v231 = sub_46210();
    sub_75784(v231);
    uint64_t v233 = (void *)v232;
    sub_2BAAC(v232, &qword_FBDB8);
    uint64_t v234 = sub_757BC();
    sub_75664(v234, v235);
    if (v233 && (uint64_t v236 = swift_dynamicCastUnknownClass(v233, v226)) != 0)
    {
      uint64_t v237 = v236;
      id v238 = v233;
      sub_755CC();
      os_log_type_t v239 = sub_1BCD0();
      if (sub_434EC(v239))
      {
        uint64_t v240 = (uint8_t *)sub_1BA1C(12LL);
        uint64_t v241 = sub_1BA1C(32LL);
        uint64_t v340 = v237;
        v341[0] = v241;
        id v242 = sub_759F4(4.8149e-34);
        uint64_t v243 = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v226);
        uint64_t v244 = String.init<A>(describing:)(&v340, v226, v243);
        uint64_t v340 = sub_4351C(v244, v245);
        sub_757DC((uint64_t)&v340, (uint64_t)v341);

        sub_756F8();
        sub_1E7D8( &dword_0,  (os_log_s *)v225,  (os_log_type_t)v20,  "decideActionForDisambiguationInput: Handling action for intent: %s",  v240);
        sub_1E7D0(v241);
        sub_1B904(v241);
        sub_1B904((uint64_t)v240);
      }

      else
      {
      }

      sub_756F0();
    }

    else
    {
      id v238 = v233;
      sub_755CC();
      os_log_type_t v263 = sub_32A5C();
      if (sub_434EC(v263))
      {
        uint64_t v264 = sub_1BA1C(22LL);
        uint64_t v265 = sub_1BA1C(64LL);
        sub_75CE4(v265);
        *(_DWORD *)uint64_t v264 = 136315394;
        uint64_t v266 = sub_758B0(v226);
        uint64_t v340 = sub_4351C(v266, v267);
        sub_756B0((uint64_t)&v340, (uint64_t)v341, v268, v264 + 12);
        sub_2BE5C();
        *(_WORD *)(v264 + 12) = 2080;
        uint64_t v340 = (uint64_t)v233;
        id v269 = v238;
        sub_67C4(&qword_FEC50);
        uint64_t v270 = sub_435E8();
        uint64_t v340 = sub_4351C(v270, v271);
        sub_756B0((uint64_t)&v340, v226 + 8, v272, v264 + 22);

        sub_2BE5C();
        sub_436C0( &dword_0,  (os_log_s *)v225,  (os_log_type_t)v20,  "decideActionForDisambiguationInput: Intent from parse does not match IntentType. Expected %s, received %s",  (uint8_t *)v264);
        sub_436B8(v52);
        sub_1B904(v52);
        sub_1B904(v264);
      }

      else
      {
      }

      sub_757C8();
    }

    sub_75878();
    uint64_t v297 = v156;
    goto LABEL_128;
  }

  sub_75664(v98, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 96));
  uint64_t v122 = v319;
  uint64_t v123 = v318;
  uint64_t v124 = sub_758A4();
  uint64_t v125 = v320;
  sub_75590(v124, v126, v127);
  uint64_t v128 = v316;
  static DirectInvocationUtils.siriKitConfirmationResponse(_:)(v123);
  uint64_t v129 = v317;
  uint64_t v130 = sub_4C720(v128, 1LL, v317);
  if (v205)
  {
    sub_2BAAC(v130, &qword_FBDB0);
    sub_1BD00();
    os_log_type_t v131 = sub_2BFB4();
    if (sub_329F4(v131))
    {
      uint64_t v132 = (_WORD *)sub_1BA1C(2LL);
      sub_2BA04(v132);
      sub_39644(&dword_0, v133, v134, "Received confirmation directInvocation, buttonPressed");
      sub_1B904((uint64_t)v68);
    }

    sub_756F0();
    goto LABEL_34;
  }

  uint64_t v148 = v306;
  uint64_t v149 = v310;
  uint64_t v150 = sub_17D30();
  sub_3822C(v150, v151, v152);
  uint64_t v153 = v309;
  sub_3822C(v309, (uint64_t)v149, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v148 + 16));
  int v154 = (*(uint64_t (**)(uint64_t, uint64_t))(v148 + 88))(v153, v129);
  if (v154 == enum case for ConfirmationResponse.confirmed(_:)
    || v154 == enum case for ConfirmationResponse.rejected(_:))
  {
    sub_756F0();
    sub_75930(*(uint64_t (**)(uint64_t, uint64_t))(v148 + 8));
LABEL_34:
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v123, v125);
    goto LABEL_53;
  }

  sub_1BD00();
  os_log_type_t v187 = sub_3967C();
  if (sub_329F4(v187))
  {
    uint64_t v188 = (_WORD *)sub_1BA1C(2LL);
    sub_2BA04(v188);
    sub_39644( &dword_0,  v189,  v190,  "Received an unknown, unhandled SiriKit confirmation, returning .ignore() for interaction");
    uint64_t v191 = v153;
    uint64_t v153 = v309;
    sub_1B904(v191);
  }

  sub_757C8();
  unint64_t v192 = *(void (**)(char *, uint64_t))(v148 + 8);
  v192(v310, v129);
  sub_17D0C(v123, *(uint64_t (**)(uint64_t, uint64_t))(v122 + 8));
  v192((char *)v153, v129);
LABEL_53:
  sub_17E58();
}

uint64_t sub_74268()
{
  uint64_t v0 = sub_67C4(&qword_FEC68);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NLIntent.domainNode.getter(v1);
  uint64_t v4 = type metadata accessor for NonTerminalIntentNode(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v3, 1LL, v4) == 1)
  {
    sub_2B374((uint64_t)v3, &qword_FEC68);
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_5474(v5, (uint64_t)qword_FEC20);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( &dword_0,  v7,  v8,  "Parse received is NOT a valid timer nlv3Intent: domainNode in nlv3Intent is nil",  v9,  2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v11 = NonTerminalIntentNode.ontologyNodeName.getter();
  unint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  BOOL v14 = v11 == 0x72656D6974LL && v13 == 0xE500000000000000LL;
  if (!v14
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, 0x72656D6974LL, 0xE500000000000000LL, 0LL) & 1) == 0)
  {
    if (qword_FB258 != -1) {
      swift_once(&qword_FB258, sub_71E18);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_5474(v15, (uint64_t)qword_FEC20);
    uint64_t v16 = swift_bridgeObjectRetain(v13);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_bridgeObjectRetain(v13);
      uint64_t v21 = sub_683C(v11, v13, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease_n(v13, 3LL);
      _os_log_impl( &dword_0,  v17,  v18,  "Parse received is NOT a valid timer nlv3Intent: received unexpected domain node %s",  v19,  0xCu);
      swift_arrayDestroy(v20, 1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v13, 2LL);
    }

    return 0LL;
  }

  swift_bridgeObjectRelease(v13);
  return 1LL;
}

uint64_t sub_74598(uint64_t a1)
{
  if (v30)
  {
    sub_754CC((uint64_t)v29, (uint64_t)v28, &qword_FCD20);
    uint64_t v1 = type metadata accessor for UsoTask_checkExistence_common_Timer(0LL);
    common_uint64_t Timer = type metadata accessor for UsoTask_create_common_Timer(0LL);
    uint64_t v3 = type metadata accessor for UsoTask_delete_common_Timer(0LL);
    uint64_t v4 = type metadata accessor for UsoTask_pause_common_Timer(0LL);
    uint64_t v5 = type metadata accessor for UsoTask_request_common_Timer(0LL);
    uint64_t v6 = type metadata accessor for UsoTask_reset_common_Timer(0LL);
    if (swift_dynamicCast(&v27, v28, (char *)&type metadata for Any + 8, v6, 0LL)
      || (uint64_t v7 = type metadata accessor for UsoTask_resume_common_Timer(0LL),
          swift_dynamicCast(&v27, v28, (char *)&type metadata for Any + 8, v7, 0LL))
      || (uint64_t started = type metadata accessor for UsoTask_start_common_Timer(0LL),
          swift_dynamicCast(&v27, v28, (char *)&type metadata for Any + 8, started, 0LL))
      || (uint64_t v9 = type metadata accessor for UsoTask_stop_common_Timer(0LL),
          swift_dynamicCast(&v27, v28, (char *)&type metadata for Any + 8, v9, 0LL))
      || (uint64_t v10 = type metadata accessor for UsoTask_summarise_common_Timer(0LL),
          swift_dynamicCast(&v27, v28, (char *)&type metadata for Any + 8, v10, 0LL))
      || (uint64_t updated = type metadata accessor for UsoTask_update_common_Timer(0LL),
          swift_dynamicCast(&v27, v28, (char *)&type metadata for Any + 8, updated, 0LL))
      || (uint64_t v12 = type metadata accessor for UsoTask_noVerb_common_Timer(0LL),
          swift_dynamicCast(&v27, v28, (char *)&type metadata for Any + 8, v12, 0LL))
      || (uint64_t v13 = type metadata accessor for UsoTask_noVerb_uso_NoEntity(0LL),
          swift_dynamicCast(&v27, v28, (char *)&type metadata for Any + 8, v13, 0LL)))
    {
LABEL_15:
      sub_2B374((uint64_t)v31, &qword_FCD20);
      swift_release();
      _s20HandleIntentStrategyVwxx_0(v28);
LABEL_16:
      uint64_t v14 = 1LL;
      goto LABEL_30;
    }

    _s20HandleIntentStrategyVwxx_0(v28);
  }

  if ((sub_73F8() & 1) != 0)
  {
    uint64_t v15 = sub_7238();
    swift_release();
    if (v15)
    {
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v16 = type metadata accessor for Logger(0LL);
      uint64_t v17 = sub_5474(v16, (uint64_t)qword_FEC20);
      os_log_type_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl( &dword_0,  v18,  v19,  "Timer flow received non-timer NLv4 parse – but matches acceptable signature for sleep timer",  v20,  2u);
        swift_slowDealloc(v20, -1LL, -1LL);
      }

      sub_2B374((uint64_t)v31, &qword_FCD20);
      goto LABEL_16;
    }
  }

  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = sub_5474(v21, (uint64_t)qword_FEC20);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    int v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int v25 = 0;
    _os_log_impl(&dword_0, v23, v24, "Timer flow received non-timer NLv4 parse", v25, 2u);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  sub_2B374((uint64_t)v31, &qword_FCD20);
  uint64_t v14 = 0LL;
LABEL_30:
  sub_2B374((uint64_t)v29, &qword_FCD20);
  return v14;
}

uint64_t sub_749CC(uint64_t a1, char a2)
{
  if (!v54) {
    goto LABEL_27;
  }
  sub_754CC((uint64_t)v53, (uint64_t)&v51, &qword_FCD20);
  uint64_t v3 = type metadata accessor for UsoTask_close_uso_NoEntity(0LL);
  if (!swift_dynamicCast(&v49, &v51, (char *)&type metadata for Any + 8, v3, 0LL))
  {
    uint64_t uso_NoEntity = type metadata accessor for UsoTask_read_uso_NoEntity(0LL);
    if (!swift_dynamicCast(&v49, &v51, (char *)&type metadata for Any + 8, uso_NoEntity, 0LL))
    {
      uint64_t v5 = type metadata accessor for UsoTask_open_uso_NoEntity(0LL);
      if (!swift_dynamicCast(&v49, &v51, (char *)&type metadata for Any + 8, v5, 0LL))
      {
        uint64_t v6 = type metadata accessor for UsoTask_stop_uso_NoEntity(0LL);
        if (!swift_dynamicCast(&v49, &v51, (char *)&type metadata for Any + 8, v6, 0LL))
        {
          uint64_t v7 = type metadata accessor for UsoTask_pause_uso_NoEntity(0LL);
          if (!swift_dynamicCast(&v49, &v51, (char *)&type metadata for Any + 8, v7, 0LL))
          {
            uint64_t started = type metadata accessor for UsoTask_start_uso_NoEntity(0LL);
            if (!swift_dynamicCast(&v49, &v51, (char *)&type metadata for Any + 8, started, 0LL))
            {
              uint64_t v9 = type metadata accessor for UsoTask_delete_uso_NoEntity(0LL);
              if (!swift_dynamicCast(&v49, &v51, (char *)&type metadata for Any + 8, v9, 0LL))
              {
                uint64_t v10 = type metadata accessor for UsoTask_repeat_uso_NoEntity(0LL);
                if (!swift_dynamicCast(&v49, &v51, (char *)&type metadata for Any + 8, v10, 0LL))
                {
                  uint64_t v11 = type metadata accessor for UsoTask_resume_uso_NoEntity(0LL);
                  if (!swift_dynamicCast(&v49, &v51, (char *)&type metadata for Any + 8, v11, 0LL))
                  {
                    reuint64_t started = type metadata accessor for UsoTask_restart_uso_NoEntity(0LL);
                    if (!swift_dynamicCast( &v49,  &v51,  (char *)&type metadata for Any + 8,  restarted,  0LL))
                    {
                      uint64_t updated = type metadata accessor for UsoTask_update_uso_NoEntity(0LL);
                      if (!swift_dynamicCast( &v49,  &v51,  (char *)&type metadata for Any + 8,  updated,  0LL))
                      {
                        uint64_t v25 = type metadata accessor for UsoTask_noVerb_common_Setting(0LL);
                        if (swift_dynamicCast(&v48, &v51, (char *)&type metadata for Any + 8, v25, 0LL))
                        {
                          swift_release();
                          if ((a2 & 1) != 0 && sub_83F68() != 3)
                          {
                            sub_2B374((uint64_t)v55, &qword_FCD20);
                            _s20HandleIntentStrategyVwxx_0(&v51);
                            os_log_type_t v24 = v53;
                            goto LABEL_18;
                          }

                          if (qword_FB258 != -1) {
                            swift_once(&qword_FB258, sub_71E18);
                          }
                          uint64_t v26 = type metadata accessor for Logger(0LL);
                          sub_5474(v26, (uint64_t)qword_FEC20);
                          sub_754CC((uint64_t)v55, (uint64_t)&v49, &qword_FCD20);
                          uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
                          os_log_type_t v29 = static os_log_type_t.default.getter();
                          if (os_log_type_enabled(v28, v29))
                          {
                            uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                            uint64_t v31 = swift_slowAlloc(32LL, -1LL);
                            uint64_t v47 = v31;
                            *(_DWORD *)uint64_t v30 = 136315138;
                            sub_754CC((uint64_t)&v49, (uint64_t)&v45, &qword_FCD20);
                            sub_67C4(&qword_FCD20);
                            uint64_t v32 = String.init<A>(describing:)();
                            unint64_t v34 = v33;
                            uint64_t v45 = sub_683C(v32, v33, &v47);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v30 + 4, v30 + 12);
                            swift_bridgeObjectRelease(v34);
                            sub_2B374((uint64_t)&v49, &qword_FCD20);
                            _os_log_impl( &dword_0,  v28,  v29,  "Received a UsoTask_noVerb_common_Setting task with no room confirmation (rejecting): %s",  v30,  0xCu);
                            swift_arrayDestroy(v31, 1LL);
                            swift_slowDealloc(v31, -1LL, -1LL);
                            swift_slowDealloc(v30, -1LL, -1LL);
                          }

                          else
                          {

                            sub_2B374((uint64_t)&v49, &qword_FCD20);
                          }

                          sub_2B374((uint64_t)v55, &qword_FCD20);
                          _s20HandleIntentStrategyVwxx_0(&v51);
LABEL_33:
                          sub_2B374((uint64_t)v53, &qword_FCD20);
                          return 0LL;
                        }

                        _s20HandleIntentStrategyVwxx_0(&v51);
LABEL_27:
                        if (qword_FB258 != -1) {
                          swift_once(&qword_FB258, sub_71E18);
                        }
                        uint64_t v35 = type metadata accessor for Logger(0LL);
                        sub_5474(v35, (uint64_t)qword_FEC20);
                        sub_754CC((uint64_t)v55, (uint64_t)&v51, &qword_FCD20);
                        uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
                        os_log_type_t v38 = static os_log_type_t.default.getter();
                        if (os_log_type_enabled(v37, v38))
                        {
                          uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                          uint64_t v40 = swift_slowAlloc(32LL, -1LL);
                          uint64_t v45 = v40;
                          *(_DWORD *)uint64_t v39 = 136315138;
                          sub_754CC((uint64_t)&v51, (uint64_t)&v49, &qword_FCD20);
                          sub_67C4(&qword_FCD20);
                          uint64_t v41 = String.init<A>(describing:)();
                          unint64_t v43 = v42;
                          uint64_t v49 = sub_683C(v41, v42, &v45);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v39 + 4, v39 + 12);
                          swift_bridgeObjectRelease(v43);
                          sub_2B374((uint64_t)&v51, &qword_FCD20);
                          _os_log_impl( &dword_0,  v37,  v38,  "Received an invalid NoEntity or not a NoEntity task: %s",  v39,  0xCu);
                          swift_arrayDestroy(v40, 1LL);
                          swift_slowDealloc(v40, -1LL, -1LL);
                          swift_slowDealloc(v39, -1LL, -1LL);
                        }

                        else
                        {

                          sub_2B374((uint64_t)&v51, &qword_FCD20);
                        }

                        sub_2B374((uint64_t)v55, &qword_FCD20);
                        goto LABEL_33;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  swift_release();
  _s20HandleIntentStrategyVwxx_0(&v51);
  sub_2B374((uint64_t)v53, &qword_FCD20);
  if (qword_FB258 != -1) {
    swift_once(&qword_FB258, sub_71E18);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_5474(v14, (uint64_t)qword_FEC20);
  sub_754CC((uint64_t)v55, (uint64_t)v53, &qword_FCD20);
  uint64_t v16 = (void *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v16, v17))
  {

    sub_2B374((uint64_t)v53, &qword_FCD20);
    os_log_type_t v24 = v55;
LABEL_18:
    sub_2B374((uint64_t)v24, &qword_FCD20);
    return 1LL;
  }

  os_log_type_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v19 = swift_slowAlloc(32LL, -1LL);
  uint64_t v49 = v19;
  *(_DWORD *)os_log_type_t v18 = 136315138;
  sub_754CC((uint64_t)v53, (uint64_t)&v51, &qword_FCD20);
  sub_67C4(&qword_FCD20);
  uint64_t v20 = String.init<A>(describing:)();
  unint64_t v22 = v21;
  uint64_t v51 = sub_683C(v20, v21, &v49);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v18 + 4, v18 + 12);
  swift_bridgeObjectRelease(v22);
  sub_2B374((uint64_t)v53, &qword_FCD20);
  _os_log_impl(&dword_0, (os_log_t)v16, v17, "Received a valid NoEntity task: %s", v18, 0xCu);
  uint64_t v23 = 1LL;
  swift_arrayDestroy(v19, 1LL);
  swift_slowDealloc(v19, -1LL, -1LL);
  swift_slowDealloc(v18, -1LL, -1LL);

  sub_2B374((uint64_t)v55, &qword_FCD20);
  return v23;
}

uint64_t sub_75198(uint64_t a1)
{
  uint64_t v2 = UsoTask.baseEntityAsString.getter();
  uint64_t v4 = v3;
  v23[0] = v2;
  v23[1] = v3;
  strcpy((char *)v21, "common_Alarm");
  HIBYTE(v21[6]) = 0;
  uint64_t v21[7] = -5120;
  unint64_t v5 = sub_75490();
  char v6 = StringProtocol.contains<A>(_:)(v21, &type metadata for String, &type metadata for String, v5, v5);
  swift_bridgeObjectRelease(v4);
  if ((v6 & 1) == 0) {
    return 1LL;
  }
  static UsoTask_CodegenConverter.convert(task:)(a1);
  sub_754CC((uint64_t)v23, (uint64_t)v21, &qword_FCD20);
  if (v22)
  {
    uint64_t common_Alarm = type metadata accessor for UsoTask_create_common_Alarm(0LL);
    if (swift_dynamicCast(v20, v21, (char *)&type metadata for Any + 8, common_Alarm, 6LL))
    {
      uint64_t v8 = v20[0];
      goto LABEL_7;
    }
  }

  else
  {
    sub_2B374((uint64_t)v21, &qword_FCD20);
  }

  uint64_t v8 = 0LL;
LABEL_7:
  sub_754CC((uint64_t)v23, (uint64_t)v21, &qword_FCD20);
  if (v8)
  {
    swift_release();
    sub_2B374((uint64_t)v21, &qword_FCD20);
  }

  else
  {
    sub_74B8((uint64_t)v21, (uint64_t)v20);
    if (!v20[3])
    {
      sub_2B374((uint64_t)v20, &qword_FCD20);
      goto LABEL_19;
    }

    uint64_t v13 = type metadata accessor for UsoTask_noVerb_common_Alarm(0LL);
    if ((swift_dynamicCast(&v19, v20, (char *)&type metadata for Any + 8, v13, 6LL) & 1) == 0)
    {
LABEL_19:
      if (qword_FB258 != -1) {
        swift_once(&qword_FB258, sub_71E18);
      }
      uint64_t v14 = type metadata accessor for Logger(0LL);
      uint64_t v15 = sub_5474(v14, (uint64_t)qword_FEC20);
      uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        os_log_type_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v18 = 0;
        _os_log_impl(&dword_0, v16, v17, "Timer domain rejecting Alarm parse we cannot support", v18, 2u);
        swift_slowDealloc(v18, -1LL, -1LL);
      }

      sub_2B374((uint64_t)v23, &qword_FCD20);
      return 0LL;
    }

    swift_release();
  }

  uint64_t v9 = UsoTask.alarmEntity.getter();
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v10 = dispatch thunk of UsoEntity_common_Alarm.endDateTime.getter(v9);
  if (v10)
  {
    uint64_t v11 = dispatch thunk of UsoEntity_common_DateTime.offsetValue.getter(v10);
    swift_release();
    swift_release();
    sub_2B374((uint64_t)v23, &qword_FCD20);
    if (v11)
    {
      swift_release();
      return 1LL;
    }
  }

  else
  {
    sub_2B374((uint64_t)v23, &qword_FCD20);
    swift_release();
  }

  return 0LL;
}

BOOL sub_75458(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v1 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v1 = *(void *)(a1 + 16);
  }

  return v1 == 0;
}

unint64_t sub_75490()
{
  unint64_t result = qword_FEC70;
  if (!qword_FEC70)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_FEC70);
  }

  return result;
}

void sub_754CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_17D30();
  v4(v3);
  sub_17DD4();
}

uint64_t sub_75508()
{
  return Logger.logObject.getter();
}

uint64_t sub_75514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v4 - 144, v4 - 128, a3, a4, 6LL);
}

uint64_t sub_75524()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v0, v3, v1, 0LL);
}

uint64_t sub_7553C(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_75544(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

double sub_75550@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1C318(a1, v3, v2, a2);
}

uint64_t sub_7555C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 264) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return 0LL;
}

uint64_t sub_75580()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v2, v0);
}

uint64_t sub_75590@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_75598()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v0);
}

uint64_t sub_755A8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v2, v1);
}

uint64_t sub_755B8(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_755CC()
{
  return Logger.logObject.getter();
}

uint64_t sub_755D4()
{
  return static ActionForInput.handle()();
}

uint64_t sub_755DC(uint64_t a1)
{
  *(void *)(v4 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 104, v3 + 8, v2, v1);
}

uint64_t sub_755F4()
{
  return type metadata accessor for TimerNLv3Intent(0LL);
}

uint64_t sub_75600()
{
  *(void *)(v2 - 120) = v1;
  *(void *)(v2 - 152) = v0;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_7562C()
{
  return static ActionForInput.ignore()();
}

uint64_t sub_75634@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 256));
}

uint64_t sub_7563C(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_75644(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 0LL, 1LL, v1);
}

uint64_t sub_75664@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_7566C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v1, v2);
}

uint64_t sub_7567C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for USOParse(0LL);
}

uint64_t sub_7568C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v0, v2);
}

uint64_t sub_7569C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

void sub_756A8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_756B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_756B8()
{
  return v0(v2, v1);
}

uint64_t sub_756CC(uint64_t a1)
{
  return v1(a1, *(void *)(v2 - 440));
}

uint64_t sub_756D8()
{
  return type metadata accessor for Parse(0LL);
}

uint64_t sub_756E4()
{
  return type metadata accessor for Siri_Nlu_External_UserParse(0LL);
}

uint64_t sub_756F0()
{
  return static ActionForInput.handle()();
}

uint64_t sub_756F8()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_75710()
{
  return String.init<A>(describing:)(v0 - 104);
}

uint64_t sub_75718(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

uint64_t sub_75730()
{
  return type metadata accessor for USOParse(0LL);
}

uint64_t sub_75738()
{
  return type metadata accessor for Parse(0LL);
}

uint64_t sub_75740()
{
  return type metadata accessor for Siri_Nlu_External_UserParse(0LL);
}

uint64_t sub_75748@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return v2(*(void *)(a2 - 256), a1, v3);
}

uint64_t sub_75758()
{
  return sub_6AB8();
}

uint64_t sub_75768(uint64_t a1)
{
  *(void *)(v2 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 144, v2 - 136, *(void *)(v2 - 160), v1);
}

void sub_75784(uint64_t a1)
{
}

uint64_t sub_757B0(uint64_t a1)
{
  return v2(a1, v1, v3);
}

uint64_t sub_757BC()
{
  return v0;
}

uint64_t sub_757C8()
{
  return static ActionForInput.ignore()();
}

uint64_t sub_757D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 128))(a1, a2, v2);
}

uint64_t sub_757DC(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_757E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 104, a2, v4, a4);
}

uint64_t sub_757F4(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_75800()
{
  return type metadata accessor for Parse.DirectInvocation(0LL);
}

uint64_t sub_7580C(uint64_t a1, unint64_t a2)
{
  return sub_683C(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t sub_75818()
{
  return type metadata accessor for NLIntent(0LL);
}

uint64_t sub_75820(uint64_t a1)
{
  return v1(a1, v2, v3);
}

uint64_t sub_7582C(uint64_t a1)
{
  return v1(a1, v2, *(void *)(v3 - 264));
}

uint64_t sub_7583C()
{
  return _typeName(_:qualified:)(*(void *)(v0 - 288), 0LL);
}

void sub_7584C()
{
}

uint64_t sub_7585C()
{
  return Input.parse.getter();
}

uint64_t sub_75868(uint64_t a1)
{
  return swift_unknownObjectRelease_n(a1, 2LL);
}

uint64_t sub_75870(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

  ;
}

uint64_t sub_75884@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return v2(*(void *)(a2 - 256), a1, *(void *)(v3 - 360));
}

uint64_t sub_7589C(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_758A4()
{
  return v0;
}

uint64_t sub_758B0(uint64_t a1)
{
  return _typeName(_:qualified:)(a1, 0LL);
}

uint64_t sub_758B8()
{
  return Logger.logObject.getter();
}

uint64_t sub_758C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

void sub_758C8(float a1)
{
  *uint64_t v1 = a1;
}

void sub_758D8(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_758E0()
{
  return static ActionForInput.cancel()();
}

uint64_t sub_758E8()
{
  return Parse.DirectInvocation.userData.getter();
}

uint64_t sub_758F0()
{
  return v0(v2, v1);
}

uint64_t sub_75904()
{
  return DirectInvocationUtils.Timer.UserInfoKey.rawValue.getter();
}

void sub_7590C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_75914()
{
  return sub_21470(v1, v0);
}

uint64_t sub_75920()
{
  return SIRINLUUserDialogAct.firstUsoTask.getter();
}

uint64_t sub_75928()
{
  return swift_getObjectType(v0);
}

uint64_t sub_75930@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_7593C()
{
  return sub_749CC(v0, *(_DWORD *)(v1 - 324) & 1);
}

uint64_t sub_75950()
{
  return *(void *)(v0 - 400);
}

uint64_t sub_7596C()
{
  return *(void *)(v0 - 400);
}

uint64_t sub_75988(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_75990()
{
  return static ActionForInput.cancel()();
}

uint64_t sub_7599C(uint64_t a1)
{
  return swift_release(*(void *)(v1 + *(int *)(a1 + 48)));
}

uint64_t sub_759A8()
{
  return type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
}

uint64_t sub_759B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 136, v5 + 8, v4, a4);
}

uint64_t sub_759C8(float a1)
{
  *uint64_t v1 = a1;
  return swift_unknownObjectRetain(v2);
}

  ;
}

uint64_t sub_759E8(uint64_t a1)
{
  return swift_dynamicCastUnknownClass(a1, *(void *)(v1 - 288));
}

id sub_759F4(float a1)
{
  *uint64_t v2 = a1;
  return v1;
}

uint64_t sub_75A04()
{
  return Input.parse.getter();
}

uint64_t sub_75A14()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_75A1C()
{
  return Parse.DirectInvocation.identifier.getter();
}

void sub_75A24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_75A2C()
{
  return sub_1E6E4(v0);
}

uint64_t sub_75A34()
{
  return v1(v2, v0);
}

uint64_t sub_75A44(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t sub_75A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v4 - 136, v4 - 120, a3, a4, 6LL);
}

  ;
}

uint64_t sub_75A7C()
{
  return v0;
}

  ;
}

  ;
}

void sub_75AA8(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_75AB0()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 104));
}

  ;
}

  ;
}

uint64_t sub_75AE0()
{
  return DirectInvocationUtils.Timer.URI.rawValue.getter();
}

uint64_t sub_75AE8()
{
  return USOParse.userParse.getter();
}

uint64_t sub_75AF8()
{
  return type metadata accessor for ActionForInput(0LL);
}

uint64_t sub_75B00()
{
  return type metadata accessor for Input(0LL);
}

uint64_t sub_75B08()
{
  return USOParse.userParse.getter();
}

  ;
}

uint64_t sub_75B28(uint64_t a1)
{
  return swift_unknownObjectRetain_n(a1, 2LL);
}

uint64_t sub_75B30@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_75B48()
{
  return v0;
}

uint64_t sub_75B5C()
{
  return sub_7E238(*(void *)(v0 - 144), *(void *)(v0 - 136));
}

  ;
}

  ;
}

uint64_t sub_75B7C(uint64_t result)
{
  *(void *)(v1 - 96) = result;
  return result;
}

  ;
}

uint64_t sub_75B9C()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_75BA4(uint64_t a1, uint64_t a2)
{
  return sub_5474(a1, a2);
}

  ;
}

uint64_t sub_75BC4()
{
  return sub_7010(v0);
}

uint64_t sub_75BCC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_75BD4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_75BDC()
{
  return v0(v2, v1);
}

uint64_t sub_75BE8()
{
  return v0;
}

uint64_t sub_75BF4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void)@<X8>)
{
  return a3(a1, a2, *(void *)(v3 - 256));
}

uint64_t sub_75C00(uint64_t a1, unint64_t a2)
{
  return sub_683C(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t sub_75C0C()
{
  return static ActionForInput.cancel()();
}

void sub_75C14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_75C1C()
{
  return String.init<A>(describing:)(v0 - 136);
}

uint64_t sub_75C24()
{
  return v0(v2, v1);
}

uint64_t sub_75C30()
{
  return v0;
}

void sub_75C3C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_75C44()
{
  return v0;
}

uint64_t sub_75C50()
{
  return String.init<A>(describing:)(v0);
}

uint64_t sub_75C5C(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_75C64()
{
  return v0;
}

uint64_t sub_75C70(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_75C78()
{
  return v0;
}

uint64_t sub_75C84()
{
  return sub_1E6E4(v0);
}

uint64_t sub_75C8C()
{
  return v0;
}

uint64_t sub_75C98()
{
  return v0;
}

  ;
}

uint64_t sub_75CB8()
{
  return static os_log_type_t.error.getter();
}

  ;
}

uint64_t sub_75CCC(uint64_t a1, unint64_t a2)
{
  return sub_683C(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_75CD8(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_75CE4(uint64_t result)
{
  *(void *)(v1 - 96) = result;
  return result;
}

  ;
}

uint64_t sub_75CFC(uint64_t a1)
{
  return swift_release(*(void *)(v1 + *(int *)(a1 + 48)));
}

uint64_t sub_75D08()
{
  return type metadata accessor for DeleteTimerIntent(0LL);
}

uint64_t sub_75D10@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_75D18()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_75D20()
{
  return v0;
}

uint64_t type metadata accessor for DismissTimerCATsSimple(uint64_t a1)
{
  uint64_t result = qword_FEC90;
  if (!qword_FEC90) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DismissTimerCATsSimple);
  }
  return result;
}

uint64_t sub_75D64(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_1010C0);
}

uint64_t sub_75DA0()
{
  return type metadata accessor for DismissTimerCATsSimple(0LL);
}

uint64_t sub_75DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

uint64_t type metadata accessor for TimerIntents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_44F6C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimerIntents);
}

uint64_t sub_75DBC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_75E08 + 4 * byte_C4275[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_75E3C + 4 * byte_C4270[v4]))();
}

uint64_t sub_75E3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_75E44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x75E4CLL);
  }
  return result;
}

uint64_t sub_75E58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x75E60LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_75E64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_75E6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for TimerIntents.FlowError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_44F6C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimerIntents.FlowError);
}

uint64_t sub_75E84(uint64_t a1)
{
  return swift_getWitnessTable(&unk_C4318, a1);
}

void sub_75E94(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_18290(a1);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_17E1C();
}

void sub_75EC8()
{
}

Swift::Int sub_75ED0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_75F1C(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_75F5C + 4 * byte_C427A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_75F7C + 4 * byte_C427F[v4]))();
  }
}

_BYTE *sub_75F5C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_75F7C(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_75F84(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_75F8C(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_75F94(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_75F9C(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t type metadata accessor for TimerIntents.DialogError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_44F6C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimerIntents.DialogError);
}

uint64_t sub_75FB4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_C43E0, a1);
}

void sub_75FC4(uint64_t a1)
{
}

Swift::Int sub_75FF8(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_76030()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FEE60);
  sub_5474(v0, (uint64_t)qword_FEE60);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_76078()
{
  uint64_t v0 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v11[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v11[-1] - v6;
  ContinuousClock.init()(v5);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v7, v0);
  uint64_t v8 = sub_761FC(50000000000000000LL, 0LL, (uint64_t)v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);
  v11[3] = type metadata accessor for DefaultCircuitBreaker();
  v11[4] = &off_F56D8;
  v11[0] = v8;
  sub_DC14();
  return _s20HandleIntentStrategyVwxx_0(v11);
}

void *sub_7616C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v14 = v8;
  uint64_t v15 = &off_F56C8;
  uint64_t v9 = sub_DB90(&v13);
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v9, a3, v8);
  a4[9] = static Duration.zero.getter(v10);
  a4[10] = v11;
  a4[2] = a1;
  a4[3] = a2;
  sub_5530(&v13, (uint64_t)(a4 + 4));
  return a4;
}

void *sub_761FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v18 = v6;
  uint64_t v19 = &off_F56C8;
  uint64_t v7 = sub_DB90(v17);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v7, a3, v6);
  uint64_t v8 = type metadata accessor for DefaultCircuitBreaker();
  uint64_t v9 = (void *)swift_allocObject(v8, 88LL, 7LL);
  uint64_t v10 = sub_DBEC((uint64_t)v17, v18);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v17[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v13 + 16))(v12);
  uint64_t v14 = sub_7616C(a1, a2, (uint64_t)v12, v9);
  _s20HandleIntentStrategyVwxx_0(v17);
  return v14;
}

uint64_t sub_762F4()
{
  return os_signpost(_:dso:log:name:signpostID:)(v1, v3, v2, v4, 20LL, 2LL, v0);
}

uint64_t sub_76314()
{
  return v2(v1, v0);
}

uint64_t sub_76320()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t type metadata accessor for SearchForTimersCATPatternsExecutor(uint64_t a1)
{
  return sub_DAF8(a1, (uint64_t *)&unk_FEF48, (uint64_t)&nominal type descriptor for SearchForTimersCATPatternsExecutor);
}

uint64_t sub_76340(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_1010D0);
}

uint64_t sub_7637C()
{
  uint64_t v1 = sub_67C4(&qword_FBE20);
  uint64_t v2 = sub_34D60(v1, 656LL);
  *(_OWORD *)(v2 + 16) = xmmword_C45E0;
  *(void *)(v2 + 32) = 0xD000000000000020LL;
  *(void *)(v2 + 40) = 0x80000000000C8EE0LL;
  *(_BYTE *)(v2 + 48) = *(_BYTE *)v0;
  sub_78924();
  *(void *)(v2 + 72) = &type metadata for Bool;
  *(void *)(v2 + 80) = v3;
  sub_78910();
  *(void *)(v2 + 88) = v4;
  sub_787EC(v5, (uint64_t)v26);
  sub_787EC((uint64_t)v26, (uint64_t)&v27);
  if ((v28 & 1) != 0)
  {
    uint64_t v6 = 0LL;
    *(void *)(v2 + 104) = 0LL;
    *(void *)(v2 + 112) = 0LL;
    double v7 = 0.0;
  }

  else
  {
    uint64_t v6 = &type metadata for Double;
    double v7 = v27;
  }

  sub_78838((uint64_t)v6, v7);
  sub_787EC(v0 + 24, (uint64_t)&v25);
  sub_787EC((uint64_t)&v25, (uint64_t)&v29);
  uint64_t v8 = v29;
  if (v29)
  {
    uint64_t v9 = type metadata accessor for TimerTimerGrouping();
  }

  else
  {
    uint64_t v9 = 0LL;
    *(void *)(v2 + 152) = 0LL;
    *(void *)(v2 + 160) = 0LL;
  }

  *(void *)(v2 + 144) = v8;
  *(void *)(v2 + 168) = v9;
  *(void *)(v2 + 176) = 0xD000000000000016LL;
  sub_7874C((uint64_t)"hasMatchesInOtherRooms");
  *(void *)(v2 + 360) = &type metadata for Bool;
  *(void *)(v2 + 368) = 0xD000000000000016LL;
  sub_7882C();
  *(void *)(v2 + 376) = v10;
  *(_BYTE *)(v2 + 384) = *(_BYTE *)(v0 + 36);
  *(void *)(v2 + 408) = &type metadata for Bool;
  *(void *)(v2 + 416) = 0xD00000000000001ALL;
  sub_7882C();
  *(void *)(v2 + 424) = v11;
  *(_BYTE *)(v2 + 432) = *(_BYTE *)(v0 + 37);
  *(void *)(v2 + 456) = &type metadata for Bool;
  *(void *)(v2 + 464) = 0x736D657469LL;
  *(void *)(v2 + 472) = 0xE500000000000000LL;
  uint64_t v24 = *(void *)(v0 + 40);
  uint64_t v12 = sub_67C4(&qword_FBE28);
  *(void *)(v2 + 480) = v24;
  *(void *)(v2 + 504) = v12;
  *(void *)(v2 + 512) = 0xD000000000000013LL;
  sub_7882C();
  *(void *)(v2 + 520) = v13;
  sub_787EC(v0 + 48, (uint64_t)v23);
  sub_787EC((uint64_t)v23, (uint64_t)&v30);
  if ((v31 & 1) != 0)
  {
    double v15 = sub_7885C();
  }

  else
  {
    uint64_t v14 = &type metadata for Double;
    double v15 = v30;
  }

  *(double *)(v2 + 528) = v15;
  *(void *)(v2 + 552) = v14;
  *(void *)(v2 + 560) = 0x6574496C61746F74LL;
  *(void *)(v2 + 568) = 0xEA0000000000736DLL;
  sub_787EC(v0 + 64, (uint64_t)v22);
  sub_787EC((uint64_t)v22, (uint64_t)&v32);
  if ((v33 & 1) != 0)
  {
    double v17 = sub_7885C();
  }

  else
  {
    uint64_t v16 = &type metadata for Double;
    double v17 = v32;
  }

  *(double *)(v2 + 576) = v17;
  *(void *)(v2 + 600) = v16;
  *(void *)(v2 + 608) = 0x6953776F646E6977LL;
  *(void *)(v2 + 616) = 0xEA0000000000657ALL;
  sub_59110(v0 + 80, (uint64_t)v21, &qword_FB590);
  sub_59110((uint64_t)v21, (uint64_t)&v34, &qword_FB590);
  if ((v35 & 1) != 0)
  {
    double v19 = sub_7885C();
  }

  else
  {
    uint64_t v18 = &type metadata for Double;
    double v19 = v34;
  }

  *(double *)(v2 + 624) = v19;
  *(void *)(v2 + 648) = v18;
  sub_77758(&v25);
  sub_77780(&v24);
  return v2;
}

void sub_76660()
{
  uint64_t v1 = sub_67C4(&qword_FBD98);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  double v7 = (char *)&v43 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = sub_67C4(&qword_FBE20);
  uint64_t v11 = sub_34D60(v10, 800LL);
  *(_OWORD *)(v11 + 16) = xmmword_C45F0;
  *(void *)(v11 + 32) = 0xD000000000000020LL;
  *(void *)(v11 + 40) = 0x80000000000C8EE0LL;
  *(_BYTE *)(v11 + 48) = *(_BYTE *)v0;
  sub_78924();
  *(void *)(v12 + 72) = &type metadata for Bool;
  *(void *)(v12 + 80) = v13;
  sub_78910();
  *(void *)(v14 + 88) = v15;
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    uint64_t v16 = 0LL;
    *(void *)(v11 + 104) = 0LL;
    *(void *)(v11 + 112) = 0LL;
    double v17 = 0.0;
  }

  else
  {
    double v17 = *(double *)(v0 + 8);
    uint64_t v16 = &type metadata for Double;
  }

  sub_78838((uint64_t)v16, v17);
  uint64_t v18 = *(void *)(v0 + 24);
  if (v18)
  {
    uint64_t v19 = type metadata accessor for TimerTimerGrouping();
    uint64_t v20 = v18;
  }

  else
  {
    uint64_t v20 = 0LL;
    uint64_t v19 = 0LL;
    *(void *)(v11 + 152) = 0LL;
    *(void *)(v11 + 160) = 0LL;
  }

  *(void *)(v11 + 144) = v20;
  *(void *)(v11 + 168) = v19;
  *(void *)(v11 + 176) = 0xD000000000000019LL;
  sub_7874C((uint64_t)"hasMultipleHomePodsInHome");
  *(void *)(v11 + 360) = &type metadata for Bool;
  *(void *)(v11 + 368) = 0xD000000000000016LL;
  *(void *)(v11 + 376) = 0x80000000000C8F30LL;
  *(_BYTE *)(v11 + 384) = *(_BYTE *)(v0 + 36);
  *(void *)(v11 + 408) = &type metadata for Bool;
  *(void *)(v11 + 416) = 0x736D657469LL;
  *(void *)(v11 + 424) = 0xE500000000000000LL;
  uint64_t v21 = *(void *)(v0 + 40);
  uint64_t v22 = sub_67C4(&qword_FBE28);
  *(void *)(v11 + 432) = v21;
  *(void *)(v11 + 456) = v22;
  *(void *)(v11 + 464) = 0xD000000000000013LL;
  sub_7882C();
  *(void *)(v11 + 472) = v23;
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    uint64_t v24 = 0LL;
    *(void *)(v11 + 488) = 0LL;
    *(void *)(v11 + 496) = 0LL;
    uint64_t v25 = 0LL;
  }

  else
  {
    uint64_t v25 = *(void *)(v0 + 48);
    uint64_t v24 = &type metadata for Double;
  }

  *(void *)(v11 + 480) = v25;
  *(void *)(v11 + 504) = v24;
  strcpy((char *)(v11 + 512), "requestedState");
  *(_BYTE *)(v11 + 52static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = -18;
  uint64_t v26 = (int *)sub_78944();
  sub_59624(v0 + v26[14], (uint64_t)v9, &qword_FBD98);
  uint64_t v27 = sub_1BCD8();
  sub_381CC((uint64_t)v9);
  if (v28)
  {
    swift_retain();
    swift_bridgeObjectRetain(v21);
    sub_8CC4((uint64_t)v9, &qword_FBD98);
    *(_OWORD *)(v11 + 528) = 0u;
    *(_OWORD *)(v11 + 544) = 0u;
  }

  else
  {
    *(void *)(v11 + 552) = v27;
    uint64_t v29 = sub_DB90((void *)(v11 + 528));
    sub_3822C( (uint64_t)v29,  (uint64_t)v9,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32LL));
    swift_retain();
    swift_bridgeObjectRetain(v21);
  }

  *(void *)(v11 + 560) = 0xD000000000000016LL;
  sub_7882C();
  *(void *)(v11 + 568) = v30;
  uint64_t v31 = *(void *)(v0 + v26[15]);
  if (v31)
  {
    uint64_t v32 = type metadata accessor for DialogDuration(0LL);
    uint64_t v33 = v31;
  }

  else
  {
    uint64_t v33 = 0LL;
    uint64_t v32 = 0LL;
    *(_OWORD *)(v11 + 584) = 0u;
  }

  *(void *)(v11 + 576) = v33;
  *(void *)(v11 + 600) = v32;
  *(void *)(v11 + 608) = 0xD000000000000013LL;
  sub_7882C();
  *(void *)(v11 + 616) = v34;
  sub_59624(v0 + v26[16], (uint64_t)v7, &qword_FBD98);
  sub_381CC((uint64_t)v7);
  if (v28)
  {
    swift_retain();
    sub_8CC4((uint64_t)v7, &qword_FBD98);
    *(_OWORD *)(v11 + 624) = 0u;
    *(_OWORD *)(v11 + 640) = 0u;
  }

  else
  {
    *(void *)(v11 + 648) = v27;
    char v35 = sub_DB90((void *)(v11 + 624));
    sub_3822C( (uint64_t)v35,  (uint64_t)v7,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32LL));
    swift_retain();
  }

  strcpy((char *)(v11 + 656), "requestedType");
  *(_WORD *)(v11 + 670) = -4864;
  sub_59624(v0 + v26[17], (uint64_t)v4, &qword_FBD98);
  sub_381CC((uint64_t)v4);
  if (v28)
  {
    sub_8CC4((uint64_t)v4, &qword_FBD98);
    *(_OWORD *)(v11 + 672) = 0u;
    *(_OWORD *)(v11 + 688) = 0u;
  }

  else
  {
    *(void *)(v11 + 696) = v27;
    uint64_t v36 = sub_DB90((void *)(v11 + 672));
    sub_3822C( (uint64_t)v36,  (uint64_t)v4,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32LL));
  }

  *(void *)(v11 + 704) = 0x6574496C61746F74LL;
  *(void *)(v11 + 712) = 0xEA0000000000736DLL;
  uint64_t v37 = (uint64_t *)(v0 + v26[18]);
  if ((v37[1] & 1) != 0)
  {
    os_log_type_t v38 = 0LL;
    *(_OWORD *)(v11 + 728) = 0u;
    uint64_t v39 = 0LL;
  }

  else
  {
    uint64_t v39 = *v37;
    os_log_type_t v38 = &type metadata for Double;
  }

  *(void *)(v11 + 720) = v39;
  *(void *)(v11 + 744) = v38;
  *(void *)(v11 + 752) = 0x6953776F646E6977LL;
  *(void *)(v11 + 760) = 0xEA0000000000657ALL;
  uint64_t v40 = v0 + v26[19];
  if ((*(_BYTE *)(v40 + 8) & 1) != 0)
  {
    double v42 = sub_7885C();
  }

  else
  {
    double v42 = *(double *)v40;
    uint64_t v41 = &type metadata for Double;
  }

  *(double *)(v11 + 768) = v42;
  *(void *)(v11 + 792) = v41;
  sub_17E58();
}

uint64_t sub_76B18(char a1, char a2, char a3, char a4, char a5, char a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 136) = v14;
  *(_OWORD *)(v8 + 120) = v13;
  *(void *)(v8 + 112) = a8;
  *(_BYTE *)(v8 + 111) = a7;
  *(_BYTE *)(v8 + 110) = a6;
  *(_BYTE *)(v8 + 109) = a5;
  *(_BYTE *)(v8 + 108) = a4;
  *(_BYTE *)(v8 + 10static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = a3;
  *(_BYTE *)(v8 + 106) = a2;
  *(_BYTE *)(v8 + 105) = a1;
  sub_1B9B8();
  return swift_task_switch(v9, v10, v11);
}

uint64_t sub_76B64()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 111);
  char v2 = *(_BYTE *)(v0 + 110);
  char v3 = *(_BYTE *)(v0 + 109);
  char v4 = *(_BYTE *)(v0 + 108);
  char v5 = *(_BYTE *)(v0 + 107);
  char v6 = *(_BYTE *)(v0 + 106);
  char v7 = *(_BYTE *)(v0 + 105);
  uint64_t v8 = *(void *)(*(void *)(v0 + 128) + 56LL);
  uint64_t v9 = *(void *)(v0 + 112);
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v17 = *(void *)(*(void *)(v0 + 128) + 56LL);
    }
    else {
      uint64_t v17 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v8);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v8);
    uint64_t v11 = *(void *)(v0 + 112);
  }

  else
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8LL));
    uint64_t v11 = swift_bridgeObjectRetain(v9);
  }

  double v12 = (double)v10;
  *(_BYTE *)(v0 + 16) = v7;
  uint64_t v13 = *(void *)(v0 + 136);
  *(void *)(v0 + 24) = 0LL;
  *(_BYTE *)(v0 + 32) = 1;
  *(void *)(v0 + 40) = v13;
  *(_BYTE *)(v0 + 48) = v6;
  *(_BYTE *)(v0 + 49) = v5;
  *(_BYTE *)(v0 + 50) = v4;
  *(_BYTE *)(v0 + 51) = v3;
  *(_BYTE *)(v0 + 52) = v2;
  *(_BYTE *)(v0 + 53) = v1;
  *(void *)(v0 + 56) = v11;
  *(void *)(v0 + 64) = 0LL;
  *(_BYTE *)(v0 + 72) = 1;
  *(double *)(v0 + 80) = v12;
  *(_BYTE *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0LL;
  *(_BYTE *)(v0 + 104) = 1;
  uint64_t v14 = sub_7637C();
  *(void *)(v0 + 144) = v14;
  sub_34DEC((int *)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 152) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_76CC8;
  return v18(0xD00000000000001CLL, 0x80000000000C7300LL, v14);
}

uint64_t sub_76CC8()
{
  *(void *)(v2 + 160) = v1;
  swift_task_dealloc();
  sub_1BC04();
  if (!v1) {
    *(void *)(v2 + 168) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v4, v5, v6);
}

uint64_t sub_76D20()
{
  return sub_78878(*(void *)(v0 + 168), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_76D54()
{
  return sub_33004(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_76D84(char a1, char a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 24) = a8;
  *(void *)(v9 + 32) = a9;
  *(void *)(v9 + 16) = a7;
  *(_BYTE *)(v9 + 93) = a6;
  *(_BYTE *)(v9 + 92) = a5;
  *(_BYTE *)(v9 + 91) = a4;
  *(_BYTE *)(v9 + 90) = a3;
  *(_BYTE *)(v9 + 89) = a2;
  *(_BYTE *)(v9 + 88) = a1;
  uint64_t v10 = sub_78944();
  *(void *)(v9 + 40) = v10;
  *(void *)(v9 + 48) = sub_37EE0(v10);
  sub_1B9B8();
  return sub_2F414(v11, v12, v13);
}

uint64_t sub_76DE0()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v19 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  char v17 = *(_BYTE *)(v0 + 92);
  char v18 = *(_BYTE *)(v0 + 93);
  char v16 = *(_BYTE *)(v0 + 91);
  char v4 = *(_BYTE *)(v0 + 90);
  char v5 = *(_BYTE *)(v0 + 89);
  char v6 = *(_BYTE *)(v0 + 88);
  uint64_t v7 = v1 + v2[14];
  sub_1BCD8();
  sub_7881C(v7);
  sub_7881C(v1 + v2[16]);
  sub_7881C(v1 + v2[17]);
  *(_BYTE *)uint64_t v1 = v6;
  *(void *)(v1 + 8) = 0LL;
  *(_BYTE *)(v1 + 16) = 1;
  *(void *)(v1 + 24) = 0LL;
  *(_BYTE *)(v1 + 32) = v5;
  *(_BYTE *)(v1 + 33) = v4;
  *(_BYTE *)(v1 + 34) = v16;
  *(_BYTE *)(v1 + 35) = v17;
  *(_BYTE *)(v1 + 36) = v18;
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 48) = 0LL;
  *(_BYTE *)(v1 + 56) = 1;
  *(void *)(v1 + v2[15]) = 0LL;
  uint64_t v8 = v1 + v2[18];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = v1 + v2[19];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  swift_bridgeObjectRetain(v3);
  sub_26584(v1, v19);
  sub_76660();
  *(void *)(v0 + 56) = v10;
  uint64_t v11 = sub_788DC((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  uint64_t v20 = v12;
  uint64_t v13 = (void *)swift_task_alloc(v11);
  *(void *)(v0 + 64) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_76F40;
  unint64_t v14 = sub_788A0();
  return v20(v14);
}

uint64_t sub_76F40()
{
  *(void *)(v2 + 72) = v1;
  swift_task_dealloc(v4);
  sub_1BC04();
  if (!v1) {
    *(void *)(v2 + 80) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v5, v6, v7);
}

uint64_t sub_76F98()
{
  return sub_78878(*(void *)(v0 + 80), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_76FCC()
{
  return sub_33004(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_76FFC( char a1, char a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 32) = a9;
  *(void *)(v10 + 40) = a10;
  *(void *)(v10 + 16) = a7;
  *(void *)(v10 + 24) = a8;
  *(_BYTE *)(v10 + 101) = a6;
  *(_BYTE *)(v10 + 100) = a5;
  *(_BYTE *)(v10 + 99) = a4;
  *(_BYTE *)(v10 + 98) = a3;
  *(_BYTE *)(v10 + 9static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = a2;
  *(_BYTE *)(v10 + 96) = a1;
  uint64_t v11 = sub_78944();
  *(void *)(v10 + 48) = v11;
  *(void *)(v10 + 56) = sub_37EE0(v11);
  sub_1B9B8();
  return sub_2F414(v12, v13, v14);
}

uint64_t sub_77058()
{
  uint64_t v2 = *(int **)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v19 = *(void *)(v0 + 32);
  uint64_t v20 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 16);
  char v17 = *(_BYTE *)(v0 + 100);
  char v18 = *(_BYTE *)(v0 + 101);
  char v16 = *(_BYTE *)(v0 + 99);
  char v4 = *(_BYTE *)(v0 + 98);
  char v5 = *(_BYTE *)(v0 + 97);
  char v6 = *(_BYTE *)(v0 + 96);
  uint64_t v7 = v1 + v2[14];
  sub_1BCD8();
  sub_49158(v7);
  sub_49158(v1 + v2[16]);
  sub_49158(v1 + v2[17]);
  *(_BYTE *)uint64_t v1 = v6;
  *(void *)(v1 + 8) = 0LL;
  *(_BYTE *)(v1 + 16) = 1;
  *(void *)(v1 + 24) = 0LL;
  *(_BYTE *)(v1 + 32) = v5;
  *(_BYTE *)(v1 + 33) = v4;
  *(_BYTE *)(v1 + 34) = v16;
  *(_BYTE *)(v1 + 35) = v17;
  *(_BYTE *)(v1 + 36) = v18;
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 48) = 0LL;
  *(_BYTE *)(v1 + 56) = 1;
  *(void *)(v1 + v2[15]) = 0LL;
  uint64_t v8 = v1 + v2[18];
  *(void *)uint64_t v8 = 0LL;
  *(_BYTE *)(v8 + 8) = 1;
  uint64_t v9 = v1 + v2[19];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = 1;
  swift_bridgeObjectRetain(v3);
  sub_29C90(v1, v19, v20);
  sub_76660();
  *(void *)(v0 + 64) = v10;
  uint64_t v11 = sub_788DC((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  uint64_t v21 = v12;
  uint64_t v13 = (void *)swift_task_alloc(v11);
  *(void *)(v0 + 72) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_771BC;
  unint64_t v14 = sub_788A0();
  return v21(v14);
}

uint64_t sub_771BC()
{
  *(void *)(v2 + 80) = v1;
  swift_task_dealloc();
  sub_1BC04();
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v4, v5, v6);
}

uint64_t sub_77214()
{
  return sub_2FB20(*(void *)(v0 + 88), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_77254()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_7729C(char a1, char a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  *(_BYTE *)(v3 + 41) = a2;
  *(_BYTE *)(v3 + 40) = a1;
  return sub_2B82C((uint64_t)sub_772B4);
}

uint64_t sub_772B4()
{
  char v1 = *(_BYTE *)(v0 + 41);
  char v2 = *(_BYTE *)(v0 + 40);
  uint64_t v3 = sub_67C4(&qword_FBE20);
  uint64_t v4 = sub_34D60(v3, 176LL);
  *(void *)(v0 + 24) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_C27D0;
  sub_7882C();
  *(void *)(v5 + 32) = 0xD00000000000001ALL;
  *(void *)(v5 + 40) = v6;
  *(_BYTE *)(v5 + 48) = v2;
  uint64_t v7 = sub_787F4(v5, (uint64_t)&type metadata for Bool);
  *(_BYTE *)(v7 + 96) = v1;
  uint64_t v9 = sub_78884((void *)v7, v8);
  *((_OWORD *)v9 + 9) = 0u;
  *((_OWORD *)v9 + 10) = 0u;
  uint64_t v10 = sub_788DC((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  char v17 = v11;
  uint64_t v12 = (void *)swift_task_alloc(v10);
  *(void *)(v0 + 32) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_77380;
  uint64_t v13 = sub_788EC(0xD00000000000001DLL);
  return sub_7886C(v13, v14, v15, v17);
}

uint64_t sub_77380(uint64_t a1)
{
  uint64_t v6 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 32));
  uint64_t v4 = sub_1BC04();
  if (!v1) {
    uint64_t v4 = a1;
  }
  return sub_2FB20(v4, *(uint64_t (**)(void))(v6 + 8));
}

uint64_t sub_773D4(char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a3;
  *(void *)(v4 + 24) = a4;
  *(_BYTE *)(v4 + 73) = a2;
  *(_BYTE *)(v4 + 72) = a1;
  return sub_2B82C((uint64_t)sub_773EC);
}

uint64_t sub_773EC()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 73);
  char v2 = *(_BYTE *)(v0 + 72);
  sub_D378();
  uint64_t v4 = v3;
  *(void *)(v0 + 32) = v3;
  uint64_t v5 = sub_67C4(&qword_FBE20);
  uint64_t v6 = sub_34D60(v5, 176LL);
  *(void *)(v0 + 40) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_C27D0;
  sub_7882C();
  *(void *)(v7 + 32) = 0xD00000000000001ALL;
  *(void *)(v7 + 40) = v8;
  *(_BYTE *)(v7 + 48) = v2;
  uint64_t v9 = sub_787F4(v7, (uint64_t)&type metadata for Bool);
  *(_BYTE *)(v9 + 96) = v1;
  sub_78884((void *)v9, v10);
  *(void *)(v6 + 168) = type metadata accessor for TimerTimer(0LL);
  *(void *)(v6 + 144) = v4;
  sub_34DEC((int *)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 48) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_774E4;
  uint64_t v12 = sub_788EC(0xD00000000000001DLL);
  return sub_7886C(v12, v13, v14, v16);
}

uint64_t sub_774E4()
{
  *(void *)(v2 + 56) = v1;
  swift_task_dealloc();
  sub_1BC04();
  if (!v1) {
    *(void *)(v2 + 64) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v4, v5, v6);
}

uint64_t sub_7753C()
{
  uint64_t v1 = *(void **)(v0 + 24);
  swift_release(*(void *)(v0 + 32));

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 64));
}

uint64_t sub_77578()
{
  uint64_t v1 = *(void **)(v0 + 24);
  swift_release(*(void *)(v0 + 32));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_775B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_77600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_67C4(&qword_FB530);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_59624(a1, (uint64_t)v12, &qword_FB530);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  sub_8CC4(a1, &qword_FB530);
  sub_17E58();
}

uint64_t sub_77700()
{
  return type metadata accessor for SearchForTimersCATPatternsExecutor(0LL);
}

uint64_t type metadata accessor for SearchForTimersHandledOtherMultiParameters(uint64_t a1)
{
  return sub_DAF8(a1, qword_FF020, (uint64_t)&nominal type descriptor for SearchForTimersHandledOtherMultiParameters);
}

uint64_t sub_7771C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchForTimersHandledOtherMultiParameters(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_77758(void *a1)
{
  return a1;
}

void *sub_77780(void *a1)
{
  return a1;
}

void *sub_777A8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    uint64_t v8 = a2[5];
    uint64_t v7 = a2[6];
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v7;
    uint64_t v9 = a3[14];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for SpeakableString(0LL);
    swift_retain();
    swift_bridgeObjectRetain(v8);
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v11, 1LL, v12))
    {
      uint64_t v13 = sub_67C4(&qword_FBD98);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v10, 0LL, 1LL, v12);
    }

    uint64_t v15 = a3[16];
    *(void *)((char *)v4 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    char v16 = (char *)v4 + v15;
    char v17 = (char *)a2 + v15;
    swift_retain();
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v17, 1LL, v12))
    {
      uint64_t v18 = sub_67C4(&qword_FBD98);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v16, v17, v12);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v16, 0LL, 1LL, v12);
    }

    uint64_t v19 = a3[17];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (char *)a2 + v19;
    if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)a2 + v19, 1LL, v12))
    {
      uint64_t v22 = sub_67C4(&qword_FBD98);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v20, v21, v12);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v20, 0LL, 1LL, v12);
    }

    uint64_t v23 = a3[18];
    uint64_t v24 = a3[19];
    uint64_t v25 = (char *)v4 + v23;
    uint64_t v26 = (uint64_t)a2 + v23;
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = *(_BYTE *)(v26 + 8);
    uint64_t v27 = (char *)v4 + v24;
    uint64_t v28 = (uint64_t)a2 + v24;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = *(_BYTE *)(v28 + 8);
  }

  return v4;
}

uint64_t sub_77A00(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[14];
  uint64_t v5 = type metadata accessor for SpeakableString(0LL);
  swift_release();
  uint64_t v6 = a1 + a2[16];
  uint64_t v7 = a1 + a2[17];
  uint64_t result = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v7, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v7, v5);
  }
  return result;
}

uint64_t sub_77AEC(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v6;
  uint64_t v8 = a3[14];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for SpeakableString(0LL);
  swift_retain();
  swift_bridgeObjectRetain(v7);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v10, 1LL, v11))
  {
    uint64_t v12 = sub_67C4(&qword_FBD98);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v9, 0LL, 1LL, v11);
  }

  uint64_t v13 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  swift_retain();
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v15, 1LL, v11))
  {
    uint64_t v16 = sub_67C4(&qword_FBD98);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v14, v15, v11);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v14, 0LL, 1LL, v11);
  }

  uint64_t v17 = a3[17];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a2 + v17, 1LL, v11))
  {
    uint64_t v20 = sub_67C4(&qword_FBD98);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v18, v19, v11);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v18, 0LL, 1LL, v11);
  }

  uint64_t v21 = a3[18];
  uint64_t v22 = a3[19];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  uint64_t v25 = a1 + v22;
  uint64_t v26 = a2 + v22;
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  return a1;
}

uint64_t sub_77D18(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = a3[14];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for SpeakableString(0LL);
  int v14 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v11, 1LL, v13);
  int v15 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v12, 1LL, v13);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v16 = *(void *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    uint64_t v17 = sub_67C4(&qword_FBD98);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v16 + 24))(v11, v12, v13);
LABEL_7:
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_retain();
  swift_release();
  uint64_t v18 = a3[16];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  int v21 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1 + v18, 1LL, v13);
  int v22 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v20, 1LL, v13);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v19, v20, v13);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v19, 0LL, 1LL, v13);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v23 = *(void *)(v13 - 8);
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v19, v13);
LABEL_12:
    uint64_t v24 = sub_67C4(&qword_FBD98);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, const void *, uint64_t))(v23 + 24))(v19, v20, v13);
LABEL_13:
  uint64_t v25 = a3[17];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (const void *)(a2 + v25);
  int v28 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1 + v25, 1LL, v13);
  int v29 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v27, 1LL, v13);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v13 - 8);
    if (!v29)
    {
      (*(void (**)(void *, const void *, uint64_t))(v30 + 24))(v26, v27, v13);
      goto LABEL_19;
    }

    (*(void (**)(void *, uint64_t))(v30 + 8))(v26, v13);
    goto LABEL_18;
  }

  if (v29)
  {
LABEL_18:
    uint64_t v31 = sub_67C4(&qword_FBD98);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v26, v27, v13);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v26, 0LL, 1LL, v13);
LABEL_19:
  uint64_t v32 = a3[18];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = (uint64_t *)(a2 + v32);
  uint64_t v35 = *v34;
  *(_BYTE *)(v33 + 8) = *((_BYTE *)v34 + 8);
  *(void *)uint64_t v33 = v35;
  uint64_t v36 = a3[19];
  uint64_t v37 = a1 + v36;
  os_log_type_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v39 = *v38;
  *(_BYTE *)(v37 + 8) = *((_BYTE *)v38 + 8);
  *(void *)uint64_t v37 = v39;
  return a1;
}

uint64_t sub_78060(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = a3[14];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_67C4(&qword_FBD98);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  uint64_t v13 = (void *)(a1 + v12);
  int v14 = (const void *)(a2 + v12);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a2 + v12, 1LL, v10))
  {
    uint64_t v15 = sub_67C4(&qword_FBD98);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v13, v14, v10);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v13, 0LL, 1LL, v10);
  }

  uint64_t v16 = a3[17];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a2 + v16, 1LL, v10))
  {
    uint64_t v19 = sub_67C4(&qword_FBD98);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v17, v18, v10);
    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v17, 0LL, 1LL, v10);
  }

  uint64_t v20 = a3[18];
  uint64_t v21 = a3[19];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  *(void *)uint64_t v24 = *(void *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  return a1;
}

uint64_t sub_78270(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v7 = a3[14];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SpeakableString(0LL);
  int v11 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v8, 1LL, v10);
  int v12 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v9, 1LL, v10);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = sub_67C4(&qword_FBD98);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_release();
  uint64_t v15 = a3[16];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  int v18 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1 + v15, 1LL, v10);
  int v19 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v17, 1LL, v10);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v16, v17, v10);
      _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v16, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v20 = *(void *)(v10 - 8);
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v16, v10);
LABEL_12:
    uint64_t v21 = sub_67C4(&qword_FBD98);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, const void *, uint64_t))(v20 + 40))(v16, v17, v10);
LABEL_13:
  uint64_t v22 = a3[17];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (const void *)(a2 + v22);
  int v25 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1 + v22, 1LL, v10);
  int v26 = _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0((uint64_t)v24, 1LL, v10);
  if (!v25)
  {
    uint64_t v27 = *(void *)(v10 - 8);
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 40))(v23, v24, v10);
      goto LABEL_19;
    }

    (*(void (**)(void *, uint64_t))(v27 + 8))(v23, v10);
    goto LABEL_18;
  }

  if (v26)
  {
LABEL_18:
    uint64_t v28 = sub_67C4(&qword_FBD98);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v23, v24, v10);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v23, 0LL, 1LL, v10);
LABEL_19:
  uint64_t v29 = a3[18];
  uint64_t v30 = a3[19];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(void *)uint64_t v33 = *(void *)v34;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  return a1;
}

uint64_t sub_7859C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_785A8);
}

uint64_t sub_785A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_67C4(&qword_FBD98);
    return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(a1 + *(int *)(a3 + 56), a2, v8);
  }

uint64_t sub_78620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7862C);
}

uint64_t sub_7862C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 40) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_67C4(&qword_FBD98);
    return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v5 + *(int *)(a4 + 56), a2, a2, v7);
  }

  return result;
}

void sub_7869C(uint64_t a1)
{
  v4[0] = &unk_C4590;
  v4[1] = &unk_C45A8;
  void v4[2] = &unk_C45C0;
  void v4[3] = &unk_C4590;
  v4[4] = &unk_C4590;
  v4[5] = &unk_C4590;
  v4[6] = &unk_C4590;
  v4[7] = &unk_C4590;
  void v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[9] = &unk_C45A8;
  sub_367C0(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = &unk_C45C0;
    uint64_t v7 = v5;
    uint64_t v8 = v5;
    uint64_t v9 = &unk_C45A8;
    uint64_t v10 = &unk_C45A8;
    swift_initStructMetadata(a1, 256LL, 16LL, v4, a1 + 16);
  }

void sub_7874C(uint64_t a1@<X8>)
{
  *(void *)(v1 + 184) = (a1 - 32) | 0x8000000000000000LL;
  *(_BYTE *)(v1 + 192) = v2[32];
  *(void *)(v1 + 216) = v3;
  strcpy((char *)(v1 + 224), "isConclusion");
  *(_BYTE *)(v1 + 23static OutputPublisherFactory.makeOutputPublisherAsync()(v0 + 7) = 0;
  *(_WORD *)(v1 + 238) = -5120;
  *(_BYTE *)(v1 + 240) = v2[33];
  *(void *)(v1 + 264) = v3;
  strcpy((char *)(v1 + 272), "isFirstWindow");
  *(_WORD *)(v1 + 286) = -4864;
  *(_BYTE *)(v1 + 288) = v2[34];
  *(void *)(v1 + 312) = v3;
  strcpy((char *)(v1 + 320), "isLastWindow");
  *(_BYTE *)(v1 + 333) = 0;
  *(_WORD *)(v1 + 334) = -5120;
  *(_BYTE *)(v1 + 336) = v2[35];
}

void sub_787EC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_787F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 72) = a2;
  strcpy((char *)(result + 80), "isSleepTimer");
  *(_BYTE *)(result + 93) = 0;
  *(_WORD *)(result + 94) = -5120;
  return result;
}

uint64_t sub_7881C(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(a1, 1LL, 1LL, v1);
}

  ;
}

void sub_78838(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v2 + 96) = a2;
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = 0x676E6970756F7267LL;
  *(void *)(v2 + 136) = 0xE800000000000000LL;
}

double sub_7885C()
{
  *uint64_t v0 = 0u;
  return 0.0;
}

uint64_t sub_7886C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_78878(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void *sub_78884@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  result[15] = a2;
  result[16] = 0x72656D6974LL;
  result[17] = 0xE500000000000000LL;
  return result;
}

unint64_t sub_788A0()
{
  return 0xD000000000000021LL;
}

uint64_t sub_788BC()
{
  return sub_7771C(*(void *)(v0 + 56));
}

uint64_t sub_788CC()
{
  return sub_7771C(*(void *)(v0 + 48));
}

uint64_t sub_788DC@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_788EC@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_78904()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 112));
}

  ;
}

  ;
}

uint64_t sub_78938()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_78944()
{
  return type metadata accessor for SearchForTimersHandledOtherMultiParameters(0LL);
}

ValueMetadata *_s20HandleIntentStrategyVMa_3()
{
  return &_s20HandleIntentStrategyVN_3;
}

uint64_t sub_7895C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1B53C(v0, qword_FF090);
  sub_5474(v0, (uint64_t)qword_FF090);
  return static SiriTimeLog.timerFlow.getter();
}

uint64_t sub_789A4(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_67C4(&qword_FBDB8);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_789F4()
{
  uint64_t v1 = sub_6462C();
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v1, v2, v3, v4);
  sub_6EB5C();
  uint64_t v6 = v5;
  sub_7C258(v5, &qword_FBDB8);
  sub_1BABC();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_78A64(uint64_t a1, uint64_t a2)
{
  v2[36] = a1;
  v2[37] = a2;
  uint64_t v3 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[38] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[39] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[40] = swift_task_alloc(v5);
  v2[41] = swift_task_alloc(v5);
  uint64_t v6 = *(void *)(type metadata accessor for SiriTimerSnippetModel(0LL) - 8);
  v2[42] = v6;
  v2[43] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = (*(void *)(*(void *)(sub_67C4(&qword_FC418) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[44] = swift_task_alloc(v7);
  v2[45] = swift_task_alloc(v7);
  v2[46] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for SiriTimeFeatureFlagsImpl(0LL);
  v2[47] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[48] = v9;
  v2[49] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  v2[50] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[51] = v11;
  v2[52] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v2[53] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[54] = v13;
  v2[55] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SiriTimeMeasurement(0LL);
  v2[56] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[57] = v15;
  v2[58] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DialogPhase(0LL);
  v2[59] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[60] = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[61] = swift_task_alloc(v18);
  v2[62] = swift_task_alloc(v18);
  v2[63] = swift_task_alloc(v18);
  v2[64] = swift_task_alloc(v18);
  uint64_t v19 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[65] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v2[66] = v20;
  v2[67] = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for NLContextUpdate(0LL);
  v2[68] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v2[69] = v22;
  unint64_t v23 = (*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[70] = swift_task_alloc(v23);
  v2[71] = swift_task_alloc(v23);
  v2[72] = swift_task_alloc(v23);
  return swift_task_switch(sub_78CC0, 0LL, 0LL);
}

uint64_t sub_78CC0()
{
  if (qword_FB268 != -1) {
    swift_once(&qword_FB268, sub_7895C);
  }
  uint64_t v2 = sub_5474(*(void *)(v1 + 400), (uint64_t)qword_FF090);
  *(void *)(v1 + 584) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (_WORD *)sub_1B9DC();
    sub_2BA04(v5);
    _os_log_impl(&dword_0, v3, v4, "PauseTimer.HandleIntentStrategy.makeIntentHandledResponse() called", v0, 2u);
    sub_1B904((uint64_t)v0);
  }

  uint64_t v6 = sub_67C4(&qword_FF100);
  unint64_t v7 = (void *)IntentResolutionRecord.intentResponse.getter(v6);
  uint64_t v8 = sub_7BDD8(v7);
  *(void *)(v1 + 592) = v8;
  if (!v8) {
    goto LABEL_66;
  }
  uint64_t v9 = v8;
  unint64_t v10 = (unint64_t)v8 >> 62;
  if (!((unint64_t)v8 >> 62))
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8LL));
    sub_33E50();
    if (v11) {
      goto LABEL_8;
    }
    goto LABEL_65;
  }

  if (v8 < 0) {
    uint64_t v131 = v8;
  }
  else {
    uint64_t v131 = v8 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_33E50();
  if (!_CocoaArrayWrapper.endIndex.getter(v131))
  {
LABEL_65:
    sub_4C700();
LABEL_66:
    sub_67C4((uint64_t *)&unk_FF830);
    unint64_t v132 = sub_5A12C();
    uint64_t v133 = sub_2F6A0(v132);
    sub_7C168(v133, v134, v135, v136, v137, v138, v139, v140, 3);
    goto LABEL_67;
  }

uint64_t sub_7959C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 632);
  *(void *)(v3 + 640) = a1;
  *(void *)(v3 + 648) = a2;
  sub_2B988(v4);
  sub_18034();
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_79620()
{
  uint64_t v1 = *(void *)(v0 + 648);
  uint64_t v2 = *(void *)(v0 + 640);
  *(void *)(v0 + 664) = v1;
  *(void *)(v0 + 656) = v2;
  uint64_t v208 = *(void *)(v0 + 584);
  uint64_t v211 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 416);
  uint64_t v186 = *(void *)(v0 + 432);
  uint64_t v193 = *(void *)(v0 + 424);
  uint64_t v199 = *(void *)(v0 + 408);
  uint64_t v204 = *(void *)(v0 + 400);
  uint64_t v5 = type metadata accessor for ApplicationContext(0LL);
  static ApplicationContext.shared.getter(v5);
  ApplicationContext.deviceState.getter((void *)(v0 + 96));
  sub_1BC50();
  uint64_t v6 = *(void *)(v0 + 120);
  sub_8CFC((void *)(v0 + 96), v6);
  uint64_t v178 = v1;
  int v7 = sub_64594(v6) & (v1 != 0);
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 96));
  (*(void (**)(uint64_t, void, uint64_t))(v186 + 104))( v3,  enum case for SiriTimeMeasurement.LogDescription.dialogResponseTime(_:),  v193);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v199 + 16))(v4, v208, v204);
  uint64_t v8 = mach_absolute_time();
  uint64_t v9 = SiriTimeMeasurement.init(_:log:startTime:)(v3, v4, v8);
  static ApplicationContext.shared.getter(v9);
  ApplicationContext.deviceState.getter((void *)(v0 + 136));
  sub_1BC50();
  uint64_t v10 = *(void *)(v0 + 160);
  uint64_t v11 = *(void *)(v0 + 168);
  sub_8CFC((void *)(v0 + 136), v10);
  char v12 = sub_64594(v10);
  _s20HandleIntentStrategyVwxx_0((void *)(v0 + 136));
  if ((v12 & 1) != 0 && !v7)
  {
    id v13 = sub_7C270();
    *(void *)(v0 + 768) = v13;
    sub_18034();
    if (v13)
    {
      uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
      *(void *)(v0 + 272) = 0LL;
      id v15 = sub_64668(v14, "archivedDataWithRootObject:requiringSecureCoding:error:", (uint64_t)v13);
      uint64_t v16 = *(void **)(v0 + 272);
      if (v15)
      {
        uint64_t v17 = v15;
        id v18 = v16;
        uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
        uint64_t v21 = v20;

        *(void *)(v0 + 776) = v19;
        *(void *)(v0 + 784) = v21;
        if (qword_FB148 != -1) {
          swift_once(&qword_FB148, sub_2C148);
        }
        uint64_t v22 = (void *)sub_5A248();
        sub_7C2E0(v22);
        uint64_t v23 = (void *)swift_task_alloc(dword_100A74);
        *(void *)(v0 + 800) = v23;
        sub_7C14C(v23, (uint64_t)sub_7A648);
        return sub_7C108(v24, (uint64_t)sub_7BE9C, (uint64_t)v13);
      }

      uint64_t v72 = *(void **)(v0 + 600);
      sub_7C228();
      uint64_t v73 = *(void *)(v0 + 480);
      uint64_t v193 = *(void *)(v0 + 472);
      uint64_t v74 = *(void *)(v0 + 456);
      uint64_t v75 = *(void *)(v0 + 464);
      uint64_t v76 = *(void *)(v0 + 448);
      id v77 = v16;
      swift_bridgeObjectRelease(v178);
      sub_2B7C4();
      uint64_t v78 = _convertNSErrorToError(_:)(v16);

      uint64_t v160 = v78;
      sub_7C2CC(v79, v80, v81, v82, v83, v84, v85, v86);

      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v75, v76);
      uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v199, v193);
    }

    else
    {
      swift_bridgeObjectRelease(*(void *)(v0 + 608));
      uint64_t v40 = swift_bridgeObjectRelease(v178);
      Logger.logObject.getter(v40);
      os_log_type_t v41 = sub_1BCD0();
      if (sub_1BB80(v41))
      {
        uint64_t v42 = (_WORD *)sub_1B9DC();
        sub_2BA04(v42);
        sub_1BAA8(&dword_0, v43, v44, "Could not get timer action from timer.");
        sub_1B904(v0 + 136);
      }

      sub_7C0A4();
      sub_67C4((uint64_t *)&unk_FF830);
      unint64_t v45 = sub_5A12C();
      uint64_t v46 = sub_2F6A0(v45);
      sub_7C168(v46, v47, v48, v49, v50, v51, v52, v53, 1);

      sub_2B950(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
      uint64_t v54 = MEMORY[0x800000000](v3, v4);
    }

    sub_7C260(v54, v55, v56, v57, v58, v59, v60, v61, v151, v160, v169, v178, v186, v193, v199, v204, v208, v211);
    sub_7BFB8();
    sub_1B838();
    sub_1BA8C();
    sub_1BA60();
    sub_1BAD0();
    sub_1BABC();
    sub_1B86C();
    sub_1BA24();
    sub_1BA14();
    uint64_t v87 = sub_1BA38();
    uint64_t v95 = sub_1B8C4(v87, v88, v89, v90, v91, v92, v93, v94, v152, v161, v170);
    uint64_t v103 = sub_1B8BC(v95, v96, v97, v98, v99, v100, v101, v102, v153, v162, v171, v179);
    uint64_t v111 = sub_1B8B4(v103, v104, v105, v106, v107, v108, v109, v110, v154, v163, v172, v180, v187);
    uint64_t v119 = sub_1B864(v111, v112, v113, v114, v115, v116, v117, v118, v155, v164, v173, v181, v188, v194);
    uint64_t v127 = sub_1B874(v119, v120, v121, v122, v123, v124, v125, v126, v156, v165, v174, v182, v189, v195, v200);
    uint64_t v135 = sub_1B8AC(v127, v128, v129, v130, v131, v132, v133, v134, v157, v166, v175, v183, v190, v196, v201, v205);
    uint64_t v143 = sub_1B8A4( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v158,  v167,  v176,  v184,  v191,  v197,  v202,  v206,  v209);
    sub_1B958( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v159,  v168,  v177,  v185,  v192,  v198,  v203,  v207,  v210,  v212);
    return sub_2B490(*(uint64_t (**)(void))(v0 + 8));
  }

  sub_7C298();
  BOOL v26 = SiriTimeFeatureFlagsImpl.isMultiTimerEnabled()();
  uint64_t v27 = sub_1BD14(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  if (v26)
  {
    uint64_t v28 = *(void **)(v0 + 584);
    Logger.logObject.getter(v27);
    os_log_type_t v29 = sub_1BCD0();
    if (sub_1BB80(v29))
    {
      uint64_t v30 = (_WORD *)sub_1B9DC();
      sub_2BA04(v30);
      sub_1BAA8( &dword_0,  v31,  v32,  "[PauseTimer.HandleIntentStrategy.makeIntentHandledResponse] Using multi-timer RF 2.0 path");
      sub_1B904(v26);
    }

    if (v7)
    {
      sub_2F784();
      uint64_t v33 = sub_6462C();
    }

    else
    {
      unint64_t v62 = *(void *)(v0 + 616);
      uint64_t v63 = _swiftEmptyArrayStorage;
      if (v62)
      {
        sub_7C1F0();
        if ((v62 & 0x8000000000000000LL) != 0) {
          __break(1u);
        }
        sub_7C280();
        do
        {
          uint64_t v64 = *(void *)(v0 + 592);
          if ((v64 & 0xC000000000000001LL) != 0) {
            specialized _ArrayBuffer._getElementSlowPath(_:)(v62, v64);
          }
          else {
            id v65 = *(id *)(v5 + 8 * v62);
          }
          sub_7C2F4();

          sub_7C324();
          if (v67)
          {
            sub_7C1D8(v66);
            uint64_t v63 = v213;
          }

          sub_7C074();
        }

        while ((void *)v62 != v28);
      }

      **(void **)(v0 + 368) = v63;
      uint64_t v68 = sub_2F784();
      sub_644D0(v68);
      uint64_t v33 = sub_6460C();
    }

    _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v33, v34, v35, v36);
    if (qword_FB138 != -1) {
      swift_once(&qword_FB138, sub_2C110);
    }
    uint64_t v69 = (void *)swift_task_alloc(dword_100204);
    *(void *)(v0 + 672) = v69;
    sub_7C14C(v69, (uint64_t)sub_79BB0);
    uint64_t v71 = sub_2B9E8(v70);
    return sub_7C0D0(v71);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 592));
    if (qword_FB148 != -1) {
      swift_once(&qword_FB148, sub_2C148);
    }
    uint64_t v37 = (void *)swift_task_alloc(dword_100A7C);
    *(void *)(v0 + 728) = v37;
    sub_7C14C(v37, (uint64_t)sub_7A370);
    uint64_t v39 = sub_2B9E8(v38);
    return sub_7C0EC(v39);
  }

uint64_t sub_79BB0()
{
  v0[85] = v2;
  v0[86] = v1;
  sub_2B988(v3);
  if (v1)
  {
    swift_bridgeObjectRelease(v0[76]);
    sub_2B7C4();
    sub_18034();
  }

  else
  {
    sub_7C2C4();
  }

  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_79C68()
{
  unint64_t v1 = *(void *)(v0 + 664);
  if (v1)
  {
    uint64_t v2 = *(os_log_s **)(v0 + 584);
    swift_bridgeObjectRelease(*(void *)(v0 + 592));
    uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
    Logger.logObject.getter(v3);
    os_log_type_t v4 = sub_1BCD0();
    if (os_log_type_enabled(v2, v4))
    {
      uint64_t v5 = *(void *)(v0 + 656);
      uint64_t v6 = (uint8_t *)sub_1BA1C(12LL);
      uint64_t v7 = sub_1BA1C(32LL);
      uint64_t v36 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      sub_33E50();
      *(void *)(v0 + 264) = sub_683C(v5, v1, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease_n(v1, 3LL);
      _os_log_impl( &dword_0,  v2,  v4,  "[PauseTimer.HandleIntentStrategy.makeIntentHandledResponse] We have a live activity: %s",  v6,  0xCu);
      swift_arrayDestroy(v7, 1LL);
      sub_1B904(v7);
      sub_1B904((uint64_t)v6);
    }

    else
    {
      sub_4C700();
    }

    uint64_t v15 = *(void *)(v0 + 568);
    static DialogPhase.completion.getter(v16);
    sub_7C244();
    sub_64648();
    uint64_t v17 = sub_2F784();
    uint64_t v18 = sub_7C214(v17);
    uint64_t v19 = *(void *)(v0 + 360);
    if ((_DWORD)v18 == 1)
    {
      sub_7C258(v18, &qword_FC418);
      *(_OWORD *)(v0 + 56) = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
      *(void *)(v0 + 88) = 0LL;
    }

    else
    {
      *(void *)(v0 + 80) = v15;
      *(void *)(v0 + 88) = sub_F0D4();
      uint64_t v20 = sub_DB90((void *)(v0 + 56));
      sub_7BE58(v19, (uint64_t)v20, type metadata accessor for SiriTimePluginModel);
    }

    uint64_t v21 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    *(void *)(v0 + 696) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_7A050;
    sub_5A288();
  }

  else
  {
    uint64_t v8 = *(os_log_s **)(v0 + 584);
    uint64_t v9 = swift_bridgeObjectRetain(*(void *)(v0 + 592));
    Logger.logObject.getter(v9);
    os_log_type_t v10 = sub_1BCD0();
    if (sub_1BB80(v10))
    {
      uint64_t v11 = *(void *)(v0 + 616);
      uint64_t v12 = *(void *)(v0 + 592);
      id v13 = (uint8_t *)sub_1BA1C(12LL);
      *(_DWORD *)id v13 = 134217984;
      swift_bridgeObjectRelease(v12);
      *(void *)(v0 + 280) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(v12);
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "[PauseTimer.HandleIntentStrategy.makeIntentHandledResponse] Using multi-timer snippet model for %ld timers.",  v13,  0xCu);
      sub_1B904((uint64_t)v13);
    }

    else
    {

      uint64_t v14 = sub_4C700();
    }

    uint64_t v29 = *(void *)(v0 + 560);
    static DialogPhase.completion.getter(v14);
    sub_7C244();
    sub_64648();
    uint64_t v30 = sub_2F784();
    uint64_t v31 = sub_7C214(v30);
    uint64_t v32 = *(void *)(v0 + 352);
    if ((_DWORD)v31 == 1)
    {
      sub_7C258(v31, &qword_FC418);
      *(_OWORD *)(v0 + 176) = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
      *(void *)(v0 + 208) = 0LL;
    }

    else
    {
      *(void *)(v0 + 200) = v29;
      *(void *)(v0 + 208) = sub_F0D4();
      uint64_t v33 = sub_DB90((void *)(v0 + 176));
      sub_7BE58(v32, (uint64_t)v33, type metadata accessor for SiriTimePluginModel);
    }

    uint64_t v34 = (void *)swift_task_alloc(async function pointer to DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)[1]);
    *(void *)(v0 + 712) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_7A1DC;
    sub_5A288();
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
  }

  return DialogExecutionResult.generateOutput(dialogPhase:context:resultModel:measure:sessionID:responseViewId:)( v22,  v23,  v24,  v25,  v26,  v27,  v28,  0xD000000000000018LL);
}

uint64_t sub_7A050()
{
  unint64_t v1 = (void *)*v0;
  os_log_type_t v10 = v1;
  uint64_t v2 = v1[69];
  uint64_t v3 = v1[60];
  sub_7C30C(v1[87], &v10);
  sub_2B7C4();
  sub_2B5AC(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  os_log_type_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  v1[88] = v4;
  uint64_t v5 = sub_2B5A0(v4);
  sub_7C258(v5, &qword_FC2B8);
  sub_1B9B8();
  return sub_7C208(v6, v7, v8);
}

#error "7A190: call analysis failed (funcsize=48)"
uint64_t sub_7A1DC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  unint64_t v1 = (void *)*v0;
  uint64_t v14 = v1;
  uint64_t v2 = v1[70];
  uint64_t v3 = v1[69];
  os_log_type_t v4 = v1[68];
  uint64_t v5 = v1[62];
  uint64_t v6 = v1[59];
  uint64_t v7 = v1[60];
  sub_7C30C(v1[89], &v14);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  v1[90] = v8;
  uint64_t v9 = v8(v5, v6);
  sub_7C258(v9, &qword_FC2B8);
  sub_1B9B8();
  return sub_7C208(v10, v11, v12);
}

#error "7A324: call analysis failed (funcsize=48)"
uint64_t sub_7A370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_1BBCC();
  sub_59D48();
  *(void *)(v0 + 736) = v2;
  *(void *)(v0 + 744) = v1;
  sub_2B988(v3);
  sub_7C2C4();
  if (v1) {
    sub_18034();
  }
  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

uint64_t sub_7A41C()
{
  uint64_t v5 = (void *)sub_5A248();
  __int128 v5[2] = v2;
  v5[3] = v0;
  v5[4] = v3;
  sub_5A218((uint64_t)v5, (uint64_t)sub_7BE3C);
  sub_18034();
  sub_1BA14();
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generatePatternOutput(manifest:measure:)[1]);
  *(void *)(v1 + 752) = v6;
  void *v6 = v1;
  v6[1] = sub_7A4D4;
  return sub_59E38();
}

uint64_t sub_7A4D4()
{
  v0[95] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[92];
  (*(void (**)(void, void))(v0[39] + 8LL))(v0[41], v0[38]);

  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

#error "7A5FC: call analysis failed (funcsize=49)"
uint64_t sub_7A648()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v2 = (void *)*v1;
  sub_59D48();
  v2[101] = v3;
  v2[102] = v0;
  sub_2B988(v4);
  swift_bridgeObjectRelease(v2[76]);
  if (v0) {
    sub_18034();
  }
  sub_1B86C();
  sub_1B9B8();
  return sub_2F414(v5, v6, v7);
}

uint64_t sub_7A710()
{
  uint64_t v5 = (void *)sub_5A248();
  __int128 v5[2] = v2;
  v5[3] = v0;
  v5[4] = v3;
  sub_5A218((uint64_t)v5, (uint64_t)sub_7BEA8);
  sub_18034();
  sub_1BA14();
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generatePatternOutput(manifest:measure:)[1]);
  *(void *)(v1 + 824) = v6;
  void *v6 = v1;
  v6[1] = sub_7A7C8;
  return sub_59E38();
}

uint64_t sub_7A7C8()
{
  v0[104] = v1;
  swift_task_dealloc();
  uint64_t v3 = (void *)v0[101];
  (*(void (**)(void, void))(v0[39] + 8LL))(v0[40], v0[38]);

  sub_1B9B8();
  return sub_2F414(v4, v5, v6);
}

#error "7A904: call analysis failed (funcsize=54)"
#error "7AA00: call analysis failed (funcsize=61)"
#error "7AAB4: call analysis failed (funcsize=45)"
#error "7AB68: call analysis failed (funcsize=45)"
#error "7ABF0: call analysis failed (funcsize=46)"
#error "7ACA8: call analysis failed (funcsize=46)"
uint64_t sub_7AD20(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v2 = sub_67C4(&qword_FBD98);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = Data.base64EncodedString(options:)(0LL);
  SpeakableString.init(serializedValue:)(v5._countAndFlagsBits, v5._object);
  uint64_t v6 = type metadata accessor for SpeakableString(0LL);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v4, 0LL, 1LL, v6);
  uint64_t v7 = type metadata accessor for PauseTimerHandledOnWatchParameters(0LL);
  sub_1B4F4((uint64_t)v4, (uint64_t)a1 + *(int *)(v7 + 24));
  type metadata accessor for SirikitApp(0LL);
  uint64_t v8 = sub_67C4(&qword_FF100);
  uint64_t v9 = IntentResolutionRecord.app.getter(v8);
  os_log_type_t v10 = SirikitApp.init(app:)(v9);
  uint64_t result = swift_release();
  *a1 = v10;
  return result;
}

uint64_t sub_7AE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_67C4(&qword_FBD90);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain(a3);
  OutputGenerationManifest.applicationSessionID.setter(a2, a3);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v9, a4, v10);
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0((uint64_t)v9, 0LL, 1LL, v10);
  return OutputGenerationManifest.nlContextUpdate.setter(v9);
}

uint64_t sub_7AEDC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FF114);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = sub_207EC(v1);
  return sub_78A64(v2, v3);
}

uint64_t sub_7AF30()
{
  if (!v0) {
    return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_7AF6C()
{
  uint64_t v2 = sub_67C4(&qword_FBF48);
  uint64_t v4 = sub_207C0(100LL, 0x80000000000C9020LL, v3, v2, (uint64_t)&protocol self-conformance witness table for Error);
  sub_7C2CC(v4, v5, v6, v7, v8, v9, v10, v11);
  swift_errorRelease(v0);
  return sub_2075C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_7AFD8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SiriTimeMeasurement.LogDescription(0LL);
  v3[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v3[9] = v7;
  v3[10] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SiriTimeMeasurement(0LL);
  v3[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[12] = v9;
  v3[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CATOption(0LL);
  v3[14] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NLContextUpdate(0LL);
  v3[15] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[16] = v12;
  v3[17] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DialogPhase(0LL);
  v3[18] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[19] = v14;
  v3[20] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_7B0FC, 0LL, 0LL);
}

uint64_t sub_7B0FC()
{
  if (qword_FB268 != -1) {
    swift_once(&qword_FB268, sub_7895C);
  }
  uint64_t v36 = (os_log_s *)sub_5474(v1[5], (uint64_t)qword_FF090);
  Logger.logObject.getter(v36);
  os_log_type_t v2 = sub_1BCD0();
  if (sub_1BB80(v2))
  {
    uint64_t v3 = (uint8_t *)sub_1B9DC();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl( &dword_0,  v36,  v0,  "PauseTimer.HandleIntentStrategy.makeFailureHandlingIntentResponse() called",  v3,  2u);
    sub_1B904((uint64_t)v3);
  }

  uint64_t v4 = v1[14];
  uint64_t v5 = v1[9];
  uint64_t v6 = v1[10];
  uint64_t v7 = v1[7];
  uint64_t v8 = v1[8];
  uint64_t v9 = v1[6];
  uint64_t v35 = v1[5];

  uint64_t v11 = static DialogPhase.error.getter(v10);
  NLContextUpdate.init()(v11);
  type metadata accessor for TimerBaseCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter();
  v1[21] = CATWrapper.__allocating_init(options:globals:)(v4, 0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v6,  enum case for SiriTimeMeasurement.LogDescription.dialogPatternResponseTime(_:),  v8);
  (*(void (**)(uint64_t, os_log_s *, uint64_t))(v9 + 16))(v7, v36, v35);
  uint64_t v12 = mach_absolute_time();
  SiriTimeMeasurement.init(_:log:startTime:)(v6, v7, v12);
  uint64_t v13 = sub_67C4(&qword_FF100);
  uint64_t v14 = (void *)IntentResolutionRecord.intentResponse.getter(v13);
  uint64_t v15 = dispatch thunk of PauseTimerIntentResponse.code.getter();

  switch(v15)
  {
    case 'd':
      uint64_t v16 = (void *)swift_task_alloc(dword_100574);
      v1[25] = v16;
      sub_7C2A8(v16, (uint64_t)sub_7B50C);
      sub_20788();
      uint64_t result = sub_ACD60();
      break;
    case 'e':
      uint64_t v19 = v1[3];
      uint64_t v20 = swift_task_alloc(32LL);
      v1[22] = v20;
      *(void *)(v20 + 16) = v19;
      uint64_t v21 = (void *)swift_task_alloc(dword_10056C);
      v1[23] = v21;
      *uint64_t v21 = v1;
      v21[1] = sub_7B494;
      sub_2B9E8((uint64_t)sub_7BDD0);
      sub_20788();
      uint64_t result = sub_ACBBC(v22, v23);
      break;
    case 'f':
      if (qword_FB148 != -1) {
        swift_once(&qword_FB148, sub_2C148);
      }
      uint64_t v25 = v1[3];
      uint64_t v24 = (void *)v1[4];
      uint64_t v26 = v24[3];
      uint64_t v27 = v24[4];
      sub_8CFC(v24, v26);
      sub_BB814(v26, v27);
      uint64_t v28 = swift_task_alloc(32LL);
      v1[27] = v28;
      *(void *)(v28 + 16) = v25;
      uint64_t v29 = (void *)swift_task_alloc(dword_100A8C);
      v1[28] = v29;
      *uint64_t v29 = v1;
      v29[1] = sub_7B580;
      sub_20788();
      uint64_t result = sub_BADC4(v30, v31, v32);
      break;
    case 'g':
      if (qword_FB148 != -1) {
        swift_once(&qword_FB148, sub_2C148);
      }
      uint64_t v33 = (void *)swift_task_alloc(dword_100A84);
      v1[30] = v33;
      *uint64_t v33 = v1;
      v33[1] = sub_7B5F8;
      sub_20788();
      uint64_t result = sub_BAC04();
      break;
    case 'h':
      uint64_t v34 = (void *)swift_task_alloc(dword_10057C);
      v1[32] = v34;
      sub_7C2A8(v34, (uint64_t)sub_7B66C);
      sub_20788();
      uint64_t result = sub_ACDC0();
      break;
    default:
      uint64_t v18 = (void *)swift_task_alloc(dword_100564);
      v1[34] = v18;
      sub_7C2A8(v18, (uint64_t)sub_7B6E0);
      sub_20788();
      uint64_t result = sub_AC948();
      break;
  }

  return result;
}

uint64_t sub_7B494()
{
  v2[24] = v1;
  swift_task_dealloc();
  sub_1BA24();
  if (v1)
  {
    sub_1B9B8();
    return sub_2F658(v4, v5, v6);
  }

  else
  {
    v2[36] = v0;
    uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[37] = v8;
    sub_7C178(v8);
    return sub_2F668();
  }

uint64_t sub_7B50C()
{
  *(void *)(v2 + 208) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v4, v5, v6);
  }

  else
  {
    *(void *)(v2 + 288) = v0;
    uint64_t v8 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    uint64_t v9 = (void *)sub_7C300(v8);
    sub_7BF94(v9);
    return sub_20660();
  }

uint64_t sub_7B580()
{
  v2[29] = v1;
  swift_task_dealloc();
  sub_1BA24();
  if (v1)
  {
    sub_1B9B8();
    return sub_2F658(v4, v5, v6);
  }

  else
  {
    v2[36] = v0;
    uint64_t v8 = (void *)swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    v2[37] = v8;
    sub_7C178(v8);
    return sub_2F668();
  }

uint64_t sub_7B5F8()
{
  *(void *)(v2 + 248) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v4, v5, v6);
  }

  else
  {
    *(void *)(v2 + 288) = v0;
    uint64_t v8 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    uint64_t v9 = (void *)sub_7C300(v8);
    sub_7BF94(v9);
    return sub_20660();
  }

uint64_t sub_7B66C()
{
  *(void *)(v2 + 264) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v4, v5, v6);
  }

  else
  {
    *(void *)(v2 + 288) = v0;
    uint64_t v8 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    uint64_t v9 = (void *)sub_7C300(v8);
    sub_7BF94(v9);
    return sub_20660();
  }

uint64_t sub_7B6E0()
{
  *(void *)(v2 + 280) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_1B9B8();
    return sub_2F414(v4, v5, v6);
  }

  else
  {
    *(void *)(v2 + 288) = v0;
    uint64_t v8 = swift_task_alloc(async function pointer to PatternExecutionResult.generateStandardPatternOutput(phase:contextUpdate:measure:dismissAssistant:)[1]);
    uint64_t v9 = (void *)sub_7C300(v8);
    sub_7BF94(v9);
    return sub_20660();
  }

uint64_t sub_7B754()
{
  *(void *)(*(void *)v1 + 304LL) = v0;
  swift_task_dealloc();
  sub_1B9B8();
  return sub_1B758();
}

#error "7B824: call analysis failed (funcsize=38)"
#error "7B878: call analysis failed (funcsize=20)"
#error "7B8C8: call analysis failed (funcsize=20)"
#error "7B918: call analysis failed (funcsize=20)"
#error "7B968: call analysis failed (funcsize=20)"
#error "7B9B8: call analysis failed (funcsize=20)"
#error "7BA08: call analysis failed (funcsize=20)"
#error "7BA60: call analysis failed (funcsize=22)"
void sub_7BA7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  void *v5;
  uint64_t v2 = sub_67C4(&qword_FF100);
  uint64_t v5 = (void *)IntentResolutionRecord.intent.getter(v2);
  uint64_t v3 = type metadata accessor for PauseTimerIntent(0LL);
  uint64_t v4 = IntentTargetable.knownHomePodCount.getter(v3, &protocol witness table for PauseTimerIntent);

  *(double *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t sub_7BAF4(uint64_t a1)
{
  uint64_t v2 = sub_67C4(&qword_FF100);
  uint64_t v3 = (void *)IntentResolutionRecord.intent.getter(v2);
  id v4 = [v3 targetTimer];

  if (v4)
  {
    uint64_t v5 = sub_B624C();
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t result = swift_release();
  *(void *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_7BB78()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FF0FC);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = sub_207EC(v1);
  return sub_7AFD8(v2, v3);
}

uint64_t sub_7BBCC()
{
  if (!v0) {
    return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_7BC08()
{
  uint64_t v2 = sub_67C4(&qword_FBF48);
  uint64_t v4 = sub_207C0(108LL, 0x80000000000C8FB0LL, v3, v2, (uint64_t)&protocol self-conformance witness table for Error);
  sub_7C2CC(v4, v5, v6, v7, v8, v9, v10, v11);
  swift_errorRelease(v0);
  return sub_2075C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_7BC74()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FF10C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10E90;
  return sub_7AEDC();
}

uint64_t sub_7BCD4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_FF0F4);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_20504;
  return sub_7BB78();
}

uint64_t sub_7BD34(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_FF11C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_C5FC;
  return sub_789A4(a1, a2);
}

unint64_t sub_7BD8C()
{
  unint64_t result = qword_FF0B0[0];
  if (!qword_FF0B0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_C4628, &_s20HandleIntentStrategyVN_3);
    atomic_store(result, qword_FF0B0);
  }

  return result;
}

uint64_t sub_7BDC8(uint64_t a1)
{
  return sub_7BAF4(a1);
}

void sub_7BDD0(uint64_t a1)
{
}

uint64_t sub_7BDD8(void *a1)
{
  id v2 = [a1 pausedTimers];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = type metadata accessor for SiriTimer(0LL);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_7BE3C(uint64_t a1)
{
  return sub_7AE14(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_7BE58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_7BE9C(uint64_t *a1)
{
  return sub_7AD20(a1);
}

uint64_t sub_7BEAC()
{
  return swift_task_dealloc(*(void *)(v0 + 576));
}

uint64_t sub_7BF04()
{
  return (*(uint64_t (**)(void, void))(v0[69] + 8LL))(v0[72], v0[68]);
}

uint64_t sub_7BF6C()
{
  return swift_release(*(void *)(v0 + 168));
}

uint64_t sub_7BF94(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t sub_7BFB8()
{
  return swift_task_dealloc(*(void *)(v0 + 576));
}

uint64_t sub_7C00C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_7C01C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_7C02C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_7C03C()
{
  return sub_21470(*(void *)(v0 + 776), *(void *)(v0 + 784));
}

uint64_t sub_7C074()
{
  uint64_t v6 = *(void *)(v1 + 344);
  *(void *)(v3 + 16) = v2;
  return sub_7BE58( v6,  v3 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
         + *(void *)(v4 + 72) * v5,
           v0);
}

void sub_7C0A4()
{
}

uint64_t sub_7C0D0(uint64_t a1)
{
  return sub_A2AA4(a1);
}

uint64_t sub_7C0EC(uint64_t a1)
{
  return sub_BAB2C(a1);
}

uint64_t sub_7C108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_BA96C(a1, a2, a3);
}

void sub_7C124()
{
}

void *sub_7C14C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_7C15C()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_7C168@<X0>( uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char a9@<W8>)
{
  *a2 = a9;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_7C178(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v3 + 16);
}

void sub_7C19C()
{
}

  ;
}

size_t sub_7C1D8@<X0>(unint64_t a1@<X8>)
{
  return sub_2AE2C(a1 > 1, v1, 1);
}

size_t sub_7C1F0()
{
  return sub_2AE2C(0LL, v0 & ~(v0 >> 63), 0);
}

uint64_t sub_7C208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_7C214(uint64_t a1)
{
  return _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v1, 1LL, a1);
}

  ;
}

uint64_t sub_7C244()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_7C258(uint64_t a1, uint64_t *a2)
{
  return sub_DABC(v2, a2);
}

uint64_t sub_7C260( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a16 + 8))(a18, a17);
}

id sub_7C270()
{
  return sub_4C75C(*(void *)(v0 + 592), 0xDu);
}

  ;
}

uint64_t sub_7C298()
{
  return static SiriTimeFeatureFlagsImpl.instance.getter();
}

void *sub_7C2A8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_7C2B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a18, a17);
}

uint64_t sub_7C2C4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 608));
}

uint64_t sub_7C2CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_7C2D4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(v1);
}

void *sub_7C2E0(void *result)
{
  *(void *)(v3 + 792) = result;
  result[2] = v1;
  result[3] = v2;
  result[4] = v4;
  return result;
}

void sub_7C2F4()
{
}

uint64_t sub_7C300(uint64_t result)
{
  *(void *)(v1 + 296) = result;
  return result;
}

uint64_t sub_7C30C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_7C318()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

  ;
}

uint64_t type metadata accessor for ResumeTimerCATPatternsExecutor(uint64_t a1)
{
  return sub_DAF8(a1, (uint64_t *)&unk_FF120, (uint64_t)&nominal type descriptor for ResumeTimerCATPatternsExecutor);
}

uint64_t sub_7C34C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + qword_1010E0);
}

void sub_7C388()
{
  uint64_t v1 = v0;
  sub_67C4(&qword_FBD98);
  sub_1BCE0();
  __chkstk_darwin(v2);
  sub_1C308();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = sub_67C4(&qword_FBE20);
  uint64_t v7 = sub_34D60(v6, 80LL);
  *(_OWORD *)(v7 + 16) = xmmword_C2640;
  uint64_t v8 = (void *)(v7 + 48);
  sub_7DED8();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = 0xE800000000000000LL;
  sub_8C84(v1, v5, &qword_FBD98);
  uint64_t v11 = sub_1BCD8();
  sub_490E4(v5);
  if (v12)
  {
    sub_17A70(v5, &qword_FBD98);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
  }

  else
  {
    *(void *)(v7 + 72) = v11;
    uint64_t v13 = sub_DB90(v8);
    sub_7DEAC((uint64_t)v13);
  }

  sub_37FA0();
}

void sub_7C460()
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_67C4(&qword_FBE20);
  uint64_t v6 = sub_34D60(v5, 176LL);
  *(_OWORD *)(v6 + 16) = xmmword_C27D0;
  *(void *)(v6 + 32) = 7368801LL;
  *(void *)(v6 + 40) = 0xE300000000000000LL;
  uint64_t v7 = *v0;
  if (*v0)
  {
    type metadata accessor for SirikitApp(0LL);
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v8 = 0LL;
    *(void *)(v6 + 56) = 0LL;
    *(void *)(v6 + 64) = 0LL;
  }

  *(void *)(v6 + 48) = v8;
  sub_7DEEC();
  *(void *)(v6 + 72) = v9;
  *(void *)(v6 + 80) = v10;
  *(void *)(v6 + 88) = 0xED00007372656D69LL;
  uint64_t v11 = v0[1];
  sub_67C4(&qword_FBE28);
  *(void *)(v6 + 96) = v11;
  sub_7DED8();
  *(void *)(v6 + 120) = v12;
  *(void *)(v6 + 128) = v13;
  *(void *)(v6 + 136) = 0xE800000000000000LL;
  uint64_t v14 = type metadata accessor for ResumeTimerHandledOnWatchParameters(0LL);
  sub_8C84((uint64_t)v0 + *(int *)(v14 + 24), v4, &qword_FBD98);
  uint64_t v15 = sub_1BCD8();
  if (_s23TimerFlowDelegatePlugin19SiriTimePluginModelOwet_0(v4, 1LL, v15) == 1)
  {
    swift_retain();
    sub_2BC5C();
    sub_17A70(v4, &qword_FBD98);
    sub_4917C();
  }

  else
  {
    *(void *)(v6 + 168) = v15;
    uint64_t v16 = sub_49150();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v16, v4, v15);
    swift_retain();
    sub_2BC5C();
  }

  sub_37FA0();
}

void sub_7C5D8()
{
  uint64_t v1 = v0;
  sub_67C4(&qword_FBD98);
  sub_1BCE0();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v8 = sub_67C4(&qword_FBE20);
  uint64_t v9 = sub_34D60(v8, 128LL);
  sub_49090((__n128 *)v9, (__n128)xmmword_C27E0);
  sub_491CC(v1);
  uint64_t v10 = sub_1BCD8();
  sub_490E4((uint64_t)v7);
  if (v11)
  {
    sub_17A70((uint64_t)v7, &qword_FBD98);
    sub_4917C();
  }

  else
  {
    *(void *)(v9 + 72) = v10;
    uint64_t v12 = sub_49150();
    sub_4913C((uint64_t)v12);
  }

  sub_49100();
  *(void *)(v9 + 80) = v13;
  *(void *)(v9 + 88) = v14;
  uint64_t v15 = type metadata accessor for ResumeTimerPromptAllParameters(0LL);
  sub_8C84(v1 + *(int *)(v15 + 20), (uint64_t)v5, &qword_FBD98);
  sub_490E4((uint64_t)v5);
  if (v11)
  {
    sub_17A70((uint64_t)v5, &qword_FBD98);
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
  }

  else
  {
    *(void *)(v9 + 120) = v10;
    uint64_t v16 = sub_DB90((void *)(v9 + 96));
    sub_7DEAC((uint64_t)v16);
  }

  sub_37FA0();
}

void sub_7C718()
{
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = sub_67C4(&qword_FBE20);
  uint64_t v8 = (__n128 *)sub_34D60(v7, 176LL);
  sub_49090(v8, (__n128)xmmword_C27D0);
  sub_491CC(v0);
  uint64_t v9 = sub_1BCD8();
  sub_490E4((uint64_t)v6);
  if (v10)
  {
    sub_17A70((uint64_t)v6, &qword_FBD98);
    sub_4917C();
  }

  else
  {
    v8[4].n128_u64[1] = v9;
    char v11 = sub_49150();
    sub_4913C((uint64_t)v11);
  }

  sub_49100();
  v8[5].n128_u64[0] = v12;
  v8[5].n128_u64[1] = v13;
  uint64_t v14 = type metadata accessor for ResumeTimerPromptExistingTimerParameters(0LL);
  sub_8C84(v0 + *(int *)(v14 + 20), (uint64_t)v4, &qword_FBD98);
  sub_490E4((uint64_t)v4);
  if (v10)
  {
    sub_17A70((uint64_t)v4, &qword_FBD98);
    sub_4917C();
  }

  else
  {
    v8[7].n128_u64[1] = v9;
    uint64_t v15 = sub_49150();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v15, v4, v9);
  }

  v8[8].n128_u64[0] = 0x72656D6974LL;
  v8[8].n128_u64[1] = 0xE500000000000000LL;
  unint64_t v16 = *(void *)(v0 + *(int *)(v14 + 24));
  if (v16)
  {
    uint64_t v17 = type metadata accessor for TimerTimer(0LL);
  }

  else
  {
    uint64_t v17 = 0LL;
    v8[9].n128_u64[1] = 0LL;
    v8[10].n128_u64[0] = 0LL;
  }

  v8[9].n128_u64[0] = v16;
  v8[10].n128_u64[1] = v17;
  swift_retain();
  sub_37FA0();
}

uint64_t sub_7C8A4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_2B82C((uint64_t)sub_7C8B4);
}

uint64_t sub_7C8B4()
{
  unint64_t v2 = v1;
  v0[4] = v1;
  uint64_t v3 = sub_67C4(&qword_FBE20);
  uint64_t v4 = (__n128 *)sub_34D60(v3, 80LL);
  v0[5] = v4;
  uint64_t v5 = sub_7DE78(v4, (__n128)xmmword_C2640);
  v4[4].n128_u64[1] = type metadata accessor for TimerTimer(v5);
  v4[3].n128_u64[0] = v2;
  sub_38208();
  swift_retain();
  uint64_t v6 = (void *)sub_2C084();
  v0[6] = v6;
  sub_380D4(v6, (uint64_t)sub_7C95C);
  unint64_t v7 = sub_3813C(26LL);
  return sub_7DE6C(v7, v8, v9, v10);
}

uint64_t sub_7C95C()
{
  if (!v1) {
    *(void *)(v2 + 64) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v4, v5, v6);
}

uint64_t sub_7C9AC()
{
  uint64_t v1 = *(void **)(v0 + 24);
  swift_release();

  return sub_2BB68(*(void *)(v0 + 64), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_7C9E0()
{
  uint64_t v1 = *(void **)(v0 + 24);
  swift_release();

  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_7CA10(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_2B82C((uint64_t)sub_7CA20);
}

uint64_t sub_7CA20()
{
  unint64_t v1 = v0[3];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = (__n128 *)sub_34D60(v2, 80LL);
  v0[4] = v3;
  uint64_t v4 = sub_7DE78(v3, (__n128)xmmword_C2640);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for TimerTimer(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  v0[5] = v1;
  v3[3].n128_u64[0] = v1;
  v3[4].n128_u64[1] = v4;
  swift_retain();
  uint64_t v5 = (void *)sub_2C084();
  v0[6] = v5;
  sub_380D4(v5, (uint64_t)sub_7CAE8);
  return sub_7886C(0xD00000000000001ALL, 0x80000000000C9110LL, (uint64_t)v3, v7);
}

uint64_t sub_7CAE8()
{
  if (!v1) {
    *(void *)(v2 + 64) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v4, v5, v6);
}

uint64_t sub_7CB3C()
{
  return sub_2BB68(*(void *)(v0 + 64), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_7CB6C()
{
  return sub_1ECD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_7CB98(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = type metadata accessor for ResumeTimerAlreadyRunningAllParameters(0LL);
  *(void *)(v1 + 24) = sub_37EE0(v2);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_7CBD4()
{
  uint64_t v1 = v0[3];
  sub_1BCD8();
  sub_7DE98();
  sub_17A70(v1, &qword_FBD98);
  sub_7DE98();
  sub_7C388();
  uint64_t v3 = v2;
  v0[4] = v2;
  v0[5] = v4;
  sub_380D4(v4, (uint64_t)sub_7CC6C);
  sub_3814C();
  return sub_7DE6C(0xD00000000000001DLL, v5, v3, v7);
}

uint64_t sub_7CC6C()
{
  *(void *)(v2 + 48) = v1;
  swift_task_dealloc();
  sub_1BC04();
  if (!v1) {
    *(void *)(v2 + 56) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v4, v5, v6);
}

uint64_t sub_7CCC4(uint64_t a1)
{
  return sub_2BB68(*(void *)(v1 + 56), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_7CD00(uint64_t a1)
{
  return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_7CD38()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1C020;
  return sub_38068(0xD000000000000016LL, 0x80000000000C90F0LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_7CD98()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_4908C;
  return sub_38068(0xD000000000000017LL, 0x80000000000C90D0LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_7CDF8()
{
  uint64_t v1 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_4908C;
  return sub_38068(0xD000000000000018LL, 0x80000000000C86B0LL, (uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_7CE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = type metadata accessor for ResumeTimerHandledOnWatchParameters(0LL);
  v4[6] = v5;
  v4[7] = sub_37EE0(v5);
  sub_1B9B8();
  return sub_1B758();
}

uint64_t sub_7CE9C()
{
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = (void (*)(void *))v0[3];
  uint64_t v3 = v0[2];
  uint64_t v4 = (uint64_t)v1 + *(int *)(v0[6] + 24LL);
  uint64_t v5 = sub_1BCD8();
  _s23TimerFlowDelegatePlugin19SiriTimePluginModelOwst_0(v4, 1LL, 1LL, v5);
  *uint64_t v1 = 0LL;
  v1[1] = v3;
  swift_bridgeObjectRetain(v3);
  v2(v1);
  sub_7C460();
  v0[8] = v6;
  unint64_t v7 = (void *)sub_37EF4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  v0[9] = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_7CF54;
  unint64_t v8 = sub_3813C(26LL);
  return sub_7886C(v8, v9, v10, v11);
}

uint64_t sub_7CF54()
{
  *(void *)(v2 + 80) = v1;
  swift_task_dealloc();
  sub_1BC04();
  if (!v1) {
    *(void *)(v2 + 88) = v0;
  }
  sub_1B9B8();
  return sub_2F658(v4, v5, v6);
}

uint64_t sub_7CFAC(uint64_t a1)
{
  return sub_2BB68(*(void *)(v1 + 88), *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_7CFE8(uint64_t a1)
{
  return sub_1ECD4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_7D020(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_2B82C((uint64_t)sub_7D030);
}

uint64_t sub_7D030()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_67C4(&qword_FBE20);
  uint64_t v3 = sub_34D60(v2, 80LL);
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_C2640;
  sub_7DEEC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = 0xED00007372656D69LL;
  *(void *)(v3 + 72) = sub_67C4(&qword_FBE28);
  *(void *)(v3 + 48) = v1;
  uint64_t v6 = sub_38208();
  swift_bridgeObjectRetain(v6);
  unint64_t v7 = (void *)sub_2C084();
  v0[5] = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_7D0E8;
  sub_3814C();
  unint64_t v8 = sub_3813C(25LL);
  return sub_7DE6C(v8, v9, v10, v11);
}

uint64_t sub_7D0E8(uint64_t a1)
{
  uint64_t v10 = *v2;
  uint64_t v4 = v10;
  sub_1BC0C(&v10);
  *(void *)(v4 + 48) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_1B9B8();
    return swift_task_switch(v6, v7, v8);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v4 + 32));
    return sub_2FB20(a1, (uint64_t (*)(void))v2[1]);
  }

uint64_t sub_7D15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  __int128 v5[2] = a1;
  uint64_t v6 = type metadata accessor for ResumeTimerPromptAllParameters(0LL);
  v5[7] = v6;
  v5[8] = sub_37EE0(v6);
  sub_1B9B8();
  return sub_1B758();
}