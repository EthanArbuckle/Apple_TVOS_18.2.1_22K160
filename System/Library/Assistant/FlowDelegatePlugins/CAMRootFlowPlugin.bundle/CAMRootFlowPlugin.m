unint64_t sub_4E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  Swift::String v11;
  void *object;
  unint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  v1 = v0;
  v2 = type metadata accessor for PluginAction(0LL);
  v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6 = type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision(0LL);
  __chkstk_darwin();
  v8 = (__int128 *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_7458(v1, (uint64_t)v8, v9);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    (*(void (**)(char *, __int128 *, uint64_t))(v3 + 32))(v5, v8, v2);
    v22 = 0LL;
    v23 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    swift_bridgeObjectRelease(v23);
    v22 = 0xD00000000000001ELL;
    v23 = 0x8000000000048CB0LL;
    v10 = sub_7D7C( (unint64_t *)&qword_59FC0,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction,  (uint64_t)&protocol conformance descriptor for PluginAction);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v10);
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13 = v22;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  else
  {
    sub_72CC(v8, (uint64_t)&v22);
    v18 = 0LL;
    v19 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(31LL);
    swift_bridgeObjectRelease(v19);
    v20 = 0xD00000000000001DLL;
    v21 = 0x8000000000048CD0LL;
    sub_83CC((uint64_t)&v22, (uint64_t)&v18);
    v14 = sub_72E4(&qword_59FC8);
    v15._countAndFlagsBits = String.init<A>(describing:)(&v18, v14);
    v16 = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v16);
    v13 = v20;
    sub_6CEC(&v22);
  }

  return v13;
}

uint64_t sub_5064()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_72E4(&qword_5A030);
  __chkstk_darwin(v2, v3);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = v1 + OBJC_IVAR____TtC17CAMRootFlowPlugin29ActionDisambiguationEntryFlow_executionDecision;
  uint64_t v7 = type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision(0LL);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL);
  v8(v6, 1LL, 1LL, v7);
  v8((uint64_t)v5, 1LL, 1LL, v7);
  swift_beginAccess(v6, v16, 33LL, 0LL);
  sub_7324((uint64_t)v5, v6);
  swift_endAccess(v16);
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_72B4(v9, (uint64_t)qword_5D478);
  v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "ActionDisambiguationEntryFlow: new instance initialised", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return v1;
}

uint64_t sub_51F0(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  uint64_t v3 = type metadata accessor for AppShortcutProvider(0LL);
  v2[28] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[29] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[30] = swift_task_alloc(v5);
  v2[31] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for AppShortcutInvocation(0LL);
  v2[32] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[33] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[34] = swift_task_alloc(v8);
  v2[35] = swift_task_alloc(v8);
  uint64_t v9 = sub_72E4(&qword_5A030);
  v2[36] = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[37] = swift_task_alloc(v10);
  v2[38] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for ActionDisambiguationStrategy(0LL);
  v2[39] = v11;
  unint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[40] = swift_task_alloc(v12);
  v2[41] = swift_task_alloc(v12);
  v2[42] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for PluginAction(0LL);
  v2[43] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[44] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[45] = swift_task_alloc(v15);
  v2[46] = swift_task_alloc(v15);
  v2[47] = swift_task_alloc(v15);
  v2[48] = swift_task_alloc(v15);
  v2[49] = swift_task_alloc(v15);
  v2[50] = swift_task_alloc(v15);
  v2[51] = swift_task_alloc(v15);
  uint64_t v16 = sub_72E4(&qword_5A038);
  v2[52] = swift_task_alloc((*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for CAMDirectInvocation(0LL);
  v2[53] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v2[54] = v18;
  unint64_t v19 = (*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[55] = swift_task_alloc(v19);
  v2[56] = swift_task_alloc(v19);
  uint64_t v20 = type metadata accessor for Parse(0LL);
  v2[57] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v2[58] = v21;
  v2[59] = swift_task_alloc((*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Parse.DirectInvocation(0LL);
  v2[60] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v2[61] = v23;
  v2[62] = swift_task_alloc((*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for Input(0LL);
  v2[63] = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  v2[64] = v25;
  unint64_t v26 = (*(void *)(v25 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[65] = swift_task_alloc(v26);
  v2[66] = swift_task_alloc(v26);
  return swift_task_switch(sub_5468, 0LL, 0LL);
}

uint64_t sub_5468()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 528);
  uint64_t v4 = *(void *)(v0 + 504);
  uint64_t v3 = *(void *)(v0 + 512);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 536) = sub_72B4(v5, (uint64_t)qword_5D478);
  v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v6 = v81(v2, v1, v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 528);
  uint64_t v11 = *(void *)(v0 + 504);
  uint64_t v12 = *(void *)(v0 + 512);
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v78 = swift_slowAlloc(32LL, -1LL);
    uint64_t v83 = v78;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v14 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    unint64_t v17 = v16;
    *(void *)(v0 + 200) = sub_24BA0(v15, v16, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v18(v10, v11);
    _os_log_impl(&dword_0, v7, v8, "ActionDisambiguationEntryFlow: on called with %s", v13, 0xCu);
    swift_arrayDestroy(v78, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v18(*(void *)(v0 + 528), *(void *)(v0 + 504));
  }

  uint64_t v20 = *(void *)(v0 + 464);
  uint64_t v19 = *(void *)(v0 + 472);
  uint64_t v21 = *(void *)(v0 + 456);
  Input.parse.getter(v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v20 + 88))(v19, v21) != enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 464) + 8LL))(*(void *)(v0 + 472), *(void *)(v0 + 456));
    goto LABEL_12;
  }

  uint64_t v24 = *(void *)(v0 + 488);
  uint64_t v23 = *(void *)(v0 + 496);
  uint64_t v26 = *(void *)(v0 + 472);
  uint64_t v25 = *(void *)(v0 + 480);
  uint64_t v27 = *(void *)(v0 + 424);
  uint64_t v28 = *(void *)(v0 + 432);
  v29 = *(uint64_t **)(v0 + 416);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 464) + 96LL))(v26, *(void *)(v0 + 456));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v26, v25);
  sub_2B424(v29);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v29, 1LL, v27) == 1)
  {
    uint64_t v30 = *(void *)(v0 + 416);
    (*(void (**)(void, void))(*(void *)(v0 + 488) + 8LL))(*(void *)(v0 + 496), *(void *)(v0 + 480));
    sub_73D8(v30, &qword_5A038);
LABEL_12:
    uint64_t v38 = v81(*(void *)(v0 + 520), *(void *)(v0 + 208), *(void *)(v0 + 504));
    v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = *(void *)(v0 + 520);
    uint64_t v43 = *(void *)(v0 + 504);
    if (v41)
    {
      v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v45 = swift_slowAlloc(32LL, -1LL);
      uint64_t v83 = v45;
      *(_DWORD *)v44 = 136315138;
      uint64_t v46 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v43, v46);
      unint64_t v49 = v48;
      *(void *)(v0 + 176) = sub_24BA0(v47, v48, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v49);
      v18(v42, v43);
      _os_log_impl(&dword_0, v39, v40, "ActionDisambiguationEntryFlow called with unexpected input %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    else
    {
      v18(*(void *)(v0 + 520), *(void *)(v0 + 504));
    }

    uint64_t v50 = *(void *)(v0 + 520);
    uint64_t v51 = *(void *)(v0 + 496);
    uint64_t v52 = *(void *)(v0 + 472);
    uint64_t v54 = *(void *)(v0 + 440);
    uint64_t v53 = *(void *)(v0 + 448);
    uint64_t v56 = *(void *)(v0 + 408);
    uint64_t v55 = *(void *)(v0 + 416);
    uint64_t v57 = *(void *)(v0 + 392);
    uint64_t v58 = *(void *)(v0 + 400);
    uint64_t v68 = *(void *)(v0 + 384);
    uint64_t v69 = *(void *)(v0 + 376);
    uint64_t v70 = *(void *)(v0 + 368);
    uint64_t v71 = *(void *)(v0 + 360);
    uint64_t v72 = *(void *)(v0 + 336);
    uint64_t v73 = *(void *)(v0 + 328);
    uint64_t v74 = *(void *)(v0 + 320);
    uint64_t v75 = *(void *)(v0 + 304);
    uint64_t v76 = *(void *)(v0 + 296);
    uint64_t v77 = *(void *)(v0 + 280);
    uint64_t v79 = *(void *)(v0 + 272);
    uint64_t v80 = *(void *)(v0 + 248);
    uint64_t v82 = *(void *)(v0 + 240);
    swift_task_dealloc(*(void *)(v0 + 528));
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v57);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

  uint64_t v31 = *(void *)(v0 + 440);
  uint64_t v32 = *(void *)(v0 + 448);
  uint64_t v33 = *(void *)(v0 + 424);
  sub_7414(*(void *)(v0 + 416), v32, type metadata accessor for CAMDirectInvocation);
  sub_7458(v32, v31, type metadata accessor for CAMDirectInvocation);
  if (swift_getEnumCaseMultiPayload(v31, v33))
  {
    uint64_t v35 = *(void *)(v0 + 488);
    uint64_t v34 = *(void *)(v0 + 496);
    uint64_t v36 = *(void *)(v0 + 480);
    uint64_t v37 = *(void *)(v0 + 440);
    sub_749C(*(void *)(v0 + 448), type metadata accessor for CAMDirectInvocation);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    sub_749C(v37, type metadata accessor for CAMDirectInvocation);
    goto LABEL_12;
  }

  uint64_t v60 = *(void *)(v0 + 440);
  uint64_t v62 = *(void *)(v0 + 400);
  uint64_t v61 = *(void *)(v0 + 408);
  uint64_t v63 = *(void *)(v0 + 344);
  uint64_t v64 = *(void *)(v0 + 352);
  uint64_t v65 = v60 + *(int *)(sub_72E4(&qword_5A048) + 48);
  v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32);
  *(void *)(v0 + 544) = v66;
  v66(v61, v60, v63);
  v66(v62, v65, v63);
  if (qword_59D50 != -1) {
    swift_once(&qword_59D50, sub_8CF8);
  }
  v67 = (void *)swift_task_alloc(dword_5A3E4);
  *(void *)(v0 + 552) = v67;
  void *v67 = v0;
  v67[1] = sub_5AF0;
  return sub_8410(*(void *)(v0 + 336), *(void *)(v0 + 408), *(void *)(v0 + 400), (uint64_t)qword_5D330);
}

uint64_t sub_5AF0()
{
  return swift_task_switch(sub_5B44, 0LL, 0LL);
}

void sub_5B44()
{
  uint64_t v1 = sub_7458(v0[42], v0[41], type metadata accessor for ActionDisambiguationStrategy);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[41];
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    v13[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_9E88();
    unint64_t v8 = v7;
    v0[24] = sub_24BA0(v9, v7, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v8);
    sub_749C(v4, type metadata accessor for ActionDisambiguationStrategy);
    _os_log_impl(&dword_0, v2, v3, "ActionDisambiguationEntryFlow: disambiguations strategy is %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    sub_749C(v0[41], type metadata accessor for ActionDisambiguationStrategy);
  }

  uint64_t v10 = v0[39];
  uint64_t v11 = v0[40];
  sub_7458(v0[42], v11, type metadata accessor for ActionDisambiguationStrategy);
  uint64_t v12 = (char *)sub_5D0C + 4 * word_47930[swift_getEnumCaseMultiPayload(v11, v10)];
  __asm { BR              X10 }
}

uint64_t sub_5D0C()
{
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 384);
  uint64_t v4 = *(void *)(v0 + 392);
  uint64_t v6 = *(void *)(v0 + 376);
  uint64_t v8 = *(void *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 352);
  uint64_t v10 = *(void *)(v0 + 296);
  uint64_t v9 = *(uint64_t **)(v0 + 304);
  uint64_t v71 = *(void *)(v0 + 216);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 544))(v4, *(void *)(v0 + 320), v8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v11(v5, v2, v8);
  uint64_t v12 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v6, v3, v8);
  ((void (*)(void *__return_ptr, uint64_t))static Device.current.getter)(v77, v12);
  uint64_t v13 = type metadata accessor for DefaultCatExecutor();
  uint64_t v14 = swift_allocObject(v13, 16LL, 7LL);
  uint64_t v15 = ((uint64_t (*)(void))static OutputPublisherFactory.makeOutputPublisherAsync())();
  ((void (*)(uint64_t))static SiriKitEventSender.current.getter)(v15);
  uint64_t v16 = type metadata accessor for CoreServicesProvider();
  uint64_t v17 = swift_allocObject(v16, 16LL, 7LL);
  uint64_t v18 = sub_7A0C(v5, v6, v4, v77, v14, (void *)(v1 - 160), (void *)(v1 - 120), v17);
  v9[3] = type metadata accessor for AppNameDisambiguationFlow(0LL);
  v9[4] = sub_7D7C(&qword_5A068, type metadata accessor for AppNameDisambiguationFlow, (uint64_t)&unk_47C20);
  *uint64_t v9 = v18;
  uint64_t v19 = type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision(0LL);
  swift_storeEnumTagMultiPayload(v9, v19, 0LL);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v9, 0LL, 1LL, v19);
  sub_74D8((uint64_t)v9, v10);
  uint64_t v20 = v71 + OBJC_IVAR____TtC17CAMRootFlowPlugin29ActionDisambiguationEntryFlow_executionDecision;
  ((void (*)(uint64_t, uint64_t, uint64_t, void))swift_beginAccess)( v71 + OBJC_IVAR____TtC17CAMRootFlowPlugin29ActionDisambiguationEntryFlow_executionDecision,  v74,  33LL,  0LL);
  sub_7324(v10, v20);
  ((void (*)())swift_endAccess)();
  uint64_t v21 = ((uint64_t (*)(void, uint64_t))swift_retain_n)(*(void *)(v0 + 216), 2LL);
  uint64_t v22 = (os_log_s *)((uint64_t (*)(uint64_t))Logger.logObject.getter)(v21);
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v26 = *(void *)(v0 + 488);
  uint64_t v25 = *(void *)(v0 + 496);
  uint64_t v27 = *(void *)(v0 + 480);
  uint64_t v28 = *(void *)(v0 + 448);
  uint64_t v29 = *(void *)(v0 + 408);
  uint64_t v30 = *(void *)(v0 + 344);
  uint64_t v72 = *(void *)(v0 + 352);
  uint64_t v75 = *(void *)(v0 + 400);
  uint64_t v69 = *(void *)(v0 + 336);
  if (v24)
  {
    uint64_t v62 = *(void *)(v0 + 480);
    uint64_t v64 = *(void *)(v0 + 488);
    uint64_t v31 = *(void *)(v0 + 304);
    uint64_t v53 = *(void *)(v0 + 288);
    uint64_t v55 = *(void *)(v0 + 344);
    uint64_t v32 = *(void *)(v0 + 216);
    uint64_t v58 = *(void *)(v0 + 408);
    uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v60 = v25;
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v33 = 136315138;
    *(void *)(v1 - 120) = v34;
    uint64_t v35 = v32 + OBJC_IVAR____TtC17CAMRootFlowPlugin29ActionDisambiguationEntryFlow_executionDecision;
    ((void (*)(uint64_t, uint64_t, void, void))swift_beginAccess)( v32 + OBJC_IVAR____TtC17CAMRootFlowPlugin29ActionDisambiguationEntryFlow_executionDecision,  v66,  0LL,  0LL);
    sub_736C(v35, v31);
    uint64_t v36 = String.init<A>(describing:)(v31, v53);
    unint64_t v38 = v37;
    *(void *)(v0 + 184) = sub_24BA0(v36, v37, (uint64_t *)(v1 - 120));
    ((void (*)(uint64_t, uint8_t *, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))( v0 + 192,  v33 + 4,  v33 + 12);
    swift_bridgeObjectRelease(v38);
    ((void (*)(uint64_t, uint64_t))swift_release_n)(v32, 2LL);
    _os_log_impl(&dword_0, v22, v23, "ActionDisambiguationEntryFlow: execution decision is %s", v33, 0xCu);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);

    sub_749C(v69, type metadata accessor for ActionDisambiguationStrategy);
    v39 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v39(v75, v55);
    v39(v58, v55);
    sub_749C(v28, type metadata accessor for CAMDirectInvocation);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v60, v62);
  }

  else
  {
    uint64_t v40 = *(void *)(v0 + 216);

    ((void (*)(uint64_t, uint64_t))swift_release_n)(v40, 2LL);
    sub_749C(v69, type metadata accessor for ActionDisambiguationStrategy);
    BOOL v41 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v41(v75, v30);
    v41(v29, v30);
    sub_749C(v28, type metadata accessor for CAMDirectInvocation);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  }

  uint64_t v42 = *(void *)(v0 + 520);
  uint64_t v43 = *(void *)(v0 + 496);
  uint64_t v44 = *(void *)(v0 + 472);
  uint64_t v46 = *(void *)(v0 + 440);
  uint64_t v45 = *(void *)(v0 + 448);
  uint64_t v48 = *(void *)(v0 + 408);
  uint64_t v47 = *(void *)(v0 + 416);
  uint64_t v49 = *(void *)(v0 + 392);
  uint64_t v50 = *(void *)(v0 + 400);
  uint64_t v52 = *(void *)(v0 + 384);
  uint64_t v54 = *(void *)(v0 + 376);
  uint64_t v56 = *(void *)(v0 + 368);
  uint64_t v57 = *(void *)(v0 + 360);
  uint64_t v59 = *(void *)(v0 + 336);
  uint64_t v61 = *(void *)(v0 + 328);
  uint64_t v63 = *(void *)(v0 + 320);
  uint64_t v65 = *(void *)(v0 + 304);
  uint64_t v67 = *(void *)(v0 + 296);
  uint64_t v68 = *(void *)(v0 + 280);
  uint64_t v70 = *(void *)(v0 + 272);
  uint64_t v73 = *(void *)(v0 + 248);
  uint64_t v76 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 528));
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v49);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v73);
  swift_task_dealloc(v76);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

uint64_t sub_66CC(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for PluginAction(0LL);
  v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  v2[14] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_72E4(&qword_5A030);
  v2[15] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision(0LL);
  v2[16] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[17] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[18] = swift_task_alloc(v8);
  v2[19] = swift_task_alloc(v8);
  return swift_task_switch(sub_6788, 0LL, 0LL);
}

uint64_t sub_6788()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "ActionDisambiguationEntryFlow: execution called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 88);

  uint64_t v10 = v9 + OBJC_IVAR____TtC17CAMRootFlowPlugin29ActionDisambiguationEntryFlow_executionDecision;
  swift_beginAccess( v9 + OBJC_IVAR____TtC17CAMRootFlowPlugin29ActionDisambiguationEntryFlow_executionDecision,  v0 + 56,  0LL,  0LL);
  sub_736C(v10, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1LL, v6) == 1)
  {
    uint64_t v11 = sub_73D8(*(void *)(v0 + 120), &qword_5A030);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( &dword_0,  v12,  v13,  "ActionDisambiguationEntryFlow: calling execute with nill execution decision",  v14,  2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    static ExecuteResponse.complete()();
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 144);
    uint64_t v16 = *(void *)(v0 + 152);
    uint64_t v17 = *(void *)(v0 + 128);
    sub_7414(*(void *)(v0 + 120), v16, type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision);
    sub_7458(v16, v15, type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v17);
    uint64_t v19 = *(void *)(v0 + 152);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = *(void *)(v0 + 104);
      uint64_t v20 = *(void *)(v0 + 112);
      uint64_t v22 = *(void *)(v0 + 96);
      (*(void (**)(uint64_t, void, uint64_t))(v21 + 32))(v20, *(void *)(v0 + 144), v22);
      static ExecuteResponse.redirect(nextPluginAction:)(v20);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      sub_749C(v19, type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision);
    }

    else
    {
      sub_72CC(*(__int128 **)(v0 + 144), v0 + 16);
      uint64_t v23 = *(void *)(v0 + 40);
      uint64_t v24 = *(void *)(v0 + 48);
      sub_73B4((void *)(v0 + 16), v23);
      uint64_t v25 = Flow.eraseToAnyFlow()(v23, v24);
      static ExecuteResponse.complete(next:)();
      swift_release(v25);
      sub_749C(v19, type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision);
      sub_6CEC((void *)(v0 + 16));
    }
  }

  uint64_t v26 = *(void *)(v0 + 144);
  uint64_t v28 = *(void *)(v0 + 112);
  uint64_t v27 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 152));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6A70()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_6AA8()
{
  return type metadata accessor for ActionDisambiguationEntryFlow(0LL);
}

uint64_t type metadata accessor for ActionDisambiguationEntryFlow(uint64_t a1)
{
  return sub_6B98(a1, (uint64_t *)&unk_59E30, (uint64_t)&nominal type descriptor for ActionDisambiguationEntryFlow);
}

void sub_6AC4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 1LL, &v4, a1 + 80);
  }

void sub_6B30(uint64_t a1)
{
  if (!qword_59E50)
  {
    uint64_t v2 = type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_59E50);
    }
  }

uint64_t type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision(uint64_t a1)
{
  return sub_6B98( a1,  qword_59F78,  (uint64_t)&nominal type descriptor for ActionDisambiguationEntryFlow.ExecutionDecision);
}

uint64_t sub_6B98(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_6BCC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = v11 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain();
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = type metadata accessor for PluginAction(0LL);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      __int128 v12 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t *))(v12 - 8))(a1, a2);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_6C9C(void *a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PluginAction(0LL);
  return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
}

uint64_t sub_6CEC(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_6D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for PluginAction(0LL);
    uint64_t v7 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    __int128 v9 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    uint64_t v6 = v9;
    uint64_t v7 = *(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  }

  (*v7)(a1, a2, v6);
  swift_storeEnumTagMultiPayload(a1, a3, v8);
  return a1;
}

uint64_t sub_6DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_749C(a1, type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for PluginAction(0LL);
      uint64_t v7 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
      uint64_t v8 = 1LL;
    }

    else
    {
      uint64_t v8 = 0LL;
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v7 = *(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
    }

    (*v7)(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, v8);
  }

  return a1;
}

void *sub_6E50(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for PluginAction(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_6EDC(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_749C((uint64_t)a1, type metadata accessor for ActionDisambiguationEntryFlow.ExecutionDecision);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for PluginAction(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_6F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_6F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_6FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_6FB0(uint64_t a1)
{
  v4[0] = "(";
  uint64_t result = type metadata accessor for PluginAction(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t sub_7020()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_72B4(v0, (uint64_t)qword_5D478);
  uint64_t v1 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl( &dword_0,  v1,  v2,  "ActionDisambiguationEntryFlow: the synchronous version of on was unexpectedly called.",  v3,  2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }

  return 0LL;
}

uint64_t sub_70F0(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_59E44);
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_7140;
  return sub_51F0(a1);
}

uint64_t sub_7140(uint64_t a1)
{
  uint64_t v6 = *v1;
  uint64_t v3 = *(void *)(v6 + 16);
  uint64_t v4 = *v1;
  uint64_t v6 = v4;
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_7190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for ActionDisambiguationEntryFlow(0LL);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_71EC(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_59E4C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_7240;
  return sub_66CC(a1);
}

uint64_t sub_7240()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_7288(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ActionDisambiguationEntryFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_72B4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_72CC(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_72E4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_7324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5A030);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_736C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5A030);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *sub_73B4(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_73D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_72E4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_7414(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_7458(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_749C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_74D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5A030);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_7520(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_7548( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  v31[3] = type metadata accessor for DefaultCatExecutor();
  v31[4] = &off_55CE0;
  v31[0] = a5;
  v30[3] = type metadata accessor for CoreServicesProvider();
  v30[4] = &off_55D80;
  v30[0] = a8;
  uint64_t v17 = a9 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_firstAction;
  uint64_t v18 = type metadata accessor for PluginAction(0LL);
  uint64_t v28 = *(void *)(v18 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  uint64_t v29 = a1;
  v19(v17, a1, v18);
  v19(a9 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_secondAction, a2, v18);
  v19(a9 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_fallBackAction, a3, v18);
  sub_83CC((uint64_t)a4, a9 + 16);
  sub_83CC((uint64_t)v31, a9 + 56);
  sub_83CC((uint64_t)a6, a9 + 96);
  sub_83CC((uint64_t)a7, a9 + 136);
  sub_83CC((uint64_t)v30, a9 + 176);
  uint64_t v20 = a9 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_state;
  uint64_t v21 = sub_72E4((uint64_t *)&unk_5A070);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 1LL, 3LL, v21);
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  sub_72B4(v22, (uint64_t)qword_5D478);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_0, v23, v24, "AppNameDisambiguationFlow: new instance initialised", v25, 2u);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  sub_6CEC(v30);
  sub_6CEC(a7);
  sub_6CEC(a6);
  sub_6CEC(v31);
  sub_6CEC(a4);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v26(a3, v18);
  v26(a2, v18);
  v26(v29, v18);
  return a9;
}

uint64_t sub_77C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  v31[3] = &type metadata for SNLGTemplatingSectionGenerator;
  v31[4] = &off_56118;
  uint64_t v12 = a6 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_firstAction;
  uint64_t v13 = type metadata accessor for PluginAction(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v15(v12, a1, v13);
  v15(a6 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_secondAction, a2, v13);
  v15(a6 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_fallBackAction, a3, v13);
  sub_83CC((uint64_t)v31, a6 + 16);
  sub_83CC((uint64_t)a4, a6 + 56);
  sub_83CC((uint64_t)a5, a6 + 96);
  uint64_t v16 = a6 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_state;
  uint64_t v17 = sub_72E4(&qword_5C040);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 2LL, v17);
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_72B4(v18, (uint64_t)qword_5D478);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v30 = v14;
    uint64_t v21 = a5;
    uint64_t v22 = a4;
    uint64_t v23 = a3;
    uint64_t v24 = a2;
    uint64_t v25 = a1;
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_0, v19, v20, "VerbEntityDisambiguationFlow: new instance initialised", v26, 2u);
    uint64_t v27 = v26;
    a1 = v25;
    a2 = v24;
    a3 = v23;
    a4 = v22;
    a5 = v21;
    uint64_t v14 = v30;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  sub_6CEC(a5);
  sub_6CEC(a4);
  sub_6CEC(v31);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v28(a3, v13);
  v28(a2, v13);
  v28(a1, v13);
  return a6;
}

uint64_t sub_7A0C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t a8)
{
  uint64_t v32 = type metadata accessor for DefaultCatExecutor();
  uint64_t v33 = &off_55CE0;
  v31[0] = a5;
  uint64_t v29 = type metadata accessor for CoreServicesProvider();
  uint64_t v30 = &off_55D80;
  v28[0] = a8;
  uint64_t v16 = type metadata accessor for AppNameDisambiguationFlow(0LL);
  uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v18 = sub_7520((uint64_t)v31, v32);
  __chkstk_darwin(v18, v18);
  os_log_type_t v20 = (void *)((char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_7520((uint64_t)v28, v29);
  __chkstk_darwin(v22, v22);
  uint64_t v24 = (void *)((char *)v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = sub_7548(a1, a2, a3, a4, *v20, a6, a7, *v24, v17);
  sub_6CEC(v28);
  sub_6CEC(v31);
  return v26;
}

char *sub_7B98( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v35 = a4;
  uint64_t v36 = a6;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v13 = type metadata accessor for AppShortcutProvider(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DefaultCatExecutor();
  v40[3] = v18;
  v40[4] = &off_55CE0;
  v40[0] = a5;
  uint64_t v38 = type metadata accessor for CoreServicesProvider();
  v39 = &off_55D80;
  v37[0] = a8;
  uint64_t v19 = type metadata accessor for AppShortcutEnablementFlow(0LL);
  os_log_type_t v20 = (char *)swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v21 = sub_7520((uint64_t)v40, v18);
  __chkstk_darwin(v21, v21);
  uint64_t v23 = (uint64_t *)((char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = sub_7520((uint64_t)v37, v38);
  __chkstk_darwin(v25, v25);
  uint64_t v27 = (uint64_t *)((char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  uint64_t v29 = *v23;
  uint64_t v30 = *v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a7, v13);
  uint64_t v31 = sub_7DBC(a1, v33, v34, v35, v29, v36, (uint64_t)v17, v30, a9, v20);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a7, v13);
  sub_6CEC(v37);
  sub_6CEC(v40);
  return v31;
}

uint64_t sub_7D7C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

char *sub_7DBC( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, char *a10)
{
  uint64_t v60 = a9;
  uint64_t v18 = type metadata accessor for AppShortcutProvider(0LL);
  v77[3] = v18;
  v77[4] = &protocol witness table for AppShortcutProvider;
  uint64_t v19 = sub_8390(v77);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32LL))(v19, a7, v18);
  uint64_t v20 = type metadata accessor for DefaultCatExecutor();
  v76[3] = v20;
  v76[4] = &off_55CE0;
  v76[0] = a5;
  v75[3] = type metadata accessor for CoreServicesProvider();
  v75[4] = &off_55D80;
  v75[0] = a8;
  *((void *)a10 + 2) = 3LL;
  uint64_t v21 = &a10[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_appShortcutAction];
  uint64_t v22 = type metadata accessor for PluginAction(0LL);
  uint64_t v63 = *(void *)(v22 - 8);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  uint64_t v68 = a1;
  v23(v21, a1, v22);
  uint64_t v67 = a2;
  v23(&a10[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_otherAction], a2, v22);
  uint64_t v24 = &a10[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_appShortcutInvocation];
  uint64_t v25 = type metadata accessor for AppShortcutInvocation(0LL);
  uint64_t v61 = *(void *)(v25 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v61 + 16);
  uint64_t v66 = a3;
  uint64_t v62 = v25;
  v26(v24, a3);
  uint64_t v65 = a4;
  sub_83CC((uint64_t)a4, (uint64_t)(a10 + 24));
  sub_83CC((uint64_t)v76, (uint64_t)(a10 + 64));
  uint64_t v64 = a6;
  sub_83CC((uint64_t)a6, (uint64_t)(a10 + 104));
  sub_83CC((uint64_t)v77, (uint64_t)(a10 + 144));
  sub_83CC((uint64_t)v75, (uint64_t)(a10 + 184));
  sub_83CC((uint64_t)(a10 + 64), (uint64_t)v73);
  uint64_t v27 = sub_7520((uint64_t)v73, v74);
  __chkstk_darwin(v27, v27);
  uint64_t v29 = (uint64_t *)((char *)&v59 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  uint64_t v31 = *v29;
  uint64_t v72 = &off_55CE0;
  uint64_t v71 = v20;
  uint64_t v69 = v31;
  uint64_t v32 = type metadata accessor for CAMDisambiguateCATs();
  uint64_t v33 = (void *)swift_allocObject(v32, 56LL, 7LL);
  uint64_t v34 = sub_7520((uint64_t)&v69, v20);
  uint64_t v35 = *(void *)(*(void *)(v20 - 8) + 64LL);
  __chkstk_darwin(v34, v34);
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v38 = *(void (**)(char *))(v37 + 16);
  v38((char *)&v59 - v36);
  uint64_t v39 = *(uint64_t *)((char *)&v59 - v36);
  v33[5] = v20;
  v33[6] = &off_55CE0;
  v33[2] = v39;
  sub_6CEC(&v69);
  sub_6CEC(v73);
  *((void *)a10 + 33) = v33;
  sub_83CC((uint64_t)(a10 + 64), (uint64_t)v73);
  uint64_t v40 = sub_7520((uint64_t)v73, v74);
  __chkstk_darwin(v40, v40);
  uint64_t v42 = (uint64_t *)((char *)&v59 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v43 + 16))(v42);
  uint64_t v44 = *v42;
  uint64_t v72 = &off_55CE0;
  uint64_t v71 = v20;
  uint64_t v69 = v44;
  uint64_t v45 = type metadata accessor for CAMDisambiguateCATPatternsExecutor();
  uint64_t v46 = (void *)swift_allocObject(v45, 56LL, 7LL);
  uint64_t v47 = sub_7520((uint64_t)&v69, v20);
  __chkstk_darwin(v47, v47);
  v38((char *)&v59 - v36);
  uint64_t v48 = v60;
  uint64_t v49 = *(uint64_t *)((char *)&v59 - v36);
  v46[5] = v20;
  v46[6] = &off_55CE0;
  v46[2] = v49;
  sub_6CEC(&v69);
  sub_6CEC(v73);
  *((void *)a10 + 37) = v45;
  *((void *)a10 + 38) = &off_55C30;
  *((void *)a10 + 34) = v46;
  sub_83CC((uint64_t)v48, (uint64_t)(a10 + 224));
  uint64_t v50 = &a10[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_state];
  uint64_t v51 = sub_72E4(&qword_5C040);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v50, 1LL, 2LL, v51);
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v52 = type metadata accessor for Logger(0LL);
  sub_72B4(v52, (uint64_t)qword_5D478);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v56 = swift_slowAlloc(32LL, -1LL);
    v73[0] = v56;
    *(_DWORD *)uint64_t v55 = 136315138;
    uint64_t v69 = sub_24BA0(0xD00000000000008FLL, 0x8000000000048CF0LL, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v55 + 4, v55 + 12);
    _os_log_impl(&dword_0, v53, v54, "%s new instance", v55, 0xCu);
    swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  sub_6CEC(v48);
  sub_6CEC(v75);
  sub_6CEC(v77);
  sub_6CEC(v64);
  sub_6CEC(v76);
  sub_6CEC(v65);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v66, v62);
  uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v57(v67, v22);
  v57(v68, v22);
  return a10;
}

void *sub_8390(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_83CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_8410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  void v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = sub_72E4((uint64_t *)&unk_5C0E0);
  v4[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_72E4(&qword_5A3E8);
  v4[7] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL);
  v4[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[9] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[10] = swift_task_alloc(v9);
  v4[11] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for PluginAction(0LL);
  v4[12] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[13] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[14] = swift_task_alloc(v12);
  v4[15] = swift_task_alloc(v12);
  return swift_task_switch(sub_8504, 0LL, 0LL);
}

uint64_t sub_8504()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = sub_72E4(&qword_5A8F0);
  uint64_t v6 = *(void *)(v2 + 72);
  uint64_t v7 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  uint64_t v9 = swift_allocObject(v5, v8 + 2 * v6, v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_47A40;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void (**)(void))(v2 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v10, v4, v3);
  v11();
  uint64_t v89 = v9;
  swift_bridgeObjectRetain(v9);
  uint64_t v90 = v10;
  v91 = v11;
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v1, v10, v3);
  uint64_t v12 = sub_3533C();
  uint64_t v14 = v13;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v15(v1, v3);
  uint64_t v16 = _swiftEmptyArrayStorage;
  if (v14)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
      uint64_t v16 = sub_444A8(0LL, _swiftEmptyArrayStorage[2] + 1LL, 1, _swiftEmptyArrayStorage);
    }
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1) {
      uint64_t v16 = sub_444A8((void *)(v17 > 1), v18 + 1, 1, v16);
    }
    v16[2] = v18 + 1;
    uint64_t v19 = &v16[2 * v18];
    v19[4] = v12;
    v19[5] = v14;
  }

  uint64_t v20 = *(void *)(v0 + 120);
  uint64_t v21 = *(void *)(v0 + 96);
  ((void (*)(uint64_t, uint64_t, uint64_t))v91)(v20, v10 + v6, v21);
  uint64_t v22 = sub_3533C();
  uint64_t v24 = v23;
  v15(v20, v21);
  if (v24)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
      uint64_t v16 = sub_444A8(0LL, v16[2] + 1LL, 1, v16);
    }
    unint64_t v26 = v16[2];
    unint64_t v25 = v16[3];
    if (v26 >= v25 >> 1) {
      uint64_t v16 = sub_444A8((void *)(v25 > 1), v26 + 1, 1, v16);
    }
    v16[2] = v26 + 1;
    uint64_t v27 = &v16[2 * v26];
    v27[4] = v22;
    v27[5] = v24;
  }

  uint64_t v28 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease(v9);
  uint64_t v88 = sub_BA4C((uint64_t)v16);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRetain(v9);
  char v29 = 0;
  uint64_t v30 = 0LL;
  uint64_t v31 = _swiftEmptyArrayStorage;
  do
  {
    char v32 = v29;
    uint64_t v33 = *(void *)(v0 + 48);
    uint64_t v34 = ((uint64_t (*)(void, uint64_t, void))v91)( *(void *)(v0 + 112),  v90 + v30 * v6,  *(void *)(v0 + 96));
    PluginAction.actionParaphrase.getter(v34);
    uint64_t v35 = type metadata accessor for ActionParaphrase(0LL);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v33, 1LL, v35) == 1)
    {
      uint64_t v38 = *(void *)(v0 + 56);
      uint64_t v37 = *(void *)(v0 + 64);
      sub_73D8(*(void *)(v0 + 48), (uint64_t *)&unk_5C0E0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v38, 1LL, 1LL, v37);
    }

    else
    {
      uint64_t v39 = *(void *)(v0 + 48);
      ActionParaphrase.verbEntityParaphrase.getter();
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v39, v35);
    }

    uint64_t v41 = *(void *)(v0 + 56);
    uint64_t v40 = *(void *)(v0 + 64);
    v15(*(void *)(v0 + 112), *(void *)(v0 + 96));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v41, 1LL, v40) == 1)
    {
      sub_73D8(*(void *)(v0 + 56), &qword_5A3E8);
    }

    else
    {
      uint64_t v43 = *(void *)(v0 + 80);
      uint64_t v42 = *(void *)(v0 + 88);
      uint64_t v44 = *(void *)(v0 + 64);
      uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32);
      v45(v42, *(void *)(v0 + 56), v44);
      v45(v43, v42, v44);
      if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0) {
        uint64_t v31 = (void *)sub_44288(0, v31[2] + 1LL, 1, (unint64_t)v31);
      }
      unint64_t v47 = v31[2];
      unint64_t v46 = v31[3];
      if (v47 >= v46 >> 1) {
        uint64_t v31 = (void *)sub_44288(v46 > 1, v47 + 1, 1, (unint64_t)v31);
      }
      uint64_t v48 = *(void *)(v0 + 80);
      uint64_t v49 = *(void *)(v0 + 64);
      v31[2] = v47 + 1;
      v45( (uint64_t)v31 + ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
      + *(void *)(v28 + 72) * v47,
        v48,
        v49);
    }

    char v29 = 1;
    uint64_t v30 = 1LL;
  }

  while ((v32 & 1) == 0);
  swift_bridgeObjectRelease(v89);
  uint64_t v50 = sub_BAE0((uint64_t)v31);
  swift_bridgeObjectRelease(v31);
  uint64_t v51 = *(void *)(v50 + 16);
  swift_bridgeObjectRelease(v50);
  uint64_t v52 = *(void *)(v89 + 16);
  if (v51 == v52)
  {
    uint64_t v53 = *(void *)(v0 + 96);
    uint64_t v55 = *(void *)(v0 + 16);
    uint64_t v54 = *(void *)(v0 + 24);
    swift_setDeallocating(v89);
    swift_arrayDestroy(v90, v51, v53);
    swift_deallocClassInstance(v89, 32LL, 7LL);
    swift_bridgeObjectRelease(v88);
    ((void (*)(uint64_t, uint64_t, uint64_t))v91)(v55, v54, v53);
    uint64_t v56 = type metadata accessor for ActionDisambiguationStrategy(0LL);
    uint64_t v57 = v55;
    uint64_t v58 = 3LL;
  }

  else
  {
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v59 = type metadata accessor for Logger(0LL);
    uint64_t v60 = sub_72B4(v59, (uint64_t)qword_5D478);
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl(&dword_0, v61, v62, "ActionDisambiguationStrategy: no two distinct verb entity paraphrases", v63, 2u);
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    uint64_t v64 = *(void *)(v88 + 16);
    swift_bridgeObjectRelease(v88);
    uint64_t v65 = *(void *)(v0 + 96);
    if (v64 == v52)
    {
      char v66 = sub_2339C(v89);
      swift_setDeallocating(v89);
      swift_arrayDestroy(v90, *(void *)(v89 + 16), v65);
      uint64_t v67 = swift_deallocClassInstance(v89, 32LL, 7LL);
      if ((v66 & 1) != 0)
      {
        uint64_t v68 = (void *)swift_task_alloc(dword_5A3F4);
        *(void *)(v0 + 128) = v68;
        *uint64_t v68 = v0;
        v68[1] = sub_8C6C;
        return sub_8D34(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
      }

      uint64_t v77 = (os_log_s *)Logger.logObject.getter(v67);
      os_log_type_t v78 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v79 = 0;
        _os_log_impl(&dword_0, v77, v78, "ActionDisambiguationStrategy: no app shortcut detected", v79, 2u);
        swift_slowDealloc(v79, -1LL, -1LL);
      }

      uint64_t v80 = *(void *)(v0 + 96);
      uint64_t v82 = *(void *)(v0 + 16);
      uint64_t v81 = *(void *)(v0 + 24);

      ((void (*)(uint64_t, uint64_t, uint64_t))v91)(v82, v81, v80);
      uint64_t v56 = type metadata accessor for ActionDisambiguationStrategy(0LL);
      uint64_t v57 = v82;
      uint64_t v58 = 2LL;
    }

    else
    {
      swift_setDeallocating(v89);
      swift_arrayDestroy(v90, *(void *)(v89 + 16), v65);
      uint64_t v70 = swift_deallocClassInstance(v89, 32LL, 7LL);
      uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
      os_log_type_t v72 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v73 = 0;
        _os_log_impl(&dword_0, v71, v72, "ActionDisambiguationStrategy: no two distinct app bundle ids", v73, 2u);
        swift_slowDealloc(v73, -1LL, -1LL);
      }

      uint64_t v74 = *(void *)(v0 + 96);
      uint64_t v76 = *(void *)(v0 + 16);
      uint64_t v75 = *(void *)(v0 + 24);

      ((void (*)(uint64_t, uint64_t, uint64_t))v91)(v76, v75, v74);
      uint64_t v56 = type metadata accessor for ActionDisambiguationStrategy(0LL);
      uint64_t v57 = v76;
      uint64_t v58 = 4LL;
    }
  }

  swift_storeEnumTagMultiPayload(v57, v56, v58);
  uint64_t v83 = *(void *)(v0 + 112);
  uint64_t v85 = *(void *)(v0 + 80);
  uint64_t v84 = *(void *)(v0 + 88);
  uint64_t v87 = *(void *)(v0 + 48);
  uint64_t v86 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_8C6C()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v10 = *(void **)v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 128LL));
  uint64_t v3 = v1[14];
  uint64_t v2 = v1[15];
  uint64_t v5 = v1[10];
  uint64_t v4 = v1[11];
  uint64_t v8 = v1 + 6;
  uint64_t v7 = v1[6];
  uint64_t v6 = v8[1];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return ((uint64_t (*)(void))v10[1])();
}

uint64_t sub_8CF8()
{
  qword_5D348 = type metadata accessor for AppShortcutProvider(0LL);
  unk_5D350 = &protocol witness table for AppShortcutProvider;
  sub_8390(qword_5D330);
  return AppShortcutProvider.init()();
}

uint64_t sub_8D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = sub_72E4(&qword_5A930);
  v4[7] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AppShortcutInvocation(0LL);
  v4[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[9] = v7;
  v4[10] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v4[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[12] = v9;
  v4[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PluginAction(0LL);
  v4[14] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[15] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[16] = swift_task_alloc(v12);
  v4[17] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for Parse(0LL);
  v4[18] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v4[19] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[20] = swift_task_alloc(v15);
  v4[21] = swift_task_alloc(v15);
  v4[22] = swift_task_alloc(v15);
  v4[23] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for Input(0LL);
  v4[24] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v4[25] = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[26] = swift_task_alloc(v18);
  v4[27] = swift_task_alloc(v18);
  v4[28] = swift_task_alloc(v18);
  v4[29] = swift_task_alloc(v18);
  uint64_t v19 = type metadata accessor for USOParse(0LL);
  v4[30] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v4[31] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[32] = swift_task_alloc(v21);
  v4[33] = swift_task_alloc(v21);
  v4[34] = swift_task_alloc(v21);
  v4[35] = swift_task_alloc(v21);
  return swift_task_switch(sub_8F0C, 0LL, 0LL);
}

uint64_t sub_8F0C()
{
  uint64_t v1 = v0;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v2 = sub_72B4(*(void *)(v0 + 88), (uint64_t)qword_5D478);
  *(void *)(v0 + 288) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( &dword_0,  v3,  v4,  "ActionDisambiguationStrategy: computing strategy for app shortcut collision",  v5,  2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 200);
  uint64_t v9 = *(void *)(v0 + 184);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 152);

  uint64_t v13 = PluginAction.input.getter(v12);
  Input.parse.getter(v13);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(void *)(v0 + 296) = v14;
  v14(v6, v8);
  unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 88);
  *(void *)(v0 + 304) = v15;
  int v16 = v15(v9, v10);
  int v17 = enum case for Parse.uso(_:);
  v135 = (uint64_t *)(v0 + 32);
  *(_DWORD *)(v0 + 336) = enum case for Parse.uso(_:);
  int v18 = v17;
  if (v16 == v17)
  {
    uint64_t v19 = *(void *)(v1 + 280);
    uint64_t v20 = *(void *)(v1 + 240);
    uint64_t v21 = *(void *)(v1 + 248);
    uint64_t v22 = *(void *)(v1 + 184);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 152) + 96LL))(v22, *(void *)(v1 + 144));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v19, v22, v20);
    Swift::Bool v23 = USOParse.isAppShortcutInvocation()();
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  }

  else
  {
    uint64_t v24 = (*(uint64_t (**)(void, void))(*(void *)(v1 + 152) + 8LL))( *(void *)(v1 + 184),  *(void *)(v1 + 144));
    Swift::Bool v23 = 0;
  }

  uint64_t v25 = *(void *)(v1 + 224);
  uint64_t v26 = *(void *)(v1 + 192);
  uint64_t v27 = *(void *)(v1 + 176);
  uint64_t v28 = *(void *)(v1 + 144);
  uint64_t v29 = PluginAction.input.getter(v24);
  Input.parse.getter(v29);
  v132 = v14;
  v14(v25, v26);
  if (v15(v27, v28) == v18)
  {
    uint64_t v30 = *(void *)(v1 + 272);
    uint64_t v31 = *(void *)(v1 + 240);
    uint64_t v32 = *(void *)(v1 + 248);
    uint64_t v33 = *(void *)(v1 + 176);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 152) + 96LL))(v33, *(void *)(v1 + 144));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v30, v33, v31);
    Swift::Bool v34 = USOParse.isAppShortcutInvocation()();
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  }

  else
  {
    uint64_t v35 = (*(uint64_t (**)(void, void))(*(void *)(v1 + 152) + 8LL))( *(void *)(v1 + 176),  *(void *)(v1 + 144));
    Swift::Bool v34 = 0;
  }

  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v130 = v15;
    uint64_t v38 = swift_slowAlloc(14LL, -1LL);
    *(_DWORD *)uint64_t v38 = 67109376;
    *(_DWORD *)(v1 + 328) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 328, v1 + 332, v38 + 4, v38 + 8);
    *(_WORD *)(v38 + 8) = 1024;
    *(_DWORD *)(v1 + 332) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 332, v135 + 38, v38 + 10, v38 + 14);
    _os_log_impl( &dword_0,  v36,  v37,  "ActionDisambiguationStrategy: firstActionIsForAppShortcut=%{BOOL}d, secondActionIsForAppShortcut=%{BOOL}d ",  (uint8_t *)v38,  0xEu);
    uint64_t v39 = v38;
    unint64_t v15 = v130;
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  if (v23)
  {
    if (v34)
    {
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl(&dword_0, v41, v42, "Disambiguating for App Shortcut vs App Shortcut", v43, 2u);
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      uint64_t v44 = *(void *)(v1 + 120);

      unsigned int v124 = 0;
      uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
      uint64_t v46 = *(void *)(v1 + 24);
      goto LABEL_32;
    }

    uint64_t v48 = *(void *)(v1 + 128);
    uint64_t v47 = *(void *)(v1 + 136);
    uint64_t v50 = *(void *)(v1 + 112);
    uint64_t v49 = *(void *)(v1 + 120);
    uint64_t v51 = *(void *)(v1 + 32);
    uint64_t v52 = *(void *)(v1 + 40);
  }

  else
  {
    uint64_t v48 = *(void *)(v1 + 128);
    uint64_t v47 = *(void *)(v1 + 136);
    uint64_t v50 = *(void *)(v1 + 112);
    uint64_t v49 = *(void *)(v1 + 120);
    uint64_t v52 = *(void *)(v1 + 32);
    uint64_t v51 = *(void *)(v1 + 40);
  }

  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16);
  v53(v47, v51, v50);
  uint64_t v54 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v53)(v48, v52, v50);
  *(void *)(v1 + 312) = v53;
  uint64_t v55 = *(void *)(v1 + 216);
  uint64_t v56 = *(void *)(v1 + 192);
  uint64_t v57 = *(void *)(v1 + 168);
  uint64_t v58 = *(void *)(v1 + 144);
  uint64_t v59 = PluginAction.input.getter(v54);
  Input.parse.getter(v59);
  v132(v55, v56);
  if (v15(v57, v58) == v18)
  {
    uint64_t v60 = *(void *)(v1 + 264);
    uint64_t v61 = *(void *)(v1 + 240);
    uint64_t v62 = *(void *)(v1 + 248);
    uint64_t v63 = *(void *)(v1 + 168);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 152) + 96LL))(v63, *(void *)(v1 + 144));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v60, v63, v61);
    uint64_t v64 = (void *)swift_task_alloc(async function pointer to USOParse.isEnabledAppShortcutInvocation(provider:)[1]);
    *(void *)(v1 + 320) = v64;
    *uint64_t v64 = v1;
    v64[1] = sub_9884;
    return USOParse.isEnabledAppShortcutInvocation(provider:)(*(void *)(v1 + 48));
  }

  (*(void (**)(void, void))(*(void *)(v1 + 152) + 8LL))(*(void *)(v1 + 168), *(void *)(v1 + 144));
  uint64_t v66 = (*(uint64_t (**)(void, void, void))(*(void *)(v1 + 96) + 16LL))( *(void *)(v1 + 104),  *(void *)(v1 + 288),  *(void *)(v1 + 88));
  uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
  os_log_type_t v68 = static os_log_type_t.debug.getter();
  BOOL v69 = os_log_type_enabled(v67, v68);
  uint64_t v70 = *(void *)(v1 + 96);
  uint64_t v71 = *(void *)(v1 + 104);
  uint64_t v72 = *(void *)(v1 + 88);
  if (v69)
  {
    uint64_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v74 = swift_slowAlloc(32LL, -1LL);
    uint64_t v137 = v74;
    *(_DWORD *)uint64_t v73 = 136315138;
    *(void *)(v1 + 16) = sub_24BA0(0x64656C6261736964LL, 0xE800000000000000LL, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v73 + 4, v73 + 12);
    swift_bridgeObjectRelease(0xE800000000000000LL);
    _os_log_impl(&dword_0, v67, v68, "App Shortcut (%s) vs NLV4/POMMES", v73, 0xCu);
    swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1LL, -1LL);
    swift_slowDealloc(v73, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v71, v72);
  int v76 = *(_DWORD *)(v1 + 336);
  uint64_t v77 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
  os_log_type_t v78 = *(unsigned int (**)(uint64_t, uint64_t))(v1 + 304);
  uint64_t v79 = *(void *)(v1 + 208);
  uint64_t v80 = *(void *)(v1 + 192);
  uint64_t v81 = *(void *)(v1 + 160);
  uint64_t v82 = *(void *)(v1 + 144);
  uint64_t v83 = PluginAction.input.getter(v75);
  Input.parse.getter(v83);
  v77(v79, v80);
  if (v78(v81, v82) == v76)
  {
    uint64_t v85 = *(void *)(v1 + 248);
    uint64_t v84 = *(void *)(v1 + 256);
    uint64_t v86 = *(void *)(v1 + 240);
    uint64_t v87 = *(void *)(v1 + 160);
    uint64_t v88 = *(void *)(v1 + 64);
    uint64_t v89 = *(void *)(v1 + 72);
    uint64_t v90 = *(void *)(v1 + 56);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 152) + 96LL))(v87, *(void *)(v1 + 144));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v84, v87, v86);
    USOParse.extractAppShortcutInvocation(groupIndex:)(0x100000000LL);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v90, 1LL, v88) != 1)
    {
      v91 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 72) + 32LL);
      uint64_t v92 = v91(*(void *)(v1 + 80), *(void *)(v1 + 56), *(void *)(v1 + 64));
      v93 = (os_log_s *)Logger.logObject.getter(v92);
      os_log_type_t v94 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v93, v94))
      {
        v95 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v95 = 0;
        _os_log_impl( &dword_0,  v93,  v94,  "Returning appShortcutCollisionWithEnablement as the disambiguation strategy",  v95,  2u);
        swift_slowDealloc(v95, -1LL, -1LL);
      }

      uint64_t v96 = *(void *)(v1 + 136);
      uint64_t v98 = *(void *)(v1 + 112);
      uint64_t v97 = *(void *)(v1 + 120);
      uint64_t v99 = *(void *)(v1 + 80);
      uint64_t v100 = *(void *)(v1 + 64);
      uint64_t v101 = *(void *)(v1 + 24);

      uint64_t v102 = sub_72E4(&qword_5A058);
      uint64_t v103 = v101 + *(int *)(v102 + 48);
      uint64_t v104 = v101 + *(int *)(v102 + 64);
      v91(v101, v99, v100);
      v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 32);
      v105(v103, v96, v98);
      uint64_t v106 = v104;
      uint64_t v45 = v105;
      v135 = (uint64_t *)(v1 + 128);
      uint64_t v46 = *(void *)(v1 + 24);
      unsigned int v124 = 1;
      goto LABEL_33;
    }
  }

  else
  {
    uint64_t v107 = *(void *)(v1 + 64);
    uint64_t v108 = *(void *)(v1 + 72);
    uint64_t v109 = *(void *)(v1 + 56);
    (*(void (**)(void, void))(*(void *)(v1 + 152) + 8LL))(*(void *)(v1 + 160), *(void *)(v1 + 144));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v109, 1LL, 1LL, v107);
  }

  uint64_t v110 = *(void *)(v1 + 136);
  uint64_t v111 = *(void *)(v1 + 112);
  uint64_t v112 = *(void *)(v1 + 56);
  v113 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 120) + 8LL);
  v113(*(void *)(v1 + 128), v111);
  v113(v110, v111);
  sub_73D8(v112, &qword_5A930);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 312);
  uint64_t v46 = *(void *)(v1 + 24);
  unsigned int v124 = 4;
LABEL_32:
  uint64_t v106 = v46;
LABEL_33:
  uint64_t v114 = *v135;
  uint64_t v116 = *(void *)(v1 + 272);
  uint64_t v115 = *(void *)(v1 + 280);
  uint64_t v118 = *(void *)(v1 + 256);
  uint64_t v117 = *(void *)(v1 + 264);
  uint64_t v119 = *(void *)(v1 + 224);
  uint64_t v120 = *(void *)(v1 + 232);
  uint64_t v122 = *(void *)(v1 + 208);
  uint64_t v121 = *(void *)(v1 + 216);
  uint64_t v125 = *(void *)(v1 + 184);
  uint64_t v126 = *(void *)(v1 + 176);
  uint64_t v127 = *(void *)(v1 + 168);
  uint64_t v128 = *(void *)(v1 + 160);
  uint64_t v129 = *(void *)(v1 + 136);
  uint64_t v131 = *(void *)(v1 + 128);
  uint64_t v133 = *(void *)(v1 + 104);
  uint64_t v134 = *(void *)(v1 + 80);
  uint64_t v136 = *(void *)(v1 + 56);
  v45(v106, v114, *(void *)(v1 + 112));
  uint64_t v123 = type metadata accessor for ActionDisambiguationStrategy(0LL);
  swift_storeEnumTagMultiPayload(v46, v123, v124);
  swift_task_dealloc(v115);
  swift_task_dealloc(v116);
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  swift_task_dealloc(v119);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v131);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v136);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_9884(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 320LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 264LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 240LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 248LL);
  *(_BYTE *)(*(void *)v1 + 340LL) = a1;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_task_switch(sub_9900, 0LL, 0LL);
}

uint64_t sub_9900()
{
  int v1 = *(unsigned __int8 *)(v0 + 340);
  uint64_t v2 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 96) + 16LL))( *(void *)(v0 + 104),  *(void *)(v0 + 288),  *(void *)(v0 + 88));
  uint64_t v3 = (void *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled((os_log_t)v3, v4))
  {
    uint64_t v46 = *(void *)(v0 + 96);
    uint64_t v45 = *(void *)(v0 + 104);
    uint64_t v47 = *(void *)(v0 + 88);

    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    if (!v1) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl(&dword_0, v48, v49, "Disambiguating between App Shortcut and NLv4/POMMES", v50, 2u);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    uint64_t v51 = *(void *)(v0 + 136);
    uint64_t v52 = *(void *)(v0 + 112);
    uint64_t v53 = *(void *)(v0 + 120);

    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v51, v52);
    unsigned int v71 = 0;
    os_log_type_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32);
    uint64_t v43 = (uint64_t *)(v0 + 128);
    uint64_t v44 = *(void *)(v0 + 24);
    goto LABEL_20;
  }

  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v79 = *(void *)(v0 + 88);
  uint64_t v81 = *(void *)(v0 + 104);
  uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v7 = swift_slowAlloc(32LL, -1LL);
  *(_DWORD *)uint64_t v6 = 136315138;
  uint64_t v83 = v7;
  if (v1) {
    uint64_t v8 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v8 = 0x64656C6261736964LL;
  }
  if (v1) {
    unint64_t v9 = 0xE700000000000000LL;
  }
  else {
    unint64_t v9 = 0xE800000000000000LL;
  }
  *(void *)(v0 + 16) = sub_24BA0(v8, v9, &v83);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
  swift_bridgeObjectRelease(v9);
  _os_log_impl(&dword_0, (os_log_t)v3, v4, "App Shortcut (%s) vs NLV4/POMMES", v6, 0xCu);
  swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1LL, -1LL);
  swift_slowDealloc(v6, -1LL, -1LL);

  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v81, v79);
  if (v1) {
    goto LABEL_15;
  }
LABEL_9:
  int v11 = *(_DWORD *)(v0 + 336);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t))(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 208);
  uint64_t v15 = *(void *)(v0 + 192);
  uint64_t v16 = *(void *)(v0 + 160);
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v18 = PluginAction.input.getter(v10);
  Input.parse.getter(v18);
  v13(v14, v15);
  if (v12(v16, v17) != v11)
  {
    uint64_t v54 = *(void *)(v0 + 64);
    uint64_t v55 = *(void *)(v0 + 72);
    uint64_t v56 = *(void *)(v0 + 56);
    (*(void (**)(void, void))(*(void *)(v0 + 152) + 8LL))(*(void *)(v0 + 160), *(void *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v56, 1LL, 1LL, v54);
    goto LABEL_19;
  }

  uint64_t v20 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 240);
  uint64_t v22 = *(void *)(v0 + 160);
  uint64_t v23 = *(void *)(v0 + 64);
  uint64_t v24 = *(void *)(v0 + 72);
  uint64_t v25 = *(void *)(v0 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 152) + 96LL))(v22, *(void *)(v0 + 144));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v19, v22, v21);
  USOParse.extractAppShortcutInvocation(groupIndex:)(0x100000000LL);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v25, 1LL, v23) == 1)
  {
LABEL_19:
    uint64_t v57 = *(void *)(v0 + 136);
    uint64_t v58 = *(void *)(v0 + 112);
    uint64_t v59 = *(void *)(v0 + 56);
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 120) + 8LL);
    v60(*(void *)(v0 + 128), v58);
    v60(v57, v58);
    sub_73D8(v59, &qword_5A930);
    os_log_type_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 312);
    uint64_t v43 = (uint64_t *)(v0 + 32);
    uint64_t v44 = *(void *)(v0 + 24);
    unsigned int v71 = 4;
LABEL_20:
    uint64_t v41 = v44;
    goto LABEL_21;
  }

  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 72) + 32LL);
  uint64_t v27 = v26(*(void *)(v0 + 80), *(void *)(v0 + 56), *(void *)(v0 + 64));
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl( &dword_0,  v28,  v29,  "Returning appShortcutCollisionWithEnablement as the disambiguation strategy",  v30,  2u);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  uint64_t v31 = *(void *)(v0 + 136);
  uint64_t v33 = *(void *)(v0 + 112);
  uint64_t v32 = *(void *)(v0 + 120);
  uint64_t v34 = *(void *)(v0 + 80);
  uint64_t v35 = *(void *)(v0 + 64);
  uint64_t v36 = *(void *)(v0 + 24);

  uint64_t v37 = sub_72E4(&qword_5A058);
  uint64_t v38 = v36 + *(int *)(v37 + 48);
  uint64_t v39 = v36 + *(int *)(v37 + 64);
  v26(v36, v34, v35);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
  v40(v38, v31, v33);
  uint64_t v41 = v39;
  os_log_type_t v42 = v40;
  uint64_t v43 = (uint64_t *)(v0 + 128);
  uint64_t v44 = *(void *)(v0 + 24);
  unsigned int v71 = 1;
LABEL_21:
  uint64_t v62 = *(void *)(v0 + 272);
  uint64_t v61 = *(void *)(v0 + 280);
  uint64_t v64 = *(void *)(v0 + 256);
  uint64_t v63 = *(void *)(v0 + 264);
  uint64_t v65 = *(void *)(v0 + 224);
  uint64_t v66 = *(void *)(v0 + 232);
  uint64_t v68 = *(void *)(v0 + 208);
  uint64_t v67 = *(void *)(v0 + 216);
  uint64_t v72 = *(void *)(v0 + 184);
  uint64_t v73 = *(void *)(v0 + 176);
  uint64_t v74 = *(void *)(v0 + 168);
  uint64_t v75 = *(void *)(v0 + 160);
  uint64_t v76 = *(void *)(v0 + 136);
  uint64_t v77 = *(void *)(v0 + 128);
  uint64_t v78 = *(void *)(v0 + 104);
  uint64_t v80 = *(void *)(v0 + 80);
  uint64_t v82 = *(void *)(v0 + 56);
  v42(v41, *v43, *(void *)(v0 + 112));
  uint64_t v69 = type metadata accessor for ActionDisambiguationStrategy(0LL);
  swift_storeEnumTagMultiPayload(v44, v69, v71);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  swift_task_dealloc(v82);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_9E88()
{
  uint64_t v1 = type metadata accessor for AppShortcutInvocation(0LL);
  __chkstk_darwin(v1, v2);
  uint64_t v3 = type metadata accessor for PluginAction(0LL);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for ActionDisambiguationStrategy(0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_A270(v0, (uint64_t)v10);
  int v11 = (char *)sub_9FA0 + 4 * byte_47A60[swift_getEnumCaseMultiPayload(v10, v7)];
  __asm { BR              X10 }

uint64_t sub_9FA0()
{
  *(void *)(v4 - 96) = 0LL;
  *(void *)(v4 - 88) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(40LL);
  swift_bridgeObjectRelease(*(void *)(v4 - 88));
  *(void *)(v4 - 96) = 0xD000000000000026LL;
  *(void *)(v4 - 88) = 0x8000000000048E00LL;
  uint64_t v5 = sub_7D7C( (unint64_t *)&qword_59FC0,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction,  (uint64_t)&protocol conformance descriptor for PluginAction);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  uint64_t v8 = *(void *)(v4 - 96);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v8;
}

uint64_t type metadata accessor for ActionDisambiguationStrategy(uint64_t a1)
{
  uint64_t result = qword_5A488;
  if (!qword_5A488) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActionDisambiguationStrategy);
  }
  return result;
}

uint64_t sub_A270(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionDisambiguationStrategy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_A2B8(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, &type metadata accessor for ActionParaphrase.VerbEntityParaphrase);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_7D7C(&qword_5A3F8, v12, (uint64_t)&protocol conformance descriptor for ActionParaphrase.VerbEntityParaphrase);
  swift_bridgeObjectRetain(v10);
  uint64_t v35 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v31 = v3;
    uint64_t v32 = a1;
    uint64_t v33 = ~v15;
    uint64_t v34 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      uint64_t v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_7D7C( &qword_5A400,  (uint64_t (*)(uint64_t))&type metadata accessor for ActionParaphrase.VerbEntityParaphrase,  (uint64_t)&protocol conformance descriptor for ActionParaphrase.VerbEntityParaphrase);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v33;
      uint64_t v17 = v21;
      uint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v3 = v31;
        a1 = v32;
        uint64_t v26 = v34;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(void *)(*v31 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v28 = v35;
    v20(v9, v35, v6);
    uint64_t v36 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_AD08((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *uint64_t v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_A514(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      uint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_AF0C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *uint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_A6C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL);
  uint64_t v41 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_72E4(&qword_5A408);
  uint64_t v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1LL);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_39;
  }
  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v40 = (void *)(v8 + 56);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 56;
  uint64_t result = swift_retain(v8);
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }

    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v21 >= v39) {
      goto LABEL_35;
    }
    unint64_t v22 = v40[v21];
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_35;
      }
      unint64_t v22 = v40[v17];
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v39) {
          goto LABEL_35;
        }
        unint64_t v22 = v40[v17];
        if (!v22) {
          break;
        }
      }
    }

LABEL_25:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    uint64_t v24 = v8;
    uint64_t v25 = *(void *)(v8 + 48);
    uint64_t v26 = *(void *)(v41 + 72);
    uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 32);
    v27(v7, v25 + v26 * v20, v4);
    uint64_t v28 = *(void *)(v10 + 40);
    uint64_t v29 = sub_7D7C( &qword_5A3F8,  (uint64_t (*)(uint64_t))&type metadata accessor for ActionParaphrase.VerbEntityParaphrase,  (uint64_t)&protocol conformance descriptor for ActionParaphrase.VerbEntityParaphrase);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v4, v29);
    uint64_t v30 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1LL << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0LL;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v15 + 8 * v32);
      }

      while (v36 == -1);
      unint64_t v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }

    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v10 + 48) + v18 * v26, v7, v4);
    ++*(void *)(v10 + 16);
    uint64_t v8 = v24;
  }

  int64_t v23 = v21 + 3;
  if (v23 < v39)
  {
    unint64_t v22 = v40[v23];
    if (!v22)
    {
      while (1)
      {
        int64_t v17 = v23 + 1;
        if (__OFADD__(v23, 1LL)) {
          goto LABEL_41;
        }
        if (v17 >= v39) {
          goto LABEL_35;
        }
        unint64_t v22 = v40[v17];
        ++v23;
        if (v22) {
          goto LABEL_25;
        }
      }
    }

    int64_t v17 = v23;
    goto LABEL_25;
  }

    uint64_t v15 = (v23 - 1) & v23;
    int64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_26:
    uint64_t v25 = *(void *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(void *)(v9 + 48) + v25 * v21, v4);
    uint64_t v26 = *(void *)(v11 + 40);
    uint64_t v27 = sub_7D7C( &qword_5A3F8,  (uint64_t (*)(uint64_t))&type metadata accessor for ActionParaphrase.VerbEntityParaphrase,  (uint64_t)&protocol conformance descriptor for ActionParaphrase.VerbEntityParaphrase);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v4, v27);
    uint64_t v28 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        char v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        unint64_t v34 = *(void *)(v16 + 8 * v30);
      }

      while (v34 == -1);
      unint64_t v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))( *(void *)(v11 + 48) + v19 * v25,  v8,  v4);
    ++*(void *)(v11 + 16);
  }

  uint64_t v24 = v22 + 3;
  if (v24 >= v38)
  {
LABEL_35:
    uint64_t result = swift_release_n(v9, 2LL);
    uint64_t v2 = v36;
    goto LABEL_37;
  }

  int64_t v23 = *(void *)(v37 + 8 * v24);
  if (v23)
  {
    unint64_t v18 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v18 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v18 >= v38) {
      goto LABEL_35;
    }
    int64_t v23 = *(void *)(v37 + 8 * v18);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    unint64_t v20 = 32 * v15;
    sub_25914(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v19;
    v21[1] = v18;
    sub_22E38(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v24 - 1) & v24;
    uint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    int64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 16 * v15;
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    int64_t v21 = *v19;
    unint64_t v20 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *unint64_t v22 = v21;
    v22[1] = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain(v20);
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

LABEL_35:
  swift_release(v8);
  uint64_t v2 = v38;
  uint64_t v37 = 1LL << *(_BYTE *)(v8 + 32);
  if (v37 > 63) {
    bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v40 = -1LL << v37;
  }
  *(void *)(v8 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release(v8);
  *uint64_t v2 = v10;
  return result;
}

Swift::Int sub_AA2C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_72E4(&qword_5A410);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    unint64_t v32 = v2;
    char v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

LABEL_26:
        unint64_t v9 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      int64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      Swift::Int result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  Swift::Int result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    int64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    int64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    Swift::Int result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    Swift::Int result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    int64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

  Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t v43 = (v22 - 1) & v22;
  int64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; int64_t v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    unint64_t v25 = 16 * v20;
    unint64_t v26 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v20);
    unint64_t v28 = *v26;
    char v27 = v26[1];
    BOOL v29 = (uint64_t *)(*(void *)(v1 + 56) + v25);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v45 = v28;
    uint64_t v46 = v27;
    v44[0] = v30;
    v44[1] = v31;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v31);
    swift_dynamicCast(v7, v44, v12, v11, 7LL);
    unint64_t v32 = v45;
    char v33 = v46;
    sub_22E38(v7, v8);
    sub_22E38(v8, v50);
    sub_22E38(v50, &v48);
    Swift::Int result = sub_2C9F4(v32, v33);
    unint64_t v34 = result;
    if ((v35 & 1) != 0)
    {
      os_log_type_t v42 = i;
      int64_t v13 = v8;
      unint64_t v14 = v7;
      uint64_t v15 = v1;
      unint64_t v16 = v12;
      unint64_t v17 = v11;
      int64_t v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *int64_t v18 = v32;
      v18[1] = v33;
      uint64_t v11 = v17;
      uint64_t v12 = v16;
      uint64_t v1 = v15;
      uint64_t v7 = v14;
      uint64_t v8 = v13;
      i = v42;
      unint64_t v19 = (void *)(v3[7] + 32 * v34);
      sub_6CEC(v19);
      Swift::Int result = (unint64_t)sub_22E38(&v48, v19);
      uint64_t v6 = v43;
      if (!v43) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v36 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v36 = v32;
    v36[1] = v33;
    Swift::Int result = (unint64_t)sub_22E38(&v48, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v37 = v3[2];
    uint64_t v38 = __OFADD__(v37, 1LL);
    int64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_34;
    }
    v3[2] = v39;
    uint64_t v6 = v43;
    if (!v43) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v43 = (v6 - 1) & v6;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_AD08(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  int64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_A6C0(v13);
  }

  else
  {
    if (v12 > v11)
    {
      sub_B0A4();
      goto LABEL_12;
    }

    sub_B478(v13);
  }

  uint64_t v14 = *v3;
  uint64_t v15 = *(void *)(*v3 + 40);
  uint64_t v16 = sub_7D7C( &qword_5A3F8,  (uint64_t (*)(uint64_t))&type metadata accessor for ActionParaphrase.VerbEntityParaphrase,  (uint64_t)&protocol conformance descriptor for ActionParaphrase.VerbEntityParaphrase);
  uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  uint64_t v18 = -1LL << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v19 = ~v18;
    uint64_t v20 = *(void *)(v7 + 72);
    int64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(void *)(v14 + 48) + v20 * a2, v6);
      uint64_t v22 = sub_7D7C( &qword_5A400,  (uint64_t (*)(uint64_t))&type metadata accessor for ActionParaphrase.VerbEntityParaphrase,  (uint64_t)&protocol conformance descriptor for ActionParaphrase.VerbEntityParaphrase);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v23 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v19;
    }

    while (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

LABEL_12:
  uint64_t v24 = v31;
  uint64_t v25 = *v30;
  *(void *)(*v30 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v25 + 48) + *(void *)(v7 + 72) * a2,  v24,  v6);
  uint64_t v27 = *(void *)(v25 + 16);
  BOOL v28 = __OFADD__(v27, 1LL);
  uint64_t v29 = v27 + 1;
  if (!v28)
  {
    *(void *)(v25 + 16) = v29;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_AF0C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_AA2C(v11);
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_B2C8();
      goto LABEL_22;
    }

    sub_B7A0(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

LABEL_22:
  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  os_log_type_t v42 = type metadata accessor for Logger(0LL);
  sub_72B4(v42, (uint64_t)qword_5D478);
  uint64_t v43 = v2;
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  uint64_t v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v47 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v46 = 138412290;
    uint64_t v58 = v43;
    uint64_t v48 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v46 + 4, v46 + 12);
    *uint64_t v47 = v43;

    _os_log_impl(&dword_0, v44, v45, "No sash found in pommes response: %@", v46, 0xCu);
    os_log_type_t v49 = sub_72E4(&qword_5A950);
    swift_arrayDestroy(v47, 1LL, v49);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v46, -1LL, -1LL);
  }

  else
  {

    uint64_t v44 = (os_log_s *)v43;
  }

  uint64_t v50 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56LL))( a1,  1LL,  1LL,  v50);
}

void *sub_B0A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_72E4(&qword_5A408);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)(*v0);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release(v7);
LABEL_30:
    *uint64_t v1 = v9;
    return result;
  }

  BOOL v26 = v1;
  uint64_t result = (void *)(v8 + 56);
  uint64_t v11 = v7 + 56;
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  int64_t v14 = 0LL;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 56);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v22 >= v18) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v18) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v11 + 8 * v14);
      if (!v23)
      {
        int64_t v14 = v22 + 2;
        if (v22 + 2 >= v18) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v11 + 8 * v14);
        if (!v23) {
          break;
        }
      }
    }

LABEL_27:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 48) + v21, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))( *(void *)(v9 + 48) + v21,  v6,  v2);
  }

  int64_t v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v7);
    uint64_t v1 = v26;
    goto LABEL_30;
  }

  unint64_t v23 = *(void *)(v11 + 8 * v24);
  if (v23)
  {
    int64_t v14 = v24;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v14 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v11 + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    int64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    unint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    sub_25914(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(void *)&uint64_t v40 = v20;
    *((void *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v20;
    *((void *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_22E38(v39, v33);
    unint64_t v34 = v30;
    BOOL v35 = v31;
    uint64_t v36 = v32;
    sub_22E38(v33, v37);
    uint64_t v30 = v34;
    uint64_t v31 = v35;
    unint64_t v32 = v36;
    sub_22E38(v37, v38);
    sub_22E38(v38, &v34);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    unint64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    int64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      unint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(void *)(v11 + 32) = v32;
    uint64_t result = (uint64_t)sub_22E38(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  unint64_t v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_23088(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v29 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v28) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v29 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_23088(v52);
    return swift_release(v58);
  }

  sub_29D48(v21, a4 & 1);
  unint64_t v23 = sub_2C9F4(v15, v14);
  if ((v22 & 1) == (v24 & 1))
  {
    int64_t v18 = v23;
    if ((v22 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_25914((uint64_t)v49, (uint64_t)v48);
    sub_6CEC(v49);
    swift_bridgeObjectRelease(v14);
    uint64_t v25 = (void *)(*(void *)(*(void *)a5 + 56LL) + 32 * v18);
    sub_6CEC(v25);
    sub_22E38(v48, v25);
    goto LABEL_16;
  }

        sub_73D8((uint64_t)&v135, &qword_5AD48);
        uint64_t v76 = 0LL;
        uint64_t v77 = 0LL;
        goto LABEL_28;
      }
    }

    v135 = 0u;
    uint64_t v136 = 0u;
    goto LABEL_27;
  }

LABEL_32:
  __break(1u);
  return result;
}

          sub_23088(v1);
          return (unint64_t)v3;
        }
      }
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

void *sub_B2C8()
{
  uint64_t v1 = v0;
  sub_72E4(&qword_5A410);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

LABEL_30:
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

      uint64_t v102 = v100;
    }

    uint64_t v103 = swift_bridgeObjectRelease(v102);
    uint64_t v104 = UsoTask.arguments.getter(v103);
    if (*(void *)(v104 + 16))
    {
      v105 = sub_2C9F4(0x636E657265666572LL, 0xE900000000000065LL);
      unint64_t v21 = (char *)v206;
      uint64_t v106 = v213;
      uint64_t v107 = (uint8_t *)v214;
      if ((v108 & 1) == 0)
      {
        swift_release(v97);
        swift_release(v107);
        swift_bridgeObjectRelease(v104);
        goto LABEL_81;
      }

      uint64_t v109 = *(void *)(*(void *)(v104 + 56) + 8 * v105);
      swift_bridgeObjectRetain(v109);
      swift_bridgeObjectRelease(v104);
      if ((unint64_t)v109 >> 62)
      {
        if (v109 < 0) {
          v148 = v109;
        }
        else {
          v148 = v109 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v109);
        v149 = _CocoaArrayWrapper.endIndex.getter(v148);
        swift_bridgeObjectRelease(v109);
        char v33 = v211;
        if (!v149) {
          goto LABEL_114;
        }
      }

      else
      {
        char v33 = v211;
      }

      if ((v109 & 0xC000000000000001LL) != 0)
      {
        uint64_t v110 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v109);
      }

      else
      {
        if (!*(void *)((char *)&dword_10 + (v109 & 0xFFFFFFFFFFFFF8LL)))
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          v169 = (uint64_t)v33;
          swift_bridgeObjectRelease(v199);
          swift_bridgeObjectRelease(v207);
          swift_bridgeObjectRetain(v107);
          v170 = swift_bridgeObjectRetain(v180);
          v171 = (os_log_s *)Logger.logObject.getter(v170);
          v172 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v171, v172))
          {
            v173 = swift_slowAlloc(22LL, -1LL);
            v174 = swift_slowAlloc(64LL, -1LL);
            v216 = v174;
            *(_DWORD *)v173 = v184;
            v175 = (unint64_t)v191;
            swift_bridgeObjectRetain(v191);
            v218 = (char *)sub_24BA0(v182, v175, &v216);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, &v219, v173 + 4, v173 + 12);
            swift_bridgeObjectRelease_n(v175, 3LL);
            *(_WORD *)(v173 + 12) = 2080;
            v176 = v180;
            swift_bridgeObjectRetain(v180);
            v218 = (char *)sub_24BA0(v169, v176, &v216);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, &v219, v173 + 14, v173 + 22);
            swift_bridgeObjectRelease_n(v176, 3LL);
            _os_log_impl( &dword_0,  v171,  v172,  "VerbEntityDisambiguationFlow: Offered entity name %s mathces response entity name %s",  (uint8_t *)v173,  0x16u);
            swift_arrayDestroy(v174, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v174, -1LL, -1LL);
            swift_slowDealloc(v173, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v191, 2LL);
            swift_bridgeObjectRelease_n(v180, 2LL);
          }

          swift_release(v185);
          swift_release(v181);
          swift_release(v192);
          swift_release(v215);
          swift_release(v214);
          ((void (*)(char *, uint64_t))v95)(v190, v206);
          v177 = v208;
          v178 = v186;
          v179 = v212;
          (*(void (**)(uint64_t, char *, uint64_t))(v208 + 32))(v186, v209, v212);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v177 + 56))(v178, 0LL, 1LL, v179);
        }

        uint64_t v110 = *(void *)(v109 + 32);
        swift_retain(v110);
      }

      uint64_t v111 = swift_bridgeObjectRelease(v109);
      uint64_t v112 = dispatch thunk of UsoValue.getAsEntity()(v111);
      v113 = swift_release(v110);
      if (v112)
      {
        uint64_t v114 = UsoEntity.attributes.getter(v113);
        if (!*(void *)(v114 + 16) || (uint64_t v115 = sub_2C9F4(1701667182LL, 0xE400000000000000LL), (v116 & 1) == 0))
        {
          swift_release(v97);
          swift_release(v107);
          swift_bridgeObjectRelease(v114);
          goto LABEL_68;
        }

        v192 = v112;
        uint64_t v117 = *(void *)(*(void *)(v114 + 56) + 8 * v115);
        swift_bridgeObjectRetain(v117);
        swift_bridgeObjectRelease(v114);
        if ((unint64_t)v117 >> 62)
        {
          if (v117 < 0) {
            v150 = v117;
          }
          else {
            v150 = v117 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v117);
          v151 = _CocoaArrayWrapper.endIndex.getter(v150);
          swift_bridgeObjectRelease(v117);
          char v33 = v211;
          if (!v151)
          {
LABEL_100:
            swift_release(v97);
            swift_release(v107);
            swift_bridgeObjectRelease(v117);
            uint64_t v112 = v192;
            goto LABEL_69;
          }
        }

        else
        {
          char v33 = v211;
        }

        if ((v117 & 0xC000000000000001LL) != 0)
        {
          uint64_t v118 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v117);
        }

        else
        {
          uint64_t v118 = *(void *)(v117 + 32);
          swift_retain(v118);
        }

        uint64_t v112 = v192;
        uint64_t v119 = swift_bridgeObjectRelease(v117);
        v182 = dispatch thunk of UsoValue.getAsPrimitiveValueString()(v119);
        uint64_t v121 = v120;
        uint64_t v122 = swift_release(v118);
        if (!v121)
        {
          swift_release(v97);
          swift_release(v107);
LABEL_68:
          char v33 = v211;
LABEL_69:
          swift_release(v112);
LABEL_115:
          uint64_t v65 = v209;
          goto LABEL_116;
        }

        v191 = v121;
        uint64_t v123 = UsoTask.arguments.getter(v122);
        if (!*(void *)(v123 + 16) || (unsigned int v124 = sub_2C9F4(0x636E657265666572LL, 0xE900000000000065LL), (v125 & 1) == 0))
        {
          swift_release(v107);
          swift_bridgeObjectRelease(v123);
          goto LABEL_75;
        }

        uint64_t v109 = *(void *)(*(void *)(v123 + 56) + 8 * v124);
        swift_bridgeObjectRetain(v109);
        uint64_t result = swift_bridgeObjectRelease(v123);
        if ((unint64_t)v109 >> 62)
        {
          if (v109 < 0) {
            v152 = v109;
          }
          else {
            v152 = v109 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v109);
          v153 = _CocoaArrayWrapper.endIndex.getter(v152);
          uint64_t result = swift_bridgeObjectRelease(v109);
          char v33 = v211;
          if (!v153) {
            goto LABEL_113;
          }
        }

        else
        {
          char v33 = v211;
        }

        if ((v109 & 0xC000000000000001LL) != 0)
        {
          uint64_t v127 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v109);
        }

        else
        {
          if (!*(void *)((char *)&dword_10 + (v109 & 0xFFFFFFFFFFFFF8LL)))
          {
            __break(1u);
LABEL_145:
            __break(1u);
            return result;
          }

          uint64_t v127 = *(void *)(v109 + 32);
          swift_retain(v127);
        }

        uint64_t v112 = v192;
        uint64_t v128 = swift_bridgeObjectRelease(v109);
        uint64_t v129 = dispatch thunk of UsoValue.getAsEntity()(v128);
        v130 = swift_release(v127);
        if (v129)
        {
          v181 = v129;
          uint64_t v131 = UsoEntity.attributes.getter(v130);
          if (*(void *)(v131 + 16))
          {
            v132 = sub_2C9F4(1701667182LL, 0xE400000000000000LL);
            if ((v133 & 1) != 0)
            {
              uint64_t v109 = *(void *)(*(void *)(v131 + 56) + 8 * v132);
              swift_bridgeObjectRetain(v109);
              uint64_t result = swift_bridgeObjectRelease(v131);
              if ((unint64_t)v109 >> 62)
              {
                if (v109 < 0) {
                  v154 = v109;
                }
                else {
                  v154 = v109 & 0xFFFFFFFFFFFFFF8LL;
                }
                swift_bridgeObjectRetain(v109);
                v155 = _CocoaArrayWrapper.endIndex.getter(v154);
                uint64_t result = swift_bridgeObjectRelease(v109);
                char v33 = v211;
                if (!v155)
                {
LABEL_112:
                  swift_release(v181);
LABEL_113:
                  swift_bridgeObjectRelease(v191);
                  swift_release(v192);
LABEL_114:
                  swift_release(v97);
                  swift_release(v107);
                  swift_bridgeObjectRelease(v109);
                  goto LABEL_115;
                }
              }

              else
              {
                char v33 = v211;
              }

              if ((v109 & 0xC000000000000001LL) != 0)
              {
                uint64_t v134 = v107;
                v135 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v109);
              }

              else
              {
                uint64_t v134 = v107;
                v135 = *(void *)(v109 + 32);
                swift_retain(v135);
              }

              uint64_t v136 = swift_bridgeObjectRelease(v109);
              char v33 = (char *)dispatch thunk of UsoValue.getAsPrimitiveValueString()(v136);
              v138 = v137;
              swift_release(v135);
              if (v138)
              {
                uint64_t v107 = v191;
                v216 = v182;
                v217[0] = v191;
                v218 = v33;
                v219 = v138;
                v180 = v138;
                v139 = sub_18C20();
                if (!StringProtocol.caseInsensitiveCompare<A>(_:)( &v218,  &type metadata for String,  &type metadata for String,  v139,  v139)) {
                  goto LABEL_140;
                }
                swift_bridgeObjectRelease(v180);
                swift_release(v181);
                v140 = v107;
              }

              else
              {
                swift_release(v181);
                v140 = v191;
              }

              swift_bridgeObjectRelease(v140);
              swift_release(v192);
              swift_release(v97);
              v146 = (uint64_t)v134;
LABEL_80:
              swift_release(v146);
LABEL_81:
              uint64_t v65 = v209;
              char v33 = v211;
              goto LABEL_116;
            }
          }

          swift_release(v107);
          swift_bridgeObjectRelease(v131);
          swift_release(v181);
LABEL_75:
          swift_bridgeObjectRelease(v191);
          swift_release(v112);
          v146 = v97;
          goto LABEL_80;
        }

        swift_bridgeObjectRelease(v191);
        swift_release(v112);
      }

      swift_release(v97);
      v146 = (uint64_t)v107;
      goto LABEL_80;
    }

    swift_release(v97);
    swift_release(v214);
    swift_bridgeObjectRelease(v104);
    uint64_t v65 = v209;
    unint64_t v21 = (char *)v206;
    char v33 = v211;
    uint64_t v106 = v213;
LABEL_116:
    BOOL v26 = v208;
    int64_t v24 = v75;
    ((void (*)(char *, char *))v95)(v75, v21);
    uint64_t v58 = v26;
    a1 = v212;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v65, v212);
LABEL_117:
    uint64_t v61 = 1LL;
    uint64_t v62 = 1LL;
    if ((v106 & 1) != 0)
    {
      swift_bridgeObjectRelease(v199);
      v164 = swift_bridgeObjectRelease(v207);
      v165 = (os_log_s *)Logger.logObject.getter(v164);
      v166 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v165, v166))
      {
        v168 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v168 = 0;
        _os_log_impl( &dword_0,  v165,  v166,  "VerbEntityDisambiguationFlow: resolveResponseToVerbEntityParaphraseDisambiguation no match found",  v168,  2u);
        swift_slowDealloc(v168, -1LL, -1LL);
      }

      swift_release(v185);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v186, 1LL, 1LL, a1);
    }
  }

  swift_bridgeObjectRelease(v199);
  swift_errorRelease(v25);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v77, v201);
LABEL_128:
  (*(void (**)(char *, char *))(v73 + 8))(v75, v21);
LABEL_129:
  v159 = swift_bridgeObjectRelease(v207);
  v160 = (os_log_s *)Logger.logObject.getter(v159);
  v161 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v160, v161))
  {
    v162 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v162 = 0;
    _os_log_impl( &dword_0,  v160,  v161,  "VerbEntityDisambiguationFlow: pluginAction has no userStatedTask paraphrase that can be interpreted as a UsoTask",  v162,  2u);
    swift_slowDealloc(v162, -1LL, -1LL);
  }

  swift_release(v185);
  v163 = v212;
  (*(void (**)(char *, uint64_t))(a1 + 8))(v209, v212);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 56))(v186, 1LL, 1LL, v163);
}

uint64_t sub_B478(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_72E4(&qword_5A408);
  uint64_t v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 0LL);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = swift_release(v9);
LABEL_37:
    *uint64_t v2 = v11;
    return result;
  }

  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 56);
  uint64_t v36 = v2;
  uint64_t v37 = v9 + 56;
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 56;
  uint64_t result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_26;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v22 >= v38) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v37 + 8 * v22);
    ++v18;
    if (!v23)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v18);
      if (!v23)
      {
        int64_t v18 = v22 + 2;
        if (v22 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v18);
        if (!v23) {
          break;
        }
      }
    }

LABEL_39:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

Swift::Int sub_B7A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_72E4(&qword_5A410);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  char v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_BA4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_A514(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

uint64_t sub_BAE0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2, &type metadata accessor for ActionParaphrase.VerbEntityParaphrase);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = sub_7D7C(&qword_5A3F8, v11, (uint64_t)&protocol conformance descriptor for ActionParaphrase.VerbEntityParaphrase);
  uint64_t result = Set.init(minimumCapacity:)(v10, v2, v12);
  uint64_t v18 = result;
  if (v10)
  {
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v15 = *(void *)(v3 + 72);
    unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v16(v6, v14, v2);
      sub_A2B8((uint64_t)v9, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      v14 += v15;
      --v10;
    }

    while (v10);
    return v18;
  }

  return result;
}

uint64_t sub_BC08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = (char *)&loc_BC60 + 4 * byte_47A65[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t sub_BDE0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 2:
    case 3:
    case 4:
      uint64_t v4 = type metadata accessor for PluginAction(0LL);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
    case 1:
      uint64_t v5 = type metadata accessor for AppShortcutInvocation(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
      uint64_t v6 = sub_72E4(&qword_5A058);
      uint64_t v7 = a1 + *(int *)(v6 + 48);
      uint64_t v8 = type metadata accessor for PluginAction(0LL);
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
      v9(v7, v8);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v9)(a1 + *(int *)(v6 + 64), v8);
      break;
    default:
      return result;
  }

  return result;
}

void sub_BED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (char *)sub_BF24 + 4 * byte_47A6F[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

uint64_t sub_BF24()
{
  uint64_t v4 = type metadata accessor for PluginAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(v0, v3, v4);
  swift_storeEnumTagMultiPayload(v0, v1, v2);
  return v0;
}

uint64_t sub_BFEC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    sub_C118(result);
    uint64_t v5 = (char *)&loc_C050 + 4 * byte_47A74[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_C118(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActionDisambiguationStrategy(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_C154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (char *)sub_C1A8 + 4 * byte_47A79[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

uint64_t sub_C1A8()
{
  uint64_t v4 = type metadata accessor for PluginAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(v0, v3, v4);
  swift_storeEnumTagMultiPayload(v0, v1, v2);
  return v0;
}

uint64_t sub_C270(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    sub_C118(result);
    uint64_t v5 = (char *)&loc_C2D4 + 4 * byte_47A7E[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_C39C(uint64_t a1)
{
  uint64_t result = type metadata accessor for PluginAction(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    v7[0] = v4;
    uint64_t result = type metadata accessor for AppShortcutInvocation(319LL);
    if (v5 <= 0x3F)
    {
      swift_getTupleTypeLayout3(v6, *(void *)(result - 8) + 64LL, v4, v4);
      v7[1] = v6;
      uint64_t v7[2] = v4;
      v7[3] = v4;
      v7[4] = v4;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 5LL, v7);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_C43C(uint64_t a1)
{
  v2[37] = a1;
  v2[38] = v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A820);
  v2[39] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  v2[40] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[41] = v5;
  v2[42] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A5A0);
  v2[43] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  v2[44] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[45] = v8;
  v2[46] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v2[47] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[48] = v10;
  v2[49] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TemplatingResult(0LL);
  v2[50] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[51] = v12;
  v2[52] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_C55C, 0LL, 0LL);
}

uint64_t sub_C55C()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "AirplaneModeFlow: execute called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = type metadata accessor for ConversationService(0LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v6);
  id v8 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  v0[54] = v8;
  unint64_t v9 = sub_2C6F8((uint64_t)_swiftEmptyArrayStorage);
  v0[55] = v9;
  uint64_t v10 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v10, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  strcpy((char *)(inited + 32), "responseMode");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0LL;
  *(void *)(inited + 56) = 0xE000000000000000LL;
  unint64_t v12 = sub_2C5C4(inited);
  v0[56] = v12;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_5B310 + dword_5B310);
  int64_t v13 = (void *)swift_task_alloc(unk_5B314);
  v0[57] = v13;
  void *v13 = v0;
  v13[1] = sub_CC44;
  return v15((uint64_t)v8, 0xD000000000000022LL, 0x8000000000048E60LL, v9, v12);
}

uint64_t sub_C740()
{
  uint64_t v26 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v30 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v29 = *(void *)(v0 + 352);
  uint64_t v27 = *(void *)(v0 + 368);
  unint64_t v28 = *(void **)(v0 + 304);
  id v5 = *(id *)(v0 + 464);
  id v6 = [v5 speak];
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = [v5 print];
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v3);
  id v9 = [v5 print];
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRelease(v10);
  unint64_t v12 = sub_34478(0LL, 0xE000000000000000LL, v11);
  id v13 = [v5 meta];

  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v13,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  uint64_t v15 = TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:dialogIdentifier:meta:)( 0xD000000000000022LL,  0x8000000000048E60LL,  v25,  v8,  v1,  v12,  v14);
  uint64_t v16 = static Device.current.getter(v15);
  static Device.current.getter(v16);
  uint64_t v17 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 168);
  sub_73B4((void *)(v0 + 136), v17);
  LOBYTE(v1) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v17, v18);
  uint64_t v19 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v4, 1LL, 1LL, v19);
  *(void *)(v0 + 208) = 0LL;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v26,  v0 + 96,  v1 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v4,  _swiftEmptyArrayStorage,  v0 + 176);
  sub_73D8(v0 + 176, (uint64_t *)&unk_5C140);
  sub_73D8(v4, (uint64_t *)&unk_5A5A0);
  sub_6CEC((void *)(v0 + 96));
  sub_6CEC((void *)(v0 + 136));
  uint64_t v20 = v28[10];
  uint64_t v21 = v28[11];
  sub_73B4(v28 + 7, v20);
  *(void *)(v0 + 240) = v29;
  *(void *)(v0 + 248) = &protocol witness table for AceOutput;
  uint64_t v22 = sub_8390((void *)(v0 + 216));
  (*(void (**)(void *, uint64_t, uint64_t))(v30 + 16))(v22, v27, v29);
  uint64_t v23 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 424) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_CA48;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 216, v20, v21);
}

uint64_t sub_CA48()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 424));
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v3 = sub_CE6C;
  }

  else
  {
    sub_6CEC((void *)(v2 + 216));
    uint64_t v3 = sub_CCD4;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_CAB8()
{
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v3 = *(void **)(v0 + 432);
  swift_bridgeObjectRelease(*(void *)(v0 + 448));
  swift_bridgeObjectRelease(v2);

  _StringGuts.grow(_:)(46LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v18[0] = 0xD00000000000002CLL;
  v18[1] = 0x8000000000048E90LL;
  swift_getErrorValue(v1, v0 + 288, v0 + 256);
  v4._countAndFlagsBits = Error.localizedDescription.getter(*(void *)(v0 + 264), *(void *)(v0 + 272));
  object = v4._object;
  String.append(_:)(v4);
  uint64_t v6 = swift_bridgeObjectRelease(object);
  id v7 = static OutputPublisherFactory.makeOutputPublisherAsync()(v17, v6);
  static SiriKitEventSender.current.getter(v18, v7);
  uint64_t v8 = type metadata accessor for CamErrorFlow();
  swift_allocObject(v8, 112LL, 7LL);
  uint64_t v9 = sub_267BC(0xD00000000000002CLL, 0x8000000000048E90LL, v17, v18);
  *(void *)(v0 + 280) = v9;
  unint64_t v10 = sub_D2A8();
  static ExecuteResponse.complete<A>(next:)(v0 + 280, v8, v10);
  swift_errorRelease(v1);
  swift_release(v9);
  uint64_t v11 = *(void *)(v0 + 392);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v13 = *(void *)(v0 + 344);
  uint64_t v15 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CC44(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 456);
  *(void *)(v3 + 464) = a1;
  *(void *)(v3 + 472) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    id v5 = sub_CAB8;
  }

  else
  {
    uint64_t v6 = *(void *)(v3 + 440);
    uint64_t v7 = *(void *)(v3 + 448);

    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    id v5 = sub_C740;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_CCD4()
{
  uint64_t v20 = *(void **)(v0 + 464);
  uint64_t v21 = *(void *)(v0 + 408);
  uint64_t v22 = *(void *)(v0 + 400);
  uint64_t v23 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 352);
  uint64_t v19 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void **)(v0 + 304);
  uint64_t v8 = v6[15];
  uint64_t v7 = v6[16];
  sub_73B4(v6 + 12, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ActivityType.completed(_:), v4);
  type metadata accessor for SiriKitEvent(0LL);
  uint64_t v9 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 1LL, 1LL, v9);
  uint64_t v10 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v2,  0x54746E6572727543LL,  0xEB000000006B7361LL,  v5,  sub_D00C,  0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v10, v8, v7);
  uint64_t v11 = swift_release(v10);
  static ExecuteResponse.complete()(v11);

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v19, v18);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v14 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CE6C()
{
  uint64_t v20 = *(void **)(v0 + 464);
  uint64_t v21 = *(void *)(v0 + 408);
  uint64_t v22 = *(void *)(v0 + 400);
  uint64_t v23 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 352);
  uint64_t v19 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void **)(v0 + 304);
  uint64_t v8 = v6[15];
  uint64_t v7 = v6[16];
  sub_73B4(v6 + 12, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ActivityType.completed(_:), v4);
  type metadata accessor for SiriKitEvent(0LL);
  uint64_t v9 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 1LL, 1LL, v9);
  uint64_t v10 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v2,  0x54746E6572727543LL,  0xEB000000006B7361LL,  v5,  sub_D00C,  0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v10, v8, v7);
  uint64_t v11 = swift_release(v10);
  static ExecuteResponse.complete()(v11);

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v19, v18);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v14 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D00C()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter( 0x656E616C70726961LL,  0xED000065646F6D5FLL);
}

uint64_t sub_D04C()
{
  return swift_deallocClassInstance(v0, 136LL, 7LL);
}

uint64_t type metadata accessor for AirplaneModeFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin16AirplaneModeFlow);
}

uint64_t sub_D0A0()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_72B4(v0, (uint64_t)qword_5D478);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "AirplaneModeFlow input accepted", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return 1LL;
}

uint64_t sub_D170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_7140;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_D1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for AirplaneModeFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_D230(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_5A4EC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_7240;
  return sub_C43C(a1);
}

uint64_t sub_D284(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AirplaneModeFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

unint64_t sub_D2A8()
{
  unint64_t result = qword_5C1A0;
  if (!qword_5C1A0)
  {
    uint64_t v1 = type metadata accessor for CamErrorFlow();
    unint64_t result = swift_getWitnessTable(&unk_48040, v1);
    atomic_store(result, (unint64_t *)&qword_5C1A0);
  }

  return result;
}

void sub_D2F0()
{
  qword_5D358 = 0x54746E6572727543LL;
  unk_5D360 = 0xEB000000006B7361LL;
}

uint64_t sub_D31C()
{
  uint64_t v0 = type metadata accessor for UserHistoryHelper();
  uint64_t result = swift_allocObject(v0, 16LL, 7LL);
  qword_5D380 = v0;
  unk_5D388 = &off_56230;
  qword_5D368 = result;
  return result;
}

uint64_t sub_D364()
{
  qword_5D3A8 = type metadata accessor for AppShortcutProvider(0LL);
  unk_5D3B0 = &protocol witness table for AppShortcutProvider;
  sub_8390(qword_5D390);
  return AppShortcutProvider.init()();
}

uint64_t sub_D3A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NLIntent(0LL);
  uint64_t v207 = *(void *)(v2 - 8);
  uint64_t v208 = v2;
  __chkstk_darwin(v2, v3);
  v206 = (char *)&v181 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for AppNameDisambiguationFlow.State(0LL);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v200 = (uint64_t)&v181 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v190 = (uint64_t)&v181 - v11;
  __chkstk_darwin(v10, v12);
  v202 = (char *)&v181 - v13;
  uint64_t v14 = type metadata accessor for PluginAction(0LL);
  uint64_t v209 = *(void *)(v14 - 8);
  uint64_t v210 = v14;
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)&v181 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v16, v19);
  v184 = (char *)&v181 - v21;
  uint64_t v23 = __chkstk_darwin(v20, v22);
  v183 = (char *)&v181 - v24;
  __chkstk_darwin(v23, v25);
  v186 = (char *)&v181 - v26;
  uint64_t v195 = type metadata accessor for USOParse(0LL);
  uint64_t v194 = *(void *)(v195 - 8);
  __chkstk_darwin(v195, v27);
  v193 = (char *)&v181 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v198 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v197 = *(void *)(v198 - 8);
  __chkstk_darwin(v198, v29);
  v196 = (char *)&v181 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for Parse(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v213 = v31;
  uint64_t v214 = v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  v185 = (char *)&v181 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __chkstk_darwin(v34, v36);
  v189 = (char *)&v181 - v38;
  __chkstk_darwin(v37, v39);
  v215 = (char *)&v181 - v40;
  uint64_t v41 = sub_72E4((uint64_t *)&unk_5A980);
  uint64_t v43 = __chkstk_darwin(v41, v42);
  uint64_t v45 = (char *)&v181 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = __chkstk_darwin(v43, v46);
  uint64_t v199 = (uint64_t)&v181 - v48;
  uint64_t v50 = __chkstk_darwin(v47, v49);
  uint64_t v187 = (uint64_t)&v181 - v51;
  uint64_t v53 = __chkstk_darwin(v50, v52);
  v191 = (char *)&v181 - v54;
  __chkstk_darwin(v53, v55);
  v212 = (char *)&v181 - v56;
  uint64_t v57 = type metadata accessor for Input(0LL);
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v60 = __chkstk_darwin(v57, v59);
  uint64_t v62 = (char *)&v181 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = __chkstk_darwin(v60, v63);
  v188 = (char *)&v181 - v65;
  __chkstk_darwin(v64, v66);
  uint64_t v68 = (char *)&v181 - v67;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  v201 = v18;
  uint64_t v69 = type metadata accessor for Logger(0LL);
  uint64_t v70 = sub_72B4(v69, (uint64_t)qword_5D478);
  v203 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 16);
  uint64_t v71 = v203(v68, a1, v57);
  uint64_t v205 = v70;
  uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
  os_log_type_t v73 = static os_log_type_t.debug.getter();
  BOOL v74 = os_log_type_enabled(v72, v73);
  v211 = v62;
  if (v74)
  {
    uint64_t v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v76 = swift_slowAlloc(32LL, -1LL);
    v182 = v45;
    uint64_t v77 = v76;
    uint64_t v219 = v76;
    uint64_t v192 = a1;
    *(_DWORD *)uint64_t v75 = 136315138;
    v204 = (void (*)(char *, uint64_t))(v75 + 4);
    uint64_t v78 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter(v57, v78);
    unint64_t v81 = v80;
    uint64_t v217 = sub_24BA0(v79, v80, &v219);
    uint64_t v82 = v192;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v204, v75 + 12);
    swift_bridgeObjectRelease(v81);
    v204 = *(void (**)(char *, uint64_t))(v58 + 8);
    v204(v68, v57);
    _os_log_impl(&dword_0, v72, v73, "AppNameDisambiguationFlow: on called with input %s", v75, 0xCu);
    swift_arrayDestroy(v77, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v83 = v77;
    uint64_t v45 = v182;
    swift_slowDealloc(v83, -1LL, -1LL);
    swift_slowDealloc(v75, -1LL, -1LL);

    uint64_t v85 = v214;
  }

  else
  {
    v204 = *(void (**)(char *, uint64_t))(v58 + 8);
    v204(v68, v57);

    uint64_t v85 = v214;
    uint64_t v82 = a1;
  }

  uint64_t v86 = v215;
  uint64_t v87 = v82;
  Input.parse.getter(v84);
  uint64_t v88 = v213;
  int v89 = (*(uint64_t (**)(char *, uint64_t))(v85 + 88))(v86, v213);
  uint64_t v90 = (uint64_t)v212;
  uint64_t v92 = v209;
  uint64_t v91 = v210;
  if (v89 != enum case for Parse.NLv3IntentOnly(_:))
  {
    int v102 = v89;
    if (v89 == enum case for Parse.directInvocation(_:))
    {
      uint64_t v103 = *(void (**)(char *, uint64_t))(v85 + 96);
      uint64_t v104 = v215;
      v103(v215, v88);
      uint64_t v105 = v197;
      uint64_t v106 = v196;
      uint64_t v107 = v104;
      uint64_t v108 = v198;
      (*(void (**)(char *, char *, uint64_t))(v197 + 32))(v196, v107, v198);
      sub_2E1AC( (uint64_t)&v216[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_firstAction],  (uint64_t)&v216[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_secondAction],  v90);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v108);
      uint64_t v100 = v87;
      uint64_t v109 = v211;
      goto LABEL_25;
    }

    uint64_t v100 = v87;
    if (v89 != enum case for Parse.uso(_:))
    {
      int v163 = enum case for Parse.empty(_:);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v209 + 56))(v212, 1LL, 1LL, v210);
      uint64_t v109 = v211;
      if (v102 == v163)
      {
        v164 = &v216[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_state];
        swift_beginAccess(&v216[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_state], &v217, 0LL, 0LL);
        uint64_t v165 = (uint64_t)v164;
        uint64_t v166 = v190;
        sub_7458(v165, v190, type metadata accessor for AppNameDisambiguationFlow.State);
        uint64_t v167 = sub_72E4((uint64_t *)&unk_5A070);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 48LL))(v166, 3LL, v167) == 1)
        {
          sub_73D8(v90, (uint64_t *)&unk_5A980);
          sub_749C(v166, type metadata accessor for AppNameDisambiguationFlow.State);
          return 1LL;
        }

        sub_749C(v166, type metadata accessor for AppNameDisambiguationFlow.State);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v214 + 8))(v215, v88);
      }

      goto LABEL_25;
    }

    uint64_t v110 = *(void (**)(char *, uint64_t))(v85 + 96);
    uint64_t v111 = v215;
    v110(v215, v88);
    uint64_t v112 = v193;
    (*(void (**)(char *, char *, uint64_t))(v194 + 32))(v193, v111, v195);
    uint64_t v113 = (uint64_t)&v216[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_firstAction];
    uint64_t v114 = &v216[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_secondAction];
    uint64_t v115 = sub_33F50();
    uint64_t v109 = v211;
    if ((v116 & 1) == 0)
    {
      if (v115 != 1)
      {
        if (v115)
        {
          if (v115 != -1) {
            goto LABEL_17;
          }
        }

        else
        {
          uint64_t v114 = (char *)v113;
        }
      }

      v178 = v191;
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v191, v114, v91);
      v215 = *(char **)(v92 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v215)(v178, 0LL, 1LL, v91);
      (*(void (**)(char *, uint64_t))(v194 + 8))(v112, v195);
      v179 = *(void (**)(char *, char *, uint64_t))(v92 + 32);
      v180 = v186;
      v179(v186, v178, v91);
      v179((char *)v90, v180, v91);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v215)(v90, 0LL, 1LL, v91);
      goto LABEL_25;
    }

LABEL_17:
    uint64_t v117 = v57;
    uint64_t v192 = v100;
    uint64_t v118 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56);
    uint64_t v119 = (uint64_t)v191;
    v118(v191, 1LL, 1LL, v91);
    sub_73D8(v119, (uint64_t *)&unk_5A980);
    uint64_t v120 = sub_1006C();
    if (v121)
    {
      uint64_t v122 = v121;
      uint64_t v123 = v187;
      sub_FBBC(v120, v121, v113, (void (*)(void, void))v114, v187);
      swift_bridgeObjectRelease(v122);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v123, 1LL, v91) != 1)
      {
        v174 = *(void (**)(char *, uint64_t, uint64_t))(v92 + 32);
        v175 = v184;
        v174(v184, v123, v91);
        (*(void (**)(char *, uint64_t))(v194 + 8))(v193, v195);
        v176 = v183;
        v174(v183, (uint64_t)v175, v91);
        v177 = v212;
        v174(v212, (uint64_t)v176, v91);
        v118(v177, 0LL, 1LL, v91);
        uint64_t v100 = v192;
        uint64_t v109 = v211;
        uint64_t v90 = (uint64_t)v177;
        goto LABEL_25;
      }

      uint64_t v120 = sub_73D8(v123, (uint64_t *)&unk_5A980);
    }

    unsigned int v124 = v189;
    uint64_t v125 = v192;
    uint64_t v126 = Input.parse.getter(v120);
    char v127 = Parse.hasRejected.getter(v126);
    uint64_t v128 = *(void (**)(char *, uint64_t))(v214 + 8);
    uint64_t v129 = v124;
    uint64_t v130 = v213;
    v128(v129, v213);
    uint64_t v131 = v188;
    uint64_t v132 = v125;
    uint64_t v57 = v117;
    uint64_t v133 = v203(v188, v132, v117);
    if ((v127 & 1) != 0)
    {
      v204(v131, v117);
      (*(void (**)(char *, uint64_t))(v194 + 8))(v193, v195);
    }

    else
    {
      v215 = (char *)v118;
      v168 = v185;
      uint64_t v169 = Input.parse.getter(v133);
      char v170 = Parse.hasCancelled.getter(v169);
      v128(v168, v130);
      v204(v131, v57);
      (*(void (**)(char *, uint64_t))(v194 + 8))(v193, v195);
      if ((v170 & 1) == 0)
      {
        uint64_t v90 = (uint64_t)v212;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v215)(v212, 1LL, 1LL, v91);
        uint64_t v100 = v192;
        uint64_t v109 = v211;
        goto LABEL_25;
      }
    }

    uint64_t v171 = sub_72E4((uint64_t *)&unk_5A070);
    uint64_t v172 = (uint64_t)v202;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 56LL))(v202, 3LL, 3LL, v171);
    uint64_t v173 = (uint64_t)&v216[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_state];
    swift_beginAccess(&v216[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_state], &v219, 33LL, 0LL);
    sub_18E44(v172, v173);
    swift_endAccess(&v219);
    return 1LL;
  }

  (*(void (**)(char *, uint64_t))(v85 + 96))(v86, v88);
  (*(void (**)(char *, char *, uint64_t))(v207 + 32))(v206, v86, v208);
  uint64_t v93 = OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_firstAction;
  uint64_t v94 = OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_secondAction;
  uint64_t v95 = sub_169C4();
  if (v96)
  {
    uint64_t v97 = v96;
    uint64_t v98 = (uint64_t)&v216[v93];
    uint64_t v99 = v199;
    sub_FBBC(v95, v96, v98, (void (*)(void, void))&v216[v94], v199);
    swift_bridgeObjectRelease(v97);
    uint64_t v100 = v87;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v99, 1LL, v91) == 1)
    {
      sub_73D8(v99, (uint64_t *)&unk_5A980);
      uint64_t v101 = 1LL;
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32))(v90, v99, v91);
      uint64_t v101 = 0LL;
    }
  }

  else
  {
    uint64_t v101 = 1LL;
    uint64_t v100 = v87;
  }

  uint64_t v109 = v211;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56))(v90, v101, 1LL, v91);
  (*(void (**)(char *, uint64_t))(v207 + 8))(v206, v208);
LABEL_25:
  sub_18DBC(v90, (uint64_t)v45, (uint64_t *)&unk_5A980);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v45, 1LL, v91) == 1)
  {
    sub_73D8((uint64_t)v45, (uint64_t *)&unk_5A980);
    uint64_t v134 = v203(v109, v100, v57);
    v135 = (os_log_s *)Logger.logObject.getter(v134);
    os_log_type_t v136 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v135, v136))
    {
      uint64_t v137 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v138 = swift_slowAlloc(32LL, -1LL);
      uint64_t v219 = v138;
      *(_DWORD *)uint64_t v137 = 136315138;
      uint64_t v139 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
      uint64_t v140 = dispatch thunk of CustomStringConvertible.description.getter(v57, v139);
      unint64_t v142 = v141;
      uint64_t v220 = sub_24BA0(v140, v141, &v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v221, v137 + 4, v137 + 12);
      swift_bridgeObjectRelease(v142);
      v204(v109, v57);
      _os_log_impl(&dword_0, v135, v136, "AppNameDisambiguationFlow: could not resolve action from %s", v137, 0xCu);
      swift_arrayDestroy(v138, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v138, -1LL, -1LL);
      swift_slowDealloc(v137, -1LL, -1LL);
    }

    else
    {
      v204(v109, v57);
    }

    type metadata accessor for ConversationSELFHelper(0LL);
    uint64_t v157 = static ConversationSELFHelper.shared.getter();
    dispatch thunk of ConversationSELFHelper.emitDisambiguationFailed(errorCode:)(0LL);
    swift_release(v157);
    uint64_t v158 = *((void *)v216 + 20);
    uint64_t v159 = *((void *)v216 + 21);
    sub_73B4((void *)v216 + 17, v158);
    type metadata accessor for SiriKitEvent(0LL);
    if (qword_59D58 != -1) {
      swift_once(&qword_59D58, sub_D2F0);
    }
    uint64_t v160 = qword_5D358;
    uint64_t v161 = unk_5D360;
    swift_bridgeObjectRetain(unk_5D360);
    LOBYTE(v219) = 0;
    uint64_t v162 = SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)(4LL, v160, v161, 66LL, nullsub_1, 0LL);
    dispatch thunk of SiriKitEventSending.send(_:)(v162, v158, v159);
    swift_release(v162);
    sub_73D8(v90, (uint64_t *)&unk_5A980);
    return 0LL;
  }

  else
  {
    v143 = v201;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v201, v45, v91);
    uint64_t v144 = sub_72E4((uint64_t *)&unk_5A070);
    uint64_t v145 = (uint64_t)v202;
    v146 = &v202[*(int *)(v144 + 48)];
    v147 = &v202[*(int *)(v144 + 64)];
    v148 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
    v148(v202, v143, v91);
    v149 = v216;
    v148(v146, &v216[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_firstAction], v91);
    v148(v147, &v149[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_secondAction], v91);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v144 - 8) + 56LL))(v145, 0LL, 3LL, v144);
    uint64_t v150 = v200;
    sub_18E00(v145, v200);
    uint64_t v151 = (uint64_t)&v149[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_state];
    swift_beginAccess(&v149[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_state], &v219, 33LL, 0LL);
    sub_18E44(v150, v151);
    uint64_t v152 = swift_endAccess(&v219);
    v153 = (os_log_s *)Logger.logObject.getter(v152);
    os_log_type_t v154 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v153, v154))
    {
      v155 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v155 = 0;
      _os_log_impl(&dword_0, v153, v154, "AppShorcutCollisionFlow: input accepted", v155, 2u);
      swift_slowDealloc(v155, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v92 + 8))(v143, v91);
    sub_73D8(v90, (uint64_t *)&unk_5A980);
    return 1LL;
  }

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 7;
  uint64_t v8 = v6 - 7;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_E43C(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  v2[9] = *v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A960);
  v2[10] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_72E4((uint64_t *)&unk_5C190);
  v2[11] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v2[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[13] = v6;
  v2[14] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for PluginAction(0LL);
  v2[15] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[16] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v2[17] = v9;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[18] = swift_task_alloc(v10);
  v2[19] = swift_task_alloc(v10);
  v2[20] = swift_task_alloc(v10);
  v2[21] = swift_task_alloc(v10);
  v2[22] = swift_task_alloc(v10);
  v2[23] = swift_task_alloc(v10);
  v2[24] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for AppNameDisambiguationFlow.State(0LL);
  v2[25] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_E584, 0LL, 0LL);
}

void sub_E584()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "AppNameDisambiguationFlow: execute called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v7 = *(void *)(v0 + 64);

  uint64_t v8 = v7 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_state;
  swift_beginAccess(v8, v0 + 16, 0LL, 0LL);
  sub_7458(v8, v6, type metadata accessor for AppNameDisambiguationFlow.State);
  uint64_t v9 = sub_72E4((uint64_t *)&unk_5A070);
  unint64_t v10 = (char *)&loc_E6C8
      + 4
      * byte_47BA0[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v6, 3LL, v9)];
  __asm { BR              X10 }

uint64_t sub_EDC8()
{
  return swift_task_switch(sub_EE1C, 0LL, 0LL);
}

uint64_t sub_EE1C()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_EED4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 224LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 232LL));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_EF30, 0LL, 0LL);
}

uint64_t sub_EF30()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_EFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_F00C, 0LL, 0LL);
}

uint64_t sub_F00C()
{
  if (qword_59D60 != -1) {
    swift_once(&qword_59D60, sub_D31C);
  }
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_5BEC0 + dword_5BEC0);
  uint64_t v1 = (void *)swift_task_alloc(unk_5BEC4);
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_F098;
  return v3(v0[2], v0[3], v0[4]);
}

uint64_t sub_F098()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_F0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A960);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_18DBC(a1, (uint64_t)v9, (uint64_t *)&unk_5A960);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10);
  if ((_DWORD)v12 == 1)
  {
    sub_73D8((uint64_t)v9, (uint64_t *)&unk_5A960);
    uint64_t v13 = 4096LL;
    uint64_t v14 = *(void *)(a3 + 16);
    if (!v14)
    {
LABEL_6:
      uint64_t v21 = 0LL;
      return swift_task_create(v13, v21, (char *)&type metadata for () + 8, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v22 = TaskPriority.rawValue.getter(v12);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    uint64_t v13 = v22 | 0x1000LL;
    uint64_t v14 = *(void *)(a3 + 16);
    if (!v14) {
      goto LABEL_6;
    }
  }

  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v14);
  swift_unknownObjectRetain(v14, v17);
  uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v15);
  uint64_t v20 = v19;
  swift_unknownObjectRelease(v14);
  if (!(v20 | v18)) {
    goto LABEL_6;
  }
  v24[0] = 0LL;
  v24[1] = 0LL;
  uint64_t v21 = v24;
  v24[2] = v18;
  v24[3] = v20;
  return swift_task_create(v13, v21, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_F260(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A820);
  v2[15] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  v2[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[17] = v5;
  v2[18] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CAMDisambiguationDialogType(0LL);
  v2[19] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[20] = v7;
  v2[21] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = (*(void *)(*(void *)(sub_72E4((uint64_t *)&unk_5C190) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[22] = swift_task_alloc(v8);
  v2[23] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v2[24] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[25] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[26] = swift_task_alloc(v11);
  v2[27] = swift_task_alloc(v11);
  return swift_task_switch(sub_F378, 0LL, 0LL);
}

uint64_t sub_F378()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  *(void *)(v0 + 224) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "AppNameDisambiguationFlow: rendering disambiguation", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_5A61C);
  *(void *)(v0 + 23sub_6CEC(v0 + 2) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_F484;
  return sub_11300(v0 + 56);
}

uint64_t sub_F484()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 240LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_F9E0;
  }
  else {
    uint64_t v3 = sub_F4E8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_F4E8()
{
  uint64_t v2 = (uint64_t *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = sub_72CC((__int128 *)(v0 + 56), v0 + 16);
  PluginAction.loggingId.getter(v5);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v6(v1, 1LL, v3) != 1)
  {
    uint64_t v2 = (uint64_t *)(v0 + 176);
    uint64_t v7 = *(void *)(v0 + 176);
    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v9 = *(void (**)(void))(*(void *)(v0 + 200) + 32LL);
    uint64_t v10 = ((uint64_t (*)(void, void, uint64_t))v9)(*(void *)(v0 + 216), *(void *)(v0 + 184), v8);
    PluginAction.loggingId.getter(v10);
    int v11 = v6(v7, 1LL, v8);
    uint64_t v12 = *(void *)(v0 + 216);
    if (v11 != 1)
    {
      uint64_t v17 = *(void *)(v0 + 200);
      uint64_t v33 = *(void *)(v0 + 216);
      uint64_t v34 = *(void *)(v0 + 208);
      uint64_t v18 = *(void *)(v0 + 192);
      uint64_t v19 = *(void *)(v0 + 160);
      uint64_t v36 = *(void *)(v0 + 168);
      uint64_t v37 = *(void *)(v0 + 152);
      v9();
      type metadata accessor for ConversationSELFHelper(0LL);
      uint64_t v35 = static ConversationSELFHelper.shared.getter();
      uint64_t v20 = sub_72E4(&qword_5A958);
      uint64_t v21 = *(void *)(v17 + 72);
      uint64_t v22 = *(unsigned __int8 *)(v17 + 80);
      uint64_t v23 = (v22 + 32) & ~v22;
      uint64_t v24 = swift_allocObject(v20, v23 + 2 * v21, v22 | 7);
      *(_OWORD *)(v24 + 16) = xmmword_47A40;
      uint64_t v25 = v24 + v23;
      uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
      v26(v25, v12, v18);
      v26(v25 + v21, v34, v18);
      (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))( v36,  enum case for CAMDisambiguationDialogType.appName(_:),  v37);
      dispatch thunk of ConversationSELFHelper.emitDisambiguationDialogGenerated(actionIds:dialogType:)(v24, v36);
      swift_bridgeObjectRelease(v24);
      swift_release(v35);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v36, v37);
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v27(v34, v18);
      v27(v33, v18);
      goto LABEL_8;
    }

    (*(void (**)(void, void))(*(void *)(v0 + 200) + 8LL))(*(void *)(v0 + 216), *(void *)(v0 + 192));
  }

  uint64_t v13 = sub_73D8(*v2, (uint64_t *)&unk_5C190);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl( &dword_0,  v14,  v15,  "AppNameDisambiguationFlow: could not extract loggingIds for actions. SELF message was not emitted as a result.",  v16,  2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

LABEL_8:
  uint64_t v28 = *(void **)(v0 + 112);
  uint64_t v29 = v28[15];
  uint64_t v30 = v28[16];
  sub_73B4(v28 + 12, v29);
  uint64_t v31 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 248) = v31;
  *uint64_t v31 = v0;
  v31[1] = sub_F7B0;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v29, v30);
}

uint64_t sub_F7B0()
{
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v2 = sub_19800;
  }

  else
  {
    uint64_t v2 = sub_F81C;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_F81C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void **)(v0 + 112);
  uint64_t v5 = v4[20];
  uint64_t v21 = v4[21];
  sub_73B4(v4 + 17, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.disambiguation(_:), v3);
  if (qword_59D58 != -1) {
    swift_once(&qword_59D58, sub_D2F0);
  }
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v9 = qword_5D358;
  uint64_t v8 = unk_5D360;
  uint64_t v10 = enum case for SiriKitReliabilityCodes.disambiguationShortcutVsOther(_:);
  uint64_t v11 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v7, v10, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v7, 0LL, 1LL, v11);
  swift_bridgeObjectRetain(v8);
  uint64_t v13 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v6, v9, v8, v7, nullsub_1, 0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v13, v5, v21);
  swift_release(v13);
  static ExecuteResponse.ongoing(requireInput:)(1LL);
  sub_6CEC((void *)(v0 + 16));
  uint64_t v14 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 176);
  uint64_t v15 = *(void *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 168);
  uint64_t v18 = *(void *)(v0 + 144);
  uint64_t v19 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_F9E0()
{
  uint64_t v1 = *(void *)(v0 + 240);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 96) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( &dword_0,  v3,  v4,  "AppNameDisambiguationFlow: Cannot create output for disambiguation, will redirect to fall back action. Error: %@",  v6,  0xCu);
    uint64_t v9 = sub_72E4(&qword_5A950);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 240);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v12 = *(void *)(v0 + 112);

  static ExecuteResponse.redirect(nextPluginAction:)(v12 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_fallBackAction);
  swift_errorRelease(v11);
  uint64_t v13 = *(void *)(v0 + 208);
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v14 = *(void *)(v0 + 184);
  uint64_t v16 = *(void *)(v0 + 168);
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v18 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_FBBC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void, void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v48 = a5;
  uint64_t v49 = a1;
  uint64_t v8 = type metadata accessor for PluginAction(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_59DD8 != -1) {
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v47 = sub_72B4(v13, (uint64_t)qword_5D478);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    unint64_t v50 = a2;
    if (v16)
    {
      uint64_t v17 = swift_slowAlloc(12LL, -1LL);
      uint64_t v46 = a3;
      uint64_t v18 = a4;
      uint64_t v19 = (uint8_t *)v17;
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v52 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      a2 = (uint64_t)(v19 + 4);
      uint64_t v51 = sub_24BA0(0xD000000000000027LL, 0x8000000000049040LL, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v19 + 4, v19 + 12);
      _os_log_impl(&dword_0, v14, v15, "AppNameDisambiguationFlow: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      uint64_t v21 = v19;
      a4 = v18;
      a3 = v46;
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    uint64_t v22 = sub_72E4(&qword_5A8F0);
    uint64_t v23 = *(void *)(v9 + 72);
    uint64_t v24 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v25 = (v24 + 32) & ~v24;
    uint64_t v26 = swift_allocObject(v22, v25 + 2 * v23, v24 | 7);
    *(_OWORD *)(v26 + 16) = xmmword_47A40;
    uint64_t v27 = v26 + v25;
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v28(v27, a3, v8);
    a3 = v27 + v23;
    v28(v27 + v23, (uint64_t)a4, v8);
    if (*(void *)(v26 + 16))
    {
      v28((uint64_t)v12, v27, v8);
      uint64_t v29 = sub_3533C();
      if (v30)
      {
        uint64_t v31 = v30;
        if (v29 == v49 && v30 == v50) {
          goto LABEL_15;
        }
        a2 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v49, v50, 0LL);
        swift_bridgeObjectRelease(v31);
        if ((a2 & 1) != 0) {
          goto LABEL_16;
        }
      }

      a4 = *(void (**)(void, void))(v9 + 8);
      a4(v12, v8);
      if (*(void *)(v26 + 16) >= 2uLL) {
        break;
      }
    }

    __break(1u);
LABEL_24:
    swift_once(&qword_59DD8, sub_34328);
  }

  v28((uint64_t)v12, a3, v8);
  uint64_t v33 = sub_3533C();
  if (v34)
  {
    uint64_t v31 = v34;
    if (v33 == v49 && v34 == v50)
    {
LABEL_15:
      swift_bridgeObjectRelease(v26);
      uint64_t v26 = v31;
LABEL_16:
      swift_bridgeObjectRelease(v26);
      uint64_t v35 = v48;
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v48, v12, v8);
      uint64_t v36 = 0LL;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v35, v36, 1LL, v8);
    }

    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v49, v50, 0LL);
    swift_bridgeObjectRelease(v31);
    if ((v37 & 1) != 0) {
      goto LABEL_16;
    }
  }

  a4(v12, v8);
  swift_setDeallocating(v26);
  swift_arrayDestroy(v27, *(void *)(v26 + 16), v8);
  swift_deallocClassInstance(v26, 32LL, 7LL);
  unint64_t v38 = v50;
  uint64_t v39 = swift_bridgeObjectRetain_n(v50, 2LL);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t v52 = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    swift_bridgeObjectRetain(v38);
    uint64_t v51 = sub_24BA0(v49, v38, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease_n(v38, 3LL);
    _os_log_impl(&dword_0, v40, v41, "AppNameDisambiguationFlow: No match found for appBundleId %s", v42, 0xCu);
    uint64_t v36 = 1LL;
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v38, 2LL);
    uint64_t v36 = 1LL;
  }

  uint64_t v35 = v48;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v35, v36, 1LL, v8);
}

uint64_t sub_1006C()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)type metadata accessor for PluginAction(0LL);
  uint64_t v3 = *(v2 - 1);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = type metadata accessor for UsoIdentifier(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  v175 = (char *)&v161 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  v176 = (char *)&v161 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  v177 = (char *)&v161 - v17;
  uint64_t v19 = __chkstk_darwin(v16, v18);
  v178 = (char *)&v161 - v20;
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v161 - v22;
  uint64_t v24 = sub_72E4(&qword_5A938);
  uint64_t v26 = __chkstk_darwin(v24, v25);
  uint64_t v28 = (char *)&v161 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26, v29);
  v174 = (char *)&v161 - v30;
  uint64_t v31 = sub_3E520();
  if (!v31) {
    goto LABEL_28;
  }
  unint64_t v32 = v31;
  uint64_t v172 = v28;
  uint64_t v33 = UsoTask.arguments.getter();
  if (!*(void *)(v33 + 16) || (unint64_t v34 = sub_2C9F4(0x636E657265666572LL, 0xE900000000000065LL), (v35 & 1) == 0))
  {
LABEL_25:
    uint64_t v48 = v32;
LABEL_26:
    swift_release(v48);
    uint64_t v49 = v33;
LABEL_27:
    swift_bridgeObjectRelease(v49);
    goto LABEL_28;
  }

  uint64_t v36 = *(void *)(*(void *)(v33 + 56) + 8 * v34);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v33);
  if (!*(void *)((char *)&dword_10 + (v36 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_129:
    swift_release(v32);
    uint64_t v49 = v36;
    goto LABEL_27;
  }

LABEL_6:
  uint64_t v169 = v1;
  if ((v36 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)((char *)&dword_10 + (v36 & 0xFFFFFFFFFFFFF8LL)))
    {
      uint64_t v1 = *(void *)(v36 + 32);
      swift_retain(v1);
      goto LABEL_9;
    }

    __break(1u);
LABEL_133:
    if (v36 < 0) {
      uint64_t v156 = v36;
    }
    else {
      uint64_t v156 = v36 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v36);
    uint64_t v157 = _CocoaArrayWrapper.endIndex.getter(v156);
    swift_bridgeObjectRelease(v36);
    if (v157) {
      goto LABEL_14;
    }
LABEL_137:
    uint64_t v58 = v36;
    goto LABEL_36;
  }

  while (1)
  {
    uint64_t v1 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v36);
LABEL_9:
    uint64_t v37 = swift_bridgeObjectRelease(v36);
    uint64_t v38 = dispatch thunk of UsoValue.getAsEntity()(v37);
    unint64_t v173 = v7;
    if (!v38) {
      goto LABEL_37;
    }
    uint64_t v39 = v38;
    uint64_t v33 = ((uint64_t (*)(void))UsoEntity.attributes.getter)();
    swift_release(v39);
    if (!*(void *)(v33 + 16)) {
      goto LABEL_35;
    }
    unint64_t v40 = sub_2C9F4(0xD000000000000010LL, 0x8000000000049020LL);
    if ((v41 & 1) == 0) {
      goto LABEL_35;
    }
    uint64_t v36 = *(void *)(*(void *)(v33 + 56) + 8 * v40);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRelease(v33);
LABEL_14:
    if ((v36 & 0xC000000000000001LL) != 0)
    {
      uint64_t v42 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v36);
    }

    else
    {
      if (!*(void *)((char *)&dword_10 + (v36 & 0xFFFFFFFFFFFFF8LL)))
      {
        __break(1u);
        goto LABEL_146;
      }

      uint64_t v42 = *(void *)(v36 + 32);
      swift_retain(v42);
    }

    uint64_t v43 = swift_bridgeObjectRelease(v36);
    uint64_t v44 = dispatch thunk of UsoValue.getAsEntity()(v43);
    uint64_t v38 = swift_release(v42);
    if (!v44) {
      goto LABEL_37;
    }
    uint64_t v33 = UsoEntity.attributes.getter(v38);
    swift_release(v44);
    if (!*(void *)(v33 + 16) || (unint64_t v45 = sub_2C9F4(1701667182LL, 0xE400000000000000LL), (v46 & 1) == 0))
    {
LABEL_35:
      uint64_t v58 = v33;
LABEL_36:
      uint64_t v38 = swift_bridgeObjectRelease(v58);
LABEL_37:
      uint64_t v59 = dispatch thunk of UsoValue.getAsEntity()(v38);
      if (v59)
      {
        uint64_t v60 = v59;
        uint64_t v33 = UsoEntity.attributes.getter(v59);
        swift_release(v60);
        if (*(void *)(v33 + 16))
        {
          unint64_t v61 = sub_2C9F4(1701667182LL, 0xE400000000000000LL);
          if ((v62 & 1) != 0)
          {
            uint64_t v47 = *(void *)(*(void *)(v33 + 56) + 8 * v61);
            swift_bridgeObjectRetain(v47);
            swift_bridgeObjectRelease(v33);
            if ((unint64_t)v47 >> 62)
            {
              if (v47 < 0) {
                uint64_t v158 = v47;
              }
              else {
                uint64_t v158 = v47 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain(v47);
              uint64_t v159 = _CocoaArrayWrapper.endIndex.getter(v158);
              swift_bridgeObjectRelease(v47);
              if (v159) {
                goto LABEL_42;
              }
            }

            else if (*(void *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFF8LL)))
            {
LABEL_42:
              if ((v47 & 0xC000000000000001LL) != 0) {
                goto LABEL_143;
              }
LABEL_146:
              __break(1u);
              goto LABEL_147;
            }

            swift_release(v32);
            swift_release(v1);
            uint64_t v49 = v47;
            goto LABEL_27;
          }
        }

        swift_release(v32);
        uint64_t v48 = v1;
        goto LABEL_26;
      }

      swift_release(v32);
      swift_release(v1);
LABEL_28:
      if (qword_59DD8 != -1) {
        swift_once(&qword_59DD8, sub_34328);
      }
      uint64_t v50 = type metadata accessor for Logger(0LL);
      uint64_t v51 = sub_72B4(v50, (uint64_t)qword_5D478);
      uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v53 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v55 = swift_slowAlloc(32LL, -1LL);
        v181[0] = v55;
        *(_DWORD *)uint64_t v54 = 136315138;
        uint64_t v179 = sub_24BA0(0xD000000000000016LL, 0x8000000000049000LL, v181);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v54 + 4, v54 + 12);
        _os_log_impl( &dword_0,  v52,  v53,  "%s: Cannot find node in USO tree that contains app name identifiers",  v54,  0xCu);
        swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1LL, -1LL);
        swift_slowDealloc(v54, -1LL, -1LL);
      }

      return 0LL;
    }

    uint64_t v47 = *(void *)(*(void *)(v33 + 56) + 8 * v45);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRelease(v33);
    if ((unint64_t)v47 >> 62)
    {
      if (v47 < 0) {
        uint64_t v160 = v47;
      }
      else {
        uint64_t v160 = v47 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v47);
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter(v160);
      swift_bridgeObjectRelease(v47);
      if (!v33)
      {
LABEL_153:
        uint64_t v58 = v47;
        goto LABEL_36;
      }
    }

    else if (!*(void *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFF8LL)))
    {
      goto LABEL_153;
    }

    if ((v47 & 0xC000000000000001LL) == 0)
    {
      if (!*(void *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFF8LL)))
      {
        __break(1u);
        goto LABEL_25;
      }

LABEL_44:
      uint64_t v36 = *(void *)(v47 + 32);
      swift_retain(v36);
      goto LABEL_45;
    }

                  sub_73D8((uint64_t)&v135, &qword_5AD48);
                  goto LABEL_45;
                }
              }

              char v135 = 0u;
              os_log_type_t v136 = 0u;
              goto LABEL_44;
            }

            uint64_t v79 = 0LL;
          }

          uint64_t v83 = 0LL;
          goto LABEL_34;
        }

LABEL_143:
    uint64_t v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v47);
LABEL_45:
    uint64_t v63 = swift_bridgeObjectRelease(v47);
    uint64_t v167 = v36;
    uint64_t v64 = dispatch thunk of UsoValue.getUsoIdentifiers()(v63);
    v181[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v65 = *(void **)(v64 + 16);
    uint64_t v165 = v6;
    uint64_t v166 = v2;
    uint64_t v164 = v3;
    unint64_t v168 = v32;
    uint64_t v171 = v1;
    if (v65)
    {
      uint64_t v2 = v65;
      unint64_t v32 = 0LL;
      unint64_t v7 = v173;
      char v170 = v65;
      while (1)
      {
        if (v32 >= *(void *)(v64 + 16))
        {
          __break(1u);
LABEL_125:
          if (v36 < 0) {
            uint64_t v154 = v36;
          }
          else {
            uint64_t v154 = v36 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v36);
          uint64_t v155 = _CocoaArrayWrapper.endIndex.getter(v154);
          swift_bridgeObjectRelease(v36);
          if (!v155) {
            goto LABEL_129;
          }
          goto LABEL_6;
        }

        uint64_t v6 = (char *)((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
        uint64_t v3 = *(void *)(v8 + 72);
        uint64_t v66 = (*(uint64_t (**)(char *, char *, unint64_t))(v8 + 16))(v23, &v6[v64 + v3 * v32], v7);
        uint64_t v36 = (uint64_t)v23;
        uint64_t v67 = UsoIdentifier.namespace.getter(v66);
        if (v68)
        {
          uint64_t v36 = v68;
          if (v67 == 0x64695F6D657469LL && v68 == 0xE700000000000000LL)
          {
            swift_bridgeObjectRelease(0xE700000000000000LL);
LABEL_55:
            uint64_t v70 = *(void (**)(char *, char *, unint64_t))(v8 + 32);
            v70(v178, v23, v173);
            uint64_t v36 = v181[0];
            if ((swift_isUniquelyReferenced_nonNull_native(v181[0]) & 1) == 0)
            {
              sub_2CE20(0, *(void *)(v36 + 16) + 1LL, 1);
              uint64_t v36 = v181[0];
            }

            unint64_t v72 = *(void *)(v36 + 16);
            unint64_t v71 = *(void *)(v36 + 24);
            if (v72 >= v71 >> 1)
            {
              sub_2CE20(v71 > 1, v72 + 1, 1);
              uint64_t v36 = v181[0];
            }

            *(void *)(v36 + 16) = v72 + 1;
            unint64_t v7 = v173;
            v70(&v6[v36 + v72 * v3], v178, v173);
            v181[0] = v36;
            uint64_t v2 = v170;
            uint64_t v1 = v171;
            goto LABEL_48;
          }

          char v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v67, v68, 0x64695F6D657469LL, 0xE700000000000000LL, 0LL);
          swift_bridgeObjectRelease(v36);
          if ((v69 & 1) != 0) {
            goto LABEL_55;
          }
        }

        unint64_t v7 = v173;
        (*(void (**)(char *, unint64_t))(v8 + 8))(v23, v173);
LABEL_48:
        if (v2 == (void *)++v32)
        {
          uint64_t v2 = (void *)v181[0];
          unint64_t v32 = v168;
          goto LABEL_64;
        }
      }
    }

    uint64_t v2 = _swiftEmptyArrayStorage;
    unint64_t v7 = v173;
LABEL_64:
    swift_bridgeObjectRelease(v64);
    if (v2[2])
    {
      uint64_t v73 = (uint64_t)v174;
      (*(void (**)(char *, unint64_t, unint64_t))(v8 + 16))( v174,  (unint64_t)v2 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)),  v7);
      BOOL v74 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v8 + 56);
      v74((char *)v73, 0LL, 1LL, v7);
    }

    else
    {
      BOOL v74 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v8 + 56);
      uint64_t v73 = (uint64_t)v174;
      v74(v174, 1LL, 1LL, v7);
    }

    uint64_t v23 = v172;
    swift_release(v2);
    int v163 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v8 + 48);
    if (v163(v73, 1LL, v7) != 1)
    {
      uint64_t v56 = ((uint64_t (*)(void))UsoIdentifier.value.getter)();
      swift_release(v167);
      swift_release(v1);
      swift_release(v32);
      (*(void (**)(uint64_t, unint64_t))(v8 + 8))(v73, v7);
      return v56;
    }

    uint64_t v162 = v74;
    uint64_t v75 = sub_73D8(v73, &qword_5A938);
    uint64_t v76 = dispatch thunk of UsoValue.getUsoIdentifiers()(v75);
    uint64_t v77 = _swiftEmptyArrayStorage;
    v182 = _swiftEmptyArrayStorage;
    v178 = *(char **)(v76 + 16);
    if (!v178) {
      goto LABEL_88;
    }
    unint64_t v7 = 0LL;
    uint64_t v36 = (uint64_t)v177;
    v174 = (char *)v76;
LABEL_74:
    if (v7 < *(void *)(v76 + 16)) {
      break;
    }
    __break(1u);
  }

  uint64_t v79 = v1;
  unint64_t v80 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v3 = *(void *)(v8 + 72);
  uint64_t v6 = *(char **)(v8 + 16);
  unint64_t v81 = v173;
  uint64_t v82 = ((uint64_t (*)(uint64_t, unint64_t, unint64_t))v6)(v36, v76 + v80 + v3 * v7, v173);
  uint64_t v83 = UsoIdentifier.namespace.getter(v82);
  if (!v84)
  {
    uint64_t v2 = v176;
    ((void (*)(char *, uint64_t, unint64_t))v6)(v176, v36, v81);
LABEL_71:
    uint64_t v78 = *(void (**)(char *, unint64_t))(v8 + 8);
    v78((char *)v2, v81);
LABEL_72:
    uint64_t v36 = (uint64_t)v177;
    v78(v177, v81);
    uint64_t v1 = v79;
    goto LABEL_73;
  }

  uint64_t v85 = v84;
  char v170 = (void *)v80;
  if (v83 == 0x656D614E707061LL && v84 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    uint64_t v2 = v176;
    unint64_t v81 = v173;
    uint64_t v86 = ((uint64_t (*)(char *, char *, unint64_t))v6)(v176, v177, v173);
  }

  else
  {
    char v87 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v84, 0x656D614E707061LL, 0xE700000000000000LL, 0LL);
    swift_bridgeObjectRelease(v85);
    uint64_t v2 = v176;
    unint64_t v81 = v173;
    uint64_t v86 = ((uint64_t (*)(char *, char *, unint64_t))v6)(v176, v177, v173);
    if ((v87 & 1) == 0) {
      goto LABEL_71;
    }
  }

  uint64_t v88 = UsoIdentifier.value.getter(v86);
  uint64_t v90 = v89;
  v181[0] = v88;
  v181[1] = v89;
  uint64_t v179 = 46LL;
  unint64_t v180 = 0xE100000000000000LL;
  unint64_t v91 = sub_18C20();
  char v92 = StringProtocol.contains<A>(_:)(&v179, &type metadata for String, &type metadata for String, v91, v91);
  swift_bridgeObjectRelease(v90);
  uint64_t v78 = *(void (**)(char *, unint64_t))(v8 + 8);
  v78((char *)v2, v81);
  if ((v92 & 1) == 0) {
    goto LABEL_72;
  }
  uint64_t v6 = *(char **)(v8 + 32);
  ((void (*)(char *, char *, unint64_t))v6)(v175, v177, v81);
  uint64_t v93 = v182;
  if ((swift_isUniquelyReferenced_nonNull_native(v182) & 1) == 0)
  {
    sub_2CE20(0, v93[2] + 1LL, 1);
    uint64_t v93 = v182;
  }

  uint64_t v1 = v79;
  unint64_t v95 = v93[2];
  unint64_t v94 = v93[3];
  if (v95 >= v94 >> 1)
  {
    sub_2CE20(v94 > 1, v95 + 1, 1);
    uint64_t v93 = v182;
  }

  v93[2] = v95 + 1;
  ((void (*)(char *, char *, unint64_t))v6)((char *)v170 + (void)v93 + v95 * v3, v175, v173);
  v182 = v93;
  unint64_t v32 = v168;
  uint64_t v36 = (uint64_t)v177;
LABEL_73:
  ++v7;
  uint64_t v23 = v172;
  uint64_t v76 = (uint64_t)v174;
  uint64_t v77 = v182;
  unint64_t v7 = v173;
LABEL_88:
  swift_bridgeObjectRelease(v76);
  uint64_t v96 = v162;
  if (v77[2])
  {
    (*(void (**)(char *, unint64_t, unint64_t))(v8 + 16))( v23,  (unint64_t)v77 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)),  v7);
    uint64_t v97 = 0LL;
  }

  else
  {
    uint64_t v97 = 1LL;
  }

  v96(v23, v97, 1LL, v7);
  swift_release(v77);
  uint64_t v98 = ((uint64_t (*)(char *, uint64_t, unint64_t))v163)(v23, 1LL, v7);
  if ((_DWORD)v98 == 1)
  {
    sub_73D8((uint64_t)v23, &qword_5A938);
    if (qword_59DD8 != -1) {
      goto LABEL_148;
    }
    while (1)
    {
      uint64_t v99 = type metadata accessor for Logger(0LL);
      uint64_t v100 = sub_72B4(v99, (uint64_t)qword_5D478);
      uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
      os_log_type_t v102 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v101, v102))
      {
        uint64_t v103 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v104 = swift_slowAlloc(32LL, -1LL);
        v181[0] = v104;
        *(_DWORD *)uint64_t v103 = 136315138;
        uint64_t v179 = sub_24BA0(0xD000000000000016LL, 0x8000000000049000LL, v181);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v103 + 4, v103 + 12);
        _os_log_impl(&dword_0, v101, v102, "%s: No value can be derived for appBundleId", v103, 0xCu);
        swift_arrayDestroy(v104, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v104, -1LL, -1LL);
        swift_slowDealloc(v103, -1LL, -1LL);
      }

      uint64_t v106 = (os_log_s *)Logger.logObject.getter(v105);
      os_log_type_t v107 = static os_log_type_t.debug.getter();
      BOOL v108 = os_log_type_enabled(v106, v107);
      v178 = (char *)v100;
      if (v108)
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v110 = swift_slowAlloc(32LL, -1LL);
        v181[0] = v110;
        *(_DWORD *)uint64_t v109 = 136315138;
        uint64_t v179 = sub_24BA0(0xD000000000000016LL, 0x8000000000049000LL, v181);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v109 + 4, v109 + 12);
        _os_log_impl(&dword_0, v106, v107, "%s: Attempting string match", v109, 0xCu);
        swift_arrayDestroy(v110, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v110, -1LL, -1LL);
        swift_slowDealloc(v109, -1LL, -1LL);
      }

      uint64_t v111 = v166;
      uint64_t v112 = v164;
      uint64_t v113 = sub_72E4(&qword_5A8F0);
      uint64_t v114 = *(void *)(v112 + 72);
      uint64_t v115 = *(unsigned __int8 *)(v112 + 80);
      uint64_t v116 = (v115 + 32) & ~v115;
      uint64_t v117 = swift_allocObject(v113, v116 + 2 * v114, v115 | 7);
      *(_OWORD *)(v117 + 16) = xmmword_47A40;
      uint64_t v118 = v117 + v116;
      uint64_t v119 = v169;
      uint64_t v120 = *(void (**)(uint64_t, uint64_t, void *))(v112 + 16);
      v120(v118, v169 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_firstAction, v111);
      uint64_t v121 = v118 + v114;
      v120(v121, v119 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_secondAction, v111);
      if (*(void *)(v117 + 16))
      {
        uint64_t v122 = (void *)(v119 + 176);
        uint64_t v123 = v165;
        v120((uint64_t)v165, v118, v111);
        unsigned int v124 = sub_73B4((void *)(v119 + 176), *(void *)(v119 + 200));
        uint64_t v125 = sub_16470(*v124);
        if (v126)
        {
          uint64_t v127 = v125;
          unint64_t v128 = v126;
          uint64_t v129 = v167;
          uint64_t v130 = dispatch thunk of UsoValue.getAsPrimitiveValueString()();
          if (v131)
          {
            uint64_t v132 = v131;
            if (v127 == v130 && v128 == v131)
            {
              uint64_t v133 = v166;
              goto LABEL_113;
            }

            char v135 = _stringCompareWithSmolCheck(_:_:expecting:)(v127, v128, v130, v131, 0LL);
            swift_bridgeObjectRelease(v132);
            if ((v135 & 1) != 0)
            {
              uint64_t v133 = v166;
              goto LABEL_114;
            }
          }

          uint64_t v134 = *(void (**)(char *, void *))(v164 + 8);
          v134(v165, v166);
          swift_bridgeObjectRelease(v128);
        }

        else
        {
          uint64_t v134 = *(void (**)(char *, void *))(v164 + 8);
          v134(v123, v111);
        }

        os_log_type_t v136 = v166;
        uint64_t v137 = v169;
        if (*(void *)(v117 + 16) >= 2uLL) {
          break;
        }
      }

LABEL_147:
      __break(1u);
LABEL_148:
      swift_once(&qword_59DD8, sub_34328);
    }

    uint64_t v138 = v165;
    v120((uint64_t)v165, v121, v166);
    uint64_t v139 = sub_73B4(v122, *(void *)(v137 + 200));
    uint64_t v140 = sub_16470(*v139);
    if (!v141)
    {
      v134(v138, v136);
      uint64_t v129 = v167;
      goto LABEL_123;
    }

    uint64_t v127 = v140;
    unint64_t v128 = v141;
    uint64_t v129 = v167;
    uint64_t v142 = dispatch thunk of UsoValue.getAsPrimitiveValueString()();
    if (!v143)
    {
      uint64_t v151 = v138;
      uint64_t v152 = v166;
      goto LABEL_122;
    }

    uint64_t v132 = v143;
    uint64_t v133 = v166;
    if (v127 == v142 && v128 == v143)
    {
LABEL_113:
      swift_bridgeObjectRelease(v117);
      uint64_t v117 = v132;
      goto LABEL_114;
    }

    char v153 = _stringCompareWithSmolCheck(_:_:expecting:)(v127, v128, v142, v143, 0LL);
    swift_bridgeObjectRelease(v132);
    if ((v153 & 1) == 0)
    {
      uint64_t v151 = v165;
      uint64_t v152 = v133;
LABEL_122:
      v134(v151, v152);
      swift_bridgeObjectRelease(v128);
LABEL_123:
      swift_release(v129);
      swift_release(v171);
      swift_release(v168);
      swift_bridgeObjectRelease(v117);
      return 0LL;
    }

LABEL_114:
    swift_bridgeObjectRelease(v117);
    uint64_t v144 = swift_bridgeObjectRetain(v128);
    uint64_t v145 = (os_log_s *)Logger.logObject.getter(v144);
    os_log_type_t v146 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v145, v146))
    {
      uint64_t v147 = swift_slowAlloc(22LL, -1LL);
      uint64_t v148 = swift_slowAlloc(64LL, -1LL);
      v181[0] = v148;
      *(_DWORD *)uint64_t v147 = 136315394;
      uint64_t v179 = sub_24BA0(0xD000000000000016LL, 0x8000000000049000LL, v181);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v147 + 4, v147 + 12);
      *(_WORD *)(v147 + 1sub_6CEC(v0 + 2) = 2080;
      swift_bridgeObjectRetain(v128);
      uint64_t v179 = sub_24BA0(v127, v128, v181);
      uint64_t v133 = v166;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v147 + 14, v147 + 22);
      swift_bridgeObjectRelease_n(v128, 3LL);
      _os_log_impl(&dword_0, v145, v146, "%s: Matched exact name %s", (uint8_t *)v147, 0x16u);
      swift_arrayDestroy(v148, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v148, -1LL, -1LL);
      swift_slowDealloc(v147, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v128, 2LL);
    }

    uint64_t v149 = v171;
    uint64_t v150 = v165;
    uint64_t v56 = sub_3533C();
    swift_release(v129);
    swift_release(v149);
    swift_release(v168);
    (*(void (**)(char *, void *))(v164 + 8))(v150, v133);
  }

  else
  {
    uint64_t v56 = UsoIdentifier.value.getter(v98);
    swift_release(v167);
    swift_release(v1);
    swift_release(v32);
    (*(void (**)(char *, unint64_t))(v8 + 8))(v23, v7);
  }

  return v56;
}

uint64_t sub_11300(uint64_t a1)
{
  v2[35] = a1;
  v2[36] = v1;
  v2[37] = *v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A5A0);
  v2[38] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for NLContextUpdate(0LL);
  v2[39] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[40] = v5;
  v2[41] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  v2[42] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[43] = v7;
  v2[44] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v2[45] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[46] = v9;
  v2[47] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TemplatingResult(0LL);
  v2[48] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[49] = v11;
  v2[50] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_11404, 0LL, 0LL);
}

uint64_t sub_11404()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "AppNameDisambiguationFlow: building output", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  __int128 v26 = *(_OWORD *)(v0 + 288);

  uint64_t v6 = sub_72E4(&qword_5A8F0);
  uint64_t v7 = type metadata accessor for PluginAction(0LL);
  *(void *)(v0 + 408) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  LODWORD(v10) = *(_DWORD *)(v8 + 80);
  *(_DWORD *)(v0 + 528) = v10;
  uint64_t v10 = v10;
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(v6, v11 + 2 * v9, v10 | 7LL);
  *(void *)(v0 + 416) = v12;
  *(_OWORD *)(v12 + 16) = xmmword_47A40;
  uint64_t v13 = v12 + v11;
  uint64_t v14 = v26;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v15(v13, v26 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_firstAction, v7);
  v15(v13 + v9, v26 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_secondAction, v7);
  specialized ContiguousArray.reserveCapacity(_:)(2LL);
  id v16 = sub_2DA80(0LL);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v17 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
  uint64_t v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v16);
  specialized ContiguousArray._endMutation()(v18);
  id v19 = sub_2DA80(1LL);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v20 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
  uint64_t v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v19);
  specialized ContiguousArray._endMutation()(v21);
  *(void *)(v0 + 424) = _swiftEmptyArrayStorage;
  uint64_t v22 = swift_allocObject(&unk_558B0, 32LL, 7LL);
  *(void *)(v0 + 43sub_6CEC(v0 + 2) = v22;
  *(_OWORD *)(v22 + 16) = v26;
  uint64_t v23 = unk_5C1DC;
  *(void *)&__int128 v26 = (char *)&dword_5C1D8 + dword_5C1D8;
  swift_retain(v14);
  uint64_t v24 = (void *)swift_task_alloc(v23);
  *(void *)(v0 + 440) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_116AC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v26)((uint64_t)&unk_5A900, v22, v12);
}

uint64_t sub_116AC(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 440LL);
  v3[56] = a1;
  v3[57] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = v3[54];
  if (v1)
  {
    swift_release(v3[53]);
    swift_release(v5);
    uint64_t v6 = sub_11FC0;
  }

  else
  {
    swift_release(v3[54]);
    uint64_t v6 = sub_1173C;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1173C()
{
  uint64_t v1 = v0[56];
  sub_73B4((void *)(v0[36] + 56LL), *(void *)(v0[36] + 80LL));
  uint64_t v2 = sub_72E4(&qword_5A908);
  uint64_t inited = swift_initStackObject(v2, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  v0[30] = 0x73656D614E707061LL;
  v0[31] = 0xE800000000000000LL;
  AnyHashable.init<A>(_:)(v0 + 30, &type metadata for String, &protocol witness table for String);
  uint64_t v4 = sub_121B0(v1);
  *(void *)(inited + 96) = sub_72E4(&qword_5A910);
  *(void *)(inited + 7sub_6CEC(v0 + 2) = v4;
  unint64_t v5 = sub_2C6F8(inited);
  v0[58] = v5;
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t v7 = swift_initStackObject(v6, v0 + 15);
  *(_OWORD *)(v7 + 16) = xmmword_47AE0;
  strcpy((char *)(v7 + 32), "responseMode");
  *(_BYTE *)(v7 + 45) = 0;
  *(_WORD *)(v7 + 46) = -5120;
  *(void *)(v7 + 7sub_6CEC(v0 + 2) = &type metadata for String;
  *(void *)(v7 + 48) = 0LL;
  *(void *)(v7 + 56) = 0xE000000000000000LL;
  unint64_t v8 = sub_2C5C4(v7);
  v0[59] = v8;
  uint64_t v9 = (void *)swift_task_alloc(dword_5B25C);
  v0[60] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_118CC;
  return sub_29084(0xD000000000000025LL, 0x8000000000048FD0LL, v5, v8);
}

uint64_t sub_118CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 480);
  uint64_t v4 = *v2;
  *(void *)(v4 + 488) = a1;
  *(void *)(v4 + 496) = v1;
  swift_task_dealloc(v3);
  uint64_t v5 = *(void *)(v4 + 464);
  uint64_t v6 = *(void *)(v4 + 472);
  if (v1)
  {
    uint64_t v7 = *(void *)(v4 + 448);
    uint64_t v9 = *(void *)(v4 + 416);
    uint64_t v8 = *(void *)(v4 + 424);
    uint64_t v10 = *(unsigned __int8 *)(v4 + 528);
    uint64_t v11 = *(void *)(v4 + 408);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    swift_setDeallocating(v9);
    swift_arrayDestroy(v9 + ((v10 + 32) & ~v10), *(void *)(v9 + 16), v11);
    swift_deallocClassInstance(v9, 32LL, 7LL);
    swift_bridgeObjectRelease(v7);
    swift_release(v8);
    uint64_t v12 = *(void *)(v4 + 376);
    uint64_t v13 = *(void *)(v4 + 352);
    uint64_t v14 = *(void *)(v4 + 328);
    uint64_t v15 = *(void *)(v4 + 304);
    swift_task_dealloc(*(void *)(v4 + 400));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }

  else
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    return swift_task_switch(sub_11A0C, 0LL, 0LL);
  }

uint64_t sub_11A0C()
{
  uint64_t v1 = (void *)v0[61];
  uint64_t v3 = v0[46];
  uint64_t v2 = v0[47];
  uint64_t v19 = v0[45];
  id v4 = [v1 print];
  uint64_t v5 = ((uint64_t (*)(void))static Array._unconditionallyBridgeFromObjectiveC(_:))();

  id v6 = [v1 speak];
  uint64_t v7 = ((uint64_t (*)(void))static Array._unconditionallyBridgeFromObjectiveC(_:))();

  id v8 = [v1 spokenOnly];
  uint64_t v9 = sub_18BE0(0LL, (unint64_t *)&qword_5A918, &OBJC_CLASS___NSNumber_ptr);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  uint64_t v11 = sub_12C10(v5, v7, v10);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v5);
  uint64_t v12 = swift_task_alloc(32LL);
  *(void *)(v12 + 16) = 0xD000000000000025LL;
  *(void *)(v12 + 24) = 0x8000000000048FD0LL;
  uint64_t v13 = sub_180B8((uint64_t)v11, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))sub_18C18, v12);
  swift_bridgeObjectRelease(v11);
  swift_task_dealloc(v12);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for BehaviorAfterSpeaking.listen(_:), v19);
  TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)( 0xD000000000000025LL,  0x8000000000048FD0LL,  v13,  v2);
  uint64_t v14 = (void *)swift_task_alloc(dword_5A624);
  v0[63] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_11C1C;
  uint64_t v15 = v0[56];
  uint64_t v16 = v0[53];
  uint64_t v17 = v0[36];
  v14[5] = v0[50];
  v14[6] = v17;
  v14[3] = v15;
  v14[4] = v16;
  return swift_task_switch(sub_13F38, 0LL, 0LL);
}

uint64_t sub_11C1C(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 504LL);
  v3[64] = a1;
  v3[65] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = v3[56];
  uint64_t v6 = v3[53];
  if (v1)
  {
    swift_bridgeObjectRelease(v3[52]);
    swift_release(v6);
    swift_bridgeObjectRelease(v5);
    uint64_t v7 = sub_12070;
  }

  else
  {
    swift_release(v3[53]);
    swift_bridgeObjectRelease(v5);
    uint64_t v7 = sub_11CC4;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_11CC4()
{
  uint64_t v1 = *(void *)(v0 + 520);
  sub_1323C(*(void *)(v0 + 416), *(void *)(v0 + 352));
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 512);
    uint64_t v3 = *(void **)(v0 + 488);
    uint64_t v5 = *(void *)(v0 + 408);
    uint64_t v4 = *(void *)(v0 + 416);
    uint64_t v6 = v4 + ((*(unsigned __int8 *)(v0 + 528) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 528));
    (*(void (**)(void, void))(*(void *)(v0 + 392) + 8LL))(*(void *)(v0 + 400), *(void *)(v0 + 384));

    swift_bridgeObjectRelease(v2);
    swift_setDeallocating(v4);
    swift_arrayDestroy(v6, *(void *)(v4 + 16), v5);
    swift_deallocClassInstance(v4, 32LL, 7LL);
    uint64_t v7 = *(void *)(v0 + 376);
    uint64_t v8 = *(void *)(v0 + 352);
    uint64_t v9 = *(void *)(v0 + 328);
    uint64_t v10 = *(void *)(v0 + 304);
    swift_task_dealloc(*(void *)(v0 + 400));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
  }

  else
  {
    uint64_t v31 = *(void *)(v0 + 512);
    unint64_t v32 = *(void **)(v0 + 488);
    uint64_t v33 = *(void *)(v0 + 392);
    uint64_t v34 = *(void *)(v0 + 384);
    uint64_t v11 = *(void *)(v0 + 344);
    uint64_t v12 = *(void *)(v0 + 352);
    uint64_t v13 = *(void *)(v0 + 328);
    uint64_t v14 = *(void *)(v0 + 336);
    uint64_t v30 = *(void *)(v0 + 400);
    uint64_t v35 = *(void *)(v0 + 376);
    uint64_t v36 = *(void *)(v0 + 320);
    uint64_t v15 = *(void *)(v0 + 304);
    uint64_t v28 = *(void *)(v0 + 312);
    uint64_t v29 = v12;
    uint64_t v17 = *(void **)(v0 + 280);
    uint64_t v16 = *(void **)(v0 + 288);
    uint64_t v18 = swift_bridgeObjectRelease(*(void *)(v0 + 416));
    NLContextUpdate.init()(v18);
    uint64_t v19 = sub_72E4(&qword_5A920);
    uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v21 = (v20 + 32) & ~v20;
    uint64_t v22 = swift_allocObject(v19, v21 + *(void *)(v11 + 72), v20 | 7);
    *(_OWORD *)(v22 + 16) = xmmword_47AE0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v22 + v21, v12, v14);
    NLContextUpdate.nluSystemDialogActs.setter(v22);
    uint64_t v23 = v16 + 2;
    uint64_t v25 = v16[5];
    uint64_t v24 = v16[6];
    sub_73B4(v23, v25);
    LOBYTE(v2sub_6CEC(v0 + 2) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v25, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v15, v13, v28);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v15, 0LL, 1LL, v28);
    uint64_t v26 = type metadata accessor for AceOutput(0LL);
    *(_OWORD *)(v0 + 216) = 0u;
    *(void *)(v0 + 23sub_6CEC(v0 + 2) = 0LL;
    *(_OWORD *)(v0 + 200) = 0u;
    v17[3] = v26;
    v17[4] = &protocol witness table for AceOutput;
    sub_8390(v17);
    static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v30,  v23,  v22 & 1,  v31,  1LL,  1LL,  v15,  _swiftEmptyArrayStorage,  v0 + 200);

    swift_bridgeObjectRelease(v31);
    sub_73D8(v0 + 200, (uint64_t *)&unk_5C140);
    sub_73D8(v15, (uint64_t *)&unk_5A5A0);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v13, v28);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v29, v14);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v30, v34);
    swift_task_dealloc(v30);
    swift_task_dealloc(v35);
    swift_task_dealloc(v29);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_11FC0()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v3 = v2 + ((*(unsigned __int8 *)(v0 + 528) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 528));
  swift_setDeallocating(v2);
  swift_arrayDestroy(v3, *(void *)(v2 + 16), v1);
  swift_deallocClassInstance(v2, 32LL, 7LL);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 328);
  uint64_t v7 = *(void *)(v0 + 304);
  swift_task_dealloc(*(void *)(v0 + 400));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_12070()
{
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 384);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 328);
  uint64_t v7 = *(void *)(v0 + 304);
  swift_task_dealloc(*(void *)(v0 + 400));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_12104(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4;
      v4 += 3;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v7 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      uint64_t v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
      specialized ContiguousArray._endMutation()(v8);
      --v2;
    }

    while (v2);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_121B0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_2CF18(0, v1, 0);
    uint64_t v3 = (void *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v7 >= v6 >> 1) {
        sub_2CF18(v6 > 1, v7 + 1, 1);
      }
      v3 += 4;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_12284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Locale(0LL);
  v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Parse(0LL);
  v3[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[13] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[14] = swift_task_alloc(v8);
  v3[15] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for Input(0LL);
  v3[16] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[17] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[18] = swift_task_alloc(v11);
  v3[19] = swift_task_alloc(v11);
  uint64_t v12 = type metadata accessor for USOParse(0LL);
  v3[20] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[21] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[22] = swift_task_alloc(v14);
  v3[23] = swift_task_alloc(v14);
  uint64_t v15 = sub_72E4(&qword_5A930);
  v3[24] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for AppShortcutInvocation(0LL);
  v3[25] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v3[26] = v17;
  v3[27] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_123DC, 0LL, 0LL);
}

uint64_t sub_123DC()
{
  v0[2] = sub_3533C();
  v0[3] = v1;
  v0[28] = v1;
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_73B4((void *)(v0[8] + 176LL), *(void *)(v0[8] + 200LL));
  uint64_t v4 = sub_16470(*v3);
  v0[4] = v4;
  v0[5] = v5;
  v0[29] = v5;
  if (!v5)
  {
    swift_bridgeObjectRelease(v2);
LABEL_7:
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = sub_72B4(v33, (uint64_t)qword_5D478);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl( &dword_0,  v35,  v36,  "AppNameDisambiguationFlow: cannot map action to AppDisambiguationDisplayInfo",  v37,  2u);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    uint64_t v38 = v0[7];

    uint64_t v39 = type metadata accessor for AppNameDisambiguationError(0LL);
    uint64_t v40 = sub_7D7C( (unint64_t *)&unk_5A8C0,  type metadata accessor for AppNameDisambiguationError,  (uint64_t)&unk_47D08);
    swift_allocError(v39, v40, 0LL, 0LL);
    uint64_t v42 = v41;
    uint64_t v43 = type metadata accessor for PluginAction(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16LL))(v42, v38, v43);
    uint64_t v44 = swift_storeEnumTagMultiPayload(v42, v39, 0LL);
    swift_willThrow(v44);
    uint64_t v46 = v0[23];
    uint64_t v45 = v0[24];
    uint64_t v47 = v0[22];
    uint64_t v49 = v0[18];
    uint64_t v48 = v0[19];
    uint64_t v51 = v0[14];
    uint64_t v50 = v0[15];
    uint64_t v52 = v0[11];
    swift_task_dealloc(v0[27]);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    os_log_type_t v53 = (uint64_t (*)(void))v0[1];
    return v53();
  }

  uint64_t v6 = v0[19];
  uint64_t v7 = v0[16];
  uint64_t v8 = v0[17];
  uint64_t v9 = v0[15];
  uint64_t v10 = v0[12];
  uint64_t v11 = v0[13];
  uint64_t v12 = PluginAction.input.getter(v4);
  Input.parse.getter(v12);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v13(v6, v7);
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 88);
  int v15 = v14(v9, v10);
  if (v15 != enum case for Parse.uso(_:))
  {
    uint64_t v54 = v0[25];
    uint64_t v55 = v0[26];
    uint64_t v56 = v0[24];
    (*(void (**)(void, void))(v0[13] + 8LL))(v0[15], v0[12]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v56, 1LL, 1LL, v54);
LABEL_15:
    sub_73D8(v0[24], &qword_5A930);
    uint64_t v64 = v0[28];
    uint64_t v63 = v0[29];
    uint64_t v65 = v0[2];
    uint64_t v66 = v0[27];
    uint64_t v67 = v0[23];
    uint64_t v68 = v0[24];
    uint64_t v69 = v0[22];
    uint64_t v71 = v0[18];
    uint64_t v70 = v0[19];
    uint64_t v73 = v0[14];
    uint64_t v72 = v0[15];
    uint64_t v74 = v0[11];
    uint64_t v75 = (void *)v0[6];
    *uint64_t v75 = v0[4];
    v75[1] = v63;
    v75[2] = v65;
    v75[3] = v64;
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    os_log_type_t v53 = (uint64_t (*)(void))v0[1];
    return v53();
  }

  int v16 = v15;
  uint64_t v17 = v0[21];
  uint64_t v89 = v0[20];
  uint64_t v90 = v0[23];
  uint64_t v18 = v0[18];
  uint64_t v19 = v0[15];
  uint64_t v91 = v0[16];
  uint64_t v20 = v0[14];
  uint64_t v21 = v0[12];
  uint64_t v88 = *(void (**)(uint64_t, uint64_t))(v0[13] + 96LL);
  v88(v19, v21);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  uint64_t v23 = v22(v90, v19, v89);
  uint64_t v24 = PluginAction.input.getter(v23);
  Input.parse.getter(v24);
  v13(v18, v91);
  if (v14(v20, v21) == v16)
  {
    uint64_t v26 = v0[21];
    uint64_t v25 = v0[22];
    uint64_t v27 = v0[20];
    uint64_t v28 = v0[14];
    v88(v28, v0[12]);
    uint64_t v29 = v22(v25, v28, v27);
    unint64_t v30 = USOParse.groupIndex.getter(v29);
    LODWORD(v28) = v30;
    uint64_t v31 = HIDWORD(v30) & 1;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    uint64_t v32 = v28;
  }

  else
  {
    (*(void (**)(void, void))(v0[13] + 8LL))(v0[14], v0[12]);
    uint64_t v32 = 0LL;
    LOBYTE(v31) = 1;
  }

  uint64_t v57 = v0[25];
  uint64_t v58 = v0[26];
  uint64_t v59 = v0[23];
  uint64_t v60 = v0[24];
  uint64_t v61 = v0[20];
  uint64_t v62 = v0[21];
  USOParse.extractAppShortcutInvocation(groupIndex:)(v32 | ((unint64_t)v31 << 32));
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v59, v61);
  uint64_t v78 = v0[10];
  uint64_t v77 = v0[11];
  uint64_t v79 = (void *)v0[8];
  uint64_t v80 = v0[9];
  (*(void (**)(void, void, void))(v0[26] + 32LL))(v0[27], v0[24], v0[25]);
  uint64_t v81 = v79[5];
  uint64_t v82 = v79[6];
  sub_73B4(v79 + 2, v81);
  uint64_t v83 = dispatch thunk of DeviceState.siriLocale.getter(v81, v82);
  uint64_t v84 = Locale.identifier.getter(v83);
  uint64_t v86 = v85;
  v0[30] = v85;
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v80);
  if (qword_59D68 != -1) {
    swift_once(&qword_59D68, sub_D364);
  }
  char v87 = (void *)swift_task_alloc(async function pointer to AppShortcutInvocation.exists(siriLanguage:provider:)[1]);
  v0[31] = v87;
  *char v87 = v0;
  v87[1] = sub_12928;
  return AppShortcutInvocation.exists(siriLanguage:provider:)(v84, v86, qword_5D390);
}

uint64_t sub_12928(char a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 240LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 248LL);
  *(_BYTE *)(*(void *)v1 + 256LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1298C, 0LL, 0LL);
}

uint64_t sub_1298C()
{
  if (*(_BYTE *)(v0 + 256) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 208) + 8LL))(*(void *)(v0 + 216), *(void *)(v0 + 200));
    uint64_t v2 = *(void *)(v0 + 224);
    uint64_t v1 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = *(void *)(v0 + 216);
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 192);
    uint64_t v7 = *(void *)(v0 + 176);
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 120);
    uint64_t v12 = *(void *)(v0 + 88);
    uint64_t v13 = *(void **)(v0 + 48);
    void *v13 = *(void *)(v0 + 32);
    v13[1] = v1;
    v13[2] = v3;
    v13[3] = v2;
    swift_task_dealloc(v4);
    swift_task_dealloc(v6);
    swift_task_dealloc(v5);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    unint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 224);
    swift_bridgeObjectRelease(*(void *)(v0 + 232));
    swift_bridgeObjectRelease(v15);
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_72B4(v16, (uint64_t)qword_5D478);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "AppNameDisambiguationFlow: appShortcut invocation does not exist", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    uint64_t v22 = *(void *)(v0 + 208);
    uint64_t v21 = *(void *)(v0 + 216);
    uint64_t v23 = *(void *)(v0 + 200);

    uint64_t v24 = type metadata accessor for AppNameDisambiguationError(0LL);
    uint64_t v25 = sub_7D7C( (unint64_t *)&unk_5A8C0,  type metadata accessor for AppNameDisambiguationError,  (uint64_t)&unk_47D08);
    swift_allocError(v24, v25, 0LL, 0LL);
    uint64_t v27 = v26;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v26, v21, v23);
    uint64_t v28 = swift_storeEnumTagMultiPayload(v27, v24, 1LL);
    swift_willThrow(v28);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    uint64_t v30 = *(void *)(v0 + 184);
    uint64_t v29 = *(void *)(v0 + 192);
    uint64_t v31 = *(void *)(v0 + 176);
    uint64_t v33 = *(void *)(v0 + 144);
    uint64_t v32 = *(void *)(v0 + 152);
    uint64_t v35 = *(void *)(v0 + 112);
    uint64_t v34 = *(void *)(v0 + 120);
    uint64_t v36 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 216));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    unint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v14();
}

void *sub_12C10(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = a1;
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v39 = *(void *)(a2 + 16);
  unint64_t v50 = a3 >> 62;
  if (a3 >> 62) {
    goto LABEL_55;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    uint64_t v8 = (void *)v39;
    if (v7 < v39) {
      uint64_t v8 = (void *)v7;
    }
    uint64_t v9 = (uint64_t)((uint64_t)v8 >= (uint64_t)v6 ? v6 : v8);
    sub_2CEFC(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0) {
      break;
    }
    unint64_t v10 = v9;
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v49 = v5;
    uint64_t v42 = v4;
    if (v9)
    {
      uint64_t v11 = v4 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v51 = v4 & 0xFFFFFFFFFFFFFF8LL;
      if (v4 < 0) {
        uint64_t v11 = v4;
      }
      uint64_t v40 = v11;
      uint64_t v43 = v4 + 32;
      unint64_t v44 = v4 & 0xC000000000000001LL;
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(a2);
      uint64_t v12 = 0LL;
      unint64_t v13 = 0LL;
      uint64_t v46 = v9;
      while (v10 != v13)
      {
        uint64_t v14 = *(void *)(v5 + v12 + 32);
        uint64_t v9 = *(void *)(v5 + v12 + 40);
        uint64_t v15 = *(void *)(a2 + v12 + 32);
        uint64_t v3 = *(void *)(a2 + v12 + 40);
        if (v50)
        {
          uint64_t v4 = v42;
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v9);
          swift_bridgeObjectRetain(v3);
          uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v40);
          swift_bridgeObjectRelease(v42);
        }

        else
        {
          uint64_t v5 = *(void *)(v51 + 16);
          swift_bridgeObjectRetain(v9);
          swift_bridgeObjectRetain(v3);
        }

        if (v13 == v5) {
          goto LABEL_60;
        }
        uint64_t v53 = v3;
        if (v44)
        {
          uint64_t v3 = v15;
          uint64_t v16 = v14;
          id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v42);
        }

        else
        {
          if (v13 >= *(void *)(v51 + 16)) {
            goto LABEL_51;
          }
          uint64_t v3 = v15;
          uint64_t v16 = v14;
          id v17 = *(id *)(v43 + 8 * v13);
        }

        id v18 = v17;
        uint64_t v4 = _swiftEmptyArrayStorage[2];
        unint64_t v19 = _swiftEmptyArrayStorage[3];
        unint64_t v10 = v46;
        if (v4 >= v19 >> 1)
        {
          sub_2CEFC(v19 > 1, v4 + 1, 1);
          unint64_t v10 = v46;
        }

        ++v13;
        _swiftEmptyArrayStorage[2] = v4 + 1;
        uint64_t v20 = &_swiftEmptyArrayStorage[5 * v4];
        v20[4] = v16;
        v20[5] = v9;
        v20[6] = v3;
        v20[7] = v53;
        v20[8] = v18;
        v12 += 16LL;
        uint64_t v5 = v49;
        if (v10 == v13) {
          goto LABEL_27;
        }
      }

      __break(1u);
LABEL_51:
      __break(1u);
    }

    else
    {
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(a2);
LABEL_27:
      unint64_t v21 = *(void *)(v5 + 16);
      if (v10 == v21)
      {
LABEL_48:
        uint64_t v22 = v42;
LABEL_49:
        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v5);
        return _swiftEmptyArrayStorage;
      }

      uint64_t v22 = v42;
      if (v42 < 0) {
        uint64_t v23 = v42;
      }
      else {
        uint64_t v23 = v42 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v41 = v23;
      uint64_t v3 = v42 + 32;
      uint64_t v24 = 16 * v10 + 40;
      uint64_t v4 = v5 + v24;
      uint64_t v25 = (uint64_t *)(a2 + v24);
      while (v10 < v21)
      {
        if (v39 == v10) {
          goto LABEL_49;
        }
        uint64_t v26 = *v25;
        uint64_t v45 = *(v25 - 1);
        uint64_t v47 = *(void *)(v4 - 8);
        uint64_t v52 = *v25;
        uint64_t v54 = *(void *)v4;
        if (v50)
        {
          uint64_t v29 = *(void *)v4;
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v29);
          swift_bridgeObjectRetain(v26);
          uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v41);
          swift_bridgeObjectRelease(v42);
          uint64_t v3 = v42 + 32;
          if (v10 == v30)
          {
LABEL_47:
            swift_bridgeObjectRelease(v54);
            swift_bridgeObjectRelease(v52);
            goto LABEL_48;
          }
        }

        else
        {
          uint64_t v27 = *v25;
          uint64_t v28 = *(void *)((char *)&dword_10 + (v42 & 0xFFFFFFFFFFFFFF8LL));
          swift_bridgeObjectRetain(*(void *)v4);
          swift_bridgeObjectRetain(v27);
          if (v10 == v28) {
            goto LABEL_47;
          }
        }

        if ((v42 & 0xC000000000000001LL) != 0)
        {
          uint64_t v5 = v10;
          id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v42);
        }

        else
        {
          uint64_t v5 = v10;
          id v31 = *(id *)(v3 + 8 * v10);
        }

        id v32 = v31;
        uint64_t v33 = v54;
        if (v5 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_54;
        }
        unint64_t v35 = _swiftEmptyArrayStorage[2];
        unint64_t v34 = _swiftEmptyArrayStorage[3];
        if (v35 >= v34 >> 1)
        {
          sub_2CEFC(v34 > 1, v35 + 1, 1);
          uint64_t v33 = v54;
          uint64_t v3 = v42 + 32;
        }

        unint64_t v10 = v5 + 1;
        _swiftEmptyArrayStorage[2] = v35 + 1;
        uint64_t v36 = &_swiftEmptyArrayStorage[5 * v35];
        v36[4] = v47;
        v36[5] = v33;
        v36[6] = v45;
        v36[7] = v52;
        v36[8] = v32;
        uint64_t v5 = v49;
        unint64_t v21 = *(void *)(v49 + 16);
        v4 += 16LL;
        v25 += 2;
        uint64_t v22 = v42;
        if (v10 == v21) {
          goto LABEL_49;
        }
      }
    }

    __break(1u);
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    if (v4 < 0) {
      uint64_t v38 = v4;
    }
    else {
      uint64_t v38 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease(v4);
  }

  __break(1u);
LABEL_60:
  swift_bridgeObjectRelease(v9);
  uint64_t result = (void *)swift_bridgeObjectRelease(v3);
  __break(1u);
  return result;
}

uint64_t sub_130B0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v30 = a4;
  id v31 = a6;
  uint64_t v32 = a9;
  uint64_t v15 = sub_72E4(&qword_5A928);
  __chkstk_darwin(v15, v16);
  id v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for TemplatingText(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = a7;
  uint64_t v35 = a8;
  swift_bridgeObjectRetain(a8);
  v24._countAndFlagsBits = 35LL;
  v24._object = (void *)0xE100000000000000LL;
  String.append(_:)(v24);
  uint64_t v33 = a1;
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(object);
  uint64_t v27 = v34;
  uint64_t v28 = v35;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  TemplatingText.init(text:speakableTextOverride:)(a2, a3, v30, a5);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1LL, 1LL, v19);
  return TemplatingSection.init(id:content:caption:spokenOnly:)(v27, v28, v23, v18, [v31 BOOLValue]);
}

uint64_t sub_1323C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v48 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v5 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  unint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_bridgeObjectRetain(a1);
  uint64_t v15 = sub_18574(v14, (void (*)(void, char *))sub_18A30, v2);
  uint64_t result = swift_bridgeObjectRelease(a1);
  if (!v3)
  {
    uint64_t v45 = v8;
    uint64_t v46 = v5;
    uint64_t v47 = v10;
    __chkstk_darwin(result, v17);
    *(&v39 - sub_6CEC(v0 + 2) = (uint64_t)v15;
    uint64_t v18 = sub_7D7C( (unint64_t *)&unk_5A8A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemGaveOptions,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemGaveOptions);
    static Message.with(_:)(sub_18A48, &v39 - 4, v9, v18);
    uint64_t v19 = swift_bridgeObjectRelease(v15);
    __chkstk_darwin(v19, v20);
    *(&v39 - sub_6CEC(v0 + 2) = (uint64_t)v13;
    uint64_t v21 = sub_7D7C( (unint64_t *)&unk_5C170,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemDialogAct);
    uint64_t v22 = v48;
    uint64_t v23 = v49;
    uint64_t v42 = v21;
    static Message.with(_:)(sub_18A7C, &v39 - 4, v48, v21);
    uint64_t v43 = v13;
    uint64_t v44 = v9;
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_72B4(v24, (uint64_t)qword_5D478);
    Swift::String v25 = v45;
    uint64_t v26 = v46;
    uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 16);
    uint64_t v28 = v27(v45, v23, v22);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      os_log_t v41 = v29;
      LODWORD(v49) = v31;
      uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      uint64_t v52 = v33;
      *(_DWORD *)uint64_t v32 = 136315138;
      uint64_t v40 = v32 + 4;
      type metadata accessor for SiriNLUTypesPrintUtils(0LL);
      v51[2] = v22;
      v51[3] = v42;
      uint64_t v34 = (char *)sub_8390(&v50);
      v27(v34, (uint64_t)v25, v22);
      uint64_t v35 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)(&v50);
      unint64_t v37 = v36;
      sub_6CEC(&v50);
      uint64_t v50 = sub_24BA0(v35, v37, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v40, v32 + 12);
      swift_bridgeObjectRelease(v37);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v22);
      os_log_t v38 = v41;
      _os_log_impl(&dword_0, v41, (os_log_type_t)v49, "AppNameDisambiguationFlow: systemDialogAct: %s", v32, 0xCu);
      swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v22);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v43, v44);
  }

  return result;
}

uint64_t sub_135F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v93 = a3;
  uint64_t v5 = type metadata accessor for PluginAction(0LL);
  uint64_t v100 = *(void *)(v5 - 8);
  uint64_t v101 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v94 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v91 = *(void *)(v13 - 8);
  uint64_t v92 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_72E4(&qword_5A8B8);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for UsoIdentifier(0LL);
  uint64_t v96 = *(void *)(v21 - 8);
  uint64_t v97 = v21;
  __chkstk_darwin(v21, v22);
  uint64_t v98 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_3533C();
  uint64_t v99 = a1;
  if (v25)
  {
    uint64_t v26 = v24;
    uint64_t v27 = v25;
    uint64_t v28 = sub_73B4((void *)(a2 + 176), *(void *)(a2 + 200));
    uint64_t v29 = sub_16470(*v28);
    if (v30)
    {
      uint64_t v31 = v29;
      uint64_t v32 = v30;
      uint64_t v33 = v98;
      UsoIdentifier.init(value:appBundleId:namespace:)( v26,  v27,  0x746163696C707041LL,  0xEC000000736E6F69LL,  0x64695F6D657469LL,  0xE700000000000000LL);
      uint64_t v34 = type metadata accessor for UsoEntityBuilder_common_App(0LL);
      swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
      uint64_t v35 = UsoEntityBuilder_common_App.init()();
      dispatch thunk of UsoEntityBuilder_common_App.setName(value:)(v31, v32);
      uint64_t v36 = swift_bridgeObjectRelease(v32);
      uint64_t v37 = dispatch thunk of UsoEntityBuilder_common_App.name.getter(v36);
      if (v37)
      {
        uint64_t v38 = v37;
        dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)(v33);
        swift_release(v38);
      }

      uint64_t v39 = type metadata accessor for UsoTaskBuilder_open_common_App(0LL);
      swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
      uint64_t v40 = UsoTaskBuilder_open_common_App.init()();
      dispatch thunk of Uso_VerbTemplateBuilder_Reference.setReference(value:)(v35);
      uint64_t v41 = sub_72E4((uint64_t *)&unk_5A860);
      uint64_t v42 = swift_allocObject(v41, 40LL, 7LL);
      *(_OWORD *)(v42 + 16) = xmmword_47B90;
      *(void *)(v42 + 3sub_6CEC(v0 + 2) = v40;
      uint64_t v104 = v42;
      specialized Array._endMutation()(v42);
      uint64_t v43 = v104;
      uint64_t v44 = type metadata accessor for UsoBuilderOptions(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v20, 1LL, 1LL, v44);
      swift_retain(v40);
      uint64_t v45 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)(v43, v20);
      swift_bridgeObjectRelease(v43);
      sub_73D8((uint64_t)v20, &qword_5A8B8);
      uint64_t v46 = v95;
      uint64_t v47 = static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)(v45, 0LL);
      uint64_t v90 = v35;
      if (v46)
      {
        uint64_t v94 = v45;
        uint64_t v95 = v40;
        if (qword_59DD8 != -1) {
          swift_once(&qword_59DD8, sub_34328);
        }
        uint64_t v49 = type metadata accessor for Logger(0LL);
        sub_72B4(v49, (uint64_t)qword_5D478);
        swift_errorRetain(v46);
        uint64_t v50 = swift_errorRetain(v46);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v104 = v54;
          *(_DWORD *)uint64_t v53 = 136315138;
          uint64_t v102 = v46;
          swift_errorRetain(v46);
          uint64_t v55 = sub_72E4((uint64_t *)&unk_5A8D0);
          uint64_t v56 = String.init<A>(describing:)(&v102, v55);
          unint64_t v58 = v57;
          uint64_t v102 = sub_24BA0(v56, v57, &v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v53 + 4, v53 + 12);
          swift_bridgeObjectRelease(v58);
          swift_errorRelease(v46);
          swift_errorRelease(v46);
          _os_log_impl( &dword_0,  v51,  v52,  "AppNameDisambiguationFlow: error building system dialog act for disambiguation: %s",  v53,  0xCu);
          swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_slowDealloc(v53, -1LL, -1LL);
        }

        else
        {
          swift_errorRelease(v46);
          swift_errorRelease(v46);
        }

        uint64_t v83 = v101;
        uint64_t v84 = type metadata accessor for AppNameDisambiguationError(0LL);
        uint64_t v85 = sub_7D7C( (unint64_t *)&unk_5A8C0,  type metadata accessor for AppNameDisambiguationError,  (uint64_t)&unk_47D08);
        swift_allocError(v84, v85, 0LL, 0LL);
        uint64_t v87 = v86;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 16))(v86, v99, v83);
        uint64_t v88 = swift_storeEnumTagMultiPayload(v87, v84, 0LL);
        swift_willThrow(v88);
        swift_release(v90);
        swift_release(v94);
        swift_errorRelease(v46);
        swift_release(v95);
        return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v98, v97);
      }

      else
      {
        __chkstk_darwin(v47, v48);
        *(&v89 - sub_6CEC(v0 + 2) = (uint64_t)v16;
        uint64_t v78 = sub_7D7C( (unint64_t *)&unk_5C180,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserStatedTask,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserStatedTask);
        uint64_t v79 = v45;
        static Message.with(_:)(sub_18B00, &v89 - 4, v9, v78);
        uint64_t v80 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
        __chkstk_darwin(v80, &type metadata accessor for Siri_Nlu_External_UserDialogAct);
        *(&v89 - sub_6CEC(v0 + 2) = (uint64_t)v12;
        uint64_t v82 = sub_7D7C(&qword_5A8E0, v81, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserDialogAct);
        static Message.with(_:)(sub_18B28, &v89 - 4, v80, v82);
        swift_release(v40);
        swift_release(v90);
        swift_release(v79);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v98, v97);
        (*(void (**)(char *, uint64_t))(v94 + 8))(v12, v9);
        return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v16, v92);
      }
    }

    swift_bridgeObjectRelease(v27);
    a1 = v99;
  }

  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v59 = type metadata accessor for Logger(0LL);
  sub_72B4(v59, (uint64_t)qword_5D478);
  uint64_t v60 = v100;
  uint64_t v61 = v101;
  uint64_t v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 16);
  uint64_t v63 = v62(v8, a1, v101);
  uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
  os_log_type_t v65 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v67 = swift_slowAlloc(32LL, -1LL);
    uint64_t v104 = v67;
    *(_DWORD *)uint64_t v66 = 136315138;
    uint64_t v68 = sub_7D7C( (unint64_t *)&qword_59FC0,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction,  (uint64_t)&protocol conformance descriptor for PluginAction);
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v101, v68);
    unint64_t v71 = v70;
    uint64_t v102 = sub_24BA0(v69, v70, &v104);
    uint64_t v61 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v66 + 4, v66 + 12);
    swift_bridgeObjectRelease(v71);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v8, v61);
    _os_log_impl( &dword_0,  v64,  v65,  "AppNameDisambiguationFlow: failed to create SDA option for plugin action %s",  v66,  0xCu);
    swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1LL, -1LL);
    swift_slowDealloc(v66, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v8, v61);
  }

  uint64_t v72 = type metadata accessor for AppNameDisambiguationError(0LL);
  uint64_t v73 = sub_7D7C( (unint64_t *)&unk_5A8C0,  type metadata accessor for AppNameDisambiguationError,  (uint64_t)&unk_47D08);
  swift_allocError(v72, v73, 0LL, 0LL);
  uint64_t v75 = v74;
  v62(v74, v99, v61);
  uint64_t v76 = swift_storeEnumTagMultiPayload(v75, v72, 0LL);
  return swift_willThrow(v76);
}

uint64_t sub_13E8C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(char *))
{
  uint64_t v7 = (char *)v10 - v6;
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)v10 - v6, a2);
  return a4(v7);
}

uint64_t sub_13F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_13F38, 0LL, 0LL);
}

uint64_t sub_13F38()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "AppNameDisambiguationFlow: Creating disambiguation views for non watchOS", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[6];
  uint64_t v8 = v0[3];
  uint64_t v7 = v0[4];

  v0[7] = sub_18264();
  uint64_t v9 = swift_allocObject(&unk_55860, 32LL, 7LL);
  *(void *)(v9 + 16) = v6;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = swift_allocObject(&unk_55888, 32LL, 7LL);
  v0[8] = v10;
  *(void *)(v10 + 16) = &unk_5A848;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = unk_5C1BC;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_5C1B8 + dword_5C1B8);
  swift_bridgeObjectRetain(v8);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  uint64_t v12 = (void *)swift_task_alloc(v11);
  v0[9] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_140D4;
  return v14((uint64_t)&unk_5A858, v10, v0[3]);
}

uint64_t sub_140D4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v6 = *(void *)(*v2 + 64);
  uint64_t v5 = *(void *)(*v2 + 72);
  uint64_t v7 = *(void *)(*v2 + 24);
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc(v5);
  swift_release(v6);
  swift_bridgeObjectRelease(v7);
  if (v1)
  {
    uint64_t v8 = sub_14350;
  }

  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v8 = sub_14164;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_14164()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void **)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = sub_72E4((uint64_t *)&unk_5A860);
  uint64_t v5 = swift_allocObject(v4, 40LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_47B90;
  *(void *)(v5 + 3sub_6CEC(v0 + 2) = v2;
  uint64_t v20 = v5;
  specialized Array._endMutation()(v5);
  id v6 = v2;
  uint64_t v7 = sub_12104(v1);
  swift_bridgeObjectRelease(v1);
  sub_15FBC((uint64_t)v7);
  uint64_t v8 = *(void *)(v0 + 32);
  if (v3 < 0 || (v3 & 0x4000000000000000LL) != 0)
  {
    if (v8 < 0) {
      uint64_t v18 = *(void *)(v0 + 32);
    }
    else {
      uint64_t v18 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 32));
    uint64_t v19 = sub_72E4((uint64_t *)&unk_5C130);
    uint64_t v10 = _bridgeCocoaArray<A>(_:)(v18, v19);
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    uint64_t v9 = swift_bridgeObjectRetain(*(void *)(v0 + 32));
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v9);
    uint64_t v10 = *(void *)(v0 + 32);
  }

  sub_18BE0(0LL, &qword_5A870, &OBJC_CLASS___SACardSnippet_ptr);
  uint64_t v11 = (void *)static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)( v20,  1LL,  0x6C7070612E6D6F63LL,  0xEE00697269732E65LL,  v10);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v20);
  id v12 = v11;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v14 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v13 = *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
  if (v14 >= v13 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1LL);
  }
  uint64_t v15 = *(void **)(v0 + 56);
  uint64_t v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
  specialized Array._endMutation()(v16);

  return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_14350()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_14384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a5;
  v7[7] = a7;
  v7[4] = a3;
  void v7[5] = a4;
  uint64_t v7[2] = a1;
  v7[3] = a2;
  return swift_task_switch(sub_143A4, 0LL, 0LL);
}

unint64_t sub_143A4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  unint64_t result = *(void *)(v0 + 16);
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v1);
    goto LABEL_5;
  }

  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL)) > result)
  {
    id v3 = *(id *)(v1 + 8 * result + 32);
LABEL_5:
    id v4 = v3;
    *(void *)(v0 + 64) = v3;
    uint64_t v5 = swift_task_alloc(dword_5A894);
    *(void *)(v0 + 7sub_6CEC(v0 + 2) = v5;
    *(void *)uint64_t v5 = v0;
    *(void *)(v5 + 8) = sub_14458;
    uint64_t v6 = *(void *)(v0 + 40);
    __int128 v7 = *(_OWORD *)(v0 + 24);
    *(void *)(v5 + 40) = *(void *)(v0 + 48);
    *(void *)(v5 + 48) = v4;
    *(void *)(v5 + 3sub_6CEC(v0 + 2) = v6;
    *(_OWORD *)(v5 + 16) = v7;
    return swift_task_switch(sub_18864, 0LL, 0LL);
  }

  __break(1u);
  return result;
}

uint64_t sub_14458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(*v4 + 72);
  uint64_t v9 = *v4;
  *(void *)(v9 + 80) = v3;
  swift_task_dealloc(v8);
  if (v3) {
    return swift_task_switch(sub_144FC, 0LL, 0LL);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(a1, a2, a3);
}

uint64_t sub_144FC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_14530(uint64_t a1, uint64_t *a2, int *a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)a3 + *a3);
  uint64_t v9 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + 24) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_145BC;
  return v11(v4, v5, v6, v7, v8);
}

uint64_t sub_145BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 24);
  uint64_t v10 = *v4;
  swift_task_dealloc(v9);
  if (!v3)
  {
    uint64_t v11 = *(void **)(v8 + 16);
    void *v11 = a1;
    v11[1] = a2;
    v11[2] = a3;
  }

  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_1462C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[41] = a4;
  v5[42] = v4;
  v5[39] = a2;
  v5[40] = a3;
  v5[38] = a1;
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A820);
  v5[43] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ActivityType(0LL);
  v5[44] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[45] = v8;
  v5[46] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_72E4((uint64_t *)&unk_5A5A0);
  v5[47] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AceOutput(0LL);
  v5[48] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[49] = v11;
  v5[50] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v5[51] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[52] = v13;
  v5[53] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TemplatingResult(0LL);
  v5[54] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v5[55] = v15;
  v5[56] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_14754, 0LL, 0LL);
}

uint64_t sub_14754()
{
  unint64_t v1 = sub_2C6F8((uint64_t)_swiftEmptyArrayStorage);
  v0[57] = v1;
  uint64_t v2 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v2, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  strcpy((char *)(inited + 32), "responseMode");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 7sub_6CEC(v0 + 2) = &type metadata for String;
  *(void *)(inited + 48) = 0LL;
  *(void *)(inited + 56) = 0xE000000000000000LL;
  unint64_t v4 = sub_2C5C4(inited);
  v0[58] = v4;
  uint64_t v5 = (uint64_t **)swift_task_alloc(dword_5B25C);
  v0[59] = (uint64_t)v5;
  void *v5 = v0;
  v5[1] = (uint64_t *)sub_14840;
  return sub_29084(v0[39], v0[40], v1, v4);
}

uint64_t sub_14840(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 464LL);
  uint64_t v3 = *(void *)(*(void *)v2 + 472LL);
  uint64_t v5 = *(void *)(*(void *)v2 + 456LL);
  *(void *)(*(void *)v2 + 480LL) = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v6 = sub_14BB4;
  }

  else
  {
    uint64_t v6 = sub_148D0;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_148D0()
{
  uint64_t v1 = *(void **)(v0 + 480);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v21 = *(void *)(v0 + 408);
  uint64_t v22 = *(void *)(v0 + 448);
  uint64_t v27 = *(void *)(v0 + 392);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v25 = *(void **)(v0 + 336);
  uint64_t v26 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v23 = *(void *)(v0 + 400);
  uint64_t v24 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 312);
  swift_bridgeObjectRetain(v5);
  id v7 = [v1 speak];
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String);

  id v9 = [v1 print];
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String);

  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v2,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v21);
  uint64_t v11 = TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:)(v6, v5, v8, v10, v2);
  uint64_t v12 = static Device.current.getter(v11);
  static Device.current.getter(v12);
  uint64_t v13 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 208);
  sub_73B4((void *)(v0 + 176), v13);
  LOBYTE(vsub_6CEC(v0 + 2) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v13, v14);
  uint64_t v15 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v4, 1LL, 1LL, v15);
  *(void *)(v0 + 128) = 0LL;
  *(_OWORD *)(v0 + 11sub_6CEC(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v22,  v0 + 136,  v2 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v4,  v24,  v0 + 96);
  sub_73D8(v0 + 96, (uint64_t *)&unk_5C140);
  sub_73D8(v4, (uint64_t *)&unk_5A5A0);
  sub_6CEC((void *)(v0 + 136));
  sub_6CEC((void *)(v0 + 176));
  uint64_t v16 = v25[15];
  uint64_t v17 = v25[16];
  sub_73B4(v25 + 12, v16);
  *(void *)(v0 + 240) = v26;
  *(void *)(v0 + 248) = &protocol witness table for AceOutput;
  uint64_t v18 = sub_8390((void *)(v0 + 216));
  (*(void (**)(void *, uint64_t, uint64_t))(v27 + 16))(v18, v23, v26);
  uint64_t v19 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 488) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_14B48;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 216, v16, v17);
}

uint64_t sub_14B48()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 488);
  *(void *)(*v1 + 496) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_14F58;
  }

  else
  {
    sub_6CEC((void *)(v2 + 216));
    uint64_t v4 = sub_14DAC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_14BB4()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_72B4(v2, (uint64_t)qword_5D478);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = *(void *)(v0 + 320);
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 312);
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v10;
    *(_DWORD *)id v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(void *)(v0 + 280) = sub_24BA0(v8, v7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl(&dword_0, v4, v5, "Couldn't create a dialog for %s.", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 320), 2LL);
  }

  static ExecuteResponse.complete()(v11);
  uint64_t v12 = *(void *)(v0 + 424);
  uint64_t v13 = *(void *)(v0 + 400);
  uint64_t v15 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 376);
  uint64_t v16 = *(void *)(v0 + 344);
  swift_task_dealloc(*(void *)(v0 + 448));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_14DAC()
{
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v4 = *(void **)(v0 + 336);
  uint64_t v5 = v4[20];
  uint64_t v6 = v4[21];
  sub_73B4(v4 + 17, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ActivityType.canceled(_:), v3);
  if (qword_59D58 != -1) {
    swift_once(&qword_59D58, sub_D2F0);
  }
  uint64_t v7 = *(void *)(v0 + 368);
  uint64_t v8 = *(void *)(v0 + 344);
  uint64_t v9 = qword_5D358;
  uint64_t v10 = unk_5D360;
  uint64_t v11 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v8, 1LL, 1LL, v11);
  swift_bridgeObjectRetain(v10);
  uint64_t v12 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v7, v9, v10, v8, sub_151D0, 0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v12, v5, v6);
  uint64_t v13 = swift_release(v12);
  uint64_t v14 = *(void **)(v0 + 480);
  uint64_t v16 = *(void *)(v0 + 440);
  uint64_t v15 = *(void *)(v0 + 448);
  uint64_t v17 = *(void *)(v0 + 432);
  uint64_t v19 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 400);
  uint64_t v20 = *(void *)(v0 + 384);
  static ExecuteResponse.complete()(v13);

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  uint64_t v21 = *(void *)(v0 + 424);
  uint64_t v22 = *(void *)(v0 + 400);
  uint64_t v24 = *(void *)(v0 + 368);
  uint64_t v23 = *(void *)(v0 + 376);
  uint64_t v25 = *(void *)(v0 + 344);
  swift_task_dealloc(*(void *)(v0 + 448));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_14F58()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = *(void *)(v0 + 496);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_72B4(v2, (uint64_t)qword_5D478);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 496);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_getErrorValue(v7, v0 + 288, v0 + 256);
    uint64_t v10 = Error.localizedDescription.getter(*(void *)(v0 + 264), *(void *)(v0 + 272));
    unint64_t v12 = v11;
    *(void *)(v0 + 296) = sub_24BA0(v10, v11, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v4, v5, "Error publishing output %s.", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    uint64_t v13 = swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 496));
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  uint64_t v14 = *(void **)(v0 + 480);
  uint64_t v16 = *(void *)(v0 + 440);
  uint64_t v15 = *(void *)(v0 + 448);
  uint64_t v17 = *(void *)(v0 + 432);
  uint64_t v19 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 400);
  uint64_t v20 = *(void *)(v0 + 384);
  static ExecuteResponse.complete()(v13);

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  uint64_t v21 = *(void *)(v0 + 424);
  uint64_t v22 = *(void *)(v0 + 400);
  uint64_t v24 = *(void *)(v0 + 368);
  uint64_t v23 = *(void *)(v0 + 376);
  uint64_t v25 = *(void *)(v0 + 344);
  swift_task_dealloc(*(void *)(v0 + 448));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_151D0()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter( 0xD000000000000016LL,  0x8000000000048F50LL);
}

uint64_t sub_15208()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_firstAction];
  uint64_t v2 = type metadata accessor for PluginAction(0LL);
  uint64_t v3 = *(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL);
  v3(v1, v2);
  v3(&v0[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_secondAction], v2);
  v3(&v0[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_fallBackAction], v2);
  sub_749C( (uint64_t)&v0[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppNameDisambiguationFlow_state],  type metadata accessor for AppNameDisambiguationFlow.State);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_152CC()
{
  return type metadata accessor for AppNameDisambiguationFlow(0LL);
}

uint64_t type metadata accessor for AppNameDisambiguationFlow(uint64_t a1)
{
  return sub_6B98(a1, (uint64_t *)&unk_5A5F8, (uint64_t)&nominal type descriptor for AppNameDisambiguationFlow);
}

uint64_t sub_152E8(uint64_t a1)
{
  v5[0] = "(";
  v5[1] = "(";
  v5[2] = "(";
  v5[3] = "(";
  v5[4] = "(";
  uint64_t result = type metadata accessor for PluginAction(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v6 = *(void *)(result - 8) + 64LL;
    uint64_t v7 = v6;
    uint64_t v8 = v6;
    uint64_t result = type metadata accessor for AppNameDisambiguationFlow.State(319LL);
    if (v4 <= 0x3F)
    {
      uint64_t v9 = *(void *)(result - 8) + 64LL;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for AppNameDisambiguationFlow.State(uint64_t a1)
{
  return sub_6B98(a1, qword_5A800, (uint64_t)&nominal type descriptor for AppNameDisambiguationFlow.State);
}

uint64_t *sub_1539C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = sub_72E4((uint64_t *)&unk_5A070);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 3LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v10 = type metadata accessor for PluginAction(0LL);
      unint64_t v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16LL);
      v11(a1, a2, v10);
      v11((uint64_t *)((char *)a1 + *(int *)(v7 + 48)), (uint64_t *)((char *)a2 + *(int *)(v7 + 48)), v10);
      v11((uint64_t *)((char *)a1 + *(int *)(v7 + 64)), (uint64_t *)((char *)a2 + *(int *)(v7 + 64)), v10);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 3LL, v7);
    }
  }

  return a1;
}

uint64_t sub_154A0(uint64_t a1)
{
  uint64_t v2 = sub_72E4((uint64_t *)&unk_5A070);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(a1, 3LL, v2);
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for PluginAction(0LL);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
    v5(a1, v4);
    v5(a1 + *(int *)(v2 + 48), v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(v2 + 64), v4);
  }

  return result;
}

char *sub_15558(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A070);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 3LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v8 = type metadata accessor for PluginAction(0LL);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
    v9(a1, a2, v8);
    v9(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v8);
    v9(&a1[*(int *)(v6 + 64)], &a2[*(int *)(v6 + 64)], v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 3LL, v6);
  }

  return a1;
}

char *sub_15638(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A070);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 3LL, v6);
  int v10 = v8(a2, 3LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v14 = type metadata accessor for PluginAction(0LL);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24LL);
      v15(a1, a2, v14);
      v15(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v14);
      v15(&a1[*(int *)(v6 + 64)], &a2[*(int *)(v6 + 64)], v14);
      return a1;
    }

    sub_73D8((uint64_t)a1, (uint64_t *)&unk_5A070);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v11 = type metadata accessor for PluginAction(0LL);
  unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(a1, a2, v11);
  v12(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v11);
  v12(&a1[*(int *)(v6 + 64)], &a2[*(int *)(v6 + 64)], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 3LL, v6);
  return a1;
}

char *sub_1579C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A070);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 3LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v8 = type metadata accessor for PluginAction(0LL);
    int v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL);
    v9(a1, a2, v8);
    v9(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v8);
    v9(&a1[*(int *)(v6 + 64)], &a2[*(int *)(v6 + 64)], v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 3LL, v6);
  }

  return a1;
}

char *sub_1587C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A070);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 3LL, v6);
  int v10 = v8(a2, 3LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v14 = type metadata accessor for PluginAction(0LL);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40LL);
      v15(a1, a2, v14);
      v15(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v14);
      v15(&a1[*(int *)(v6 + 64)], &a2[*(int *)(v6 + 64)], v14);
      return a1;
    }

    sub_73D8((uint64_t)a1, (uint64_t *)&unk_5A070);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v11 = type metadata accessor for PluginAction(0LL);
  unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL);
  v12(a1, a2, v11);
  v12(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v11);
  v12(&a1[*(int *)(v6 + 64)], &a2[*(int *)(v6 + 64)], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 3LL, v6);
  return a1;
}

uint64_t sub_159E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_159EC);
}

uint64_t sub_159EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4((uint64_t *)&unk_5A070);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
  if (v5 >= 4) {
    return v5 - 3;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_15A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15A48);
}

uint64_t sub_15A48(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 3);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A070);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, v5, a3, v6);
}

uint64_t sub_15AA0(uint64_t a1)
{
  uint64_t v2 = sub_72E4((uint64_t *)&unk_5A070);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(a1, 3LL, v2);
}

uint64_t sub_15ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4((uint64_t *)&unk_5A070);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, 3LL, v4);
}

uint64_t sub_15B20(uint64_t a1)
{
  uint64_t result = type metadata accessor for PluginAction(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout3( v4,  *(void *)(result - 8) + 64LL,  *(void *)(result - 8) + 64LL,  *(void *)(result - 8) + 64LL);
    swift_initEnumMetadataSinglePayload(a1, 256LL, v4, 3LL);
    return 0LL;
  }

  return result;
}

uint64_t sub_15B90(uint64_t a1)
{
  return sub_D3A0(a1) & 1;
}

uint64_t sub_15BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for AppNameDisambiguationFlow(0LL);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_15C10(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_5A60C);
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_7240;
  return sub_E43C(a1);
}

uint64_t sub_15C64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AppNameDisambiguationFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

void sub_15C8C()
{
  uint64_t v1 = type metadata accessor for AppShortcutInvocation(0LL);
  uint64_t v3 = __chkstk_darwin(v1, v2);
  __chkstk_darwin(v3, v4);
  uint64_t v5 = type metadata accessor for PluginAction(0LL);
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for AppNameDisambiguationError(0LL);
  __chkstk_darwin(v7, v8);
  int v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_7458(v0, (uint64_t)v10, v11);
  unint64_t v12 = (char *)sub_15DAC + 4 * byte_47BA4[swift_getEnumCaseMultiPayload(v10, v7)];
  __asm { BR              X10 }

uint64_t sub_15DAC()
{
  *(void *)(v4 - 96) = 0LL;
  *(void *)(v4 - 88) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
  swift_bridgeObjectRelease(*(void *)(v4 - 88));
  *(void *)(v4 - 96) = 0xD000000000000022LL;
  *(void *)(v4 - 88) = 0x80000000000490F0LL;
  uint64_t v5 = sub_7D7C( (unint64_t *)&qword_59FC0,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction,  (uint64_t)&protocol conformance descriptor for PluginAction);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  uint64_t v8 = *(void *)(v4 - 96);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v8;
}

uint64_t sub_15FBC(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v4 < 0) {
    uint64_t v17 = *v1;
  }
  else {
    uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v1);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = sub_16174(v8 + 8LL * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }

  if (v11 < 1) {
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8LL));
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (!v13)
  {
    *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8LL)) = v14;
LABEL_19:
    uint64_t v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }

  __break(1u);
  return result;
}

uint64_t sub_16174(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_184E4();
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_72E4(&qword_5A880);
          BOOL v13 = sub_1637C(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL));
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_18BE0(0LL, &qword_5A878, &OBJC_CLASS___SFCardSection_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

void (*sub_1637C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_163FC(v6, a2, a3);
  return sub_163D0;
}

void sub_163D0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_163FC(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL)) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_16468;
  }

  __break(1u);
  return result;
}

void sub_16468(id *a1)
{
}

uint64_t sub_16470(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5A8E8);
  __chkstk_darwin(v2, v3);
  uint64_t v54 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash(0LL);
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Parse(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  BOOL v13 = (void **)((char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = type metadata accessor for Input(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain(a1);
  uint64_t v19 = sub_3533C();
  if (!v20)
  {
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = sub_72B4(v33, (uint64_t)qword_5D478);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl( &dword_0,  v35,  v36,  "PluginAction: cannot convert to app name if it cannot be mapped to a appBundleId",  v37,  2u);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    swift_release(a1);

    return 0LL;
  }

  unint64_t v21 = v20;
  uint64_t v53 = v8;
  uint64_t v57 = a1;
  uint64_t v22 = v19;
  uint64_t v23 = sub_2B044(v19, v20);
  if (!v24)
  {
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_72B4(v38, (uint64_t)qword_5D478);
    uint64_t v39 = swift_bridgeObjectRetain(v21);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      uint64_t v59 = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      swift_bridgeObjectRetain(v21);
      uint64_t v58 = sub_24BA0(v22, v21, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease_n(v21, 3LL);
      _os_log_impl(&dword_0, v40, v41, "PluginAction: cannot get app bundle record for appBundleId %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_release(v57);
    }

    else
    {
      swift_release(v57);

      swift_bridgeObjectRelease_n(v21, 2LL);
    }

    return 0LL;
  }

  uint64_t v25 = v24;
  uint64_t v26 = v23;
  uint64_t v27 = swift_bridgeObjectRelease(v21);
  uint64_t v28 = PluginAction.input.getter(v27);
  Input.parse.getter(v28);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if ((*(unsigned int (**)(void **, uint64_t))(v10 + 88))(v13, v9) != enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_16;
  }

  (*(void (**)(void **, uint64_t))(v10 + 96))(v13, v9);
  uint64_t v29 = *v13;
  uint64_t v30 = v54;
  sub_36948(v54);
  uint64_t v32 = v55;
  uint64_t v31 = v56;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v30, 1LL, v56) == 1)
  {

    sub_73D8(v30, &qword_5A8E8);
LABEL_16:
    swift_release(v57);
    return v26;
  }

  swift_bridgeObjectRelease(v25);
  uint64_t v45 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v53, v30, v31);
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v46 = type metadata accessor for Logger(0LL);
  uint64_t v47 = sub_72B4(v46, (uint64_t)qword_5D478);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl(&dword_0, v48, v49, "PluginAction: overriding to pommes sash instead of app name", v50, 2u);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  uint64_t v51 = Apple_Parsec_Siri_V2alpha_Sash.appName.getter();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v45, v31);
  swift_release(v57);
  return v51;
}

uint64_t sub_169C4()
{
  uint64_t v0 = sub_72E4(&qword_5A990);
  __chkstk_darwin(v0, v1);
  v211 = (char *)&v200 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_72E4(&qword_5A998);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v200 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TerminalElement.Value(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v200 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v13);
  uint64_t v209 = (char *)&v200 - v14;
  uint64_t v15 = sub_72E4(&qword_5A9A0);
  __chkstk_darwin(v15, v16);
  v226 = (char *)&v200 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v213 = type metadata accessor for TerminalIntentNode(0LL);
  uint64_t v212 = *(void *)(v213 - 8);
  __chkstk_darwin(v213, v18);
  uint64_t v210 = (char *)&v200 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_72E4(&qword_5A9A8);
  uint64_t v22 = __chkstk_darwin(v20, v21);
  v215 = (char *)&v200 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v217 = (char *)&v200 - v26;
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v219 = (char *)&v200 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  v221 = (char *)&v200 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  v225 = (char *)&v200 - v35;
  __chkstk_darwin(v34, v36);
  uint64_t v38 = (char *)&v200 - v37;
  uint64_t v39 = type metadata accessor for NonTerminalIntentNode(0LL);
  uint64_t v40 = *(void **)(v39 - 8);
  uint64_t v42 = __chkstk_darwin(v39, v41);
  uint64_t v214 = (char *)&v200 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = __chkstk_darwin(v42, v44);
  v216 = (char *)&v200 - v46;
  uint64_t v48 = __chkstk_darwin(v45, v47);
  v218 = (char *)&v200 - v49;
  uint64_t v51 = __chkstk_darwin(v48, v50);
  uint64_t v220 = (char *)&v200 - v52;
  uint64_t v54 = __chkstk_darwin(v51, v53);
  uint64_t v56 = (uint64_t)&v200 - v55;
  uint64_t v58 = __chkstk_darwin(v54, v57);
  uint64_t v60 = (char *)&v200 - v59;
  NLIntent.rootNode.getter(&v232, v58);
  uint64_t v61 = v40;
  uint64_t v62 = sub_72E4(&qword_5A9B0);
  char v63 = swift_dynamicCast(v38, &v232, v62, v39, 6LL);
  uint64_t v64 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v61[7];
  if ((v63 & 1) == 0)
  {
    v64(v38, 1LL, 1LL, v39);
    uint64_t v82 = &qword_5A9A8;
    goto LABEL_20;
  }

  v201 = v12;
  v202 = v6;
  uint64_t v203 = v8;
  uint64_t v204 = v7;
  v222 = v64;
  v64(v38, 0LL, 1LL, v39);
  uint64_t v223 = v39;
  v224 = v61;
  uint64_t v205 = (uint64_t (*)(char *, char *, uint64_t))v61[4];
  uint64_t v65 = v205(v60, v38, v39);
  uint64_t v66 = NonTerminalIntentNode.childNodes.getter(v65);
  uint64_t v67 = v66;
  v231 = _swiftEmptyArrayStorage;
  uint64_t v68 = *(void *)(v66 + 16);
  uint64_t v208 = v60;
  uint64_t v207 = v56;
  uint64_t v206 = v62;
  if (v68)
  {
    unint64_t v69 = 0LL;
    uint64_t v70 = v66 + 32;
    unint64_t v71 = 0xE600000000000000LL;
    while (1)
    {
      if (v69 >= *(void *)(v67 + 16))
      {
        __break(1u);
LABEL_130:
        uint64_t v167 = v231;
        uint64_t v60 = v208;
        uint64_t v56 = v207;
        uint64_t v38 = v226;
        uint64_t v62 = v206;
LABEL_132:
        swift_bridgeObjectRelease(v71);
        if (v167[2])
        {
          sub_83CC((uint64_t)(v167 + 4), (uint64_t)&v232);
        }

        else
        {
          uint64_t v234 = 0LL;
          __int128 v232 = 0u;
          __int128 v233 = 0u;
        }

        unint64_t v116 = v223;
        unint64_t v168 = v215;
        swift_release(v167);
        if (*((void *)&v233 + 1))
        {
          int v169 = swift_dynamicCast(v168, &v232, v62, v116, 6LL);
          v222(v168, v169 ^ 1u, 1LL, v116);
          int v170 = v200(v168, 1LL, v116);
          uint64_t v171 = v224;
          if (v170 != 1)
          {
            uint64_t v172 = v205(v214, v168, v116);
            uint64_t result = NonTerminalIntentNode.childNodes.getter(v172);
            unint64_t v97 = result;
            unint64_t v173 = _swiftEmptyArrayStorage;
            v231 = _swiftEmptyArrayStorage;
            uint64_t v174 = *(void *)(result + 16);
            if (!v174)
            {
              uint64_t v91 = v224;
              goto LABEL_159;
            }

            unint64_t v175 = 0LL;
            uint64_t v176 = result + 32;
            while (2)
            {
              if (v175 >= *(void *)(v97 + 16)) {
                goto LABEL_179;
              }
              sub_83CC(v176, (uint64_t)&v228);
              uint64_t v177 = v229;
              unint64_t v178 = v230;
              sub_73B4(&v228, v229);
              uint64_t v179 = dispatch thunk of IntentNode.ontologyNodeName.getter(v177, v178);
              uint64_t v181 = v180;
              if (v179 != 0x746163696C707061LL || v180 != 0xED000064496E6F69LL)
              {
                char v183 = _stringCompareWithSmolCheck(_:_:expecting:)( v179,  v180,  0x746163696C707061LL,  0xED000064496E6F69LL,  0LL);
                swift_bridgeObjectRelease(v181);
                if ((v183 & 1) != 0)
                {
LABEL_149:
                  sub_72CC(&v228, (uint64_t)v227);
                  v184 = v231;
                  if ((swift_isUniquelyReferenced_nonNull_native(v231) & 1) == 0)
                  {
                    sub_2CE4C(0, v184[2] + 1LL, 1);
                    v184 = v231;
                  }

                  unint64_t v186 = v184[2];
                  unint64_t v185 = v184[3];
                  if (v186 >= v185 >> 1)
                  {
                    sub_2CE4C(v185 > 1, v186 + 1, 1);
                    v184 = v231;
                  }

                  v184[2] = v186 + 1;
                  uint64_t result = sub_72CC(v227, (uint64_t)&v184[5 * v186 + 4]);
                }

                else
                {
                  uint64_t result = sub_6CEC(&v228);
                }

                ++v175;
                v176 += 40LL;
                uint64_t v91 = v224;
                if (v174 == v175) {
                  goto LABEL_157;
                }
                continue;
              }

              break;
            }

            swift_bridgeObjectRelease(v180);
            goto LABEL_149;
          }
        }

        else
        {
          sub_73D8((uint64_t)&v232, &qword_5A9B8);
          v222(v168, 1LL, 1LL, v116);
          uint64_t v171 = v224;
        }

        uint64_t v187 = (void (*)(char *, unint64_t))v171[1];
        v187(v216, v116);
        v187(v218, v116);
        v187(v220, v116);
        v187((char *)v56, v116);
        v187(v60, v116);
        uint64_t v82 = &qword_5A9A8;
        uint64_t v83 = (uint64_t)v168;
        goto LABEL_74;
      }

      sub_83CC(v70, (uint64_t)&v228);
      uint64_t v72 = v229;
      unint64_t v73 = v230;
      sub_73B4(&v228, v229);
      uint64_t v74 = dispatch thunk of IntentNode.ontologyNodeName.getter(v72, v73);
      uint64_t v76 = v75;
      if (v74 == 0x6E6F69746361LL && v75 == 0xE600000000000000LL) {
        break;
      }
      char v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v74, v75, 0x6E6F69746361LL, 0xE600000000000000LL, 0LL);
      swift_bridgeObjectRelease(v76);
      if ((v78 & 1) != 0) {
        goto LABEL_14;
      }
      sub_6CEC(&v228);
LABEL_5:
      ++v69;
      v70 += 40LL;
      if (v68 == v69)
      {
        uint64_t v84 = v231;
        uint64_t v60 = v208;
        uint64_t v56 = v207;
        uint64_t v62 = v206;
        goto LABEL_23;
      }
    }

    swift_bridgeObjectRelease(v75);
LABEL_14:
    sub_72CC(&v228, (uint64_t)v227);
    uint64_t v79 = v231;
    if ((swift_isUniquelyReferenced_nonNull_native(v231) & 1) == 0)
    {
      sub_2CE4C(0, v79[2] + 1LL, 1);
      uint64_t v79 = v231;
    }

    unint64_t v81 = v79[2];
    unint64_t v80 = v79[3];
    if (v81 >= v80 >> 1)
    {
      sub_2CE4C(v80 > 1, v81 + 1, 1);
      uint64_t v79 = v231;
    }

    v79[2] = v81 + 1;
    sub_72CC(v227, (uint64_t)&v79[5 * v81 + 4]);
    goto LABEL_5;
  }

  uint64_t v84 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v67);
  uint64_t v85 = v225;
  uint64_t v38 = v226;
  if (v84[2])
  {
    sub_83CC((uint64_t)(v84 + 4), (uint64_t)&v232);
  }

  else
  {
    uint64_t v234 = 0LL;
    __int128 v232 = 0u;
    __int128 v233 = 0u;
  }

  uint64_t v86 = v223;
  swift_release(v84);
  if (!*((void *)&v233 + 1))
  {
    sub_73D8((uint64_t)&v232, &qword_5A9B8);
    v222(v85, 1LL, 1LL, v86);
    uint64_t v88 = v224;
    goto LABEL_46;
  }

  int v87 = swift_dynamicCast(v85, &v232, v62, v86, 6LL);
  v222(v85, v87 ^ 1u, 1LL, v86);
  uint64_t v88 = v224;
  uint64_t v89 = (unsigned int (*)(char *, uint64_t, uint64_t))v224[6];
  if (v89(v85, 1LL, v86) == 1)
  {
LABEL_46:
    ((void (*)(char *, uint64_t))v88[1])(v60, v86);
LABEL_73:
    uint64_t v82 = &qword_5A9A8;
    uint64_t v83 = (uint64_t)v85;
    goto LABEL_74;
  }

  uint64_t v200 = (uint64_t (*)(char *, uint64_t, unint64_t))v89;
  uint64_t v90 = v205((char *)v56, v85, v86);
  uint64_t v91 = (void *)v56;
  uint64_t v92 = NonTerminalIntentNode.childNodes.getter(v90);
  unint64_t v93 = v92;
  v231 = _swiftEmptyArrayStorage;
  uint64_t v94 = *(void *)(v92 + 16);
  if (v94)
  {
    unint64_t v95 = 0LL;
    uint64_t v96 = v92 + 32;
    unint64_t v97 = 0xE700000000000000LL;
    while (1)
    {
      if (v95 >= *(void *)(v93 + 16))
      {
        __break(1u);
LABEL_157:
        unint64_t v173 = v231;
        unint64_t v116 = v223;
        uint64_t v60 = v208;
        uint64_t v56 = v207;
        uint64_t v38 = v226;
        uint64_t v62 = v206;
LABEL_159:
        swift_bridgeObjectRelease(v97);
        unint64_t v93 = (unint64_t)v211;
        if (v173[2])
        {
          sub_83CC((uint64_t)(v173 + 4), (uint64_t)&v232);
        }

        else
        {
          uint64_t v234 = 0LL;
          __int128 v232 = 0u;
          __int128 v233 = 0u;
        }

        uint64_t v188 = v213;
        uint64_t v189 = v212;
        swift_release(v173);
        if (*((void *)&v233 + 1))
        {
          int v190 = swift_dynamicCast(v38, &v232, v62, v188, 6LL);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v189 + 56))(v38, v190 ^ 1u, 1LL, v188);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48))(v38, 1LL, v188) != 1)
          {
            uint64_t v191 = (*(uint64_t (**)(char *, char *, uint64_t))(v189 + 32))(v210, v38, v188);
            uint64_t v111 = TerminalIntentNode.elements.getter(v191);
            uint64_t v192 = *(void *)(v111 + 16);
            uint64_t v114 = type metadata accessor for TerminalElement(0LL);
            uint64_t v117 = *(void *)(v114 - 8);
            if (!v192) {
              goto LABEL_169;
            }
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v117 + 16))( v93,  v111 + ((*(unsigned __int8 *)(v117 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80)),  v114);
            uint64_t v193 = 0LL;
LABEL_170:
            (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56))(v93, v193, 1LL, v114);
            swift_bridgeObjectRelease(v111);
            if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v117 + 48))(v93, 1LL, v114) == 1)
            {
              (*(void (**)(char *, uint64_t))(v212 + 8))(v210, v213);
              uint64_t v195 = (void (*)(char *, unint64_t))v224[1];
              v195(v214, v116);
              v195(v216, v116);
              v195(v218, v116);
              v195(v220, v116);
              v195((char *)v56, v116);
              v195(v60, v116);
              sub_73D8(v93, &qword_5A990);
              uint64_t v38 = v202;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v203 + 56))(v202, 1LL, 1LL, v204);
            }

            else
            {
              uint64_t v38 = v202;
              TerminalElement.value.getter();
              (*(void (**)(char *, uint64_t))(v212 + 8))(v210, v213);
              v196 = (void (*)(char *, unint64_t))v224[1];
              v196(v214, v116);
              v196(v216, v116);
              v196(v218, v116);
              v196(v220, v116);
              v196((char *)v56, v116);
              v196(v60, v116);
              (*(void (**)(unint64_t, uint64_t))(v117 + 8))(v93, v114);
              uint64_t v128 = v203;
              uint64_t v138 = v204;
            }

            uint64_t v82 = &qword_5A998;
LABEL_20:
            uint64_t v83 = (uint64_t)v38;
LABEL_74:
            sub_73D8(v83, v82);
            return 0LL;
          }
        }

        else
        {
          sub_73D8((uint64_t)&v232, &qword_5A9B8);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v189 + 56))(v38, 1LL, 1LL, v188);
        }

        uint64_t v194 = (void (*)(char *, unint64_t))v91[1];
        v194(v214, v116);
        v194(v216, v116);
        v194(v218, v116);
        v194(v220, v116);
        v194((char *)v56, v116);
        v194(v60, v116);
        uint64_t v82 = &qword_5A9A0;
        goto LABEL_20;
      }

      sub_83CC(v96, (uint64_t)&v228);
      uint64_t v98 = v229;
      unint64_t v99 = v230;
      sub_73B4(&v228, v229);
      uint64_t v100 = dispatch thunk of IntentNode.ontologyNodeName.getter(v98, v99);
      uint64_t v91 = v101;
      if (v100 == 0x646E616D6D6F63LL && v101 == (void *)0xE700000000000000LL) {
        break;
      }
      char v103 = _stringCompareWithSmolCheck(_:_:expecting:)(v100, v101, 0x646E616D6D6F63LL, 0xE700000000000000LL, 0LL);
      swift_bridgeObjectRelease(v91);
      if ((v103 & 1) != 0) {
        goto LABEL_40;
      }
      sub_6CEC(&v228);
LABEL_31:
      ++v95;
      v96 += 40LL;
      if (v94 == v95)
      {
        uint64_t v106 = v231;
        uint64_t v60 = v208;
        uint64_t v56 = v207;
        uint64_t v38 = v226;
        uint64_t v62 = v206;
        goto LABEL_49;
      }
    }

    swift_bridgeObjectRelease(v101);
LABEL_40:
    sub_72CC(&v228, (uint64_t)v227);
    uint64_t v91 = v231;
    if ((swift_isUniquelyReferenced_nonNull_native(v231) & 1) == 0)
    {
      sub_2CE4C(0, v91[2] + 1LL, 1);
      uint64_t v91 = v231;
    }

    unint64_t v105 = v91[2];
    unint64_t v104 = v91[3];
    if (v105 >= v104 >> 1)
    {
      sub_2CE4C(v104 > 1, v105 + 1, 1);
      uint64_t v91 = v231;
    }

    v91[2] = v105 + 1;
    sub_72CC(v227, (uint64_t)&v91[5 * v105 + 4]);
    goto LABEL_31;
  }

  uint64_t v106 = _swiftEmptyArrayStorage;
LABEL_49:
  swift_bridgeObjectRelease(v93);
  uint64_t v85 = v221;
  if (v106[2])
  {
    sub_83CC((uint64_t)(v106 + 4), (uint64_t)&v232);
  }

  else
  {
    uint64_t v234 = 0LL;
    __int128 v232 = 0u;
    __int128 v233 = 0u;
  }

  uint64_t v107 = v223;
  swift_release(v106);
  if (!*((void *)&v233 + 1))
  {
    sub_73D8((uint64_t)&v232, &qword_5A9B8);
    v222(v85, 1LL, 1LL, v107);
    uint64_t v110 = v224;
    goto LABEL_72;
  }

  int v108 = swift_dynamicCast(v85, &v232, v62, v107, 6LL);
  v222(v85, v108 ^ 1u, 1LL, v107);
  int v109 = v200(v85, 1LL, v107);
  uint64_t v110 = v224;
  if (v109 == 1)
  {
LABEL_72:
    unsigned int v124 = (void (*)(uint64_t, uint64_t))v110[1];
    v124(v56, v107);
    v124((uint64_t)v60, v107);
    goto LABEL_73;
  }

  uint64_t v111 = (uint64_t)v220;
  uint64_t v112 = v205(v220, v85, v107);
  uint64_t v113 = NonTerminalIntentNode.childNodes.getter(v112);
  uint64_t v114 = v113;
  v231 = _swiftEmptyArrayStorage;
  uint64_t v115 = *(void *)(v113 + 16);
  if (v115)
  {
    unint64_t v116 = 0LL;
    uint64_t v117 = 0x7463656A627573LL;
    uint64_t v118 = v113 + 32;
    uint64_t v60 = (char *)0xE700000000000000LL;
    while (1)
    {
      if (v116 >= *(void *)(v114 + 16))
      {
        __break(1u);
LABEL_169:
        uint64_t v193 = 1LL;
        goto LABEL_170;
      }

      sub_83CC(v118, (uint64_t)&v228);
      uint64_t v119 = v229;
      unint64_t v93 = v230;
      sub_73B4(&v228, v229);
      uint64_t v120 = dispatch thunk of IntentNode.ontologyNodeName.getter(v119, v93);
      uint64_t v111 = v121;
      if (v120 == 0x7463656A627573LL && v121 == 0xE700000000000000LL) {
        break;
      }
      uint64_t v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v120, v121, 0x7463656A627573LL, 0xE700000000000000LL, 0LL);
      swift_bridgeObjectRelease(v111);
      if ((v56 & 1) != 0) {
        goto LABEL_66;
      }
      sub_6CEC(&v228);
LABEL_57:
      ++v116;
      v118 += 40LL;
      if (v115 == v116)
      {
        unint64_t v126 = v231;
        uint64_t v60 = v208;
        uint64_t v127 = v207;
        uint64_t v38 = v226;
        uint64_t v62 = v206;
        goto LABEL_78;
      }
    }

    swift_bridgeObjectRelease(v121);
LABEL_66:
    sub_72CC(&v228, (uint64_t)v227);
    uint64_t v111 = (uint64_t)v231;
    if ((swift_isUniquelyReferenced_nonNull_native(v231) & 1) == 0)
    {
      sub_2CE4C(0, *(void *)(v111 + 16) + 1LL, 1);
      uint64_t v111 = (uint64_t)v231;
    }

    unint64_t v93 = *(void *)(v111 + 16);
    unint64_t v123 = *(void *)(v111 + 24);
    uint64_t v56 = v93 + 1;
    if (v93 >= v123 >> 1)
    {
      sub_2CE4C(v123 > 1, v93 + 1, 1);
      uint64_t v111 = (uint64_t)v231;
    }

    *(void *)(v111 + 16) = v56;
    sub_72CC(v227, v111 + 40 * v93 + 32);
    goto LABEL_57;
  }

  uint64_t v127 = v56;
  unint64_t v126 = _swiftEmptyArrayStorage;
LABEL_78:
  swift_bridgeObjectRelease(v114);
  uint64_t v128 = (uint64_t)v219;
  if (v126[2])
  {
    sub_83CC((uint64_t)(v126 + 4), (uint64_t)&v232);
  }

  else
  {
    uint64_t v234 = 0LL;
    __int128 v232 = 0u;
    __int128 v233 = 0u;
  }

  uint64_t v129 = v223;
  swift_release(v126);
  if (!*((void *)&v233 + 1))
  {
    sub_73D8((uint64_t)&v232, &qword_5A9B8);
    v222((char *)v128, 1LL, 1LL, v129);
    uint64_t v132 = v224;
    goto LABEL_101;
  }

  int v130 = swift_dynamicCast(v128, &v232, v62, v129, 6LL);
  v222((char *)v128, v130 ^ 1u, 1LL, v129);
  int v131 = v200((char *)v128, 1LL, v129);
  uint64_t v132 = v224;
  if (v131 == 1)
  {
LABEL_101:
    uint64_t v148 = (void (*)(char *, uint64_t))v132[1];
    v148(v220, v129);
LABEL_128:
    v148((char *)v127, v129);
    v148(v60, v129);
    uint64_t v82 = &qword_5A9A8;
    uint64_t v83 = v128;
    goto LABEL_74;
  }

  uint64_t v133 = v205(v218, (char *)v128, v129);
  uint64_t v134 = NonTerminalIntentNode.childNodes.getter(v133);
  uint64_t v135 = v134;
  v231 = _swiftEmptyArrayStorage;
  uint64_t v136 = *(void *)(v134 + 16);
  if (v136)
  {
    unint64_t v137 = 0LL;
    uint64_t v38 = (char *)(v134 + 32);
    uint64_t v138 = 40LL;
    while (1)
    {
      if (v137 >= *(void *)(v135 + 16))
      {
        __break(1u);
LABEL_175:
        uint64_t v197 = *(void (**)(char *, char *, uint64_t))(v128 + 32);
        uint64_t v198 = v209;
        v197(v209, v38, v138);
        uint64_t v199 = v201;
        v197(v201, v198, v138);
        if ((*(unsigned int (**)(char *, uint64_t))(v128 + 88))(v199, v138) == enum case for TerminalElement.Value.string(_:))
        {
          (*(void (**)(char *, uint64_t))(v128 + 96))(v199, v138);
          return *(void *)v199;
        }

        (*(void (**)(char *, uint64_t))(v128 + 8))(v199, v138);
        return 0LL;
      }

      sub_83CC((uint64_t)v38, (uint64_t)&v228);
      uint64_t v139 = v229;
      unint64_t v140 = v230;
      sub_73B4(&v228, v229);
      uint64_t v141 = dispatch thunk of IntentNode.ontologyNodeName.getter(v139, v140);
      uint64_t v143 = v142;
      if (v141 == 0x636E75614C707061LL && v142 == 0xE900000000000068LL) {
        break;
      }
      uint64_t v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v142, 0x636E75614C707061LL, 0xE900000000000068LL, 0LL);
      swift_bridgeObjectRelease(v143);
      if ((v128 & 1) != 0) {
        goto LABEL_95;
      }
      sub_6CEC(&v228);
LABEL_86:
      ++v137;
      v38 += 40;
      if (v136 == v137)
      {
        uint64_t v149 = v231;
        uint64_t v60 = v208;
        uint64_t v127 = v207;
        uint64_t v38 = v226;
        uint64_t v62 = v206;
        goto LABEL_104;
      }
    }

    swift_bridgeObjectRelease(v142);
LABEL_95:
    sub_72CC(&v228, (uint64_t)v227);
    uint64_t v145 = v231;
    if ((swift_isUniquelyReferenced_nonNull_native(v231) & 1) == 0)
    {
      sub_2CE4C(0, v145[2] + 1LL, 1);
      uint64_t v145 = v231;
    }

    unint64_t v147 = v145[2];
    unint64_t v146 = v145[3];
    uint64_t v128 = v147 + 1;
    if (v147 >= v146 >> 1)
    {
      sub_2CE4C(v146 > 1, v147 + 1, 1);
      uint64_t v145 = v231;
    }

    v145[2] = v128;
    sub_72CC(v227, (uint64_t)&v145[5 * v147 + 4]);
    goto LABEL_86;
  }

  uint64_t v149 = _swiftEmptyArrayStorage;
LABEL_104:
  swift_bridgeObjectRelease(v135);
  uint64_t v128 = (uint64_t)v217;
  if (v149[2])
  {
    sub_83CC((uint64_t)(v149 + 4), (uint64_t)&v232);
  }

  else
  {
    uint64_t v234 = 0LL;
    __int128 v232 = 0u;
    __int128 v233 = 0u;
  }

  uint64_t v129 = v223;
  swift_release(v149);
  if (!*((void *)&v233 + 1))
  {
    sub_73D8((uint64_t)&v232, &qword_5A9B8);
    v222((char *)v128, 1LL, 1LL, v129);
    uint64_t v152 = v224;
    goto LABEL_127;
  }

  int v150 = swift_dynamicCast(v128, &v232, v62, v129, 6LL);
  v222((char *)v128, v150 ^ 1u, 1LL, v129);
  int v151 = v200((char *)v128, 1LL, v129);
  uint64_t v152 = v224;
  if (v151 == 1)
  {
LABEL_127:
    uint64_t v148 = (void (*)(char *, uint64_t))v152[1];
    v148(v218, v129);
    v148(v220, v129);
    goto LABEL_128;
  }

  uint64_t v153 = v205(v216, (char *)v128, v129);
  uint64_t result = NonTerminalIntentNode.childNodes.getter(v153);
  unint64_t v71 = result;
  v231 = _swiftEmptyArrayStorage;
  uint64_t v154 = *(void *)(result + 16);
  if (!v154)
  {
    uint64_t v167 = _swiftEmptyArrayStorage;
    uint64_t v56 = v127;
    goto LABEL_132;
  }

  unint64_t v155 = 0LL;
  uint64_t v156 = result + 32;
  while (v155 < *(void *)(v71 + 16))
  {
    sub_83CC(v156, (uint64_t)&v228);
    uint64_t v157 = v229;
    unint64_t v158 = v230;
    sub_73B4(&v228, v229);
    uint64_t v159 = dispatch thunk of IntentNode.ontologyNodeName.getter(v157, v158);
    uint64_t v161 = v160;
    if (v159 == 7368801 && v160 == 0xE300000000000000LL)
    {
      swift_bridgeObjectRelease(v160);
LABEL_121:
      sub_72CC(&v228, (uint64_t)v227);
      uint64_t v164 = v231;
      if ((swift_isUniquelyReferenced_nonNull_native(v231) & 1) == 0)
      {
        sub_2CE4C(0, v164[2] + 1LL, 1);
        uint64_t v164 = v231;
      }

      unint64_t v166 = v164[2];
      unint64_t v165 = v164[3];
      if (v166 >= v165 >> 1)
      {
        sub_2CE4C(v165 > 1, v166 + 1, 1);
        uint64_t v164 = v231;
      }

      v164[2] = v166 + 1;
      uint64_t result = sub_72CC(v227, (uint64_t)&v164[5 * v166 + 4]);
      goto LABEL_112;
    }

    char v163 = _stringCompareWithSmolCheck(_:_:expecting:)(v159, v160, 7368801LL, 0xE300000000000000LL, 0LL);
    swift_bridgeObjectRelease(v161);
    if ((v163 & 1) != 0) {
      goto LABEL_121;
    }
    uint64_t result = sub_6CEC(&v228);
LABEL_112:
    ++v155;
    v156 += 40LL;
    if (v154 == v155) {
      goto LABEL_130;
    }
  }

  __break(1u);
LABEL_179:
  __break(1u);
  return result;
}

void *sub_180B8( uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id), uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v4 = type metadata accessor for TemplatingSection(0LL);
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = _swiftEmptyArrayStorage;
  sub_2CED0(0, 0LL, 0);
  uint64_t v8 = v28;
  uint64_t v9 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v23 = v9;
  uint64_t v22 = a1;
  if (v9)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = (void **)(a1 + 64);
    do
    {
      uint64_t v12 = (uint64_t)*(v11 - 1);
      uint64_t v13 = *v11;
      uint64_t v15 = (uint64_t)*(v11 - 3);
      uint64_t v14 = (uint64_t)*(v11 - 2);
      uint64_t v16 = (uint64_t)*(v11 - 4);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v12);
      id v17 = v13;
      v26(v10, v16, v15, v14, v12, v17);

      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v15);
      uint64_t v28 = v8;
      unint64_t v19 = v8[2];
      unint64_t v18 = v8[3];
      if (v19 >= v18 >> 1)
      {
        sub_2CED0(v18 > 1, v19 + 1, 1);
        uint64_t v8 = v28;
      }

      ++v10;
      v11 += 5;
      v8[2] = v19 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))
      + *(void *)(v24 + 72) * v19,
        v7,
        v25);
    }

    while (v23 != v10);
  }

  swift_bridgeObjectRelease(v22);
  return v8;
}

id sub_18264()
{
  id v0 = [objc_allocWithZone(SFTitleCardSection) init];
  uint64_t v1 = TemplatingResult.print.getter();
  uint64_t v2 = v1;
  if (*(void *)(v1 + 16))
  {
    uint64_t v3 = *(void *)(v1 + 40);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v2);
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
  }

  else
  {
    swift_bridgeObjectRelease(v1);
    NSString v4 = 0LL;
  }

  [v0 setTitle:v4];

  [v0 setSeparatorStyle:5];
  return v0;
}

uint64_t sub_18320()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1834C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(void *)(v5 + 24);
  uint64_t v13 = (void *)swift_task_alloc(dword_5A844);
  *(void *)(v6 + 16) = v13;
  void *v13 = v6;
  v13[1] = sub_183D8;
  uint64_t v13[6] = a5;
  v13[7] = v12;
  v13[4] = a3;
  v13[5] = a4;
  v13[2] = a1;
  v13[3] = a2;
  return swift_task_switch(sub_143A4, 0LL, 0LL);
}

uint64_t sub_183D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  swift_task_dealloc(*(void *)(*v3 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, a2, a3);
}

uint64_t sub_18440()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_18464(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc(dword_5A854);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_197FC;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_5A850 + dword_5A850))(a1, a2, v6);
}

unint64_t sub_184E4()
{
  unint64_t result = qword_5A888;
  if (!qword_5A888)
  {
    uint64_t v1 = sub_18530(&qword_5A880);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_5A888);
  }

  return result;
}

uint64_t sub_18530(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

void *sub_18574(uint64_t a1, void (*a2)(void, char *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v42 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = sub_72E4(&qword_5A8B0);
  uint64_t v11 = __chkstk_darwin(v46, v10);
  uint64_t v45 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v44 = (char *)&v33 - v15;
  __chkstk_darwin(v14, v16);
  uint64_t v43 = (char *)&v33 - v17;
  uint64_t v49 = _swiftEmptyArrayStorage;
  sub_2CEA4(0, 0LL, 0);
  unint64_t v18 = v49;
  uint64_t v19 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v40 = v19;
  uint64_t v34 = a1;
  if (v19)
  {
    uint64_t v20 = type metadata accessor for PluginAction(0LL);
    uint64_t v21 = 0LL;
    uint64_t v22 = *(void *)(v20 - 8);
    uint64_t v23 = a1 + ((*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    uint64_t v35 = *(void *)(v22 + 72);
    uint64_t v36 = v9;
    uint64_t v38 = v22;
    uint64_t v39 = v20;
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v24 = v44;
    while (1)
    {
      uint64_t v25 = v46;
      uint64_t v26 = &v45[*(int *)(v46 + 48)];
      uint64_t v27 = v39;
      v37(v26, v23, v39);
      uint64_t v28 = (char *)v24 + *(int *)(v25 + 48);
      *uint64_t v24 = v21;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v28, v26, v27);
      uint64_t v29 = v43;
      sub_18AA4((uint64_t)v24, (uint64_t)v43);
      v47(*(void *)v29, &v29[*(int *)(v25 + 48)]);
      sub_73D8((uint64_t)v29, &qword_5A8B0);
      if (v4) {
        break;
      }
      unint64_t v18 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
      {
        sub_2CEA4(0, v18[2] + 1LL, 1);
        unint64_t v18 = v49;
      }

      unint64_t v31 = v18[2];
      unint64_t v30 = v18[3];
      if (v31 >= v30 >> 1)
      {
        sub_2CEA4(v30 > 1, v31 + 1, 1);
        unint64_t v18 = v49;
      }

      ++v21;
      v18[2] = v31 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))( (unint64_t)v18 + ((*(unsigned __int8 *)(v41 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))
      + *(void *)(v41 + 72) * v31,
        v36,
        v42);
      uint64_t v49 = v18;
      v23 += v35;
      if (v40 == v21) {
        goto LABEL_9;
      }
    }

    swift_bridgeObjectRelease(v34);
    swift_release(v49);
  }

  else
  {
LABEL_9:
    swift_bridgeObjectRelease(v34);
  }

  return v18;
}

uint64_t sub_18844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_18864, 0LL, 0LL);
}

uint64_t sub_18864()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[2];
  id v4 = [objc_allocWithZone(SFRowCardSection) init];
  uint64_t v5 = (void *)static CasinoFactory.makeRichText(text:bold:maxLines:textColor:)(v3, v2, 1LL, 2LL, 0LL);
  [v4 setLeadingText:v5];

  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A860);
  uint64_t v7 = swift_allocObject(v6, 40LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_47B90;
  id v8 = v4;
  uint64_t v9 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)(v1);
  *(void *)(v7 + 3sub_6CEC((void *)v0 + 2) = v9;
  specialized Array._endMutation()(v9);
  sub_18BE0(0LL, &qword_5A898, &OBJC_CLASS___SFAbstractCommand_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  [v8 setCommands:isa];

  id v11 = [objc_allocWithZone(SFAppIconImage) init];
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 setBundleIdentifier:v12];

  [v8 setImage:v11];
  id v13 = v8;
  [v13 setSeparatorStyle:2];

  uint64_t v15 = (uint64_t (*)(id, void, void))v0[1];
  swift_bridgeObjectRetain(v2);
  return v15(v13, v0[2], v0[3]);
}

uint64_t sub_18A30@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_135F0(a1, v2, a2);
}

uint64_t sub_18A48()
{
  uint64_t v1 = swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return Siri_Nlu_External_SystemGaveOptions.choices.setter(v1);
}

uint64_t sub_18A7C(uint64_t a1)
{
  return sub_13E8C( a1,  *(void *)(v1 + 16),  (void (*)(void))&type metadata accessor for Siri_Nlu_External_SystemGaveOptions,  (uint64_t (*)(char *))&Siri_Nlu_External_SystemDialogAct.gaveOptions.setter);
}

uint64_t sub_18AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5A8B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AppNameDisambiguationError(uint64_t a1)
{
  return sub_6B98(a1, qword_5AA30, (uint64_t)&nominal type descriptor for AppNameDisambiguationError);
}

uint64_t sub_18B00(uint64_t a1)
{
  return sub_13E8C( a1,  *(void *)(v1 + 16),  (void (*)(void))&type metadata accessor for Siri_Nlu_External_UsoGraph,  (uint64_t (*)(char *))&Siri_Nlu_External_UserStatedTask.task.setter);
}

uint64_t sub_18B28(uint64_t a1)
{
  return sub_13E8C( a1,  *(void *)(v1 + 16),  (void (*)(void))&type metadata accessor for Siri_Nlu_External_UserStatedTask,  (uint64_t (*)(char *))&Siri_Nlu_External_UserDialogAct.userStatedTask.setter);
}

uint64_t sub_18B50()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_18B74(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc(dword_5A8FC);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_7240;
  return sub_12284(a1, a2, v6);
}

uint64_t sub_18BE0(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_18C18@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  return sub_130B0(a1, a2, a3, a4, a5, a6, *(void *)(v7 + 16), *(void *)(v7 + 24), a7);
}

unint64_t sub_18C20()
{
  unint64_t result = qword_5A940;
  if (!qword_5A940)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_5A940);
  }

  return result;
}

uint64_t sub_18C64()
{
  uint64_t v1 = type metadata accessor for PluginAction(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = (v5 + v3 + v7) & ~v3;
  unint64_t v9 = ((v5 + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  v10(v0 + v7, v1);
  v10(v0 + v8, v1);
  return swift_deallocObject(v0, v9, v6);
}

uint64_t sub_18D18()
{
  uint64_t v2 = *(void *)(type metadata accessor for PluginAction(0LL) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64) + v3;
  uint64_t v6 = (v4 + v5) & ~v3;
  uint64_t v7 = v0 + v4;
  uint64_t v8 = v0 + v6;
  uint64_t v9 = v0 + ((v6 + v5) & ~v3);
  uint64_t v10 = (void *)swift_task_alloc(dword_5A974);
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_197FC;
  v10[3] = v8;
  v10[4] = v9;
  void v10[2] = v7;
  return swift_task_switch(sub_F00C, 0LL, 0LL);
}

uint64_t sub_18DBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_72E4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_18E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppNameDisambiguationFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_18E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppNameDisambiguationFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo( void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo( uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_6CEC((void *)v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3sub_6CEC((void *)v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3sub_6CEC((void *)v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo()
{
  return &type metadata for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo;
}

uint64_t sub_19070(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = (char *)&loc_190C0 + 4 * byte_47BA8[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t sub_1918C(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      uint64_t v4 = type metadata accessor for PluginAction(0LL);
      goto LABEL_5;
    case 1:
      uint64_t v4 = type metadata accessor for AppShortcutInvocation(0LL);
LABEL_5:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
    case 2:
    case 3:
      uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + 8));
      break;
    default:
      return result;
  }

  return result;
}

void sub_19210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3 = (char *)sub_19254 + 4 * byte_47BB0[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

uint64_t sub_19254()
{
  uint64_t v3 = type metadata accessor for PluginAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(v0, v2, v3);
  swift_storeEnumTagMultiPayload(v0, v1, 0LL);
  return v0;
}

uint64_t sub_19300(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    sub_749C(result, type metadata accessor for AppNameDisambiguationError);
    uint64_t v5 = (char *)&loc_1935C + 4 * byte_47BB4[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

void *sub_19418(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for AppShortcutInvocation(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for PluginAction(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_194DC(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_749C((uint64_t)a1, type metadata accessor for AppNameDisambiguationError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for AppShortcutInvocation(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = type metadata accessor for PluginAction(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_195B8(uint64_t a1)
{
  uint64_t result = type metadata accessor for PluginAction(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for AppShortcutInvocation(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      v5[2] = &unk_47CC0;
      v5[3] = &unk_47CC0;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v5);
      return 0LL;
    }
  }

  return result;
}

uint64_t destroy for AppNameDisambiguationFlow.Card(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *_s17CAMRootFlowPlugin25AppNameDisambiguationFlowC4CardVwCP_0(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  a1[2] = v5;
  id v6 = v3;
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AppNameDisambiguationFlow.Card(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 initializeWithTake for AppNameDisambiguationFlow.Card(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AppNameDisambiguationFlow.Card(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppNameDisambiguationFlow.Card(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppNameDisambiguationFlow.Card(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppNameDisambiguationFlow.Card()
{
  return &type metadata for AppNameDisambiguationFlow.Card;
}

void *sub_19804(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_2CF18(0, v1, 0);
    unint64_t v3 = (void *)(a1 + 48);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v7 >= v6 >> 1) {
        sub_2CF18(v6 > 1, v7 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      v3 += 3;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

void sub_198D8()
{
  qword_5D3B8 = 0x54746E6572727543LL;
  unk_5D3C0 = 0xEB000000006B7361LL;
}

BOOL sub_19904(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v160 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v159 = (char *)&v141 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for AppShortcutEnablementFlow.State(0LL);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v156 = (uint64_t)&v141 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  unint64_t v155 = (char *)&v141 - v10;
  uint64_t v11 = sub_72E4((uint64_t *)&unk_5C190);
  __chkstk_darwin(v11, v12);
  unint64_t v165 = (char *)&v141 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v154 = type metadata accessor for UUID(0LL);
  uint64_t v153 = *(void *)(v154 - 8);
  __chkstk_darwin(v154, v14);
  int v150 = (char *)&v141 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for PluginAction(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  unint64_t v166 = (char *)&v141 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = type metadata accessor for USOParse(0LL);
  uint64_t v144 = *(void *)(v145 - 8);
  __chkstk_darwin(v145, v20);
  uint64_t v143 = (char *)&v141 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v148 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148, v22);
  unint64_t v146 = (char *)&v141 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for Parse(0LL);
  uint64_t v169 = *(void *)(v24 - 8);
  uint64_t v170 = v24;
  __chkstk_darwin(v24, v25);
  uint64_t v171 = (char *)&v141 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_72E4((uint64_t *)&unk_5A980);
  uint64_t v29 = __chkstk_darwin(v27, v28);
  char v163 = (char *)&v141 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v29, v31);
  uint64_t v34 = (char *)&v141 - v33;
  __chkstk_darwin(v32, v35);
  uint64_t v37 = (char *)&v141 - v36;
  uint64_t v38 = type metadata accessor for Input(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v41 = __chkstk_darwin(v38, v40);
  uint64_t v152 = (char *)&v141 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = __chkstk_darwin(v41, v43);
  uint64_t v149 = (char *)&v141 - v45;
  __chkstk_darwin(v44, v46);
  uint64_t v48 = (char *)&v141 - v47;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v161 = v2;
  uint64_t v49 = sub_72B4(v2, (uint64_t)qword_5D478);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 16);
  uint64_t v164 = a1;
  uint64_t v157 = v50;
  uint64_t v51 = v50(v48, a1, v38);
  uint64_t v167 = v49;
  uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  BOOL v54 = os_log_type_enabled(v52, v53);
  uint64_t v168 = v38;
  if (v54)
  {
    uint64_t v55 = swift_slowAlloc(12LL, -1LL);
    uint64_t v142 = v37;
    uint64_t v56 = (uint8_t *)v55;
    uint64_t v57 = swift_slowAlloc(32LL, -1LL);
    uint64_t v141 = v34;
    uint64_t v58 = v57;
    uint64_t v172 = v57;
    uint64_t v151 = v16;
    *(_DWORD *)uint64_t v56 = 136315138;
    uint64_t v59 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v168, v59);
    unint64_t v62 = v61;
    uint64_t v173 = sub_24BA0(v60, v61, &v172);
    uint64_t v16 = v151;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v174, v56 + 4, v56 + 12);
    swift_bridgeObjectRelease(v62);
    unint64_t v158 = *(void (**)(char *, uint64_t))(v39 + 8);
    v158(v48, v168);
    _os_log_impl(&dword_0, v52, v53, "AppShortcutEnablementFlow received input %s", v56, 0xCu);
    swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v63 = v58;
    uint64_t v34 = v141;
    swift_slowDealloc(v63, -1LL, -1LL);
    uint64_t v64 = v56;
    uint64_t v37 = v142;
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  else
  {
    unint64_t v158 = *(void (**)(char *, uint64_t))(v39 + 8);
    v158(v48, v38);
  }

  uint64_t v65 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v66 = v65(v37, 1LL, 1LL, v16);
  uint64_t v67 = v171;
  uint64_t v68 = v164;
  Input.parse.getter(v66);
  int v69 = (*(uint64_t (**)(char *, uint64_t))(v169 + 88))(v67, v170);
  uint64_t v70 = (uint64_t)v165;
  if (v69 != enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v77 = (uint64_t)v163;
    if (v69 == enum case for Parse.directInvocation(_:))
    {
      char v78 = v171;
      (*(void (**)(char *, uint64_t))(v169 + 96))(v171, v170);
      uint64_t v79 = v147;
      uint64_t v80 = (uint64_t)v146;
      unint64_t v81 = v78;
      uint64_t v82 = v148;
      (*(void (**)(char *, char *, uint64_t))(v147 + 32))(v146, v81, v148);
      sub_20048( v80,  v162 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_appShortcutAction,  v162 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_otherAction,  (uint64_t)v34);
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v80, v82);
      sub_73D8((uint64_t)v37, (uint64_t *)&unk_5A980);
      uint64_t v83 = (uint64_t)v34;
    }

    else
    {
      if (v69 != enum case for Parse.uso(_:))
      {
        sub_73D8((uint64_t)v37, (uint64_t *)&unk_5A980);
        v65(v37, 1LL, 1LL, v16);
        (*(void (**)(char *, uint64_t))(v169 + 8))(v171, v170);
        goto LABEL_16;
      }

      uint64_t v84 = v171;
      (*(void (**)(char *, uint64_t))(v169 + 96))(v171, v170);
      uint64_t v85 = (uint64_t)v34;
      uint64_t v86 = v144;
      uint64_t v87 = (uint64_t)v143;
      uint64_t v88 = v84;
      uint64_t v89 = v145;
      (*(void (**)(char *, char *, uint64_t))(v144 + 32))(v143, v88, v145);
      sub_20398( v87,  v162 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_appShortcutAction,  v162 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_otherAction,  v85);
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v89);
      sub_73D8((uint64_t)v37, (uint64_t *)&unk_5A980);
      uint64_t v83 = v85;
    }

    sub_23160(v83, (uint64_t)v37, (uint64_t *)&unk_5A980);
    goto LABEL_16;
  }

  sub_73D8((uint64_t)v37, (uint64_t *)&unk_5A980);
  uint64_t v71 = v65(v37, 1LL, 1LL, v16);
  uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
  os_log_type_t v73 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v74 = v17;
    uint64_t v75 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v75 = 0;
    _os_log_impl(&dword_0, v72, v73, "AppShortcutEnablementFlow received unsupported NLv3IntentOnly parse", v75, 2u);
    uint64_t v76 = v75;
    uint64_t v17 = v74;
    uint64_t v70 = (uint64_t)v165;
    swift_slowDealloc(v76, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v169 + 8))(v171, v170);
  uint64_t v77 = (uint64_t)v163;
LABEL_16:
  sub_18DBC((uint64_t)v37, v77, (uint64_t *)&unk_5A980);
  int v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v77, 1LL, v16);
  int v91 = v90;
  if (v90 == 1)
  {
    sub_73D8(v77, (uint64_t *)&unk_5A980);
    uint64_t v110 = v159;
    uint64_t v109 = v160;
    uint64_t v111 = v161;
    (*(void (**)(char *, uint64_t, uint64_t))(v160 + 16))(v159, v167, v161);
    uint64_t v112 = v152;
    uint64_t v113 = v68;
    uint64_t v114 = v168;
    uint64_t v115 = v157(v152, v113, v168);
    unint64_t v116 = (os_log_s *)Logger.logObject.getter(v115);
    os_log_type_t v117 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v116, v117))
    {
      uint64_t v118 = swift_slowAlloc(22LL, -1LL);
      LODWORD(v171) = 1;
      uint64_t v119 = v118;
      uint64_t v120 = swift_slowAlloc(64LL, -1LL);
      uint64_t v172 = v120;
      *(_DWORD *)uint64_t v119 = 136315394;
      uint64_t v173 = sub_24BA0(0x7475706E69286E6FLL, 0xEA0000000000293ALL, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v174, v119 + 4, v119 + 12);
      *(_WORD *)(v119 + 1sub_6CEC((void *)v0 + 2) = 2080;
      uint64_t v121 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
      uint64_t v122 = dispatch thunk of CustomStringConvertible.description.getter(v114, v121);
      unint64_t v124 = v123;
      uint64_t v173 = sub_24BA0(v122, v123, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v174, v119 + 14, v119 + 22);
      swift_bridgeObjectRelease(v124);
      v158(v112, v114);
      _os_log_impl(&dword_0, v116, v117, "%s could not resolve action from %s", (uint8_t *)v119, 0x16u);
      swift_arrayDestroy(v120, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v120, -1LL, -1LL);
      uint64_t v125 = v119;
      int v91 = (int)v171;
      swift_slowDealloc(v125, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v160 + 8))(v159, v161);
    }

    else
    {
      v158(v112, v114);

      (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v111);
    }

    type metadata accessor for ConversationSELFHelper(0LL);
    uint64_t v129 = static ConversationSELFHelper.shared.getter();
    dispatch thunk of ConversationSELFHelper.emitDisambiguationFailed(errorCode:)(0LL);
    swift_release(v129);
  }

  else
  {
    LODWORD(v171) = v90;
    uint64_t v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 32))(v166, v77, v16);
    PluginAction.loggingId.getter(v92);
    uint64_t v93 = v153;
    uint64_t v94 = v154;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v70, 1LL, v154) == 1)
    {
      sub_73D8(v70, (uint64_t *)&unk_5C190);
      unint64_t v95 = v149;
      uint64_t v96 = v68;
      uint64_t v97 = v168;
      uint64_t v98 = v157(v149, v96, v168);
      unint64_t v99 = (os_log_s *)Logger.logObject.getter(v98);
      os_log_type_t v100 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = swift_slowAlloc(12LL, -1LL);
        uint64_t v170 = v17;
        uint64_t v102 = (uint8_t *)v101;
        uint64_t v103 = swift_slowAlloc(32LL, -1LL);
        uint64_t v172 = v103;
        uint64_t v151 = v16;
        *(_DWORD *)uint64_t v102 = 136315138;
        uint64_t v104 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
        uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter(v97, v104);
        unint64_t v107 = v106;
        uint64_t v173 = sub_24BA0(v105, v106, &v172);
        uint64_t v16 = v151;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, v174, v102 + 4, v102 + 12);
        swift_bridgeObjectRelease(v107);
        v158(v95, v97);
        _os_log_impl(&dword_0, v99, v100, "AppShortcutEnablementFlow could not extract loggingId from %s", v102, 0xCu);
        swift_arrayDestroy(v103, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v103, -1LL, -1LL);
        int v108 = v102;
        uint64_t v17 = v170;
        swift_slowDealloc(v108, -1LL, -1LL);
      }

      else
      {
        v158(v95, v97);
      }
    }

    else
    {
      unint64_t v126 = v150;
      (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v150, v70, v94);
      type metadata accessor for ConversationSELFHelper(0LL);
      uint64_t v127 = v93;
      uint64_t v128 = static ConversationSELFHelper.shared.getter();
      dispatch thunk of ConversationSELFHelper.emitDisambiguationFollowupHandled(actionId:)(v126);
      swift_release(v128);
      (*(void (**)(char *, uint64_t))(v127 + 8))(v126, v94);
    }

    uint64_t v130 = (uint64_t)v155;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v155, v166, v16);
    uint64_t v131 = sub_72E4(&qword_5C040);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56LL))(v130, 0LL, 2LL, v131);
    uint64_t v132 = v156;
    sub_230D8(v130, v156);
    uint64_t v133 = v162 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_state;
    swift_beginAccess(v162 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_state, &v172, 33LL, 0LL);
    sub_2311C(v132, v133);
    uint64_t v134 = swift_endAccess(&v172);
    uint64_t v135 = (os_log_s *)Logger.logObject.getter(v134);
    os_log_type_t v136 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v135, v136))
    {
      uint64_t v137 = v17;
      uint64_t v138 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v138 = 0;
      _os_log_impl(&dword_0, v135, v136, "AppShortcutEnablementFlow input accepted", v138, 2u);
      uint64_t v139 = v138;
      uint64_t v17 = v137;
      swift_slowDealloc(v139, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v166, v16);
    int v91 = (int)v171;
  }

  sub_73D8((uint64_t)v37, (uint64_t *)&unk_5A980);
  return v91 != 1;
}

uint64_t sub_1A6AC(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for Parse(0LL);
  v2[10] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Input(0LL);
  v2[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[14] = v6;
  v2[15] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for USOParse(0LL);
  v2[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[17] = v8;
  v2[18] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_72E4(&qword_5A930);
  v2[19] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AppShortcutInvocation(0LL);
  v2[20] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[21] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[22] = swift_task_alloc(v12);
  v2[23] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for PluginAction(0LL);
  v2[24] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[25] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[26] = swift_task_alloc(v15);
  v2[27] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for AppShortcutEnablementFlow.State(0LL);
  v2[28] = swift_task_alloc((*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1A810, 0LL, 0LL);
}

uint64_t sub_1A810()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  *(void *)(v0 + 23sub_6CEC((void *)v0 + 2) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "AppShortcutEnablementFlow called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 72);

  uint64_t v8 = v7 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_state;
  swift_beginAccess(v7 + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_state, v0 + 16, 0LL, 0LL);
  sub_23094(v8, v6);
  uint64_t v9 = sub_72E4(&qword_5C040);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v6, 2LL, v9);
  if ((_DWORD)v10)
  {
    if ((_DWORD)v10 == 1)
    {
      uint64_t v11 = (void *)swift_task_alloc(dword_5AAD4);
      *(void *)(v0 + 240) = v11;
      void *v11 = v0;
      v11[1] = sub_1B00C;
      return sub_1B380(*(void *)(v0 + 64));
    }

    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl(&dword_0, v49, v50, "AppShortcutEnablementFlow got invalid respose", v51, 2u);
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    os_log_type_t v53 = static OutputPublisherFactory.makeOutputPublisherAsync()(v89, v52);
    static SiriKitEventSender.current.getter(v90, v53);
    uint64_t v54 = type metadata accessor for CamErrorFlow();
    swift_allocObject(v54, 112LL, 7LL);
    uint64_t v55 = sub_267BC(0xD000000000000010LL, 0x8000000000049090LL, v89, v90);
    *(void *)(v0 + 40) = v55;
    uint64_t v56 = sub_7D7C( (unint64_t *)&qword_5C1A0,  (uint64_t (*)(uint64_t))type metadata accessor for CamErrorFlow,  (uint64_t)&unk_48040);
    uint64_t v57 = Flow.eraseToAnyFlow()(v54, v56);
    swift_release(v55);
    static ExecuteResponse.complete(next:)(v57);
    swift_release(v57);
    goto LABEL_22;
  }

  uint64_t v88 = v0 + 56;
  uint64_t v13 = *(void *)(v0 + 112);
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 80);
  uint64_t v18 = *(void *)(v0 + 88);
  uint64_t v19 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 200) + 32LL))( *(void *)(v0 + 216),  *(void *)(v0 + 224),  *(void *)(v0 + 192));
  uint64_t v20 = AppShortcutInvocation.bundleId.getter(v19);
  uint64_t v22 = v21;
  static AmbiguousFirstRunHelper.recordAmbiguousFirstRunShown(bundleId:)(v20);
  uint64_t v23 = swift_bridgeObjectRelease(v22);
  uint64_t v24 = PluginAction.input.getter(v23);
  Input.parse.getter(v24);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  int v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v16, v17);
  uint64_t v27 = *(void *)(v0 + 160);
  uint64_t v26 = *(void *)(v0 + 168);
  uint64_t v28 = *(void *)(v0 + 152);
  if (v25 != enum case for Parse.uso(_:))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8LL))(*(void *)(v0 + 96), *(void *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v28, 1LL, 1LL, v27);
    goto LABEL_16;
  }

  uint64_t v30 = *(void *)(v0 + 136);
  uint64_t v29 = *(void *)(v0 + 144);
  uint64_t v31 = *(void *)(v0 + 128);
  uint64_t v32 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 88) + 96LL))(v32, *(void *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v29, v32, v31);
  LOBYTE(v90[0]) = 1;
  USOParse.extractAppShortcutInvocation(groupIndex:)(0x100000000LL);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v28, 1LL, v27) == 1)
  {
LABEL_16:
    uint64_t v58 = sub_73D8(*(void *)(v0 + 152), &qword_5A930);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      unint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v61 = 0;
      _os_log_impl(&dword_0, v59, v60, "App Shortcuts declined by user after ambiguous first run prompt", v61, 2u);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    uint64_t v62 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 200) + 16LL))( *(void *)(v0 + 208),  *(void *)(v0 + 216),  *(void *)(v0 + 192));
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v64 = static os_log_type_t.error.getter();
    BOOL v65 = os_log_type_enabled(v63, v64);
    uint64_t v66 = *(void *)(v0 + 200);
    uint64_t v67 = *(void *)(v0 + 208);
    uint64_t v68 = *(void *)(v0 + 192);
    if (v65)
    {
      int v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v70 = swift_slowAlloc(32LL, -1LL);
      v90[0] = v70;
      *(_DWORD *)int v69 = 136315138;
      uint64_t v71 = sub_7D7C( (unint64_t *)&qword_59FC0,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction,  (uint64_t)&protocol conformance descriptor for PluginAction);
      uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter(v68, v71);
      unint64_t v74 = v73;
      *(void *)(v0 + 48) = sub_24BA0(v72, v73, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v88, v69 + 4, v69 + 12);
      swift_bridgeObjectRelease(v74);
      uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
      v75(v67, v68);
      _os_log_impl(&dword_0, v63, v64, "AppShortcutEnablementFlow redirecting to resolved action %s", v69, 0xCu);
      swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);
    }

    else
    {
      uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
      v75(*(void *)(v0 + 208), *(void *)(v0 + 192));
    }

    uint64_t v76 = *(void *)(v0 + 216);
    uint64_t v77 = *(void *)(v0 + 192);
    static ExecuteResponse.redirect(nextPluginAction:)(v76);
    v75(v76, v77);
LABEL_22:
    uint64_t v78 = *(void *)(v0 + 216);
    uint64_t v79 = *(void *)(v0 + 208);
    uint64_t v81 = *(void *)(v0 + 176);
    uint64_t v80 = *(void *)(v0 + 184);
    uint64_t v83 = *(void *)(v0 + 144);
    uint64_t v82 = *(void *)(v0 + 152);
    uint64_t v84 = *(void *)(v0 + 120);
    uint64_t v85 = *(void *)(v0 + 96);
    swift_task_dealloc(*(void *)(v0 + 224));
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v34 = *(void *)(v0 + 176);
  uint64_t v33 = *(void *)(v0 + 184);
  uint64_t v36 = *(void *)(v0 + 160);
  uint64_t v35 = *(void *)(v0 + 168);
  (*(void (**)(uint64_t, void, uint64_t))(v35 + 32))(v33, *(void *)(v0 + 152), v36);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v34, v33, v36);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v42 = *(void *)(v0 + 168);
  uint64_t v41 = *(void *)(v0 + 176);
  if (v40)
  {
    uint64_t v87 = *(void *)(v0 + 160);
    uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    v90[0] = v44;
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v45 = AppShortcutInvocation.bundleId.getter(v44);
    unint64_t v47 = v46;
    *(void *)(v0 + 56) = sub_24BA0(v45, v46, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v88, v0 + 64, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease(v47);
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v48(v41, v87);
    _os_log_impl(&dword_0, v38, v39, "App Shortcuts for %s enabled after ambiguous first run prompt", v43, 0xCu);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  else
  {
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v48(*(void *)(v0 + 176), *(void *)(v0 + 160));
  }

  *(void *)(v0 + 248) = v48;
  uint64_t v86 = (void *)swift_task_alloc(async function pointer to AppShortcutInvocation.enableAppShortcuts()[1]);
  *(void *)(v0 + 256) = v86;
  *uint64_t v86 = v0;
  v86[1] = sub_1B0FC;
  return AppShortcutInvocation.enableAppShortcuts()();
}

uint64_t sub_1B00C()
{
  return swift_task_switch(sub_1B060, 0LL, 0LL);
}

uint64_t sub_1B060()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B0FC()
{
  return swift_task_switch(sub_1B150, 0LL, 0LL);
}

uint64_t sub_1B150()
{
  uint64_t v1 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 200) + 16LL))( *(void *)(v0 + 208),  *(void *)(v0 + 216),  *(void *)(v0 + 192));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v24 = *(void *)(v0 + 200);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = sub_7D7C( (unint64_t *)&qword_59FC0,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction,  (uint64_t)&protocol conformance descriptor for PluginAction);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    unint64_t v11 = v10;
    *(void *)(v0 + 48) = sub_24BA0(v9, v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v12(v4, v5);
    _os_log_impl(&dword_0, v2, v3, "AppShortcutEnablementFlow redirecting to resolved action %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 200) + 8LL);
    v12(*(void *)(v0 + 208), *(void *)(v0 + 192));
  }

  uint64_t v13 = *(void *)(v0 + 216);
  uint64_t v14 = *(void *)(v0 + 192);
  static ExecuteResponse.redirect(nextPluginAction:)(v13);
  v12(v13, v14);
  uint64_t v15 = *(void *)(v0 + 216);
  uint64_t v16 = *(void *)(v0 + 208);
  uint64_t v18 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 184);
  uint64_t v20 = *(void *)(v0 + 144);
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v21 = *(void *)(v0 + 120);
  uint64_t v22 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B380(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A820);
  v2[19] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  v2[20] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[21] = v5;
  v2[22] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CAMDisambiguationDialogType(0LL);
  v2[23] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[24] = v7;
  v2[25] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_72E4((uint64_t *)&unk_5C190);
  v2[26] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v2[27] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[28] = v10;
  v2[29] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1B478, 0LL, 0LL);
}

uint64_t sub_1B478()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  *(void *)(v0 + 240) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "AppShortcutEnablementFlow attempting to render confirmation", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_5AADC);
  *(void *)(v0 + 248) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1B584;
  return sub_1BC70(v0 + 56);
}

uint64_t sub_1B584()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 256LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1BA48;
  }
  else {
    uint64_t v3 = sub_1B5E8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1B5E8()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = sub_72CC((__int128 *)(v0 + 56), v0 + 16);
  PluginAction.loggingId.getter(v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1LL, v2) == 1)
  {
    uint64_t v6 = sub_73D8(*(void *)(v0 + 208), (uint64_t *)&unk_5C190);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( &dword_0,  v7,  v8,  "AppShortcutEnablementFlow could not extract loggingIds for action. SELF message was not emitted as a result.",  v9,  2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v12 = *(void *)(v0 + 216);
    uint64_t v14 = *(void *)(v0 + 192);
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v26 = *(void *)(v0 + 184);
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 32))(v10, *(void *)(v0 + 208), v12);
    type metadata accessor for ConversationSELFHelper(0LL);
    uint64_t v15 = static ConversationSELFHelper.shared.getter();
    uint64_t v16 = sub_72E4(&qword_5A958);
    uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v18 = (v17 + 32) & ~v17;
    uint64_t v19 = swift_allocObject(v16, v18 + *(void *)(v11 + 72), v17 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_47AE0;
    uint64_t v20 = v19 + v18;
    uint64_t v1 = v0 + 16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v20, v10, v12);
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))( v13,  enum case for CAMDisambiguationDialogType.shortcutEnablement(_:),  v26);
    dispatch thunk of ConversationSELFHelper.emitDisambiguationDialogGenerated(actionIds:dialogType:)(v19, v13);
    swift_bridgeObjectRelease(v19);
    swift_release(v15);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v26);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }

  uint64_t v21 = *(void **)(v0 + 144);
  uint64_t v22 = v21[31];
  uint64_t v23 = v21[32];
  sub_73B4(v21 + 28, v22);
  uint64_t v24 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 264) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_1B82C;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v1, v22, v23);
}

uint64_t sub_1B82C()
{
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v2 = sub_23390;
  }

  else
  {
    uint64_t v2 = sub_1B898;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1B898()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void **)(v0 + 144);
  uint64_t v5 = v4[16];
  uint64_t v19 = v4[17];
  sub_73B4(v4 + 13, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.disambiguation(_:), v3);
  if (qword_59D70 != -1) {
    swift_once(&qword_59D70, sub_198D8);
  }
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v9 = qword_5D3B8;
  uint64_t v8 = unk_5D3C0;
  uint64_t v10 = enum case for SiriKitReliabilityCodes.disambiguationShortcutVsOther(_:);
  uint64_t v11 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v7, v10, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v7, 0LL, 1LL, v11);
  swift_bridgeObjectRetain(v8);
  uint64_t v13 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v6, v9, v8, v7, sub_1BC38, 0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v13, v5, v19);
  swift_release(v13);
  static ExecuteResponse.ongoing(requireInput:)(1LL);
  sub_6CEC((void *)(v0 + 16));
  uint64_t v14 = *(void *)(v0 + 200);
  uint64_t v15 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BA48()
{
  uint64_t v1 = *(void *)(v0 + 256);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 256);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_getErrorValue(v5, v0 + 120, v0 + 96);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 104), *(void *)(v0 + 112));
    unint64_t v10 = v9;
    *(void *)(v0 + 128) = sub_24BA0(v8, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl(&dword_0, v3, v4, "AppShortcutEnablementFlow will redirect to fall back action. Error: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 256);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v12 = *(void *)(v0 + 256);
  static ExecuteResponse.redirect(nextPluginAction:)(*(void *)(v0 + 144) + OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_otherAction);
  swift_errorRelease(v12);
  uint64_t v13 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 208);
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v16 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BC38()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter( 0xD000000000000011LL,  0x8000000000049360LL);
}

uint64_t sub_1BC70(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Locale(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1BCD0, 0LL, 0LL);
}

uint64_t sub_1BCD0()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = (void *)v0[5];
  uint64_t v3 = v0[6];
  v0[9] = OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_appShortcutInvocation;
  uint64_t v5 = v4[6];
  uint64_t v6 = v4[7];
  sub_73B4(v4 + 3, v5);
  uint64_t v7 = dispatch thunk of DeviceState.siriLocale.getter(v5, v6);
  uint64_t v8 = Locale.identifier.getter(v7);
  uint64_t v10 = v9;
  v0[10] = v9;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to AppShortcutInvocation.getAppShortcuts(siriLanguage:provider:)[1]);
  v0[11] = v11;
  void *v11 = v0;
  v11[1] = sub_1BDA4;
  return AppShortcutInvocation.getAppShortcuts(siriLanguage:provider:)(v8, v10, v4 + 18);
}

uint64_t sub_1BDA4(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1BE08, 0LL, 0LL);
}

uint64_t sub_1BE08()
{
  if (qword_59DD8 != -1) {
LABEL_33:
  }
    swift_once(&qword_59DD8, sub_34328);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_72B4(v4, (uint64_t)qword_5D478);
  uint64_t v5 = swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  unint64_t v9 = *(void *)(v0 + 96);
  if (!v8)
  {

    swift_bridgeObjectRelease_n(v9, 2LL);
    goto LABEL_7;
  }

  uint64_t v2 = v0 + 24;
  uint64_t v1 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  *(_DWORD *)uint64_t v1 = 134217984;
  if (v9 >> 62) {
    goto LABEL_43;
  }
  uint64_t v10 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    uint64_t v11 = *(void *)(v0 + 96);
    swift_bridgeObjectRelease(v11);
    *(void *)(v0 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v0 + 32, v1 + 4, v1 + 12);
    swift_bridgeObjectRelease(v11);
    _os_log_impl(&dword_0, v6, v7, "auto shortcuts count: %ld", v1, 0xCu);
    swift_slowDealloc(v1, -1LL, -1LL);

LABEL_7:
    uint64_t v12 = *(void *)(v0 + 96);
    uint64_t v6 = *(os_log_s **)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v12);
    if (!v6) {
      goto LABEL_38;
    }
LABEL_9:
    if ((uint64_t)v6 >= 1)
    {
      uint64_t v13 = 0LL;
      unint64_t v14 = v9 & 0xC000000000000001LL;
      uint64_t v53 = *(void *)(v0 + 96) + 32LL;
      uint64_t v15 = _swiftEmptyArrayStorage;
      while (1)
      {
        if (v14) {
          uint64_t v16 = (uint8_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, *(void *)(v0 + 96));
        }
        else {
          uint64_t v16 = (uint8_t *)*(id *)(v53 + 8 * v13);
        }
        uint64_t v1 = v16;
        id v17 = -[uint8_t orderedPhrases](v16, "orderedPhrases", v53);
        unint64_t v18 = sub_22E48();
        uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

        if ((unint64_t)v2 >> 62)
        {
          if (v2 < 0) {
            uint64_t v28 = v2;
          }
          else {
            uint64_t v28 = v2 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v2);
          uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v28);
          swift_bridgeObjectRelease(v2);
          if (!v29)
          {
LABEL_11:

            swift_bridgeObjectRelease(v2);
            goto LABEL_12;
          }
        }

        else if (!*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL)))
        {
          goto LABEL_11;
        }

        if ((v2 & 0xC000000000000001LL) != 0)
        {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
        }

        else
        {
          if (!*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL)))
          {
            __break(1u);
            goto LABEL_33;
          }

          id v19 = *(id *)(v2 + 32);
        }

        uint64_t v20 = v19;
        swift_bridgeObjectRelease(v2);
        id v21 = [v20 localizedPhrase];

        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        uint64_t v24 = v23;

        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
          uint64_t v15 = sub_444A8(0LL, v15[2] + 1LL, 1, v15);
        }
        unint64_t v26 = v15[2];
        unint64_t v25 = v15[3];
        if (v26 >= v25 >> 1) {
          uint64_t v15 = sub_444A8((void *)(v25 > 1), v26 + 1, 1, v15);
        }
        v15[2] = v26 + 1;
        uint64_t v27 = &v15[2 * v26];
        v27[4] = v22;
        v27[5] = v24;
LABEL_12:
        if (v6 == (os_log_s *)++v13) {
          goto LABEL_39;
        }
      }
    }

    __break(1u);
LABEL_43:
    uint64_t v51 = *(void *)(v0 + 96);
    if (v51 < 0) {
      uint64_t v52 = *(void *)(v0 + 96);
    }
    else {
      uint64_t v52 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 96));
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease(v51);
  }

  if (v12 < 0) {
    uint64_t v30 = *(void *)(v0 + 96);
  }
  else {
    uint64_t v30 = v9 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v12);
  uint64_t v6 = (os_log_s *)_CocoaArrayWrapper.endIndex.getter(v30);
  if (v6) {
    goto LABEL_9;
  }
LABEL_38:
  uint64_t v15 = _swiftEmptyArrayStorage;
LABEL_39:
  *(void *)(v0 + 104) = v15;
  uint64_t v31 = swift_bridgeObjectRelease_n(*(void *)(v0 + 96), 2LL);
  uint64_t v32 = AppShortcutInvocation.bundleId.getter(v31);
  uint64_t v34 = v33;
  uint64_t v35 = sub_2B044(v32, v33);
  uint64_t v37 = v36;
  swift_bridgeObjectRelease(v34);
  *(void *)(v0 + 11sub_6CEC((void *)v0 + 2) = v35;
  *(void *)(v0 + 120) = v37;
  uint64_t v38 = *(void *)(v0 + 40);
  if (v37)
  {
    uint64_t v39 = sub_72E4(&qword_5AD60);
    uint64_t v40 = swift_task_alloc(32LL);
    *(void *)(v0 + 128) = v40;
    *(void *)(v40 + 16) = v15;
    *(void *)(v40 + 24) = v38;
    uint64_t v41 = sub_72E4(&qword_5A910);
    uint64_t v42 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(void *)(v0 + 136) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_1C2E4;
    return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v39, v41, 0LL, 0LL, &unk_5AD70, v40, v39);
  }

  else
  {
    uint64_t v44 = swift_bridgeObjectRelease(v15);
    uint64_t v45 = AppShortcutInvocation.bundleId.getter(v44);
    uint64_t v47 = v46;
    unint64_t v48 = sub_22E84();
    uint64_t v49 = swift_allocError(&type metadata for AppShortcutEnablementError, v48, 0LL, 0LL);
    *os_log_type_t v50 = v45;
    v50[1] = v47;
    swift_willThrow(v49);
    swift_task_dealloc(*(void *)(v0 + 64));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1C2E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 136LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1C340, 0LL, 0LL);
}

uint64_t sub_1C340()
{
  uint64_t v1 = (void *)v0[5];
  swift_bridgeObjectRelease(v0[13]);
  uint64_t v2 = v0[2];
  v0[18] = v2;
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  sub_73B4(v1 + 3, v3);
  if ((dispatch thunk of DeviceState.isHomePod.getter(v3, v4) & 1) != 0)
  {
    uint64_t v5 = v0[15];
    uint64_t v6 = (void *)swift_task_alloc(dword_5AAE4);
    v0[19] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1C498;
    return sub_1C5D0(v0[4], v0[14], v5, v2);
  }

  else
  {
    BOOL v8 = (void *)v0[5];
    uint64_t v9 = v8[6];
    uint64_t v10 = v8[7];
    sub_73B4(v8 + 3, v9);
    char v11 = dispatch thunk of DeviceState.isWatch.getter(v9, v10);
    uint64_t v12 = v0[15];
    if ((v11 & 1) != 0)
    {
      uint64_t v13 = (void *)swift_task_alloc(dword_5AAEC);
      v0[20] = v13;
      void *v13 = v0;
      v13[1] = sub_1C500;
      return sub_1CA20(v0[4], v0[14], v12, v2);
    }

    else
    {
      unint64_t v14 = (void *)swift_task_alloc(dword_5AAF4);
      v0[21] = v14;
      *unint64_t v14 = v0;
      v14[1] = sub_1C568;
      return sub_1D0B0(v0[4], v0[14], v12, v2);
    }
  }

uint64_t sub_1C498()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v4 = *(void **)v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 152LL));
  uint64_t v2 = v1[15];
  swift_bridgeObjectRelease(v1[18]);
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1[8]);
  return ((uint64_t (*)(void))v4[1])();
}

uint64_t sub_1C500()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v4 = *(void **)v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 160LL));
  uint64_t v2 = v1[15];
  swift_bridgeObjectRelease(v1[18]);
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1[8]);
  return ((uint64_t (*)(void))v4[1])();
}

uint64_t sub_1C568()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v4 = *(void **)v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 168LL));
  uint64_t v2 = v1[15];
  swift_bridgeObjectRelease(v1[18]);
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1[8]);
  return ((uint64_t (*)(void))v4[1])();
}

uint64_t sub_1C5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A5A0);
  v5[12] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NLContextUpdate(0LL);
  v5[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[14] = v8;
  v5[15] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TemplatingResult(0LL);
  v5[16] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[17] = v10;
  v5[18] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1C684, 0LL, 0LL);
}

uint64_t sub_1C684()
{
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = v1[2];
  if (v2)
  {
    uint64_t v4 = v1[4];
    uint64_t v3 = v1[5];
    swift_bridgeObjectRetain(v3);
    if (v2 == 1)
    {
      uint64_t v2 = 0LL;
      uint64_t v5 = 0xE000000000000000LL;
    }

    else
    {
      uint64_t v2 = v1[6];
      uint64_t v5 = v1[7];
      swift_bridgeObjectRetain(v5);
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0xE000000000000000LL;
    uint64_t v5 = 0xE000000000000000LL;
  }

  v0[19] = v3;
  v0[20] = v5;
  uint64_t v6 = (uint64_t **)swift_task_alloc(dword_5AFAC);
  v0[21] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = (uint64_t *)sub_1C748;
  return sub_25FC4(v0[18], v0[8], v0[9], v4, v3, v2, v5);
}

uint64_t sub_1C748()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 168);
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1C7BC;
  }

  else
  {
    uint64_t v5 = *(void *)(v2 + 152);
    swift_bridgeObjectRelease(*(void *)(v2 + 160));
    swift_bridgeObjectRelease(v5);
    uint64_t v4 = sub_1C824;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1C7BC()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 96);
  swift_bridgeObjectRelease(*(void *)(v0 + 160));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C824(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 144);
  uint64_t v3 = *(void *)(v1 + 120);
  uint64_t v20 = *(void *)(v1 + 136);
  uint64_t v21 = *(void *)(v1 + 128);
  uint64_t v4 = *(void *)(v1 + 112);
  uint64_t v19 = *(void *)(v1 + 104);
  uint64_t v6 = *(void **)(v1 + 88);
  uint64_t v5 = *(void *)(v1 + 96);
  uint64_t v7 = *(void **)(v1 + 56);
  NLContextUpdate.init()(a1);
  uint64_t v8 = sub_72E4(&qword_5A920);
  uint64_t v9 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL) - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(v8, v12 + v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_47AE0;
  sub_1EE1C(v13 + v12);
  NLContextUpdate.nluSystemDialogActs.setter(v13);
  unint64_t v14 = v6 + 3;
  uint64_t v16 = v6[6];
  uint64_t v15 = v6[7];
  sub_73B4(v14, v16);
  LOBYTE(v15) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v16, v15);
  LOBYTE(v13) = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v3, v19);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v5, 0LL, 1LL, v19);
  uint64_t v17 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v1 + 3sub_6CEC((void *)v0 + 2) = 0u;
  *(void *)(v1 + 48) = 0LL;
  *(_OWORD *)(v1 + 16) = 0u;
  v7[3] = v17;
  v7[4] = &protocol witness table for AceOutput;
  sub_8390(v7);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v2,  v14,  v15 & 1,  _swiftEmptyArrayStorage,  v13 & 1,  1LL,  v5,  _swiftEmptyArrayStorage,  v1 + 16);
  sub_73D8(v1 + 16, (uint64_t *)&unk_5C140);
  sub_73D8(v5, (uint64_t *)&unk_5A5A0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v19);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v2, v21);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1CA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A5A0);
  v5[7] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v5[8] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v5[9] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[10] = v9;
  v5[11] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v5[12] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[13] = v11;
  v5[14] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for TemplatingResult(0LL);
  v5[15] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[16] = v13;
  v5[17] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1CB1C, 0LL, 0LL);
}

uint64_t sub_1CB1C()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_5AF9C);
  v0[18] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_1CB74;
  return sub_25B8C(v0[17], v0[3], v0[4]);
}

uint64_t sub_1CB74()
{
  uint64_t v2 = *(void *)(*v1 + 144);
  uint64_t v3 = *v1;
  *(void *)(v3 + 15sub_6CEC((void *)v0 + 2) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_23388, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(dword_5AAFC);
  *(void *)(v3 + 160) = v5;
  void *v5 = v3;
  v5[1] = sub_1CC00;
  return sub_1DAD8();
}

uint64_t sub_1CC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void *)(*(void *)v5 + 160LL);
  v6[21] = a1;
  v6[22] = a2;
  v6[23] = a3;
  v6[24] = a4;
  v6[25] = v4;
  swift_task_dealloc(v7);
  if (v4) {
    uint64_t v8 = sub_2337C;
  }
  else {
    uint64_t v8 = sub_1CC74;
  }
  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_1CC74()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 16LL);
  uint64_t v2 = (void *)swift_task_alloc(dword_5AB04);
  *(void *)(v0 + 208) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1CCC8;
  return sub_1DE64(v1);
}

uint64_t sub_1CCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 208);
  *(void *)(*v3 + 216) = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    uint64_t v7 = *(void *)(v5 + 192);
    swift_bridgeObjectRelease(*(void *)(v5 + 176));
    swift_bridgeObjectRelease(v7);
    uint64_t v8 = sub_23380;
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    uint64_t v8 = sub_1CD54;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_1CD54()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v4 = v0[21];
  uint64_t v3 = v0[22];
  uint64_t v5 = v0[6];
  uint64_t v19 = v0[4];
  AppShortcutInvocation.bundleId.getter();
  uint64_t v7 = swift_bridgeObjectRelease(v6);
  NLContextUpdate.init()(v7);
  uint64_t v8 = sub_72E4(&qword_5A920);
  uint64_t v9 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL) - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(v8, v12 + v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_47AE0;
  sub_1F680(v4, v3, v2, v1, v13 + v12);
  NLContextUpdate.nluSystemDialogActs.setter(v13);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v3);
  uint64_t v14 = *sub_73B4((void *)(v5 + 272), *(void *)(v5 + 296));
  uint64_t v15 = unk_5AF6C;
  unint64_t v18 = (uint64_t (*)(char, uint64_t, uint64_t, uint64_t))((char *)&dword_5AF68 + dword_5AF68);
  swift_bridgeObjectRetain(v19);
  uint64_t v16 = (void *)swift_task_alloc(v15);
  v0[28] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1CEB0;
  return v18(0, v14, v0[3], v0[4]);
}

uint64_t sub_1CEB0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 224);
  uint64_t v5 = *(void *)(*v2 + 32);
  *(void *)(v3 + 23sub_6CEC((void *)v0 + 2) = a1;
  *(void *)(v3 + 240) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  if (v1) {
    uint64_t v6 = sub_23398;
  }
  else {
    uint64_t v6 = sub_1CF28;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1CF28()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  static DialogPhase.confirmation.getter();
  OutputGenerationManifest.init(dialogPhase:_:)(v4, nullsub_1, 0LL);
  Swift::Bool v6 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  OutputGenerationManifest.listenAfterSpeaking.setter(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v5, 0LL, 1LL, v3);
  OutputGenerationManifest.nlContextUpdate.setter(v5);
  uint64_t v7 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v0[31] = ResponseFactory.init()();
  v0[32] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1D044;
  return ((uint64_t (*)(void, void, void))v10)(v0[2], v0[29], v0[11]);
}

uint64_t sub_1D044()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 248LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 256LL);
  *(void *)(*(void *)v1 + 264LL) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0) {
    uint64_t v4 = sub_2338C;
  }
  else {
    uint64_t v4 = sub_23384;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1D0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A5A0);
  v5[7] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v5[8] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v5[9] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[10] = v9;
  v5[11] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NLContextUpdate(0LL);
  v5[12] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[13] = v11;
  v5[14] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for TemplatingResult(0LL);
  v5[15] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[16] = v13;
  v5[17] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1D1AC, 0LL, 0LL);
}

uint64_t sub_1D1AC()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_5AF9C);
  v0[18] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_1D204;
  return sub_25B8C(v0[17], v0[3], v0[4]);
}

uint64_t sub_1D204()
{
  uint64_t v2 = *(void *)(*v1 + 144);
  uint64_t v3 = *v1;
  *(void *)(v3 + 15sub_6CEC((void *)v0 + 2) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1D304, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(dword_5AAFC);
  *(void *)(v3 + 160) = v5;
  void *v5 = v3;
  v5[1] = sub_1D290;
  return sub_1DAD8();
}

uint64_t sub_1D290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void *)(*(void *)v5 + 160LL);
  v6[21] = a1;
  v6[22] = a2;
  v6[23] = a3;
  v6[24] = a4;
  v6[25] = v4;
  swift_task_dealloc(v7);
  if (v4) {
    uint64_t v8 = sub_1D90C;
  }
  else {
    uint64_t v8 = sub_1D374;
  }
  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_1D304()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D374()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 16LL);
  uint64_t v2 = (void *)swift_task_alloc(dword_5AB04);
  *(void *)(v0 + 208) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1D3C8;
  return sub_1DE64(v1);
}

uint64_t sub_1D3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 208);
  *(void *)(*v3 + 216) = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    uint64_t v7 = *(void *)(v5 + 192);
    swift_bridgeObjectRelease(*(void *)(v5 + 176));
    swift_bridgeObjectRelease(v7);
    uint64_t v8 = sub_1D98C;
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    uint64_t v8 = sub_1D454;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_1D454()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v4 = v0[21];
  uint64_t v3 = v0[22];
  uint64_t v5 = v0[6];
  uint64_t v19 = v0[4];
  AppShortcutInvocation.bundleId.getter();
  uint64_t v7 = swift_bridgeObjectRelease(v6);
  NLContextUpdate.init()(v7);
  uint64_t v8 = sub_72E4(&qword_5A920);
  uint64_t v9 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL) - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(v8, v12 + v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_47AE0;
  sub_1F680(v4, v3, v2, v1, v13 + v12);
  NLContextUpdate.nluSystemDialogActs.setter(v13);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v3);
  uint64_t v14 = *sub_73B4((void *)(v5 + 272), *(void *)(v5 + 296));
  uint64_t v15 = unk_5AF6C;
  unint64_t v18 = (uint64_t (*)(char, uint64_t, uint64_t, uint64_t))((char *)&dword_5AF68 + dword_5AF68);
  swift_bridgeObjectRetain(v19);
  uint64_t v16 = (void *)swift_task_alloc(v15);
  v0[28] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1D5B0;
  return v18(0, v14, v0[3], v0[4]);
}

uint64_t sub_1D5B0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 224);
  uint64_t v5 = *(void *)(*v2 + 32);
  *(void *)(v3 + 23sub_6CEC((void *)v0 + 2) = a1;
  *(void *)(v3 + 240) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  if (v1) {
    uint64_t v6 = sub_1D7B0;
  }
  else {
    uint64_t v6 = sub_1D628;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1D628()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  static DialogPhase.confirmation.getter();
  OutputGenerationManifest.init(dialogPhase:_:)(v4, nullsub_1, 0LL);
  Swift::Bool v6 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  OutputGenerationManifest.listenAfterSpeaking.setter(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v5, 0LL, 1LL, v3);
  OutputGenerationManifest.nlContextUpdate.setter(v5);
  uint64_t v7 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v0[31] = ResponseFactory.init()();
  v0[32] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1D744;
  return ((uint64_t (*)(void, void, void))v10)(v0[2], v0[29], v0[11]);
}

uint64_t sub_1D744()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 248LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 256LL);
  *(void *)(*(void *)v1 + 264LL) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0) {
    uint64_t v4 = sub_1DA0C;
  }
  else {
    uint64_t v4 = sub_1D844;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1D7B0()
{
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);
  (*(void (**)(void, void))(*(void *)(v0 + 104) + 8LL))(*(void *)(v0 + 112), *(void *)(v0 + 96));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 136));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D844()
{
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 64);
  uint64_t v12 = *(void *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D90C()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D98C()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DA0C()
{
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v12 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 136));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DAD8()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for TemplatingText(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TemplatingSection(0LL);
  v1[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v1[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[10] = v7;
  v1[11] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1DB88, 0LL, 0LL);
}

uint64_t sub_1DB88()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_5AFA4);
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1DBDC;
  return sub_25DBC(*(void *)(v0 + 88));
}

uint64_t sub_1DBDC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1DE18;
  }
  else {
    uint64_t v3 = sub_1DC40;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1DC40()
{
  uint64_t v1 = ((uint64_t (*)(void))TemplatingResult.sections.getter)();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = swift_bridgeObjectRelease(v1);
  if (v2 != 2)
  {
    uint64_t v33 = 0LL;
    uint64_t v29 = 0LL;
    unint64_t v34 = 0xE000000000000000LL;
    unint64_t v31 = 0xE000000000000000LL;
    goto LABEL_6;
  }

  uint64_t result = TemplatingResult.sections.getter(v3);
  if (*(void *)(result + 16))
  {
    uint64_t v5 = result;
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 24);
    uint64_t v11 = *(void *)(v0 + 32);
    unint64_t v12 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v39 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    v39(v6, result + v12, v8);
    uint64_t v13 = swift_bridgeObjectRelease(v5);
    TemplatingSection.content.getter(v13);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    uint64_t v15 = v14(v6, v8);
    uint64_t v16 = TemplatingText.text.getter(v15);
    unint64_t v18 = v17;
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    uint64_t v20 = v19(v9, v10);
    uint64_t result = TemplatingResult.sections.getter(v20);
    if (*(void *)(result + 16) >= 2uLL)
    {
      uint64_t v21 = result;
      uint64_t v22 = *(void *)(v0 + 64);
      uint64_t v24 = *(void *)(v0 + 40);
      uint64_t v23 = *(void *)(v0 + 48);
      unint64_t v38 = v18;
      uint64_t v25 = v16;
      uint64_t v26 = *(void *)(v0 + 24);
      v39(v22, result + v12 + *(void *)(*(void *)(v0 + 56) + 72LL), v23);
      uint64_t v27 = swift_bridgeObjectRelease(v21);
      TemplatingSection.content.getter(v27);
      uint64_t v28 = v14(v22, v23);
      uint64_t v29 = TemplatingText.text.getter(v28);
      unint64_t v31 = v30;
      uint64_t v32 = v26;
      uint64_t v33 = v25;
      unint64_t v34 = v38;
      v19(v24, v32);
LABEL_6:
      uint64_t v35 = *(void *)(v0 + 88);
      uint64_t v36 = *(void *)(v0 + 64);
      uint64_t v37 = *(void *)(v0 + 40);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 80) + 8LL))(v35, *(void *)(v0 + 72));
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t))(v0 + 8))( v33,  v34,  v29,  v31);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1DE18()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 40);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DE64(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for TemplatingText(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_72E4(&qword_5AD40);
  v2[7] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v2[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[9] = v7;
  v2[10] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1DF10, 0LL, 0LL);
}

uint64_t sub_1DF10()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 < 4)
  {
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v6 = *(void *)(v0 + 56);
    swift_task_dealloc(*(void *)(v0 + 80));
    swift_task_dealloc(v6);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void, void))(v0 + 8))(0LL, 0LL);
  }

  else
  {
    double v2 = (double)(v1 - 3);
    uint64_t v3 = (void *)swift_task_alloc(dword_5AFB4);
    *(void *)(v0 + 88) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1DFC4;
    return sub_262A4(*(void *)(v0 + 80), v2);
  }

uint64_t sub_1DFC4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1E1A8;
  }
  else {
    uint64_t v3 = sub_1E028;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1E028(uint64_t a1)
{
  uint64_t v2 = TemplatingResult.sections.getter(a1);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = type metadata accessor for TemplatingSection(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  if (v3)
  {
    (*(void (**)(void, unint64_t, uint64_t))(v5 + 16))( *(void *)(v1 + 56),  v2 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)),  v4);
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  uint64_t v7 = *(void *)(v1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v7, v6, 1LL, v4);
  swift_bridgeObjectRelease(v2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1LL, v4);
  uint64_t v10 = *(void *)(v1 + 72);
  uint64_t v9 = *(void *)(v1 + 80);
  uint64_t v11 = *(void *)(v1 + 56);
  uint64_t v12 = *(void *)(v1 + 64);
  if ((_DWORD)v8 == 1)
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v1 + 80), *(void *)(v1 + 64));
    sub_73D8(v11, &qword_5AD40);
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v16 = *(void *)(v1 + 40);
    uint64_t v15 = *(void *)(v1 + 48);
    uint64_t v17 = *(void *)(v1 + 32);
    TemplatingSection.content.getter(v8);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v11, v4);
    uint64_t v13 = TemplatingText.text.getter(v18);
    uint64_t v14 = v19;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
  }

  uint64_t v21 = *(void *)(v1 + 48);
  uint64_t v20 = *(void *)(v1 + 56);
  swift_task_dealloc(*(void *)(v1 + 80));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v13, v14);
}

uint64_t sub_1E1A8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1E1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = &type metadata for String;
  v4[0] = a2;
  v4[1] = a3;
  swift_bridgeObjectRetain(a3);
  return sub_1E240((uint64_t)v4, 7368801LL, 0xE300000000000000LL);
}

uint64_t sub_1E240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    sub_22E38((_OWORD *)a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_21D3C(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v8 = *v3;
    *uint64_t v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }

  else
  {
    sub_73D8(a1, &qword_5AD48);
    sub_21A78(a2, a3, v11);
    swift_bridgeObjectRelease(a3);
    return sub_73D8((uint64_t)v11, &qword_5AD48);
  }

uint64_t sub_1E314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a3;
  v4[14] = a4;
  v4[11] = a1;
  v4[12] = a2;
  uint64_t v5 = type metadata accessor for TemplatingText(0LL);
  v4[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[16] = v6;
  v4[17] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_72E4(&qword_5AD40);
  v4[18] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_72E4(&qword_5AD60);
  v4[19] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[20] = v9;
  v4[21] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TemplatingResult(0LL);
  v4[22] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[23] = v11;
  v4[24] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_72E4(&qword_5AD78);
  v4[25] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_72E4(&qword_5AD80);
  v4[26] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v4[27] = v14;
  v4[28] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = (*(void *)(*(void *)(sub_72E4((uint64_t *)&unk_5A960) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[29] = swift_task_alloc(v15);
  v4[30] = swift_task_alloc(v15);
  return swift_task_switch(sub_1E474, 0LL, 0LL);
}

uint64_t sub_1E474()
{
  uint64_t v1 = v0[13];
  uint64_t v39 = *(void *)(v1 + 16);
  if (v39)
  {
    unint64_t v34 = v0 + 2;
    unint64_t v38 = v0 + 6;
    uint64_t v2 = type metadata accessor for TaskPriority(0LL);
    uint64_t v40 = *(void *)(v2 - 8);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
    uint64_t v37 = v2;
    swift_bridgeObjectRetain(v1);
    uint64_t v3 = 0LL;
    uint64_t v4 = (void *)(v1 + 40);
    uint64_t v35 = v0;
    while (1)
    {
      uint64_t v9 = v0[29];
      uint64_t v8 = v0[30];
      uint64_t v10 = v0[14];
      uint64_t v41 = v4;
      uint64_t v11 = *(v4 - 1);
      uint64_t v12 = *v4;
      v36(v8, 1LL, 1LL, v37);
      uint64_t v13 = (void *)swift_allocObject(&unk_55AA0, 64LL, 7LL);
      v13[2] = 0LL;
      uint64_t v14 = v13 + 2;
      v13[3] = 0LL;
      v13[4] = v10;
      v13[5] = v11;
      uint64_t v13[6] = v12;
      uint64_t v0 = v35;
      v13[7] = v3;
      sub_18DBC(v8, v9, (uint64_t *)&unk_5A960);
      LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v9, 1LL, v37);
      swift_bridgeObjectRetain(v12);
      uint64_t v15 = swift_retain(v10);
      uint64_t v16 = v35[29];
      if ((_DWORD)v9 == 1)
      {
        sub_73D8(v35[29], (uint64_t *)&unk_5A960);
        uint64_t v17 = 0LL;
        uint64_t v18 = *v14;
        if (!*v14) {
          goto LABEL_8;
        }
      }

      else
      {
        unsigned __int8 v25 = TaskPriority.rawValue.getter(v15);
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v16, v37);
        uint64_t v17 = v25;
        uint64_t v18 = *v14;
        if (!*v14)
        {
LABEL_8:
          uint64_t v22 = 0LL;
          uint64_t v24 = 0LL;
          goto LABEL_9;
        }
      }

      uint64_t v19 = v13[3];
      uint64_t ObjectType = swift_getObjectType(v18);
      swift_unknownObjectRetain(v18, v21);
      uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v19);
      uint64_t v24 = v23;
      swift_unknownObjectRelease(v18);
LABEL_9:
      uint64_t v26 = *(void *)v35[12];
      uint64_t v27 = swift_allocObject(&unk_55AC8, 32LL, 7LL);
      *(void *)(v27 + 16) = &unk_5AD98;
      *(void *)(v27 + 24) = v13;
      uint64_t v28 = (void *)(v24 | v22);
      if (v24 | v22)
      {
        uint64_t v28 = v34;
        *unint64_t v34 = 0LL;
        v34[1] = 0LL;
        v35[4] = v22;
        v35[5] = v24;
      }

      ++v3;
      uint64_t v5 = v35[30];
      uint64_t v6 = v35[19];
      v35[6] = 1LL;
      v35[7] = v28;
      v35[8] = v26;
      uint64_t v7 = swift_task_create(v17 | 0x3100, v38, v6, &unk_5ADA0, v27);
      swift_release(v7);
      sub_73D8(v5, (uint64_t *)&unk_5A960);
      uint64_t v4 = v41 + 2;
      if (v39 == v3)
      {
        swift_bridgeObjectRelease(v35[13]);
        break;
      }
    }
  }

  uint64_t v29 = v0[19];
  unint64_t v30 = (void *)v0[12];
  unint64_t v31 = sub_2D974(_swiftEmptyArrayStorage);
  TaskGroup.makeAsyncIterator()(*v30, v29);
  v0[31] = v31;
  uint64_t v32 = (void *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
  v0[32] = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_1E748;
  return TaskGroup.Iterator.next(isolation:)(v0[25], 0LL, 0LL, v0[26]);
}

uint64_t sub_1E748()
{
  return swift_task_switch(sub_1E79C, 0LL, 0LL);
}

unint64_t sub_1E79C()
{
  uint64_t v1 = *(void *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 160) + 48LL))( v1,  1LL,  *(void *)(v0 + 152)) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 248);
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8LL))(*(void *)(v0 + 224), *(void *)(v0 + 208));
    swift_bridgeObjectRetain_n(v2, 2LL);
    uint64_t v3 = sub_21984(v2);
    swift_bridgeObjectRelease(v2);
    uint64_t v52 = v3;
    sub_21ED4(&v52);
    uint64_t v15 = *(void *)(v0 + 240);
    uint64_t v14 = *(void *)(v0 + 248);
    uint64_t v17 = *(void *)(v0 + 224);
    uint64_t v16 = *(void *)(v0 + 232);
    uint64_t v18 = *(void *)(v0 + 200);
    uint64_t v48 = *(void *)(v0 + 192);
    uint64_t v49 = *(void *)(v0 + 168);
    uint64_t v50 = *(void *)(v0 + 144);
    uint64_t v51 = *(void *)(v0 + 136);
    uint64_t v19 = *(void **)(v0 + 88);
    swift_bridgeObjectRelease(v14);
    uint64_t v20 = (uint64_t)v52;
    uint64_t v21 = sub_19804((uint64_t)v52);
    swift_release(v20);
    swift_bridgeObjectRelease(v14);
    *uint64_t v19 = v21;
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v4 = *(void *)(v0 + 168);
  sub_23160(v1, v4, &qword_5AD60);
  uint64_t v5 = sub_72E4(&qword_5ADA8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, 1LL, v5) == 1)
  {
    sub_73D8(*(void *)(v0 + 168), &qword_5AD60);
LABEL_23:
    uint64_t v47 = (void *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 256) = v47;
    *uint64_t v47 = v0;
    v47[1] = sub_1E748;
    return TaskGroup.Iterator.next(isolation:)(*(void *)(v0 + 200), 0LL, 0LL, *(void *)(v0 + 208));
  }

  uint64_t v6 = *(uint64_t **)(v0 + 168);
  uint64_t v7 = *v6;
  uint64_t v8 = (*(uint64_t (**)(void, char *, void))(*(void *)(v0 + 184) + 32LL))( *(void *)(v0 + 192),  (char *)v6 + *(int *)(v5 + 48),  *(void *)(v0 + 176));
  uint64_t v9 = TemplatingResult.sections.getter(v8);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = type metadata accessor for TemplatingSection(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (v10)
  {
    (*(void (**)(void, unint64_t, uint64_t))(v12 + 16))( *(void *)(v0 + 144),  v9 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)),  v11);
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  uint64_t v23 = *(void *)(v0 + 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v23, v13, 1LL, v11);
  swift_bridgeObjectRelease(v9);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v23, 1LL, v11);
  if ((_DWORD)v24 == 1)
  {
    sub_73D8(*(void *)(v0 + 144), &qword_5AD40);
    unsigned __int8 v25 = *(void **)(v0 + 248);
LABEL_22:
    (*(void (**)(void, void))(*(void *)(v0 + 184) + 8LL))(*(void *)(v0 + 192), *(void *)(v0 + 176));
    *(void *)(v0 + 248) = v25;
    goto LABEL_23;
  }

  uint64_t v26 = *(void **)(v0 + 248);
  uint64_t v28 = *(void *)(v0 + 136);
  uint64_t v27 = *(void *)(v0 + 144);
  uint64_t v29 = *(void *)(v0 + 120);
  uint64_t v30 = *(void *)(v0 + 128);
  TemplatingSection.content.getter(v24);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v27, v11);
  uint64_t v32 = TemplatingText.text.getter(v31);
  uint64_t v34 = v33;
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
  *(void *)(v0 + 80) = v26;
  unint64_t result = sub_2CA88(v7);
  uint64_t v37 = v26[2];
  BOOL v38 = (v36 & 1) == 0;
  BOOL v39 = __OFADD__(v37, v38);
  uint64_t v40 = v37 + v38;
  if (v39)
  {
    __break(1u);
    goto LABEL_18;
  }

  LOBYTE(v28) = v36;
  uint64_t v26 = (void *)(v0 + 80);
  if (*(void *)(*(void *)(v0 + 248) + 24LL) >= v40)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_15;
    }
LABEL_18:
    unint64_t v43 = result;
    sub_2A4DC();
    unint64_t result = v43;
    unsigned __int8 v25 = (void *)*v26;
    if ((v28 & 1) != 0) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }

  sub_2A044(v40, isUniquelyReferenced_nonNull_native);
  unint64_t result = sub_2CA88(v7);
  if ((v28 & 1) != (v41 & 1)) {
    return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  }
LABEL_15:
  unsigned __int8 v25 = (void *)*v26;
  if ((v28 & 1) != 0)
  {
LABEL_16:
    uint64_t v42 = (uint64_t *)(v25[7] + 16 * result);
    swift_bridgeObjectRelease(v42[1]);
    *uint64_t v42 = v32;
    v42[1] = v34;
LABEL_21:
    swift_bridgeObjectRelease(0x8000000000000000LL);
    goto LABEL_22;
  }

LABEL_19:
  v25[(result >> 6) + 8] |= 1LL << result;
  *(void *)(v25[6] + 8 * result) = v7;
  uint64_t v44 = (uint64_t *)(v25[7] + 16 * result);
  uint64_t *v44 = v32;
  v44[1] = v34;
  uint64_t v45 = v25[2];
  BOOL v39 = __OFADD__(v45, 1LL);
  uint64_t v46 = v45 + 1;
  if (!v39)
  {
    v25[2] = v46;
    goto LABEL_21;
  }

  __break(1u);
  return result;
}

uint64_t sub_1EC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  uint64_t v7[2] = a1;
  uint64_t v8 = type metadata accessor for TemplatingResult(0LL);
  v7[7] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[8] = v9;
  v7[9] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1EC68, 0LL, 0LL);
}

uint64_t sub_1EC68()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_5AFBC);
  v0[10] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_1ECC0;
  return sub_26504(v0[9], v0[4], v0[5]);
}

uint64_t sub_1ECC0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1EDB8;
  }
  else {
    uint64_t v3 = sub_1ED24;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1ED24()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v5 = *(void **)(v0 + 16);
  uint64_t v6 = sub_72E4(&qword_5ADA8);
  uint64_t v7 = (char *)v5 + *(int *)(v6 + 48);
  void *v5 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v7, v1, v3);
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 0LL, 1LL, v6);
  swift_task_dealloc(*(void *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1EDB8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_errorRelease(*(void *)(v0 + 88));
  uint64_t v2 = sub_72E4(&qword_5ADA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  swift_task_dealloc(*(void *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1EE1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v83 = a1;
  uint64_t v82 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v81 = *(void *)(v82 - 8);
  uint64_t v2 = __chkstk_darwin(v82, v1);
  uint64_t v79 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v74 - v5;
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_SystemOffered(0LL);
  uint64_t v85 = *(void *)(v7 - 8);
  uint64_t v86 = v7;
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v74 - v12;
  uint64_t v84 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v89 = *(void *)(v84 - 8);
  uint64_t v15 = __chkstk_darwin(v84, v14);
  uint64_t v78 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v74 - v18;
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed(0LL);
  uint64_t v90 = *(void *)(v20 - 8);
  uint64_t v91 = v20;
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v77 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (char *)&v74 - v25;
  uint64_t v27 = sub_72E4(&qword_5A8B8);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v87 = *(void *)(v31 - 8);
  uint64_t v88 = v31;
  uint64_t v33 = __chkstk_darwin(v31, v32);
  uint64_t v35 = (char *)&v74 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Siri_Nlu_External_SystemDialogAct.init()(v33);
  uint64_t v36 = type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand(0LL);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  uint64_t v37 = UsoTaskBuilder_execute_common_VoiceCommand.init()();
  uint64_t v38 = sub_72E4((uint64_t *)&unk_5A860);
  uint64_t v39 = swift_allocObject(v38, 40LL, 7LL);
  *(_OWORD *)(v39 + 16) = xmmword_47B90;
  *(void *)(v39 + 3sub_6CEC((void *)v0 + 2) = v37;
  uint64_t v94 = v39;
  specialized Array._endMutation()(v39);
  uint64_t v40 = v94;
  swift_retain(v37);
  UsoBuilderOptions.init(longhandDefinedValues:)(1LL);
  uint64_t v41 = type metadata accessor for UsoBuilderOptions(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))(v30, 0LL, 1LL, v41);
  uint64_t v42 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)(v40, v30);
  swift_bridgeObjectRelease(v40);
  uint64_t v43 = sub_73D8((uint64_t)v30, &qword_5A8B8);
  uint64_t v44 = v26;
  uint64_t v45 = Siri_Nlu_External_UserWantedToProceed.init()(v43);
  uint64_t v46 = v19;
  uint64_t v47 = Siri_Nlu_External_UserDialogAct.init()(v45);
  Siri_Nlu_External_SystemOffered.init()(v47);
  uint64_t v48 = v6;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)(v42, 0LL);
  uint64_t v92 = v35;
  uint64_t v49 = v81;
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  uint64_t v51 = v79;
  uint64_t v75 = v48;
  v50(v79, v48, v82);
  uint64_t v76 = v44;
  Siri_Nlu_External_UserWantedToProceed.reference.setter(v51);
  uint64_t v52 = v77;
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v77, v44, v91);
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter(v52);
  uint64_t v53 = v78;
  uint64_t v54 = v84;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v78, v19, v84);
  Siri_Nlu_External_SystemOffered.offeredAct.setter(v53);
  uint64_t v55 = v85;
  uint64_t v56 = v86;
  uint64_t v57 = v80;
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v80, v13, v86);
  Siri_Nlu_External_SystemDialogAct.offered.setter(v57);
  swift_release(v37);
  swift_release(v42);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v75, v82);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v13, v56);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v46, v54);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v76, v91);
  uint64_t v59 = v87;
  uint64_t v58 = v88;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v60 = type metadata accessor for Logger(0LL);
  uint64_t v61 = sub_72B4(v60, (uint64_t)qword_5D478);
  uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  BOOL v64 = os_log_type_enabled(v62, v63);
  BOOL v65 = v92;
  if (v64)
  {
    uint64_t v66 = swift_slowAlloc(22LL, -1LL);
    uint64_t v67 = swift_slowAlloc(64LL, -1LL);
    v96[0] = v67;
    *(_DWORD *)uint64_t v66 = 136315394;
    uint64_t v94 = sub_24BA0(0xD000000000000029LL, 0x80000000000492A0LL, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v66 + 4, v66 + 12);
    *(_WORD *)(v66 + 1sub_6CEC((void *)v0 + 2) = 2080;
    type metadata accessor for SiriNLUTypesPrintUtils(0LL);
    swift_beginAccess(v65, v93, 0LL, 0LL);
    v95[2] = v58;
    v95[3] = sub_7D7C( (unint64_t *)&unk_5C170,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemDialogAct);
    uint64_t v68 = sub_8390(&v94);
    (*(void (**)(void *, char *, uint64_t))(v59 + 16))(v68, v65, v58);
    uint64_t v69 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)(&v94);
    unint64_t v71 = v70;
    sub_6CEC(&v94);
    uint64_t v94 = sub_24BA0(v69, v71, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v66 + 14, v66 + 22);
    unint64_t v72 = v71;
    BOOL v65 = v92;
    swift_bridgeObjectRelease(v72);
    _os_log_impl(&dword_0, v62, v63, "%s paraphrase systemDialogAct: %s", (uint8_t *)v66, 0x16u);
    swift_arrayDestroy(v67, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1LL, -1LL);
    swift_slowDealloc(v66, -1LL, -1LL);
  }

  swift_beginAccess(v65, &v94, 0LL, 0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v83, v65, v58);
  return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v65, v58);
}

uint64_t sub_1F680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v94 = a5;
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions(0LL);
  uint64_t v87 = *(void *)(v9 - 8);
  uint64_t v88 = v9;
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v86 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v13);
  uint64_t v89 = (char *)&v81 - v14;
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v90 = v15;
  uint64_t v91 = v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v85 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v81 - v21;
  uint64_t v23 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v92 = *(void *)(v23 - 8);
  uint64_t v93 = v23;
  uint64_t v25 = __chkstk_darwin(v23, v24);
  uint64_t v27 = (char *)&v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v25, v28);
  uint64_t v31 = (char *)&v81 - v30;
  __chkstk_darwin(v29, v32);
  uint64_t v34 = (char *)&v81 - v33;
  uint64_t v95 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v35 = *(void *)(v95 - 8);
  uint64_t v37 = __chkstk_darwin(v95, v36);
  uint64_t v39 = (char *)&v81 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Siri_Nlu_External_SystemDialogAct.init()(v37);
  if (qword_59D78 != -1) {
    swift_once(&qword_59D78, sub_21894);
  }
  uint64_t v40 = sub_22CEC(a1, a2, qword_5D3C8, unk_5D3D0);
  if (qword_59D80 != -1) {
    swift_once(&qword_59D80, sub_218B4);
  }
  uint64_t v41 = sub_22CEC(a3, a4, qword_5D3D8, unk_5D3E0);
  uint64_t v42 = sub_1FEA8(v40, (uint64_t)v34);
  uint64_t v84 = v35;
  Siri_Nlu_External_UserDialogAct.init()(v42);
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
  v43(v31, v34, v93);
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter(v31);
  uint64_t v44 = sub_1FEA8(v41, (uint64_t)v27);
  uint64_t v83 = v22;
  uint64_t v45 = v85;
  Siri_Nlu_External_UserDialogAct.init()(v44);
  uint64_t v82 = v27;
  v43(v31, v27, v93);
  uint64_t v46 = v45;
  uint64_t v47 = Siri_Nlu_External_UserDialogAct.userStatedTask.setter(v31);
  Siri_Nlu_External_SystemGaveOptions.init()(v47);
  uint64_t v48 = sub_72E4(&qword_5AD38);
  uint64_t v49 = *(void *)(v91 + 72);
  uint64_t v50 = *(unsigned __int8 *)(v91 + 80);
  uint64_t v51 = v91;
  uint64_t v52 = (v50 + 32) & ~v50;
  uint64_t v53 = swift_allocObject(v48, v52 + 2 * v49, v50 | 7);
  *(_OWORD *)(v53 + 16) = xmmword_47A40;
  uint64_t v54 = v53 + v52;
  uint64_t v55 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 16);
  uint64_t v56 = v90;
  v55(v54, v83, v90);
  v55(v54 + v49, v46, v56);
  uint64_t v57 = v89;
  Siri_Nlu_External_SystemGaveOptions.choices.setter(v53);
  uint64_t v58 = v86;
  uint64_t v59 = v87;
  uint64_t v60 = v88;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v86, v57, v88);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter(v58);
  swift_release(v40);
  swift_release(v41);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v60);
  uint64_t v61 = *(void (**)(char *, uint64_t))(v91 + 8);
  v61(v46, v56);
  uint64_t v62 = v93;
  os_log_type_t v63 = *(void (**)(char *, uint64_t))(v92 + 8);
  v63(v82, v93);
  v61(v83, v56);
  v63(v34, v62);
  uint64_t v64 = v95;
  uint64_t v65 = v84;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v66 = type metadata accessor for Logger(0LL);
  uint64_t v67 = sub_72B4(v66, (uint64_t)qword_5D478);
  uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
  os_log_type_t v69 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = swift_slowAlloc(22LL, -1LL);
    uint64_t v71 = swift_slowAlloc(64LL, -1LL);
    v99[0] = v71;
    *(_DWORD *)uint64_t v70 = 136315394;
    uint64_t v97 = sub_24BA0(0xD00000000000003ELL, 0x8000000000049240LL, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v70 + 4, v70 + 12);
    *(_WORD *)(v70 + 1sub_6CEC((void *)v0 + 2) = 2080;
    type metadata accessor for SiriNLUTypesPrintUtils(0LL);
    swift_beginAccess(v39, v96, 0LL, 0LL);
    v98[2] = v64;
    v98[3] = sub_7D7C( (unint64_t *)&unk_5C170,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemDialogAct);
    unint64_t v72 = sub_8390(&v97);
    (*(void (**)(void *, char *, uint64_t))(v65 + 16))(v72, v39, v64);
    uint64_t v73 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)(&v97);
    uint64_t v74 = v39;
    uint64_t v75 = v65;
    unint64_t v77 = v76;
    sub_6CEC(&v97);
    uint64_t v97 = sub_24BA0(v73, v77, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v70 + 14, v70 + 22);
    unint64_t v78 = v77;
    uint64_t v65 = v75;
    uint64_t v39 = v74;
    swift_bridgeObjectRelease(v78);
    _os_log_impl(&dword_0, v68, v69, "%s paraphrase systemDialogAct: %s", (uint8_t *)v70, 0x16u);
    swift_arrayDestroy(v71, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v70, -1LL, -1LL);
  }

  uint64_t v79 = v94;
  swift_beginAccess(v39, &v97, 0LL, 0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v79, v39, v64);
  return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v39, v64);
}

uint64_t sub_1FEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_72E4(&qword_5A8B8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_72E4((uint64_t *)&unk_5A860);
  uint64_t v14 = swift_allocObject(v13, 40LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_47B90;
  *(void *)(v14 + 3sub_6CEC((void *)v0 + 2) = a1;
  uint64_t v22 = v14;
  specialized Array._endMutation()(v14);
  uint64_t v15 = v22;
  swift_retain(a1);
  UsoBuilderOptions.init(longhandDefinedValues:)(1LL);
  uint64_t v16 = type metadata accessor for UsoBuilderOptions(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v12, 0LL, 1LL, v16);
  uint64_t v17 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)(v15, v12);
  swift_bridgeObjectRelease(v15);
  uint64_t v18 = sub_73D8((uint64_t)v12, &qword_5A8B8);
  Siri_Nlu_External_UserStatedTask.init()(v18);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)(v17, 0LL);
  if (v2)
  {
    uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(a2, v19);
  }

  else
  {
    Siri_Nlu_External_UserStatedTask.task.setter(v8);
  }

  return swift_release(v17);
}

uint64_t sub_20048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v49 = a1;
  uint64_t v50 = a4;
  uint64_t v5 = type metadata accessor for Parse(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Input(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for USOParse(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin();
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = a2;
  uint64_t v18 = PluginAction.input.getter(v15);
  Input.parse.getter(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v8, v5) == enum case for Parse.uso(_:))
  {
    (*(void (**)(char *, uint64_t))(v6 + 96))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v8, v13);
    Swift::Bool v19 = USOParse.isAppShortcutInvocation()();
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }

  else
  {
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    Swift::Bool v19 = 0;
  }

  uint64_t v21 = Parse.DirectInvocation.identifier.getter(v20);
  uint64_t v23 = v22;
  uint64_t v24 = (void *)static SiriKitDirectInvocationPayloads.confirm.getter();
  id v25 = [v24 identifier];

  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v28 = v27;

  if (v21 == v26 && v23 == v28)
  {
    swift_bridgeObjectRelease_n(v23, 2LL);
    goto LABEL_8;
  }

  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v26, v28, 0LL);
  swift_bridgeObjectRelease(v23);
  uint64_t v30 = swift_bridgeObjectRelease(v28);
  if ((v29 & 1) != 0)
  {
LABEL_8:
    uint64_t v31 = type metadata accessor for PluginAction(0LL);
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    if (v19) {
      uint64_t v34 = v47;
    }
    else {
      uint64_t v34 = v48;
    }
    goto LABEL_11;
  }

  uint64_t v37 = Parse.DirectInvocation.identifier.getter(v30);
  uint64_t v39 = v38;
  uint64_t v40 = (void *)static SiriKitDirectInvocationPayloads.reject.getter();
  id v41 = [v40 identifier];

  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  uint64_t v44 = v43;

  if (v37 == v42 && v39 == v44)
  {
    swift_bridgeObjectRelease_n(v39, 2LL);
  }

  else
  {
    char v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v42, v44, 0LL);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v44);
    if ((v45 & 1) == 0)
    {
      uint64_t v46 = type metadata accessor for PluginAction(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))( v50,  1LL,  1LL,  v46);
    }
  }

  uint64_t v31 = type metadata accessor for PluginAction(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
  if (v19) {
    uint64_t v34 = v48;
  }
  else {
    uint64_t v34 = v47;
  }
LABEL_11:
  uint64_t v35 = v50;
  v33(v50, v34, v31);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v35, 0LL, 1LL, v31);
}

uint64_t sub_20398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v136 = a3;
  uint64_t v141 = a2;
  uint64_t v143 = a4;
  uint64_t v5 = type metadata accessor for Google_Protobuf_StringValue(0LL);
  uint64_t v133 = *(void *)(v5 - 8);
  uint64_t v134 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v132 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v142 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier(0LL);
  uint64_t v135 = *(void *)(v142 - 8);
  __chkstk_darwin(v142, v8);
  uint64_t v144 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v124 = *(void *)(v125 - 8);
  __chkstk_darwin(v125, v10);
  unint64_t v123 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin(v122, v12);
  uint64_t v120 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Parse(0LL);
  uint64_t v139 = *(void *)(v14 - 8);
  unint64_t v140 = (char *)v14;
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Input(0LL);
  uint64_t v137 = *(void *)(v18 - 8);
  uint64_t v138 = (void (*)(char *, uint64_t))v18;
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for USOParse(0LL);
  uint64_t v130 = *(void *)(v22 - 8);
  uint64_t v131 = v22;
  __chkstk_darwin(v22, v23);
  uint64_t v129 = (char *)&v118 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_72E4(&qword_5AD30);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  uint64_t v127 = (char *)&v118 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (char *)&v118 - v30;
  uint64_t v32 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v35 = __chkstk_darwin(v32, v34);
  unint64_t v126 = (char *)&v118 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v35, v37);
  uint64_t v39 = (char *)&v118 - v38;
  uint64_t v40 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v43 = __chkstk_darwin(v40, v42);
  char v45 = (char *)&v118 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v128 = a1;
  uint64_t v46 = USOParse.userParse.getter(v43);
  Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v46);
  uint64_t v47 = *(void (**)(char *, uint64_t))(v33 + 8);
  v47(v39, v32);
  uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  if (v48(v31, 1LL, v40) == 1)
  {
    sub_73D8((uint64_t)v31, &qword_5AD30);
LABEL_3:
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v49 = type metadata accessor for Logger(0LL);
    uint64_t v50 = sub_72B4(v49, (uint64_t)qword_5D478);
    uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v54 = swift_slowAlloc(32LL, -1LL);
      v146[0] = v54;
      *(_DWORD *)uint64_t v53 = 136315138;
      uint64_t v145 = sub_24BA0(0xD000000000000028LL, 0x80000000000491F0LL, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v53 + 4, v53 + 12);
      _os_log_impl( &dword_0,  v51,  v52,  "%s could not resolve App Shortcut Ambiguous First Run response from USO parse",  v53,  0xCu);
      swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    uint64_t v55 = v143;
    uint64_t v56 = type metadata accessor for PluginAction(0LL);
    uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56LL);
    uint64_t v58 = v55;
LABEL_8:
    uint64_t v59 = 1LL;
    return v57(v58, v59, 1LL, v56);
  }

  uint64_t v119 = v47;
  uint64_t v60 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 32))(v45, v31, v40);
  uint64_t v61 = v141;
  uint64_t v62 = PluginAction.input.getter(v60);
  Input.parse.getter(v62);
  (*(void (**)(char *, void))(v137 + 8))(v21, v138);
  uint64_t v64 = v139;
  os_log_type_t v63 = v140;
  if ((*(unsigned int (**)(char *, char *))(v139 + 88))(v17, v140) == enum case for Parse.uso(_:))
  {
    (*(void (**)(char *, char *))(v64 + 96))(v17, v63);
    uint64_t v65 = v129;
    uint64_t v66 = v130;
    uint64_t v67 = v17;
    uint64_t v68 = v131;
    (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v129, v67, v131);
    BOOL v69 = USOParse.isAppShortcutInvocation()();
    uint64_t v70 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v65, v68);
  }

  else
  {
    uint64_t v70 = (*(uint64_t (**)(char *, char *))(v64 + 8))(v17, v63);
    BOOL v69 = 0;
  }

  if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter(v70) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v45, v40);
    uint64_t v71 = type metadata accessor for PluginAction(0LL);
    uint64_t v72 = *(void *)(v71 - 8);
    uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
    if (v69) {
      uint64_t v74 = v61;
    }
    else {
      uint64_t v74 = v136;
    }
    goto LABEL_20;
  }

  uint64_t v75 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
  if ((v75 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v45, v40);
    uint64_t v71 = type metadata accessor for PluginAction(0LL);
    uint64_t v72 = *(void *)(v71 - 8);
    uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
    if (v69) {
      uint64_t v74 = v136;
    }
    else {
      uint64_t v74 = v61;
    }
    goto LABEL_20;
  }

  uint64_t v78 = v41;
  unint64_t v140 = v45;
  uint64_t v79 = v126;
  uint64_t v80 = USOParse.userParse.getter(v75);
  uint64_t v81 = Siri_Nlu_External_UserParse.userDialogActs.getter(v80);
  v119(v79, v32);
  if (*(void *)(v81 + 16))
  {
    uint64_t v82 = v78;
    uint64_t v83 = (uint64_t)v127;
    (*(void (**)(char *, unint64_t, uint64_t))(v78 + 16))( v127,  v81 + ((*(unsigned __int8 *)(v78 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80)),  v40);
    uint64_t v84 = 0LL;
  }

  else
  {
    uint64_t v84 = 1LL;
    uint64_t v82 = v78;
    uint64_t v83 = (uint64_t)v127;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v83, v84, 1LL, v40);
  swift_bridgeObjectRelease(v81);
  if (v48((char *)v83, 1LL, v40) == 1)
  {
    sub_73D8(v83, &qword_5AD30);
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v85 = type metadata accessor for Logger(0LL);
    uint64_t v86 = sub_72B4(v85, (uint64_t)qword_5D478);
    uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
    os_log_type_t v88 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v89 = 0;
      _os_log_impl( &dword_0,  v87,  v88,  ".appShortcutCollisionWithEnablement confirmation uso parse does not have identifiers",  v89,  2u);
      swift_slowDealloc(v89, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v78 + 8))(v140, v40);
    uint64_t v56 = type metadata accessor for PluginAction(0LL);
    uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56LL);
    uint64_t v58 = v143;
    goto LABEL_8;
  }

  uint64_t v90 = v120;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  uint64_t v91 = *(uint64_t (**)(uint64_t, uint64_t))(v82 + 8);
  uint64_t v92 = v91(v83, v40);
  uint64_t v93 = v123;
  Siri_Nlu_External_UserStatedTask.task.getter(v92);
  uint64_t v94 = (*(uint64_t (**)(char *, uint64_t))(v121 + 8))(v90, v122);
  uint64_t v95 = Siri_Nlu_External_UsoGraph.identifiers.getter(v94);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v93, v125);
  uint64_t v96 = *(void *)(v95 + 16);
  if (!v96)
  {
    swift_bridgeObjectRelease(v95);
LABEL_53:
    v91((uint64_t)v140, v40);
    goto LABEL_3;
  }

  uint64_t v138 = (void (*)(char *, uint64_t))v91;
  uint64_t v139 = v40;
  LODWORD(v131) = v69;
  uint64_t v97 = *(unsigned __int8 *)(v135 + 80);
  uint64_t v137 = v95;
  uint64_t v98 = v95 + ((v97 + 32) & ~v97);
  uint64_t v99 = *(void *)(v135 + 72);
  os_log_type_t v100 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v135 + 16);
  uint64_t v101 = v132;
  for (uint64_t i = v100(v144, v98, v142); ; uint64_t i = v100(v144, v98, v142))
  {
    uint64_t v104 = Siri_Nlu_External_UsoEntityIdentifier.namespace.getter(i);
    uint64_t v105 = Google_Protobuf_StringValue.value.getter(v104);
    uint64_t v107 = v106;
    (*(void (**)(char *, uint64_t))(v133 + 8))(v101, v134);
    if (v105 == 0xD000000000000018LL && v107 == 0x8000000000049220LL)
    {
      uint64_t v108 = swift_bridgeObjectRelease(0x8000000000049220LL);
    }

    else
    {
      char v109 = _stringCompareWithSmolCheck(_:_:expecting:)(v105, v107, 0xD000000000000018LL, 0x8000000000049220LL, 0LL);
      uint64_t v108 = swift_bridgeObjectRelease(v107);
      if ((v109 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v135 + 8))(v144, v142);
        goto LABEL_34;
      }
    }

    uint64_t v110 = Siri_Nlu_External_UsoEntityIdentifier.value.getter(v108);
    uint64_t v112 = v111;
    if (qword_59D78 != -1) {
      swift_once(&qword_59D78, sub_21894);
    }
    if (v110 == qword_5D3C8 && v112 == unk_5D3D0) {
      break;
    }
    char v113 = _stringCompareWithSmolCheck(_:_:expecting:)(v110, v112, qword_5D3C8, unk_5D3D0, 0LL);
    uint64_t v114 = swift_bridgeObjectRelease(v112);
    if ((v113 & 1) != 0) {
      goto LABEL_55;
    }
    uint64_t v115 = Siri_Nlu_External_UsoEntityIdentifier.value.getter(v114);
    uint64_t v117 = v116;
    if (qword_59D80 != -1) {
      swift_once(&qword_59D80, sub_218B4);
    }
    if (v115 == qword_5D3D8 && v117 == unk_5D3E0)
    {
      swift_bridgeObjectRelease(v117);
      (*(void (**)(char *, uint64_t))(v135 + 8))(v144, v142);
LABEL_58:
      swift_bridgeObjectRelease(v137);
      v138(v140, v139);
      uint64_t v71 = type metadata accessor for PluginAction(0LL);
      uint64_t v72 = *(void *)(v71 - 8);
      uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
      if ((v131 & 1) != 0) {
        uint64_t v74 = v136;
      }
      else {
        uint64_t v74 = v141;
      }
      goto LABEL_20;
    }

    char v103 = _stringCompareWithSmolCheck(_:_:expecting:)(v115, v117, qword_5D3D8, unk_5D3E0, 0LL);
    swift_bridgeObjectRelease(v117);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v144, v142);
    if ((v103 & 1) != 0) {
      goto LABEL_58;
    }
LABEL_34:
    v98 += v99;
    if (!--v96)
    {
      swift_bridgeObjectRelease(v137);
      uint64_t v91 = (uint64_t (*)(uint64_t, uint64_t))v138;
      uint64_t v40 = v139;
      goto LABEL_53;
    }
  }

  swift_bridgeObjectRelease(v112);
LABEL_55:
  (*(void (**)(char *, uint64_t))(v135 + 8))(v144, v142);
  swift_bridgeObjectRelease(v137);
  v138(v140, v139);
  uint64_t v71 = type metadata accessor for PluginAction(0LL);
  uint64_t v72 = *(void *)(v71 - 8);
  uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
  if ((v131 & 1) != 0) {
    uint64_t v74 = v141;
  }
  else {
    uint64_t v74 = v136;
  }
LABEL_20:
  uint64_t v76 = v143;
  v73(v143, v74, v71);
  uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
  uint64_t v58 = v76;
  uint64_t v59 = 0LL;
  uint64_t v56 = v71;
  return v57(v58, v59, 1LL, v56);
}

char *sub_20EA0()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_appShortcutAction];
  uint64_t v2 = type metadata accessor for PluginAction(0LL);
  uint64_t v3 = *(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL);
  v3(v1, v2);
  v3(&v0[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_otherAction], v2);
  uint64_t v4 = &v0[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_appShortcutInvocation];
  uint64_t v5 = type metadata accessor for AppShortcutInvocation(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  sub_231A4((uint64_t)&v0[OBJC_IVAR____TtC17CAMRootFlowPlugin25AppShortcutEnablementFlow_state]);
  return v0;
}

uint64_t sub_20F7C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_20FA0()
{
  return type metadata accessor for AppShortcutEnablementFlow(0LL);
}

uint64_t type metadata accessor for AppShortcutEnablementFlow(uint64_t a1)
{
  return sub_6B98(a1, (uint64_t *)&unk_5AAB8, (uint64_t)&nominal type descriptor for AppShortcutEnablementFlow);
}

uint64_t sub_20FBC(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = "(";
  v6[2] = "(";
  v6[3] = "(";
  v6[4] = "(";
  v6[5] = "(";
  v6[6] = "(";
  v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[8] = "(";
  uint64_t result = type metadata accessor for PluginAction(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v7 = *(void *)(result - 8) + 64LL;
    uint64_t v8 = v7;
    uint64_t result = type metadata accessor for AppShortcutInvocation(319LL);
    if (v4 <= 0x3F)
    {
      uint64_t v9 = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for AppShortcutEnablementFlow.State(319LL);
      if (v5 <= 0x3F)
      {
        uint64_t v10 = *(void *)(result - 8) + 64LL;
        return swift_updateClassMetadata2(a1, 256LL, 13LL, v6, a1 + 80);
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for AppShortcutEnablementFlow.State(uint64_t a1)
{
  return sub_6B98(a1, qword_5AD10, (uint64_t)&nominal type descriptor for AppShortcutEnablementFlow.State);
}

uint64_t *sub_210A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = sub_72E4(&qword_5C040);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v10 = type metadata accessor for PluginAction(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 2LL, v7);
    }
  }

  return a1;
}

uint64_t sub_2117C(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5C040);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(a1, 2LL, v2);
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for PluginAction(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  return result;
}

void *sub_211E4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_72E4(&qword_5C040);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v8 = type metadata accessor for PluginAction(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *sub_21298(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_72E4(&qword_5C040);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2LL, v6);
  int v10 = v8(a2, 2LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for PluginAction(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 24LL))(a1, a2, v13);
      return a1;
    }

    sub_73D8((uint64_t)a1, &qword_5C040);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v11 = type metadata accessor for PluginAction(0LL);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  return a1;
}

void *sub_213A4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_72E4(&qword_5C040);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v8 = type metadata accessor for PluginAction(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *sub_21458(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_72E4(&qword_5C040);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2LL, v6);
  int v10 = v8(a2, 2LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for PluginAction(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 40LL))(a1, a2, v13);
      return a1;
    }

    sub_73D8((uint64_t)a1, &qword_5C040);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v11 = type metadata accessor for PluginAction(0LL);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  return a1;
}

uint64_t sub_21564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_21570);
}

uint64_t sub_21570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5C040);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_215C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_215CC);
}

uint64_t sub_215CC(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_72E4(&qword_5C040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, v5, a3, v6);
}

uint64_t sub_21624(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5C040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(a1, 2LL, v2);
}

uint64_t sub_21660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5C040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, 2LL, v4);
}

uint64_t sub_216A4(uint64_t a1)
{
  uint64_t result = type metadata accessor for PluginAction(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 2LL);
    return 0LL;
  }

  return result;
}

BOOL sub_216F8(uint64_t a1)
{
  return sub_19904(a1);
}

uint64_t sub_2171C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for AppShortcutEnablementFlow(0LL);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_21778(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_5AACC);
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_197FC;
  return sub_1A6AC(a1);
}

uint64_t sub_217CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AppShortcutEnablementFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

unint64_t sub_217F4(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0xD000000000000025LL;
  }
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  return 0xD000000000000014LL;
}

unint64_t sub_2188C()
{
  return sub_217F4(*(void *)v0, *(void **)(v0 + 8));
}

void sub_21894()
{
  qword_5D3C8 = 0x747065636361LL;
  unk_5D3D0 = 0xE600000000000000LL;
}

void sub_218B4()
{
  qword_5D3D8 = 0x7463656A6572LL;
  unk_5D3E0 = 0xE600000000000000LL;
}

uint64_t sub_218D4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  Swift::String v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *Swift::String v4 = v2;
  v4[1] = sub_21938;
  return v6(a1);
}

uint64_t sub_21938()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void *sub_21984(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_72E4(&qword_5ADB0);
  Swift::String v4 = (void *)swift_allocObject(v3, 24 * v1 + 32, 7LL);
  size_t v5 = j__malloc_size(v4);
  void v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  uint64_t v6 = sub_22AD4((uint64_t)&v9, v4 + 4, v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_23088(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

double sub_21A78@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  Swift::String v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_2C9F4(a1, a2);
  LOBYTE(asub_6CEC((void *)v0 + 2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *Swift::String v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_2A2F8();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_22E38((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    sub_21B68(v9, v12);
    uint64_t v13 = *v4;
    *Swift::String v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

unint64_t sub_21B68(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        char v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          uint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
  }
}

_OWORD *sub_21D3C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v12 = sub_2C9F4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_6CEC(v19);
        return sub_22E38(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_2A2F8();
      goto LABEL_7;
    }

    sub_29D48(v15, a4 & 1);
    unint64_t v21 = sub_2C9F4(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_21E6C(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_21E6C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  double result = sub_22E38(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

Swift::Int sub_21ED4(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = (void *)sub_22CD8(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_21F3C(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_21F3C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      uint64_t v91 = 0LL;
      uint64_t v92 = *a1;
      uint64_t v93 = 1LL;
      while (1)
      {
        uint64_t v94 = *(void *)(v92 + 24 * v93);
        uint64_t v95 = v91;
        do
        {
          uint64_t v96 = v92 + v95;
          if (v94 >= *(void *)(v92 + v95)) {
            break;
          }
          if (!v92) {
            goto LABEL_142;
          }
          uint64_t v97 = (void *)(v92 + v95);
          uint64_t v98 = *(void *)(v92 + v95 + 32);
          uint64_t v99 = *(void *)(v92 + v95 + 40);
          *(_OWORD *)(v92 + v95 + 24) = *(_OWORD *)v96;
          *(void *)(v92 + v95 + 40) = *(void *)(v96 + 16);
          *uint64_t v97 = v94;
          v97[1] = v98;
          v97[2] = v99;
          v95 -= 24LL;
        }

        while (v95 != -24);
        ++v93;
        v91 += 24LL;
        if (v93 == v3) {
          return result;
        }
      }
    }

    goto LABEL_138;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1)
  {
LABEL_147:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
    return result;
  }

  Swift::Int v6 = result;
  uint64_t v107 = a1;
  if (v3 < 2)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      uint64_t v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }

    char v109 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = sub_72E4(&qword_5ADB8);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(void *)(v9 + 16) = v7;
    char v109 = (void *)v9;
    __dst = (char *)(v9 + 32);
  }

  Swift::Int v11 = 0LL;
  uint64_t v12 = *a1;
  uint64_t v108 = *a1 + 48;
  uint64_t v106 = *a1 - 24;
  uint64_t v13 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v110 = v6;
  Swift::Int v111 = v3;
  uint64_t v112 = v12;
  while (1)
  {
    Swift::Int v15 = v11++;
    if (v11 < v3)
    {
      uint64_t v16 = *(void *)(v12 + 24 * v11);
      uint64_t v17 = *(void *)(v12 + 24 * v15);
      Swift::Int v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        uint64_t v18 = (uint64_t *)(v108 + 24 * v15);
        uint64_t v19 = v16;
        while (1)
        {
          uint64_t v21 = *v18;
          v18 += 3;
          uint64_t v20 = v21;
          if (v16 < v17 == v21 >= v19) {
            break;
          }
          ++v11;
          uint64_t v19 = v20;
          if (v3 == v11)
          {
            Swift::Int v11 = v3;
            break;
          }
        }
      }

      if (v16 < v17)
      {
        if (v11 < v15) {
          goto LABEL_139;
        }
        if (v15 < v11)
        {
          uint64_t v22 = 24 * v11;
          uint64_t v23 = 24 * v15;
          Swift::Int v24 = v11;
          Swift::Int v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12) {
                goto LABEL_145;
              }
              uint64_t v26 = v12 + v23;
              uint64_t v27 = v12 + v22;
              uint64_t v28 = *(void *)(v12 + v23 + 16);
              __int128 v29 = *(_OWORD *)(v12 + v23);
              uint64_t v30 = *(void *)(v12 + v22 - 8);
              *(_OWORD *)uint64_t v26 = *(_OWORD *)(v12 + v22 - 24);
              *(void *)(v26 + 16) = v30;
              *(_OWORD *)(v27 - 24) = v29;
              *(void *)(v27 - sub_6CEC((void *)v0 + 8) = v28;
            }

            ++v25;
            v22 -= 24LL;
            v23 += 24LL;
          }

          while (v25 < v24);
        }
      }
    }

    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15)) {
        goto LABEL_137;
      }
      if (v11 - v15 < v6)
      {
        Swift::Int v31 = v15 + v6;
        if (__OFADD__(v15, v6)) {
          goto LABEL_140;
        }
        if (v31 >= v3) {
          Swift::Int v31 = v3;
        }
        if (v31 < v15) {
          goto LABEL_141;
        }
        if (v11 != v31)
        {
          uint64_t v32 = v106 + 24 * v11;
          do
          {
            uint64_t v33 = *(void *)(v12 + 24 * v11);
            Swift::Int v34 = v15;
            uint64_t v35 = v32;
            do
            {
              if (v33 >= *(void *)v35) {
                break;
              }
              if (!v12) {
                goto LABEL_143;
              }
              uint64_t v36 = *(void *)(v35 + 32);
              uint64_t v37 = *(void *)(v35 + 40);
              *(_OWORD *)(v35 + 24) = *(_OWORD *)v35;
              *(void *)(v35 + 40) = *(void *)(v35 + 16);
              *(void *)uint64_t v35 = v33;
              *(void *)(v35 + sub_6CEC((void *)v0 + 8) = v36;
              *(void *)(v35 + 16) = v37;
              v35 -= 24LL;
              ++v34;
            }

            while (v11 != v34);
            ++v11;
            v32 += 24LL;
          }

          while (v11 != v31);
          Swift::Int v11 = v31;
        }
      }
    }

    if (v11 < v15)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
      uint64_t v13 = sub_2290C(0LL, *((void *)v13 + 2) + 1LL, 1, v13);
    }
    unint64_t v39 = *((void *)v13 + 2);
    unint64_t v38 = *((void *)v13 + 3);
    unint64_t v14 = v39 + 1;
    uint64_t v12 = v112;
    if (v39 >= v38 >> 1)
    {
      os_log_type_t v88 = sub_2290C((char *)(v38 > 1), v39 + 1, 1, v13);
      uint64_t v12 = v112;
      uint64_t v13 = v88;
    }

    *((void *)v13 + sub_6CEC((void *)v0 + 2) = v14;
    uint64_t v40 = v13 + 32;
    uint64_t v41 = &v13[16 * v39 + 32];
    *(void *)uint64_t v41 = v15;
    *((void *)v41 + 1) = v11;
    if (v39) {
      break;
    }
    unint64_t v14 = 1LL;
LABEL_15:
    Swift::Int v6 = v110;
    Swift::Int v3 = v111;
    if (v11 >= v111)
    {
      uint64_t v10 = v109;
LABEL_104:
      uint64_t v90 = v13;
      char v109 = v10;
      if (v14 < 2) {
        goto LABEL_95;
      }
      uint64_t v100 = *v107;
      while (1)
      {
        unint64_t v101 = v14 - 2;
        if (v14 < 2) {
          break;
        }
        if (!v100) {
          goto LABEL_146;
        }
        uint64_t v89 = v90;
        uint64_t v102 = *(void *)&v90[16 * v101 + 32];
        uint64_t v103 = *(void *)&v90[16 * v14 + 24];
        sub_22658( (char *)(v100 + 24 * v102),  (char *)(v100 + 24LL * *(void *)&v90[16 * v14 + 16]),  v100 + 24 * v103,  __dst);
        if (v1) {
          goto LABEL_94;
        }
        if (v103 < v102) {
          goto LABEL_134;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0) {
          uint64_t v89 = sub_22AC0((uint64_t)v89);
        }
        if (v101 >= *((void *)v89 + 2)) {
          goto LABEL_135;
        }
        uint64_t v104 = &v89[16 * v101 + 32];
        *(void *)uint64_t v104 = v102;
        *((void *)v104 + 1) = v103;
        unint64_t v105 = *((void *)v89 + 2);
        if (v14 > v105) {
          goto LABEL_136;
        }
        memmove(&v89[16 * v14 + 16], &v89[16 * v14 + 32], 16 * (v105 - v14));
        uint64_t v90 = v89;
        *((void *)v89 + sub_6CEC((void *)v0 + 2) = v105 - 1;
        unint64_t v14 = v105 - 1;
        if (v105 <= 2) {
          goto LABEL_95;
        }
      }

LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }

  while (1)
  {
    unint64_t v42 = v14 - 1;
    if (v14 >= 4)
    {
      uint64_t v47 = &v40[16 * v14];
      uint64_t v48 = *((void *)v47 - 8);
      uint64_t v49 = *((void *)v47 - 7);
      BOOL v53 = __OFSUB__(v49, v48);
      uint64_t v50 = v49 - v48;
      if (v53) {
        goto LABEL_121;
      }
      uint64_t v52 = *((void *)v47 - 6);
      uint64_t v51 = *((void *)v47 - 5);
      BOOL v53 = __OFSUB__(v51, v52);
      uint64_t v45 = v51 - v52;
      char v46 = v53;
      if (v53) {
        goto LABEL_122;
      }
      unint64_t v54 = v14 - 2;
      uint64_t v55 = &v40[16 * v14 - 32];
      uint64_t v57 = *(void *)v55;
      uint64_t v56 = *((void *)v55 + 1);
      BOOL v53 = __OFSUB__(v56, v57);
      uint64_t v58 = v56 - v57;
      if (v53) {
        goto LABEL_124;
      }
      BOOL v53 = __OFADD__(v45, v58);
      uint64_t v59 = v45 + v58;
      if (v53) {
        goto LABEL_127;
      }
      if (v59 >= v50)
      {
        unint64_t v77 = &v40[16 * v42];
        uint64_t v79 = *(void *)v77;
        uint64_t v78 = *((void *)v77 + 1);
        BOOL v53 = __OFSUB__(v78, v79);
        uint64_t v80 = v78 - v79;
        if (v53) {
          goto LABEL_131;
        }
        BOOL v70 = v45 < v80;
        goto LABEL_83;
      }
    }

    else
    {
      if (v14 != 3)
      {
        uint64_t v71 = *((void *)v13 + 4);
        uint64_t v72 = *((void *)v13 + 5);
        BOOL v53 = __OFSUB__(v72, v71);
        uint64_t v64 = v72 - v71;
        char v65 = v53;
        goto LABEL_77;
      }

      uint64_t v44 = *((void *)v13 + 4);
      uint64_t v43 = *((void *)v13 + 5);
      BOOL v53 = __OFSUB__(v43, v44);
      uint64_t v45 = v43 - v44;
      char v46 = v53;
    }

    if ((v46 & 1) != 0) {
      goto LABEL_123;
    }
    unint64_t v54 = v14 - 2;
    uint64_t v60 = &v40[16 * v14 - 32];
    uint64_t v62 = *(void *)v60;
    uint64_t v61 = *((void *)v60 + 1);
    BOOL v63 = __OFSUB__(v61, v62);
    uint64_t v64 = v61 - v62;
    char v65 = v63;
    if (v63) {
      goto LABEL_126;
    }
    uint64_t v66 = &v40[16 * v42];
    uint64_t v68 = *(void *)v66;
    uint64_t v67 = *((void *)v66 + 1);
    BOOL v53 = __OFSUB__(v67, v68);
    uint64_t v69 = v67 - v68;
    if (v53) {
      goto LABEL_129;
    }
    if (__OFADD__(v64, v69)) {
      goto LABEL_130;
    }
    if (v64 + v69 >= v45)
    {
      BOOL v70 = v45 < v69;
LABEL_83:
      if (v70) {
        unint64_t v42 = v54;
      }
      goto LABEL_85;
    }

LABEL_77:
    if ((v65 & 1) != 0) {
      goto LABEL_125;
    }
    uint64_t v73 = &v40[16 * v42];
    uint64_t v75 = *(void *)v73;
    uint64_t v74 = *((void *)v73 + 1);
    BOOL v53 = __OFSUB__(v74, v75);
    uint64_t v76 = v74 - v75;
    if (v53) {
      goto LABEL_128;
    }
    if (v76 < v64) {
      goto LABEL_15;
    }
LABEL_85:
    unint64_t v81 = v42 - 1;
    if (v42 - 1 >= v14)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }

    if (!v12) {
      goto LABEL_144;
    }
    uint64_t v82 = v13;
    uint64_t v83 = &v40[16 * v81];
    uint64_t v84 = *(void *)v83;
    uint64_t v85 = &v40[16 * v42];
    uint64_t v86 = *((void *)v85 + 1);
    sub_22658((char *)(v12 + 24LL * *(void *)v83), (char *)(v12 + 24LL * *(void *)v85), v12 + 24 * v86, __dst);
    if (v1) {
      break;
    }
    if (v86 < v84) {
      goto LABEL_118;
    }
    if (v42 > *((void *)v82 + 2)) {
      goto LABEL_119;
    }
    *(void *)uint64_t v83 = v84;
    *(void *)&v40[16 * v81 + 8] = v86;
    unint64_t v87 = *((void *)v82 + 2);
    if (v42 >= v87) {
      goto LABEL_120;
    }
    uint64_t v13 = v82;
    unint64_t v14 = v87 - 1;
    memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
    *((void *)v82 + sub_6CEC((void *)v0 + 2) = v87 - 1;
    uint64_t v12 = v112;
    if (v87 <= 2) {
      goto LABEL_15;
    }
  }

  uint64_t v89 = v82;
LABEL_94:
  uint64_t v90 = v89;
LABEL_95:
  swift_bridgeObjectRelease(v90);
  v109[2] = 0LL;
  return swift_bridgeObjectRelease(v109);
}

uint64_t sub_22658(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v26 = __src;
  Swift::Int v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      uint64_t v16 = &v4[24 * v11];
      Swift::Int v24 = v16;
      uint64_t v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v17 = a3 - 24;
        uint64_t v18 = v6;
        while (1)
        {
          uint64_t v19 = (char *)(v17 + 24);
          uint64_t v20 = *((void *)v18 - 3);
          v18 -= 24;
          if (*((void *)v16 - 3) >= v20)
          {
            Swift::Int v24 = v16 - 24;
            if (v19 < v16 || v17 >= (unint64_t)v16 || v19 != v16)
            {
              __int128 v22 = *(_OWORD *)(v16 - 24);
              *(void *)(v17 + 16) = *((void *)v16 - 1);
              *(_OWORD *)unint64_t v17 = v22;
            }

            uint64_t v18 = v6;
            v16 -= 24;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }

          else
          {
            if (v19 != v6 || v17 >= (unint64_t)v6)
            {
              __int128 v21 = *(_OWORD *)v18;
              *(void *)(v17 + 16) = *((void *)v18 + 2);
              *(_OWORD *)unint64_t v17 = v21;
            }

            uint64_t v26 = v18;
            if (v18 <= v7) {
              goto LABEL_38;
            }
          }

          v17 -= 24LL;
          Swift::Int v6 = v18;
          if (v16 <= v4) {
            goto LABEL_38;
          }
        }
      }

      goto LABEL_38;
    }
  }

  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[24 * v9];
    Swift::Int v24 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4)
          {
            __int128 v15 = *(_OWORD *)v4;
            *((void *)v7 + sub_6CEC((void *)v0 + 2) = *((void *)v4 + 2);
            *(_OWORD *)uint64_t v7 = v15;
          }

          v4 += 24;
          Swift::Int v25 = v4;
          uint64_t v13 = v6;
        }

        else
        {
          uint64_t v13 = v6 + 24;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
          {
            __int128 v14 = *(_OWORD *)v6;
            *((void *)v7 + sub_6CEC((void *)v0 + 2) = *((void *)v6 + 2);
            *(_OWORD *)uint64_t v7 = v14;
          }
        }

        v7 += 24;
        if (v4 >= v12) {
          break;
        }
        Swift::Int v6 = v13;
      }

      while ((unint64_t)v13 < a3);
      uint64_t v26 = v7;
    }

LABEL_38:
    sub_22A04((void **)&v26, (const void **)&v25, &v24);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

char *sub_2290C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_72E4(&qword_5ADC0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + sub_6CEC((void *)v0 + 2) = v8;
    *((void *)v11 + sub_6CEC((void *)v0 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  __int128 v14 = v11 + 32;
  __int128 v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + sub_6CEC((void *)v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_22A04(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    char v7 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v7,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6]) {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }

  return result;
}

char *sub_22AC0(uint64_t a1)
{
  return sub_2290C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_22AD4(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  char v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(*(void *)(a4 + 48) + 8 * v16);
    __int128 v21 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v16);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    void *v11 = v20;
    v11[1] = v23;
    _OWORD v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v22);
      goto LABEL_38;
    }

    v11 += 3;
    uint64_t result = swift_bridgeObjectRetain(v22);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_22CD8(void *a1)
{
  return sub_2D644(0, a1[2], 0, a1);
}

uint64_t sub_22CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UsoIdentifier(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UsoEntityBuilder_common_VoiceCommand(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = UsoEntityBuilder_common_VoiceCommand.init()();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommand.setName(value:)(a1, a2);
  swift_bridgeObjectRetain(a4);
  UsoIdentifier.init(value:appBundleId:namespace:)( a3,  a4,  0xD000000000000015LL,  0x8000000000049280LL,  0xD000000000000018LL,  0x8000000000049220LL);
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v14 = type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v15 = UsoTaskBuilder_execute_common_VoiceCommand.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setReference(value:)(v13);
  swift_release(v13);
  return v15;
}

_OWORD *sub_22E38(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_22E48()
{
  unint64_t result = qword_5AD50;
  if (!qword_5AD50)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNAutoShortcutLocalizedPhrase);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_5AD50);
  }

  return result;
}

unint64_t sub_22E84()
{
  unint64_t result = qword_5AD58;
  if (!qword_5AD58)
  {
    unint64_t result = swift_getWitnessTable(&unk_47E84, &type metadata for AppShortcutEnablementError);
    atomic_store(result, (unint64_t *)&qword_5AD58);
  }

  return result;
}

uint64_t sub_22EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_5AD6C);
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_197FC;
  return sub_1E314(a1, a2, v7, v6);
}

uint64_t sub_22F34()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_22F68(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc(dword_5AD8C);
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_7240;
  return sub_1EC00(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_22FF4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_23018(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_5AD94);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_7240;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_5AD90 + dword_5AD90))(a1, v4);
}

uint64_t sub_23088(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_23094(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppShortcutEnablementFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_230D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppShortcutEnablementFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_2311C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppShortcutEnablementFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_23160(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_72E4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_231A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppShortcutEnablementFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for AppShortcutEnablementError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for AppShortcutEnablementError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for AppShortcutEnablementError(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for AppShortcutEnablementError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for AppShortcutEnablementError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutEnablementError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(vsub_6CEC((void *)v0 + 3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AppShortcutEnablementError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + sub_6CEC((void *)v0 + 8) = 0LL;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + sub_6CEC((void *)v0 + 8) = a2;
    }
  }

  return result;
}

uint64_t sub_23334(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_2334C(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for AppShortcutEnablementError()
{
  return &type metadata for AppShortcutEnablementError;
}

uint64_t sub_2339C(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5ADC8);
  __chkstk_darwin(v2, v3);
  uint64_t v82 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = type metadata accessor for USOParse(0LL);
  uint64_t v5 = *(void *)(v75 - 8);
  uint64_t v7 = __chkstk_darwin(v75, v6);
  uint64_t v72 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  unint64_t v81 = (char *)&v72 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v74 = (char *)&v72 - v14;
  __chkstk_darwin(v13, v15);
  uint64_t v73 = (char *)&v72 - v16;
  uint64_t v85 = type metadata accessor for Input(0LL);
  uint64_t v80 = *(void *)(v85 - 8);
  __chkstk_darwin(v85, v17);
  int64_t v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = type metadata accessor for PluginAction(0LL);
  uint64_t v20 = *(void **)(v79 - 8);
  __chkstk_darwin(v79, v21);
  uint64_t v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for Parse(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v83 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v86 = (char *)&v72 - v31;
  __chkstk_darwin(v30, v32);
  Swift::Int v34 = (char *)&v72 - v33;
  int64_t v35 = *(void *)(a1 + 16);
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v84 = v5;
  if (v35)
  {
    unint64_t v87 = _swiftEmptyArrayStorage;
    sub_2CDF4(0, v35, 0);
    uint64_t v37 = a1 + ((*((unsigned __int8 *)v20 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v20 + 80));
    uint64_t v38 = v20[9];
    uint64_t v76 = (uint64_t (*)(char *, uint64_t, uint64_t))v20[2];
    uint64_t v77 = v38;
    uint64_t v78 = v20;
    do
    {
      uint64_t v39 = v79;
      uint64_t v40 = v76(v23, v37, v79);
      uint64_t v41 = PluginAction.input.getter(v40);
      Input.parse.getter(v41);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v19, v85);
      ((void (*)(char *, uint64_t))v20[1])(v23, v39);
      uint64_t v36 = v87;
      if ((swift_isUniquelyReferenced_nonNull_native(v87) & 1) == 0)
      {
        sub_2CDF4(0, v36[2] + 1LL, 1);
        uint64_t v36 = v87;
      }

      unint64_t v43 = v36[2];
      unint64_t v42 = v36[3];
      if (v43 >= v42 >> 1)
      {
        sub_2CDF4(v42 > 1, v43 + 1, 1);
        uint64_t v36 = v87;
      }

      v36[2] = v43 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))( (unint64_t)v36 + ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
      + *(void *)(v25 + 72) * v43,
        v34,
        v24);
      unint64_t v87 = v36;
      uint64_t v20 = v78;
      v37 += v77;
      --v35;
      uint64_t v5 = v84;
    }

    while (v35);
  }

  uint64_t v44 = v36[2];
  uint64_t v45 = v83;
  if (v44)
  {
    char v46 = (char *)v36 + ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    uint64_t v79 = *(void *)(v25 + 72);
    uint64_t v80 = v25;
    uint64_t v78 = *(void **)(v25 + 16);
    LODWORD(v7sub_6CEC((void *)v0 + 7) = enum case for Parse.uso(_:);
    swift_bridgeObjectRetain(v36);
    uint64_t v47 = _swiftEmptyArrayStorage;
    uint64_t v48 = v75;
    do
    {
      uint64_t v85 = (uint64_t)v47;
      uint64_t v49 = v86;
      uint64_t v50 = (void (*)(char *, char *, uint64_t))v78;
      ((void (*)(char *, char *, uint64_t))v78)(v86, v46, v24);
      v50(v45, v49, v24);
      uint64_t v51 = v24;
      uint64_t v52 = v80;
      int v53 = (*(uint64_t (**)(char *, uint64_t))(v80 + 88))(v45, v51);
      if (v53 == (_DWORD)v77)
      {
        (*(void (**)(char *, uint64_t))(v52 + 96))(v45, v51);
        unint64_t v54 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
        uint64_t v55 = v74;
        v54(v74, v83, v48);
        uint64_t v56 = (uint64_t)v82;
        uint64_t v57 = v55;
        uint64_t v45 = v83;
        v54(v82, v57, v48);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v56, 0LL, 1LL, v48);
        uint64_t v58 = *(void (**)(char *, uint64_t))(v52 + 8);
      }

      else
      {
        uint64_t v58 = *(void (**)(char *, uint64_t))(v52 + 8);
        v58(v45, v51);
        uint64_t v56 = (uint64_t)v82;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v82, 1LL, 1LL, v48);
      }

      uint64_t v24 = v51;
      v58(v86, v51);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v56, 1LL, v48) == 1)
      {
        sub_239DC(v56);
        uint64_t v47 = (void *)v85;
      }

      else
      {
        uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
        uint64_t v60 = v73;
        v59(v73, v56, v48);
        v59(v81, (uint64_t)v60, v48);
        uint64_t v47 = (void *)v85;
        if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0) {
          uint64_t v47 = (void *)sub_44274(0, v47[2] + 1LL, 1, (unint64_t)v47);
        }
        unint64_t v62 = v47[2];
        unint64_t v61 = v47[3];
        if (v62 >= v61 >> 1) {
          uint64_t v47 = (void *)sub_44274(v61 > 1, v62 + 1, 1, (unint64_t)v47);
        }
        v47[2] = v62 + 1;
        uint64_t v63 = v84;
        unint64_t v64 = (unint64_t)v47
        uint64_t v48 = v75;
        v59((char *)v64, (uint64_t)v81, v75);
        uint64_t v5 = v63;
      }

      v46 += v79;
      --v44;
    }

    while (v44);
    swift_bridgeObjectRelease_n(v36, 2LL);
  }

  else
  {
    swift_bridgeObjectRelease(v36);
    uint64_t v47 = _swiftEmptyArrayStorage;
    uint64_t v48 = v75;
  }

  uint64_t v65 = v47[2];
  uint64_t v66 = v72;
  if (v65)
  {
    uint64_t v67 = (char *)v47 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v68 = *(void *)(v5 + 72);
    uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v47);
    while (1)
    {
      v69(v66, v67, v48);
      Swift::Bool v70 = USOParse.isAppShortcutInvocation()();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v66, v48);
      if (v70) {
        break;
      }
      v67 += v68;
      if (!--v65)
      {
        swift_bridgeObjectRelease_n(v47, 2LL);
        return 0LL;
      }
    }

    swift_bridgeObjectRelease_n(v47, 2LL);
    return 1LL;
  }

  else
  {
    swift_bridgeObjectRelease(v47);
    return 0LL;
  }

uint64_t sub_239DC(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5ADC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_23A1C()
{
  qword_5D3E8 = 0x54746E6572727543LL;
  unk_5D3F0 = 0xEB000000006B7361LL;
}

uint64_t sub_23A48(uint64_t a1)
{
  v2[38] = a1;
  v2[39] = v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A820);
  v2[40] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  v2[41] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[42] = v5;
  v2[43] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A5A0);
  v2[44] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  v2[45] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[46] = v8;
  v2[47] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  v2[48] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[49] = v10;
  v2[50] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v2[51] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[52] = v12;
  v2[53] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for TemplatingResult(0LL);
  v2[54] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[55] = v14;
  v2[56] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_72E4(&qword_5AEB8);
  v2[57] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  v2[58] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[59] = v17;
  v2[60] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_23BDC, 0LL, 0LL);
}

uint64_t sub_23BDC()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "AskRepeatFlow: execute called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[39];

  sub_73B4((void *)(v6 + 16), *(void *)(v6 + 40));
  unint64_t v7 = sub_2C6F8((uint64_t)_swiftEmptyArrayStorage);
  v0[61] = v7;
  uint64_t v8 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v8, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  strcpy((char *)(inited + 32), "responseMode");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 7sub_6CEC((void *)v0 + 2) = &type metadata for String;
  *(void *)(inited + 4sub_6CEC((void *)v0 + 8) = 0LL;
  *(void *)(inited + 56) = 0xE000000000000000LL;
  unint64_t v10 = sub_2C5C4(inited);
  v0[62] = v10;
  uint64_t v11 = (void *)swift_task_alloc(dword_5B25C);
  v0[63] = v11;
  void *v11 = v0;
  v11[1] = sub_23D84;
  return sub_29084(0xD000000000000015LL, 0x80000000000495C0LL, v7, v10);
}

uint64_t sub_23D84(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 504LL);
  v3[64] = a1;
  v3[65] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = sub_24354;
  }

  else
  {
    uint64_t v6 = v3[61];
    swift_bridgeObjectRelease(v3[62]);
    swift_bridgeObjectRelease(v6);
    uint64_t v5 = sub_23E04;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_23E04()
{
  uint64_t v1 = static SystemDialogActHelper.systemAskedUserToRepeat()(*(id *)(v0 + 512));
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v4 = *(void *)(v0 + 456);
  if (v1)
  {
    uint64_t v5 = v1;
    uint64_t ObjectType = swift_getObjectType(v1);
    SIRINLUSystemDialogAct.toNluSystemDialogAct()(ObjectType);
    swift_unknownObjectRelease(v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1LL, v2) != 1)
    {
      unint64_t v7 = *(void **)(v0 + 512);
      uint64_t v8 = *(void *)(v0 + 472);
      uint64_t v53 = *(void *)(v0 + 464);
      uint64_t v54 = *(void *)(v0 + 480);
      uint64_t v10 = *(void *)(v0 + 416);
      uint64_t v9 = *(void *)(v0 + 424);
      uint64_t v11 = *(void *)(v0 + 408);
      uint64_t v51 = *(void *)(v0 + 448);
      uint64_t v52 = *(void *)(v0 + 400);
      uint64_t v56 = *(void *)(v0 + 392);
      uint64_t v57 = *(void *)(v0 + 384);
      uint64_t v60 = *(void *)(v0 + 360);
      uint64_t v61 = *(void *)(v0 + 368);
      uint64_t v55 = *(void *)(v0 + 352);
      uint64_t v58 = *(void *)(v0 + 376);
      uint64_t v59 = *(void **)(v0 + 312);
      (*(void (**)(void))(v8 + 32))();
      id v12 = [v7 speak];
      uint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for String);

      id v13 = [v7 print];
      uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String);

      (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))( v9,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v11);
      id v15 = [v7 print];
      uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for String);

      uint64_t v17 = *(void *)(v16 + 16);
      swift_bridgeObjectRelease(v16);
      uint64_t v18 = sub_34478(0LL, 0xE000000000000000LL, v17);
      id v19 = [v7 meta];

      uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v19,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      uint64_t v21 = TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:dialogIdentifier:meta:)( 0xD000000000000022LL,  0x8000000000049640LL,  v50,  v14,  v9,  v18,  v20);
      NLContextUpdate.init()(v21);
      uint64_t v22 = sub_72E4(&qword_5A920);
      uint64_t v23 = *(unsigned __int8 *)(v8 + 80);
      uint64_t v24 = (v23 + 32) & ~v23;
      uint64_t v25 = swift_allocObject(v22, v24 + *(void *)(v8 + 72), v23 | 7);
      *(_OWORD *)(v25 + 16) = xmmword_47AE0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v25 + v24, v54, v53);
      uint64_t v26 = NLContextUpdate.nluSystemDialogActs.setter(v25);
      uint64_t v27 = static Device.current.getter(v26);
      static Device.current.getter(v27);
      uint64_t v28 = *(void *)(v0 + 240);
      uint64_t v29 = *(void *)(v0 + 248);
      sub_73B4((void *)(v0 + 216), v28);
      LOBYTE(v25) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v28, v29);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v52, v57);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v55, 0LL, 1LL, v57);
      *(void *)(v0 + 20sub_6CEC((void *)v0 + 8) = 0LL;
      *(_OWORD *)(v0 + 19sub_6CEC((void *)v0 + 2) = 0u;
      *(_OWORD *)(v0 + 176) = 0u;
      static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v51,  v0 + 136,  v25 & 1,  _swiftEmptyArrayStorage,  1LL,  1LL,  v55,  _swiftEmptyArrayStorage,  v0 + 176);
      sub_73D8(v0 + 176, (uint64_t *)&unk_5C140);
      sub_73D8(v55, (uint64_t *)&unk_5A5A0);
      sub_6CEC((void *)(v0 + 136));
      sub_6CEC((void *)(v0 + 216));
      uint64_t v30 = v59[10];
      uint64_t v31 = v59[11];
      sub_73B4(v59 + 7, v30);
      *(void *)(v0 + 120) = v60;
      *(void *)(v0 + 12sub_6CEC((void *)v0 + 8) = &protocol witness table for AceOutput;
      uint64_t v32 = sub_8390((void *)(v0 + 96));
      (*(void (**)(void *, uint64_t, uint64_t))(v61 + 16))(v32, v58, v60);
      uint64_t v33 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
      *(void *)(v0 + 52sub_6CEC((void *)v0 + 8) = v33;
      *uint64_t v33 = v0;
      v33[1] = sub_2451C;
      return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 96, v30, v31);
    }
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v3 + 56))( *(void *)(v0 + 456),  1LL,  1LL,  *(void *)(v0 + 464));
  }

  int64_t v35 = *(void **)(v0 + 512);
  uint64_t v36 = *(void *)(v0 + 456);

  uint64_t v37 = sub_73D8(v36, &qword_5AEB8);
  uint64_t v38 = static OutputPublisherFactory.makeOutputPublisherAsync()(v62, v37);
  static SiriKitEventSender.current.getter(v63, v38);
  uint64_t v39 = type metadata accessor for CamErrorFlow();
  swift_allocObject(v39, 112LL, 7LL);
  uint64_t v40 = sub_267BC(0xD00000000000002FLL, 0x8000000000049610LL, v62, v63);
  *(void *)(v0 + 296) = v40;
  uint64_t v41 = sub_7D7C( (unint64_t *)&qword_5C1A0,  (uint64_t (*)(uint64_t))type metadata accessor for CamErrorFlow,  (uint64_t)&unk_48040);
  static ExecuteResponse.complete<A>(next:)(v0 + 296, v39, v41);

  swift_release(v40);
  uint64_t v42 = *(void *)(v0 + 448);
  uint64_t v43 = *(void *)(v0 + 456);
  uint64_t v44 = *(void *)(v0 + 424);
  uint64_t v45 = *(void *)(v0 + 400);
  uint64_t v46 = *(void *)(v0 + 376);
  uint64_t v48 = *(void *)(v0 + 344);
  uint64_t v47 = *(void *)(v0 + 352);
  uint64_t v49 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 480));
  swift_task_dealloc(v43);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24354()
{
  uint64_t v1 = *(void *)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 488);
  swift_bridgeObjectRelease(*(void *)(v0 + 496));
  swift_bridgeObjectRelease(v2);
  _StringGuts.grow(_:)(43LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v20[0] = 0xD000000000000029LL;
  v20[1] = 0x80000000000495E0LL;
  swift_getErrorValue(v1, v0 + 280, v0 + 256);
  v3._countAndFlagsBits = Error.localizedDescription.getter(*(void *)(v0 + 264), *(void *)(v0 + 272));
  object = v3._object;
  String.append(_:)(v3);
  uint64_t v5 = swift_bridgeObjectRelease(object);
  uint64_t v6 = static OutputPublisherFactory.makeOutputPublisherAsync()(v19, v5);
  static SiriKitEventSender.current.getter(v20, v6);
  uint64_t v7 = type metadata accessor for CamErrorFlow();
  swift_allocObject(v7, 112LL, 7LL);
  uint64_t v8 = sub_267BC(0xD000000000000029LL, 0x80000000000495E0LL, v19, v20);
  *(void *)(v0 + 28sub_6CEC((void *)v0 + 8) = v8;
  uint64_t v9 = sub_7D7C( (unint64_t *)&qword_5C1A0,  (uint64_t (*)(uint64_t))type metadata accessor for CamErrorFlow,  (uint64_t)&unk_48040);
  static ExecuteResponse.complete<A>(next:)(v0 + 288, v7, v9);
  swift_errorRelease(v1);
  swift_release(v8);
  uint64_t v10 = *(void *)(v0 + 448);
  uint64_t v11 = *(void *)(v0 + 456);
  uint64_t v12 = *(void *)(v0 + 424);
  uint64_t v13 = *(void *)(v0 + 400);
  uint64_t v14 = *(void *)(v0 + 376);
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v15 = *(void *)(v0 + 352);
  uint64_t v17 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 480));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2451C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 528));
  if (v0)
  {
    swift_errorRelease(v0);
    Swift::String v3 = sub_247F8;
  }

  else
  {
    sub_6CEC((void *)(v2 + 96));
    Swift::String v3 = sub_2458C;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_2458C()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void **)(v0 + 312);
  uint64_t v5 = v4[15];
  uint64_t v37 = v4[16];
  sub_73B4(v4 + 12, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.askRepeat(_:), v3);
  if (qword_59D88 != -1) {
    swift_once(&qword_59D88, sub_23A1C);
  }
  uint64_t v28 = *(void **)(v0 + 512);
  uint64_t v36 = *(void *)(v0 + 480);
  uint64_t v34 = *(void *)(v0 + 472);
  uint64_t v35 = *(void *)(v0 + 464);
  uint64_t v31 = *(void *)(v0 + 440);
  uint64_t v32 = *(void *)(v0 + 432);
  uint64_t v33 = *(void *)(v0 + 448);
  uint64_t v29 = *(void *)(v0 + 384);
  uint64_t v30 = *(void *)(v0 + 400);
  uint64_t v26 = *(void *)(v0 + 376);
  uint64_t v27 = *(void *)(v0 + 392);
  uint64_t v24 = *(void *)(v0 + 368);
  uint64_t v25 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 320);
  uint64_t v8 = qword_5D3E8;
  uint64_t v9 = unk_5D3F0;
  uint64_t v10 = enum case for SiriKitReliabilityCodes.normal(_:);
  uint64_t v11 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v7, v10, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v7, 0LL, 1LL, v11);
  swift_bridgeObjectRetain(v9);
  uint64_t v13 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v6, v8, v9, v7, sub_24A6C, 0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v13, v5, v37);
  uint64_t v14 = swift_release(v13);
  static ExecuteResponse.complete()(v14);

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v25);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v29);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v33, v32);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v35);
  uint64_t v15 = *(void *)(v0 + 448);
  uint64_t v16 = *(void *)(v0 + 456);
  uint64_t v17 = *(void *)(v0 + 424);
  uint64_t v18 = *(void *)(v0 + 400);
  uint64_t v19 = *(void *)(v0 + 376);
  uint64_t v21 = *(void *)(v0 + 344);
  uint64_t v20 = *(void *)(v0 + 352);
  uint64_t v22 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 480));
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_247F8()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void **)(v0 + 312);
  uint64_t v5 = v4[15];
  uint64_t v37 = v4[16];
  sub_73B4(v4 + 12, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.askRepeat(_:), v3);
  if (qword_59D88 != -1) {
    swift_once(&qword_59D88, sub_23A1C);
  }
  uint64_t v28 = *(void **)(v0 + 512);
  uint64_t v36 = *(void *)(v0 + 480);
  uint64_t v34 = *(void *)(v0 + 472);
  uint64_t v35 = *(void *)(v0 + 464);
  uint64_t v31 = *(void *)(v0 + 440);
  uint64_t v32 = *(void *)(v0 + 432);
  uint64_t v33 = *(void *)(v0 + 448);
  uint64_t v29 = *(void *)(v0 + 384);
  uint64_t v30 = *(void *)(v0 + 400);
  uint64_t v26 = *(void *)(v0 + 376);
  uint64_t v27 = *(void *)(v0 + 392);
  uint64_t v24 = *(void *)(v0 + 368);
  uint64_t v25 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 320);
  uint64_t v8 = qword_5D3E8;
  uint64_t v9 = unk_5D3F0;
  uint64_t v10 = enum case for SiriKitReliabilityCodes.normal(_:);
  uint64_t v11 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v7, v10, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v7, 0LL, 1LL, v11);
  swift_bridgeObjectRetain(v9);
  uint64_t v13 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v6, v8, v9, v7, sub_24A6C, 0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v13, v5, v37);
  uint64_t v14 = swift_release(v13);
  static ExecuteResponse.complete()(v14);

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v25);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v29);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v33, v32);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v35);
  uint64_t v15 = *(void *)(v0 + 448);
  uint64_t v16 = *(void *)(v0 + 456);
  uint64_t v17 = *(void *)(v0 + 424);
  uint64_t v18 = *(void *)(v0 + 400);
  uint64_t v19 = *(void *)(v0 + 376);
  uint64_t v21 = *(void *)(v0 + 344);
  uint64_t v20 = *(void *)(v0 + 352);
  uint64_t v22 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 480));
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A6C()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter( 0x6E6E614369726973LL,  0xEE0072616548746FLL);
}

uint64_t type metadata accessor for AskRepeatFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin13AskRepeatFlow);
}

uint64_t sub_24AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for AskRepeatFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_24B28(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_5ADFC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_7240;
  return sub_23A48(a1);
}

uint64_t sub_24B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AskRepeatFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_24BA0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_24C70(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_25914((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_25914((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_6CEC(v12);
  return v7;
}

uint64_t sub_24C70(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = sub_24E28(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

  os_log_type_t v88 = v79;
  uint64_t v89 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56);
  uint64_t v90 = (uint64_t)v175;
  v89(v175, 1LL, 1LL, v14);
  sub_73D8(v90, (uint64_t *)&unk_5A980);
  uint64_t v91 = v174;
  uint64_t v92 = v180;
  sub_41284(v180, v84, v85, v174);
  (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v92, v182);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v91, 1LL, v14) == 1)
  {
    sub_73D8(v91, (uint64_t *)&unk_5A980);
    uint64_t v93 = v45;
    uint64_t v94 = 1LL;
  }

  else
  {
    uint64_t v164 = *(void (**)(char *, uint64_t, uint64_t))(v88 + 32);
    unint64_t v165 = v172;
    v164(v172, v91, v14);
    v164(v45, (uint64_t)v165, v14);
    uint64_t v93 = v45;
    uint64_t v94 = 0LL;
  }

  v89(v93, v94, 1LL, v14);
  uint64_t v79 = v88;
LABEL_16:
  uint64_t v95 = v194;
  sub_18DBC((uint64_t)v45, v194, (uint64_t *)&unk_5A980);
  uint64_t v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v95, 1LL, v14);
  uint64_t v97 = v96;
  if (v96 == 1)
  {
    sub_73D8(v95, (uint64_t *)&unk_5A980);
    Swift::Int v111 = v183;
    uint64_t v112 = v191(v183, v201, v73);
    char v113 = (os_log_s *)Logger.logObject.getter(v112);
    uint64_t v114 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v113, v114))
    {
      uint64_t v115 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v116 = swift_slowAlloc(32LL, -1LL);
      LODWORD(v19sub_6CEC((void *)v0 + 7) = 1;
      uint64_t v117 = v73;
      uint64_t v118 = v116;
      uint64_t v203 = v116;
      *(_DWORD *)uint64_t v115 = 136315138;
      uint64_t v119 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
      uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter(v117, v119);
      uint64_t v122 = v121;
      uint64_t v204 = sub_24BA0(v120, v121, &v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v115 + 4, v115 + 12);
      swift_bridgeObjectRelease(v122);
      unint64_t v123 = v117;
      uint64_t v97 = (int)v197;
      v192(v111, v123);
      _os_log_impl(&dword_0, v113, v114, "VerbEntityDisambiguationFlow: could not resolve action from %s", v115, 0xCu);
      swift_arrayDestroy(v118, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v118, -1LL, -1LL);
      swift_slowDealloc(v115, -1LL, -1LL);
    }

    else
    {
      v192(v111, v73);
    }

    type metadata accessor for ConversationSELFHelper(0LL);
    uint64_t v142 = static ConversationSELFHelper.shared.getter();
    dispatch thunk of ConversationSELFHelper.emitDisambiguationFailed(errorCode:)(0LL);
    swift_release(v142);
    uint64_t v143 = v202[10];
    uint64_t v144 = v202[11];
    sub_73B4(v202 + 7, v143);
    type metadata accessor for SiriKitEvent(0LL);
    if (qword_59DF8 != -1) {
      swift_once(&qword_59DF8, sub_3F248);
    }
    uint64_t v145 = qword_5D4B8;
    unint64_t v146 = unk_5D4C0;
    swift_bridgeObjectRetain(unk_5D4C0);
    LOBYTE(v20sub_6CEC((void *)v0 + 3) = 0;
    uint64_t v147 = SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)(4LL, v145, v146, 66LL, nullsub_1, 0LL);
    dispatch thunk of SiriKitEventSending.send(_:)(v147, v143, v144);
    swift_release(v147);
  }

  else
  {
    LODWORD(v19sub_6CEC((void *)v0 + 7) = v96;
    uint64_t v98 = v193;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v193, v95, v14);
    uint64_t v99 = v184;
    v196 = *(uint64_t (**)(void, void, void))(v79 + 16);
    uint64_t v100 = v196(v184, v98, v14);
    unint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
    uint64_t v102 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v101, v102))
    {
      uint64_t v103 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v104 = swift_slowAlloc(32LL, -1LL);
      uint64_t v195 = v73;
      unint64_t v105 = v104;
      uint64_t v203 = v104;
      *(_DWORD *)uint64_t v103 = 136315138;
      uint64_t v106 = sub_7D7C( (unint64_t *)&qword_59FC0,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction,  (uint64_t)&protocol conformance descriptor for PluginAction);
      uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter(v14, v106);
      char v109 = v108;
      uint64_t v204 = sub_24BA0(v107, v108, &v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v103 + 4, v103 + 12);
      swift_bridgeObjectRelease(v109);
      uint64_t v200 = *(void *)(v200 + 8);
      ((void (*)(char *, uint64_t))v200)(v99, v14);
      _os_log_impl(&dword_0, v101, v102, "VerbEntityDisambiguationFlow: resolved action to %s", v103, 0xCu);
      swift_arrayDestroy(v105, 1LL, (char *)&type metadata for Any + 8);
      Swift::Int v110 = v105;
      uint64_t v73 = v195;
      swift_slowDealloc(v110, -1LL, -1LL);
      swift_slowDealloc(v103, -1LL, -1LL);
    }

    else
    {
      uint64_t v200 = *(void *)(v79 + 8);
      ((void (*)(char *, uint64_t))v200)(v99, v14);
    }

    uint64_t v124 = (uint64_t)v185;
    PluginAction.loggingId.getter(v125);
    unint64_t v126 = v187;
    uint64_t v127 = v188;
    uint64_t v128 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v187 + 48))(v124, 1LL, v188);
    uint64_t v129 = v186;
    if (v128 == 1)
    {
      uint64_t v130 = v98;
      sub_73D8(v124, (uint64_t *)&unk_5C190);
      uint64_t v131 = v176;
      uint64_t v132 = v191(v176, v201, v73);
      uint64_t v133 = (os_log_s *)Logger.logObject.getter(v132);
      uint64_t v134 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v133, v134))
      {
        uint64_t v135 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v136 = v73;
        uint64_t v137 = swift_slowAlloc(32LL, -1LL);
        uint64_t v203 = v137;
        *(_DWORD *)uint64_t v135 = 136315138;
        uint64_t v138 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
        uint64_t v139 = dispatch thunk of CustomStringConvertible.description.getter(v136, v138);
        uint64_t v141 = v140;
        uint64_t v204 = sub_24BA0(v139, v140, &v203);
        uint64_t v130 = v193;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v135 + 4, v135 + 12);
        swift_bridgeObjectRelease(v141);
        v192(v131, v136);
        _os_log_impl( &dword_0,  v133,  v134,  "VerbEntityDisambiguationFlow: could not extract loggingId from %s",  v135,  0xCu);
        swift_arrayDestroy(v137, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1LL, -1LL);
        swift_slowDealloc(v135, -1LL, -1LL);
      }

      else
      {
        v192(v131, v73);
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v186, v124, v127);
      type metadata accessor for ConversationSELFHelper(0LL);
      uint64_t v148 = static ConversationSELFHelper.shared.getter();
      dispatch thunk of ConversationSELFHelper.emitDisambiguationFollowupHandled(actionId:)(v129);
      swift_release(v148);
      uint64_t v149 = v129;
      int v150 = v202[10];
      uint64_t v151 = v202[11];
      sub_73B4(v202 + 7, v150);
      type metadata accessor for SiriKitEvent(0LL);
      if (qword_59DF8 != -1) {
        swift_once(&qword_59DF8, sub_3F248);
      }
      uint64_t v152 = qword_5D4B8;
      uint64_t v153 = unk_5D4C0;
      swift_bridgeObjectRetain(unk_5D4C0);
      LOBYTE(v20sub_6CEC((void *)v0 + 3) = 0;
      uint64_t v154 = SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)(38LL, v152, v153, 31LL, nullsub_1, 0LL);
      dispatch thunk of SiriKitEventSending.send(_:)(v154, v150, v151);
      swift_release(v154);
      (*(void (**)(char *, uint64_t))(v126 + 8))(v149, v127);
      uint64_t v130 = v193;
    }

    uint64_t v97 = (int)v197;
    unint64_t v155 = (uint64_t)v189;
    v196(v189, v130, v14);
    uint64_t v156 = sub_72E4(&qword_5C040);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v156 - 8) + 56LL))(v155, 0LL, 2LL, v156);
    uint64_t v157 = v190;
    sub_45DC4(v155, v190);
    unint64_t v158 = (uint64_t)v202 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_state;
    swift_beginAccess( (char *)v202 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_state,  &v203,  33LL,  0LL);
    sub_45E08(v157, v158);
    uint64_t v159 = swift_endAccess(&v203);
    uint64_t v160 = (os_log_s *)Logger.logObject.getter(v159);
    uint64_t v161 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v160, v161))
    {
      uint64_t v162 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v162 = 0;
      _os_log_impl(&dword_0, v160, v161, "VerbEntityDisambiguationFlow: input accepted", v162, 2u);
      swift_slowDealloc(v162, -1LL, -1LL);
    }

    ((void (*)(char *, uint64_t))v200)(v130, v14);
    uint64_t v45 = v198;
  }

  sub_73D8((uint64_t)v45, (uint64_t *)&unk_5A980);
  return v97 != 1;
}

uint64_t sub_24E28(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_24EBC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_25094(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_25094(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_24EBC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_25030(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_25030(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_72E4(&qword_5AEB0);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  uint64_t v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_25094(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_72E4(&qword_5AEB0);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_6CEC((void *)v0 + 2) = v8;
    *((void *)v11 + sub_6CEC((void *)v0 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + sub_6CEC((void *)v0 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

uint64_t sub_251E0(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5A038);
  __chkstk_darwin(v2, v3);
  uint64_t v80 = (uint64_t *)((char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = type metadata accessor for CAMDirectInvocation(0LL);
  uint64_t v72 = *(void *)(v5 - 8);
  uint64_t v73 = v5;
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v71 = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v67 - v10;
  uint64_t v12 = type metadata accessor for Parse(0LL);
  uint64_t v77 = *(void *)(v12 - 8);
  uint64_t v78 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v82 = *(void *)(v74 - 8);
  __chkstk_darwin(v74, v16);
  unint64_t v81 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Input(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)&v67 - v25;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v28 = sub_72B4(v27, (uint64_t)qword_5D478);
  uint64_t v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v29 = v76(v26, a1, v18);
  uint64_t v79 = v28;
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc(12LL, -1LL);
    Swift::Bool v70 = v23;
    uint64_t v33 = (uint8_t *)v32;
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    uint64_t v68 = v11;
    uint64_t v35 = v34;
    uint64_t v84 = v34;
    uint64_t v69 = a1;
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v75 = (void (*)(char *, uint64_t))(v33 + 4);
    uint64_t v36 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v18, v36);
    unint64_t v39 = v38;
    uint64_t v83 = sub_24BA0(v37, v38, &v84);
    a1 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v75, v33 + 12);
    swift_bridgeObjectRelease(v39);
    uint64_t v75 = *(void (**)(char *, uint64_t))(v19 + 8);
    v75(v26, v18);
    _os_log_impl(&dword_0, v30, v31, "AskRepeatFlow: on called with %s", v33, 0xCu);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v40 = v35;
    uint64_t v11 = v68;
    swift_slowDealloc(v40, -1LL, -1LL);
    uint64_t v41 = v33;
    uint64_t v23 = v70;
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {
    uint64_t v75 = *(void (**)(char *, uint64_t))(v19 + 8);
    v75(v26, v18);
  }

  Input.parse.getter(v42);
  uint64_t v44 = v77;
  uint64_t v43 = v78;
  int v45 = (*(uint64_t (**)(char *, uint64_t))(v77 + 88))(v15, v78);
  uint64_t v47 = v81;
  uint64_t v46 = v82;
  uint64_t v48 = v80;
  if (v45 != enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v43);
    goto LABEL_15;
  }

  (*(void (**)(char *, uint64_t))(v44 + 96))(v15, v43);
  uint64_t v49 = v15;
  uint64_t v50 = v74;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v47, v49, v74);
  sub_2B424(v48);
  uint64_t v51 = v73;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v72 + 48))(v48, 1LL, v73) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v50);
    sub_73D8((uint64_t)v48, &qword_5A038);
LABEL_15:
    uint64_t v58 = v76(v23, a1, v18);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v62 = swift_slowAlloc(32LL, -1LL);
      uint64_t v84 = v62;
      *(_DWORD *)uint64_t v61 = 136315138;
      uint64_t v63 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
      uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter(v18, v63);
      unint64_t v66 = v65;
      uint64_t v83 = sub_24BA0(v64, v65, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v61 + 4, v61 + 12);
      swift_bridgeObjectRelease(v66);
      v75(v23, v18);
      _os_log_impl(&dword_0, v59, v60, "AskRepeatFlow called with unexpected input %s", v61, 0xCu);
      swift_arrayDestroy(v62, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1LL, -1LL);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    else
    {
      v75(v23, v18);
    }

    return 0LL;
  }

  sub_25850((uint64_t)v48, (uint64_t)v11);
  uint64_t v52 = v71;
  sub_25894((uint64_t)v11, v71);
  if (swift_getEnumCaseMultiPayload(v52, v51) != 2)
  {
    sub_258D8((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v50);
    sub_258D8(v52);
    goto LABEL_15;
  }

  uint64_t v53 = sub_258D8(v52);
  uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl(&dword_0, v54, v55, "AskRepeatFlow: input accepted", v56, 2u);
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  sub_258D8((uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v50);
  return 1LL;
}

uint64_t sub_25850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAMDirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_25894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAMDirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_258D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CAMDirectInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_25914(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_25950()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for CAMDisambiguateCATPatternsExecutor()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin34CAMDisambiguateCATPatternsExecutor);
}

uint64_t sub_25994(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 11sub_6CEC((void *)v0 + 2) = a3;
  *(void *)(v4 + 120) = a4;
  *(void *)(v4 + 104) = a2;
  *(_BYTE *)(v4 + 160) = a1;
  return swift_task_switch(sub_259B4, 0LL, 0LL);
}

uint64_t sub_259B4()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  char v4 = *(_BYTE *)(v0 + 160);
  uint64_t v5 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v5, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  *(void *)(inited + 3sub_6CEC((void *)v0 + 2) = 0xD000000000000017LL;
  *(void *)(inited + 40) = 0x80000000000496B0LL;
  *(void *)(inited + 7sub_6CEC((void *)v0 + 2) = &type metadata for Bool;
  *(_BYTE *)(inited + 4sub_6CEC((void *)v0 + 8) = v4;
  *(void *)(v0 + 96) = sub_2C5C4(inited);
  sub_1E1F0(v0 + 96, v2, v1);
  sub_73B4((void *)(v3 + 16), *(void *)(v3 + 40));
  uint64_t v7 = *(void *)(v0 + 96);
  uint64_t v8 = sub_28C40(v7);
  *(void *)(v0 + 12sub_6CEC((void *)v0 + 8) = v8;
  swift_bridgeObjectRelease(v7);
  uint64_t v9 = (void *)swift_task_alloc(dword_5B26C);
  *(void *)(v0 + 136) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_25ACC;
  return sub_29874(0xD00000000000002CLL, 0x80000000000496D0LL, v8);
}

uint64_t sub_25ACC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 136);
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_25B58;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v4 + 128));
    *(void *)(v4 + 15sub_6CEC((void *)v0 + 2) = a1;
    uint64_t v6 = sub_25B48;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_25B48()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 152));
}

uint64_t sub_25B58()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  uint64_t v5 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v4[16] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[17] = v6;
  v4[18] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_25BF0, 0LL, 0LL);
}

uint64_t sub_25BF0()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v4 = v0[14];
  sub_73B4((void *)(v0[15] + 16), *(void *)(v0[15] + 40));
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v6, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  *(void *)(inited + 3sub_6CEC((void *)v0 + 2) = 7368801LL;
  *(void *)(inited + 40) = 0xE300000000000000LL;
  *(void *)(inited + 7sub_6CEC((void *)v0 + 2) = &type metadata for String;
  *(void *)(inited + 4sub_6CEC((void *)v0 + 8) = v5;
  *(void *)(inited + 56) = v4;
  swift_bridgeObjectRetain(v4);
  unint64_t v8 = sub_2C5C4(inited);
  v0[19] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for BehaviorAfterSpeaking.listen(_:), v3);
  uint64_t v9 = (uint64_t **)swift_task_alloc(dword_5B264);
  v0[20] = (uint64_t)v9;
  *uint64_t v9 = v0;
  v9[1] = (uint64_t *)sub_25D10;
  return sub_29358(v0[12], 0xD00000000000002CLL, 0x80000000000496D0LL, v8);
}

uint64_t sub_25D10()
{
  uint64_t v3 = *(void *)(*v1 + 152);
  uint64_t v2 = *(void *)(*v1 + 160);
  uint64_t v5 = *(void *)(*v1 + 136);
  uint64_t v4 = *(void *)(*v1 + 144);
  uint64_t v6 = *(void *)(*v1 + 128);
  uint64_t v7 = *v1;
  *(void *)(v7 + 16sub_6CEC((void *)v0 + 8) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_bridgeObjectRelease(v3);
  if (v0) {
    return swift_task_switch(sub_2678C, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v7 + 144));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_25DBC(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_25E1C, 0LL, 0LL);
}

uint64_t sub_25E1C()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  sub_73B4((void *)(v0[3] + 16), *(void *)(v0[3] + 40));
  unint64_t v4 = sub_2C5C4((uint64_t)_swiftEmptyArrayStorage);
  v0[7] = v4;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v3);
  uint64_t v5 = (uint64_t **)swift_task_alloc(dword_5B264);
  v0[8] = (uint64_t)v5;
  void *v5 = v0;
  v5[1] = (uint64_t *)sub_25EE4;
  return sub_29358(v0[2], 0xD00000000000002ALL, 0x80000000000497D0LL, v4);
}

uint64_t sub_25EE4()
{
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v2 = *(void *)(*v1 + 64);
  uint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 48);
  uint64_t v6 = *(void *)(*v1 + 32);
  uint64_t v7 = *v1;
  *(void *)(v7 + 7sub_6CEC((void *)v0 + 2) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_bridgeObjectRelease(v3);
  if (v0) {
    return swift_task_switch(sub_25F90, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v7 + 48));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_25F90()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[30] = a7;
  v8[31] = v7;
  v8[28] = a5;
  v8[29] = a6;
  v8[26] = a3;
  v8[27] = a4;
  v8[24] = a1;
  v8[25] = a2;
  uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v8[32] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[33] = v10;
  v8[34] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_26030, 0LL, 0LL);
}

uint64_t sub_26030()
{
  uint64_t v1 = v0[33];
  uint64_t v13 = v0[32];
  uint64_t v14 = v0[34];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[29];
  uint64_t v6 = v0[26];
  uint64_t v5 = v0[27];
  uint64_t v7 = v0[25];
  sub_73B4((void *)(v0[31] + 16), *(void *)(v0[31] + 40));
  uint64_t v8 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v8, v0 + 2);
  *(void *)(inited + 3sub_6CEC((void *)v0 + 2) = 7368801LL;
  *(void *)(inited + 40) = 0xE300000000000000LL;
  *(_OWORD *)(inited + 16) = xmmword_47FD0;
  *(void *)(inited + 4sub_6CEC((void *)v0 + 8) = v7;
  *(void *)(inited + 56) = v6;
  *(void *)(inited + 7sub_6CEC((void *)v0 + 2) = &type metadata for String;
  *(void *)(inited + 80) = 0x7268507473726966LL;
  *(void *)(inited + 8sub_6CEC((void *)v0 + 8) = 0xEB00000000657361LL;
  *(void *)(inited + 96) = v5;
  *(void *)(inited + 104) = v3;
  *(void *)(inited + 120) = &type metadata for String;
  strcpy((char *)(inited + 128), "secondPhrase");
  *(void *)(inited + 16sub_6CEC((void *)v0 + 8) = &type metadata for String;
  *(_BYTE *)(inited + 141) = 0;
  *(_WORD *)(inited + 14sub_6CEC((void *)v0 + 2) = -5120;
  *(void *)(inited + 144) = v4;
  *(void *)(inited + 15sub_6CEC((void *)v0 + 2) = v2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  unint64_t v10 = sub_2C5C4(inited);
  v0[35] = v10;
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))( v14,  enum case for BehaviorAfterSpeaking.listen(_:),  v13);
  uint64_t v11 = (uint64_t **)swift_task_alloc(dword_5B264);
  v0[36] = (uint64_t)v11;
  char *v11 = v0;
  v11[1] = (uint64_t *)sub_261C4;
  return sub_29358(v0[24], 0xD000000000000033LL, 0x8000000000049790LL, v10);
}

uint64_t sub_261C4()
{
  uint64_t v3 = *(void *)(*v1 + 280);
  uint64_t v2 = *(void *)(*v1 + 288);
  uint64_t v5 = *(void *)(*v1 + 264);
  uint64_t v4 = *(void *)(*v1 + 272);
  uint64_t v6 = *(void *)(*v1 + 256);
  uint64_t v7 = *v1;
  *(void *)(v7 + 296) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_bridgeObjectRelease(v3);
  if (v0) {
    return swift_task_switch(sub_26270, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v7 + 272));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_26270()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_262A4(uint64_t a1, double a2)
{
  *(void *)(v3 + 11sub_6CEC((void *)v0 + 2) = v2;
  *(double *)(v3 + 104) = a2;
  *(void *)(v3 + 96) = a1;
  uint64_t v4 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  *(void *)(v3 + 120) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 12sub_6CEC((void *)v0 + 8) = v5;
  *(void *)(v3 + 136) = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_2630C, 0LL, 0LL);
}

uint64_t sub_2630C()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[13];
  sub_73B4((void *)(v0[14] + 16), *(void *)(v0[14] + 40));
  uint64_t v5 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v5, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  *(void *)(inited + 3sub_6CEC((void *)v0 + 2) = 0xD000000000000011LL;
  *(void *)(inited + 40) = 0x8000000000049770LL;
  *(void *)(inited + 7sub_6CEC((void *)v0 + 2) = &type metadata for Double;
  *(void *)(inited + 4sub_6CEC((void *)v0 + 8) = v4;
  unint64_t v7 = sub_2C5C4(inited);
  v0[18] = v7;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v3);
  uint64_t v8 = (uint64_t **)swift_task_alloc(dword_5B264);
  v0[19] = (uint64_t)v8;
  *uint64_t v8 = v0;
  v8[1] = (uint64_t *)sub_26424;
  return sub_29358(v0[12], 0xD00000000000001DLL, 0x8000000000049750LL, v7);
}

uint64_t sub_26424()
{
  uint64_t v3 = *(void *)(*v1 + 144);
  uint64_t v2 = *(void *)(*v1 + 152);
  uint64_t v5 = *(void *)(*v1 + 128);
  uint64_t v4 = *(void *)(*v1 + 136);
  uint64_t v6 = *(void *)(*v1 + 120);
  uint64_t v7 = *v1;
  *(void *)(v7 + 160) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_bridgeObjectRelease(v3);
  if (v0) {
    return swift_task_switch(sub_264D0, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v7 + 136));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_264D0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_26504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  uint64_t v5 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v4[16] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[17] = v6;
  v4[18] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_26568, 0LL, 0LL);
}

uint64_t sub_26568()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v4 = v0[14];
  sub_73B4((void *)(v0[15] + 16), *(void *)(v0[15] + 40));
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v6, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  *(void *)(inited + 3sub_6CEC((void *)v0 + 2) = 0x657361726870LL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  *(void *)(inited + 7sub_6CEC((void *)v0 + 2) = &type metadata for String;
  *(void *)(inited + 4sub_6CEC((void *)v0 + 8) = v5;
  *(void *)(inited + 56) = v4;
  swift_bridgeObjectRetain(v4);
  unint64_t v8 = sub_2C5C4(inited);
  v0[19] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v3);
  uint64_t v9 = (uint64_t **)swift_task_alloc(dword_5B264);
  v0[20] = (uint64_t)v9;
  *uint64_t v9 = v0;
  v9[1] = (uint64_t *)sub_2668C;
  return sub_29358(v0[12], 0xD00000000000001FLL, 0x8000000000049730LL, v8);
}

uint64_t sub_2668C()
{
  uint64_t v3 = *(void *)(*v1 + 152);
  uint64_t v2 = *(void *)(*v1 + 160);
  uint64_t v5 = *(void *)(*v1 + 136);
  uint64_t v4 = *(void *)(*v1 + 144);
  uint64_t v6 = *(void *)(*v1 + 128);
  uint64_t v7 = *v1;
  *(void *)(v7 + 16sub_6CEC((void *)v0 + 8) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_bridgeObjectRelease(v3);
  if (v0) {
    return swift_task_switch(sub_26738, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v7 + 144));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_26738()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for CAMDisambiguateCATs()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin19CAMDisambiguateCATs);
}

void sub_26790()
{
  qword_5D3F8 = 0x54746E6572727543LL;
  unk_5D400 = 0xEB000000006B7361LL;
}

uint64_t sub_267BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  sub_83CC((uint64_t)a3, v5 + 16);
  sub_83CC((uint64_t)a4, v5 + 56);
  *(void *)(v5 + 96) = a1;
  *(void *)(v5 + 104) = a2;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_72B4(v10, (uint64_t)qword_5D478);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "CamErrorFlow: new instance initialised", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  sub_6CEC(a4);
  sub_6CEC(a3);
  return v5;
}

uint64_t sub_268D4(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A820);
  v2[24] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  v2[25] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[26] = v5;
  v2[27] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A5A0);
  v2[28] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  v2[29] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[30] = v8;
  v2[31] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_72E4(&qword_5B140);
  v2[32] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TemplatingResult(0LL);
  v2[33] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[34] = v11;
  v2[35] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_269F0, 0LL, 0LL);
}

uint64_t sub_269F0()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  v0[36] = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "CamErrorFlow: execute called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to static ErrorTemplates.genericError() + 1));
  v0[37] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_26AF8;
  return static ErrorTemplates.genericError()(v0[32]);
}

uint64_t sub_26AF8()
{
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v2 = sub_26F74;
  }

  else
  {
    uint64_t v2 = sub_26B64;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_26B64()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v18 = *(void *)(v0 + 232);
  uint64_t v7 = *(void **)(v0 + 184);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v4, 0LL, 1LL, v3);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, v4, v3);
  uint64_t v9 = static Device.current.getter(v8);
  static Device.current.getter(v9);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 88);
  sub_73B4((void *)(v0 + 56), v11);
  LOBYTE(vsub_6CEC((void *)v0 + 3) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v11, v10);
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v6, 1LL, 1LL, v12);
  *(void *)(v0 + 12sub_6CEC((void *)v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 11sub_6CEC((void *)v0 + 2) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v2,  v0 + 16,  v3 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v6,  _swiftEmptyArrayStorage,  v0 + 96);
  sub_73D8(v0 + 96, (uint64_t *)&unk_5C140);
  sub_73D8(v6, (uint64_t *)&unk_5A5A0);
  sub_6CEC((void *)(v0 + 16));
  sub_6CEC((void *)(v0 + 56));
  uint64_t v13 = v7[5];
  uint64_t v14 = v7[6];
  sub_73B4(v7 + 2, v13);
  *(void *)(v0 + 160) = v18;
  *(void *)(v0 + 16sub_6CEC((void *)v0 + 8) = &protocol witness table for AceOutput;
  uint64_t v15 = sub_8390((void *)(v0 + 136));
  (*(void (**)(void *, uint64_t, uint64_t))(v19 + 16))(v15, v5, v18);
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 304) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_26D3C;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 136, v13, v14);
}

uint64_t sub_26D3C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 304));
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v3 = sub_27090;
  }

  else
  {
    sub_6CEC((void *)(v2 + 136));
    uint64_t v3 = sub_26DAC;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_26DAC()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void **)(v0 + 184);
  uint64_t v5 = v4[10];
  uint64_t v26 = v4[11];
  sub_73B4(v4 + 7, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.failed(_:), v3);
  if (qword_59D90 != -1) {
    swift_once(&qword_59D90, sub_26790);
  }
  uint64_t v25 = *(void *)(v0 + 280);
  uint64_t v23 = *(void *)(v0 + 272);
  uint64_t v24 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v22 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v11 = qword_5D3F8;
  uint64_t v12 = unk_5D400;
  uint64_t v13 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v9, 1LL, 1LL, v13);
  swift_bridgeObjectRetain(v12);
  swift_retain(v10);
  uint64_t v14 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v8, v11, v12, v9, sub_275CC, v10);
  dispatch thunk of SiriKitEventSending.send(_:)(v14, v5, v26);
  uint64_t v15 = swift_release(v14);
  static ExecuteResponse.complete()(v15);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v22, v7);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  uint64_t v16 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_26F74()
{
  uint64_t v1 = *(void *)(v0 + 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 272) + 56LL))( v1,  1LL,  1LL,  *(void *)(v0 + 264));
  uint64_t v2 = sub_73D8(v1, &qword_5B140);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "Failure producing error dialog to present to user.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  static ExecuteResponse.complete()(v6);
  uint64_t v7 = *(void *)(v0 + 248);
  uint64_t v8 = *(void *)(v0 + 256);
  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_27090()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  os_log_type_t v4 = *(void **)(v0 + 184);
  uint64_t v5 = v4[10];
  uint64_t v26 = v4[11];
  sub_73B4(v4 + 7, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.failed(_:), v3);
  if (qword_59D90 != -1) {
    swift_once(&qword_59D90, sub_26790);
  }
  uint64_t v25 = *(void *)(v0 + 280);
  uint64_t v23 = *(void *)(v0 + 272);
  uint64_t v24 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v22 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v11 = qword_5D3F8;
  uint64_t v12 = unk_5D400;
  uint64_t v13 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v9, 1LL, 1LL, v13);
  swift_bridgeObjectRetain(v12);
  swift_retain(v10);
  uint64_t v14 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v8, v11, v12, v9, sub_275CC, v10);
  dispatch thunk of SiriKitEventSending.send(_:)(v14, v5, v26);
  uint64_t v15 = swift_release(v14);
  static ExecuteResponse.complete()(v15);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v22, v7);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  uint64_t v16 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_27260()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t type metadata accessor for CamErrorFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin12CamErrorFlow);
}

uint64_t sub_272B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CamErrorFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_27310(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_5B08C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_7240;
  return sub_268D4(a1);
}

uint64_t sub_27364(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CamErrorFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_27388(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_72B4(v7, (uint64_t)qword_5D478);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    unint64_t v13 = sub_27584();
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v2, v13);
    unint64_t v16 = v15;
    uint64_t v18 = sub_24BA0(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v16);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    _os_log_impl(&dword_0, v9, v10, "CamErrorFlow: on called with %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  return 0LL;
}

unint64_t sub_27584()
{
  unint64_t result = qword_5A040;
  if (!qword_5A040)
  {
    uint64_t v1 = type metadata accessor for Input(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Input, v1);
    atomic_store(result, (unint64_t *)&qword_5A040);
  }

  return result;
}

uint64_t sub_275CC()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain(v1);
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter(v2, v1);
}

uint64_t sub_2760C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v87 = a2;
  uint64_t v88 = a1;
  uint64_t v2 = sub_72E4(&qword_5A038);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (uint64_t *)((char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v81 = type metadata accessor for CAMDirectInvocation(0LL);
  uint64_t v80 = *(void *)(v81 - 8);
  uint64_t v7 = __chkstk_darwin(v81, v6);
  uint64_t v79 = (uint64_t)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v82 = (uint64_t)&v76 - v10;
  uint64_t v84 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v11 = *(void *)(v84 - 8);
  __chkstk_darwin(v84, v12);
  uint64_t v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for Parse(0LL);
  uint64_t v15 = *(void *)(v86 - 8);
  uint64_t v17 = __chkstk_darwin(v86, v16);
  uint64_t v85 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v76 - v20;
  uint64_t v22 = sub_72E4(&qword_5B1F0);
  __chkstk_darwin(v22, v23);
  uint64_t v25 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v26 = type metadata accessor for Logger(0LL);
  uint64_t v83 = sub_72B4(v26, (uint64_t)qword_5D478);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v83);
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v78 = v5;
    uint64_t v77 = v11;
    uint64_t v31 = v30;
    *(void *)&v94[0] = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v92[0] = sub_24BA0(0xD000000000000014LL, 0x8000000000049860LL, (uint64_t *)v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v92, (char *)v92 + 8, v29 + 4, v29 + 12);
    _os_log_impl(&dword_0, v27, v28, "%s", v29, 0xCu);
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v32 = v31;
    uint64_t v11 = v77;
    uint64_t v5 = v78;
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  uint64_t v33 = v88;
  static SiriKitPlatformErrorCase.fromParse(_:)(v88);
  uint64_t v34 = type metadata accessor for SiriKitPlatformErrorCase(0LL);
  int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48LL))(v25, 1LL, v34);
  sub_73D8((uint64_t)v25, &qword_5B1F0);
  if (v35 != 1)
  {
    uint64_t v47 = type metadata accessor for PlatformErrorFlow(0LL);
    uint64_t v95 = 0LL;
    memset(v94, 0, sizeof(v94));
    uint64_t v93 = 0LL;
    memset(v92, 0, sizeof(v92));
    uint64_t v48 = (void *)PlatformErrorFlow.__allocating_init(outputPublisher:deviceState:)(v94, v92);
    *(void *)&v94[0] = v48;
    uint64_t v49 = &protocol witness table for PlatformErrorFlow;
LABEL_13:
    uint64_t v58 = Flow.eraseToAnyFlow()(v47, v49);
    swift_release(v48);
    static FlowSearchResult.flow(_:)(v58);
    uint64_t v59 = v58;
    return swift_release(v59);
  }

  uint64_t v36 = v15;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v38 = v86;
  v37(v21, v33, v86);
  int v39 = sub_3B03C((uint64_t)v21);
  uint64_t v40 = v36;
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t))(v36 + 8);
  uint64_t v42 = v41(v21, v38);
  if (v39 != 3)
  {
    uint64_t v50 = static AceService.currentAsync.getter(v94, v42);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v92, v50);
    uint64_t v51 = type metadata accessor for DefaultCatExecutor();
    uint64_t v52 = swift_allocObject(v51, 16LL, 7LL);
    uint64_t v90 = v51;
    uint64_t v91 = &off_55CE0;
    *(void *)&__int128 v89 = v52;
    uint64_t v47 = type metadata accessor for RepeatRecentDialogFlow();
    uint64_t v48 = (void *)swift_allocObject(v47, 160LL, 7LL);
    uint64_t v53 = sub_7520((uint64_t)&v89, v51);
    __chkstk_darwin(v53, v53);
    os_log_type_t v55 = (uint64_t *)((char *)&v76 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v56 + 16))(v55);
    uint64_t v57 = *v55;
    v48[15] = v51;
    v48[16] = &off_55CE0;
    v48[12] = v57;
    v48[17] = 4LL;
    sub_72CC(v94, (uint64_t)(v48 + 2));
    sub_72CC(v92, (uint64_t)(v48 + 7));
    v48[18] = sub_37ADC;
    v48[19] = 0LL;
    sub_6CEC(&v89);
    *(void *)&v94[0] = v48;
    uint64_t v49 = (void *)sub_285EC( &qword_5B220,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for RepeatRecentDialogFlow,  (uint64_t)&unk_486F0);
    goto LABEL_13;
  }

  uint64_t v43 = sub_3D834(v33);
  if (v43 != 3)
  {
    uint64_t v61 = static AceService.currentAsync.getter(v94, v43);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v92, v61);
    uint64_t v62 = type metadata accessor for DefaultCatExecutor();
    uint64_t v63 = swift_allocObject(v62, 16LL, 7LL);
    static SiriKitEventSender.current.getter(&v89, v63);
    uint64_t v64 = sub_28498(v94, v92, v63, &v89);
    *(void *)&v94[0] = v64;
    uint64_t v65 = type metadata accessor for UniversalActionTaskInterruptionFlow();
    uint64_t v66 = sub_285EC( &qword_5B218,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for UniversalActionTaskInterruptionFlow,  (uint64_t)&unk_4888C);
    uint64_t v67 = Flow.eraseToAnyFlow()(v65, v66);
    swift_release(v64);
    static FlowSearchResult.flow(_:)(v67);
    uint64_t v59 = v67;
    return swift_release(v59);
  }

  uint64_t v44 = v85;
  v37(v85, v33, v38);
  if ((*(unsigned int (**)(char *, uint64_t))(v40 + 88))(v44, v38) == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v40 + 96))(v44, v38);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v44, v84);
    sub_2B424(v5);
    uint64_t v45 = v81;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v80 + 48))(v5, 1LL, v81) != 1)
    {
      uint64_t v72 = v82;
      sub_25850((uint64_t)v5, v82);
      uint64_t v73 = v72;
      uint64_t v74 = v79;
      sub_25894(v73, v79);
      uint64_t v75 = (char *)&loc_27E00 + 4 * byte_480A0[swift_getEnumCaseMultiPayload(v74, v45)];
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v84);
    uint64_t v46 = sub_73D8((uint64_t)v5, &qword_5A038);
  }

  else
  {
    uint64_t v46 = v41(v44, v38);
  }

  uint64_t v68 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v69 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v68, v69))
  {
    Swift::Bool v70 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v71 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v94[0] = v71;
    *(_DWORD *)Swift::Bool v70 = 136315138;
    *(void *)&v92[0] = sub_24BA0(0xD000000000000014LL, 0x8000000000049860LL, (uint64_t *)v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v92, (char *)v92 + 8, v70 + 4, v70 + 12);
    _os_log_impl(&dword_0, v68, v69, "%s: could not find any flow for this parse", v70, 0xCu);
    swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v70, -1LL, -1LL);
  }

  return static FlowSearchResult.noFlow.getter();
}

uint64_t sub_28298()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for CAMRootFlowPlugin()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin17CAMRootFlowPlugin);
}

uint64_t sub_282C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2760C(a1, a2);
}

uint64_t sub_282DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CAMRootFlowPlugin();
  uint64_t result = swift_allocObject(v2, 16LL, 7LL);
  *a1 = result;
  return result;
}

uint64_t sub_28320(uint64_t a1, uint64_t a2)
{
  return sub_285EC( &qword_5B1E8,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for CAMRootFlowPlugin,  (uint64_t)&unk_480C4);
}

uint64_t sub_2834C(uint64_t a1, void *a2, void *a3, uint64_t a4, const char *a5)
{
  v16[3] = type metadata accessor for DefaultCatExecutor();
  v16[4] = &off_55CE0;
  v16[0] = a1;
  sub_83CC((uint64_t)v16, a4 + 16);
  sub_83CC((uint64_t)a2, a4 + 56);
  sub_83CC((uint64_t)a3, a4 + 96);
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_72B4(v10, (uint64_t)qword_5D478);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, a5, v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  sub_6CEC(a3);
  sub_6CEC(a2);
  sub_6CEC(v16);
  return a4;
}

uint64_t sub_28498(__int128 *a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v8 = type metadata accessor for DefaultCatExecutor();
  v22[3] = v8;
  v22[4] = &off_55CE0;
  v22[0] = a3;
  uint64_t v9 = type metadata accessor for UniversalActionTaskInterruptionFlow();
  uint64_t v10 = swift_allocObject(v9, 192LL, 7LL);
  uint64_t v11 = sub_7520((uint64_t)v22, v8);
  __chkstk_darwin(v11, v11);
  os_log_type_t v13 = (uint64_t *)((char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = *v13;
  uint64_t v20 = v8;
  uint64_t v21 = &off_55CE0;
  *(void *)&__int128 v19 = v15;
  uint64_t KeyPath = swift_getKeyPath(&unk_48148);
  uint64_t v17 = sub_72E4(&qword_5B228);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  *(void *)(v10 + 184) = SiriEnvironmentValue.init(_:)(KeyPath);
  sub_72CC(a1, v10 + 16);
  sub_72CC(a2, v10 + 56);
  sub_72CC(&v19, v10 + 96);
  *(_BYTE *)(v10 + 176) = 2;
  sub_72CC(a4, v10 + 136);
  sub_6CEC(v22);
  return v10;
}

uint64_t sub_285EC(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_2862C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SiriEnvironment.currentRequest.getter();
  *a1 = result;
  return result;
}

uint64_t sub_28654(void *a1)
{
  uint64_t v1 = swift_retain(*a1);
  return SiriEnvironment.currentRequest.setter(v1);
}

void *sub_2867C(uint64_t a1)
{
  uint64_t v3 = sub_72E4(&qword_5A928);
  __chkstk_darwin(v3, v4);
  int v35 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for TemplatingText(0LL);
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v34 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v32 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TemplatingSection(0LL);
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    uint64_t v29 = v1;
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_2CED0(0, v13, 0);
    uint64_t v14 = v37;
    uint64_t v15 = (void **)(a1 + 64);
    uint64_t v16 = v32;
    do
    {
      int64_t v36 = v13;
      uint64_t v17 = (uint64_t)*(v15 - 4);
      uint64_t v18 = (uint64_t)*(v15 - 3);
      __int128 v19 = v12;
      uint64_t v20 = (uint64_t)*(v15 - 2);
      uint64_t v21 = (uint64_t)*(v15 - 1);
      uint64_t v22 = *v15;
      swift_bridgeObjectRetain_n(v18, 2LL);
      swift_bridgeObjectRetain_n(v21, 2LL);
      id v23 = v22;
      uint64_t v24 = v20;
      uint64_t v12 = v19;
      TemplatingText.init(text:speakableTextOverride:)(v17, v18, v24, v21);
      uint64_t v25 = v35;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v35, 1LL, 1LL, v34);
      TemplatingSection.init(id:content:caption:spokenOnly:)( 0,  0xE000000000000000,  v16,  v25,  [v23 BOOLValue]);

      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v18);
      uint64_t v37 = v14;
      unint64_t v27 = v14[2];
      unint64_t v26 = v14[3];
      if (v27 >= v26 >> 1)
      {
        sub_2CED0(v26 > 1, v27 + 1, 1);
        uint64_t v14 = v37;
      }

      v14[2] = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))( (unint64_t)v14 + ((*(unsigned __int8 *)(v30 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
      + *(void *)(v30 + 72) * v27,
        v19,
        v31);
      v15 += 5;
      int64_t v13 = v36 - 1;
    }

    while (v36 != 1);
  }

  return v14;
}

unint64_t sub_288D8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_72E4(&qword_5B318);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v41 = v1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 64);
  int64_t v40 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = &v47;
  uint64_t v8 = &v49;
  unint64_t result = swift_bridgeObjectRetain(v1);
  int64_t i = 0LL;
  uint64_t v11 = (char *)&type metadata for Any + 8;
  uint64_t v12 = &type metadata for String;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v21 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v21 >= v40) {
    goto LABEL_32;
  }
  unint64_t v22 = *(void *)(v41 + 8 * v21);
  int64_t v23 = i + 1;
  if (!v22)
  {
    int64_t v23 = i + 2;
    if (i + 2 >= v40) {
      goto LABEL_32;
    }
    unint64_t v22 = *(void *)(v41 + 8 * v23);
    if (!v22)
    {
      int64_t v23 = i + 3;
      if (i + 3 >= v40) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v41 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = i + 4;
        if (i + 4 >= v40) {
          goto LABEL_32;
        }
        unint64_t v22 = *(void *)(v41 + 8 * v23);
        if (!v22)
        {
          int64_t v24 = i + 5;
          if (i + 5 < v40)
          {
            unint64_t v22 = *(void *)(v41 + 8 * v24);
            if (v22)
            {
              int64_t v23 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v23 = v24 + 1;
              if (__OFADD__(v24, 1LL)) {
                goto LABEL_36;
              }
              if (v23 >= v40) {
                break;
              }
              unint64_t v22 = *(void *)(v41 + 8 * v23);
              ++v24;
              if (v22) {
                goto LABEL_26;
              }
            }
          }

uint64_t sub_28C40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_72E4(&qword_5B338);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_29008(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  sub_2A6C8(a1, (uint64_t)sub_2A688, 0LL, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v2) {
    swift_bridgeObjectRelease(v6);
  }
  return v6;
}

uint64_t sub_29084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  v5[19] = a4;
  v5[20] = v6;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  return swift_task_switch(sub_290A8, 0LL, 0LL);
}

uint64_t sub_290A8()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[20];
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___CAT);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  id v6 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  v0[21] = v6;
  NSString v7 = String._bridgeToObjectiveC()();
  v0[22] = v7;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[23] = isa;
  uint64_t v9 = static DialogHelper.globals.getter();
  uint64_t v10 = swift_bridgeObjectRetain(v2);
  uint64_t v11 = sub_29008(v10, v9);
  Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[24] = v12;
  swift_bridgeObjectRelease(v11);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_29248;
  uint64_t v13 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  int64_t v14 = v0 + 10;
  v14[1] = 0x40000000LL;
  v14[2] = sub_29004;
  v14[3] = &unk_55D60;
  v14[4] = v13;
  [v4 execute:v6 catId:v7 parameters:isa globals:v12 completion:v14];
  return swift_continuation_await(v1);
}

uint64_t sub_29248()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 200LL) = v1;
  if (v1) {
    uint64_t v2 = sub_292FC;
  }
  else {
    uint64_t v2 = sub_292A8;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_292A8()
{
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v3 = *(void **)(v0 + 168);
  uint64_t v2 = *(void **)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_292FC()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v3 = *(void **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 184);
  uint64_t v4 = *(void **)(v0 + 168);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_29358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  v5[29] = a4;
  v5[30] = v6;
  v5[27] = a2;
  v5[28] = a3;
  v5[26] = a1;
  uint64_t v7 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v5[31] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[32] = v8;
  v5[33] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_293C4, 0LL, 0LL);
}

uint64_t sub_293C4()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v4 = sub_72E4(&qword_5B330);
  uint64_t inited = swift_initStackObject(v4, v0 + 10);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  strcpy((char *)(inited + 32), "responseMode");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 4sub_6CEC((void *)v0 + 8) = 0LL;
  *(void *)(inited + 56) = 0xE000000000000000LL;
  unint64_t v6 = sub_2C838(inited);
  uint64_t v7 = static DialogHelper.globals.getter();
  unint64_t v8 = sub_288D8(v6);
  swift_bridgeObjectRelease(v6);
  uint64_t v9 = sub_29008(v8, v7);
  v0[34] = 0LL;
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___CAT);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  id v12 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  v0[35] = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  v0[36] = v13;
  uint64_t v14 = sub_28C40(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[37] = isa;
  swift_bridgeObjectRelease(v14);
  Class v16 = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[38] = v16;
  swift_bridgeObjectRelease(v9);
  uint64_t v17 = CATDefaultMode;
  v0[7] = v0 + 23;
  v0[2] = v0;
  v0[3] = sub_295F0;
  uint64_t v18 = swift_continuation_init(v0 + 2, 1LL);
  v0[18] = _NSConcreteStackBlock;
  uint64_t v19 = v0 + 18;
  v19[1] = 0x40000000LL;
  v19[2] = sub_29004;
  v19[3] = &unk_55D48;
  v19[4] = v18;
  [v10 execute:v12 catId:v13 parameters:isa globals:v16 callback:0 options:v17 completion:v19];
  return swift_continuation_await(v1);
}

uint64_t sub_295F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 312LL) = v1;
  if (v1) {
    uint64_t v2 = sub_29804;
  }
  else {
    uint64_t v2 = sub_29650;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_29650()
{
  uint64_t v1 = *(void **)(v0 + 296);
  uint64_t v3 = *(void **)(v0 + 280);
  uint64_t v2 = *(void **)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 248);
  unint64_t v6 = *(void **)(v0 + 184);

  id v7 = [v6 print];
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String);

  id v9 = [v6 speak];
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String);

  id v11 = [v6 spokenOnly];
  unint64_t v12 = sub_2AF04();
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  uint64_t v14 = sub_12C10(v8, v10, v13);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v13);
  unint64_t v15 = sub_2867C((uint64_t)v14);
  swift_bridgeObjectRelease(v14);
  (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))( v4,  enum case for BehaviorAfterSpeaking.listen(_:),  v18);
  swift_bridgeObjectRetain(v5);
  TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)(v19, v5, v15, v4);

  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_29804()
{
  uint64_t v1 = *(void **)(v0 + 304);
  uint64_t v3 = *(void **)(v0 + 288);
  uint64_t v2 = *(void **)(v0 + 296);
  uint64_t v4 = *(void **)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 264);
  swift_willThrow();

  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_29874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  v4[18] = a3;
  v4[19] = v5;
  v4[16] = a1;
  v4[17] = a2;
  return swift_task_switch(sub_29894, 0LL, 0LL);
}

uint64_t sub_29894()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = v0[17];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_72B4(v2, (uint64_t)qword_5D478);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[17];
  if (v6)
  {
    uint64_t v8 = v0[16];
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v10;
    *(_DWORD *)id v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    v0[10] = sub_24BA0(v8, v7, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl(&dword_0, v4, v5, "Executing pattern %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[17], 2LL);
  }

  uint64_t v11 = v0[19];
  unint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___CATPattern);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v11);
  id v14 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  v0[20] = v14;
  NSString v15 = String._bridgeToObjectiveC()();
  v0[21] = v15;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[22] = isa;
  uint64_t v17 = static DialogHelper.globals.getter();
  Class v18 = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[23] = v18;
  swift_bridgeObjectRelease(v17);
  uint64_t v19 = CATDefaultMode;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_29B94;
  v0[14] = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = sub_29004;
  v0[13] = &unk_55D30;
  [v12 execute:v14 patternId:v15 parameters:isa globals:v18 callback:0 options:v19 completion:v0 + 10];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_29B94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 192LL) = v1;
  if (v1) {
    uint64_t v2 = sub_29C48;
  }
  else {
    uint64_t v2 = sub_29BF4;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_29BF4()
{
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v3 = *(void **)(v0 + 160);
  uint64_t v2 = *(void **)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_29C48()
{
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v3 = *(void **)(v0 + 168);
  uint64_t v2 = *(void **)(v0 + 176);
  uint64_t v4 = *(void **)(v0 + 160);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_29CA4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_72E4((uint64_t *)&unk_5A8D0);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *unint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    **(void **)(*(void *)(v3 + 64) + 40LL) = a2;
    id v10 = a2;
    return swift_continuation_throwingResume(v3);
  }

uint64_t type metadata accessor for DefaultCatExecutor()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin18DefaultCatExecutor);
}

uint64_t sub_29D48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_72E4(&qword_5B318);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    __int128 v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

LABEL_24:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      unint64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_22E38(v25, v38);
      }

      else
      {
        sub_25914((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      Class v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *Class v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_22E38(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_2A044(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_72E4(&qword_5B340);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    int64_t v35 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v32 = -1LL << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }

      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v21 >= v34) {
          goto LABEL_36;
        }
        unint64_t v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_36;
          }
          unint64_t v22 = v35[v9];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64) {
                  bzero(v35, 8 * v34);
                }
                else {
                  *int64_t v35 = v32;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_44;
                }
                if (v9 >= v34) {
                  goto LABEL_36;
                }
                unint64_t v22 = v35[v9];
                ++v23;
                if (v22) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v23;
          }
        }

LABEL_33:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }

      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      char v29 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v20);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(v29[1]);
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v28);
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }

        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(void *)(*(void *)(v8 + 48) + 8 * v1sub_6CEC(v0 + 7) = v28;
      unint64_t v18 = (void *)(*(void *)(v8 + 56) + 16 * v17);
      *unint64_t v18 = v30;
      v18[1] = v31;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

void *sub_2A2F8()
{
  uint64_t v1 = v0;
  sub_72E4(&qword_5B318);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_2A4DC()
{
  uint64_t v1 = v0;
  sub_72E4(&qword_5B340);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

LABEL_28:
  __break(1u);
  return result;
}

          uint64_t v78 = *(void *)(v68 + 24);
          *(void *)(v68 + 16) = v76;
          *(void *)(v68 + 24) = v77;
          swift_bridgeObjectRelease(v78);
          uint64_t v79 = *(void *)(v69 + 16);
          if (v79)
          {
            uint64_t v80 = sub_2C9F4(0xD000000000000012LL, 0x80000000000499C0LL);
            if ((v81 & 1) != 0)
            {
              sub_25914(*(void *)(v69 + 56) + 32 * v80, (uint64_t)&v135);
              uint64_t v82 = swift_dynamicCast(&v133, &v135, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
              uint64_t v79 = v133;
              uint64_t v83 = v134;
              if (!v82)
              {
                uint64_t v79 = 0LL;
                uint64_t v83 = 0LL;
              }

      sub_6CEC(&v92);
      return 3LL;
    }
  }

  else
  {
    uint64_t v53 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFF8LL));
    uint64_t v54 = v37;
    if (!v53) {
      goto LABEL_17;
    }
  }

  if ((v52 & 0xC000000000000001LL) != 0)
  {
    uint64_t v53 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v52);
    goto LABEL_17;
  }

  if (*(void *)((char *)&dword_10 + (v52 & 0xFFFFFFFFFFFFF8LL)))
  {
    uint64_t v53 = *(void *)(v52 + 32);
    swift_retain(v53);
    goto LABEL_17;
  }

  __break(1u);
  return result;
}

uint64_t sub_2A688@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_25914((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_2A6C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = -v9;
  uint64_t v52 = a1;
  uint64_t v53 = a1 + 64;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  else {
    uint64_t v13 = -1LL;
  }
  uint64_t v54 = v10;
  uint64_t v55 = 0LL;
  uint64_t v56 = v13 & v11;
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_2AA1C(&v50);
  uint64_t v14 = *((void *)&v50 + 1);
  if (!*((void *)&v50 + 1)) {
    goto LABEL_27;
  }
  uint64_t v15 = v50;
  sub_22E38(v51, v49);
  uint64_t v16 = *(void **)a5;
  unint64_t v18 = sub_2C9F4(v15, v14);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  char v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      if ((v17 & 1) != 0) {
        goto LABEL_12;
      }
    }

    else
    {
      sub_2A2F8();
      if ((v22 & 1) != 0) {
        goto LABEL_12;
      }
    }

LABEL_14:
    BOOL v26 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v18 >> 6) + 64) |= 1LL << v18;
    uint64_t v27 = (uint64_t *)(v26[6] + 16 * v18);
    *uint64_t v27 = v15;
    v27[1] = v14;
    sub_22E38(v49, (_OWORD *)(v26[7] + 32 * v18));
    uint64_t v28 = v26[2];
    BOOL v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    _OWORD v26[2] = v30;
LABEL_16:
    sub_2AA1C(&v50);
    for (uint64_t i = *((void *)&v50 + 1); *((void *)&v50 + 1); uint64_t i = *((void *)&v50 + 1))
    {
      uint64_t v33 = v50;
      sub_22E38(v51, v49);
      int64_t v34 = *(void **)a5;
      unint64_t v36 = sub_2C9F4(v33, i);
      uint64_t v37 = v34[2];
      BOOL v38 = (v35 & 1) == 0;
      uint64_t v39 = v37 + v38;
      if (__OFADD__(v37, v38)) {
        goto LABEL_28;
      }
      char v40 = v35;
      if (v34[3] < v39)
      {
        sub_29D48(v39, 1LL);
        unint64_t v41 = sub_2C9F4(v33, i);
        if ((v40 & 1) != (v42 & 1)) {
          goto LABEL_30;
        }
        unint64_t v36 = v41;
      }

      if ((v40 & 1) != 0)
      {
        sub_25914((uint64_t)v49, (uint64_t)v48);
        sub_6CEC(v49);
        swift_bridgeObjectRelease(i);
        uint64_t v32 = (void *)(*(void *)(*(void *)a5 + 56LL) + 32 * v36);
        sub_6CEC(v32);
        sub_22E38(v48, v32);
      }

      else
      {
        uint64_t v43 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v36 >> 6) + 64) |= 1LL << v36;
        uint64_t v44 = (uint64_t *)(v43[6] + 16 * v36);
        uint64_t *v44 = v33;
        v44[1] = i;
        sub_22E38(v49, (_OWORD *)(v43[7] + 32 * v36));
        uint64_t v45 = v43[2];
        BOOL v29 = __OFADD__(v45, 1LL);
        uint64_t v46 = v45 + 1;
        if (v29) {
          goto LABEL_29;
        }
        v43[2] = v46;
      }

      sub_2AA1C(&v50);
    }

  if ((v9 & 0xC000000000000001LL) != 0)
  {
    char v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
    goto LABEL_17;
  }

  if (*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL)))
  {
    char v17 = *(void *)(v9 + 32);
    swift_retain(v17);
LABEL_17:
    unint64_t v18 = swift_bridgeObjectRelease(v9);
    uint64_t v19 = dispatch thunk of UsoValue.getAsEntity()(v18);
    swift_release(v17);
    if (v19)
    {
      BOOL v20 = type metadata accessor for UsoEntity_common_ListPosition(0LL);
      uint64_t v21 = swift_retain(v19);
      static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&v33, v21, v20, v20);
      char v22 = swift_release(v19);
      unint64_t v23 = v33;
      if (v33)
      {
        dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter(v22);
        char v24 = sub_33AA4((uint64_t)v3);
        BOOL v26 = v25;
        swift_release(v19);
        swift_release(v23);
        swift_release(v6);
        swift_release(v5);
        sub_342A0((uint64_t)v3);
        if ((v26 & 1) == 0) {
          return v24;
        }
        return 0LL;
      }

      swift_release(v5);
      swift_release(v6);
      uint64_t v28 = v19;
      goto LABEL_28;
    }

    swift_release(v6);
LABEL_27:
    uint64_t v28 = v5;
LABEL_28:
    swift_release(v28);
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_2AA1C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_25914(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&__int128 v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }

  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }

    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  memset(v24, 0, sizeof(v24));
  __int128 v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_2AE7C((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_2AEC4((uint64_t)v21);
  }

  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }

  return result;
}

uint64_t sub_2ABF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[19] = a4;
  v5[20] = a5;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  return swift_task_switch(sub_2AC10, 0LL, 0LL);
}

uint64_t sub_2AC10()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[16];
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___CAT);
  NSString v5 = String._bridgeToObjectiveC()();
  v0[21] = v5;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[22] = isa;
  uint64_t v7 = static DialogHelper.globals.getter();
  uint64_t v8 = swift_bridgeObjectRetain(v2);
  uint64_t v9 = sub_29008(v8, v7);
  Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[23] = v10;
  swift_bridgeObjectRelease(v9);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_2AD78;
  uint64_t v11 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v12 = v0 + 10;
  v12[1] = 0x40000000LL;
  v12[2] = sub_29004;
  uint64_t v12[3] = &unk_55D18;
  v12[4] = v11;
  [v4 execute:v3 catId:v5 parameters:isa globals:v10 completion:v12];
  return swift_continuation_await(v1);
}

uint64_t sub_2AD78()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 192LL) = v1;
  if (v1) {
    uint64_t v2 = sub_2AE28;
  }
  else {
    uint64_t v2 = sub_2ADD8;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_2ADD8()
{
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_2AE28()
{
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v3 = *(void **)(v0 + 168);
  uint64_t v2 = *(void **)(v0 + 176);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2AE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5B320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_2AEC4(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5B328);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_2AF04()
{
  unint64_t result = qword_5A918;
  if (!qword_5A918)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_5A918);
  }

  return result;
}

id sub_2AF40(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 =  [(id)swift_getObjCClassFromMetadata(v3) bundleRecordWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

uint64_t type metadata accessor for CoreServicesProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin20CoreServicesProvider);
}

uint64_t sub_2B044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for SiriEnvironment(0LL);
  uint64_t v9 = static SiriEnvironment.default.getter();
  uint64_t v10 = SiriEnvironment.currentDevice.getter();
  uint64_t v11 = swift_release(v9);
  uint64_t v12 = dispatch thunk of CurrentDevice.preferencesLanguageCode.getter(v11);
  uint64_t v14 = v13;
  uint64_t v15 = swift_release(v10);
  if (!v14)
  {
    uint64_t v16 = static Locale.current.getter(v15);
    uint64_t v12 = Locale.identifier.getter(v16);
    uint64_t v14 = v17;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }

  sub_2B3E8();
  swift_bridgeObjectRetain(a2);
  id v18 = sub_2AF40(a1, a2, 0);
  uint64_t v19 = sub_72E4(&qword_5C1B0);
  uint64_t v20 = swift_allocObject(v19, 48LL, 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_47AE0;
  *(void *)(v20 + 3sub_6CEC(v0 + 2) = v12;
  *(void *)(v20 + 40) = v14;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  id v22 = [v18 localizedNameWithPreferredLocalizations:isa];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  return v23;
}

unint64_t sub_2B3E8()
{
  unint64_t result = qword_5B3E8;
  if (!qword_5B3E8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LSBundleRecord);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_5B3E8);
  }

  return result;
}

uint64_t sub_2B424@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v167 = a1;
  uint64_t v3 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v165 = v3;
  uint64_t v166 = v4;
  uint64_t v6 = __chkstk_darwin(v3, v5);
  id v8 = (char *)&v157 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v12 = (char *)&v157 - v11;
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v16 = (char *)&v157 - v15;
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v157 - v18;
  uint64_t v20 = type metadata accessor for PluginAction(0LL);
  uint64_t v164 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20, v21);
  char v163 = (char *)&v157 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v27 = (char *)&v157 - v26;
  uint64_t v28 = Parse.DirectInvocation.identifier.getter(v25);
  uint64_t v30 = v29;
  uint64_t v31 = static CamDirectInvocationIdentifiers.fallback.getter();
  uint64_t v33 = v32;
  if (v31 == v28 && v32 == v30)
  {
    swift_bridgeObjectRelease(v30);
LABEL_5:
    swift_bridgeObjectRelease(v30);
    uint64_t v36 = type metadata accessor for CAMDirectInvocation(0LL);
    uint64_t v37 = v167;
    BOOL v38 = v167;
    uint64_t v39 = v36;
    uint64_t v40 = 3LL;
LABEL_6:
    swift_storeEnumTagMultiPayload(v38, v39, v40);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))( v37,  0LL,  1LL,  v36);
  }

  uint64_t v162 = v20;
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v28, v30, 0LL);
  uint64_t v35 = swift_bridgeObjectRelease(v33);
  if ((v34 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v42 = static CamDirectInvocationIdentifiers.askRepeat.getter(v35);
  uint64_t v44 = v43;
  if (v42 == v28 && v43 == v30)
  {
    swift_bridgeObjectRelease(v30);
LABEL_11:
    swift_bridgeObjectRelease(v30);
    uint64_t v36 = type metadata accessor for CAMDirectInvocation(0LL);
    uint64_t v37 = v167;
    BOOL v38 = v167;
    uint64_t v39 = v36;
    uint64_t v40 = 2LL;
    goto LABEL_6;
  }

  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, v28, v30, 0LL);
  uint64_t v46 = swift_bridgeObjectRelease(v44);
  if ((v45 & 1) != 0) {
    goto LABEL_11;
  }
  uint64_t v47 = static CamDirectInvocationIdentifiers.giveUpRepeat.getter(v46);
  uint64_t v49 = v48;
  if (v47 == v28 && v48 == v30)
  {
    swift_bridgeObjectRelease(v30);
LABEL_16:
    swift_bridgeObjectRelease(v30);
    uint64_t v36 = type metadata accessor for CAMDirectInvocation(0LL);
    uint64_t v37 = v167;
    BOOL v38 = v167;
    uint64_t v39 = v36;
    uint64_t v40 = 4LL;
    goto LABEL_6;
  }

  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v28, v30, 0LL);
  uint64_t v51 = swift_bridgeObjectRelease(v49);
  if ((v50 & 1) != 0) {
    goto LABEL_16;
  }
  uint64_t v52 = static CamDirectInvocationIdentifiers.disambiguateTopTwo.getter(v51);
  uint64_t v54 = v53;
  if (v52 == v28 && v53 == v30)
  {
    swift_bridgeObjectRelease(v30);
    goto LABEL_21;
  }

  char v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, v28, v30, 0LL);
  swift_bridgeObjectRelease(v54);
  if ((v55 & 1) == 0)
  {
    if (v28 == 0xD000000000000024LL && v30 == 0x8000000000049930LL)
    {
      uint64_t v92 = swift_bridgeObjectRelease(0x8000000000049930LL);
      uint64_t v93 = v165;
    }

    else
    {
      char v94 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024LL, 0x8000000000049930LL, v28, v30, 0LL);
      uint64_t v92 = swift_bridgeObjectRelease(v30);
      uint64_t v93 = v165;
      if ((v94 & 1) == 0)
      {
        if (qword_59DD8 != -1) {
          swift_once(&qword_59DD8, sub_34328);
        }
        uint64_t v103 = type metadata accessor for Logger(0LL);
        sub_72B4(v103, (uint64_t)qword_5D478);
        uint64_t v104 = v166;
        unint64_t v105 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v166 + 16);
        uint64_t v106 = v105(v8, v2, v93);
        uint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
        os_log_type_t v108 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v107, v108))
        {
          char v109 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v110 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v168 = v110;
          *(_DWORD *)char v109 = 136315138;
          v105(v12, (uint64_t)v8, v93);
          uint64_t v111 = String.init<A>(describing:)(v12, v93);
          unint64_t v113 = v112;
          uint64_t v170 = sub_24BA0(v111, v112, (uint64_t *)&v168);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171, v109 + 4, v109 + 12);
          swift_bridgeObjectRelease(v113);
          (*(void (**)(char *, uint64_t))(v166 + 8))(v8, v93);
          _os_log_impl(&dword_0, v107, v108, "Couldn't parse direct invocation %s as CAMDirectInvocation", v109, 0xCu);
          swift_arrayDestroy(v110, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v110, -1LL, -1LL);
          swift_slowDealloc(v109, -1LL, -1LL);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v104 + 8))(v8, v93);
        }

        goto LABEL_42;
      }
    }

    uint64_t v95 = Parse.DirectInvocation.userData.getter(v92);
    if (!v95)
    {
      __int128 v168 = 0u;
      __int128 v169 = 0u;
      goto LABEL_85;
    }

    uint64_t v96 = v95;
    if (qword_59D98 == -1)
    {
      if (*(void *)(v95 + 16))
      {
LABEL_51:
        uint64_t v97 = qword_5B3F8;
        uint64_t v98 = qword_5B3F0;
        swift_bridgeObjectRetain(qword_5B3F8);
        unint64_t v99 = sub_2C9F4(v98, v97);
        if ((v100 & 1) != 0)
        {
          sub_25914(*(void *)(v96 + 56) + 32 * v99, (uint64_t)&v168);
          swift_bridgeObjectRelease(v97);
          swift_bridgeObjectRelease(v96);
          if (*((void *)&v169 + 1))
          {
            if ((swift_dynamicCast(&v170, &v168, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
            {
              unint64_t v101 = v167;
              *uint64_t v167 = v170;
              uint64_t v102 = type metadata accessor for CAMDirectInvocation(0LL);
              swift_storeEnumTagMultiPayload(v101, v102, 1LL);
              __int128 v89 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56LL);
              uint64_t v90 = v101;
LABEL_81:
              uint64_t v91 = 0LL;
              uint64_t v88 = v102;
              return v89(v90, v91, 1LL, v88);
            }

            goto LABEL_86;
          }

LABEL_85:
          sub_2C9B4((uint64_t)&v168);
LABEL_86:
          if (qword_59DD8 != -1) {
            swift_once(&qword_59DD8, sub_34328);
          }
          uint64_t v147 = type metadata accessor for Logger(0LL);
          sub_72B4(v147, (uint64_t)qword_5D478);
          uint64_t v148 = v166;
          uint64_t v149 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v166 + 16);
          uint64_t v150 = v149(v16, v2, v93);
          uint64_t v78 = (os_log_s *)Logger.logObject.getter(v150);
          os_log_type_t v151 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v78, v151))
          {
            (*(void (**)(char *, uint64_t))(v148 + 8))(v16, v93);
            goto LABEL_41;
          }

          uint64_t v152 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v153 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v168 = v153;
          *(_DWORD *)uint64_t v152 = 136315138;
          uint64_t v165 = (uint64_t)(v152 + 4);
          v149(v12, (uint64_t)v16, v93);
          uint64_t v154 = String.init<A>(describing:)(v12, v93);
          unint64_t v156 = v155;
          uint64_t v170 = sub_24BA0(v154, v155, (uint64_t *)&v168);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171, v165, v152 + 12);
          swift_bridgeObjectRelease(v156);
          (*(void (**)(char *, uint64_t))(v148 + 8))(v16, v93);
          _os_log_impl(&dword_0, v78, v151, "Couldn't parse direct invocation %s as CAMDirectInvocation", v152, 0xCu);
          swift_arrayDestroy(v153, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v153, -1LL, -1LL);
          uint64_t v87 = v152;
          goto LABEL_39;
        }

        __int128 v168 = 0u;
        __int128 v169 = 0u;
        swift_bridgeObjectRelease(v97);
LABEL_84:
        swift_bridgeObjectRelease(v96);
        goto LABEL_85;
      }
    }

    else
    {
      swift_once(&qword_59D98, sub_2C958);
      if (*(void *)(v96 + 16)) {
        goto LABEL_51;
      }
    }

    __int128 v168 = 0u;
    __int128 v169 = 0u;
    goto LABEL_84;
  }

LABEL_21:
  uint64_t v56 = swift_bridgeObjectRelease(v30);
  uint64_t v57 = Parse.DirectInvocation.userData.getter(v56);
  if (!v57)
  {
    __int128 v168 = 0u;
    __int128 v169 = 0u;
    uint64_t v59 = v166;
    goto LABEL_32;
  }

  uint64_t v58 = v57;
  uint64_t v59 = v166;
  if (!*(void *)(v57 + 16) || (unint64_t v60 = sub_2C9F4(1936750952LL, 0xE400000000000000LL), (v61 & 1) == 0))
  {
    __int128 v168 = 0u;
    __int128 v169 = 0u;
    swift_bridgeObjectRelease(v58);
    goto LABEL_32;
  }

  sub_25914(*(void *)(v58 + 56) + 32 * v60, (uint64_t)&v168);
  swift_bridgeObjectRelease(v58);
  if (!*((void *)&v169 + 1))
  {
LABEL_32:
    sub_2C9B4((uint64_t)&v168);
    goto LABEL_33;
  }

  uint64_t v62 = sub_72E4(&qword_5B400);
  if ((swift_dynamicCast(&v170, &v168, (char *)&type metadata for Any + 8, v62, 6LL) & 1) == 0)
  {
LABEL_33:
    uint64_t v75 = v165;
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v76 = type metadata accessor for Logger(0LL);
    sub_72B4(v76, (uint64_t)qword_5D478);
    uint64_t v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 16))(v19, v2, v75);
    uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v78, v79))
    {
      (*(void (**)(char *, uint64_t))(v59 + 8))(v19, v75);
      goto LABEL_41;
    }

    uint64_t v80 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v81 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v168 = v81;
    *(_DWORD *)uint64_t v80 = 136315138;
    unint64_t v82 = Parse.DirectInvocation.userData.getter(v81);
    if (!v82) {
      unint64_t v82 = sub_2C5C4((uint64_t)_swiftEmptyArrayStorage);
    }
    unint64_t v83 = v82;
    uint64_t v84 = Dictionary.description.getter( v82,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v86 = v85;
    swift_bridgeObjectRelease(v83);
    uint64_t v170 = sub_24BA0(v84, v86, (uint64_t *)&v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171, v80 + 4, v80 + 12);
    swift_bridgeObjectRelease(v86);
    (*(void (**)(char *, uint64_t))(v166 + 8))(v19, v165);
    swift_arrayDestroy(v81, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1LL, -1LL);
    uint64_t v87 = v80;
LABEL_39:
    swift_slowDealloc(v87, -1LL, -1LL);
LABEL_41:

LABEL_42:
    uint64_t v88 = type metadata accessor for CAMDirectInvocation(0LL);
    __int128 v89 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56LL);
    uint64_t v90 = v167;
    uint64_t v91 = 1LL;
    return v89(v90, v91, 1LL, v88);
  }

  uint64_t v63 = (void *)v170;
  if (*(void *)(v170 + 16) != 2LL)
  {
    swift_bridgeObjectRelease(v170);
    goto LABEL_33;
  }

  *(void *)&__int128 v168 = _swiftEmptyArrayStorage;
  sub_2CCF8(0, 2LL, 0);
  uint64_t v64 = v168;
  uint64_t v65 = v63[4];
  unint64_t v66 = v63[5];
  sub_2CD24(v65, v66);
  sub_2CD24(v65, v66);
  PluginAction.init(data:)(v65, v66);
  sub_2CD68(v65, v66);
  unint64_t v68 = *(void *)(v64 + 16);
  unint64_t v67 = *(void *)(v64 + 24);
  if (v68 >= v67 >> 1)
  {
    sub_2CCF8(v67 > 1, v68 + 1, 1);
    uint64_t v64 = v168;
  }

  *(void *)(v64 + 16) = v68 + 1;
  unint64_t v69 = (*(unsigned __int8 *)(v164 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80);
  uint64_t v70 = *(void *)(v164 + 72);
  unint64_t v71 = v64 + v69 + v70 * v68;
  uint64_t v72 = *(void (**)(unint64_t, char *, uint64_t))(v164 + 32);
  v72(v71, v27, v162);
  uint64_t v73 = v63[6];
  unint64_t v74 = v63[7];
  sub_2CD24(v73, v74);
  sub_2CD24(v73, v74);
  PluginAction.init(data:)(v73, v74);
  uint64_t v165 = v70;
  sub_2CD68(v73, v74);
  *(void *)&__int128 v168 = v64;
  unint64_t v115 = *(void *)(v64 + 16);
  unint64_t v114 = *(void *)(v64 + 24);
  if (v115 >= v114 >> 1)
  {
    sub_2CCF8(v114 > 1, v115 + 1, 1);
    uint64_t v64 = v168;
  }

  *(void *)(v64 + 16) = v115 + 1;
  uint64_t v166 = v64 + v69;
  v72(v64 + v69 + v165 * v115, v27, v162);
  swift_bridgeObjectRelease(v63);
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v116 = type metadata accessor for Logger(0LL);
  uint64_t v161 = sub_72B4(v116, (uint64_t)qword_5D478);
  uint64_t v117 = (os_log_s *)Logger.logObject.getter(v161);
  os_log_type_t v118 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v117, v118))
  {
    uint64_t v119 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v120 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v168 = v120;
    *(_DWORD *)uint64_t v119 = 136315138;
    uint64_t v170 = sub_24BA0(0xD000000000000017LL, 0x8000000000049960LL, (uint64_t *)&v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171, v119 + 4, v119 + 12);
    _os_log_impl(&dword_0, v117, v118, "%s: CAM outputs DisambiguateTopTwo with hyps:", v119, 0xCu);
    swift_arrayDestroy(v120, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v120, -1LL, -1LL);
    swift_slowDealloc(v119, -1LL, -1LL);
  }

  uint64_t v121 = swift_bridgeObjectRetain_n(v64, 2LL);
  uint64_t v122 = (os_log_s *)Logger.logObject.getter(v121);
  LODWORD(v160) = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v122, (os_log_type_t)v160))
  {
    uint64_t v123 = swift_slowAlloc(22LL, -1LL);
    uint64_t v159 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v168 = v159;
    *(_DWORD *)uint64_t v123 = 136315394;
    uint64_t v170 = sub_24BA0(0xD000000000000017LL, 0x8000000000049960LL, (uint64_t *)&v168);
    uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171, v123 + 4, v123 + 12);
    *(_WORD *)(v123 + 1sub_6CEC(v0 + 2) = 2080;
    if (!*(void *)(v64 + 16))
    {
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }

    uint64_t v158 = v123 + 14;
    uint64_t v125 = v163;
    uint64_t v124 = v164;
    uint64_t v126 = v162;
    (*(void (**)(char *, uint64_t, uint64_t))(v164 + 16))(v163, v166, v162);
    unint64_t v127 = sub_2CDAC();
    uint64_t v128 = dispatch thunk of CustomStringConvertible.description.getter(v126, v127);
    unint64_t v130 = v129;
    (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v126);
    uint64_t v170 = sub_24BA0(v128, v130, (uint64_t *)&v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171, v158, v123 + 22);
    swift_bridgeObjectRelease_n(v64, 2LL);
    swift_bridgeObjectRelease(v130);
    _os_log_impl( &dword_0,  v122,  (os_log_type_t)v160,  "%s: CAM outputs DisambiguateTopTwo with hyp 1: %s",  (uint8_t *)v123,  0x16u);
    uint64_t v131 = v159;
    swift_arrayDestroy(v159, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v131, -1LL, -1LL);
    swift_slowDealloc(v123, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v64, 2LL);
  }

  uint64_t v132 = swift_bridgeObjectRetain_n(v64, 2LL);
  uint64_t v133 = (void *)Logger.logObject.getter(v132);
  LODWORD(v161) = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled((os_log_t)v133, (os_log_type_t)v161))
  {

    swift_bridgeObjectRelease_n(v64, 2LL);
    goto LABEL_78;
  }

  uint64_t v134 = swift_slowAlloc(22LL, -1LL);
  uint64_t v160 = swift_slowAlloc(64LL, -1LL);
  *(void *)&__int128 v168 = v160;
  *(_DWORD *)uint64_t v134 = 136315394;
  uint64_t v170 = sub_24BA0(0xD000000000000017LL, 0x8000000000049960LL, (uint64_t *)&v168);
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171, v134 + 4, v134 + 12);
  *(_WORD *)(v134 + 1sub_6CEC(v0 + 2) = 2080;
  if (*(void *)(v64 + 16) >= 2uLL)
  {
    uint64_t v159 = v134 + 14;
    uint64_t v135 = v163;
    uint64_t v136 = v164;
    uint64_t v137 = v162;
    (*(void (**)(char *, uint64_t, uint64_t))(v164 + 16))(v163, v166 + v165, v162);
    unint64_t v138 = sub_2CDAC();
    uint64_t v139 = dispatch thunk of CustomStringConvertible.description.getter(v137, v138);
    unint64_t v141 = v140;
    (*(void (**)(char *, uint64_t))(v136 + 8))(v135, v137);
    uint64_t v170 = sub_24BA0(v139, v141, (uint64_t *)&v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171, v159, v134 + 22);
    swift_bridgeObjectRelease_n(v64, 2LL);
    swift_bridgeObjectRelease(v141);
    _os_log_impl( &dword_0,  (os_log_t)v133,  (os_log_type_t)v161,  "%s: CAM outputs DisambiguateTopTwo with hyp 2: %s",  (uint8_t *)v134,  0x16u);
    uint64_t v142 = v160;
    swift_arrayDestroy(v160, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v142, -1LL, -1LL);
    swift_slowDealloc(v134, -1LL, -1LL);

LABEL_78:
    uint64_t result = sub_72E4(&qword_5A048);
    uint64_t v143 = *(void *)(v64 + 16);
    if (v143)
    {
      uint64_t v144 = *(int *)(result + 48);
      uint64_t v145 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v164 + 16);
      uint64_t result = v145(v167, v166, v162);
      if (v143 != 1)
      {
        unint64_t v146 = v167;
        v145((uint64_t *)((char *)v167 + v144), v166 + v165, v162);
        swift_bridgeObjectRelease(v64);
        uint64_t v102 = type metadata accessor for CAMDirectInvocation(0LL);
        swift_storeEnumTagMultiPayload(v146, v102, 0LL);
        __int128 v89 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56LL);
        uint64_t v90 = v146;
        goto LABEL_81;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_93;
  }

LABEL_94:
  __break(1u);
  return result;
}

unint64_t sub_2C5C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_72E4(&qword_5B318);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_18DBC(v7, (uint64_t)&v16, &qword_5B408);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_2C9F4(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_22E38(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2C6F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_72E4(&qword_5B338);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_18DBC(v7, (uint64_t)v16, &qword_5B420);
    unint64_t result = sub_2CA58((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 3sub_6CEC(v0 + 2) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    unint64_t result = (unint64_t)sub_22E38(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2C838(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_72E4(&qword_5B440);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_2C9F4(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    *BOOL v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    void v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_2C958()
{
  qword_5B3F0 = 0x7865646E69LL;
  qword_5B3F8 = 0xE500000000000000LL;
}

uint64_t type metadata accessor for CAMDirectInvocation(uint64_t a1)
{
  uint64_t result = qword_5B500;
  if (!qword_5B500) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CAMDirectInvocation);
  }
  return result;
}

uint64_t sub_2C9B4(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5AD48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_2C9F4(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_2CAB8(a1, a2, v5);
}

unint64_t sub_2CA58(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_2CB98(a1, v4);
}

unint64_t sub_2CA88(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_2CC5C(a1, v3);
}

unint64_t sub_2CAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_2CB98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_2DC70(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_2DCAC((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_2CC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

uint64_t sub_2CCF8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2CFB8( a1,  a2,  a3,  (void *)*v3,  &qword_5A8F0,  (uint64_t (*)(void))&type metadata accessor for PluginAction);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2CD24(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_2CD68(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_2CDAC()
{
  unint64_t result = qword_59FC0;
  if (!qword_59FC0)
  {
    uint64_t v1 = type metadata accessor for PluginAction(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PluginAction, v1);
    atomic_store(result, (unint64_t *)&qword_59FC0);
  }

  return result;
}

uint64_t sub_2CDF4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2CFB8( a1,  a2,  a3,  (void *)*v3,  &qword_5B488,  (uint64_t (*)(void))&type metadata accessor for Parse);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2CE20(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2CFB8( a1,  a2,  a3,  (void *)*v3,  &qword_5B468,  (uint64_t (*)(void))&type metadata accessor for UsoIdentifier);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2CE4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2D4A0(a1, a2, a3, (void *)*v3, &qword_5B480, &qword_5A9B0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2CE78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2D7E8(a1, a2, a3, (void *)*v3, &qword_5B448, &qword_5B450);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2CEA4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2CFB8( a1,  a2,  a3,  (void *)*v3,  &qword_5AD38,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2CED0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2CFB8( a1,  a2,  a3,  (void *)*v3,  &qword_5B428,  (uint64_t (*)(void))&type metadata accessor for TemplatingSection);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2CEFC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2D198(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2CF18(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2D338(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_2CF34(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2D7E8(a1, a2, a3, (void *)*v3, &qword_5B458, &qword_5B460);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2CF60(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2D4A0(a1, a2, a3, (void *)*v3, &qword_5B470, &qword_5B478);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2CF8C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2D7E8(a1, a2, a3, (void *)*v3, &qword_5B410, &qword_5B418);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2CFB8( char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    __int128 v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_72E4(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  __int128 v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v19 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_34;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (char *)v18 + v23;
  uint64_t v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(void *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(v22 + 72) * v11;
  uint64_t v27 = &v24[v26];
  unint64_t v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }

LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_2D198(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_72E4(&qword_5B430);
    uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    _OWORD v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8) {
      memmove(v11 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_72E4(&qword_5B438);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_2D338(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_72E4(&qword_5C1B0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + sub_6CEC(v0 + 2) = v8;
    *((void *)v11 + sub_6CEC((void *)v0 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + sub_6CEC(v0 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_2D4A0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = sub_72E4(a5);
    unint64_t v14 = (void *)swift_allocObject(v13, 40 * v12 + 32, 7LL);
    size_t v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }

  else
  {
    unint64_t v14 = _swiftEmptyArrayStorage;
  }

  unint64_t v16 = (unint64_t)(v14 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11) {
      memmove(v14 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_72E4(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }

uint64_t sub_2D644(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_72E4(&qword_5ADB0);
    uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    _OWORD v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8) {
      memmove(v11 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_72E4(&qword_5ADB8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_2D7E8(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = sub_72E4(a5);
    unint64_t v14 = (void *)swift_allocObject(v13, 8 * v12 + 32, 7LL);
    int64_t v15 = j__malloc_size(v14);
    uint64_t v16 = v15 - 32;
    if (v15 < 32) {
      uint64_t v16 = v15 - 25;
    }
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }

  else
  {
    unint64_t v14 = _swiftEmptyArrayStorage;
  }

  unint64_t v17 = (unint64_t)(v14 + 4);
  unint64_t v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11) {
      memmove(v14 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_72E4(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }

unint64_t sub_2D974(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_72E4(&qword_5B340);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_2CA88(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v6);
    return (unint64_t)v3;
  }

  unint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v3[6] + 8 * result) = v4;
    int64_t v10 = (void *)(v3[7] + 16 * result);
    *int64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    unint64_t v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain(v6);
    unint64_t result = sub_2CA88(v4);
    unint64_t v9 = v14;
    uint64_t v6 = v15;
    if ((v16 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

id sub_2DA80(uint64_t a1)
{
  id v2 = objc_allocWithZone(&OBJC_CLASS___SKIDirectInvocationPayload);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithIdentifier:v3];

  uint64_t v5 = sub_72E4(&qword_5A908);
  uint64_t inited = swift_initStackObject(v5, v21);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  if (qword_59D98 != -1) {
    swift_once(&qword_59D98, sub_2C958);
  }
  uint64_t v17 = qword_5B3F0;
  uint64_t v18 = qword_5B3F8;
  swift_bridgeObjectRetain(qword_5B3F8);
  AnyHashable.init<A>(_:)(&v17, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 7sub_6CEC(v0 + 2) = a1;
  unint64_t v7 = sub_2C6F8(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v4, "setUserData:", isa, v17, v18);

  static Device.current.getter(v9);
  uint64_t v10 = v19;
  uint64_t v11 = v20;
  sub_73B4(&v17, v19);
  BOOL v12 = (void *)DeviceState.asInvocationContext.getter(v10, v11);
  sub_6CEC(&v17);
  uint64_t v13 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
  id v14 = [v13 runSiriKitExecutorCommandWithContext:v12 payload:v4];
  id v15 = [v13 wrapCommandInStartLocalRequest:v14];

  return v15;
}

uint64_t sub_2DC70(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_2DCAC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_2DCE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v8);
  }

  else if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(v5 + 64));
  }

  else
  {
    uint64_t v9 = type metadata accessor for PluginAction(0LL);
    uint64_t v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    v10(a1, a2, v9);
    uint64_t v11 = sub_72E4(&qword_5A048);
    v10((uint64_t *)((char *)a1 + *(int *)(v11 + 48)), (uint64_t *)((char *)a2 + *(int *)(v11 + 48)), v9);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

uint64_t sub_2DDBC(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for PluginAction(0LL);
    int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
    v6(a1, v4);
    uint64_t v5 = a1 + *(int *)(sub_72E4(&qword_5A048) + 48);
    return ((uint64_t (*)(uint64_t, uint64_t))v6)(v5, v4);
  }

  return result;
}

char *sub_2DE3C(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for PluginAction(0LL);
    unint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL);
    v7(a1, a2, v6);
    uint64_t v8 = sub_72E4(&qword_5A048);
    v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

char *sub_2DEF0(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_258D8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for PluginAction(0LL);
      unint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL);
      v7(a1, a2, v6);
      uint64_t v8 = sub_72E4(&qword_5A048);
      v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

char *sub_2DFB4(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for PluginAction(0LL);
    unint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
    v7(a1, a2, v6);
    uint64_t v8 = sub_72E4(&qword_5A048);
    v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

char *sub_2E068(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_258D8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for PluginAction(0LL);
      unint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
      v7(a1, a2, v6);
      uint64_t v8 = sub_72E4(&qword_5A048);
      v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_2E12C(uint64_t a1)
{
  uint64_t result = type metadata accessor for PluginAction(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(void *)(result - 8) + 64LL, *(void *)(result - 8) + 64LL);
    v5[0] = v4;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v5);
    return 0LL;
  }

  return result;
}

uint64_t sub_2E1AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_72E4(&qword_5A038);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = type metadata accessor for CAMDirectInvocation(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  id v15 = (uint64_t *)((char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v27 - v17;
  sub_2B424(v9);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) != 1)
  {
    sub_25850((uint64_t)v9, (uint64_t)v18);
    sub_25850((uint64_t)v18, (uint64_t)v15);
    if (swift_getEnumCaseMultiPayload(v15, v10) != 1)
    {
      sub_258D8((uint64_t)v15);
      goto LABEL_8;
    }

    if (*v15 == 1LL)
    {
      uint64_t v19 = type metadata accessor for PluginAction(0LL);
      uint64_t v26 = *(void *)(v19 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(a3, a2, v19);
      uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    }

    else
    {
      if (*v15) {
        goto LABEL_8;
      }
      uint64_t v19 = type metadata accessor for PluginAction(0LL);
      uint64_t v20 = *(void *)(v19 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a3, a1, v19);
      uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    }

    uint64_t v23 = a3;
    uint64_t v24 = 0LL;
    uint64_t v22 = v19;
    return v21(v23, v24, 1LL, v22);
  }

  sub_2E384((uint64_t)v9);
LABEL_8:
  uint64_t v22 = type metadata accessor for PluginAction(0LL);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL);
  uint64_t v23 = a3;
  uint64_t v24 = 1LL;
  return v21(v23, v24, 1LL, v22);
}

uint64_t sub_2E384(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5A038);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_2E3C4(char a1)
{
  __asm { BR              X11 }

uint64_t sub_2E410(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2E48C + 4 * byte_48247[a2]))(a3 - 3);
}

uint64_t sub_2E48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 - 3;
  unint64_t v5 = 0x8000000000048B90LL;
  if (a1 == v4 && v3 == 0x8000000000048B90LL)
  {
    char v6 = 1;
    unint64_t v5 = v3;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, v4, 0x8000000000048B90LL, 0LL);
  }

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  return v6 & 1;
}

void sub_2E53C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_2E580(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(0x8000000000048B90LL);
}

void sub_2E5F4(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_2E648()
{
  return Hasher._finalize()();
}

void sub_2E6D8()
{
  qword_5D408 = 0x724573656D6D6F70LL;
  qword_5D410 = 0xEB00000000726F72LL;
}

void sub_2E704()
{
  BYTE5(qword_5D420) = 0;
  HIWORD(qword_5D420) = -5120;
}

void sub_2E730()
{
  HIBYTE(qword_5D430) = -18;
}

void sub_2E760()
{
  qword_5D438 = 0x74636E756A6E6F63LL;
  qword_5D440 = 0xEF6F666E496E6F69LL;
}

void sub_2E790()
{
  qword_5D448 = 0x746C757365526F6ELL;
  unk_5D450 = 0xE900000000000073LL;
}

void sub_2E7B8()
{
  qword_5D458 = 0x616D6F446F666E69LL;
  unk_5D460 = 0xEF65737261506E69LL;
}

uint64_t sub_2E7E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2E820 + 4 * byte_4825C[a1]))( 0xD000000000000014LL,  0x8000000000048B70LL);
}

uint64_t sub_2E820(uint64_t a1)
{
  return a1 - 3;
}

void sub_2E880(char *a1)
{
}

void sub_2E88C()
{
}

void sub_2E898(uint64_t a1)
{
}

void sub_2E8A0(uint64_t a1)
{
}

unint64_t sub_2E8A8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_317D8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_2E8D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2E7E8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2E8FC(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5A038);
  __chkstk_darwin(v2, v3);
  uint64_t v124 = (uint64_t *)((char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = type metadata accessor for CAMDirectInvocation(0LL);
  uint64_t v122 = *(void *)(v5 - 8);
  uint64_t v123 = v5;
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v121 = (uint64_t)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v116 - v10;
  uint64_t v12 = type metadata accessor for Parse(0LL);
  uint64_t v129 = *(void *)(v12 - 8);
  uint64_t v130 = v12;
  __chkstk_darwin(v12, v13);
  id v15 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v125 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for Input(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v132 = (char *)&v116 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)&v116 - v26;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  uint64_t v29 = sub_72B4(v28, (uint64_t)qword_5D478);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v131 = a1;
  unint64_t v127 = v30;
  uint64_t v31 = v30(v27, a1, v20);
  uint64_t v128 = v29;
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc(12LL, -1LL);
    uint64_t v119 = v11;
    uint64_t v35 = (uint8_t *)v34;
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v118 = v16;
    uint64_t v37 = v36;
    *(void *)&__int128 v135 = v36;
    uint64_t v117 = v19;
    *(_DWORD *)uint64_t v35 = 136315138;
    uint64_t v126 = (void (*)(char *, uint64_t))(v35 + 4);
    uint64_t v38 = sub_285EC( (unint64_t *)&qword_5A040,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v20, v38);
    unint64_t v41 = v40;
    uint64_t v133 = sub_24BA0(v39, v40, (uint64_t *)&v135);
    uint64_t v19 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v126, v35 + 12);
    swift_bridgeObjectRelease(v41);
    uint64_t v126 = *(void (**)(char *, uint64_t))(v21 + 8);
    v126(v27, v20);
    _os_log_impl(&dword_0, v32, v33, "FallbackEntryFlow: on called with %s", v35, 0xCu);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v42 = v37;
    uint64_t v16 = v118;
    swift_slowDealloc(v42, -1LL, -1LL);
    uint64_t v43 = v35;
    uint64_t v11 = v119;
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  else
  {
    uint64_t v126 = *(void (**)(char *, uint64_t))(v21 + 8);
    v126(v27, v20);
  }

  uint64_t v44 = v20;
  uint64_t v45 = v131;
  Input.parse.getter(v46);
  uint64_t v48 = v129;
  uint64_t v47 = v130;
  int v49 = (*(uint64_t (**)(char *, uint64_t))(v129 + 88))(v15, v130);
  char v50 = v132;
  if (v49 != enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v15, v47);
    goto LABEL_10;
  }

  (*(void (**)(char *, uint64_t))(v48 + 96))(v15, v47);
  uint64_t v51 = v125;
  (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v19, v15, v16);
  uint64_t v52 = v124;
  sub_2B424(v124);
  uint64_t v53 = v123;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v122 + 48))(v52, 1LL, v123) == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v16);
    sub_73D8((uint64_t)v52, &qword_5A038);
LABEL_10:
    uint64_t v54 = v127(v50, v45, v44);
    char v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v135 = v58;
      *(_DWORD *)uint64_t v57 = 136315138;
      uint64_t v59 = sub_285EC( (unint64_t *)&qword_5A040,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v44, v59);
      unint64_t v62 = v61;
      uint64_t v133 = sub_24BA0(v60, v61, (uint64_t *)&v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease(v62);
      v126(v50, v44);
      _os_log_impl(&dword_0, v55, v56, "FallbackEntryFlow called with unexpected input %s", v57, 0xCu);
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    else
    {
      v126(v50, v44);
    }

    return 0LL;
  }

  sub_25850((uint64_t)v52, (uint64_t)v11);
  uint64_t v64 = v53;
  uint64_t v65 = v121;
  sub_25894((uint64_t)v11, v121);
  if (swift_getEnumCaseMultiPayload(v65, v64) != 3)
  {
    sub_258D8((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v16);
    sub_258D8(v65);
    goto LABEL_10;
  }

  uint64_t v66 = sub_258D8(v65);
  uint64_t v67 = Parse.DirectInvocation.userData.getter(v66);
  uint64_t v68 = v120;
  if (v67)
  {
    uint64_t v69 = v67;
    if (qword_59DA0 == -1)
    {
      if (*(void *)(v67 + 16)) {
        goto LABEL_18;
      }
    }

    else
    {
      swift_once(&qword_59DA0, sub_2E6D8);
      if (*(void *)(v69 + 16))
      {
LABEL_18:
        uint64_t v70 = v19;
        uint64_t v71 = qword_5D410;
        uint64_t v72 = qword_5D408;
        swift_bridgeObjectRetain(qword_5D410);
        unint64_t v73 = sub_2C9F4(v72, v71);
        if ((v74 & 1) != 0)
        {
          sub_25914(*(void *)(v69 + 56) + 32 * v73, (uint64_t)&v135);
        }

        else
        {
          __int128 v135 = 0u;
          __int128 v136 = 0u;
        }

        swift_bridgeObjectRelease(v71);
        uint64_t v19 = v70;
        if (*((void *)&v136 + 1))
        {
          int v75 = swift_dynamicCast(&v133, &v135, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
          uint64_t v76 = v133;
          unint64_t v77 = v134;
          if (!v75)
          {
            uint64_t v76 = 0LL;
            unint64_t v77 = 0LL;
          }

LABEL_34:
              uint64_t v84 = *(void *)(v68 + 40);
              *(void *)(v68 + 3sub_6CEC(v0 + 2) = v79;
              *(void *)(v68 + 40) = v83;
              swift_bridgeObjectRelease(v84);
              if (qword_59DA8 == -1)
              {
                if (*(void *)(v69 + 16)) {
                  goto LABEL_36;
                }
              }

              else
              {
                swift_once(&qword_59DA8, sub_2E704);
                if (*(void *)(v69 + 16))
                {
LABEL_36:
                  unint64_t v85 = v19;
                  uint64_t v86 = qword_5D420;
                  uint64_t v87 = qword_5D418;
                  swift_bridgeObjectRetain(qword_5D420);
                  unint64_t v88 = sub_2C9F4(v87, v86);
                  if ((v89 & 1) != 0)
                  {
                    sub_25914(*(void *)(v69 + 56) + 32 * v88, (uint64_t)&v135);
                  }

                  else
                  {
                    __int128 v135 = 0u;
                    __int128 v136 = 0u;
                  }

                  swift_bridgeObjectRelease(v86);
                  uint64_t v19 = v85;
                  if (*((void *)&v136 + 1))
                  {
                    if (swift_dynamicCast( &v133,  &v135,  (char *)&type metadata for Any + 8,  &type metadata for Bool,  6LL))
                    {
                      char v90 = v133;
                      goto LABEL_46;
                    }

LABEL_45:
                    char v90 = 0;
LABEL_46:
                    *(_BYTE *)(v68 + 4sub_6CEC((void *)v0 + 8) = v90;
                    if (qword_59DB0 == -1)
                    {
                      if (*(void *)(v69 + 16)) {
                        goto LABEL_48;
                      }
                    }

                    else
                    {
                      swift_once(&qword_59DB0, sub_2E730);
                      if (*(void *)(v69 + 16))
                      {
LABEL_48:
                        uint64_t v91 = v19;
                        uint64_t v92 = qword_5D430;
                        uint64_t v93 = qword_5D428;
                        swift_bridgeObjectRetain(qword_5D430);
                        unint64_t v94 = sub_2C9F4(v93, v92);
                        if ((v95 & 1) != 0)
                        {
                          sub_25914(*(void *)(v69 + 56) + 32 * v94, (uint64_t)&v135);
                        }

                        else
                        {
                          __int128 v135 = 0u;
                          __int128 v136 = 0u;
                        }

                        swift_bridgeObjectRelease(v92);
                        uint64_t v19 = v91;
                        if (*((void *)&v136 + 1))
                        {
                          if (swift_dynamicCast( &v133,  &v135,  (char *)&type metadata for Any + 8,  &type metadata for Bool,  6LL))
                          {
                            char v96 = v133;
                            goto LABEL_58;
                          }

LABEL_57:
                          char v96 = 0;
LABEL_58:
                          *(_BYTE *)(v68 + 49) = v96;
                          if (qword_59DB8 == -1)
                          {
                            if (*(void *)(v69 + 16))
                            {
LABEL_60:
                              uint64_t v97 = v19;
                              uint64_t v98 = qword_5D440;
                              uint64_t v99 = qword_5D438;
                              swift_bridgeObjectRetain(qword_5D440);
                              unint64_t v100 = sub_2C9F4(v99, v98);
                              if ((v101 & 1) != 0)
                              {
                                sub_25914(*(void *)(v69 + 56) + 32 * v100, (uint64_t)&v135);
                              }

                              else
                              {
                                __int128 v135 = 0u;
                                __int128 v136 = 0u;
                              }

                              swift_bridgeObjectRelease(v98);
                              uint64_t v19 = v97;
LABEL_66:
                              swift_bridgeObjectRelease(v69);
                              if (*((void *)&v136 + 1))
                              {
                                if ((swift_dynamicCast( &v133,  &v135,  (char *)&type metadata for Any + 8,  &type metadata for Data,  6LL) & 1) != 0)
                                {
                                  uint64_t v102 = v19;
                                  uint64_t v103 = v51;
                                  uint64_t v104 = v133;
                                  unint64_t v105 = v134;
                                  uint64_t v106 = type metadata accessor for JSONDecoder(0LL);
                                  swift_allocObject( v106,  *(unsigned int *)(v106 + 48),  *(unsigned __int16 *)(v106 + 52));
                                  uint64_t v107 = JSONDecoder.init()();
                                  uint64_t v108 = type metadata accessor for RequestConjunctionInfo(0LL);
                                  uint64_t v109 = sub_285EC( &qword_5B750,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RequestConjunctionInfo,  (uint64_t)&protocol conformance descriptor for RequestConjunctionInfo);
                                  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v135, v108, v104, v105, v108, v109);
                                  sub_2CD68(v104, v105);
                                  swift_release(v107);
                                  uint64_t v110 = *(void **)(v68 + 56);
                                  *(void *)(v68 + 56) = v135;

                                  uint64_t v51 = v103;
                                  uint64_t v19 = v102;
                                }
                              }

                              else
                              {
                                sub_73D8((uint64_t)&v135, &qword_5AD48);
                              }

                              goto LABEL_70;
                            }
                          }

                          else
                          {
                            swift_once(&qword_59DB8, sub_2E760);
                            if (*(void *)(v69 + 16)) {
                              goto LABEL_60;
                            }
                          }

                          __int128 v135 = 0u;
                          __int128 v136 = 0u;
                          goto LABEL_66;
                        }

LABEL_56:
                        sub_73D8((uint64_t)&v135, &qword_5AD48);
                        goto LABEL_57;
                      }
                    }

                    __int128 v135 = 0u;
                    __int128 v136 = 0u;
                    goto LABEL_56;
                  }

LABEL_70:
  uint64_t v111 = v19;
  uint64_t v112 = sub_2F49C();
  *(_BYTE *)(v68 + 64) = v112;
  unint64_t v113 = (os_log_s *)Logger.logObject.getter(v112);
  os_log_type_t v114 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v113, v114))
  {
    unint64_t v115 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v115 = 0;
    _os_log_impl(&dword_0, v113, v114, "FallbackEntryFlow: input accepted", v115, 2u);
    swift_slowDealloc(v115, -1LL, -1LL);
  }

  sub_258D8((uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v111, v16);
  return 1LL;
}

uint64_t sub_2F49C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for InputOrigin(0LL);
  uint64_t v116 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  os_log_type_t v114 = (char *)v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = sub_72E4(&qword_5B728);
  __chkstk_darwin(v115, v5);
  uint64_t v7 = (char *)v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_72E4(&qword_5B730);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v119 = (char *)v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v120 = (uint64_t)v109 - v14;
  __chkstk_darwin(v13, v15);
  uint64_t v118 = (char *)v109 - v16;
  uint64_t v17 = type metadata accessor for NetworkAvailability.Status(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_72B4(v22, (uint64_t)qword_5D478);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_0, v24, v25, "FallbackEntryFlow: evalExecutionDecision", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  if (*(_BYTE *)(v1 + 48) == 1)
  {
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = 2LL;
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_0, v28, v29, "FallbackEntryFlow: emptyNLInput == true", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);

      return v30;
    }

    return 2LL;
  }

  uint64_t v110 = v7;
  uint64_t v113 = v1;
  uint64_t v112 = type metadata accessor for SiriEnvironment(0LL);
  uint64_t v32 = static SiriEnvironment.default.getter();
  uint64_t v33 = SiriEnvironment.networkAvailability.getter();
  swift_release(v32);
  uint64_t v117 = v33;
  uint64_t v34 = swift_retain_n(v33, 2LL);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v111 = v2;
  if (v37)
  {
    uint64_t v38 = swift_slowAlloc(18LL, -1LL);
    uint64_t v39 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = v117;
    v109[1] = v23;
    uint64_t v41 = v39;
    uint64_t v121 = v39;
    *(_DWORD *)uint64_t v38 = 67109378;
    LOBYTE(v12sub_6CEC((void *)v0 + 3) = dispatch thunk of NetworkAvailability.isInAirplaneMode.getter() & 1;
    LODWORD(v12sub_6CEC((void *)v0 + 3) = v123;
    uint64_t v42 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, (char *)&v123 + 4, v38 + 4, v38 + 8);
    *(_WORD *)(v38 + sub_6CEC((void *)v0 + 8) = 2080;
    v109[0] = v38 + 10;
    dispatch thunk of NetworkAvailability.status.getter(v42);
    uint64_t v43 = sub_285EC( &qword_5B748,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NetworkAvailability.Status,  (uint64_t)&protocol conformance descriptor for NetworkAvailability.Status);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v17, v43);
    unint64_t v46 = v45;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    uint64_t v123 = sub_24BA0(v44, v46, &v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v109[0], v38 + 18);
    swift_release_n(v40, 2LL);
    swift_bridgeObjectRelease(v46);
    _os_log_impl( &dword_0,  v35,  v36,  "FallbackEntryFlow network states: isInAirplaneMode: %{BOOL}d networkAvailabilityProvider.status: %s",  (uint8_t *)v38,  0x12u);
    swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v117, 2LL);
  }

  uint64_t v47 = v113;
  uint64_t v48 = swift_retain_n(v113, 4LL);
  int v49 = (os_log_s *)Logger.logObject.getter(v48);
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = swift_slowAlloc(22LL, -1LL);
    uint64_t v52 = swift_slowAlloc(64LL, -1LL);
    uint64_t v123 = v52;
    *(_DWORD *)uint64_t v51 = 136315394;
    uint64_t v53 = *(void *)(v47 + 40);
    uint64_t v121 = *(void *)(v47 + 32);
    uint64_t v122 = v53;
    swift_bridgeObjectRetain(v53);
    uint64_t v54 = sub_72E4(&qword_5B740);
    uint64_t v55 = String.init<A>(describing:)(&v121, v54);
    unint64_t v57 = v56;
    uint64_t v121 = sub_24BA0(v55, v56, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v51 + 4, v51 + 12);
    swift_release_n(v47, 2LL);
    swift_bridgeObjectRelease(v57);
    *(_WORD *)(v51 + 1sub_6CEC(v0 + 2) = 2080;
    uint64_t v58 = *(void *)(v47 + 24);
    uint64_t v121 = *(void *)(v47 + 16);
    uint64_t v122 = v58;
    swift_bridgeObjectRetain(v58);
    uint64_t v59 = String.init<A>(describing:)(&v121, v54);
    unint64_t v61 = v60;
    uint64_t v121 = sub_24BA0(v59, v60, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v51 + 14, v51 + 22);
    swift_release_n(v47, 2LL);
    swift_bridgeObjectRelease(v61);
    _os_log_impl( &dword_0,  v49,  v50,  "FallbackEntryFlow: pommesSearchReason = %s pommesError = %s",  (uint8_t *)v51,  0x16u);
    swift_arrayDestroy(v52, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {

    uint64_t v62 = swift_release_n(v47, 4LL);
  }

  uint64_t v63 = v111;
  uint64_t v65 = (uint64_t)v118;
  uint64_t v64 = (uint64_t)v119;
  uint64_t v66 = v120;
  uint64_t v67 = static SiriEnvironment.forCurrentTask.getter(v62);
  uint64_t v68 = swift_release(v67);
  if (!v67)
  {
    uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl(&dword_0, v69, v70, "SiriEnvironment.forCurrentTask is nil", v71, 2u);
      swift_slowDealloc(v71, -1LL, -1LL);
    }
  }

  if (*(_BYTE *)(v47 + 49) != 1)
  {
    uint64_t v79 = static SiriEnvironment.forCurrentTask.getter(v68);
    if (v79)
    {
      uint64_t v80 = v79;
      uint64_t v81 = SiriEnvironment.currentRequest.getter();
      uint64_t v82 = swift_release(v80);
      CurrentRequest.inputOrigin.getter(v82);
      swift_release(v81);
      uint64_t v83 = v116;
      uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56);
      v84(v65, 0LL, 1LL, v63);
    }

    else
    {
      uint64_t v83 = v116;
      uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56);
      v84(v65, 1LL, 1LL, v63);
    }

    (*(void (**)(uint64_t, void, uint64_t))(v83 + 104))( v66,  enum case for InputOrigin.magusFollowup(_:),  v63);
    v84(v66, 0LL, 1LL, v63);
    uint64_t v85 = (uint64_t)v110;
    uint64_t v86 = (uint64_t)&v110[*(int *)(v115 + 48)];
    sub_31820(v65, (uint64_t)v110);
    sub_31820(v66, v86);
    uint64_t v87 = v66;
    unint64_t v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
    if (v88(v85, 1LL, v63) == 1)
    {
      sub_73D8(v87, &qword_5B730);
      sub_73D8(v65, &qword_5B730);
      if (v88(v86, 1LL, v63) == 1)
      {
        uint64_t v89 = sub_73D8((uint64_t)v110, &qword_5B730);
LABEL_46:
        uint64_t v106 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v107 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v106, v107))
        {
          uint64_t v108 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v108 = 0;
          _os_log_impl(&dword_0, v106, v107, "FallbackEntryFlow: inputOrigin == magusFollowup", v108, 2u);
          swift_slowDealloc(v108, -1LL, -1LL);
        }

        uint64_t v93 = v117;
        uint64_t v94 = sub_30268(v117);
LABEL_49:
        uint64_t v30 = v94;
        swift_release(v93);
        return v30;
      }
    }

    else
    {
      sub_31820(v85, v64);
      if (v88(v86, 1LL, v63) != 1)
      {
        uint64_t v102 = v114;
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v114, v86, v63);
        uint64_t v103 = sub_285EC( &qword_5B738,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for InputOrigin,  (uint64_t)&protocol conformance descriptor for InputOrigin);
        char v104 = dispatch thunk of static Equatable.== infix(_:_:)(v64, v102, v63, v103);
        unint64_t v105 = *(void (**)(char *, uint64_t))(v83 + 8);
        v105(v102, v63);
        sub_73D8(v120, &qword_5B730);
        sub_73D8(v65, &qword_5B730);
        v105((char *)v64, v63);
        uint64_t v89 = sub_73D8(v85, &qword_5B730);
        if ((v104 & 1) != 0) {
          goto LABEL_46;
        }
LABEL_35:
        char v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v92 = 0;
          _os_log_impl(&dword_0, v90, v91, "FallbackEntryFlow: inputOrigin != magusFollowup", v92, 2u);
          swift_slowDealloc(v92, -1LL, -1LL);
        }

        uint64_t v93 = v117;
        uint64_t v94 = sub_30090(v117);
        goto LABEL_49;
      }

      sub_73D8(v120, &qword_5B730);
      sub_73D8(v65, &qword_5B730);
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v64, v63);
    }

    uint64_t v89 = sub_73D8((uint64_t)v110, &qword_5B728);
    goto LABEL_35;
  }

  uint64_t v72 = *(void **)(v47 + 56);
  if (!v72) {
    goto LABEL_39;
  }
  id v73 = v72;
  unint64_t v74 = RequestConjunctionInfo.requestIndex.getter();
  uint64_t result = RequestConjunctionInfo.requestCount.getter();
  if (result)
  {
    if (v74 < result - 1)
    {
      uint64_t v76 = (os_log_s *)Logger.logObject.getter(result);
      os_log_type_t v77 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v78 = 0;
        _os_log_impl( &dword_0,  v76,  v77,  "FallbackEntryFlow: unhandled undo not final request, mitigating silently",  v78,  2u);
        swift_slowDealloc(v78, -1LL, -1LL);
        swift_release(v117);

        return 2LL;
      }

      swift_release(v117);
      return 2LL;
    }

LABEL_39:
    char v95 = (os_log_s *)Logger.logObject.getter(v68);
    os_log_type_t v96 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v97 = 0;
      _os_log_impl(&dword_0, v95, v96, "FallbackEntryFlow: missing conjunctionInfo", v97, 2u);
      swift_slowDealloc(v97, -1LL, -1LL);
    }

    uint64_t v99 = (os_log_s *)Logger.logObject.getter(v98);
    os_log_type_t v100 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v99, v100))
    {
      char v101 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v101 = 0;
      _os_log_impl(&dword_0, v99, v100, "FallbackEntryFlow: unhandled undo request", v101, 2u);
      swift_slowDealloc(v101, -1LL, -1LL);
      swift_release(v117);
    }

    else
    {

      swift_release(v117);
    }

    return 5LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_30090(uint64_t a1)
{
  uint64_t v2 = v1[5];
  if (!(v1[3] | v2))
  {
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_72B4(v3, (uint64_t)qword_5D478);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_0, v5, v6, "FallbackEntryFlow: No pommes signals, returning gibberishResponse", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    return 1LL;
  }

  uint64_t v10 = v1[4];
  uint64_t v11 = qword_59DC8;
  swift_bridgeObjectRetain(v1[5]);
  if (v11 == -1)
  {
    if (v2) {
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v14 = v1[5];
    if (!v14) {
      return 1LL;
    }
    uint64_t v15 = v1[4];
    if ((v15 != 0xD000000000000016LL || v14 != 0x8000000000049A60LL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, 0xD000000000000016LL, 0x8000000000049A60LL, 0LL) & 1) == 0)
    {
      return 1LL;
    }

    return sub_3042C(a1, 0);
  }

  swift_once(&qword_59DC8, sub_2E7B8);
  if (!v2) {
    goto LABEL_15;
  }
LABEL_10:
  if (v10 == qword_5D458 && v2 == unk_5D460)
  {
    swift_bridgeObjectRelease(v2);
    return sub_3042C(a1, 0);
  }

  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v2, qword_5D458, unk_5D460, 0LL);
  swift_bridgeObjectRelease(v2);
  if ((v13 & 1) == 0) {
    goto LABEL_15;
  }
  return sub_3042C(a1, 0);
}

uint64_t sub_30268(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v5 = qword_59DC8;
  swift_bridgeObjectRetain(v3);
  if (v5 != -1)
  {
    swift_once(&qword_59DC8, sub_2E7B8);
    if (!v3) {
      goto LABEL_8;
    }
LABEL_3:
    if (v4 == qword_5D458 && v3 == unk_5D460)
    {
      swift_bridgeObjectRelease(v3);
    }

    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, qword_5D458, unk_5D460, 0LL);
      swift_bridgeObjectRelease(v3);
      if ((v7 & 1) == 0) {
        goto LABEL_8;
      }
    }

    return sub_3042C(a1, 1);
  }

  if (v3) {
    goto LABEL_3;
  }
LABEL_8:
  uint64_t v8 = *(void *)(v1 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(v1 + 32);
    if (v9 == 0xD000000000000016LL && v8 == 0x8000000000049A60LL) {
      return sub_3042C(a1, 1);
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v9, v8, 0xD000000000000016LL, 0x8000000000049A60LL, 0LL) & 1) != 0) {
      return sub_3042C(a1, 1);
    }
  }

  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_72B4(v10, (uint64_t)qword_5D478);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "FallbackEntryFlow: mitigateSilently", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  return 2LL;
}

uint64_t sub_3042C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v55 = a1;
  uint64_t v5 = type metadata accessor for PommesError(0LL);
  uint64_t v54 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v53 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NetworkAvailability.Status(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  os_log_type_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v52 - v15;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_72B4(v17, (uint64_t)qword_5D478);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v52 = v16;
    uint64_t v22 = v3;
    uint64_t v23 = v5;
    char v24 = a2;
    os_log_type_t v25 = v21;
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_0, v19, v20, "FallbackEntryFlow: explicit pegasus call", v21, 2u);
    uint64_t v26 = v25;
    a2 = v24;
    uint64_t v5 = v23;
    uint64_t v3 = v22;
    uint64_t v16 = v52;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  if ((dispatch thunk of NetworkAvailability.isInAirplaneMode.getter() & 1) != 0) {
    return 0LL;
  }
  dispatch thunk of NetworkAvailability.status.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v13,  enum case for NetworkAvailability.Status.available(_:),  v8);
  uint64_t v28 = sub_285EC( &qword_5B720,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NetworkAvailability.Status,  (uint64_t)&protocol conformance descriptor for NetworkAvailability.Status);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v13, v8, v28);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v9 + 8);
  v30(v13, v8);
  v30(v16, v8);
  if ((v29 & 1) == 0) {
    return 3LL;
  }
  uint64_t v32 = *(void *)(v3 + 16);
  uint64_t v31 = *(void *)(v3 + 24);
  uint64_t v33 = qword_59DC0;
  swift_bridgeObjectRetain(v31);
  if (v33 == -1)
  {
    if (!v31) {
      goto LABEL_23;
    }
  }

  else
  {
    swift_once(&qword_59DC0, sub_2E790);
    if (!v31) {
      goto LABEL_23;
    }
  }

  if (v32 == qword_5D448 && v31 == unk_5D450)
  {
    uint64_t v34 = swift_bridgeObjectRelease(v31);
    goto LABEL_15;
  }

  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, qword_5D448, unk_5D450, 0LL);
  uint64_t v34 = swift_bridgeObjectRelease(v31);
  if ((v35 & 1) == 0)
  {
LABEL_23:
    uint64_t v41 = v3;
    uint64_t v42 = *(void *)(v3 + 16);
    uint64_t v43 = *(void *)(v41 + 24);
    unint64_t v45 = v53;
    uint64_t v44 = v54;
    (*(void (**)(char *, void, uint64_t))(v54 + 104))(v53, enum case for PommesError.timedOut(_:), v5);
    uint64_t v46 = swift_bridgeObjectRetain(v43);
    uint64_t v47 = PommesError.rawValue.getter(v46);
    uint64_t v49 = v48;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v5);
    if (v43)
    {
      if (v42 == v47 && v43 == v49)
      {
        swift_bridgeObjectRelease(v43);
        swift_bridgeObjectRelease(v49);
        return 6LL;
      }

      char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, v47, v49, 0LL);
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v49);
      if ((v50 & 1) != 0) {
        return 6LL;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v49);
    }

    return 4LL;
  }

LABEL_15:
  os_log_type_t v36 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  BOOL v38 = os_log_type_enabled(v36, v37);
  if ((a2 & 1) != 0)
  {
    if (v38)
    {
      uint64_t v27 = 2LL;
      uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_0, v36, v37, "no pommes results on FF so mitigate silently", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {

      return 2LL;
    }
  }

  else
  {
    if (v38)
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_0, v36, v37, "no pommes results on initial input so render gibberish", v40, 2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    return 1LL;
  }

  return v27;
}

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v37, 1LL, v12);
    swift_bridgeObjectRelease(v28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) != 1)
    {
      BOOL v38 = v56;
      uint64_t v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v56, v11, v12);
      uint64_t v40 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.layoutExperience.getter(v39);
      Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.sash.getter(v40);

      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v57);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
      uint64_t v41 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash(0LL);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))( a1,  0LL,  1LL,  v41);
    }

    sub_36DF8((uint64_t)v11);
  }

  else
  {
  }

uint64_t sub_308BC(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  uint64_t v3 = type metadata accessor for PommesError(0LL);
  v2[26] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[27] = v4;
  v2[28] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_3091C, 0LL, 0LL);
}

void sub_3091C()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_72B4(v2, (uint64_t)qword_5D478);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 200);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    v14[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    *(_BYTE *)(v0 + 23sub_6CEC(v0 + 2) = *(_BYTE *)(v7 + 64);
    uint64_t v10 = sub_72E4(&qword_5B718);
    uint64_t v11 = String.init<A>(describing:)(v0 + 232, v10);
    unint64_t v13 = v12;
    *(void *)(v0 + 184) = sub_24BA0(v11, v12, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    swift_release_n(v7, 2LL);
    _os_log_impl(&dword_0, v4, v5, "FallbackEntryFlow: execute called with decision %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_release_n(*(void *)(v0 + 200), 2LL);
  }

  __asm { BR              X11 }

uint64_t sub_3121C()
{
  return swift_deallocClassInstance(v0, 65LL, 7LL);
}

uint64_t type metadata accessor for FallbackEntryFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin17FallbackEntryFlow);
}

_BYTE *initializeBufferWithCopyOfBuffer for FallbackEntryFlow.ExecutionDecision(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FallbackEntryFlow.ExecutionDecision( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for FallbackEntryFlow.ExecutionDecision( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_3135C + 4 * byte_48279[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_31390 + 4 * byte_48274[v4]))();
}

uint64_t sub_31390(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_31398(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x313A0LL);
  }
  return result;
}

uint64_t sub_313AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x313B4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_313B8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_313C0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_313CC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_313D4(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FallbackEntryFlow.ExecutionDecision()
{
  return &type metadata for FallbackEntryFlow.ExecutionDecision;
}

unint64_t sub_313F0()
{
  unint64_t result = qword_5B6D8[0];
  if (!qword_5B6D8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_4835C, &type metadata for FallbackEntryFlow.ExecutionDecision);
    atomic_store(result, qword_5B6D8);
  }

  return result;
}

uint64_t sub_31434()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t sub_31454()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

void (*sub_31474(void *a1))(void *a1)
{
  int v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return sub_163D0;
}

uint64_t sub_314D4(uint64_t a1)
{
  return sub_2E8FC(a1) & 1;
}

uint64_t sub_314F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for FallbackEntryFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_31550(uint64_t a1)
{
  int v3 = (void *)swift_task_alloc(dword_5B564);
  *(void *)(v1 + 16) = v3;
  *int v3 = v1;
  v3[1] = sub_7240;
  return sub_308BC(a1);
}

uint64_t sub_315A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for FallbackEntryFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_315C8(uint64_t a1, uint64_t a2)
{
  return sub_285EC( &qword_5B200,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for FallbackEntryFlow,  (uint64_t)&unk_48384);
}

uint64_t sub_315F4(uint64_t a1, uint64_t a2)
{
  return sub_285EC( &qword_5B6F0,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for FallbackEntryFlow,  (uint64_t)&unk_483DC);
}

uint64_t sub_31620(uint64_t a1)
{
  id v2 = [(id)objc_opt_self(AssistantSiriAnalytics) sharedStream];
  [v2 emitMessage:a1];
  return swift_unknownObjectRelease(v2);
}

uint64_t sub_31674(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v17[3] = type metadata accessor for DefaultCatExecutor();
  v17[4] = &off_55CE0;
  v17[0] = a1;
  sub_83CC((uint64_t)v17, a5 + 16);
  sub_83CC((uint64_t)a2, a5 + 56);
  sub_83CC((uint64_t)a3, a5 + 96);
  *(void *)(a5 + 136) = a4;
  uint64_t v10 = qword_59DD8;
  swift_retain(a4);
  if (v10 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_72B4(v11, (uint64_t)qword_5D478);
  unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "GibberishFlow new instance initialised", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  swift_release(a4);
  sub_6CEC(a3);
  sub_6CEC(a2);
  sub_6CEC(v17);
  return a5;
}

unint64_t sub_317D8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_556C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_31820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5B730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_31868(uint64_t a1)
{
  v2[37] = a1;
  v2[38] = v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A820);
  v2[39] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  v2[40] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[41] = v5;
  v2[42] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A5A0);
  v2[43] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  v2[44] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[45] = v8;
  v2[46] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v2[47] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[48] = v10;
  v2[49] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TemplatingResult(0LL);
  v2[50] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[51] = v12;
  v2[52] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_72E4(&qword_5B840);
  v2[53] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_72E4(&qword_5B848);
  v2[54] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_319D0, 0LL, 0LL);
}

uint64_t sub_319D0()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "GibberishFlow: execute called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[38];

  sub_73B4((void *)(v6 + 16), *(void *)(v6 + 40));
  unint64_t v7 = sub_2C6F8((uint64_t)_swiftEmptyArrayStorage);
  v0[55] = v7;
  uint64_t v8 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v8, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  strcpy((char *)(inited + 32), "responseMode");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 7sub_6CEC(v0 + 2) = &type metadata for String;
  *(void *)(inited + 4sub_6CEC((void *)v0 + 8) = 0LL;
  *(void *)(inited + 56) = 0xE000000000000000LL;
  unint64_t v10 = sub_2C5C4(inited);
  v0[56] = v10;
  uint64_t v11 = (void *)swift_task_alloc(dword_5B25C);
  v0[57] = v11;
  void *v11 = v0;
  v11[1] = sub_31B78;
  return sub_29084(0xD000000000000016LL, 0x8000000000049AD0LL, v7, v10);
}

uint64_t sub_31B78(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 456LL);
  v3[58] = a1;
  v3[59] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = sub_31FE4;
  }

  else
  {
    uint64_t v6 = v3[55];
    swift_bridgeObjectRelease(v3[56]);
    swift_bridgeObjectRelease(v6);
    uint64_t v5 = sub_31BF4;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_31BF4()
{
  uint64_t v1 = *(void **)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v2, 1LL, 1LL, v4);
  uint64_t v5 = type metadata accessor for ServerFallbackReason(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v3, 1LL, 1LL, v5);
  id v6 = v1;
  char v7 = ServerFallbackDisablingUtils.shouldDisableServerFallbackWithABDecision(isDomainDirected:topNlParse:serverFallbackReason:)( 1LL,  v2,  v3);
  sub_73D8(v3, &qword_5B840);
  uint64_t v8 = sub_73D8(v2, &qword_5B848);
  if ((v7 & 1) != 0)
  {
    uint64_t v9 = static AutoBugCapture.ErrorType.sirikitRuntime.getter(v8);
    uint64_t v11 = v10;
    uint64_t v12 = static AutoBugCapture.ErrorSubType.nl.getter();
    uint64_t v14 = v13;
    uint64_t v15 = static AutoBugCapture.ErrorContext.camGibberish.getter();
    uint64_t v17 = v16;
    static AutoBugCapture.generateSnapshot(type:subType:context:)(v9, v11, v12, v14, v15, v16);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v11);
  }

  uint64_t v18 = *(void **)(v0 + 464);
  uint64_t v43 = *(void *)(v0 + 416);
  uint64_t v20 = *(void *)(v0 + 384);
  uint64_t v19 = *(void *)(v0 + 392);
  uint64_t v21 = *(void *)(v0 + 376);
  uint64_t v47 = *(void *)(v0 + 360);
  uint64_t v22 = *(void *)(v0 + 344);
  uint64_t v46 = *(void *)(v0 + 352);
  uint64_t v44 = *(void *)(v0 + 368);
  unint64_t v45 = *(void **)(v0 + 304);
  id v23 = [v18 speak];
  uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, &type metadata for String);

  id v24 = [v18 print];
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, &type metadata for String);

  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v19,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v21);
  id v26 = [v18 print];
  uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, &type metadata for String);

  uint64_t v28 = *(void *)(v27 + 16);
  swift_bridgeObjectRelease(v27);
  char v29 = sub_34478(0LL, 0xE000000000000000LL, v28);
  id v30 = [v18 meta];

  uint64_t v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v30,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  uint64_t v32 = TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:dialogIdentifier:meta:)( 0xD000000000000016LL,  0x8000000000049AD0LL,  v42,  v25,  v19,  v29,  v31);
  uint64_t v33 = static Device.current.getter(v32);
  static Device.current.getter(v33);
  uint64_t v34 = *(void *)(v0 + 160);
  uint64_t v35 = *(void *)(v0 + 168);
  sub_73B4((void *)(v0 + 136), v34);
  LOBYTE(v19) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v34, v35);
  uint64_t v36 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v22, 1LL, 1LL, v36);
  *(void *)(v0 + 20sub_6CEC((void *)v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 19sub_6CEC(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v43,  v0 + 96,  v19 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v22,  _swiftEmptyArrayStorage,  v0 + 176);
  sub_73D8(v0 + 176, (uint64_t *)&unk_5C140);
  sub_73D8(v22, (uint64_t *)&unk_5A5A0);
  sub_6CEC((void *)(v0 + 96));
  sub_6CEC((void *)(v0 + 136));
  uint64_t v37 = v45[10];
  uint64_t v38 = v45[11];
  sub_73B4(v45 + 7, v37);
  *(void *)(v0 + 240) = v46;
  *(void *)(v0 + 24sub_6CEC((void *)v0 + 8) = &protocol witness table for AceOutput;
  uint64_t v39 = sub_8390((void *)(v0 + 216));
  (*(void (**)(void *, uint64_t, uint64_t))(v47 + 16))(v39, v44, v46);
  uint64_t v40 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 480) = v40;
  *uint64_t v40 = v0;
  v40[1] = sub_3217C;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 216, v37, v38);
}

uint64_t sub_31FE4()
{
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 440);
  swift_bridgeObjectRelease(*(void *)(v0 + 448));
  swift_bridgeObjectRelease(v2);
  _StringGuts.grow(_:)(43LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v19[0] = 0xD000000000000029LL;
  v19[1] = 0x8000000000049AF0LL;
  swift_getErrorValue(v1, v0 + 288, v0 + 256);
  v3._countAndFlagsBits = Error.localizedDescription.getter(*(void *)(v0 + 264), *(void *)(v0 + 272));
  object = v3._object;
  String.append(_:)(v3);
  uint64_t v5 = swift_bridgeObjectRelease(object);
  id v6 = static OutputPublisherFactory.makeOutputPublisherAsync()(v18, v5);
  static SiriKitEventSender.current.getter(v19, v6);
  uint64_t v7 = type metadata accessor for CamErrorFlow();
  swift_allocObject(v7, 112LL, 7LL);
  uint64_t v8 = sub_267BC(0xD000000000000029LL, 0x8000000000049AF0LL, v18, v19);
  *(void *)(v0 + 280) = v8;
  unint64_t v9 = sub_D2A8();
  static ExecuteResponse.complete<A>(next:)(v0 + 280, v7, v9);
  swift_errorRelease(v1);
  swift_release(v8);
  uint64_t v10 = *(void *)(v0 + 424);
  uint64_t v11 = *(void *)(v0 + 416);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v14 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3217C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 480));
  if (v0)
  {
    swift_errorRelease(v0);
    Swift::String v3 = sub_32398;
  }

  else
  {
    sub_6CEC((void *)(v2 + 216));
    Swift::String v3 = sub_321EC;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_321EC()
{
  uint64_t v22 = *(void **)(v0 + 464);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v24 = *(void *)(v0 + 400);
  uint64_t v25 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v20 = *(void *)(v0 + 352);
  uint64_t v21 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  id v6 = *(void **)(v0 + 304);
  uint64_t v8 = v6[15];
  uint64_t v7 = v6[16];
  sub_73B4(v6 + 12, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ActivityType.failed(_:), v4);
  type metadata accessor for SiriKitEvent(0LL);
  uint64_t v9 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 1LL, 1LL, v9);
  uint64_t v10 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v2,  0x54746E6572727543LL,  0xEB000000006B7361LL,  v5,  sub_3254C,  0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v10, v8, v7);
  uint64_t v11 = swift_release(v10);
  static ExecuteResponse.complete()(v11);

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v21, v20);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  uint64_t v12 = *(void *)(v0 + 424);
  uint64_t v13 = *(void *)(v0 + 416);
  uint64_t v14 = *(void *)(v0 + 392);
  uint64_t v15 = *(void *)(v0 + 368);
  uint64_t v17 = *(void *)(v0 + 336);
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v18 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_32398()
{
  uint64_t v22 = *(void **)(v0 + 464);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v24 = *(void *)(v0 + 400);
  uint64_t v25 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v20 = *(void *)(v0 + 352);
  uint64_t v21 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  id v6 = *(void **)(v0 + 304);
  uint64_t v8 = v6[15];
  uint64_t v7 = v6[16];
  sub_73B4(v6 + 12, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ActivityType.failed(_:), v4);
  type metadata accessor for SiriKitEvent(0LL);
  uint64_t v9 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 1LL, 1LL, v9);
  uint64_t v10 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v2,  0x54746E6572727543LL,  0xEB000000006B7361LL,  v5,  sub_3254C,  0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v10, v8, v7);
  uint64_t v11 = swift_release(v10);
  static ExecuteResponse.complete()(v11);

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v21, v20);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  uint64_t v12 = *(void *)(v0 + 424);
  uint64_t v13 = *(void *)(v0 + 416);
  uint64_t v14 = *(void *)(v0 + 392);
  uint64_t v15 = *(void *)(v0 + 368);
  uint64_t v17 = *(void *)(v0 + 336);
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v18 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3254C()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter( 0x7369726562626967LL,  0xE900000000000068LL);
}

uint64_t sub_32584()
{
  return swift_deallocClassInstance(v0, 144LL, 7LL);
}

uint64_t type metadata accessor for GibberishFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin13GibberishFlow);
}

uint64_t sub_325E0()
{
  return 1LL;
}

uint64_t sub_325E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for GibberishFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_32640(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_5B784);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_7240;
  return sub_31868(a1);
}

uint64_t sub_32694(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for GibberishFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

void sub_326B8()
{
  qword_5D468 = 0x54746E6572727543LL;
  unk_5D470 = 0xEB000000006B7361LL;
}

uint64_t sub_326E4(uint64_t a1)
{
  v2[37] = a1;
  v2[38] = v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A820);
  v2[39] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  v2[40] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[41] = v5;
  v2[42] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A5A0);
  v2[43] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  v2[44] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[45] = v8;
  v2[46] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v2[47] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[48] = v10;
  v2[49] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TemplatingResult(0LL);
  v2[50] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[51] = v12;
  v2[52] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_32804, 0LL, 0LL);
}

uint64_t sub_32804()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "GiveUpRepeatFlow: execute called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[38];

  sub_73B4((void *)(v6 + 16), *(void *)(v6 + 40));
  unint64_t v7 = sub_2C6F8((uint64_t)_swiftEmptyArrayStorage);
  v0[53] = v7;
  uint64_t v8 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v8, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  strcpy((char *)(inited + 32), "responseMode");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 7sub_6CEC(v0 + 2) = &type metadata for String;
  *(void *)(inited + 4sub_6CEC((void *)v0 + 8) = 0LL;
  *(void *)(inited + 56) = 0xE000000000000000LL;
  unint64_t v10 = sub_2C5C4(inited);
  v0[54] = v10;
  uint64_t v11 = (void *)swift_task_alloc(dword_5B25C);
  v0[55] = v11;
  void *v11 = v0;
  v11[1] = sub_329AC;
  return sub_29084(0xD000000000000016LL, 0x8000000000049B50LL, v7, v10);
}

uint64_t sub_329AC(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 440LL);
  v3[56] = a1;
  v3[57] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = sub_32DA0;
  }

  else
  {
    uint64_t v6 = v3[53];
    swift_bridgeObjectRelease(v3[54]);
    swift_bridgeObjectRelease(v6);
    uint64_t v5 = sub_32A28;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_32A28()
{
  uint64_t v26 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v30 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v29 = *(void *)(v0 + 352);
  uint64_t v27 = *(void *)(v0 + 368);
  uint64_t v28 = *(void **)(v0 + 304);
  id v5 = *(id *)(v0 + 448);
  id v6 = [v5 speak];
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String);

  id v7 = [v5 print];
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String);

  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v3);
  id v9 = [v5 print];
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String);

  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = sub_34478(0LL, 0xE000000000000000LL, v11);
  id v13 = [v5 meta];

  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v13,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  uint64_t v15 = TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:dialogIdentifier:meta:)( 0xD000000000000022LL,  0x8000000000049640LL,  v25,  v8,  v1,  v12,  v14);
  uint64_t v16 = static Device.current.getter(v15);
  static Device.current.getter(v16);
  uint64_t v17 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 168);
  sub_73B4((void *)(v0 + 136), v17);
  LOBYTE(v1) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v17, v18);
  uint64_t v19 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v4, 1LL, 1LL, v19);
  *(void *)(v0 + 20sub_6CEC((void *)v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 19sub_6CEC(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v26,  v0 + 96,  v1 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v4,  _swiftEmptyArrayStorage,  v0 + 176);
  sub_73D8(v0 + 176, (uint64_t *)&unk_5C140);
  sub_73D8(v4, (uint64_t *)&unk_5A5A0);
  sub_6CEC((void *)(v0 + 96));
  sub_6CEC((void *)(v0 + 136));
  uint64_t v20 = v28[10];
  uint64_t v21 = v28[11];
  sub_73B4(v28 + 7, v20);
  *(void *)(v0 + 240) = v29;
  *(void *)(v0 + 24sub_6CEC((void *)v0 + 8) = &protocol witness table for AceOutput;
  uint64_t v22 = sub_8390((void *)(v0 + 216));
  (*(void (**)(void *, uint64_t, uint64_t))(v30 + 16))(v22, v27, v29);
  uint64_t v23 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 464) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_32D30;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 216, v20, v21);
}

uint64_t sub_32D30()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 464));
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v3 = sub_3313C;
  }

  else
  {
    sub_6CEC((void *)(v2 + 216));
    uint64_t v3 = sub_32F40;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_32DA0()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 424);
  swift_bridgeObjectRelease(*(void *)(v0 + 432));
  swift_bridgeObjectRelease(v2);
  _StringGuts.grow(_:)(46LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v17[0] = 0xD00000000000002CLL;
  v17[1] = 0x8000000000049B70LL;
  swift_getErrorValue(v1, v0 + 288, v0 + 256);
  v3._countAndFlagsBits = Error.localizedDescription.getter(*(void *)(v0 + 264), *(void *)(v0 + 272));
  object = v3._object;
  String.append(_:)(v3);
  uint64_t v5 = swift_bridgeObjectRelease(object);
  id v6 = static OutputPublisherFactory.makeOutputPublisherAsync()(v16, v5);
  static SiriKitEventSender.current.getter(v17, v6);
  uint64_t v7 = type metadata accessor for CamErrorFlow();
  swift_allocObject(v7, 112LL, 7LL);
  uint64_t v8 = sub_267BC(0xD00000000000002CLL, 0x8000000000049B70LL, v16, v17);
  *(void *)(v0 + 280) = v8;
  uint64_t v9 = sub_7D7C( (unint64_t *)&qword_5C1A0,  (uint64_t (*)(uint64_t))type metadata accessor for CamErrorFlow,  (uint64_t)&unk_48040);
  static ExecuteResponse.complete<A>(next:)(v0 + 280, v7, v9);
  swift_errorRelease(v1);
  swift_release(v8);
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v11 = *(void *)(v0 + 368);
  uint64_t v13 = *(void *)(v0 + 336);
  uint64_t v12 = *(void *)(v0 + 344);
  uint64_t v14 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_32F40()
{
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v4 = *(void **)(v0 + 304);
  uint64_t v5 = v4[15];
  uint64_t v28 = v4[16];
  sub_73B4(v4 + 12, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.giveUpAskRepeat(_:), v3);
  if (qword_59DD0 != -1) {
    swift_once(&qword_59DD0, sub_326B8);
  }
  uint64_t v25 = *(void *)(v0 + 408);
  uint64_t v26 = *(void *)(v0 + 400);
  uint64_t v27 = *(void *)(v0 + 416);
  uint64_t v23 = *(void *)(v0 + 368);
  uint64_t v24 = *(void **)(v0 + 448);
  uint64_t v21 = *(void *)(v0 + 360);
  uint64_t v22 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 312);
  uint64_t v8 = qword_5D468;
  uint64_t v9 = unk_5D470;
  uint64_t v10 = enum case for SiriKitReliabilityCodes.promptFailure(_:);
  uint64_t v11 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v7, v10, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v7, 0LL, 1LL, v11);
  swift_bridgeObjectRetain(v9);
  uint64_t v13 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v6, v8, v9, v7, nullsub_1, 0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v13, v5, v28);
  uint64_t v14 = swift_release(v13);
  static ExecuteResponse.complete()(v14);

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  uint64_t v15 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 368);
  uint64_t v18 = *(void *)(v0 + 336);
  uint64_t v17 = *(void *)(v0 + 344);
  uint64_t v19 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3313C()
{
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v4 = *(void **)(v0 + 304);
  uint64_t v5 = v4[15];
  uint64_t v28 = v4[16];
  sub_73B4(v4 + 12, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.giveUpAskRepeat(_:), v3);
  if (qword_59DD0 != -1) {
    swift_once(&qword_59DD0, sub_326B8);
  }
  uint64_t v25 = *(void *)(v0 + 408);
  uint64_t v26 = *(void *)(v0 + 400);
  uint64_t v27 = *(void *)(v0 + 416);
  uint64_t v23 = *(void *)(v0 + 368);
  uint64_t v24 = *(void **)(v0 + 448);
  uint64_t v21 = *(void *)(v0 + 360);
  uint64_t v22 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 312);
  uint64_t v8 = qword_5D468;
  uint64_t v9 = unk_5D470;
  uint64_t v10 = enum case for SiriKitReliabilityCodes.promptFailure(_:);
  uint64_t v11 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v7, v10, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v7, 0LL, 1LL, v11);
  swift_bridgeObjectRetain(v9);
  uint64_t v13 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v6, v8, v9, v7, nullsub_1, 0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v13, v5, v28);
  uint64_t v14 = swift_release(v13);
  static ExecuteResponse.complete()(v14);

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  uint64_t v15 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 368);
  uint64_t v18 = *(void *)(v0 + 336);
  uint64_t v17 = *(void *)(v0 + 344);
  uint64_t v19 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for GiveUpRepeatFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin16GiveUpRepeatFlow);
}

uint64_t sub_33364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for GiveUpRepeatFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_333BC(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_5B87C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_7240;
  return sub_326E4(a1);
}

uint64_t sub_33410(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for GiveUpRepeatFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_33434(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5A038);
  __chkstk_darwin(v2, v3);
  uint64_t v80 = (uint64_t *)((char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = type metadata accessor for CAMDirectInvocation(0LL);
  uint64_t v72 = *(void *)(v5 - 8);
  uint64_t v73 = v5;
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v71 = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v67 - v10;
  uint64_t v12 = type metadata accessor for Parse(0LL);
  uint64_t v77 = *(void *)(v12 - 8);
  uint64_t v78 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v82 = *(void *)(v74 - 8);
  __chkstk_darwin(v74, v16);
  uint64_t v81 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Input(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)&v67 - v25;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v28 = sub_72B4(v27, (uint64_t)qword_5D478);
  uint64_t v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v29 = v76(v26, a1, v18);
  uint64_t v79 = v28;
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc(12LL, -1LL);
    os_log_type_t v70 = v23;
    uint64_t v33 = (uint8_t *)v32;
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    uint64_t v68 = v11;
    uint64_t v35 = v34;
    uint64_t v84 = v34;
    uint64_t v69 = a1;
    *(_DWORD *)uint64_t v33 = 136315138;
    int v75 = (void (*)(char *, uint64_t))(v33 + 4);
    uint64_t v36 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v18, v36);
    unint64_t v39 = v38;
    uint64_t v83 = sub_24BA0(v37, v38, &v84);
    a1 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v75, v33 + 12);
    swift_bridgeObjectRelease(v39);
    int v75 = *(void (**)(char *, uint64_t))(v19 + 8);
    v75(v26, v18);
    _os_log_impl(&dword_0, v30, v31, "GiveUpRepeatFlow: on called with %s", v33, 0xCu);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v40 = v35;
    uint64_t v11 = v68;
    swift_slowDealloc(v40, -1LL, -1LL);
    uint64_t v41 = v33;
    uint64_t v23 = v70;
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {
    int v75 = *(void (**)(char *, uint64_t))(v19 + 8);
    v75(v26, v18);
  }

  Input.parse.getter(v42);
  uint64_t v44 = v77;
  uint64_t v43 = v78;
  int v45 = (*(uint64_t (**)(char *, uint64_t))(v77 + 88))(v15, v78);
  uint64_t v47 = v81;
  uint64_t v46 = v82;
  uint64_t v48 = v80;
  if (v45 != enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v43);
    goto LABEL_15;
  }

  (*(void (**)(char *, uint64_t))(v44 + 96))(v15, v43);
  uint64_t v49 = v15;
  uint64_t v50 = v74;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v47, v49, v74);
  sub_2B424(v48);
  uint64_t v51 = v73;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v72 + 48))(v48, 1LL, v73) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v50);
    sub_73D8((uint64_t)v48, &qword_5A038);
LABEL_15:
    uint64_t v58 = v76(v23, a1, v18);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      unint64_t v61 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v62 = swift_slowAlloc(32LL, -1LL);
      uint64_t v84 = v62;
      *(_DWORD *)unint64_t v61 = 136315138;
      uint64_t v63 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
      uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter(v18, v63);
      unint64_t v66 = v65;
      uint64_t v83 = sub_24BA0(v64, v65, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v61 + 4, v61 + 12);
      swift_bridgeObjectRelease(v66);
      v75(v23, v18);
      _os_log_impl(&dword_0, v59, v60, "GiveUpRepeatFlow called with unexpected input %s", v61, 0xCu);
      swift_arrayDestroy(v62, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1LL, -1LL);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    else
    {
      v75(v23, v18);
    }

    return 0LL;
  }

  sub_25850((uint64_t)v48, (uint64_t)v11);
  uint64_t v52 = v71;
  sub_25894((uint64_t)v11, v71);
  if (swift_getEnumCaseMultiPayload(v52, v51) != 4)
  {
    sub_258D8((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v50);
    sub_258D8(v52);
    goto LABEL_15;
  }

  uint64_t v53 = sub_258D8(v52);
  uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v54, v55))
  {
    unint64_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v56 = 0;
    _os_log_impl(&dword_0, v54, v55, "GiveUpRepeatFlow: input accepted", v56, 2u);
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  sub_258D8((uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v50);
  return 1LL;
}

uint64_t sub_33AA4(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5B930);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v15 - v8;
  sub_342E0(a1, (uint64_t)&v15 - v8);
  uint64_t v10 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) != 1)
  {
    sub_342E0((uint64_t)v9, (uint64_t)v6);
    int v13 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v6, v10);
    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fourth(_:))
    {
      uint64_t v12 = 3LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Second(_:))
    {
      uint64_t v12 = 1LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Beginning(_:)) {
      goto LABEL_8;
    }
    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyFourth(_:))
    {
      uint64_t v12 = 23LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Seventeenth(_:))
    {
      uint64_t v12 = 16LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Eighth(_:))
    {
      uint64_t v12 = 7LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_ThirdToLast(_:))
    {
      uint64_t v12 = -3LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Sixth(_:))
    {
      uint64_t v12 = 5LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Nineteenth(_:))
    {
      uint64_t v12 = 18LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyFifth(_:))
    {
      uint64_t v12 = 24LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Ninth(_:))
    {
      uint64_t v12 = 8LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Eleventh(_:))
    {
      uint64_t v12 = 10LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_End(_:)) {
      goto LABEL_28;
    }
    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fourteenth(_:))
    {
      uint64_t v12 = 13LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_SecondToLast(_:))
    {
      uint64_t v12 = -2LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyFirst(_:))
    {
      uint64_t v12 = 20LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Thirteenth(_:))
    {
      uint64_t v12 = 12LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Last(_:))
    {
LABEL_28:
      uint64_t v12 = -1LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentySecond(_:))
    {
      uint64_t v12 = 21LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fifteenth(_:))
    {
      uint64_t v12 = 14LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Twentieth(_:))
    {
      uint64_t v12 = 19LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fifth(_:))
    {
      uint64_t v12 = 4LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Sixteenth(_:))
    {
      uint64_t v12 = 15LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_First(_:))
    {
LABEL_8:
      uint64_t v12 = 0LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Seventh(_:))
    {
      uint64_t v12 = 6LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Eighteenth(_:))
    {
      uint64_t v12 = 17LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyThird(_:))
    {
      uint64_t v12 = 22LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Twelfth(_:))
    {
      uint64_t v12 = 11LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Third(_:))
    {
      uint64_t v12 = 2LL;
      goto LABEL_61;
    }

    if (v13 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Tenth(_:))
    {
      uint64_t v12 = 9LL;
      goto LABEL_61;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v10);
  }

  uint64_t v12 = 0LL;
LABEL_61:
  sub_342A0((uint64_t)v9);
  return v12;
}

uint64_t sub_33F50()
{
  uint64_t v0 = sub_72E4(&qword_5B930);
  __chkstk_darwin(v0, v1);
  uint64_t v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_3E520();
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = UsoTask.arguments.getter();
  if (!*(void *)(v6 + 16) || (unint64_t v7 = sub_2C9F4(0x797469746E65LL, 0xE600000000000000LL), (v8 & 1) == 0))
  {
    swift_release(v5);
    uint64_t v27 = v6;
LABEL_22:
    swift_bridgeObjectRelease(v27);
    return 0LL;
  }

  uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v6);
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0) {
      uint64_t v29 = v9;
    }
    else {
      uint64_t v29 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v9);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v9);
    if (!v6) {
      goto LABEL_42;
    }
  }

  else if (!*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_42:
    swift_release(v5);
    uint64_t v27 = v9;
    goto LABEL_22;
  }

  if ((v9 & 0xC000000000000001LL) != 0)
  {
    uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      goto LABEL_37;
    }

    uint64_t v10 = *(void *)(v9 + 32);
    swift_retain(v10);
  }

  uint64_t v11 = swift_bridgeObjectRelease(v9);
  uint64_t v6 = dispatch thunk of UsoValue.getAsEntity()(v11);
  uint64_t v12 = swift_release(v10);
  if (!v6) {
    goto LABEL_27;
  }
  uint64_t v13 = UsoEntity.attributes.getter(v12);
  if (!*(void *)(v13 + 16) || (unint64_t v14 = sub_2C9F4(0x507473694C6F7375LL, 0xEF6E6F697469736FLL), (v15 & 1) == 0))
  {
    swift_release(v6);
    swift_release(v5);
    uint64_t v27 = v13;
    goto LABEL_22;
  }

  uint64_t v9 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
  swift_bridgeObjectRetain(v9);
  uint64_t result = swift_bridgeObjectRelease(v13);
  if (!((unint64_t)v9 >> 62))
  {
    goto LABEL_41;
  }

LABEL_37:
  if (v9 < 0) {
    uint64_t v30 = v9;
  }
  else {
    uint64_t v30 = v9 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v9);
  uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  uint64_t result = swift_bridgeObjectRelease(v9);
  if (!v31)
  {
LABEL_41:
    swift_release(v6);
    goto LABEL_42;
  }

uint64_t sub_342A0(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5B930);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_342E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5B930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_34328()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_343A8(v0, qword_5D478);
  sub_72B4(v0, (uint64_t)qword_5D478);
  if (qword_59DE0 != -1) {
    swift_once(&qword_59DE0, sub_343E8);
  }
  return Logger.init(_:)((id)qword_5D490);
}

uint64_t *sub_343A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_343E8()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000018LL,  0x8000000000049BA0LL,  2003790918LL,  0xE400000000000000LL);
  qword_5D490 = result;
  return result;
}

unint64_t sub_3443C()
{
  unint64_t result = qword_5B938;
  if (!qword_5B938)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_5B938);
  }

  return result;
}

void *sub_34478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
  }

  else
  {
    if (a3)
    {
      uint64_t v6 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a3, &type metadata for String);
      unint64_t v7 = v6;
      v6[2] = a3;
      v6[4] = a1;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = a1;
        v6[7] = a2;
        uint64_t v8 = a3 - 2;
        if (v8)
        {
          uint64_t v9 = v6 + 9;
          do
          {
            *(v9 - 1) = a1;
            *uint64_t v9 = a2;
            swift_bridgeObjectRetain(a2);
            v9 += 2;
            --v8;
          }

          while (v8);
        }

        swift_bridgeObjectRetain(a2);
      }
    }

    else
    {
      swift_bridgeObjectRelease(a2);
      return _swiftEmptyArrayStorage;
    }

    return v7;
  }

  return result;
}

uint64_t sub_34570(uint64_t a1)
{
  v2[37] = a1;
  v2[38] = v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A820);
  v2[39] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  v2[40] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[41] = v5;
  v2[42] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A5A0);
  v2[43] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  v2[44] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[45] = v8;
  v2[46] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v2[47] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[48] = v10;
  v2[49] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TemplatingResult(0LL);
  v2[50] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[51] = v12;
  v2[52] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_34690, 0LL, 0LL);
}

uint64_t sub_34690()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "NetworkUnavailableFlow: execute called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = type metadata accessor for ConversationService(0LL);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v6);
  id v8 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  v0[54] = v8;
  unint64_t v9 = sub_2C6F8((uint64_t)_swiftEmptyArrayStorage);
  v0[55] = v9;
  uint64_t v10 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v10, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  strcpy((char *)(inited + 32), "responseMode");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 7sub_6CEC(v0 + 2) = &type metadata for String;
  *(void *)(inited + 4sub_6CEC((void *)v0 + 8) = 0LL;
  *(void *)(inited + 56) = 0xE000000000000000LL;
  unint64_t v12 = sub_2C5C4(inited);
  v0[56] = v12;
  char v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_5B310 + dword_5B310);
  uint64_t v13 = (void *)swift_task_alloc(unk_5B314);
  v0[57] = v13;
  void *v13 = v0;
  v13[1] = sub_34D7C;
  return v15((uint64_t)v8, 0xD000000000000022LL, 0x8000000000049640LL, v9, v12);
}

uint64_t sub_34874()
{
  uint64_t v26 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v30 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v29 = *(void *)(v0 + 352);
  uint64_t v27 = *(void *)(v0 + 368);
  uint64_t v28 = *(void **)(v0 + 304);
  id v5 = *(id *)(v0 + 464);
  id v6 = [v5 speak];
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String);

  id v7 = [v5 print];
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String);

  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v3);
  id v9 = [v5 print];
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String);

  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRelease(v10);
  unint64_t v12 = sub_34478(0LL, 0xE000000000000000LL, v11);
  id v13 = [v5 meta];

  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v13,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  uint64_t v15 = TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:dialogIdentifier:meta:)( 0xD000000000000022LL,  0x8000000000049640LL,  v25,  v8,  v1,  v12,  v14);
  uint64_t v16 = static Device.current.getter(v15);
  static Device.current.getter(v16);
  uint64_t v17 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 168);
  sub_73B4((void *)(v0 + 136), v17);
  LOBYTE(v1) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v17, v18);
  uint64_t v19 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v4, 1LL, 1LL, v19);
  *(void *)(v0 + 20sub_6CEC((void *)v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 19sub_6CEC(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v26,  v0 + 96,  v1 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v4,  _swiftEmptyArrayStorage,  v0 + 176);
  sub_73D8(v0 + 176, (uint64_t *)&unk_5C140);
  sub_73D8(v4, (uint64_t *)&unk_5A5A0);
  sub_6CEC((void *)(v0 + 96));
  sub_6CEC((void *)(v0 + 136));
  uint64_t v20 = v28[10];
  uint64_t v21 = v28[11];
  sub_73B4(v28 + 7, v20);
  *(void *)(v0 + 240) = v29;
  *(void *)(v0 + 24sub_6CEC((void *)v0 + 8) = &protocol witness table for AceOutput;
  uint64_t v22 = sub_8390((void *)(v0 + 216));
  (*(void (**)(void *, uint64_t, uint64_t))(v30 + 16))(v22, v27, v29);
  uint64_t v23 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 424) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_34B7C;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 216, v20, v21);
}

uint64_t sub_34B7C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 424));
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v3 = sub_34FA4;
  }

  else
  {
    sub_6CEC((void *)(v2 + 216));
    uint64_t v3 = sub_34E0C;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_34BEC()
{
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v3 = *(void **)(v0 + 432);
  swift_bridgeObjectRelease(*(void *)(v0 + 448));
  swift_bridgeObjectRelease(v2);

  v19[0] = 0LL;
  v19[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(52LL);
  v4._object = (void *)0x8000000000049BF0LL;
  v4._countAndFlagsBits = 0xD000000000000032LL;
  String.append(_:)(v4);
  swift_getErrorValue(v1, v0 + 288, v0 + 256);
  v5._countAndFlagsBits = Error.localizedDescription.getter(*(void *)(v0 + 264), *(void *)(v0 + 272));
  object = v5._object;
  String.append(_:)(v5);
  uint64_t v7 = swift_bridgeObjectRelease(object);
  uint64_t v8 = static OutputPublisherFactory.makeOutputPublisherAsync()(v18, v7);
  static SiriKitEventSender.current.getter(v19, v8);
  uint64_t v9 = type metadata accessor for CamErrorFlow();
  swift_allocObject(v9, 112LL, 7LL);
  uint64_t v10 = sub_267BC(0LL, 0xE000000000000000LL, v18, v19);
  *(void *)(v0 + 280) = v10;
  unint64_t v11 = sub_D2A8();
  static ExecuteResponse.complete<A>(next:)(v0 + 280, v9, v11);
  swift_errorRelease(v1);
  swift_release(v10);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v14 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_34D7C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 456);
  *(void *)(v3 + 464) = a1;
  *(void *)(v3 + 47sub_6CEC(v0 + 2) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    Swift::String v5 = sub_34BEC;
  }

  else
  {
    uint64_t v6 = *(void *)(v3 + 440);
    uint64_t v7 = *(void *)(v3 + 448);

    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    Swift::String v5 = sub_34874;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_34E0C()
{
  uint64_t v20 = *(void **)(v0 + 464);
  uint64_t v21 = *(void *)(v0 + 408);
  uint64_t v22 = *(void *)(v0 + 400);
  uint64_t v23 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 352);
  uint64_t v19 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void **)(v0 + 304);
  uint64_t v8 = v6[15];
  uint64_t v7 = v6[16];
  sub_73B4(v6 + 12, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ActivityType.completed(_:), v4);
  type metadata accessor for SiriKitEvent(0LL);
  uint64_t v9 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 1LL, 1LL, v9);
  uint64_t v10 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v2,  0x54746E6572727543LL,  0xEB000000006B7361LL,  v5,  sub_35144,  0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v10, v8, v7);
  uint64_t v11 = swift_release(v10);
  static ExecuteResponse.complete()(v11);

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v19, v18);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v14 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_34FA4()
{
  uint64_t v20 = *(void **)(v0 + 464);
  uint64_t v21 = *(void *)(v0 + 408);
  uint64_t v22 = *(void *)(v0 + 400);
  uint64_t v23 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 352);
  uint64_t v19 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void **)(v0 + 304);
  uint64_t v8 = v6[15];
  uint64_t v7 = v6[16];
  sub_73B4(v6 + 12, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ActivityType.completed(_:), v4);
  type metadata accessor for SiriKitEvent(0LL);
  uint64_t v9 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 1LL, 1LL, v9);
  uint64_t v10 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)( v2,  0x54746E6572727543LL,  0xEB000000006B7361LL,  v5,  sub_35144,  0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v10, v8, v7);
  uint64_t v11 = swift_release(v10);
  static ExecuteResponse.complete()(v11);

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v19, v18);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v14 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_35144()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter( 0xD000000000000013LL,  0x8000000000049C30LL);
}

uint64_t type metadata accessor for NetworkUnavailableFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin22NetworkUnavailableFlow);
}

uint64_t sub_3519C()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_72B4(v0, (uint64_t)qword_5D478);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "NetworkUnavailableFlow input accepted", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return 1LL;
}

uint64_t sub_3526C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for NetworkUnavailableFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_352C4(uint64_t a1)
{
  os_log_type_t v3 = (void *)swift_task_alloc(dword_5B96C);
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = sub_7240;
  return sub_34570(a1);
}

uint64_t sub_35318(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for NetworkUnavailableFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_3533C()
{
  uint64_t v1 = sub_72E4(&qword_5BA20);
  __chkstk_darwin(v1, v2);
  uint64_t v188 = (char *)&v175 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v196 = type metadata accessor for HandcraftedPluginManifestEntry(0LL);
  uint64_t v4 = *(void *)(v196 - 8);
  uint64_t v6 = __chkstk_darwin(v196, v5);
  uint64_t v177 = (char *)&v175 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v8);
  uint64_t v189 = (char *)&v175 - v9;
  uint64_t v10 = sub_72E4(&qword_5A8E8);
  __chkstk_darwin(v10, v11);
  uint64_t v182 = (uint64_t)&v175 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v187 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash(0LL);
  uint64_t v184 = *(void *)(v187 - 8);
  uint64_t v14 = __chkstk_darwin(v187, v13);
  uint64_t v179 = (char *)&v175 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v16);
  uint64_t v180 = (char *)&v175 - v17;
  uint64_t v18 = sub_72E4(&qword_5A930);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v175 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Parse(0LL);
  uint64_t v197 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v192 = (void **)((char *)&v175 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v24, v26);
  uint64_t v195 = (char *)&v175 - v27;
  uint64_t v203 = type metadata accessor for Input(0LL);
  uint64_t v194 = *(void *)(v203 - 8);
  uint64_t v29 = __chkstk_darwin(v203, v28);
  uint64_t v191 = (char *)&v175 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29, v31);
  uint64_t v193 = (char *)&v175 - v32;
  uint64_t v33 = type metadata accessor for USOParse(0LL);
  uint64_t v202 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v34);
  v201 = (char *)&v175 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = sub_72E4((uint64_t *)&unk_5C0E0);
  __chkstk_darwin(v36, v37);
  uint64_t v199 = (void (*)(char *, uint64_t))((char *)&v175 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v39 = type metadata accessor for PluginAction(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v42 = __chkstk_darwin(v39, v41);
  uint64_t v181 = (char *)&v175 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = __chkstk_darwin(v42, v44);
  uint64_t v47 = (char *)&v175 - v46;
  __chkstk_darwin(v45, v48);
  uint64_t v50 = (char *)&v175 - v49;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  unint64_t v185 = v21;
  unint64_t v178 = v47;
  uint64_t v51 = type metadata accessor for Logger(0LL);
  uint64_t v52 = sub_72B4(v51, (uint64_t)qword_5D478);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 16);
  uint64_t v200 = v0;
  char v183 = v53;
  uint64_t v54 = v53(v50, v0, v39);
  uint64_t v198 = v52;
  os_log_type_t v55 = (os_log_s *)Logger.logObject.getter(v54);
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  BOOL v57 = os_log_type_enabled(v55, v56);
  uint64_t v190 = v4;
  uint64_t v186 = v33;
  if (v57)
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v59 = swift_slowAlloc(32LL, -1LL);
    uint64_t v176 = v22;
    uint64_t v60 = v59;
    v205[0] = v59;
    *(_DWORD *)uint64_t v58 = 136315138;
    uint64_t v61 = ((uint64_t (*)(void))PluginAction.flowHandlerId.getter)();
    unint64_t v63 = v62;
    uint64_t v204 = sub_24BA0(v61, v62, v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v58 + 4, v58 + 12);
    swift_bridgeObjectRelease(v63);
    uint64_t v64 = *(void (**)(char *, uint64_t))(v40 + 8);
    v64(v50, v39);
    _os_log_impl(&dword_0, v55, v56, "Finding app bundle id for %s action", v58, 0xCu);
    swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v65 = v60;
    uint64_t v22 = v176;
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_slowDealloc(v58, -1LL, -1LL);
  }

  else
  {
    uint64_t v64 = *(void (**)(char *, uint64_t))(v40 + 8);
    v64(v50, v39);
  }

  uint64_t v66 = v39;
  uint64_t v67 = (uint64_t)v199;
  uint64_t v68 = v200;
  PluginAction.actionParaphrase.getter();
  uint64_t v69 = type metadata accessor for ActionParaphrase(0LL);
  uint64_t v70 = *(void *)(v69 - 8);
  int v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v67, 1LL, v69);
  uint64_t v72 = v201;
  if (v71 == 1)
  {
    uint64_t v73 = sub_73D8(v67, (uint64_t *)&unk_5C0E0);
    uint64_t v74 = v202;
  }

  else
  {
    uint64_t v75 = ActionParaphrase.appBundleId.getter();
    uint64_t v76 = v67;
    unint64_t v78 = v77;
    uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v76, v69);
    uint64_t v74 = v202;
    if (v78)
    {
      uint64_t v79 = swift_bridgeObjectRetain_n(v78, 2LL);
      uint64_t v80 = (os_log_s *)Logger.logObject.getter(v79);
      os_log_type_t v81 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v82 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v83 = swift_slowAlloc(32LL, -1LL);
        v205[0] = v83;
        *(_DWORD *)uint64_t v82 = 136315138;
        swift_bridgeObjectRetain(v78);
        uint64_t v204 = sub_24BA0(v75, v78, v205);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v82 + 4, v82 + 12);
        swift_bridgeObjectRelease_n(v78, 3LL);
        _os_log_impl(&dword_0, v80, v81, "Value %s found in action paraphrase", v82, 0xCu);
        swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v83, -1LL, -1LL);
        swift_slowDealloc(v82, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v78, 2LL);
      }

      return v75;
    }
  }

  uint64_t v84 = v193;
  uint64_t v85 = PluginAction.input.getter(v73);
  uint64_t v86 = v195;
  Input.parse.getter(v85);
  uint64_t v87 = v86;
  unint64_t v88 = *(void (**)(char *, uint64_t))(v194 + 8);
  v88(v84, v203);
  uint64_t v89 = v197;
  char v90 = *(unsigned int (**)(char *, uint64_t))(v197 + 88);
  if (v90(v87, v22) == enum case for Parse.uso(_:))
  {
    uint64_t v194 = v66;
    uint64_t v199 = v64;
    os_log_type_t v91 = *(void (**)(char *, uint64_t))(v89 + 96);
    uint64_t v92 = v22;
    v91(v87, v22);
    uint64_t v93 = v72;
    uint64_t v94 = v87;
    char v95 = v72;
    uint64_t v96 = v186;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v93, v94, v186);
    LOBYTE(v205[0]) = 1;
    uint64_t v97 = (uint64_t)v185;
    USOParse.extractAppShortcutInvocation(groupIndex:)(0x100000000LL);
    uint64_t v98 = v74;
    uint64_t v99 = type metadata accessor for AppShortcutInvocation(0LL);
    uint64_t v100 = *(void *)(v99 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v97, 1LL, v99) != 1)
    {
      uint64_t v75 = AppShortcutInvocation.bundleId.getter();
      unint64_t v142 = v141;
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v97, v99);
      uint64_t v143 = swift_bridgeObjectRetain_n(v142, 2LL);
      uint64_t v144 = (os_log_s *)Logger.logObject.getter(v143);
      os_log_type_t v145 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v144, v145))
      {
        unint64_t v146 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v147 = swift_slowAlloc(32LL, -1LL);
        v205[0] = v147;
        *(_DWORD *)unint64_t v146 = 136315138;
        swift_bridgeObjectRetain(v142);
        uint64_t v204 = sub_24BA0(v75, v142, v205);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v146 + 4, v146 + 12);
        swift_bridgeObjectRelease_n(v142, 3LL);
        _os_log_impl(&dword_0, v144, v145, "Value %s found in app shortcut invocation", v146, 0xCu);
        swift_arrayDestroy(v147, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v147, -1LL, -1LL);
        swift_slowDealloc(v146, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(v142, 2LL);
      }

      (*(void (**)(char *, uint64_t))(v202 + 8))(v201, v96);
      return v75;
    }

    sub_73D8(v97, &qword_5A930);
    uint64_t v101 = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v95, v96);
    uint64_t v64 = v199;
    uint64_t v66 = v194;
    uint64_t v22 = v92;
    uint64_t v89 = v197;
  }

  else
  {
    uint64_t v101 = (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v87, v22);
  }

  uint64_t v102 = v191;
  uint64_t v103 = PluginAction.input.getter(v101);
  char v104 = v192;
  Input.parse.getter(v103);
  v88(v102, v203);
  if (v90((char *)v104, v22) == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v89 + 96))(v104, v22);
    unint64_t v105 = *v104;
    uint64_t v106 = v182;
    sub_36948(v182);
    uint64_t v107 = v184;
    uint64_t v108 = v187;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48))(v106, 1LL, v187) != 1)
    {
      uint64_t v148 = v180;
      (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v180, v106, v108);
      uint64_t v149 = v179;
      uint64_t v150 = (*(uint64_t (**)(char *, char *, uint64_t))(v107 + 16))(v179, v148, v108);
      os_log_type_t v151 = (os_log_s *)Logger.logObject.getter(v150);
      os_log_type_t v152 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v151, v152))
      {
        uint64_t v153 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v154 = swift_slowAlloc(32LL, -1LL);
        v205[0] = v154;
        *(_DWORD *)uint64_t v153 = 136315138;
        uint64_t v155 = Apple_Parsec_Siri_V2alpha_Sash.appID.getter();
        unint64_t v157 = v156;
        uint64_t v204 = sub_24BA0(v155, v156, v205);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v153 + 4, v153 + 12);
        swift_bridgeObjectRelease(v157);
        uint64_t v158 = *(void (**)(char *, uint64_t))(v184 + 8);
        v158(v149, v187);
        _os_log_impl(&dword_0, v151, v152, "Using %s from PommesResponse sash", v153, 0xCu);
        swift_arrayDestroy(v154, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v154, -1LL, -1LL);
        uint64_t v159 = v153;
        uint64_t v108 = v187;
        swift_slowDealloc(v159, -1LL, -1LL);
      }

      else
      {
        uint64_t v158 = *(void (**)(char *, uint64_t))(v107 + 8);
        v158(v149, v108);
      }

      uint64_t v75 = Apple_Parsec_Siri_V2alpha_Sash.appID.getter();
      v158(v148, v108);
      return v75;
    }

    uint64_t v109 = sub_73D8(v106, &qword_5A8E8);
  }

  else
  {
    uint64_t v109 = (*(uint64_t (**)(void **, uint64_t))(v89 + 8))(v104, v22);
  }

  uint64_t v110 = PluginAction.flowHandlerId.getter(v109);
  uint64_t v112 = v111;
  uint64_t v113 = (uint64_t)v188;
  static HandcraftedPluginManifestEntry.fromPluginBundleId(_:)(v110);
  swift_bridgeObjectRelease(v112);
  uint64_t v114 = v190;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v190 + 48))(v113, 1LL, v196) == 1)
  {
    sub_73D8(v113, &qword_5BA20);
    uint64_t v115 = v181;
    uint64_t v116 = v183(v181, v68, v66);
    uint64_t v117 = (os_log_s *)Logger.logObject.getter(v116);
    os_log_type_t v118 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v117, v118))
    {
      uint64_t v119 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v120 = v66;
      uint64_t v121 = v64;
      uint64_t v122 = swift_slowAlloc(32LL, -1LL);
      v205[0] = v122;
      *(_DWORD *)uint64_t v119 = 136315138;
      uint64_t v123 = PluginAction.flowHandlerId.getter(v122);
      unint64_t v125 = v124;
      uint64_t v204 = sub_24BA0(v123, v124, v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v119 + 4, v119 + 12);
      swift_bridgeObjectRelease(v125);
      v121(v115, v120);
      _os_log_impl(&dword_0, v117, v118, "%s was not found in plugin manifest", v119, 0xCu);
      swift_arrayDestroy(v122, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1LL, -1LL);
      swift_slowDealloc(v119, -1LL, -1LL);
    }

    else
    {
      v64(v115, v66);
    }

    return 0LL;
  }

  uint64_t v126 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 32))(v189, v113, v196);
  uint64_t v203 = HandcraftedPluginManifestEntry.associatedAppBundleId.getter(v126);
  if (!v127)
  {
    uint64_t v160 = v177;
    uint64_t v161 = (*(uint64_t (**)(char *, char *, uint64_t))(v114 + 16))(v177, v189, v196);
    uint64_t v162 = v114;
    char v163 = (os_log_s *)Logger.logObject.getter(v161);
    os_log_type_t v164 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v163, v164))
    {
      uint64_t v165 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v166 = swift_slowAlloc(32LL, -1LL);
      v205[0] = v166;
      *(_DWORD *)uint64_t v165 = 136315138;
      uint64_t v167 = HandcraftedPluginManifestEntry.pluginBundleId.getter();
      unint64_t v169 = v168;
      uint64_t v204 = sub_24BA0(v167, v168, v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v165 + 4, v165 + 12);
      swift_bridgeObjectRelease(v169);
      uint64_t v170 = *(void (**)(char *, uint64_t))(v162 + 8);
      uint64_t v171 = v196;
      v170(v160, v196);
      _os_log_impl(&dword_0, v163, v164, "No app is associated with %s in plugin manifest", v165, 0xCu);
      swift_arrayDestroy(v166, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v166, -1LL, -1LL);
      swift_slowDealloc(v165, -1LL, -1LL);

      v170(v189, v171);
    }

    else
    {

      uint64_t v173 = *(void (**)(char *, uint64_t))(v162 + 8);
      uint64_t v174 = v196;
      v173(v160, v196);
      v173(v189, v174);
    }

    return 0LL;
  }

  unint64_t v128 = v127;
  uint64_t v199 = v64;
  uint64_t v129 = v178;
  v183(v178, v68, v66);
  uint64_t v130 = swift_bridgeObjectRetain_n(v128, 2LL);
  uint64_t v131 = (os_log_s *)Logger.logObject.getter(v130);
  os_log_type_t v132 = static os_log_type_t.debug.getter();
  int v133 = v132;
  if (os_log_type_enabled(v131, v132))
  {
    uint64_t v134 = swift_slowAlloc(22LL, -1LL);
    uint64_t v202 = swift_slowAlloc(64LL, -1LL);
    v205[0] = v202;
    *(_DWORD *)uint64_t v134 = 136315394;
    LODWORD(v201) = v133;
    swift_bridgeObjectRetain(v128);
    uint64_t v135 = v203;
    uint64_t v204 = sub_24BA0(v203, v128, v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v134 + 4, v134 + 12);
    uint64_t v136 = swift_bridgeObjectRelease_n(v128, 3LL);
    *(_WORD *)(v134 + 1sub_6CEC(v0 + 2) = 2080;
    uint64_t v137 = PluginAction.flowHandlerId.getter(v136);
    unint64_t v139 = v138;
    uint64_t v204 = sub_24BA0(v137, v138, v205);
    uint64_t v75 = v135;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v134 + 14, v134 + 22);
    swift_bridgeObjectRelease(v139);
    v199(v129, v66);
    _os_log_impl(&dword_0, v131, (os_log_type_t)v201, "Using %s from being associated with %s", (uint8_t *)v134, 0x16u);
    uint64_t v140 = v202;
    swift_arrayDestroy(v202, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v140, -1LL, -1LL);
    swift_slowDealloc(v134, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v190 + 8))(v189, v196);
  }

  else
  {

    v199(v129, v66);
    swift_bridgeObjectRelease_n(v128, 2LL);
    (*(void (**)(char *, uint64_t))(v190 + 8))(v189, v196);
    return v203;
  }

  return v75;
}

uint64_t sub_363C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v100 = a1;
  uint64_t v2 = sub_72E4((uint64_t *)&unk_5C190);
  __chkstk_darwin(v2, v3);
  uint64_t v99 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v96 = *(void *)(v5 - 8);
  uint64_t v97 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v98 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_72E4(&qword_5BA28);
  __chkstk_darwin(v8, v9);
  char v90 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v89 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Parse(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v92 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v84 - v20;
  uint64_t v22 = type metadata accessor for Input(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v27 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25, v28);
  uint64_t v30 = (char *)&v84 - v29;
  uint64_t v31 = type metadata accessor for USOParse(0LL);
  uint64_t v87 = *(void *)(v31 - 8);
  uint64_t v88 = v31;
  __chkstk_darwin(v31, v32);
  uint64_t v34 = (char *)&v84 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v93 = type metadata accessor for CamParse(0LL);
  uint64_t v91 = *(void *)(v93 - 8);
  uint64_t v36 = __chkstk_darwin(v93, v35);
  uint64_t v94 = (char *)&v84 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = __chkstk_darwin(v36, v38);
  uint64_t v85 = (char *)&v84 - v40;
  uint64_t v42 = __chkstk_darwin(v39, v41);
  uint64_t v44 = (uint64_t *)((char *)&v84 - v43);
  uint64_t v95 = v1;
  uint64_t v45 = PluginAction.input.getter(v42);
  Input.parse.getter(v45);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v86 = v22;
  v46(v30, v22);
  uint64_t v47 = v15;
  uint64_t v48 = *(unsigned int (**)(char *, uint64_t))(v15 + 88);
  if (v48(v21, v14) == enum case for Parse.uso(_:))
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))(v21, v14);
    uint64_t v50 = v87;
    uint64_t v49 = v88;
    uint64_t v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v87 + 32))(v34, v21, v88);
    uint64_t v52 = v89;
    uint64_t v53 = USOParse.userParse.getter(v51);
    uint64_t v54 = v90;
    uint64_t v55 = USOParse.parserIdentifier.getter(v53);
    uint64_t v56 = USOParse.appBundleId.getter(v55);
    uint64_t v58 = v57;
    unint64_t v59 = USOParse.groupIndex.getter();
    uint64_t v60 = v85;
    CamUSOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)( v52,  v54,  v56,  v58,  v59 | ((HIDWORD(v59) & 1) << 32));
    (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v49);
    uint64_t v61 = v91;
    uint64_t v62 = v93;
    (*(void (**)(char *, void, uint64_t))(v91 + 104))(v60, enum case for CamParse.uso(_:), v93);
    uint64_t v63 = (*(uint64_t (**)(void *, char *, uint64_t))(v61 + 32))(v44, v60, v62);
    uint64_t v64 = (uint64_t)v99;
    uint64_t v65 = v97;
    uint64_t v66 = v44;
  }

  else
  {
    uint64_t v67 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
    uint64_t v68 = v14;
    uint64_t v69 = v67(v21, v14);
    uint64_t v70 = PluginAction.input.getter(v69);
    int v71 = v92;
    Input.parse.getter(v70);
    v46(v27, v86);
    if (v48(v71, v68) == enum case for Parse.pommesResponse(_:))
    {
      uint64_t v72 = v92;
      (*(void (**)(char *, uint64_t))(v47 + 96))(v92, v68);
      uint64_t v66 = v44;
      void *v44 = *(void *)v72;
      uint64_t v73 = enum case for CamParse.pommesResponse(_:);
      uint64_t v61 = v91;
      uint64_t v74 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v91 + 104);
    }

    else
    {
      v67(v92, v68);
      uint64_t v73 = enum case for CamParse.empty(_:);
      uint64_t v61 = v91;
      uint64_t v74 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v91 + 104);
      uint64_t v66 = v44;
    }

    uint64_t v62 = v93;
    uint64_t v63 = v74(v44, v73, v93);
    uint64_t v64 = (uint64_t)v99;
    uint64_t v65 = v97;
  }

  uint64_t v75 = PluginAction.flowHandlerId.getter(v63);
  uint64_t v77 = v76;
  unint64_t v78 = v94;
  uint64_t v79 = (*(uint64_t (**)(char *, void *, uint64_t))(v61 + 16))(v94, v66, v62);
  PluginAction.loggingId.getter(v79);
  uint64_t v80 = v96;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v64, 1LL, v65) == 1)
  {
    os_log_type_t v81 = v98;
    UUID.init()();
    sub_36908(v64);
  }

  else
  {
    uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 32);
    os_log_type_t v81 = v98;
    v82(v98, v64, v65);
  }

  ActionCandidate.init(flowHandlerId:parse:affinityScore:loggingId:userData:)(v75, v77, v78, 0LL, v81, 0LL);
  return (*(uint64_t (**)(void *, uint64_t))(v61 + 8))(v66, v62);
}

uint64_t sub_36908(uint64_t a1)
{
  uint64_t v2 = sub_72E4((uint64_t *)&unk_5C190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_36948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v57 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent(0LL);
  uint64_t v4 = *(void *)(v57 - 8);
  __chkstk_darwin(v57, v5);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_72E4(&qword_5BA30);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  uint64_t v56 = (char *)&v51 - v20;
  uint64_t v21 = dispatch thunk of PommesResponse.experiences.getter(v19);
  uint64_t v22 = v21;
  if ((unint64_t)v21 >> 62)
  {
    if (v21 >= 0) {
      v21 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v21);
    if (result) {
      goto LABEL_3;
    }
LABEL_21:
    swift_bridgeObjectRelease(v22);
    goto LABEL_22;
  }

  uint64_t result = *(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8LL));
  if (!result) {
    goto LABEL_21;
  }
LABEL_3:
  if ((v22 & 0xC000000000000001LL) != 0)
  {
    id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v22);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v22 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      return result;
    }

    id v24 = *(id *)(v22 + 32);
  }

  uint64_t v25 = v24;
  swift_bridgeObjectRelease(v22);
  uint64_t v26 = type metadata accessor for GenericExperience(0LL);
  if (swift_dynamicCastClass(v25, v26))
  {
    id v55 = v25;
    uint64_t v27 = GenericExperience.components.getter();
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)(v27 + 16);
    if (v29)
    {
      uint64_t v52 = v11;
      uint64_t v53 = v2;
      uint64_t v54 = a1;
      unint64_t v30 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v51 = v27;
      unint64_t v31 = v27 + v30;
      uint64_t v32 = *(void *)(v13 + 72);
      uint64_t v33 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        uint64_t v34 = v33(v17, v31, v12);
        uint64_t v35 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.layoutExperience.getter(v34);
        char v36 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.hasSash.getter(v35);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v57);
        if ((v36 & 1) != 0) {
          break;
        }
        (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
        v31 += v32;
        if (!--v29)
        {
          uint64_t v37 = 1LL;
          uint64_t v2 = v53;
          a1 = v54;
          uint64_t v28 = v51;
          uint64_t v11 = v52;
          goto LABEL_15;
        }
      }

      uint64_t v11 = v52;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v52, v17, v12);
      uint64_t v37 = 0LL;
      uint64_t v2 = v53;
      a1 = v54;
      uint64_t v28 = v51;
    }

    else
    {
      uint64_t v37 = 1LL;
    }

uint64_t sub_36DF8(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5BA30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_36E38()
{
  qword_5D498 = 0x54746E6572727543LL;
  unk_5D4A0 = 0xEB000000006B7361LL;
}

uint64_t sub_36E64(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  sub_83CC((uint64_t)a3, v5 + 16);
  sub_83CC((uint64_t)a4, v5 + 56);
  *(void *)(v5 + 96) = a1;
  *(void *)(v5 + 104) = a2;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_72B4(v10, (uint64_t)qword_5D478);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "PommesTimeoutFlow: new instance initialised", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  sub_6CEC(a4);
  sub_6CEC(a3);
  return v5;
}

uint64_t sub_36F7C(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A820);
  v2[24] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  v2[25] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[26] = v5;
  v2[27] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A5A0);
  v2[28] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  v2[29] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[30] = v8;
  v2[31] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_72E4(&qword_5B140);
  v2[32] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TemplatingResult(0LL);
  v2[33] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[34] = v11;
  v2[35] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_37098, 0LL, 0LL);
}

uint64_t sub_37098()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  v0[36] = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "PommesTimeoutFlow: execute called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to static ErrorTemplates.pommesTimeout() + 1));
  v0[37] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_371A0;
  return static ErrorTemplates.pommesTimeout()(v0[32]);
}

uint64_t sub_371A0()
{
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v2 = sub_26F74;
  }

  else
  {
    uint64_t v2 = sub_3720C;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_3720C()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v18 = *(void *)(v0 + 232);
  uint64_t v7 = *(void **)(v0 + 184);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v4, 0LL, 1LL, v3);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, v4, v3);
  uint64_t v9 = static Device.current.getter(v8);
  static Device.current.getter(v9);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 88);
  sub_73B4((void *)(v0 + 56), v11);
  LOBYTE(vsub_6CEC((void *)v0 + 3) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v11, v10);
  uint64_t v12 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v6, 1LL, 1LL, v12);
  *(void *)(v0 + 12sub_6CEC((void *)v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 11sub_6CEC(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v2,  v0 + 16,  v3 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v6,  _swiftEmptyArrayStorage,  v0 + 96);
  sub_73D8(v0 + 96, (uint64_t *)&unk_5C140);
  sub_73D8(v6, (uint64_t *)&unk_5A5A0);
  sub_6CEC((void *)(v0 + 16));
  sub_6CEC((void *)(v0 + 56));
  uint64_t v13 = v7[5];
  uint64_t v14 = v7[6];
  sub_73B4(v7 + 2, v13);
  *(void *)(v0 + 160) = v18;
  *(void *)(v0 + 16sub_6CEC((void *)v0 + 8) = &protocol witness table for AceOutput;
  uint64_t v15 = sub_8390((void *)(v0 + 136));
  (*(void (**)(void *, uint64_t, uint64_t))(v19 + 16))(v15, v5, v18);
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 304) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_373E4;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 136, v13, v14);
}

uint64_t sub_373E4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 304));
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v3 = sub_3761C;
  }

  else
  {
    sub_6CEC((void *)(v2 + 136));
    uint64_t v3 = sub_37454;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_37454()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void **)(v0 + 184);
  uint64_t v5 = v4[10];
  uint64_t v26 = v4[11];
  sub_73B4(v4 + 7, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.failed(_:), v3);
  if (qword_59DE8 != -1) {
    swift_once(&qword_59DE8, sub_36E38);
  }
  uint64_t v25 = *(void *)(v0 + 280);
  uint64_t v23 = *(void *)(v0 + 272);
  uint64_t v24 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v22 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v11 = qword_5D498;
  uint64_t v12 = unk_5D4A0;
  uint64_t v13 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v9, 1LL, 1LL, v13);
  swift_bridgeObjectRetain(v12);
  swift_retain(v10);
  uint64_t v14 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v8, v11, v12, v9, sub_275CC, v10);
  dispatch thunk of SiriKitEventSending.send(_:)(v14, v5, v26);
  uint64_t v15 = swift_release(v14);
  static ExecuteResponse.complete()(v15);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v22, v7);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  uint64_t v16 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3761C()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void **)(v0 + 184);
  uint64_t v5 = v4[10];
  uint64_t v26 = v4[11];
  sub_73B4(v4 + 7, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.failed(_:), v3);
  if (qword_59DE8 != -1) {
    swift_once(&qword_59DE8, sub_36E38);
  }
  uint64_t v25 = *(void *)(v0 + 280);
  uint64_t v23 = *(void *)(v0 + 272);
  uint64_t v24 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v22 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v11 = qword_5D498;
  uint64_t v12 = unk_5D4A0;
  uint64_t v13 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v9, 1LL, 1LL, v13);
  swift_bridgeObjectRetain(v12);
  swift_retain(v10);
  uint64_t v14 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v8, v11, v12, v9, sub_275CC, v10);
  dispatch thunk of SiriKitEventSending.send(_:)(v14, v5, v26);
  uint64_t v15 = swift_release(v14);
  static ExecuteResponse.complete()(v15);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v22, v7);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  uint64_t v16 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for PommesTimeoutFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin17PommesTimeoutFlow);
}

uint64_t sub_37810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for PommesTimeoutFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_37868(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_5BA64);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_7240;
  return sub_36F7C(a1);
}

uint64_t sub_378BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PommesTimeoutFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_378E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_72B4(v7, (uint64_t)qword_5D478);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    unint64_t v13 = sub_27584();
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v2, v13);
    unint64_t v16 = v15;
    uint64_t v18 = sub_24BA0(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v16);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    _os_log_impl(&dword_0, v9, v10, "PommesTimeoutFlow: on called with %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  return 0LL;
}

uint64_t sub_37ADC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static SiriEnvironment.forCurrentTask.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = SiriEnvironment.currentRequest.getter();
    uint64_t v5 = swift_release(v3);
    CurrentRequest.responseMode.getter(v5);
    swift_release(v4);
    uint64_t v6 = type metadata accessor for ResponseMode(0LL);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
    uint64_t v8 = a1;
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v6 = ((uint64_t (*)(void))type metadata accessor for ResponseMode)();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
    uint64_t v8 = a1;
    uint64_t v9 = 1LL;
  }

  return v7(v8, v9, 1LL, v6);
}

uint64_t sub_37B78(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Parse(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_37BD8, 0LL, 0LL);
}

void sub_37BD8()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void **)(v3 + 136);
  *(void *)(v3 + 136) = 4LL;
  sub_3B018(v5);
  Input.parse.getter(v6);
  char v7 = sub_3B03C(v1);
  *(_BYTE *)(v0 + 104) = v7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  __asm { BR              X10 }

uint64_t sub_37C54()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_5BB4C);
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_37E60;
  return sub_38298(0LL, 0);
}

uint64_t sub_37E60(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_37EBC, 0LL, 0LL);
}

uint64_t sub_37EBC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if (!v1)
  {
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_72B4(v2, (uint64_t)qword_5D478);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_0, v4, v5, "No repeatable last dialog.", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v1 = 3LL;
  }

  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void **)(v7 + 136);
  *(void *)(v7 + 136) = v1;
  sub_3B018(v8);
  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_BYTE *)(v0 + 104) != 3);
}

uint64_t sub_37FC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 80LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_38024, 0LL, 0LL);
}

uint64_t sub_38024()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (!v1)
  {
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_72B4(v2, (uint64_t)qword_5D478);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_0, v4, v5, "No repeatable dialog before last when asked to go back.", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v1 = 2LL;
  }

  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void **)(v7 + 136);
  *(void *)(v7 + 136) = v1;
  sub_3B018(v8);
  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_BYTE *)(v0 + 104) != 3);
}

uint64_t sub_38130(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_3818C, 0LL, 0LL);
}

uint64_t sub_3818C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  if (!v1)
  {
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_72B4(v2, (uint64_t)qword_5D478);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_0, v4, v5, "No repeatable dialog before last during indirect dismissal.", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v1 = 1LL;
  }

  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void **)(v7 + 136);
  *(void *)(v7 + 136) = v1;
  sub_3B018(v8);
  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_BYTE *)(v0 + 104) != 3);
}

uint64_t sub_38298(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 136) = a2;
  *(void *)(v3 + 7sub_6CEC(v0 + 2) = a1;
  *(void *)(v3 + 80) = v2;
  uint64_t v4 = type metadata accessor for DialogPhase(0LL);
  *(void *)(v3 + 8sub_6CEC((void *)v0 + 8) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 96) = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 104) = swift_task_alloc(v6);
  *(void *)(v3 + 11sub_6CEC(v0 + 2) = swift_task_alloc(v6);
  return swift_task_switch(sub_3830C, 0LL, 0LL);
}

uint64_t sub_3830C()
{
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  sub_73B4(v1 + 2, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AceServiceInvokerAsync.recentDialogs()[1]);
  *(void *)(v0 + 120) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_3837C;
  return dispatch thunk of AceServiceInvokerAsync.recentDialogs()(v2, v3);
}

uint64_t sub_3837C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_383D8, 0LL, 0LL);
}

id sub_383D8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v71 = *(void *)(v0 + 128);
    }
    else {
      uint64_t v71 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 128));
    id v2 = (id)_CocoaArrayWrapper.endIndex.getter(v71);
    swift_bridgeObjectRelease(v1);
  }

  else
  {
    id v2 = *(id *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v3 = *(void *)(v0 + 72);
  if ((uint64_t)v2 <= v3)
  {
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v11 = *(void *)(v0 + 128);
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_72B4(v12, (uint64_t)qword_5D478);
    uint64_t v13 = swift_bridgeObjectRetain(v11);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.info.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = *(void *)(v0 + 128);
    if (v16)
    {
      uint64_t v18 = *(void *)(v0 + 72);
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v19 = 134218240;
      *(void *)(v0 + 4sub_6CEC((void *)v0 + 8) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 1sub_6CEC(v0 + 2) = 2048;
      swift_bridgeObjectRelease(v17);
      *(void *)(v0 + 56) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v17);
      _os_log_impl( &dword_0,  v14,  v15,  "No recent dialog found. numStepsBack was %ld, but had %ld recent dialogs stored.",  (uint8_t *)v19,  0x16u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 128), 2LL);
    }

    goto LABEL_54;
  }

  if ((v1 & 0xC000000000000001LL) == 0)
  {
    if (v3 < 0)
    {
      __break(1u);
    }

    else if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL)) > (unint64_t)v3)
    {
      uint64_t v4 = *(void *)(v0 + 128);
      id v2 = *(id *)(v4 + 8 * v3 + 32);
      goto LABEL_8;
    }

    __break(1u);
    goto LABEL_69;
  }

  id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, *(void *)(v0 + 128));
  uint64_t v4 = *(void *)(v0 + 128);
LABEL_8:
  uint64_t v5 = swift_bridgeObjectRelease(v4);
  unint64_t v6 = (void *)RecentDialog.addViews.getter(v5);
  id v7 = [v6 dialogPhase];

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v10 = 0LL;
  }

  uint64_t v20 = *(void *)(v0 + 112);
  uint64_t v21 = *(void *)(v0 + 88);
  uint64_t v22 = *(void *)(v0 + 96);
  uint64_t v23 = static DialogPhase.summary.getter();
  uint64_t v24 = DialogPhase.aceValue.getter(v23);
  uint64_t v26 = v25;
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v27(v20, v21);
  if (v10)
  {
    if (v24 == v8 && v10 == v26)
    {
      swift_bridgeObjectRelease(v26);
LABEL_22:
      uint64_t v30 = swift_bridgeObjectRelease(v10);
      goto LABEL_29;
    }

    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v8, v10, 0LL);
    uint64_t v28 = swift_bridgeObjectRelease(v26);
    if ((v29 & 1) != 0) {
      goto LABEL_22;
    }
  }

  else
  {
    uint64_t v28 = swift_bridgeObjectRelease(v26);
  }

  uint64_t v31 = *(void *)(v0 + 104);
  uint64_t v32 = *(void *)(v0 + 88);
  uint64_t v33 = static DialogPhase.completion.getter(v28);
  uint64_t v34 = DialogPhase.aceValue.getter(v33);
  uint64_t v36 = v35;
  v27(v31, v32);
  if (!v10)
  {
    swift_bridgeObjectRelease(v36);
    goto LABEL_44;
  }

  if (v34 == v8 && v10 == v36)
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v30 = swift_bridgeObjectRelease(v36);
    goto LABEL_29;
  }

  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v8, v10, 0LL);
  swift_bridgeObjectRelease(v10);
  uint64_t v30 = swift_bridgeObjectRelease(v36);
  if ((v37 & 1) == 0)
  {
LABEL_44:
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v58 = type metadata accessor for Logger(0LL);
    uint64_t v59 = sub_72B4(v58, (uint64_t)qword_5D478);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v60 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v14, v60)) {
      goto LABEL_53;
    }
    uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v61 = 0;
    uint64_t v62 = "The recent dialog is in a non-repeatable phase, won't repeat it.";
    goto LABEL_52;
  }

LABEL_29:
  if (*(_BYTE *)(v0 + 136) != 1)
  {
    if (qword_59DD8 == -1)
    {
LABEL_41:
      uint64_t v53 = type metadata accessor for Logger(0LL);
      uint64_t v54 = sub_72B4(v53, (uint64_t)qword_5D478);
      id v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v57 = 0;
        _os_log_impl(&dword_0, v55, v56, "Returning a recent dialog for replaying.", v57, 2u);
        swift_slowDealloc(v57, -1LL, -1LL);
      }

      uint64_t v52 = (uint64_t)v2;
      goto LABEL_56;
    }

LABEL_69:
    swift_once(&qword_59DD8, sub_34328);
    goto LABEL_41;
  }

  uint64_t v38 = (void *)RecentDialog.addViews.getter(v30);
  id v39 = [v38 copy];

  _bridgeAnyObjectToAny(_:)((void *)(v0 + 16));
  swift_unknownObjectRelease(v39);
  uint64_t v40 = sub_18BE0(0LL, &qword_5BCA0, &OBJC_CLASS___SAUIAddViews_ptr);
  if (!swift_dynamicCast(v0 + 64, v0 + 16, (char *)&type metadata for Any + 8, v40, 6LL))
  {
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v63 = type metadata accessor for Logger(0LL);
    uint64_t v64 = sub_72B4(v63, (uint64_t)qword_5D478);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v14, v60)) {
      goto LABEL_53;
    }
    uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v61 = 0;
    uint64_t v62 = "Failed cloning SAUIAddViews for filtering.";
LABEL_52:
    _os_log_impl(&dword_0, v14, v60, v62, v61, 2u);
    swift_slowDealloc(v61, -1LL, -1LL);
LABEL_53:

LABEL_54:
    goto LABEL_55;
  }

  uint64_t v41 = *(void **)(v0 + 64);
  sub_38BF8();
  id result = [v41 views];
  if (result)
  {
    id v43 = result;
    uint64_t v44 = sub_18BE0(0LL, &qword_5BCA8, &OBJC_CLASS___SAAceView_ptr);
    uint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, v44);

    if ((unint64_t)v45 >> 62)
    {
      if (v45 < 0) {
        uint64_t v72 = v45;
      }
      else {
        uint64_t v72 = v45 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v45);
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease(v45);
    }

    else
    {
      uint64_t v46 = *(void *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFF8LL));
    }

    swift_bridgeObjectRelease(v45);
    if (v46)
    {
      if (qword_59DD8 != -1) {
        swift_once(&qword_59DD8, sub_34328);
      }
      uint64_t v47 = type metadata accessor for Logger(0LL);
      uint64_t v48 = sub_72B4(v47, (uint64_t)qword_5D478);
      uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
      os_log_type_t v50 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v51 = 0;
        _os_log_impl( &dword_0,  v49,  v50,  "Returning a recent dialog for replaying filtered down to visuals only.",  v51,  2u);
        swift_slowDealloc(v51, -1LL, -1LL);
      }

      uint64_t v52 = RecentDialog.copy(withAddViews:)(v41);
      goto LABEL_56;
    }

    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v66 = type metadata accessor for Logger(0LL);
    uint64_t v67 = sub_72B4(v66, (uint64_t)qword_5D478);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v70 = 0;
      _os_log_impl(&dword_0, v68, v69, "The recent dialog contained no visuals.", v70, 2u);
      swift_slowDealloc(v70, -1LL, -1LL);
    }

LABEL_55:
    uint64_t v52 = 0LL;
LABEL_56:
    uint64_t v65 = *(void *)(v0 + 104);
    swift_task_dealloc(*(void *)(v0 + 112));
    swift_task_dealloc(v65);
    return (id)(*(uint64_t (**)(uint64_t))(v0 + 8))(v52);
  }

  __break(1u);
  return result;
}

void sub_38BF8()
{
  uint64_t v1 = v0;
  p_base_meths = &DefaultCatExecutor.base_meths;
  id v3 = [v0 views];
  if (!v3) {
    goto LABEL_51;
  }
  uint64_t v4 = v3;
  uint64_t v5 = sub_18BE0(0LL, &qword_5BCA8, &OBJC_CLASS___SAAceView_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  id v7 = _swiftEmptyArrayStorage;
  uint64_t v49 = _swiftEmptyArrayStorage;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0) {
      uint64_t v31 = v6;
    }
    else {
      uint64_t v31 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v6);
    if (v8) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v8 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8LL));
    if (v8)
    {
LABEL_4:
      if (v8 >= 1)
      {
        uint64_t v45 = v5;
        uint64_t v9 = 0LL;
        uint64_t v10 = SAAceViewUIItemTypeItemTypeAnnouncementValue;
        while (1)
        {
          id v11 = (v6 & 0xC000000000000001LL) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6)
              : *(id *)(v6 + 8 * v9 + 32);
          uint64_t v12 = v11;
          uint64_t v13 = objc_opt_self(&OBJC_CLASS___SAUISnippet);
          uint64_t v14 = swift_dynamicCastObjCClass(v12, v13);
          if (v14) {
            break;
          }

LABEL_7:
          if (v8 == ++v9)
          {
            swift_bridgeObjectRelease(v6);
            uint64_t v30 = v49;
            uint64_t v5 = v45;
            id v7 = _swiftEmptyArrayStorage;
            p_base_meths = (__objc2_meth_list **)(&DefaultCatExecutor + 32);
            goto LABEL_31;
          }
        }

        os_log_type_t v15 = (void *)v14;
        id v16 = v12;
        id v17 = [v15 itemType];
        if (v17)
        {
          uint64_t v18 = v17;
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          uint64_t v21 = v20;

          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          uint64_t v24 = v23;
          if (v21)
          {
            if (v19 == v22 && v21 == v23)
            {
              swift_bridgeObjectRelease_n(v21, 2LL);

LABEL_24:
              goto LABEL_7;
            }

            char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0LL);
            swift_bridgeObjectRelease(v21);
            swift_bridgeObjectRelease(v24);

            if ((v26 & 1) != 0) {
              goto LABEL_24;
            }
            goto LABEL_22;
          }
        }

        else
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          uint64_t v24 = v27;
        }

        swift_bridgeObjectRelease(v24);

LABEL_22:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v28 = v49[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
        uint64_t v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v16);
        specialized ContiguousArray._endMutation()(v29);
        goto LABEL_7;
      }

      __break(1u);
      goto LABEL_50;
    }
  }

  swift_bridgeObjectRelease(v6);
  uint64_t v30 = _swiftEmptyArrayStorage;
LABEL_31:
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v30);
  uint64_t v33 = &DefaultCatExecutor.base_meths;
  [v1 setViews:isa];

  id v34 = objc_msgSend(v1, (SEL)p_base_meths[370]);
  if (!v34) {
    goto LABEL_52;
  }
  uint64_t v35 = v34;
  uint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v5);

  uint64_t v37 = *(void *)((char *)&dword_10 + (v36 & 0xFFFFFFFFFFFFF8LL));
  if (v37)
  {
    while (1)
    {
      uint64_t v49 = v7;
      specialized ContiguousArray.reserveCapacity(_:)(v37);
      if (v37 < 0) {
        break;
      }
      id v7 = (void *)v5;
      uint64_t v38 = v1;
      uint64_t v5 = 0LL;
      uint64_t v1 = (void *)(v36 & 0xC000000000000001LL);
      while (v37 != v5)
      {
        if (v1) {
          id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v36);
        }
        else {
          id v39 = *(id *)(v36 + 8 * v5 + 32);
        }
        uint64_t v40 = v39;
        uint64_t v47 = v39;
        sub_3ACE0(&v47, &v48);

        ++v5;
        uint64_t v33 = v48;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v41 = v49[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
        uint64_t v42 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v33);
        specialized ContiguousArray._endMutation()(v42);
        if (v37 == v5)
        {
          id v43 = v49;
          swift_bridgeObjectRelease(v36);
          uint64_t v1 = v38;
          uint64_t v33 = (__objc2_meth_list **)(&DefaultCatExecutor + 32);
          goto LABEL_48;
        }
      }

      __break(1u);
LABEL_43:
      if (v36 < 0) {
        uint64_t v44 = v36;
      }
      else {
        uint64_t v44 = v36 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v36);
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter(v44);
      swift_bridgeObjectRelease(v36);
      if (!v37) {
        goto LABEL_47;
      }
    }

LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    swift_release(v49);
    __break(1u);
    return;
  }

LABEL_47:
  swift_bridgeObjectRelease(v36);
  id v43 = _swiftEmptyArrayStorage;
LABEL_48:
  Class v46 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v43);
  objc_msgSend(v1, (SEL)v33[371], v46);
}

uint64_t sub_39038(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_39050, 0LL, 0LL);
}

uint64_t sub_39050()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 24) + 136LL);
  *(void *)(v0 + 3sub_6CEC(v0 + 2) = v1;
  switch((unint64_t)v1)
  {
    case 0uLL:
      uint64_t v2 = (void *)swift_task_alloc(dword_5BB64);
      *(void *)(v0 + 4sub_6CEC((void *)v0 + 8) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_3933C;
      uint64_t v3 = *(void *)(v0 + 16);
      uint64_t v4 = "RepeatRecentDialog#silentDismissal";
      goto LABEL_8;
    case 1uLL:
      id v7 = (void *)swift_task_alloc(dword_5BB64);
      *(void *)(v0 + 56) = v7;
      *id v7 = v0;
      v7[1] = sub_39384;
      uint64_t v3 = *(void *)(v0 + 16);
      uint64_t v8 = 0xD000000000000027LL;
      uint64_t v9 = "RepeatRecentDialog#acknowledgeDismissal";
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = (void *)swift_task_alloc(dword_5BB64);
      *(void *)(v0 + 7sub_6CEC(v0 + 2) = v10;
      *uint64_t v10 = v0;
      v10[1] = sub_39414;
      uint64_t v3 = *(void *)(v0 + 16);
      uint64_t v8 = 0xD000000000000020LL;
      uint64_t v9 = "RepeatRecentDialog#couldntGoBack";
LABEL_6:
      unint64_t v11 = (unint64_t)(v9 - 32) | 0x8000000000000000LL;
      goto LABEL_9;
    case 3uLL:
      uint64_t v12 = (void *)swift_task_alloc(dword_5BB64);
      *(void *)(v0 + 64) = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_393CC;
      uint64_t v3 = *(void *)(v0 + 16);
      uint64_t v4 = "RepeatRecentDialog#nothingToRepeat";
LABEL_8:
      unint64_t v11 = (unint64_t)(v4 - 32) | 0x8000000000000000LL;
      uint64_t v8 = 0xD000000000000022LL;
LABEL_9:
      uint64_t result = sub_39DB0(v3, v8, v11);
      break;
    case 4uLL:
      if (qword_59DD8 != -1) {
        swift_once(&qword_59DD8, sub_34328);
      }
      uint64_t v13 = type metadata accessor for Logger(0LL);
      uint64_t v14 = sub_72B4(v13, (uint64_t)qword_5D478);
      os_log_type_t v15 = (os_log_s *)Logger.logObject.getter(v14);
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        id v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v17 = 0;
        swift_slowDealloc(v17, -1LL, -1LL);
      }

      static ExecuteResponse.complete()(v18);
      uint64_t result = (*(uint64_t (**)(void))(v0 + 8))();
      break;
    default:
      sub_3B008(v1);
      uint64_t v5 = (void *)swift_task_alloc(dword_5BB5C);
      *(void *)(v0 + 40) = v5;
      void *v5 = v0;
      v5[1] = sub_392B8;
      uint64_t result = sub_3993C(*(void *)(v0 + 16), (uint64_t)v1);
      break;
  }

  return result;
}

uint64_t sub_392B8()
{
  return swift_task_switch(sub_3930C, 0LL, 0LL);
}

uint64_t sub_3930C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3933C()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_39384()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 56));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_393CC()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_39414()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 72));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

BOOL sub_3945C()
{
  uint64_t v1 = type metadata accessor for ResponseMode(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v57 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_72E4(&qword_5BC88);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v60 = (uint64_t)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v9);
  unint64_t v11 = (char *)&v55 - v10;
  uint64_t v12 = sub_72E4(&qword_5BC90);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v56 = (uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v23 = (char *)&v55 - v22;
  uint64_t v25 = __chkstk_darwin(v21, v24);
  uint64_t v27 = (char *)&v55 - v26;
  __chkstk_darwin(v25, v28);
  uint64_t v30 = (char *)&v55 - v29;
  uint64_t v32 = *(void (**)(uint64_t))(v0 + 144);
  uint64_t v31 = *(void *)(v0 + 152);
  uint64_t v33 = swift_retain(v31);
  v32(v33);
  uint64_t v34 = swift_release(v31);
  static ResponseMode.voiceForward.getter(v34);
  uint64_t v58 = *(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56);
  v58(v27, 0LL, 1LL, v1);
  uint64_t v59 = v5;
  uint64_t v35 = (uint64_t)&v11[*(int *)(v5 + 48)];
  sub_3AF78((uint64_t)v27, (uint64_t)v11);
  sub_3AF78((uint64_t)v30, v35);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v36((uint64_t)v11, 1LL, v1) == 1)
  {
    sub_73D8((uint64_t)v27, &qword_5BC90);
    if (v36(v35, 1LL, v1) == 1)
    {
      sub_73D8((uint64_t)v11, &qword_5BC90);
LABEL_14:
      uint64_t v40 = (uint64_t)v30;
      goto LABEL_15;
    }

    goto LABEL_6;
  }

  sub_3AF78((uint64_t)v11, (uint64_t)v23);
  if (v36(v35, 1LL, v1) == 1)
  {
    sub_73D8((uint64_t)v27, &qword_5BC90);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v23, v1);
LABEL_6:
    uint64_t v37 = sub_73D8((uint64_t)v11, &qword_5BC88);
    goto LABEL_7;
  }

  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 32);
  uint64_t v55 = v2;
  id v43 = v57;
  v42(v57, v35, v1);
  uint64_t v44 = sub_285EC( &qword_5BC98,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ResponseMode,  (uint64_t)&protocol conformance descriptor for ResponseMode);
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v43, v1, v44);
  Class v46 = *(void (**)(char *, uint64_t))(v55 + 8);
  uint64_t v47 = v43;
  uint64_t v2 = v55;
  v46(v47, v1);
  sub_73D8((uint64_t)v27, &qword_5BC90);
  v46(v23, v1);
  uint64_t v37 = sub_73D8((uint64_t)v11, &qword_5BC90);
  if ((v45 & 1) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  static ResponseMode.voiceOnly.getter(v37);
  v58(v19, 0LL, 1LL, v1);
  uint64_t v38 = v60;
  uint64_t v39 = v60 + *(int *)(v59 + 48);
  sub_3AF78((uint64_t)v19, v60);
  sub_3AFC0((uint64_t)v30, v39);
  if (v36(v38, 1LL, v1) == 1)
  {
    sub_73D8((uint64_t)v19, &qword_5BC90);
    if (v36(v39, 1LL, v1) == 1)
    {
      uint64_t v40 = v38;
LABEL_15:
      sub_73D8(v40, &qword_5BC90);
      return 0LL;
    }

    goto LABEL_12;
  }

  uint64_t v41 = v56;
  sub_3AF78(v38, v56);
  if (v36(v39, 1LL, v1) == 1)
  {
    sub_73D8((uint64_t)v19, &qword_5BC90);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v41, v1);
LABEL_12:
    sub_73D8(v38, &qword_5BC88);
    return 1LL;
  }

  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 32);
  uint64_t v50 = v2;
  uint64_t v51 = v57;
  v49(v57, v39, v1);
  uint64_t v52 = sub_285EC( &qword_5BC98,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ResponseMode,  (uint64_t)&protocol conformance descriptor for ResponseMode);
  char v53 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v51, v1, v52);
  uint64_t v54 = *(void (**)(char *, uint64_t))(v50 + 8);
  v54(v51, v1);
  sub_73D8((uint64_t)v19, &qword_5BC90);
  v54((char *)v41, v1);
  sub_73D8(v38, &qword_5BC90);
  return (v53 & 1) == 0;
}

uint64_t sub_3993C(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  void v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = sub_72E4((uint64_t *)&unk_5A5A0);
  v3[10] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for AceOutput(0LL);
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[12] = v6;
  v3[13] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NLContextUpdate(0LL);
  v3[14] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[15] = v8;
  v3[16] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_399EC, 0LL, 0LL);
}

uint64_t sub_399EC()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "Re-rendering a recent dialog", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[15];
  uint64_t v7 = v0[16];
  uint64_t v8 = v0[14];
  uint64_t v23 = v0[13];
  uint64_t v9 = v0[11];
  uint64_t v24 = v0[12];
  uint64_t v10 = (void *)v0[9];
  uint64_t v11 = v0[10];

  uint64_t v13 = NLContextUpdate.init()(v12);
  uint64_t v14 = RecentDialog.requestId.getter(v13);
  NLContextUpdate.restoreSessionForRequestId.setter(v14);
  uint64_t v15 = sub_72E4((uint64_t *)&unk_5A860);
  uint64_t v16 = swift_allocObject(v15, 40LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_47B90;
  uint64_t v17 = RecentDialog.addViews.getter();
  *(void *)(v16 + 3sub_6CEC(v0 + 2) = v17;
  specialized Array._endMutation()(v17);
  uint64_t v26 = 0LL;
  memset(v25, 0, sizeof(v25));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v11, v7, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v11, 0LL, 1LL, v8);
  AceOutput.init(commands:flowActivity:nlContextUpdate:)(v16, v25, v11);
  uint64_t v18 = v10[10];
  uint64_t v19 = v10[11];
  sub_73B4(v10 + 7, v18);
  v0[5] = v9;
  v0[6] = &protocol witness table for AceOutput;
  uint64_t v20 = sub_8390(v0 + 2);
  (*(void (**)(void *, uint64_t, uint64_t))(v24 + 16))(v20, v23, v9);
  uint64_t v21 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v0[17] = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_39C18;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 2, v18, v19);
}

uint64_t sub_39C18()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 136));
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v3 = sub_39D18;
  }

  else
  {
    sub_6CEC((void *)(v2 + 16));
    uint64_t v3 = sub_39C88;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_39C88()
{
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);
  static ExecuteResponse.complete()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_39D18()
{
  uint64_t v1 = sub_6CEC((void *)(v0 + 16));
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 80);
  static ExecuteResponse.complete()(v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_39DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[36] = a3;
  v4[37] = v3;
  v4[34] = a1;
  v4[35] = a2;
  uint64_t v5 = sub_72E4((uint64_t *)&unk_5A5A0);
  v4[38] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AceOutput(0LL);
  v4[39] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[40] = v7;
  v4[41] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v4[42] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[43] = v9;
  v4[44] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TemplatingResult(0LL);
  v4[45] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[46] = v11;
  v4[47] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_39E88, 0LL, 0LL);
}

uint64_t sub_39E88()
{
  unint64_t v1 = sub_2C6F8((uint64_t)_swiftEmptyArrayStorage);
  v0[48] = v1;
  uint64_t v2 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v2, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  strcpy((char *)(inited + 32), "responseMode");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 7sub_6CEC(v0 + 2) = &type metadata for String;
  *(void *)(inited + 4sub_6CEC((void *)v0 + 8) = 0LL;
  *(void *)(inited + 56) = 0xE000000000000000LL;
  unint64_t v4 = sub_2C5C4(inited);
  v0[49] = v4;
  uint64_t v5 = (uint64_t **)swift_task_alloc(dword_5B25C);
  v0[50] = (uint64_t)v5;
  uint8_t *v5 = v0;
  v5[1] = (uint64_t *)sub_39F74;
  return sub_29084(v0[35], v0[36], v1, v4);
}

uint64_t sub_39F74(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 392LL);
  uint64_t v3 = *(void *)(*(void *)v2 + 400LL);
  uint64_t v5 = *(void *)(*(void *)v2 + 384LL);
  *(void *)(*(void *)v2 + 408LL) = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v6 = sub_3A448;
  }

  else
  {
    uint64_t v6 = sub_3A004;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_3A004()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_72B4(v2, (uint64_t)qword_5D478);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = *(void *)(v0 + 288);
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 280);
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(void *)(v0 + 264) = sub_24BA0(v8, v7, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl(&dword_0, v4, v5, "Executing dialog %s and dismissing Siri", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 288), 2LL);
  }

  uint64_t v11 = *(void **)(v0 + 408);
  uint64_t v35 = *(void *)(v0 + 376);
  uint64_t v13 = *(void *)(v0 + 344);
  uint64_t v12 = *(void *)(v0 + 352);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v40 = *(void *)(v0 + 320);
  uint64_t v36 = *(void *)(v0 + 304);
  uint64_t v37 = *(void *)(v0 + 328);
  uint64_t v15 = *(void *)(v0 + 288);
  uint64_t v38 = *(void **)(v0 + 296);
  uint64_t v39 = *(void *)(v0 + 312);
  uint64_t v16 = *(void *)(v0 + 280);
  swift_bridgeObjectRetain(v15);
  id v17 = [v11 speak];
  uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String);

  id v19 = [v11 print];
  uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String);

  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))( v12,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v14);
  uint64_t v21 = TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:)(v16, v15, v18, v20, v12);
  uint64_t v22 = static Device.current.getter(v21);
  static Device.current.getter(v22);
  uint64_t v23 = *(void *)(v0 + 120);
  uint64_t v24 = *(void *)(v0 + 128);
  sub_73B4((void *)(v0 + 96), v23);
  LOBYTE(v14) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v23, v24);
  uint64_t v25 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v36, 1LL, 1LL, v25);
  uint64_t v26 = sub_72E4((uint64_t *)&unk_5A860);
  uint64_t v27 = swift_allocObject(v26, 40LL, 7LL);
  *(_OWORD *)(v27 + 16) = xmmword_47B90;
  id v28 = [objc_allocWithZone(SAUICloseAssistant) init];
  *(void *)(v27 + 3sub_6CEC(v0 + 2) = v28;
  uint64_t v41 = v27;
  specialized Array._endMutation()(v28);
  uint64_t v29 = v41;
  *(void *)(v0 + 20sub_6CEC((void *)v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 19sub_6CEC(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v35,  v0 + 136,  v14 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v36,  v29,  v0 + 176);
  swift_bridgeObjectRelease(v29);
  sub_73D8(v0 + 176, (uint64_t *)&unk_5C140);
  sub_73D8(v36, (uint64_t *)&unk_5A5A0);
  sub_6CEC((void *)(v0 + 136));
  sub_6CEC((void *)(v0 + 96));
  uint64_t v30 = v38[10];
  uint64_t v31 = v38[11];
  sub_73B4(v38 + 7, v30);
  *(void *)(v0 + 240) = v39;
  *(void *)(v0 + 24sub_6CEC((void *)v0 + 8) = &protocol witness table for AceOutput;
  uint64_t v32 = sub_8390((void *)(v0 + 216));
  (*(void (**)(void *, uint64_t, uint64_t))(v40 + 16))(v32, v37, v39);
  uint64_t v33 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 416) = v33;
  *uint64_t v33 = v0;
  v33[1] = sub_3A62C;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 216, v30, v31);
}

uint64_t sub_3A448()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_72B4(v2, (uint64_t)qword_5D478);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = *(void *)(v0 + 288);
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 280);
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(void *)(v0 + 256) = sub_24BA0(v8, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl(&dword_0, v4, v5, "Couldn't create a dialog %s.", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 288), 2LL);
  }

  static ExecuteResponse.complete()(v11);
  uint64_t v12 = *(void *)(v0 + 352);
  uint64_t v13 = *(void *)(v0 + 328);
  uint64_t v14 = *(void *)(v0 + 304);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3A62C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 416));
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v3 = sub_3A748;
  }

  else
  {
    sub_6CEC((void *)(v2 + 216));
    uint64_t v3 = sub_3A69C;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_3A69C()
{
  uint64_t v1 = *(void **)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v7 = *(void *)(v0 + 312);
  static ExecuteResponse.complete()();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v8 = *(void *)(v0 + 352);
  uint64_t v9 = *(void *)(v0 + 328);
  uint64_t v10 = *(void *)(v0 + 304);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3A748()
{
  uint64_t v1 = sub_6CEC((void *)(v0 + 216));
  uint64_t v2 = *(void **)(v0 + 408);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 360);
  uint64_t v7 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 328);
  uint64_t v8 = *(void *)(v0 + 312);
  static ExecuteResponse.complete()(v1);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v9 = *(void *)(v0 + 352);
  uint64_t v10 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 304);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3A7FC()
{
  return swift_deallocClassInstance(v0, 160LL, 7LL);
}

uint64_t type metadata accessor for RepeatRecentDialogFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin22RepeatRecentDialogFlow);
}

void *initializeBufferWithCopyOfBuffer for RepeatRecentDialogFlow.Action(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for RepeatRecentDialogFlow.Action(void **a1)
{
  uint64_t v1 = *a1;
}

void **assignWithCopy for RepeatRecentDialogFlow.Action(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }

LABEL_7:
    *a1 = v4;
    return a1;
  }

  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }

  *a1 = v4;
  id v5 = v4;

  return a1;
}

void *initializeWithTake for RepeatRecentDialogFlow.Action(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for RepeatRecentDialogFlow.Action(void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }

  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for RepeatRecentDialogFlow.Action(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RepeatRecentDialogFlow.Action( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)uint64_t result = 0LL;
    *(_DWORD *)uint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + sub_6CEC((void *)v0 + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + sub_6CEC((void *)v0 + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 3;
    }
  }

  return result;
}

uint64_t sub_3AA40(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_3AA58(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RepeatRecentDialogFlow.Action()
{
  return &type metadata for RepeatRecentDialogFlow.Action;
}

uint64_t sub_3AA88()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_72B4(v0, (uint64_t)qword_5D478);
  unsigned int v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unsigned int v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unsigned int v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "Non-async on(input:) is not supported in RepeatRecentDialogFlow.", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return 0LL;
}

uint64_t sub_3AB58(uint64_t a1)
{
  os_log_type_t v3 = (void *)swift_task_alloc(dword_5BB44);
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = sub_7140;
  return sub_37B78(a1);
}

uint64_t sub_3ABA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for RepeatRecentDialogFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_3AC00(uint64_t a1)
{
  uint64_t v4 = *v1;
  unsigned int v5 = (void *)swift_task_alloc(dword_5BB54);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_7240;
  void v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_39050, 0LL, 0LL);
}

uint64_t sub_3AC64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for RepeatRecentDialogFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_3AC88(uint64_t a1, uint64_t a2)
{
  return sub_285EC( &qword_5B220,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for RepeatRecentDialogFlow,  (uint64_t)&unk_486F0);
}

uint64_t sub_3ACB4(uint64_t a1, uint64_t a2)
{
  return sub_285EC( &qword_5BC80,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for RepeatRecentDialogFlow,  (uint64_t)&unk_48748);
}

void sub_3ACE0(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = objc_opt_self(&OBJC_CLASS___SAUISnippet);
  uint64_t v5 = swift_dynamicCastObjCClass(v3, v4);
  if (v5)
  {
    id v6 = (void *)v5;
    id v7 = v3;
    id v8 = [v6 dialog];
    if (v8)
    {
      uint64_t v9 = v8;
      id v10 = [v8 content];
      if (v10)
      {
        uint64_t v11 = v10;
        id v12 = [v6 copy];
        _bridgeAnyObjectToAny(_:)(v24);
        swift_unknownObjectRelease(v12);
        uint64_t v13 = sub_18BE0(0LL, &qword_5BCB0, &OBJC_CLASS___SAUISnippet_ptr);
        if ((swift_dynamicCast(&v25, v24, (char *)&type metadata for Any + 8, v13, 6LL) & 1) != 0)
        {
          uint64_t v23 = v25;
          id v14 = [v9 copy];
          _bridgeAnyObjectToAny(_:)(v24);
          swift_unknownObjectRelease(v14);
          uint64_t v15 = sub_18BE0(0LL, &qword_5BCB8, &OBJC_CLASS___SADialog_ptr);
          if ((swift_dynamicCast(&v25, v24, (char *)&type metadata for Any + 8, v15, 6LL) & 1) != 0)
          {
            uint64_t v16 = v25;
            id v17 = [v11 copy];
            _bridgeAnyObjectToAny(_:)(v24);
            swift_unknownObjectRelease(v17);
            uint64_t v18 = sub_18BE0(0LL, &qword_5BCC0, &OBJC_CLASS___SADialogText_ptr);
            if ((swift_dynamicCast(&v25, v24, (char *)&type metadata for Any + 8, v18, 6LL) & 1) != 0)
            {
              id v19 = v25;
              NSString v20 = String._bridgeToObjectiveC()();
              [v19 setSpeakableTextOverride:v20];

              [v16 setContent:v19];
              id v21 = v23;
              [v21 setDialog:v16];

              *a2 = v21;
              return;
            }
          }

          else
          {
          }
        }

        else
        {
        }
      }

      else
      {
      }
    }

    *a2 = v6;
  }

  else
  {
    *a2 = v3;
    id v22 = v3;
  }

uint64_t sub_3AF78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5BC90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_3AFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5BC90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

id sub_3B008(id result)
{
  return result;
}

void sub_3B018(id a1)
{
  if (a1 != &dword_4) {
    sub_3B028(a1);
  }
}

void sub_3B028(id a1)
{
}

uint64_t sub_3B03C(uint64_t a1)
{
  uint64_t v88 = a1;
  uint64_t v78 = type metadata accessor for UsoEntity_common_Interjection.DefinedValues(0LL);
  uint64_t v81 = *(void *)(v78 - 8);
  __chkstk_darwin(v78, v1);
  uint64_t v77 = (char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = sub_72E4(&qword_5BCC8);
  __chkstk_darwin(v79, v3);
  uint64_t v82 = (uint64_t)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_72E4(&qword_5BCD0);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v84 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v80 = (uint64_t)&v75 - v11;
  __chkstk_darwin(v10, v12);
  uint64_t v83 = (uint64_t)&v75 - v13;
  uint64_t v14 = sub_72E4(&qword_5AD30);
  __chkstk_darwin(v14, v15);
  id v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v86 = v18;
  uint64_t v87 = v19;
  __chkstk_darwin(v18, v20);
  uint64_t v85 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for Parse(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (char *)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for USOParse(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v34);
  uint64_t v36 = (char *)&v75 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, v88, v27);
  if ((*(unsigned int (**)(char *, uint64_t))(v28 + 88))(v31, v27) != enum case for Parse.uso(_:))
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    return 3LL;
  }

  (*(void (**)(char *, uint64_t))(v28 + 96))(v31, v27);
  uint64_t v37 = v33;
  uint64_t v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v36, v31, v32);
  uint64_t v39 = USOParse.userParse.getter(v38);
  uint64_t v40 = Siri_Nlu_External_UserParse.userDialogActs.getter(v39);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  uint64_t v41 = v32;
  uint64_t v42 = v36;
  if (*(void *)(v40 + 16))
  {
    uint64_t v43 = v86;
    uint64_t v44 = v87;
    (*(void (**)(char *, unint64_t, uint64_t))(v87 + 16))( v17,  v40 + ((*(unsigned __int8 *)(v87 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80)),  v86);
    uint64_t v45 = 0LL;
    uint64_t v46 = (uint64_t)v84;
    uint64_t v47 = v85;
  }

  else
  {
    uint64_t v45 = 1LL;
    uint64_t v47 = v85;
    uint64_t v43 = v86;
    uint64_t v46 = (uint64_t)v84;
    uint64_t v44 = v87;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v17, v45, 1LL, v43);
  swift_bridgeObjectRelease(v40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v17, 1LL, v43) == 1)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v42, v41);
    uint64_t v48 = &qword_5AD30;
    uint64_t v49 = v17;
LABEL_8:
    sub_73D8((uint64_t)v49, v48);
    return 3LL;
  }

  uint64_t v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v44 + 32))(v47, v17, v43);
  if ((Siri_Nlu_External_UserDialogAct.hasWantedToRepeat.getter(v51) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v42, v41);
    return 0LL;
  }

  uint64_t result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v47);
  uint64_t v52 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0) {
      uint64_t v74 = result;
    }
    else {
      uint64_t v74 = result & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(result);
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v74);
    uint64_t result = swift_bridgeObjectRelease(v52);
    uint64_t v54 = v37;
    if (!v53)
    {
LABEL_17:
      swift_bridgeObjectRelease(v52);
      static UsoTask_CodegenConverter.convert(task:)(&v92, v53);
      swift_release(v53);
      if (!v93)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v41);
        uint64_t v48 = &qword_5AD48;
        uint64_t v49 = (char *)&v92;
        goto LABEL_8;
      }

      sub_22E38(&v92, v94);
      sub_25914((uint64_t)v94, (uint64_t)&v92);
      uint64_t v55 = type metadata accessor for UsoTask_repeat_uso_NoEntity(0LL);
      if (swift_dynamicCast(v90, &v92, (char *)&type metadata for Any + 8, v55, 0LL))
      {
        sub_6CEC(v94);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v41);
        swift_release(v90[0]);
        sub_6CEC(&v92);
        return 0LL;
      }

      uint64_t v56 = type metadata accessor for UsoTask_skipBackward_uso_NoEntity(0LL);
      if (swift_dynamicCast(v90, &v92, (char *)&type metadata for Any + 8, v56, 0LL))
      {
        sub_6CEC(v94);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v41);
        swift_release(v90[0]);
        sub_6CEC(&v92);
        return 1LL;
      }

      uint64_t v57 = type metadata accessor for UsoTask_noVerb_common_Interjection(0LL);
      if (swift_dynamicCast(&v91, &v92, (char *)&type metadata for Any + 8, v57, 0LL)
        && (swift_release(v91),
            sub_25914((uint64_t)v94, (uint64_t)v90),
            swift_dynamicCast(&v89, v90, (char *)&type metadata for Any + 8, v57, 6LL)))
      {
        uint64_t v58 = v89;
        uint64_t v59 = swift_retain(v89);
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(v90, v59);
        uint64_t v88 = v58;
        uint64_t v60 = swift_release(v58);
        uint64_t v61 = v90[0];
        uint64_t v76 = v42;
        if (v90[0])
        {
          dispatch thunk of UsoEntity_common_Interjection.definedValue.getter(v60);
          swift_release(v61);
          uint64_t v62 = v78;
          uint64_t v63 = v82;
          uint64_t v64 = v81;
        }

        else
        {
          uint64_t v64 = v81;
          uint64_t v62 = v78;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v83, 1LL, 1LL, v78);
          uint64_t v63 = v82;
        }

        uint64_t v65 = v80;
        (*(void (**)(uint64_t, void, uint64_t))(v64 + 104))( v80,  enum case for UsoEntity_common_Interjection.DefinedValues.common_Interjection_IndirectDismissal(_:),  v62);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v65, 0LL, 1LL, v62);
        uint64_t v66 = v63 + *(int *)(v79 + 48);
        sub_3BA10(v83, v63);
        uint64_t v86 = v66;
        sub_3BA10(v65, v66);
        uint64_t v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
        if (v67(v63, 1LL, v62) == 1)
        {
          swift_release(v88);
          sub_73D8(v65, &qword_5BCD0);
          sub_73D8(v83, &qword_5BCD0);
          sub_6CEC(v94);
          (*(void (**)(char *, uint64_t))(v87 + 8))(v47, v43);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v76, v41);
          if (v67(v86, 1LL, v62) == 1)
          {
            sub_73D8(v82, &qword_5BCD0);
LABEL_37:
            sub_6CEC(&v92);
            return 2LL;
          }

          goto LABEL_35;
        }

        sub_3BA10(v63, v46);
        uint64_t v68 = v86;
        if (v67(v86, 1LL, v62) == 1)
        {
          swift_release(v88);
          sub_73D8(v80, &qword_5BCD0);
          sub_73D8(v83, &qword_5BCD0);
          sub_6CEC(v94);
          (*(void (**)(char *, uint64_t))(v87 + 8))(v47, v43);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v76, v41);
          (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v46, v62);
LABEL_35:
          sub_73D8(v82, &qword_5BCC8);
          goto LABEL_28;
        }

        uint64_t v69 = v46;
        uint64_t v70 = v77;
        (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v77, v68, v62);
        unint64_t v71 = sub_3BA58();
        uint64_t v72 = v69;
        LODWORD(v86) = dispatch thunk of static Equatable.== infix(_:_:)(v69, v70, v62, v71);
        swift_release(v88);
        uint64_t v73 = *(void (**)(char *, uint64_t))(v81 + 8);
        v73(v70, v62);
        sub_73D8(v80, &qword_5BCD0);
        sub_73D8(v83, &qword_5BCD0);
        sub_6CEC(v94);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v47, v43);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v76, v41);
        v73((char *)v72, v62);
        sub_73D8(v63, &qword_5BCD0);
        if ((v86 & 1) != 0) {
          goto LABEL_37;
        }
      }

      else
      {
        sub_6CEC(v94);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v41);
      }

uint64_t sub_3BA10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5BCD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_3BA58()
{
  unint64_t result = qword_5BCD8;
  if (!qword_5BCD8)
  {
    uint64_t v1 = type metadata accessor for UsoEntity_common_Interjection.DefinedValues(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UsoEntity_common_Interjection.DefinedValues, v1);
    atomic_store(result, (unint64_t *)&qword_5BCD8);
  }

  return result;
}

uint64_t sub_3BAA0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v52 = a6;
  uint64_t v50 = a7;
  uint64_t v51 = a5;
  uint64_t v11 = sub_72E4(&qword_5A928);
  __chkstk_darwin(v11, v12);
  uint64_t v49 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = type metadata accessor for TemplatingText(0LL);
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v14);
  uint64_t v47 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for NLGVerbPhrase(0LL);
  uint64_t v63 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v46 - v22;
  uint64_t v24 = type metadata accessor for NLGDialogBuilder(0LL);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v25 = NLGDialogBuilder.init()();
  uint64_t v26 = dispatch thunk of NLGDialogBuilder.text(_:)(a1, a2);
  uint64_t v27 = swift_release(v25);
  dispatch thunk of NLGDialogBuilder.build()(v60, v27);
  swift_release(v26);
  NLGVerbPhrase.init(dialog:)(v60);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v28 = NLGDialogBuilder.init()();
  uint64_t v29 = dispatch thunk of NLGDialogBuilder.text(_:)(a3, a4);
  uint64_t v30 = swift_release(v28);
  dispatch thunk of NLGDialogBuilder.build()(v60, v30);
  swift_release(v29);
  NLGVerbPhrase.init(dialog:)(v60);
  static NLGDialogGenerators.alternativeQuestion(between:and:)(v60, v23, v20);
  uint64_t v31 = v61;
  uint64_t v32 = v62;
  sub_73B4(v60, v61);
  uint64_t v33 = v53;
  dispatch thunk of NLGDialogGenerator.generate()(v57, v31, v32);
  if (v33)
  {
    uint64_t v34 = *(void (**)(char *, uint64_t))(v63 + 8);
    v34(v20, v16);
    v34(v23, v16);
  }

  else
  {
    uint64_t v35 = v58;
    uint64_t v36 = v59;
    sub_73B4(v57, v58);
    uint64_t v37 = v52;
    swift_bridgeObjectRetain(v52);
    dispatch thunk of NLGDialog.content.getter(v54, v35, v36);
    uint64_t v38 = v55;
    uint64_t v39 = v56;
    sub_73B4(v54, v55);
    uint64_t v40 = dispatch thunk of NLGDialogContent.text.getter(v38, v39);
    uint64_t v41 = v47;
    TemplatingText.init(text:speakableTextOverride:)(v40, v42, 0LL, 0LL);
    sub_6CEC(v54);
    uint64_t v43 = v49;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v49, 1LL, 1LL, v48);
    TemplatingSection.init(id:content:caption:spokenOnly:)(v51, v37, v41, v43, 0LL);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v63 + 8);
    v44(v20, v16);
    v44(v23, v16);
    sub_6CEC(v57);
  }

  return sub_6CEC(v60);
}

ValueMetadata *type metadata accessor for SNLGTemplatingSectionGenerator()
{
  return &type metadata for SNLGTemplatingSectionGenerator;
}

void sub_3BDD4()
{
  qword_5D4A8 = 0x54746E6572727543LL;
  unk_5D4B0 = 0xEB000000006B7361LL;
}

uint64_t sub_3BE00()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_48950);
  uint64_t v2 = swift_getKeyPath(&unk_48978);
  uint64_t v4 = v0;
  swift_retain(v0);
  static SiriEnvironmentValue.subscript.getter(&v5, &v4, KeyPath, v2);
  swift_release(v0);
  swift_release(KeyPath);
  swift_release(v2);
  return v5;
}

void sub_3BE98()
{
  uint64_t v1 = type metadata accessor for RequestPositionInSession(0LL);
  v15[3] = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1, v2);
  v15[2] = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3, v5);
  uint64_t v6 = type metadata accessor for UniversalActionFeatureFlags(0LL);
  __chkstk_darwin(v6, v7);
  uint64_t v8 = type metadata accessor for Parse(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)(v0 + 176) = 2;
  Input.parse.getter(v11);
  char v14 = sub_3D834((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  __asm { BR              X11 }

uint64_t sub_3BFDC()
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v5 + 104))( v4,  enum case for UniversalActionFeatureFlags.cancelDefaultBehavior(_:),  v3);
  char v8 = ((uint64_t (*)(uint64_t))UniversalActionFeatureFlags.isEnabled.getter)(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  if ((v8 & 1) == 0) {
    return 0LL;
  }
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_72B4(v9, (uint64_t)qword_5D478);
  uint64_t v10 = swift_retain_n(v0, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v13 = 134217984;
    *(void *)(v6 - 120) = v13 + 4;
    sub_72E4(&qword_5B228);
    uint64_t KeyPath = swift_getKeyPath(&unk_48950);
    uint64_t v15 = swift_getKeyPath(&unk_48978);
    *(void *)(v6 - 96) = v0;
    swift_retain(v0);
    static SiriEnvironmentValue.subscript.getter((void *)(v6 - 88), v6 - 96, KeyPath, v15);
    swift_release(v0);
    swift_release(KeyPath);
    uint64_t v16 = swift_release(v15);
    uint64_t v17 = *(void *)(v6 - 88);
    ((void (*)(uint64_t))CurrentRequest.positionInSession.getter)(v16);
    uint64_t v18 = swift_release(v17);
    uint64_t v19 = ((uint64_t (*)(uint64_t))RequestPositionInSession.rawValue.getter)(v18);
    uint64_t v20 = *(void *)(v6 - 104);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v2, v1);
    swift_release(v0);
    *(void *)(v6 - 8sub_6CEC((void *)v0 + 8) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 88, v6 - 80, *(void *)(v6 - 120), v13 + 12);
    swift_release(v0);
    _os_log_impl(&dword_0, v11, v12, "UniversalAction currentRequest.positionInSession: %ld", v13, 0xCu);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v0, 2LL);
    uint64_t v20 = *(void *)(v6 - 104);
  }

  sub_72E4(&qword_5B228);
  uint64_t v22 = swift_getKeyPath(&unk_48950);
  uint64_t v23 = swift_getKeyPath(&unk_48978);
  *(void *)(v6 - 96) = v0;
  swift_retain(v0);
  static SiriEnvironmentValue.subscript.getter((void *)(v6 - 88), v6 - 96, v22, v23);
  swift_release(v0);
  swift_release(v22);
  uint64_t v24 = swift_release(v23);
  uint64_t v25 = *(void *)(v6 - 88);
  ((void (*)(uint64_t))CurrentRequest.positionInSession.getter)(v24);
  swift_release(v25);
  uint64_t v26 = *(void *)(v6 - 112);
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v26,  enum case for RequestPositionInSession.first(_:),  v1);
  uint64_t v27 = sub_285EC( &qword_5BE18,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for RequestPositionInSession,  (uint64_t)&protocol conformance descriptor for RequestPositionInSession);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of RawRepresentable.rawValue.getter)(v1, v27);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of RawRepresentable.rawValue.getter)(v1, v27);
  uint64_t v29 = *(void *)(v6 - 96);
  uint64_t v28 = *(void *)(v6 - 88);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v30(v26, v1);
  v30(v2, v1);
  if (v28 == v29) {
    char v31 = 0;
  }
  else {
    char v31 = 3;
  }
  *(_BYTE *)(v0 + 176) = v31;
  return 1LL;
}

uint64_t sub_3C314(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_3C32C, 0LL, 0LL);
}

uint64_t sub_3C32C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  int v2 = *(unsigned __int8 *)(v1 + 176);
  if (v2 == 2)
  {
    if (qword_59DD8 != -1) {
      swift_once(&qword_59DD8, sub_34328);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = sub_72B4(v13, (uint64_t)qword_5D478);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    static ExecuteResponse.complete()(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else if (v2 == 3)
  {
    uint64_t v20 = *(void *)(v1 + 160);
    uint64_t v21 = *(void *)(v1 + 168);
    sub_73B4((void *)(v1 + 136), v20);
    type metadata accessor for SiriKitEvent(0LL);
    if (qword_59DF0 != -1) {
      swift_once(&qword_59DF0, sub_3BDD4);
    }
    uint64_t v22 = qword_5D4A8;
    uint64_t v23 = unk_5D4B0;
    swift_bridgeObjectRetain(unk_5D4B0);
    uint64_t v24 = SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)(5LL, v22, v23, 93LL, nullsub_1, 0LL);
    dispatch thunk of SiriKitEventSending.send(_:)(v24, v20, v21);
    swift_release(v24);
    uint64_t v25 = sub_72E4((uint64_t *)&unk_5A860);
    uint64_t v26 = swift_allocObject(v25, 40LL, 7LL);
    *(_OWORD *)(v26 + 16) = xmmword_47B90;
    id v27 = [objc_allocWithZone(SAUIClearScreen) init];
    *(void *)(v26 + 3sub_6CEC(v0 + 2) = v27;
    specialized Array._endMutation()(v27);
    *(void *)(v0 + 96) = v26;
    uint64_t v28 = (void *)swift_task_alloc(dword_5BD14);
    *(void *)(v0 + 104) = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_3C994;
    return sub_3C9E4(*(void *)(v0 + 16), 0xD00000000000001CLL, 0x8000000000049E30LL, v26);
  }

  else
  {
    if (v2 == 4)
    {
      id v3 = [objc_allocWithZone(SAUIHideSiriOverlay) init];
      *(void *)(v0 + 40) = v3;
      uint64_t v4 = sub_72E4((uint64_t *)&unk_5A860);
      uint64_t v5 = swift_allocObject(v4, 40LL, 7LL);
      *(_OWORD *)(v5 + 16) = xmmword_47B90;
      *(void *)(v5 + 3sub_6CEC(v0 + 2) = v3;
      uint64_t v46 = v5;
      specialized Array._endMutation()(v5);
      uint64_t v6 = v46;
      *(void *)(v0 + 4sub_6CEC((void *)v0 + 8) = v46;
      uint64_t v7 = dword_5BD14;
      id v8 = v3;
      uint64_t v9 = (void *)swift_task_alloc(v7);
      *(void *)(v0 + 56) = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_3C820;
      uint64_t v10 = *(void *)(v0 + 16);
      uint64_t v11 = 0xD00000000000001ELL;
      os_log_type_t v12 = "UniversalActionDialog#thankYou";
    }

    else
    {
      id v29 = [objc_allocWithZone(SAUIHideSiriOverlay) init];
      *(void *)(v0 + 3sub_6CEC(v0 + 2) = v29;
      if ((v2 & 1) != 0)
      {
        uint64_t v41 = sub_72E4((uint64_t *)&unk_5A860);
        uint64_t v42 = swift_allocObject(v41, 40LL, 7LL);
        *(_OWORD *)(v42 + 16) = xmmword_47B90;
        *(void *)(v42 + 3sub_6CEC(v0 + 2) = v29;
        uint64_t v48 = v42;
        specialized Array._endMutation()(v42);
        uint64_t v6 = v48;
        *(void *)(v0 + 64) = v48;
        uint64_t v43 = dword_5BD14;
        id v44 = v29;
        uint64_t v45 = (void *)swift_task_alloc(v43);
        *(void *)(v0 + 7sub_6CEC(v0 + 2) = v45;
        *uint64_t v45 = v0;
        v45[1] = sub_3C8AC;
        uint64_t v10 = *(void *)(v0 + 16);
        uint64_t v11 = 0xD000000000000025LL;
        os_log_type_t v12 = "UniversalActionDialog#directDismissal";
      }

      else
      {
        uint64_t v30 = *(void **)(v0 + 24);
        uint64_t v31 = v30[20];
        uint64_t v32 = v30[21];
        sub_73B4(v30 + 17, v31);
        type metadata accessor for SiriKitEvent(0LL);
        if (qword_59DF0 != -1) {
          swift_once(&qword_59DF0, sub_3BDD4);
        }
        uint64_t v33 = qword_5D4A8;
        uint64_t v34 = unk_5D4B0;
        swift_bridgeObjectRetain(unk_5D4B0);
        uint64_t v35 = SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)(5LL, v33, v34, 93LL, nullsub_1, 0LL);
        dispatch thunk of SiriKitEventSending.send(_:)(v35, v31, v32);
        swift_release(v35);
        uint64_t v36 = sub_72E4((uint64_t *)&unk_5A860);
        uint64_t v37 = swift_allocObject(v36, 40LL, 7LL);
        *(_OWORD *)(v37 + 16) = xmmword_47B90;
        *(void *)(v37 + 3sub_6CEC(v0 + 2) = v29;
        uint64_t v47 = v37;
        specialized Array._endMutation()(v37);
        uint64_t v6 = v47;
        *(void *)(v0 + 80) = v47;
        uint64_t v38 = dword_5BD14;
        id v39 = v29;
        uint64_t v40 = (void *)swift_task_alloc(v38);
        *(void *)(v0 + 8sub_6CEC((void *)v0 + 8) = v40;
        *uint64_t v40 = v0;
        v40[1] = sub_3C938;
        uint64_t v10 = *(void *)(v0 + 16);
        uint64_t v11 = 0xD00000000000001DLL;
        os_log_type_t v12 = "UniversalActionDialog#dismiss";
      }
    }

    return sub_3C9E4(v10, v11, (unint64_t)(v12 - 32) | 0x8000000000000000LL, v6);
  }

uint64_t sub_3C820()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 56LL));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_3C87C, 0LL, 0LL);
}

uint64_t sub_3C87C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3C8AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 72LL));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_3C908, 0LL, 0LL);
}

uint64_t sub_3C908()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3C938()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 88LL));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_3D830, 0LL, 0LL);
}

uint64_t sub_3C994()
{
  uint64_t v1 = *(void *)(*v0 + 96);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 104));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_3C9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[41] = a4;
  v5[42] = v4;
  v5[39] = a2;
  v5[40] = a3;
  v5[38] = a1;
  uint64_t v6 = sub_72E4((uint64_t *)&unk_5A5A0);
  v5[43] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AceOutput(0LL);
  v5[44] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[45] = v8;
  v5[46] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v5[47] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[48] = v10;
  v5[49] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TemplatingResult(0LL);
  v5[50] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[51] = v12;
  v5[52] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_3CAC0, 0LL, 0LL);
}

uint64_t sub_3CAC0()
{
  unint64_t v1 = sub_2C6F8((uint64_t)_swiftEmptyArrayStorage);
  v0[53] = v1;
  uint64_t v2 = sub_72E4((uint64_t *)&unk_5A830);
  uint64_t inited = swift_initStackObject(v2, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_47AE0;
  strcpy((char *)(inited + 32), "responseMode");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 7sub_6CEC(v0 + 2) = &type metadata for String;
  *(void *)(inited + 4sub_6CEC((void *)v0 + 8) = 0LL;
  *(void *)(inited + 56) = 0xE000000000000000LL;
  unint64_t v4 = sub_2C5C4(inited);
  v0[54] = v4;
  uint64_t v5 = (uint64_t **)swift_task_alloc(dword_5B25C);
  v0[55] = (uint64_t)v5;
  void *v5 = v0;
  v5[1] = (uint64_t *)sub_3CBAC;
  return sub_29084(v0[39], v0[40], v1, v4);
}

uint64_t sub_3CBAC(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 432LL);
  uint64_t v3 = *(void *)(*(void *)v2 + 440LL);
  uint64_t v5 = *(void *)(*(void *)v2 + 424LL);
  *(void *)(*(void *)v2 + 448LL) = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v6 = sub_3CF20;
  }

  else
  {
    uint64_t v6 = sub_3CC3C;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_3CC3C()
{
  uint64_t v1 = *(void **)(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v21 = *(void *)(v0 + 376);
  uint64_t v22 = *(void *)(v0 + 416);
  uint64_t v27 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v25 = *(void **)(v0 + 336);
  uint64_t v26 = *(void *)(v0 + 352);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v23 = *(void *)(v0 + 368);
  uint64_t v24 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 312);
  swift_bridgeObjectRetain(v5);
  id v7 = [v1 speak];
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String);

  id v9 = [v1 print];
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String);

  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v2,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v21);
  uint64_t v11 = TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:)(v6, v5, v8, v10, v2);
  uint64_t v12 = static Device.current.getter(v11);
  static Device.current.getter(v12);
  uint64_t v13 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 208);
  sub_73B4((void *)(v0 + 176), v13);
  LOBYTE(vsub_6CEC(v0 + 2) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v13, v14);
  uint64_t v15 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v4, 1LL, 1LL, v15);
  *(void *)(v0 + 12sub_6CEC((void *)v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 11sub_6CEC(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v22,  v0 + 136,  v2 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v4,  v24,  v0 + 96);
  sub_73D8(v0 + 96, (uint64_t *)&unk_5C140);
  sub_73D8(v4, (uint64_t *)&unk_5A5A0);
  sub_6CEC((void *)(v0 + 136));
  sub_6CEC((void *)(v0 + 176));
  uint64_t v16 = v25[10];
  uint64_t v17 = v25[11];
  sub_73B4(v25 + 7, v16);
  *(void *)(v0 + 240) = v26;
  *(void *)(v0 + 24sub_6CEC((void *)v0 + 8) = &protocol witness table for AceOutput;
  uint64_t v18 = sub_8390((void *)(v0 + 216));
  (*(void (**)(void *, uint64_t, uint64_t))(v27 + 16))(v18, v23, v26);
  uint64_t v19 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 456) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_3CEB4;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 216, v16, v17);
}

uint64_t sub_3CEB4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 456);
  *(void *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_3D1B0;
  }

  else
  {
    sub_6CEC((void *)(v2 + 216));
    uint64_t v4 = sub_3D104;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_3CF20()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_72B4(v2, (uint64_t)qword_5D478);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = *(void *)(v0 + 320);
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 312);
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)id v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(void *)(v0 + 280) = sub_24BA0(v8, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl(&dword_0, v4, v5, "Couldn't create a dialog for %s.", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 320), 2LL);
  }

  static ExecuteResponse.complete()(v11);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 344);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3D104()
{
  uint64_t v1 = *(void **)(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v6 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 368);
  uint64_t v7 = *(void *)(v0 + 352);
  static ExecuteResponse.complete()();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v8 = *(void *)(v0 + 392);
  uint64_t v9 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 344);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3D1B0()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_72B4(v2, (uint64_t)qword_5D478);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 464);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_getErrorValue(v7, v0 + 288, v0 + 256);
    uint64_t v10 = Error.localizedDescription.getter(*(void *)(v0 + 264), *(void *)(v0 + 272));
    unint64_t v12 = v11;
    *(void *)(v0 + 296) = sub_24BA0(v10, v11, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v4, v5, "Error publishing output %s.", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    uint64_t v13 = swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 464));
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  uint64_t v14 = *(void **)(v0 + 448);
  uint64_t v16 = *(void *)(v0 + 408);
  uint64_t v15 = *(void *)(v0 + 416);
  uint64_t v17 = *(void *)(v0 + 400);
  uint64_t v19 = *(void *)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 368);
  uint64_t v20 = *(void *)(v0 + 352);
  static ExecuteResponse.complete()(v13);

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  uint64_t v21 = *(void *)(v0 + 392);
  uint64_t v22 = *(void *)(v0 + 368);
  uint64_t v23 = *(void *)(v0 + 344);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3D414()
{
  return swift_deallocClassInstance(v0, 192LL, 7LL);
}

uint64_t type metadata accessor for UniversalActionTaskInterruptionFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin35UniversalActionTaskInterruptionFlow);
}

uint64_t getEnumTagSinglePayload for UniversalActionTaskInterruptionFlow.Action( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC)
  {
    unsigned int v6 = *a1;
    if (v6 >= 2)
    {
      unsigned int v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      uint64_t result = v7 - 2;
      if (v7 > 2) {
        return result;
      }
    }

    return 0LL;
  }

  unsigned int v2 = a2 + 4;
  if (a2 + 4 >= 0xFFFF00) {
    unsigned int v3 = 4;
  }
  else {
    unsigned int v3 = 2;
  }
  if (v2 >> 8 < 0xFF) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x100) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_3D4C8 + 4 * byte_48814[v4]))();
}

uint64_t storeEnumTagSinglePayload for UniversalActionTaskInterruptionFlow.Action( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_3D574 + 4 * byte_4881E[v5]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_3D5A8 + 4 * byte_48819[v5]))();
}

uint64_t sub_3D5A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3D5B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x3D5B8LL);
  }
  return result;
}

uint64_t sub_3D5C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x3D5CCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_3D5D0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3D5D8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3D5E4(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0LL;
  }
}

_BYTE *sub_3D600(_BYTE *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for UniversalActionTaskInterruptionFlow.Action()
{
  return &type metadata for UniversalActionTaskInterruptionFlow.Action;
}

uint64_t sub_3D628()
{
  return v0 & 1;
}

uint64_t sub_3D64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UniversalActionTaskInterruptionFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_3D6A4(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(dword_5BD0C);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_7240;
  void v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_3C32C, 0LL, 0LL);
}

uint64_t sub_3D708(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UniversalActionTaskInterruptionFlow();
  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_3D72C(uint64_t a1, uint64_t a2)
{
  return sub_285EC( &qword_5B218,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for UniversalActionTaskInterruptionFlow,  (uint64_t)&unk_4888C);
}

uint64_t sub_3D758(uint64_t a1, uint64_t a2)
{
  return sub_285EC( &qword_5BE10,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for UniversalActionTaskInterruptionFlow,  (uint64_t)&unk_488E4);
}

uint64_t sub_3D784@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  sub_72E4(&qword_5B228);
  uint64_t KeyPath = swift_getKeyPath(&unk_48950);
  uint64_t v5 = swift_getKeyPath(&unk_48978);
  uint64_t v7 = v3;
  swift_retain(v3);
  static SiriEnvironmentValue.subscript.getter(&v8, &v7, KeyPath, v5);
  swift_release(v3);
  swift_release(KeyPath);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_3D834(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Parse(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin();
  unsigned int v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = Parse.hasCancelled.getter(v4);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  if ((v7 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return 0LL;
  }

  else
  {
    char v10 = Parse.hasRejected.getter(v8);
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    if ((v10 & 1) != 0)
    {
      return 0LL;
    }

    else if ((Parse.hasDirectDismissal.getter(v11) & 1) != 0)
    {
      return 1LL;
    }

    else if ((Parse.hasThankYou.getter() & 1) != 0)
    {
      return 2LL;
    }

    else
    {
      return 3LL;
    }
  }

void *sub_3D928(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActionCandidate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unsigned int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    uint64_t v20 = _swiftEmptyArrayStorage;
    sub_2CF60(0, v7, 0);
    uint64_t v8 = v20;
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v11(v6, v9, v2);
      uint64_t v20 = v8;
      unint64_t v13 = v8[2];
      unint64_t v12 = v8[3];
      if (v13 >= v12 >> 1) {
        sub_2CF60(v12 > 1, v13 + 1, 1);
      }
      uint64_t v18 = v2;
      uint64_t v19 = &protocol witness table for ActionCandidate;
      uint64_t v14 = (char *)sub_8390(&v17);
      v11(v14, (uint64_t)v6, v2);
      uint64_t v15 = v20;
      v20[2] = v13 + 1;
      sub_72CC(&v17, (uint64_t)&v15[5 * v13 + 4]);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      uint64_t v8 = v20;
      v9 += v10;
      --v7;
    }

    while (v7);
  }

  return v8;
}

uint64_t sub_3DA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = a3;
  uint64_t v65 = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v62 = *(void *)(v3 - 8);
  uint64_t v63 = v3;
  __chkstk_darwin(v3, v4);
  unsigned int v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DisambiguationSerialiser(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_72E4(&qword_5BEC8);
  uint64_t v13 = type metadata accessor for ActionCandidate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = swift_allocObject(v12, v17 + 2 * v15, v16 | 7);
  *(_OWORD *)(v18 + 16) = xmmword_47A40;
  uint64_t v19 = v18 + v17;
  sub_363C4(v19);
  uint64_t v20 = v19 + v15;
  uint64_t v21 = v11;
  sub_363C4(v20);
  uint64_t v22 = sub_3D928(v18);
  swift_bridgeObjectRelease(v18);
  DisambiguationSerialiser.init(actions:)(v22);
  Swift::String_optional v23 = DisambiguationSerialiser.serialiseActionBundles()();
  if (!v24)
  {
    uint64_t v15 = v64;
    uint64_t v65 = v8;
    uint64_t v67 = v7;
    if (v23.value._object)
    {
      uint64_t countAndFlagsBits = v23.value._countAndFlagsBits;
      Swift::String_optional v25 = DisambiguationSerialiser.serialiseActionRepresentations()();
      if (v26)
      {
        (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v67);
        swift_bridgeObjectRelease(v23.value._object);
        return v15;
      }

      if (v25.value._object)
      {
        v66[3] = v13;
        v66[4] = &protocol witness table for ActionCandidate;
        uint64_t v37 = sub_8390(v66);
        sub_363C4((uint64_t)v37);
        uint64_t v64 = DisambiguationSerialiser.indexOfSelectedAction(selected:)(v66);
        char v39 = v38;
        sub_6CEC(v66);
        if ((v39 & 1) == 0)
        {
          id v40 =  [objc_allocWithZone((Class)type metadata accessor for DisambiguateActionsIntent(0)) init];
          Swift::String_optional v60 = v25;
          id v41 = v40;
          uint64_t v42 = UUID.init()(v40);
          UUID.uuidString.getter(v42);
          uint64_t v44 = v43;
          (*(void (**)(char *, uint64_t))(v62 + 8))(v6, v63);
          NSString v45 = String._bridgeToObjectiveC()();
          uint64_t v46 = v44;
          uint64_t v21 = v11;
          swift_bridgeObjectRelease(v46);
          [v41 setIdentifier:v45];

          uint64_t v15 = (uint64_t)v41;
          NSString v47 = String._bridgeToObjectiveC()();
          [(id)v15 _setLaunchId:v47];

          NSString v48 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v23.value._object);
          [(id)v15 setCandidateBundles:v48];

          object = v60.value._object;
          NSString v50 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(object);
          [(id)v15 setCandidateActions:v50];

          v66[0] = v64;
          dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          uint64_t v52 = v51;
          NSString v53 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v52);
          [(id)v15 setSelectedCandidateIndex:v53];

          uint64_t v32 = v67;
          uint64_t v33 = v65;
          goto LABEL_12;
        }

        swift_bridgeObjectRelease(v25.value._object);
        swift_bridgeObjectRelease(v23.value._object);
        if (qword_59DD8 != -1) {
          swift_once(&qword_59DD8, sub_34328);
        }
        uint64_t v57 = type metadata accessor for Logger(0LL);
        uint64_t v58 = sub_72B4(v57, (uint64_t)qword_5D478);
        id v29 = (os_log_s *)Logger.logObject.getter(v58);
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        BOOL v59 = os_log_type_enabled(v29, v30);
        uint64_t v32 = v67;
        uint64_t v33 = v65;
        if (!v59)
        {
LABEL_11:

          uint64_t v15 = 0LL;
LABEL_12:
          (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v32);
          return v15;
        }

        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        uint64_t v35 = "[DisambiguateActionsIntent] Could not serialise selected index.";
      }

      else
      {
        swift_bridgeObjectRelease(v23.value._object);
        if (qword_59DD8 != -1) {
          swift_once(&qword_59DD8, sub_34328);
        }
        uint64_t v54 = type metadata accessor for Logger(0LL);
        uint64_t v55 = sub_72B4(v54, (uint64_t)qword_5D478);
        id v29 = (os_log_s *)Logger.logObject.getter(v55);
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        BOOL v56 = os_log_type_enabled(v29, v30);
        uint64_t v32 = v67;
        uint64_t v33 = v65;
        if (!v56) {
          goto LABEL_11;
        }
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        uint64_t v35 = "[DisambiguateActionsIntent] Could not serialise action representations.";
      }
    }

    else
    {
      if (qword_59DD8 != -1) {
        swift_once(&qword_59DD8, sub_34328);
      }
      uint64_t v27 = type metadata accessor for Logger(0LL);
      uint64_t v28 = sub_72B4(v27, (uint64_t)qword_5D478);
      id v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      BOOL v31 = os_log_type_enabled(v29, v30);
      uint64_t v32 = v67;
      uint64_t v33 = v65;
      if (!v31) {
        goto LABEL_11;
      }
      uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v34 = 0;
      uint64_t v35 = "[DisambiguateActionsIntent] Could not serialise action bundles.";
    }

    _os_log_impl(&dword_0, v29, v30, v35, v34, 2u);
    swift_slowDealloc(v34, -1LL, -1LL);
    goto LABEL_11;
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v15;
}

uint64_t sub_3E028(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    return swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
  uint64_t v4 = sub_72E4((uint64_t *)&unk_5A8D0);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *unsigned int v6 = a2;
  id v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t type metadata accessor for UserHistoryHelper()
{
  return objc_opt_self(&OBJC_CLASS____TtC17CAMRootFlowPlugin17UserHistoryHelper);
}

uint64_t sub_3E0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  v3[15] = a1;
  return swift_task_switch(sub_3E0D8, 0LL, 0LL);
}

uint64_t sub_3E0D8()
{
  uint64_t v1 = sub_3DA90(*(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136));
  *(void *)(v0 + 144) = v1;
  if (!v1) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v2 = v0 + 16;
  id v3 = [objc_allocWithZone(INInteraction) initWithIntent:v1 response:0];
  *(void *)(v0 + 15sub_6CEC(v0 + 2) = v3;
  [v3 _setDonatedBySiri:1];
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_3E1E8;
  uint64_t v4 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  uint64_t v5 = (void *)(v0 + 80);
  v5[1] = 0x40000000LL;
  void v5[2] = sub_3E028;
  v5[3] = &unk_56240;
  void v5[4] = v4;
  [v3 donateInteractionWithCompletion:v5];
  return swift_continuation_await(v2);
}

uint64_t sub_3E1E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 160LL) = v1;
  if (v1) {
    uint64_t v2 = sub_3E33C;
  }
  else {
    uint64_t v2 = sub_3E248;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_3E248()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  id v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unsigned int v6 = *(void **)(v0 + 144);
  id v7 = *(void **)(v0 + 152);
  if (v5)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_0, v3, v4, "[DisambiguateActionsIntent] Donation success.", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3E33C()
{
  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_72B4(v3, (uint64_t)qword_5D478);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  BOOL v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 160);
  if (v7)
  {
    uint64_t v14 = *(os_log_s **)(v0 + 144);
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    swift_errorRetain(v8);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v0 + 80) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v9 + 4, v9 + 12);
    *uint64_t v10 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl(&dword_0, v5, v6, "[DisambiguateActionsIntent] Donation failed: %@", v9, 0xCu);
    uint64_t v12 = sub_72E4(&qword_5A950);
    swift_arrayDestroy(v10, 1LL, v12);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    BOOL v5 = v14;
  }

  else
  {

    swift_errorRelease(v8);
    swift_errorRelease(v8);
  }

  swift_errorRelease(v8);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3E520()
{
  uint64_t v0 = sub_72E4(&qword_5AD30);
  __chkstk_darwin(v0, v1);
  uint64_t v3 = &v22[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = USOParse.userParse.getter(v12);
  uint64_t v16 = Siri_Nlu_External_UserParse.userDialogActs.getter(v15);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  if (*(void *)(v16 + 16))
  {
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v10 + 16))( v3,  v16 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)),  v9);
    uint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v17 = 1LL;
  }

  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v3, v17, 1LL, v9);
  swift_bridgeObjectRelease(v16);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v3, 1LL, v9) == 1)
  {
    sub_3E780((uint64_t)v3);
    return 0LL;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v14, v3, v9);
  uint64_t result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v14);
  uint64_t v20 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0) {
      uint64_t v21 = result;
    }
    else {
      uint64_t v21 = result & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(result);
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v21);
    uint64_t result = swift_bridgeObjectRelease(v20);
    if (!v18) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v18 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFF8LL));
    if (!v18)
    {
LABEL_11:
      swift_bridgeObjectRelease(v20);
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v14, v9);
      return v18;
    }
  }

  if ((v20 & 0xC000000000000001LL) != 0)
  {
    uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v20);
    goto LABEL_11;
  }

  if (*(void *)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFF8LL)))
  {
    uint64_t v18 = *(void *)(v20 + 32);
    swift_retain(v18);
    goto LABEL_11;
  }

  __break(1u);
  return result;
}

uint64_t sub_3E780(uint64_t a1)
{
  uint64_t v2 = sub_72E4(&qword_5AD30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_3E7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_3E7DC, 0LL, 0LL);
}

uint64_t sub_3E7DC()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  swift_retain(v2);
  uint64_t v4 = sub_451D0(v1, v3, v2);
  *(void *)(v0 + 7sub_6CEC(v0 + 2) = v4;
  swift_release(v2);
  uint64_t v5 = v4[2];
  *(void *)(v0 + 80) = v5;
  if (v5)
  {
    *(void *)(v0 + 8sub_6CEC((void *)v0 + 8) = 0LL;
    *(void *)(v0 + 96) = _swiftEmptyArrayStorage;
    uint64_t v6 = *(void *)(*(void *)(v0 + 72) + 32LL);
    *(void *)(v0 + 104) = v6;
    swift_bridgeObjectRetain(v4);
    uint64_t v7 = async function pointer to Task.value.getter[1];
    swift_retain(v6);
    uint64_t v8 = (void *)swift_task_alloc(v7);
    *(void *)(v0 + 11sub_6CEC(v0 + 2) = v8;
    uint64_t v9 = sub_72E4((uint64_t *)&unk_5A8D0);
    *uint64_t v8 = v0;
    v8[1] = sub_3E908;
    return Task.value.getter( v0 + 16,  v6,  &type metadata for AppNameDisambiguationFlow.Card,  v9,  &protocol self-conformance witness table for Error);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

uint64_t sub_3E908()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 112);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 96));
    uint64_t v4 = sub_3EAFC;
  }

  else
  {
    *(_OWORD *)(v2 + 12sub_6CEC((void *)v0 + 8) = *(_OWORD *)(v2 + 16);
    *(void *)(v2 + 144) = *(void *)(v2 + 32);
    uint64_t v4 = sub_3E984;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_3E984()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + 96));
  uint64_t v2 = *(void **)(v0 + 96);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v2 = sub_445B4(0LL, v2[2] + 1LL, 1, *(void **)(v0 + 96));
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_445B4((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  uint64_t v5 = *(void *)(v0 + 144);
  __int128 v6 = *(_OWORD *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88) + 1LL;
  v2[2] = v4 + 1;
  uint64_t v10 = &v2[3 * v4];
  *((_OWORD *)v10 + sub_6CEC(v0 + 2) = v6;
  v10[6] = v5;
  swift_release(v7);
  if (v9 == v8)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
    return (*(uint64_t (**)(void *))(v0 + 8))(v2);
  }

  else
  {
    uint64_t v12 = *(void *)(v0 + 88) + 1LL;
    *(void *)(v0 + 8sub_6CEC((void *)v0 + 8) = v12;
    *(void *)(v0 + 96) = v2;
    uint64_t v13 = *(void *)(*(void *)(v0 + 72) + 8 * v12 + 32);
    *(void *)(v0 + 104) = v13;
    uint64_t v14 = async function pointer to Task.value.getter[1];
    swift_retain(v13);
    uint64_t v15 = (void *)swift_task_alloc(v14);
    *(void *)(v0 + 11sub_6CEC(v0 + 2) = v15;
    uint64_t v16 = sub_72E4((uint64_t *)&unk_5A8D0);
    *uint64_t v15 = v0;
    v15[1] = sub_3E908;
    return Task.value.getter( v0 + 16,  v13,  &type metadata for AppNameDisambiguationFlow.Card,  v16,  &protocol self-conformance witness table for Error);
  }

uint64_t sub_3EAFC()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_release(*(void *)(v0 + 104));
  swift_bridgeObjectRelease_n(v1, 2LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3EB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  void v3[9] = a3;
  v3[7] = a1;
  return swift_task_switch(sub_3EB5C, 0LL, 0LL);
}

uint64_t sub_3EB5C()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  swift_retain(v2);
  unint64_t v4 = sub_44D80(v1, v3, v2);
  *(void *)(v0 + 80) = v4;
  swift_release(v2);
  uint64_t v5 = v4[2];
  *(void *)(v0 + 8sub_6CEC((void *)v0 + 8) = v5;
  if (v5)
  {
    *(void *)(v0 + 96) = 0LL;
    *(void *)(v0 + 104) = _swiftEmptyArrayStorage;
    uint64_t v6 = *(void *)(*(void *)(v0 + 80) + 32LL);
    *(void *)(v0 + 11sub_6CEC(v0 + 2) = v6;
    swift_bridgeObjectRetain(v4);
    uint64_t v7 = async function pointer to Task.value.getter[1];
    swift_retain(v6);
    uint64_t v8 = (void *)swift_task_alloc(v7);
    *(void *)(v0 + 120) = v8;
    uint64_t v9 = sub_72E4((uint64_t *)&unk_5A8D0);
    *uint64_t v8 = v0;
    v8[1] = sub_3EC88;
    return Task.value.getter( v0 + 16,  v6,  &type metadata for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo,  v9,  &protocol self-conformance witness table for Error);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 80));
    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

uint64_t sub_3EC88()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  *(void *)(*v1 + 12sub_6CEC((void *)v0 + 8) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 104));
    unint64_t v4 = sub_3EE80;
  }

  else
  {
    *(void *)(v2 + 136) = *(void *)(v2 + 16);
    *(_OWORD *)(v2 + 144) = *(_OWORD *)(v2 + 24);
    *(void *)(v2 + 160) = *(void *)(v2 + 40);
    unint64_t v4 = sub_3ED0C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_3ED0C()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + 104));
  uint64_t v2 = *(void **)(v0 + 104);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v2 = sub_446D8(0LL, v2[2] + 1LL, 1, *(void **)(v0 + 104));
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_446D8((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 160);
  __int128 v7 = *(_OWORD *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 96) + 1LL;
  v2[2] = v4 + 1;
  uint64_t v11 = &v2[4 * v4];
  *((_OWORD *)v11 + sub_6CEC(v0 + 2) = v7;
  v11[6] = v6;
  v11[7] = v5;
  swift_release(v8);
  if (v10 == v9)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 80));
    swift_bridgeObjectRelease(*(void *)(v0 + 80));
    return (*(uint64_t (**)(void *))(v0 + 8))(v2);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 96) + 1LL;
    *(void *)(v0 + 96) = v13;
    *(void *)(v0 + 104) = v2;
    uint64_t v14 = *(void *)(*(void *)(v0 + 80) + 8 * v13 + 32);
    *(void *)(v0 + 11sub_6CEC(v0 + 2) = v14;
    uint64_t v15 = async function pointer to Task.value.getter[1];
    swift_retain(v14);
    uint64_t v16 = (void *)swift_task_alloc(v15);
    *(void *)(v0 + 120) = v16;
    uint64_t v17 = sub_72E4((uint64_t *)&unk_5A8D0);
    *uint64_t v16 = v0;
    v16[1] = sub_3EC88;
    return Task.value.getter( v0 + 16,  v14,  &type metadata for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo,  v17,  &protocol self-conformance witness table for Error);
  }

uint64_t sub_3EE80()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_release(*(void *)(v0 + 112));
  swift_bridgeObjectRelease_n(v1, 2LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_3EEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch(sub_3EEE0, 0LL, 0LL);
}

uint64_t sub_3EEE0()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  swift_retain(v2);
  unint64_t v4 = sub_45588(v1, v3, v2);
  *(void *)(v0 + 64) = v4;
  swift_release(v2);
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  uint64_t v5 = v4[2];
  *(void *)(v0 + 7sub_6CEC(v0 + 2) = v5;
  if (v5)
  {
    *(void *)(v0 + 80) = 0LL;
    uint64_t v6 = *(void *)(*(void *)(v0 + 64) + 32LL);
    *(void *)(v0 + 8sub_6CEC((void *)v0 + 8) = v6;
    swift_bridgeObjectRetain(v4);
    uint64_t v7 = async function pointer to Task.value.getter[1];
    swift_retain(v6);
    uint64_t v8 = (void *)swift_task_alloc(v7);
    *(void *)(v0 + 96) = v8;
    uint64_t v9 = sub_18BE0(0LL, &qword_5A878, &OBJC_CLASS___SFCardSection_ptr);
    uint64_t v10 = sub_72E4((uint64_t *)&unk_5A8D0);
    *uint64_t v8 = v0;
    v8[1] = sub_3F02C;
    return Task.value.getter(v0 + 32, v6, v9, v10, &protocol self-conformance witness table for Error);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

uint64_t sub_3F02C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[3]);
    unint64_t v4 = sub_3F200;
  }

  else
  {
    v2[14] = v2[4];
    unint64_t v4 = sub_3F0A0;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_3F0A0()
{
  unint64_t v2 = *(void *)((char *)&dword_10 + (*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8LL));
  unint64_t v1 = *(void *)((char *)&dword_18 + (*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8LL));
  if (v2 >= v1 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v1 > 1, v2 + 1, 1LL);
  }
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80) + 1LL;
  uint64_t v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, *(void *)(v0 + 112));
  specialized Array._endMutation()(v6);
  swift_release(v3);
  if (v5 == v4)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    uint64_t v7 = *(void *)(v0 + 24);
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 80) + 1LL;
    *(void *)(v0 + 80) = v9;
    uint64_t v10 = *(void *)(*(void *)(v0 + 64) + 8 * v9 + 32);
    *(void *)(v0 + 8sub_6CEC((void *)v0 + 8) = v10;
    uint64_t v11 = async function pointer to Task.value.getter[1];
    swift_retain(v10);
    uint64_t v12 = (void *)swift_task_alloc(v11);
    *(void *)(v0 + 96) = v12;
    uint64_t v13 = sub_18BE0(0LL, &qword_5A878, &OBJC_CLASS___SFCardSection_ptr);
    uint64_t v14 = sub_72E4((uint64_t *)&unk_5A8D0);
    *uint64_t v12 = v0;
    v12[1] = sub_3F02C;
    return Task.value.getter(v0 + 32, v10, v13, v14, &protocol self-conformance witness table for Error);
  }

uint64_t sub_3F200()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_3F248()
{
  qword_5D4B8 = 0x54746E6572727543LL;
  unk_5D4C0 = 0xEB000000006B7361LL;
}

BOOL sub_3F274(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VerbEntityDisambiguationFlow.State(0LL);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v190 = (uint64_t)&v170 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4, v6);
  uint64_t v189 = (char *)&v170 - v7;
  uint64_t v8 = sub_72E4((uint64_t *)&unk_5C190);
  __chkstk_darwin(v8, v9);
  unint64_t v185 = (char *)&v170 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v187 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v186 = (char *)&v170 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for PluginAction(0LL);
  uint64_t v200 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v184 = (char *)&v170 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v193 = (char *)&v170 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v172 = (char *)&v170 - v23;
  __chkstk_darwin(v22, v24);
  uint64_t v173 = (char *)&v170 - v25;
  uint64_t v182 = type metadata accessor for USOParse(0LL);
  uint64_t v181 = *(void *)(v182 - 8);
  __chkstk_darwin(v182, v26);
  uint64_t v180 = (uint64_t)&v170 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v179 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v178 = *(void *)(v179 - 8);
  __chkstk_darwin(v179, v28);
  uint64_t v177 = (char *)&v170 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for Parse(0LL);
  uint64_t v195 = *(void *)(v30 - 8);
  uint64_t v196 = (uint64_t (*)(void, void, void))v30;
  __chkstk_darwin(v30, v31);
  uint64_t v197 = (char *)&v170 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = sub_72E4((uint64_t *)&unk_5A980);
  uint64_t v35 = __chkstk_darwin(v33, v34);
  uint64_t v194 = (uint64_t)&v170 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = __chkstk_darwin(v35, v37);
  uint64_t v174 = (uint64_t)&v170 - v39;
  uint64_t v41 = __chkstk_darwin(v38, v40);
  uint64_t v175 = (char *)&v170 - v42;
  __chkstk_darwin(v41, v43);
  NSString v45 = (char *)&v170 - v44;
  uint64_t v46 = type metadata accessor for Input(0LL);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v49 = __chkstk_darwin(v46, v48);
  char v183 = (char *)&v170 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = __chkstk_darwin(v49, v51);
  uint64_t v176 = (char *)&v170 - v53;
  __chkstk_darwin(v52, v54);
  BOOL v56 = (char *)&v170 - v55;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v57 = type metadata accessor for Logger(0LL);
  uint64_t v58 = sub_72B4(v57, (uint64_t)qword_5D478);
  BOOL v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 16);
  uint64_t v201 = a1;
  uint64_t v191 = v59;
  uint64_t v60 = v59(v56, a1, v46);
  uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
  os_log_type_t v62 = static os_log_type_t.debug.getter();
  BOOL v63 = os_log_type_enabled(v61, v62);
  uint64_t v198 = v45;
  uint64_t v199 = v58;
  uint64_t v188 = v11;
  if (v63)
  {
    uint64_t v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v65 = swift_slowAlloc(32LL, -1LL);
    uint64_t v171 = v14;
    uint64_t v66 = v65;
    uint64_t v203 = v65;
    *(_DWORD *)uint64_t v64 = 136315138;
    uint64_t v67 = sub_7D7C( (unint64_t *)&qword_5A040,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter(v46, v67);
    unint64_t v70 = v69;
    uint64_t v204 = sub_24BA0(v68, v69, &v203);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease(v70);
    uint64_t v192 = *(void (**)(char *, uint64_t))(v47 + 8);
    v192(v56, v46);
    _os_log_impl(&dword_0, v61, v62, "VerbEntityDisambiguationFlow: on called with input %s", v64, 0xCu);
    swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v71 = v66;
    uint64_t v14 = v171;
    swift_slowDealloc(v71, -1LL, -1LL);
    uint64_t v72 = v64;
    NSString v45 = v198;
    swift_slowDealloc(v72, -1LL, -1LL);
  }

  else
  {
    uint64_t v192 = *(void (**)(char *, uint64_t))(v47 + 8);
    v192(v56, v46);
  }

  uint64_t v73 = v46;
  uint64_t v74 = v197;
  Input.parse.getter(v75);
  uint64_t v77 = v195;
  uint64_t v76 = v196;
  int v78 = (*(uint64_t (**)(char *, uint64_t (*)(void, void, void)))(v195 + 88))(v74, v196);
  uint64_t v79 = v200;
  if (v78 == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t (*)(void, void, void)))(v77 + 96))(v74, v76);
    uint64_t v80 = v178;
    uint64_t v81 = v177;
    uint64_t v82 = v74;
    uint64_t v83 = v179;
    (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v177, v82, v179);
    sub_2E1AC( (uint64_t)v202 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_firstAction,  (uint64_t)v202 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_secondAction,  (uint64_t)v45);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v83);
    goto LABEL_16;
  }

  if (v78 != enum case for Parse.uso(_:))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v200 + 56))(v45, 1LL, 1LL, v14);
    (*(void (**)(char *, uint64_t (*)(void, void, void)))(v77 + 8))(v74, v76);
    goto LABEL_16;
  }

  (*(void (**)(char *, uint64_t (*)(void, void, void)))(v77 + 96))(v74, v76);
  (*(void (**)(uint64_t, char *, uint64_t))(v181 + 32))(v180, v74, v182);
  uint64_t v84 = (uint64_t)v202 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_firstAction;
  uint64_t v85 = (char *)v202 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_secondAction;
  uint64_t v86 = sub_33F50();
  if ((v87 & 1) != 0) {
    goto LABEL_13;
  }
  switch(v86)
  {
    case 1LL:
      goto LABEL_41;
    case 0LL:
      uint64_t v85 = (char *)v84;
      goto LABEL_41;
    case -1LL:
LABEL_41:
      uint64_t v166 = v175;
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v175, v85, v14);
      uint64_t v167 = *(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56);
      v167(v166, 0LL, 1LL, v14);
      (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v180, v182);
      unint64_t v168 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
      unint64_t v169 = v173;
      v168(v173, v166, v14);
      v168(v45, v169, v14);
      v167(v45, 0LL, 1LL, v14);
      goto LABEL_16;
  }

uint64_t sub_402F8(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for PluginAction(0LL);
  v2[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[10] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[11] = swift_task_alloc(v5);
  v2[12] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for VerbEntityDisambiguationFlow.State(0LL);
  v2[13] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_40388, 0LL, 0LL);
}

uint64_t sub_40388()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "VerbEntityDisambiguationFlow: execute called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 64);

  uint64_t v8 = v7 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_state;
  swift_beginAccess(v7 + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_state, v0 + 16, 0LL, 0LL);
  sub_45D80(v8, v6);
  uint64_t v9 = sub_72E4(&qword_5C040);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v6, 2LL, v9);
  if (!(_DWORD)v10)
  {
    uint64_t v16 = *(void *)(v0 + 96);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 72);
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 32))(v16, *(void *)(v0 + 104), v19);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v16, v19);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v25 = *(void *)(v0 + 80);
    uint64_t v24 = *(void *)(v0 + 88);
    uint64_t v26 = *(void *)(v0 + 72);
    if (v23)
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      v48[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v29 = sub_7D7C( (unint64_t *)&qword_59FC0,  (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction,  (uint64_t)&protocol conformance descriptor for PluginAction);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v26, v29);
      unint64_t v32 = v31;
      *(void *)(v0 + 4sub_6CEC((void *)v0 + 8) = sub_24BA0(v30, v31, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease(v32);
      uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v33(v24, v26);
      _os_log_impl(&dword_0, v21, v22, "VerbEntityDisambiguationFlow: redirecting to %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v33(*(void *)(v0 + 88), *(void *)(v0 + 72));
    }

    uint64_t v43 = *(void *)(v0 + 96);
    uint64_t v44 = *(void *)(v0 + 72);
    static ExecuteResponse.redirect(nextPluginAction:)(v43);
    v33(v43, v44);
LABEL_17:
    uint64_t v45 = *(void *)(v0 + 96);
    uint64_t v46 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 104));
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if ((_DWORD)v10 != 1)
  {
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_0, v34, v35, "Invalid respose", v36, 2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    uint64_t v38 = static OutputPublisherFactory.makeOutputPublisherAsync()(v47, v37);
    static SiriKitEventSender.current.getter(v48, v38);
    uint64_t v39 = type metadata accessor for CamErrorFlow();
    swift_allocObject(v39, 112LL, 7LL);
    uint64_t v40 = sub_267BC(0xD000000000000010LL, 0x8000000000049090LL, v47, v48);
    *(void *)(v0 + 40) = v40;
    uint64_t v41 = sub_7D7C( (unint64_t *)&qword_5C1A0,  (uint64_t (*)(uint64_t))type metadata accessor for CamErrorFlow,  (uint64_t)&unk_48040);
    uint64_t v42 = Flow.eraseToAnyFlow()(v39, v41);
    swift_release(v40);
    static ExecuteResponse.complete(next:)(v42);
    swift_release(v42);
    goto LABEL_17;
  }

  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "VerbEntityDisambiguationFlow: rendering disambiguation", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  uint64_t v14 = (void *)swift_task_alloc(dword_5BF34);
  *(void *)(v0 + 11sub_6CEC(v0 + 2) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_40868;
  return sub_40900(*(void *)(v0 + 56));
}

uint64_t sub_40868()
{
  return swift_task_switch(sub_408BC, 0LL, 0LL);
}

uint64_t sub_408BC()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_40900(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A820);
  v2[19] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ActivityType(0LL);
  v2[20] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[21] = v5;
  v2[22] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CAMDisambiguationDialogType(0LL);
  v2[23] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[24] = v7;
  v2[25] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = (*(void *)(*(void *)(sub_72E4((uint64_t *)&unk_5C190) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[26] = swift_task_alloc(v8);
  v2[27] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v2[28] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[29] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[30] = swift_task_alloc(v11);
  v2[31] = swift_task_alloc(v11);
  return swift_task_switch(sub_40A18, 0LL, 0LL);
}

uint64_t sub_40A18()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  *(void *)(v0 + 256) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "VerbEntityDisambiguationFlow: executeRenderDisambiguation called", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_5BF3C);
  *(void *)(v0 + 264) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_40B24;
  return sub_42E90(v0 + 56);
}

uint64_t sub_40B24()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 264LL);
  *(void *)(*(void *)v1 + 272LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_41080;
  }
  else {
    uint64_t v3 = sub_40B88;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_40B88()
{
  uint64_t v2 = (uint64_t *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v5 = sub_72CC((__int128 *)(v0 + 56), v0 + 16);
  PluginAction.loggingId.getter(v5);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v6(v1, 1LL, v3) != 1)
  {
    uint64_t v2 = (uint64_t *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 208);
    uint64_t v8 = *(void *)(v0 + 224);
    uint64_t v9 = *(void (**)(void))(*(void *)(v0 + 232) + 32LL);
    uint64_t v10 = ((uint64_t (*)(void, void, uint64_t))v9)(*(void *)(v0 + 248), *(void *)(v0 + 216), v8);
    PluginAction.loggingId.getter(v10);
    int v11 = v6(v7, 1LL, v8);
    uint64_t v12 = *(void *)(v0 + 248);
    if (v11 != 1)
    {
      uint64_t v17 = *(void *)(v0 + 232);
      uint64_t v33 = *(void *)(v0 + 248);
      uint64_t v34 = *(void *)(v0 + 240);
      uint64_t v18 = *(void *)(v0 + 224);
      uint64_t v19 = *(void *)(v0 + 192);
      uint64_t v36 = *(void *)(v0 + 200);
      uint64_t v37 = *(void *)(v0 + 184);
      v9();
      type metadata accessor for ConversationSELFHelper(0LL);
      uint64_t v35 = static ConversationSELFHelper.shared.getter();
      uint64_t v20 = sub_72E4(&qword_5A958);
      uint64_t v21 = *(void *)(v17 + 72);
      uint64_t v22 = *(unsigned __int8 *)(v17 + 80);
      uint64_t v23 = (v22 + 32) & ~v22;
      uint64_t v24 = swift_allocObject(v20, v23 + 2 * v21, v22 | 7);
      *(_OWORD *)(v24 + 16) = xmmword_47A40;
      uint64_t v25 = v24 + v23;
      uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
      v26(v25, v12, v18);
      v26(v25 + v21, v34, v18);
      (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))( v36,  enum case for CAMDisambiguationDialogType.verbEntity(_:),  v37);
      dispatch thunk of ConversationSELFHelper.emitDisambiguationDialogGenerated(actionIds:dialogType:)(v24, v36);
      swift_bridgeObjectRelease(v24);
      swift_release(v35);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v36, v37);
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v27(v34, v18);
      v27(v33, v18);
      goto LABEL_8;
    }

    (*(void (**)(void, void))(*(void *)(v0 + 232) + 8LL))(*(void *)(v0 + 248), *(void *)(v0 + 224));
  }

  uint64_t v13 = sub_73D8(*v2, (uint64_t *)&unk_5C190);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl( &dword_0,  v14,  v15,  "VerbEntityDisambiguationFlow: could not extract loggingIds for actions. SELF DisambiguationDialogGenerated message was not emitted as a result.",  v16,  2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

LABEL_8:
  uint64_t v28 = *(void **)(v0 + 144);
  uint64_t v29 = v28[15];
  uint64_t v30 = v28[16];
  sub_73B4(v28 + 12, v29);
  unint64_t v31 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 280) = v31;
  *unint64_t v31 = v0;
  v31[1] = sub_40E50;
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v29, v30);
}

uint64_t sub_40E50()
{
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v2 = sub_461C0;
  }

  else
  {
    uint64_t v2 = sub_40EBC;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_40EBC()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void **)(v0 + 144);
  uint64_t v5 = v4[10];
  uint64_t v21 = v4[11];
  sub_73B4(v4 + 7, v5);
  type metadata accessor for SiriKitEvent(0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.disambiguation(_:), v3);
  if (qword_59DF8 != -1) {
    swift_once(&qword_59DF8, sub_3F248);
  }
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v9 = qword_5D4B8;
  uint64_t v8 = unk_5D4C0;
  uint64_t v10 = enum case for SiriKitReliabilityCodes.disambiguationActionRouting(_:);
  uint64_t v11 = type metadata accessor for SiriKitReliabilityCodes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v7, v10, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v7, 0LL, 1LL, v11);
  swift_bridgeObjectRetain(v8);
  uint64_t v13 = SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)(v6, v9, v8, v7, nullsub_1, 0LL);
  dispatch thunk of SiriKitEventSending.send(_:)(v13, v5, v21);
  swift_release(v13);
  static ExecuteResponse.ongoing(requireInput:)(1LL);
  sub_6CEC((void *)(v0 + 16));
  uint64_t v14 = *(void *)(v0 + 240);
  uint64_t v16 = *(void *)(v0 + 208);
  uint64_t v15 = *(void *)(v0 + 216);
  uint64_t v17 = *(void *)(v0 + 200);
  uint64_t v18 = *(void *)(v0 + 176);
  uint64_t v19 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_41080()
{
  uint64_t v1 = *(void *)(v0 + 272);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 272);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_getErrorValue(v5, v0 + 120, v0 + 96);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 104), *(void *)(v0 + 112));
    unint64_t v10 = v9;
    *(void *)(v0 + 12sub_6CEC((void *)v0 + 8) = sub_24BA0(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( &dword_0,  v3,  v4,  "VerbEntityDisambiguationFlow: cannot create output for disambiguation, will redirect to fallback action. Error: %s",  v6,  0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 272);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v12 = *(void *)(v0 + 272);
  static ExecuteResponse.redirect(nextPluginAction:)(*(void *)(v0 + 144) + OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_fallBackAction);
  swift_errorRelease(v12);
  uint64_t v13 = *(void *)(v0 + 240);
  uint64_t v15 = *(void *)(v0 + 208);
  uint64_t v14 = *(void *)(v0 + 216);
  uint64_t v16 = *(void *)(v0 + 200);
  uint64_t v17 = *(void *)(v0 + 176);
  uint64_t v18 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_41284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v213 = a2;
  uint64_t v214 = a3;
  uint64_t v186 = a4;
  uint64_t v201 = type metadata accessor for Siri_Nlu_External_UsoGraph(0LL);
  uint64_t v200 = *(void *)(v201 - 8);
  __chkstk_darwin(v201, v5);
  uint64_t v204 = (char *)&v180 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_72E4((uint64_t *)&unk_5C0E0);
  __chkstk_darwin(v7, v8);
  uint64_t v205 = (char *)&v180 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_72E4(&qword_5A3E8);
  __chkstk_darwin(v10, v11);
  v211 = (char *)&v180 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v206 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v203 = *(void *)(v206 - 8);
  uint64_t v14 = __chkstk_darwin(v206, v13);
  uint64_t v195 = (char *)&v180 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v202 = (char *)&v180 - v18;
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v180 - v20;
  uint64_t v212 = type metadata accessor for PluginAction(0LL);
  unint64_t v208 = *(void *)(v212 - 8);
  __chkstk_darwin(v212, v22);
  uint64_t v24 = (char *)&v180 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for USOParse(0LL);
  unint64_t v26 = *(void *)(v25 - 8);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = (char *)&v180 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28, v31);
  uint64_t v33 = (char *)&v180 - v32;
  if (qword_59DD8 != -1) {
LABEL_137:
  }
    swift_once(&qword_59DD8, sub_34328);
  uint64_t v34 = type metadata accessor for Logger(0LL);
  uint64_t v35 = sub_72B4(v34, (uint64_t)qword_5D478);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v215 = a1;
  uint64_t v37 = v36(v33, a1, v25);
  uint64_t v210 = v35;
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.error.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v209 = v24;
  uint64_t v190 = v21;
  if (v40)
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v207 = swift_slowAlloc(32LL, -1LL);
    uint64_t v216 = v207;
    *(_DWORD *)uint64_t v41 = 136315138;
    v36(v30, (uint64_t)v33, v25);
    uint64_t v42 = String.init<A>(describing:)(v30, v25);
    unint64_t v44 = v43;
    v218 = (char *)sub_24BA0(v42, v43, &v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, &v219, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease(v44);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v33, v25);
    _os_log_impl( &dword_0,  v38,  v39,  "VerbEntityDisambiguationFlow: resolveResponseToVerbEntityParaphraseDisambiguation with usoParse %s",  v41,  0xCu);
    uint64_t v45 = v207;
    swift_arrayDestroy(v207, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1LL, -1LL);
    uint64_t v46 = v41;
    uint64_t v21 = v190;
    swift_slowDealloc(v46, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v33, v25);
  }

  uint64_t v47 = sub_3E520();
  uint64_t v33 = v211;
  uint64_t v48 = v212;
  unint64_t v49 = v208;
  if (!v47)
  {
    uint64_t v156 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v157 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v156, v157))
    {
      uint64_t v158 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v158 = 0;
      _os_log_impl( &dword_0,  v156,  v157,  "VerbEntityDisambiguationFlow: User response cannot be interpreted as a UsoTask",  v158,  2u);
      swift_slowDealloc(v158, -1LL, -1LL);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v186, 1LL, 1LL, v48);
  }

  uint64_t v185 = v47;
  uint64_t v24 = v21;
  unint64_t v26 = UsoTask.verbString.getter();
  unint64_t v51 = v50;
  uint64_t v52 = sub_72E4(&qword_5A8F0);
  uint64_t v53 = *(void *)(v49 + 72);
  uint64_t v54 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v55 = (v54 + 32) & ~v54;
  uint64_t v56 = swift_allocObject(v52, v55 + 2 * v53, v54 | 7);
  *(_OWORD *)(v56 + 16) = xmmword_47A40;
  uint64_t v207 = v56;
  uint64_t v57 = v56 + v55;
  unint64_t v58 = v49;
  BOOL v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16);
  a1 = v212;
  v59(v57, v213, v212);
  uint64_t v198 = v53;
  uint64_t v197 = v57;
  uint64_t v196 = (uint64_t (*)(char *, unint64_t, uint64_t))v59;
  v59(v57 + v53, (uint64_t)v214, a1);
  uint64_t v61 = 0LL;
  unint64_t v62 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v189 = v217;
  char v183 = &v219;
  unint64_t v194 = v26;
  unint64_t v199 = v51;
  BOOL v64 = v26 == 0x627265566F6ELL && v51 == 0xE600000000000000LL;
  BOOL v193 = v64;
  *(void *)&__int128 v60 = 136315138LL;
  __int128 v188 = v60;
  uint64_t v187 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v60 = 136315394LL;
  __int128 v184 = v60;
  uint64_t v21 = (char *)v206;
  uint64_t v65 = v209;
  while (1)
  {
    uint64_t v30 = (char *)v61;
    if (v62 >= *(void *)(v207 + 16))
    {
      __break(1u);
LABEL_136:
      __break(1u);
      goto LABEL_137;
    }

    uint64_t v66 = v196(v65, v197 + v62 * v198, a1);
    uint64_t v67 = (uint64_t)v205;
    PluginAction.actionParaphrase.getter(v66);
    uint64_t v68 = type metadata accessor for ActionParaphrase(0LL);
    uint64_t v69 = *(void *)(v68 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v67, 1LL, v68) == 1)
    {
      sub_73D8(v67, (uint64_t *)&unk_5C0E0);
      a1 = v58;
LABEL_125:
      swift_bridgeObjectRelease(v199);
      goto LABEL_129;
    }

    ActionParaphrase.verbEntityParaphrase.getter();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v67, v68);
    uint64_t v70 = type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL);
    uint64_t v71 = *(void *)(v70 - 8);
    a1 = v58;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v33, 1LL, v70) == 1)
    {
      sub_73D8((uint64_t)v33, &qword_5A3E8);
      goto LABEL_125;
    }

    uint64_t v72 = v202;
    ActionParaphrase.VerbEntityParaphrase.userStatedTask.getter();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v33, v70);
    uint64_t v73 = v203;
    uint64_t v74 = v72;
    uint64_t v75 = v24;
    uint64_t v76 = (*(uint64_t (**)(char *, char *, char *))(v203 + 32))(v24, v74, v21);
    uint64_t v77 = v204;
    Siri_Nlu_External_UserStatedTask.task.getter(v76);
    uint64_t v78 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v77, 0LL);
    if (v25) {
      break;
    }
    uint64_t v24 = (char *)v78;
    (*(void (**)(char *, uint64_t))(v200 + 8))(v77, v201);
    uint64_t v79 = static UsoConversionUtils.convertGraphToTasks(graph:)(v24);
    uint64_t v80 = v79;
    if ((unint64_t)v79 >> 62)
    {
      if (v79 < 0) {
        uint64_t v147 = v79;
      }
      else {
        uint64_t v147 = v79 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v79);
      uint64_t v33 = (char *)_CocoaArrayWrapper.endIndex.getter(v147);
      swift_bridgeObjectRelease(v80);
      if (!v33)
      {
LABEL_127:
        swift_bridgeObjectRelease(v199);
        swift_release(v24);
        swift_bridgeObjectRelease(v80);
        goto LABEL_128;
      }
    }

    else
    {
      uint64_t v33 = *(char **)((char *)&dword_10 + (v79 & 0xFFFFFFFFFFFFF8LL));
      if (!v33) {
        goto LABEL_127;
      }
    }

    uint64_t v214 = v24;
    if ((v80 & 0xC000000000000001LL) != 0)
    {
      uint64_t v215 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v80);
      unint64_t v26 = (unint64_t)v195;
    }

    else
    {
      unint64_t v26 = (unint64_t)v195;
      uint64_t v215 = *(void *)(v80 + 32);
      swift_retain(v215);
    }

    swift_bridgeObjectRelease(v80);
    uint64_t v81 = v73;
    uint64_t v82 = *(uint64_t (**)(unint64_t, char *, char *))(v73 + 16);
    uint64_t v83 = v82(v26, v75, v21);
    uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
    os_log_type_t v85 = static os_log_type_t.debug.getter();
    BOOL v86 = os_log_type_enabled(v84, v85);
    LODWORD(v21sub_6CEC((void *)v0 + 3) = (_DWORD)v30;
    if (v86)
    {
      uint64_t v87 = swift_slowAlloc(12LL, -1LL);
      uint64_t v88 = v21;
      uint64_t v192 = 0LL;
      uint64_t v89 = (uint8_t *)v87;
      uint64_t v90 = swift_slowAlloc(32LL, -1LL);
      v218 = (char *)v90;
      *(_DWORD *)uint64_t v89 = v188;
      uint64_t v191 = v89 + 4;
      type metadata accessor for SiriNLUTypesPrintUtils(0LL);
      v217[2] = v88;
      v217[3] = sub_7D7C( (unint64_t *)&unk_5C180,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserStatedTask,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserStatedTask);
      uint64_t v91 = sub_8390(&v216);
      v82((unint64_t)v91, (char *)v26, v88);
      uint64_t v92 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)(&v216);
      unint64_t v94 = v93;
      sub_6CEC(&v216);
      uint64_t v216 = sub_24BA0(v92, v94, (uint64_t *)&v218);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v189, v191, v89 + 12);
      swift_bridgeObjectRelease(v94);
      uint64_t v95 = *(void (**)(void))(v81 + 8);
      ((void (*)(unint64_t, char *))v95)(v26, v88);
      _os_log_impl( &dword_0,  v84,  v85,  "VerbEntityDisambiguationFlow: comparing to offered userStatedTask %s",  v89,  0xCu);
      swift_arrayDestroy(v90, 1LL, v187);
      swift_slowDealloc(v90, -1LL, -1LL);
      uint64_t v25 = v192;
      uint64_t v75 = v190;
      swift_slowDealloc(v89, -1LL, -1LL);
    }

    else
    {
      uint64_t v95 = *(void (**)(void))(v81 + 8);
      ((void (*)(unint64_t, char *))v95)(v26, v21);
    }

    unint64_t v26 = v199;
    uint64_t v96 = v194;
    uint64_t v97 = v215;
    uint64_t v98 = UsoTask.verbString.getter();
    unint64_t v100 = v99;
    if (v193) {
      goto LABEL_30;
    }
    uint64_t v101 = v98;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v96, v26, 0x627265566F6ELL, 0xE600000000000000LL, 0LL) & 1) != 0) {
      goto LABEL_30;
    }
    if (v96 != v101 || (unint64_t v102 = v26, v26 != v100))
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v96, v26, v101, v100, 0LL) & 1) == 0)
      {
        swift_bridgeObjectRetain_n(v26, 2LL);
        uint64_t v141 = swift_bridgeObjectRetain(v100);
        uint64_t v142 = (os_log_s *)Logger.logObject.getter(v141);
        os_log_type_t v143 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v142, v143))
        {
          uint64_t v144 = swift_slowAlloc(22LL, -1LL);
          uint64_t v192 = swift_slowAlloc(64LL, -1LL);
          uint64_t v216 = v192;
          *(_DWORD *)uint64_t v144 = v184;
          swift_bridgeObjectRetain(v26);
          v218 = (char *)sub_24BA0(v194, v26, &v216);
          uint64_t v145 = v183;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v183, v144 + 4, v144 + 12);
          swift_bridgeObjectRelease_n(v26, 3LL);
          *(_WORD *)(v144 + 1sub_6CEC(v0 + 2) = 2080;
          swift_bridgeObjectRetain(v100);
          v218 = (char *)sub_24BA0(v101, v100, &v216);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v145, v144 + 14, v144 + 22);
          swift_bridgeObjectRelease_n(v100, 3LL);
          _os_log_impl( &dword_0,  v142,  v143,  "VerbEntityDisambiguationFlow: response verb %s does not match offered verb %s",  (uint8_t *)v144,  0x16u);
          unint64_t v26 = v192;
          swift_arrayDestroy(v192, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v26, -1LL, -1LL);
          swift_slowDealloc(v144, -1LL, -1LL);

          swift_release(v215);
          swift_release(v214);
          uint64_t v24 = v190;
        }

        else
        {
          swift_bridgeObjectRelease_n(v26, 2LL);
          swift_bridgeObjectRelease_n(v100, 2LL);

          swift_release(v215);
          swift_release(v214);
          uint64_t v24 = v75;
        }

        uint64_t v21 = (char *)v206;
        v95();
        uint64_t v65 = v209;
        unint64_t v58 = v208;
        a1 = v212;
        (*(void (**)(char *, uint64_t))(v208 + 8))(v209, v212);
        uint64_t v33 = v211;
        char v106 = v213;
        goto LABEL_117;
      }

uint64_t sub_42884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = a2;
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions(0LL);
  uint64_t v70 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v65 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v7);
  uint64_t v69 = (char *)&v64 - v8;
  uint64_t v68 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  uint64_t v9 = *(void *)(v68 - 8);
  __chkstk_darwin(v68, v10);
  uint64_t v71 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  uint64_t v80 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v64 - v18;
  uint64_t v77 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0LL);
  uint64_t v20 = *(void *)(v77 - 8);
  uint64_t v22 = __chkstk_darwin(v77, v21);
  uint64_t v75 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v76 = (char *)&v64 - v26;
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v78 = v9;
  uint64_t v67 = v3;
  if (v27)
  {
    uint64_t v28 = *(void *)(type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL) - 8);
    uint64_t v29 = a1 + ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    uint64_t v72 = *(void *)(v28 + 72);
    uint64_t v64 = a1;
    uint64_t v30 = swift_bridgeObjectRetain(a1);
    uint64_t v81 = _swiftEmptyArrayStorage;
    uint64_t v32 = v76;
    uint64_t v31 = v77;
    uint64_t v33 = v80;
    uint64_t v73 = v20;
    uint64_t v74 = v19;
    do
    {
      uint64_t v79 = v29;
      uint64_t v80 = v27;
      uint64_t v34 = ActionParaphrase.VerbEntityParaphrase.userStatedTask.getter(v30);
      Siri_Nlu_External_UserDialogAct.init()(v34);
      uint64_t v35 = v75;
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v75, v32, v31);
      Siri_Nlu_External_UserDialogAct.userStatedTask.setter(v35);
      uint64_t v36 = v16;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v16, v19, v12);
      unint64_t v37 = (unint64_t)v81;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v81);
      unint64_t v39 = v37;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        unint64_t v39 = sub_4429C( 0,  *(void *)(v37 + 16) + 1LL,  1,  v37,  &qword_5AD38,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
      }
      unint64_t v41 = *(void *)(v39 + 16);
      unint64_t v40 = *(void *)(v39 + 24);
      uint64_t v42 = v80;
      if (v41 >= v40 >> 1) {
        unint64_t v39 = sub_4429C( v40 > 1,  v41 + 1,  1,  v39,  &qword_5AD38,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
      }
      uint64_t v81 = (void *)v39;
      *(void *)(v39 + 16) = v41 + 1;
      unint64_t v43 = v39
      uint64_t v16 = v36;
      (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v43, v36, v12);
      uint64_t v19 = v74;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v74, v12);
      uint64_t v20 = v73;
      uint64_t v32 = v76;
      uint64_t v31 = v77;
      uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v76, v77);
      uint64_t v29 = v79 + v72;
      uint64_t v27 = v42 - 1;
    }

    while (v27);
    uint64_t v44 = v78;
    uint64_t v25 = swift_bridgeObjectRelease(v64);
    uint64_t v3 = v67;
    uint64_t v45 = v81;
  }

  else
  {
    uint64_t v44 = v9;
    uint64_t v45 = _swiftEmptyArrayStorage;
  }

  uint64_t v46 = v71;
  uint64_t v47 = Siri_Nlu_External_SystemDialogAct.init()(v25);
  uint64_t v48 = v69;
  Siri_Nlu_External_SystemGaveOptions.init()(v47);
  Siri_Nlu_External_SystemGaveOptions.choices.setter(v45);
  unint64_t v49 = v65;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v65, v48, v3);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter(v49);
  uint64_t v50 = v68;
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v51 = type metadata accessor for Logger(0LL);
  uint64_t v52 = sub_72B4(v51, (uint64_t)qword_5D478);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v56 = swift_slowAlloc(32LL, -1LL);
    uint64_t v85 = v56;
    *(_DWORD *)uint64_t v55 = 136315138;
    type metadata accessor for SiriNLUTypesPrintUtils(0LL);
    swift_beginAccess(v71, v82, 0LL, 0LL);
    v84[2] = v50;
    v84[3] = sub_7D7C( (unint64_t *)&unk_5C170,  (uint64_t (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemDialogAct,  (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemDialogAct);
    uint64_t v57 = sub_8390(&v83);
    (*(void (**)(void *, char *, uint64_t))(v78 + 16))(v57, v71, v50);
    uint64_t v58 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)(&v83);
    unint64_t v60 = v59;
    sub_6CEC(&v83);
    uint64_t v83 = sub_24BA0(v58, v60, &v85);
    uint64_t v61 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v55 + 4, v55 + 12);
    uint64_t v50 = v68;
    swift_bridgeObjectRelease(v60);
    _os_log_impl(&dword_0, v53, v54, "VerbEntityDisambiguationFlow: NLUSystemDialogAct: %s", v55, 0xCu);
    swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    unint64_t v62 = v55;
    uint64_t v46 = v71;
    swift_slowDealloc(v62, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v67);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v3);
    uint64_t v61 = v44;
  }

  swift_beginAccess(v46, &v83, 0LL, 0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v66, v46, v50);
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v46, v50);
}

uint64_t sub_42E90(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  uint64_t v3 = sub_72E4((uint64_t *)&unk_5A5A0);
  v2[22] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for NLContextUpdate(0LL);
  v2[23] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[24] = v5;
  v2[25] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0LL);
  v2[26] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[27] = v7;
  v2[28] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  v2[29] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[30] = v9;
  v2[31] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TemplatingResult(0LL);
  v2[32] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[33] = v11;
  v2[34] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for TemplatingSection(0LL);
  v2[35] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[36] = v13;
  v2[37] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = (*(void *)(*(void *)(sub_72E4((uint64_t *)&unk_5C0E0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[38] = swift_task_alloc(v14);
  v2[39] = swift_task_alloc(v14);
  unint64_t v15 = (*(void *)(*(void *)(sub_72E4(&qword_5A3E8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[40] = swift_task_alloc(v15);
  v2[41] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL);
  v2[42] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[43] = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[44] = swift_task_alloc(v18);
  v2[45] = swift_task_alloc(v18);
  return swift_task_switch(sub_43054, 0LL, 0LL);
}

uint64_t sub_43054()
{
  if (qword_59DD8 != -1) {
    swift_once(&qword_59DD8, sub_34328);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_72B4(v1, (uint64_t)qword_5D478);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "VerbEntityDisambiguationFlow: generating output", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 312);

  PluginAction.actionParaphrase.getter(v7);
  uint64_t v8 = type metadata accessor for ActionParaphrase(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1LL, v8);
  uint64_t v12 = *(void *)(v0 + 336);
  uint64_t v13 = *(void *)(v0 + 344);
  unint64_t v14 = (uint64_t *)(v0 + 328);
  uint64_t v15 = *(void *)(v0 + 328);
  uint64_t v16 = *(void *)(v0 + 312);
  if (v11 == 1)
  {
    sub_73D8(*(void *)(v0 + 312), (uint64_t *)&unk_5C0E0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, 1LL, 1LL, v12);
LABEL_12:
    sub_73D8(*v14, &qword_5A3E8);
    unint64_t v28 = sub_44190();
    uint64_t v78 = swift_allocError(&type metadata for AlternativeQuestionError, v28, 0LL, 0LL);
    swift_willThrow(v78);
    uint64_t v29 = *(void *)(v0 + 352);
    uint64_t v31 = *(void *)(v0 + 320);
    uint64_t v30 = *(void *)(v0 + 328);
    uint64_t v33 = *(void *)(v0 + 304);
    uint64_t v32 = *(void *)(v0 + 312);
    uint64_t v34 = *(void *)(v0 + 296);
    uint64_t v35 = *(void *)(v0 + 272);
    uint64_t v36 = *(void *)(v0 + 248);
    uint64_t v37 = *(void *)(v0 + 224);
    uint64_t v80 = *(void *)(v0 + 200);
    uint64_t v82 = *(void *)(v0 + 176);
    swift_task_dealloc(*(void *)(v0 + 360));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  ActionParaphrase.verbEntityParaphrase.getter();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v17(v16, v8);
  unint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v18(v15, 1LL, v12) == 1) {
    goto LABEL_12;
  }
  uint64_t v19 = *(void *)(v0 + 304);
  uint64_t v20 = *(uint64_t (**)(void, void, void))(*(void *)(v0 + 344) + 32LL);
  uint64_t v21 = v20(*(void *)(v0 + 360), *(void *)(v0 + 328), *(void *)(v0 + 336));
  PluginAction.actionParaphrase.getter(v21);
  if (v10(v19, 1LL, v8) == 1)
  {
    uint64_t v22 = *(void *)(v0 + 336);
    uint64_t v23 = *(void *)(v0 + 344);
    uint64_t v24 = *(void *)(v0 + 320);
    sub_73D8(*(void *)(v0 + 304), (uint64_t *)&unk_5C0E0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v24, 1LL, 1LL, v22);
LABEL_11:
    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8LL))(*(void *)(v0 + 360), *(void *)(v0 + 336));
    unint64_t v14 = (uint64_t *)(v0 + 320);
    goto LABEL_12;
  }

  uint64_t v25 = *(void *)(v0 + 336);
  uint64_t v26 = *(void *)(v0 + 320);
  uint64_t v27 = *(void *)(v0 + 304);
  ActionParaphrase.verbEntityParaphrase.getter();
  v17(v27, v8);
  if (v18(v26, 1LL, v25) == 1) {
    goto LABEL_11;
  }
  uint64_t v39 = *(void *)(v0 + 296);
  uint64_t v40 = *(void *)(v0 + 168);
  v20(*(void *)(v0 + 352), *(void *)(v0 + 320), *(void *)(v0 + 336));
  unint64_t v41 = sub_73B4((void *)(v40 + 16), *(void *)(v40 + 40));
  uint64_t v42 = ActionParaphrase.VerbEntityParaphrase.dialog.getter(v41);
  uint64_t v44 = v43;
  uint64_t v45 = ActionParaphrase.VerbEntityParaphrase.dialog.getter(v42);
  uint64_t v47 = v46;
  sub_3BAA0(v42, v44, v45, v46, 0xD000000000000029LL, 0x8000000000049FE0LL, v39);
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v47);
  uint64_t v48 = *(void *)(v0 + 352);
  uint64_t v49 = *(void *)(v0 + 336);
  uint64_t v50 = *(void *)(v0 + 344);
  uint64_t v51 = *(void *)(v0 + 288);
  uint64_t v52 = *(void *)(v0 + 360);
  uint64_t v53 = *(void *)(v0 + 280);
  uint64_t v54 = *(void *)(v0 + 248);
  uint64_t v77 = *(void *)(v0 + 296);
  uint64_t v79 = *(void *)(v0 + 240);
  uint64_t v81 = *(void *)(v0 + 232);
  uint64_t v55 = sub_72E4(&qword_5B428);
  uint64_t v56 = *(unsigned __int8 *)(v51 + 80);
  uint64_t v57 = (v56 + 32) & ~v56;
  uint64_t v58 = swift_allocObject(v55, v57 + *(void *)(v51 + 72), v56 | 7);
  *(_OWORD *)(v58 + 16) = xmmword_47AE0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v58 + v57, v77, v53);
  (*(void (**)(uint64_t, void, uint64_t))(v79 + 104))( v54,  enum case for BehaviorAfterSpeaking.listen(_:),  v81);
  TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)( 0xD000000000000027LL,  0x800000000004A010LL,  v58,  v54);
  uint64_t v59 = sub_72E4(&qword_5C100);
  uint64_t v60 = *(void *)(v50 + 72);
  LODWORD(v61) = *(_DWORD *)(v50 + 80);
  *(_DWORD *)(v0 + 40sub_6CEC((void *)v0 + 8) = v61;
  uint64_t v61 = v61;
  uint64_t v62 = (v61 + 32) & ~v61;
  uint64_t v63 = swift_allocObject(v59, v62 + 2 * v60, v61 | 7LL);
  *(void *)(v0 + 36sub_6CEC((void *)v0 + 8) = v63;
  *(_OWORD *)(v63 + 16) = xmmword_47A40;
  uint64_t v64 = v63 + v62;
  uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
  v65(v64, v52, v49);
  v65(v64 + v60, v48, v49);
  uint64_t v66 = *(void *)(v63 + 16);
  if (v66)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v66);
    uint64_t v67 = 0LL;
    do
    {
      uint64_t v68 = v67 + 1;
      id v69 = sub_2DA80(v67);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v70 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v70);
      uint64_t v71 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v70, v69);
      specialized ContiguousArray._endMutation()(v71);
      uint64_t v67 = v68;
    }

    while (v66 != v68);
  }

  *(void *)(v0 + 376) = _swiftEmptyArrayStorage;
  uint64_t v72 = *(void *)(v0 + 168);
  uint64_t v73 = swift_allocObject(&unk_56290, 32LL, 7LL);
  *(void *)(v73 + 16) = v72;
  *(void *)(v73 + 24) = _swiftEmptyArrayStorage;
  uint64_t v74 = swift_allocObject(&unk_562B8, 32LL, 7LL);
  *(void *)(v0 + 384) = v74;
  *(void *)(v74 + 16) = &unk_5C110;
  *(void *)(v74 + 24) = v73;
  uint64_t v75 = unk_5C12C;
  uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_5C128 + dword_5C128);
  swift_retain(v72);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  uint64_t v76 = (void *)swift_task_alloc(v75);
  *(void *)(v0 + 39sub_6CEC(v0 + 2) = v76;
  *uint64_t v76 = v0;
  v76[1] = sub_4368C;
  return v83((uint64_t)&unk_5C120, v74, v63);
}

uint64_t sub_4368C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = v2;
  *(void *)(v3 + 144) = a1;
  *(void *)(v3 + 15sub_6CEC(v0 + 2) = v1;
  uint64_t v5 = *(void *)(v3 + 384);
  uint64_t v4 = *(void *)(v3 + 392);
  *(void *)(v3 + 400) = v1;
  swift_task_dealloc(v4);
  swift_release(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v3 + 368);
    uint64_t v7 = *(unsigned __int8 *)(v3 + 408);
    uint64_t v8 = *(void *)(v3 + 336);
    swift_bridgeObjectRelease(*(void *)(v3 + 376));
    swift_setDeallocating(v6);
    swift_arrayDestroy(v6 + ((v7 + 32) & ~v7), *(void *)(v6 + 16), v8);
    swift_deallocClassInstance(v6, 32LL, 7LL);
    uint64_t v9 = sub_43B98;
  }

  else
  {
    uint64_t v9 = sub_4374C;
  }

  return swift_task_switch(v9, 0LL, 0LL);
}

uint64_t sub_4374C()
{
  uint64_t v1 = *(void *)(v0 + 376);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v26 = *(void *)(v0 + 376);
    }
    else {
      uint64_t v26 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 376));
    uint64_t v27 = sub_72E4((uint64_t *)&unk_5C130);
    uint64_t v4 = _bridgeCocoaArray<A>(_:)(v26, v27);
    swift_bridgeObjectRelease(v1);
    uint64_t v3 = *(void *)(v0 + 376);
  }

  else
  {
    uint64_t v2 = swift_bridgeObjectRetain(*(void *)(v0 + 376));
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v2);
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v4 = v3;
  }

  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 368);
  uint64_t v43 = *(void *)(v0 + 360);
  uint64_t v40 = *(void *)(v0 + 344);
  uint64_t v41 = *(void *)(v0 + 336);
  uint64_t v42 = *(void *)(v0 + 352);
  uint64_t v44 = *(void *)(v0 + 328);
  uint64_t v45 = *(void *)(v0 + 320);
  uint64_t v46 = *(void *)(v0 + 312);
  uint64_t v47 = *(void *)(v0 + 304);
  uint64_t v38 = *(void *)(v0 + 280);
  uint64_t v39 = *(void *)(v0 + 296);
  uint64_t v34 = *(void *)(v0 + 272);
  uint64_t v35 = *(void *)(v0 + 264);
  uint64_t v36 = *(void *)(v0 + 256);
  uint64_t v37 = *(void *)(v0 + 288);
  uint64_t v48 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 200);
  uint64_t v9 = *(void *)(v0 + 208);
  uint64_t v31 = *(void *)(v0 + 184);
  uint64_t v29 = *(void *)(v0 + 192);
  uint64_t v30 = *(void *)(v0 + 176);
  uint64_t v33 = *(void **)(v0 + 160);
  swift_bridgeObjectRelease(v3);
  sub_18BE0(0LL, &qword_5A870, &OBJC_CLASS___SACardSnippet_ptr);
  unint64_t v28 = (void *)static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)( v5,  1LL,  0LL,  0LL,  v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  sub_42884(v6, v8);
  uint64_t v11 = swift_bridgeObjectRelease(v6);
  NLContextUpdate.init()(v11);
  uint64_t v12 = sub_72E4(&qword_5A920);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v32 = v7;
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = swift_allocObject(v12, v14 + *(void *)(v7 + 72), v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_47AE0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v15 + v14, v8, v9);
  uint64_t v16 = NLContextUpdate.nluSystemDialogActs.setter(v15);
  uint64_t v17 = static Device.current.getter(v16);
  static Device.current.getter(v17);
  uint64_t v18 = *(void *)(v0 + 80);
  uint64_t v19 = *(void *)(v0 + 88);
  sub_73B4((void *)(v0 + 56), v18);
  LOBYTE(v1sub_6CEC((void *)v0 + 8) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v18, v19);
  uint64_t v20 = sub_72E4((uint64_t *)&unk_5A860);
  uint64_t v21 = swift_allocObject(v20, 40LL, 7LL);
  *(_OWORD *)(v21 + 16) = xmmword_47B90;
  *(void *)(v21 + 3sub_6CEC(v0 + 2) = v28;
  uint64_t v49 = v21;
  specialized Array._endMutation()(v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v30, v10, v31);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v30, 0LL, 1LL, v31);
  uint64_t v22 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 11sub_6CEC(v0 + 2) = 0u;
  *(void *)(v0 + 12sub_6CEC((void *)v0 + 8) = 0LL;
  *(_OWORD *)(v0 + 96) = 0u;
  v33[3] = v22;
  v33[4] = &protocol witness table for AceOutput;
  sub_8390(v33);
  id v23 = v28;
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v34,  v0 + 16,  v18 & 1,  v49,  1LL,  1LL,  v30,  _swiftEmptyArrayStorage,  v0 + 96);
  swift_bridgeObjectRelease(v49);

  sub_73D8(v0 + 96, (uint64_t *)&unk_5C140);
  sub_73D8(v30, (uint64_t *)&unk_5A5A0);
  sub_6CEC((void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v10, v31);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v24(v42, v41);
  v24(v43, v41);
  sub_6CEC((void *)(v0 + 56));
  swift_task_dealloc(v43);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v39);
  swift_task_dealloc(v34);
  swift_task_dealloc(v48);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_43B98()
{
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v6 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 280);
  (*(void (**)(void, void))(*(void *)(v0 + 264) + 8LL))(*(void *)(v0 + 272), *(void *)(v0 + 256));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v1, v3);
  v8(v2, v3);
  uint64_t v9 = *(void *)(v0 + 352);
  uint64_t v11 = *(void *)(v0 + 320);
  uint64_t v10 = *(void *)(v0 + 328);
  uint64_t v13 = *(void *)(v0 + 304);
  uint64_t v12 = *(void *)(v0 + 312);
  uint64_t v14 = *(void *)(v0 + 296);
  uint64_t v15 = *(void *)(v0 + 272);
  uint64_t v16 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 224);
  uint64_t v19 = *(void *)(v0 + 200);
  uint64_t v20 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_43CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a2;
  void v4[4] = a4;
  void v4[2] = a1;
  return swift_task_switch(sub_43CD4, 0LL, 0LL);
}

unint64_t sub_43CD4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t result = *(void *)(v0 + 16);
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v1);
    goto LABEL_5;
  }

  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL)) > result)
  {
    id v3 = *(id *)(v1 + 8 * result + 32);
LABEL_5:
    uint64_t v4 = v3;
    id v5 = sub_45C54(*(void *)(v0 + 24), (uint64_t)v3);

    return (*(uint64_t (**)(id))(v0 + 8))(v5);
  }

  __break(1u);
  return result;
}

uint64_t sub_43D74(uint64_t a1, uint64_t *a2, int *a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = *a2;
  uint64_t v6 = (char *)a2 + *(int *)(sub_72E4(&qword_5C150) + 48);
  uint64_t v9 = (uint64_t (*)(uint64_t, char *))((char *)a3 + *a3);
  uint64_t v7 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + 24) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_43E00;
  return v9(v5, v6);
}

uint64_t sub_43E00(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_43E5C()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_firstAction];
  uint64_t v2 = type metadata accessor for PluginAction(0LL);
  uint64_t v3 = *(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL);
  v3(v1, v2);
  v3(&v0[OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_secondAction], v2);
  v3(&v0[OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_fallBackAction], v2);
  sub_45E4C((uint64_t)&v0[OBJC_IVAR____TtC17CAMRootFlowPlugin28VerbEntityDisambiguationFlow_state]);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_43F08()
{
  return type metadata accessor for VerbEntityDisambiguationFlow(0LL);
}

uint64_t type metadata accessor for VerbEntityDisambiguationFlow(uint64_t a1)
{
  return sub_6B98(a1, (uint64_t *)&unk_5BF18, (uint64_t)&nominal type descriptor for VerbEntityDisambiguationFlow);
}

uint64_t sub_43F24(uint64_t a1)
{
  v5[0] = "(";
  v5[1] = "(";
  void v5[2] = "(";
  uint64_t result = type metadata accessor for PluginAction(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v6 = *(void *)(result - 8) + 64LL;
    uint64_t v7 = v6;
    uint64_t v8 = v6;
    uint64_t result = type metadata accessor for VerbEntityDisambiguationFlow.State(319LL);
    if (v4 <= 0x3F)
    {
      uint64_t v9 = *(void *)(result - 8) + 64LL;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for VerbEntityDisambiguationFlow.State(uint64_t a1)
{
  return sub_6B98(a1, qword_5C0B8, (uint64_t)&nominal type descriptor for VerbEntityDisambiguationFlow.State);
}

uint64_t sub_43FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_43FE0);
}

uint64_t sub_43FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5C040);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_44030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4403C);
}

uint64_t sub_4403C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_72E4(&qword_5C040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, v5, a3, v6);
}

BOOL sub_44094(uint64_t a1)
{
  return sub_3F274(a1);
}

uint64_t sub_440B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for VerbEntityDisambiguationFlow(0LL);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v7, a4);
}

uint64_t sub_44114(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_5BF2C);
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_7240;
  return sub_402F8(a1);
}

uint64_t sub_44168(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for VerbEntityDisambiguationFlow(0LL);
  return Flow<>.exitValue.getter(v3, a2);
}

unint64_t sub_44190()
{
  unint64_t result = qword_5C0F0;
  if (!qword_5C0F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_48B44, &type metadata for AlternativeQuestionError);
    atomic_store(result, (unint64_t *)&qword_5C0F0);
  }

  return result;
}

Swift::Int sub_441D4()
{
  return Hasher._finalize()();
}

void sub_44214()
{
}

Swift::Int sub_44238(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_44274(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_4429C(a1, a2, a3, a4, &qword_5C1F8, (uint64_t (*)(void))&type metadata accessor for USOParse);
}

uint64_t sub_44288(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_4429C( a1,  a2,  a3,  a4,  &qword_5C100,  (uint64_t (*)(void))&type metadata accessor for ActionParaphrase.VerbEntityParaphrase);
}

uint64_t sub_4429C( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_72E4(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_45B3C(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

void *sub_444A8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_72E4(&qword_5C1B0);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      _OWORD v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_44AFC(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_445B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_72E4(&qword_5C1C0);
      uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      _OWORD v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_45494(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_446D8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_72E4(&qword_5C1E0);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      _OWORD v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_450E0(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_447E4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 80) = a1;
  uint64_t v7 = *(void *)(a6 + 32);
  __int128 v8 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a6;
  *(_OWORD *)(v6 + 3sub_6CEC((void *)v0 + 2) = v8;
  *(void *)(v6 + 4sub_6CEC((void *)v0 + 8) = v7;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  uint64_t v9 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v6 + 8sub_6CEC((void *)v0 + 8) = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_4486C;
  return v11(v6 + 56, v6 + 16);
}

uint64_t sub_4486C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_448EC;
  }
  else {
    uint64_t v3 = sub_448D0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_448D0()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + 16) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_448EC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_448F8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 4sub_6CEC((void *)v0 + 8) = a1;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  __int128 v8 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v6 + 56) = v8;
  *__int128 v8 = v6;
  v8[1] = sub_44970;
  return v10(v6 + 16, a6);
}

uint64_t sub_44970()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_449F4;
  }
  else {
    uint64_t v3 = sub_449D4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_449D4()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_449F4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_44A00(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a1;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  __int128 v8 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v6 + 3sub_6CEC((void *)v0 + 2) = v8;
  *__int128 v8 = v6;
  v8[1] = sub_44A78;
  return v10(v6 + 16, a6);
}

uint64_t sub_44A78()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 4Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_44AF0;
  }
  else {
    uint64_t v3 = sub_44ADC;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_44ADC()
{
  **(void **)(v0 + 24) = *(void *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_44AF0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_44AFC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_44BEC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_44C18(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = (void *)swift_task_alloc(dword_5C10C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_44C8C;
  v7[3] = a2;
  v7[4] = v6;
  uint64_t v7[2] = a1;
  return swift_task_switch(sub_43CD4, 0LL, 0LL);
}

uint64_t sub_44C8C(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_44CDC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_44D00(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc(dword_5C11C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_197FC;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_5C118 + dword_5C118))(a1, a2, v6);
}

void *sub_44D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  uint64_t v54 = type metadata accessor for PluginAction(0LL);
  uint64_t v4 = *(void *)(v54 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v54, v6);
  uint64_t v53 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_72E4((uint64_t *)&unk_5A960);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v60 = _swiftEmptyArrayStorage;
  sub_2CF34(0, v11, 0);
  uint64_t v46 = a1;
  if (v11)
  {
    uint64_t v12 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v51 = *(void *)(v4 + 72);
    uint64_t v13 = type metadata accessor for TaskPriority(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    uint64_t v49 = (v12 + 48) & ~v12;
    uint64_t v50 = v15;
    uint64_t v48 = v49 + v5;
    uint64_t v47 = v12 | 7;
    uint64_t v16 = a1;
    uint64_t v17 = a1 + ((v12 + 32) & ~v12);
    swift_bridgeObjectRetain(v16);
    uint64_t v52 = v4;
    while (1)
    {
      int64_t v58 = v11;
      v50(v10, 1LL, 1LL, v13);
      uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      uint64_t v19 = v14;
      uint64_t v20 = v10;
      uint64_t v21 = v13;
      uint64_t v22 = v53;
      uint64_t v23 = v54;
      uint64_t v57 = v17;
      v18(v53, v17, v54);
      unint64_t v24 = (void *)swift_allocObject(&unk_56330, v48, v47);
      _OWORD v24[2] = 0LL;
      unint64_t v25 = v24 + 2;
      uint64_t v26 = v55;
      uint64_t v27 = v56;
      v24[3] = 0LL;
      void v24[4] = v26;
      v24[5] = v27;
      unint64_t v28 = v22;
      uint64_t v13 = v21;
      uint64_t v10 = v20;
      uint64_t v14 = v19;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))((char *)v24 + v49, v28, v23);
      int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v10, 1LL, v13);
      uint64_t v30 = swift_retain(v27);
      if (v29 == 1)
      {
        sub_73D8((uint64_t)v10, (uint64_t *)&unk_5A960);
        uint64_t v31 = 0LL;
        uint64_t v32 = *v25;
        if (!*v25) {
          goto LABEL_8;
        }
      }

      else
      {
        unsigned __int8 v40 = TaskPriority.rawValue.getter(v30);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v13);
        uint64_t v31 = v40;
        uint64_t v32 = *v25;
        if (!*v25)
        {
LABEL_8:
          uint64_t v39 = 0LL;
          goto LABEL_9;
        }
      }

      uint64_t v33 = v24[3];
      uint64_t ObjectType = swift_getObjectType(v32);
      swift_unknownObjectRetain(v32, v35);
      uint64_t v36 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v33);
      uint64_t v38 = v37;
      swift_unknownObjectRelease(v32);
      if (!(v38 | v36)) {
        goto LABEL_8;
      }
      v59[0] = 0LL;
      v59[1] = 0LL;
      uint64_t v39 = v59;
      v59[2] = v36;
      v59[3] = v38;
LABEL_9:
      uint64_t v41 = swift_task_create( v31 | 0x1C00,  v39,  &type metadata for AppNameDisambiguationFlow.AppDisambiguationDisplayInfo,  &unk_5C1F0,  v24);
      uint64_t v42 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native(v60) & 1) == 0)
      {
        sub_2CF34(0, v42[2] + 1LL, 1);
        uint64_t v42 = v60;
      }

      uint64_t v4 = v52;
      unint64_t v44 = v42[2];
      unint64_t v43 = v42[3];
      if (v44 >= v43 >> 1)
      {
        sub_2CF34(v43 > 1, v44 + 1, 1);
        uint64_t v42 = v60;
      }

      v42[2] = v44 + 1;
      v42[v44 + 4] = v41;
      uint64_t v17 = v57 + v51;
      int64_t v11 = v58 - 1;
      if (v58 == 1) {
        goto LABEL_16;
      }
    }
  }

  uint64_t v42 = v60;
  swift_bridgeObjectRetain(a1);
LABEL_16:
  swift_bridgeObjectRelease(v46);
  return v42;
}

uint64_t sub_450E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

void *sub_451D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v4 = sub_72E4((uint64_t *)&unk_5A960);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = _swiftEmptyArrayStorage;
  sub_2CE78(0, 0LL, 0);
  uint64_t v8 = v49;
  uint64_t v9 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v41 = v9;
  uint64_t v38 = a1;
  if (v9)
  {
    uint64_t v10 = type metadata accessor for TaskPriority(0LL);
    uint64_t v11 = 0LL;
    uint64_t v40 = *(void *)(v10 - 8);
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
    uint64_t v12 = (uint64_t *)(a1 + 56);
    uint64_t v13 = v43;
    do
    {
      uint64_t v47 = v8;
      uint64_t v14 = *(v12 - 1);
      uint64_t v15 = *v12;
      uint64_t v16 = *(v12 - 2);
      uint64_t v44 = *(v12 - 3);
      uint64_t v45 = v14;
      v39(v7, 1LL, 1LL, v10);
      uint64_t v17 = (void *)swift_allocObject(&unk_56308, 88LL, 7LL);
      v17[2] = 0LL;
      uint64_t v18 = v17 + 2;
      uint64_t v19 = v42;
      v17[3] = 0LL;
      v17[4] = v19;
      void v17[5] = v13;
      v17[6] = v11;
      uint64_t v46 = v11;
      v17[7] = v44;
      v17[8] = v16;
      v17[9] = v45;
      v17[10] = v15;
      uint64_t v20 = v40;
      int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v7, 1LL, v10);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v15);
      uint64_t v22 = swift_retain(v13);
      if (v21 == 1)
      {
        sub_73D8((uint64_t)v7, (uint64_t *)&unk_5A960);
        uint64_t v23 = 0LL;
        uint64_t v24 = *v18;
        if (!v24) {
          goto LABEL_8;
        }
      }

      else
      {
        unsigned __int8 v32 = TaskPriority.rawValue.getter(v22);
        (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v10);
        uint64_t v23 = v32;
        uint64_t v24 = *v18;
        if (!v24)
        {
LABEL_8:
          uint64_t v31 = 0LL;
          goto LABEL_9;
        }
      }

      uint64_t v25 = v17[3];
      uint64_t ObjectType = swift_getObjectType(v24);
      swift_unknownObjectRetain(v24, v27);
      uint64_t v28 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v25);
      uint64_t v30 = v29;
      swift_unknownObjectRelease(v24);
      if (!(v30 | v28)) {
        goto LABEL_8;
      }
      v48[0] = 0LL;
      v48[1] = 0LL;
      uint64_t v31 = v48;
      _OWORD v48[2] = v28;
      v48[3] = v30;
LABEL_9:
      uint64_t v33 = swift_task_create(v23 | 0x1C00, v31, &type metadata for AppNameDisambiguationFlow.Card, &unk_5C1D0, v17);
      uint64_t v8 = v47;
      uint64_t v49 = v47;
      unint64_t v35 = v47[2];
      unint64_t v34 = v47[3];
      if (v35 >= v34 >> 1)
      {
        sub_2CE78(v34 > 1, v35 + 1, 1);
        uint64_t v8 = v49;
      }

      uint64_t v11 = v46 + 1;
      v12 += 4;
      v8[2] = v35 + 1;
      v8[v35 + 4] = v33;
    }

    while (v41 != v11);
  }

  swift_bridgeObjectRelease(v38);
  return v8;
}

uint64_t sub_45494(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 24 * a1 + 32;
  unint64_t v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_45588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v74 = a2;
  uint64_t v75 = a3;
  uint64_t v4 = sub_72E4((uint64_t *)&unk_5A960);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_72E4(&qword_5C150);
  uint64_t v72 = *(void *)(v8 - 8);
  uint64_t v73 = v8;
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v70 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  id v69 = (char *)&v61 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v68 = (uint64_t *)((char *)&v61 - v17);
  uint64_t v71 = v18;
  __chkstk_darwin(v16, v19);
  int v21 = (char *)&v61 - v20;
  uint64_t v78 = _swiftEmptyArrayStorage;
  sub_2CF8C(0, 0LL, 0);
  uint64_t v22 = v78;
  uint64_t v23 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v67 = v23;
  uint64_t v61 = a1;
  if (v23)
  {
    uint64_t v24 = type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL);
    uint64_t v25 = 0LL;
    uint64_t v26 = *(void *)(v24 - 8);
    uint64_t v27 = a1 + ((*(unsigned __int8 *)(v26 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    uint64_t v28 = *(void *)(v26 + 72);
    uint64_t v64 = v26;
    uint64_t v65 = v24;
    uint64_t v62 = *(void (**)(char *))(v26 + 16);
    uint64_t v63 = v28;
    uint64_t v66 = v21;
    uint64_t v29 = (uint64_t)v70;
    do
    {
      uint64_t v30 = v73;
      uint64_t v31 = &v69[*(int *)(v73 + 48)];
      uint64_t v76 = v27;
      uint64_t v32 = v65;
      v62(v31);
      uint64_t v33 = *(int *)(v30 + 48);
      uint64_t v34 = (uint64_t)v68;
      unint64_t v35 = (char *)v68 + v33;
      *uint64_t v68 = v25;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v35, v31, v32);
      sub_459AC(v34, (uint64_t)v21);
      uint64_t v36 = type metadata accessor for TaskPriority(0LL);
      uint64_t v37 = *(void *)(v36 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v7, 1LL, 1LL, v36);
      sub_18DBC((uint64_t)v21, v29, &qword_5C150);
      uint64_t v38 = *(unsigned __int8 *)(v72 + 80);
      uint64_t v39 = (v38 + 48) & ~v38;
      uint64_t v40 = (void *)swift_allocObject(&unk_562E0, v39 + v71, v38 | 7);
      v40[2] = 0LL;
      uint64_t v41 = v40 + 2;
      uint64_t v42 = v74;
      uint64_t v43 = v75;
      v40[3] = 0LL;
      v40[4] = v42;
      void v40[5] = v43;
      sub_459AC(v29, (uint64_t)v40 + v39);
      int v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v7, 1LL, v36);
      uint64_t v45 = swift_retain(v43);
      if (v44 == 1)
      {
        sub_73D8((uint64_t)v7, (uint64_t *)&unk_5A960);
        uint64_t v46 = 0LL;
      }

      else
      {
        unsigned __int8 v47 = TaskPriority.rawValue.getter(v45);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v36);
        uint64_t v46 = v47;
      }

      uint64_t v48 = *v41;
      int v21 = v66;
      if (*v41)
      {
        uint64_t v49 = v40[3];
        uint64_t ObjectType = swift_getObjectType(*v41);
        swift_unknownObjectRetain(v48, v51);
        uint64_t v52 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v49);
        uint64_t v54 = v53;
        swift_unknownObjectRelease(v48);
      }

      else
      {
        uint64_t v52 = 0LL;
        uint64_t v54 = 0LL;
      }

      uint64_t v55 = sub_18BE0(0LL, &qword_5A878, &OBJC_CLASS___SFCardSection_ptr);
      if (v54 | v52)
      {
        v77[0] = 0LL;
        v77[1] = 0LL;
        uint64_t v56 = v77;
        v77[2] = v52;
        v77[3] = v54;
      }

      else
      {
        uint64_t v56 = 0LL;
      }

      uint64_t v57 = swift_task_create(v46 | 0x1C00, v56, v55, &unk_5C160, v40);
      sub_73D8((uint64_t)v21, &qword_5C150);
      uint64_t v22 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
      {
        sub_2CF8C(0, v22[2] + 1LL, 1);
        uint64_t v22 = v78;
      }

      unint64_t v59 = v22[2];
      unint64_t v58 = v22[3];
      if (v59 >= v58 >> 1)
      {
        sub_2CF8C(v58 > 1, v59 + 1, 1);
        uint64_t v22 = v78;
      }

      ++v25;
      v22[2] = v59 + 1;
      v22[v59 + 4] = v57;
      uint64_t v27 = v76 + v63;
    }

    while (v67 != v25);
  }

  swift_bridgeObjectRelease(v61);
  return v22;
}

uint64_t sub_459AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_72E4(&qword_5C150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_459F4()
{
  uint64_t v1 = sub_72E4(&qword_5C150);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 40));
  uint64_t v7 = v0 + *(int *)(v1 + 48) + v4;
  uint64_t v8 = type metadata accessor for ActionParaphrase.VerbEntityParaphrase(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_45A8C(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_72E4(&qword_5C150) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = (int *)v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((v4 + 48) & ~v4);
  uint64_t v10 = (void *)swift_task_alloc(dword_5C15C);
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_197FC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_5C158 + dword_5C158))( a1,  v5,  v6,  v7,  v8,  v9);
}

uint64_t sub_45B3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

id sub_45C54(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone(SFRowCardSection) init];
  uint64_t v4 = ActionParaphrase.VerbEntityParaphrase.label.getter();
  uint64_t v6 = v5;
  uint64_t v7 = (void *)static CasinoFactory.makeRichText(text:bold:maxLines:textColor:)(v4, v5, 1LL, 1LL, 0LL);
  swift_bridgeObjectRelease(v6);
  [v3 setLeadingText:v7];

  uint64_t v8 = sub_72E4((uint64_t *)&unk_5A860);
  uint64_t v9 = swift_allocObject(v8, 40LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_47B90;
  id v10 = v3;
  uint64_t v11 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)(a2);
  *(void *)(v9 + 3sub_6CEC((void *)v0 + 2) = v11;
  specialized Array._endMutation()(v11);
  sub_18BE0(0LL, &qword_5A898, &OBJC_CLASS___SFAbstractCommand_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  [v10 setCommands:isa];

  return v10;
}

uint64_t sub_45D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VerbEntityDisambiguationFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_45DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VerbEntityDisambiguationFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_45E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VerbEntityDisambiguationFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_45E4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VerbEntityDisambiguationFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_45E88()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_45EC4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_5C1CC);
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_197FC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_5C1C8 + dword_5C1C8))( a1,  v4,  v5,  v6,  v7,  (uint64_t)(v1 + 6));
}

uint64_t sub_45F58()
{
  uint64_t v1 = type metadata accessor for PluginAction(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_45FD4(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for PluginAction(0LL) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = (int *)v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((v4 + 48) & ~v4);
  id v10 = (void *)swift_task_alloc(dword_5C1EC);
  *(void *)(v2 + 16) = v10;
  *id v10 = v2;
  v10[1] = sub_7240;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_5C1E8 + dword_5C1E8))( a1,  v5,  v6,  v7,  v8,  v9);
}

uint64_t getEnumTagSinglePayload for AlternativeQuestionError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AlternativeQuestionError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_46114 + 4 * byte_489F0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_46134 + 4 * byte_489F5[v4]))();
  }
}

_BYTE *sub_46114(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_46134(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_4613C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_46144(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_4614C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_46154(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_46160()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for AlternativeQuestionError()
{
  return &type metadata for AlternativeQuestionError;
}

unint64_t sub_4617C()
{
  unint64_t result = qword_5C200;
  if (!qword_5C200)
  {
    unint64_t result = swift_getWitnessTable(&unk_48B1C, &type metadata for AlternativeQuestionError);
    atomic_store(result, (unint64_t *)&qword_5C200);
  }

  return result;
}