uint64_t SiriLinkFlowProvisionalLinkActionReadFrom(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t String;
  SiriLinkFlowProvisionalLinkActionParameter *v20;
  uint64_t result;
  _BYTE v22[16];
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0LL;
    while (1)
    {
      v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0LL;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v12 = v6 >> 3;
    if ((v6 >> 3) == 1)
    {
      String = PBReaderReadString(a2);
      v20 = (SiriLinkFlowProvisionalLinkActionParameter *)objc_claimAutoreleasedReturnValue(String);
      [a1 setIdentifier:v20];
    }

    else
    {
      if ((_DWORD)v12 != 3)
      {
        if ((_DWORD)v12 == 2)
        {
          v13 = 0;
          v14 = 0;
          v15 = 0LL;
          while (1)
          {
            v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0) {
              goto LABEL_36;
            }
            v13 += 7;
            v9 = v14++ >= 9;
            if (v9)
            {
              v18 = 0LL;
              goto LABEL_39;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            v18 = 0LL;
          }
          else {
            v18 = v15;
          }
LABEL_39:
          [a1 setPresentationStyle:v18];
        }

        else
        {
          result = PBReaderSkipValueWithTag(a2, v12);
          if (!(_DWORD)result) {
            return result;
          }
        }

        continue;
      }

      v20 = objc_alloc_init(&OBJC_CLASS___SiriLinkFlowProvisionalLinkActionParameter);
      if (!PBReaderPlaceMark(a2, v22)
        || !SiriLinkFlowProvisionalLinkActionParameterReadFrom(v20, a2))
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v22);
      if (v20) {
        [a1 addParameters:v20];
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SiriLinkFlowProvisionalLinkActionParameterReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t String = PBReaderReadString(a2);
      v13 = (void *)objc_claimAutoreleasedReturnValue(String);
      [a1 setName:v13];
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2, v6 >> 3);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_15:
  v18 = 0;
LABEL_16:

  return v18;
}

  v19 = 0;
LABEL_16:

  return v19;
}

  __break(1u);
}

    v12 += 32LL;
    if (!--v11)
    {
      swift_bridgeObjectRelease();
      a3 = v32;
      goto LABEL_23;
    }
  }

  v16 = v15;
  uint64_t result = outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(v15);
  if (v18)
  {
    v19 = result;
    v20 = v18;
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v13 = v23;
    }

    v21 = v13[2];
    if (v21 >= v13[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v13 = v24;
    }

    v13[2] = v21 + 1;
    v22 = &v13[2 * v21];
    v22[4] = v19;
    v22[5] = v20;

    goto LABEL_15;
  }

  __break(1u);
  return result;
}

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  v12 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v12, (uint64_t)static Logger.voiceCommands);
  v13 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_20_9(v13))
  {
    v14 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v14);
    OUTLINED_FUNCTION_51_17(&dword_0, v15, v16, "Unable to extract measurement component from parse");
    OUTLINED_FUNCTION_1_0(a1);
  }

  return 0LL;
}

uint64_t SiriLinkFlowProvisionalLinkActionCompletionReadFrom(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t String = PBReaderReadString(a2);
        v13 = (SiriLinkFlowProvisionalLinkAction *)objc_claimAutoreleasedReturnValue(String);
        [a1 setTargetBundle:v13];
        goto LABEL_32;
      case 2u:
        v13 = objc_alloc_init(&OBJC_CLASS___SiriLinkFlowProvisionalLinkAction);
        if (PBReaderPlaceMark(a2, v21) && (SiriLinkFlowProvisionalLinkActionReadFrom(v13, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v21);
          [a1 setAction:v13];
LABEL_32:

LABEL_37:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 3u:
        char v15 = 0;
        unsigned int v16 = 0;
        uint64_t v17 = 0LL;
        while (2)
        {
          unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v18 == -1LL || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
            v17 |= (unint64_t)(v19 & 0x7F) << v15;
            if (v19 < 0)
            {
              v15 += 7;
              BOOL v9 = v16++ >= 9;
              if (v9)
              {
                uint64_t v17 = 0LL;
                goto LABEL_36;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v17 = 0LL;
        }
LABEL_36:
        [a1 setIsSuccess:v17 != 0];
        goto LABEL_37;
      case 4u:
        uint64_t v20 = PBReaderReadString(a2);
        v13 = (SiriLinkFlowProvisionalLinkAction *)objc_claimAutoreleasedReturnValue(v20);
        [a1 setErrorDescription:v13];
        goto LABEL_32;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2, v6 >> 3);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_37;
    }
  }
}

LABEL_20:
  v23 = 0;
LABEL_21:

  return v23;
}

  __break(1u);
  return result;
}

      uint64_t v20 = String.lowercased()();
      if (v0[25])
      {
        v21 = String.lowercased()();
        if (v20._countAndFlagsBits == v21._countAndFlagsBits && v20._object == v21._object)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v20._object, 2LL);
          return 1LL;
        }

        v23 = _stringCompareWithSmolCheck(_:_:expecting:)( v20._countAndFlagsBits,  v20._object,  v21._countAndFlagsBits,  v21._object,  0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v23 & 1) != 0)
        {
LABEL_49:
          swift_bridgeObjectRelease();
          return 1LL;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      v24 = v0[27];
      v25 = *(void *)(v24 + 16);
      if (v25)
      {
        swift_bridgeObjectRetain_n(v24, 2LL);
        for (i = v24 + 40; ; i += 16LL)
        {
          v27 = String.lowercased()();
          v28 = String.lowercased()();
          if (v27._countAndFlagsBits == v28._countAndFlagsBits && v27._object == v28._object)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_48;
          }

          v30 = _stringCompareWithSmolCheck(_:_:expecting:)( v27._countAndFlagsBits,  v27._object,  v28._countAndFlagsBits,  v28._object,  0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v30 & 1) != 0) {
            break;
          }
          if (!--v25)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n(v24, 2LL);
            return 3LL;
          }
        }

        swift_bridgeObjectRelease();
LABEL_48:
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }

      swift_bridgeObjectRelease();
    }

    return 3LL;
  }

  return v6;
}

      return static Array._allocateUninitialized(_:)(0LL, v14);
    }
  }

  return v43;
}

uint64_t SiriLinkFlowProvisionalLinkActionConversionReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 1)
    {
      uint64_t String = PBReaderReadString(a2);
      char v19 = (void *)objc_claimAutoreleasedReturnValue(String);
      [a1 setOutcome:v19];
    }

    else if ((_DWORD)v12 == 2)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          goto LABEL_30;
        }
        v13 += 7;
        BOOL v9 = v14++ >= 9;
        if (v9)
        {
          uint64_t v15 = 0LL;
          goto LABEL_32;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v15 = 0LL;
      }
LABEL_32:
      [a1 setIsSuccess:v15 != 0];
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2, v12);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL SiriLinkFlowProvisionalSiriLinkFlowClientEventReadFrom(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((v6 >> 3) == 102)
      {
        char v13 = objc_alloc_init(&OBJC_CLASS___SiriLinkFlowProvisionalLinkActionConversion);
        if (!PBReaderPlaceMark(a2, v15)
          || (SiriLinkFlowProvisionalLinkActionConversionReadFrom(v13, a2) & 1) == 0)
        {
LABEL_33:

          return 0LL;
        }

        PBReaderRecallMark(a2, v15);
        [a1 setLinkActionConversion:v13];
        goto LABEL_29;
      }

      if ((_DWORD)v12 == 101) {
        break;
      }
      if ((_DWORD)v12 == 1)
      {
        char v13 = objc_alloc_init(&OBJC_CLASS___FLOWSchemaFLOWEventMetadata);
        PBReaderRecallMark(a2, v15);
        [a1 setEventMetadata:v13];
LABEL_29:

        goto LABEL_31;
      }

      if ((PBReaderSkipValueWithTag(a2, v12) & 1) == 0) {
        return 0LL;
      }
LABEL_31:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    char v13 = objc_alloc_init(&OBJC_CLASS___SiriLinkFlowProvisionalLinkActionCompletion);
    if (!PBReaderPlaceMark(a2, v15)
      || (SiriLinkFlowProvisionalLinkActionCompletionReadFrom(v13, a2) & 1) == 0)
    {
      goto LABEL_33;
    }

    PBReaderRecallMark(a2, v15);
    [a1 setLinkActionCompletion:v13];
    goto LABEL_29;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_18:
  v23 = 0;
LABEL_19:

  return v23;
}

  v23 = 0;
LABEL_19:

  return v23;
}

  v0[39] = v9;
  (*(void (**)(void, void, void))(v0[32] + 104LL))( v0[33],  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v0[31]);
  v37 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  v38 = OUTLINED_FUNCTION_50_3();
  v39(v38);
  if ((v37 & 1) != 0)
  {
    v40 = v0[23];
    v41 = [*(id *)(v40 + 24) dialog];
    v0[40] = v41;
    v42 = *(void *)(v40 + 48);
    v43 = (void *)swift_task_alloc(dword_2179F4);
    v0[41] = v43;
    *v43 = v0;
    v43[1] = ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue();
    return LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:)( v8,  v9,  (uint64_t)v41,  v42);
  }

  else
  {
    v45 = (void *)swift_task_alloc(dword_215114);
    v0[47] = v45;
    *v45 = v0;
    v45[1] = ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue();
    return ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue_preRFv2(parameterName:nlContextUpdate:)( v0[22],  v8,  v9,  v0[37]);
  }

  __break(1u);
}

    unsigned int v5 = (v11 - 1) & v11;
    v63 = v12;
  }

  return swift_release();
}

  swift_bridgeObjectRelease(v24);
  v25 = &outlined read-only object #0 of static LocaleUtils.compatibleLocale(siriLocale:contentLocale:);
LABEL_19:
  v26 = OUTLINED_FUNCTION_67_3();
  v28 = specialized Sequence<>.contains(_:)(v26, v27, v25);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_1_2();
  return v28 & 1;
}

      unint64_t v12 = (v17 - 1) & v17;
      uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
    }

    char v19 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v15);
    v21 = *v19;
    uint64_t v20 = v19[1];
    v22 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    swift_bridgeObjectRetain(v20);
    *(void *)&v23 = swift_bridgeObjectRetain(v22).n128_u64[0];
    v258 = v12;
    v259 = v9;
    if (!isUniquelyReferenced_nonNull_native)
    {
      v26 = 0LL;
      goto LABEL_39;
    }

    v24 = objc_msgSend((id)isUniquelyReferenced_nonNull_native, "_codableDescription", v23);
    v255 = v21;
    v25 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byKeyPath:)(v21, v20, v24);

    v26 = v25;
    if (!v25) {
      break;
    }
    v27 = objc_opt_self(&OBJC_CLASS___INCodableCustomObjectAttribute);
    if (swift_dynamicCastObjCClass(v25, v27))
    {
      v28 = (uint64_t)v260;
      swift_bridgeObjectRetain(v260);
      v256 = v25;
      v29 = static Transformer<>.convertCustomObject(attribute:parameter:values:)(v25, v255, v20, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v260);
      specialized LazyMapSequence.makeIterator()( v29,  (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B),  0LL,  &v266);
      swift_bridgeObjectRetain(v29);
      specialized LazyMapSequence.Iterator.next()(&v264);
      v30 = *((void *)&v264 + 1);
      if (*((void *)&v264 + 1))
      {
        v31 = (unint64_t)v260;
        while (1)
        {
          v32 = v264;
          outlined init with take of Any(v265, v263);
          v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v30);
          v35 = *(void *)(v31 + 16);
          v36 = (v33 & 1) == 0;
          v37 = v35 + v36;
          if (__OFADD__(v35, v36)) {
            goto LABEL_235;
          }
          v38 = v33;
          if (*(void *)(v31 + 24) >= v37)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              if ((v33 & 1) == 0) {
                goto LABEL_33;
              }
            }

            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
              _NativeDictionary.copy()();
              if ((v38 & 1) == 0) {
                goto LABEL_33;
              }
            }
          }

          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v37,  isUniquelyReferenced_nonNull_native & 1);
            v39 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v30);
            if ((v38 & 1) != (v40 & 1)) {
              goto LABEL_252;
            }
            v34 = v39;
            if ((v38 & 1) == 0)
            {
LABEL_33:
              v31 = (unint64_t)v260;
              v260[(v34 >> 6) + 8] |= 1LL << v34;
              v42 = (uint64_t *)(v260[6] + 16 * v34);
              *v42 = v32;
              v42[1] = v30;
              outlined init with take of Any(v263, (_OWORD *)(v260[7] + 32 * v34));
              v43 = v260[2];
              unint64_t v16 = __OFADD__(v43, 1LL);
              v44 = v43 + 1;
              if (v16) {
                goto LABEL_236;
              }
              v260[2] = v44;
              goto LABEL_35;
            }
          }

          v31 = (unint64_t)v260;
          outlined init with take of Any(v263, v262);
          swift_bridgeObjectRelease();
          v41 = (void *)(v260[7] + 32 * v34);
          __swift_destroy_boxed_opaque_existential_1Tm(v41);
          outlined init with take of Any(v262, v41);
LABEL_35:
          specialized LazyMapSequence.Iterator.next()(&v264);
          v30 = *((void *)&v264 + 1);
          isUniquelyReferenced_nonNull_native = 1LL;
          if (!*((void *)&v264 + 1)) {
            goto LABEL_71;
          }
        }
      }

      goto LABEL_70;
    }

    v59 = objc_opt_self(&OBJC_CLASS___INCodableEnumAttribute);
    v60 = swift_dynamicCastObjCClass(v25, v59);
    v21 = v255;
    if (v60)
    {
      v28 = (uint64_t)v260;
      swift_bridgeObjectRetain(v260);
      v256 = v26;
      v61 = static Transformer<>.convertEnum(attribute:parameter:values:)(v26, v255, v20, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v260);
      specialized LazyMapSequence.makeIterator()( v61,  (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B),  0LL,  &v266);
      swift_bridgeObjectRetain(v61);
      specialized LazyMapSequence.Iterator.next()(&v264);
      v62 = *((void *)&v264 + 1);
      if (*((void *)&v264 + 1))
      {
        v31 = (unint64_t)v260;
        while (1)
        {
          v63 = v264;
          outlined init with take of Any(v265, v263);
          v65 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v62);
          v66 = *(void *)(v31 + 16);
          v67 = (v64 & 1) == 0;
          v68 = v66 + v67;
          if (__OFADD__(v66, v67)) {
            goto LABEL_237;
          }
          v69 = v64;
          if (*(void *)(v31 + 24) >= v68)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              if ((v64 & 1) == 0) {
                goto LABEL_66;
              }
            }

            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
              _NativeDictionary.copy()();
              if ((v69 & 1) == 0) {
                goto LABEL_66;
              }
            }
          }

          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v68,  isUniquelyReferenced_nonNull_native & 1);
            v70 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v62);
            if ((v69 & 1) != (v71 & 1)) {
              goto LABEL_252;
            }
            v65 = v70;
            if ((v69 & 1) == 0)
            {
LABEL_66:
              v31 = (unint64_t)v260;
              v260[(v65 >> 6) + 8] |= 1LL << v65;
              v73 = (uint64_t *)(v260[6] + 16 * v65);
              *v73 = v63;
              v73[1] = v62;
              outlined init with take of Any(v263, (_OWORD *)(v260[7] + 32 * v65));
              v74 = v260[2];
              unint64_t v16 = __OFADD__(v74, 1LL);
              v75 = v74 + 1;
              if (v16) {
                goto LABEL_238;
              }
              v260[2] = v75;
              goto LABEL_68;
            }
          }

          v31 = (unint64_t)v260;
          outlined init with take of Any(v263, v262);
          swift_bridgeObjectRelease();
          v72 = (void *)(v260[7] + 32 * v65);
          __swift_destroy_boxed_opaque_existential_1Tm(v72);
          outlined init with take of Any(v262, v72);
LABEL_68:
          specialized LazyMapSequence.Iterator.next()(&v264);
          v62 = *((void *)&v264 + 1);
          isUniquelyReferenced_nonNull_native = 1LL;
          if (!*((void *)&v264 + 1)) {
            goto LABEL_71;
          }
        }
      }

      v31 = OUTLINED_FUNCTION_2_41(v30, "setIsArray:");
      v32 = OUTLINED_FUNCTION_164_0((uint64_t)v31, v21[20]);
      if (v32)
      {
        v33 = v32;
        v34 = [v32 valueType];

        LNValueType.asSELFType()();
        OUTLINED_FUNCTION_2_41(v35, "setType:");
      }

      [v1 addParameters:v18];

LABEL_21:
      ++v13;

      if (v12 == v13) {
        goto LABEL_22;
      }
    }

LABEL_17:
    v26 = 0LL;
    goto LABEL_18;
  }

  __break(1u);
}

uint64_t VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestRemovalInfoReadFrom( void *a1, uint64_t a2, double a3)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v5 = 0;
    unsigned int v6 = 0;
    unint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v9 = v8 + 1;
      if (v8 == -1 || v9 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v10 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9;
      v7 |= (unint64_t)(v10 & 0x7F) << v5;
      if ((v10 & 0x80) == 0) {
        goto LABEL_11;
      }
      v5 += 7;
      if (v6++ >= 9)
      {
        unint64_t v7 = 0LL;
        uint64_t v12 = OBJC_IVAR___PBDataReader__error;
        int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v12 = OBJC_IVAR___PBDataReader__error;
    int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v7 = 0LL;
    }
LABEL_13:
    if (v13 || (v7 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v15 = v7 >> 3;
    if ((v7 >> 3) == 3)
    {
      uint64_t String = PBReaderReadString(a2);
      char v17 = (void *)objc_claimAutoreleasedReturnValue(String);
      [a1 setWfRunnerEventName:v17];
    }

    else
    {
      if ((_DWORD)v15 == 2)
      {
        unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          LODWORD(a3) = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + v12) = 1;
          LODWORD(a3) = 0;
        }

        [a1 setClockSeconds:a3];
        continue;
      }

      if ((_DWORD)v15 != 1)
      {
        uint64_t result = PBReaderSkipValueWithTag(a2, v15);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
      }

      uint64_t v16 = PBReaderReadString(a2);
      char v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      [a1 setShortcutName:v17];
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContextInfoReadFrom(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
      return v3 == 0;
    }
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      int v3 = 1;
      return v3 == 0;
    }

    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v3) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = (v6 & 7) == 4;
    }
    if (v10) {
      return v3 == 0;
    }
    if ((PBReaderSkipValueWithTag(a2, v6 >> 3) & 1) == 0) {
      return 0LL;
    }
  }

BOOL VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContextReadFrom(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((v6 >> 3) == 101)
      {
        int v13 = objc_alloc_init(&OBJC_CLASS___VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestRemovalInfo);
        if (!PBReaderPlaceMark(a2, v16)
          || (VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestRemovalInfoReadFrom(v13, a2, v14) & 1) == 0)
        {
LABEL_33:

          return 0LL;
        }

        PBReaderRecallMark(a2, v16);
        [a1 setEnded:v13];
        goto LABEL_29;
      }

      if ((_DWORD)v12 == 100) {
        break;
      }
      if ((_DWORD)v12 == 1)
      {
        int v13 = objc_alloc_init(&OBJC_CLASS___SISchemaUUID);
        PBReaderRecallMark(a2, v16);
        [a1 setContextId:v13];
LABEL_29:

        goto LABEL_31;
      }

      if ((PBReaderSkipValueWithTag(a2, v12) & 1) == 0) {
        return 0LL;
      }
LABEL_31:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    int v13 = objc_alloc_init(&OBJC_CLASS___VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContextInfo);
    if (!PBReaderPlaceMark(a2, v16)
      || !VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContextInfoReadFrom((uint64_t)v13, a2))
    {
      goto LABEL_33;
    }

    PBReaderRecallMark(a2, v16);
    [a1 setStartedOrChanged:v13];
    goto LABEL_29;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t NSError.isPreflightError.getter(uint64_t a1)
{
  id v3 = OUTLINED_FUNCTION_4(a1, "domain");
  OUTLINED_FUNCTION_29((uint64_t)v3);
  OUTLINED_FUNCTION_13();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNConnectionErrorDomain);
  if (v2 == v4 && v1 == v5)
  {
    uint64_t v7 = OUTLINED_FUNCTION_11();
  }

  else
  {
    OUTLINED_FUNCTION_0(v4, v5);
    OUTLINED_FUNCTION_12();
    uint64_t v7 = OUTLINED_FUNCTION_22();
    if ((v2 & 1) == 0) {
      goto LABEL_9;
    }
  }

  uint64_t v7 = (uint64_t)OUTLINED_FUNCTION_4(v7, "code");
  if (v7 == 1700) {
    return 1LL;
  }
LABEL_9:
  id v8 = OUTLINED_FUNCTION_4(v7, "domain");
  OUTLINED_FUNCTION_29((uint64_t)v8);
  OUTLINED_FUNCTION_13();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
  if (v2 == v9 && v1 == v10)
  {
    uint64_t v12 = OUTLINED_FUNCTION_11();
LABEL_16:
    uint64_t v12 = (uint64_t)OUTLINED_FUNCTION_4(v12, "code");
    if (v12 != 9007) {
      goto LABEL_17;
    }
    return 1LL;
  }

  OUTLINED_FUNCTION_0(v9, v10);
  OUTLINED_FUNCTION_12();
  uint64_t v12 = OUTLINED_FUNCTION_22();
  if ((v2 & 1) != 0) {
    goto LABEL_16;
  }
LABEL_17:
  id v13 = OUTLINED_FUNCTION_4(v12, "userInfo");
  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v13,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  specialized Dictionary.subscript.getter(v15, v16, v14, &v32);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_37();
  if (v33)
  {
    if ((swift_dynamicCast(&v31, &v32, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      __int128 v32 = v31;
      unint64_t v17 = OUTLINED_FUNCTION_41();
      char v23 = OUTLINED_FUNCTION_24(v17, (uint64_t)&type metadata for String, v18, v17, v19, v20, v21, v22, v31);
      OUTLINED_FUNCTION_14();
      if ((v23 & 1) != 0)
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v24 = OUTLINED_FUNCTION_48();
        uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.voiceCommands);
        v26 = (void *)Logger.logObject.getter(v25);
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_40(v27))
        {
          *(_WORD *)OUTLINED_FUNCTION_38(2LL) = 0;
          OUTLINED_FUNCTION_27(&dword_0, v28, v29, "Error description indicates it is a preflight error");
          OUTLINED_FUNCTION_17();
        }

        return 1LL;
      }
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v32, &demangling cache variable for type metadata for Any?);
  }

  return 0LL;
}

void specialized Dictionary.subscript.getter( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v5 = OUTLINED_FUNCTION_21(a1, a2), (v6 & 1) != 0))
  {
    uint64_t v7 = OUTLINED_FUNCTION_32(v5);
    OUTLINED_FUNCTION_6(v7, v8);
  }

  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    OUTLINED_FUNCTION_1();
  }

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

void specialized Dictionary.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
  {
    uint64_t v6 = OUTLINED_FUNCTION_32(v4);
    OUTLINED_FUNCTION_6(v6, v7);
  }

  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    OUTLINED_FUNCTION_1();
  }

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  if (*(void *)(a2 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
  {
    uint64_t v6 = OUTLINED_FUNCTION_32(v4);
    OUTLINED_FUNCTION_6(v6, v7);
  }

  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    OUTLINED_FUNCTION_1();
  }

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0)) {
    return *(unsigned __int8 *)(*(void *)(a2 + 56) + v3);
  }
  else {
    return 2LL;
  }
}

{
  unint64_t v3;
  char v4;
  if (*(void *)(a2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0)) {
    return *(unsigned __int8 *)(*(void *)(a2 + 56) + v3);
  }
  else {
    return 2LL;
  }
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v4 = OUTLINED_FUNCTION_21(a1, a2);
    if ((v5 & 1) != 0) {
      swift_bridgeObjectRetain(*(void *)(*(void *)(v3 + 56) + 16 * v4 + 8));
    }
  }

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_1();
}

{
  uint64_t v3;
  unint64_t v4;
  char v5;
  if (*(void *)(a3 + 16))
  {
    unint64_t v4 = OUTLINED_FUNCTION_21(a1, a2);
    if ((v5 & 1) != 0) {
      swift_bridgeObjectRetain(*(void *)(*(void *)(v3 + 56) + 8 * v4));
    }
  }

  OUTLINED_FUNCTION_1();
}

uint64_t specialized Dictionary.subscript.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = OUTLINED_FUNCTION_21(a1, a2), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(v4 + 56);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    outlined init with copy of DeviceState?( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v8,  a4,  (uint64_t *)&demangling cache variable for type metadata for URL?);
    uint64_t v11 = a4;
    uint64_t v12 = 0LL;
    uint64_t v13 = 1LL;
    uint64_t v14 = v10;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    uint64_t v11 = OUTLINED_FUNCTION_23();
  }

  return __swift_storeEnumTagSinglePayload(v11, v12, v13, v14);
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = OUTLINED_FUNCTION_21(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(v3 + 56) + 8 * v4);
  }
  else {
    return 0LL;
  }
}

{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  if (*(void *)(a3 + 16))
  {
    unint64_t v4 = OUTLINED_FUNCTION_21(a1, a2);
    if ((v5 & 1) != 0)
    {
      unint64_t v6 = *(void *)(v3 + 56) + 32 * v4;
      char v7 = *(void *)(v6 + 24);
      swift_bridgeObjectRetain(*(void *)(v6 + 8));
      swift_bridgeObjectRetain(v7);
    }
  }

  return OUTLINED_FUNCTION_45();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

uint64_t NSError.isUnsupportedInCarPlayError.getter(uint64_t a1)
{
  id v3 = OUTLINED_FUNCTION_4(a1, "domain");
  OUTLINED_FUNCTION_29((uint64_t)v3);
  OUTLINED_FUNCTION_13();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNConnectionErrorDomain);
  if (v2 == v4 && v1 == v5)
  {
    uint64_t v7 = OUTLINED_FUNCTION_11();
  }

  else
  {
    OUTLINED_FUNCTION_0(v4, v5);
    OUTLINED_FUNCTION_12();
    uint64_t v7 = OUTLINED_FUNCTION_22();
    if ((v2 & 1) == 0) {
      goto LABEL_9;
    }
  }

  uint64_t v7 = (uint64_t)OUTLINED_FUNCTION_4(v7, "code");
  if (v7 == 1800) {
    return 1LL;
  }
LABEL_9:
  id v8 = OUTLINED_FUNCTION_4(v7, "domain");
  OUTLINED_FUNCTION_29((uint64_t)v8);
  OUTLINED_FUNCTION_13();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
  if (v2 == v9 && v1 == v10)
  {
    uint64_t result = OUTLINED_FUNCTION_11();
    goto LABEL_16;
  }

  OUTLINED_FUNCTION_0(v9, v10);
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_22();
  uint64_t result = 0LL;
  if ((v2 & 1) != 0)
  {
LABEL_16:
    id v13 = OUTLINED_FUNCTION_4(result, "localizedDescription");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

    unint64_t v14 = OUTLINED_FUNCTION_41();
    LOBYTE(v13) = OUTLINED_FUNCTION_24(v14, (uint64_t)&type metadata for String, v15, v14, v16, v17, v18, v19, v26);
    OUTLINED_FUNCTION_37();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v20 = OUTLINED_FUNCTION_48();
    uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.voiceCommands);
    uint64_t v22 = (void *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_40(v23))
    {
      *(_WORD *)OUTLINED_FUNCTION_38(2LL) = 0;
      OUTLINED_FUNCTION_27(&dword_0, v24, v25, "Error description indicates it is an UnsupportedInCarPlay error");
      OUTLINED_FUNCTION_17();
    }

    return 1LL;
  }

  return result;
}

void NSError.isLinkUserCancelledError.getter(uint64_t a1)
{
  id v3 = OUTLINED_FUNCTION_4(a1, "domain");
  OUTLINED_FUNCTION_29((uint64_t)v3);
  OUTLINED_FUNCTION_13();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2 == v4 && v1 == v5)
  {
    uint64_t v7 = OUTLINED_FUNCTION_11();
  }

  else
  {
    OUTLINED_FUNCTION_0(v4, v5);
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_22();
    uint64_t v7 = 0LL;
    if ((v2 & 1) == 0) {
      goto LABEL_9;
    }
  }

  OUTLINED_FUNCTION_4(v7, "code");
LABEL_9:
  OUTLINED_FUNCTION_2();
}

uint64_t NSError.filteredLocalizedDescription.getter()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  id v2 = v0;
  id v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  uint64_t v5 = &off_211000;
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t type = v4;
    uint64_t v6 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v37 = OUTLINED_FUNCTION_38(64LL);
    v41[0] = v37;
    *(_DWORD *)uint64_t v6 = 136315650;
    id v7 = OUTLINED_FUNCTION_26(v37, "domain");
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v41);
    OUTLINED_FUNCTION_34(v39, v11);

    uint64_t v12 = swift_bridgeObjectRelease(v10);
    *(_WORD *)(v6 + 12) = 2048;
    id v13 = OUTLINED_FUNCTION_26(v12, "code");

    uint64_t v39 = (uint64_t)v13;
    OUTLINED_FUNCTION_34(v14, v15);

    *(_WORD *)(v6 + 22) = 2080;
    id v17 = OUTLINED_FUNCTION_26(v16, "userInfo");
    uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v17,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

    uint64_t v19 = Dictionary.description.getter( v18,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v21 = v20;
    OUTLINED_FUNCTION_22();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v41);
    uint64_t v5 = &off_211000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v6 + 24);

    swift_bridgeObjectRelease(v21);
    _os_log_impl(&dword_0, v3, type, "#NSError:\n Domain:%s\n Code-%ld\n Underlying userInfo: %s", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy(v37, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    OUTLINED_FUNCTION_17();
  }

  else
  {
  }

  if (one-time initialization token for notLocalized != -1) {
    uint64_t v22 = swift_once(&one-time initialization token for notLocalized, one-time initialization function for notLocalized);
  }
  os_log_type_t v23 = static ErrorDomain.notLocalized[0];
  uint64_t v24 = *(void *)((char *)static ErrorDomain.notLocalized[0] + (unint64_t)&dword_10);
  if (v24)
  {
    swift_bridgeObjectRetain_n(static ErrorDomain.notLocalized[0], 2LL);
    uint64_t v25 = v23 + 10;
    while (1)
    {
      uint64_t v27 = *(v25 - 1);
      uint64_t v26 = *v25;
      uint64_t v28 = swift_bridgeObjectRetain(*v25);
      id v29 = OUTLINED_FUNCTION_26(v28, v5[450]);
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      v41[0] = v30;
      v41[1] = v32;
      uint64_t v39 = v27;
      uint64_t v40 = v26;
      unint64_t v33 = lazy protocol witness table accessor for type String and conformance String();
      unint64_t v34 = lazy protocol witness table accessor for type String and conformance String();
      LOBYTE(v29) = BidirectionalCollection<>.starts<A>(with:)( &v39,  &type metadata for String,  &type metadata for String,  v33,  v34);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v32);
      v25 += 2;
      --v24;
      uint64_t v5 = &off_211000;
      if (!v24)
      {
        uint64_t v22 = OUTLINED_FUNCTION_46();
        goto LABEL_13;
      }
    }

    OUTLINED_FUNCTION_46();
  }

  else
  {
LABEL_13:
    id v35 = OUTLINED_FUNCTION_26(v22, "localizedDescription");
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }

  return OUTLINED_FUNCTION_45();
}

void one-time initialization function for notLocalized()
{
  static ErrorDomain.notLocalized[0] = (int *)&outlined read-only object #0 of one-time initialization function for notLocalized;
}

uint64_t default argument 3 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for RunCustomIntentCATs,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 4 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for RunCustomIntentCATsSimple,  (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 5 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for RunVoiceCommandCATs,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 6 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for RunVoiceCommandCATsSimple,  (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

void default argument 7 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( uint64_t *a1@<X8>)
{
}

uint64_t default argument 8 of WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for WorkflowRunnerCATPatternsExecutor,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

void static SLFLocationAccessGuardProvider.makeGuardFlow.getter()
{
}

void default argument 4 of INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)( void *a1@<X8>)
{
}

void LinkRCHFlowFactory.init()()
{
}

void default argument 0 of ShortcutIdentification.getIdentifyingName(vcClient:)(uint64_t *a1@<X8>)
{
}

void default argument 7 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)()
{
}

uint64_t default argument 8 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)()
{
  if (AFDeviceSupportsSAE())
  {
    v2[3] = &type metadata for IntelligenceFlowFeatureFlags;
    v2[4] = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags();
    LOBYTE(v2[0]) = 1;
    char v0 = isFeatureEnabled(_:)(v2);
    __swift_destroy_boxed_opaque_existential_1Tm(v2);
  }

  else
  {
    char v0 = 0;
  }

  return v0 & 1;
}

uint64_t default argument 8 of CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)@<X0>( uint64_t *a1@<X8>)
{
  return default argument 2 of CustomIntentTCCFlowStrategy.init(deviceState:labelsProvider:responseFactory:)( (uint64_t (*)(void))&ResponseFactory.init(),  (uint64_t)&protocol witness table for ResponseFactory,  a1);
}

void default argument 1 of App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for AppInfoResolver;
  *(void *)(a1 + 32) = &protocol witness table for AppInfoResolver;
}

double variable initialization expression of LocationProvider.defaultTimeout()
{
  return 0.05;
}

double variable initialization expression of TfIdfFuzzyMatcher.lowPassFilter()
{
  return 0.15;
}

double variable initialization expression of TfIdfFuzzyMatcher.highPassFilter()
{
  return 0.75;
}

uint64_t default argument 1 of LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for RunLinkActionCATs,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 2 of LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for RunLinkActionCATsSimple,  (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 5 of INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)@<X0>( uint64_t *a1@<X8>)
{
  return default argument 2 of CustomIntentTCCFlowStrategy.init(deviceState:labelsProvider:responseFactory:)( (uint64_t (*)(void))&ContactResolver.init(),  (uint64_t)&protocol witness table for ContactResolver,  a1);
}

unint64_t default argument 1 of VoiceCommandsScreentimeCheckFlowStrategy.init(appPolicyHandler:bundleId:)()
{
  return OUTLINED_FUNCTION_30();
}

void variable initialization expression of CustomIntentStateAttachment.parameterName()
{
}

id default argument 6 of WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)()
{
  return [objc_allocWithZone(AFPreferences) init];
}

unint64_t variable initialization expression of SiriLinkFlowPlugin.voiceShortcutDirectInvocationIdentifier()
{
  return 0xD000000000000030LL;
}

uint64_t default argument 2 of ListShortcutsFlow.init(deviceState:aceServiceInvoker:catWrapper:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for ListShortcutsCATs,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 2 of AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for AutoShortcutCATsSimple,  (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

void default argument 5 of AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)()
{
  uint64_t v1 = type metadata accessor for UserDefaultsWrapper();
  OUTLINED_FUNCTION_19(v1, 56LL);
  id v2 = UserDefaultsWrapper.init()();
  v0[3] = v1;
  v0[4] = &protocol witness table for UserDefaultsWrapper;
  void *v0 = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t default argument 2 of WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for WorkflowRunnerCATs,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 3 of WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for WorkflowRunnerCATsSimple,  (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 1 of AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for AutoShortcutCATs,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

void default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  id v0 = [(id)objc_opt_self(VCVoiceShortcutClient) standardClient];
  *(void *)(OUTLINED_FUNCTION_19((uint64_t)&unk_1F2A50, 24LL) + 16) = v0;
  OUTLINED_FUNCTION_1();
}

uint64_t default argument 0 of SiriLinkViewModel.asPatternParams(with:)()
{
  return Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
}

void default argument 0 of static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:)()
{
  uint64_t v1 = __chkstk_darwin(v0);
  static Device.current.getter(v12, v1);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v2 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs(0LL);
  uint64_t v3 = swift_retain(v2);
  static CATOption.defaultMode.getter(v3);
  uint64_t v4 = OUTLINED_FUNCTION_18();
  type metadata accessor for WorkflowRunnerCATsSimple(0LL);
  OUTLINED_FUNCTION_3();
  uint64_t v5 = OUTLINED_FUNCTION_28();
  type metadata accessor for RunCustomIntentCATs(0LL);
  OUTLINED_FUNCTION_3();
  uint64_t v6 = OUTLINED_FUNCTION_18();
  type metadata accessor for RunCustomIntentCATsSimple(0LL);
  OUTLINED_FUNCTION_3();
  uint64_t v7 = OUTLINED_FUNCTION_28();
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_3();
  uint64_t v8 = OUTLINED_FUNCTION_18();
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_3();
  uint64_t v9 = OUTLINED_FUNCTION_28();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_3();
  uint64_t v10 = OUTLINED_FUNCTION_18();
  uint64_t v11 = type metadata accessor for WorkflowDialogTemplating();
  OUTLINED_FUNCTION_19(v11, 120LL);
  WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( (uint64_t)v12,  v2,  v4,  v5,  v6,  v7,  v8,  v9,  v10);
}

uint64_t default argument 1 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  return swift_retain(static WFDialogState.shared);
}

void *IntroduceCustomIntentViewBuilder.makeViews(withTemplate:items:)()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t default argument 0 of static TemplatingResult.getBehaviorAfterSpeaking(behavior:)@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for BehaviorAfterSpeaking.defaultBehavior(_:);
  uint64_t v3 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

void default argument 7 of ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)( uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for EnableTCCLabelsProvider;
  *(void *)(a1 + 32) = &protocol witness table for EnableTCCLabelsProvider;
}

uint64_t variable initialization expression of VoiceCommandsAppPolicyHandler.appQueue()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_35();
  uint64_t v5 = v4 - v3;
  type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v6);
  uint64_t v7 = OUTLINED_FUNCTION_25();
  type metadata accessor for DispatchQoS(v7);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_35();
  uint64_t v11 = v10 - v9;
  type metadata accessor for OS_dispatch_queue();
  uint64_t v12 = static DispatchQoS.userInitiated.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter(v12);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v1);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000027LL,  0x8000000000192120LL,  v11,  v0,  v5,  0LL);
}

void *variable initialization expression of VoiceCommandsAppPolicyHandler.unsafeApps()
{
  return &_swiftEmptyDictionarySingleton;
}

void default argument 2 of static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)()
{
}

uint64_t variable initialization expression of WFChooseFromListPromptFlowStrategy.WINDOWSIZE()
{
  return 6LL;
}

void default argument 2 of INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)( void *a1@<X8>)
{
}

uint64_t default argument 3 of INIntentResolutionResult.getDisplayHints(intent:parameter:locale:shouldIncludeOrdinalReference:)()
{
  return 1LL;
}

uint64_t variable initialization expression of CustomIntentExecutionFlow.input()
{
  uint64_t v0 = OUTLINED_FUNCTION_23();
  return OUTLINED_FUNCTION_7(v0, v1, v2, v3);
}

uint64_t default argument 7 of WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)@<X0>( uint64_t *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  uint64_t v2 = static VoiceCommandsAppPolicyHandler.instance;
  a1[3] = type metadata accessor for VoiceCommandsAppPolicyHandler();
  a1[4] = (uint64_t)&protocol witness table for VoiceCommandsAppPolicyHandler;
  *a1 = v2;
  return swift_retain(v2);
}

uint64_t variable initialization expression of UserDefaultsWrapper.camPersistenceKey()
{
  return 0x75616665444D4143LL;
}

unint64_t variable initialization expression of UserDefaultsWrapper.appShortcutAmbiguousFirstRunShownKey()
{
  return 0xD000000000000021LL;
}

uint64_t variable initialization expression of RunCustomIntentReadingDelegate.pageSize()
{
  return 5LL;
}

void default argument 4 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)()
{
  uint64_t v1 = type metadata accessor for LinkMetadataProvider();
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 24LL);
  *(void *)(v2 + 16) = [objc_allocWithZone(LNMetadataProvider) init];
  v0[3] = v1;
  v0[4] = (uint64_t)&protocol witness table for LinkMetadataProvider;
  uint64_t *v0 = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t variable initialization expression of ShortcutsHandoffFlow.state()
{
  uint64_t v1 = OUTLINED_FUNCTION_43();
  return OUTLINED_FUNCTION_7(v0, 1LL, 2LL, v1);
}

id variable initialization expression of LinkMetadataProvider.wrappedProvider()
{
  return [objc_allocWithZone(LNMetadataProvider) init];
}

uint64_t default argument 7 of CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)()
{
  uint64_t v0 = type metadata accessor for ContinueInAppCATWrapperSimple(0LL);
  memset(v5, 0, sizeof(v5));
  uint64_t v6 = 0LL;
  OUTLINED_FUNCTION_51(v0);
  outlined init with copy of DeviceState?( (uint64_t)v5,  (uint64_t)v4,  &demangling cache variable for type metadata for DeviceState?);
  SiriKitFlowCATWrapperSimple.init(deviceState:)();
  uint64_t v2 = v1;
  outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for DeviceState?);
  return v2;
}

void default argument 3 of LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)( uint64_t a1)
{
  uint64_t v1 = v4;
  uint64_t v2 = v5;
  __swift_project_boxed_opaque_existential_1(v3, v4);
  dispatch thunk of DeviceState.siriLocale.getter(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_42();
}

uint64_t default argument 1 of InstallShortcutViewFactory.init(deviceState:catWrapper:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( (void (*)(uint64_t))type metadata accessor for InstallShortcutCATs,  (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t variable initialization expression of AutoShortcutsSetEnablementFlow.contextProvider()
{
  uint64_t v0 = type metadata accessor for WorkflowNLContextProvider();
  return swift_allocObject(v0, 16LL, 7LL);
}

void default argument 5 of LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_33();
  type metadata accessor for CATOption(v1);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_35();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter(v6);
  uint64_t v7 = CATWrapper.__allocating_init(options:globals:)(v5, 0LL);
  v0[3] = v6;
  v0[4] = (uint64_t)&protocol witness table for RunLinkActionCATPatternsExecutor;
  uint64_t *v0 = v7;
  OUTLINED_FUNCTION_2();
}

void default argument 7 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = OUTLINED_FUNCTION_50();
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 16LL);
  a2[3] = v4;
  a2[4] = a1;
  *a2 = v5;
  OUTLINED_FUNCTION_2();
}

void default argument 1 of AutoShortcutInvocation.init(directInvocationData:provider:preferences:)()
{
  uint64_t v1 = type metadata accessor for AutoShortcutProvider();
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 24LL);
  *(void *)(v2 + 16) = [objc_allocWithZone(LNAutoShortcutsProvider) init];
  v0[3] = v1;
  v0[4] = (uint64_t)&protocol witness table for AutoShortcutProvider;
  uint64_t *v0 = v2;
  OUTLINED_FUNCTION_2();
}

id default argument 8 of AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)()
{
  return [(id)objc_opt_self(AFPreferences) sharedPreferences];
}

_UNKNOWN **variable initialization expression of InputToDisambiguationItemsConverter.fuzzyMatchLanguages()
{
  return &outlined read-only object #0 of variable initialization expression of InputToDisambiguationItemsConverter.fuzzyMatchLanguages;
}

uint64_t default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( void (*a1)(uint64_t), uint64_t (*a2)(uint64_t, void))
{
  uint64_t v6 = OUTLINED_FUNCTION_25();
  a1(v6);
  OUTLINED_FUNCTION_3();
  return a2(v2, 0LL);
}

uint64_t default argument 2 of CustomIntentTCCFlowStrategy.init(deviceState:labelsProvider:responseFactory:)@<X0>( uint64_t (*a1)(void)@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_51(v6);
  uint64_t result = a1();
  a3[3] = v6;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t variable initialization expression of RunLinkActionContinueInAppParameters.customDialog()
{
  uint64_t v0 = OUTLINED_FUNCTION_33();
  type metadata accessor for SpeakableString(v0);
  uint64_t v1 = OUTLINED_FUNCTION_23();
  return OUTLINED_FUNCTION_7(v1, v2, v3, v4);
}

void default argument 11 of WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)( uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LocationProvider();
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 64LL);
  *(void *)(v3 + 16) = 0x3FA999999999999ALL;
  outlined init with take of AceServiceInvokerAsync(v4, v3 + 24);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for LocationProvider;
  *a1 = v3;
  OUTLINED_FUNCTION_42();
}

void default argument 12 of WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)( uint64_t a1@<X1>, void (*a2)(void)@<X2>, void *a3@<X8>)
{
  a3[3] = OUTLINED_FUNCTION_50();
  a3[4] = a1;
  __swift_allocate_boxed_opaque_existential_1(a3);
  a2();
  OUTLINED_FUNCTION_2();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance _INIntentType()
{
  uint64_t v1 = OUTLINED_FUNCTION_8();
  v0->items._rawValue = CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)v1).items._rawValue;
  OUTLINED_FUNCTION_1();
}

void protocol witness for SetAlgebra.init() in conformance NSJSONWritingOptions(void *a1@<X8>)
{
  *a1 = variable initialization expression of WorkflowRunnerInputTextParameters.device();
  OUTLINED_FUNCTION_1();
}

void protocol witness for Hashable.hashValue.getter in conformance WFContentItemListThumbnailOption()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WFContentItemListThumbnailOption( uint64_t a1)
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)(a1, *v1);
}

uint64_t specialized _SwiftNewtypeWrapper<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WFContentItemListThumbnailOption( uint64_t a1)
{
  return specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)(a1, *v1);
}

Swift::Int specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  void v8[9];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  OUTLINED_FUNCTION_37();
  return v6;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance LNMeasurementUnitType( uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

void specialized _SwiftNewtypeWrapper<>.hashValue.getter(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_1();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WFTextFieldKeyboardType( void *a1, void *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance INIntentSlotValueType( uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

  ;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LNValueTypeSpecificMetadataKey( uint64_t a1)
{
  return specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)(a1, *v1);
}

void protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance LNValueTypeSpecificMetadataKey()
{
}

void protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance LNValueTypeSpecificMetadataKey( uint64_t a1, id *a2)
{
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance LNValueTypeSpecificMetadataKey( uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2) & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance LNValueTypeSpecificMetadataKey( uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance NSMatchingOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance WFTextFieldKeyboardType()
{
  uint64_t v1 = OUTLINED_FUNCTION_8();
  void *v0 = LNValueTypeSpecificMetadataKey.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance LNValueTypeSpecificMetadataKey( uint64_t *a1, uint64_t *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance WFContentItemListThumbnailOption( uint64_t a1)
{
  uint64_t v3 = v2;
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type WFContentItemListThumbnailOption and conformance WFContentItemListThumbnailOption,  (uint64_t (*)(uint64_t))type metadata accessor for WFContentItemListThumbnailOption,  (uint64_t)&protocol conformance descriptor for WFContentItemListThumbnailOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance WFContentItemListThumbnailOption( void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_20();
  *a1 = v2;
  OUTLINED_FUNCTION_2();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LNValueTypeSpecificMetadataKey@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = LNValueTypeSpecificMetadataKey.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNValueTypeSpecificMetadataKey( uint64_t a1)
{
  uint64_t v3 = v2;
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey,  (uint64_t (*)(uint64_t))type metadata accessor for LNValueTypeSpecificMetadataKey,  (uint64_t)&protocol conformance descriptor for LNValueTypeSpecificMetadataKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v8 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 8;
  uint64_t v11 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v9);
  OUTLINED_FUNCTION_20();
  *a1 = v10;
  OUTLINED_FUNCTION_36();
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  __swift_destroy_boxed_opaque_existential_1Tm(v12);
  return v7;
}

void *specialized _StringGuts._deconstructUTF8<A>(scratch:)( void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)( char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *_StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v2[2] + 1LL,  1,  (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v3 > 1),  v4 + 1,  1,  (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return _swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
LABEL_6:
  uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    uint64_t v9 = "Insufficient space allocated to copy string contents";
    uint64_t v10 = "Swift/StringUTF8View.swift";
    uint64_t v11 = 52LL;
    uint64_t v12 = 26LL;
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t v9 = "invalid Collection: less than 'count' elements in collection";
  uint64_t v10 = "Swift/ContiguousArrayBuffer.swift";
  uint64_t v11 = 60LL;
  uint64_t v12 = 33LL;
LABEL_15:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v11, 2LL, v10, v12);
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  id v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  char v4 = *result;
  *char v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void thunk for @escaping @callee_guaranteed () -> (@unowned Int)(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = a1();
  OUTLINED_FUNCTION_1();
}

uint64_t outlined init with take of AceServiceInvokerAsync(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *__swift_allocate_boxed_opaque_existential_1(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

unint64_t lazy protocol witness table accessor for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags;
  if (!lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IntelligenceFlowFeatureFlags,  &type metadata for IntelligenceFlowFeatureFlags);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags;
  if (!lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IntelligenceFlowFeatureFlags,  &type metadata for IntelligenceFlowFeatureFlags);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags);
  }

  return result;
}

uint64_t sub_A12C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  int64_t v7 = (void *)swift_task_alloc(dword_21624C);
  *(void *)(v3 + 16) = v7;
  *int64_t v7 = v3;
  v7[1] = partial apply for implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
  return implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)( a1,  a2,  v6);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)( uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }

  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

void outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  OUTLINED_FUNCTION_1();
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

void type metadata accessor for INDeviceIdiom(uint64_t a1)
{
}

void type metadata accessor for DMFPolicy(uint64_t a1)
{
}

void type metadata accessor for LNMeasurementUnitType(uint64_t a1)
{
}

void type metadata accessor for INIntentSlotValueType(uint64_t a1)
{
}

void type metadata accessor for LNValueTypeSpecificMetadataKey(uint64_t a1)
{
}

void base witness table accessor for RawRepresentable in LNValueTypeSpecificMetadataKey()
{
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in LNValueTypeSpecificMetadataKey()
{
}

void lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  OUTLINED_FUNCTION_1();
}

void base witness table accessor for Equatable in LNValueTypeSpecificMetadataKey()
{
}

void specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 != v6 || v5 != v7) {
    _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_2();
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))WorkflowRunnerCATPatternsIdentifiers.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)( a1,  a2,  (void (*)(void))RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))RunVoiceCommandCATsSimple.Properties.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))RunCustomIntentCATsSimple.Properties.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)( a1,  a2,  (void (*)(void))RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))WorkflowRunnerCATsSimple.Properties.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))AutoShortcutCATsSimple.Properties.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))VoiceCommandsNLIntent.VoiceCommandReference.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))VoiceCommandsNLIntent.VoiceCommandUnit.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))SuggestionsCATsSimple.Properties.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))AutoShortcutCATs.Properties.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))RunLinkActionCATPatternsIdentifiers.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))RunLinkActionCATsSimple.Properties.rawValue.getter);
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  static String._forceBridgeFromObjectiveC(_:result:)(v3, &v5);
  if (v6)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_20();
  }

  else
  {
    NSString v4 = 0LL;
  }

  *uint64_t v2 = v4;
  OUTLINED_FUNCTION_36();
}

uint64_t specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)( uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v7);
  if (v8)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_37();
  }

  else
  {
    NSString v5 = 0LL;
  }

  *uint64_t v2 = v5;
  return v4 & 1;
}

void specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)(uint64_t a1)
{
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void outlined init with copy of DeviceState?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = OUTLINED_FUNCTION_45();
  v4(v3);
  OUTLINED_FUNCTION_1();
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void type metadata accessor for WFContentItemListThumbnailOption(uint64_t a1)
{
}

void type metadata accessor for INDeviceIdiom(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(a1, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

  OUTLINED_FUNCTION_1();
}

void base witness table accessor for RawRepresentable in WFContentItemListThumbnailOption()
{
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in WFContentItemListThumbnailOption()
{
}

void base witness table accessor for Equatable in WFContentItemListThumbnailOption()
{
}

void WorkflowCarplaySnippetProvider.makeEmptySnippet(appId:)()
{
}

uint64_t OUTLINED_FUNCTION_0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0LL);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_3()
{
  return static CATOption.defaultMode.getter();
}

id OUTLINED_FUNCTION_4(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t OUTLINED_FUNCTION_5()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_6(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of Any(a1, a2);
}

uint64_t OUTLINED_FUNCTION_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_8()
{
  return *(void *)v0;
}

  ;
}

Swift::Bool __swiftcall CustomIntentDisambiguationItemContainer.shouldRequestUnlockForDisambiguation()()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_11()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_12()
{
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_13()
{
}

uint64_t OUTLINED_FUNCTION_14()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_17()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t OUTLINED_FUNCTION_18()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_19(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t OUTLINED_FUNCTION_20()
{
  return swift_bridgeObjectRelease(v0);
}

unint64_t OUTLINED_FUNCTION_21(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_22()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_23()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return StringProtocol.contains<A>(_:)(&a9, a2, a2, a4, a4);
}

uint64_t OUTLINED_FUNCTION_25()
{
  return 0LL;
}

id OUTLINED_FUNCTION_26(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void OUTLINED_FUNCTION_27(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_28()
{
  return CATWrapperSimple.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_29(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

unint64_t OUTLINED_FUNCTION_30()
{
  return 0xD000000000000013LL;
}

uint64_t OUTLINED_FUNCTION_32(uint64_t a1)
{
  return *(void *)(v1 + 56) + 32 * a1;
}

uint64_t OUTLINED_FUNCTION_33()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_34(uint64_t a1, uint64_t a2, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v2, v3);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_37()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_38(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

void OUTLINED_FUNCTION_39(uint64_t a1, id *a2)
{
}

BOOL OUTLINED_FUNCTION_40(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

unint64_t OUTLINED_FUNCTION_41()
{
  return lazy protocol witness table accessor for type String and conformance String();
}

  ;
}

uint64_t OUTLINED_FUNCTION_43()
{
  return type metadata accessor for Input(0LL);
}

uint64_t OUTLINED_FUNCTION_45()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_46()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_47()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_48()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t OUTLINED_FUNCTION_49()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_50()
{
  return v0(0LL);
}

uint64_t OUTLINED_FUNCTION_51(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

void CustomIntentRCHFlowStrategy.__allocating_init(intent:deviceState:)(uint64_t a1, void *a2)
{
  uint64_t v5 = OUTLINED_FUNCTION_63();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_35();
  uint64_t v8 = v7 - v6;
  outlined init with copy of DeviceState((uint64_t)a2, (uint64_t)v11);
  type metadata accessor for RunCustomIntentCATs(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v9 = CATWrapper.__allocating_init(options:globals:)(v8, 0LL);
  type metadata accessor for RunCustomIntentCATsSimple(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v10 = CATWrapperSimple.__allocating_init(options:globals:)(v8, 0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v2 + 104))(v11, a1, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  OUTLINED_FUNCTION_38_0();
}

uint64_t outlined init with copy of DeviceState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void CustomIntentRCHFlowStrategy.__allocating_init(deviceState:intent:catWrapper:catWrapperSimple:)( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = OUTLINED_FUNCTION_63();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_35();
  uint64_t v13 = v12 - v11;
  outlined init with copy of DeviceState((uint64_t)a1, v5 + 16);
  *(void *)(v5 + 56) = a2;
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v26);
  uint64_t v14 = one-time initialization token for shared;
  id v15 = a2;
  if (v14 != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v16 = static WFDialogState.shared;
  type metadata accessor for RunVoiceCommandCATs(0LL);
  uint64_t v17 = swift_retain(v16);
  static CATOption.defaultMode.getter(v17);
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)(v13, 0LL);
  uint64_t v19 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  static CATOption.defaultMode.getter(v19);
  uint64_t v20 = CATWrapperSimple.__allocating_init(options:globals:)(v13, 0LL);

  uint64_t v21 = type metadata accessor for AppNameResolver();
  uint64_t v22 = OUTLINED_FUNCTION_19(v21, 16LL);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  uint64_t v23 = type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v24 = OUTLINED_FUNCTION_19(v23, 152LL);
  specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( v26,  v16,  0LL,  1,  a3,  a4,  v18,  v20,  v22,  v24);
  *(void *)(v5 + 64) = v25;
  OUTLINED_FUNCTION_24_0();
}

uint64_t CustomIntentRCHFlowStrategy.actionForInput(input:)()
{
  uint64_t v0 = type metadata accessor for Parse(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_35();
  uint64_t v4 = v3 - v2;
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v1 + 88))(v4, v0) == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 96))(v4, v0);
    uint64_t v5 = *(void *)(v4
    uint64_t v6 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    uint64_t v7 = (char *)[v6 _type];

    if (v7 == (_BYTE *)&dword_0 + 2) {
      static ActionForInput.handle()();
    }
    else {
      static ActionForInput.ignore()();
    }
    swift_release(v5);
    type metadata accessor for NLIntent(0LL);
    uint64_t v14 = OUTLINED_FUNCTION_65();
    return v16(v14, v15);
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
    uint64_t v9 = OUTLINED_FUNCTION_58();
    os_log_type_t v10 = v9;
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v9);
    if (OUTLINED_FUNCTION_41_0(v11))
    {
      uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_0, v11, v10, "Parse type not yet supported.", v12, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v12);
    }

    static ActionForInput.ignore()();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  }

uint64_t CustomIntentRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v3, v4, v5);
}

uint64_t CustomIntentRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  if (!static FlowStrategyUtils.makeIntentFromParse(parse:currentIntent:)(*(void *)(v0 + 16)))
  {
    unint64_t v2 = lazy protocol witness table accessor for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors();
    uint64_t v3 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for CustomIntentFlowErrors, v2);
    *uint64_t v4 = 1;
    swift_willThrow(v3, v4, v5, v6, v7);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CustomIntentRCHFlowStrategy.makeErrorResponse(error:)(uint64_t a1, uint64_t a2)
{
  v3[40] = a2;
  v3[41] = v2;
  v3[39] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  v3[42] = OUTLINED_FUNCTION_4_0(*(void *)(v4 - 8));
  v3[43] = OUTLINED_FUNCTION_11_0();
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v3[44] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[45] = v6;
  v3[46] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v3[47] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[48] = v8;
  v3[49] = OUTLINED_FUNCTION_4_0(v8);
  v3[50] = OUTLINED_FUNCTION_11_0();
  uint64_t v9 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[51] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[52] = v10;
  v3[53] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[54] = OUTLINED_FUNCTION_4_0(*(void *)(v11 - 8));
  v3[55] = OUTLINED_FUNCTION_11_0();
  uint64_t v12 = OUTLINED_FUNCTION_63();
  v3[56] = OUTLINED_FUNCTION_9_0(*(void *)(v12 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentRCHFlowStrategy.makeErrorResponse(error:)()
{
  uint64_t v1 = *(void *)(v0 + 320);
  *(void *)(v0 + 240) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v3 = type metadata accessor for CommandFailure(0LL);
  if ((swift_dynamicCast(v0 + 288, v0 + 240, v2, v3, 6LL) & 1) == 0)
  {
LABEL_13:
    uint64_t v30 = *(void *)(v0 + 448);
    uint64_t v31 = *(void *)(v0 + 432);
    uint64_t v32 = type metadata accessor for RunLinkActionCATsSimple(0LL);
    static CATOption.defaultMode.getter(v32);
    unint64_t v33 = (void *)CATWrapperSimple.__allocating_init(options:globals:)(v30, 0LL);
    *(void *)(v0 + 568) = v33;
    uint64_t v34 = type metadata accessor for SpeakableString(0LL);
    __swift_storeEnumTagSinglePayload(v31, 1LL, 1LL, v34);
    id v35 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunLinkActionCATsSimple + *v33 + 80));
    *(void *)(v0 + 576) = v35;
    *id v35 = v0;
    v35[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:);
    OUTLINED_FUNCTION_47_0();
    __asm { BR              X2 }
  }

  uint64_t v4 = *(void *)(v0 + 288);
  *(void *)(v0 + 456) = v4;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  *(void *)(v0 + 464) = __swift_project_value_buffer(*(void *)(v0 + 352), (uint64_t)static Logger.voiceCommands);
  uint64_t v5 = swift_retain(v4);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    *(_DWORD *)uint64_t v8 = 134217984;
    *(void *)(v0 + 304) = CommandFailure.errorCode.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v8 + 4);
    OUTLINED_FUNCTION_61();
    _os_log_impl(&dword_0, v6, v7, "voice command error code: %ld", v8, 0xCu);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  else
  {
    OUTLINED_FUNCTION_61();
  }

  if (CommandFailure.errorCode.getter() == 1307)
  {
    uint64_t v10 = *(void *)(v0 + 440);
    uint64_t v9 = *(void *)(v0 + 448);
    uint64_t v11 = *(void *)(v0 + 328);
    uint64_t v12 = type metadata accessor for RunCustomIntentCATsSimple(0LL);
    static CATOption.defaultMode.getter(v12);
    uint64_t v13 = (void *)CATWrapperSimple.__allocating_init(options:globals:)(v9, 0LL);
    *(void *)(v0 + 472) = v13;
    uint64_t v14 = *(void *)(v11 + 40);
    uint64_t v15 = *(void *)(v11 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v11 + 16), v14);
    *(void *)(v0 + 480) = DeviceState.asSiriKitDeviceState()(v14, v15);
    id v16 = [*(id *)(v11 + 56) _title];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v19 = v18;

    SpeakableString.init(print:speak:)(v17, v19, 0LL, 0LL);
    uint64_t v20 = type metadata accessor for SpeakableString(0LL);
    __swift_storeEnumTagSinglePayload(v10, 0LL, 1LL, v20);
    uint64_t v21 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                    + *v13
                                                    + 144));
    *(void *)(v0 + 488) = v21;
    *uint64_t v21 = v0;
    v21[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:);
    OUTLINED_FUNCTION_47_0();
    __asm { BR              X2 }
  }

  if ((CustomIntentRCHFlowStrategy.isPreflightError(commandFailure:)() & 1) == 0)
  {
    OUTLINED_FUNCTION_61();
    goto LABEL_13;
  }

  uint64_t v23 = *(void *)(v0 + 328);
  outlined init with copy of DeviceState(v23 + 16, v0 + 112);
  uint64_t v24 = type metadata accessor for WorkflowSnippetProvider();
  uint64_t inited = swift_initStackObject(v24, v0 + 16);
  *(void *)(v0 + 536) = inited;
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 112), inited + 16);
  id v26 = [*(id *)(v23 + 56) launchId];
  if (v26)
  {
    uint64_t v27 = v26;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    unint64_t v29 = v28;
  }

  else
  {
    uint64_t v37 = *(void *)(v0 + 328);
    uint64_t v38 = *(void *)(v37 + 40);
    uint64_t v39 = *(void *)(v37 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v23 + 16), v38);
    if ((dispatch thunk of DeviceState.isWatch.getter(v38, v39) & 1) != 0) {
      unint64_t v29 = 0x8000000000192550LL;
    }
    else {
      unint64_t v29 = 0x80000000001920C0LL;
    }
  }

  *(void *)(v0 + 544) = v29;
  uint64_t v40 = (void *)swift_task_alloc(dword_219764);
  *(void *)(v0 + 552) = v40;
  *uint64_t v40 = v0;
  v40[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:);
  OUTLINED_FUNCTION_47_0();
  return WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:)(v41, v42, v43);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 528));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v1 = (void *)v0[62];
  uint64_t v2 = v0[57];
  uint64_t v4 = v0[52];
  uint64_t v3 = v0[53];
  uint64_t v5 = v0[51];
  swift_release(v0[59]);

  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  uint64_t v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_2_0(v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 552);
  *(void *)(*v1 + 560) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 544));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v1 = *(void *)(v0 + 312);
  swift_release(*(void *)(v0 + 536));
  OUTLINED_FUNCTION_34_0();
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 72), v1);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_2_0(v2);
}

{
  _WORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = __swift_project_value_buffer(v1[44], (uint64_t)static Logger.voiceCommands);
  Logger.logObject.getter(v3);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v4))
  {
    uint64_t v0 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    void *v0 = 0;
    OUTLINED_FUNCTION_27_0(&dword_0, v5, v6, "Generated generic failure dialog");
    OUTLINED_FUNCTION_1_0((uint64_t)v0);
  }

  os_log_type_t v7 = v1[73];
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_55();
  uint64_t v8 = OUTLINED_FUNCTION_13_0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  OUTLINED_FUNCTION_32_0(v8, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OUTLINED_FUNCTION_53(25LL);
  OUTLINED_FUNCTION_35_0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v9 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v9);
  v1[75] = OUTLINED_FUNCTION_57();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = OUTLINED_FUNCTION_19(v10, 40LL);
  *(_OWORD *)(v11 + 16) = xmmword_17E150;
  *(void *)(v11 + 32) = v7;
  OUTLINED_FUNCTION_25_0(v11, v12, v13);
  v1[76] = v20;
  OUTLINED_FUNCTION_37_0();
  uint64_t v14 = (void *)swift_task_alloc(v0);
  v1[77] = (uint64_t)v14;
  uint64_t v15 = OUTLINED_FUNCTION_22_0(v14);
  return OUTLINED_FUNCTION_10(v15, v16, v17, v18);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 616));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v1 = (void *)v0[73];
  uint64_t v2 = v0[52];
  swift_release(v0[71]);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_2_0(v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  Swift::String v9;
  Swift::String v10;
  void *object;
  uint64_t v12;
  os_log_s *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21[2];
  swift_release(v0[71]);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = v0[74];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[46];
  uint64_t v5 = v0[43];
  uint64_t v4 = v0[44];
  uint64_t v6 = v0[42];
  os_log_type_t v7 = __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v8(v3, v7, v4);
  v21[0] = 0LL;
  v21[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(56LL);
  v9._object = (void *)0x8000000000192480LL;
  v9._countAndFlagsBits = 0xD000000000000036LL;
  String.append(_:)(v9);
  swift_getErrorValue(v1, v0 + 33, v0 + 25);
  v10._countAndFlagsBits = Error.localizedDescription.getter(v0[26], v0[27]);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v8(v5, v3, v4);
  __swift_storeEnumTagSinglePayload(v5, 0LL, 1LL, v4);
  outlined init with copy of Logger?(v5, v6);
  if (__swift_getEnumTagSinglePayload(v6, 1LL, v4) == 1)
  {
    outlined destroy of SpeakableString?(v0[42], &demangling cache variable for type metadata for Logger?);
  }

  else
  {
    uint64_t v12 = swift_bridgeObjectRetain_n(0xE000000000000000LL, 2LL);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    uint64_t v14 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_41_0(v13))
    {
      uint64_t v15 = OUTLINED_FUNCTION_38(32LL);
      id v16 = OUTLINED_FUNCTION_38(64LL);
      v21[0] = v16;
      *(_DWORD *)uint64_t v15 = 136315650;
      uint64_t v17 = StaticString.description.getter( "/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/CustomIntents/FlowStrategies/CustomI ntentRCHFlowStrategy.swift",  132LL,  2LL);
      uint64_t v19 = v18;
      v0[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v15 + 4);
      swift_bridgeObjectRelease(v19);
      *(_WORD *)(v15 + 12) = 2048;
      v0[29] = 116LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v15 + 14);
      *(_WORD *)(v15 + 22) = 2080;
      swift_bridgeObjectRetain(0xE000000000000000LL);
      v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0LL, 0xE000000000000000LL, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 29, v15 + 24);
      swift_bridgeObjectRelease_n(0xE000000000000000LL, 3LL);
      _os_log_impl(&dword_0, v13, v14, "FatalError at %s:%lu - %s", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy(v16, 2LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v16);
      OUTLINED_FUNCTION_1_0(v15);
    }

    else
    {

      swift_bridgeObjectRelease_n(0xE000000000000000LL, 2LL);
    }

    (*(void (**)(void, void))(v0[45] + 8LL))(v0[42], v0[44]);
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)(0LL, 0xE000000000000000LL);
  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/CustomIntents/FlowStrategies/CustomInte ntRCHFlowStrategy.swift",  132LL,  2LL);
}

uint64_t CustomIntentRCHFlowStrategy.makeErrorResponse(error:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = (*v2)[61];
  v3[62] = a1;
  v3[63] = v1;
  swift_task_dealloc(v4);
  outlined destroy of SpeakableString?(v3[55], &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  _WORD *v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  Logger.logObject.getter(a1);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v4))
  {
    uint64_t v1 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    *uint64_t v1 = 0;
    OUTLINED_FUNCTION_27_0(&dword_0, v5, v6, "Generated failure dialog runCustomIntent#extensionTimedOut");
    OUTLINED_FUNCTION_1_0((uint64_t)v1);
  }

  os_log_type_t v7 = v2[62];
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_55();
  uint64_t v8 = OUTLINED_FUNCTION_13_0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  OUTLINED_FUNCTION_32_0(v8, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OUTLINED_FUNCTION_53(33LL);
  OUTLINED_FUNCTION_35_0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  uint64_t v9 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v9);
  v2[64] = OUTLINED_FUNCTION_57();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = OUTLINED_FUNCTION_19(v10, 40LL);
  *(_OWORD *)(v11 + 16) = xmmword_17E150;
  *(void *)(v11 + 32) = v7;
  OUTLINED_FUNCTION_25_0(v11, v12, v13);
  v2[65] = v20;
  OUTLINED_FUNCTION_37_0();
  uint64_t v14 = (void *)swift_task_alloc(v1);
  v2[66] = v14;
  uint64_t v15 = OUTLINED_FUNCTION_22_0(v14);
  return OUTLINED_FUNCTION_10(v15, v16, v17, v18);
}

{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v3 = *v2;
  uint64_t v4 = (*v2)[72];
  v3[73] = a1;
  v3[74] = v1;
  swift_task_dealloc(v4);
  outlined destroy of SpeakableString?(v3[54], &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

#error "BDA8: call analysis failed (funcsize=85)"
#error "BF08: call analysis failed (funcsize=88)"
uint64_t CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v6 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(*(void *)v2 + 128LL));
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v8(a1, a2);
}

uint64_t CustomIntentRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v5[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[8] = v7;
  v5[9] = OUTLINED_FUNCTION_4_0(v7);
  v5[10] = OUTLINED_FUNCTION_11_0();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v5[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[12] = v9;
  v5[13] = OUTLINED_FUNCTION_9_0(v9);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v0[6] + 64LL) + 352LL));
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = CustomIntentRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  return v3(v0[3], v0[4], v0[5]);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  char *v16;
  uint64_t v17;
  OUTLINED_FUNCTION_51_0();
  uint64_t v1 = (void *)v0[15];
  uint64_t v2 = v0[8];
  uint64_t v3 = OUTLINED_FUNCTION_55();
  uint64_t v4 = OUTLINED_FUNCTION_26(v3, "catId");
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  uint64_t v6 = OUTLINED_FUNCTION_13_0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  OUTLINED_FUNCTION_32_0(v6, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OutputGenerationManifest.responseViewId.setter(v5);
  OUTLINED_FUNCTION_35_0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v7 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v7);
  v0[16] = OUTLINED_FUNCTION_57();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = OUTLINED_FUNCTION_19(v8, 40LL);
  *(_OWORD *)(v9 + 16) = xmmword_17E150;
  *(void *)(v9 + 32) = v1;
  OUTLINED_FUNCTION_25_0(v9, v10, v11);
  v0[17] = v17;
  uint64_t v13 = v1;
  uint64_t v14 = (void *)swift_task_alloc(v12);
  v0[18] = v14;
  *uint64_t v14 = v0;
  v14[1] = CustomIntentRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  return ((uint64_t (*)(void, uint64_t, void))v16)(v0[2], v17, v0[13]);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 144));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v1 = *(void *)(v0 + 96);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v2();
}

uint64_t CustomIntentRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 112);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 104));
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    *(void *)(v4 + 120) = a1;
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

uint64_t CustomIntentRCHFlowStrategy.isPreflightError(commandFailure:)()
{
  if (CommandFailure.errorCode.getter() == 3006) {
    return 1LL;
  }
  uint64_t result = CommandFailure.underlyingError.getter();
  if (result)
  {
    uint64_t v17 = result;
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    unint64_t v2 = type metadata accessor for NSError();
    uint64_t v3 = swift_dynamicCast(&v16, &v17, v1, v2, 6LL);
    if ((v3 & 1) == 0) {
      return 0LL;
    }
    uint64_t v4 = v16;
    id v5 = OUTLINED_FUNCTION_26(v3, "domain");
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(INExtensionMatchingErrorDomain);
    if (v6 == v9 && v8 == v10)
    {
      uint64_t v14 = swift_bridgeObjectRelease_n(v8, 2LL);
    }

    else
    {
      uint64_t v12 = v10;
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0LL);
      OUTLINED_FUNCTION_20();
      uint64_t v14 = swift_bridgeObjectRelease(v12);
      if ((v13 & 1) == 0)
      {

        return 0LL;
      }
    }

    uint64_t v15 = (char *)OUTLINED_FUNCTION_26(v14, "code");

    return v15 == (_BYTE *)&stru_B98.addr + 6;
  }

  return result;
}

void CustomIntentsDialogTemplatingError.hash(into:)()
{
}

Swift::Int CustomIntentsDialogTemplatingError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError( uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t CustomIntentRCHFlowStrategy.deinit()
{
  swift_release(*(void *)(v0 + 64));
  return v0;
}

uint64_t CustomIntentRCHFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance CustomIntentRCHFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance CustomIntentRCHFlowStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 120LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance CustomIntentRCHFlowStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance CustomIntentRCHFlowStrategy( uint64_t a1)
{
  uint64_t v4 = OUTLINED_FUNCTION_3_0(*((void *)*v2 + 2));
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v2[1](v4);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance CustomIntentRCHFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CustomIntentRCHFlowStrategy();
  return RCHFlowStrategyAsync.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeErrorResponse(error:) in conformance CustomIntentRCHFlowStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 128LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v9(a1, a2);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance CustomIntentRCHFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentRCHFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance CustomIntentRCHFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentRCHFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance CustomIntentRCHFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentRCHFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance CustomIntentRCHFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(**(void **)v4 + 136LL);
  char v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(**(void **)v4 + 144LL);
  char v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy()
{
  return v0[1]();
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentRCHFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)[1]);
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentRCHFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentRCHFlowStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentRCHFlowStrategy( uint64_t a1)
{
  return v1[1](a1);
}

void specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( __int128 *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(a10 + 136) = type metadata accessor for AppNameResolver();
  *(void *)(a10 + 144) = &protocol witness table for AppNameResolver;
  *(void *)(a10 + 112) = a9;
  *(void *)(a10 + 56) = a2;
  outlined init with take of AceServiceInvokerAsync(a1, a10 + 16);
  *(void *)(a10 + 64) = a3;
  *(_BYTE *)(a10 + 72) = a4 & 1;
  *(void *)(a10 + 80) = a5;
  *(void *)(a10 + 88) = a6;
  *(void *)(a10 + 96) = a7;
  *(void *)(a10 + 104) = a8;
  OUTLINED_FUNCTION_24_0();
}

unint64_t lazy protocol witness table accessor for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors;
  if (!lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomIntentFlowErrors,  &type metadata for CustomIntentFlowErrors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors;
  if (!lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomIntentFlowErrors,  &type metadata for CustomIntentFlowErrors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors);
  }

  return result;
}

uint64_t outlined init with copy of Logger?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_65();
  v4(v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError;
  if (!lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomIntentRCHFlowStrategy.CustomIntentRCHError,  &type metadata for CustomIntentRCHFlowStrategy.CustomIntentRCHError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError;
  if (!lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CustomIntentRCHFlowStrategy.CustomIntentRCHError,  &type metadata for CustomIntentRCHFlowStrategy.CustomIntentRCHError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError);
  }

  return result;
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in CustomIntentRCHFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy( &lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentRCHFlowStrategy);
}

uint64_t type metadata accessor for CustomIntentRCHFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin27CustomIntentRCHFlowStrategy);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in CustomIntentRCHFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy( &lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentRCHFlowStrategy);
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in CustomIntentRCHFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy( &lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentRCHFlowStrategy);
}

uint64_t lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for CustomIntentRCHFlowStrategy();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for CustomIntentRCHFlowStrategy.CustomIntentRCHError( unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for CustomIntentRCHFlowStrategy.CustomIntentRCHError( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_CDF0 + 4 * byte_17E160[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_CE10 + 4 * byte_17E165[v4]))();
  }
}

_BYTE *sub_CDF0(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_CE10(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_CE18(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_CE20(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_CE28(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_CE30(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentRCHFlowStrategy.CustomIntentRCHError()
{
  return &type metadata for CustomIntentRCHFlowStrategy.CustomIntentRCHError;
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSError);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t OUTLINED_FUNCTION_1_0(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t OUTLINED_FUNCTION_2_0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_3_0(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_4_0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_5_0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return swift_task_dealloc(*(void *)(v0 + 448));
}

uint64_t OUTLINED_FUNCTION_8_0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_9_0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_11_0()
{
  return swift_task_alloc(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_13_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1, v3);
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_16(float a1)
{
  *uint64_t v2 = a1;
  return swift_getErrorValue(v3, v1, v4);
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return swift_task_dealloc(*(void *)(v0 + 448));
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_21_0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t OUTLINED_FUNCTION_22_0(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 312);
}

  ;
}

uint64_t OUTLINED_FUNCTION_25_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

void OUTLINED_FUNCTION_27_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_28_0(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_29_0()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_30_0()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_31()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_32_0(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t OUTLINED_FUNCTION_33_0()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_34_0()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_35_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void OUTLINED_FUNCTION_36_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

id OUTLINED_FUNCTION_37_0()
{
  return v0;
}

  ;
}

uint64_t OUTLINED_FUNCTION_39_0()
{
  return swift_errorRelease(v0);
}

uint64_t OUTLINED_FUNCTION_40_0()
{
  return swift_task_dealloc(v0);
}

BOOL OUTLINED_FUNCTION_41_0(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_42_0@<X0>(uint64_t a1@<X8>)
{
  return swift_arrayDestroy(v1, 1LL, a1 + 8);
}

uint64_t OUTLINED_FUNCTION_43_0()
{
  return swift_errorRelease(v0);
}

void OUTLINED_FUNCTION_44()
{
}

BOOL OUTLINED_FUNCTION_45_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_46_0()
{
  return swift_errorRetain(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_48_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, a2, v9);
}

void OUTLINED_FUNCTION_50_0()
{
  *(void *)(v1 - 8) = *v0;
}

  ;
}

uint64_t OUTLINED_FUNCTION_52@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_53(uint64_t a1)
{
  return OutputGenerationManifest.responseViewId.setter(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL);
}

uint64_t OUTLINED_FUNCTION_54()
{
  return *(void *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_55()
{
  return static DialogPhase.error.getter();
}

uint64_t OUTLINED_FUNCTION_56()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_57()
{
  return ResponseFactory.init()();
}

uint64_t OUTLINED_FUNCTION_58()
{
  return static os_log_type_t.debug.getter();
}

uint64_t OUTLINED_FUNCTION_59()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_61()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_62(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_63()
{
  return type metadata accessor for CATOption(0LL);
}

uint64_t OUTLINED_FUNCTION_64()
{
  return type metadata accessor for ResponseFactory(0LL);
}

uint64_t OUTLINED_FUNCTION_65()
{
  return v0;
}

void closure #1 in variable initialization expression of static AutoShortcutFlow.defaultRunner( const void *a1)
{
  uint64_t v2 = type metadata accessor for DateTimeResolver(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  os_log_type_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t v9 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = 0LL;
  memset(v28, 0, sizeof(v28));
  uint64_t v23 = a1;
  outlined retain of SiriWorkflowRunnerInput((uint64_t)a1);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v12 = static WFDialogState.shared;
  swift_retain(static WFDialogState.shared);
  char v13 = static AceService.currentAsync.getter(v27);
  uint64_t v14 = static Device.current.getter(v26, v13);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v25, v14);
  type metadata accessor for RunCustomIntentCATs(0LL);
  OUTLINED_FUNCTION_35_1();
  uint64_t v22 = OUTLINED_FUNCTION_46_1();
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_35_1();
  uint64_t v15 = OUTLINED_FUNCTION_46_1();
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_35_1();
  uint64_t v16 = CATWrapperSimple.__allocating_init(options:globals:)(v11, 0LL);
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_35_1();
  uint64_t v17 = OUTLINED_FUNCTION_46_1();
  static AceService.currentAsync.getter(v24);
  uint64_t v18 = type metadata accessor for LocationProvider();
  uint64_t v19 = OUTLINED_FUNCTION_19(v18, 64LL);
  *(void *)(v19 + 16) = 0x3FA999999999999ALL;
  uint64_t v20 = outlined init with take of AceServiceInvokerAsync(v24, v19 + 24);
  DateTimeResolver.init()(v20);
  uint64_t v21 = (char *)objc_allocWithZone((Class)OUTLINED_FUNCTION_88());
  OUTLINED_FUNCTION_75((uint64_t)v6, (uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  swift_retain(v19);
  specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)( v23,  (uint64_t)v28,  v12,  (uint64_t)v27,  (uint64_t)v26,  (uint64_t)v25,  v22,  v15,  v16,  v17,  (uint64_t)closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow,  0LL,  v19,  (uint64_t)v6,  (uint64_t)closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow,  0LL,  v21);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  swift_release(v19);
  OUTLINED_FUNCTION_24_0();
}

uint64_t (**AutoShortcutFlow.defaultRunner.unsafeMutableAddressor())()
{
  return &static AutoShortcutFlow.defaultRunner;
}

void (*static AutoShortcutFlow.defaultRunner.getter())(const void *a1)
{
  return closure #1 in variable initialization expression of static AutoShortcutFlow.defaultRunner;
}

BOOL static VoiceCommandsParityError.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void VoiceCommandsParityError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int VoiceCommandsParityError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutFlow.State( char *a1, char *a2)
{
  return static VoiceCommandsParityError.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutFlow.State()
{
  return VoiceCommandsParityError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AutoShortcutFlow.State(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutFlow.State( uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void AutoShortcutFlow.__allocating_init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
}

void AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
}

void AutoShortcutFlow.__allocating_init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, char a10, void (*a11)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t))
{
  uint64_t v27 = a8;
  unsigned int v26 = a7;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a11;
  uint64_t v17 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v17);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v21 + 16))(v20);
  v23(v20, a2, a3, a4, v24, v25, v26, v27, a9, a10, v11, v17, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  OUTLINED_FUNCTION_24_0();
}

uint64_t AutoShortcutFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type AutoShortcutFlow and conformance AutoShortcutFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutFlow,  (uint64_t)&protocol conformance descriptor for AutoShortcutFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v5, v6);
}

uint64_t AutoShortcutFlow.executeAppShortcut(invocation:)(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[15] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[16] = v5;
  v3[17] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  v3[18] = v6;
  v3[19] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[20] = swift_task_alloc(v7);
  v3[21] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for AutoShortcutInvocation(0LL);
  v3[22] = v8;
  v3[23] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(AutoShortcutFlow.executeAppShortcut(invocation:), 0LL, 0LL);
}

uint64_t AutoShortcutFlow.executeAppShortcut(invocation:)()
{
  uint64_t v1 = *(void **)(v0 + 112);
  static InstrumentationUtils.emitAutoShortcutUsedInstrumentation(autoShortcutTemplate:)();
  uint64_t v2 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v1[5]);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v2 + 8));
  *(void *)(v0 + 192) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_59_0(v3, (uint64_t)AutoShortcutFlow.executeAppShortcut(invocation:));
  return OUTLINED_FUNCTION_36_1(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  void *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v2 = *(void **)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v3 = *(void **)(v0 + 112);
  __swift_project_boxed_opaque_existential_1(v3 + 27, v3[30]);
  __swift_project_boxed_opaque_existential_1(v3 + 2, v3[5]);
  OUTLINED_FUNCTION_48_1();
  static String._unconditionallyBridgeFromObjectiveC(_:)([v2 identifier]);
  OUTLINED_FUNCTION_79();
  *(void *)(v0 + 216) = OUTLINED_FUNCTION_22_1();
  if (v1)
  {
    uint64_t v4 = *(void **)(v0 + 200);
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_14();

    swift_task_dealloc(*(void *)(v0 + 184));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v6 = *(void **)(v0 + 112);
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_14();
    unint64_t v7 = v6[5];
    uint64_t v8 = v6[6];
    __swift_project_boxed_opaque_existential_1(v6 + 2, v7);
    uint64_t v9 = *(int **)(v8 + 16);
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)v9 + *v9);
    uint64_t v10 = (void *)swift_task_alloc(v9[1]);
    *(void *)(v0 + 224) = v10;
    *uint64_t v10 = v0;
    v10[1] = AutoShortcutFlow.executeAppShortcut(invocation:);
    return v11(v7, v8);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 232) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  id v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
LABEL_3:
  if (v2)
  {
    uint64_t v3 = v1 & 0xC000000000000001LL;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, v3 == 0);
    if (v3) {
      uint64_t v4 = (id)OUTLINED_FUNCTION_87();
    }
    else {
      uint64_t v4 = *(id *)(*(void *)(v0 + 232) + 32LL);
    }
    OUTLINED_FUNCTION_14();
    uint64_t v5 = [v4 orderedPhrases];

    unint64_t v7 = OUTLINED_FUNCTION_72( v6,  (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase,  &OBJC_CLASS___LNAutoShortcutLocalizedPhrase_ptr);
    uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v7);

    uint64_t v8 = v1;
    if ((unint64_t)v1 >> 62)
    {
      if (v1 >= 0) {
        v1 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      swift_bridgeObjectRetain(v8);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v1);
      OUTLINED_FUNCTION_37();
      if (v9) {
        goto LABEL_8;
      }
    }

    else
    {
      uint64_t v9 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
      if (v9)
      {
LABEL_8:
        uint64_t v10 = 0LL;
        v64 = *(void *)(v0 + 144);
        v66 = *(void *)(v0 + 176);
        v68 = v8 & 0xC000000000000001LL;
        v61 = *(void *)(v0 + 128);
        v62 = v9;
        v59 = v8;
        do
        {
          if (v68) {
            uint64_t v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
          }
          else {
            uint64_t v11 = *(id *)(v8 + 8 * v10 + 32);
          }
          uint64_t v12 = v10 + 1;
          if (__OFADD__(v10, 1LL))
          {
            __break(1u);
LABEL_37:
            if (v1 < 0) {
              v44 = v1;
            }
            else {
              v44 = v1 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(v1);
            uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v44);
            OUTLINED_FUNCTION_20();
            goto LABEL_3;
          }

          char v13 = *(void *)(v0 + 104);
          v70 = v11;
          uint64_t v14 = [v11 basePhraseTemplate];
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          uint64_t v17 = v16;

          uint64_t v18 = *(void *)(v13 + 32);
          uint64_t v19 = *(void *)(v13 + 40);
          uint64_t v1 = *(void *)(v0 + 184);
          if (v15 == v18 && v17 == v19)
          {
            swift_bridgeObjectRelease(v17);
            OUTLINED_FUNCTION_81();
          }

          else
          {
            uint64_t v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v18, v19, 0LL);
            swift_bridgeObjectRelease(v17);
            OUTLINED_FUNCTION_81();
            if ((v21 & 1) == 0)
            {
              outlined destroy of AutoShortcutInvocation(*(void *)(v0 + 184));
              goto LABEL_29;
            }
          }

          uint64_t v22 = [v70 parameterIdentifier];
          if (v22)
          {
            uint64_t v23 = v22;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v24 = 0LL;
          }

          else
          {
            uint64_t v24 = 1LL;
          }

          uint64_t v25 = *(void *)(v0 + 184);
          unsigned int v26 = *(void *)(v0 + 168);
          uint64_t v27 = *(void *)(v0 + 152);
          unint64_t v28 = *(void *)(v0 + 120);
          __swift_storeEnumTagSinglePayload(v26, v24, 1LL, v28);
          uint64_t v29 = v25 + *(int *)(v66 + 28);
          uint64_t v1 = v27 + *(int *)(v64 + 48);
          outlined init with copy of UUID?(v26, v27);
          outlined init with copy of UUID?(v29, v1);
          if (__swift_getEnumTagSinglePayload(v27, 1LL, v28) == 1)
          {
            uint64_t v30 = *(void *)(v0 + 184);
            outlined destroy of Any?(*(void *)(v0 + 168), &demangling cache variable for type metadata for UUID?);
            outlined destroy of AutoShortcutInvocation(v30);
            uint64_t v9 = v62;
            if (OUTLINED_FUNCTION_68() == 1)
            {
              outlined destroy of Any?(*(void *)(v0 + 152), &demangling cache variable for type metadata for UUID?);
              uint64_t v41 = v70;
LABEL_35:
              OUTLINED_FUNCTION_37();
              uint64_t v42 = [v41 localizedPhrase];
              uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
              uint64_t v2 = v43;

              goto LABEL_46;
            }

uint64_t AutoShortcutFlow.executeAppShortcut(invocation:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 192);
  uint64_t v4 = *v2;
  *(void *)(v4 + 200) = a1;
  *(void *)(v4 + 208) = v1;
  OUTLINED_FUNCTION_54_0(v3);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 184));
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    return (*(uint64_t (**)(void))(v4 + 8))();
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return swift_task_switch(v6, v7, v8);
  }

LABEL_28:
            outlined destroy of Any?( *(void *)(v0 + 152),  &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_29:
            uint64_t v41 = v70;
            goto LABEL_30;
          }

          outlined init with copy of UUID?(*(void *)(v0 + 152), *(void *)(v0 + 160));
          uint64_t v31 = OUTLINED_FUNCTION_68();
          uint64_t v32 = *(void *)(v0 + 184);
          uint64_t v34 = *(void *)(v0 + 160);
          unint64_t v33 = *(void *)(v0 + 168);
          if (v31 == 1)
          {
            uint64_t v1 = *(void *)(v0 + 120);
            outlined destroy of Any?(*(void *)(v0 + 168), &demangling cache variable for type metadata for UUID?);
            outlined destroy of AutoShortcutInvocation(v32);
            (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v34, v1);
            uint64_t v9 = v62;
            goto LABEL_28;
          }

          v60 = *(void *)(v0 + 152);
          id v35 = *(void *)(v0 + 136);
          v36 = *(void *)(v0 + 120);
          OUTLINED_FUNCTION_75(v35, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 32));
          lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type UUID and conformance UUID,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v1 = dispatch thunk of static Equatable.== infix(_:_:)(v34, v35, v36, v37);
          uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
          uint64_t v39 = v35;
          uint64_t v8 = v59;
          v38(v39, v36);
          outlined destroy of Any?(v33, &demangling cache variable for type metadata for UUID?);
          outlined destroy of AutoShortcutInvocation(v32);
          v38(v34, v36);
          outlined destroy of Any?(v60, &demangling cache variable for type metadata for UUID?);
          uint64_t v9 = v62;
          uint64_t v41 = v70;
          if ((v1 & 1) != 0) {
            goto LABEL_35;
          }
LABEL_30:

          ++v10;
        }

        while (v12 != v9);
      }
    }

    OUTLINED_FUNCTION_37();
    uint64_t v40 = 0LL;
    uint64_t v2 = 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 232));
    uint64_t v40 = 0LL;
  }

    char v13 = (v16 - 1) & v16;
  }

  uint64_t v23 = v22 + 5;
  if (v23 >= v129)
  {
LABEL_78:
    swift_release();
    OUTLINED_FUNCTION_20();
    v113 = swift_getObjectType(v127);
    *(void *)&v146[0] = _typeName(_:qualified:)(v113, 0LL);
    *((void *)&v146[0] + 1) = v114;
    OUTLINED_FUNCTION_55_3(40LL);
    v115._countAndFlagsBits = Dictionary.description.getter( v11,  &type metadata for String,  &type metadata for Substring,  &protocol witness table for String);
    String.append(_:)(v115);
    swift_bridgeObjectRelease(v11);
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_55_3(41LL);
    v116 = *((void *)&v146[0] + 1);
    *(void *)&v144[0] = 92LL;
    *((void *)&v144[0] + 1) = 0xE100000000000000LL;
    *(void *)&v147 = 0LL;
    *((void *)&v147 + 1) = 0xE000000000000000LL;
    v126 = lazy protocol witness table accessor for type String and conformance String();
    v117 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v144,  &v147,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v126);
    swift_bridgeObjectRelease(v116);
    return v117;
  }

  uint64_t v16 = *(void *)(v128 + 8 * v23);
  if (v16)
  {
    uint64_t v10 = v23;
    goto LABEL_28;
  }

  while (1)
  {
    uint64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    OUTLINED_FUNCTION_30_5();
    if (v17 == v18) {
      goto LABEL_78;
    }
    OUTLINED_FUNCTION_29_5();
    uint64_t v23 = v24 + 1;
    if (v16) {
      goto LABEL_28;
    }
  }

LABEL_46:
  v45 = *(void **)(v0 + 216);
  v46 = *(void **)(v0 + 200);
  v63 = *(void *)(v0 + 184);
  v65 = *(void *)(v0 + 168);
  v67 = *(void *)(v0 + 160);
  v69 = *(void *)(v0 + 152);
  v71 = *(id *)(v0 + 136);
  v47 = *(uint64_t **)(v0 + 104);
  v48 = v47[3];
  v49 = *v47;
  v50 = v47[1];
  *(void *)(v0 + 16) = v47[2];
  v51 = *(void *)(v0 + 112);
  *(void *)(v0 + 24) = v48;
  *(void *)(v0 + 32) = v49;
  *(void *)(v0 + 40) = v50;
  *(void *)(v0 + 48) = v46;
  *(void *)(v0 + 56) = v45;
  *(void *)(v0 + 64) = v40;
  *(void *)(v0 + 72) = v2;
  *(_BYTE *)(v0 + 80) = 1;
  v52 = *(uint64_t (**)(uint64_t))(v51 + 256);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v50);
  v53 = v46;
  v54 = v45;
  v55 = (void *)v52(v0 + 16);
  *(void *)(v0 + 88) = v55;
  v56 = OUTLINED_FUNCTION_88();
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow,  255LL,  type metadata accessor for WorkflowRunnerFlow,  (uint64_t)&protocol conformance descriptor for WorkflowRunnerFlow);
  static ExecuteResponse.complete<A>(next:)(v0 + 88, v56, v57);

  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v50);

  OUTLINED_FUNCTION_14();
  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  swift_task_dealloc(v69);
  swift_task_dealloc(v71);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

                  uint64_t v23 = (v28 - 1) & v28;
                  unsigned int v26 = __clz(__rbit64(v28)) + (v19 << 6);
                }

                uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v26);
                uint64_t v31 = *v30;
                uint64_t v32 = v30[1];
                unint64_t v33 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v26);
                uint64_t v9 = *v33;
                uint64_t v10 = (void *)v33[1];
                if (*v33 != v2 || v1 != (void)v10)
                {
                  uint64_t v9 = OUTLINED_FUNCTION_167(v9, (uint64_t)v10, v2, v1);
                  if ((v9 & 1) == 0) {
                    continue;
                  }
                }

                if (v31 != 1702060354 || v32 != 0xE400000000000000LL)
                {
                  uint64_t v9 = OUTLINED_FUNCTION_167(v31, v32, 1702060354LL, 0xE400000000000000LL);
                  if ((v9 & 1) == 0)
                  {
                    swift_bridgeObjectRetain(v32);
                    OUTLINED_FUNCTION_37();
                    swift_release();
                    goto LABEL_27;
                  }
                }
              }
            }
          }

          OUTLINED_FUNCTION_14();
          OUTLINED_FUNCTION_37();
          goto LABEL_27;
        }

        OUTLINED_FUNCTION_37();
        uint64_t v11 = v5;
      }

      else
      {
        uint64_t v11 = v1;
      }

      swift_bridgeObjectRelease(v11);
    }
  }

                __swift_destroy_boxed_opaque_existential_1Tm(v125);
                OUTLINED_FUNCTION_1_2();
              }

LABEL_87:
              uint64_t v25 = v28;
              uint64_t v20 = v26;
              if ((v17 & 0x8000000000000000LL) == 0) {
                goto LABEL_14;
              }
LABEL_16:
              uint64_t v29 = __CocoaDictionary.Iterator.next()();
              if (v29)
              {
                uint64_t v31 = v29;
                uint64_t v32 = v30;
                *(void *)&v125[0] = v29;
                unint64_t v33 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
                swift_unknownObjectRetain(v31);
                swift_dynamicCast(v124, v125, v114, v33, 7LL);
                uint64_t v34 = (id)v124[0];
                swift_unknownObjectRelease(v31);
                *(void *)&v125[0] = v32;
                id v35 = type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for INCodableAttribute,  &OBJC_CLASS___INCodableAttribute_ptr);
                swift_unknownObjectRetain(v32);
                swift_dynamicCast(v124, v125, v114, v35, 7LL);
                v36 = (id)v124[0];
                swift_unknownObjectRelease(v32);
                unint64_t v28 = v25;
                unsigned int v26 = v20;
                if (v34) {
                  continue;
                }
              }

              goto LABEL_89;
            }
          }

          goto LABEL_89;
        }

        unint64_t v28 = v25 + 4;
        if (v25 + 4 < v116)
        {
          uint64_t v38 = *(void *)(v117 + 8 * v28);
          if (!v38)
          {
            uint64_t v39 = v25 + 5;
            do
            {
              if (v39 >= v116) {
                goto LABEL_89;
              }
              uint64_t v38 = *(void *)(v117 + 8 * v39++);
            }

            while (!v38);
            unint64_t v28 = v39 - 1;
          }

          goto LABEL_32;
        }
      }

    outlined destroy of Any?((uint64_t)&v99);
    return 0LL;
  }

  uint64_t v14 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_47(v14, v15, v16, v17, v18, v19, v20, v21, v82, v92, v99);
  if (!v100) {
    goto LABEL_46;
  }
  if ((OUTLINED_FUNCTION_0_49(v22, v23, v24, (uint64_t)&type metadata for String, v25, v26, v27, v28, v83, v93, v99) & 1) != 0)
  {
    OUTLINED_FUNCTION_6_48();
    if (v13 && v11 == 0xE400000000000000LL)
    {
      uint64_t v31 = swift_bridgeObjectRelease();
    }

    else
    {
      OUTLINED_FUNCTION_1_41(1954047348LL, 0xE400000000000000LL, v29);
      uint64_t v31 = OUTLINED_FUNCTION_12();
      if ((v12 & 1) == 0) {
        return 0LL;
      }
    }

    OUTLINED_FUNCTION_2_43(v31, v32, v33, v34, v35, v36, v37, v38, v84, v94, v99);
    if (v100)
    {
      return 0LL;
    }

    goto LABEL_46;
  }

  return 0LL;
}

uint64_t AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:)(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  return swift_task_switch(AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:), 0LL, 0LL);
}

uint64_t AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:)()
{
  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v1[10]);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v2 + 32));
  *(void *)(v0 + 120) = v3;
  *uint64_t v3 = v0;
  v3[1] = AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:);
  OUTLINED_FUNCTION_85();
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v3 + 128) = v2;
  *(void *)(v3 + 136) = v0;
  OUTLINED_FUNCTION_54_0(v4);
  if (v0) {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  OUTLINED_FUNCTION_28_1();
  uint64_t v2 = *(void **)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 112);
  __swift_project_boxed_opaque_existential_1(v3 + 27, v3[30]);
  __swift_project_boxed_opaque_existential_1(v3 + 2, v3[5]);
  OUTLINED_FUNCTION_48_1();
  static String._unconditionallyBridgeFromObjectiveC(_:)([v2 identifier]);
  OUTLINED_FUNCTION_79();
  uint64_t v4 = OUTLINED_FUNCTION_22_1();
  uint64_t v5 = *(void **)(v0 + 128);
  if (v1)
  {
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_14();

    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    uint64_t v7 = (void *)v4;
    uint64_t v9 = *(void **)(v0 + 104);
    uint64_t v8 = *(void *)(v0 + 112);
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_14();
    uint64_t v10 = v9[6];
    uint64_t v12 = v9[1];
    uint64_t v11 = v9[2];
    char v13 = v9[3];
    uint64_t v14 = v9[4];
    *(void *)(v0 + 16) = v9[5];
    *(void *)(v0 + 24) = v10;
    *(void *)(v0 + 32) = v12;
    *(void *)(v0 + 40) = v11;
    *(void *)(v0 + 48) = v13;
    *(void *)(v0 + 56) = v14;
    *(void *)(v0 + 64) = v7;
    *(void *)(v0 + 72) = v5;
    *(_BYTE *)(v0 + 80) = 2;
    uint64_t v15 = *(uint64_t (**)(uint64_t))(v8 + 256);
    OUTLINED_FUNCTION_80();
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    uint64_t v16 = v7;
    uint64_t v17 = v5;
    uint64_t v18 = (void *)v15(v0 + 16);
    uint64_t v19 = [objc_allocWithZone(FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsed) init];
    if (v19)
    {
      uint64_t v20 = v19;
      outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsed.appShortcutId.setter( v12,  v11,  v19);
      specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)();
    }

    uint64_t v21 = *(void **)(v0 + 128);
    *(void *)(v0 + 88) = v18;
    uint64_t v22 = OUTLINED_FUNCTION_88();
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow,  255LL,  type metadata accessor for WorkflowRunnerFlow,  (uint64_t)&protocol conformance descriptor for WorkflowRunnerFlow);
    static ExecuteResponse.complete<A>(next:)(v0 + 88, v22, v23);

    swift_bridgeObjectRelease(v10);
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_14();

    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v6();
}

uint64_t AutoShortcutFlow.execute()(uint64_t a1)
{
  v2[118] = v1;
  v2[117] = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[119] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for AceOutput(0LL);
  v2[120] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[121] = v5;
  v2[122] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[123] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for CATOption(0LL);
  v2[124] = OUTLINED_FUNCTION_9_0(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for TemplatingResult(0LL);
  v2[125] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[126] = v9;
  v2[127] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoShortcutInvocation?);
  v2[128] = OUTLINED_FUNCTION_9_0(*(void *)(v10 - 8));
  uint64_t v11 = type metadata accessor for AutoShortcutInvocation(0LL);
  v2[129] = v11;
  v2[130] = OUTLINED_FUNCTION_9_0(*(void *)(v11 - 8));
  uint64_t v12 = type metadata accessor for FlowUnhandledReason(0LL);
  v2[131] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[132] = v13;
  v2[133] = OUTLINED_FUNCTION_9_0(v13);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutFlow.execute()()
{
  uint64_t v2 = *(void *)(v0 + 944);
  if (!*(_BYTE *)(v2 + 273))
  {
    uint64_t v13 = v2 + 16;
    uint64_t v14 = (void *)swift_task_alloc(dword_2149D4);
    *(void *)(v0 + 1072) = v14;
    *uint64_t v14 = v0;
    v14[1] = AutoShortcutFlow.execute();
    return AutoShortcutFlow.checkAssistantIntent(appShortcutInvocation:)(v13);
  }

  if (*(_BYTE *)(v2 + 273) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 1032);
    uint64_t v4 = *(void *)(v0 + 1024);
    uint64_t v5 = v2 + 16;
    outlined init with copy of AppShortcutInvoking(v2 + 16, v0 + 624);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppShortcutInvoking);
    if (swift_dynamicCast(v4, v0 + 624, v6, v3, 6LL))
    {
      uint64_t v9 = *(void *)(v0 + 1040);
      uint64_t v10 = *(void *)(v0 + 1024);
      __swift_storeEnumTagSinglePayload(v10, 0LL, 1LL, *(void *)(v0 + 1032));
      outlined init with take of AutoShortcutInvocation(v10, v9);
      uint64_t v11 = (void *)swift_task_alloc(dword_2149CC);
      *(void *)(v0 + 1080) = v11;
      *uint64_t v11 = v0;
      v11[1] = AutoShortcutFlow.execute();
      return AutoShortcutFlow.executeAppShortcut(invocation:)(*(void *)(v0 + 936), *(void *)(v0 + 1040));
    }

    uint64_t v15 = *(void *)(v0 + 1024);
    OUTLINED_FUNCTION_50_1(v15, v7, v8, *(void *)(v0 + 1032));
    outlined destroy of Any?(v15, &demangling cache variable for type metadata for AutoShortcutInvocation?);
    outlined init with copy of AppShortcutInvoking(v5, v0 + 264);
    if (swift_dynamicCast( v0 + 112,  v0 + 264,  v6,  &type metadata for AppShortcutGeneralizedInvocation,  6LL))
    {
      memcpy((void *)(v0 + 16), (const void *)(v0 + 112), 0x60uLL);
      uint64_t v16 = (void *)swift_task_alloc(dword_2149BC);
      *(void *)(v0 + 1096) = v16;
      *uint64_t v16 = v0;
      v16[1] = AutoShortcutFlow.execute();
      return AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:)(*(void *)(v0 + 936), v0 + 16);
    }

    *(_OWORD *)(v0 + 176) = 0u;
    *(_OWORD *)(v0 + 192) = 0u;
    *(_OWORD *)(v0 + 144) = 0u;
    *(_OWORD *)(v0 + 160) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 128) = 0u;
    outlined destroy of Any?( v0 + 112,  &demangling cache variable for type metadata for AppShortcutGeneralizedInvocation?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v17 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v17, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v18 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v18))
    {
      uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v19 = 0;
      OUTLINED_FUNCTION_47_1(&dword_0, (os_log_s *)(v0 + 112), (os_log_type_t)v5, "Unsupported invocation type", v19);
      OUTLINED_FUNCTION_1_0((uint64_t)v19);
    }

    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_33_1(v20, enum case for FlowUnhandledReason.needsInfoDomainFallback(_:));
    OUTLINED_FUNCTION_32_1();
    OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  }

  else
  {
    static ExecuteResponse.complete()(v1);
  }

  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(_BYTE *)(v1 + 1192) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t RunFlow;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  OUTLINED_FUNCTION_28_1();
  uint64_t v1 = *(void *)(v0 + 944);
  if (*(_BYTE *)(v1 + 272) != 1 || *(_BYTE *)(v0 + 1192) == 0)
  {
    outlined init with copy of AppShortcutInvoking(v1 + 16, v0 + 824);
    outlined init with copy of AppShortcutInvoking(v1 + 56, v0 + 864);
    outlined init with copy of AppShortcutInvoking(v1 + 176, v0 + 784);
    outlined init with copy of AppShortcutInvoking(v1 + 136, v0 + 664);
    outlined init with copy of AppShortcutInvoking(v1 + 96, v0 + 344);
    uint64_t v3 = type metadata accessor for UserDefaultsWrapper();
    OUTLINED_FUNCTION_19(v3, 56LL);
    uint64_t v4 = UserDefaultsWrapper.init()();
    RunFlow = type metadata accessor for AutoShortcutFirstRunFlow();
    OUTLINED_FUNCTION_19(RunFlow, 273LL);
    OUTLINED_FUNCTION_85();
    uint64_t v12 = specialized AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)( v6,  v7,  v8,  v9,  v10,  (uint64_t)v4,  v11);
    *(void *)(v0 + 928) = v12;
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type AutoShortcutFirstRunFlow and conformance AutoShortcutFirstRunFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutFirstRunFlow,  (uint64_t)&protocol conformance descriptor for AutoShortcutFirstRunFlow);
    uint64_t v14 = v13;
    swift_retain(v1);
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 928,  partial apply for closure #1 in AutoShortcutFlow.execute(),  v1,  RunFlow,  v14);
    swift_release(v1);
    swift_release(v12);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 1064);
    uint64_t v16 = *(void *)(v0 + 1056);
    uint64_t v17 = *(void *)(v0 + 1048);
    os_log_type_t v18 = type metadata accessor for PrescribedTool(0LL);
    OUTLINED_FUNCTION_50_1(v15, v19, v20, v18);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))( v15,  enum case for FlowUnhandledReason.needsIntelligenceFlowFallback(_:),  v17);
    static ExecuteResponse.unhandled(reason:isComplete:)(v15, 1LL);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }

  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 1080);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 1088) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_38_1();
  outlined destroy of AutoShortcutInvocation(*(void *)(v0 + 1040));
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 1096);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 1104) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_38_1();
  outlined destroy of AppShortcutGeneralizedInvocation(v0 + 16);
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v1 + 1136));
  OUTLINED_FUNCTION_14();
  if (v0) {
    OUTLINED_FUNCTION_39_0();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v1 = outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 704), v0 + 304);
  static OutputPublisherFactory.makeOutputPublisherAsync()((void *)(v0 + 744), v1);
  uint64_t v2 = *(void *)(v0 + 768);
  uint64_t v3 = *(void *)(v0 + 776);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 744), v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 1144) = v4;
  *uint64_t v4 = v0;
  v4[1] = AutoShortcutFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 304, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v1 + 1144));
  if (v0) {
    OUTLINED_FUNCTION_39_0();
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  OUTLINED_FUNCTION_38_1();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v2 + 304));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v2 + 744));
  OUTLINED_FUNCTION_53_0();
  swift_setDeallocating(v2 + 744);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);

  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v2 + 8));
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = v2[146];
  uint64_t v4 = v2[145];
  uint64_t v5 = v2[144];
  uint64_t v6 = v2[123];
  *uint64_t v7 = *v1;
  v2[147] = v0;
  swift_task_dealloc(v3);
  outlined destroy of Any?(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release(v4);
  swift_release(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *boxed_opaque_existential_1;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  OUTLINED_FUNCTION_63_0();
  uint64_t v16 = *(void *)(v0 + 1016);
  uint64_t v17 = *(void *)(v0 + 976);
  uint64_t v19 = *(void *)(v0 + 968);
  os_log_type_t v18 = *(void *)(v0 + 960);
  uint64_t v1 = *(void *)(v0 + 952);
  uint64_t v3 = static Device.current.getter((void *)(v0 + 384), v2);
  static Device.current.getter((void *)(v0 + 424), v3);
  uint64_t v4 = *(void *)(v0 + 448);
  uint64_t v5 = *(void *)(v0 + 456);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 424), v4);
  uint64_t v6 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v4, v5);
  uint64_t v7 = type metadata accessor for NLContextUpdate(0LL);
  OUTLINED_FUNCTION_50_1(v1, v8, v9, v7);
  *(void *)(v0 + 496) = 0LL;
  *(_OWORD *)(v0 + 464) = 0u;
  *(_OWORD *)(v0 + 480) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v16,  v0 + 384,  v6 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v1,  _swiftEmptyArrayStorage,  v0 + 464);
  outlined destroy of Any?(v0 + 464, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Any?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 384));
  uint64_t v10 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 424));
  static OutputPublisherFactory.makeOutputPublisherAsync()((void *)(v0 + 504), v10);
  uint64_t v11 = *(void *)(v0 + 528);
  uint64_t v12 = *(void *)(v0 + 536);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 504), v11);
  *(void *)(v0 + 568) = v18;
  *(void *)(v0 + 576) = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 544));
  (*(void (**)(void *, uint64_t, uint64_t))(v19 + 16))(boxed_opaque_existential_1, v17, v18);
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 1184) = v14;
  *uint64_t v14 = v0;
  v14[1] = AutoShortcutFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 544, v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 1184));
  if (v0) {
    OUTLINED_FUNCTION_39_0();
  }
  else {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v2 + 544));
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = *(void **)(v0 + 1112);
  uint64_t v2 = *(void *)(v0 + 1016);
  uint64_t v3 = *(void *)(v0 + 1008);
  uint64_t v4 = *(void *)(v0 + 1000);
  uint64_t v5 = *(void *)(v0 + 976);
  uint64_t v6 = *(void *)(v0 + 968);
  uint64_t v7 = *(void *)(v0 + 960);
  uint64_t v8 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 504));
  static ExecuteResponse.complete()(v8);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  return swift_unexpectedError(*(void *)(v0 + 1176), "SiriLinkFlowPlugin/AutoShortcutFlow.swift", 41LL, 1LL, 151LL);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_28_1();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 544));
  uint64_t v1 = *(void **)(v0 + 1112);
  uint64_t v2 = *(void *)(v0 + 1008);
  uint64_t v3 = *(void *)(v0 + 976);
  uint64_t v4 = *(void *)(v0 + 968);
  uint64_t v5 = *(void *)(v0 + 960);
  uint64_t v6 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 504));
  static ExecuteResponse.complete()(v6);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

#error "EF48: call analysis failed (funcsize=162)"
#error "F208: call analysis failed (funcsize=162)"
uint64_t AutoShortcutFlow.execute()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_38_1();
  *(void *)(v3 + 736) = 0LL;
  *(_OWORD *)(v3 + 704) = 0u;
  *(_OWORD *)(v3 + 720) = 0u;
  outlined destroy of Any?(v3 + 704, &demangling cache variable for type metadata for Output?);
  OUTLINED_FUNCTION_53_0();
  swift_setDeallocating(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);

  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t AutoShortcutFlow.checkAssistantIntent(appShortcutInvocation:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v2, v3, v4);
}

uint64_t AutoShortcutFlow.checkAssistantIntent(appShortcutInvocation:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v2 + 8));
  *(void *)(v0 + 24) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_59_0(v3, (uint64_t)AutoShortcutFlow.checkAssistantIntent(appShortcutInvocation:));
  return OUTLINED_FUNCTION_36_1(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v2 + 32) = v1;
  *(void *)(v2 + 40) = v0;
  OUTLINED_FUNCTION_54_0(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  os_log_s *v3;
  id v4;
  id v5;
  char v6;
  char v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v1 = [*(id *)(v0 + 32) systemProtocols];
  uint64_t v2 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t v3 = (os_log_s *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  uint64_t v4 = (id)objc_opt_self(&OBJC_CLASS___LNSystemProtocol);
  uint64_t v5 = [v4 assistantIntentProtocol];
  uint64_t v6 = specialized Sequence<>.contains(_:)((uint64_t)v5, (uint64_t)v3);

  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_20();
  }

  else
  {
    uint64_t v4 = [v4 assistantInvocableIntentProtocol];
    uint64_t v7 = specialized Sequence<>.contains(_:)((uint64_t)v4, (uint64_t)v3);

    OUTLINED_FUNCTION_20();
    if ((v7 & 1) == 0)
    {
      uint64_t v11 = 0LL;
      goto LABEL_10;
    }
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v8 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v8, (uint64_t)static Logger.voiceCommands);
  uint64_t v9 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v9))
  {
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v10 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v3, (os_log_type_t)v4, "#AutoShortcutFlow Found assistant intent for action", v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v10);
  }

  uint64_t v11 = 1LL;
LABEL_10:

  return OUTLINED_FUNCTION_37_1(v11, *(uint64_t (**)(void))(v0 + 8));
}

{
  os_log_s *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = OUTLINED_FUNCTION_73();
  uint64_t v5 = OUTLINED_FUNCTION_31_0(v4);
  uint64_t v6 = *(void *)(v2 + 40);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v7 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v0, v1, "#AutoShortcutFlow error fetching LNAction", v7);
    OUTLINED_FUNCTION_1_0((uint64_t)v7);
  }

  swift_errorRelease(v6);

  return OUTLINED_FUNCTION_37_1(0LL, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = OUTLINED_FUNCTION_60(v7, v8);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (OUTLINED_FUNCTION_60(v14, v15) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8LL));
  OUTLINED_FUNCTION_80();
  if (v4)
  {
    while (1)
    {
      id v5 = (a2 & 0xC000000000000001LL) != 0 ? (id)OUTLINED_FUNCTION_87() : *(id *)(a2 + 32);
      uint64_t v6 = v5;
      OUTLINED_FUNCTION_72( (uint64_t)v5,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
      char v7 = static NSObject.== infix(_:_:)(v6, a1);

      if ((v7 & 1) != 0) {
        break;
      }
      if (v4 != 1)
      {
        uint64_t v10 = 5LL;
        while (1)
        {
          id v11 = (a2 & 0xC000000000000001LL) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a2)
              : *(id *)(a2 + 8 * v10);
          uint64_t v12 = v11;
          uint64_t v13 = v10 - 3;
          if (__OFADD__(v10 - 4, 1LL)) {
            break;
          }
          char v8 = static NSObject.== infix(_:_:)(v11, a1);

          if ((v8 & 1) == 0)
          {
            ++v10;
            if (v13 != v4) {
              continue;
            }
          }

          goto LABEL_9;
        }

        __break(1u);
LABEL_19:
        uint64_t v14 = a2 < 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8LL;
        OUTLINED_FUNCTION_80();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v14);
        if (v4) {
          continue;
        }
      }

      goto LABEL_8;
    }

    char v8 = 1;
  }

  else
  {
LABEL_8:
    char v8 = 0;
  }

LABEL_9:
  OUTLINED_FUNCTION_14();
  return v8 & 1;
}

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  id v11 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
  uint64_t v12 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  uint64_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    BOOL v16 = swift_slowAlloc(64LL, -1LL);
    *(void *)&uint64_t v22 = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    swift_bridgeObjectRetain(a2);
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v15 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v17 = _typeName(_:qualified:)(v4, 0LL);
    uint64_t v19 = v18;
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)&v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v15 + 14);
    swift_bridgeObjectRelease(v19);
    _os_log_impl(&dword_0, v13, v14, "InstallVoiceShortcutInvocationData missing %s : %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  return 0LL;
}

  OUTLINED_FUNCTION_28_11();
  return v10;
}

  __swift_destroy_boxed_opaque_existential_1Tm(v35);
  OUTLINED_FUNCTION_8_2();
}

  OUTLINED_FUNCTION_13_8();
}

void *AutoShortcutFlow.deinit()
{
  return v0;
}

uint64_t AutoShortcutFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 274LL, 7LL);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance AutoShortcutFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *char v7 = v3;
  v7[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentRCHFlowStrategy;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance AutoShortcutFlow( uint64_t a1, uint64_t a2)
{
  return AutoShortcutFlow.execute(completion:)(a1, a2);
}

uint64_t protocol witness for Flow.execute() in conformance AutoShortcutFlow(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_21499C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return AutoShortcutFlow.execute()(a1);
}

uint64_t specialized AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)( void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v14);
  BOOL v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for UserDefaultsWrapper();
  uint64_t v30 = &protocol witness table for UserDefaultsWrapper;
  *(void *)&__int128 v28 = a6;
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, a7 + 16);
  outlined init with copy of AppShortcutInvoking((uint64_t)a2, a7 + 56);
  outlined init with copy of AppShortcutInvoking((uint64_t)a3, a7 + 232);
  outlined init with copy of AppShortcutInvoking((uint64_t)a5, a7 + 96);
  outlined init with copy of AppShortcutInvoking((uint64_t)a4, a7 + 136);
  uint64_t v17 = type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a7 + 184) = swift_allocObject(v17, 16LL, 7LL);
  outlined init with copy of AppShortcutInvoking((uint64_t)a5, (uint64_t)v27);
  uint64_t v18 = type metadata accessor for AutoShortcutCATs(0LL);
  static CATOption.defaultMode.getter(v18);
  uint64_t v19 = CATWrapper.__allocating_init(options:globals:)(v16, 0LL);
  uint64_t v20 = type metadata accessor for AutoShortcutCATsSimple(0LL);
  static CATOption.defaultMode.getter(v20);
  uint64_t v21 = CATWrapperSimple.__allocating_init(options:globals:)(v16, 0LL);
  uint64_t v22 = type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter(v22);
  uint64_t v23 = CATWrapper.__allocating_init(options:globals:)(v16, 0LL);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  uint64_t v24 = type metadata accessor for AutoShortcutDialogTemplating();
  uint64_t v25 = (void *)swift_allocObject(v24, 112LL, 7LL);
  v25[12] = v22;
  v25[13] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  v25[9] = v23;
  outlined init with take of AceServiceInvokerAsync(v27, (uint64_t)(v25 + 2));
  v25[7] = v19;
  v25[8] = v21;
  *(void *)(a7 + 176) = v25;
  outlined init with take of AceServiceInvokerAsync(&v28, a7 + 192);
  *(_BYTE *)(a7 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0x80;
  return a7;
}

uint64_t specialized AutoShortcutFlow.__allocating_init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, int a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v28 = a8;
  int v27 = a7;
  uint64_t v25 = a5;
  unsigned int v26 = a6;
  uint64_t v24 = a4;
  uint64_t v16 = *(void *)(a12 - 8);
  uint64_t v17 = __chkstk_darwin(a11);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = swift_allocObject(v17, 274LL, 7LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, a12);
  uint64_t v21 = specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( (uint64_t)v19,  a2,  a3,  v24,  v25,  v26,  v27,  v28,  a9,  a10,  v20,  a12,  a13);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a12);
  return v21;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(a11 + 40) = a12;
  *(void *)(a11 + 48) = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(a11 + 16));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32LL))( boxed_opaque_existential_1,  a1,  a12);
  outlined init with take of AceServiceInvokerAsync(a2, a11 + 56);
  outlined init with take of AceServiceInvokerAsync(a3, a11 + 136);
  outlined init with take of AceServiceInvokerAsync(a4, a11 + 176);
  outlined init with take of AceServiceInvokerAsync(a5, a11 + 216);
  outlined init with take of AceServiceInvokerAsync(a6, a11 + 96);
  *(_BYTE *)(a11 + 273) = a7;
  *(void *)(a11 + 256) = a8;
  *(void *)(a11 + 264) = a9;
  *(_BYTE *)(a11 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a10;
  return a11;
}

uint64_t type metadata accessor for AutoShortcutFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin16AutoShortcutFlow);
}

uint64_t outlined destroy of AppShortcutGeneralizedInvocation(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of AutoShortcutInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AutoShortcutInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AutoShortcutInvocation(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AutoShortcutInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void outlined init with copy of AppShortcutInvoking(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  OUTLINED_FUNCTION_1();
}

_BYTE *partial apply for closure #1 in AutoShortcutFlow.execute()(_BYTE *result)
{
  if (*result) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  *(_BYTE *)(v1 + 273) = v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutFlow.State and conformance AutoShortcutFlow.State()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutFlow.State and conformance AutoShortcutFlow.State;
  if (!lazy protocol witness table cache variable for type AutoShortcutFlow.State and conformance AutoShortcutFlow.State)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutFlow.State,  &type metadata for AutoShortcutFlow.State);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutFlow.State and conformance AutoShortcutFlow.State);
  }

  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AutoShortcutFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  v154 = v4;
  v60 = Parse.DirectInvocation.identifier.getter(v54);
  v62 = v61;
  if (v60 == 0xD00000000000004BLL && v61 == 0x8000000000193880LL)
  {
    v63 = swift_bridgeObjectRelease(0x8000000000193880LL);
  }

  else
  {
    v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, 0xD00000000000004BLL, 0x8000000000193880LL, 0LL);
    v63 = swift_bridgeObjectRelease(v62);
    if ((v64 & 1) == 0) {
      goto LABEL_24;
    }
  }

  v63 = Parse.DirectInvocation.userData.getter(v63);
  if (v63)
  {
    v65 = v63;
    v153 = v13;
    v66 = v2[12];
    v67 = v2[13];
    v152 = v2 + 9;
    __swift_project_boxed_opaque_existential_1(v2 + 9, v66);
    if ((dispatch thunk of DeviceState.isMac.getter(v66, v67) & 1) == 0)
    {
      v121 = type metadata accessor for AutoShortcutProvider();
      v122 = swift_allocObject(v121, 24LL, 7LL);
      v123 = objc_allocWithZone(&OBJC_CLASS___LNAutoShortcutsProvider);
      swift_bridgeObjectRetain(v65);
      *(void *)(v122 + 16) = [v123 init];
      *((void *)&v191 + 1) = v121;
      *(void *)&v192 = &protocol witness table for AutoShortcutProvider;
      *(void *)&v190 = v122;
      v124 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
      v125 = v153;
      AutoShortcutInvocation.init(directInvocationData:provider:preferences:)(v65, &v190, v124, v153);
      swift_bridgeObjectRelease(v65);
      outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 14), (uint64_t)&v190);
      outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 19), (uint64_t)v183);
      outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 34), (uint64_t)v176);
      outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 45), (uint64_t)&v172);
      outlined init with copy of AppShortcutInvoking((uint64_t)v152, (uint64_t)v171);
      LODWORD(v15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = default argument 8 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)();
      v131 = type metadata accessor for AutoShortcutFlow();
      v154 = (char *)swift_allocObject(v131, 274LL, 7LL);
      v132 = (uint64_t)v155;
      outlined init with copy of AutoShortcutInvocation( (uint64_t)v125,  (uint64_t)v155,  type metadata accessor for AutoShortcutInvocation);
      v134 = v177;
      v133 = (uint64_t)v178;
      v135 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v176, v177);
      v156 = &v148;
      __chkstk_darwin(v135);
      v137 = (char *)&v148 - ((v136 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v138 + 16))(v137);
      v139 = *((void *)&v173 + 1);
      v140 = v174;
      v141 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v172, *((uint64_t *)&v173 + 1));
      __chkstk_darwin(v141);
      v143 = (char *)&v148 - ((v142 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v144 + 16))(v143);
      v145 = specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( v132,  &v190,  v183,  (uint64_t)v137,  (uint64_t)v143,  v171,  0,  (uint64_t)closure #1 in variable initialization expression of static AutoShortcutFlow.defaultRunner,  0LL,  v157 & 1,  (uint64_t)v154,  v139,  v134,  v140,  v133);
      __swift_destroy_boxed_opaque_existential_1Tm(&v172);
      __swift_destroy_boxed_opaque_existential_1Tm(v176);
      *(void *)&v190 = v145;
      lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type AutoShortcutFlow and conformance AutoShortcutFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutFlow,  (uint64_t)&protocol conformance descriptor for AutoShortcutFlow);
      v50 = Flow.eraseToAnyFlow()(v131, v146);
      swift_release();
      outlined destroy of AutoShortcutInvocation((uint64_t)v153, type metadata accessor for AutoShortcutInvocation);
      return v50;
    }

    v63 = swift_bridgeObjectRelease(v65);
  }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v5 = v6 - 15;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x17;
  int v5 = v6 - 23;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  int v5 = ((*a1 >> 6) & 0xFFFFFF83 | (4 * ((*a1 >> 1) & 0x1F))) ^ 0x7F;
  if (v5 >= 0x7D) {
    int v5 = -1;
  }
  return v5 + 1;
}

  unsigned int v6 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 24, v6);
  return 1LL;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  int v5 = v6 - 27;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  char v8 = v6 - 4;
  if (!v7) {
    char v8 = -1;
  }
  return OUTLINED_FUNCTION_156_0(v8);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2B;
  char v8 = v6 - 43;
  if (!v7) {
    char v8 = -1;
  }
  return OUTLINED_FUNCTION_156_0(v8);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  char v8 = v6 - 3;
  if (!v7) {
    char v8 = -1;
  }
  return OUTLINED_FUNCTION_156_0(v8);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  char v8 = v6 - 2;
  if (!v7) {
    char v8 = -1;
  }
  return OUTLINED_FUNCTION_156_0(v8);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v5 = v6 - 13;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x58;
  int v5 = v6 - 88;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x59;
  int v5 = v6 - 89;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x23;
  int v5 = v6 - 35;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutFlow.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10218 + 4 * byte_17E395[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1024C + 4 * asc_17E390[v4]))();
}

uint64_t sub_1024C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10254(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1025CLL);
  }
  return result;
}

uint64_t sub_10268(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10270LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10274(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1027C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for AutoShortcutFlow.State(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for AutoShortcutFlow.State(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutFlow.State()
{
  return &type metadata for AutoShortcutFlow.State;
}

uint64_t specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, __int128 *a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v31 = a13;
  uint64_t v32 = a15;
  uint64_t v21 = __swift_allocate_boxed_opaque_existential_1(&v30);
  OUTLINED_FUNCTION_75( (uint64_t)v21,  a4,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32LL));
  uint64_t v28 = a12;
  uint64_t v29 = a14;
  uint64_t v22 = __swift_allocate_boxed_opaque_existential_1(&v27);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32LL))(v22, a5, a12);
  *(void *)(a11 + 40) = type metadata accessor for AutoShortcutInvocation(0LL);
  *(void *)(a11 + 48) = &protocol witness table for AutoShortcutInvocation;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(a11 + 16));
  outlined init with take of AutoShortcutInvocation(a1, (uint64_t)boxed_opaque_existential_1);
  outlined init with take of AceServiceInvokerAsync(a2, a11 + 56);
  outlined init with take of AceServiceInvokerAsync(a3, a11 + 136);
  outlined init with take of AceServiceInvokerAsync(&v30, a11 + 176);
  outlined init with take of AceServiceInvokerAsync(&v27, a11 + 216);
  outlined init with take of AceServiceInvokerAsync(a6, a11 + 96);
  *(_BYTE *)(a11 + 273) = a7;
  *(void *)(a11 + 256) = a8;
  *(void *)(a11 + 264) = a9;
  *(_BYTE *)(a11 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a10;
  return a11;
}

uint64_t type metadata accessor for NSError(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t outlined init with copy of AutoShortcutInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AutoShortcutInvocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (!*a1)
  {
    uint64_t v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }

  OUTLINED_FUNCTION_1();
}

uint64_t outlined retain of SiriWorkflowRunnerInput(uint64_t a1)
{
  return a1;
}

id outlined copy of SiriWorkflowRunnerInput( id result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, char a9)
{
  switch(a9)
  {
    case 0:
      uint64_t v12 = a2;
      goto LABEL_5;
    case 1:
      swift_bridgeObjectRetain(a8);
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a4);
      id v14 = a5;
      uint64_t result = a6;
      break;
    case 2:
      swift_bridgeObjectRetain(a6);
      id v16 = a7;
      id v17 = a8;
      swift_bridgeObjectRetain(a2);
      uint64_t v12 = a4;
LABEL_5:
      uint64_t result = (id)swift_bridgeObjectRetain(v12);
      break;
    case 3:
      id v19 = result;
      swift_bridgeObjectRetain(a3);
      uint64_t result = v19;
      break;
    default:
      return result;
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return swift_task_dealloc(*(void *)(v0 + 1064));
}

uint64_t OUTLINED_FUNCTION_2_1(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_6_1(uint64_t a1)
{
  *(void *)(v2 + 1120) = a1;
  outlined init with take of AceServiceInvokerAsync(v1, a1 + 16);
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  __swift_project_boxed_opaque_existential_1(v3, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
}

uint64_t OUTLINED_FUNCTION_11_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:)(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_12_1(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_13_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_16_0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_20_1(uint64_t a1)
{
  *(void *)(v1 + 115__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a1;
  int v3 = v2 + 12;
  uint64_t v4 = v2[15];
  uint64_t v5 = v2[16];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  return DeviceState.asSiriKitDeviceState()(v4, v5);
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8))( v1,  v0,  v5,  v4,  v2,  v3);
}

void OUTLINED_FUNCTION_23_0()
{
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  return swift_task_switch();
}

void OUTLINED_FUNCTION_27_1()
{
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_30_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

BOOL OUTLINED_FUNCTION_31_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_32_1()
{
  return static ExecuteResponse.unhandled(reason:isComplete:)(v0, 1LL);
}

uint64_t OUTLINED_FUNCTION_33_1(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_34_1@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(*(void *)(v1 + a1 + 32) + 4LL));
}

uint64_t OUTLINED_FUNCTION_35_1()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_36_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_37_1(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

  ;
}

uint64_t OUTLINED_FUNCTION_39_1(uint64_t a1)
{
  return swift_dynamicCast(v2, v3, v1, a1, 0LL);
}

void OUTLINED_FUNCTION_40_1()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_41_1()
{
  return swift_errorRelease(*(void *)(v0 + 912));
}

void OUTLINED_FUNCTION_42_1()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_43_1( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, v11, a10);
}

uint64_t OUTLINED_FUNCTION_44_0(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 1016);
}

uint64_t OUTLINED_FUNCTION_46_1()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

void OUTLINED_FUNCTION_47_1(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_49_0()
{
  return type metadata accessor for RunVoiceCommandCATs(0LL);
}

uint64_t OUTLINED_FUNCTION_50_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 1LL, 1LL, a4);
}

void OUTLINED_FUNCTION_51_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_53_0()
{
  return static ExecuteResponse.complete()();
}

uint64_t OUTLINED_FUNCTION_54_0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_55_0@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_arrayDestroy(a5, 1LL, a1 + 8);
}

uint64_t OUTLINED_FUNCTION_56_0(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_57_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, (uint64_t *)va);
}

id OUTLINED_FUNCTION_58_0(float a1)
{
  *uint64_t v1 = a1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_59_0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_60(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

BOOL OUTLINED_FUNCTION_61_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_62_0( uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  *(void *)(v24 + 111__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(v24 + 920);
  return static InstrumentationUtils.emitLinkFlowFailedInstrumentation(reason:)( 1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24);
}

  ;
}

void OUTLINED_FUNCTION_65_0()
{
}

uint64_t OUTLINED_FUNCTION_66()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_67()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_68()
{
  return __swift_getEnumTagSinglePayload(v0, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_69()
{
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_70( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_72(uint64_t a1, unint64_t *a2, void *a3)
{
  return type metadata accessor for NSError(0LL, a2, a3);
}

uint64_t OUTLINED_FUNCTION_73()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_74(uint64_t a1)
{
  *(void *)(v1 + 1160) = a1;
  return type metadata accessor for SpeakableString(0LL);
}

uint64_t OUTLINED_FUNCTION_75@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_76()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_77(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1LL, 1LL, a1);
}

void OUTLINED_FUNCTION_79()
{
}

uint64_t OUTLINED_FUNCTION_80()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_81()
{
  return outlined init with copy of AutoShortcutInvocation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter(v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_87()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

uint64_t OUTLINED_FUNCTION_88()
{
  return type metadata accessor for WorkflowRunnerFlow(0LL);
}

uint64_t OUTLINED_FUNCTION_89()
{
  return swift_bridgeObjectRelease(v0);
}

BOOL EncoreConstants.IntentIdentifier.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of EncoreConstants.IntentIdentifier.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

uint64_t EncoreConstants.IntentIdentifier.rawValue.getter()
{
  return 0x6C69614D646E6553LL;
}

unint64_t lazy protocol witness table accessor for type EncoreConstants.IntentIdentifier and conformance EncoreConstants.IntentIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type EncoreConstants.IntentIdentifier and conformance EncoreConstants.IntentIdentifier;
  if (!lazy protocol witness table cache variable for type EncoreConstants.IntentIdentifier and conformance EncoreConstants.IntentIdentifier)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncoreConstants.IntentIdentifier,  &type metadata for EncoreConstants.IntentIdentifier);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type EncoreConstants.IntentIdentifier and conformance EncoreConstants.IntentIdentifier);
  }

  return result;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance EncoreConstants.IntentIdentifier@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = EncoreConstants.IntentIdentifier.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance EncoreConstants.IntentIdentifier( void *a1@<X8>)
{
  *a1 = 0x6C69614D646E6553LL;
  a1[1] = 0xE800000000000000LL;
}

ValueMetadata *type metadata accessor for EncoreConstants()
{
  return &type metadata for EncoreConstants;
}

uint64_t storeEnumTagSinglePayload for EncoreConstants.IntentIdentifier(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10C80 + 4 * asc_17E4F0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10CA0 + 4 * byte_17E4F5[v4]))();
  }
}

_BYTE *sub_10C80(_BYTE *result, char a2)
{
  *BOOL result = a2;
  return result;
}

_BYTE *sub_10CA0(_BYTE *result)
{
  *BOOL result = 0;
  return result;
}

_DWORD *sub_10CA8(_DWORD *result, int a2)
{
  *BOOL result = a2;
  return result;
}

_WORD *sub_10CB0(_WORD *result, __int16 a2)
{
  *BOOL result = a2;
  return result;
}

_WORD *sub_10CB8(_WORD *result)
{
  *BOOL result = 0;
  return result;
}

_DWORD *sub_10CC0(_DWORD *result)
{
  *BOOL result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EncoreConstants.IntentIdentifier()
{
  return &type metadata for EncoreConstants.IntentIdentifier;
}

uint64_t AppInfoResolver.getLocalizedAppDisplayName(from:deviceState:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Locale(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AppInformationResolver(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = swift_retain(a1);
  uint64_t v10 = AppInformationResolver.init(app:)(v9);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  dispatch thunk of DeviceState.siriLocale.getter(v11, v12);
  uint64_t v13 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)(v7);
  swift_release(v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v13;
}

ValueMetadata *type metadata accessor for AppInfoResolver()
{
  return &type metadata for AppInfoResolver;
}

#error "10E44: call analysis failed (funcsize=46)"
#error "10EEC: call analysis failed (funcsize=42)"
uint64_t CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance_preRFv2(app:intent:)( uint64_t a1,  uint64_t a2,  uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[21] = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  v4[22] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for TemplatingResult(0LL);
  v4[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[24] = v8;
  v4[25] = OUTLINED_FUNCTION_9_0(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance_preRFv2(app:intent:)()
{
  uint64_t v1 = *(void *)(v0 + 176);
  Swift::String v2 = *(void **)(v0 + 160);
  uint64_t v3 = (uint64_t)(v2 + 2);
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v4);
  *(_BYTE *)(v0 + 248) = dispatch thunk of DeviceState.isCarPlay.getter(v4, v5) & 1;
  *(void *)(v0 + 40) = &type metadata for AppInfoResolver;
  *(void *)(v0 + 48) = &protocol witness table for AppInfoResolver;
  App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(v3, (void *)(v0 + 16), 2, v1);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  outlined init with copy of DeviceState(v3, v0 + 56);
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to static TCCTemplates.promptToEnableApp(appDisplayInfo:deviceState:)[1]);
  *(void *)(v0 + 208) = v6;
  *uint64_t v6 = v0;
  v6[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance_preRFv2(app:intent:);
  return ((uint64_t (*)(void, void, uint64_t))static TCCTemplates.promptToEnableApp(appDisplayInfo:deviceState:))( *(void *)(v0 + 200),  *(void *)(v0 + 176),  v0 + 56);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  OUTLINED_FUNCTION_30_2();
  uint64_t v3 = v2[22];
  OUTLINED_FUNCTION_10_0(v4);
  v2[27] = v0;
  uint64_t v6 = swift_task_dealloc(v5);
  OUTLINED_FUNCTION_26_0(v6, &demangling cache variable for type metadata for DeviceState?);
  outlined destroy of Any?(v3, &demangling cache variable for type metadata for AppDisplayInfo?);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    uint64_t v8 = v2[18];
    uint64_t v9 = (void *)swift_task_alloc(dword_214BC4);
    v2[28] = v9;
    *uint64_t v9 = v1;
    v9[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance_preRFv2(app:intent:);
    return CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:)(v8);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_10_0(v3);
  *(void *)(v2 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    *(void *)(v2 + 240) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Swift::Bool v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  Swift::Bool v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v1 = *(void **)(v0 + 240);
  Swift::String v2 = *(_BYTE *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v24 = *(void *)(v0 + 192);
  uint64_t v25 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 168);
  unsigned int v26 = *(void *)(v0 + 176);
  uint64_t v5 = *(void **)(v0 + 160);
  uint64_t v6 = *(void **)(v0 + 136);
  uint64_t v7 = v5 + 2;
  uint64_t v23 = INIntent.isRestricted()();
  uint64_t v8 = v5[5];
  uint64_t v9 = v5[6];
  __swift_project_boxed_opaque_existential_1(v7, v8);
  uint64_t v22 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v8, v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = OUTLINED_FUNCTION_19(v10, 40LL);
  *(_OWORD *)(v11 + 16) = xmmword_17E150;
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  __int128 v27 = v11;
  specialized Array._endMutation()(v11, v12, v13);
  id v14 = v1;
  uint64_t v15 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)((v2 & 1) == 0);
  id v16 = type metadata accessor for NLContextUpdate(0LL);
  OUTLINED_FUNCTION_50_1(v4, v17, v18, v16);
  id v19 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(void *)(v0 + 128) = 0LL;
  *(_OWORD *)(v0 + 96) = 0u;
  v6[3] = v19;
  v6[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1Tm(v6);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v3,  v7,  v22 & 1,  v27,  v15,  !v23,  v4,  _swiftEmptyArrayStorage,  v0 + 96);
  swift_bridgeObjectRelease(v27);

  outlined destroy of Any?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_26_0(v20, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v3, v25);
  OUTLINED_FUNCTION_18_0();
  swift_task_dealloc(v26);
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  (*(void (**)(void, void))(*(void *)(v0 + 192) + 8LL))(*(void *)(v0 + 200), *(void *)(v0 + 184));
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:)(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  void v2[9] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:)()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_3_1(*(void **)(v0 + 64));
  *(void *)(v0 + 80) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_59_0(v1, (uint64_t)CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:));
  return OUTLINED_FUNCTION_36_1(v2, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = v1 + 2;
  __swift_project_boxed_opaque_existential_1(v1 + 2, v1[5]);
  uint64_t v3 = OUTLINED_FUNCTION_63_1();
  uint64_t v5 = dispatch thunk of DeviceState.isWatch.getter(v3, v4);
  uint64_t v6 = *(void *)(v0 + 96);
  if ((v5 & 1) != 0)
  {
    CustomIntentTCCFlowStrategy.makeConfirmationViewForWatch(confirmDialog:cancelDialog:)();
    uint64_t v8 = v7;
    swift_bridgeObjectRelease(v6);
    OUTLINED_FUNCTION_20();
LABEL_6:
    swift_task_dealloc(*(void *)(v0 + 72));
    return (*(uint64_t (**)(id))(v0 + 8))(v8);
  }

  uint64_t v8 = CustomIntentTCCFlowStrategy.makeConfirmationView(confirmLabel:cancelLabel:)( *(void *)(v0 + 88),  *(void *)(v0 + 96),  *(void *)(v0 + 104),  *(void *)(v0 + 112));
  *(void *)(v0 + 120) = v8;
  OUTLINED_FUNCTION_20();
  swift_bridgeObjectRelease(v6);
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  __swift_project_boxed_opaque_existential_1(v2, v9);
  if ((dispatch thunk of DeviceState.isCarPlay.getter(v9, v10) & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(v0 + 56);
  static String._unconditionallyBridgeFromObjectiveC(_:)(SAUIConfirmationViewStyleSYSTEMValue);
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter();
  uint64_t v12 = *(void *)(v0 + 72);
  if (v11)
  {
    *(void *)(v0 + 40) = &type metadata for AppInfoResolver;
    *(void *)(v0 + 48) = &protocol witness table for AppInfoResolver;
    App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)((uint64_t)v2, (void *)(v0 + 16), 0, v12);
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  }

  else
  {
    id v14 = type metadata accessor for AppDisplayInfo(0LL);
    OUTLINED_FUNCTION_50_1(v12, v15, v16, v14);
  }

  id v17 = (void *)swift_task_alloc(async function pointer to static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:)[1]);
  *(void *)(v0 + 128) = v17;
  uint64_t v18 = OUTLINED_FUNCTION_28_2(v17, (uint64_t)CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:));
  return static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:)(v18);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter();
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:)[1]);
  *(void *)(v0 + 160) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_28_2(v1, (uint64_t)CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:));
  return static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter();
  outlined destroy of Any?(*(void *)(v1 + 72), &demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_60_0();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = (void *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = OUTLINED_FUNCTION_31_0(v4);
  uint64_t v6 = *(void *)(v0 + 136);
  if (v5)
  {
    *(_WORD *)OUTLINED_FUNCTION_57_1() = 0;
    OUTLINED_FUNCTION_33_2( &dword_0,  v7,  v8,  "Unable to generate a snippet subtitle for TCC. Snippet will not have a subtitle");
    OUTLINED_FUNCTION_54_1();
  }

  swift_errorRelease(v6);

  uint64_t v9 = (void *)swift_task_alloc(async function pointer to static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:)[1]);
  *(void *)(v0 + 160) = v9;
  uint64_t v10 = OUTLINED_FUNCTION_28_2(v9, (uint64_t)CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:));
  return static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:)(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = (void *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = OUTLINED_FUNCTION_31_0(v4);
  uint64_t v6 = *(void *)(v0 + 168);
  if (v5)
  {
    *(_WORD *)OUTLINED_FUNCTION_57_1() = 0;
    OUTLINED_FUNCTION_33_2( &dword_0,  v7,  v8,  "Unable to generate a snippet title for TCC. Snippet will not have a title");
    OUTLINED_FUNCTION_54_1();
  }

  swift_errorRelease(v6);

  outlined destroy of Any?(*(void *)(v0 + 72), &demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_60_0();
  return (*(uint64_t (**)(void *))(v0 + 8))(v3);
}

uint64_t CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*v5 + 80);
  uint64_t v7 = *v5;
  *(void *)(v7 + 88) = a1;
  *(void *)(v7 + 96) = a2;
  *(void *)(v7 + 104) = a3;
  *(void *)(v7 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a4;
  swift_task_dealloc(v6);
  if (v4)
  {
    swift_task_dealloc(*(void *)(v7 + 72));
    return (*(uint64_t (**)(void))(v7 + 8))();
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

uint64_t CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:)(uint64_t a1, uint64_t a2)
{
  v3[17] = v2;
  swift_task_dealloc(v7);
  if (!v2)
  {
    v3[18] = a2;
    v3[19] = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v2;
  void *v3;
  void *v6;
  uint64_t v7;
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_10_0(v6);
  v3[21] = v2;
  swift_task_dealloc(v7);
  if (!v2)
  {
    v3[22] = a2;
    v3[23] = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

void CustomIntentTCCFlowStrategy.makeConfirmationViewForWatch(confirmDialog:cancelDialog:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v52 = v2;
  uint64_t v54 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v11 = OUTLINED_FUNCTION_19(v10, 48LL);
  *(_OWORD *)(v11 + 16) = xmmword_17E650;
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
  *(void *)(v11 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  uint64_t v12 = (void *)static CasinoFactory.makeSendCommandsFromMachineUtterances(machineUtterances:)(v11);
  OUTLINED_FUNCTION_56_1();
  uint64_t v13 = OUTLINED_FUNCTION_19(v10, 48LL);
  *(_OWORD *)(v13 + 16) = xmmword_17E650;
  *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  *(void *)(v13 + 40) = v1;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v1);
  id v14 = (void *)static CasinoFactory.makeSendCommandsFromMachineUtterances(machineUtterances:)(v13);
  swift_bridgeObjectRelease(v13);
  id v15 = objc_allocWithZone(&OBJC_CLASS___SASTItemGroup);
  swift_bridgeObjectRetain(v1);
  id v16 = [v15 init];
  uint64_t v17 = UUID.init()();
  UUID.uuidString.getter(v17);
  id v19 = v18;
  OUTLINED_FUNCTION_65_1(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  v56 = v16;
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter();

  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(commands: SASendCommands, label: String)>);
  uint64_t inited = swift_initStackObject(v20, &v58);
  *(_OWORD *)(inited + 16) = xmmword_17E660;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v12;
  *(void *)(inited + 40) = v54;
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = v14;
  *(void *)(inited + 64) = v52;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  uint64_t v51 = v1;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v1);
  id v53 = v12;
  id v55 = v14;
  specialized ContiguousArray.reserveCapacity(_:)(2LL);
  uint64_t v22 = *(void **)(inited + 32);
  uint64_t v23 = *(void *)(inited + 40);
  uint64_t v24 = *(void *)(inited + 48);
  id v25 = objc_allocWithZone(&OBJC_CLASS___SASTCommandTemplateAction);
  id v26 = v22;
  OUTLINED_FUNCTION_67_0();
  id v27 = OUTLINED_FUNCTION_62_1();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = (__n128 *)OUTLINED_FUNCTION_19(v28, 40LL);
  OUTLINED_FUNCTION_35_2(v29, v30, v31, (__n128)xmmword_17E150);
  id v32 = v19;
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v57, v27);
  id v33 = OUTLINED_FUNCTION_47_2(objc_allocWithZone(&OBJC_CLASS___SAUIDecoratedText));
  outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter(v23, v24, v33);
  id v34 = OUTLINED_FUNCTION_47_2(objc_allocWithZone(&OBJC_CLASS___SASTButtonItem));
  [v34 setCentered:1];
  [v34 setDecoratedLabel:v33];
  id v35 = v27;
  [v34 setAction:v35];
  OUTLINED_FUNCTION_56_1();

  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_46_2();
  uint64_t v36 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v34);
  specialized ContiguousArray._endMutation()(v36);
  uint64_t v37 = *(void **)(inited + 56);
  uint64_t v38 = *(void *)(inited + 64);
  uint64_t v39 = *(void *)(inited + 72);
  id v40 = objc_allocWithZone(&OBJC_CLASS___SASTCommandTemplateAction);
  id v41 = v37;
  OUTLINED_FUNCTION_67_0();
  id v42 = OUTLINED_FUNCTION_62_1();
  uint64_t v43 = (__n128 *)OUTLINED_FUNCTION_19(v28, 40LL);
  OUTLINED_FUNCTION_35_2(v43, v44, v45, (__n128)xmmword_17E150);
  id v46 = v35;
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v57, v42);
  id v47 = OUTLINED_FUNCTION_47_2(objc_allocWithZone(&OBJC_CLASS___SAUIDecoratedText));
  outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter(v38, v39, v47);
  id v48 = OUTLINED_FUNCTION_47_2(objc_allocWithZone(&OBJC_CLASS___SASTButtonItem));
  [v48 setCentered:1];
  [v48 setDecoratedLabel:v47];
  id v49 = v42;
  [v48 setAction:v49];
  OUTLINED_FUNCTION_56_1();

  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_46_2();
  uint64_t v50 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v48);
  specialized ContiguousArray._endMutation()(v50);
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter((uint64_t)_swiftEmptyArrayStorage, v56);
  swift_bridgeObjectRelease(v6);

  swift_bridgeObjectRelease(v51);
  OUTLINED_FUNCTION_24_0();
}

id CustomIntentTCCFlowStrategy.makeConfirmationView(confirmLabel:cancelLabel:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v9 = OUTLINED_FUNCTION_19(v8, 48LL);
  *(_OWORD *)(v9 + 16) = xmmword_17E650;
  *(void *)(v9 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a1;
  *(void *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v10 = (void *)static CasinoFactory.makeSendCommandsFromMachineUtterances(machineUtterances:)(v9);
  swift_bridgeObjectRelease(v9);
  uint64_t v11 = OUTLINED_FUNCTION_19(v8, 48LL);
  *(_OWORD *)(v11 + 16) = xmmword_17E650;
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a3;
  *(void *)(v11 + 40) = a4;
  swift_bridgeObjectRetain(a4);
  uint64_t v12 = (void *)static CasinoFactory.makeSendCommandsFromMachineUtterances(machineUtterances:)(v11);
  OUTLINED_FUNCTION_20();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = OUTLINED_FUNCTION_19(v13, 40LL);
  *(_OWORD *)(v14 + 16) = xmmword_17E150;
  *(void *)(v14 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
  OUTLINED_FUNCTION_15_1(v14, v15, v16);
  static String._unconditionallyBridgeFromObjectiveC(_:)(SAUIConfirmationOptionConfirmationOptionTypeCONFIRMValue);
  id v17 = v10;
  uint64_t v36 = OUTLINED_FUNCTION_31_1(v37, a1, a2);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_64_0();
  uint64_t v18 = OUTLINED_FUNCTION_19(v13, 40LL);
  *(_OWORD *)(v18 + 16) = xmmword_17E150;
  *(void *)(v18 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v12;
  OUTLINED_FUNCTION_15_1(v18, v19, v20);
  static String._unconditionallyBridgeFromObjectiveC(_:)(SAUIConfirmationOptionConfirmationOptionTypeDENYValue);
  id v21 = v12;
  uint64_t v22 = OUTLINED_FUNCTION_31_1(v37, a3, a4);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_64_0();
  id v23 = [objc_allocWithZone(SAUIConfirmationView) init];
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmText.setter(a1, a2, v23);
  uint64_t v24 = OUTLINED_FUNCTION_19(v13, 40LL);
  *(_OWORD *)(v24 + 16) = xmmword_17E150;
  *(void *)(v24 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v17;
  OUTLINED_FUNCTION_15_1(v24, v25, v26);
  id v27 = v17;
  outlined bridged method (mbnn) of @objc SAUIConfirmationView.confirmCommands.setter();
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.denyText.setter(a3, a4, v23);
  uint64_t v28 = OUTLINED_FUNCTION_19(v13, 40LL);
  *(_OWORD *)(v28 + 16) = xmmword_17E150;
  *(void *)(v28 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v21;
  OUTLINED_FUNCTION_15_1(v28, v29, v30);
  id v31 = v21;
  outlined bridged method (mbnn) of @objc SAUIConfirmationView.confirmCommands.setter();
  uint64_t v32 = OUTLINED_FUNCTION_19(v13, 48LL);
  *(_OWORD *)(v32 + 16) = xmmword_17E670;
  *(void *)(v32 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v36;
  *(void *)(v32 + 40) = v22;
  OUTLINED_FUNCTION_15_1(v32, v33, v34);
  outlined bridged method (mbnn) of @objc SAUIConfirmationView.allConfirmationOptions.setter(v37, v23);

  return v23;
}

uint64_t CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[21] = a3;
  v4[22] = v3;
  v4[19] = a1;
  v4[20] = a2;
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v4[23] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[24] = v6;
  v4[25] = OUTLINED_FUNCTION_4_0(v6);
  v4[26] = OUTLINED_FUNCTION_11_0();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v4[27] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[28] = v8;
  v4[29] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  v4[30] = OUTLINED_FUNCTION_4_0(*(void *)(v9 - 8));
  v4[31] = OUTLINED_FUNCTION_11_0();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[32] = OUTLINED_FUNCTION_4_0(*(void *)(v10 - 8));
  v4[33] = OUTLINED_FUNCTION_11_0();
  uint64_t v11 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v4[34] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[35] = v12;
  v4[36] = OUTLINED_FUNCTION_9_0(v12);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String_optional v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v4 = *(void **)(v3 + 320);
  uint64_t v6 = *(void *)(v3 + 200);
  uint64_t v5 = *(void *)(v3 + 208);
  uint64_t v8 = *(void *)(v3 + 184);
  uint64_t v7 = *(void *)(v3 + 192);
  uint64_t v9 = *(void *)(v3 + 176);
  static DialogPhase.confirmation.getter(a1, a2, a3);
  uint64_t v10 = [v4 catId];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
  OutputGenerationManifest.init(dialogPhase:_:)(v6, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v8);
  __swift_project_boxed_opaque_existential_1((void *)(v9 + 16), *(void *)(v9 + 40));
  uint64_t v12 = OUTLINED_FUNCTION_63_1();
  if ((dispatch thunk of DeviceState.isCarPlay.getter(v12, v13) & 1) != 0)
  {
    uint64_t v14 = (void *)swift_task_alloc(dword_214B4C);
    *(void *)(v3 + 336) = v14;
    *uint64_t v14 = v3;
    v14[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:);
    return EnableTCCCATWrapperSimple.promptToEnableAppSnippetTitle(appName:)(*(void *)(v3 + 264));
  }

  else
  {
    OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
    uint64_t v16 = DialogExecutionResult.firstDialogFullPrint()();
    *(Swift::String_optional *)(v3 + 136) = v16;
    id v17 = *(void **)(v3 + 176);
    *(void *)(v3 + 360) = v16.value._object;
    uint64_t v18 = (void *)OUTLINED_FUNCTION_3_1(v17);
    *(void *)(v3 + 368) = v18;
    uint64_t v19 = OUTLINED_FUNCTION_59_0(v18, (uint64_t)CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:));
    return v20(v19);
  }

uint64_t CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:)()
{
  char v1 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_21_1();
  if ((v1 & 1) != 0)
  {
    uint64_t v2 = v0[33];
    uint64_t v4 = v0[30];
    uint64_t v3 = v0[31];
    uint64_t v5 = v0[22];
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_58_1(v2, 1LL);
    uint64_t v6 = (void *)(v5 + 16);
    v0[5] = &type metadata for AppInfoResolver;
    v0[6] = &protocol witness table for AppInfoResolver;
    App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(v5 + 16, v0 + 2, 2, v3);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2);
    outlined init with copy of AppDisplayInfo?(v3, v4, &demangling cache variable for type metadata for AppDisplayInfo?);
    uint64_t v7 = type metadata accessor for AppDisplayInfo(0LL);
    if (__swift_getEnumTagSinglePayload(v4, 1LL, v7) == 1)
    {
      outlined destroy of Any?(v0[30], &demangling cache variable for type metadata for AppDisplayInfo?);
    }

    else
    {
      uint64_t v11 = v0[32];
      uint64_t v10 = v0[33];
      uint64_t v12 = ((uint64_t (*)(void))AppDisplayInfo.displayName.getter)();
      uint64_t v14 = v13;
      OUTLINED_FUNCTION_65_1(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL));
      SpeakableString.init(print:speak:)(v12, v14, 0LL, 0LL);
      outlined destroy of Any?(v10, &demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_58_1(v11, 0LL);
      outlined init with take of SpeakableString?(v11, v10);
    }

    uint64_t v15 = v0[22];
    type metadata accessor for EnableTCCCATWrapperSimple(0LL);
    outlined init with copy of DeviceState((uint64_t)v6, (uint64_t)(v0 + 7));
    v0[37] = EnableTCCCATWrapperSimple.__allocating_init(deviceState:)((uint64_t)(v0 + 7));
    uint64_t v16 = *(void *)(v15 + 40);
    uint64_t v17 = *(void *)(v15 + 48);
    __swift_project_boxed_opaque_existential_1(v6, v16);
    uint64_t v18 = DeviceState.asSiriKitDeviceState()(v16, v17);
    v0[38] = v18;
    uint64_t v19 = (void *)swift_task_alloc(dword_214B34);
    v0[39] = v19;
    *uint64_t v19 = v0;
    v19[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:);
    return EnableTCCCATWrapperSimple.promptToEnableApp(device:appName:)(v18, v0[33]);
  }

  else
  {
    uint64_t v8 = (void *)swift_task_alloc(dword_214B2C);
    v0[55] = v8;
    *uint64_t v8 = v0;
    v8[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:);
    return CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance_preRFv2(app:intent:)(v0[19], v0[20], v0[21]);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_10_0(v3);
  *(void *)(v2 + 344) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    *(void *)(v2 + 35__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  void *v1;
  Swift::String_optional v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  char v1 = *(void **)(v0 + 352);
  uint64_t v2 = DialogExecutionResult.firstDialogFullPrint()();

  *(Swift::String_optional *)(v0 + 136) = v2;
  uint64_t v3 = *(void **)(v0 + 176);
  *(void *)(v0 + 360) = v2.value._object;
  uint64_t v4 = (void *)OUTLINED_FUNCTION_3_1(v3);
  *(void *)(v0 + 368) = v4;
  uint64_t v5 = OUTLINED_FUNCTION_59_0(v4, (uint64_t)CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:));
  return OUTLINED_FUNCTION_36_1(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v2 = v0[51];
  char v1 = v0[52];
  uint64_t v3 = v0[49];
  uint64_t v4 = v0[50];
  uint64_t v5 = v0[48];
  uint64_t v6 = v0[45];
  uint64_t v7 = (void *)v0[40];
  uint64_t v8 = (void *)v0[22];
  uint64_t v19 = v8[15];
  uint64_t v20 = v8[16];
  __swift_project_boxed_opaque_existential_1(v8 + 12, v19);
  uint64_t v9 = type metadata accessor for WorkflowDataModels(0LL);
  v0[15] = v9;
  v0[16] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels();
  __swift_allocate_boxed_opaque_existential_1Tm(v0 + 12);
  *uint64_t v10 = v2;
  v10[1] = v4;
  v10[2] = v3;
  v10[3] = v5;
  v10[4] = v1;
  v10[5] = v6;
  swift_storeEnumTagMultiPayload(v10, v9, 1LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = OUTLINED_FUNCTION_19(v11, 40LL);
  *(_OWORD *)(v12 + 16) = xmmword_17E150;
  *(void *)(v12 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
  id v21 = v12;
  specialized Array._endMutation()(v12, v13, v14);
  v0[53] = v21;
  uint64_t v15 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)[1];
  uint64_t v16 = v7;
  uint64_t v17 = (void *)swift_task_alloc(v15);
  v0[54] = v17;
  *uint64_t v17 = v0;
  v17[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)( v0[19],  v0 + 12,  v21,  v0[29],  v19,  v20);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v1 = (void *)(*(void *)v0 + 96LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 424LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 432LL));
  swift_bridgeObjectRelease(v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char v1 = *(void **)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 264);
  swift_release(*(void *)(v0 + 296));

  uint64_t v3 = OUTLINED_FUNCTION_63_1();
  uint64_t v5 = v4(v3);
  OUTLINED_FUNCTION_26_0(v5, &demangling cache variable for type metadata for AppDisplayInfo?);
  outlined destroy of Any?(v2, &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc(*(void *)(v0 + 288));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_17_0();
  swift_release(*(void *)(v0 + 296));
  outlined destroy of Any?(*(void *)(v0 + 248), &demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_26_0(v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_43_2();

  OUTLINED_FUNCTION_21_1();
  outlined destroy of Any?(*(void *)(v1 + 248), &demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_26_0(v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v1 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_43_2();

  OUTLINED_FUNCTION_21_1();
  outlined destroy of Any?(*(void *)(v1 + 248), &demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_26_0(v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(*v2 + 304);
  uint64_t v4 = *(void *)(*v2 + 312);
  *(void *)(v3 + 320) = a1;
  *(void *)(v3 + 328) = v1;
  swift_task_dealloc(v4);
  swift_release(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = (void *)*v5;
  uint64_t v10 = v14;
  OUTLINED_FUNCTION_10_0(&v14);
  v10[47] = v4;
  swift_task_dealloc(v11);
  if (v4)
  {
    swift_bridgeObjectRelease(v10[45]);
  }

  else
  {
    uint64_t v12 = v10[17];
    v10[48] = a4;
    v10[49] = a3;
    v10[50] = a2;
    v10[51] = a1;
    v10[52] = v12;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18)
{
  a17 = v19;
  a18 = v20;
  a16 = v18;
  a16 = (uint64_t *)*v18;
  id v21 = a16;
  OUTLINED_FUNCTION_10_0(&a16);
  swift_task_dealloc(v22);
  swift_task_dealloc(v21[36]);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  return OUTLINED_FUNCTION_2_0((uint64_t (*)(void))v18[1]);
}

uint64_t EnableTCCCATWrapperSimple.__allocating_init(deviceState:)(uint64_t a1)
{
  uint64_t v4 = v3;
  outlined destroy of Any?(a1, &demangling cache variable for type metadata for DeviceState?);
  return v4;
}

void *CustomIntentTCCFlowStrategy.deinit()
{
  return v0;
}

uint64_t CustomIntentTCCFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 136LL, 7LL);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(**(void **)v3 + 144LL);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentTCCFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnLowConfidence(app:intent:) in conformance CustomIntentTCCFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnLowConfidence(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentTCCFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnLowConfidence(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForDeviceUnlock(app:intent:) in conformance CustomIntentTCCFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to RequestTCCAcceptanceFlowStrategyAsync.makePromptForDeviceUnlock(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentTCCFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return RequestTCCAcceptanceFlowStrategyAsync.makePromptForDeviceUnlock(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeHandoffForAuthenticationResponse(app:intent:) in conformance CustomIntentTCCFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to RequestTCCAcceptanceFlowStrategyAsync.makeHandoffForAuthenticationResponse(app:intent:)[1]);
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentTCCFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return RequestTCCAcceptanceFlowStrategyAsync.makeHandoffForAuthenticationResponse(app:intent:)(a1, a2, a3, v11, a5);
}

void SiriKitFlowCATWrapperSimple.__allocating_init(deviceState:)()
{
}

void SiriKitFlowCATWrapperSimple.init(deviceState:)()
{
  uint64_t v28 = v0;
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_35();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v27 - v17;
  id v19 = (id)AFSystemRootDirectory(v16);
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  URL.init(fileURLWithPath:isDirectory:)(v20, v22, 1LL);
  OUTLINED_FUNCTION_64_0();
  URL.appendingPathComponent(_:)(0xD000000000000041LL, 0x8000000000192710LL);
  outlined init with copy of AppDisplayInfo?( v2,  (uint64_t)&v29,  &demangling cache variable for type metadata for DeviceState?);
  if (v30)
  {
    outlined init with take of AceServiceInvokerAsync(&v29, (uint64_t)v31);
    type metadata accessor for CATGlobals(0LL);
    outlined init with copy of DeviceState((uint64_t)v31, (uint64_t)&v29);
    uint64_t v23 = CATGlobals.__allocating_init(device:)(&v29);
    __swift_destroy_boxed_opaque_existential_1Tm(v31);
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v29, &demangling cache variable for type metadata for DeviceState?);
    uint64_t v23 = 0LL;
  }

  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v10, v15, v11);
  uint64_t v24 = __swift_storeEnumTagSinglePayload(v10, 0LL, 1LL, v11);
  static CATOption.defaultMode.getter(v24);
  uint64_t v25 = CATWrapperSimple.init(templateDir:options:globals:)(v10, v6, v23);
  OUTLINED_FUNCTION_26_0(v25, &demangling cache variable for type metadata for DeviceState?);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v12 + 8);
  v26(v15, v11);
  v26(v18, v11);
  OUTLINED_FUNCTION_24_0();
}

void SiriKitFlowCATWrapperSimple.init(templateDir:options:globals:)()
{
}

void SiriKitFlowCATWrapperSimple.init(useResponseMode:options:)()
{
}

uint64_t ContinueInAppCATWrapperSimple.__deallocating_deinit()
{
  uint64_t v0 = CATWrapperSimple.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t EnableTCCCATWrapperSimple.promptToEnableApp(device:appName:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(EnableTCCCATWrapperSimple.promptToEnableApp(device:appName:), 0LL, 0LL);
}

uint64_t EnableTCCCATWrapperSimple.promptToEnableApp(device:appName:)()
{
  uint64_t v2 = v1[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  v1[6] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_17E660;
  *(void *)(v4 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0x656369766564LL;
  *(void *)(v4 + 40) = 0xE600000000000000LL;
  uint64_t v5 = 0LL;
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SirikitDeviceState(0LL);
  }

  else
  {
    *(void *)(v4 + 56) = 0LL;
    *(void *)(v4 + 64) = 0LL;
  }

  uint64_t v6 = v1[5];
  uint64_t v7 = v1[3];
  *(void *)(v4 + 48) = v2;
  *(void *)(v4 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v5;
  *(void *)(v4 + 80) = 0x656D614E707061LL;
  *(void *)(v4 + 88) = 0xE700000000000000LL;
  outlined init with copy of AppDisplayInfo?(v7, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  int v9 = OUTLINED_FUNCTION_40_2(v8);
  uint64_t v10 = v1[5];
  uint64_t v11 = v1[2];
  if (v9 == 1)
  {
    swift_retain(v1[2]);
    outlined destroy of Any?(v10, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  }

  else
  {
    *(void *)(v4 + 120) = v0;
    __swift_allocate_boxed_opaque_existential_1Tm((void *)(v4 + 96));
    OUTLINED_FUNCTION_34_2(v12);
    swift_retain(v11);
  }

  v1[7] = v13;
  void *v13 = v1;
  v13[1] = EnableTCCCATWrapperSimple.promptToEnableApp(device:appName:);
  unint64_t v14 = OUTLINED_FUNCTION_52_0();
  return v16(v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_10_0(v4);
  *(void *)(v2 + 64) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 48));
    OUTLINED_FUNCTION_40_0();
    return OUTLINED_FUNCTION_23_1(v0, *(uint64_t (**)(void))(v3 + 8));
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t EnableTCCCATWrapperSimple.promptToEnableAppSnippetTitle(appName:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(EnableTCCCATWrapperSimple.promptToEnableAppSnippetTitle(appName:), 0LL, 0LL);
}

uint64_t EnableTCCCATWrapperSimple.promptToEnableAppSnippetTitle(appName:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 80LL);
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_17E650;
  uint64_t v4 = (void *)(v3 + 48);
  *(void *)(v3 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0x656D614E707061LL;
  *(void *)(v3 + 40) = 0xE700000000000000LL;
  uint64_t v5 = OUTLINED_FUNCTION_63_1();
  outlined init with copy of AppDisplayInfo?(v5, v6, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  if (OUTLINED_FUNCTION_40_2(v8) == 1)
  {
    outlined destroy of Any?(v0[4], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }

  else
  {
    *(void *)(v3 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
    __swift_allocate_boxed_opaque_existential_1Tm(v4);
    OUTLINED_FUNCTION_34_2(v9);
  }

  v0[6] = v10;
  *uint64_t v10 = v0;
  v10[1] = EnableTCCCATWrapperSimple.promptToEnableAppSnippetTitle(appName:);
  unint64_t v11 = OUTLINED_FUNCTION_52_0();
  return v13(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_10_0(v4);
  *(void *)(v2 + 56) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 40));
    OUTLINED_FUNCTION_40_0();
    return OUTLINED_FUNCTION_23_1(v0, *(uint64_t (**)(void))(v3 + 8));
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t EnableTCCLabelsProvider.getYesNoLabels()()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to static LabelTemplates.yes()[1]);
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = EnableTCCLabelsProvider.getYesNoLabels();
  return static LabelTemplates.yes()();
}

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EnableTCCLabelsProvider.getYesNoLabels()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v9 = v4;
  __int128 v4[2] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = v2;
  OUTLINED_FUNCTION_10_0(&v9);
  v4[7] = v5;
  swift_task_dealloc(v6);
  if (v2) {
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to static LabelTemplates.no()[1]);
  v4[8] = v8;
  *uint64_t v8 = v3;
  v8[1] = EnableTCCLabelsProvider.getYesNoLabels();
  return static LabelTemplates.no()();
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v7;
  uint64_t v8;
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_10_0(v7);
  void v4[9] = v2;
  swift_task_dealloc(v8);
  if (!v2) {
    return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(v3 + 8))(v4[3], v4[7], a1, a2);
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t protocol witness for EnableTCCLabelsProviding.getYesNoLabels() in conformance EnableTCCLabelsProvider()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_214B64);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for EnableTCCLabelsProviding.getYesNoLabels() in conformance EnableTCCLabelsProvider;
  return EnableTCCLabelsProvider.getYesNoLabels()();
}

uint64_t protocol witness for EnableTCCLabelsProviding.getYesNoLabels() in conformance EnableTCCLabelsProvider( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = OUTLINED_FUNCTION_16_1();
  if (!v4)
  {
    uint64_t v10 = a1;
    uint64_t v11 = a2;
    uint64_t v12 = a3;
    uint64_t v13 = a4;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8))(v10, v11, v12, v13);
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (commands: SASendCommands, label: String));
  swift_arrayDestroy(v0 + 32, v1, v2);
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

{
  uint64_t v0;
  swift_arrayDestroy(v0 + 32, *(void *)(v0 + 16), &type metadata for String);
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmText.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setConfirmText:v4];
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationView.denyText.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setDenyText:v4];
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationView.confirmCommands.setter()
{
  int v0 = OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_50_2(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_25_2(v10);
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationView.allConfirmationOptions.setter( uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setAllConfirmationOptions:isa];
}

void outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter()
{
  int v0 = OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_50_2(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_25_2(v10);
}

void *specialized CustomIntentTCCFlowStrategy.init(deviceState:labelsProvider:responseFactory:)( __int128 *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  a4[10] = a5;
  a4[11] = a7;
  __swift_allocate_boxed_opaque_existential_1Tm(a4 + 7);
  (*(void (**)(void))(*(void *)(a5 - 8) + 32LL))();
  a4[15] = a6;
  a4[16] = a8;
  __swift_allocate_boxed_opaque_existential_1Tm(a4 + 12);
  (*(void (**)(void))(*(void *)(a6 - 8) + 32LL))();
  outlined init with take of AceServiceInvokerAsync(a1, (uint64_t)(a4 + 2));
  return a4;
}

uint64_t type metadata accessor for EnableTCCCATWrapperSimple(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for EnableTCCCATWrapperSimple,  (uint64_t)&nominal type descriptor for EnableTCCCATWrapperSimple);
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels)
  {
    uint64_t v1 = type metadata accessor for WorkflowDataModels(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WorkflowDataModels, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels);
  }

  return result;
}

uint64_t outlined init with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CustomIntentTCCFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin27CustomIntentTCCFlowStrategy);
}

uint64_t type metadata accessor for SiriKitFlowCATWrapperSimple(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for SiriKitFlowCATWrapperSimple,  (uint64_t)&nominal type descriptor for SiriKitFlowCATWrapperSimple);
}

uint64_t type metadata accessor for EnableTCCCATWrapperSimple(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t type metadata completion function for SiriKitFlowCATWrapperSimple()
{
  return type metadata completion function for SiriKitFlowCATWrapperSimple();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_12_0();
  return swift_initClassMetadata2(v0, v1, v2, v3, v4);
}

uint64_t ObjC metadata update function for SiriKitFlowCATWrapperSimple()
{
  return type metadata accessor for SiriKitFlowCATWrapperSimple(0LL);
}

uint64_t type metadata completion function for EnableTCCCATWrapperSimple()
{
  return type metadata completion function for SiriKitFlowCATWrapperSimple();
}

uint64_t ObjC metadata update function for EnableTCCCATWrapperSimple()
{
  return type metadata accessor for EnableTCCCATWrapperSimple(0LL);
}

ValueMetadata *type metadata accessor for EnableTCCLabelsProvider()
{
  return &type metadata for EnableTCCLabelsProvider;
}

unint64_t type metadata accessor for SAUIConfirmationOption()
{
  unint64_t result = lazy cache variable for type metadata for SAUIConfirmationOption;
  if (!lazy cache variable for type metadata for SAUIConfirmationOption)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SAUIConfirmationOption);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption);
  }

  return result;
}

void outlined init with copy of AppDisplayInfo?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  OUTLINED_FUNCTION_1();
}

void __swift_allocate_boxed_opaque_existential_1Tm(void *a1)
{
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0) {
    *a1 = swift_allocBox();
  }
  OUTLINED_FUNCTION_1();
}

uint64_t OUTLINED_FUNCTION_3_1@<X0>(void *a1@<X8>)
{
  uint64_t v1 = a1[11];
  __swift_project_boxed_opaque_existential_1(a1 + 7, a1[10]);
  return swift_task_alloc(*(unsigned int *)(*(void *)(v1 + 8) + 4LL));
}

uint64_t OUTLINED_FUNCTION_9_1()
{
  return swift_task_dealloc(*(void *)(v0 + 288));
}

void OUTLINED_FUNCTION_10_0(void *a1@<X8>)
{
  *a1 = *v1;
}

void OUTLINED_FUNCTION_12_2()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_13_2@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
}

uint64_t OUTLINED_FUNCTION_14_1@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
}

uint64_t OUTLINED_FUNCTION_15_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_16_1()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_21_1()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_22_2(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_23_1(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void OUTLINED_FUNCTION_25_2(id a1)
{
}

void OUTLINED_FUNCTION_26_0(uint64_t a1, uint64_t *a2)
{
}

uint64_t OUTLINED_FUNCTION_27_2(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_28_2@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 72);
}

void OUTLINED_FUNCTION_30_2()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_31_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CasinoFactory.makeConfirmationOptionFromCommands(commands:label:confirmationType:isActive:iconType:)( a1,  a2,  a3,  v3,  v4,  0LL,  0LL,  0LL);
}

void OUTLINED_FUNCTION_33_2(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_34_2(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_35_2(__n128 *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  a1[1] = a4;
  a1[2].n128_u64[0] = v4;
  *(void *)(v5 - 184) = a1;
  return specialized Array._endMutation()(a1, a2, a3);
}

void *OUTLINED_FUNCTION_36_2(__int128 *a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized CustomIntentTCCFlowStrategy.init(deviceState:labelsProvider:responseFactory:)( a1,  a2,  a3,  a4,  v4,  v6,  v5,  v7);
}

uint64_t OUTLINED_FUNCTION_40_2(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_43_2()
{
  return swift_release(*(void *)(v0 + 296));
}

uint64_t OUTLINED_FUNCTION_46_2()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*(void *)(v0 - 176)
                                                                                               + 16LL));
}

id OUTLINED_FUNCTION_47_2(void *a1)
{
  return [a1 *(SEL *)(v1 + 3592)];
}

uint64_t OUTLINED_FUNCTION_48_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, a2, a3, a4, 0LL);
}

uint64_t OUTLINED_FUNCTION_49_1()
{
  return __swift_mutable_project_boxed_opaque_existential_1(v0, *(void *)(v0 + 24));
}

id OUTLINED_FUNCTION_50_2( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  return objc_msgSend(v11, *v10, a10);
}

unint64_t OUTLINED_FUNCTION_52_0()
{
  return 0xD00000000000001BLL;
}

uint64_t OUTLINED_FUNCTION_54_1()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_56_1()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_57_1()
{
  return swift_slowAlloc(2LL, -1LL);
}

uint64_t OUTLINED_FUNCTION_58_1(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1LL, v2);
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  return swift_task_dealloc(*(void *)(v0 + 72));
}

uint64_t OUTLINED_FUNCTION_61_1()
{
  return type metadata accessor for SpeakableString(0LL);
}

id OUTLINED_FUNCTION_62_1()
{
  return [v0 *(SEL *)(v1 + 3592)];
}

uint64_t OUTLINED_FUNCTION_63_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_64_0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_65_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_67_0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_68_0()
{
  return swift_task_dealloc(*(void *)(v0 + 200));
}

uint64_t OUTLINED_FUNCTION_69_0()
{
  return swift_bridgeObjectRelease(v0);
}

void CustomRequestParameterDefinition.name.getter()
{
}

void AutoShortcutInvocation.actionIdentifier.getter()
{
}

void AutoShortcutInvocation.baseTemplatePhrase.getter()
{
}

uint64_t ShowAlertVisual.response.getter(uint64_t a1)
{
  v2[37] = a1;
  v2[38] = v1;
  uint64_t v3 = type metadata accessor for Separators(0LL);
  v2[39] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for ComponentWrapper(0LL);
  v2[40] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[41] = v5;
  v2[42] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for BinaryButton(0LL);
  v2[43] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[44] = v7;
  v2[45] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for Button.LabelStyle(0LL);
  v2[46] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[47] = v9;
  v2[48] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for _ProtoButton.FormAction(0LL);
  v2[49] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[50] = v11;
  v2[51] = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = type metadata accessor for ButtonRole(0LL);
  v2[52] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[53] = v13;
  v2[54] = OUTLINED_FUNCTION_9_0(v13);
  uint64_t v14 = type metadata accessor for Button(0LL);
  v2[55] = v14;
  v2[56] = *(void *)(v14 - 8);
  v2[57] = OUTLINED_FUNCTION_11_0();
  v2[58] = OUTLINED_FUNCTION_11_0();
  v2[59] = OUTLINED_FUNCTION_11_0();
  v2[60] = OUTLINED_FUNCTION_11_0();
  uint64_t v15 = type metadata accessor for Command(0LL);
  v2[61] = v15;
  v2[62] = *(void *)(v15 - 8);
  v2[63] = OUTLINED_FUNCTION_11_0();
  v2[64] = OUTLINED_FUNCTION_11_0();
  uint64_t v16 = type metadata accessor for SimpleItemRich(0LL);
  v2[65] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[66] = v17;
  v2[67] = OUTLINED_FUNCTION_9_0(v17);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShowAlertVisual.response.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + 280);
  outlined init with take of String?(*(void *)(v0 + 304) + 16LL, v0 + 264);
  outlined init with take of String?(v0 + 264, v0 + 280);
  unint64_t v2 = *(void *)(v0 + 288);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = *v1;
  uint64_t v4 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = *v1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 304);
    uint64_t v26 = &type metadata for String;
    uint64_t v27 = &protocol witness table for String;
    uint64_t v24 = v3;
    unint64_t v25 = v2;
    *(_OWORD *)(v0 + 248) = *(_OWORD *)(v5 + 32);
    *((void *)&v29 + 1) = &type metadata for String;
    uint64_t v30 = &protocol witness table for String;
    __int128 v28 = *(_OWORD *)(v5 + 32);
    uint64_t v32 = 0LL;
    OUTLINED_FUNCTION_1_1((__n128)0);
    outlined retain of String?(v0 + 264);
    outlined retain of String?(v0 + 248);
  }

  else
  {
LABEL_6:
    uint64_t v7 = *(void *)(v0 + 304);
    uint64_t v9 = *(void *)(v7 + 32);
    unint64_t v8 = *(void *)(v7 + 40);
    uint64_t v26 = &type metadata for String;
    uint64_t v27 = &protocol witness table for String;
    uint64_t v24 = v9;
    unint64_t v25 = v8;
    uint64_t v30 = 0LL;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    uint64_t v32 = 0LL;
    OUTLINED_FUNCTION_1_1((__n128)0);
    __n128 v6 = swift_bridgeObjectRetain(v10);
  }

  SimpleItemRich.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:action:componentName:linkIdentifier:)( &v24,  &v28,  v31,  v33,  v34,  v35,  &v36,  &v37,  v6,  &v38,  &v39,  0LL,  0xE000000000000000LL,  0LL,  0LL);
  uint64_t v11 = *(void *)(v0 + 512);
  uint64_t v12 = *(void *)(v0 + 488);
  uint64_t v13 = *(void *)(v0 + 496);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  *(void *)(v0 + 544) = v14;
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_19(v14, 104LL);
  uint64_t v16 = OUTLINED_FUNCTION_5_1(v15, (__n128)xmmword_17E650);
  *(void *)(v16 + 216) = v17;
  *(void *)(v0 + 224) = 0xEC0000006E6F6974LL;
  AnyHashable.init<A>(_:)(v18, v16 + 216, &type metadata for String, &protocol witness table for String);
  v15[6].n128_u64[0] = (unint64_t)&type metadata for String;
  v15[4].n128_u64[1] = 7562617LL;
  v15[5].n128_u64[0] = 0xE300000000000000LL;
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)( v15,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  OUTLINED_FUNCTION_8_1(v19, 0x8000000000192920LL);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 200) = v12;
  *(void *)(v0 + 208) = &protocol witness table for Command;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 176));
  uint64_t v21 = *(void (**)(void *, uint64_t, uint64_t))(v13 + 16);
  *(void *)(v0 + 55__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v21;
  v21(boxed_opaque_existential_1, v11, v12);
  uint64_t v22 = (void *)swift_task_alloc(async function pointer to static LabelTemplates.ok()[1]);
  *(void *)(v0 + 560) = v22;
  *uint64_t v22 = v0;
  v22[1] = ShowAlertVisual.response.getter;
  return static LabelTemplates.ok()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  OUTLINED_FUNCTION_10_1();
  *uint64_t v5 = *v3;
  v4[71] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4[72] = v0;
    v4[73] = v2;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  void (*v12)(uint64_t);
  void (*v13)(uint64_t);
  __n128 *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *boxed_opaque_existential_1;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void *, uint64_t, uint64_t);
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v1 = *(void *)(v0 + 584);
  unint64_t v2 = *(void *)(v0 + 576);
  unint64_t v25 = *(void (**)(void *, uint64_t, uint64_t))(v0 + 552);
  uint64_t v22 = *(void *)(v0 + 544);
  uint64_t v23 = *(void *)(v0 + 504);
  uint64_t v24 = *(void *)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 432);
  __n128 v6 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 416);
  uint64_t v7 = *(void *)(v0 + 400);
  uint64_t v9 = *(void *)(v0 + 376);
  unint64_t v8 = *(void *)(v0 + 384);
  *(void *)(v0 + 40) = &type metadata for String;
  *(void *)(v0 + 48) = &protocol witness table for String;
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = v2;
  uint64_t v27 = 0LL;
  memset(v26, 0, sizeof(v26));
  uint64_t v10 = enum case for ButtonRole.preferred(_:);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  *(void *)(v0 + 59__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v11;
  v11(v4, v10, v5);
  *(_DWORD *)(v0 + 648) = enum case for _ProtoButton.FormAction.none(_:);
  uint64_t v12 = *(void (**)(uint64_t))(v7 + 104);
  *(void *)(v0 + 600) = v12;
  v12(v6);
  *(_DWORD *)(v0 + 65__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = enum case for Button.LabelStyle.automatic(_:);
  uint64_t v13 = *(void (**)(uint64_t))(v9 + 104);
  *(void *)(v0 + 608) = v13;
  v13(v8);
  OUTLINED_FUNCTION_11_2(v0 + 176, v0 + 16, (uint64_t)v26, v6, v8, v4);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_19(v22, 104LL);
  uint64_t v15 = OUTLINED_FUNCTION_5_1(v14, (__n128)xmmword_17E650);
  *(void *)(v15 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v16;
  *(void *)(v0 + 240) = 0xEC0000006E6F6974LL;
  AnyHashable.init<A>(_:)(v17, v15 + 232, &type metadata for String, &protocol witness table for String);
  v14[6].n128_u64[0] = (unint64_t)&type metadata for String;
  v14[4].n128_u64[1] = 28526LL;
  v14[5].n128_u64[0] = 0xE200000000000000LL;
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)( v14,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  OUTLINED_FUNCTION_8_1(v18, 0x8000000000192920LL);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 120) = v24;
  *(void *)(v0 + 128) = &protocol witness table for Command;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 96));
  v25(boxed_opaque_existential_1, v23, v24);
  uint64_t v20 = (void *)swift_task_alloc(async function pointer to static LabelTemplates.cancel()[1]);
  *(void *)(v0 + 616) = v20;
  *uint64_t v20 = v0;
  v20[1] = ShowAlertVisual.response.getter;
  return static LabelTemplates.cancel()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  OUTLINED_FUNCTION_10_1();
  *uint64_t v5 = *v3;
  v4[78] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4[79] = v0;
    v4[80] = v2;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  void *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  void (*v25)(uint64_t, void, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[32];
  uint64_t v46;
  uint64_t v1 = *(void *)(v0 + 640);
  unint64_t v2 = *(void *)(v0 + 632);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
  uint64_t v4 = *(unsigned int *)(v0 + 652);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
  __n128 v6 = *(unsigned int *)(v0 + 648);
  unint64_t v25 = *(void (**)(uint64_t, void, uint64_t))(v0 + 592);
  uint64_t v30 = *(void *)(v0 + 536);
  __int128 v29 = *(void *)(v0 + 528);
  id v40 = *(void *)(v0 + 520);
  uint64_t v34 = *(void *)(v0 + 512);
  uint64_t v33 = *(void *)(v0 + 504);
  id v31 = *(void *)(v0 + 496);
  uint64_t v32 = *(void *)(v0 + 488);
  id v41 = *(void *)(v0 + 480);
  uint64_t v39 = *(void *)(v0 + 472);
  uint64_t v43 = *(void *)(v0 + 464);
  uint64_t v7 = *(void *)(v0 + 448);
  uint64_t v44 = *(void *)(v0 + 456);
  unint64_t v8 = *(void *)(v0 + 432);
  uint64_t v38 = *(void *)(v0 + 440);
  uint64_t v10 = *(void *)(v0 + 408);
  uint64_t v9 = *(void *)(v0 + 416);
  uint64_t v12 = *(void *)(v0 + 384);
  uint64_t v11 = *(void *)(v0 + 392);
  *(void *)(v0 + 80) = &type metadata for String;
  *(void *)(v0 + 88) = &protocol witness table for String;
  uint64_t v13 = *(void *)(v0 + 360);
  uint64_t v14 = *(void *)(v0 + 368);
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = v2;
  uint64_t v26 = *(void *)(v0 + 352);
  uint64_t v37 = *(void *)(v0 + 344);
  id v46 = 0LL;
  memset(v45, 0, sizeof(v45));
  id v35 = v13;
  uint64_t v36 = *(void *)(v0 + 336);
  uint64_t v27 = *(void *)(v0 + 320);
  __int128 v28 = *(void *)(v0 + 328);
  id v42 = *(void *)(v0 + 312);
  v5(v10, v6, v11);
  v3(v12, v4, v14);
  v25(v8, enum case for ButtonRole.standard(_:), v9);
  OUTLINED_FUNCTION_11_2(v0 + 96, v0 + 56, (uint64_t)v45, v10, v12, v8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v15(v43, v41, v38);
  v15(v44, v39, v38);
  BinaryButton.init(primaryButton:secondaryButton:componentName:linkIdentifier:)( v43,  v44,  0LL,  0xE000000000000000LL,  0LL,  0LL);
  *(void *)(v0 + 160) = v37;
  *(void *)(v0 + 168) = &protocol witness table for BinaryButton;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 136));
  uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 16))(boxed_opaque_existential_1, v35, v37);
  static Separators.none.getter(v17);
  ComponentWrapper.init(_:separators:)(v0 + 136, v42);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SectionConvertible>);
  uint64_t v19 = OUTLINED_FUNCTION_19(v18, 112LL);
  *(_OWORD *)(v19 + 16) = xmmword_17E660;
  *(void *)(v19 + 56) = v40;
  *(void *)(v19 + 64) = &protocol witness table for SimpleItemRich;
  uint64_t v20 = __swift_allocate_boxed_opaque_existential_1((void *)(v19 + 32));
  (*(void (**)(void *, uint64_t, uint64_t))(v29 + 16))(v20, v30, v40);
  *(void *)(v19 + 96) = v27;
  *(void *)(v19 + 104) = &protocol witness table for ComponentWrapper;
  uint64_t v21 = __swift_allocate_boxed_opaque_existential_1((void *)(v19 + 72));
  (*(void (**)(void *, uint64_t, uint64_t))(v28 + 16))(v21, v36, v27);
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)( v19,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  0LL);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v36, v27);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v35, v37);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v22(v39, v38);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v23(v33, v32);
  v22(v41, v38);
  v23(v34, v32);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v40);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_20_2();
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 528);
  (*(void (**)(void, void))(*(void *)(v0 + 496) + 8LL))(*(void *)(v0 + 512), *(void *)(v0 + 488));
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 176));
  OUTLINED_FUNCTION_2_2();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v1 = *(void *)(v0 + 528);
  unint64_t v2 = *(void *)(v0 + 512);
  uint64_t v3 = *(void *)(v0 + 488);
  uint64_t v4 = *(void *)(v0 + 480);
  uint64_t v5 = *(void *)(v0 + 440);
  __n128 v6 = *(void *)(v0 + 448);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 496) + 8LL);
  v7(*(void *)(v0 + 504), v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7(v2, v3);
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 96));
  OUTLINED_FUNCTION_2_2();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  return a1;
}

uint64_t ShowAlertVisual.data.getter()
{
  uint64_t v1 = type metadata accessor for Response(0LL);
  v0[2] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[3] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_9_0(v2);
  v0[4] = v3;
  uint64_t v4 = (void *)swift_task_alloc(dword_214D74);
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = ShowAlertVisual.data.getter;
  return ShowAlertVisual.response.getter(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 48LL) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = lazy protocol witness table accessor for type Response and conformance Response();
  uint64_t v4 = ProtobufBuilder.serializedData()(v2, v3);
  __n128 v6 = v5;
  uint64_t v7 = *(void *)(v0 + 24);
  if (v1)
  {
    OUTLINED_FUNCTION_12_3(v7);
    swift_task_dealloc(*(void *)(v0 + 32));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v9 = v4;
    OUTLINED_FUNCTION_12_3(v7);
    OUTLINED_FUNCTION_18_0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, v6);
  }

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type Response and conformance Response()
{
  unint64_t result = lazy protocol witness table cache variable for type Response and conformance Response;
  if (!lazy protocol witness table cache variable for type Response and conformance Response)
  {
    uint64_t v1 = type metadata accessor for Response(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Response, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Response and conformance Response);
  }

  return result;
}

uint64_t DisambiguationItemComponent.init(title:subtitle:image:synonyms:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ShowAlertVisual(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for ShowAlertVisual(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *initializeWithCopy for ShowAlertVisual(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for ShowAlertVisual(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for ShowAlertVisual(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowAlertVisual(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowAlertVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ShowAlertVisual()
{
  return &type metadata for ShowAlertVisual;
}

void OUTLINED_FUNCTION_1_1(__n128 a1)
{
  *uint64_t v1 = a1;
  v1[1] = a1;
  v1[3] = a1;
  v1[4] = a1;
  v1[6] = a1;
  v1[7] = a1;
  *(void *)(v2 - 224) = 0LL;
  void v1[9] = a1;
  v1[10] = a1;
  *(void *)(v2 - 176) = 0LL;
  v1[12] = a1;
  v1[13] = a1;
  *(void *)(v2 - 128) = 0LL;
  v1[15] = a1;
  v1[16] = a1;
  *(void *)(v2 - 80) = 0LL;
  v1[18] = a1;
  v1[19] = a1;
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return swift_task_dealloc(*(void *)(v0 + 536));
}

uint64_t OUTLINED_FUNCTION_3_2(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_4_1()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_5_1(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_8_1(uint64_t a1, uint64_t a2)
{
  return static Command.directInvocation(identifier:payload:isNavigation:)(0xD00000000000003DLL, a2, v2, 0LL);
}

void OUTLINED_FUNCTION_10_1()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_11_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Button.init(action:label:thumbnail:formAction:labelStyle:buttonRole:componentName:linkIdentifier:)( a1,  a2,  a3,  a4,  a5,  a6,  0LL,  0xE000000000000000LL);
}

uint64_t OUTLINED_FUNCTION_12_3@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_17_1()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return swift_task_dealloc(v0);
}

uint64_t InstallVoiceShortcutInvocationData.description.getter()
{
  uint64_t v1 = 0x7974706D65LL;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v15[0] = 0LL;
  v15[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(71LL);
  v5._object = (void *)0x8000000000192960LL;
  v5._countAndFlagsBits = 0xD00000000000002DLL;
  String.append(_:)(v5);
  uint64_t v6 = *(void *)(v0 + 24);
  if (!v6) {
    OUTLINED_FUNCTION_4_2();
  }
  swift_bridgeObjectRetain(v6);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_1_2();
  v7._countAndFlagsBits = 0x617265747475202CLL;
  v7._object = (void *)0xED0000203A65636ELL;
  String.append(_:)(v7);
  uint64_t v8 = *(void *)(v0 + 40);
  if (!v8) {
    OUTLINED_FUNCTION_4_2();
  }
  swift_bridgeObjectRetain(v8);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_1_2();
  v9._countAndFlagsBits = 0x203A6C7275202CLL;
  v9._object = (void *)0xE700000000000000LL;
  String.append(_:)(v9);
  outlined init with copy of URL?( v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin34InstallVoiceShortcutInvocationData_url,  (uint64_t)v4);
  uint64_t v10 = type metadata accessor for URL(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1LL, v10) == 1)
  {
    outlined destroy of URL?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for URL?);
    uint64_t v11 = (void *)0xE500000000000000LL;
  }

  else
  {
    uint64_t v1 = URL.absoluteString.getter();
    uint64_t v11 = v12;
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v4, v10);
  }

  v13._countAndFlagsBits = v1;
  v13._object = v11;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v11);
  return v15[0];
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t InstallVoiceShortcutInvocationData.__allocating_init(semantic:url:utterance:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  InstallVoiceShortcutInvocationData.init(semantic:url:utterance:)(a1, a2, a3, a4, a5);
  return v11;
}

void *InstallVoiceShortcutInvocationData.init(semantic:url:utterance:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a1;
  v5[3] = a2;
  v5[4] = a4;
  v5[5] = a5;
  outlined init with take of URL?( a3,  (uint64_t)v5 + OBJC_IVAR____TtC18SiriLinkFlowPlugin34InstallVoiceShortcutInvocationData_url);
  return v5;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t InstallVoiceShortcutInvocationData.__allocating_init(invocationData:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  Swift::String v7 = (char *)&v20 - v6;
  type metadata accessor for InstallVoiceShortcutInvocationData(0LL);
  uint64_t v8 = OUTLINED_FUNCTION_3_3(0xD000000000000010LL, 0x8000000000192990LL);
  uint64_t v10 = v9;
  uint64_t v11 = OUTLINED_FUNCTION_3_3(0xD000000000000012LL, 0x80000000001929B0LL);
  uint64_t v13 = v12;
  uint64_t v14 = OUTLINED_FUNCTION_3_3(0x6D6F436563696F76LL, 0xEF4C5255646E616DLL);
  uint64_t v16 = v15;
  OUTLINED_FUNCTION_1_2();
  if (v16)
  {
    URL.init(string:)(v14, v16);
    swift_bridgeObjectRelease(v16);
  }

  else
  {
    uint64_t v17 = type metadata accessor for URL(0LL);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 1LL, 1LL, v17);
  }

  outlined init with copy of URL?((uint64_t)v7, (uint64_t)v5);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v1 + 112))(v8, v10, v5, v11, v13);
  outlined destroy of URL?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v18;
}

uint64_t type metadata accessor for InstallVoiceShortcutInvocationData(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for InstallVoiceShortcutInvocationData;
  if (!type metadata singleton initialization cache for InstallVoiceShortcutInvocationData) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InstallVoiceShortcutInvocationData);
  }
  return result;
}

uint64_t static InstallVoiceShortcutInvocationData.getDataForKey(key:invocationData:)( uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (!*(void *)(a3 + 16))
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    goto LABEL_8;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }

  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v8, (uint64_t)&v22);
  swift_bridgeObjectRelease(a2);
  if (!*((void *)&v23 + 1))
  {
LABEL_8:
    outlined destroy of URL?((uint64_t)&v22, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }

Swift::String_optional __swiftcall InstallVoiceShortcutInvocationData.getVoiceCommandName()()
{
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

Swift::String_optional __swiftcall InstallVoiceShortcutInvocationData.getVoiceCommandPhrase()()
{
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t InstallVoiceShortcutInvocationData.getVoiceCommandURL()@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?( v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin34InstallVoiceShortcutInvocationData_url,  a1);
}

uint64_t InstallVoiceShortcutInvocationData.deinit()
{
  return v0;
}

uint64_t InstallVoiceShortcutInvocationData.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void protocol witness for CustomStringConvertible.description.getter in conformance InstallVoiceShortcutInvocationData()
{
}

uint64_t ObjC metadata update function for InstallVoiceShortcutInvocationData()
{
  return type metadata accessor for InstallVoiceShortcutInvocationData(0LL);
}

void type metadata completion function for InstallVoiceShortcutInvocationData(uint64_t a1)
{
  v4[0] = &unk_17E8B8;
  v4[1] = &unk_17E8B8;
  type metadata accessor for URL?(319LL);
  if (v3 <= 0x3F)
  {
    __int128 v4[2] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

void type metadata accessor for URL?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for URL?)
  {
    uint64_t v2 = type metadata accessor for URL(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for URL?);
    }
  }

uint64_t outlined destroy of URL?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_2()
{
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_2_3()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_3_3(uint64_t a1, unint64_t a2)
{
  return static InstallVoiceShortcutInvocationData.getDataForKey(key:invocationData:)(a1, a2, v2);
}

  ;
}

uint64_t InstallShortcutCATs.errorInstallShortcut(device:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)InstallShortcutCATs.errorInstallShortcut(device:));
}

uint64_t InstallShortcutCATs.errorInstallShortcut(device:)()
{
  uint64_t v2 = v1[3];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_7_0(v3);
  v1[5] = (uint64_t)v4;
  uint64_t v5 = OUTLINED_FUNCTION_4_3(v4, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SirikitDeviceState(v5);
  }

  else
  {
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  v4[3].n128_u64[0] = v2;
  v4[4].n128_u64[1] = v5;
  OUTLINED_FUNCTION_5_2();
  uint64_t v6 = (uint64_t **)swift_task_alloc(v0);
  v1[6] = (uint64_t)v6;
  *uint64_t v6 = v1;
  v6[1] = (uint64_t *)InstallShortcutCATs.errorInstallShortcut(device:);
  return OUTLINED_FUNCTION_1_3(v1[2], 0xD000000000000024LL, 0x8000000000191B10LL, (uint64_t)v4, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_0_2();
  if (v1) {
    return OUTLINED_FUNCTION_0_0();
  }
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v2 + 8));
}

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t InstallShortcutCATs.launchApp(device:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)InstallShortcutCATs.launchApp(device:));
}

uint64_t InstallShortcutCATs.launchApp(device:)()
{
  uint64_t v2 = v1[3];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_7_0(v3);
  v1[5] = (uint64_t)v4;
  uint64_t v5 = OUTLINED_FUNCTION_4_3(v4, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SirikitDeviceState(v5);
  }

  else
  {
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  v4[3].n128_u64[0] = v2;
  v4[4].n128_u64[1] = v5;
  OUTLINED_FUNCTION_5_2();
  uint64_t v6 = (uint64_t **)swift_task_alloc(v0);
  v1[6] = (uint64_t)v6;
  *uint64_t v6 = v1;
  v6[1] = (uint64_t *)InstallShortcutCATs.launchApp(device:);
  return OUTLINED_FUNCTION_1_3(v1[2], 0xD000000000000019LL, 0x8000000000191B40LL, (uint64_t)v4, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_0_2();
  if (v1) {
    return OUTLINED_FUNCTION_0_0();
  }
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t InstallShortcutCATs.__allocating_init(templateDir:options:globals:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return InstallShortcutCATs.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t InstallShortcutCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of URL?(a1, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  outlined destroy of URL?(a1);
  return v13;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t WorkflowRunnerCATPatternsExecutor.__deallocating_deinit()
{
  uint64_t v0 = CATWrapper.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for InstallShortcutCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for InstallShortcutCATs;
  if (!type metadata singleton initialization cache for InstallShortcutCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InstallShortcutCATs);
  }
  return result;
}

uint64_t type metadata completion function for InstallShortcutCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for InstallShortcutCATs);
}

uint64_t ObjC metadata update function for InstallShortcutCATs()
{
  return type metadata accessor for InstallShortcutCATs(0LL);
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 48);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 56) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_1_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_3_4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_4_3(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x656369766564LL;
  a1[2].n128_u64[1] = 0xE600000000000000LL;
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_6_2(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_7_0(uint64_t a1)
{
  return swift_allocObject(a1, 80LL, 7LL);
}

uint64_t LocationProvider.__allocating_init(aceServiceInvoker:)(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 64LL, 7LL);
  *(void *)(v3 + 16) = 0x3FA999999999999ALL;
  outlined init with take of AceServiceInvokerAsync(a1, v3 + 24);
  return v3;
}

uint64_t LocationProvider.init(aceServiceInvoker:)(__int128 *a1)
{
  *(void *)(v1 + 16) = 0x3FA999999999999ALL;
  outlined init with take of AceServiceInvokerAsync(a1, v1 + 24);
  return v1;
}

uint64_t LocationProvider.getCurrentLocation()()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(LocationProvider.getCurrentLocation(), 0LL, 0LL);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = [objc_allocWithZone(SAGetRequestOrigin) init];
  v0[3] = v2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc SAGetRequestOrigin.desiredAccuracy.setter(v3, v4, v2);
  type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  Class isa = NSNumber.init(integerLiteral:)(300LL).super.super.isa;
  OUTLINED_FUNCTION_3_5((uint64_t)isa, "setMaxAge:");

  uint64_t v6 = [objc_allocWithZone(NSNumber) initWithDouble:0.05];
  OUTLINED_FUNCTION_3_5((uint64_t)v6, "setSearchTimeout:");

  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v7);
  char v9 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
  v0[4] = v9;
  uint64_t v10 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
  *char v9 = v0;
  v9[1] = LocationProvider.getCurrentLocation();
  return AceServiceInvokerAsync.submit<A>(_:)(v2, v7, v10, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  os_log_s *v12;
  os_log_type_t v13;
  BOOL v14;
  void *v15;
  void *v16;
  uint8_t *v17;
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___SASetRequestOrigin);
  uint64_t v3 = swift_dynamicCastObjCClass(v1, v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = *(void **)(v0 + 40);
    uint64_t v6 = *(void **)(v0 + 24);
    uint64_t v7 = objc_allocWithZone(&OBJC_CLASS___SFLatLng);
    uint64_t v8 = v5;
    char v9 = [v7 init];
    [v4 latitude];
    objc_msgSend(v9, "setLat:");
    [v4 longitude];
    objc_msgSend(v9, "setLng:");
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    uint64_t v13 = static os_log_type_t.error.getter();
    os_log_type_t v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void **)(v0 + 40);
    uint64_t v16 = *(void **)(v0 + 24);
    if (v14)
    {
      uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v12, v13, "#LocationProvider could not convert result to SASetRequestOrigin", v17, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v17);
    }

    else
    {
    }

    char v9 = 0LL;
  }

  return OUTLINED_FUNCTION_0_3((uint64_t)v9, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  os_log_s *v7;
  uint8_t *v8;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = *(os_log_s **)(v0 + 24);
  if (v5)
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_0, v3, v4, "#LocationProvider Could not get current location", v8, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
    swift_errorRelease(v6);
  }

  else
  {

    swift_errorRelease(v6);
    uint64_t v7 = v3;
  }

  return OUTLINED_FUNCTION_0_3(0LL, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t LocationProvider.getCurrentLocation()(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 32);
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = LocationProvider.getCurrentLocation();
  }
  else {
    uint64_t v5 = LocationProvider.getCurrentLocation();
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t LocationProvider.deinit()
{
  return v0;
}

uint64_t LocationProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t protocol witness for LocationProviding.getCurrentLocation() in conformance LocationProvider()
{
  uint64_t v2 = *(int **)(**(void **)v0 + 104LL);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for LocationProviding.getCurrentLocation() in conformance LocationProvider;
  return v5();
}

uint64_t protocol witness for LocationProviding.getCurrentLocation() in conformance LocationProvider( uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

void outlined bridged method (mbnn) of @objc SAGetRequestOrigin.desiredAccuracy.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setDesiredAccuracy:v5];
}

uint64_t type metadata accessor for LocationProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin16LocationProvider);
}

uint64_t OUTLINED_FUNCTION_0_3(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

id OUTLINED_FUNCTION_3_5(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t NSDateComponents.toRelativeLocalizedString(locale:)()
{
  uint64_t v31 = type metadata accessor for Date(0LL);
  uint64_t v29 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_35();
  uint64_t v28 = v1 - v0;
  uint64_t v2 = type metadata accessor for DateComponents(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_35();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for Calendar(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_35();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v28 - v16;
  id v18 = [objc_allocWithZone(NSDateFormatter) init];
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  [v18 setLocale:isa];

  [v18 setDateStyle:4];
  static Calendar.current.getter([v18 setDoesRelativeDateFormatting:1]);
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v30);
  Calendar.date(from:)(v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v21 = v31;
  v20(v11, v7);
  outlined init with copy of Date?((uint64_t)v17, (uint64_t)v15);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1LL, v21) == 1)
  {
    outlined destroy of Date?((uint64_t)v17);

    uint64_t v22 = 0LL;
    uint64_t v17 = v15;
  }

  else
  {
    uint64_t v24 = v28;
    uint64_t v23 = v29;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v28, v15, v21);
    Class v25 = Date._bridgeToObjectiveC()().super.isa;
    id v26 = [v18 stringForObjectValue:v25];

    if (v26)
    {
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }

    else
    {

      uint64_t v22 = 0LL;
    }

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v21);
  }

  outlined destroy of Date?((uint64_t)v17);
  return v22;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.toContactQuery()()
{
  uint64_t v1 = ContactQuery.init()();
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 216LL))(v1);
  if (v3) {
    ContactQuery.namePrefix.setter(v2);
  }
  uint64_t v4 = OUTLINED_FUNCTION_0_4(*(uint64_t (**)(void))(*(void *)v0 + 184LL));
  uint64_t v7 = OUTLINED_FUNCTION_0_4(*(uint64_t (**)(void))(*(void *)v0 + 192LL));
  if (v8) {
    ContactQuery.middleName.setter(v7);
  }
  uint64_t v9 = OUTLINED_FUNCTION_0_4(*(uint64_t (**)(void))(*(void *)v0 + 200LL));
  if (v10) {
    ContactQuery.familyName.setter(v9);
  }
  uint64_t v11 = OUTLINED_FUNCTION_0_4(*(uint64_t (**)(void))(*(void *)v0 + 224LL));
  if (v12) {
    ContactQuery.nickname.setter(v11);
  }
  uint64_t result = OUTLINED_FUNCTION_0_4(*(uint64_t (**)(void))(*(void *)v0 + 232LL));
  if (v14) {
    return ContactQuery.nameSuffix.setter(result);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_4@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin8DocumentVG_SaySdGs5NeverOTg504_s18def80Plugin17TfIdfFuzzyMatcherC5match4term2inAA11MatchResultVyxGSgSS_SayxGtFSaySdGAA8H7VXEfU1_AF0lM8ComputerCTf1cn_n( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104LL);
    uint64_t v6 = (void *)(a1 + 40);
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      swift_bridgeObjectRetain(*v6);
      uint64_t v9 = v5(v7, v8);
      swift_bridgeObjectRelease(v8);
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v6 += 2;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = v9;
      --v3;
    }

    while (v3);
    swift_release(a2);
  }

  else
  {
    swift_release(a2);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v49 = a5;
  uint64_t v50 = a8;
  uint64_t v9 = v8;
  uint64_t v57 = a1;
  uint64_t v58 = a2;
  uint64_t v48 = *(void *)(a5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v59 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, *(void *)(v14 + 8));
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = ((uint64_t (*)(void))__chkstk_darwin)();
  id v18 = (char *)&v46 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = swift_getAssociatedTypeWitness(0LL, a6);
  uint64_t v51 = *(void *)(v21 - 8);
  uint64_t v52 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  id v47 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  Class v25 = (char *)&v46 - v24;
  uint64_t v26 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v26) {
    return static Array._allocateUninitialized(_:)(0LL, a4);
  }
  uint64_t v27 = a4;
  Swift::Int v28 = v26;
  uint64_t v63 = ContiguousArray.init()(v27);
  uint64_t v53 = type metadata accessor for ContiguousArray(0LL, v27);
  ContiguousArray.reserveCapacity(_:)(v28);
  uint64_t v55 = a6;
  uint64_t result = dispatch thunk of Collection.startIndex.getter(a3, a6);
  if ((v28 & 0x8000000000000000LL) == 0)
  {
    Swift::Int v30 = v28;
    uint64_t v54 = v20;
    while (v30)
    {
      Swift::Int v60 = v30;
      uint64_t v31 = a3;
      uint64_t v32 = a3;
      uint64_t v33 = v9;
      uint64_t v34 = v55;
      id v35 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v62, v25, v31, v55);
      uint64_t v36 = *(void (**)(char *))(v15 + 16);
      uint64_t v37 = v15;
      uint64_t v38 = AssociatedTypeWitness;
      v36(v18);
      v35(v62, 0LL);
      uint64_t v39 = v25;
      id v40 = v18;
      id v41 = v54;
      uint64_t v42 = v61;
      v57(v40, v59);
      if (v42)
      {
        (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v38);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v52);
        swift_release(v63);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32))(v50, v59, v49);
      }

      uint64_t v61 = 0LL;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v38);
      ContiguousArray.append(_:)(v41, v53);
      uint64_t result = dispatch thunk of Collection.formIndex(after:)(v39, v32, v34);
      Swift::Int v30 = v60 - 1;
      uint64_t v9 = v33;
      a3 = v32;
      uint64_t v15 = v37;
      id v18 = v40;
      Class v25 = v39;
      if (v60 == 1)
      {
        uint64_t v44 = v51;
        uint64_t v43 = v52;
        uint64_t v45 = v47;
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v47, v39, v52);
        _expectEnd<A>(of:is:)(v9, v45, v32, v55);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v43);
        return v63;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void *TfIdfFuzzyMatcher.match(term:in:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(char **)(*v3 + 80);
  v143 = v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v8, &type metadata for Double, "item score ", 0LL);
  uint64_t v9 = __chkstk_darwin(TupleTypeMetadata2);
  v135 = (char *)&v126 - v10;
  uint64_t v140 = *((void *)v8 - 1);
  __chkstk_darwin(v9);
  v139 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v141 = a3;
  v149 = (void *)a3;
  uint64_t v12 = *(void *)(v7 + 88);
  v145 = v8;
  uint64_t v146 = v12;
  uint64_t v136 = v12;
  uint64_t v13 = type metadata accessor for Array(0LL);
  uint64_t v14 = OUTLINED_FUNCTION_16_2((uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF( (void (*)(char *, char *))partial apply for closure #1 in TfIdfFuzzyMatcher.match(term:in:),  (uint64_t)v144,  v13,  (uint64_t)&type metadata for Document,  (uint64_t)&type metadata for Never,  v14,  (uint64_t)&protocol witness table for Never,  v15);
  uint64_t v17 = type metadata accessor for TfIdfComputer();
  OUTLINED_FUNCTION_19(v17, 32LL);
  uint64_t v18 = swift_bridgeObjectRetain(v16);
  uint64_t v130 = TfIdfComputer.init(documents:)(v18);
  uint64_t v134 = a1;
  unint64_t v138 = a2;
  Swift::String v19 = String.lowercased()();
  uint64_t countAndFlagsBits = v19._countAndFlagsBits;
  uint64_t v20 = *(void *)(v16 + 16);
  if (v20)
  {
    uint64_t v21 = (void *)(v16 + 40);
    uint64_t v22 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v24 = *(v21 - 1);
      uint64_t v23 = *v21;
      uint64_t v25 = HIBYTE(*v21) & 0xFLL;
      if ((*v21 & 0x2000000000000000LL) == 0) {
        uint64_t v25 = v24 & 0xFFFFFFFFFFFFLL;
      }
      if (v25)
      {
        swift_bridgeObjectRetain(*v21);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
        v149 = v22;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v22 = v149;
        }

        unint64_t v27 = v22[2];
        if (v27 >= v22[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v22 = v149;
        }

        v22[2] = v27 + 1;
        Swift::Int v28 = &v22[2 * v27];
        v28[4] = v24;
        v28[5] = v23;
      }

      v21 += 2;
      --v20;
    }

    while (v20);
  }

  else
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
  }

  OUTLINED_FUNCTION_14();
  uint64_t v29 = v130;
  swift_retain(v130);
  matched = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin8DocumentVG_SaySdGs5NeverOTg504_s18def80Plugin17TfIdfFuzzyMatcherC5match4term2inAA11MatchResultVyxGSgSS_SayxGtFSaySdGAA8H7VXEfU1_AF0lM8ComputerCTf1cn_n( (uint64_t)v22,  v29);
  swift_release(v22);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v29 + 104LL))(countAndFlagsBits, v19._object);
  swift_bridgeObjectRelease(v19._object);
  uint64_t v32 = 2179072LL;
  uint64_t v33 = (char *)&type metadata for Any;
  if ((Array<A>.isNullVector.getter(v31) & 1) != 0)
  {
    swift_bridgeObjectRelease(v31);
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_20_3();
    if (!v34) {
      goto LABEL_68;
    }
    goto LABEL_17;
  }

  uint64_t v128 = 0LL;
  uint64_t v43 = *(void *)(v31 + 16);
  uint64_t v134 = v31;
  if (v43)
  {
    uint64_t v44 = (double *)(v31 + 32);
    double v45 = 0.0;
    uint64_t v46 = v136;
    uint64_t v47 = v141;
    do
    {
      double v48 = *v44++;
      double v45 = v45 + v48 * v48;
      --v43;
    }

    while (v43);
  }

  else
  {
    double v45 = 0.0;
    uint64_t v46 = v136;
    uint64_t v47 = v141;
  }

  uint64_t v49 = static Array._allocateUninitialized(_:)(0LL, TupleTypeMetadata2);
  v149 = (void *)v49;
  uint64_t countAndFlagsBits = matched[2];
  if (countAndFlagsBits)
  {
    uint64_t v51 = 0LL;
    unint64_t v52 = *(void *)(v134 + 16);
    v127 = matched;
    uint64_t v53 = matched + 4;
    uint64_t v54 = v134;
    v133 = (double *)(v134 + 32);
    *(void *)&__int128 v50 = 134218242LL;
    __int128 v132 = v50;
    v131 = (char *)&type metadata for Any + 8;
    double v55 = sqrt(v45);
    uint64_t v33 = v143;
    unint64_t v138 = (unint64_t)v53;
    while (1)
    {
      uint64_t v56 = v53[v51];
      if (v52 != *(void *)(v56 + 16))
      {
        OUTLINED_FUNCTION_20_3();
        if (!v34) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v64 = OUTLINED_FUNCTION_48();
        uint64_t v65 = __swift_project_value_buffer(v64, (uint64_t)static Logger.voiceCommands);
        v66 = (os_log_s *)Logger.logObject.getter(v65);
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          v68 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
          *(_WORD *)v68 = 0;
          _os_log_impl( &dword_0,  v66,  v67,  "[TfIdfFuzzyMatcher] mismatched vector sizes - this should not have happened. Please file a bug.",  v68,  2u);
          uint64_t v69 = (uint64_t)v68;
          uint64_t v47 = v141;
          OUTLINED_FUNCTION_1_0(v69);
        }

        goto LABEL_49;
      }

      unint64_t v57 = *(void *)(v54 + 16);
      if (v57) {
        break;
      }
      double v59 = 0.0;
      double v70 = 0.0;
      if (v52) {
        goto LABEL_40;
      }
LABEL_42:
      OUTLINED_FUNCTION_20_3();
      if (!v34) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      double v74 = v59 / (v55 * sqrt(v70));
      uint64_t v75 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v75, (uint64_t)static Logger.voiceCommands);
      uint64_t v76 = swift_bridgeObjectRetain_n(v47, 2LL);
      v77 = (os_log_s *)Logger.logObject.getter(v76);
      os_log_type_t v78 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = OUTLINED_FUNCTION_38(22LL);
        uint64_t v80 = v32;
        uint64_t v81 = OUTLINED_FUNCTION_38(32LL);
        v147 = (void *)v81;
        *(_DWORD *)uint64_t v79 = v132;
        *(double *)(v79 + 4) = v74;
        *(_WORD *)(v79 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
        v82 = v139;
        Array.subscript.getter(v51, v47, v143);
        uint64_t v83 = (*(uint64_t (**)(char *))(v136 + 32))(v143);
        unint64_t v85 = v84;
        (*(void (**)(char *, char *))(v140 + 8))(v82, v143);
        uint64_t v86 = v83;
        uint64_t v53 = (void *)v138;
        *(void *)(v79 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v85, (uint64_t *)&v147);
        OUTLINED_FUNCTION_19_1(v141);
        unint64_t v87 = v85;
        uint64_t v47 = v141;
        swift_bridgeObjectRelease(v87);
        _os_log_impl(&dword_0, v77, v78, "[TfIdfFuzzyMatcher] score: %f, title: %s", (uint8_t *)v79, 0x16u);
        swift_arrayDestroy(v81, 1LL, v131);
        uint64_t v88 = v81;
        uint64_t v32 = v80;
        uint64_t v54 = v134;
        OUTLINED_FUNCTION_1_0(v88);
        uint64_t v89 = v79;
        uint64_t v33 = v143;
        OUTLINED_FUNCTION_1_0(v89);
      }

      else
      {

        OUTLINED_FUNCTION_19_1(v47);
      }

      if (v74 > 0.15)
      {
        v90 = v139;
        Array.subscript.getter(v51, v47, v33);
        uint64_t v91 = *(int *)(TupleTypeMetadata2 + 48);
        v92 = v135;
        v93 = v90;
        uint64_t v53 = (void *)v138;
        (*(void (**)(char *, char *, char *))(v140 + 32))(v135, v93, v33);
        *(double *)&v92[v91] = v74;
        uint64_t v94 = type metadata accessor for Array(0LL);
        Array.append(_:)(v92, v94);
      }

LABEL_49:
      if (++v51 == countAndFlagsBits)
      {
        OUTLINED_FUNCTION_14();
        uint64_t v95 = swift_bridgeObjectRelease(v127);
        uint64_t v96 = (uint64_t)v149;
        uint64_t v46 = v136;
        goto LABEL_52;
      }
    }

    if (!v52)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
LABEL_17:
      uint64_t v35 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.voiceCommands);
      unint64_t v36 = v138;
      uint64_t v37 = swift_bridgeObjectRetain_n(v138, 2LL);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v39 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v38, v39))
      {
        id v40 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
        uint64_t v41 = OUTLINED_FUNCTION_38(32LL);
        v149 = (void *)v41;
        *(_DWORD *)id v40 = 136315138;
        swift_bridgeObjectRetain(v36);
        v147 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v36, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148, v40 + 4);
        swift_bridgeObjectRelease_n(v36, 3LL);
        _os_log_impl(&dword_0, v38, v39, "[TfIdfFuzzyMatcher] query %s produced a null vector", v40, 0xCu);
        swift_arrayDestroy(v41, 1LL, v33 + 8);
        OUTLINED_FUNCTION_1_0(v41);
        uint64_t v42 = (uint64_t)v40;
        goto LABEL_60;
      }

      OUTLINED_FUNCTION_11_3();
      OUTLINED_FUNCTION_19_1(v36);
      return 0LL;
    }

    if (v57 > v52) {
      goto LABEL_67;
    }
    uint64_t v58 = (double *)(v56 + 32);
    double v59 = 0.0;
    Swift::Int v60 = v133;
    do
    {
      double v61 = *v60++;
      double v62 = v61;
      double v63 = *v58++;
      double v59 = v59 + v62 * v63;
      --v57;
    }

    while (v57);
LABEL_40:
    v71 = (double *)(v56 + 32);
    double v70 = 0.0;
    unint64_t v72 = v52;
    do
    {
      double v73 = *v71++;
      double v70 = v70 + v73 * v73;
      --v72;
    }

    while (v72);
    goto LABEL_42;
  }

  uint64_t v96 = v49;
  swift_bridgeObjectRelease(v134);
  uint64_t v95 = OUTLINED_FUNCTION_14();
  uint64_t v33 = v143;
LABEL_52:
  v147 = (void *)v96;
  __chkstk_darwin(v95);
  *(&v126 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = (uint64_t)v33;
  *(&v126 - 1) = v46;
  uint64_t v97 = type metadata accessor for Array(0LL);
  swift_bridgeObjectRetain(v96);
  uint64_t v98 = OUTLINED_FUNCTION_16_2((uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v100 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF( (void (*)(char *, char *))partial apply for closure #4 in TfIdfFuzzyMatcher.match(term:in:),  (uint64_t)(&v126 - 4),  v97,  (uint64_t)&type metadata for Double,  (uint64_t)&type metadata for Never,  v98,  (uint64_t)&protocol witness table for Never,  v99);
  OUTLINED_FUNCTION_18_1();
  uint64_t v101 = specialized Sequence<>.max()(v100);
  char v103 = v102;
  uint64_t v104 = swift_bridgeObjectRelease(v100);
  if ((v103 & 1) != 0)
  {
    swift_bridgeObjectRelease(v149);
    OUTLINED_FUNCTION_20_3();
    if (!v34) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v116 = OUTLINED_FUNCTION_48();
    uint64_t v117 = __swift_project_value_buffer(v116, (uint64_t)static Logger.voiceCommands);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v117);
    os_log_type_t v118 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v118))
    {
      v119 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)v119 = 0;
      _os_log_impl(&dword_0, v38, v118, "[TfIdfFuzzyMatcher] empty results after running matcher", v119, 2u);
      uint64_t v42 = (uint64_t)v119;
LABEL_60:
      OUTLINED_FUNCTION_1_0(v42);
    }

    OUTLINED_FUNCTION_11_3();
    return 0LL;
  }

  else
  {
    uint64_t v105 = (uint64_t)v149;
    if ((v101 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      OUTLINED_FUNCTION_11_3();
      uint64_t v115 = v105;
      goto LABEL_63;
    }

    v147 = v149;
    __chkstk_darwin(v104);
    *(&v126 - 4) = (uint64_t)v33;
    *(&v126 - 3) = v46;
    *(&v126 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v101;
    swift_bridgeObjectRetain(v105);
    uint64_t v107 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF( (void (*)(char *, char *))partial apply for closure #5 in TfIdfFuzzyMatcher.match(term:in:),  (uint64_t)(&v126 - 6),  v97,  TupleTypeMetadata2,  (uint64_t)&type metadata for Never,  v98,  (uint64_t)&protocol witness table for Never,  v106);
    OUTLINED_FUNCTION_18_1();
    v147 = (void *)v107;
    uint64_t v108 = OUTLINED_FUNCTION_16_2((uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v109 = _ArrayProtocol.filter(_:)(partial apply for closure #6 in TfIdfFuzzyMatcher.match(term:in:), v129, v97, v108);
    uint64_t v110 = swift_bridgeObjectRelease(v149);
    v149 = (void *)v109;
    v147 = (void *)v109;
    __chkstk_darwin(v110);
    *(&v126 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = (uint64_t)v33;
    *(&v126 - 1) = v46;
    swift_bridgeObjectRetain(v109);
    uint64_t v111 = OUTLINED_FUNCTION_16_2((uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v112 = Sequence.sorted(by:)(partial apply for closure #7 in TfIdfFuzzyMatcher.match(term:in:), &v126 - 4, v97, v111);
    OUTLINED_FUNCTION_18_1();
    v147 = (void *)v112;
    uint64_t v113 = Collection.isEmpty.getter(v97, v98);
    if ((v113 & 1) != 0)
    {
      uint64_t v114 = (uint64_t)v149;
      swift_bridgeObjectRelease(v112);
      OUTLINED_FUNCTION_11_3();
      uint64_t v115 = v114;
LABEL_63:
      swift_bridgeObjectRelease(v115);
      return 0LL;
    }

    v147 = (void *)v112;
    __chkstk_darwin(v113);
    *(&v126 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = (uint64_t)v33;
    *(&v126 - 1) = v46;
    uint64_t KeyPath = swift_getKeyPath(&unk_17E9A0);
    uint64_t v122 = __chkstk_darwin(KeyPath);
    *(&v126 - __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v46;
    *(&v126 - 1) = v122;
    uint64_t v124 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF( (void (*)(char *, char *))partial apply for implicit closure #4 in TfIdfFuzzyMatcher.match(term:in:),  (uint64_t)(&v126 - 4),  v97,  (uint64_t)v33,  (uint64_t)&type metadata for Never,  v98,  (uint64_t)&protocol witness table for Never,  v123);
    OUTLINED_FUNCTION_11_3();
    uint64_t v125 = (uint64_t)v149;
    swift_bridgeObjectRelease(v112);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v125);
    return CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)v124).items._rawValue;
  }

uint64_t closure #1 in TfIdfFuzzyMatcher.match(term:in:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, Swift::String *a3@<X8>)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 8))(v7, a1, a2);
  uint64_t v4 = v7[1];
  outlined init with take of String?( (uint64_t)&v8,  (uint64_t)v11,  (uint64_t *)&demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)v11);
  outlined init with take of String?( (uint64_t)v9,  (uint64_t)&v12,  &demangling cache variable for type metadata for INImage?);
  outlined release of INImage?(&v12);
  uint64_t v10 = v9[1];
  outlined release of [String](&v10);
  Swift::String v5 = String.lowercased()();
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a3 = v5;
  return result;
}

uint64_t closure #4 in TfIdfFuzzyMatcher.match(term:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, a2, &type metadata for Double, "item score ", 0LL);
  uint64_t v7 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v9 = (char *)v14 - v8;
  uint64_t v10 = *(int *)(v7 + 48);
  uint64_t v11 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v14 - v8, a1, a2);
  uint64_t v12 = *(void *)(a1 + v10);
  *(void *)&v9[v10] = v12;
  *a3 = v12;
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, a2);
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }

    while (v3);
  }

  return *(void *)&v2;
}

double closure #5 in TfIdfFuzzyMatcher.match(term:in:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, a2, &type metadata for Double, "item score ", 0LL);
  uint64_t v9 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = *(int *)(v9 + 48);
  uint64_t v13 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v16 - v10, a1, a2);
  double v14 = *(double *)(a1 + v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v11, a2);
  double result = v14 / a4;
  *(double *)(a3 + v1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v14 / a4;
  return result;
}

BOOL closure #6 in TfIdfFuzzyMatcher.match(term:in:)(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1
                   + *(int *)(swift_getTupleTypeMetadata2( 0LL,  *(void *)(*(void *)a2 + 80LL),  &type metadata for Double,  "item score ",  0LL)
                            + 48)) > 0.75;
}

BOOL closure #7 in TfIdfFuzzyMatcher.match(term:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, a3, &type metadata for Double, "item score ", 0LL);
  return *(double *)(a2 + *(int *)(TupleTypeMetadata2 + 48)) < *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t implicit closure #4 in TfIdfFuzzyMatcher.match(term:in:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = a3;
  double v5 = (uint64_t *)(*a2 + class metadata base offset for KeyPath);
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(*v5 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = *(int *)(v6 + 48);
  uint64_t v15 = *(void *)(v14 + 8);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v20 - v11, a1, v15);
  uint64_t v17 = *(void *)(a1 + v13);
  *(void *)&v12[v13] = v17;
  uint64_t v18 = *(int *)(v6 + 48);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v10, v12, v15);
  *(void *)&v10[v18] = v17;
  swift_getAtKeyPath(v10, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t IntroduceCustomIntentCatTemplater.deinit()
{
  return v0;
}

uint64_t TfIdfFuzzyMatcher.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

double TfIdfFuzzyMatcher.__allocating_init()()
{
  uint64_t v1 = OUTLINED_FUNCTION_19(v0, 32LL);
  double result = 0.15;
  *(_OWORD *)(v1 + 16) = xmmword_17E990;
  return result;
}

double TfIdfFuzzyMatcher.init()()
{
  double result = 0.15;
  *(_OWORD *)(v0 + 16) = xmmword_17E990;
  return result;
}

uint64_t protocol witness for StringMatching.match(term:in:) in conformance TfIdfFuzzyMatcher<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

uint64_t partial apply for closure #1 in TfIdfFuzzyMatcher.match(term:in:)@<X0>(Swift::String *a1@<X8>)
{
  return closure #1 in TfIdfFuzzyMatcher.match(term:in:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)( uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  double v5 = a4();
  uint64_t v6 = *a1;
  uint64_t v7 = *a1 + 8;
  double v9 = v5;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v6);
  *a1 = v7;
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  void *v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  void *v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  void *v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  void *v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  void *v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  void *v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  void *v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  void *v0 = v1;
}

uint64_t partial apply for closure #4 in TfIdfFuzzyMatcher.match(term:in:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #4 in TfIdfFuzzyMatcher.match(term:in:)(a1, *(void *)(v2 + 16), a2);
}

double partial apply for closure #5 in TfIdfFuzzyMatcher.match(term:in:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #5 in TfIdfFuzzyMatcher.match(term:in:)(a1, *(void *)(v2 + 16), a2, *(double *)(v2 + 32));
}

BOOL partial apply for closure #6 in TfIdfFuzzyMatcher.match(term:in:)(uint64_t a1)
{
  return closure #6 in TfIdfFuzzyMatcher.match(term:in:)(a1, v1);
}

BOOL partial apply for closure #7 in TfIdfFuzzyMatcher.match(term:in:)(uint64_t a1, uint64_t a2)
{
  return closure #7 in TfIdfFuzzyMatcher.match(term:in:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t partial apply for implicit closure #4 in TfIdfFuzzyMatcher.match(term:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return implicit closure #4 in TfIdfFuzzyMatcher.match(term:in:)(a1, *(void **)(v2 + 24), a2);
}

uint64_t associated type witness table accessor for StringMatching.ItemType : DisambiguationItemProtocol in TfIdfFuzzyMatcher<A>( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t type metadata completion function for TfIdfFuzzyMatcher(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[1] = (char *)&value witness table for Builtin.Int64 + 64;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 96);
}

uint64_t type metadata accessor for TfIdfFuzzyMatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TfIdfFuzzyMatcher);
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>,  (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct,  (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:),  (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>,  (uint64_t (*)(void))&type metadata accessor for DisplayHint,  (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:),  (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<SpeakableString>,  (uint64_t (*)(void))&type metadata accessor for SpeakableString,  (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:),  (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

void *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( void *a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( char *a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  OUTLINED_FUNCTION_1_4();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_14_2();
      if (v7)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  OUTLINED_FUNCTION_6_3();
  if (v5)
  {
    uint64_t v14 = OUTLINED_FUNCTION_9_2(v9, v10, v11, v12, v13);
    uint64_t v15 = (void *)OUTLINED_FUNCTION_19(v14, 16 * v5 + 32);
    uint64_t v16 = _swift_stdlib_malloc_size(v15);
    void v15[2] = v4;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 16);
  }

  uint64_t v17 = OUTLINED_FUNCTION_4_4();
  if ((v3 & 1) != 0)
  {
    v2(v17);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v17);
  }

  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_38_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  OUTLINED_FUNCTION_1_4();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_14_2();
      if (v7)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  OUTLINED_FUNCTION_6_3();
  if (v5)
  {
    uint64_t v14 = OUTLINED_FUNCTION_9_2(v9, v10, v11, v12, v13);
    uint64_t v15 = (void *)OUTLINED_FUNCTION_19(v14, 8 * v5 + 32);
    uint64_t v16 = _swift_stdlib_malloc_size(v15);
    void v15[2] = v4;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 8);
  }

  uint64_t v17 = OUTLINED_FUNCTION_4_4();
  if ((v3 & 1) != 0)
  {
    v2(v17);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v17);
  }

  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_38_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  OUTLINED_FUNCTION_1_4();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_14_2();
      if (v6)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  OUTLINED_FUNCTION_6_3();
  if (v4)
  {
    uint64_t v13 = OUTLINED_FUNCTION_9_2(v8, v9, v10, v11, v12);
    uint64_t v14 = (void *)OUTLINED_FUNCTION_19(v13, 56 * v4 + 32);
    OUTLINED_FUNCTION_17_2(v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_4_4();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v15);
  }

  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_8_2();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  OUTLINED_FUNCTION_1_4();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_14_2();
      if (v6)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  OUTLINED_FUNCTION_6_3();
  if (v4)
  {
    uint64_t v13 = OUTLINED_FUNCTION_9_2(v8, v9, v10, v11, v12);
    uint64_t v14 = (void *)OUTLINED_FUNCTION_19(v13, 24 * v4 + 32);
    OUTLINED_FUNCTION_17_2(v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_4_4();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v15);
  }

  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_8_2();
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DisambiguationItemProtocol>);
    uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v8, v13);
  }

  swift_release();
  return v11;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(uint64_t, uint64_t, char *), void (*a8)(uint64_t, uint64_t, char *))
{
  char v12 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_14_2();
      if (v14)
      {
LABEL_24:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  else
  {
    uint64_t v13 = a2;
  }

  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v18 = OUTLINED_FUNCTION_9_2(a1, a2, a3, a4, a5);
  uint64_t v19 = *(void *)(a6(0LL) - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  uint64_t v23 = (void *)swift_allocObject(v18, v22 + v20 * v17, v21 | 7);
  size_t v24 = _swift_stdlib_malloc_size(v23);
  if (!v20)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v24 - v22 == 0x8000000000000000LL && v20 == -1) {
    goto LABEL_23;
  }
  v23[2] = v16;
  v23[3] = 2 * ((uint64_t)(v24 - v22) / v20);
LABEL_18:
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(a6(0LL) - 8) + 80LL);
  uint64_t v27 = (v26 + 32) & ~v26;
  Swift::Int v28 = (char *)v23 + v27;
  uint64_t v29 = a4 + v27;
  if ((v12 & 1) != 0)
  {
    a7(v29, v16, v28);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    a8(v29, v16, v28);
  }

  OUTLINED_FUNCTION_34_0();
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CustomIntentDisambiguationItem>);
    uint64_t v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)();
  }

  swift_release();
  return v11;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 32);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)();
  }

  swift_release();
  return v11;
}

uint64_t outlined release of String?(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

id *outlined release of INImage?(id *a1)
{
  return a1;
}

void *outlined release of [String](void *a1)
{
  return a1;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return v0 + 32;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_9_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return __swift_instantiateConcreteTypeFromMangledName(a5);
}

uint64_t OUTLINED_FUNCTION_11_3()
{
  return swift_release(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_16_2(uint64_t a1)
{
  return swift_getWitnessTable(a1, v1);
}

size_t OUTLINED_FUNCTION_17_2(void *a1)
{
  size_t result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t OUTLINED_FUNCTION_18_1()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 152));
}

uint64_t OUTLINED_FUNCTION_19_1(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

  ;
}

uint64_t LNValueType.executeCommonVoiceCommandTaskBuilder.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(v0);
  if (v6)
  {
    if (v6 != 1) {
      __asm { BR              X9 }
    }

    OUTLINED_FUNCTION_0_5();
    uint64_t v7 = OUTLINED_FUNCTION_3_7();
    static UsoTaskBuilder_execute_common_VoiceCommand.unitTaskBuilder(value:symbol:unitName:)(v7, v8, v9, v10, 0LL, 0LL);
  }

  else
  {
    outlined consume of VoiceCommandIntentValueType((uint64_t)v4, v5, 0);
    OUTLINED_FUNCTION_0_5();
    uint64_t v12 = OUTLINED_FUNCTION_2_5();
    static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)(v12, v13);
  }

  uint64_t v14 = v11;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject(v15, 40LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_17E150;
  *(void *)(v16 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v14;
  uint64_t v33 = v16;
  specialized Array._endMutation()(v16, v17, v18);
  uint64_t v19 = v33;
  uint64_t v20 = type metadata accessor for UsoBuilderOptions(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1LL, 1LL, v20);
  swift_retain(v14);
  uint64_t v21 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)(v19, v3);
  swift_bridgeObjectRelease(v19);
  outlined destroy of UsoBuilderOptions?((uint64_t)v3);
  uint64_t v22 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)(v21, 0LL);
  unint64_t v24 = v23;
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
  uint64_t v26 = swift_bridgeObjectRetain(v24);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v30 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v33 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    swift_bridgeObjectRetain(v24);
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v29 + 4);
    swift_bridgeObjectRelease_n(v24, 3LL);
    _os_log_impl(&dword_0, v27, v28, "Building nlv4 prompt:\n%s", v29, 0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v30);
    OUTLINED_FUNCTION_1_0((uint64_t)v29);
  }

  else
  {

    swift_bridgeObjectRelease_n(v24, 2LL);
  }

  return v14;
}

uint64_t outlined destroy of UsoBuilderOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t outlined consume of VoiceCommandIntentValueType(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  return type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand(0LL);
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_3_7()
{
  return 0LL;
}

id AutoShortcutProvider.provider.getter()
{
  return *(id *)(v0 + 16);
}

id ShortcutDoneButton.customIntentResponse.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.appBundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

id WFChooseFromListDisambiguationItem.item.getter()
{
  return *(id *)(v0 + 48);
}

void CustomIntentStateAttachment.customIntentResponse.getter()
{
  id v1 = *(id *)(v0 + 56);
  OUTLINED_FUNCTION_1();
}

void ShortcutsLinkPromptForValueFlowStrategy.valueType.getter()
{
  id v1 = *(id *)(v0 + 64);
  OUTLINED_FUNCTION_1();
}

void ShortcutsLinkPromptForValueFlowStrategy.deviceState.getter(uint64_t a1@<X8>)
{
}

void ShortcutsLinkPromptForValueFlowStrategy.serviceInvoker.getter(uint64_t a1@<X8>)
{
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.__allocating_init(action:needsValueRequest:appBundleId:actionMetadata:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:serviceInvoker:)( void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v18 = OUTLINED_FUNCTION_19(v9, 160LL);
  ShortcutsLinkPromptForValueFlowStrategy.init(action:needsValueRequest:appBundleId:actionMetadata:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:serviceInvoker:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
  return v18;
}

void *ShortcutsLinkPromptForValueFlowStrategy.init(action:needsValueRequest:appBundleId:actionMetadata:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:serviceInvoker:)( void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v10 = v9;
  uint64_t v31 = a7;
  uint64_t v32 = a8;
  uint64_t v17 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = a5;
  id v20 = a1;
  id v21 = a2;
  id v22 = a5;
  id v23 = LNActionMetadata.firstParameterMetadata(from:)(v21);
  v10[7] = v23;
  if (v23) {
    id v23 = [v23 valueType];
  }
  v10[8] = v23;
  outlined init with copy of AppShortcutInvoking((uint64_t)a6, (uint64_t)(v10 + 9));
  outlined init with copy of AppShortcutInvoking((uint64_t)a9, (uint64_t)(v10 + 14));
  outlined init with copy of AppShortcutInvoking((uint64_t)a6, (uint64_t)v33);
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v24 = OUTLINED_FUNCTION_51_2();
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v25 = CATWrapperSimple.__allocating_init(options:globals:)(v19, 0LL);
  type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v26 = OUTLINED_FUNCTION_51_2();

  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  uint64_t v27 = type metadata accessor for LinkActionDialogTemplating();
  os_log_type_t v28 = (void *)OUTLINED_FUNCTION_19(v27, 128LL);
  v10[19] = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( v33,  v31,  v32,  v24,  v25,  v26,  v28);
  return v10;
}

void ShortcutsLinkPromptForValueFlowStrategy.actionForInput(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Parse(0LL);
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v28 - v8;
  uint64_t v10 = type metadata accessor for Input(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v14 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v32 = a1;
  uint64_t v16 = v15(v13, a1, v10);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v30 = v7;
  if (v19)
  {
    id v20 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v21 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v29 = v4;
    uint64_t v22 = v21;
    uint64_t v34 = v21;
    v28[1] = a2;
    *(_DWORD *)id v20 = 136315138;
    v28[0] = v20 + 4;
    uint64_t v23 = Input.description.getter();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v28[0]);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_35_3((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
    OUTLINED_FUNCTION_31_2(&dword_0, v17, v18, "#ShortcutsLinkPromptForValueFlowStrategy actionForInput: %s", v20);
    OUTLINED_FUNCTION_30_3(v22, v25, (uint64_t)&type metadata for Any + 8);
    uint64_t v26 = v22;
    uint64_t v4 = v29;
    OUTLINED_FUNCTION_1_0(v26);
    OUTLINED_FUNCTION_1_0((uint64_t)v20);
  }

  else
  {
    OUTLINED_FUNCTION_35_3((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  }

  Input.parse.getter();
  char v27 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)((uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v4);
  __asm { BR              X10 }

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:)(uint64_t a1)
{
  void v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for USOParse(0LL);
  v2[11] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[12] = v4;
  v2[13] = OUTLINED_FUNCTION_9_0(v4);
  uint64_t v5 = type metadata accessor for NLIntent(0LL);
  v2[14] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[15] = v6;
  v2[16] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = type metadata accessor for Parse(0LL);
  v2[17] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[18] = v8;
  v2[19] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = type metadata accessor for Input(0LL);
  v2[20] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[21] = v10;
  v2[22] = OUTLINED_FUNCTION_9_0(v10);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  a22 = v24;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v27 = v24[9];
  uint64_t v29 = v24[21];
  uint64_t v28 = v24[22];
  uint64_t v30 = v24[20];
  uint64_t v31 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.voiceCommands);
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v27, v30);
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v37 = v24[21];
  uint64_t v36 = v24[22];
  uint64_t v38 = v24[20];
  if (v35)
  {
    os_log_type_t v39 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v52 = OUTLINED_FUNCTION_38(32LL);
    a13 = v52;
    *(_DWORD *)os_log_type_t v39 = 136315138;
    unint64_t v40 = lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v38, v40);
    unint64_t v43 = v42;
    v24[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 8, v24 + 9, v39 + 4);
    swift_bridgeObjectRelease(v43);
    OUTLINED_FUNCTION_35_3(v36, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
    OUTLINED_FUNCTION_31_2( &dword_0,  v33,  v34,  "#ShortcutsLinkPromptForValueFlowStrategy parseValueResponse from: %s",  v39);
    OUTLINED_FUNCTION_30_3(v52, v44, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v52);
    OUTLINED_FUNCTION_1_0((uint64_t)v39);
  }

  else
  {
    OUTLINED_FUNCTION_35_3(v24[22], *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
  }

  id v45 = [*(id *)(v24[10] + 48) systemProtocols];
  unint64_t v46 = type metadata accessor for LNSystemProtocol();
  v24[23] = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v46);

  uint64_t v47 = (void *)swift_task_alloc(dword_2157DC);
  v24[24] = v47;
  *uint64_t v47 = v24;
  v47[1] = ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:);
  OUTLINED_FUNCTION_50_3();
  OUTLINED_FUNCTION_34_3();
  return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v48, v49, v50);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:)()
{
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t **v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v6 = v1 + 19;
  uint64_t v5 = v1[19];
  OUTLINED_FUNCTION_46_3();
  Input.parse.getter();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v5, v0);
  if (v7 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v8 = v1[19];
    uint64_t v9 = v1[16];
    uint64_t v10 = v1[14];
    uint64_t v11 = v1[15];
    (*(void (**)(uint64_t, uint64_t))(v1[18] + 96))(v8, v1[17]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v9, v8, v10);
    uint64_t v12 = (uint64_t **)swift_task_alloc(dword_2150FC);
    v1[25] = (uint64_t)v12;
    *uint64_t v12 = v1;
    v12[1] = (uint64_t *)ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:);
    return ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:)(v1[16]);
  }

  else if (v7 == enum case for Parse.uso(_:) {
         && (uint64_t v6 = v1 + 13,
  }
             uint64_t v14 = v1[19],
             OUTLINED_FUNCTION_46_3(),
             (*(void (**)(uint64_t))(v15 + 96))(v14),
             uint64_t v16 = OUTLINED_FUNCTION_50_3(),
             v17(v16),
             (SiriLinkFlowFeatureFlags.isEnabled.getter(0LL) & 1) != 0))
  {
    os_log_type_t v18 = (uint64_t **)swift_task_alloc(dword_2150F4);
    v1[27] = (uint64_t)v18;
    *os_log_type_t v18 = v1;
    v18[1] = (uint64_t *)ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:);
    return ShortcutsLinkPromptForValueFlowStrategy.parse(usoParse:)(v1[13]);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)v2 + 8LL))(*v6, *v3);
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    BOOL v19 = OUTLINED_FUNCTION_22_3();
    return OUTLINED_FUNCTION_25_3(v19, v20);
  }

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_50_0();
  v3[2] = v1;
  void v3[3] = v2;
  v3[4] = v0;
  uint64_t v4 = v3[25];
  *uint64_t v5 = *v1;
  v3[26] = v0;
  swift_task_dealloc(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_14_3(*(void *)(v0 + 120));
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v1 = OUTLINED_FUNCTION_23_2();
  return OUTLINED_FUNCTION_0_3(v1, v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_50_0();
  v3[5] = v1;
  v3[6] = v2;
  v3[7] = v0;
  uint64_t v4 = v3[27];
  *uint64_t v5 = *v1;
  v3[28] = v0;
  swift_task_dealloc(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_14_3(*(void *)(v0 + 96));
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = OUTLINED_FUNCTION_23_2();
  return OUTLINED_FUNCTION_0_3(v1, v2);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_14_3(*(void *)(v0 + 120));
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_14_3(*(void *)(v0 + 96));
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Locale(0LL);
  void v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for VoiceCommandsNLIntent(0LL);
  _BYTE v2[8] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v3 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 56LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 64LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 40LL);
  uint64_t v7 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 104LL) = a1;
  OUTLINED_FUNCTION_54_0(v2);
  swift_release(v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  outlined destroy of VoiceCommandsNLIntent(v4);
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v8, v9, v10);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:)()
{
  uint64_t v3 = (void *)v2[4];
  uint64_t v4 = (void *)v3[8];
  void v2[9] = v4;
  if (v4)
  {
    uint64_t v5 = (void *)v3[7];
    v2[10] = v5;
    if (v5)
    {
      uint64_t v6 = v2[8];
      uint64_t v7 = v2[3];
      uint64_t v8 = type metadata accessor for NLIntent(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
      uint64_t v9 = v3 + 9;
      uint64_t v10 = v3[12];
      uint64_t v11 = v3[13];
      __swift_project_boxed_opaque_existential_1(v9, v10);
      id v12 = v4;
      id v13 = v5;
      dispatch thunk of DeviceState.siriLocale.getter(v10, v11);
      uint64_t v14 = type metadata accessor for ContactResolver(0LL);
      OUTLINED_FUNCTION_51(v14);
      uint64_t v15 = ContactResolver.init()();
      v2[11] = v15;
      uint64_t v16 = (void *)swift_task_alloc(unk_2173B4);
      v2[12] = v16;
      *uint64_t v16 = v2;
      v16[1] = ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:);
      return ((uint64_t (*)(void, id, uint64_t, void, id))v33)(v2[8], v13, v15, v2[7], v12);
    }

    uint64_t v0 = (void *)one-time initialization token for voiceCommands;
    id v23 = v4;
    uint64_t v24 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v24, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v25 = OUTLINED_FUNCTION_58();
    BOOL v26 = OUTLINED_FUNCTION_45_0(v25);
    uint64_t v27 = (void *)v2[9];
    if (v26)
    {
      uint64_t v28 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v28);
      OUTLINED_FUNCTION_27_0( &dword_0,  v29,  v30,  "#ShortcutsLinkPromptForValueFlowStrategy cannot get LNValue from NLIntent");
      OUTLINED_FUNCTION_1_0(v1);
    }

    else
    {

      uint64_t v0 = v27;
    }
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v18 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v18, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v19 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v19))
    {
      id v20 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v20);
      OUTLINED_FUNCTION_27_0( &dword_0,  v21,  v22,  "#ShortcutsLinkPromptForFlowStrategy parseValueResponse has nil valueType");
      OUTLINED_FUNCTION_1_0(v1);
    }
  }

  swift_task_dealloc(v2[8]);
  OUTLINED_FUNCTION_40_0();
  uint64_t v31 = OUTLINED_FUNCTION_22_3();
  return OUTLINED_FUNCTION_25_3(v31, v32);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v27;
  a24 = v28;
  a22 = v26;
  uint64_t v29 = *(void **)(v26 + 104);
  if (v29)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v30 = OUTLINED_FUNCTION_48();
    uint64_t v31 = (os_log_s *)__swift_project_value_buffer(v30, (uint64_t)static Logger.voiceCommands);
    id v32 = v29;
    Logger.logObject.getter(v32);
    os_log_type_t v33 = OUTLINED_FUNCTION_58();
    BOOL v34 = os_log_type_enabled(v31, v33);
    BOOL v35 = *(void **)(v26 + 72);
    uint64_t v36 = *(void **)(v26 + 80);
    if (v34)
    {
      a10 = v26 + 16;
      a12 = *(void **)(v26 + 72);
      uint64_t v37 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      a11 = v36;
      uint64_t v38 = OUTLINED_FUNCTION_38(32LL);
      a13 = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      a9 = v37 + 4;
      id v39 = [v32 debugDescription];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v42 = v41;

      *(void *)(v26 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v26 + 16, v26 + 24, v37 + 4);
      swift_bridgeObjectRelease(v42);

      OUTLINED_FUNCTION_31_2(&dword_0, v31, v33, "#ShortcutsLinkPromptForFlowStrategy parsed value: %s", v37);
      OUTLINED_FUNCTION_30_3(v38, v43, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v38);
      OUTLINED_FUNCTION_1_0((uint64_t)v37);
    }

    else
    {
    }
  }

  else
  {

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v44 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v44, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v45 = OUTLINED_FUNCTION_58();
    BOOL v46 = OUTLINED_FUNCTION_45_0(v45);
    uint64_t v47 = *(void **)(v26 + 72);
    if (v46)
    {
      uint64_t v48 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v48);
      OUTLINED_FUNCTION_27_0( &dword_0,  v49,  v50,  "#ShortcutsLinkPromptForValueFlowStrategy cannot get LNValue from NLIntent");
      OUTLINED_FUNCTION_1_0(v25);
    }

    else
    {
    }
  }

  swift_task_dealloc(*(void *)(v26 + 64));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_34_3();
  return v52(v51, v52, v53, v54, v55, v56, v57, v58, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parse(usoParse:)(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Locale(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(ShortcutsLinkPromptForValueFlowStrategy.parse(usoParse:), 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 72);
  *(void *)(*v2 + 80) = a1;
  OUTLINED_FUNCTION_54_0(v4);
  uint64_t v5 = *(void *)(v3 + 40);
  if (v1) {
    swift_errorRelease(v1);
  }
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parse(usoParse:)()
{
  uint64_t v3 = (void *)v2[3];
  uint64_t v4 = (void *)v3[8];
  v2[7] = (uint64_t)v4;
  if (v4)
  {
    uint64_t v5 = (void *)v3[7];
    _BYTE v2[8] = (uint64_t)v5;
    if (v5)
    {
      uint64_t v6 = v3[12];
      uint64_t v7 = v3[13];
      __swift_project_boxed_opaque_existential_1(v3 + 9, v6);
      v4;
      id v8 = v5;
      dispatch thunk of DeviceState.siriLocale.getter(v6, v7);
      uint64_t v9 = (uint64_t **)swift_task_alloc(dword_21C34C);
      void v2[9] = (uint64_t)v9;
      *uint64_t v9 = v2;
      v9[1] = (uint64_t *)ShortcutsLinkPromptForValueFlowStrategy.parse(usoParse:);
      return LNValueType.getLNValue(usoParse:parameterMetadata:locale:)(v2[2], (uint64_t)v8, v2[6]);
    }

    uint64_t v0 = (void *)one-time initialization token for voiceCommands;
    id v16 = v4;
    uint64_t v17 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v17, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v18 = OUTLINED_FUNCTION_58();
    BOOL v19 = OUTLINED_FUNCTION_45_0(v18);
    id v20 = (void *)v2[7];
    if (v19)
    {
      uint64_t v21 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v21);
      OUTLINED_FUNCTION_27_0( &dword_0,  v22,  v23,  "#ShortcutsLinkPromptForValueFlowStrategy cannot get LNValue from USO Parse");
      OUTLINED_FUNCTION_1_0(v1);
    }

    else
    {

      uint64_t v0 = v20;
    }
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v11 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v11, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v12 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v12))
    {
      id v13 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v13);
      OUTLINED_FUNCTION_27_0( &dword_0,  v14,  v15,  "#ShortcutsLinkPromptForFlowStrategy parseValueResponse has nil valueType");
      OUTLINED_FUNCTION_1_0(v1);
    }
  }

  OUTLINED_FUNCTION_47_3();
  uint64_t v24 = OUTLINED_FUNCTION_22_3();
  return OUTLINED_FUNCTION_15_2(v24, v25);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v2 = *(void *)(v1 + 80);

  if (v2)
  {
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v3 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
    uint64_t v4 = OUTLINED_FUNCTION_58();
    uint64_t v5 = OUTLINED_FUNCTION_45_0(v4);
    uint64_t v6 = *(void **)(v1 + 56);
    if (v5)
    {
      uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v7);
      OUTLINED_FUNCTION_27_0( &dword_0,  v8,  v9,  "#ShortcutsLinkPromptForValueFlowStrategy cannot get LNValue from USO Parse");
      OUTLINED_FUNCTION_1_0(v0);
    }

    else
    {
    }
  }

  OUTLINED_FUNCTION_47_3();
  uint64_t v10 = OUTLINED_FUNCTION_23_2();
  return OUTLINED_FUNCTION_15_2(v10, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  uint64_t v5 = OUTLINED_FUNCTION_45_0(v4);
  uint64_t v6 = *(void **)(v2 + 56);
  if (v5)
  {
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_26_1(v7);
    OUTLINED_FUNCTION_27_0( &dword_0,  v8,  v9,  "#ShortcutsLinkPromptForValueFlowStrategy cannot get LNValue from USO Parse");
    OUTLINED_FUNCTION_1_0(v1);
  }

  else
  {

    uint64_t v0 = v6;
  }

  OUTLINED_FUNCTION_47_3();
  uint64_t v10 = OUTLINED_FUNCTION_22_3();
  return OUTLINED_FUNCTION_15_2(v10, v11);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue()(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = type metadata accessor for DialogPhase(0LL);
  v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = OUTLINED_FUNCTION_11_0();
  v2[27] = OUTLINED_FUNCTION_11_0();
  uint64_t v4 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[28] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[29] = v5;
  v2[30] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v2[31] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[32] = v7;
  v2[33] = OUTLINED_FUNCTION_9_0(v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[34] = OUTLINED_FUNCTION_11_0();
  v2[35] = OUTLINED_FUNCTION_11_0();
  v2[36] = OUTLINED_FUNCTION_11_0();
  v2[37] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 328LL);
  v3[42] = a1;
  v3[43] = v1;
  OUTLINED_FUNCTION_54_0(v4);
  uint64_t v5 = (void *)v3[40];
  if (v1)
  {

    OUTLINED_FUNCTION_14();
  }

  else
  {
    OUTLINED_FUNCTION_14();
  }

  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v6, v7, v8);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue()()
{
  uint64_t v1 = *(void **)(v0[23] + 56LL);
  if (v1 && (id v2 = [v1 title]) != 0)
  {
    uint64_t v3 = v2;
    id v4 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
    outlined bridged method (ob) of @objc AFPreferences.languageCode()(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
    }

    else
    {
      NSString v7 = 0LL;
    }

    id v10 = [v3 localizedStringForLocaleIdentifier:v7];

    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v11;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
  }

  uint64_t v12 = v0[37];
  uint64_t v13 = v0[23];
  uint64_t v14 = type metadata accessor for ShortcutsLinkNLContextProvider();
  swift_initStackObject(v14, v0 + 17);
  ShortcutsLinkNLContextProvider.makeContextForNeedsValue(valueType:)(*(void **)(v13 + 64), v12);
  uint64_t v15 = type metadata accessor for NLContextUpdate(0LL);
  __swift_storeEnumTagSinglePayload(v12, 0LL, 1LL, v15);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v16 = OUTLINED_FUNCTION_48();
  v0[38] = __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  uint64_t v17 = OUTLINED_FUNCTION_50_3();
  uint64_t v19 = outlined init with copy of NLContextUpdate?(v17, v18);
  id v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = v0[36];
  if (!v22)
  {
    OUTLINED_FUNCTION_49_2(v22, &demangling cache variable for type metadata for NLContextUpdate?);

    if (v9) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

  BOOL v46 = v0 + 21;
  uint64_t v47 = v8;
  uint64_t v24 = v0[35];
  uint64_t v25 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
  uint64_t v26 = OUTLINED_FUNCTION_38(32LL);
  uint64_t v48 = v26;
  *(_DWORD *)uint64_t v25 = 136315138;
  outlined init with copy of NLContextUpdate?(v23, v24);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v24, 1LL, v15);
  uint64_t v28 = v0[35];
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_49_2(EnumTagSinglePayload, &demangling cache variable for type metadata for NLContextUpdate?);
    uint64_t v29 = 0LL;
  }

  else
  {
    uint64_t v29 = NLContextUpdate.nluSystemDialogActs.getter(EnumTagSinglePayload);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v28, v15);
  }

  v0[20] = v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_SystemDialogAct]?);
  uint64_t v31 = String.init<A>(describing:)(v0 + 20, v30);
  v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v46, v0 + 22, v25 + 4);
  uint64_t v33 = OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_49_2(v33, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_31_2(&dword_0, v20, v21, "#ShortcutsLinkPromptForValueFlowStrategy make prompt for value: %s", v25);
  OUTLINED_FUNCTION_30_3(v26, v34, (uint64_t)&type metadata for Any + 8);
  OUTLINED_FUNCTION_1_0(v26);
  OUTLINED_FUNCTION_1_0((uint64_t)v25);

  uint64_t v8 = v47;
  if (!v9)
  {
LABEL_17:
    id v35 = objc_msgSend(*(id *)(v0[23] + 24), "parameterName", v46);
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v36;
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 368));
  OUTLINED_FUNCTION_20();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  os_log_s *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v1 = *(os_log_s **)(v0 + 304);
  outlined init with copy of AppShortcutInvoking(v0 + 56, v0 + 96);
  Logger.logObject.getter(v2);
  uint64_t v3 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v1, v3))
  {
    os_log_type_t v21 = *(void *)(v0 + 240);
    BOOL v22 = *(void *)(v0 + 296);
    uint64_t v18 = *(void *)(v0 + 232);
    uint64_t v19 = *(void **)(v0 + 336);
    id v20 = *(void *)(v0 + 224);
    id v4 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v5 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v23 = v5;
    *(_DWORD *)id v4 = 136315138;
    outlined init with copy of AppShortcutInvoking(v0 + 96, v0 + 16);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
    NSString v7 = String.init<A>(describing:)(v0 + 16, v6);
    uint64_t v9 = v8;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v4 + 4);
    swift_bridgeObjectRelease(v9);
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 96));
    OUTLINED_FUNCTION_31_2( &dword_0,  v1,  v3,  "#ShortcutsLinkPromptForValueFlowStrategy makePromptForValue; output: %s",
      v4);
    OUTLINED_FUNCTION_30_3(v5, v10, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v5);
    OUTLINED_FUNCTION_1_0((uint64_t)v4);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v20);
    uint64_t v11 = v22;
  }

  else
  {
    uint64_t v12 = *(void **)(v0 + 336);
    uint64_t v13 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 240);
    uint64_t v16 = *(void *)(v0 + 224);

    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 96));
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    uint64_t v11 = v13;
  }

  outlined destroy of NLContextUpdate?(v11, &demangling cache variable for type metadata for NLContextUpdate?);
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 56), *(void *)(v0 + 176));
  OUTLINED_FUNCTION_28_3();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 376);
  *id v4 = *v1;
  *(void *)(v2 + 384) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  outlined destroy of NLContextUpdate?( *(void *)(v0 + 296),  &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_28_3();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_38_2();
  outlined destroy of NLContextUpdate?(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_38_2();
  outlined destroy of NLContextUpdate?(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = (void *)v16[42];
  uint64_t v44 = v17;
  uint64_t v42 = v16[37];
  uint64_t v18 = v16[34];
  uint64_t v20 = v16[26];
  uint64_t v19 = v16[27];
  uint64_t v22 = v16[24];
  uint64_t v21 = v16[25];
  static DialogPhase.clarification.getter();
  id v23 = [v17 catId];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v19, v22);
  OutputGenerationManifest.init(dialogPhase:_:)(v20, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v24);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v22);
  outlined init with copy of NLContextUpdate?(v42, v18);
  OutputGenerationManifest.nlContextUpdate.setter(v18);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  OutputGenerationManifest.canUseServerTTS.setter(1LL);
  uint64_t v25 = type metadata accessor for ResponseFactory(0LL);
  OUTLINED_FUNCTION_51(v25);
  v16[44] = ResponseFactory.init()();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v27 = OUTLINED_FUNCTION_19(v26, 40LL);
  *(_OWORD *)(v27 + 16) = xmmword_17E150;
  *(void *)(v27 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v44;
  uint64_t v45 = v27;
  specialized Array._endMutation()(v27, v28, v29);
  v16[45] = v45;
  id v31 = v44;
  unint64_t v32 = (void *)swift_task_alloc(v30);
  v16[46] = v32;
  *unint64_t v32 = v16;
  v32[1] = ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue();
  OUTLINED_FUNCTION_34_3();
  return v36(v33, v34, v35, v36, v37, v38, v39, v40, a9, v43, v44, v16 + 7, v45, a14, a15, a16);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue_preRFv2(parameterName:nlContextUpdate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v5[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[13] = v7;
  v5[14] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue_preRFv2(parameterName:nlContextUpdate:),  0LL,  0LL);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue_preRFv2(parameterName:nlContextUpdate:)()
{
  uint64_t v1 = v0[11];
  id v2 = [*(id *)(v1 + 24) dialog];
  v0[15] = (uint64_t)v2;
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = (uint64_t **)swift_task_alloc(dword_2179FC);
  v0[16] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = (uint64_t *)ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue_preRFv2(parameterName:nlContextUpdate:);
  return LinkActionDialogTemplating.makeParameterPromptDialog_preRFv2(parameterName:customPrompt:actionMetadata:)( v0[14],  v0[8],  v0[9],  (uint64_t)v2,  v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  id v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (!v0) {

  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Bool v9;
  uint64_t v10;
  OUTLINED_FUNCTION_28_1();
  id v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void **)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(void **)(v0 + 56);
  uint64_t v6 = v3 + 9;
  uint64_t v7 = v3[12];
  uint64_t v8 = v3[13];
  __swift_project_boxed_opaque_existential_1(v3 + 9, v7);
  LOBYTE(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v7, v8);
  uint64_t v9 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  id v10 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 16) = 0u;
  v5[3] = v10;
  v5[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v6,  v7 & 1,  _swiftEmptyArrayStorage,  v9,  1LL,  v4,  _swiftEmptyArrayStorage);
  outlined destroy of NLContextUpdate?( v0 + 16,  (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 72));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 112));
  swift_release(*(void *)(v0 + 152));
  return v0;
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 160LL, 7LL);
}

void protocol witness for PromptForValueFlowStrategyAsync.actionForInput(_:) in conformance ShortcutsLinkPromptForValueFlowStrategy( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShortcutsLinkPromptForValueFlowStrategy( uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc(dword_2150EC);
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:)(a2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShortcutsLinkPromptForValueFlowStrategy( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makePromptForValue() in conformance ShortcutsLinkPromptForValueFlowStrategy( uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_21510C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue()(a1);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()[1]);
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence() in conformance ShortcutsLinkPromptForValueFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()[1]);
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()(a1, v7, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkPromptForValueFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()[1]);
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkPromptForValueFlowStrategy()
{
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeErrorResponse(_:) in conformance ShortcutsLinkPromptForValueFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  id v10 = (void *)swift_task_alloc(async function pointer to PromptForValueFlowStrategyAsync.makeErrorResponse(_:)[1]);
  *(void *)(v5 + 16) = v10;
  *id v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForValueFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, v9, a4);
}

uint64_t outlined bridged method (ob) of @objc AFPreferences.languageCode()(void *a1)
{
  id v2 = [a1 languageCode];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void *specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( __int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[14] = type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  a7[15] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  a7[11] = a6;
  outlined init with take of AceServiceInvokerAsync(a1, (uint64_t)(a7 + 2));
  a7[7] = a2;
  a7[8] = a3;
  a7[9] = a4;
  a7[10] = a5;
  return a7;
}

unint64_t type metadata accessor for LNSystemProtocol()
{
  unint64_t result = lazy cache variable for type metadata for LNSystemProtocol;
  if (!lazy cache variable for type metadata for LNSystemProtocol)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNSystemProtocol);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  unint64_t result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    uint64_t v1 = type metadata accessor for Input(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Input, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }

  return result;
}

uint64_t outlined init with copy of NLContextUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ShortcutsLinkPromptForValueFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin39ShortcutsLinkPromptForValueFlowStrategy);
}

void outlined destroy of NLContextUpdate?(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_14_3(*(void *)(v2 - 8));
  OUTLINED_FUNCTION_1();
}

uint64_t outlined destroy of VoiceCommandsNLIntent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VoiceCommandsNLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_14_3@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_15_2(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_18_2(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_23_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_3(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

_WORD *OUTLINED_FUNCTION_26_1(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_28_3()
{
  return swift_task_dealloc(*(void *)(v0 + 296));
}

uint64_t OUTLINED_FUNCTION_29_2()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_30_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 1LL, a3);
}

void OUTLINED_FUNCTION_31_2(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_35_3@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_47_3()
{
  return swift_task_dealloc(*(void *)(v0 + 48));
}

void OUTLINED_FUNCTION_49_2(uint64_t a1, uint64_t *a2)
{
}

uint64_t OUTLINED_FUNCTION_50_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_2()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t WFScreentimeCheckFlowStrategy.__allocating_init(appPolicyHandler:bundleId:deviceState:)( __int128 *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v9 = swift_allocObject(v4, 112LL, 7LL);
  WFScreentimeCheckFlowStrategy.init(appPolicyHandler:bundleId:deviceState:)(a1, a2, a3, a4);
  return v9;
}

uint64_t WFScreentimeCheckFlowStrategy.init(appPolicyHandler:bundleId:deviceState:)( __int128 *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = a3;
  outlined init with take of AceServiceInvokerAsync(a4, v4 + 72);
  return v4;
}

uint64_t WFScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse()(uint64_t a1)
{
  v2[7] = a1;
  _BYTE v2[8] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  void v2[9] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_9_0(v5);
  v2[12] = v6;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static ResponseTemplates.appDisabledByScreenTime()[1]);
  v2[13] = v7;
  *uint64_t v7 = v2;
  v7[1] = WFScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse();
  return static ResponseTemplates.appDisabledByScreenTime()(v6);
}

uint64_t WFScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse()()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = WFScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse();
  }
  else {
    uint64_t v3 = WFScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse();
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Bool v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void **)(v0 + 56);
  uint64_t v5 = *(void **)(v0 + 64);
  uint64_t v7 = v5 + 9;
  uint64_t v8 = v5[12];
  uint64_t v9 = v5[13];
  __swift_project_boxed_opaque_existential_1(v5 + 9, v8);
  LOBYTE(v8) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v8, v9);
  id v10 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v11 = type metadata accessor for NLContextUpdate(0LL);
  __swift_storeEnumTagSinglePayload(v3, 1LL, 1LL, v11);
  uint64_t v12 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 16) = 0u;
  void v6[3] = v12;
  v6[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v7,  v8 & 1,  _swiftEmptyArrayStorage,  v10,  1LL,  v3,  _swiftEmptyArrayStorage,  v0 + 16);
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

Swift::Bool __swiftcall VoiceCommandsScreentimeCheckFlowStrategy.isAppAllowedByScreentime()()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(v2 + 8))(v0[7], v0[8], v1, v2) & 1;
}

void *WFScreentimeCheckFlowStrategy.deinit()
{
  return v0;
}

uint64_t WFScreentimeCheckFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 112LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy;
  return v7(a1);
}

uint64_t protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t protocol witness for ScreentimeCheckFlowStrategyAsync.isAppAllowedByScreentime() in conformance WFScreentimeCheckFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120LL))() & 1;
}

uint64_t type metadata accessor for WFScreentimeCheckFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin29WFScreentimeCheckFlowStrategy);
}

void INIntentResponse.localizedResponseString(isVox:intentName:)(char a1, uint64_t a2, void *a3)
{
  else {
    INIntentResponse.localizedSpokenResponse(intentName:)(a2, a3);
  }
}

void *INIntentResponse.printedDialog()()
{
  Swift::String_optional v0 = INIntentResponse.printedTemplate()();
  uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
  if (!v0.value._object) {
    return 0LL;
  }
  object = v0.value._object;
  uint64_t v55 = OUTLINED_FUNCTION_6_4();
  uint64_t v2 = static CATSpeakableString.getPropertiesWithWrapperInTemplateString(templateString:)();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v0.value._object);
    uint64_t v4 = &type metadata for String;
    uint64_t v5 = (uint64_t *)(v2 + 40);
    uint64_t v54 = v2;
    uint64_t v6 = &off_211000;
    uint64_t v60 = v0.value._countAndFlagsBits;
    uint64_t v7 = v0.value._object;
    while (1)
    {
      uint64_t v9 = *(v5 - 1);
      uint64_t v8 = *v5;
      swift_bridgeObjectRetain(*v5);
      id v62 = (id)static CATSpeakableString.unwrapProperty(propertyName:)(v9, v8);
      uint64_t v63 = v10;
      swift_bridgeObjectRetain(v10);
      AnyHashable.init<A>(_:)(&v64, &v62, v4, &protocol witness table for String);
      unint64_t result = (void *)outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(v56);
      if (!result) {
        break;
      }
      uint64_t v12 = result;
      OUTLINED_FUNCTION_37();
      if (v12[2] && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v64), (v14 & 1) != 0))
      {
        outlined init with copy of Any(v12[7] + 32 * v13, (uint64_t)&v66);
      }

      else
      {
        __int128 v66 = 0u;
        __int128 v67 = 0u;
      }

      swift_bridgeObjectRelease(v12);
      outlined destroy of AnyHashable((uint64_t)&v64);
      if (!*((void *)&v67 + 1))
      {
        OUTLINED_FUNCTION_14();
        OUTLINED_FUNCTION_2_6();
        OUTLINED_FUNCTION_22();
        outlined destroy of Any?((uint64_t)&v66);
        uint64_t v49 = v54;
LABEL_20:
        swift_bridgeObjectRelease(v49);
        return 0LL;
      }

      unint64_t v15 = type metadata accessor for INObject();
      if ((swift_dynamicCast(&v62, &v66, (char *)&type metadata for Any + 8, v15, 6LL) & 1) == 0)
      {
        swift_bridgeObjectRelease(v54);
        OUTLINED_FUNCTION_14();
        OUTLINED_FUNCTION_2_6();
        uint64_t v49 = v8;
        goto LABEL_20;
      }

      uint64_t v58 = object;
      uint64_t v59 = v3;
      id v16 = v62;
      uint64_t v64 = v60;
      uint64_t v65 = v7;
      *(void *)&__int128 v66 = v9;
      *((void *)&v66 + 1) = v8;
      id v17 = [v62 v6[498]];
      uint64_t v18 = v4;
      uint64_t v19 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      id v62 = v19;
      uint64_t v63 = v21;
      uint64_t v4 = v18;
      unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v60 = OUTLINED_FUNCTION_0_6(v22, v23, v24, v25, v26, v27, v28, v29, v50, v52, v22, v22, v54);
      uint64_t v57 = v30;
      OUTLINED_FUNCTION_14();
      OUTLINED_FUNCTION_2_6();
      id v31 = (void *)outlined bridged method (pb) of @objc INObject.pronunciationHint.getter(v16);
      uint64_t v64 = countAndFlagsBits;
      uint64_t v65 = v58;
      *(void *)&__int128 v66 = v9;
      *((void *)&v66 + 1) = v8;
      if (v32)
      {
        id v62 = v31;
        uint64_t v63 = v32;
        uint64_t countAndFlagsBits = OUTLINED_FUNCTION_0_6( (uint64_t)v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v51,  v53,  v22,  v22,  v54);
        uint64_t v40 = v39;
        OUTLINED_FUNCTION_22();
        OUTLINED_FUNCTION_14();
        OUTLINED_FUNCTION_2_6();

        object = v40;
        uint64_t v6 = &off_211000;
      }

      else
      {
        id v41 = [v16 displayString];
        uint64_t v42 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v44 = v43;

        id v62 = v42;
        uint64_t v63 = v44;
        uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v66,  &v62,  0LL,  0LL,  0LL,  1LL,  v18,  v18,  v18,  v22);
        BOOL v46 = v45;
        OUTLINED_FUNCTION_22();
        uint64_t v4 = v18;
        swift_bridgeObjectRelease(v58);
        OUTLINED_FUNCTION_2_6();

        object = v46;
        uint64_t v6 = &off_211000;
      }

      v5 += 2;
      uint64_t v47 = v57;
      uint64_t v7 = v57;
      uint64_t v3 = v59 - 1;
      if (v59 == 1)
      {
        swift_bridgeObjectRelease(v54);
        uint64_t v48 = v60;
        goto LABEL_17;
      }
    }

    __break(1u);
  }

  else
  {
    swift_bridgeObjectRetain(v0.value._object);
    OUTLINED_FUNCTION_14();
    uint64_t v48 = v0.value._countAndFlagsBits;
    uint64_t v47 = v0.value._object;
LABEL_17:
    OUTLINED_FUNCTION_1_5(v55);
    return CATSpeakableString.init(_:speak:)(v48, (unint64_t)v47, countAndFlagsBits, (uint64_t)object);
  }

  return result;
}

void *INIntentResponse.localizedSpokenResponse(intentName:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  static LocaleUtils.siriLanguageCode()();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v11 = OUTLINED_FUNCTION_1_5(v10);
  *(_OWORD *)(v11 + 16) = xmmword_17E650;
  *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v7;
  *(void *)(v11 + 40) = v9;
  uint64_t v12 = (void *)static LocaleUtils.getPreferredLocationFromIntent(intentName:preferredLanguageCode:)(a1, (uint64_t)a2);
  OUTLINED_FUNCTION_2_6();
  static LocaleUtils.getLocale(preferredLocalizations:)(v12);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  OUTLINED_FUNCTION_37();
  uint64_t v17 = outlined bridged method (mbnnb) of @objc INIntentResponse._renderedResponse(forLanguage:requiresSiriCompatibility:)( v14,  v16,  1,  v3);
  if (!v18) {
    return 0LL;
  }
  uint64_t v19 = v17;
  unint64_t v20 = v18;
  v21._uint64_t countAndFlagsBits = a1;
  v21._object = a2;
  Swift::String v22 = INIntentResponse.localizedResponseTemplate(intentName:)(v21);
  unint64_t v23 = ((unint64_t)v22._object >> 56) & 0xF;
  if (v23)
  {
    uint64_t v24 = OUTLINED_FUNCTION_6_4();
    uint64_t v25 = static CATSpeakableString.getPropertiesWithWrapperInTemplateString(templateString:)();
    uint64_t v26 = static CATSpeakableString.applyPronunciationHints(template:variablesWithWrapper:intent:intentResponse:tokens:)( v22._countAndFlagsBits,  (uint64_t)v22._object,  v25,  0LL,  v3,  0LL);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v22._object);
    OUTLINED_FUNCTION_1_5(v24);
    uint64_t v29 = v19;
    unint64_t v30 = v20;
    uint64_t v31 = v26;
    uint64_t v32 = v28;
  }

  else
  {
    swift_bridgeObjectRelease(v22._object);
    uint64_t v34 = OUTLINED_FUNCTION_6_4();
    OUTLINED_FUNCTION_1_5(v34);
    uint64_t v29 = v19;
    unint64_t v30 = v20;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
  }

  return CATSpeakableString.init(_:speak:)(v29, v30, v31, v32);
}

Swift::String __swiftcall INIntentResponse.localizedResponseTemplate(intentName:)(Swift::String intentName)
{
  object = intentName._object;
  uint64_t countAndFlagsBits = intentName._countAndFlagsBits;
  static LocaleUtils.siriLanguageCode()();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v9 = OUTLINED_FUNCTION_1_5(v8);
  *(_OWORD *)(v9 + 16) = xmmword_17E650;
  *(void *)(v9 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v5;
  *(void *)(v9 + 40) = v7;
  uint64_t v10 = (void *)static LocaleUtils.getPreferredLocationFromIntent(intentName:preferredLanguageCode:)( countAndFlagsBits,  (uint64_t)object);
  OUTLINED_FUNCTION_2_6();
  static LocaleUtils.getLocale(preferredLocalizations:)(v10);
  OUTLINED_FUNCTION_14();
  NSString v11 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_22();
  id v12 = [v1 _responseTemplateForLanguage:v11 requiresSiriCompatibility:1];

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  uint64_t v16 = v13;
  uint64_t v17 = v15;
  result._object = v17;
  result._uint64_t countAndFlagsBits = v16;
  return result;
}

void INIntentResponse.getPropertiesInTemplate(intentName:)(uint64_t a1, uint64_t a2)
{
}

Swift::String_optional __swiftcall INIntentResponse.printedTemplate()()
{
  uint64_t v0 = OUTLINED_FUNCTION_4_5(39LL, 0x8000000000192BE0LL);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t INIntentResponse.getResponseCodeDictionary()()
{
  id v1 = [v0 _codableDescription];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t result = outlined bridged method (pb) of @objc INCodableDescription.dictionaryRepresentation()(v1);
  if (!result)
  {
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  specialized Dictionary.subscript.getter(0xD000000000000015LL, 0x8000000000192C40LL, result, &v27);
  swift_bridgeObjectRelease(v4);
  if (!v28)
  {

    outlined destroy of Any?((uint64_t)&v27);
    return 0LL;
  }

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if ((swift_dynamicCast(&v25, &v27, (char *)&type metadata for Any + 8, v5, 6LL) & 1) == 0)
  {

    return 0LL;
  }

  uint64_t v6 = v25;
  uint64_t v7 = [v0 _intentResponseCodableCode];
  uint64_t v8 = v7;
  if (!v7)
  {

    unint64_t v20 = v6;
    goto LABEL_24;
  }

  id v9 = [v7 name];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v10;

  uint64_t v11 = v6[2];
  if (!v11)
  {

    swift_bridgeObjectRelease(v6);
    uint64_t v13 = v24;
LABEL_26:
    swift_bridgeObjectRelease(v13);
    return 0LL;
  }

  Swift::String v22 = v6;
  uint64_t v12 = (uint64_t)(v6 + 4);
  uint64_t v13 = v24;
  while (1)
  {
    outlined init with copy of Any(v12, (uint64_t)&v27);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
LABEL_19:
    v12 += 32LL;
    if (!--v11)
    {

      swift_bridgeObjectRelease(v22);
      goto LABEL_26;
    }
  }

  uint64_t v8 = v25;
  if (!v25[2]
    || (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018LL, 0x8000000000192C60LL), (v16 & 1) == 0)
    || (outlined init with copy of Any(v8[7] + 32 * v15, (uint64_t)&v27),
        (swift_dynamicCast(&v25, &v27, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease(v8);
    goto LABEL_19;
  }

  uint64_t v17 = v26;
  if (v25 == (void *)v23 && v26 == v13)
  {

    swift_bridgeObjectRelease(v22);
    Swift::String v21 = v13;
    goto LABEL_31;
  }

  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v23, v13, 0LL);
  swift_bridgeObjectRelease(v17);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease(v8);
    uint64_t v13 = v24;
    goto LABEL_19;
  }

  Swift::String v21 = v22;
  uint64_t v13 = v24;
LABEL_31:
  swift_bridgeObjectRelease(v21);
  unint64_t v20 = v13;
LABEL_24:
  swift_bridgeObjectRelease(v20);
  return (uint64_t)v8;
}

Swift::String_optional __swiftcall INIntentResponse.languageCode()()
{
  uint64_t v0 = OUTLINED_FUNCTION_4_5(44LL, 0x8000000000192C10LL);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t INIntentResponse.printedTemplate()(uint64_t a1, uint64_t a2)
{
  uint64_t result = INIntentResponse.getResponseCodeDictionary()();
  if (result)
  {
    uint64_t v5 = result;
    specialized Dictionary.subscript.getter(a1, a2, result, &v7);
    swift_bridgeObjectRelease(v5);
    if (v8)
    {
      else {
        return 0LL;
      }
    }

    else
    {
      outlined destroy of Any?((uint64_t)&v7);
      return 0LL;
    }
  }

  return result;
}

uint64_t outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(void *a1)
{
  id v1 = [a1 propertiesByName];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  return v3;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for INObject()
{
  unint64_t result = lazy cache variable for type metadata for INObject;
  if (!lazy cache variable for type metadata for INObject)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INObject);
  }

  return result;
}

uint64_t outlined bridged method (pb) of @objc INObject.pronunciationHint.getter(void *a1)
{
  id v1 = [a1 pronunciationHint];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t outlined bridged method (mbnnb) of @objc INIntentResponse._renderedResponse(forLanguage:requiresSiriCompatibility:)( uint64_t a1, uint64_t a2, char a3, void *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v8 = [a4 _renderedResponseForLanguage:v7 requiresSiriCompatibility:a3 & 1];

  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v9;
}

uint64_t OUTLINED_FUNCTION_0_6( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v15 - 128,  va,  0LL,  0LL,  0LL,  1LL,  v13,  v13,  v13,  v14);
}

uint64_t OUTLINED_FUNCTION_1_5(uint64_t a1)
{
  return swift_allocObject(a1, 48LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_2_6()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_4_5(uint64_t a1, uint64_t a2)
{
  return INIntentResponse.printedTemplate()(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2);
}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return type metadata accessor for CATSpeakableString();
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::Properties_optional __swiftcall SuggestionsCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of SuggestionsCATsSimple.Properties.init(rawValue:),  v3);
  OUTLINED_FUNCTION_58_2();
  if (v1 >= 0xA) {
    return (SiriLinkFlowPlugin::SuggestionsCATsSimple::Properties_optional)10;
  }
  else {
    return (SiriLinkFlowPlugin::SuggestionsCATsSimple::Properties_optional)v1;
  }
}

uint64_t SuggestionsCATsSimple.Properties.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CC78
                                                                     + 4 * asc_17EBD0[a1]))( 0xD000000000000012LL,  0x8000000000190630LL);
}

void sub_1CC78()
{
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SuggestionsCATsSimple.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SuggestionsCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SuggestionsCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SuggestionsCATsSimple.Properties( uint64_t a1)
{
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SuggestionsCATsSimple.Properties@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = SuggestionsCATsSimple.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_27_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_40_3(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17F3D0;
  uint64_t v6 = OUTLINED_FUNCTION_31_3(v5, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v6, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  uint64_t v9 = OUTLINED_FUNCTION_9_3(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_18_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    char v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
  }

  uint64_t v24 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_16_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    __int128 v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  uint64_t v28 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v28;
  OUTLINED_FUNCTION_47_4( v28,  (uint64_t)SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:));
  uint64_t v30 = OUTLINED_FUNCTION_26_2(v29);
  return OUTLINED_FUNCTION_24_1(v30, v31, v32, v33);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_3_8();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_6_5(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_22_4();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    uint64_t v5 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_5_3(v5, v6);
  }

SiriLinkFlowPlugin::SuggestionsCATsSimple::CancelDialogIds_optional __swiftcall SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.CancelDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::CancelDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( rawValue,  v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SuggestionsCATsSimple.CancelDialogIds( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SuggestionsCATsSimple.CancelDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SuggestionsCATsSimple.CancelDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SuggestionsCATsSimple.CancelDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::CancelDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.CancelDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::CancelDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.cancelAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.cancelAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_40_3(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_3(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    char v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_16_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_44_1(v27);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds();
  OUTLINED_FUNCTION_46_4((uint64_t)SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_42_2();
  return OUTLINED_FUNCTION_23_3(v28, v29, v30, v31, v32, v33);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.CancelDialogIds,  &type metadata for SuggestionsCATsSimple.CancelDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.CancelDialogIds,  &type metadata for SuggestionsCATsSimple.CancelDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds);
  }

  return result;
}

uint64_t SuggestionsCATsSimple.close(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.close(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_27_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_40_3(v5);
  *(_OWORD *)(v6 + 16) = xmmword_17F3D0;
  uint64_t v7 = OUTLINED_FUNCTION_31_3(v6, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v7, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  uint64_t v10 = OUTLINED_FUNCTION_9_3(v9);
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_18_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v17, v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v19 = OUTLINED_FUNCTION_17_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v20 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v20);
  }

  uint64_t v21 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v21, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = OUTLINED_FUNCTION_19_2();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v24 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v24);
  }

  uint64_t v25 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v25, v26, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v27 = OUTLINED_FUNCTION_16_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v27, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v28 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v28);
  }

  uint64_t v29 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v29;
  *uint64_t v29 = v1;
  v29[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  uint64_t v30 = OUTLINED_FUNCTION_26_2(v3 - 2);
  return OUTLINED_FUNCTION_24_1(v30, v31, v32, v33);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::CloseDialogIds_optional __swiftcall SuggestionsCATsSimple.CloseDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.CloseDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::CloseDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( rawValue,  v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::CloseDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.CloseDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::CloseDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.CloseDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.closeAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.closeAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_27_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_40_3(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17F3D0;
  uint64_t v6 = OUTLINED_FUNCTION_31_3(v5, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v6, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4((uint64_t)v0, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  uint64_t v9 = OUTLINED_FUNCTION_9_3(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    char v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_18_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
  }

  uint64_t v24 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_16_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  uint64_t v28 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_44_1(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds();
  void *v0 = v1;
  v0[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_42_2();
  return OUTLINED_FUNCTION_23_3(v29, v30, v31, v32, v33, v34);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.CloseDialogIds,  &type metadata for SuggestionsCATsSimple.CloseDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.CloseDialogIds,  &type metadata for SuggestionsCATsSimple.CloseDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds);
  }

  return result;
}

uint64_t SuggestionsCATsSimple.create(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.create(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_27_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_40_3(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17F3D0;
  uint64_t v6 = OUTLINED_FUNCTION_31_3(v5, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v6, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  uint64_t v9 = OUTLINED_FUNCTION_9_3(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    char v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_18_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
  }

  uint64_t v24 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_16_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  uint64_t v28 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v28;
  OUTLINED_FUNCTION_47_4( v28,  (uint64_t)SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:));
  uint64_t v30 = OUTLINED_FUNCTION_26_2(v29);
  return OUTLINED_FUNCTION_24_1(v30, v31, v32, v33);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::CreateDialogIds_optional __swiftcall SuggestionsCATsSimple.CreateDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.CreateDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::CreateDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( rawValue,  v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::CreateDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.CreateDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::CreateDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.CreateDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.createAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.createAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_40_3(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_3(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    char v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_16_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_44_1(v27);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds();
  OUTLINED_FUNCTION_46_4((uint64_t)SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_42_2();
  return OUTLINED_FUNCTION_23_3(v28, v29, v30, v31, v32, v33);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.CreateDialogIds,  &type metadata for SuggestionsCATsSimple.CreateDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.CreateDialogIds,  &type metadata for SuggestionsCATsSimple.CreateDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds);
  }

  return result;
}

uint64_t SuggestionsCATsSimple.disable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.disable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_27_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_40_3(v6);
  *(_OWORD *)(v7 + 16) = xmmword_17F3D0;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  *(void *)(v7 + 40) = 0x8000000000192C80LL;
  *(_BYTE *)(v7 + 48) = v2;
  OUTLINED_FUNCTION_7_1((void *)v7, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  uint64_t v10 = OUTLINED_FUNCTION_9_3(v9);
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[15] = v0;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
  }

  uint64_t v13 = OUTLINED_FUNCTION_30_4();
  v4[16] = v1;
  v4[17] = 0x8000000000192CA0LL;
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_18_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[21] = v0;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v17, v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v19 = OUTLINED_FUNCTION_17_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[27] = v0;
    uint64_t v20 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v20);
  }

  uint64_t v21 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v21, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = OUTLINED_FUNCTION_19_2();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[33] = v0;
    uint64_t v24 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v24);
  }

  uint64_t v25 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v25, v26, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v27 = OUTLINED_FUNCTION_16_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v27, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[39] = v0;
    uint64_t v28 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v28);
  }

  uint64_t v29 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v3 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v29;
  *uint64_t v29 = v3;
  v29[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_45_1();
  return v31(0xD000000000000013LL);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::DisableDialogIds_optional __swiftcall SuggestionsCATsSimple.DisableDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.DisableDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::DisableDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( rawValue,  v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::DisableDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.DisableDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::DisableDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.DisableDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.disableAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.disableAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_27_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_40_3(v6);
  *(_OWORD *)(v7 + 16) = xmmword_17F3D0;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  *(void *)(v7 + 40) = 0x8000000000192C80LL;
  *(_BYTE *)(v7 + 48) = v2;
  OUTLINED_FUNCTION_7_1((void *)v7, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4((uint64_t)v0, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  uint64_t v10 = OUTLINED_FUNCTION_9_3(v9);
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[15] = v0;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
  }

  uint64_t v13 = OUTLINED_FUNCTION_30_4();
  v4[16] = v1;
  v4[17] = 0x8000000000192CA0LL;
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_18_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[21] = v0;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v17, v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v19 = OUTLINED_FUNCTION_17_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[27] = v0;
    uint64_t v20 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v20);
  }

  uint64_t v21 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v21, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = OUTLINED_FUNCTION_19_2();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[33] = v0;
    uint64_t v24 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v24);
  }

  uint64_t v25 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v25, v26, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v27 = OUTLINED_FUNCTION_16_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v27, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[39] = v0;
    uint64_t v28 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v28);
  }

  uint64_t v29 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_44_1(v29);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds();
  void *v0 = v3;
  v0[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_45_1();
  return v31(0xD000000000000013LL);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.DisableDialogIds,  &type metadata for SuggestionsCATsSimple.DisableDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.DisableDialogIds,  &type metadata for SuggestionsCATsSimple.DisableDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds);
  }

  return result;
}

uint64_t SuggestionsCATsSimple.enable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.enable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_27_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_40_3(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17F3D0;
  uint64_t v6 = OUTLINED_FUNCTION_31_3(v5, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v6, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  uint64_t v9 = OUTLINED_FUNCTION_9_3(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    char v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_18_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
  }

  uint64_t v24 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_16_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  uint64_t v28 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v28;
  OUTLINED_FUNCTION_47_4( v28,  (uint64_t)SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:));
  uint64_t v30 = OUTLINED_FUNCTION_26_2(v29);
  return OUTLINED_FUNCTION_24_1(v30, v31, v32, v33);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::EnableDialogIds_optional __swiftcall SuggestionsCATsSimple.EnableDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.EnableDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::EnableDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( rawValue,  v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::EnableDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.EnableDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::EnableDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.EnableDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.enableAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.enableAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_40_3(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_3(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    char v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_16_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_44_1(v27);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds();
  OUTLINED_FUNCTION_46_4((uint64_t)SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_42_2();
  return OUTLINED_FUNCTION_23_3(v28, v29, v30, v31, v32, v33);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.EnableDialogIds,  &type metadata for SuggestionsCATsSimple.EnableDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.EnableDialogIds,  &type metadata for SuggestionsCATsSimple.EnableDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds);
  }

  return result;
}

uint64_t SuggestionsCATsSimple.next(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.next(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_27_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_40_3(v5);
  *(_OWORD *)(v6 + 16) = xmmword_17F3D0;
  uint64_t v7 = OUTLINED_FUNCTION_31_3(v6, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v7, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  uint64_t v10 = OUTLINED_FUNCTION_9_3(v9);
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_18_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v17, v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v19 = OUTLINED_FUNCTION_17_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v20 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v20);
  }

  uint64_t v21 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v21, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = OUTLINED_FUNCTION_19_2();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v24 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v24);
  }

  uint64_t v25 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v25, v26, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v27 = OUTLINED_FUNCTION_16_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v27, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v28 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v28);
  }

  uint64_t v29 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v29;
  *uint64_t v29 = v1;
  v29[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  uint64_t v30 = OUTLINED_FUNCTION_26_2(v3 - 3);
  return OUTLINED_FUNCTION_24_1(v30, v31, v32, v33);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::NextDialogIds_optional __swiftcall SuggestionsCATsSimple.NextDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.NextDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::NextDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( rawValue,  v1);
}

uint64_t SuggestionsCATsSimple.NextDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6974736567677573LL;
  }
  else {
    return 0x7470697263736564LL;
  }
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::NextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.NextDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::NextDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.NextDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SuggestionsCATsSimple.NextDialogIds@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = SuggestionsCATsSimple.NextDialogIds.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t SuggestionsCATsSimple.nextAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.nextAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_27_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_40_3(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17F3D0;
  uint64_t v6 = OUTLINED_FUNCTION_31_3(v5, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v6, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4((uint64_t)v0, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  uint64_t v9 = OUTLINED_FUNCTION_9_3(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    char v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_18_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
  }

  uint64_t v24 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_16_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  uint64_t v28 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_44_1(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds();
  void *v0 = v1;
  v0[1] = SuggestionsCATsSimple.nextAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_42_2();
  return OUTLINED_FUNCTION_23_3(v29, v30, v31, v32, v33, v34);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_3_8();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_6_5(v1, v2, v3);
  }

  else
  {
    OUTLINED_FUNCTION_22_4();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    uint64_t v5 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_5_3(v5, v6);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc(v1);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.NextDialogIds,  &type metadata for SuggestionsCATsSimple.NextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.NextDialogIds,  &type metadata for SuggestionsCATsSimple.NextDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds);
  }

  return result;
}

uint64_t SuggestionsCATsSimple.open(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.open(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_27_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_40_3(v5);
  *(_OWORD *)(v6 + 16) = xmmword_17F3D0;
  uint64_t v7 = OUTLINED_FUNCTION_31_3(v6, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v7, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  uint64_t v10 = OUTLINED_FUNCTION_9_3(v9);
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_18_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v17, v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v19 = OUTLINED_FUNCTION_17_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v20 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v20);
  }

  uint64_t v21 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v21, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = OUTLINED_FUNCTION_19_2();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v24 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v24);
  }

  uint64_t v25 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v25, v26, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v27 = OUTLINED_FUNCTION_16_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v27, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v28 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v28);
  }

  uint64_t v29 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v29;
  *uint64_t v29 = v1;
  v29[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  uint64_t v30 = OUTLINED_FUNCTION_26_2(v3 - 3);
  return OUTLINED_FUNCTION_24_1(v30, v31, v32, v33);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::OpenDialogIds_optional __swiftcall SuggestionsCATsSimple.OpenDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.OpenDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::OpenDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( rawValue,  v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::OpenDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.OpenDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::OpenDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.OpenDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.openAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.openAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_27_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_40_3(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17F3D0;
  uint64_t v6 = OUTLINED_FUNCTION_31_3(v5, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v6, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4((uint64_t)v0, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  uint64_t v9 = OUTLINED_FUNCTION_9_3(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    char v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_18_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
  }

  uint64_t v24 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_16_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  uint64_t v28 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_44_1(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds();
  void *v0 = v1;
  v0[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_42_2();
  return OUTLINED_FUNCTION_23_3(v29, v30, v31, v32, v33, v34);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.OpenDialogIds,  &type metadata for SuggestionsCATsSimple.OpenDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.OpenDialogIds,  &type metadata for SuggestionsCATsSimple.OpenDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds);
  }

  return result;
}

uint64_t SuggestionsCATsSimple.previous(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.previous(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_27_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_40_3(v5);
  *(_OWORD *)(v6 + 16) = xmmword_17F3D0;
  uint64_t v7 = OUTLINED_FUNCTION_31_3(v6, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v7, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_61_1();
  uint64_t v10 = OUTLINED_FUNCTION_9_3(v9);
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v12 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v12);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = OUTLINED_FUNCTION_18_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v16 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v16);
  }

  uint64_t v17 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v17, v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v19 = OUTLINED_FUNCTION_17_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v20 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v20);
  }

  uint64_t v21 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v21, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = OUTLINED_FUNCTION_19_2();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v24 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v24);
  }

  uint64_t v25 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v25, v26, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v27 = OUTLINED_FUNCTION_16_3();
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(v27, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v28 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v28);
  }

  uint64_t v29 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v29;
  *uint64_t v29 = v1;
  v29[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  uint64_t v30 = OUTLINED_FUNCTION_26_2(v3 + 1);
  return OUTLINED_FUNCTION_24_1(v30, v31, v32, v33);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::PreviousDialogIds_optional __swiftcall SuggestionsCATsSimple.PreviousDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.PreviousDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::PreviousDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( rawValue,  v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::PreviousDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.PreviousDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::PreviousDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.PreviousDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.previousAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.previousAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_27_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_40_3(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17F3D0;
  uint64_t v6 = OUTLINED_FUNCTION_31_3(v5, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v6, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4((uint64_t)v0, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  uint64_t v9 = OUTLINED_FUNCTION_9_3(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    char v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_18_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
  }

  uint64_t v24 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_16_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  uint64_t v28 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_44_1(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds();
  void *v0 = v1;
  v0[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_42_2();
  return OUTLINED_FUNCTION_23_3(v29, v30, v31, v32, v33, v34);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.PreviousDialogIds,  &type metadata for SuggestionsCATsSimple.PreviousDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.PreviousDialogIds,  &type metadata for SuggestionsCATsSimple.PreviousDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds);
  }

  return result;
}

uint64_t SuggestionsCATsSimple.search(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.search(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_27_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_40_3(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17F3D0;
  uint64_t v6 = OUTLINED_FUNCTION_31_3(v5, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v6, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  uint64_t v9 = OUTLINED_FUNCTION_9_3(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    char v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_18_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
  }

  uint64_t v24 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_16_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  uint64_t v28 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v28;
  OUTLINED_FUNCTION_47_4( v28,  (uint64_t)SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:));
  uint64_t v30 = OUTLINED_FUNCTION_26_2(v29);
  return OUTLINED_FUNCTION_24_1(v30, v31, v32, v33);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::SearchDialogIds_optional __swiftcall SuggestionsCATsSimple.SearchDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.SearchDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::SearchDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( rawValue,  v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::SearchDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.SearchDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::SearchDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.SearchDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.searchAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.searchAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_40_3(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_3(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    char v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_16_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_44_1(v27);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds();
  OUTLINED_FUNCTION_46_4((uint64_t)SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_42_2();
  return OUTLINED_FUNCTION_23_3(v28, v29, v30, v31, v32, v33);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.SearchDialogIds,  &type metadata for SuggestionsCATsSimple.SearchDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.SearchDialogIds,  &type metadata for SuggestionsCATsSimple.SearchDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds);
  }

  return result;
}

uint64_t SuggestionsCATsSimple.toggle(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.toggle(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_27_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_40_3(v4);
  *(_OWORD *)(v5 + 16) = xmmword_17F3D0;
  uint64_t v6 = OUTLINED_FUNCTION_31_3(v5, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v6, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  uint64_t v9 = OUTLINED_FUNCTION_9_3(v8);
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v9, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[15] = v0;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_18_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[21] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = OUTLINED_FUNCTION_17_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[27] = v0;
    uint64_t v19 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v19);
  }

  uint64_t v20 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_19_2();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[33] = v0;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
  }

  uint64_t v24 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v24, v25, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_16_3();
  if (v10)
  {
    OUTLINED_FUNCTION_11_4(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v2[39] = v0;
    uint64_t v27 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v27);
  }

  uint64_t v28 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v28;
  OUTLINED_FUNCTION_47_4( v28,  (uint64_t)SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:));
  uint64_t v30 = OUTLINED_FUNCTION_26_2(v29);
  return OUTLINED_FUNCTION_24_1(v30, v31, v32, v33);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::ToggleDialogIds_optional __swiftcall SuggestionsCATsSimple.ToggleDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.ToggleDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::ToggleDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( rawValue,  v1);
}

uint64_t SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)( Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  _findStringSwitchCase(cases:string:)(cases, v4);
  OUTLINED_FUNCTION_58_2();
  if (v2 == 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v2) {
    return v6;
  }
  else {
    return 0LL;
  }
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::ToggleDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.ToggleDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::ToggleDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.ToggleDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.toggleAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = OUTLINED_FUNCTION_11_0();
  v6[9] = OUTLINED_FUNCTION_11_0();
  v6[10] = OUTLINED_FUNCTION_11_0();
  v6[11] = OUTLINED_FUNCTION_11_0();
  v6[12] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t SuggestionsCATsSimple.toggleAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_27_3(v2);
  uint64_t v4 = OUTLINED_FUNCTION_40_3(v3);
  *(_OWORD *)(v4 + 16) = xmmword_17F3D0;
  uint64_t v5 = OUTLINED_FUNCTION_31_3(v4, (uint64_t)"coldStartSuggestion");
  OUTLINED_FUNCTION_4_6(v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_9_3(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[15] = v0;
    char v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_32_2((uint64_t)"appBundleIdentifier");
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_18_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[21] = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_12_4(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = OUTLINED_FUNCTION_17_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[27] = v0;
    uint64_t v18 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v18);
  }

  uint64_t v19 = OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_12_4(v19, v20, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = OUTLINED_FUNCTION_19_2();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[33] = v0;
    uint64_t v22 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v22);
  }

  uint64_t v23 = OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_12_4(v23, v24, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_16_3();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v1[39] = v0;
    uint64_t v26 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v26);
  }

  uint64_t v27 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_44_1(v27);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds();
  OUTLINED_FUNCTION_46_4((uint64_t)SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:));
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_42_2();
  return OUTLINED_FUNCTION_23_3(v28, v29, v30, v31, v32, v33);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.ToggleDialogIds,  &type metadata for SuggestionsCATsSimple.ToggleDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.ToggleDialogIds,  &type metadata for SuggestionsCATsSimple.ToggleDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds);
  }

  return result;
}

uint64_t RunVoiceCommandCATsSimple.__allocating_init(templateDir:options:globals:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RunVoiceCommandCATsSimple.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t RunVoiceCommandCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SpeakableString?( a1,  (uint64_t)v12,  (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  outlined destroy of URL?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t outlined init with copy of SpeakableString?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

void RunVoiceCommandCATsSimple.__allocating_init(useResponseMode:options:)()
{
}

void RunVoiceCommandCATsSimple.init(useResponseMode:options:)()
{
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SuggestionsCATsSimple.Properties,  &type metadata for SuggestionsCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for SuggestionsCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for SuggestionsCATsSimple;
  if (!type metadata singleton initialization cache for SuggestionsCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SuggestionsCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for SuggestionsCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for SuggestionsCATsSimple);
}

uint64_t ObjC metadata update function for SuggestionsCATsSimple()
{
  return type metadata accessor for SuggestionsCATsSimple(0LL);
}

uint64_t getEnumTagSinglePayload for SuggestionsCATsSimple.Properties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for SuggestionsCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_205E4 + 4 * byte_17EBDF[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_20618 + 4 * byte_17EBDA[v4]))();
}

uint64_t sub_20618(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20620(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x20628LL);
  }
  return result;
}

uint64_t sub_20634(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x2063CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 9;
  return result;
}

uint64_t sub_20640(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20648(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SuggestionsCATsSimple.Properties()
{
}

void type metadata accessor for SuggestionsCATsSimple.CancelDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.CloseDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.CreateDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.DisableDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.EnableDialogIds()
{
}

_BYTE *destructiveInjectEnumTag for SuggestionsCATsSimple.NextDialogIds(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void type metadata accessor for SuggestionsCATsSimple.NextDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.OpenDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.PreviousDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.SearchDialogIds()
{
}

uint64_t getEnumTagSinglePayload for SuggestionsCATsSimple.CancelDialogIds( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for SuggestionsCATsSimple.CancelDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_207B4 + 4 * byte_17EBE9[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_207E8 + 4 * byte_17EBE4[v4]))();
}

uint64_t sub_207E8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_207F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x207F8LL);
  }
  return result;
}

uint64_t sub_20804(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x2080CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_20810(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20818(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SuggestionsCATsSimple.ToggleDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_0_7(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_1_6()
{
  uint64_t result = *(void *)(v0 + 48);
  *(void *)(v1 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0x7470697263736564LL;
  *(void *)(v1 + 280) = 0xEB000000006E6F69LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  uint64_t result = *(void *)(v0 + 32);
  *(void *)(v1 + 176) = 0x7954797469746E65LL;
  *(void *)(v1 + 184) = 0xEA00000000006570LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_8()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 112);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 120) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_4_6@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(result + 48) = v2;
  *(void *)(result + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
  *(void *)(result + 80) = 0x656D614E707061LL;
  *(void *)(result + 88) = 0xE700000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_5_3(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_6_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void *OUTLINED_FUNCTION_7_1@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  result[9] = a2;
  result[10] = 0x656D614E707061LL;
  result[11] = 0xE700000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  uint64_t result = *(void *)(v1 + 40);
  *(void *)(v2 + 224) = 0x614E797469746E65LL;
  *(void *)(v2 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  return result;
}

uint64_t OUTLINED_FUNCTION_9_3(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

void *OUTLINED_FUNCTION_10_2()
{
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_11_4(uint64_t a1, uint64_t *a2)
{
  return outlined destroy of URL?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_12_4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with copy of SpeakableString?(a1, v3, a3);
}

double OUTLINED_FUNCTION_14_4()
{
  double result = 0.0;
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_16_3()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_17_3()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_18_3()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_20_4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

  ;
}

uint64_t OUTLINED_FUNCTION_22_4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 104));
}

uint64_t OUTLINED_FUNCTION_23_3( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_24_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_25_4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a4;
  *(void *)(v7 + 40) = a5;
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  *(_BYTE *)(v7 + 128) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_26_2@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_27_3(uint64_t a1)
{
  return swift_allocObject(a1, 320LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_29_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_4()
{
  return *(void *)(v0 + 24);
}

uint64_t OUTLINED_FUNCTION_31_3@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v2;
  *(void *)(result + 40) = (a2 - 32) | 0x8000000000000000LL;
  return result;
}

void OUTLINED_FUNCTION_32_2(uint64_t a1@<X8>)
{
  *(void *)(v1 + 128) = v2;
  *(void *)(v1 + 136) = (a1 - 32) | 0x8000000000000000LL;
}

  ;
}

uint64_t OUTLINED_FUNCTION_40_3(uint64_t result)
{
  *(void *)(v1 + 104) = result;
  return result;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_44_1(uint64_t result)
{
  *(void *)(v1 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = result;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_46_4@<X0>(uint64_t a1@<X8>)
{
  *uint64_t v1 = v2;
  v1[1] = a1;
  return v3 - 1;
}

void *OUTLINED_FUNCTION_47_4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *double result = v2;
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_48_3()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_50_4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_54_2()
{
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

uint64_t OUTLINED_FUNCTION_55_2()
{
  return type metadata accessor for CATOption(0LL);
}

uint64_t OUTLINED_FUNCTION_56_2()
{
  return CATWrapperSimple.init(useResponseMode:options:)(v0, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_58_2()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t AutoShortcutInvocation.propertyIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(OUTLINED_FUNCTION_13_3() + 28);
  return outlined init with copy of UUID?(v3, a1);
}

uint64_t type metadata accessor for AutoShortcutInvocation(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for AutoShortcutInvocation;
  if (!type metadata singleton initialization cache for AutoShortcutInvocation) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AutoShortcutInvocation);
  }
  return result;
}

uint64_t AutoShortcutInvocation.provider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(OUTLINED_FUNCTION_13_3() + 32);
  return outlined init with copy of DeviceState(v3, a1);
}

id AutoShortcutInvocation.preferences.getter()
{
  return *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_13_3() + 36));
}

uint64_t AutoShortcutInvocation.init(directInvocationData:provider:preferences:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  specialized Dictionary.subscript.getter(0x6449656C646E7562LL, 0xE800000000000000LL, a1, &v39);
  if (!v41)
  {
    uint64_t v20 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v20);
    outlined destroy of Any?((uint64_t)&v39);
LABEL_13:
    unint64_t v22 = lazy protocol witness table accessor for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError();
    uint64_t v23 = swift_allocError(&type metadata for AutoShortcutInvocation.AutoShortcutInvocationError, v22, 0LL, 0LL);
    *uint64_t v24 = 0;
    swift_willThrow(v23, v24, v25, v26, v27);

    return __swift_destroy_boxed_opaque_existential_1Tm(a2);
  }

  if ((OUTLINED_FUNCTION_16_4(v12, v13, v14, (uint64_t)&type metadata for String) & 1) == 0)
  {
    uint64_t v21 = a1;
LABEL_12:
    swift_bridgeObjectRelease(v21);
    goto LABEL_13;
  }

  uint64_t v16 = v44;
  uint64_t v15 = v45;
  specialized Dictionary.subscript.getter(0xD000000000000012LL, 0x8000000000192CF0LL, a1, &v39);
  uint64_t v17 = OUTLINED_FUNCTION_28_4();
  if (!v41)
  {
    uint64_t v20 = v15;
    goto LABEL_10;
  }

  if (!OUTLINED_FUNCTION_16_4(v17, v18, v19, (uint64_t)&type metadata for String))
  {
    uint64_t v21 = v15;
    goto LABEL_12;
  }

  static AutoShortcutInvocation.parseServerVocabularyIdentifier(identifier:)(v44, v45, &v39);
  if (v4)
  {

    OUTLINED_FUNCTION_28_4();
    swift_bridgeObjectRelease(v15);
    return __swift_destroy_boxed_opaque_existential_1Tm(a2);
  }

  uint64_t v46 = v39;
  uint64_t v37 = v40;
  uint64_t v38 = *((void *)&v39 + 1);
  uint64_t v29 = v43;
  uint64_t v35 = v42;
  uint64_t v36 = v41;
  OUTLINED_FUNCTION_28_4();
  if (v29)
  {
    UUID.init(uuidString:)(v35, v29);
    swift_bridgeObjectRelease(v29);
  }

  else
  {
    uint64_t v30 = type metadata accessor for UUID(0LL);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 1LL, 1LL, v30);
  }

  outlined init with copy of DeviceState((uint64_t)a2, (uint64_t)&v39);
  id v31 = [(id)objc_opt_self(AFPreferences) sharedPreferences];

  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  *a4 = v16;
  a4[1] = v15;
  uint64_t v32 = v38;
  a4[2] = v46;
  a4[3] = v32;
  uint64_t v33 = v36;
  a4[4] = v37;
  a4[5] = v33;
  uint64_t v34 = (int *)type metadata accessor for AutoShortcutInvocation(0LL);
  outlined init with take of UUID?((uint64_t)v11, (uint64_t)a4 + v34[7]);
  uint64_t result = outlined init with take of AceServiceInvokerAsync(&v39, (uint64_t)a4 + v34[8]);
  *(uint64_t *)((char *)a4 + v34[9]) = (uint64_t)v31;
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError;
  if (!lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutInvocation.AutoShortcutInvocationError,  &type metadata for AutoShortcutInvocation.AutoShortcutInvocationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError;
  if (!lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutInvocation.AutoShortcutInvocationError,  &type metadata for AutoShortcutInvocation.AutoShortcutInvocationError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError);
  }

  return result;
}

uint64_t static AutoShortcutInvocation.parseServerVocabularyIdentifier(identifier:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v22[2] = a1;
  v22[3] = a2;
  v22[0] = 8995LL;
  v22[1] = 0xE200000000000000LL;
  unint64_t v4 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v5 = (void *)StringProtocol.components<A>(separatedBy:)( v22,  &type metadata for String,  &type metadata for String,  v4,  v4);
  uint64_t v6 = v5;
  uint64_t v7 = v5[2];
  if (!v7)
  {
    char v8 = 1;
    goto LABEL_5;
  }

  if (v7 == 1)
  {
    char v8 = 2;
LABEL_5:
    swift_bridgeObjectRelease(v5);
    unint64_t v9 = lazy protocol witness table accessor for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError();
    uint64_t v10 = swift_allocError(&type metadata for AutoShortcutInvocation.AutoShortcutInvocationError, v9, 0LL, 0LL);
    *uint64_t v11 = v8;
    return swift_willThrow(v10, v11, v12, v13, v14);
  }

  uint64_t v17 = v5[4];
  uint64_t v16 = v5[5];
  uint64_t v19 = v5[6];
  uint64_t v18 = v5[7];
  if (v7 == 3)
  {
    uint64_t v21 = v5[8];
    uint64_t v20 = v5[9];
    swift_bridgeObjectRetain(v20);
  }

  else
  {
    uint64_t v21 = 0LL;
    uint64_t v20 = 0LL;
  }

  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v18);
  uint64_t result = swift_bridgeObjectRelease(v6);
  *a3 = v17;
  a3[1] = v16;
  a3[2] = v19;
  a3[3] = v18;
  a3[4] = v21;
  a3[5] = v20;
  return result;
}

uint64_t AutoShortcutInvocation.init(bundleId:actionIdentifier:baseTemplatePhrase:propertyIdentifier:provider:preferences:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int128 *a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  uint64_t v13 = (int *)OUTLINED_FUNCTION_13_3();
  outlined init with take of UUID?(a7, (uint64_t)a9 + v13[7]);
  uint64_t result = outlined init with take of AceServiceInvokerAsync(a8, (uint64_t)a9 + v13[8]);
  *(void *)((char *)a9 + v13[9]) = a10;
  return result;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t AutoShortcutInvocation.action.getter()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for OSSignpostError(0LL);
  v1[7] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[8] = v3;
  void v1[9] = OUTLINED_FUNCTION_4_0(v3);
  v1[10] = OUTLINED_FUNCTION_11_0();
  uint64_t v4 = OUTLINED_FUNCTION_13_3();
  v1[11] = v4;
  v1[12] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for OSSignpostID(0LL);
  v1[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[14] = v6;
  v1[15] = OUTLINED_FUNCTION_4_0(v6);
  v1[16] = OUTLINED_FUNCTION_11_0();
  v1[17] = OUTLINED_FUNCTION_11_0();
  v1[18] = OUTLINED_FUNCTION_11_0();
  uint64_t v7 = type metadata accessor for OSSignposter(0LL);
  v1[19] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v1[20] = v8;
  v1[21] = OUTLINED_FUNCTION_9_0(v8);
  return OUTLINED_FUNCTION_21_0();
}

void AutoShortcutInvocation.action.getter()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[12];
  uint64_t v6 = __swift_project_value_buffer(v4, (uint64_t)static Signposter.voiceCommands);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  uint64_t v8 = OSSignposter.logHandle.getter(v7);
  OSSignpostID.init(log:)(v8);
  uint64_t v9 = outlined init with copy of AutoShortcutInvocation(v1, v5);
  uint64_t v10 = (os_log_s *)OSSignposter.logHandle.getter(v9);
  static os_signpost_type_t.begin.getter();
  if ((OUTLINED_FUNCTION_35_4() & 1) != 0)
  {
    uint64_t v31 = v0[17];
    uint64_t v35 = v0[14];
    uint64_t v11 = (uint64_t *)v0[12];
    uint64_t v32 = v0[13];
    uint64_t v34 = *(void (**)(void))(v35 + 16);
    v34();
    os_signpost_type_t v30 = v4;
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v13 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v36 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v15 = *v11;
    unint64_t v14 = v11[1];
    OUTLINED_FUNCTION_17_1();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v12 + 4);
    swift_bridgeObjectRelease(v14);
    uint64_t v16 = outlined destroy of AutoShortcutInvocation((uint64_t)v11);
    os_signpost_id_t v17 = OSSignpostID.rawValue.getter(v16);
    _os_signpost_emit_with_name_impl( &dword_0,  v10,  v30,  v17,  "FetchActionForAutoShortcutPhrase",  "BundleId: %s",  v12,  0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v13);
    OUTLINED_FUNCTION_1_0((uint64_t)v12);

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v31, v32);
    uint64_t v18 = v34;
  }

  else
  {
    uint64_t v19 = v0[14];
    uint64_t v20 = v0[12];

    outlined destroy of AutoShortcutInvocation(v20);
    uint64_t v18 = *(void (**)(void))(v19 + 16);
  }

  uint64_t v21 = v0[14];
  uint64_t v22 = v0[11];
  uint64_t v23 = v0[6];
  ((void (*)(void, void, void))v18)(v0[17], v0[18], v0[13]);
  uint64_t v24 = type metadata accessor for OSSignpostIntervalState(0LL);
  OUTLINED_FUNCTION_51(v24);
  v0[22] = OUTLINED_FUNCTION_19_3();
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
  v0[23] = v25;
  OUTLINED_FUNCTION_30_1(v25);
  uint64_t v26 = (void *)(v23 + *(int *)(v22 + 32));
  uint64_t v27 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v26[3]);
  uint64_t v28 = *(int **)(v27 + 24);
  uint64_t v33 = (char *)v28 + *v28;
  uint64_t v29 = (void *)swift_task_alloc(v28[1]);
  v0[24] = v29;
  *uint64_t v29 = v0;
  v29[1] = AutoShortcutInvocation.action.getter;
  __asm { BR              X8 }

uint64_t AutoShortcutInvocation.action.getter(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  void v3[3] = a1;
  v3[4] = v1;
  uint64_t v4 = v3[24];
  v3[25] = v1;
  swift_task_dealloc(v4);
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  os_signpost_id_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v2 = *(void *)(v1 + 176);
  uint64_t v3 = (os_log_s *)OSSignposter.logHandle.getter(a1);
  uint64_t v4 = OUTLINED_FUNCTION_18_4();
  static os_signpost_type_t.end.getter(v4);
  if ((OUTLINED_FUNCTION_36_3() & 1) != 0)
  {
    uint64_t v6 = *(void *)(v1 + 56);
    uint64_t v5 = *(void *)(v1 + 64);
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_33_4();
    OUTLINED_FUNCTION_12_5();
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    uint64_t v8 = OUTLINED_FUNCTION_21_3(v7);
    OUTLINED_FUNCTION_6_6(&dword_0, v3, (os_signpost_type_t)v2, v8, "FetchActionForAutoShortcutPhrase");
    OUTLINED_FUNCTION_1_0(v6);
  }

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v1 + 184);
  uint64_t v10 = *(void *)(v1 + 160);
  uint64_t v12 = *(void *)(v1 + 128);
  uint64_t v11 = *(void *)(v1 + 136);
  uint64_t v13 = *(void *)(v1 + 104);
  uint64_t v15 = *(void *)(v1 + 120);
  uint64_t v16 = *(void *)(v1 + 96);
  os_signpost_id_t v17 = *(void *)(v1 + 80);
  uint64_t v18 = *(void *)(v1 + 72);
  uint64_t v19 = *(void *)(v1 + 24);

  v9(v12, v13);
  swift_release();
  OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_31();
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v19);
}

{
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  os_signpost_id_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v2 = *(void *)(v1 + 176);
  uint64_t v3 = (os_log_s *)OSSignposter.logHandle.getter(a1);
  uint64_t v4 = OUTLINED_FUNCTION_18_4();
  static os_signpost_type_t.end.getter(v4);
  if ((OUTLINED_FUNCTION_36_3() & 1) != 0)
  {
    uint64_t v5 = *(void *)(v1 + 64);
    uint64_t v6 = *(void *)(v1 + 56);
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_33_4();
    OUTLINED_FUNCTION_12_5();
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    uint64_t v8 = OUTLINED_FUNCTION_21_3(v7);
    OUTLINED_FUNCTION_6_6(&dword_0, v3, (os_signpost_type_t)v2, v8, "FetchActionForAutoShortcutPhrase");
    OUTLINED_FUNCTION_1_0(v6);
  }

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v1 + 184);
  uint64_t v11 = *(void *)(v1 + 160);
  uint64_t v10 = *(void *)(v1 + 168);
  uint64_t v12 = *(void *)(v1 + 152);
  uint64_t v13 = *(void *)(v1 + 120);
  unint64_t v14 = *(void *)(v1 + 104);
  uint64_t v16 = *(void *)(v1 + 128);
  os_signpost_id_t v17 = *(void *)(v1 + 96);
  uint64_t v18 = *(void *)(v1 + 80);
  uint64_t v19 = *(void *)(v1 + 72);

  v9(v13, v14);
  OUTLINED_FUNCTION_12_5();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  swift_task_dealloc(v16);
  swift_task_dealloc(v13);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t AutoShortcutInvocation.autoShortcuts.getter()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(AutoShortcutInvocation.autoShortcuts.getter, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = OUTLINED_FUNCTION_13_3();
  uint64_t v5 = (uint64_t)v1 + *(int *)(v4 + 32);
  uint64_t v6 = *(uint64_t *)((char *)v1 + *(int *)(v4 + 36));
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (void *)swift_task_alloc(dword_2154C4);
  *(void *)(v0 + 24) = v9;
  *uint64_t v9 = v0;
  v9[1] = AutoShortcutInvocation.autoShortcuts.getter;
  return static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:)( v3,  v2,  v5,  v6,  v7,  v8);
}

uint64_t AutoShortcutInvocation.autoShortcuts.getter(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 24));
  return OUTLINED_FUNCTION_8_4(a1, *(uint64_t (**)(void))(v4 + 8));
}

uint64_t static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  uint64_t v7 = type metadata accessor for OSSignpostError(0LL);
  v6[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[13] = v8;
  v6[14] = OUTLINED_FUNCTION_4_0(v8);
  v6[15] = OUTLINED_FUNCTION_11_0();
  uint64_t v9 = type metadata accessor for OSSignpostID(0LL);
  v6[16] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[17] = v10;
  v6[18] = OUTLINED_FUNCTION_4_0(v10);
  v6[19] = OUTLINED_FUNCTION_11_0();
  v6[20] = OUTLINED_FUNCTION_11_0();
  v6[21] = OUTLINED_FUNCTION_11_0();
  uint64_t v11 = type metadata accessor for OSSignposter(0LL);
  v6[22] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v6[23] = v12;
  v6[24] = OUTLINED_FUNCTION_9_0(v12);
  return OUTLINED_FUNCTION_21_0();
}

uint64_t static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:)()
{
  uint64_t v2 = outlined bridged method (pb) of @objc AFPreferences.languageCode()(*(void **)(v1 + 72));
  *(void *)(v1 + 200) = v2;
  *(void *)(v1 + 208) = v3;
  if (v3)
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v6 = *(void *)(v1 + 184);
    uint64_t v7 = *(void *)(v1 + 192);
    uint64_t v8 = *(void *)(v1 + 176);
    uint64_t v9 = *(void *)(v1 + 56);
    uint64_t v10 = __swift_project_value_buffer(v8, (uint64_t)static Signposter.voiceCommands);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v10, v8);
    uint64_t v12 = OSSignposter.logHandle.getter(v11);
    OSSignpostID.init(log:)(v12);
    uint64_t v13 = swift_bridgeObjectRetain_n(v9, 2LL);
    unint64_t v14 = (os_log_s *)OSSignposter.logHandle.getter(v13);
    os_signpost_type_t v15 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v40 = *(void *)(v1 + 48);
      uint64_t v41 = *(void *)(v1 + 160);
      uint64_t v45 = *(void *)(v1 + 136);
      os_signpost_type_t v42 = v15;
      unint64_t v16 = *(void *)(v1 + 56);
      uint64_t v43 = *(void *)(v1 + 128);
      uint64_t v44 = *(void (**)(void))(v45 + 16);
      v44();
      os_signpost_id_t v17 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v18 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v47 = v18;
      *(_DWORD *)os_signpost_id_t v17 = 136315138;
      swift_bridgeObjectRetain(v16);
      *(void *)(v1 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v16, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v17 + 4);
      uint64_t v19 = OUTLINED_FUNCTION_37_3(v16);
      os_signpost_id_t v20 = OSSignpostID.rawValue.getter(v19);
      _os_signpost_emit_with_name_impl( &dword_0,  v14,  v42,  v20,  "AutoShortcutFirstRunFlowFetchAutoShortcuts",  "BundleId: %s)",  v17,  0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v18);
      OUTLINED_FUNCTION_1_0((uint64_t)v17);

      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v41, v43);
      uint64_t v21 = v44;
    }

    else
    {
      uint64_t v28 = *(void *)(v1 + 136);
      uint64_t v29 = *(void *)(v1 + 56);

      OUTLINED_FUNCTION_19_1(v29);
      uint64_t v21 = *(void (**)(void))(v28 + 16);
    }

    uint64_t v30 = *(void *)(v1 + 168);
    uint64_t v31 = *(void *)(v1 + 128);
    uint64_t v32 = *(void *)(v1 + 136);
    uint64_t v33 = *(void **)(v1 + 64);
    ((void (*)(void, uint64_t, uint64_t))v21)(*(void *)(v1 + 160), v30, v31);
    uint64_t v34 = type metadata accessor for OSSignpostIntervalState(0LL);
    OUTLINED_FUNCTION_51(v34);
    *(void *)(v1 + 216) = OUTLINED_FUNCTION_19_3();
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    *(void *)(v1 + 224) = v35;
    v35(v30, v31);
    uint64_t v36 = v33[3];
    uint64_t v37 = v33[4];
    __swift_project_boxed_opaque_existential_1(v33, v36);
    uint64_t v38 = *(int **)(v37 + 8);
    uint64_t v46 = (int *)((char *)v38 + *v38);
    __int128 v39 = (void *)swift_task_alloc(v38[1]);
    *(void *)(v1 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v39;
    *__int128 v39 = v1;
    v39[1] = static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:);
    return ((uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))v46)( *(void *)(v1 + 48),  *(void *)(v1 + 56),  v4,  v5,  v36,  v37);
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.voiceCommands);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_45_0(v25))
    {
      uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v0, "AutoShortcutInvocation cannot get Siri language", v26, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v26);
    }

    OUTLINED_FUNCTION_20_5();
    swift_task_dealloc(v24);
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    return (*(uint64_t (**)(void *))(v1 + 8))(_swiftEmptyArrayStorage);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  os_log_s *v4;
  uint64_t v5;
  os_signpost_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  os_signpost_id_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v1 = *(void *)(v0 + 240);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (uint64_t *)(v0 + 16);
  uint64_t v3 = swift_bridgeObjectRetain(v1);
  uint64_t v4 = (os_log_s *)OSSignposter.logHandle.getter(v3);
  uint64_t v5 = OSSignpostIntervalState.signpostID.getter();
  uint64_t v6 = static os_signpost_type_t.end.getter(v5);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v7 = *(void *)(v0 + 120);
    uint64_t v8 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v10 = OUTLINED_FUNCTION_24_2();
    checkForErrorAndConsumeState(state:)(v10);
    OUTLINED_FUNCTION_12_5();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v9 + 88))(v7, v8) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v11 = "[Error] Interval already ended";
    }

    else
    {
      OUTLINED_FUNCTION_14_5(*(void *)(v0 + 104));
      uint64_t v11 = "";
    }

    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v12 = 0;
    uint64_t v13 = OSSignpostID.rawValue.getter(v12);
    _os_signpost_emit_with_name_impl(&dword_0, v4, v6, v13, "AutoShortcutFirstRunFlowFetchAutoShortcuts", v11, v12, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v12);
  }

  unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  os_signpost_type_t v15 = *(void *)(v0 + 152);
  unint64_t v16 = *(void *)(v0 + 128);
  os_signpost_id_t v17 = *(void *)(v0 + 88);

  v14(v15, v16);
  if (!v17)
  {
    uint64_t v27 = *(void *)(v0 + 240);
    OUTLINED_FUNCTION_14_5(*(void *)(v0 + 184));
    swift_release();
    swift_bridgeObjectRelease(v27);
    goto LABEL_12;
  }

  uint64_t v18 = *(void *)(v0 + 240);
  os_signpost_id_t v20 = *(void *)(v0 + 80);
  uint64_t v19 = *(void *)(v0 + 88);
  OUTLINED_FUNCTION_17_1();
  uint64_t v21 = specialized Collection.firstIndex(where:)(v18, v20, v19);
  uint64_t v23 = v22;
  OUTLINED_FUNCTION_1_2();
  if ((v23 & 1) != 0)
  {
    OUTLINED_FUNCTION_14_5(*(void *)(v0 + 184));
    OUTLINED_FUNCTION_12_5();
    goto LABEL_12;
  }

  uint64_t v24 = specialized Array.remove(at:)(v21);
  os_log_type_t v25 = *v2;
  if (!((unint64_t)*v2 >> 62)
    || (v25 < 0 ? (uint64_t v31 = *v2) : (uint64_t v31 = v25 & 0xFFFFFFFFFFFFFF8LL),
        swift_bridgeObjectRetain(*v2),
        uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v31),
        uint64_t result = swift_bridgeObjectRelease(v25),
        (v32 & 0x8000000000000000LL) == 0))
  {
    uint64_t v26 = *(void *)(v0 + 184);
    specialized Array.replaceSubrange<A>(_:with:)(0LL, 0LL, v24);
    swift_release();
    OUTLINED_FUNCTION_17_4(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
LABEL_12:
    uint64_t v28 = *(void *)(v0 + 16);
    uint64_t v29 = *(void *)(v0 + 112);
    swift_task_dealloc(*(void *)(v0 + 192));
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v28);
  }

  __break(1u);
  return result;
}

uint64_t static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:)( uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 232LL);
  v3[30] = a1;
  v3[31] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:);
  }

  else
  {
    swift_bridgeObjectRelease(v3[26]);
    uint64_t v5 = static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:);
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  os_signpost_id_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_s *v15;
  os_log_type_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v2 = *(void *)(v1 + 216);
  uint64_t v3 = (os_log_s *)OSSignposter.logHandle.getter(a1);
  uint64_t v4 = OUTLINED_FUNCTION_18_4();
  static os_signpost_type_t.end.getter(v4);
  if ((OUTLINED_FUNCTION_35_4() & 1) != 0)
  {
    uint64_t v5 = *(void *)(v1 + 104);
    uint64_t v6 = *(void *)(v1 + 96);
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_33_4();
    OUTLINED_FUNCTION_12_5();
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    uint64_t v8 = OUTLINED_FUNCTION_21_3(v7);
    OUTLINED_FUNCTION_6_6(&dword_0, v3, (os_signpost_type_t)v2, v8, "AutoShortcutFirstRunFlowFetchAutoShortcuts");
    OUTLINED_FUNCTION_1_0(v6);
  }

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v1 + 224);
  uint64_t v10 = *(void *)(v1 + 144);
  uint64_t v11 = *(void *)(v1 + 128);

  v9(v10, v11);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v12 = *(void *)(v1 + 56);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n(v12, 2LL);
  unint64_t v14 = OUTLINED_FUNCTION_17_1();
  os_signpost_type_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  unint64_t v16 = static os_log_type_t.error.getter();
  os_signpost_id_t v17 = OUTLINED_FUNCTION_45_0(v16);
  uint64_t v18 = *(void *)(v1 + 208);
  if (v17)
  {
    uint64_t v26 = *(void *)(v1 + 200);
    uint64_t v19 = *(void *)(v1 + 48);
    os_signpost_id_t v20 = *(void *)(v1 + 56);
    uint64_t v21 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v22 = OUTLINED_FUNCTION_38(64LL);
    uint64_t v27 = v22;
    *(_DWORD *)uint64_t v21 = 136315394;
    swift_bridgeObjectRetain(v20);
    *(void *)(v1 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v21 + 4);
    OUTLINED_FUNCTION_37_3(v20);
    *(_WORD *)(v21 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
    swift_bridgeObjectRetain(v18);
    *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v21 + 14);
    OUTLINED_FUNCTION_37_3(v18);
    _os_log_impl( &dword_0,  v15,  (os_log_type_t)v12,  "AutoShortcutInvocation cannot get AppShortcuts for bundleId=%s; siriLanguage%s",
      (uint8_t *)v21,
      0x16u);
    swift_arrayDestroy(v22, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v22);
    OUTLINED_FUNCTION_1_0(v21);
  }

  else
  {
    OUTLINED_FUNCTION_19_1(*(void *)(v1 + 56));

    OUTLINED_FUNCTION_19_1(v18);
  }

  uint64_t v23 = *(void *)(v1 + 248);
  uint64_t v24 = *(void *)(v1 + 184);
  swift_release();
  swift_errorRelease(v23);
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
  OUTLINED_FUNCTION_20_5();
  swift_task_dealloc(v23);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return (*(uint64_t (**)(void *))(v1 + 8))(_swiftEmptyArrayStorage);
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 >> 62) {
    goto LABEL_32;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  while (v5)
  {
    uint64_t v36 = a2;
    uint64_t v6 = 0LL;
    unint64_t v7 = v4 & 0xC000000000000001LL;
    uint64_t v30 = v4 + 32;
    unint64_t v31 = v4 & 0xC000000000000001LL;
    uint64_t v32 = v5;
    uint64_t v33 = v4;
    while (1)
    {
      id v8 = v7 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4) : *(id *)(v30 + 8 * v6);
      uint64_t v4 = (uint64_t)v8;
      id v9 = objc_msgSend(v8, "orderedPhrases", v30);
      type metadata accessor for LNAutoShortcut( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase,  &OBJC_CLASS___LNAutoShortcutLocalizedPhrase_ptr);
      uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

      uint64_t v34 = v6;
      uint64_t v35 = (void *)v4;
      uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFF8LL));
      swift_bridgeObjectRetain(a3);
      swift_bridgeObjectRetain(v11);
      if (v12) {
        goto LABEL_9;
      }
LABEL_20:
      swift_bridgeObjectRelease(a3);

      uint64_t result = swift_bridgeObjectRelease_n(v11, 2LL);
      uint64_t v6 = v34 + 1;
      if (__OFADD__(v34, 1LL))
      {
        __break(1u);
        return result;
      }

      uint64_t v4 = v33;
      unint64_t v7 = v31;
      if (v6 == v32) {
        goto LABEL_36;
      }
    }

    if (v11 < 0) {
      uint64_t v25 = v11;
    }
    else {
      uint64_t v25 = v11 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v11);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v25);
    if (!v12) {
      goto LABEL_20;
    }
LABEL_9:
    unint64_t v37 = v11 & 0xC000000000000001LL;
    uint64_t v13 = 4LL;
    while (1)
    {
      id v14 = v37
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v11)
          : *(id *)(v11 + 8 * v13);
      os_signpost_type_t v15 = v14;
      uint64_t v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1LL)) {
        break;
      }
      uint64_t v4 = v11;
      uint64_t v17 = a3;
      id v18 = [v14 basePhraseTemplate];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      a3 = v17;
      if (v19 == v36 && v21 == v17)
      {
        swift_bridgeObjectRelease(v4);

        uint64_t v26 = v17;
LABEL_30:
        uint64_t v27 = v34;
        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease_n(a3, 2LL);

        goto LABEL_37;
      }

      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v36, v17, 0LL);

      swift_bridgeObjectRelease(v21);
      if ((v23 & 1) != 0)
      {
        uint64_t v26 = v4;
        goto LABEL_30;
      }

      ++v13;
      uint64_t v11 = v4;
      if (v16 == v12) {
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_32:
    if (v4 < 0) {
      uint64_t v28 = v4;
    }
    else {
      uint64_t v28 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v29 = a2;
    swift_bridgeObjectRetain(v4);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v4);
    a2 = v29;
  }

LABEL_36:
  uint64_t v27 = 0LL;
  uint64_t v4 = a3;
LABEL_37:
  swift_bridgeObjectRelease(v4);
  return v27;
}

        __break(1u);
        goto LABEL_37;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_36;
  }

  uint64_t v19 = v17;
  OUTLINED_FUNCTION_167(v3, v2, v16, v17);
  OUTLINED_FUNCTION_140_0();
  swift_bridgeObjectRelease(v19);
  if (one-time initialization token for voiceCommandTextNode != -1) {
LABEL_37:
  }
    swift_once( &one-time initialization token for voiceCommandTextNode,  one-time initialization function for voiceCommandTextNode);
  uint64_t v20 = static VoiceCommandsNLIntent.voiceCommandTextNode;
  uint64_t v21 = OUTLINED_FUNCTION_103();
  char v23 = OUTLINED_FUNCTION_56_16( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  v22,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_71_6(v20, v21, v23);

  return *(void *)&v36;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000LL) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = result;
    *uint64_t v1 = result;
  }

  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v6 - 1 - a1;
    uint64_t v9 = v5 + 8 * a1;
    uint64_t v10 = *(void *)(v9 + 32);
    uint64_t v11 = specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9 + 40, v8, v9 + 32);
    *(void *)(v5 + 16) = v7;
    specialized Array._endMutation()(v11, v12, v13);
    return v10;
  }

  return result;
}

uint64_t protocol witness for AppShortcutInvoking.action.getter in conformance AutoShortcutInvocation()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_2154B4);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppShortcutInvoking.action.getter in conformance AutoShortcutInvocation;
  return AutoShortcutInvocation.action.getter();
}

uint64_t protocol witness for AppShortcutInvoking.action.getter in conformance AutoShortcutInvocation( uint64_t a1)
{
  uint64_t v4 = OUTLINED_FUNCTION_16_1();
  if (!v1) {
    uint64_t v4 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(v4);
}

uint64_t protocol witness for AppShortcutInvoking.autoShortcuts.getter in conformance AutoShortcutInvocation()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_2154BC);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AppShortcutInvoking.autoShortcuts.getter in conformance AutoShortcutInvocation;
  return AutoShortcutInvocation.autoShortcuts.getter();
}

uint64_t protocol witness for AppShortcutInvoking.autoShortcuts.getter in conformance AutoShortcutInvocation( uint64_t a1)
{
  return OUTLINED_FUNCTION_8_4(a1, *(uint64_t (**)(void))(v1 + 8));
}

id protocol witness for AppShortcutInvoking.preferences.getter in conformance AutoShortcutInvocation( uint64_t a1)
{
  return *(id *)(v1 + *(int *)(a1 + 36));
}

uint64_t ShortcutDoneButton.workflowName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t protocol witness for AppShortcutInvoking.provider.getter in conformance AutoShortcutInvocation@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of DeviceState(v2 + *(int *)(a1 + 32), a2);
}

uint64_t closure #1 in _globalStringTablePointerOfStaticString(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

void closure #1 in osSignpostWithoutMessage(log:name:id:type:state:formatString:)( uint8_t *a1, uint32_t a2, os_log_s *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_0, a3, a4, v13, a6, a7, a1, a2);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    uint64_t v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      uint64_t v9 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
      goto LABEL_4;
    }
  }

  if (v7 < 0) {
    uint64_t v22 = v7;
  }
  else {
    uint64_t v22 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  OUTLINED_FUNCTION_9_4();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v22);
  OUTLINED_FUNCTION_1_2();
LABEL_4:
  if (v9 < v5)
  {
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
    goto LABEL_9;
  }

LABEL_37:
  if (v7 < 0) {
    uint64_t v23 = v7;
  }
  else {
    uint64_t v23 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  OUTLINED_FUNCTION_9_4();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v23);
  OUTLINED_FUNCTION_1_2();
LABEL_9:
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8))
  {
    __break(1u);
LABEL_42:
    if (v7 < 0) {
      uint64_t v24 = v7;
    }
    else {
      uint64_t v24 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_9_4();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v24);
    OUTLINED_FUNCTION_1_2();
    goto LABEL_17;
  }

  uint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *uint64_t v4 = v7;
  uint64_t v10 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v10 = 1LL;
  }

  uint64_t v14 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
LABEL_17:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  OUTLINED_FUNCTION_9_4();
  uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1LL, v7);
  swift_bridgeObjectRelease(*v4);
  *uint64_t v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
LABEL_20:
  os_signpost_type_t v15 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for LNAutoShortcut( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut,  &OBJC_CLASS___LNAutoShortcut_ptr);
  uint64_t result = swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *os_signpost_type_t v15 = v3;
    return specialized Array._endMutation()(result, v18, v19);
  }

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v25 = v7;
    }
    else {
      uint64_t v25 = v13;
    }
    OUTLINED_FUNCTION_9_4();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v25);
    OUTLINED_FUNCTION_1_2();
  }

  else
  {
    uint64_t v20 = *(void *)(v13 + 16);
  }

  if (__OFSUB__(v20, v5))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13 + 32 + 8 * v5, v20 - v5, v15 + 1);
    if (!((unint64_t)v7 >> 62))
    {
      uint64_t v21 = *(void *)(v13 + 16);
      goto LABEL_26;
    }
  }

  if (v7 < 0) {
    uint64_t v26 = v7;
  }
  else {
    uint64_t v26 = v13;
  }
  OUTLINED_FUNCTION_9_4();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v26);
  uint64_t result = OUTLINED_FUNCTION_1_2();
LABEL_26:
  if (!__OFADD__(v21, v8))
  {
    *(void *)(v13 + 16) = v21 + v8;
    goto LABEL_28;
  }

  __break(1u);
  return result;
}

  swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  goto LABEL_32;
}

char *specialized Array.replaceSubrange<A>(_:with:)(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16LL);
  if (v7 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v8 = result;
  uint64_t v9 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v7, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v4) || v7 + v10 > *(void *)(v6 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v6 = v13;
  }

  uint64_t v14 = v6 + 32 + 16LL * (void)v8;
  uint64_t result = (char *)swift_arrayDestroy(v14, v9, &type metadata for String);
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v15 = *(void *)(v6 + 16);
  if (__OFSUB__(v15, a2)) {
    goto LABEL_19;
  }
  uint64_t result = specialized UnsafeMutablePointer.moveInitialize(from:count:)( (char *)(v6 + 32 + 16 * a2),  v15 - a2,  (char *)(v14 + 16));
  uint64_t v16 = *(void *)(v6 + 16);
  BOOL v17 = __OFADD__(v16, v10);
  uint64_t v18 = v16 + v10;
  if (!v17)
  {
    *(void *)(v6 + 16) = v18;
LABEL_13:
    *(void *)uint64_t v14 = a3;
    *(void *)(v14 + 8) = a4;
    *uint64_t v4 = v6;
    return result;
  }

uint64_t outlined bridged method (pb) of @objc AFPreferences.languageCode()(void *a1)
{
  id v1 = [a1 languageCode];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t *initializeBufferWithCopyOfBuffer for AutoShortcutInvocation(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v13 = type metadata accessor for UUID(0LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1LL, v13))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0LL, 1LL, v13);
    }

    uint64_t v16 = a3[8];
    __int128 v17 = *(_OWORD *)((char *)a2 + v16 + 24);
    *(_OWORD *)((char *)v4 + v16 + 24) = v17;
    (**(void (***)(void))(v17 - 8))();
    uint64_t v18 = a3[9];
    uint64_t v19 = *(void **)((char *)a2 + v18);
    *(uint64_t *)((char *)v4 + v18) = (uint64_t)v19;
    id v20 = v19;
  }

  return v4;
}

void destroy for AutoShortcutInvocation(void *a1, int *a2)
{
  uint64_t v4 = (uint64_t)a1 + a2[7];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + a2[8]));
}

void *initializeWithCopy for AutoShortcutInvocation(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1LL, v12))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0LL, 1LL, v12);
  }

  uint64_t v14 = a3[8];
  __int128 v15 = *(_OWORD *)((char *)a2 + v14 + 24);
  *(_OWORD *)((char *)a1 + v14 + 24) = v15;
  (**(void (***)(void))(v15 - 8))();
  uint64_t v16 = a3[9];
  __int128 v17 = *(void **)((char *)a2 + v16);
  *(void *)((char *)a1 + v16) = v17;
  id v18 = v17;
  return a1;
}

void *assignWithCopy for AutoShortcutInvocation(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1LL, v15);
  if (!EnumTagSinglePayload)
  {
    uint64_t v18 = *(void *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v13, v14, v15);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0LL, 1LL, v15);
LABEL_7:
  __swift_assign_boxed_opaque_existential_1((void *)((char *)a1 + a3[8]), (void *)((char *)a2 + a3[8]));
  uint64_t v20 = a3[9];
  uint64_t v21 = *(void **)((char *)a2 + v20);
  uint64_t v22 = *(void **)((char *)a1 + v20);
  *(void *)((char *)a1 + v20) = v21;
  id v23 = v21;

  return a1;
}

void *__swift_assign_boxed_opaque_existential_1(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

_OWORD *initializeWithTake for AutoShortcutInvocation(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  int v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[8];
  uint64_t v13 = a3[9];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  __int128 v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  *((void *)v14 + 4) = *((void *)v15 + 4);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  return a1;
}

void *assignWithTake for AutoShortcutInvocation(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1LL, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1LL, v15);
  if (!EnumTagSinglePayload)
  {
    uint64_t v18 = *(void *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v13, v14, v15);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0LL, 1LL, v15);
LABEL_7:
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v20));
  __int128 v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((void *)v21 + 4) = *((void *)v22 + 4);
  uint64_t v24 = a3[9];
  uint64_t v25 = *(void **)((char *)a1 + v24);
  *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);

  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutInvocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2351C);
}

uint64_t sub_2351C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 28), a2, v8);
  }

uint64_t storeEnumTagSinglePayload for AutoShortcutInvocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_235A0);
}

uint64_t sub_235A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }

  return result;
}

void type metadata completion function for AutoShortcutInvocation(uint64_t a1)
{
  v4[0] = &unk_17F508;
  v4[1] = &unk_17F508;
  __int128 v4[2] = &unk_17F508;
  type metadata accessor for UUID?(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(v2 - 8) + 64LL;
    v4[4] = &unk_17F520;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
  }

void type metadata accessor for UUID?(uint64_t a1)
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    uint64_t v2 = type metadata accessor for UUID(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }

uint64_t storeEnumTagSinglePayload for AutoShortcutInvocation.AutoShortcutInvocationError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_23740 + 4 * byte_17F3E5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23774 + 4 * byte_17F3E0[v4]))();
}

uint64_t sub_23774(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2377C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x23784LL);
  }
  return result;
}

uint64_t sub_23790(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x23798LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_2379C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237A4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutInvocation.AutoShortcutInvocationError()
{
  return &type metadata for AutoShortcutInvocation.AutoShortcutInvocationError;
}

void type metadata accessor for LNAutoShortcut(uint64_t a1, unint64_t *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }

  OUTLINED_FUNCTION_1();
}

void closure #1 in osSignpost(_:log:name:id:type:state:formatStringTransform:)( uint8_t *a1, uint32_t a2, os_log_s *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
}

void OUTLINED_FUNCTION_6_6( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
}

uint64_t OUTLINED_FUNCTION_8_4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  return type metadata accessor for AutoShortcutInvocation(0LL);
}

uint64_t OUTLINED_FUNCTION_14_5@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t OUTLINED_FUNCTION_16_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 96, v5 - 144, v4 + 8, a4, 6LL);
}

uint64_t OUTLINED_FUNCTION_17_4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_18_4()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OUTLINED_FUNCTION_19_3()
{
  return OSSignpostIntervalState.init(id:isOpen:)(v0, 1LL);
}

uint64_t OUTLINED_FUNCTION_20_5()
{
  return swift_task_dealloc(*(void *)(v0 + 192));
}

uint64_t OUTLINED_FUNCTION_21_3(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

uint64_t OUTLINED_FUNCTION_24_2()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_28_4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_33_4()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t OUTLINED_FUNCTION_35_4()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t OUTLINED_FUNCTION_36_3()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t OUTLINED_FUNCTION_37_3(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

unint64_t lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors;
  if (!lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceShortcutFlowErrors,  &type metadata for RunVoiceShortcutFlowErrors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors;
  if (!lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunVoiceShortcutFlowErrors,  &type metadata for RunVoiceShortcutFlowErrors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for RunVoiceShortcutFlowErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for RunVoiceShortcutFlowErrors( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_239F0 + 4 * byte_17F565[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23A24 + 4 * asc_17F560[v4]))();
}

uint64_t sub_23A24(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23A2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x23A34LL);
  }
  return result;
}

uint64_t sub_23A40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x23A48LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_23A4C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23A54(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RunVoiceShortcutFlowErrors()
{
  return &type metadata for RunVoiceShortcutFlowErrors;
}

void ArchivedViewModel.viewData.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_45();
  outlined copy of Data._Representation(v0, v1);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_1();
}

uint64_t outlined copy of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void AutoShortcutAppPhrasesViewModel.bundleId.getter()
{
}

void AutoShortcutAppPhrasesViewModel.prompt.getter()
{
}

uint64_t ArchivedViewModel.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6174614477656976LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614477656976LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6C646E7542707061LL && a2 == 0xEB00000000644965LL)
  {
    unint64_t v8 = 0xEB00000000644965LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C646E7542707061LL, 0xEB00000000644965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x6C70736944707061LL && a2 == 0xEE00656D614E7961LL)
  {
    swift_bridgeObjectRelease(0xEE00656D614E7961LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C70736944707061LL, 0xEE00656D614E7961LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t static AutoShortcutDialogTemplating.MAXSHORTCUTNUM.getter()
{
  return 3LL;
}

uint64_t ArchivedViewModel.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x6174614477656976LL;
  }
  if (a1 == 1) {
    return 0x6C646E7542707061LL;
  }
  return 0x6C70736944707061LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivedViewModel.CodingKeys()
{
  return ArchivedViewModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivedViewModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = ArchivedViewModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ArchivedViewModel.CodingKeys()
{
  return OUTLINED_FUNCTION_47();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ArchivedViewModel.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = static AutoShortcutDialogTemplating.MAXSHORTCUTNUM.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivedViewModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivedViewModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ArchivedViewModel.encode(to:)(void *a1)
{
  int v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ArchivedViewModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_1F3C50, &unk_1F3C50, v11, v9, v10);
  __int128 v23 = *v3;
  char v22 = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5);
  if (!v2)
  {
    OUTLINED_FUNCTION_2_8(1);
    KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v14, v15);
    OUTLINED_FUNCTION_2_8(2);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v18, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ArchivedViewModel.CodingKeys, &unk_1F3C50);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ArchivedViewModel.CodingKeys, &unk_1F3C50);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ArchivedViewModel.CodingKeys, &unk_1F3C50);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ArchivedViewModel.CodingKeys, &unk_1F3C50);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

uint64_t ArchivedViewModel.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ArchivedViewModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  unint64_t v9 = lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1F3C50, &unk_1F3C50, v9, v7, v8);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  char v24 = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v24, v5, &type metadata for Data);
  uint64_t v11 = v23[0];
  uint64_t v10 = v23[1];
  LOBYTE(v23[0]) = 1;
  OUTLINED_FUNCTION_5_4();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(v23, v5);
  uint64_t v14 = v13;
  uint64_t v21 = v12;
  LOBYTE(v23[0]) = 2;
  OUTLINED_FUNCTION_17_1();
  uint64_t v22 = v14;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v23, v5);
  uint64_t v17 = v16;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v19 = v15;
  OUTLINED_FUNCTION_1_7(v18);
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_0_8();
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  OUTLINED_FUNCTION_0_8();
  OUTLINED_FUNCTION_20();
  uint64_t result = swift_bridgeObjectRelease(v22);
  *a2 = v11;
  a2[1] = v10;
  a2[2] = v21;
  a2[3] = v22;
  a2[4] = v19;
  a2[5] = v17;
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

double protocol witness for Decodable.init(from:) in conformance ArchivedViewModel@<D0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivedViewModel(void *a1)
{
  return ArchivedViewModel.encode(to:)(a1);
}

uint64_t destroy for ArchivedViewModel(uint64_t *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t *initializeWithCopy for ArchivedViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t *assignWithCopy for ArchivedViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t *assignWithTake for ArchivedViewModel(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = a1[5];
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivedViewModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivedViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ArchivedViewModel()
{
  return &type metadata for ArchivedViewModel;
}

uint64_t storeEnumTagSinglePayload for ArchivedViewModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_244B0 + 4 * byte_17F665[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_244E4 + 4 * asc_17F660[v4]))();
}

uint64_t sub_244E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x244F4LL);
  }
  return result;
}

uint64_t sub_24500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x24508LL);
  }
  *(_BYTE *)double result = a2 + 2;
  return result;
}

uint64_t sub_2450C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24514(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ArchivedViewModel.CodingKeys()
{
  return &unk_1F3C50;
}

uint64_t OUTLINED_FUNCTION_0_8()
{
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_1_7@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void OUTLINED_FUNCTION_2_8(char a1@<W8>)
{
  *(_BYTE *)(v1 - 80) = a1;
}

uint64_t OUTLINED_FUNCTION_5_4()
{
  return outlined copy of Data._Representation(v1, v0);
}

void DisambiguationVisualItem.title.getter()
{
}

void *DisambiguationItemComponent.image.getter()
{
  uint64_t v1 = *(void **)(v0 + 32);
  id v2 = v1;
  return v1;
}

uint64_t DisambiguationItemComponent.synonyms.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

void DisambiguationVisual.appBundleId.setter(uint64_t a1, uint64_t a2)
{
  *id v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_2();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WFChooseFromListDisambiguationItem.component.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void CustomIntentStateAttachment.appBundleId.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  OUTLINED_FUNCTION_2();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *CustomRequestParameterDefinition.typeDefinition.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t DisambiguationVisual.items.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

uint64_t DisambiguationVisual.items.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 32));
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a1;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *CustomIntentStateAttachment.parameterName.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t DisambiguationVisual.response.getter(uint64_t a1)
{
  v2[81] = v1;
  v2[80] = a1;
  uint64_t v3 = type metadata accessor for Command(0LL);
  v2[82] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[83] = v4;
  v2[84] = OUTLINED_FUNCTION_8_5(*(void *)(v4 + 64));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  v2[85] = OUTLINED_FUNCTION_4_0(*(void *)(v5 - 8));
  v2[86] = OUTLINED_FUNCTION_11_0();
  uint64_t v6 = type metadata accessor for SeparatorStyle(0LL);
  v2[87] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[88] = v7;
  v2[89] = OUTLINED_FUNCTION_4_0(v7);
  v2[90] = OUTLINED_FUNCTION_11_0();
  uint64_t v8 = type metadata accessor for Separators(0LL);
  v2[91] = OUTLINED_FUNCTION_8_5(*(void *)(*(void *)(v8 - 8) + 64LL));
  uint64_t v9 = type metadata accessor for ComponentWrapper(0LL);
  v2[92] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[93] = v10;
  v2[94] = OUTLINED_FUNCTION_4_0(v10);
  v2[95] = OUTLINED_FUNCTION_11_0();
  uint64_t v11 = type metadata accessor for CustomCanvas(0LL);
  v2[96] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[97] = v12;
  v2[98] = OUTLINED_FUNCTION_8_5(*(void *)(v12 + 64));
  return OUTLINED_FUNCTION_21_0();
}

uint64_t DisambiguationVisual.response.getter()
{
  uint64_t v69 = (uint64_t *)(v1 + 624);
  uint64_t v2 = *(void **)(v1 + 648);
  *(void *)(v1 + 624) = _swiftEmptyArrayStorage;
  uint64_t v3 = v2[3];
  if (v3)
  {
    uint64_t v4 = v2[2];
    uint64_t v5 = one-time initialization token for encoder;
    swift_bridgeObjectRetain(v3);
    if (v5 != -1) {
      swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
    }
    *(void *)(v1 + 16) = v4;
    *(void *)(v1 + 24) = v3;
    *(_OWORD *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_BYTE *)(v1 + 96) = 5;
    lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
    uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1 + 16);
    uint64_t v7 = *(void *)(v1 + 784);
    uint64_t v8 = *(void *)(v1 + 776);
    uint64_t v9 = *(void *)(v1 + 768);
    uint64_t v87 = *(void *)(v1 + 752);
    uint64_t v78 = *(void *)(v1 + 760);
    uint64_t v81 = *(void *)(v1 + 744);
    uint64_t v84 = *(void *)(v1 + 736);
    uint64_t v10 = *(void *)(v1 + 728);
    uint64_t v11 = *(void *)(v1 + 720);
    uint64_t v12 = *(void *)(v1 + 712);
    uint64_t v76 = *(void *)(v1 + 704);
    uint64_t v13 = *(void *)(v1 + 696);
    BYTE2(v63) = 0;
    LOWORD(v63) = 0;
    CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)( 0xD000000000000010LL,  0x8000000000192DE0LL,  0xD000000000000014LL,  0x8000000000192E00LL,  v6,  v14,  0LL,  0xE000000000000000LL);
    *(void *)(v1 + 408) = v9;
    *(void *)(v1 + 416) = &protocol witness table for CustomCanvas;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v1 + 384));
    (*(void (**)(void *, uint64_t, uint64_t))(v8 + 16))(boxed_opaque_existential_1, v7, v9);
    uint64_t v16 = *(void (**)(uint64_t, void, uint64_t))(v76 + 104);
    v16(v11, enum case for SeparatorStyle.edgeToEdge(_:), v13);
    v16(v12, enum case for SeparatorStyle.standard(_:), v13);
    Separators.init(top:bottom:)(v12, v11);
    ComponentWrapper.init(_:separators:)(v1 + 384, v10);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16);
    v17(v87, v78, v84);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v19 = v18;
    *(void *)(v1 + 624) = v18;
    unint64_t v20 = *(void *)(v18 + 16);
    if (v20 >= *(void *)(v18 + 24) >> 1)
    {
      OUTLINED_FUNCTION_14_6();
      uint64_t v19 = v62;
      *uint64_t v69 = v62;
    }

    uint64_t v85 = *(void *)(v1 + 768);
    uint64_t v88 = *(void *)(v1 + 784);
    uint64_t v79 = *(void *)(v1 + 760);
    uint64_t v82 = *(void *)(v1 + 776);
    uint64_t v21 = *(void *)(v1 + 752);
    uint64_t v22 = *(void *)(v1 + 744);
    uint64_t v23 = *(void *)(v1 + 736);
    *(void *)(v1 + 128) = v23;
    *(void *)(v1 + 136) = &protocol witness table for ComponentWrapper;
    uint64_t v0 = (void *)(v1 + 104);
    char v24 = OUTLINED_FUNCTION_10_2();
    v17((uint64_t)v24, v21, v23);
    *(void *)(v19 + 16) = v20 + 1;
    outlined init with take of AceServiceInvokerAsync((__int128 *)(v1 + 104), v19 + 40 * v20 + 32);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v25(v21, v23);
    OUTLINED_FUNCTION_14();
    v25(v79, v23);
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v88, v85);
    uint64_t v2 = *(void **)(v1 + 648);
  }

  uint64_t v26 = v2[4];
  *(void *)(v1 + 79__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v26;
  *(void *)(v1 + 63__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v26;
  uint64_t v27 = *(void *)(v26 + 16);
  *(void *)(v1 + 800) = v27;
  if (v27)
  {
    v90 = (void *)(v1 + 144);
    double v70 = (_OWORD *)(v1 + 224);
    uint64_t v28 = v1 + 264;
    uint64_t v29 = v1 + 304;
    uint64_t v30 = (__n128 *)(v1 + 344);
    uint64_t v86 = (__n128 *)(v1 + 464);
    uint64_t v89 = (__n128 *)(v1 + 424);
    uint64_t v83 = (__n128 *)(v1 + 584);
    unint64_t v31 = 0xD000000000000010LL;
    swift_bridgeObjectRetain(v26);
    uint64_t v33 = 0LL;
    while (1)
    {
      *(void *)(v1 + 808) = v33;
      OUTLINED_FUNCTION_24_3((void *)(v32 + 48 * v33));
      uint64_t v35 = *(void *)(v34 + 56);
      *(void *)(v1 + 840) = v35;
      OUTLINED_FUNCTION_39_2(v34);
      if (v0)
      {
        OUTLINED_FUNCTION_17_1();
        swift_bridgeObjectRetain(v35);
        OUTLINED_FUNCTION_9_4();
        id v58 = v0;
        uint64_t v59 = (void *)OUTLINED_FUNCTION_47_5();
        *(void *)(v1 + 864) = v59;
        void *v59 = v1;
        v59[1] = DisambiguationVisual.response.getter;
        return INImage.convertToVisualProperty()(*(void *)(v1 + 688));
      }

      uint64_t v36 = *(void *)(v1 + 688);
      uint64_t v37 = type metadata accessor for VisualProperty(0LL);
      __swift_storeEnumTagSinglePayload(v36, 1LL, 1LL, v37);
      swift_bridgeObjectRetain(v35);
      OUTLINED_FUNCTION_9_4();
      OUTLINED_FUNCTION_17_1();
      OUTLINED_FUNCTION_25_5();
      static Command.directInvocation(identifier:payload:isNavigation:)( 0xD000000000000043LL,  0x8000000000192D90LL,  v38,  0LL);
      *(void *)(v1 + 208) = &type metadata for String;
      *(void *)(v1 + 216) = &protocol witness table for String;
      *(void *)(v1 + 184) = 0LL;
      *(void *)(v1 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v36;
      if (v31)
      {
        uint64_t v39 = *(void *)(v1 + 840);
        uint64_t v40 = *(void *)(v1 + 832);
        *(void *)(v1 + 248) = &type metadata for String;
        *(void *)(v1 + 256) = &protocol witness table for String;
        *(void *)(v1 + 224) = v40;
        *(void *)(v1 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v39;
        uint64_t v41 = v1 + 504;
        __n128 v42 = 0uLL;
      }

      else
      {
        *(void *)(v1 + 256) = 0LL;
        __n128 v42 = 0uLL;
        *double v70 = 0u;
        *(_OWORD *)(v1 + 240) = 0u;
        uint64_t v41 = v1 + 504;
      }

      uint64_t v43 = *(void *)(v1 + 680);
      OUTLINED_FUNCTION_49_3(v42);
      *uint64_t v30 = v44;
      v30[1] = v44;
      v30[2].n128_u64[0] = 0LL;
      *uint64_t v83 = v44;
      *(__n128 *)(v1 + 600) = v44;
      *(void *)(v1 + 616) = 0LL;
      *uint64_t v89 = v44;
      *(__n128 *)(v1 + 440) = v44;
      *(void *)(v1 + 456) = 0LL;
      OUTLINED_FUNCTION_31_4(v45, v86, v44);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v43, 1LL, v37);
      uint64_t v47 = *(void *)(v1 + 824);
      uint64_t v48 = *(void *)(v1 + 680);
      if (EnumTagSinglePayload == 1)
      {
        OUTLINED_FUNCTION_9_4();
        OUTLINED_FUNCTION_17_1();
        outlined destroy of VisualProperty?(v48);
        *(_OWORD *)uint64_t v41 = 0u;
        *(_OWORD *)(v41 + 16) = 0u;
        *(void *)(v41 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0LL;
      }

      else
      {
        *(void *)(v1 + 528) = v37;
        *(void *)(v1 + 536) = &protocol witness table for VisualProperty;
        uint64_t v49 = OUTLINED_FUNCTION_10_2();
        (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32LL))(v49, v48, v37);
        OUTLINED_FUNCTION_9_4();
        OUTLINED_FUNCTION_17_1();
      }

      OUTLINED_FUNCTION_40_4();
      *(void *)(v1 + 576) = &protocol witness table for Command;
      uint64_t v50 = __swift_allocate_boxed_opaque_existential_1((void *)(v1 + 544));
      OUTLINED_FUNCTION_27_4((uint64_t)v50);
      *(void *)(v1 + 168) = type metadata accessor for SimpleItemRich(0LL);
      *(void *)(v1 + 176) = &protocol witness table for SimpleItemRich;
      __swift_allocate_boxed_opaque_existential_1(v90);
      OUTLINED_FUNCTION_26_3();
      SimpleItemRich.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:action:componentName:linkIdentifier:)( v1 + 184,  v70,  v28,  v29,  v30,  v83,  v89,  v86,  v51,  v63,  v64,  v65,  v66,  v67,  v68);
      if ((OUTLINED_FUNCTION_54_3() & 1) == 0)
      {
        OUTLINED_FUNCTION_14_6();
        uint64_t v47 = v56;
        *uint64_t v69 = v56;
      }

      unint64_t v52 = *(void *)(v47 + 16);
      if (v52 >= *(void *)(v47 + 24) >> 1)
      {
        OUTLINED_FUNCTION_14_6();
        *uint64_t v69 = v57;
      }

      double v74 = *(void **)(v1 + 848);
      uint64_t v77 = *(void *)(v1 + 688);
      uint64_t v80 = *(void *)(v1 + 800);
      uint64_t v73 = *(void *)(v1 + 672);
      uint64_t v71 = *(void *)(v1 + 664);
      uint64_t v72 = *(void *)(v1 + 656);
      uint64_t v75 = *(void *)(v1 + 808) + 1LL;
      uint64_t v53 = *(void *)(v1 + 168);
      uint64_t v0 = *(void **)(v1 + 176);
      uint64_t v54 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v90, v53);
      uint64_t v55 = *(void *)(v53 - 8);
      unint64_t v31 = OUTLINED_FUNCTION_8_5(*(void *)(v55 + 64));
      OUTLINED_FUNCTION_75(v31, v54, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16));
      OUTLINED_FUNCTION_41_3(v52, v31, v69);
      __swift_destroy_boxed_opaque_existential_1Tm(v90);
      OUTLINED_FUNCTION_40_0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v73, v72);
      outlined destroy of VisualProperty?(v77);
      if (v75 == v80) {
        break;
      }
      uint64_t v33 = *(void *)(v1 + 808) + 1LL;
      uint64_t v32 = *(void *)(v1 + 792);
      uint64_t v29 = v1 + 304;
      uint64_t v28 = v1 + 264;
      uint64_t v30 = (__n128 *)(v1 + 344);
    }

    outlined release of [String]((void *)(v1 + 632));
  }

  uint64_t v61 = OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_46_5(v61, (uint64_t)_swiftEmptyArrayStorage);
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  swift_task_dealloc();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  int EnumTagSinglePayload;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *boxed_opaque_existential_1;
  __n128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  __n128 *v51;
  void *v52;
  unint64_t v52 = (void *)(v3 + 144);
  uint64_t v41 = (_OWORD *)(v3 + 224);
  uint64_t v4 = (__n128 *)(v3 + 264);
  uint64_t v5 = v3 + 304;
  uint64_t v6 = v3 + 344;
  uint64_t v7 = (__n128 *)(v3 + 424);
  __n128 v51 = (__n128 *)(v3 + 464);
  uint64_t v50 = (__n128 *)(v3 + 584);
  uint64_t v40 = (uint64_t *)(v3 + 624);
  while (1)
  {
    OUTLINED_FUNCTION_25_5();
    static Command.directInvocation(identifier:payload:isNavigation:)( 0xD000000000000043LL,  0x8000000000192D90LL,  v8,  0LL);
    *(void *)(v3 + 208) = &type metadata for String;
    *(void *)(v3 + 216) = &protocol witness table for String;
    *(void *)(v3 + 184) = v2;
    *(void *)(v3 + 19__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
    if (v1)
    {
      uint64_t v9 = *(void *)(v3 + 840);
      uint64_t v10 = *(void *)(v3 + 832);
      *(void *)(v3 + 248) = &type metadata for String;
      *(void *)(v3 + 256) = &protocol witness table for String;
      *(void *)(v3 + 224) = v10;
      *(void *)(v3 + 23__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v9;
      uint64_t v11 = 0uLL;
    }

    else
    {
      *(void *)(v3 + 256) = 0LL;
      uint64_t v11 = 0uLL;
      *uint64_t v41 = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
    }

    uint64_t v12 = *(void *)(v3 + 680);
    *uint64_t v4 = v11;
    v4[1] = v11;
    v4[2].n128_u64[0] = 0LL;
    OUTLINED_FUNCTION_49_3(v11);
    *uint64_t v50 = v13;
    *(__n128 *)(v3 + 600) = v13;
    *(void *)(v3 + 616) = 0LL;
    *uint64_t v7 = v13;
    v7[1] = v13;
    v7[2].n128_u64[0] = 0LL;
    OUTLINED_FUNCTION_31_4(v14, v51, v13);
    uint64_t v15 = type metadata accessor for VisualProperty(0LL);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v12, 1LL, v15);
    uint64_t v17 = *(void *)(v3 + 824);
    uint64_t v18 = *(void *)(v3 + 680);
    __n128 v42 = v15;
    if (EnumTagSinglePayload == 1)
    {
      OUTLINED_FUNCTION_9_4();
      OUTLINED_FUNCTION_17_1();
      outlined destroy of VisualProperty?(v18);
      *(_OWORD *)(v3 + 504) = 0u;
      *(_OWORD *)(v3 + 520) = 0u;
      *(void *)(v3 + 536) = 0LL;
    }

    else
    {
      *(void *)(v3 + 528) = v15;
      *(void *)(v3 + 536) = &protocol witness table for VisualProperty;
      uint64_t v19 = OUTLINED_FUNCTION_10_2();
      OUTLINED_FUNCTION_75( (uint64_t)v19,  v18,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL));
      OUTLINED_FUNCTION_9_4();
      OUTLINED_FUNCTION_17_1();
    }

    OUTLINED_FUNCTION_40_4();
    *(void *)(v3 + 576) = &protocol witness table for Command;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v3 + 544));
    OUTLINED_FUNCTION_27_4((uint64_t)boxed_opaque_existential_1);
    *(void *)(v3 + 168) = type metadata accessor for SimpleItemRich(0LL);
    *(void *)(v3 + 176) = &protocol witness table for SimpleItemRich;
    __swift_allocate_boxed_opaque_existential_1(v52);
    OUTLINED_FUNCTION_26_3();
    SimpleItemRich.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:action:componentName:linkIdentifier:)( v3 + 184,  v41,  v4,  v5,  v6,  v50,  v7,  v51,  v21,  v34,  v35,  v36,  v37,  v38,  v39);
    if ((OUTLINED_FUNCTION_54_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_14_6();
      uint64_t v17 = v28;
      *uint64_t v40 = v28;
    }

    uint64_t v22 = *(void *)(v17 + 16);
    if (v22 >= *(void *)(v17 + 24) >> 1)
    {
      OUTLINED_FUNCTION_14_6();
      *uint64_t v40 = v29;
    }

    uint64_t v46 = *(void **)(v3 + 848);
    uint64_t v48 = *(void *)(v3 + 688);
    uint64_t v49 = *(void *)(v3 + 800);
    uint64_t v45 = *(void *)(v3 + 672);
    uint64_t v43 = *(void *)(v3 + 664);
    __n128 v44 = *(void *)(v3 + 656);
    uint64_t v47 = *(void *)(v3 + 808) + 1LL;
    uint64_t v0 = *(void *)(v3 + 168);
    uint64_t v2 = *(void **)(v3 + 176);
    uint64_t v1 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v52, v0);
    uint64_t v23 = *(void *)(v0 - 8);
    char v24 = OUTLINED_FUNCTION_8_5(*(void *)(v23 + 64));
    OUTLINED_FUNCTION_75(v24, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
    OUTLINED_FUNCTION_41_3(v22, v24, v40);
    __swift_destroy_boxed_opaque_existential_1Tm(v52);
    OUTLINED_FUNCTION_20_2();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v44);
    outlined destroy of VisualProperty?(v48);
    if (v47 == v49)
    {
      outlined release of [String]((void *)(v3 + 632));
      uint64_t v30 = OUTLINED_FUNCTION_11_5();
      OUTLINED_FUNCTION_46_5(v30, (uint64_t)_swiftEmptyArrayStorage);
      OUTLINED_FUNCTION_40_0();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_33_0();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_29_0();
      OUTLINED_FUNCTION_30_0();
      OUTLINED_FUNCTION_20_2();
      return (*(uint64_t (**)(void))(v3 + 8))();
    }

    uint64_t v25 = *(void *)(v3 + 808) + 1LL;
    *(void *)(v3 + 808) = v25;
    OUTLINED_FUNCTION_24_3((void *)(*(void *)(v3 + 792) + 48 * v25));
    uint64_t v27 = *(void *)(v26 + 56);
    *(void *)(v3 + 840) = v27;
    OUTLINED_FUNCTION_39_2(v26);
    if (v2) {
      break;
    }
    __swift_storeEnumTagSinglePayload(*(void *)(v3 + 688), 1LL, 1LL, v42);
    swift_bridgeObjectRetain(v27);
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_17_1();
    uint64_t v5 = v3 + 304;
    uint64_t v4 = (__n128 *)(v3 + 264);
    uint64_t v7 = (__n128 *)(v3 + 424);
    uint64_t v6 = v3 + 344;
  }

  OUTLINED_FUNCTION_17_1();
  swift_bridgeObjectRetain(v27);
  OUTLINED_FUNCTION_9_4();
  uint64_t v32 = v2;
  uint64_t v33 = (void *)OUTLINED_FUNCTION_47_5();
  *(void *)(v3 + 864) = v33;
  *uint64_t v33 = v3;
  v33[1] = DisambiguationVisual.response.getter;
  return INImage.convertToVisualProperty()(*(void *)(v3 + 688));
}

uint64_t DisambiguationVisual.data.getter()
{
  uint64_t v1 = type metadata accessor for Response(0LL);
  v0[2] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[3] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_8_5(*(void *)(v2 + 64));
  v0[4] = v3;
  uint64_t v4 = (void *)swift_task_alloc(dword_2155DC);
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = DisambiguationVisual.data.getter;
  return DisambiguationVisual.response.getter(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 40LL);
  *(void *)(*(void *)v1 + 48LL) = v0;
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_21_0();
}

void __swiftcall DisambiguationVisual.init(appBundleId:prompt:items:)( SiriLinkFlowPlugin::DisambiguationVisual *__return_ptr retstr, Swift::String appBundleId, Swift::String_optional prompt, Swift::OpaquePointer items)
{
  retstr->appBundleId = appBundleId;
  retstr->prompt = prompt;
  retstr->items = items;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_14_2();
      if (v4)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  OUTLINED_FUNCTION_17_5();
  if (v2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = (void *)OUTLINED_FUNCTION_19(v6, 16 * v2 + 32);
    size_t v8 = _swift_stdlib_malloc_size(v7);
    void v7[2] = v1;
    v7[3] = 2 * ((uint64_t)(v8 - 32) / 16);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v9 = (char *)OUTLINED_FUNCTION_34_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    OUTLINED_FUNCTION_4_7();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_16_5();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15);
  }

  OUTLINED_FUNCTION_2();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  OUTLINED_FUNCTION_28_5();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_14_2();
      if (v3)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  OUTLINED_FUNCTION_17_5();
  if (v1)
  {
    char v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SectionConvertible>);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_20_6(v5);
    OUTLINED_FUNCTION_15_3(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_34_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_4_7();
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_16_5();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }

  OUTLINED_FUNCTION_38_0();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  OUTLINED_FUNCTION_28_5();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_14_2();
      if (v3)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  OUTLINED_FUNCTION_17_5();
  if (v1)
  {
    char v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WFChooseFromListDisambiguationItem>);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_20_6(v5);
    OUTLINED_FUNCTION_15_3(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_34_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_4_7();
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_16_5();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }

  OUTLINED_FUNCTION_38_0();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  OUTLINED_FUNCTION_28_5();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_14_2();
      if (v4)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  OUTLINED_FUNCTION_17_5();
  if (v2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v7 = (void *)OUTLINED_FUNCTION_19(v6, 32 * v2 + 32);
    size_t v8 = _swift_stdlib_malloc_size(v7);
    void v7[2] = v1;
    v7[3] = 2 * ((uint64_t)(v8 - 32) / 32);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v9 = (char *)OUTLINED_FUNCTION_34_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    OUTLINED_FUNCTION_4_7();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_16_5();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15);
  }

  OUTLINED_FUNCTION_2();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  OUTLINED_FUNCTION_28_5();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_14_2();
      if (v3)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  OUTLINED_FUNCTION_17_5();
  if (v1)
  {
    char v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DisambiguationVisualItem>);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_20_6(v5);
    OUTLINED_FUNCTION_15_3(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_34_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_4_7();
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_16_5();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }

  OUTLINED_FUNCTION_38_0();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : String?]>);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>,  (void (*)(void))&type metadata accessor for TemplatingSection);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>,  (void (*)(void))&type metadata accessor for DisplayHint);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<SpeakableString>,  (void (*)(void))&type metadata accessor for SpeakableString);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  char v8 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_14_2();
      if (v10)
      {
        __break(1u);
LABEL_23:
        OUTLINED_FUNCTION_2_9();
        uint64_t v30 = "Division by zero";
        uint64_t v31 = 16LL;
LABEL_25:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v30,  v31,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return result;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  else
  {
    uint64_t v9 = a2;
  }

  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = OUTLINED_FUNCTION_9_2(a1, a2, a3, a4, a5);
  uint64_t v15 = *(void *)(((uint64_t (*)(void))a6)(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v16) {
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000LL && v16 == -1)
  {
    OUTLINED_FUNCTION_2_9();
    uint64_t v30 = "Division results in an overflow";
    uint64_t v31 = 31LL;
    goto LABEL_25;
  }

  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(((uint64_t (*)(void))a6)(0LL) - 8) + 80LL);
  uint64_t v23 = (v22 + 32) & ~v22;
  if ((v8 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v23, v12, (unint64_t)v19 + v23, a6);
    OUTLINED_FUNCTION_4_7();
  }

  else
  {
    uint64_t v24 = OUTLINED_FUNCTION_37_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v24, v25, v26, v27, v28);
  }

  return (uint64_t)v19;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  char v6 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_6();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_14_2();
      if (v8)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_2_4();
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v10 = *(void *)(a4 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_9_2(a1, a2, a3, a4, a5);
    uint64_t v13 = (char *)OUTLINED_FUNCTION_19(v12, 8 * v11 + 32);
    size_t v14 = _swift_stdlib_malloc_size(v13);
    *((void *)v13 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
    *((void *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 8);
  }

  else
  {
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v6 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v13 + 32);
    OUTLINED_FUNCTION_4_7();
  }

  else
  {
    uint64_t v15 = OUTLINED_FUNCTION_37_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v15, v16, v17, v18, v19);
  }

  OUTLINED_FUNCTION_38_0();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 40 * a1 + 32;
  char v8 = a3 + 40 * v4;
  if (v7 >= v8 || v7 + 40 * v4 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SectionConvertible);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 56 * a1 + 32;
  unint64_t v7 = a3 + 56 * v4;
  if (v6 >= v7 || v6 + 56 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 48 * a1 + 32;
  unint64_t v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_2_9();
    uint64_t v13 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v14 = 51LL;
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 8 * a1 + 32;
  unint64_t v8 = a3 + 8 * v5;
  if (v7 >= v8 || v7 + 8 * v5 <= a3)
  {
    OUTLINED_FUNCTION_9_2(a1, a2, a3, a4, a5);
    swift_arrayInitWithCopy(a3);
    OUTLINED_FUNCTION_14();
    return v8;
  }

  OUTLINED_FUNCTION_2_9();
  uint64_t v13 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v14 = 49LL;
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_3_9( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v13,  v14,  v11,  (uint64_t)"Swift/UnsafePointer.swift",  v12,  v15,  v16,  v17);
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_2_9();
    size_t v20 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v21 = 51LL;
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    OUTLINED_FUNCTION_14();
    return v14;
  }

  OUTLINED_FUNCTION_2_9();
  size_t v20 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v21 = 49LL;
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_3_9( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v20,  v21,  v18,  (uint64_t)"Swift/UnsafePointer.swift",  v19,  v22,  v23,  v24);
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    uint64_t result = (char *)OUTLINED_FUNCTION_0_9( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_8(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    uint64_t result = (char *)OUTLINED_FUNCTION_0_9( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_8(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    uint64_t result = (char *)OUTLINED_FUNCTION_0_9( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_8(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    uint64_t result = (char *)OUTLINED_FUNCTION_0_9( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_8(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    uint64_t result = (char *)OUTLINED_FUNCTION_0_9( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[56 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_19_4(a3, 56 * a2);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    uint64_t result = (char *)OUTLINED_FUNCTION_0_9( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[56 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_8(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    uint64_t result = (char *)OUTLINED_FUNCTION_0_9( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[88 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_19_4(a3, 88 * a2);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    uint64_t result = (char *)OUTLINED_FUNCTION_0_9( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_8(a3, result);
  }

  return result;
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)( unint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)( a1,  a2,  a3,  (void (*)(void))&type metadata accessor for UsoIdentifier);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)( a1,  a2,  a3,  (void (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)( a1,  a2,  a3,  (void (*)(void))&type metadata accessor for DisplayHint);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)( a1,  a2,  a3,  (void (*)(void))&type metadata accessor for SpeakableString);
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)( unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_9();
    uint64_t result = OUTLINED_FUNCTION_0_9( (uint64_t)"Fatal error",  v11,  v12,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v13,  v14,  (uint64_t)"Swift/UnsafePointer.swift",  v15,  v16,  v17,  v18);
    __break(1u);
  }

  else if (a3 < a1 {
         || (uint64_t result = ((uint64_t (*)(void))a4)(0LL),
  }
             a1 + *(void *)(*(void *)(result - 8) + 72LL) * a2 <= a3))
  {
    a4(0LL);
    uint64_t v10 = OUTLINED_FUNCTION_38_3();
    return swift_arrayInitWithTakeFrontToBack(v10);
  }

  else if (a3 != a1)
  {
    uint64_t v9 = OUTLINED_FUNCTION_38_3();
    return swift_arrayInitWithTakeBackToFront(v9);
  }

  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }

  return __src;
}

{
  if (__dst != __src || &__src[16 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = __swift_allocate_boxed_opaque_existential_1(&v12);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of AceServiceInvokerAsync(&v12, v10 + 40 * a1 + 32);
}

uint64_t outlined init with copy of VisualProperty?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of VisualProperty?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel,  &type metadata for SiriLinkViewModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel,  &type metadata for SiriLinkViewModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel);
  }

  return result;
}

uint64_t destroy for DisambiguationVisualItem(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 40));
}

void *initializeWithCopy for DisambiguationVisualItem(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v6 = (void *)a2[4];
  uint64_t v5 = a2[5];
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  id v7 = v6;
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for DisambiguationVisualItem(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = (void *)a1[4];
  uint64_t v9 = (void *)a2[4];
  a1[4] = v9;
  id v10 = v9;

  uint64_t v11 = a2[5];
  uint64_t v12 = a1[5];
  a1[5] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

void *assignWithTake for DisambiguationVisualItem(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  uint64_t v7 = a1[5];
  a1[5] = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for DisambiguationVisualItem()
{
  return &type metadata for DisambiguationVisualItem;
}

uint64_t destroy for DisambiguationVisual(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

void *initializeWithCopy for DisambiguationVisual(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for DisambiguationVisual(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for DisambiguationVisual(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisambiguationVisual(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisambiguationVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DisambiguationVisual()
{
  return &type metadata for DisambiguationVisual;
}

uint64_t OUTLINED_FUNCTION_0_9( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL, a9, a10, a11);
}

void *OUTLINED_FUNCTION_1_8@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_3_9( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t OUTLINED_FUNCTION_4_7()
{
  *(void *)(v0 + 16) = 0LL;
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_8_5@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_11_5()
{
  return *(void *)(v0 + 624);
}

void OUTLINED_FUNCTION_14_6()
{
}

size_t OUTLINED_FUNCTION_15_3(void *a1)
{
  size_t result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t OUTLINED_FUNCTION_16_5()
{
  return 0LL;
}

  ;
}

void *OUTLINED_FUNCTION_19_4@<X0>(void *__dst@<X2>, size_t a2@<X8>)
{
  return memmove(__dst, v2, a2);
}

uint64_t OUTLINED_FUNCTION_20_6(uint64_t a1)
{
  return swift_allocObject(a1, v1 * v2 + 32, 7LL);
}

void OUTLINED_FUNCTION_24_3(void *a1@<X8>)
{
  v1[102] = a1[4];
  v1[103] = a1[5];
  v1[104] = a1[6];
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_27_4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(a1, v2, v3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_31_4@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>, __n128 a3@<Q0>)
{
  a2[2].n128_u64[0] = 0LL;
  *a2 = a3;
  a2[1] = a3;
  return outlined init with copy of VisualProperty?(a1, v3);
}

uint64_t OUTLINED_FUNCTION_34_4()
{
  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_37_4()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_38_3()
{
  return v0;
}

void OUTLINED_FUNCTION_39_2(uint64_t a1@<X8>)
{
  *(void *)(v1 + 848) = *(void *)(a1 + 64);
  *(void *)(v1 + 856) = *(void *)(a1 + 72);
}

void OUTLINED_FUNCTION_40_4()
{
  *(void *)(v0 + 568) = *(void *)(v0 + 656);
}

uint64_t OUTLINED_FUNCTION_41_3(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a1, a2, a3, v3, v4);
}

uint64_t OUTLINED_FUNCTION_46_5(uint64_t a1, uint64_t a2)
{
  return Response.init(_:backgrounds:ornaments:hideRedactedElements:)(a1, a2, a2, 0LL);
}

uint64_t OUTLINED_FUNCTION_47_5()
{
  return swift_task_alloc(v0);
}

void OUTLINED_FUNCTION_49_3(__n128 a1)
{
  *uint64_t v1 = a1;
  v1[1] = a1;
  v1[2].n128_u64[0] = 0LL;
  *uint64_t v2 = a1;
  v2[1] = a1;
  v2[2].n128_u64[0] = 0LL;
}

uint64_t OUTLINED_FUNCTION_54_3()
{
  return swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + 624));
}

uint64_t CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v5[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[25] = v7;
  v5[26] = OUTLINED_FUNCTION_4_0(v7);
  v5[27] = OUTLINED_FUNCTION_11_0();
  uint64_t v8 = OUTLINED_FUNCTION_74_0();
  v5[28] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[29] = v9;
  v5[30] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = OUTLINED_FUNCTION_75_0();
  v5[31] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[32] = v11;
  v5[33] = OUTLINED_FUNCTION_9_0(v11);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 256);
  OUTLINED_FUNCTION_47_6(a1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:));
  char v3 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_76_0();
    if ((OUTLINED_FUNCTION_46_6() & 1) != 0)
    {
      type metadata accessor for EmptyOutput(0LL);
      static EmptyOutput.instance.getter();
      OUTLINED_FUNCTION_26_4();
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_15_0();
      uint64_t v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
      return OUTLINED_FUNCTION_20_7(v4);
    }

    else
    {
      id v9 = [*(id *)(v1 + 168) _metadata];
      if (v9)
      {
        uint64_t v10 = v9;
        unsigned __int8 v11 = [v9 showsWhenRun];

        char v12 = v11 ^ 1;
      }

      else
      {
        char v12 = 0;
      }

      uint64_t v13 = OUTLINED_FUNCTION_38_4();
      if ((dispatch thunk of DeviceState.isCarPlay.getter(v13, v14) & 1) != 0)
      {
        char v15 = 1;
      }

      else
      {
        uint64_t v16 = OUTLINED_FUNCTION_38_4();
        char v15 = dispatch thunk of DeviceState.isHomePod.getter(v16) | v12;
      }

      int v17 = v15 & 1;
      *(_BYTE *)(v1 + 440) = v15 & 1;
      uint64_t v18 = *(void *)(v1 + 176);
      uint64_t v19 = *(void *)(*(void *)(v1 + 184) + 56LL);
      *(void *)(v1 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v19;
      type metadata accessor for WFDialogState();
      uint64_t v20 = App.appIdentifier.getter();
      uint64_t v22 = v21;
      unsigned int v23 = static WFDialogState.isAppFirstRun(appId:)(v20, v21);
      swift_bridgeObjectRelease(v22);
      int v24 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v19 + 336LL));
      *(void *)(v1 + 280) = v24;
      *int v24 = v1;
      v24[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
      return v25(*(void *)(v1 + 160), *(void *)(v1 + 168), v18, v17 & v23);
    }
  }

  else
  {
    uint64_t v6 = OUTLINED_FUNCTION_54_4();
    uint64_t v7 = OUTLINED_FUNCTION_34_5(v6, (uint64_t)&protocol witness table for AceOutput);
    uint64_t v8 = (void *)swift_task_alloc(dword_215644);
    *(void *)(v1 + 424) = v8;
    *uint64_t v8 = v1;
    v8[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
    return CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse_rfv1(app:intent:intentResponse:)( (uint64_t)v7,  *(void *)(v1 + 160),  *(void *)(v1 + 168),  *(void *)(v1 + 176));
  }

uint64_t CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:)()
{
  *(void *)(v2 + 288) = v3;
  OUTLINED_FUNCTION_54_0(v4);
  if (v0)
  {
    swift_task_dealloc(*(void *)(v2 + 264));
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  uint64_t v37;
  OUTLINED_FUNCTION_51_0();
  LODWORD(v36) = *(unsigned __int8 *)(v0 + 440);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v35 = *(void *)(v0 + 168);
  uint64_t v6 = static DialogPhase.completion.getter();
  uint64_t v7 = OUTLINED_FUNCTION_4(v6, "catId");
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  OUTLINED_FUNCTION_68_1(v2, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OutputGenerationManifest.responseViewId.setter(v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  id v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 168LL))(v35);
  OUTLINED_FUNCTION_61_2(v9);
  OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
  if ((v36 & 1) != 0)
  {
    uint64_t v10 = *(void *)(v0 + 288);
    unsigned __int8 v11 = OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_51(v11);
    *(void *)(v0 + 400) = OUTLINED_FUNCTION_57();
    char v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v13 = OUTLINED_FUNCTION_23_4(v12);
    *(_OWORD *)(v13 + 16) = xmmword_17E150;
    *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v10;
    OUTLINED_FUNCTION_25_0(v13, v14, v15);
    *(void *)(v0 + 408) = v37;
    OUTLINED_FUNCTION_32_3();
    uint64_t v16 = (void *)swift_task_alloc(v5);
    *(void *)(v0 + 416) = v16;
    *uint64_t v16 = v0;
    v16[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
    OUTLINED_FUNCTION_60_1();
    return OUTLINED_FUNCTION_11_6(v17, v18, v19, v20);
  }

  else
  {
    uint64_t v22 = *(void *)(v0 + 184);
    unsigned int v23 = *(void **)(v0 + 168);
    *(void *)(v0 + 296) = (*(uint64_t (**)(void *, void, void))(**(void **)(v22 + 64) + 144LL))( v23,  *(void *)(v0 + 176),  *(void *)(v0 + 160));
    type metadata accessor for CustomIntentSnippetProvider();
    *(_BYTE *)(v0 + 441) = static CustomIntentSnippetProvider.isDoneButtonEligible(deviceState:intent:siriEnvironment:)( (void *)(v22 + 16),  v23);
    outlined init with copy of DeviceState(v22 + 16, v0 + 56);
    int v24 = *(void *)(v22 + 88);
    if (v24)
    {
      uint64_t v25 = *(void *)(*(void *)(v0 + 184) + 80LL);
      unint64_t v26 = *(void *)(v22 + 88);
    }

    else
    {
      unint64_t v26 = 0xE900000000000073LL;
      uint64_t v25 = 0x74756374726F6853LL;
    }

    *(void *)(v0 + 304) = v25;
    *(void *)(v0 + 31__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v26;
    uint64_t v27 = *(void *)(v0 + 272);
    uint64_t v28 = swift_bridgeObjectRetain(v24);
    uint64_t v29 = OUTLINED_FUNCTION_4(v28, "_title");
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;
    *(void *)(v0 + 136) = v30;
    *(void *)(v0 + 144) = v31;

    *(void *)(v0 + 320) = v32;
    *(void *)(v0 + 328) = OUTLINED_FUNCTION_4(v33, "_keyImage");
    uint64_t v34 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v27 + 400LL));
    *(void *)(v0 + 336) = v34;
    *uint64_t v34 = v0;
    v34[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
    return v36();
  }

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_50_0();
  uint64_t v2 = v1 + 7;
  uint64_t v3 = v1[40];
  uint64_t v4 = (void *)v1[41];
  uint64_t v5 = v1[39];
  OUTLINED_FUNCTION_51_3();
  *(void *)(v6 + 368) = v0;
  swift_task_dealloc(v7);
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  OUTLINED_FUNCTION_37();

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  char *v14;
  uint64_t v15;
  uint64_t v1 = (void *)v0[36];
  uint64_t v2 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v2);
  v0[47] = OUTLINED_FUNCTION_57();
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[15] = type metadata accessor for WorkflowDataModels(0LL);
  v0[16] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels,  type metadata accessor for WorkflowDataModels,  (uint64_t)&protocol conformance descriptor for WorkflowDataModels);
  __swift_allocate_boxed_opaque_existential_1(v0 + 12);
  v5(v3, v4);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = OUTLINED_FUNCTION_23_4(v6);
  *(_OWORD *)(v7 + 16) = xmmword_17E150;
  *(void *)(v7 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  OUTLINED_FUNCTION_25_0(v7, v8, v9);
  v0[48] = v15;
  unsigned __int8 v11 = v1;
  char v12 = (void *)swift_task_alloc(v10);
  v0[49] = v12;
  *char v12 = v0;
  v12[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
  return ((uint64_t (*)(void, void *, uint64_t, void))v14)(v0[19], v0 + 12, v15, v0[30]);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = v0 + 12;
  uint64_t v2 = v0[48];
  OUTLINED_FUNCTION_3_0(v0[49]);
  swift_release();
  swift_bridgeObjectRelease(v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v1 = *(void **)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 232);

  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  OUTLINED_FUNCTION_26_4();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_29_4(v3);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 416));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v1 = *(void *)(v0 + 232);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_26_4();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_22_2(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  OUTLINED_FUNCTION_49_4();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 43__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_task_dealloc(*(void *)(v1 + 264));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_22_2(v5);
  }

{
  uint64_t v0;
  __swift_deallocate_boxed_opaque_existential_1(*(void **)(v0 + 152));
  OUTLINED_FUNCTION_25_6();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_48_4();

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_25_6();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v1 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_48_4();

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_25_6();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:)( uint64_t a1, uint64_t a2)
{
  v19[0] = *v3;
  uint64_t v6 = v19[0];
  OUTLINED_FUNCTION_10_0(v19);
  *(void *)(v6 + 344) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    uint64_t v8 = *(void **)(v6 + 328);
    uint64_t v9 = *(void *)(v6 + 312);
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v6 + 56));

    OUTLINED_FUNCTION_20();
    swift_bridgeObjectRelease(v9);
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

  else
  {
    uint64_t v11 = *(void *)(v6 + 136);
    *(void *)(v6 + 35__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
    char v12 = (void *)swift_task_alloc(dword_21E44C);
    *(void *)(v6 + 360) = v12;
    *char v12 = v3;
    v12[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
    uint64_t v14 = *(void *)(v6 + 320);
    uint64_t v13 = *(void *)(v6 + 328);
    uint64_t v15 = *(void *)(v6 + 296);
    uint64_t v16 = *(void *)(v6 + 168);
    uint64_t v17 = *(void *)(v6 + 176);
    uint64_t v18 = *(void *)(v6 + 160);
    char v20 = *(_BYTE *)(v6 + 441);
    v19[6] = a1;
    v19[7] = a2;
    v19[4] = v14;
    v19[5] = v13;
    v19[3] = v11;
    return static WorkflowDataModels.modelForCustomIntentHandled(app:intent:intentResponse:doneButtonCommand:deviceState:shortcutName:title:image:doneButtonLabel:shouldShowDoneButton:)( v6 + 16,  v18,  v16,  v17,  v15,  v6 + 56);
  }

BOOL static CustomIntentHandleIntentResponseGenerator.shouldShowDialogAfterIntentHandled(intent:)(void *a1)
{
  return (static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(a1) & 1) == 0;
}

uint64_t CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse_rfv1(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[16] = a4;
  v5[17] = v4;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  uint64_t v6 = OUTLINED_FUNCTION_77_0();
  v5[18] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[19] = v7;
  v5[20] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[21] = OUTLINED_FUNCTION_4_0(*(void *)(v8 - 8));
  v5[22] = OUTLINED_FUNCTION_11_0();
  uint64_t v9 = OUTLINED_FUNCTION_54_4();
  v5[23] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[24] = v10;
  v5[25] = OUTLINED_FUNCTION_4_0(v10);
  v5[26] = OUTLINED_FUNCTION_11_0();
  uint64_t v11 = type metadata accessor for TemplatingResult(0LL);
  v5[27] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[28] = v12;
  v5[29] = OUTLINED_FUNCTION_4_0(v12);
  v5[30] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse_rfv1(app:intent:intentResponse:)()
{
  uint64_t v1 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v0[17] + 64LL) + 128LL));
  v0[31] = v1;
  *uint64_t v1 = v0;
  v1[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse_rfv1(app:intent:intentResponse:);
  return v3(v0[14], v0[15], v0[16]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_50_5();
  *(void *)(v2 + 256) = v3;
  OUTLINED_FUNCTION_54_0(v4);
  if (v0)
  {
    swift_task_dealloc(*(void *)(v2 + 240));
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_29_0();
    return OUTLINED_FUNCTION_20_7((uint64_t (*)(void))v1[1]);
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return swift_task_switch(v6, v7, v8);
  }

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  uint64_t (*v11)(void, void, void, uint64_t, void);
  uint64_t v1 = v0[32];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v10 = v0[32];
    }
    else {
      uint64_t v10 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v0[32]);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    OUTLINED_FUNCTION_20();
  }

  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
  }

  v0[33] = v2;
  if (v2)
  {
    uint64_t v3 = 0;
  }

  else
  {
    type metadata accessor for WFDialogState();
    uint64_t v4 = App.appIdentifier.getter();
    uint64_t v3 = static WFDialogState.isAppFirstRun(appId:)(v4, v5);
    OUTLINED_FUNCTION_37();
  }

  uint64_t v6 = v0[16];
  OUTLINED_FUNCTION_39_3();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v7 + 344));
  v0[34] = v8;
  *uint64_t v8 = v0;
  v8[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse_rfv1(app:intent:intentResponse:);
  return v11(v0[30], v0[14], v0[15], v6, v3 & 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v5 = *v1;
  uint64_t v2 = v5;
  OUTLINED_FUNCTION_10_0(&v5);
  *(void *)(v2 + 280) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    swift_bridgeObjectRelease(*(void *)(v2 + 256));
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t updated;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_s *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(void);
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 224) + 16LL))( *(void *)(v0 + 232),  *(void *)(v0 + 240),  *(void *)(v0 + 216));
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  if (v1)
  {
    OUTLINED_FUNCTION_53_2();
  }

  else
  {
    uint64_t v4 = TemplatingResult.sections.getter(v2);
    uint64_t v5 = *(void *)(v4 + 16);
    swift_bridgeObjectRelease(v4);
    OUTLINED_FUNCTION_53_2();
    if (!v5)
    {
      uint64_t v53 = v3;
      uint64_t v8 = *(void *)(v0 + 256);
      goto LABEL_8;
    }
  }

  uint64_t v53 = v3;
  OUTLINED_FUNCTION_76_0();
  uint64_t v6 = OUTLINED_FUNCTION_46_6();
  uint64_t v7 = *(void *)(v0 + 256);
  if ((v6 & 1) == 0)
  {
    uint64_t v9 = *(void *)(v0 + 240);
    unint64_t v52 = *(void *)(v0 + 192);
    uint64_t v10 = *(void *)(v0 + 176);
    uint64_t v11 = *(void **)(v0 + 136);
    uint64_t v12 = *(void *)(v0 + 120);
    uint64_t v13 = v11[5];
    uint64_t v14 = v11[6];
    __swift_project_boxed_opaque_existential_1(v11 + 2, v13);
    LOBYTE(v13) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v13, v14);
    LOBYTE(v14) = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*v11 + 168LL))(v12);
    uint64_t v16 = OUTLINED_FUNCTION_56_3();
    OUTLINED_FUNCTION_50_1(v10, v17, v18, v16);
    *(void *)(v0 + 48) = 0LL;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v9,  v11 + 2,  v13 & 1,  v7,  v14 & 1,  v15 & 1,  v10,  _swiftEmptyArrayStorage,  v0 + 16);
    swift_bridgeObjectRelease(v7);
    _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( v0 + 16,  (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
    updated = _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( v10,  &demangling cache variable for type metadata for NLContextUpdate?);
    char v20 = AceOutput.commands.getter(updated);
    specialized Array.append<A>(contentsOf:)(v20);
    OUTLINED_FUNCTION_14_3(v52);
    goto LABEL_9;
  }

  uint64_t v8 = *(void *)(v0 + 256);
LABEL_8:
  swift_bridgeObjectRelease(v8);
LABEL_9:
  uint64_t v21 = *(void *)(v0 + 160);
  uint64_t v22 = *(void *)(v0 + 168);
  unsigned int v23 = *(void *)(v0 + 144);
  int v24 = *(void *)(v0 + 152);
  uint64_t v25 = *(void *)(v0 + 136);
  unint64_t v26 = *(void *)(v0 + 120);
  uint64_t v27 = OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_50_1(v22, v28, v29, v27);
  (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v21, enum case for ActivityType.completed(_:), v23);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v25 + 160LL))(v21, v26);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v21, v23);
  if (v30)
  {
    *(void *)(v0 + 80) = OUTLINED_FUNCTION_73_0();
    *(void *)(v0 + 88) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultFlowActivity,  (uint64_t)&protocol conformance descriptor for DefaultFlowActivity);
    *(void *)(v0 + 56) = v30;
  }

  else
  {
    *(void *)(v0 + 88) = 0LL;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  }

  uint64_t v31 = *(void *)(v0 + 168);
  static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)( _swiftEmptyArrayStorage,  v31,  _swiftEmptyArrayStorage,  v0 + 56);
  OUTLINED_FUNCTION_37();
  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(v31, &demangling cache variable for type metadata for NLContextUpdate?);
  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( v0 + 56,  (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v33 = *(void *)(v0 + 192);
  uint64_t v32 = *(void *)(v0 + 200);
  uint64_t v34 = *(void *)(v0 + 184);
  uint64_t v35 = *(void *)(v0 + 104);
  uint64_t v36 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v36, (uint64_t)static Logger.voiceCommands);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v32, v35, v34);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  uint64_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v40 = 134217984;
    uint64_t v41 = AceOutput.commands.getter(v40);
    if ((unint64_t)v41 >> 62)
    {
      if (v41 >= 0) {
        v41 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      __n128 v42 = _CocoaArrayWrapper.endIndex.getter(v41);
    }

    else
    {
      __n128 v42 = *(void *)((char *)&dword_10 + (v41 & 0xFFFFFFFFFFFFF8LL));
    }

    uint64_t v43 = *(void *)(v0 + 192);
    __n128 v44 = *(void *)(v0 + 200);
    uint64_t v45 = *(void *)(v0 + 184);
    OUTLINED_FUNCTION_20();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v45);
    *(void *)(v0 + 96) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v40 + 4);
    _os_log_impl( &dword_0,  v38,  v39,  "CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse successfully assembled %ld commands..",  v40,  0xCu);
    OUTLINED_FUNCTION_1_0((uint64_t)v40);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 192) + 8LL))(*(void *)(v0 + 200), *(void *)(v0 + 184));
  }

  uint64_t v46 = *(void *)(v0 + 240);
  uint64_t v47 = *(void *)(v0 + 216);
  uint64_t v48 = *(void *)(v0 + 168);
  uint64_t v49 = *(void *)(v0 + 160);

  v53(v46, v47);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  uint64_t v50 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v50();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 240));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  return OUTLINED_FUNCTION_20_7(*(uint64_t (**)(void))(v0 + 8));
}

void *__swift_deallocate_boxed_opaque_existential_1(void *result)
{
  uint64_t v1 = *(void *)(result[3] - 8LL);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0) {
    return (void *)swift_slowDealloc( *result,  *(void *)(v1 + 64)
  }
                     + ((*(_DWORD *)(v1 + 80) + 16LL) & ~(unint64_t)*(_DWORD *)(v1 + 80)),
                       *(_DWORD *)(v1 + 80) | 7LL);
  return result;
}

uint64_t CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest(app:intent:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  __int128 v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  void v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = OUTLINED_FUNCTION_4_0(v6);
  void v4[9] = OUTLINED_FUNCTION_11_0();
  uint64_t v7 = OUTLINED_FUNCTION_74_0();
  v4[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[11] = v8;
  v4[12] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = OUTLINED_FUNCTION_75_0();
  v4[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[14] = v10;
  v4[15] = OUTLINED_FUNCTION_9_0(v10);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest(app:intent:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "Starting RequestDeviceUnlockAndRestartRequest, sending pinlock view.", v5, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  uint64_t v7 = v0[14];
  uint64_t v6 = v0[15];
  uint64_t v8 = v0[13];

  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))( v6,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v8);
  char v9 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  if ((v9 & 1) != 0)
  {
    OUTLINED_FUNCTION_39_3();
    uint64_t v11 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v10 + 216));
    v0[16] = (uint64_t)v11;
    *uint64_t v11 = v0;
    v11[1] = CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest(app:intent:);
    return OUTLINED_FUNCTION_29_4(v17);
  }

  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_54_4();
    uint64_t v14 = OUTLINED_FUNCTION_34_5(v13, (uint64_t)&protocol witness table for AceOutput);
    uint64_t v15 = (uint64_t **)swift_task_alloc(dword_215654);
    v0[21] = (uint64_t)v15;
    *uint64_t v15 = v0;
    v15[1] = (uint64_t *)CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest(app:intent:);
    return CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest_rfv1(app:intent:)( (uint64_t)v14,  v16,  v0[4]);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v1 = *(void *)(v0 + 88);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_task_dealloc(*(void *)(v0 + 120));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_22_2(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  OUTLINED_FUNCTION_49_4();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_task_dealloc(*(void *)(v1 + 120));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_22_2(v5);
  }

{
  uint64_t v0;
  __swift_deallocate_boxed_opaque_existential_1(*(void **)(v0 + 16));
  swift_task_dealloc(*(void *)(v0 + 120));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest(app:intent:)( uint64_t a1)
{
  if (v1)
  {
    swift_task_dealloc(*(void *)(v3 + 120));
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    *(void *)(v3 + 136) = a1;
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

#error "28380: call analysis failed (funcsize=79)"
uint64_t CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest(app:intent:)()
{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 160));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest_rfv1(app:intent:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[13] = a3;
  v4[14] = v3;
  v4[12] = a1;
  uint64_t v5 = OUTLINED_FUNCTION_77_0();
  v4[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[16] = v6;
  v4[17] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[18] = OUTLINED_FUNCTION_9_0(*(void *)(v7 - 8));
  uint64_t v8 = type metadata accessor for TemplatingResult(0LL);
  v4[19] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[20] = v9;
  v4[21] = OUTLINED_FUNCTION_9_0(v9);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest_rfv1(app:intent:)()
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v1 + 224));
  *(void *)(v0 + 176) = v2;
  *uint64_t v2 = v0;
  v2[1] = CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest_rfv1(app:intent:);
  return v4(*(void *)(v0 + 168));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 184) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  os_log_type_t v4 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  outlined init with copy of DeviceState(v5 + 16, v0 + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 168LL))(v6);
  uint64_t v8 = OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_50_1(v1, v9, v10, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for ActivityType.promptUnlock(_:), v3);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 160LL))(v2, v6);
  OUTLINED_FUNCTION_35_5(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  if (v11)
  {
    *(void *)(v0 + 80) = OUTLINED_FUNCTION_73_0();
    *(void *)(v0 + 88) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultFlowActivity,  (uint64_t)&protocol conformance descriptor for DefaultFlowActivity);
    *(void *)(v0 + 56) = v11;
  }

  else
  {
    *(void *)(v0 + 88) = 0LL;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  }

  uint64_t v13 = *(void *)(v0 + 160);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v15 = *(void *)(v0 + 144);
  uint64_t v14 = *(void *)(v0 + 152);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v12,  v0 + 16,  v7 & 1,  _swiftEmptyArrayStorage,  1LL,  1LL,  v15,  _swiftEmptyArrayStorage);
  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(v15, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( v0 + 56,  (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  uint64_t v16 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v16();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 168));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = OUTLINED_FUNCTION_70_0(a1, a2, a3, a4);
  uint64_t v6 = type metadata accessor for DialogPhase(v5);
  v4[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[8] = v7;
  void v4[9] = OUTLINED_FUNCTION_4_0(v7);
  v4[10] = OUTLINED_FUNCTION_11_0();
  uint64_t v8 = OUTLINED_FUNCTION_74_0();
  v4[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[12] = v9;
  v4[13] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = OUTLINED_FUNCTION_75_0();
  v4[14] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[15] = v11;
  v4[16] = OUTLINED_FUNCTION_9_0(v11);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:)( uint64_t a1)
{
  uint64_t v2 = v1[15];
  OUTLINED_FUNCTION_47_6(a1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:));
  char v3 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_39_3();
    uint64_t v5 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v4 + 352));
    v1[17] = (uint64_t)v5;
    *uint64_t v5 = v1;
    v5[1] = CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:);
    return v10(v1[3], v1[4], v1[5]);
  }

  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_54_4();
    uint64_t v8 = OUTLINED_FUNCTION_34_5(v7, (uint64_t)&protocol witness table for AceOutput);
    uint64_t v9 = (uint64_t **)swift_task_alloc(dword_215664);
    v1[24] = (uint64_t)v9;
    *uint64_t v9 = v1;
    v9[1] = (uint64_t *)CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:);
    return CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse_prerfv2(app:intent:intentResponse:)( (uint64_t)v8,  v1[3],  v1[4],  v1[5]);
  }

uint64_t CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:)()
{
  *(void *)(v2 + 144) = v3;
  OUTLINED_FUNCTION_54_0(v4);
  if (v0)
  {
    swift_task_dealloc(*(void *)(v2 + 128));
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  OUTLINED_FUNCTION_51_0();
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v31 = *(void *)(v0 + 32);
  LODWORD(v3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = CustomIntentHandleIntentResponseGenerator.shouldLaunchAppForFailure(app:intent:intentResponse:)(*(void *)(v0 + 24));
  static DialogPhase.completion.getter();
  uint64_t v4 = [v1 catId];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  OUTLINED_FUNCTION_58_3(v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  OUTLINED_FUNCTION_68_1(v2, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OutputGenerationManifest.responseViewId.setter(v5);
  uint64_t v8 = OUTLINED_FUNCTION_35_5(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  uint64_t v16 = OUTLINED_FUNCTION_36_4(v8, v9, v10, v11, v12, v13, v14, v15, v31);
  OUTLINED_FUNCTION_61_2(v16);
  OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
  if ((v32 & 1) != 0)
  {
    uint64_t v17 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v0 + 48) + 176LL));
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v17;
    *uint64_t v17 = v0;
    v17[1] = CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:);
    uint64_t v18 = OUTLINED_FUNCTION_67_1();
    return v32(v18);
  }

  else
  {
    char v20 = *(void *)(v0 + 144);
    uint64_t v21 = OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_51(v21);
    *(void *)(v0 + 168) = OUTLINED_FUNCTION_57();
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    unsigned int v23 = OUTLINED_FUNCTION_23_4(v22);
    *(_OWORD *)(v23 + 16) = xmmword_17E150;
    *(void *)(v23 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v20;
    OUTLINED_FUNCTION_25_0(v23, v24, v25);
    *(void *)(v0 + 176) = v33;
    OUTLINED_FUNCTION_32_3();
    unint64_t v26 = (void *)swift_task_alloc(v7);
    *(void *)(v0 + 184) = v26;
    uint8_t *v26 = v0;
    v26[1] = CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:);
    OUTLINED_FUNCTION_60_1();
    return OUTLINED_FUNCTION_11_6(v27, v28, v29, v30);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 160) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  (*(void (**)(void, void))(*(void *)(v0 + 96) + 8LL))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  OUTLINED_FUNCTION_43_3();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_22_2(v1);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 184));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v1 = *(void *)(v0 + 96);

  (*(void (**)(void, void))(v1 + 8))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  OUTLINED_FUNCTION_43_3();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_22_2(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  OUTLINED_FUNCTION_49_4();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_task_dealloc(*(void *)(v1 + 128));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_22_2(v5);
  }

{
  uint64_t v0;
  __swift_deallocate_boxed_opaque_existential_1(*(void **)(v0 + 16));
  OUTLINED_FUNCTION_44_2();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 96);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_44_2();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse_prerfv2(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = OUTLINED_FUNCTION_70_0(a1, a2, a3, a4);
  uint64_t v6 = type metadata accessor for TemplatingResult(v5);
  v4[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[8] = v7;
  void v4[9] = OUTLINED_FUNCTION_9_0(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse_prerfv2(app:intent:intentResponse:)()
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v1 + 360));
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse_prerfv2(app:intent:intentResponse:);
  return v4(v0[9], v0[3], v0[4], v0[5]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 88) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  BOOL v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  uint64_t (*v6)(uint64_t);
  uint64_t v1 = CustomIntentHandleIntentResponseGenerator.shouldLaunchAppForFailure(app:intent:intentResponse:)(*(void *)(v0 + 24));
  if (v1)
  {
    uint64_t v2 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(**(void **)(v0 + 48) + 184LL));
    *(void *)(v0 + 96) = v2;
    *uint64_t v2 = v0;
    v2[1] = CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse_prerfv2(app:intent:intentResponse:);
    uint64_t v3 = OUTLINED_FUNCTION_67_1();
    return v6(v3);
  }

  else
  {
    CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponseWithText(app:intent:templateResult:intentResponse:)( v1,  *(void *)(v0 + 32),  *(void *)(v0 + 72));
    OUTLINED_FUNCTION_33_5();
    OUTLINED_FUNCTION_40_0();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_27_2(v5);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 104) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t (*v0)(void);
  OUTLINED_FUNCTION_33_5();
  OUTLINED_FUNCTION_40_0();
  uint64_t v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_27_2(v0);
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 72));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  (*(void (**)(void, void))(*(void *)(v0 + 64) + 8LL))(*(void *)(v0 + 72), *(void *)(v0 + 56));
  swift_task_dealloc(*(void *)(v0 + 72));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponseWithText(app:intent:templateResult:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_77_0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_35();
  uint64_t v14 = v13 - v12;
  char v15 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 168LL))(a2);
  outlined init with copy of DeviceState(v3 + 16, (uint64_t)v25);
  Swift::Bool v16 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v17 = OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_50_1(v14, v18, v19, v17);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v10, enum case for ActivityType.failed(_:), v6);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 160LL))(v10, a2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  if (v20)
  {
    *((void *)&v23 + 1) = OUTLINED_FUNCTION_73_0();
    uint64_t v24 = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultFlowActivity,  (uint64_t)&protocol conformance descriptor for DefaultFlowActivity);
    *(void *)&__int128 v22 = v20;
  }

  else
  {
    uint64_t v24 = 0LL;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
  }

  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( a3,  v25,  v15 & 1,  _swiftEmptyArrayStorage,  v16,  v15 & 1,  v14,  _swiftEmptyArrayStorage,  &v22);
  _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(v14, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1Tm(v25);
  return _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0( (uint64_t)&v22,  (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
}

BOOL CustomIntentHandleIntentResponseGenerator.shouldLaunchAppForFailure(app:intent:intentResponse:)( uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AppNameResolver();
  swift_initStackObject(v3, &v14);
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v4);
  if ((dispatch thunk of DeviceState.isPhone.getter(v4, v5) & 1) == 0)
  {
    uint64_t v6 = v1[5];
    __swift_project_boxed_opaque_existential_1(v1 + 2, v6);
    if ((dispatch thunk of DeviceState.isPad.getter(v6) & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v7 = (void *)static SAAppInfoFactory.createAppInfo(app:)(a1);
  AppNameResolver.resolveAppNameWithAppInfo(appInfo:)(v7);
  uint64_t v9 = v8;
  unint64_t v11 = v10;

  OUTLINED_FUNCTION_37();
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000LL) == 0) {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  return v12 != 0;
}

void CustomIntentHandleIntentResponseGenerator.__allocating_init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  char v15 = (void *)swift_allocObject(v10, 144LL, 7LL);
  uint64_t v16 = a10[3];
  uint64_t v17 = a10[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a10, v16);
  OUTLINED_FUNCTION_66_1();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_35();
  uint64_t v21 = v20 - v19;
  (*(void (**)(uint64_t))(v22 + 16))(v20 - v19);
  OUTLINED_FUNCTION_62_2(a1, a2, a3, a4, v23, v24, v25, v26, a9, v21, v15, v16, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  OUTLINED_FUNCTION_24_0();
}

void CustomIntentHandleIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v15 = a10[3];
  uint64_t v16 = a10[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a10, v15);
  OUTLINED_FUNCTION_66_1();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_35();
  uint64_t v20 = v19 - v18;
  (*(void (**)(uint64_t))(v21 + 16))(v19 - v18);
  OUTLINED_FUNCTION_62_2(a1, a2, a3, a4, v22, v23, v24, v25, a9, v20, v10, v15, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  OUTLINED_FUNCTION_24_0();
}

uint64_t CustomIntentContinueInAppResponseGenerator.__deallocating_deinit()
{
  uint64_t v0 = CustomIntentResponseGenerator.deinit();
  return swift_deallocClassInstance(v0, 144LL, 7LL);
}

void *specialized CustomIntentHandleIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v22 = a3;
  uint64_t v16 = *(void *)(a12 - 8);
  __chkstk_darwin(a1);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of DeviceState(v19, (uint64_t)v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a10, a12);
  uint64_t v20 = specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( a1,  a2,  v22,  v27,  v23,  v24,  v25,  v26,  a9,  (uint64_t)v18,  a11,  a12,  a13);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a10, a12);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v20;
}

uint64_t type metadata accessor for CustomIntentHandleIntentResponseGenerator()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin41CustomIntentHandleIntentResponseGenerator);
}

uint64_t _s11SiriKitFlow15NLContextUpdateVSgWOhTm_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_14_3(*(void *)(v3 - 8));
  return a1;
}

uint64_t lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_10(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_11_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_20_7(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_23_4(uint64_t a1)
{
  return swift_allocObject(a1, 40LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_25_6()
{
  return swift_task_dealloc(*(void *)(v0 + 264));
}

uint64_t OUTLINED_FUNCTION_26_4()
{
  return swift_task_dealloc(*(void *)(v0 + 264));
}

uint64_t OUTLINED_FUNCTION_29_4(uint64_t (*a1)(void))
{
  return a1();
}

id OUTLINED_FUNCTION_32_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_33_5()
{
  return (*(uint64_t (**)(void, void))(v0[8] + 8LL))(v0[9], v0[7]);
}

void *OUTLINED_FUNCTION_34_5@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_35_5@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_36_4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 168LL))(a9);
}

uint64_t OUTLINED_FUNCTION_38_4()
{
  uint64_t v2 = *(void *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return v2;
}

  ;
}

uint64_t OUTLINED_FUNCTION_43_3()
{
  return swift_task_dealloc(*(void *)(v0 + 128));
}

uint64_t OUTLINED_FUNCTION_44_2()
{
  return swift_task_dealloc(*(void *)(v0 + 128));
}

uint64_t OUTLINED_FUNCTION_46_6()
{
  return static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(v0);
}

uint64_t OUTLINED_FUNCTION_47_6(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

void OUTLINED_FUNCTION_48_4()
{
}

void OUTLINED_FUNCTION_49_4()
{
  *(void *)(v1 - 8) = *v0;
}

void OUTLINED_FUNCTION_50_5()
{
  *(void *)(v1 - 8) = *v0;
}

void OUTLINED_FUNCTION_51_3()
{
  void *v0 = *v1;
}

uint64_t OUTLINED_FUNCTION_53_2()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_54_4()
{
  return type metadata accessor for AceOutput(0LL);
}

uint64_t OUTLINED_FUNCTION_56_3()
{
  return type metadata accessor for NLContextUpdate(0LL);
}

uint64_t OUTLINED_FUNCTION_58_3@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_61_2(char a1)
{
  return OutputGenerationManifest.canUseServerTTS.setter(a1 & 1);
}

void *OUTLINED_FUNCTION_62_2( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  return specialized CustomIntentHandleIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)( a1,  a2,  a3,  a4,  *(void *)(v13 - 112),  *(void *)(v13 - 104),  *(void *)(v13 - 96),  *(void *)(v13 - 88),  a9,  a10,  a11,  a12,  a13);
}

  ;
}

uint64_t OUTLINED_FUNCTION_67_1()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_68_1(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(a1, a2, 0LL);
}

uint64_t OUTLINED_FUNCTION_70_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  return type metadata accessor for DefaultFlowActivity(0LL);
}

uint64_t OUTLINED_FUNCTION_74_0()
{
  return type metadata accessor for OutputGenerationManifest(0LL);
}

uint64_t OUTLINED_FUNCTION_75_0()
{
  return type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return type metadata accessor for CustomIntentsDialogTemplating();
}

uint64_t OUTLINED_FUNCTION_77_0()
{
  return type metadata accessor for ActivityType(0LL);
}

uint64_t static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:actionMetadata:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:actionMetadata:));
}

uint64_t static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:actionMetadata:)()
{
  id v1 = [*(id *)(v0 + 32) systemProtocols];
  unint64_t v2 = type metadata accessor for LNSystemProtocol();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);
  *(void *)(v0 + 40) = v3;

  uint64_t v4 = (void *)swift_task_alloc(dword_2157DC);
  *(void *)(v0 + 48) = v4;
  *uint64_t v4 = v0;
  v4[1] = static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:actionMetadata:);
  return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)( *(void *)(v0 + 16),  *(void *)(v0 + 24),  v3);
}

{
  uint64_t (**v0)(void);
  uint64_t v1;
  id v1 = *((void *)*v0 + 5);
  OUTLINED_FUNCTION_3_0(*((void *)*v0 + 6));
  swift_bridgeObjectRelease(v1);
  return OUTLINED_FUNCTION_27_2(v0[1]);
}

uint64_t static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:));
}

uint64_t static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)()
{
  if ((Array<A>.isAudioStarting.getter(*(void *)(v0 + 80)) & 1) == 0) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  unint64_t v2 = (os_log_s *)OUTLINED_FUNCTION_9_5();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v4 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v2, v3, "Running AudioStartingIntent setup", v4);
    OUTLINED_FUNCTION_1_0((uint64_t)v4);
  }

  uint64_t v5 = *(void *)(v0 + 64);

  uint64_t v6 = *(void *)(v5 + 24);
  OUTLINED_FUNCTION_10_3();
  uint64_t v7 = dispatch thunk of DeviceState.isHomePod.getter(v6);
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v10 = 0;
      OUTLINED_FUNCTION_47_1(&dword_0, v8, v9, "The request is happening on homepod", v10);
      OUTLINED_FUNCTION_1_0((uint64_t)v10);
    }

    uint64_t v11 = *(void *)(v0 + 72);

    uint64_t v12 = *(void *)(v11 + 24);
    uint64_t v13 = *(void *)(v11 + 32);
    OUTLINED_FUNCTION_10_3();
    dispatch thunk of AceServiceInvokerAsync.peerInfo()((void *)(v0 + 16), v12, v13);
    uint64_t v14 = *(void *)(v0 + 40);
    uint64_t v15 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v14);
    uint64_t v16 = dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()(v14, v15);
    if (v17)
    {
      unint64_t v18 = v17;
      uint64_t v31 = v16;
      __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
      uint64_t v19 = swift_bridgeObjectRetain_n(v18, 2LL);
      uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
        uint64_t v23 = OUTLINED_FUNCTION_38(32LL);
        uint64_t v32 = v23;
        *(_DWORD *)uint64_t v22 = 136315138;
        swift_bridgeObjectRetain(v18);
        *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v18, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v22 + 4);
        swift_bridgeObjectRelease_n(v18, 3LL);
        _os_log_impl(&dword_0, v20, v21, "airplayRouteId: %s", v22, 0xCu);
        swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v23);
        OUTLINED_FUNCTION_1_0((uint64_t)v22);
      }

      else
      {
        swift_bridgeObjectRelease_n(v18, 2LL);
      }

      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v25 = v26;
      unint64_t v27 = v26[2];
      if (v27 >= v26[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v25 = v30;
      }

      v25[2] = v27 + 1;
      uint64_t v28 = &v25[2 * v27];
      v28[4] = v31;
      v28[5] = v18;
      goto LABEL_19;
    }

    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  }

  uint64_t v25 = _swiftEmptyArrayStorage;
LABEL_19:
  *(void *)(v0 + 88) = v25;
  uint64_t v29 = (void *)swift_task_alloc(dword_2157E4);
  *(void *)(v0 + 96) = v29;
  *uint64_t v29 = v0;
  v29[1] = static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:);
  return static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)((uint64_t)v25);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 96));
  swift_bridgeObjectRelease(v2);
  os_log_type_t v3 = (void *)swift_task_alloc(dword_2157EC);
  *(void *)(v1 + 104) = v3;
  *os_log_type_t v3 = v5;
  v3[1] = static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:);
  return static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:)(*(void *)(v1 + 72));
}

{
  uint64_t (**v0)(void);
  OUTLINED_FUNCTION_3_0(*((void *)*v0 + 13));
  return OUTLINED_FUNCTION_27_2(v0[1]);
}

uint64_t static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)( uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return swift_task_switch( static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:),  0LL,  0LL);
}

uint64_t static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  os_log_type_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  *os_log_type_t v3 = v0;
  v3[1] = static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 7,  0LL,  0LL,  0xD000000000000037LL,  0x8000000000192ED0LL,  partial apply for closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:),  v2,  &type metadata for Bool);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *v1;
  os_log_type_t v3 = *(void *)(*v1 + 40);
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:);
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 32));
    uint64_t v4 = static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:);
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 56));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  swift_task_dealloc(*(void *)(v0 + 32));
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain(v1);
  os_log_type_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 48);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    os_log_type_t v9 = (void *)OUTLINED_FUNCTION_38(8LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4);
    *os_log_type_t v9 = v10;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    _os_log_impl(&dword_0, v4, v5, "Error trying to set audio route: %@", v8, 0xCu);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v9, 1LL, v11);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:));
}

uint64_t static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AceServiceInvokerAsync.prepareForAudioHandoff()[1]);
  *(void *)(v0 + 24) = v4;
  *uint64_t v4 = v0;
  v4[1] = static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:);
  return dispatch thunk of AceServiceInvokerAsync.prepareForAudioHandoff()(v2, v3);
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  const char *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  if (*(_BYTE *)(v1 + 32) == 1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v2 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
    uint64_t v3 = (os_log_s *)OUTLINED_FUNCTION_9_5();
    uint64_t v4 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_7_2(v4))
    {
      uint64_t v5 = "PrepareForAudioHandoff succeeded";
LABEL_10:
      uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v8 = 0;
      OUTLINED_FUNCTION_47_1(&dword_0, v3, v0, v5, v8);
      OUTLINED_FUNCTION_1_0((uint64_t)v8);
    }
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v6 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
    uint64_t v3 = (os_log_s *)OUTLINED_FUNCTION_9_5();
    uint64_t v7 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_7_2(v7))
    {
      uint64_t v5 = "PrepareForAudioHandoff failed";
      goto LABEL_10;
    }
  }

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:)(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  *(_BYTE *)(*(void *)v1 + 32LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:), 0LL, 0LL);
}

void closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)( uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v2);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 16) & ~v6;
  uint64_t v8 = swift_allocObject(&unk_1F3E60, v7 + v4, v6 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))( v8 + v7,  (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v2);
  aBlock[4] = partial apply for closure #1 in closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:);
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor;
  os_log_type_t v9 = _Block_copy(aBlock);
  swift_release();
  INCRouteAudioToAirplayOutputDevices(isa, v9);
  _Block_release(v9);
}

void closure #1 in closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)( char a1, uint64_t a2)
{
  if ((a1 & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_0, v4, v5, "Successfully set AirPlay output device", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    LOBYTE(v18) = 1;
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
    CheckedContinuation.resume(returning:)(&v18, v7);
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain(a2);
    uint64_t v10 = swift_errorRetain(a2);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v14 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v13 = 138412290;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v18 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v13 + 4);
      }

      else
      {
        uint64_t v18 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v13 + 4);
        uint64_t v15 = 0LL;
      }

      *uint64_t v14 = v15;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl(&dword_0, v11, v12, "Failed to set AirPlay output device: %@", v13, 0xCu);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v14, 1LL, v16);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    if (a2)
    {
      uint64_t v18 = a2;
      swift_errorRetain(a2);
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
      CheckedContinuation.resume(throwing:)(&v18, v17);
    }
  }

ValueMetadata *type metadata accessor for SharedAudioStartingIntentSetup()
{
  return &type metadata for SharedAudioStartingIntentSetup;
}

void partial apply for closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)( uint64_t a1)
{
}

uint64_t sub_2A6B0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void partial apply for closure #1 in closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)( char a1, uint64_t a2)
{
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t OUTLINED_FUNCTION_4_8()
{
  return swift_errorRelease(v0);
}

BOOL OUTLINED_FUNCTION_7_2(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_9_5()
{
  return Logger.logObject.getter();
}

void *OUTLINED_FUNCTION_10_3()
{
  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t one-time initialization function for semanticToURL()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, URL?)>);
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL?))
                 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = swift_allocObject(v0, v4 - v2 + 16 * v2, v3 | 7);
  *(_OWORD *)(v5 + 16) = xmmword_17F920;
  uint64_t v6 = (void *)(v5 + v4);
  *uint64_t v6 = 0x5765746F4E77656ELL;
  v6[1] = 0xEF65746144687469LL;
  URL.init(string:)(0xD000000000000041LL, 0x8000000000192F30LL);
  OUTLINED_FUNCTION_1_9();
  strcpy(v7, "AirDropPhotos");
  *((_WORD *)v7 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = -4864;
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_1_9();
  strcpy(v8, "EmailLastImage");
  v8[15] = -18;
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_1_9();
  strcpy(v9, "TextLastImage");
  *((_WORD *)v9 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = -4864;
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_1_9();
  *uint64_t v10 = 0x65724241656B6154LL;
  v10[1] = 0xEA00000000006B61LL;
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_1_9();
  strcpy(v11, "BlockOffAnHour");
  v11[15] = -18;
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_1_9();
  *os_log_type_t v12 = 0xD000000000000011LL;
  v12[1] = 0x8000000000193110LL;
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_3_10();
  *uint64_t v14 = v13 | 0x46494700000000LL;
  v14[1] = 0xE700000000000000LL;
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_3_10();
  *uint64_t v16 = v15 | 0x6F43525100000000LL;
  v16[1] = 0xEA00000000006564LL;
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_1_9();
  *uint64_t v17 = 0x697551636973754DLL;
  v17[1] = 0xE90000000000007ALL;
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_1_9();
  strcpy(v18, "ShazamShortcut");
  v18[15] = -18;
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_1_9();
  strcpy(v19, "WhatsAShortcut");
  v19[15] = -18;
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_1_9();
  *uint64_t v20 = 0x6146724F65757254LL;
  v20[1] = 0xEB0000000065736CLL;
  OUTLINED_FUNCTION_2_10();
  OUTLINED_FUNCTION_1_9();
  strcpy(v21, "HaikuGenerator");
  v21[15] = -18;
  OUTLINED_FUNCTION_2_10();
  OUTLINED_FUNCTION_1_9();
  *uint64_t v22 = 0x6F74537972616353LL;
  v22[1] = 0xEA00000000007972LL;
  OUTLINED_FUNCTION_2_10();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t result = Dictionary.init(dictionaryLiteral:)(v5, &type metadata for String, v23, &protocol witness table for String);
  static TopLevelStarterShortcuts.semanticToURL = result;
  return result;
}

uint64_t *TopLevelStarterShortcuts.semanticToURL.unsafeMutableAddressor()
{
  if (one-time initialization token for semanticToURL != -1) {
    swift_once(&one-time initialization token for semanticToURL, one-time initialization function for semanticToURL);
  }
  return &static TopLevelStarterShortcuts.semanticToURL;
}

uint64_t static TopLevelStarterShortcuts.semanticToURL.getter()
{
  if (one-time initialization token for semanticToURL != -1) {
    swift_once(&one-time initialization token for semanticToURL, one-time initialization function for semanticToURL);
  }
  return swift_bridgeObjectRetain(static TopLevelStarterShortcuts.semanticToURL);
}

ValueMetadata *type metadata accessor for TopLevelStarterShortcuts()
{
  return &type metadata for TopLevelStarterShortcuts;
}

uint64_t OUTLINED_FUNCTION_0_11()
{
  return URL.init(string:)(0xD000000000000041LL, (v0 - 32) | 0x8000000000000000LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_2_10()
{
  return URL.init(string:)(v1, (v0 - 32) | 0x8000000000000000LL);
}

  ;
}

void INIntent.typed<A>(as:)(uint64_t a1, uint64_t a2)
{
}

uint64_t INIntent.debugDescriptionLite.getter()
{
  uint64_t v4 = (uint64_t)v0;
  outlined bridged method (pb) of @objc INIntent.parametersByName.getter(v0);
  if (!v5)
  {
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    _StringGuts.grow(_:)(30LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t ObjectType = swift_getObjectType(v0);
    v119._uint64_t countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0LL);
    String.append(_:)(v119);
    OUTLINED_FUNCTION_14();
    v120._object = (void *)0x80000000001933D0LL;
    v120._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    String.append(_:)(v120);
    return 0x746E65746E494E49LL;
  }

  uint64_t v6 = (void *)v5;
  uint64_t v127 = v4;
  uint64_t v128 = v5 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(v5 + 64);
  int64_t v129 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = 0LL;
  uint64_t v11 = &_swiftEmptyDictionarySingleton;
  uint64_t v132 = swift_bridgeObjectRetain(v5);
  v133 = (char *)&type metadata for Any + 8;
  if (!v9) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v12 = __clz(__rbit64(v9));
  uint64_t v13 = (v9 - 1) & v9;
  for (unint64_t i = v12 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v10 << 6))
  {
    uint64_t v25 = (uint64_t *)(v6[6] + 16 * i);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = v6[2];
    swift_bridgeObjectRetain(v26);
    if (v28 && (unint64_t v29 = OUTLINED_FUNCTION_26_5(), (v30 & 1) != 0))
    {
      OUTLINED_FUNCTION_39_4(v6[7] + 32 * v29);
      outlined init with take of Any(v146, &v147);
    }

    else
    {
      v148 = &type metadata for String;
      *(void *)&__int128 v147 = 0x3E6C6C756E3CLL;
      *((void *)&v147 + 1) = 0xE600000000000000LL;
    }

    OUTLINED_FUNCTION_39_4((uint64_t)&v147);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    uint64_t v134 = v13;
    uint64_t v136 = v10;
    uint64_t v138 = v26;
    if ((OUTLINED_FUNCTION_35_6((uint64_t)v144, (uint64_t)v146, (uint64_t)v133, v31) & 1) != 0)
    {
      uint64_t v32 = *(void *)&v144[0];
      uint64_t v2 = *(void *)(*(void *)&v144[0] + 16LL);
      if (v2)
      {
        uint64_t v131 = v27;
        v143 = _swiftEmptyArrayStorage;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v33 = v32;
        uint64_t v1 = v32 + 32;
        do
        {
          outlined init with copy of Any(v1, (uint64_t)v145);
          outlined init with copy of Any((uint64_t)v145, (uint64_t)v142);
          uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringLiteConvertible);
          if (OUTLINED_FUNCTION_35_6( (uint64_t)v144,  (uint64_t)v142,  (uint64_t)&type metadata for Any + 8,  v34))
          {
            uint64_t v3 = OUTLINED_FUNCTION_6_7(v144);
            uint64_t v36 = v35;
            __swift_destroy_boxed_opaque_existential_0Tm(v146);
          }

          else
          {
            OUTLINED_FUNCTION_54_5();
            outlined destroy of Any?( v37,  &demangling cache variable for type metadata for CustomDebugStringLiteConvertible?);
            OUTLINED_FUNCTION_39_4((uint64_t)v145);
            OUTLINED_FUNCTION_51_4();
            OUTLINED_FUNCTION_14_7();
            uint64_t v39 = OUTLINED_FUNCTION_12_6(v38);
            uint64_t v41 = OUTLINED_FUNCTION_16_6(v39, v40);
            uint64_t v43 = v42;
            uint64_t v45 = v44;
            uint64_t v47 = v46;
            OUTLINED_FUNCTION_20();
            uint64_t v3 = static String._fromSubstring(_:)(v41, v43, v45, v47);
            uint64_t v36 = v48;
            OUTLINED_FUNCTION_1_2();
          }

          __swift_destroy_boxed_opaque_existential_0Tm(v145);
          uint64_t v49 = v143;
          if ((swift_isUniquelyReferenced_nonNull_native(v143) & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v49 = v143;
          }

          unint64_t v50 = v49[2];
          if (v50 >= v49[3] >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v49 = v143;
          }

          v49[2] = v50 + 1;
          __n128 v51 = &v49[2 * v50];
          v51[4] = v3;
          v51[5] = v36;
          v1 += 32LL;
          --v2;
        }

        while (v2);
        swift_bridgeObjectRelease(v33);
        *(void *)&v146[0] = v49;
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        unint64_t v53 = lazy protocol witness table accessor for type [String] and conformance [A]();
        uint64_t v54 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v52, v53);
        uint64_t v56 = v55;
        OUTLINED_FUNCTION_34_0();
        *(void *)&v146[0] = 91LL;
        *((void *)&v146[0] + 1) = 0xE100000000000000LL;
        v57._uint64_t countAndFlagsBits = v54;
        v57._object = v56;
        String.append(_:)(v57);
        OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_80();
        OUTLINED_FUNCTION_55_3(93LL);
        OUTLINED_FUNCTION_14();
        Substring.init(_:)(*(void *)&v146[0]);
        OUTLINED_FUNCTION_18_5();
        *(void *)&v146[0] = v11;
        OUTLINED_FUNCTION_22_5( v131,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v122,  v123,  v124,  v125,  v127,  v128,  v129,  v131,  v132,  (uint64_t)v133,  v134,  v136,  v138);
        OUTLINED_FUNCTION_17_6();
        if (v18) {
          goto LABEL_84;
        }
        uint64_t v67 = v65;
        char v68 = v66;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Substring>);
        if (OUTLINED_FUNCTION_21_4())
        {
          specialized __RawDictionaryStorage.find<A>(_:)(v130, v139);
          OUTLINED_FUNCTION_31_5();
          if (!v70) {
            goto LABEL_89;
          }
          uint64_t v67 = v69;
        }

        uint64_t v11 = *(void **)&v146[0];
        if ((v68 & 1) != 0)
        {
          OUTLINED_FUNCTION_10_4();
          *uint64_t v67 = v3;
          v67[1] = 0LL;
          v67[2] = v1;
          v67[3] = (uint64_t)v56;
          uint64_t v71 = v139;
        }

        else
        {
          *(void *)(*(void *)&v146[0] + 8 * ((unint64_t)v67 >> 6) + 64) |= 1LL << (char)v67;
          uint64_t v109 = (uint64_t *)(v11[6] + 16LL * (void)v67);
          *uint64_t v109 = v130;
          v109[1] = v139;
          uint64_t v110 = (uint64_t *)(v11[7] + 32LL * (void)v67);
          *uint64_t v110 = v3;
          v110[1] = 0LL;
          v110[2] = v1;
          v110[3] = (uint64_t)v56;
          uint64_t v111 = v11[2];
          BOOL v18 = __OFADD__(v111, 1LL);
          uint64_t v112 = v111 + 1;
          if (v18) {
            goto LABEL_87;
          }
          v11[2] = v112;
          uint64_t v71 = swift_bridgeObjectRetain(v139);
        }

        goto LABEL_75;
      }

      OUTLINED_FUNCTION_14();
    }

    outlined init with copy of Any((uint64_t)&v147, (uint64_t)v145);
    uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringLiteConvertible);
    if (!OUTLINED_FUNCTION_35_6((uint64_t)v144, (uint64_t)v145, (uint64_t)&type metadata for Any + 8, v72))
    {
      OUTLINED_FUNCTION_54_5();
      outlined destroy of Any?(v86, &demangling cache variable for type metadata for CustomDebugStringLiteConvertible?);
      OUTLINED_FUNCTION_39_4((uint64_t)&v147);
      OUTLINED_FUNCTION_51_4();
      OUTLINED_FUNCTION_14_7();
      uint64_t v88 = OUTLINED_FUNCTION_12_6(v87);
      uint64_t v3 = OUTLINED_FUNCTION_16_6(v88, v89);
      uint64_t v2 = v90;
      uint64_t v1 = v91;
      uint64_t v93 = v92;
      OUTLINED_FUNCTION_20();
      swift_isUniquelyReferenced_nonNull_native(v11);
      *(void *)&v146[0] = v11;
      OUTLINED_FUNCTION_22_5( v27,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v122,  v123,  v124,  v125,  v127,  v128,  v129,  v130,  v132,  (uint64_t)v133,  v134,  v10,  v26);
      OUTLINED_FUNCTION_17_6();
      if (v18) {
        goto LABEL_83;
      }
      char v103 = v101;
      char v104 = v102;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Substring>);
      if (OUTLINED_FUNCTION_21_4())
      {
        OUTLINED_FUNCTION_26_5();
        OUTLINED_FUNCTION_31_5();
        if (!v70) {
          goto LABEL_89;
        }
        char v103 = v105;
      }

      uint64_t v11 = *(void **)&v146[0];
      if ((v104 & 1) != 0)
      {
        OUTLINED_FUNCTION_10_4();
        *char v103 = v3;
        v103[1] = v2;
        v103[2] = v1;
        v103[3] = v93;
      }

      else
      {
        OUTLINED_FUNCTION_1_10();
        if (v18) {
          goto LABEL_86;
        }
        OUTLINED_FUNCTION_52_2(v108);
      }

      uint64_t v71 = v141;
LABEL_75:
      swift_bridgeObjectRelease(v71);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      uint64_t v107 = &v147;
      goto LABEL_76;
    }

    uint64_t v73 = OUTLINED_FUNCTION_6_7(v144);
    Substring.init(_:)(v73);
    OUTLINED_FUNCTION_18_5();
    *(void *)&v144[0] = v11;
    OUTLINED_FUNCTION_22_5( v27,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v122,  v123,  v124,  v125,  v127,  v128,  v129,  v130,  v132,  (uint64_t)v133,  v13,  v10,  v26);
    OUTLINED_FUNCTION_17_6();
    if (v18) {
      goto LABEL_82;
    }
    uint64_t v83 = v81;
    char v84 = v82;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Substring>);
    if (OUTLINED_FUNCTION_21_4())
    {
      OUTLINED_FUNCTION_26_5();
      OUTLINED_FUNCTION_31_5();
      if (!v70) {
        goto LABEL_89;
      }
      uint64_t v83 = v85;
    }

    uint64_t v11 = *(void **)&v144[0];
    if ((v84 & 1) != 0)
    {
      OUTLINED_FUNCTION_10_4();
      *uint64_t v83 = v3;
      v83[1] = v2;
      v83[2] = v1;
      v83[3] = v13;
    }

    else
    {
      OUTLINED_FUNCTION_1_10();
      if (v18) {
        goto LABEL_85;
      }
      OUTLINED_FUNCTION_52_2(v106);
    }

    swift_bridgeObjectRelease(v140);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    __swift_destroy_boxed_opaque_existential_0Tm(&v147);
    uint64_t v107 = v146;
LABEL_76:
    __swift_destroy_boxed_opaque_existential_0Tm(v107);
    uint64_t v6 = (void *)v132;
    unint64_t v9 = v135;
    uint64_t v10 = v137;
    if (v135) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }

    if (v15 >= v129) {
      goto LABEL_78;
    }
    unint64_t v16 = *(void *)(v128 + 8 * v15);
    ++v10;
    if (!v16)
    {
      uint64_t v10 = v15 + 1;
      OUTLINED_FUNCTION_30_5();
      if (v17 == v18) {
        goto LABEL_78;
      }
      OUTLINED_FUNCTION_29_5();
      if (!v16)
      {
        uint64_t v10 = v19 + 2;
        OUTLINED_FUNCTION_30_5();
        if (v17 == v18) {
          goto LABEL_78;
        }
        OUTLINED_FUNCTION_29_5();
        if (!v16)
        {
          uint64_t v10 = v20 + 3;
          OUTLINED_FUNCTION_30_5();
          if (v17 == v18) {
            goto LABEL_78;
          }
          OUTLINED_FUNCTION_29_5();
          if (!v16)
          {
            uint64_t v10 = v21 + 4;
            OUTLINED_FUNCTION_30_5();
            if (v17 == v18) {
              goto LABEL_78;
            }
            OUTLINED_FUNCTION_29_5();
            if (!v16) {
              break;
            }
          }
        }
      }
    }

LABEL_88:
  __break(1u);
LABEL_89:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void INIntent.parameterMetadata()()
{
  unint64_t v1 = outlined bridged method (ob) of @objc INIntentDescription.slotDescriptions()([v0 _intentInstanceDescription]);
  if (v1)
  {
    if (v1 >> 62) {
      goto LABEL_17;
    }
    uint64_t v2 = v1 & 0xFFFFFFFFFFFFFF8LL;
    OUTLINED_FUNCTION_80();
    while (1)
    {
      uint64_t v19 = v2;
      specialized MutableCollection<>.sort(by:)(&v19);
      OUTLINED_FUNCTION_14();
      uint64_t v3 = v19;
      if (v19 < 0 || (v19 & 0x4000000000000000LL) != 0)
      {
        uint64_t v18 = OUTLINED_FUNCTION_80();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v18);
        OUTLINED_FUNCTION_34_0();
        if (!v4)
        {
LABEL_19:
          OUTLINED_FUNCTION_34_0();
          OUTLINED_FUNCTION_13_4();
          return;
        }
      }

      else
      {
        uint64_t v4 = *(void *)(v19 + 16);
        if (!v4) {
          goto LABEL_19;
        }
      }

      uint64_t v19 = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v4);
      if (v4 < 0) {
        break;
      }
      uint64_t v5 = 0LL;
      while (v4 != v5)
      {
        if ((v3 & 0xC000000000000001LL) != 0) {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
        }
        else {
          id v6 = OUTLINED_FUNCTION_46_7(v3 + 8 * v5);
        }
        uint64_t v7 = v6;
        uint64_t v8 = outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(v6);
        if (!v9) {
          goto LABEL_21;
        }
        uint64_t v10 = v8;
        uint64_t v11 = v9;
        ++v5;
        BOOL v12 = [v7 resolveSelector] != 0;
        uint64_t v13 = type metadata accessor for SiriKitParameterMetadata(0LL);
        swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
        uint64_t v14 = SiriKitParameterMetadata.init(parameterName:shouldResolve:confirmationStates:)( v10,  v11,  v12,  _swiftEmptyArrayStorage);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v15 = *(void *)(v19 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
        uint64_t v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v14);
        specialized ContiguousArray._endMutation()(v16);
        if (v4 == v5) {
          goto LABEL_19;
        }
      }

      __break(1u);
LABEL_17:
      unint64_t v17 = OUTLINED_FUNCTION_80();
      uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v17);
      OUTLINED_FUNCTION_14();
    }

    __break(1u);
LABEL_21:
    __break(1u);
  }

  __break(1u);
  swift_release();
  __break(1u);
}

INIntent __swiftcall INIntent.clone()()
{
  id v1 = [v0 copy];
  _bridgeAnyObjectToAny(_:)(v48);
  swift_unknownObjectRelease(v1);
  uint64_t v2 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INIntent,  &OBJC_CLASS___INIntent_ptr);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  id v43 = v0;
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v8 = OUTLINED_FUNCTION_38(32LL);
    v48[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = INIntent.debugDescriptionLite.getter();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v48);
    int v11 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v7 + 4);
    OUTLINED_FUNCTION_37_5(v11, v12, v13, v14, v15, v16, v17, v18, v43);
    OUTLINED_FUNCTION_37_5(v19, v20, v21, v22, v23, v24, v25, v26, v44);
    OUTLINED_FUNCTION_20();
    _os_log_impl(&dword_0, v5, v6, "Unexpected failure when cloning intent: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v8);
    OUTLINED_FUNCTION_1_0((uint64_t)v7);
  }

  else
  {

    OUTLINED_FUNCTION_37_5(v27, v28, v29, v30, v31, v32, v33, v34, v43);
    OUTLINED_FUNCTION_37_5(v35, v36, v37, v38, v39, v40, v41, v42, v46);
  }

  return (INIntent)v45;
}

uint64_t protocol witness for CustomDebugStringLiteConvertible.debugDescriptionLite.getter in conformance INIntent()
{
  return INIntent.debugDescriptionLite.getter();
}

uint64_t one-time initialization function for setCachedLanguage()
{
  uint64_t result = closure #1 in variable initialization expression of static INPreferencesCacher.setCachedLanguage();
  static INPreferencesCacher.setCachedLanguage = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of static INPreferencesCacher.setCachedLanguage()
{
  id v0 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v1 = outlined bridged method (ob) of @objc AFPreferences.languageCode()(v0);
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    id v5 = [(id)objc_opt_self(INPreferences) sharedPreferences];
    if (v5)
    {
      os_log_type_t v6 = v5;
      outlined bridged method (mbnn) of @objc INPreferences._cachedSiriLanguageCode.setter(v3, v4, v5);
    }

    else
    {
      swift_bridgeObjectRelease(v4);
    }
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      int v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)int v11 = 0;
      _os_log_impl( &dword_0,  v9,  v10,  "Unable to determine current Siri locale. Exceptions may be thrown when trying to convert intents to JSON if this process lacks proper entitlements.",  v11,  2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }
  }

  return 1LL;
}

Swift::String __swiftcall INIntent.jsonRepresentation()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v73 = (uint64_t)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v71 = (uint64_t)&v70 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v72 = (uint64_t)&v70 - v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v70 - v8;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v74 = *(void *)(v10 - 8);
  uint64_t v75 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  int v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  int v15 = (char *)&v70 - v14;
  uint64_t v16 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v16);
  int v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for setCachedLanguage != -1) {
    swift_once( &one-time initialization token for setCachedLanguage,  one-time initialization function for setCachedLanguage);
  }
  int v19 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  id v20 = [v0 _JSONDictionaryRepresentation];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v20,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_1_2();
  id v78 = 0LL;
  id v22 = [v19 dataWithJSONObject:isa options:0 error:&v78];

  id v23 = v78;
  if (!v22)
  {
    int v33 = v23;
    uint64_t v34 = _convertNSErrorToError(_:)(v23);

    swift_willThrow(v35, v36, v37, v38, v39);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v40 = __swift_project_value_buffer(v75, (uint64_t)static Logger.voiceCommands);
    uint64_t v41 = swift_errorRetain(v34);
    int v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      id v44 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      id v45 = (void *)OUTLINED_FUNCTION_38(32LL);
      id v78 = v45;
      *(_DWORD *)id v44 = 136315138;
      uint64_t v76 = v34;
      swift_errorRetain(v34);
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v47 = String.init<A>(describing:)(&v76, v46);
      uint64_t v76 = OUTLINED_FUNCTION_41_4(v47, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v44 + 4);
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_43_0();
      OUTLINED_FUNCTION_43_0();
      _os_log_impl(&dword_0, v42, v43, "Could not convert dictionary representation to JSON: %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0((uint64_t)v45);
      OUTLINED_FUNCTION_1_0((uint64_t)v44);
    }

    else
    {
      OUTLINED_FUNCTION_43_0();
      OUTLINED_FUNCTION_43_0();
    }

    OUTLINED_FUNCTION_38_5((uint64_t)v13, v40);
    OUTLINED_FUNCTION_38_5(v71, (uint64_t)v13);
    uint64_t v52 = OUTLINED_FUNCTION_49_5();
    outlined init with copy of Logger?(v52, v73);
    uint64_t v53 = OUTLINED_FUNCTION_43_4();
    if ((_DWORD)v53 == 1)
    {
      outlined destroy of Any?(v73, &demangling cache variable for type metadata for Logger?);
    }

    else
    {
      uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = OUTLINED_FUNCTION_38(32LL);
        Swift::String v57 = (void *)OUTLINED_FUNCTION_38(64LL);
        id v78 = v57;
        *(_DWORD *)uint64_t v56 = 136315650;
        uint64_t v58 = OUTLINED_FUNCTION_48_5((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/Cust"
                                              "omIntents/INIntent+Json.swift");
        unint64_t v60 = v59;
        uint64_t v76 = OUTLINED_FUNCTION_41_4(v58, v59);
        OUTLINED_FUNCTION_5_5();
        swift_bridgeObjectRelease(v60);
        *(_WORD *)(v56 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2048;
        OUTLINED_FUNCTION_36_5(v56 + 14, 120LL);
        *(_WORD *)(v56 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
        uint64_t v76 = OUTLINED_FUNCTION_41_4(0xD000000000000033LL, 0x80000000001933F0LL);
        OUTLINED_FUNCTION_5_5();
        _os_log_impl(&dword_0, v54, v55, "FatalError at %s:%lu - %s", (uint8_t *)v56, 0x20u);
        OUTLINED_FUNCTION_40_5((uint64_t)&type metadata for Any);
        OUTLINED_FUNCTION_1_0((uint64_t)v57);
        OUTLINED_FUNCTION_1_0(v56);
      }

      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
    }

    static SiriKitLifecycle._logCrashToEventBus(_:)(0xD000000000000033LL, 0x80000000001933F0LL);
    unint64_t v61 = 0xD000000000000033LL;
    unint64_t v62 = 0x80000000001933F0LL;
    goto LABEL_25;
  }

  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  unint64_t v26 = v25;

  uint64_t v27 = outlined copy of Data._Representation(v24, v26);
  static String.Encoding.utf8.getter(v27);
  uint64_t v28 = String.init(data:encoding:)(v24, v26, v18);
  int v30 = v29;
  OUTLINED_FUNCTION_53_3();
  if (!v30)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v49 = __swift_project_value_buffer(v75, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_38_5((uint64_t)v15, v49);
    OUTLINED_FUNCTION_38_5((uint64_t)v9, (uint64_t)v15);
    uint64_t v50 = OUTLINED_FUNCTION_49_5();
    outlined init with copy of Logger?(v50, v72);
    uint64_t v51 = OUTLINED_FUNCTION_43_4();
    if ((_DWORD)v51 == 1)
    {
      outlined destroy of Any?(v72, &demangling cache variable for type metadata for Logger?);
    }

    else
    {
      uint64_t v63 = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v64 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = OUTLINED_FUNCTION_38(32LL);
        char v66 = (void *)OUTLINED_FUNCTION_38(64LL);
        id v78 = v66;
        *(_DWORD *)uint64_t v65 = 136315650;
        uint64_t v67 = OUTLINED_FUNCTION_48_5((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/Cust"
                                              "omIntents/INIntent+Json.swift");
        uint64_t v76 = OUTLINED_FUNCTION_41_4(v67, v68);
        OUTLINED_FUNCTION_5_5();
        OUTLINED_FUNCTION_20();
        *(_WORD *)(v65 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2048;
        OUTLINED_FUNCTION_36_5(v65 + 14, 124LL);
        *(_WORD *)(v65 + 2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
        uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000027LL,  0x80000000001934B0LL,  (uint64_t *)&v78);
        OUTLINED_FUNCTION_5_5();
        _os_log_impl(&dword_0, v63, v64, "FatalError at %s:%lu - %s", (uint8_t *)v65, 0x20u);
        OUTLINED_FUNCTION_40_5((uint64_t)&type metadata for Any);
        OUTLINED_FUNCTION_1_0((uint64_t)v66);
        OUTLINED_FUNCTION_1_0(v65);
      }

      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v75);
    }

    static SiriKitLifecycle._logCrashToEventBus(_:)(0xD000000000000027LL, 0x80000000001934B0LL);
    unint64_t v61 = 0xD000000000000027LL;
    unint64_t v62 = 0x80000000001934B0LL;
LABEL_25:
    uint64_t v31 = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v61,  v62,  "/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/CustomIntents/INIntent+Json.swift",  103LL,  2LL);
    __break(1u);
    goto LABEL_26;
  }

  OUTLINED_FUNCTION_53_3();
  uint64_t v31 = v28;
  int v32 = v30;
LABEL_26:
  result._object = v32;
  result._uint64_t countAndFlagsBits = v31;
  return result;
}

void INIntent.safeJSONDictionaryRepresentation.getter()
{
  if (one-time initialization token for setCachedLanguage != -1) {
    swift_once( &one-time initialization token for setCachedLanguage,  one-time initialization function for setCachedLanguage);
  }
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( [v0 _JSONDictionaryRepresentation],  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_1();
}

void INIntentResolutionResult.safeJSONDictionaryRepresentation(for:parameterName:)(uint64_t a1)
{
  if (one-time initialization token for setCachedLanguage != -1) {
    swift_once( &one-time initialization token for setCachedLanguage,  one-time initialization function for setCachedLanguage);
  }
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v1 _JSONDictionaryRepresentationForIntent:a1 parameterName:v3];

  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_2();
}

void INIntentResponse.typed<A>(as:)(uint64_t a1, uint64_t a2)
{
}

void INIntent.typed<A>(as:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *))
{
  if (swift_dynamicCastUnknownClass(v3))
  {
    id v5 = v3;
  }

  else
  {
    id v6 = (id)a3(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (!swift_dynamicCastUnknownClass(v6)) {
    }
      }
  }

  OUTLINED_FUNCTION_2();
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
}

{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    NSString v3 = (const void *)OUTLINED_FUNCTION_15_4(v2, 16 * v1);
    id v4 = _swift_stdlib_malloc_size(v3);
    OUTLINED_FUNCTION_25_7((uint64_t)(v4 - 32) / 16);
    specialized Sequence._copySequenceContents(initializing:)(v5, v6, v7, v8);
    OUTLINED_FUNCTION_20_8();
    OUTLINED_FUNCTION_33_6();
    if (!v9) {
      __break(1u);
    }
  }

  OUTLINED_FUNCTION_11_7();
}

{
  specialized _copyCollectionToContiguousArray<A>(_:)( a1,  &demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: String)>,  (void (*)(void))specialized Sequence._copySequenceContents(initializing:));
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      id v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      id v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      size_t v5 = _swift_stdlib_malloc_size(v4);
      __int128 v4[2] = v2;
      void v4[3] = (2 * ((uint64_t)(v5 - 32) / 8)) | 1;
    }

    swift_bridgeObjectRetain(v1);
    uint64_t v6 = specialized Array._copyContents(initializing:)((uint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v7;
    swift_bridgeObjectRelease(v6);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_8:
    if (v1 < 0) {
      uint64_t v8 = v1;
    }
    else {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v1);
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

void specialized _copyCollectionToContiguousArray<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    if (!v7) {
      goto LABEL_8;
    }
    OUTLINED_FUNCTION_34_6();
    if (!(v9 ^ v10 | v8))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
      uint64_t v12 = (void *)OUTLINED_FUNCTION_15_4(v11, 8 * v7);
      size_t v13 = _swift_stdlib_malloc_size(v12);
      v12[2] = v7;
      void v12[3] = 2 * ((uint64_t)(v13 - 32) / 8);
    }

    if (v6 != v4)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(v5 + 8 * v4, v7);
LABEL_8:
      OUTLINED_FUNCTION_38_0();
      return;
    }
  }

  __break(1u);
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    if (!v7) {
      goto LABEL_8;
    }
    OUTLINED_FUNCTION_34_6();
    if (!(v9 ^ v10 | v8))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v12 = (void *)OUTLINED_FUNCTION_15_4(v11, 8 * v7);
      size_t v13 = _swift_stdlib_malloc_size(v12);
      v12[2] = v7;
      void v12[3] = (2 * ((uint64_t)(v13 - 32) / 8)) | 1;
    }

    if (v6 != v4)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(v5 + 8 * v4, v7);
LABEL_8:
      OUTLINED_FUNCTION_38_0();
      return;
    }
  }

  __break(1u);
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  uint64_t v5 = a4 >> 1;
  unint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    if (!v6) {
      goto LABEL_8;
    }
    OUTLINED_FUNCTION_34_6();
    if (!(v8 ^ v9 | v7))
    {
      char v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v11 = (void *)OUTLINED_FUNCTION_15_4(v10, 16 * v6);
      uint64_t v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v6;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 16);
    }

    if (v5 != v4)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)();
LABEL_8:
      OUTLINED_FUNCTION_38_0();
      return;
    }
  }

  __break(1u);
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
    unint64_t v6 = (const void *)swift_allocObject(v5, 24 * v3 + 32, 7LL);
    size_t v7 = _swift_stdlib_malloc_size(v6);
    OUTLINED_FUNCTION_25_7((uint64_t)(v7 - 32) / 24);
    a3();
    OUTLINED_FUNCTION_20_8();
    OUTLINED_FUNCTION_33_6();
    if (!v8) {
      __break(1u);
    }
  }

  OUTLINED_FUNCTION_11_7();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_132;
    }
    if (v3) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v3, 1LL, a1);
    }
    return;
  }

  Swift::Int v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  uint64_t v107 = v3;
  uint64_t v108 = v6;
  uint64_t v110 = v7;
  char v102 = a1;
  if (v3 <= 0) {
    goto LABEL_96;
  }
  Swift::Int v103 = v5;
  Swift::Int v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v101 = *a1 - 8;
  char v10 = (char *)_swiftEmptyArrayStorage;
  uint64_t v109 = *a1;
  while (1)
  {
    Swift::Int v11 = v8++;
    Swift::Int v106 = v11;
    if (v8 < v3)
    {
      char v104 = v10;
      uint64_t v12 = *(void **)(v9 + 8 * v11);
      id v13 = *(id *)(v9 + 8 * v8);
      id v14 = v12;
      id v15 = [v13 tag];
      id v16 = [v14 tag];

      Swift::Int v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        Swift::Int v17 = v11;
        while (1)
        {
          uint64_t v18 = v109 + 8 * v17;
          int v19 = *(void **)(v18 + 8);
          id v20 = *(id *)(v18 + 16);
          id v21 = v19;
          id v22 = [v20 tag];
          id v23 = [v21 tag];

          uint64_t v24 = v17 + 3;
          ++v17;
          Swift::Int v3 = v107;
          if (v24 >= v107)
          {
            Swift::Int v8 = v107;
            goto LABEL_11;
          }
        }

        Swift::Int v8 = v17 + 2;
        Swift::Int v3 = v107;
LABEL_11:
        Swift::Int v11 = v106;
      }

      char v10 = v104;
      if ((uint64_t)v15 >= (uint64_t)v16)
      {
        uint64_t v9 = v109;
      }

      else
      {
        uint64_t v9 = v109;
        if (v8 < v11) {
          goto LABEL_133;
        }
        if (v11 < v8)
        {
          unint64_t v25 = (uint64_t *)(v101 + 8 * v8);
          Swift::Int v26 = v8;
          Swift::Int v27 = v11;
          uint64_t v28 = (uint64_t *)(v109 + 8 * v11);
          do
          {
            if (v27 != --v26)
            {
              if (!v109) {
                goto LABEL_139;
              }
              uint64_t v29 = *v28;
              *uint64_t v28 = *v25;
              *unint64_t v25 = v29;
            }

            ++v27;
            --v25;
            ++v28;
          }

          while (v27 < v26);
        }
      }
    }

    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11)) {
        goto LABEL_131;
      }
      if (v8 - v11 < v103)
      {
        if (__OFADD__(v11, v103)) {
          goto LABEL_134;
        }
        if (v11 + v103 >= v3) {
          Swift::Int v30 = v3;
        }
        else {
          Swift::Int v30 = v11 + v103;
        }
        if (v30 < v11)
        {
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }

        if (v8 != v30)
        {
          uint64_t v105 = v10;
          uint64_t v31 = v101 + 8 * v8;
          do
          {
            int v32 = *(void **)(v9 + 8 * v8);
            Swift::Int v33 = v11;
            uint64_t v34 = v31;
            while (1)
            {
              uint64_t v35 = *(void **)v34;
              id v36 = v32;
              id v37 = v35;
              id v38 = [v36 tag];
              id v39 = [v37 tag];

              uint64_t v9 = v109;
              if (!v109) {
                goto LABEL_137;
              }
              uint64_t v40 = *(void **)v34;
              int v32 = *(void **)(v34 + 8);
              *(void *)uint64_t v34 = v32;
              *(void *)(v34 + 8) = v40;
              v34 -= 8LL;
              if (v8 == ++v33) {
                goto LABEL_38;
              }
            }

            uint64_t v9 = v109;
LABEL_38:
            ++v8;
            v31 += 8LL;
            Swift::Int v11 = v106;
          }

          while (v8 != v30);
          Swift::Int v8 = v30;
          char v10 = v105;
        }
      }
    }

    if (v8 < v11) {
      goto LABEL_130;
    }
    uint64_t v41 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) != 0) {
      char v10 = v41;
    }
    else {
      char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v41 + 2) + 1LL,  1,  v41);
    }
    unint64_t v43 = *((void *)v10 + 2);
    unint64_t v42 = *((void *)v10 + 3);
    unint64_t v44 = v43 + 1;
    uint64_t v9 = v109;
    if (v43 >= v42 >> 1)
    {
      uint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v42 > 1),  v43 + 1,  1,  v10);
      uint64_t v9 = v109;
      char v10 = v92;
    }

    *((void *)v10 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v44;
    id v45 = v10 + 32;
    uint64_t v46 = &v10[16 * v43 + 32];
    *(void *)uint64_t v46 = v11;
    *((void *)v46 + 1) = v8;
    if (v43) {
      break;
    }
    unint64_t v44 = 1LL;
LABEL_88:
    Swift::Int v3 = v107;
    if (v8 >= v107) {
      goto LABEL_97;
    }
  }

  while (1)
  {
    unint64_t v47 = v44 - 1;
    if (v44 >= 4)
    {
      uint64_t v52 = &v45[16 * v44];
      uint64_t v53 = *((void *)v52 - 8);
      uint64_t v54 = *((void *)v52 - 7);
      BOOL v58 = __OFSUB__(v54, v53);
      uint64_t v55 = v54 - v53;
      if (v58) {
        goto LABEL_115;
      }
      uint64_t v57 = *((void *)v52 - 6);
      uint64_t v56 = *((void *)v52 - 5);
      BOOL v58 = __OFSUB__(v56, v57);
      uint64_t v50 = v56 - v57;
      char v51 = v58;
      if (v58) {
        goto LABEL_116;
      }
      unint64_t v59 = v44 - 2;
      unint64_t v60 = &v45[16 * v44 - 32];
      uint64_t v62 = *(void *)v60;
      uint64_t v61 = *((void *)v60 + 1);
      BOOL v58 = __OFSUB__(v61, v62);
      uint64_t v63 = v61 - v62;
      if (v58) {
        goto LABEL_117;
      }
      BOOL v58 = __OFADD__(v50, v63);
      uint64_t v64 = v50 + v63;
      if (v58) {
        goto LABEL_119;
      }
      if (v64 >= v55)
      {
        char v82 = &v45[16 * v47];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v58 = __OFSUB__(v83, v84);
        uint64_t v85 = v83 - v84;
        if (v58) {
          goto LABEL_125;
        }
        BOOL v75 = v50 < v85;
        goto LABEL_77;
      }
    }

    else
    {
      if (v44 != 3)
      {
        uint64_t v76 = *((void *)v10 + 4);
        uint64_t v77 = *((void *)v10 + 5);
        BOOL v58 = __OFSUB__(v77, v76);
        uint64_t v69 = v77 - v76;
        char v70 = v58;
        goto LABEL_71;
      }

      uint64_t v49 = *((void *)v10 + 4);
      uint64_t v48 = *((void *)v10 + 5);
      BOOL v58 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      char v51 = v58;
    }

    if ((v51 & 1) != 0) {
      goto LABEL_118;
    }
    unint64_t v59 = v44 - 2;
    uint64_t v65 = &v45[16 * v44 - 32];
    uint64_t v67 = *(void *)v65;
    uint64_t v66 = *((void *)v65 + 1);
    BOOL v68 = __OFSUB__(v66, v67);
    uint64_t v69 = v66 - v67;
    char v70 = v68;
    if (v68) {
      goto LABEL_120;
    }
    uint64_t v71 = &v45[16 * v47];
    uint64_t v73 = *(void *)v71;
    uint64_t v72 = *((void *)v71 + 1);
    BOOL v58 = __OFSUB__(v72, v73);
    uint64_t v74 = v72 - v73;
    if (v58) {
      goto LABEL_122;
    }
    if (__OFADD__(v69, v74)) {
      goto LABEL_124;
    }
    if (v69 + v74 >= v50)
    {
      BOOL v75 = v50 < v74;
LABEL_77:
      if (v75) {
        unint64_t v47 = v59;
      }
      goto LABEL_79;
    }

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  Swift::Int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Swift::Int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  Swift::Int v93;
  uint64_t v94;
  char *v95;
  char *v96;
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v3, 1LL, a1);
      }
      return;
    }

    goto LABEL_125;
  }

  Swift::Int v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  unint64_t v91 = a1;
  uint64_t v92 = v6;
  uint64_t v94 = v3;
  uint64_t v95 = v7;
  if (v3 <= 0)
  {
    uint64_t v96 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v30 = _swiftEmptyArrayStorage[2];
LABEL_91:
    if (v30 < 2)
    {
LABEL_102:
      swift_bridgeObjectRelease();
      if (v94 >= -1)
      {
        *(void *)(v92 + 16) = 0LL;
        swift_bridgeObjectRelease();
        return;
      }

      goto LABEL_130;
    }

    uint64_t v84 = *v91;
    while (1)
    {
      uint64_t v85 = v30 - 2;
      if (v30 < 2) {
        break;
      }
      if (!v84) {
        goto LABEL_134;
      }
      unint64_t v86 = v96;
      uint64_t v87 = *(void *)&v96[16 * v85 + 32];
      uint64_t v88 = *(void *)&v96[16 * v30 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v84 + 24 * v87),  (char *)(v84 + 24LL * *(void *)&v96[16 * v30 + 16]),  v84 + 24 * v88,  v95);
      if (v1) {
        goto LABEL_87;
      }
      if (v88 < v87) {
        goto LABEL_120;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0) {
        unint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v96);
      }
      if (v85 >= *((void *)v86 + 2)) {
        goto LABEL_121;
      }
      char v89 = &v86[16 * v85 + 32];
      *(void *)char v89 = v87;
      *((void *)v89 + 1) = v88;
      uint64_t v90 = *((void *)v86 + 2);
      if (v30 > v90) {
        goto LABEL_122;
      }
      memmove(&v86[16 * v30 + 16], &v86[16 * v30 + 32], 16 * (v90 - v30));
      uint64_t v96 = v86;
      *((void *)v86 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v90 - 1;
      Swift::Int v30 = v90 - 1;
      if (v90 <= 2) {
        goto LABEL_102;
      }
    }

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v18;
  Swift::Int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  Swift::Int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v3, 1LL, a1);
      }
      return;
    }

    goto LABEL_144;
  }

  Swift::Int v5 = v4;
  specialized static Array._allocateUninitialized(_:)( v3 / 2,  &demangling cache variable for type metadata for (key: String, value: Double));
  uint64_t v111 = v6;
  uint64_t v112 = v3;
  uint64_t v114 = v7;
  uint64_t v109 = a1;
  if (v3 <= 0)
  {
    char v10 = (char *)_swiftEmptyArrayStorage;
    uint64_t v50 = _swiftEmptyArrayStorage[2];
LABEL_110:
    uint64_t v99 = v10;
    if (v50 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v112 >= -1)
      {
        *(void *)(v111 + 16) = 0LL;
        swift_bridgeObjectRelease();
        return;
      }

      goto LABEL_149;
    }

    unint64_t v100 = *v109;
    while (1)
    {
      uint64_t v101 = v50 - 2;
      if (v50 < 2) {
        break;
      }
      if (!v100) {
        goto LABEL_153;
      }
      char v102 = v99;
      Swift::Int v103 = *(void *)&v99[16 * v101 + 32];
      char v104 = *(void *)&v99[16 * v50 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v100 + 24 * v103),  (char *)(v100 + 24LL * *(void *)&v99[16 * v50 + 16]),  v100 + 24 * v104,  v114);
      if (v1) {
        goto LABEL_106;
      }
      if (v104 < v103) {
        goto LABEL_139;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v102) & 1) == 0) {
        char v102 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v102);
      }
      if (v101 >= *((void *)v102 + 2)) {
        goto LABEL_140;
      }
      uint64_t v105 = &v102[16 * v101 + 32];
      *(void *)uint64_t v105 = v103;
      *((void *)v105 + 1) = v104;
      Swift::Int v106 = *((void *)v102 + 2);
      if (v50 > v106) {
        goto LABEL_141;
      }
      memmove(&v102[16 * v50 + 16], &v102[16 * v50 + 32], 16 * (v106 - v50));
      uint64_t v99 = v102;
      *((void *)v102 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v106 - 1;
      uint64_t v50 = v106 - 1;
      if (v106 <= 2) {
        goto LABEL_121;
      }
    }

LABEL_71:
    if ((v70 & 1) != 0) {
      goto LABEL_121;
    }
    id v78 = &v45[16 * v47];
    uint64_t v80 = *(void *)v78;
    uint64_t v79 = *((void *)v78 + 1);
    BOOL v58 = __OFSUB__(v79, v80);
    uint64_t v81 = v79 - v80;
    if (v58) {
      goto LABEL_123;
    }
    if (v81 < v69) {
      goto LABEL_88;
    }
LABEL_79:
    unint64_t v86 = v47 - 1;
    if (v47 - 1 >= v44)
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }

    if (!v9) {
      goto LABEL_138;
    }
    uint64_t v87 = v10;
    Swift::Int v3 = (Swift::Int)&v45[16 * v86];
    uint64_t v88 = *(void *)v3;
    char v89 = &v45[16 * v47];
    uint64_t v90 = *((void *)v89 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)( (void **)(v9 + 8LL * *(void *)v3),  (id *)(v9 + 8LL * *(void *)v89),  v9 + 8 * v90,  v108);
    if (v1) {
      break;
    }
    if (v90 < v88) {
      goto LABEL_112;
    }
    if (v47 > *((void *)v87 + 2)) {
      goto LABEL_113;
    }
    *(void *)Swift::Int v3 = v88;
    *(void *)&v45[16 * v86 + 8] = v90;
    unint64_t v91 = *((void *)v87 + 2);
    if (v47 >= v91) {
      goto LABEL_114;
    }
    unint64_t v44 = v91 - 1;
    memmove(&v45[16 * v47], v89 + 16, 16 * (v91 - 1 - v47));
    char v10 = v87;
    *((void *)v87 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v91 - 1;
    uint64_t v9 = v109;
    if (v91 <= 2) {
      goto LABEL_88;
    }
  }

LABEL_94:
  uint64_t v93 = swift_bridgeObjectRelease(v87);
  if (v107 >= -1) {
    goto LABEL_109;
  }
  __break(1u);
LABEL_96:
  char v10 = (char *)_swiftEmptyArrayStorage;
  unint64_t v44 = _swiftEmptyArrayStorage[2];
LABEL_97:
  if (v44 >= 2)
  {
    uint64_t v96 = *v102;
    while (1)
    {
      Swift::Int v3 = v44 - 2;
      if (v44 < 2) {
        break;
      }
      if (!v96) {
        goto LABEL_140;
      }
      uint64_t v87 = v10;
      uint64_t v97 = *(void *)&v10[16 * v3 + 32];
      uint64_t v98 = *(void *)&v10[16 * v44 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)( (void **)(v96 + 8 * v97),  (id *)(v96 + 8LL * *(void *)&v10[16 * v44 + 16]),  v96 + 8 * v98,  v108);
      if (v1) {
        goto LABEL_94;
      }
      if (v98 < v97) {
        goto LABEL_127;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v87) & 1) == 0) {
        uint64_t v87 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v87);
      }
      uint64_t v99 = &v87[16 * v3 + 32];
      *(void *)uint64_t v99 = v97;
      *((void *)v99 + 1) = v98;
      unint64_t v100 = *((void *)v87 + 2);
      if (v44 > v100) {
        goto LABEL_129;
      }
      memmove(&v87[16 * v44 + 16], &v87[16 * v44 + 32], 16 * (v100 - v44));
      char v10 = v87;
      *((void *)v87 + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v100 - 1;
      unint64_t v44 = v100 - 1;
      BOOL v75 = v100 > 2;
      Swift::Int v3 = v107;
      if (!v75) {
        goto LABEL_108;
      }
    }

  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }

LABEL_108:
  uint64_t v93 = swift_bridgeObjectRelease(v10);
  if (v3 >= -1)
  {
LABEL_109:
    *(void *)((char *)&dword_10 + (v110 & 0xFFFFFFFFFFFFF8LL)) = 0LL;
    specialized Array._endMutation()(v93, v94, v95);
    swift_bridgeObjectRelease(v110);
    return;
  }

LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
    while (2)
    {
      uint64_t v7 = *(void **)(v5 + 8 * v4);
      uint64_t v8 = a1;
      uint64_t v17 = v6;
      do
      {
        uint64_t v9 = *(void **)v6;
        id v10 = v7;
        id v11 = v9;
        id v12 = [v10 tag];
        id v13 = [v11 tag];

        if (!v5)
        {
          __break(1u);
          return;
        }

        id v14 = *(void **)v6;
        uint64_t v7 = *(void **)(v6 + 8);
        *(void *)uint64_t v6 = v7;
        *(void *)(v6 + 8) = v14;
        v6 -= 8LL;
        ++v8;
      }

      while (v4 != v8);
      ++v4;
      uint64_t v6 = v17 + 8;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **a1, id *a2, unint64_t a3, void **a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = (char *)a2 - (char *)a1;
  uint64_t v9 = a2 - a1;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    id v39 = a4;
    id v12 = &a4[v11];
    if (v7 >= v6 || v10 < 8)
    {
LABEL_39:
      id v14 = v39;
      goto LABEL_40;
    }

    unint64_t v25 = (id *)(a3 - 8);
    while (1)
    {
      unint64_t v42 = v6;
      uint64_t v40 = v25 + 1;
      Swift::Int v26 = v12 - 1;
      Swift::Int v27 = v6 - 1;
      uint64_t v28 = *(v6 - 1);
      unint64_t v29 = (unint64_t)v12;
      id v30 = *(v12 - 1);
      id v31 = v28;
      id v32 = [v30 tag];
      id v33 = [v31 tag];

      if ((uint64_t)v32 >= (uint64_t)v33)
      {
        uint64_t v35 = v39;
        BOOL v36 = v40 != (id *)v29 || (unint64_t)v25 >= v29;
        Swift::Int v27 = v26;
        id v12 = v26;
        uint64_t v6 = v42;
        if (!v36) {
          goto LABEL_35;
        }
      }

      else
      {
        BOOL v34 = v40 != v42 || v25 >= v42;
        uint64_t v35 = v39;
        id v12 = (void **)v29;
        uint64_t v6 = v27;
        if (!v34) {
          goto LABEL_35;
        }
      }

      *unint64_t v25 = *v27;
LABEL_35:
      --v25;
      if (v6 <= v7 || v12 <= v35) {
        goto LABEL_39;
      }
    }
  }

  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, a4);
  id v12 = &a4[v9];
  BOOL v13 = (unint64_t)v6 >= a3 || v8 < 8;
  id v14 = a4;
  if (!v13)
  {
    unint64_t v41 = a3;
    do
    {
      unint64_t v15 = (unint64_t)v12;
      id v16 = *v14;
      id v17 = *v6;
      id v18 = v16;
      id v19 = [v17 tag];
      id v20 = [v18 tag];

      if ((uint64_t)v19 >= (uint64_t)v20)
      {
        id v21 = v14;
        BOOL v22 = v7 == v14++;
      }

      else
      {
        id v21 = v6;
        BOOL v22 = v7 == v6++;
      }

      id v12 = (void **)v15;
      if (!v22) {
        *uint64_t v7 = *v21;
      }
      ++v7;
    }

    while ((unint64_t)v14 < v15 && (unint64_t)v6 < v41);
  }

  uint64_t v6 = v7;
LABEL_40:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v12 - v14, v6);
  return 1LL;
}

void outlined bridged method (pb) of @objc INIntent.parametersByName.getter(void *a1)
{
  id v1 = [a1 parametersByName];
  if (v1)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    OUTLINED_FUNCTION_50_6();
  }

  OUTLINED_FUNCTION_1();
}

uint64_t __swift_destroy_boxed_opaque_existential_0Tm(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return OUTLINED_FUNCTION_27_5(a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined bridged method (ob) of @objc INIntentDescription.slotDescriptions()(void *a1)
{
  id v2 = [a1 slotDescriptions];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INIntentSlotDescription,  &OBJC_CLASS___INIntentSlotDescription_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(void *a1)
{
  id v1 = [a1 name];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void outlined bridged method (mbnn) of @objc INPreferences._cachedSiriLanguageCode.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 _setCachedSiriLanguageCode:v5];
}

void specialized protocol witness for Collection.subscript.read in conformance [A]()
{
  id v1 = OUTLINED_FUNCTION_3_11();
  uint64_t v2 = OUTLINED_FUNCTION_7_3((uint64_t)v1);
  specialized Array.subscript.read(v2, v3);
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  OUTLINED_FUNCTION_2();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v1 = OUTLINED_FUNCTION_3_11();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_7_3((uint64_t)v1);
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = specialized Array.subscript.read(v2, v3, v4);
  OUTLINED_FUNCTION_2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v1 = OUTLINED_FUNCTION_3_11();
  uint64_t v2 = OUTLINED_FUNCTION_7_3((uint64_t)v1);
  specialized Array.subscript.read(v2, v3);
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  OUTLINED_FUNCTION_2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v1 = OUTLINED_FUNCTION_3_11();
  uint64_t v2 = OUTLINED_FUNCTION_7_3((uint64_t)v1);
  specialized Array.subscript.read(v2, v3);
  *(void *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v4;
  OUTLINED_FUNCTION_2();
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void specialized Array.subscript.read(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = OUTLINED_FUNCTION_4_9(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v6, v7);
  if (v5) {
    uint64_t v8 = OUTLINED_FUNCTION_23_5();
  }
  else {
    uint64_t v8 = (uint64_t)OUTLINED_FUNCTION_46_7(v3 + 8 * v4);
  }
  *uint64_t v2 = v8;
  OUTLINED_FUNCTION_2();
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v6 = OUTLINED_FUNCTION_4_9(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v6, v7);
  if (v5) {
    uint64_t v8 = OUTLINED_FUNCTION_23_5();
  }
  else {
    uint64_t v8 = swift_retain(*(void *)(v3 + 8 * v4 + 32));
  }
  *uint64_t v2 = v8;
  OUTLINED_FUNCTION_2();
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v6 = OUTLINED_FUNCTION_4_9(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v6, v7);
  if (v5) {
    uint64_t v8 = OUTLINED_FUNCTION_23_5();
  }
  else {
    uint64_t v8 = (uint64_t)OUTLINED_FUNCTION_46_7(v3 + 8 * v4);
  }
  *uint64_t v2 = v8;
  OUTLINED_FUNCTION_2();
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t (*specialized Array.subscript.read(void *a1, uint64_t a2, uint64_t a3))()
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001LL) == 0);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return Array.subscript.readspecialized ;
}

void specialized Sequence._copySequenceContents(initializing:)( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
LABEL_37:
    *a1 = a4;
    a1[1] = v6;
    a1[2] = ~v7;
    a1[3] = v12;
    a1[4] = v9;
    OUTLINED_FUNCTION_13_4();
    return;
  }

  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_37;
  }

  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == a3)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_37;
    }

    v11 += 2;
    swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_40:
  __break(1u);
}

    OUTLINED_FUNCTION_14_13();
LABEL_41:
    id v31 = OUTLINED_FUNCTION_55_7();
    if (v3 >= v22)
    {
      swift_bridgeObjectRetain(v31);
      goto LABEL_44;
    }

    swift_bridgeObjectRetain(v31);
  }

  __break(1u);
LABEL_70:
  __break(1u);
}

  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    uint64_t v22 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 3;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = *(void *)(*(void *)(a4 + 48) + 8 * v16);
    uint64_t v21 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v16);
    id v23 = *v21;
    uint64_t v22 = v21[1];
    *uint64_t v11 = v20;
    v11[1] = v23;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v22);
      goto LABEL_38;
    }

    v11 += 3;
    uint64_t result = swift_bridgeObjectRetain(v22);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    OUTLINED_FUNCTION_16_34();
    if (!v48) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v63 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain(v22);
    uint64_t v64 = swift_errorRetain(v22);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    uint64_t v66 = static os_log_type_t.error.getter();
    uint64_t v67 = os_log_type_enabled(v65, v66);
    BOOL v68 = *(void *)(v1 + 384);
    uint64_t v69 = *(void **)(v1 + 392);
    char v70 = *(void *)(v1 + 368);
    uint64_t v71 = *(void *)(v1 + 376);
    if (v67)
    {
      uint64_t v95 = *(void *)(v1 + 368);
      uint64_t v96 = *(void *)(v1 + 384);
      uint64_t v94 = *(void **)(v1 + 392);
      uint64_t v72 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v73 = OUTLINED_FUNCTION_38(32LL);
      v97[0] = v73;
      *(_DWORD *)uint64_t v72 = 136315138;
      swift_getErrorValue(v22, v1 + 272, v1 + 216);
      uint64_t v74 = OUTLINED_FUNCTION_145();
      *(void *)(v1 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v13, v1 + 272, v72 + 4);
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_23_6();
      OUTLINED_FUNCTION_23_6();
      OUTLINED_FUNCTION_31_2(&dword_0, v65, v66, "Could not extract parameter values from USO parse %s", v72);
      OUTLINED_FUNCTION_30_3(v73, v76, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v73);
      OUTLINED_FUNCTION_1_0((uint64_t)v72);

      OUTLINED_FUNCTION_23_6();
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v96, v95);
    }

    else
    {

      OUTLINED_FUNCTION_23_6();
      OUTLINED_FUNCTION_23_6();
      OUTLINED_FUNCTION_23_6();

      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v68, v70);
    }

    uint64_t v77 = *(_OWORD **)(v1 + 280);
    os_log_s *v77 = 0u;
    v77[1] = 0u;
    goto LABEL_49;
  }

  id v31 = objc_opt_self(&OBJC_CLASS___INCodableEnumAttribute);
  if (OUTLINED_FUNCTION_4_31(v31))
  {
    OUTLINED_FUNCTION_16_34();
    if (!v48) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    id v32 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v32, (uint64_t)static Logger.voiceCommands);
    id v33 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v33))
    {
      BOOL v34 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *BOOL v34 = 0;
      OUTLINED_FUNCTION_27_0(&dword_0, v35, v36, "Received needsValue for an enum parameter, this is unexpected");
      OUTLINED_FUNCTION_1_0((uint64_t)v34);
    }

    id v38 = *(void *)(v1 + 376);
    id v37 = *(void *)(v1 + 384);
    id v39 = *(void *)(v1 + 368);
    uint64_t v40 = *(_OWORD **)(v1 + 280);

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    *uint64_t v40 = 0u;
    v40[1] = 0u;
    goto LABEL_49;
  }

  unint64_t v41 = objc_opt_self(&OBJC_CLASS___INCodableObjectAttribute);
  if (!OUTLINED_FUNCTION_4_31(v41))
  {
LABEL_32:
    OUTLINED_FUNCTION_16_34();
    if (!v48) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    char v51 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.voiceCommands);
    uint64_t v52 = v24;
    uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
    uint64_t v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v55 = OUTLINED_FUNCTION_38(32LL);
      v97[0] = v55;
      *(_DWORD *)uint64_t v22 = 136315138;
      if (v24) {
        uint64_t v56 = [v52 valueType];
      }
      else {
        uint64_t v56 = 0LL;
      }
      *(void *)(v1 + 240) = v56;
      *(_BYTE *)(v1 + 248) = v24 == 0LL;
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INIntentSlotValueType?);
      BOOL v58 = String.init<A>(describing:)(v1 + 240, v57);
      *(void *)(v1 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v97);
      uint64_t v13 = v1 + 264;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 256, v1 + 264, v22 + 4);
      swift_bridgeObjectRelease();

      OUTLINED_FUNCTION_31_2(&dword_0, v53, v54, "SiriLinkFlow received INCodableAttribute of type: %s", v22);
      OUTLINED_FUNCTION_30_3(v55, v60, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v55);
      OUTLINED_FUNCTION_1_0((uint64_t)v22);
    }

    else
    {
    }

    uint64_t v61 = OUTLINED_FUNCTION_23_26();
    if (!v22)
    {
      id v78 = v62;
      uint64_t v80 = *(void *)(v1 + 376);
      uint64_t v79 = *(void *)(v1 + 384);
      uint64_t v81 = *(void *)(v1 + 368);
      char v82 = *(void *)(v1 + 280);
      if (v62)
      {
        uint64_t v83 = v61;
        *(void *)(v82 + 24) = &type metadata for String;

        *(void *)char v82 = v83;
        *(void *)(v82 + 8) = v78;
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
      }

      else
      {

        OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v80 + 8));
        *(_OWORD *)char v82 = 0u;
        *(_OWORD *)(v82 + 16) = 0u;
      }

      goto LABEL_49;
    }

    goto LABEL_41;
  }

  unint64_t v42 = objc_opt_self(&OBJC_CLASS___INCodableObjectAttribute);
  unint64_t v43 = OUTLINED_FUNCTION_4_31(v42);
  if (!v43)
  {
    uint64_t v85 = *(void *)(v1 + 376);
    unint64_t v86 = *(_OWORD **)(v1 + 280);

    OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));
    *unint64_t v86 = 0u;
    v86[1] = 0u;
    goto LABEL_49;
  }

  unint64_t v44 = (void *)v43;
  id v45 = v24;
  uint64_t v46 = outlined bridged method (ob) of @objc INCodableObjectAttribute.typeName.getter(v44);
  if (!v47) {
    goto LABEL_31;
  }
  uint64_t v48 = v46 == 0x6E61656C6F6F42LL && v47 == 0xE700000000000000LL;
  if (v48)
  {
    OUTLINED_FUNCTION_14();
    goto LABEL_53;
  }

  uint64_t v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, 0x6E61656C6F6F42LL, 0xE700000000000000LL, 0LL);
  OUTLINED_FUNCTION_14();
  if ((v49 & 1) != 0)
  {
LABEL_53:
    uint64_t v50 = &dword_0 + 1;
    goto LABEL_54;
  }

        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
        goto LABEL_34;
      }
    }

    OUTLINED_FUNCTION_37();
    int64_t v14 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_26;
  }

  unint64_t v25 = *(void *)(v0 + 120);
  OUTLINED_FUNCTION_50_1(v25, v5, v6, *(void *)(v0 + 128));
  outlined destroy of Any?(v25, &demangling cache variable for type metadata for AceOutput?);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  Swift::Int v26 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
  Swift::Int v27 = (os_log_s *)OUTLINED_FUNCTION_9_5();
  uint64_t v28 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_31_0(v28))
  {
    unint64_t v29 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    OUTLINED_FUNCTION_43_5(v29);
    OUTLINED_FUNCTION_1_0(v3);
  }

  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  int64_t v14 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_39:
  swift_task_dealloc();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

void OUTLINED_FUNCTION_1_10()
{
  *(void *)(v1 + 8 * (v0 >> 6) + 64) |= 1LL << v0;
  uint64_t v8 = (void *)(*(void *)(v1 + 48) + 16 * v0);
  *uint64_t v8 = v5;
  v8[1] = v3;
  unint64_t v9 = (void *)(*(void *)(v1 + 56) + 32 * v0);
  *unint64_t v9 = v7;
  v9[1] = v6;
  void v9[2] = v4;
  v9[3] = v2;
}

void *OUTLINED_FUNCTION_3_11()
{
  return malloc(0x28uLL);
}

uint64_t OUTLINED_FUNCTION_4_9(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v1, v0);
}

uint64_t OUTLINED_FUNCTION_6_7(__int128 *a1)
{
  uint64_t v2 = *(void *)(v1 - 136);
  uint64_t v3 = *(void *)(v1 - 128);
  __swift_project_boxed_opaque_existential_1((void *)(v1 - 160), v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_7_3(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_4()
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(v1 + 56) + 32 * v0 + 24));
}

  ;
}

uint64_t OUTLINED_FUNCTION_12_6@<X0>(uint64_t a1@<X8>)
{
  return String.index(_:offsetBy:limitedBy:)(15LL, 20LL, v1 | (a1 << 16), v2, v3);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_15_4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, a2 + 32, 7LL);
}

uint64_t OUTLINED_FUNCTION_16_6(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    a1 = v4;
  }
  return String.subscript.getter(15LL, a1, v2, v3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_18_5()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t OUTLINED_FUNCTION_20_8()
{
  return swift_bridgeObjectRetain(v0);
}

BOOL OUTLINED_FUNCTION_21_4()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

unint64_t OUTLINED_FUNCTION_22_5( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a21);
}

uint64_t OUTLINED_FUNCTION_23_5()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

void OUTLINED_FUNCTION_25_7(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * a1;
}

unint64_t OUTLINED_FUNCTION_26_5()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_27_5(void *a1)
{
  return swift_release(*a1);
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_33_6()
{
  return outlined consume of [String : DMFPolicy].Iterator._Variant(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_35_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

uint64_t OUTLINED_FUNCTION_36_5@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(void *)(v3 - 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 112, v2, a1);
}

void OUTLINED_FUNCTION_37_5(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
}

uint64_t OUTLINED_FUNCTION_38_5(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_39_4(uint64_t a1)
{
  return outlined init with copy of Any(a1, v1 - 160);
}

uint64_t OUTLINED_FUNCTION_40_5@<X0>(uint64_t a1@<X8>)
{
  return swift_arrayDestroy(v1, 2LL, a1 + 8);
}

uint64_t OUTLINED_FUNCTION_41_4(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_43_4()
{
  return __swift_getEnumTagSinglePayload(v0, 1LL, v1);
}

id OUTLINED_FUNCTION_46_7@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t OUTLINED_FUNCTION_48_5(uint64_t a1)
{
  return StaticString.description.getter(a1, 103LL, 2LL);
}

uint64_t OUTLINED_FUNCTION_49_5()
{
  return v1;
}

void OUTLINED_FUNCTION_50_6()
{
}

uint64_t OUTLINED_FUNCTION_51_4()
{
  return String.init<A>(describing:)(v1 - 160, v0);
}

uint64_t OUTLINED_FUNCTION_52_2@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t OUTLINED_FUNCTION_53_3()
{
  return outlined consume of Data._Representation(v0, v1);
}

double OUTLINED_FUNCTION_54_5()
{
  return 0.0;
}

void OUTLINED_FUNCTION_55_3(uint64_t a1)
{
  unint64_t v1 = 0xE100000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void OfferMoreItemsCatTemplater.makeTemplate(nextPage:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v6 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  uint64_t v7 = static DialogHelper.globals.getter();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v8, v21);
  *(_OWORD *)(inited + 16) = xmmword_17E660;
  strcpy((char *)(inited + 32), "nextPageSize");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 48) = Page.itemCount.getter();
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = &type metadata for Int;
  strcpy((char *)(inited + 80), "remainingPages");
  *(_BYTE *)(inited + 95) = -18;
  uint64_t v10 = Page.remainingPages.getter();
  if (__OFADD__(v10, 1LL))
  {
    __break(1u);
  }

  else
  {
    *(void *)(inited + 120) = &type metadata for Int;
    *(void *)(inited + 96) = v10 + 1;
    uint64_t v11 = (void *)Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    id v19 = (id)objc_opt_self(&OBJC_CLASS___CAT);
    NSString v12 = String._bridgeToObjectiveC()();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v11);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v11);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    Class v16 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    int64_t v17 = (void *)OUTLINED_FUNCTION_19((uint64_t)&unk_1F3EE0, 48LL);
    v17[2] = a2;
    v17[3] = a3;
    v17[4] = 0xD00000000000001ELL;
    v17[5] = 0x80000000001916D0LL;
    aBlock[4] = partial apply for closure #1 in OfferMoreItemsCatTemplater.makeTemplate(nextPage:_:);
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_0;
    unint64_t v18 = _Block_copy(aBlock);
    OUTLINED_FUNCTION_14_8();
    swift_release();
    [v19 execute:v6 catId:v12 parameters:isa globals:v16 completion:v18];
    _Block_release(v18);
  }

void specialized _dictionaryUpCast<A, B, C, D>(_:)(void *a1)
{
  if (a1[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v4 = (void *)OUTLINED_FUNCTION_0_12();
  }

  else
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
  }

  OUTLINED_FUNCTION_2_11();
  int64_t v32 = (unint64_t)(v5 - v6) >> 6;
  OUTLINED_FUNCTION_19_5();
  OUTLINED_FUNCTION_14_8();
  uint64_t v7 = 0LL;
  if (!v2) {
    goto LABEL_6;
  }
LABEL_5:
  OUTLINED_FUNCTION_18_6();
  uint64_t v9 = v8 | (v7 << 6);
  while (1)
  {
    uint64_t v21 = (uint64_t *)(a1[6] + 16 * v9);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    outlined init with copy of Any(a1[7] + 32 * v9, (uint64_t)v44);
    *(void *)&__int128 v43 = v23;
    *((void *)&v43 + 1) = v22;
    uint64_t v41[2] = v43;
    v42[0] = v44[0];
    v42[1] = v44[1];
    *(void *)&v41[0] = v23;
    *((void *)&v41[0] + 1) = v22;
    swift_bridgeObjectRetain(v22);
    OUTLINED_FUNCTION_5_6( (uint64_t)&v33,  (uint64_t)v41,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for AnyHashable);
    outlined init with take of Any(v42, v36);
    __int128 v37 = v33;
    __int128 v38 = v34;
    uint64_t v39 = v35;
    outlined init with take of Any(v36, v40);
    __int128 v33 = v37;
    __int128 v34 = v38;
    uint64_t v35 = v39;
    outlined init with take of Any(v40, v41);
    outlined init with take of Any(v41, &v37);
    AnyHashable._rawHashValue(seed:)(v4[5]);
    OUTLINED_FUNCTION_4_10();
    if (v24)
    {
      OUTLINED_FUNCTION_8_6();
      while (++v27 != v28 || (v26 & 1) == 0)
      {
        BOOL v29 = v27 == v28;
        if (v27 == v28) {
          uint64_t v27 = 0LL;
        }
        v26 |= v29;
        if (*(void *)(v1 + 8 * v27) != -1LL)
        {
          OUTLINED_FUNCTION_7_4();
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    OUTLINED_FUNCTION_10_5();
LABEL_34:
    OUTLINED_FUNCTION_1_11(v25);
    *(_OWORD *)uint64_t v30 = v33;
    *(_OWORD *)(v30 + 16) = v34;
    *(void *)(v30 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v35;
    outlined init with take of Any(&v37, (_OWORD *)(v4[7] + 32 * v31));
    ++v4[2];
    if (v2) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_38;
    }
    if (v7 + 1 >= v32) {
      goto LABEL_36;
    }
    OUTLINED_FUNCTION_27_6();
    if (!v10)
    {
      OUTLINED_FUNCTION_25_8();
      if (v11 == v12) {
        goto LABEL_36;
      }
      OUTLINED_FUNCTION_24_4();
      if (!v13)
      {
        OUTLINED_FUNCTION_25_8();
        if (v11 == v12) {
          goto LABEL_36;
        }
        OUTLINED_FUNCTION_24_4();
        if (!v14)
        {
          OUTLINED_FUNCTION_25_8();
          if (v11 == v12) {
            goto LABEL_36;
          }
          OUTLINED_FUNCTION_24_4();
          if (!v16)
          {
            uint64_t v17 = v15 + 4;
            if (v17 >= v32)
            {
LABEL_36:
              OUTLINED_FUNCTION_61();
              outlined consume of [String : DMFPolicy].Iterator._Variant((uint64_t)a1);
              return;
            }

            if (!a1[v17 + 8]) {
              break;
            }
          }
        }
      }
    }

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[2];
  if (a1[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v3 = (void *)OUTLINED_FUNCTION_0_12();
  }

  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  OUTLINED_FUNCTION_22_6();
  uint64_t v6 = -(-1LL << v5);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  uint64_t v8 = v7 & v4;
  OUTLINED_FUNCTION_19_5();
  OUTLINED_FUNCTION_14_8();
  uint64_t v9 = 0LL;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  OUTLINED_FUNCTION_21_5();
  char v11 = v10 | (v9 << 6);
  while (1)
  {
    uint64_t v18 = (uint64_t *)(a1[6] + 16 * v11);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = (uint64_t *)(a1[7] + 16 * v11);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    *(void *)&v42[0] = v20;
    *((void *)&v42[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    outlined copy of Data._Representation(v22, v23);
    OUTLINED_FUNCTION_5_6( (uint64_t)&v34,  (uint64_t)v42,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for AnyHashable);
    v33[0] = v22;
    v33[1] = v23;
    OUTLINED_FUNCTION_5_6( (uint64_t)v37,  (uint64_t)v33,  (uint64_t)&type metadata for Data,  (uint64_t)&type metadata for Any + 8);
    __int128 v38 = v34;
    uint64_t v39 = v35;
    uint64_t v40 = v36;
    outlined init with take of Any(v37, v41);
    __int128 v34 = v38;
    uint64_t v35 = v39;
    BOOL v36 = v40;
    outlined init with take of Any(v41, v42);
    outlined init with take of Any(v42, &v38);
    AnyHashable._rawHashValue(seed:)(v3[5]);
    OUTLINED_FUNCTION_4_10();
    if (v24)
    {
      OUTLINED_FUNCTION_8_6();
      while (++v27 != v28 || (v26 & 1) == 0)
      {
        BOOL v29 = v27 == v28;
        if (v27 == v28) {
          uint64_t v27 = 0LL;
        }
        v26 |= v29;
        if (*(void *)(v1 + 8 * v27) != -1LL)
        {
          OUTLINED_FUNCTION_7_4();
          goto LABEL_40;
        }
      }

      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }

    OUTLINED_FUNCTION_10_5();
LABEL_40:
    OUTLINED_FUNCTION_1_11(v25);
    *(_OWORD *)uint64_t v30 = v34;
    *(_OWORD *)(v30 + 16) = v35;
    *(void *)(v30 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v36;
    outlined init with take of Any(&v38, (_OWORD *)(v3[7] + 32 * v31));
    ++v3[2];
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    if (__OFADD__(v9, 1LL)) {
      goto LABEL_44;
    }
    OUTLINED_FUNCTION_28_6();
    if (v12 == v13) {
      goto LABEL_42;
    }
    OUTLINED_FUNCTION_27_6();
    if (!v15)
    {
      OUTLINED_FUNCTION_3_12();
      if (v12 == v13) {
        goto LABEL_42;
      }
      OUTLINED_FUNCTION_12_7();
      if (!v15)
      {
        OUTLINED_FUNCTION_3_12();
        if (v12 == v13) {
          goto LABEL_42;
        }
        OUTLINED_FUNCTION_12_7();
        if (!v15)
        {
          OUTLINED_FUNCTION_3_12();
          if (v12 == v13) {
            goto LABEL_42;
          }
          OUTLINED_FUNCTION_12_7();
          if (!v15) {
            break;
          }
        }
      }
    }

LABEL_24:
    OUTLINED_FUNCTION_16_7();
    uint64_t v7 = v20;
  }

  while (!__OFADD__(v17, 1LL))
  {
    OUTLINED_FUNCTION_25_8();
    if (v11 == v12) {
      goto LABEL_36;
    }
    OUTLINED_FUNCTION_24_4();
    uint64_t v17 = v18 + 1;
    if (v19) {
      goto LABEL_24;
    }
  }

    OUTLINED_FUNCTION_16_7();
    uint64_t v56 = v30;
  }

  while (!__OFADD__(v27, 1LL))
  {
    OUTLINED_FUNCTION_11_8();
    if (v21 == v22) {
      goto LABEL_36;
    }
    OUTLINED_FUNCTION_6_8();
    uint64_t v27 = v28 + 1;
    if (v29) {
      goto LABEL_24;
    }
  }

  BOOL v68 = Parse.DirectInvocation.identifier.getter(v63);
  char v70 = v69;
  if (v68 == 0xD00000000000003FLL && v69 == 0x80000000001938D0LL)
  {
    uint64_t v71 = swift_bridgeObjectRelease(0x80000000001938D0LL);
    uint64_t v72 = v154;
  }

  else
  {
    uint64_t v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, 0xD00000000000003FLL, 0x80000000001938D0LL, 0LL);
    uint64_t v71 = swift_bridgeObjectRelease(v70);
    uint64_t v72 = v154;
    if ((v73 & 1) == 0)
    {
LABEL_33:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      char v104 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v104, (uint64_t)static Logger.voiceCommands);
      uint64_t v105 = (void (**)(char *, char *))v157;
      Swift::Int v106 = v157[2];
      uint64_t v107 = v106(v8, a1, v72);
      uint64_t v108 = (void *)Logger.logObject.getter(v107);
      uint64_t v109 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled((os_log_t)v108, v109))
      {
        v105[1](v8, v72);
        goto LABEL_49;
      }

      uint64_t v110 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v111 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v190 = v111;
      *(_DWORD *)uint64_t v110 = 136315138;
      v155 = (char *)(v110 + 4);
      uint64_t v112 = v156;
      v106((char *)v156, (uint64_t)v8, v72);
      uint64_t v113 = String.init<A>(describing:)(v112, v72);
      Swift::String v115 = v114;
      *(void *)&v183[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, (uint64_t *)&v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v183, (char *)v183 + 8, v155);
      swift_bridgeObjectRelease(v115);
      ((void (*)(char *, char *))v157[1])(v8, v72);
      _os_log_impl(&dword_0, (os_log_t)v108, v109, "Unhandled direct invocation type: %s", v110, 0xCu);
      swift_arrayDestroy(v111, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1LL, -1LL);
      uint64_t v116 = v110;
LABEL_48:
      swift_slowDealloc(v116, -1LL, -1LL);
      goto LABEL_49;
    }
  }

  uint64_t v74 = Parse.DirectInvocation.userData.getter(v71);
  if (!v74) {
    goto LABEL_33;
  }
  BOOL v75 = v74;
  static WFPausedShortcutConverter.toSiriWorkflowInput(userData:)(v74, (uint64_t)v176);
  uint64_t v76 = v176[2];
  v156 = (uint64_t *)v176[1];
  v157 = (uint64_t (**)(char *, uint64_t, char *))v176[0];
  uint64_t v77 = v177;
  id v78 = v178;
  uint64_t v79 = v179;
  uint64_t v80 = v180;
  v155 = v181;
  uint64_t v81 = v182;
  swift_bridgeObjectRelease(v75);
  outlined init with take of SiriWorkflowRunnerInput?( (uint64_t)v176,  (uint64_t)v183,  (uint64_t *)&demangling cache variable for type metadata for SiriWorkflowRunnerInput?);
  if (v185 == 255)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    unint64_t v126 = type metadata accessor for Logger(0LL);
    uint64_t v127 = __swift_project_value_buffer(v126, (uint64_t)static Logger.voiceCommands);
    uint64_t v108 = (void *)Logger.logObject.getter(v127);
    uint64_t v128 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v108, v128)) {
      goto LABEL_49;
    }
    int64_t v129 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int64_t v129 = 0;
    _os_log_impl( &dword_0,  (os_log_t)v108,  v128,  "Cannot parse WFPausedShortcutData from userData, returning nil...",  v129,  2u);
    uint64_t v116 = v129;
    goto LABEL_48;
  }

  outlined init with take of SiriWorkflowRunnerInput(v183, &v190);
  v174 = 0LL;
  v172 = 0u;
  v173 = 0u;
  outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 14), (uint64_t)v171);
  outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 9), (uint64_t)v168);
  outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 19), (uint64_t)v165);
  outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 24), (uint64_t)v162);
  outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 29), (uint64_t)v159);
  outlined copy of SiriWorkflowRunnerInput(v157, (uint64_t)v156, v76, v77, v78, v79, v80, v155, v81);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  char v82 = static WFDialogState.shared;
  v157 = (uint64_t (**)(char *, uint64_t, char *))static WFDialogState.shared;
  type metadata accessor for RunCustomIntentCATs(0LL);
  uint64_t v83 = swift_retain(v82);
  static CATOption.defaultMode.getter(v83);
  v156 = (uint64_t *)CATWrapper.__allocating_init(options:globals:)(v17, 0LL);
  uint64_t v84 = type metadata accessor for RunVoiceCommandCATs(0LL);
  static CATOption.defaultMode.getter(v84);
  v155 = (char *)CATWrapper.__allocating_init(options:globals:)(v17, 0LL);
  uint64_t v85 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  static CATOption.defaultMode.getter(v85);
  v154 = (char *)CATWrapperSimple.__allocating_init(options:globals:)(v17, 0LL);
  unint64_t v86 = type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter(v86);
  v153 = (uint64_t *)CATWrapper.__allocating_init(options:globals:)(v17, 0LL);
  uint64_t v87 = (objc_class *)type metadata accessor for WorkflowRunnerFlow(0LL);
  uint64_t v88 = objc_allocWithZone(v87);
  uint64_t v90 = v163;
  char v89 = v164;
  unint64_t v91 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v162, v163);
  v152 = &v148;
  __chkstk_darwin(v91);
  uint64_t v93 = (char *)&v148 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v94 + 16))(v93);
  uint64_t v95 = v160;
  uint64_t v96 = v161;
  uint64_t v97 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v159, v160);
  __chkstk_darwin(v97);
  uint64_t v99 = (char *)&v148 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v100 + 16))(v99);
  specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)( (uint64_t)&v190,  (uint64_t)&v172,  (uint64_t)v157,  (uint64_t)v171,  (uint64_t)v168,  (uint64_t)v165,  (uint64_t)v156,  (uint64_t)v155,  (uint64_t)v154,  (uint64_t)v153,  (uint64_t)closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow,  0LL,  (uint64_t)v93,  (uint64_t)v99,  (uint64_t)closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow,  0LL,  (uint64_t)v88,  v95,  v90,  v96,  v89,  v147,  v148,  v149,  v150,  v151,  (uint64_t)v152,  (uint64_t)v153,  v154,  (uint64_t)v155,  (uint64_t)v156,  (uint64_t)v157,  v158);
  char v102 = v101;
  __swift_destroy_boxed_opaque_existential_1Tm(v159);
  __swift_destroy_boxed_opaque_existential_1Tm(v162);
  *(void *)&v172 = v102;
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow,  255LL,  type metadata accessor for WorkflowRunnerFlow,  (uint64_t)&protocol conformance descriptor for WorkflowRunnerFlow);
  uint64_t v50 = Flow.eraseToAnyFlow()(v87, v103);
  outlined release of SiriWorkflowRunnerInput?((uint64_t)v176);

  return v50;
}

  OUTLINED_FUNCTION_24_0();
}

    return v39;
  }

  char v11 = *(void *)(a4 + 16);
  if (!v11)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
LABEL_23:
    *((void *)&v38 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *(void *)&__int128 v37 = v13;
    swift_bridgeObjectRetain(a3);
    specialized Dictionary.subscript.setter((uint64_t)&v37);
    goto LABEL_24;
  }

  int64_t v32 = a3;
  __int128 v33 = v9;
  char v12 = a4 + 32;
  swift_bridgeObjectRetain(a4);
  uint64_t v13 = _swiftEmptyArrayStorage;
  while (1)
  {
    outlined init with copy of Any(v12, (uint64_t)&v37);
    if ((swift_dynamicCast(&v36, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      __int128 v37 = v36;
      *(void *)&BOOL v36 = 32LL;
      *((void *)&v36 + 1) = 0xE100000000000000LL;
      __int128 v34 = 0LL;
      uint64_t v35 = 0xE000000000000000LL;
      uint64_t v30 = lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v36,  &v34,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v30);
      uint64_t v14 = String.lowercased()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = outlined bridged method (mbnn) of @objc INCodableEnumAttribute.value(withName:)( v14._countAndFlagsBits,  (uint64_t)v14._object,  v33);
      if (v15) {
        break;
      }
    }

  OUTLINED_FUNCTION_24_0();
}

LABEL_39:
  __break(1u);
}

  __break(1u);
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_35();
  uint64_t v54 = v6 - v5;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: URL));
  uint64_t v7 = __chkstk_darwin(v53);
  uint64_t v9 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v7);
  char v11 = (char *)&v47 - v10;
  uint64_t v55 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    char v12 = (void *)OUTLINED_FUNCTION_0_12();
  }

  else
  {
    char v12 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v49 = v55 + 64;
  OUTLINED_FUNCTION_2_11();
  uint64_t v47 = v13;
  int64_t v48 = (unint64_t)(v14 - v13) >> 6;
  uint64_t v52 = &v60;
  char v51 = &v64;
  uint64_t v15 = (char *)(v12 + 8);
  swift_bridgeObjectRetain(v16);
  swift_retain(v12);
  uint64_t v56 = 0LL;
  uint64_t v50 = (uint64_t)&type metadata for Any + 8;
  uint64_t v17 = v53;
  if (!v1) {
    goto LABEL_6;
  }
LABEL_5:
  OUTLINED_FUNCTION_18_6();
  uint64_t v19 = v18 | (v56 << 6);
  while (1)
  {
    uint64_t v31 = (uint64_t *)(*(void *)(v55 + 48) + 16 * v19);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( &v11[*(int *)(v17 + 48)],  *(void *)(v55 + 56) + *(void *)(v4 + 72) * v19,  v3);
    *(void *)char v11 = v32;
    *((void *)v11 + 1) = v33;
    outlined init with take of (key: String, value: URL)((uint64_t)v11, (uint64_t)v9);
    __int128 v34 = (char *)v9 + *(int *)(v17 + 48);
    uint64_t v35 = v9[1];
    *(void *)&__int128 v65 = *v9;
    *((void *)&v65 + 1) = v35;
    swift_bridgeObjectRetain(v33);
    OUTLINED_FUNCTION_5_6( (uint64_t)&v57,  (uint64_t)&v65,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for AnyHashable);
    uint64_t v36 = v54;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v54, v34, v3);
    uint64_t v37 = (uint64_t)v52;
    OUTLINED_FUNCTION_5_6((uint64_t)v52, v36, v3, v50);
    __int128 v61 = v57;
    __int128 v62 = v58;
    uint64_t v63 = v59;
    __int128 v38 = (_OWORD *)v37;
    uint64_t v39 = v51;
    outlined init with take of Any(v38, v51);
    __int128 v57 = v61;
    __int128 v58 = v62;
    uint64_t v59 = v63;
    outlined init with take of Any(v39, &v65);
    outlined init with take of Any(&v65, &v61);
    unint64_t v40 = AnyHashable._rawHashValue(seed:)(v12[5]) & ~(-1LL << *((_BYTE *)v12 + 32));
    if (((-1LL << v40) & ~*(void *)&v15[8 * (v40 >> 6)]) == 0)
    {
      OUTLINED_FUNCTION_8_6();
      while (++v43 != v44 || (v42 & 1) == 0)
      {
        BOOL v45 = v43 == v44;
        if (v43 == v44) {
          uint64_t v43 = 0LL;
        }
        v42 |= v45;
        if (*(void *)&v15[8 * v43] != -1LL)
        {
          OUTLINED_FUNCTION_7_4();
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    OUTLINED_FUNCTION_10_5();
LABEL_34:
    *(void *)&v15[(v41 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v41;
    uint64_t v46 = v12[6] + 40 * v41;
    *(_OWORD *)uint64_t v46 = v57;
    *(_OWORD *)(v46 + 16) = v58;
    *(void *)(v46 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v59;
    outlined init with take of Any(&v61, (_OWORD *)(v12[7] + 32 * v41));
    ++v12[2];
    if (v1) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v56, 1LL)) {
      goto LABEL_38;
    }
    if (v56 + 1 >= v48) {
      goto LABEL_36;
    }
    OUTLINED_FUNCTION_27_6();
    if (!v20)
    {
      OUTLINED_FUNCTION_11_8();
      if (v21 == v22) {
        goto LABEL_36;
      }
      OUTLINED_FUNCTION_6_8();
      if (!v23)
      {
        OUTLINED_FUNCTION_11_8();
        if (v21 == v22) {
          goto LABEL_36;
        }
        OUTLINED_FUNCTION_6_8();
        if (!v24)
        {
          OUTLINED_FUNCTION_11_8();
          if (v21 == v22) {
            goto LABEL_36;
          }
          OUTLINED_FUNCTION_6_8();
          if (!v26)
          {
            uint64_t v27 = v25 + 4;
            if (v27 >= v48)
            {
LABEL_36:
              swift_release();
              outlined consume of [String : DMFPolicy].Iterator._Variant(v55);
              OUTLINED_FUNCTION_24_0();
              return;
            }

            if (!*(void *)(v49 + 8 * v27)) {
              break;
            }
          }
        }
      }
    }

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t *v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v2 = (void *)OUTLINED_FUNCTION_0_12();
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }

  OUTLINED_FUNCTION_22_6();
  uint64_t v5 = -(-1LL << v4);
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  uint64_t v7 = v6 & v3;
  uint64_t v8 = &v46;
  uint64_t v9 = &v48;
  swift_bridgeObjectRetain(v1);
  uint64_t v10 = 0LL;
  char v11 = (char *)&type metadata for Any + 8;
  char v12 = &type metadata for Int;
  while (1)
  {
    while (1)
    {
      if (v7)
      {
        OUTLINED_FUNCTION_21_5();
        char v42 = v7;
        uint64_t v14 = v13 | (v10 << 6);
      }

      else
      {
        if (__OFADD__(v10, 1LL)) {
          goto LABEL_40;
        }
        OUTLINED_FUNCTION_28_6();
        if (v15 == v16)
        {
LABEL_37:
          outlined consume of [String : DMFPolicy].Iterator._Variant(v1);
          return;
        }

        OUTLINED_FUNCTION_27_6();
        if (!v18)
        {
          OUTLINED_FUNCTION_3_12();
          if (v15 == v16) {
            goto LABEL_37;
          }
          OUTLINED_FUNCTION_12_7();
          if (!v18)
          {
            OUTLINED_FUNCTION_3_12();
            if (v15 == v16) {
              goto LABEL_37;
            }
            OUTLINED_FUNCTION_12_7();
            if (!v18)
            {
              OUTLINED_FUNCTION_3_12();
              if (v15 == v16) {
                goto LABEL_37;
              }
              OUTLINED_FUNCTION_12_7();
              if (!v18)
              {
                OUTLINED_FUNCTION_28_6();
                if (v15 == v16) {
                  goto LABEL_37;
                }
                uint64_t v18 = *(void *)(v40 + 8 * v19);
                if (!v18)
                {
                  while (!__OFADD__(v19, 1LL))
                  {
                    OUTLINED_FUNCTION_3_12();
                    if (v15 == v16) {
                      goto LABEL_37;
                    }
                    uint64_t v18 = *(void *)(v40 + 8 * v17);
                    uint64_t v19 = v20 + 1;
                    if (v18) {
                      goto LABEL_31;
                    }
                  }

                  goto LABEL_41;
                }

                uint64_t v17 = v19;
              }
            }
          }
        }

LABEL_30:
    uint64_t v8 = (v15 - 1) & v15;
    char v11 = __clz(__rbit64(v15)) + (v14 << 6);
    uint64_t v9 = v14;
  }

  OUTLINED_FUNCTION_28_6();
  if (v12 == v13)
  {
LABEL_42:
    OUTLINED_FUNCTION_61();
    outlined consume of [String : DMFPolicy].Iterator._Variant((uint64_t)a1);
    return;
  }

  uint64_t v15 = *(void *)(v32 + 8 * v16);
  if (v15)
  {
    uint64_t v14 = v16;
    goto LABEL_30;
  }

  while (!__OFADD__(v16, 1LL))
  {
    OUTLINED_FUNCTION_3_12();
    if (v12 == v13) {
      goto LABEL_42;
    }
    uint64_t v15 = *(void *)(v32 + 8 * v14);
    uint64_t v16 = v17 + 1;
    if (v15) {
      goto LABEL_30;
    }
  }

      uint64_t v5 = v28;
      goto LABEL_31;
    }

  __break(1u);
  return result;
}

LABEL_45:
  __break(1u);
}

              *(void *)(v7 + 16) = v3;
              goto LABEL_46;
            }
          }
        }
      }
    }

          __break(1u);
LABEL_46:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          __break(1u);
          JUMPOUT(0x62198LL);
        }
      }
    }

      uint64_t v5 = v49;
      uint64_t v18 = v26;
      uint64_t v19 = v25;
      uint64_t v14 = v51;
    }

    else
    {
      uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v54);
    }
  }

  char v22 = v14 + 1;
  if (__OFADD__(v14, 1LL))
  {
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  if (v22 >= v48)
  {
LABEL_26:
    uint64_t v17 = 0LL;
    __int128 v58 = 0LL;
    memset(v57, 0, sizeof(v57));
    uint64_t v55 = 0u;
    uint64_t v56 = 0u;
    goto LABEL_27;
  }

  uint64_t v23 = *(void *)(v47 + 8 * v22);
  if (v23)
  {
LABEL_12:
    uint64_t v17 = (v23 - 1) & v23;
    char v21 = __clz(__rbit64(v23)) + (v22 << 6);
    uint64_t v14 = v22;
    goto LABEL_8;
  }

  uint64_t v24 = v14 + 2;
  ++v14;
  if (v22 + 1 >= v48) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v47 + 8 * v24);
  if (v23) {
    goto LABEL_15;
  }
  uint64_t v14 = v22 + 1;
  if (v22 + 2 >= v48) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v47 + 8 * (v22 + 2));
  if (v23)
  {
    v22 += 2LL;
    goto LABEL_12;
  }

  uint64_t v24 = v22 + 3;
  uint64_t v14 = v22 + 2;
  if (v22 + 3 >= v48) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v47 + 8 * v24);
  if (v23)
  {
LABEL_15:
    char v22 = v24;
    goto LABEL_12;
  }

  while (1)
  {
    char v22 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v22 >= v48)
    {
      uint64_t v14 = v48 - 1;
      goto LABEL_26;
    }

    uint64_t v23 = *(void *)(v47 + 8 * v22);
    ++v24;
    if (v23) {
      goto LABEL_12;
    }
  }

      uint64_t v18 = v25;
      uint64_t v5 = v46;
      uint64_t v14 = v24;
    }

    else
    {
      uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v49);
    }
  }

  char v21 = v14 + 1;
  if (__OFADD__(v14, 1LL))
  {
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  if (v21 >= v45)
  {
LABEL_26:
    uint64_t v17 = 0LL;
    uint64_t v53 = 0LL;
    memset(v52, 0, sizeof(v52));
    uint64_t v50 = 0u;
    char v51 = 0u;
    goto LABEL_27;
  }

  char v22 = *(void *)(v44 + 8 * v21);
  if (v22)
  {
LABEL_12:
    uint64_t v17 = (v22 - 1) & v22;
    uint64_t v20 = __clz(__rbit64(v22)) + (v21 << 6);
    uint64_t v14 = v21;
    goto LABEL_8;
  }

  uint64_t v23 = v14 + 2;
  ++v14;
  if (v21 + 1 >= v45) {
    goto LABEL_26;
  }
  char v22 = *(void *)(v44 + 8 * v23);
  if (v22) {
    goto LABEL_15;
  }
  uint64_t v14 = v21 + 1;
  if (v21 + 2 >= v45) {
    goto LABEL_26;
  }
  char v22 = *(void *)(v44 + 8 * (v21 + 2));
  if (v22)
  {
    v21 += 2LL;
    goto LABEL_12;
  }

  uint64_t v23 = v21 + 3;
  uint64_t v14 = v21 + 2;
  if (v21 + 3 >= v45) {
    goto LABEL_26;
  }
  char v22 = *(void *)(v44 + 8 * v23);
  if (v22)
  {
LABEL_15:
    char v21 = v23;
    goto LABEL_12;
  }

  while (1)
  {
    char v21 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v21 >= v45)
    {
      uint64_t v14 = v45 - 1;
      goto LABEL_26;
    }

    char v22 = *(void *)(v44 + 8 * v21);
    ++v23;
    if (v22) {
      goto LABEL_12;
    }
  }

LABEL_31:
        char v42 = (v18 - 1) & v18;
        uint64_t v14 = __clz(__rbit64(v18)) + (v17 << 6);
        uint64_t v10 = v17;
      }

      char v21 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v14);
      uint64_t v23 = *v21;
      char v22 = v21[1];
      uint64_t v24 = *(void *)(*(void *)(v1 + 56) + 8 * v14);
      uint64_t v44 = v23;
      BOOL v45 = v22;
      uint64_t v43 = v24;
      swift_bridgeObjectRetain(v22);
      OUTLINED_FUNCTION_5_6((uint64_t)v8, (uint64_t)&v43, (uint64_t)v12, (uint64_t)v11);
      uint64_t v25 = v44;
      uint64_t v26 = v45;
      outlined init with take of Any(v8, v9);
      outlined init with take of Any(v9, v49);
      outlined init with take of Any(v49, &v47);
      uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
      uint64_t v28 = v27;
      if ((v29 & 1) == 0) {
        break;
      }
      unint64_t v41 = v10;
      uint64_t v30 = v9;
      uint64_t v31 = v8;
      uint64_t v32 = v1;
      uint64_t v33 = v12;
      __int128 v34 = v11;
      uint64_t v35 = (uint64_t *)(v2[6] + 16 * v27);
      swift_bridgeObjectRelease(v35[1]);
      *uint64_t v35 = v25;
      v35[1] = v26;
      char v11 = v34;
      char v12 = v33;
      uint64_t v1 = v32;
      uint64_t v8 = v31;
      uint64_t v9 = v30;
      uint64_t v10 = v41;
      uint64_t v36 = (void *)(v2[7] + 32 * v28);
      __swift_destroy_boxed_opaque_existential_1Tm(v36);
      outlined init with take of Any(&v47, v36);
      uint64_t v7 = v42;
    }

    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v27;
    uint64_t v37 = (uint64_t *)(v2[6] + 16 * v27);
    *uint64_t v37 = v25;
    v37[1] = v26;
    outlined init with take of Any(&v47, (_OWORD *)(v2[7] + 32 * v27));
    __int128 v38 = v2[2];
    uint64_t v16 = __OFADD__(v38, 1LL);
    uint64_t v39 = v38 + 1;
    if (v16) {
      goto LABEL_39;
    }
    void v2[2] = v39;
    uint64_t v7 = v42;
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

  uint64_t v50 = [v44 valueType];
LABEL_54:
  *(void *)(v1 + 40) = type metadata accessor for LocationResolver(0LL);
  *(void *)(v1 + 48) = &protocol witness table for LocationResolver;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v1 + 16));
  LocationResolver.init()(boxed_opaque_existential_1);
  static AceService.currentAsync.getter((void *)(v1 + 96));
  uint64_t v88 = type metadata accessor for LocationProvider();
  char v89 = OUTLINED_FUNCTION_31_20(v88);
  *(void *)(v89 + 16) = 0x3FA999999999999ALL;
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v1 + 96), v89 + 24);
  *(void *)(v1 + 160) = v88;
  *(void *)(v1 + 168) = &protocol witness table for LocationProvider;
  *(void *)(v1 + 136) = v89;
  *(void *)(v1 + 80) = type metadata accessor for DateTimeResolver(0LL);
  *(void *)(v1 + 88) = &protocol witness table for DateTimeResolver;
  uint64_t v90 = __swift_allocate_boxed_opaque_existential_1((void *)(v1 + 56));
  DateTimeResolver.init()(v90);
  unint64_t v91 = type metadata accessor for ContactResolver(0LL);
  swift_allocObject(v91, *(unsigned int *)(v91 + 48), *(unsigned __int16 *)(v91 + 52));
  uint64_t v92 = ContactResolver.init()();
  *(void *)(v1 + 200) = v91;
  *(void *)(v1 + 208) = &protocol witness table for ContactResolver;
  *(void *)(v1 + 176) = v92;
  uint64_t v93 = (void *)swift_task_alloc(dword_2175F4);
  *(void *)(v1 + 400) = v93;
  char *v93 = v1;
  v93[1] = static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:);
  return INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)( *(void *)(v1 + 280),  *(void *)(v1 + 384),  *(void *)(v1 + 320),  v1 + 16,  v1 + 136,  v1 + 56,  v1 + 176,  (uint64_t)v50);
}

      uint64_t v8 = v19;
    }

void closure #1 in OfferMoreItemsCatTemplater.makeTemplate(nextPage:_:)( void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v10);
  char v12 = (void (**)(void *))((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    *char v12 = a2;
    swift_storeEnumTagMultiPayload(v12, v10, 1LL);
    swift_errorRetain(a2);
    a3(v12);
    outlined destroy of Result<Output, Error>( (uint64_t)v12,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }

  else
  {
    swift_bridgeObjectRetain(a6);
    id v17 = [a1 print];
    uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String);
    char v22 = a3;
    uint64_t v19 = v18;

    id v20 = [a1 speak];
    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, &type metadata for String);

    TemplatingResult.init(dialogId:print:speak:)(v23, a6, v19, v21, (uint64_t)v16);
    (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v12, v16, v13);
    swift_storeEnumTagMultiPayload(v12, v10, 0LL);
    v22(v12);
    outlined destroy of Result<Output, Error>( (uint64_t)v12,  &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }

uint64_t sub_2F3C8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void partial apply for closure #1 in OfferMoreItemsCatTemplater.makeTemplate(nextPage:_:)( void *a1, uint64_t a2)
{
}

void thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ()( uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, void *))(a1 + 32);
  OUTLINED_FUNCTION_14_8();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  OUTLINED_FUNCTION_61();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t DescribeCustomIntentItemCatTemplater.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t DescribeCustomIntentItemCatTemplater.__allocating_init()()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

uint64_t protocol witness for OfferMoreItemsTemplating.makeTemplate(nextPage:_:) in conformance OfferMoreItemsCatTemplater()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))();
}

void OfferMoreItemsViewBuilder.__allocating_init(viewFactory:)(uint64_t a1)
{
  *(void *)(OUTLINED_FUNCTION_19(v1, 24LL) + 16) = a1;
  OUTLINED_FUNCTION_1();
}

uint64_t DescribeCustomIntentItemViewBuilder.init(viewFactory:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return IntroduceCustomIntentCatTemplater.deinit();
}

uint64_t OfferMoreItemsViewBuilder.makeViews(withTemplate:)(uint64_t a1)
{
  Swift::Bool v2 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  uint64_t v3 = dispatch thunk of ViewFactory.makeSummaryView(templateResult:snippets:listenAfterSpeaking:canUseServerTTS:)( a1,  _swiftEmptyArrayStorage,  v2,  1LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = OUTLINED_FUNCTION_19(v4, 40LL);
  *(_OWORD *)(v5 + 16) = xmmword_17E150;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v3;
  uint64_t v9 = v5;
  specialized Array._endMutation()(v5, v6, v7);
  return v9;
}

uint64_t DescribeCustomIntentItemViewBuilder.deinit()
{
  return v0;
}

uint64_t DescribeCustomIntentItemViewBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t protocol witness for OfferMoreItemsViewBuilding.makeViews(withTemplate:) in conformance OfferMoreItemsViewBuilder()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))();
}

void OfferMoreItemsOutputProvider.__allocating_init(nextPage:templating:viewBuilder:)( uint64_t a1, void *a2, void *a3)
{
}

void OfferMoreItemsOutputProvider.init(nextPage:templating:viewBuilder:)(uint64_t a1, void *a2, void *a3)
{
}

void OfferMoreItemsOutputProvider.__allocating_init(nextPage:templating:viewBuilder:)( uint64_t a1, void *a2, void *a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a2, v9);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_35();
  uint64_t v14 = v13 - v12;
  (*(void (**)(uint64_t))(v15 + 16))(v13 - v12);
  uint64_t v16 = a3[3];
  uint64_t v17 = a3[4];
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a3, v16);
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_35();
  uint64_t v21 = v20 - v19;
  (*(void (**)(uint64_t))(v22 + 16))(v20 - v19);
  a4(a1, v14, v21, v5, v9, v16, v10, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  OUTLINED_FUNCTION_24_0();
}

uint64_t OfferMoreItemsOutputProvider.makeOutput(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating + 24);
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating + 32);
  __swift_project_boxed_opaque_existential_1( (void *)(v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating),  v5);
  uint64_t v7 = v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_nextPage;
  uint64_t v8 = (void *)OUTLINED_FUNCTION_19((uint64_t)&unk_1F3F30, 40LL);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v2;
  uint64_t v9 = *(void (**)(uint64_t, void (*)(uint64_t), void *, uint64_t, uint64_t))(v6 + 8);
  swift_retain(a2);
  swift_retain(v2);
  v9(v7, partial apply for closure #1 in OfferMoreItemsOutputProvider.makeOutput(_:), v8, v5, v6);
  return swift_release();
}

void closure #1 in OfferMoreItemsOutputProvider.makeOutput(_:)( uint64_t a1, void (*a2)(__int128 *), uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AceOutput(0LL);
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  __chkstk_darwin(v10);
  unint64_t v41 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = type metadata accessor for NLContextUpdate(0LL);
  uint64_t v42 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TemplatingResult(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v20);
  if (swift_getEnumCaseMultiPayload(v20, v18) == 1)
  {
    *(void *)&__int128 v45 = *v20;
    uint64_t v21 = v45;
    char v48 = 1;
    swift_errorRetain(v45);
    a2(&v45);
    swift_errorRelease(v21);
  }

  else
  {
    uint64_t v37 = a2;
    uint64_t v38 = a3;
    (*(void (**)(char *, void *, uint64_t))(v15 + 32))(v17, v20, v14);
    uint64_t v22 = *(void *)(v39 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder + 24);
    uint64_t v23 = *(void *)(v39 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder + 32);
    __swift_project_boxed_opaque_existential_1( (void *)(v39 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder),  v22);
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 8))(v17, v22, v23);
    NLContextUpdate.init()();
    NLContextUpdate.weightedPromptResponseOptions.setter(&outlined read-only object #0 of closure #1 in OfferMoreItemsOutputProvider.makeOutput(_:));
    NLContextUpdate.weightedPromptTargetDomain.setter(0xD00000000000001FLL);
    NLContextUpdate.currentDomainName.setter(0x6D6F436563696F76LL, 0xED000073646E616DLL);
    NLContextUpdate.dictationPromptTargetDomain.setter(0xD00000000000001FLL, 0x80000000001935E0LL);
    NLContextUpdate.dictationPromptTargetNodes.setter(&outlined read-only object #1 of closure #1 in OfferMoreItemsOutputProvider.makeOutput(_:));
    NLContextUpdate.dictationPromptAbortValues.setter(&outlined read-only object #2 of closure #1 in OfferMoreItemsOutputProvider.makeOutput(_:));
    uint64_t v36 = v14;
    if ((unint64_t)v24 >> 62)
    {
      if (v24 < 0) {
        uint64_t v33 = v24;
      }
      else {
        uint64_t v33 = v24 & 0xFFFFFFFFFFFFFF8LL;
      }
      unint64_t v34 = type metadata accessor for SABaseCommand();
      swift_bridgeObjectRetain(v24);
      uint64_t v26 = _bridgeCocoaArray<A>(_:)(v33, v34);
      swift_bridgeObjectRelease(v24);
    }

    else
    {
      uint64_t v25 = swift_bridgeObjectRetain(v24);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v25);
      type metadata accessor for SABaseCommand();
      uint64_t v26 = v24;
    }

    swift_bridgeObjectRelease(v24);
    uint64_t v47 = 0LL;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    uint64_t v27 = v42;
    uint64_t v28 = v40;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v9, v13, v40);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0LL, 1LL, v28);
    uint64_t v29 = v41;
    AceOutput.init(commands:flowActivity:nlContextUpdate:)(v26, &v45, v9);
    uint64_t v30 = v44;
    *((void *)&v46 + 1) = v44;
    uint64_t v47 = &protocol witness table for AceOutput;
    uint64_t v31 = __swift_allocate_boxed_opaque_existential_1(&v45);
    uint64_t v32 = v43;
    (*(void (**)(void *, char *, uint64_t))(v43 + 16))(v31, v29, v30);
    char v48 = 0;
    v37(&v45);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v30);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v36);
  }

  outlined destroy of Result<Output, Error>( (uint64_t)&v45,  &demangling cache variable for type metadata for Result<Output, Error>);
}

void OfferMoreItemsOutputProvider.deinit()
{
  uint64_t v1 = type metadata accessor for Page(0LL);
  OUTLINED_FUNCTION_13_5(v1);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0
                                                        + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0
                                                        + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating));
  OUTLINED_FUNCTION_1();
}

uint64_t OfferMoreItemsOutputProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t specialized OfferMoreItemsOutputProvider.__allocating_init(nextPage:templating:viewBuilder:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v13 = __chkstk_darwin(a1);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v13);
  uint64_t v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v27 - v21;
  (*(void (**)(char *))(v17 + 32))((char *)&v27 - v21);
  uint64_t v23 = type metadata accessor for OfferMoreItemsOutputProvider(0LL);
  uint64_t v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, a6);
  uint64_t v25 = specialized OfferMoreItemsOutputProvider.init(nextPage:templating:viewBuilder:)( a1,  (uint64_t)v20,  (uint64_t)v15,  v24,  a5,  a6,  v27,  v28);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a3, a6);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v22, a5);
  return v25;
}

uint64_t specialized OfferMoreItemsOutputProvider.init(nextPage:templating:viewBuilder:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (void *)(a4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating);
  v15[3] = a5;
  v15[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32LL))(boxed_opaque_existential_1, a2, a5);
  uint64_t v17 = (void *)(a4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder);
  v17[3] = a6;
  v17[4] = a8;
  uint64_t v18 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))(v18, a3, a6);
  uint64_t v19 = a4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_nextPage;
  uint64_t v20 = type metadata accessor for Page(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32LL))(v19, a1, v20);
  return a4;
}

uint64_t sub_2FE48()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void partial apply for closure #1 in OfferMoreItemsOutputProvider.makeOutput(_:)(uint64_t a1)
{
}

uint64_t type metadata accessor for OfferMoreItemsCatTemplater()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin26OfferMoreItemsCatTemplater);
}

uint64_t type metadata accessor for OfferMoreItemsViewBuilder()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin25OfferMoreItemsViewBuilder);
}

uint64_t ObjC metadata update function for OfferMoreItemsOutputProvider()
{
  return type metadata accessor for OfferMoreItemsOutputProvider(0LL);
}

uint64_t type metadata accessor for OfferMoreItemsOutputProvider(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for OfferMoreItemsOutputProvider;
  if (!type metadata singleton initialization cache for OfferMoreItemsOutputProvider) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OfferMoreItemsOutputProvider);
  }
  return result;
}

uint64_t type metadata completion function for OfferMoreItemsOutputProvider(uint64_t a1)
{
  uint64_t result = type metadata accessor for Page(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    __int128 v4[2] = "(";
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t outlined init with take of (key: String, value: URL)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: URL));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Result<TemplatingResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for SABaseCommand()
{
  unint64_t result = lazy cache variable for type metadata for SABaseCommand;
  if (!lazy cache variable for type metadata for SABaseCommand)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SABaseCommand);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  }

  return result;
}

void outlined destroy of Result<Output, Error>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_13_5(v2);
  OUTLINED_FUNCTION_1();
}

uint64_t OUTLINED_FUNCTION_0_12()
{
  return static _DictionaryStorage.allocate(capacity:)(v0);
}

void OUTLINED_FUNCTION_1_11(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << a1;
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_5_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7LL);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_13_5(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_14_8()
{
  return swift_retain(v0);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_19_5()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void default argument 8 of WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)()
{
}

void closure #1 in default argument 8 of WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)( uint64_t a1)
{
}

void WFExecuteCustomIntentFlow.__allocating_init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = OUTLINED_FUNCTION_19(v11, 288LL);
  uint64_t v16 = a9[3];
  uint64_t v17 = a9[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a9, v16);
  OUTLINED_FUNCTION_66_1();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_35();
  uint64_t v21 = v20 - v19;
  (*(void (**)(uint64_t))(v22 + 16))(v20 - v19);
  OUTLINED_FUNCTION_26_6(a1, a2, a3, v23, v24, v25, v26, v27, v21, a10, a11, v15, v16, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  OUTLINED_FUNCTION_24_0();
}

void WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = a9[3];
  uint64_t v16 = a9[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a9, v15);
  OUTLINED_FUNCTION_66_1();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_35();
  uint64_t v20 = v19 - v18;
  (*(void (**)(uint64_t))(v21 + 16))(v19 - v18);
  OUTLINED_FUNCTION_26_6(a1, a2, a3, v22, v23, v24, v25, v26, v20, a10, a11, v11, v15, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  OUTLINED_FUNCTION_24_0();
}

uint64_t WFExecuteCustomIntentFlow.exitValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  int v3 = *(unsigned __int8 *)(v0 + 32);
  if (v3 == 3)
  {
    id v7 = (id)v2;
    id v8 = (id)v1;
  }

  else if (v3 == 4)
  {
    swift_errorRetain(*(void *)(v0 + 16));
  }

  else if (v3 == 5 && (v2 | v1) == 0)
  {
    return 0LL;
  }

  else
  {
    unint64_t v5 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
    uint64_t v1 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for RunVoiceShortcutFlowErrors, v5);
    *uint64_t v6 = 0;
  }

  return v1;
}

uint64_t WFExecuteCustomIntentFlow.execute()(uint64_t a1)
{
  v2[47] = a1;
  v2[48] = v1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[49] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFExecuteCustomIntentFlow.execute()()
{
  uint64_t v2 = *(void *)(v1 + 384);
  uint64_t v3 = *(void **)(v2 + 16);
  *(void *)(v1 + 400) = v3;
  uint64_t v4 = *(void **)(v2 + 24);
  *(void *)(v1 + 408) = v4;
  int v5 = *(unsigned __int8 *)(v2 + 32);
  if (v5 != 2)
  {
    if (v5 != 1)
    {
      if (*(_BYTE *)(v2 + 32))
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v45 = OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_84(v45, (uint64_t)static Logger.voiceCommands);
        os_log_type_t v46 = OUTLINED_FUNCTION_58();
        if (os_log_type_enabled(v0, v46))
        {
          uint64_t v47 = (uint8_t *)OUTLINED_FUNCTION_57_1();
          *(_WORD *)uint64_t v47 = 0;
          OUTLINED_FUNCTION_47_1(&dword_0, v0, v46, "#WFExecuteCustomIntentFlow complete", v47);
          OUTLINED_FUNCTION_1_0((uint64_t)v47);
        }

        static ExecuteResponse.complete()(v48);
        goto LABEL_60;
      }

      __swift_project_boxed_opaque_existential_1((void *)(v2 + 104), *(void *)(v2 + 128));
      outlined copy of WFExecuteCustomIntentFlow.State(v3, v4, 0);
      OUTLINED_FUNCTION_10_6();
      id v6 = v4;
      uint64_t v7 = OUTLINED_FUNCTION_30_6();
      if ((dispatch thunk of DeviceState.isCarPlay.getter(v7, v8) & 1) != 0)
      {
        id v9 = [v6 typeName];
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        if (v10 == 0xD000000000000051LL && v12 == 0x8000000000193600LL)
        {
          swift_bridgeObjectRelease(0x8000000000193600LL);
LABEL_36:
          uint64_t v58 = *(void *)(v1 + 384);
          OUTLINED_FUNCTION_24_5(v58 + 184);
          uint64_t v59 = v6;
          uint64_t v60 = type metadata accessor for SimpleOutputFlowAsync(0LL);
          OUTLINED_FUNCTION_51(v60);
          swift_retain(v58);
          *(void *)(v1 + 368) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)( v1 + 176,  &async function pointer to partial apply for closure #1 in WFExecuteCustomIntentFlow.execute(),  v58);
          uint64_t v61 = Flow.eraseToAnyFlow()(v60, &protocol witness table for SimpleOutputFlowAsync);
          swift_release();
          unint64_t v62 = lazy protocol witness table accessor for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError();
          uint64_t v63 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for WFExecuteCustomIntentError, v62);
          *(void *)uint64_t v64 = 0LL;
          *(_BYTE *)(v64 + 8) = 1;
          uint64_t v66 = *(void **)(v2 + 16);
          __int128 v65 = *(void **)(v2 + 24);
          *(void *)(v2 + 16) = v63;
          *(void *)(v2 + 24) = 0LL;
          char v67 = *(_BYTE *)(v2 + 32);
          *(_BYTE *)(v2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 4;
          outlined consume of WFExecuteCustomIntentFlow.State(v66, v65, v67);
          static ExecuteResponse.ongoing(next:)(v61);
          OUTLINED_FUNCTION_12_5();

LABEL_38:
          OUTLINED_FUNCTION_34_0();
          uint64_t v72 = v3;
          uint64_t v73 = v4;
          char v74 = 0;
LABEL_59:
          outlined consume of WFExecuteCustomIntentFlow.State(v72, v73, v74);
          goto LABEL_60;
        }

        char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, 0xD000000000000051LL, 0x8000000000193600LL, 0LL);
        OUTLINED_FUNCTION_20();
        if ((v57 & 1) != 0) {
          goto LABEL_36;
        }
      }

      *(void *)(v2 + 16) = v3;
      *(void *)(v2 + 24) = v4;
      char v68 = *(_BYTE *)(v2 + 32);
      *(_BYTE *)(v2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 1;
      OUTLINED_FUNCTION_10_6();
      id v69 = v6;
      char v70 = (void *)OUTLINED_FUNCTION_30_6();
      outlined consume of WFExecuteCustomIntentFlow.State(v70, v71, v68);
      static ExecuteResponse.ongoing(requireInput:)(0LL);

      goto LABEL_38;
    }

    uint64_t v29 = *(void *)(v2 + 128);
    uint64_t v30 = *(void *)(v2 + 136);
    uint64_t v31 = (os_log_s *)__swift_project_boxed_opaque_existential_1((void *)(v2 + 104), v29);
    uint64_t v32 = (void *)OUTLINED_FUNCTION_13_6();
    outlined copy of WFExecuteCustomIntentFlow.State(v32, v33, v34);
    OUTLINED_FUNCTION_10_6();
    id v35 = v4;
    if ((dispatch thunk of DeviceState.isLockedWithPasscode.getter(v29, v30) & 1) != 0)
    {
      uint64_t v31 = *(os_log_s **)(v1 + 384);
      if ((WFExecuteCustomIntentFlow.shouldRequestUserToUnlockDeviceBeforeRunningCustomIntent(intent:)() & 1) != 0)
      {
LABEL_16:
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v36 = OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_84(v36, (uint64_t)static Logger.voiceCommands);
        os_log_type_t v37 = OUTLINED_FUNCTION_58();
        if (os_log_type_enabled(v31, v37))
        {
          uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_57_1();
          *(_WORD *)uint64_t v38 = 0;
          OUTLINED_FUNCTION_47_1(&dword_0, v31, v37, "#WFExecuteCustomIntentFlow needs unlock", v38);
          OUTLINED_FUNCTION_1_0((uint64_t)v38);
        }

        uint64_t v39 = *(void *)(v2 + 128);
        uint64_t v40 = *(void *)(v2 + 136);
        __swift_project_boxed_opaque_existential_1((void *)(v2 + 104), v39);
        dispatch thunk of DeviceState.sessionHandOffContinuityID.getter(v39, v40);
        *(void *)(v1 + 416) = v41;
        if (v41)
        {
          uint64_t v42 = *(void *)(v2 + 128);
          __swift_project_boxed_opaque_existential_1((void *)(v2 + 104), v42);
          if ((dispatch thunk of DeviceState.isHomePod.getter(v42) & 1) != 0)
          {
            uint64_t v43 = (void *)swift_task_alloc(dword_215ADC);
            *(void *)(v1 + 424) = v43;
            *uint64_t v43 = v1;
            v43[1] = WFExecuteCustomIntentFlow.execute();
            return WFExecuteCustomIntentFlow.handoffToCompanionDevice(continuityId:)(*(void *)(v1 + 376));
          }

          OUTLINED_FUNCTION_69();
        }

        uint64_t v116 = v35;
        outlined init with copy of AppShortcutInvoking(v2 + 104, v1 + 296);
        if (one-time initialization token for shared != -1) {
          swift_once(&one-time initialization token for shared, one-time initialization function for shared);
        }
        uint64_t v84 = *(void *)(v1 + 384);
        uint64_t v85 = static WFDialogState.shared;
        type metadata accessor for RunCustomIntentCATs(0LL);
        uint64_t v86 = swift_retain(v85);
        static CATOption.defaultMode.getter(v86);
        uint64_t v113 = OUTLINED_FUNCTION_36_6();
        type metadata accessor for RunCustomIntentCATsSimple(0LL);
        OUTLINED_FUNCTION_18_7();
        uint64_t v112 = OUTLINED_FUNCTION_35_7();
        type metadata accessor for RunVoiceCommandCATs(0LL);
        OUTLINED_FUNCTION_18_7();
        uint64_t v87 = OUTLINED_FUNCTION_36_6();
        type metadata accessor for RunVoiceCommandCATsSimple(0LL);
        OUTLINED_FUNCTION_18_7();
        uint64_t v88 = OUTLINED_FUNCTION_35_7();
        uint64_t v89 = type metadata accessor for AppNameResolver();
        uint64_t v90 = OUTLINED_FUNCTION_19(v89, 16LL);
        uint64_t v91 = type metadata accessor for CustomIntentsDialogTemplating();
        uint64_t v92 = OUTLINED_FUNCTION_19(v91, 152LL);
        specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( (__int128 *)(v1 + 296),  v85,  0LL,  1,  v113,  v112,  v87,  v88,  v90,  v92);
        uint64_t v94 = v93;
        OUTLINED_FUNCTION_24_5(v2 + 104);
        uint64_t v95 = type metadata accessor for ShortcutsUnlockDeviceStrategy();
        uint64_t v96 = OUTLINED_FUNCTION_19(v95, 64LL);
        *(void *)(v96 + 16) = v94;
        outlined init with take of AceServiceInvokerAsync((__int128 *)(v1 + 256), v96 + 24);
        uint64_t v97 = *(uint64_t (**)(uint64_t))(v84 + 272);
        swift_retain(v94);
        *(void *)(v1 + 344) = v97(v96);
        uint64_t v98 = type metadata accessor for GuardFlow(0LL);
        *(void *)(v1 + 35__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = Flow.eraseToAnyValueFlow()(v98, &protocol witness table for GuardFlow);
        uint64_t v99 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F3FA0, 32LL);
        *(void *)(v99 + 16) = partial apply for implicit closure #5 in implicit closure #4 in WFExecuteCustomIntentFlow.execute();
        *(void *)(v99 + 24) = v84;
        swift_retain(v84);
        uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>);
        unint64_t v101 = lazy protocol witness table accessor for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>();
        static ExecuteResponse.replan<A>(next:childCompletion:)( v1 + 352,  partial apply for thunk for @escaping @callee_guaranteed (@unowned GuardFlowResult) -> (),  v99,  v100,  v101);
        OUTLINED_FUNCTION_12_5();
        swift_release();
        swift_release();
        char v102 = (void *)OUTLINED_FUNCTION_13_6();
        outlined consume of WFExecuteCustomIntentFlow.State(v102, v103, v104);
        swift_release();

        OUTLINED_FUNCTION_34_0();
        goto LABEL_34;
      }

      id v75 = [v35 typeName];
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v77;

      if (v76 == 0xD000000000000029LL && v31 == (os_log_s *)0x8000000000190780LL)
      {
        swift_bridgeObjectRelease(0x8000000000190780LL);
      }

      else
      {
        char v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v31, 0xD000000000000029LL, 0x8000000000190780LL, 0LL);
        OUTLINED_FUNCTION_20();
        if ((v78 & 1) == 0) {
          goto LABEL_54;
        }
      }

      uint64_t v79 = objc_opt_self(&OBJC_CLASS___INSendMessageIntent);
      uint64_t v80 = swift_dynamicCastObjCClass(v35, v79);
      if (v80)
      {
        uint64_t v81 = (void *)v80;
        uint64_t v31 = (os_log_s *)v35;
        outlined bridged method (pb) of @objc INSendMessageIntent.attachments.getter(v81);
        if (v82)
        {
          if ((unint64_t)v82 >> 62)
          {
            if (v82 >= 0) {
              v82 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v83 = _CocoaArrayWrapper.endIndex.getter(v82);
          }

          else
          {
            uint64_t v83 = *(void *)((char *)&dword_10 + (v82 & 0xFFFFFFFFFFFFFF8LL));
          }

          OUTLINED_FUNCTION_69();
          if (v83) {
            goto LABEL_16;
          }
        }

        else
        {
        }
      }
    }

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 424LL));
  OUTLINED_FUNCTION_20();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v1 = *(void **)(v0 + 400);
  uint64_t v2 = *(void **)(v0 + 408);

  OUTLINED_FUNCTION_34_0();
  outlined consume of WFExecuteCustomIntentFlow.State(v1, v2, 1);
  swift_task_dealloc(*(void *)(v0 + 392));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

LABEL_54:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v105 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v105, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v106 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_21_6(v106))
    {
      uint64_t v107 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v107 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  v31,  (os_log_type_t)(v2 + 104),  "#WFExecuteCustomIntentFlow does not need unlock",  v107);
      OUTLINED_FUNCTION_1_0((uint64_t)v107);
    }

    uint64_t v108 = *(void **)(v2 + 16);
    uint64_t v109 = *(void **)(v2 + 24);
    *(void *)(v2 + 16) = v3;
    *(void *)(v2 + 24) = v4;
    char v110 = *(_BYTE *)(v2 + 32);
    *(_BYTE *)(v2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2;
    OUTLINED_FUNCTION_10_6();
    id v111 = v35;
    outlined consume of WFExecuteCustomIntentFlow.State(v108, v109, v110);
    static ExecuteResponse.ongoing(requireInput:)(0LL);

    OUTLINED_FUNCTION_34_0();
    uint64_t v72 = (void *)OUTLINED_FUNCTION_13_6();
    goto LABEL_59;
  }

  outlined copy of WFExecuteCustomIntentFlow.State(v3, v4, 2);
  OUTLINED_FUNCTION_10_6();
  id v13 = v4;
  id v14 = [v13 typeName];
  os_log_type_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = OUTLINED_FUNCTION_30_6();
  static VoiceCommandsParity.isParityIntent(intentName:)(v16, v17);
  uint64_t v19 = v18;
  OUTLINED_FUNCTION_69();
  if ((v19 & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v20 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v20, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v21 = OUTLINED_FUNCTION_58();
    if (os_log_type_enabled(v19, v21))
    {
      uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v22 = 0;
      OUTLINED_FUNCTION_47_1(&dword_0, v19, v21, "#WFExecuteCustomIntentFlow execute parity intent.", v22);
      OUTLINED_FUNCTION_1_0((uint64_t)v22);
    }

    uint64_t v23 = *(void *)(v1 + 384);

    outlined init with copy of AppShortcutInvoking(v23 + 184, v1 + 216);
    uint64_t v24 = type metadata accessor for VoiceCommandParityFlow();
    OUTLINED_FUNCTION_19(v24, 89LL);
    *(void *)(v1 + 336) = VoiceCommandParityFlow.init(intent:app:outputPublisher:)( (uint64_t)v13,  (uint64_t)v3,  (__int128 *)(v1 + 216));
    uint64_t v25 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F3F78, 32LL);
    *(void *)(v25 + 16) = partial apply for implicit closure #7 in implicit closure #6 in WFExecuteCustomIntentFlow.execute();
    *(void *)(v25 + 24) = v23;
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for VoiceCommandParityFlow,  (uint64_t)&protocol conformance descriptor for VoiceCommandParityFlow);
    uint64_t v27 = v26;
    swift_retain(v23);
    OUTLINED_FUNCTION_10_6();
    id v28 = v13;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v1 + 336,  partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ParityFlowExecutionResult) -> (),  v25,  v24,  v27);

    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_25_9();
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v49 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v49, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v50 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_21_6(v50))
    {
      char v51 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)char v51 = 0;
      OUTLINED_FUNCTION_47_1(&dword_0, v19, v15, "#WFExecuteCustomIntentFlow execute custom intent.", v51);
      OUTLINED_FUNCTION_1_0((uint64_t)v51);
    }

    uint64_t v52 = *(void *)(v1 + 384);

    outlined init with copy of AppShortcutInvoking(v52 + 64, v1 + 16);
    uint64_t v53 = *(void *)(v52 + 56);
    uint64_t v114 = *(void *)(v52 + 48);
    outlined init with copy of AppShortcutInvoking(v52 + 104, v1 + 56);
    outlined init with copy of AppShortcutInvoking(v52 + 144, v1 + 96);
    outlined init with copy of AppShortcutInvoking(v52 + 232, v1 + 136);
    uint64_t v54 = type metadata accessor for CustomIntentExecutionFlow(0LL);
    OUTLINED_FUNCTION_51(v54);
    id v115 = v13;
    swift_bridgeObjectRetain(v53);
    *(void *)(v1 + 360) = CustomIntentExecutionFlow.init(runner:intent:voiceCommandName:deviceIdiom:deviceState:aceServiceInvoker:appPolicyHandler:)( v1 + 16,  v4,  v114,  v53,  0LL,  1,  (void *)(v1 + 56),  v1 + 96,  (void *)(v1 + 136));
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow,  255LL,  type metadata accessor for CustomIntentExecutionFlow,  (uint64_t)&protocol conformance descriptor for CustomIntentExecutionFlow);
    uint64_t v56 = v55;
    swift_retain(v52);
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v1 + 360,  partial apply for implicit closure #9 in implicit closure #8 in WFExecuteCustomIntentFlow.execute(),  v52,  v54,  v56);

    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_25_9();
  }

  swift_release();
LABEL_34:
  swift_release();
LABEL_60:
  swift_task_dealloc(*(void *)(v1 + 392));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t closure #1 in WFExecuteCustomIntentFlow.execute()(uint64_t a1, uint64_t a2)
{
  v2[7] = a1;
  _BYTE v2[8] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  void v2[9] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[10] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for CATOption(0LL);
  v2[11] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v2[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[13] = v7;
  v2[14] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in WFExecuteCustomIntentFlow.execute(), 0LL, 0LL);
}

uint64_t closure #1 in WFExecuteCustomIntentFlow.execute()()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = (void *)v0[8];
  uint64_t v3 = type metadata accessor for RunVoiceCommandCATs(0LL);
  static CATOption.defaultMode.getter(v3);
  uint64_t v4 = (void *)CATWrapper.__allocating_init(options:globals:)(v1, 0LL);
  v0[15] = v4;
  uint64_t v5 = v2 + 13;
  uint64_t v6 = v2[16];
  uint64_t v7 = v2[17];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v8 = DeviceState.asSiriKitDeviceState()(v6, v7);
  v0[16] = v8;
  uint64_t v9 = type metadata accessor for SpeakableString(0LL);
  OUTLINED_FUNCTION_16_8(v9);
  uint64_t v10 = *(int **)(class metadata base offset for RunVoiceCommandCATs + *v4 + 32);
  id v13 = (int *)((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  v0[17] = v11;
  *uint64_t v11 = v0;
  v11[1] = closure #1 in WFExecuteCustomIntentFlow.execute();
  return ((uint64_t (*)(void, uint64_t, void))v13)(v0[14], v8, v0[10]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc(v2);
  outlined destroy of Any?(v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_34_0();
  swift_release();
  if (v0) {
    uint64_t v4 = closure #1 in WFExecuteCustomIntentFlow.execute();
  }
  else {
    uint64_t v4 = closure #1 in WFExecuteCustomIntentFlow.execute();
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 72);
  id v14 = *(void *)(v0 + 88);
  os_log_type_t v15 = *(void *)(v0 + 80);
  uint64_t v4 = *(void **)(v0 + 56);
  uint64_t v3 = *(void **)(v0 + 64);
  uint64_t v5 = v3 + 13;
  uint64_t v7 = v3[16];
  uint64_t v6 = v3[17];
  __swift_project_boxed_opaque_existential_1(v3 + 13, v7);
  uint64_t v8 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v7, v6);
  uint64_t v9 = type metadata accessor for NLContextUpdate(0LL);
  OUTLINED_FUNCTION_16_8(v9);
  uint64_t v10 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 0u;
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + 16) = 0u;
  void v4[3] = v10;
  v4[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v5,  v8 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v2,  _swiftEmptyArrayStorage,  v0 + 16);
  outlined destroy of Any?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Any?(v2, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v11 = OUTLINED_FUNCTION_30_6();
  v12(v11);
  swift_task_dealloc(v1);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void implicit closure #5 in implicit closure #4 in WFExecuteCustomIntentFlow.execute()(char a1)
{
}

void thunk for @escaping @callee_guaranteed (@unowned GuardFlowResult) -> ()( unsigned __int8 *a1, void (*a2)(void))
{
}

uint64_t WFExecuteCustomIntentFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFExecuteCustomIntentFlow();
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type WFExecuteCustomIntentFlow and conformance WFExecuteCustomIntentFlow,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for WFExecuteCustomIntentFlow,  (uint64_t)&protocol conformance descriptor for WFExecuteCustomIntentFlow);
  return Flow.deferToExecuteAsync(_:)(a1, a2, v4, v6);
}

void WFExecuteCustomIntentFlow.processDeviceUnlockResult(exitValue:)(char a1)
{
  if (*(_BYTE *)(v1 + 32) != 1)
  {
    unint64_t v7 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
    uint64_t v8 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for RunVoiceShortcutFlowErrors, v7);
    *uint64_t v9 = 0;
LABEL_6:
    uint64_t v12 = *(void **)(v1 + 16);
    uint64_t v5 = *(void **)(v1 + 24);
    *(void *)(v1 + 16) = v8;
    *(void *)(v1 + 24) = 0LL;
    char v6 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 4;
    uint64_t v4 = v12;
    goto LABEL_7;
  }

  if ((a1 & 1) != 0)
  {
    unint64_t v10 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
    uint64_t v8 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for RunVoiceShortcutFlowErrors, v10);
    *uint64_t v11 = 1;
    goto LABEL_6;
  }

  uint64_t v2 = *(void **)(v1 + 24);
  *(_BYTE *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2;
  OUTLINED_FUNCTION_10_6();
  id v3 = v2;
  uint64_t v4 = (void *)OUTLINED_FUNCTION_13_6();
LABEL_7:
  outlined consume of WFExecuteCustomIntentFlow.State(v4, v5, v6);
}

void WFExecuteCustomIntentFlow.processCustomIntentExecutionResult(executionResult:)(os_log_s *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_35();
  uint64_t v8 = (uint64_t *)(v7 - v6);
  (*(void (**)(uint64_t, os_log_s *, uint64_t))(v5 + 16))(v7 - v6, a1, v4);
  int v9 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v8, v4);
  if (v9 == enum case for RCHFlowResult.complete<A, B>(_:))
  {
    OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 96));
    unint64_t v10 = (void *)v8[1];
    uint64_t v11 = (void *)v8[2];
    swift_release();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v12 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v12, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v13 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_20_9(v13))
    {
      id v14 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)id v14 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  a1,  (os_log_type_t)v8,  "#WFExecuteCustomIntentFlow process execution result",  v14);
      OUTLINED_FUNCTION_1_0((uint64_t)v14);
    }

    if (OUTLINED_FUNCTION_29_6() == (char *)&dword_4 + 1)
    {
      id v15 = OUTLINED_FUNCTION_29_6();
      unint64_t v16 = lazy protocol witness table accessor for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError();
      uint64_t v17 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for WFExecuteCustomIntentError, v16);
      *(void *)uint64_t v18 = v15;
      *(_BYTE *)(v18 + 8) = 0;

      uint64_t v19 = *(void **)(v2 + 16);
      uint64_t v20 = *(void **)(v2 + 24);
      *(void *)(v2 + 16) = v17;
LABEL_20:
      *(void *)(v2 + 24) = 0LL;
      char v34 = *(_BYTE *)(v2 + 32);
      char v35 = 4;
      goto LABEL_21;
    }

    uint64_t v19 = *(void **)(v2 + 16);
    uint64_t v20 = *(void **)(v2 + 24);
    *(void *)(v2 + 16) = v10;
    *(void *)(v2 + 24) = v11;
    char v34 = *(_BYTE *)(v2 + 32);
    char v35 = 3;
LABEL_21:
    *(_BYTE *)(v2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v35;
    outlined consume of WFExecuteCustomIntentFlow.State(v19, v20, v34);
    return;
  }

  if (v9 == enum case for RCHFlowResult.error<A, B>(_:))
  {
    OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 96));
    uint64_t v21 = *v8;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v22 = OUTLINED_FUNCTION_48();
    uint64_t v23 = (os_log_s *)OUTLINED_FUNCTION_84(v22, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v25 = 0;
      OUTLINED_FUNCTION_47_1(&dword_0, v23, v24, "#WFExecuteCustomIntentFlow process execution result state error", v25);
      OUTLINED_FUNCTION_1_0((uint64_t)v25);
    }

    uint64_t v26 = (void *)_convertErrorToNSError(_:)(v21);
    OUTLINED_FUNCTION_32_4();
    uint64_t v27 = OUTLINED_FUNCTION_32_4();
    id v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc(22LL, -1LL);
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v48 = v31;
      *(_DWORD *)uint64_t v30 = 134218242;
      id v47 = [v26 code];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v30 + 4);
      *(_WORD *)(v30 + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2080;
      swift_getErrorValue(v21, v46, v45);
      uint64_t v32 = Error.localizedDescription.getter(v45[1], v45[2]);
      id v47 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v30 + 14);
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_23_6();
      OUTLINED_FUNCTION_23_6();
      _os_log_impl(&dword_0, v28, v29, "#WFExecuteCustomIntentFlow error code %ld, error: %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v31);
      OUTLINED_FUNCTION_1_0(v30);
    }

    else
    {

      OUTLINED_FUNCTION_23_6();
      OUTLINED_FUNCTION_23_6();
    }

    uint64_t v19 = *(void **)(v2 + 16);
    uint64_t v20 = *(void **)(v2 + 24);
    *(void *)(v2 + 16) = v21;
    goto LABEL_20;
  }

  if (v9 == enum case for RCHFlowResult.cancelled<A, B>(_:))
  {
    uint64_t v19 = (void *)OUTLINED_FUNCTION_27_7();
    goto LABEL_21;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v36 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v36, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v37 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(a1, v37))
  {
    uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v38 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  a1,  v37,  "#WFExecuteCustomIntentFlow process execution result state cancelled",  v38);
    OUTLINED_FUNCTION_1_0((uint64_t)v38);
  }

  unint64_t v39 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
  uint64_t v40 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for RunVoiceShortcutFlowErrors, v39);
  *uint64_t v41 = 0;
  uint64_t v43 = *(void **)(v2 + 16);
  uint64_t v42 = *(void **)(v2 + 24);
  *(void *)(v2 + 16) = v40;
  *(void *)(v2 + 24) = 0LL;
  char v44 = *(_BYTE *)(v2 + 32);
  *(_BYTE *)(v2 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 4;
  outlined consume of WFExecuteCustomIntentFlow.State(v43, v42, v44);
  OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
}

void WFExecuteCustomIntentFlow.processParityRequestExecutionResult(flowResult:)(void *a1, void *a2, char a3)
{
  uint64_t v5 = v3;
  if (a3)
  {
    if (a3 == 1)
    {
      OUTLINED_FUNCTION_32_4();
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v7 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_84(v7, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v8 = OUTLINED_FUNCTION_58();
      if (OUTLINED_FUNCTION_20_9(v8))
      {
        int v9 = (uint8_t *)OUTLINED_FUNCTION_57_1();
        *(_WORD *)int v9 = 0;
        OUTLINED_FUNCTION_47_1( &dword_0,  (os_log_s *)v3,  v4,  "#WFExecuteCustomIntentFlow cannot create executionResult for parity intents.",  v9);
        OUTLINED_FUNCTION_1_0((uint64_t)v9);
      }

      unint64_t v10 = *(void **)(v3 + 16);
      uint64_t v11 = *(void **)(v3 + 24);
      *(void *)(v3 + 16) = a1;
      *(void *)(v3 + 24) = 0LL;
      char v12 = *(_BYTE *)(v3 + 32);
      char v13 = 4;
    }

    else
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v25 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_84(v25, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v26 = OUTLINED_FUNCTION_58();
      if (os_log_type_enabled((os_log_t)v3, v26))
      {
        uint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_57_1();
        *(_WORD *)uint64_t v27 = 0;
        OUTLINED_FUNCTION_47_1( &dword_0,  (os_log_s *)v3,  v26,  "#WFExecuteCustomIntentFlow parity intent is cancelled.",  v27);
        OUTLINED_FUNCTION_1_0((uint64_t)v27);
      }

      unint64_t v10 = (void *)OUTLINED_FUNCTION_27_7();
    }

    *(_BYTE *)(v3 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v13;
    outlined consume of WFExecuteCustomIntentFlow.State(v10, v11, v12);
  }

  else
  {
    id v15 = *(void **)(v5 + 16);
    unint64_t v16 = *(void **)(v5 + 24);
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = a2;
    char v17 = *(_BYTE *)(v5 + 32);
    *(_BYTE *)(v5 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 3;
    id v18 = a1;
    id v19 = a2;
    id v28 = v18;
    id v20 = v19;
    outlined consume of WFExecuteCustomIntentFlow.State(v15, v16, v17);
    if (one-time initialization token for shared != -1) {
      swift_once(&one-time initialization token for shared, one-time initialization function for shared);
    }
    (*(void (**)(void))(*(void *)static WFDialogState.shared + 224LL))(0LL);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v21 = OUTLINED_FUNCTION_48();
    oslog = (os_log_s *)OUTLINED_FUNCTION_84(v21, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v22))
    {
      uint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_57_1();
      *(_WORD *)uint64_t v23 = 0;
      OUTLINED_FUNCTION_47_1( &dword_0,  oslog,  v22,  "#WFExecuteCustomIntentFlow created executionResult for parity intents successfully.",  v23);
      OUTLINED_FUNCTION_1_0((uint64_t)v23);

      os_log_type_t v24 = oslog;
    }

    else
    {

      os_log_type_t v24 = (os_log_s *)v28;
    }
  }

uint64_t WFExecuteCustomIntentFlow.handoffToCompanionDevice(continuityId:)(uint64_t a1)
{
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 11__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v1;
  return swift_task_switch(WFExecuteCustomIntentFlow.handoffToCompanionDevice(continuityId:), 0LL, 0LL);
}

uint64_t WFExecuteCustomIntentFlow.handoffToCompanionDevice(continuityId:)()
{
  uint64_t v1 = *(void *)(v0 + 112);
  outlined init with copy of AppShortcutInvoking(v1 + 64, v0 + 16);
  OUTLINED_FUNCTION_24_5(v1 + 104);
  uint64_t v2 = type metadata accessor for CustomIntentHandoffToCompanionFlowStrategy();
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 96LL);
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 16), v3 + 56);
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 56), v3 + 16);
  outlined init with copy of AppShortcutInvoking(v1 + 104, v0 + 16);
  OUTLINED_FUNCTION_24_5(v1 + 184);
  *(void *)(v0 + 96) = v3;
  uint64_t v4 = type metadata accessor for HandoffSessionToCompanionFlowAsync(0LL);
  OUTLINED_FUNCTION_51(v4);
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type CustomIntentHandoffToCompanionFlowStrategy and conformance CustomIntentHandoffToCompanionFlowStrategy,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for CustomIntentHandoffToCompanionFlowStrategy,  (uint64_t)&protocol conformance descriptor for CustomIntentHandoffToCompanionFlowStrategy);
  uint64_t v6 = v5;
  swift_retain(v3);
  uint64_t v7 = HandoffSessionToCompanionFlowAsync.init<A>(strategy:deviceState:outputPublisher:)( v0 + 96,  v0 + 16,  v0 + 56,  v2,  v6);
  os_log_type_t v8 = *(void **)(v1 + 16);
  int v9 = *(void **)(v1 + 24);
  *(void *)(v1 + 16) = 0LL;
  *(void *)(v1 + 24) = 0LL;
  char v10 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v1 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 5;
  outlined consume of WFExecuteCustomIntentFlow.State(v8, v9, v10);
  *(void *)(v0 + 16) = v7;
  static ExecuteResponse.complete<A>(next:)(v0 + 16, v4, &protocol witness table for HandoffSessionToCompanionFlowAsync);
  swift_release();
  OUTLINED_FUNCTION_12_5();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WFExecuteCustomIntentFlow.shouldRequestUserToUnlockDeviceBeforeRunningCustomIntent(intent:)()
{
  if (INIntent.requiresDeviceToBeUnlocked()())
  {
    uint64_t v1 = *(void *)(v0 + 128);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 104), v1);
    char v2 = dispatch thunk of DeviceState.isHomePod.getter(v1) ^ 1;
  }

  else
  {
    char v2 = 0;
  }

  return v2 & 1;
}

uint64_t WFExecuteCustomIntentFlow.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 64));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 104));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 144));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 184));

  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 232));
  swift_release();
  return v0;
}

uint64_t WFExecuteCustomIntentFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 288LL, 7LL);
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.getter in conformance WFExecuteCustomIntentFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.setter in conformance WFExecuteCustomIntentFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

void (*protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance WFExecuteCustomIntentFlow( void *a1))(void *a1)
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t protocol witness for Flow.on(input:) in conformance WFExecuteCustomIntentFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200LL))() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance WFExecuteCustomIntentFlow( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Flow.onAsync(input:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance WFExecuteCustomIntentFlow;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance WFExecuteCustomIntentFlow(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFExecuteCustomIntentFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216LL))();
}

uint64_t protocol witness for Flow.execute() in conformance WFExecuteCustomIntentFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 208LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WFExecuteCustomIntentFlow@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 192LL))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

void outlined bridged method (pb) of @objc INSendMessageIntent.attachments.getter(void *a1)
{
  id v1 = [a1 attachments];
  if (v1)
  {
    uint64_t v2 = v1;
    unint64_t v3 = type metadata accessor for INSendMessageAttachment();
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);
  }

  OUTLINED_FUNCTION_1();
}

uint64_t specialized WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v60[3] = a13;
  v60[4] = a14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v60);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32LL))( boxed_opaque_existential_1,  a9,  a13);
  uint64_t v54 = (void *)a5;
  outlined init with copy of AppShortcutInvoking(a5, a12 + 104);
  uint64_t v55 = (void *)a6;
  outlined init with copy of AppShortcutInvoking(a6, a12 + 144);
  uint64_t v53 = (void *)a7;
  outlined init with copy of AppShortcutInvoking(a7, a12 + 184);
  *(void *)(a12 + 40) = a1;
  *(void *)(a12 + 48) = a2;
  *(void *)(a12 + 56) = a3;
  uint64_t v21 = (void *)a4;
  outlined init with copy of AppShortcutInvoking(a4, a12 + 64);
  *(void *)(a12 + 224) = a8;
  outlined init with copy of AppShortcutInvoking((uint64_t)v60, a12 + 232);
  *(void *)(a12 + 27__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = a10;
  *(void *)(a12 + 280) = a11;
  uint64_t v22 = one-time initialization token for voiceCommands;
  id v23 = a1;
  id v24 = a8;
  swift_retain(a11);
  if (v22 != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
  id v26 = v23;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v58 = (void *)a4;
    os_log_type_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v29 = 138412290;
    id v59 = v26;
    id v30 = v24;
    id v31 = v26;
    uint64_t v21 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v29 + 4);
    *uint64_t v52 = v26;

    id v24 = v30;
    _os_log_impl(&dword_0, v27, v28, "#WFExecuteCustomIntentFlow intent: %@", v29, 0xCu);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v52, 1LL, v32);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {

    uint64_t v27 = (os_log_s *)v26;
  }

  id v33 = [*(id *)(a12 + 40) _metadata];
  if (v33)
  {
    char v34 = v33;
    uint64_t v35 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v33);
    if (v36)
    {
      uint64_t v37 = v35;
      uint64_t v38 = v36;
      id v39 = [v26 typeName];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v41;

      static VoiceCommandsParity.isParityIntent(intentName:)(v40, v42);
      LOBYTE(v3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = v43;
      swift_bridgeObjectRelease(v42);
      [v26 _setMetadata:v34];
      type metadata accessor for App(0LL);
      uint64_t v44 = App.__allocating_init(appIdentifier:)(v37, v38);

      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm(v60);
      __swift_destroy_boxed_opaque_existential_1Tm(v53);
      __swift_destroy_boxed_opaque_existential_1Tm(v55);
      __swift_destroy_boxed_opaque_existential_1Tm(v54);
      __swift_destroy_boxed_opaque_existential_1Tm(v21);
      char v45 = 0;
      goto LABEL_15;
    }
  }

  os_log_type_t v46 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl( &dword_0,  v46,  v47,  "#WFExecuteCustomIntentFlow error state because metadata or bundleid is nil",  v48,  2u);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  unint64_t v49 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
  uint64_t v44 = swift_allocError(&type metadata for RunVoiceShortcutFlowErrors, v49, 0LL, 0LL);
  *os_log_type_t v50 = 0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v60);
  __swift_destroy_boxed_opaque_existential_1Tm(v53);
  __swift_destroy_boxed_opaque_existential_1Tm(v55);
  __swift_destroy_boxed_opaque_existential_1Tm(v54);
  __swift_destroy_boxed_opaque_existential_1Tm(v21);
  id v26 = 0LL;
  char v45 = 4;
LABEL_15:
  *(void *)(a12 + 16) = v44;
  *(void *)(a12 + 24) = v26;
  *(_BYTE *)(a12 + 3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = v45;
  return a12;
}

id outlined copy of WFExecuteCustomIntentFlow.State(id result, void *a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      id v4 = a2;
      swift_retain(result);
      goto LABEL_4;
    case 3:
      id v4 = result;
      id v3 = a2;
LABEL_4:
      uint64_t result = v4;
      break;
    case 4:
      uint64_t result = (id)swift_errorRetain(result);
      break;
    default:
      return result;
  }

  return result;
}

void outlined consume of WFExecuteCustomIntentFlow.State(void *a1, void *a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      id v3 = a2;
      swift_release(a1);
      goto LABEL_4;
    case 3:
      id v3 = a2;

LABEL_4:
      break;
    case 4:
      swift_errorRelease(a1);
      break;
    default:
      return;
  }

uint64_t sub_32804()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ParityFlowExecutionResult) -> ()( uint64_t a1)
{
}

void partial apply for implicit closure #5 in implicit closure #4 in WFExecuteCustomIntentFlow.execute()( char a1)
{
}

void partial apply for thunk for @escaping @callee_guaranteed (@unowned GuardFlowResult) -> ()( unsigned __int8 *a1)
{
}

unint64_t lazy protocol witness table accessor for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnyValueFlow<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>);
  }

  return result;
}

uint64_t partial apply for closure #1 in WFExecuteCustomIntentFlow.execute()(uint64_t a1)
{
  id v4 = (void *)swift_task_alloc(dword_215AE4);
  *(void *)(v2 + 16) = v4;
  *id v4 = v2;
  v4[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return closure #1 in WFExecuteCustomIntentFlow.execute()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError;
  if (!lazy protocol witness table cache variable for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WFExecuteCustomIntentError,  &type metadata for WFExecuteCustomIntentError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError);
  }

  return result;
}

uint64_t type metadata accessor for WFExecuteCustomIntentFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin25WFExecuteCustomIntentFlow);
}

void base witness table accessor for Flow in WFExecuteCustomIntentFlow(uint64_t a1, uint64_t a2)
{
}

void base witness table accessor for SiriEnvironmentLocating in WFExecuteCustomIntentFlow( uint64_t a1, uint64_t a2)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CustomIntentExecutionResult( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for CustomIntentExecutionResult( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of CustomIntentExecutionResult);
}

id outlined copy of CustomIntentExecutionResult(id result, void *a2, char a3)
{
  if (a3 == 1)
  {
    id v4 = result;
    id v3 = a2;
    return v4;
  }

  else if (!a3)
  {
    return (id)swift_errorRetain(result);
  }

  return result;
}

void destroy for CustomIntentExecutionResult(uint64_t a1)
{
}

void outlined consume of CustomIntentExecutionResult(void *a1, void *a2, char a3)
{
  if (a3 == 1)
  {
  }

  else if (!a3)
  {
    swift_errorRelease(a1);
  }

uint64_t *assignWithCopy for CustomIntentExecutionResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for CustomIntentExecutionResult( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of CustomIntentExecutionResult,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of CustomIntentExecutionResult);
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

void assignWithTake for CustomIntentExecutionResult(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for CustomIntentExecutionResult(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomIntentExecutionResult( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for CustomIntentExecutionResult(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for CustomIntentExecutionResult(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 2;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

void type metadata accessor for CustomIntentExecutionResult()
{
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for WFExecuteCustomIntentError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for WFExecuteCustomIntentError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = v3;
  return result;
}

uint64_t getEnumTag for WFExecuteCustomIntentError(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t destructiveInjectEnumTag for WFExecuteCustomIntentError(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    char v2 = 1;
  }

  else
  {
    char v2 = 0;
  }

  *(_BYTE *)(result + 8) = v2;
  return result;
}

void type metadata accessor for WFExecuteCustomIntentError()
{
}

uint64_t initializeBufferWithCopyOfBuffer for WFExecuteCustomIntentFlow.State( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for CustomIntentExecutionResult( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of WFExecuteCustomIntentFlow.State);
}

void destroy for WFExecuteCustomIntentFlow.State(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CustomIntentExecutionResult( uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for WFExecuteCustomIntentFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for CustomIntentExecutionResult( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))outlined copy of WFExecuteCustomIntentFlow.State,  (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of WFExecuteCustomIntentFlow.State);
}

uint64_t *assignWithCopy for CustomIntentExecutionResult( uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

void assignWithTake for WFExecuteCustomIntentFlow.State(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void assignWithTake for CustomIntentExecutionResult( uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  OUTLINED_FUNCTION_1();
}

uint64_t getEnumTagSinglePayload for WFExecuteCustomIntentFlow.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 250;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 5) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WFExecuteCustomIntentFlow.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 251;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFB) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFB) {
      *(_BYTE *)(result + 1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for WFExecuteCustomIntentFlow.State(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for WFExecuteCustomIntentFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)__n128 result = a2 - 5;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_1Tm(v0 + 2) = 5;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

void *type metadata accessor for WFExecuteCustomIntentFlow.State()
{
  return &unk_1F4158;
}

unint64_t type metadata accessor for INSendMessageAttachment()
{
  unint64_t result = lazy cache variable for type metadata for INSendMessageAttachment;
  if (!lazy cache variable for type metadata for INSendMessageAttachment)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INSendMessageAttachment);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INSendMessageAttachment);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_10_6()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_13_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_8(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1LL, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_17_7@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_18_7()
{
  return static CATOption.defaultMode.getter();
}

BOOL OUTLINED_FUNCTION_20_9(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL OUTLINED_FUNCTION_21_6(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_23_6()
{
  return swift_errorRelease(v0);
}

void OUTLINED_FUNCTION_24_5(uint64_t a1)
{
}

void OUTLINED_FUNCTION_25_9()
{
}

uint64_t OUTLINED_FUNCTION_26_6( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return specialized WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)( a1,  a2,  a3,  *(void *)(v14 - 120),  *(void *)(v14 - 112),  *(void *)(v14 - 104),  *(void *)(v14 - 96),  *(void **)(v14 - 88),  a9,  a10,  a11,  a12,  a13,  a14);
}

uint64_t OUTLINED_FUNCTION_27_7()
{
  uint64_t result = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0LL;
  *(void *)(v0 + 24) = 0LL;
  return result;
}

id OUTLINED_FUNCTION_29_6()
{
  return [v1 *(SEL *)(v0 + 72)];
}

uint64_t OUTLINED_FUNCTION_30_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_4()
{
  return swift_errorRetain(v0);
}

uint64_t OUTLINED_FUNCTION_35_7()
{
  return CATWrapperSimple.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_36_6()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

void SiriLinkFlowPlugin.__allocating_init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_35();
  uint64_t v3 = type metadata accessor for DateTimeResolver(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = type metadata accessor for AppInstallInfoProvider();
  uint64_t v25 = OUTLINED_FUNCTION_19(v10, 16LL);
  static Device.current.getter(v29, v25);
  uint64_t v11 = static AceService.currentAsync.getter(v28);
  static OutputPublisherFactory.makeOutputPublisherAsync()(v27, v11);
  static AceService.currentAsync.getter(v26);
  uint64_t v12 = type metadata accessor for LocationProvider();
  uint64_t v13 = OUTLINED_FUNCTION_19(v12, 64LL);
  *(void *)(v13 + 16) = 0x3FA999999999999ALL;
  uint64_t v14 = outlined init with take of AceServiceInvokerAsync(v26, v13 + 24);
  DateTimeResolver.init()(v14);
  uint64_t v15 = type metadata accessor for VoiceShortcutClientWrapper();
  uint64_t v24 = OUTLINED_FUNCTION_19(v15, 16LL);
  type metadata accessor for AutoShortcutCATs(0LL);
  OUTLINED_FUNCTION_35_1();
  uint64_t v23 = OUTLINED_FUNCTION_46_1();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_35_1();
  uint64_t v16 = OUTLINED_FUNCTION_46_1();
  uint64_t v17 = type metadata accessor for LinkMetadataProvider();
  uint64_t v18 = OUTLINED_FUNCTION_19(v17, 24LL);
  *(void *)(v18 + 16) = [objc_allocWithZone(LNMetadataProvider) init];
  uint64_t v19 = type metadata accessor for AutoShortcutProvider();
  uint64_t v20 = OUTLINED_FUNCTION_19(v19, 24LL);
  *(void *)(v20 + 16) = [objc_allocWithZone(LNAutoShortcutsProvider) init];
  id v21 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v22 = (void *)OUTLINED_FUNCTION_19(v1, 448LL);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  specialized SiriLinkFlowPlugin.init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)( v25,  v29,  v28,  v27,  v13,  (uint64_t)v7,  v24,  v23,  v16,  v18,  v20,  (uint64_t)v21,  v22);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  OUTLINED_FUNCTION_24_0();
}

void SiriLinkFlowPlugin.__allocating_init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, void *a10)
{
}

void SiriLinkFlowPlugin.init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, void *a10)
{
}

void SiriLinkFlowPlugin.__allocating_init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void (*a13)(char *, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16 = a1[3];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v16);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v17);
  uint64_t v53 = OUTLINED_FUNCTION_3_13(v18, v46);
  OUTLINED_FUNCTION_9_6();
  uint64_t v54 = (void *)a5;
  __swift_mutable_project_boxed_opaque_existential_1(a5, *(void *)(a5 + 24));
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v19);
  char v51 = OUTLINED_FUNCTION_3_13(v20, v47);
  (*(void (**)(void))(v21 + 16))();
  uint64_t v52 = (void *)a6;
  uint64_t v22 = *(void *)(a6 + 24);
  __swift_mutable_project_boxed_opaque_existential_1(a6, v22);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v23);
  unint64_t v49 = OUTLINED_FUNCTION_3_13(v24, v48);
  OUTLINED_FUNCTION_9_6();
  os_log_type_t v50 = (void *)a7;
  uint64_t v25 = *(void *)(a7 + 24);
  __swift_mutable_project_boxed_opaque_existential_1(a7, v25);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_35();
  uint64_t v29 = v28 - v27;
  (*(void (**)(uint64_t))(v30 + 16))(v28 - v27);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a9, a9[3]);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_35();
  uint64_t v34 = v33 - v32;
  (*(void (**)(uint64_t))(v35 + 16))(v33 - v32);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a10, a10[3]);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v36);
  OUTLINED_FUNCTION_35();
  uint64_t v39 = v38 - v37;
  (*(void (**)(uint64_t))(v40 + 16))(v38 - v37);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a11, a11[3]);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v41);
  OUTLINED_FUNCTION_35();
  uint64_t v44 = v43 - v42;
  (*(void (**)(uint64_t))(v45 + 16))(v43 - v42);
  a13(v53, a2, a3, a4, v51, v49, v29, a8, v34, v39, v44, a12);
  __swift_destroy_boxed_opaque_existential_1Tm(a11);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  __swift_destroy_boxed_opaque_existential_1Tm(v50);
  __swift_destroy_boxed_opaque_existential_1Tm(v52);
  __swift_destroy_boxed_opaque_existential_1Tm(v54);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  OUTLINED_FUNCTION_24_0();
}

uint64_t SiriLinkFlowPlugin.findFlowForX(parse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowSearchResult?);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_35();
  uint64_t v7 = v6 - v5;
  SiriLinkFlowPlugin.makeFlowFlowSearchResult(parse:)(a1, v6 - v5);
  uint64_t v8 = type metadata accessor for FlowSearchResult(0LL);
  outlined destroy of Result<Output, Error>(v7, &demangling cache variable for type metadata for FlowSearchResult?);
  return static FlowSearchResult.noFlow.getter();
}

uint64_t SiriLinkFlowPlugin.makeFlowFlowSearchResult(parse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v128 = a1;
  uint64_t v131 = a2;
  uint64_t v3 = type metadata accessor for LinkParse(0LL);
  uint64_t v120 = *(void *)(v3 - 8);
  uint64_t v121 = v3;
  __chkstk_darwin(v3);
  Swift::String v119 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for USOParse(0LL);
  uint64_t v123 = *(void *)(v5 - 8);
  uint64_t v124 = v5;
  __chkstk_darwin(v5);
  uint64_t v122 = (uint8_t *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NLIntent(0LL);
  uint64_t v126 = *(void *)(v7 - 8);
  uint64_t v127 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v10 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v12 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = type metadata accessor for Parse(0LL);
  uint64_t v13 = *(void *)(v129 - 8);
  uint64_t v14 = __chkstk_darwin(v129);
  uint64_t v16 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  os_log_type_t v118 = (char *)&v116 - v18;
  __chkstk_darwin(v17);
  uint64_t v130 = (char *)&v116 - v19;
  uint64_t v20 = v2[12];
  __swift_project_boxed_opaque_existential_1(v2 + 9, v20);
  if ((dispatch thunk of DeviceState.isHomePod.getter(v20) & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.voiceCommands);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.info.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = v131;
    if (v25)
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_0, v23, v24, "#SiriLinkFlowPlugin makeFlowFlowSearchResult - handoff per homePod", v27, 2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    uint64_t v28 = type metadata accessor for ShortcutsHandoffFlow(0LL);
    uint64_t v29 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    uint64_t v30 = v29 + OBJC_IVAR____TtC18SiriLinkFlowPlugin20ShortcutsHandoffFlow_state;
    uint64_t v31 = type metadata accessor for Input(0LL);
    __swift_storeEnumTagSinglePayload(v30, 1LL, 2LL, v31);
    uint64_t v133 = v29;
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type ShortcutsHandoffFlow and conformance ShortcutsHandoffFlow,  255LL,  type metadata accessor for ShortcutsHandoffFlow,  (uint64_t)&protocol conformance descriptor for ShortcutsHandoffFlow);
    uint64_t v33 = Flow.eraseToAnyFlow()(v28, v32);
    swift_release();
    static FlowSearchResult.flow(_:)(v33);
    swift_release();
    uint64_t v34 = type metadata accessor for FlowSearchResult(0LL);
    return __swift_storeEnumTagSinglePayload(v26, 0LL, 1LL, v34);
  }

  uint64_t v36 = v2[7];
  uint64_t v37 = v2[8];
  __swift_project_boxed_opaque_existential_1(v2 + 4, v36);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37) & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    uint64_t v117 = __swift_project_value_buffer(v38, (uint64_t)static Logger.voiceCommands);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v117);
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = v129;
    if (v41)
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_0, v39, v40, "#SiriLinkFlowPlugin has Shortcuts app installed", v43, 2u);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v45 = v130;
    uint64_t v46 = v128;
    v44(v130, v128, v42);
    int v47 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v45, v42);
    if (v47 == enum case for Parse.NLv3IntentOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v13 + 96))(v45, v42);
      uint64_t v49 = v126;
      uint64_t v48 = v127;
      (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v9, v45, v127);
      uint64_t v50 = SiriLinkFlowPlugin.makeFlowFor(nlv3Intent:)((uint64_t)v9);
      if (v50)
      {
        uint64_t v51 = v131;
        static FlowSearchResult.flow(_:)(v50);
        uint64_t v52 = type metadata accessor for FlowSearchResult(0LL);
        __swift_storeEnumTagSinglePayload(v51, 0LL, 1LL, v52);
        swift_release();
      }

      else
      {
        uint64_t v82 = type metadata accessor for FlowSearchResult(0LL);
        __swift_storeEnumTagSinglePayload(v131, 1LL, 1LL, v82);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v9, v48);
    }

    if (v47 != enum case for Parse.NLv3IntentPlusServerConversion(_:))
    {
      if (v47 == enum case for Parse.directInvocation(_:))
      {
        (*(void (**)(char *, uint64_t))(v13 + 96))(v45, v42);
        uint64_t v78 = v125;
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v45, v125);
        uint64_t v79 = SiriLinkFlowPlugin.makeFlowFor(directInvocation:)((uint64_t)v12);
        if (v79)
        {
          uint64_t v80 = v131;
          static FlowSearchResult.flow(_:)(v79);
          uint64_t v81 = type metadata accessor for FlowSearchResult(0LL);
          __swift_storeEnumTagSinglePayload(v80, 0LL, 1LL, v81);
          swift_release();
        }

        else
        {
          uint64_t v103 = type metadata accessor for FlowSearchResult(0LL);
          __swift_storeEnumTagSinglePayload(v131, 1LL, 1LL, v103);
        }

        uint64_t v86 = *(uint64_t (**)(uint8_t *, uint64_t))(v10 + 8);
        uint64_t v87 = (uint8_t *)v12;
        uint64_t v102 = v78;
      }

      else
      {
        if (v47 == enum case for Parse.uso(_:))
        {
          (*(void (**)(char *, uint64_t))(v13 + 96))(v45, v42);
          uint64_t v84 = v122;
          uint64_t v83 = v123;
          uint64_t v85 = v124;
          (*(void (**)(uint8_t *, char *, uint64_t))(v123 + 32))(v122, v45, v124);
          SiriLinkFlowPlugin.makeFlowFor(usoParse:)(v84, v131);
          uint64_t v86 = *(uint64_t (**)(uint8_t *, uint64_t))(v83 + 8);
          uint64_t v87 = v84;
        }

        else
        {
          if (v47 != enum case for Parse.link(_:))
          {
            char v104 = v118;
            uint64_t v105 = ((uint64_t (*)(char *, uint64_t, uint64_t))v44)(v118, v46, v42);
            os_log_type_t v106 = (os_log_s *)Logger.logObject.getter(v105);
            os_log_type_t v107 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v106, v107))
            {
              uint64_t v108 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v128 = swift_slowAlloc(32LL, -1LL);
              uint64_t v133 = v128;
              *(_DWORD *)uint64_t v108 = 136315138;
              v44(v16, (uint64_t)v104, v129);
              uint64_t v109 = String.init<A>(describing:)(v16, v129);
              unint64_t v111 = v110;
              uint64_t v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, &v133);
              uint64_t v45 = v130;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v108 + 4);
              swift_bridgeObjectRelease(v111);
              uint64_t v112 = *(void (**)(char *, uint64_t))(v13 + 8);
              v112(v104, v129);
              _os_log_impl(&dword_0, v106, v107, "Unhandled Parse type: %s", v108, 0xCu);
              uint64_t v113 = v128;
              swift_arrayDestroy(v128, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v113, -1LL, -1LL);
              uint64_t v114 = v108;
              uint64_t v42 = v129;
              swift_slowDealloc(v114, -1LL, -1LL);
            }

            else
            {
              uint64_t v112 = *(void (**)(char *, uint64_t))(v13 + 8);
              v112(v104, v42);
            }

            uint64_t v115 = type metadata accessor for FlowSearchResult(0LL);
            __swift_storeEnumTagSinglePayload(v131, 1LL, 1LL, v115);
            return ((uint64_t (*)(char *, uint64_t))v112)(v45, v42);
          }

          (*(void (**)(char *, uint64_t))(v13 + 96))(v45, v42);
          uint64_t v99 = v119;
          uint64_t v98 = v120;
          uint64_t v85 = v121;
          uint64_t v100 = (*(uint64_t (**)(char *, char *, uint64_t))(v120 + 32))(v119, v45, v121);
          unint64_t v101 = v122;
          LinkParse.usoParse.getter(v100);
          SiriLinkFlowPlugin.makeFlowFor(usoParse:)(v101, v131);
          (*(void (**)(uint8_t *, uint64_t))(v123 + 8))(v101, v124);
          uint64_t v86 = *(uint64_t (**)(uint8_t *, uint64_t))(v98 + 8);
          uint64_t v87 = (uint8_t *)v99;
        }

        uint64_t v102 = v85;
      }

      return v86(v87, v102);
    }

    (*(void (**)(char *, uint64_t))(v13 + 96))(v45, v42);
    unint64_t v62 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    uint64_t v63 = objc_opt_self(&OBJC_CLASS___INListShortcutsIntent);
    uint64_t v64 = swift_dynamicCastObjCClass(v62, v63);
    id v65 = v62;
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.error.getter();
    BOOL v68 = os_log_type_enabled(v66, v67);
    if (v64)
    {
      if (v68)
      {
        id v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v70 = swift_slowAlloc(32LL, -1LL);
        uint64_t v129 = v61;
        uint64_t v71 = v70;
        uint64_t v133 = v70;
        *(_DWORD *)id v69 = 136315138;
        id v72 = [v65 debugDescription];
        uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v75 = v74;

        uint64_t v45 = v130;
        uint64_t v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v75, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v69 + 4);

        swift_bridgeObjectRelease(v75);
        os_log_type_t v76 = v67;
        uint64_t v77 = "INListShortcutsIntent is deprecated: %s";
LABEL_33:
        _os_log_impl(&dword_0, v66, v76, v77, v69, 0xCu);
        swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1LL, -1LL);
        swift_slowDealloc(v69, -1LL, -1LL);

        swift_release();
LABEL_35:
        uint64_t v94 = v131;
        uint64_t v96 = v126;
        uint64_t v95 = v127;
        uint64_t v97 = type metadata accessor for FlowSearchResult(0LL);
        __swift_storeEnumTagSinglePayload(v94, 1LL, 1LL, v97);
        return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v45, v95);
      }
    }

    else if (v68)
    {
      id v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v88 = swift_slowAlloc(32LL, -1LL);
      uint64_t v129 = v61;
      uint64_t v71 = v88;
      uint64_t v133 = v88;
      *(_DWORD *)id v69 = 136315138;
      id v89 = [v65 debugDescription];
      uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v92 = v91;

      uint64_t v93 = v90;
      uint64_t v45 = v130;
      uint64_t v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v92, &v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v69 + 4);

      swift_bridgeObjectRelease(v92);
      os_log_type_t v76 = v67;
      uint64_t v77 = "Support for intent not yet implemented: %s";
      goto LABEL_33;
    }

    swift_release();
    goto LABEL_35;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v53 = type metadata accessor for Logger(0LL);
  uint64_t v54 = __swift_project_value_buffer(v53, (uint64_t)static Logger.voiceCommands);
  uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
  os_log_type_t v56 = static os_log_type_t.error.getter();
  BOOL v57 = os_log_type_enabled(v55, v56);
  uint64_t v58 = v131;
  if (v57)
  {
    id v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v59 = 0;
    _os_log_impl(&dword_0, v55, v56, "User does not have Shortcuts app installed", v59, 2u);
    swift_slowDealloc(v59, -1LL, -1LL);
  }

  uint64_t v60 = type metadata accessor for FlowSearchResult(0LL);
  return __swift_storeEnumTagSinglePayload(v58, 1LL, 1LL, v60);
}

uint64_t SiriLinkFlowPlugin.makeFlowFor(directInvocation:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)type metadata accessor for Parse.DirectInvocation(0LL);
  v157 = (uint64_t (**)(char *, uint64_t, char *))*((void *)v4 - 1);
  uint64_t v5 = __chkstk_darwin(v4);
  v156 = (uint64_t *)((char *)&v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v148 - v7;
  uint64_t v9 = type metadata accessor for AutoShortcutInvocation(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  v155 = (char *)&v148 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v148 - v12);
  uint64_t v14 = type metadata accessor for CATOption(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v148 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = Parse.DirectInvocation.identifier.getter(v15);
  uint64_t v20 = v19;
  if (v18 == 0xD00000000000003BLL && v19 == 0x80000000001937F0LL)
  {
    uint64_t v21 = swift_bridgeObjectRelease(0x80000000001937F0LL);
  }

  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, 0xD00000000000003BLL, 0x80000000001937F0LL, 0LL);
    uint64_t v21 = swift_bridgeObjectRelease(v20);
    if ((v22 & 1) == 0) {
      goto LABEL_11;
    }
  }

  uint64_t v21 = Parse.DirectInvocation.userData.getter(v21);
  if (v21)
  {
    uint64_t v23 = v21;
    static ShortcutDoneButtonConverter.toShortcutDoneButton(userData:)(v21, v175);
    swift_bridgeObjectRelease(v23);
    outlined init with take of SiriWorkflowRunnerInput?( (uint64_t)v175,  (uint64_t)&v186,  &demangling cache variable for type metadata for ShortcutDoneButton?);
    os_log_type_t v24 = v187;
    if (v187)
    {
      BOOL v25 = (char *)*((void *)&v186 + 1);
      uint64_t v26 = v188;
      if (*((void *)&v186 + 1))
      {
        v155 = v189;
        v156 = (uint64_t *)v188;
        v157 = (uint64_t (**)(char *, uint64_t, char *))v187;
        __int128 v190 = v186;
        __int128 v191 = 0u;
        __int128 v192 = 0u;
        __int128 v193 = 0u;
        char v194 = 0;
        uint64_t v184 = 0LL;
        memset(v183, 0, sizeof(v183));
        outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 14), (uint64_t)v176);
        outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 9), (uint64_t)&v172);
        outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 19), (uint64_t)v171);
        outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 24), (uint64_t)v168);
        outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 29), (uint64_t)v165);
        uint64_t v27 = one-time initialization token for shared;
        swift_bridgeObjectRetain(v25);
        v154 = v25;
        if (v27 != -1) {
          swift_once(&one-time initialization token for shared, one-time initialization function for shared);
        }
        uint64_t v28 = static WFDialogState.shared;
        v153 = (uint64_t *)static WFDialogState.shared;
        type metadata accessor for RunCustomIntentCATs(0LL);
        uint64_t v29 = swift_retain(v28);
        static CATOption.defaultMode.getter(v29);
        v152 = (uint64_t *)CATWrapper.__allocating_init(options:globals:)(v17, 0LL);
        uint64_t v30 = type metadata accessor for RunVoiceCommandCATs(0LL);
        static CATOption.defaultMode.getter(v30);
        uint64_t v151 = CATWrapper.__allocating_init(options:globals:)(v17, 0LL);
        uint64_t v31 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
        static CATOption.defaultMode.getter(v31);
        uint64_t v150 = CATWrapperSimple.__allocating_init(options:globals:)(v17, 0LL);
        uint64_t v32 = type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
        static CATOption.defaultMode.getter(v32);
        uint64_t v149 = CATWrapper.__allocating_init(options:globals:)(v17, 0LL);
        uint64_t v33 = (objc_class *)type metadata accessor for WorkflowRunnerFlow(0LL);
        id v34 = objc_allocWithZone(v33);
        uint64_t v36 = v169;
        uint64_t v35 = v170;
        uint64_t v37 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v168, v169);
        uint64_t v148 = (uint64_t)&v148;
        __chkstk_darwin(v37);
        uint64_t v39 = (char *)&v148 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v40 + 16))(v39);
        uint64_t v41 = v166;
        uint64_t v42 = v167;
        uint64_t v43 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v165, v166);
        __chkstk_darwin(v43);
        uint64_t v45 = (char *)&v148 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v46 + 16))(v45);
        specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)( (uint64_t)&v190,  (uint64_t)v183,  (uint64_t)v153,  (uint64_t)v176,  (uint64_t)&v172,  (uint64_t)v171,  (uint64_t)v152,  v151,  v150,  v149,  (uint64_t)closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow,  0LL,  (uint64_t)v39,  (uint64_t)v45,  (uint64_t)closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow,  0LL,  (uint64_t)v34,  v41,  v36,  v42,  v35,  v147,  v148,  v149,  v150,  v151,  (uint64_t)v152,  (uint64_t)v153,  v154,  (uint64_t)v155,  (uint64_t)v156,  (uint64_t)v157,  v158);
        uint64_t v48 = v47;
        __swift_destroy_boxed_opaque_existential_1Tm(v165);
        __swift_destroy_boxed_opaque_existential_1Tm(v168);
        *(void *)&v183[0] = v48;
        lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow,  255LL,  type metadata accessor for WorkflowRunnerFlow,  (uint64_t)&protocol conformance descriptor for WorkflowRunnerFlow);
        uint64_t v50 = Flow.eraseToAnyFlow()(v33, v49);

        swift_release();
        swift_bridgeObjectRelease(v154);
        return v50;
      }

      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v117 = type metadata accessor for Logger(0LL);
      uint64_t v118 = __swift_project_value_buffer(v117, (uint64_t)static Logger.voiceCommands);
      uint64_t v108 = (void *)Logger.logObject.getter(v118);
      os_log_type_t v119 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled((os_log_t)v108, v119))
      {

        swift_release();
        return 0LL;
      }

      uint64_t v120 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v120 = 0;
      _os_log_impl(&dword_0, (os_log_t)v108, v119, "Cannot get workflowName from the done button", v120, 2u);
      swift_slowDealloc(v120, -1LL, -1LL);
      swift_release();

LABEL_49:
      return 0LL;
    }
  }

LABEL_11:
  uint64_t v51 = Parse.DirectInvocation.identifier.getter(v21);
  uint64_t v53 = v52;
  if (v51 == 0xD000000000000041LL && v52 == 0x8000000000193830LL)
  {
    uint64_t v54 = swift_bridgeObjectRelease(0x8000000000193830LL);
  }

  else
  {
    char v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, 0xD000000000000041LL, 0x8000000000193830LL, 0LL);
    uint64_t v54 = swift_bridgeObjectRelease(v53);
    if ((v55 & 1) == 0) {
      goto LABEL_17;
    }
  }

  uint64_t v54 = Parse.DirectInvocation.userData.getter(v54);
  if (v54)
  {
    type metadata accessor for InstallVoiceShortcutInvocationData(0LL);
    uint64_t v56 = InstallVoiceShortcutInvocationData.__allocating_init(invocationData:)();
    outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 9), (uint64_t)&v190);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 14), (uint64_t)v183);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 34), (uint64_t)v176);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 19), (uint64_t)&v172);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 24), (uint64_t)v171);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v2 + 29), (uint64_t)v168);
    uint64_t v57 = type metadata accessor for InstallVoiceShortcutFlow();
    swift_allocObject(v57, 272LL, 7LL);
    swift_retain(v56);
    InstallVoiceShortcutFlow.init(invocationData:deviceState:aceService:vcClient:outputPublisher:installShortcutViewFactory:locationProvider:dateTimeResolver:)();
    *(void *)&__int128 v190 = v58;
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type InstallVoiceShortcutFlow and conformance InstallVoiceShortcutFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for InstallVoiceShortcutFlow,  (uint64_t)"a-\a");
    uint64_t v50 = Flow.eraseToAnyFlow()(v57, v59);
    swift_release();
    swift_release();
    return v50;
  }

      uint64_t v6 = 1;
LABEL_14:
      swift_bridgeObjectRelease(v4);
      return (id)(v6 & 1);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

uint64_t SiriLinkFlowPlugin.makeFlowFor(nlv3Intent:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for VoiceCommandsNLIntent(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v9, a1, v10);
  if (one-time initialization token for voiceCommandVerbNode != -1) {
    swift_once( &one-time initialization token for voiceCommandVerbNode,  one-time initialization function for voiceCommandVerbNode);
  }
  uint64_t v11 = static VoiceCommandsNLIntent.voiceCommandVerbNode;
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  255LL,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  IntentNodeTraversable.value<A>(forNode:)(v11, v7, v12);
  uint64_t v13 = v2 + 72;
  if (v26[0] == 3)
  {
    outlined init with copy of AppShortcutInvoking(v13, (uint64_t)v26);
    outlined init with copy of AppShortcutInvoking(v2 + 112, (uint64_t)v25);
    uint64_t v14 = type metadata accessor for ListShortcutsCATs(0LL);
    static CATOption.defaultMode.getter(v14);
    uint64_t v15 = CATWrapper.__allocating_init(options:globals:)(v6, 0LL);
    uint64_t v16 = type metadata accessor for ListShortcutsFlow();
    uint64_t v17 = (uint64_t (*)(uint64_t))type metadata accessor for ListShortcutsFlow;
    swift_allocObject(v16, 112LL, 7LL);
    *(void *)uint64_t v26 = ListShortcutsFlow.init(deviceState:aceServiceInvoker:catWrapper:)(v26, v25, v15);
    uint64_t v18 = (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsFlow and conformance ListShortcutsFlow;
    uint64_t v19 = &protocol conformance descriptor for ListShortcutsFlow;
  }

  else
  {
    outlined init with copy of AppShortcutInvoking(v13, (uint64_t)v26);
    if (one-time initialization token for instance != -1) {
      swift_once(&one-time initialization token for instance, one-time initialization function for instance);
    }
    uint64_t v20 = static VoiceCommandsAppPolicyHandler.instance;
    uint64_t v16 = type metadata accessor for WFRunVoiceShortcutFlow(0LL);
    uint64_t v17 = type metadata accessor for WFRunVoiceShortcutFlow;
    uint64_t v21 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    swift_retain(v20);
    *(void *)uint64_t v26 = specialized WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)(v26, v20, v21);
    uint64_t v18 = (unint64_t *)&lazy protocol witness table cache variable for type WFRunVoiceShortcutFlow and conformance WFRunVoiceShortcutFlow;
    uint64_t v19 = &protocol conformance descriptor for WFRunVoiceShortcutFlow;
  }

  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( v18,  255LL,  v17,  (uint64_t)v19);
  uint64_t v23 = Flow.eraseToAnyFlow()(v16, v22);
  swift_release();
  outlined destroy of AutoShortcutInvocation((uint64_t)v9, type metadata accessor for VoiceCommandsNLIntent);
  return v23;
}

void SiriLinkFlowPlugin.makeFlowFor(usoParse:)(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for USOParse(0LL);
  uint64_t v208 = *(void *)(v4 - 8);
  uint64_t v209 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v182 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v194 = (char *)&v182 - v8;
  uint64_t v9 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v9);
  v183 = (char *)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of Flow.toActingFlow()>>.0);
  uint64_t v188 = *(void *)(v11 - 8);
  uint64_t v189 = v11;
  __chkstk_darwin(v11);
  v187 = (char *)&v182 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of Flow.toActingFlow()>>.0);
  uint64_t v185 = *(void *)(v13 - 8);
  uint64_t v186 = v13;
  __chkstk_darwin(v13);
  uint64_t v184 = (char *)&v182 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VoiceCommandTask?);
  __chkstk_darwin(v15);
  uint64_t v196 = (uint64_t)&v182 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v199 = type metadata accessor for VoiceCommandTask(0LL);
  uint64_t v17 = __chkstk_darwin(v199);
  uint64_t v191 = (uint64_t)&v182 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v193 = (uint64_t)&v182 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoShortcutInvocation?);
  __chkstk_darwin(v20);
  uint64_t v202 = (uint64_t)&v182 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v201 = type metadata accessor for AutoShortcutInvocation(0LL);
  uint64_t v22 = __chkstk_darwin(v201);
  uint64_t v190 = (uint64_t)&v182 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v192 = (uint64_t)&v182 - v24;
  uint64_t v25 = type metadata accessor for Siri_Nlu_External_UserParse(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v182 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v195 = (uint64_t)&v182 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v30);
  v198 = (char *)&v182 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v197 = (uint64_t)&v182 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v182 - v37;
  __chkstk_darwin(v36);
  uint64_t v203 = (uint64_t)&v182 - v39;
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v40 = __chkstk_darwin(v205);
  v204 = (char *)&v182 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v182 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  int v47 = (char *)&v182 - v46;
  v207 = a1;
  USOParse.parserIdentifier.getter(v45);
  uint64_t v48 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier(0LL);
  uint64_t v206 = a2;
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?( (uint64_t)v47,  (uint64_t)v44,  &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v49 = *(void *)(v48 - 8);
  int v50 = (*(uint64_t (**)(char *, uint64_t))(v49 + 88))(v44, v48);
  if (v50 != enum case for Siri_Nlu_External_Parser.ParserIdentifier.overrides(_:)
    && v50 != enum case for Siri_Nlu_External_Parser.ParserIdentifier.nlv4(_:)
    && v50 != enum case for Siri_Nlu_External_Parser.ParserIdentifier.shortcutsExact(_:)
    && v50 != enum case for Siri_Nlu_External_Parser.ParserIdentifier.ssu(_:))
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v44, v48);
    a2 = v206;
LABEL_15:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v61 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v61, (uint64_t)static Logger.voiceCommands);
    uint64_t v62 = v208;
    uint64_t v63 = v7;
    uint64_t v64 = v209;
    uint64_t v65 = (*(uint64_t (**)(char *, uint8_t *, uint64_t))(v208 + 16))(v7, v207, v209);
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = swift_slowAlloc(12LL, -1LL);
      uint64_t v206 = a2;
      uint64_t v69 = (uint8_t *)v68;
      uint64_t v70 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__dst[0] = v70;
      *(_DWORD *)uint64_t v69 = 136315138;
      v207 = v69 + 4;
      uint64_t v71 = v204;
      USOParse.parserIdentifier.getter(v70);
      uint64_t v72 = String.init<A>(describing:)(v71, v205);
      unint64_t v74 = v73;
      *(void *)&v215[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, (uint64_t *)__dst);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, (char *)v215 + 8, v207);
      swift_bridgeObjectRelease(v74);
      (*(void (**)(char *, uint64_t))(v208 + 8))(v63, v209);
      _os_log_impl( &dword_0,  v66,  v67,  "SiriLinkFlow plugin received NL parse from a parser it does not support: %s",  v69,  0xCu);
      swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1LL, -1LL);
      uint64_t v75 = v69;
      a2 = v206;
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v64);
    }

    uint64_t v76 = type metadata accessor for FlowSearchResult(0LL);
    __swift_storeEnumTagSinglePayload(a2, 1LL, 1LL, v76);
    outlined destroy of Result<Output, Error>( (uint64_t)v47,  &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    return;
  }

  outlined destroy of Result<Output, Error>( (uint64_t)v47,  &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v55 = USOParse.userParse.getter(v54);
  uint64_t v56 = Siri_Nlu_External_UserParse.userDialogActs.getter(v55);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  uint64_t v57 = v203;
  specialized Collection.first.getter(v56, v203);
  swift_bridgeObjectRelease(v56);
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?( v57,  (uint64_t)v38,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v58 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v38, 1LL, v58) == 1)
  {
    outlined destroy of Result<Output, Error>( (uint64_t)v38,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v59 = v202;
    __swift_storeEnumTagSinglePayload(v202, 1LL, 1LL, v201);
    uint64_t v60 = v206;
LABEL_22:
    outlined destroy of Result<Output, Error>( v59,  &demangling cache variable for type metadata for AutoShortcutInvocation?);
    uint64_t v78 = v200;
    goto LABEL_23;
  }

  USOParse.groupIndex.getter();
  uint64_t v59 = v202;
  Siri_Nlu_External_UserDialogAct.extractAutoShortcutInvocation(groupIndex:)();
  (*(void (**)(char *, uint64_t))(*(void *)(v58 - 8) + 8LL))(v38, v58);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v59, 1LL, v201);
  uint64_t v60 = v206;
  if (EnumTagSinglePayload == 1) {
    goto LABEL_22;
  }
  uint64_t v95 = v192;
  outlined init with take of VoiceCommandTask(v59, v192, type metadata accessor for AutoShortcutInvocation);
  uint64_t v78 = v200;
  uint64_t v96 = v200[12];
  uint64_t v97 = v200[13];
  __swift_project_boxed_opaque_existential_1(v200 + 9, v96);
  if ((dispatch thunk of DeviceState.isMac.getter(v96, v97) & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v141 = type metadata accessor for Logger(0LL);
    uint64_t v142 = __swift_project_value_buffer(v141, (uint64_t)static Logger.voiceCommands);
    v143 = (os_log_s *)Logger.logObject.getter(v142);
    os_log_type_t v144 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v143, v144))
    {
      uint64_t v145 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v145 = 0;
      _os_log_impl(&dword_0, v143, v144, "#SiriLinkFlowPlugin Starting AutoShortcutFlow", v145, 2u);
      swift_slowDealloc(v145, -1LL, -1LL);
    }

    outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 9), (uint64_t)__dst);
    uint64_t v146 = static AceService.currentAsync.getter(v215);
    static OutputPublisherFactory.makeOutputPublisherAsync()(v214, v146);
    uint64_t v147 = type metadata accessor for VoiceShortcutClientWrapper();
    uint64_t v148 = swift_allocObject(v147, 16LL, 7LL);
    uint64_t v149 = type metadata accessor for LinkMetadataProvider();
    uint64_t v150 = swift_allocObject(v149, 24LL, 7LL);
    *(void *)(v150 + 16) = [objc_allocWithZone(LNMetadataProvider) init];
    char v151 = default argument 8 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)();
    uint64_t v152 = type metadata accessor for AutoShortcutFlow();
    uint64_t v153 = swift_allocObject(v152, 274LL, 7LL);
    uint64_t v154 = v190;
    outlined init with copy of AutoShortcutInvocation(v95, v190, type metadata accessor for AutoShortcutInvocation);
    *(void *)&__dst[0] = specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( v154,  v215,  v214,  v148,  v150,  __dst,  0,  (uint64_t)closure #1 in variable initialization expression of static AutoShortcutFlow.defaultRunner,  0LL,  v151 & 1,  v153);
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type AutoShortcutFlow and conformance AutoShortcutFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutFlow,  (uint64_t)&protocol conformance descriptor for AutoShortcutFlow);
    uint64_t v156 = Flow.eraseToAnyFlow()(v152, v155);
    swift_release();
    uint64_t v157 = v206;
    static FlowSearchResult.flow(_:)(v156);
    swift_release();
    outlined destroy of AutoShortcutInvocation(v95, type metadata accessor for AutoShortcutInvocation);
    outlined destroy of Result<Output, Error>( v57,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v112 = type metadata accessor for FlowSearchResult(0LL);
    uint64_t v113 = v157;
    goto LABEL_73;
  }

  outlined destroy of AutoShortcutInvocation(v95, type metadata accessor for AutoShortcutInvocation);
LABEL_23:
  uint64_t v79 = v197;
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?( v57,  v197,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  int v80 = __swift_getEnumTagSinglePayload(v79, 1LL, v58);
  uint64_t v82 = (uint64_t)v198;
  uint64_t v81 = v199;
  if (v80 == 1)
  {
    outlined destroy of Result<Output, Error>( v79,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  }

  else
  {
    uint64_t v83 = Siri_Nlu_External_UserDialogAct.convertToStarterShortcut()();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8LL))(v79, v58);
    if (v83)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v84 = type metadata accessor for Logger(0LL);
      uint64_t v85 = __swift_project_value_buffer(v84, (uint64_t)static Logger.voiceCommands);
      uint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
      os_log_type_t v87 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v86, v87))
      {
        id v88 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v88 = 0;
        _os_log_impl(&dword_0, v86, v87, "#SiriLinkFlowPlugin received starter shortcut", v88, 2u);
        swift_slowDealloc(v88, -1LL, -1LL);
      }

      outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 9), (uint64_t)__dst);
      outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 14), (uint64_t)v215);
      outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 34), (uint64_t)v214);
      outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 19), (uint64_t)v213);
      outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 24), (uint64_t)v212);
      outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 29), (uint64_t)v211);
      uint64_t v89 = type metadata accessor for InstallVoiceShortcutFlow();
      swift_allocObject(v89, 272LL, 7LL);
      swift_retain(v83);
      InstallVoiceShortcutFlow.init(invocationData:deviceState:aceService:vcClient:outputPublisher:installShortcutViewFactory:locationProvider:dateTimeResolver:)();
      *(void *)&__dst[0] = v90;
      lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type InstallVoiceShortcutFlow and conformance InstallVoiceShortcutFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for InstallVoiceShortcutFlow,  (uint64_t)"a-\a");
      uint64_t v92 = Flow.eraseToAnyFlow()(v89, v91);
      swift_release();
      static FlowSearchResult.flow(_:)(v92);
      swift_release();
      swift_release();
LABEL_71:
      uint64_t v140 = v57;
LABEL_72:
      outlined destroy of Result<Output, Error>( v140,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v112 = type metadata accessor for FlowSearchResult(0LL);
      uint64_t v113 = v60;
LABEL_73:
      uint64_t v114 = 0LL;
LABEL_74:
      __swift_storeEnumTagSinglePayload(v113, v114, 1LL, v112);
      return;
    }
  }

  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?( v57,  v82,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  if (__swift_getEnumTagSinglePayload(v82, 1LL, v58) == 1)
  {
    outlined destroy of Result<Output, Error>( v82,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v93 = v196;
    __swift_storeEnumTagSinglePayload(v196, 1LL, 1LL, v81);
LABEL_34:
    outlined destroy of Result<Output, Error>(v93, &demangling cache variable for type metadata for VoiceCommandTask?);
    uint64_t v94 = v195;
    outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?( v57,  v195,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (__swift_getEnumTagSinglePayload(v94, 1LL, v58) == 1)
    {
      outlined destroy of Result<Output, Error>( v94,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      memset(v215, 0, sizeof(v215));
LABEL_41:
      outlined destroy of Result<Output, Error>( (uint64_t)v215,  &demangling cache variable for type metadata for AppShortcutGeneralizedInvocation?);
      goto LABEL_42;
    }

    USOParse.groupIndex.getter();
    Siri_Nlu_External_UserDialogAct.extractGeneralizedAppShortcutInvocation(groupIndex:provider:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8LL))(v94, v58);
    if (!*(void *)&v215[0]) {
      goto LABEL_41;
    }
    memcpy(__dst, v215, sizeof(__dst));
    uint64_t v98 = v78[12];
    uint64_t v99 = v78[13];
    __swift_project_boxed_opaque_existential_1(v78 + 9, v98);
    if ((dispatch thunk of DeviceState.isMac.getter(v98, v99) & 1) != 0)
    {
      outlined destroy of AppShortcutGeneralizedInvocation((uint64_t)__dst);
LABEL_42:
      uint64_t v100 = v209;
      unint64_t v101 = v194;
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v102 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v102, (uint64_t)static Logger.voiceCommands);
      uint64_t v103 = v208;
      uint64_t v104 = (*(uint64_t (**)(char *, uint8_t *, uint64_t))(v208 + 16))(v101, v207, v100);
      uint64_t v105 = (os_log_s *)Logger.logObject.getter(v104);
      os_log_type_t v106 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v105, v106))
      {
        uint64_t v107 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v108 = swift_slowAlloc(32LL, -1LL);
        *(void *)&__dst[0] = v108;
        *(_DWORD *)uint64_t v107 = 136315138;
        uint64_t v109 = USOParse.debugDescription.getter();
        unint64_t v111 = v110;
        *(void *)&v215[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, (uint64_t *)__dst);
        uint64_t v60 = v206;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, (char *)v215 + 8, v107 + 4);
        swift_bridgeObjectRelease(v111);
        (*(void (**)(char *, uint64_t))(v103 + 8))(v101, v209);
        _os_log_impl(&dword_0, v105, v106, "Cannot find flow for the uso parse: %s", v107, 0xCu);
        swift_arrayDestroy(v108, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v108, -1LL, -1LL);
        swift_slowDealloc(v107, -1LL, -1LL);
      }

      else
      {

        (*(void (**)(char *, uint64_t))(v103 + 8))(v101, v100);
      }

      outlined destroy of Result<Output, Error>( v203,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v112 = type metadata accessor for FlowSearchResult(0LL);
      uint64_t v113 = v60;
      uint64_t v114 = 1LL;
      goto LABEL_74;
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v172 = type metadata accessor for Logger(0LL);
    uint64_t v173 = __swift_project_value_buffer(v172, (uint64_t)static Logger.voiceCommands);
    uint64_t v174 = (os_log_s *)Logger.logObject.getter(v173);
    os_log_type_t v175 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v174, v175))
    {
      v176 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v176 = 0;
      _os_log_impl(&dword_0, v174, v175, "#SiriLinkFlowPlugin Starting Generalized AutoShortcutFlow", v176, 2u);
      swift_slowDealloc(v176, -1LL, -1LL);
    }

    outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 14), (uint64_t)v214);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 19), (uint64_t)v213);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 34), (uint64_t)v212);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 45), (uint64_t)v211);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 9), (uint64_t)v210);
    char v177 = default argument 8 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)();
    uint64_t v178 = type metadata accessor for AutoShortcutFlow();
    uint64_t v179 = swift_allocObject(v178, 274LL, 7LL);
    outlined init with copy of AppShortcutGeneralizedInvocation((uint64_t)__dst, (uint64_t)v215);
    *(void *)&v215[0] = specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( v215,  v214,  v213,  v212,  v211,  v210,  0,  (uint64_t)closure #1 in variable initialization expression of static AutoShortcutFlow.defaultRunner,  0LL,  v177 & 1,  v179);
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type AutoShortcutFlow and conformance AutoShortcutFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutFlow,  (uint64_t)&protocol conformance descriptor for AutoShortcutFlow);
    uint64_t v181 = Flow.eraseToAnyFlow()(v178, v180);
    swift_release();
    static FlowSearchResult.flow(_:)(v181);
    swift_release();
    outlined destroy of AppShortcutGeneralizedInvocation((uint64_t)__dst);
    goto LABEL_71;
  }

  uint64_t v93 = v196;
  Siri_Nlu_External_UserDialogAct.convertToVoiceCommandTask()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8LL))(v82, v58);
  uint64_t v115 = v93;
  uint64_t v116 = v193;
  outlined init with take of VoiceCommandTask(v115, v193, type metadata accessor for VoiceCommandTask);
  uint64_t v117 = v116;
  uint64_t v118 = v191;
  outlined init with copy of AutoShortcutInvocation(v117, v191, type metadata accessor for VoiceCommandTask);
  if (swift_getEnumCaseMultiPayload(v118, v81) == 1)
  {
    swift_bridgeObjectRelease(*(void *)(v118 + 16));
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v119 = type metadata accessor for Logger(0LL);
    uint64_t v120 = __swift_project_value_buffer(v119, (uint64_t)static Logger.voiceCommands);
    uint64_t v121 = (os_log_s *)Logger.logObject.getter(v120);
    os_log_type_t v122 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v121, v122))
    {
      id v123 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v123 = 0;
      _os_log_impl(&dword_0, v121, v122, "#SiriLinkFlowPlugin Starting AutoShortcutsSetEnablementFlow", v123, 2u);
      swift_slowDealloc(v123, -1LL, -1LL);
    }

    outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 9), (uint64_t)__dst);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 19), (uint64_t)v215);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 40), (uint64_t)v214);
    uint64_t v124 = v78[39];
    outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 34), (uint64_t)v213);
    outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 50), (uint64_t)v212);
    uint64_t v125 = (void *)v78[55];
    type metadata accessor for AutoShortcutCATsSimple(0LL);
    swift_retain(v124);
    id v126 = v125;
    uint64_t v127 = v183;
    static CATOption.defaultMode.getter(v126);
    uint64_t v128 = CATWrapperSimple.__allocating_init(options:globals:)(v127, 0LL);
    uint64_t v129 = type metadata accessor for AppNameResolver();
    uint64_t v130 = swift_allocObject(v129, 16LL, 7LL);
    uint64_t v131 = type metadata accessor for UserDefaultsWrapper();
    swift_allocObject(v131, 56LL, 7LL);
    uint64_t v132 = UserDefaultsWrapper.init()();
    uint64_t v133 = type metadata accessor for AutoShortcutsSetEnablementFlow();
    uint64_t v134 = swift_allocObject(v133, 353LL, 7LL);
    *(void *)&__dst[0] = specialized AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)( __dst,  v215,  v214,  v124,  v128,  v213,  v212,  v130,  (uint64_t)v126,  (uint64_t)v132,  v134);
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type AutoShortcutsSetEnablementFlow and conformance AutoShortcutsSetEnablementFlow,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutsSetEnablementFlow,  (uint64_t)&protocol conformance descriptor for AutoShortcutsSetEnablementFlow);
    uint64_t v136 = v135;
    uint64_t v137 = v187;
    Flow.toActingFlow()(v133, v135);
    swift_release();
    *(void *)&__dst[0] = v133;
    *((void *)&__dst[0] + 1) = v136;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2( __dst,  &opaque type descriptor for <<opaque return type of Flow.toActingFlow()>>,  1LL);
    uint64_t v139 = v189;
    static FlowSearchResult.flow<A>(_:)(v137, v189, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v188 + 8))(v137, v139);
    outlined destroy of AutoShortcutInvocation(v193, type metadata accessor for VoiceCommandTask);
    uint64_t v140 = v203;
    goto LABEL_72;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v158 = type metadata accessor for Logger(0LL);
  uint64_t v159 = __swift_project_value_buffer(v158, (uint64_t)static Logger.voiceCommands);
  uint64_t v160 = (os_log_s *)Logger.logObject.getter(v159);
  os_log_type_t v161 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v160, v161))
  {
    v162 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v162 = 0;
    _os_log_impl(&dword_0, v160, v161, "#SiriLinkFlowPlugin Starting WFRunVoiceShortcutFlow", v162, 2u);
    swift_slowDealloc(v162, -1LL, -1LL);
  }

  outlined init with copy of AppShortcutInvoking((uint64_t)(v78 + 9), (uint64_t)__dst);
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  uint64_t v163 = static VoiceCommandsAppPolicyHandler.instance;
  uint64_t v164 = type metadata accessor for WFRunVoiceShortcutFlow(0LL);
  uint64_t v165 = swift_allocObject(v164, *(unsigned int *)(v164 + 48), *(unsigned __int16 *)(v164 + 52));
  swift_retain(v163);
  *(void *)&__dst[0] = specialized WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)(__dst, v163, v165);
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow( &lazy protocol witness table cache variable for type WFRunVoiceShortcutFlow and conformance WFRunVoiceShortcutFlow,  255LL,  type metadata accessor for WFRunVoiceShortcutFlow,  (uint64_t)&protocol conformance descriptor for WFRunVoiceShortcutFlow);
  uint64_t v167 = v166;
  v168 = v184;
  Flow.toActingFlow()(v164, v166);
  swift_release();
  *(void *)&__dst[0] = v164;
  *((void *)&__dst[0] + 1) = v167;
  uint64_t v169 = swift_getOpaqueTypeConformance2( __dst,  &opaque type descriptor for <<opaque return type of Flow.toActingFlow()>>,  1LL);
  uint64_t v170 = v186;
  static FlowSearchResult.flow<A>(_:)(v168, v186, v169);
  (*(void (**)(char *, uint64_t))(v185 + 8))(v168, v170);
  outlined destroy of AutoShortcutInvocation(v193, type metadata accessor for VoiceCommandTask);
  outlined destroy of Result<Output, Error>( v57,  &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v171 = type metadata accessor for FlowSearchResult(0LL);
  __swift_storeEnumTagSinglePayload(v60, 0LL, 1LL, v171);
  outlined destroy of AutoShortcutInvocation(v191, type metadata accessor for ShortcutIdentification);
}

uint64_t SiriLinkFlowPlugin.deinit()
{
  return v0;
}

uint64_t SiriLinkFlowPlugin.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 448LL, 7LL);
}

uint64_t protocol witness for FlowPluginExtended.findFlowForX(parse:) in conformance SiriLinkFlowPlugin@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SiriLinkFlowPlugin.findFlowForX(parse:)(a1, a2);
}

void protocol witness for FlowPlugin.init() in conformance SiriLinkFlowPlugin(void *a1@<X8>)
{
  *a1 = v2;
}

void *specialized SiriLinkFlowPlugin.__allocating_init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)( uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, __int128 a21, __int128 a22, __int128 a23, uint64_t a24)
{
  uint64_t v114 = a8;
  uint64_t v99 = a7;
  uint64_t v97 = a6;
  uint64_t v95 = a5;
  uint64_t v112 = a3;
  uint64_t v113 = a4;
  unint64_t v111 = a2;
  __int128 v109 = a21;
  __int128 v108 = a22;
  __int128 v107 = a23;
  uint64_t v106 = a24;
  uint64_t v110 = a12;
  uint64_t v105 = a11;
  uint64_t v98 = a10;
  uint64_t v96 = a9;
  uint64_t v100 = a13;
  uint64_t v120 = a18;
  uint64_t v94 = a15;
  uint64_t v104 = a19;
  uint64_t v103 = *(void *)(a19 - 8);
  uint64_t v24 = __chkstk_darwin(a1);
  uint64_t v102 = (char *)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = *(void *)(v26 - 8);
  uint64_t v27 = __chkstk_darwin(v24);
  unint64_t v101 = (char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  os_log_type_t v122 = (char *)&v89 - v30;
  uint64_t v119 = *(void *)(v31 - 8);
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v129 = (uint64_t)&v89 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v117 = (char *)&v89 - v35;
  uint64_t v36 = *(void *)(a17 - 8);
  uint64_t v89 = a17;
  uint64_t v37 = v36;
  uint64_t v121 = v36;
  uint64_t v38 = __chkstk_darwin(v34);
  uint64_t v124 = (uint64_t)&v89 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v42 = (char *)&v89 - v41;
  uint64_t v43 = *(void *)(a20 - 8);
  uint64_t v115 = a20;
  uint64_t v125 = v43;
  uint64_t v44 = __chkstk_darwin(v40);
  uint64_t v131 = (uint64_t)&v89 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v89 - v47;
  uint64_t v116 = a16;
  uint64_t v128 = *(void *)(a16 - 8);
  uint64_t v49 = v128;
  uint64_t v50 = __chkstk_darwin(v46);
  uint64_t v127 = (uint64_t)&v89 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v54 = (char *)&v89 - v53;
  uint64_t v118 = v55;
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v57 = __chkstk_darwin(v52);
  uint64_t v123 = (uint64_t)&v89 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v57);
  uint64_t v130 = (char *)&v89 - v59;
  uint64_t v60 = *(void (**)(void))(v56 + 32);
  uint64_t v93 = v56;
  v60();
  uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 32);
  uint64_t v92 = v54;
  v61(v54, v95, a16);
  uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 32);
  uint64_t v63 = v48;
  uint64_t v91 = v48;
  v62(v48, v97, a20);
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
  uint64_t v65 = v42;
  uint64_t v90 = v42;
  v64(v42, v99, a17);
  uint64_t v66 = v119;
  uint64_t v67 = v120;
  uint64_t v68 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v119 + 32))(v117, v96, v120);
  uint64_t v69 = v126;
  uint64_t v70 = v122;
  uint64_t v71 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v122, v98, v94);
  uint64_t v100 = (void *)swift_allocObject(v100, 448LL, 7LL);
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 16))(v123, v130, v118);
  (*(void (**)(uint64_t, char *, uint64_t))(v128 + 16))(v127, v54, v116);
  uint64_t v72 = v63;
  uint64_t v73 = v115;
  (*(void (**)(uint64_t, char *, uint64_t))(v125 + 16))(v131, v72, v115);
  uint64_t v74 = v89;
  (*(void (**)(uint64_t, char *, uint64_t))(v121 + 16))(v124, v65, v89);
  uint64_t v75 = *(void (**)(uint64_t, char *, uint64_t))(v66 + 16);
  uint64_t v76 = v67;
  v75(v129, v68, v67);
  uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
  uint64_t v78 = (uint64_t)v101;
  uint64_t v79 = v71;
  v77(v101, v70, v71);
  uint64_t v80 = v103;
  uint64_t v81 = (uint64_t)v102;
  uint64_t v82 = v105;
  uint64_t v83 = v104;
  (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v102, v105, v104);
  uint64_t v88 = v76;
  uint64_t v84 = v116;
  uint64_t v85 = v118;
  uint64_t v86 = specialized SiriLinkFlowPlugin.init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)( v123,  v111,  v112,  v113,  v127,  v131,  v124,  v114,  v129,  v78,  v81,  v110,  v100,  v118,  v79,  v116,  v74,  v88,  v83,  v73,  v109,  *((uint64_t *)&v109 + 1),  v108,  *((uint64_t *)&v108 + 1),  v107,  *((uint64_t *)&v107 + 1),  v106);
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v82, v83);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v122, v79);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v117, v120);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v90, v74);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v91, v115);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v92, v84);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v130, v85);
  return v86;
}

void *specialized SiriLinkFlowPlugin.init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)( uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  a13[7] = type metadata accessor for AppInstallInfoProvider();
  a13[8] = &protocol witness table for AppInstallInfoProvider;
  a13[4] = a1;
  a13[27] = type metadata accessor for LocationProvider();
  a13[28] = &protocol witness table for LocationProvider;
  a13[24] = a5;
  uint64_t v19 = type metadata accessor for DateTimeResolver(0LL);
  a13[32] = v19;
  a13[33] = &protocol witness table for DateTimeResolver;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a13 + 29);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32LL))( boxed_opaque_existential_1,  a6,  v19);
  a13[37] = type metadata accessor for VoiceShortcutClientWrapper();
  a13[38] = &protocol witness table for VoiceShortcutClientWrapper;
  a13[34] = a7;
  a13[43] = type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  a13[44] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  a13[40] = a9;
  a13[48] = type metadata accessor for LinkMetadataProvider();
  a13[49] = &protocol witness table for LinkMetadataProvider;
  a13[45] = a10;
  a13[53] = type metadata accessor for AutoShortcutProvider();
  a13[54] = &protocol witness table for AutoShortcutProvider;
  a13[50] = a11;
  a13[2] = 0xD000000000000030LL;
  a13[3] = 0x80000000001920E0LL;
  outlined init with take of AceServiceInvokerAsync(a2, (uint64_t)(a13 + 9));
  outlined init with take of AceServiceInvokerAsync(a3, (uint64_t)(a13 + 14));
  outlined init with take of AceServiceInvokerAsync(a4, (uint64_t)(a13 + 19));
  a13[39] = a8;
  a13[55] = a12;
  return a13;
}

void *specialized SiriLinkFlowPlugin.init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)( uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  a13[7] = a14;
  a13[8] = a21;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a13 + 4);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32LL))( boxed_opaque_existential_1,  a1,  a14);
  a13[27] = a16;
  a13[28] = a23;
  uint64_t v29 = __swift_allocate_boxed_opaque_existential_1(a13 + 24);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a16 - 8) + 32LL))(v29, a5, a16);
  a13[32] = a20;
  a13[33] = a27;
  uint64_t v30 = __swift_allocate_boxed_opaque_existential_1(a13 + 29);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a20 - 8) + 32LL))(v30, a6, a20);
  a13[37] = a17;
  a13[38] = a24;
  uint64_t v31 = __swift_allocate_boxed_opaque_existential_1(a13 + 34);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a17 - 8) + 32LL))(v31, a7, a17);
  a13[43] = a18;
  a13[44] = a25;
  uint64_t v32 = __swift_allocate_boxed_opaque_existential_1(a13 + 40);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a18 - 8) + 32LL))(v32, a9, a18);
  a13[48] = a15;
  a13[49] = a22;
  uint64_t v33 = __swift_allocate_boxed_opaque_existential_1(a13 + 45);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a15 - 8) + 32LL))(v33, a10, a15);
  a13[53] = a19;
  a13[54] = a26;
  uint64_t v34 = __swift_allocate_boxed_opaque_existential_1(a13 + 50);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a19 - 8) + 32LL))(v34, a11, a19);
  a13[2] = 0xD000000000000030LL;
  a13[3] = 0x80000000001920E0LL;
  outlined init with take of AceServiceInvokerAsync(a2, (uint64_t)(a13 + 9));
  outlined init with take of AceServiceInvokerAsync(a3, (uint64_t)(a13 + 14));
  outlined init with take of AceServiceInvokerAsync(a4, (uint64_t)(a13 + 19));
  a13[39] = a8;
  a13[55] = a12;
  return a13;
}

void base witness table accessor for FlowPlugin in SiriLinkFlowPlugin(uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata accessor for SiriLinkFlowPlugin()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin18SiriLinkFlowPlugin);
}

void *outlined init with take of SiriWorkflowRunnerInput(const void *a1, void *a2)
{
  return a2;
}

uint64_t outlined release of SiriWorkflowRunnerInput?(uint64_t a1)
{
  return a1;
}

void *outlined consume of SiriWorkflowRunnerInput?( void *result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return outlined consume of SiriWorkflowRunnerInput(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

void *outlined consume of SiriWorkflowRunnerInput( void *result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, char a9)
{
  uint64_t v9 = (uint64_t)a8;
  uint64_t v13 = a6;
  switch(a9)
  {
    case 0:
      goto LABEL_5;
    case 1:
      goto LABEL_3;
    case 2:
      a5 = a7;
      uint64_t v13 = a8;
      uint64_t v9 = (uint64_t)a6;
LABEL_3:
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a4);

      uint64_t result = v13;
      a3 = v9;
      goto LABEL_4;
    case 3:
LABEL_4:

      a2 = a3;
LABEL_5:
      uint64_t result = (void *)swift_bridgeObjectRelease(a2);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( const void *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  *(void *)(a11 + 40) = &type metadata for AppShortcutGeneralizedInvocation;
  *(void *)(a11 + 48) = &protocol witness table for AppShortcutGeneralizedInvocation;
  uint64_t v18 = swift_allocObject(&unk_1F4218, 112LL, 7LL);
  *(void *)(a11 + 16) = v18;
  memcpy((void *)(v18 + 16), a1, 0x60uLL);
  outlined init with take of AceServiceInvokerAsync(a2, a11 + 56);
  outlined init with take of AceServiceInvokerAsync(a3, a11 + 136);
  outlined init with take of AceServiceInvokerAsync(a4, a11 + 176);
  outlined init with take of AceServiceInvokerAsync(a5, a11 + 216);
  outlined init with take of AceServiceInvokerAsync(a6, a11 + 96);
  *(_BYTE *)(a11 + 273) = a7;
  *(void *)(a11 + 256) = a8;
  *(void *)(a11 + 264) = a9;
  *(_BYTE *)(a11 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a10;
  return a11;
}

uint64_t specialized WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for VoiceCommandsAppPolicyHandler();
  uint64_t v34 = &protocol witness table for VoiceCommandsAppPolicyHandler;
  *(void *)&__int128 v32 = a2;
  uint64_t v9 = a3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
  uint64_t v10 = type metadata accessor for WFRunVoiceShortcutFlow.State(0LL);
  swift_storeEnumTagMultiPayload(v9, v10, 3LL);
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, a3 + 32);
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, (uint64_t)v31);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v11 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs(0LL);
  uint64_t v12 = swift_retain(v11);
  static CATOption.defaultMode.getter(v12);
  uint64_t v30 = CATWrapper.__allocating_init(options:globals:)(v8, 0LL);
  uint64_t v13 = type metadata accessor for WorkflowRunnerCATsSimple(0LL);
  static CATOption.defaultMode.getter(v13);
  uint64_t v14 = CATWrapperSimple.__allocating_init(options:globals:)(v8, 0LL);
  uint64_t v15 = type metadata accessor for RunCustomIntentCATs(0LL);
  static CATOption.defaultMode.getter(v15);
  uint64_t v16 = CATWrapper.__allocating_init(options:globals:)(v8, 0LL);
  uint64_t v17 = type metadata accessor for RunCustomIntentCATsSimple(0LL);
  static CATOption.defaultMode.getter(v17);
  uint64_t v18 = CATWrapperSimple.__allocating_init(options:globals:)(v8, 0LL);
  uint64_t v19 = type metadata accessor for RunVoiceCommandCATs(0LL);
  static CATOption.defaultMode.getter(v19);
  uint64_t v20 = CATWrapper.__allocating_init(options:globals:)(v8, 0LL);
  uint64_t v21 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  static CATOption.defaultMode.getter(v21);
  uint64_t v22 = CATWrapperSimple.__allocating_init(options:globals:)(v8, 0LL);
  uint64_t v23 = type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
  static CATOption.defaultMode.getter(v23);
  uint64_t v24 = CATWrapper.__allocating_init(options:globals:)(v8, 0LL);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  uint64_t v25 = type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject(v25, 120LL, 7LL);
  WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( (uint64_t)v31,  v11,  v30,  v14,  v16,  v18,  v20,  v22,  v24);
  *(void *)(a3 + 16) = v26;
  uint64_t v27 = type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a3 + 24) = swift_allocObject(v27, 16LL, 7LL);
  outlined init with take of AceServiceInvokerAsync(&v32, a3 + 72);
  return a3;
}

uint64_t specialized AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)( void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v51 = a7;
  uint64_t v50 = a6;
  uint64_t v49 = a2;
  uint64_t v52 = a9;
  uint64_t v17 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v61 = type metadata accessor for AppNameResolver();
  uint64_t v62 = &protocol witness table for AppNameResolver;
  *(void *)&__int128 v60 = a8;
  uint64_t v58 = type metadata accessor for UserDefaultsWrapper();
  uint64_t v59 = &protocol witness table for UserDefaultsWrapper;
  *(void *)&__int128 v57 = a10;
  uint64_t v20 = type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a11 + 280) = swift_allocObject(v20, 16LL, 7LL);
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, a11 + 16);
  outlined init with copy of AppShortcutInvoking((uint64_t)a2, a11 + 56);
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, (uint64_t)v56);
  outlined init with copy of AppShortcutInvoking((uint64_t)a3, (uint64_t)v53);
  uint64_t v21 = type metadata accessor for AutoShortcutDialogTemplating();
  uint64_t v22 = (void *)swift_allocObject(v21, 112LL, 7LL);
  uint64_t v23 = v54;
  uint64_t v24 = v55;
  uint64_t v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v53, v54);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v28 + 16))(v27);
  uint64_t v29 = specialized AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)( v56,  a4,  a5,  (uint64_t)v27,  v22,  v23,  v24);
  swift_retain(a4);
  swift_retain(a5);
  __swift_destroy_boxed_opaque_existential_1Tm(v53);
  *(void *)(a11 + 96) = v29;
  outlined init with copy of AppShortcutInvoking((uint64_t)a1, (uint64_t)v56);
  outlined init with copy of AppShortcutInvoking((uint64_t)a3, (uint64_t)v53);
  uint64_t v30 = type metadata accessor for RunLinkActionCATs(0LL);
  static CATOption.defaultMode.getter(v30);
  uint64_t v31 = CATWrapper.__allocating_init(options:globals:)(v19, 0LL);
  uint64_t v32 = type metadata accessor for RunLinkActionCATsSimple(0LL);
  static CATOption.defaultMode.getter(v32);
  uint64_t v33 = CATWrapperSimple.__allocating_init(options:globals:)(v19, 0LL);
  uint64_t v34 = type metadata accessor for RunVoiceCommandCATs(0LL);
  static CATOption.defaultMode.getter(v34);
  uint64_t v35 = CATWrapper.__allocating_init(options:globals:)(v19, 0LL);
  uint64_t v36 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  static CATOption.defaultMode.getter(v36);
  uint64_t v37 = CATWrapperSimple.__allocating_init(options:globals:)(v19, 0LL);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(v49);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  uint64_t v38 = type metadata accessor for LinkActionDialogTemplating();
  uint64_t v39 = (void *)swift_allocObject(v38, 128LL, 7LL);
  uint64_t v40 = v54;
  uint64_t v41 = v55;
  uint64_t v42 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v53, v54);
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v48 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v45 + 16))(v44);
  uint64_t v46 = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( v56,  v31,  v33,  v35,  v37,  (uint64_t)v44,  v39,  v40,  v41);
  __swift_destroy_boxed_opaque_existential_1Tm(v53);
  *(void *)(a11 + 104) = v46;
  outlined init with take of AceServiceInvokerAsync(v50, a11 + 112);
  outlined init with take of AceServiceInvokerAsync(v51, a11 + 152);
  outlined init with take of AceServiceInvokerAsync(&v60, a11 + 192);
  *(void *)(a11 + 23outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v52;
  outlined init with take of AceServiceInvokerAsync(&v57, a11 + 240);
  *(_OWORD *)(a11 + 288) = 0u;
  *(_OWORD *)(a11 + 304) = 0u;
  *(_OWORD *)(a11 + 320) = 0u;
  *(_OWORD *)(a11 + 336) = 0u;
  *(_BYTE *)(a11 + 35outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0x80;
  return a11;
}

uint64_t specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)( uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, __int128 *a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v25 = type metadata accessor for VoiceShortcutClientWrapper();
  uint64_t v26 = &protocol witness table for VoiceShortcutClientWrapper;
  *(void *)&__int128 v24 = a4;
  uint64_t v22 = type metadata accessor for LinkMetadataProvider();
  uint64_t v23 = &protocol witness table for LinkMetadataProvider;
  *(void *)&__int128 v21 = a5;
  *(void *)(a11 + 40) = type metadata accessor for AutoShortcutInvocation(0LL);
  *(void *)(a11 + 48) = &protocol witness table for AutoShortcutInvocation;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(a11 + 16));
  outlined init with take of VoiceCommandTask( a1,  (uint64_t)boxed_opaque_existential_1,  type metadata accessor for AutoShortcutInvocation);
  outlined init with take of AceServiceInvokerAsync(a2, a11 + 56);
  outlined init with take of AceServiceInvokerAsync(a3, a11 + 136);
  outlined init with take of AceServiceInvokerAsync(&v24, a11 + 176);
  outlined init with take of AceServiceInvokerAsync(&v21, a11 + 216);
  outlined init with take of AceServiceInvokerAsync(a6, a11 + 96);
  *(_BYTE *)(a11 + 273) = a7;
  *(void *)(a11 + 256) = a8;
  *(void *)(a11 + 264) = a9;
  *(_BYTE *)(a11 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a10;
  return a11;
}

void outlined init with take of SiriWorkflowRunnerInput?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = OUTLINED_FUNCTION_10_7(a1, a2, a3);
  OUTLINED_FUNCTION_2_12(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  OUTLINED_FUNCTION_1();
}

void outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = OUTLINED_FUNCTION_10_7(a1, a2, a3);
  OUTLINED_FUNCTION_2_12(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  OUTLINED_FUNCTION_1();
}

uint64_t outlined init with copy of AppShortcutGeneralizedInvocation(uint64_t a1, uint64_t a2)
{
  return a2;
}

void outlined init with copy of AutoShortcutInvocation( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = OUTLINED_FUNCTION_11_9(a1, a2, a3);
  OUTLINED_FUNCTION_2_12(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  OUTLINED_FUNCTION_1();
}

void outlined destroy of AutoShortcutInvocation(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  OUTLINED_FUNCTION_13_5(v2);
  OUTLINED_FUNCTION_1();
}

void outlined init with take of VoiceCommandTask(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = OUTLINED_FUNCTION_11_9(a1, a2, a3);
  OUTLINED_FUNCTION_2_12(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  OUTLINED_FUNCTION_1();
}

uint64_t sub_3818C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 72));
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_2_12@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

char *OUTLINED_FUNCTION_3_13@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void OUTLINED_FUNCTION_8_7( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, __n128 a10@<Q0>)
{
}

uint64_t OUTLINED_FUNCTION_9_6()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t OUTLINED_FUNCTION_10_7(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

uint64_t OUTLINED_FUNCTION_11_9(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

uint64_t RunVoiceCommandCATs.confirmSlotValue(device:slotName:slotValue:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 56) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 64) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.confirmSlotValue(device:slotName:slotValue:)()
{
  uint64_t v2 = v1[3];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_19(v3, 176LL);
  void v1[9] = v4;
  uint64_t v5 = OUTLINED_FUNCTION_4_3(v4, (__n128)xmmword_17FDF0);
  if (v2)
  {
    type metadata accessor for SirikitDeviceState(v5);
  }

  else
  {
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_47_7();
  OUTLINED_FUNCTION_27_8(v6);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_30_7(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[7].n128_u64[1] = v0;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_57_3();
  v4[8].n128_u64[0] = 0x756C6156746F6C73LL;
  v4[8].n128_u64[1] = 0xE900000000000065LL;
  OUTLINED_FUNCTION_12_4(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = OUTLINED_FUNCTION_41_5();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[10].n128_u64[1] = v0;
    uint64_t v15 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v15);
  }

  uint64_t v16 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v1[10] = v16;
  OUTLINED_FUNCTION_56_4(v16);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_46_8();
  return OUTLINED_FUNCTION_5_7(v17, v18, v19, v20, v21);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_24_6();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_53_4();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t RunVoiceCommandCATs.disambiguateSlotValue(device:slotName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.disambiguateSlotValue(device:slotName:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  v1[6] = v2;
  OUTLINED_FUNCTION_27_8(v6);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v13 = (void *)OUTLINED_FUNCTION_49_6(v12);
  OUTLINED_FUNCTION_29_7(v13);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_46_8();
  return OUTLINED_FUNCTION_5_7(v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_6_9();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_44_3();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

uint64_t RunVoiceCommandCATs.errorWithCodeCustomError(device:customDialog:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 56) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 64) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.errorWithCodeCustomError(device:customDialog:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v12 = v11[3];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_19(v13, 176LL);
  v11[9] = v14;
  uint64_t v15 = OUTLINED_FUNCTION_4_3(v14, (__n128)xmmword_17FDF0);
  if (v12)
  {
    type metadata accessor for SirikitDeviceState(v15);
  }

  else
  {
    v14[3].n128_u64[1] = 0LL;
    v14[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_47_7();
  v14[4].n128_u64[1] = v16;
  strcpy((char *)&v14[5], "customDialog");
  v14[5].n128_u8[13] = 0;
  v14[5].n128_u16[7] = -5120;
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_30_7(v18);
  if (v19)
  {
    uint64_t v20 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v14[7].n128_u64[1] = v10;
    __int128 v21 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v21);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v22 = OUTLINED_FUNCTION_57_3();
  v14[8].n128_u64[0] = 0xD000000000000010LL;
  v14[8].n128_u64[1] = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v22, v23, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v24 = OUTLINED_FUNCTION_41_5();
  if (v19)
  {
    OUTLINED_FUNCTION_11_4(v24, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v14[10].n128_u64[1] = v10;
    uint64_t v25 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v25);
  }

  uint64_t v26 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v11[10] = v26;
  uint64_t v27 = OUTLINED_FUNCTION_56_4(v26);
  return OUTLINED_FUNCTION_5_7(v27, 0xD000000000000028LL, 0x8000000000190C00LL, (uint64_t)v14, a10);
}

uint64_t RunVoiceCommandCATs.errorWithCodeCustomError(device:customDialog:localizedAppName:)()
{
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_53_4();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

uint64_t RunVoiceCommandCATs.errorWithCodePreflightRequired(localizedAppName:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.errorWithCodePreflightRequired(localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v11 = v10[5];
  uint64_t v12 = v10[3];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_19(v13, 80LL);
  v10[6] = v14;
  *(_OWORD *)(v14 + 16) = xmmword_17E650;
  *(void *)(v14 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0xD000000000000010LL;
  *(void *)(v14 + 40) = 0x8000000000193910LL;
  OUTLINED_FUNCTION_12_4(v12, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_61_1();
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v11, 1LL, v16);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_11_4(EnumTagSinglePayload, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    *(void *)(v14 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v16;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v14 + 48));
    OUTLINED_FUNCTION_34_2((uint64_t)boxed_opaque_existential_1);
  }

  char v19 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v10[7] = v19;
  OUTLINED_FUNCTION_48_6(v19);
  OUTLINED_FUNCTION_35_8();
  return OUTLINED_FUNCTION_5_7(v20, v21, v22, v14, a10);
}

uint64_t RunVoiceCommandCATs.errorWithCodePreflightRequired(localizedAppName:)()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 48));
    OUTLINED_FUNCTION_40_0();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v5);
  }

uint64_t RunVoiceCommandCATs.errorWithCodeUnsupportedOnCarPlay(device:userAssignedDeviceName:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.errorWithCodeUnsupportedOnCarPlay(device:userAssignedDeviceName:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_22_7(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v13 = (void *)OUTLINED_FUNCTION_49_6(v12);
  OUTLINED_FUNCTION_29_7(v13);
  OUTLINED_FUNCTION_16_9();
  return OUTLINED_FUNCTION_5_7(v14, v15, v16, v17, v18);
}

uint64_t RunVoiceCommandCATs.followupNotSupported(device:localizedAppName:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.followupNotSupported(device:localizedAppName:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_22_7(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v13 = (void *)OUTLINED_FUNCTION_49_6(v12);
  OUTLINED_FUNCTION_29_7(v13);
  OUTLINED_FUNCTION_16_9();
  return OUTLINED_FUNCTION_5_7(v14, v15, v16, v17, v18);
}

uint64_t RunVoiceCommandCATs.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 56) = a7;
  *(void *)(v9 + 64) = v8;
  *(_BYTE *)(v9 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = a8;
  *(void *)(v9 + 40) = a5;
  *(void *)(v9 + 48) = a6;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a4;
  *(_BYTE *)(v9 + 128) = a3;
  *(void *)(v9 + 16) = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v9 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = OUTLINED_FUNCTION_20_10(v10);
  *(void *)(v9 + 80) = OUTLINED_FUNCTION_11_0();
  *(void *)(v9 + 88) = OUTLINED_FUNCTION_11_0();
  *(void *)(v9 + 96) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)()
{
  unint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 368LL);
  *(void *)(v0 + 104) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_17FE00);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  uint64_t v5 = *(void *)(v0 + 32);
  unsigned __int8 v6 = *(_BYTE *)(v0 + 128);
  v3[3].n128_u64[0] = v1;
  v3[4].n128_u64[1] = v4;
  v3[5].n128_u64[0] = 0xD000000000000016LL;
  v3[5].n128_u64[1] = 0x8000000000193950LL;
  v3[6].n128_u8[0] = v6;
  v3[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v3[8].n128_u64[0] = 0xD000000000000010LL;
  v3[8].n128_u64[1] = 0x8000000000193910LL;
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v5);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  if (OUTLINED_FUNCTION_38_6() == 1)
  {
    uint64_t v8 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[10].n128_u64[1] = v7;
    uint64_t v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v11 = *(void *)(v0 + 40);
  strcpy((char *)&v3[11], "customResponse");
  v3[11].n128_u8[15] = -18;
  OUTLINED_FUNCTION_12_4(v11, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_38_6();
  if ((_DWORD)v12 == 1)
  {
    OUTLINED_FUNCTION_11_4(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[13].n128_u64[1] = v7;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = *(void *)(v0 + 48);
  strcpy((char *)&v3[14], "intentCategory");
  v3[14].n128_u8[15] = -18;
  OUTLINED_FUNCTION_12_4(v15, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_38_6();
  if ((_DWORD)v16 == 1)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[16].n128_u64[1] = v7;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  OUTLINED_FUNCTION_54_6();
  v3[17].n128_u64[0] = v18;
  v3[17].n128_u64[1] = v19;
  OUTLINED_FUNCTION_12_4(v20, v21, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_38_6();
  if ((_DWORD)v22 == 1)
  {
    OUTLINED_FUNCTION_11_4(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v3[19].n128_u64[1] = v7;
    uint64_t v23 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v23);
  }

  unsigned __int8 v24 = *(_BYTE *)(v0 + 129);
  v3[20].n128_u64[0] = 0xD000000000000018LL;
  v3[20].n128_u64[1] = 0x8000000000193970LL;
  v3[22].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v3[21].n128_u8[0] = v24;
  uint64_t v25 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  *(void *)(v0 + 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v25;
  *uint64_t v25 = v0;
  v25[1] = RunVoiceCommandCATs.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_16_9();
  return OUTLINED_FUNCTION_5_7(v26, v27, v28, v29, v30);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 12Hasher.init(_seed:)(v3, 0LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return swift_task_switch(v4, v5, v6);
  }

  else
  {
    uint64_t v8 = v2[13];
    uint64_t v9 = v2[10];
    uint64_t v10 = v2[9];
    swift_bridgeObjectRelease(v8);
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    uint64_t v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_14(v11);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t RunVoiceCommandCATs.intentHandledResponseDone(device:localizedAppName:intentVerb:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 56) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 64) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.intentHandledResponseDone(device:localizedAppName:intentVerb:)()
{
  uint64_t v2 = v1[3];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_19(v3, 176LL);
  void v1[9] = v4;
  uint64_t v5 = OUTLINED_FUNCTION_4_3(v4, (__n128)xmmword_17FDF0);
  if (v2)
  {
    type metadata accessor for SirikitDeviceState(v5);
  }

  else
  {
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  OUTLINED_FUNCTION_47_7();
  v4[4].n128_u64[1] = v6;
  v4[5].n128_u64[0] = 0xD000000000000010LL;
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_30_7(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[7].n128_u64[1] = v0;
    uint64_t v11 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  OUTLINED_FUNCTION_57_3();
  OUTLINED_FUNCTION_54_6();
  v4[8].n128_u64[0] = v12;
  v4[8].n128_u64[1] = v13;
  OUTLINED_FUNCTION_12_4(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = OUTLINED_FUNCTION_41_5();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    v4[10].n128_u64[1] = v0;
    uint64_t v17 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v17);
  }

  unint64_t v18 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  v1[10] = v18;
  OUTLINED_FUNCTION_56_4(v18);
  OUTLINED_FUNCTION_16_9();
  return OUTLINED_FUNCTION_5_7(v19, v20, v21, v22, v23);
}

uint64_t RunVoiceCommandCATs.openApp(device:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.openApp(device:localizedAppName:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_22_7(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  unint64_t v13 = (void *)OUTLINED_FUNCTION_49_6(v12);
  OUTLINED_FUNCTION_29_7(v13);
  OUTLINED_FUNCTION_16_9();
  return OUTLINED_FUNCTION_5_7(v14, v15, v16, v17, v18);
}

uint64_t RunVoiceCommandCATs.openAppFailed(device:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunVoiceCommandCATs.openAppFailed(device:));
}

uint64_t RunVoiceCommandCATs.openAppFailed(device:)()
{
  unint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 80LL);
  v0[5] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_17E650);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  v3[3].n128_u64[0] = v1;
  v3[4].n128_u64[1] = v4;
  OUTLINED_FUNCTION_5_2();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_59_1();
  v0[6] = v5;
  OUTLINED_FUNCTION_48_6(v5);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_55_4();
  return OUTLINED_FUNCTION_1_3(v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_0_2();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_60_2();
    return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v1 + 8));
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t RunVoiceCommandCATs.openAppFailedCarPlay(device:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunVoiceCommandCATs.openAppFailedCarPlay(device:));
}

uint64_t RunVoiceCommandCATs.openAppFailedCarPlay(device:)()
{
  unint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 80LL);
  v0[5] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_17E650);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  v3[3].n128_u64[0] = v1;
  v3[4].n128_u64[1] = v4;
  OUTLINED_FUNCTION_5_2();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_59_1();
  v0[6] = v5;
  OUTLINED_FUNCTION_48_6(v5);
  OUTLINED_FUNCTION_55_4();
  return OUTLINED_FUNCTION_1_3(v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_0_2();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_60_2();
    return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t RunVoiceCommandCATs.openAppFailedWatch(device:userAssignedDeviceName:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.openAppFailedWatch(device:userAssignedDeviceName:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
  }

  OUTLINED_FUNCTION_22_7(v6);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  unint64_t v13 = (void *)OUTLINED_FUNCTION_49_6(v12);
  OUTLINED_FUNCTION_29_7(v13);
  OUTLINED_FUNCTION_16_9();
  return OUTLINED_FUNCTION_5_7(v14, v15, v16, v17, v18);
}

uint64_t RunVoiceCommandCATs.promptForSlotValue(device:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)RunVoiceCommandCATs.promptForSlotValue(device:));
}

uint64_t RunVoiceCommandCATs.promptForSlotValue(device:)()
{
  unint64_t v1 = v0[3];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_19(v2, 80LL);
  v0[5] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_4_3(v3, (__n128)xmmword_17E650);
  if (v1)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState(v4);
  }

  else
  {
    v3[3].n128_u64[1] = 0LL;
    v3[4].n128_u64[0] = 0LL;
  }

  v3[3].n128_u64[0] = v1;
  v3[4].n128_u64[1] = v4;
  OUTLINED_FUNCTION_5_2();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_59_1();
  v0[6] = v5;
  OUTLINED_FUNCTION_48_6(v5);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_55_4();
  return OUTLINED_FUNCTION_1_3(v6, v7, v8, v9, v10);
}

uint64_t RunVoiceCommandCATs.unsupportedSlotValue(device:slotName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.unsupportedSlotValue(device:slotName:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  v1[6] = v2;
  OUTLINED_FUNCTION_27_8(v6);
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  unint64_t v13 = (void *)OUTLINED_FUNCTION_49_6(v12);
  OUTLINED_FUNCTION_29_7(v13);
  OUTLINED_FUNCTION_46_8();
  return OUTLINED_FUNCTION_5_7(v14, v15, v16, v17, v18);
}

uint64_t RunVoiceCommandCATs.yesAndCancel(device:intentVerb:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 48) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunVoiceCommandCATs.yesAndCancel(device:intentVerb:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_50_7(v4);
  uint64_t v6 = OUTLINED_FUNCTION_4_3(v5, (__n128)xmmword_17E660);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState(v6);
  }

  else
  {
    v1[7] = 0LL;
    v1[8] = 0LL;
  }

  uint64_t v7 = *(void *)(v0 + 32);
  v1[6] = v2;
  void v1[9] = v6;
  v1[10] = 0x6556746E65746E69LL;
  v1[11] = 0xEA00000000006272LL;
  OUTLINED_FUNCTION_15_5(&demangling cache variable for type metadata for SpeakableString?, v7);
  uint64_t v8 = OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_7_5(v8);
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_11_4(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_34_2((uint64_t)v11);
    OUTLINED_FUNCTION_12_8();
  }

  uint64_t v12 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  unint64_t v13 = (void *)OUTLINED_FUNCTION_49_6(v12);
  OUTLINED_FUNCTION_29_7(v13);
  OUTLINED_FUNCTION_35_8();
  OUTLINED_FUNCTION_46_8();
  return OUTLINED_FUNCTION_5_7(v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_6_9();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    OUTLINED_FUNCTION_44_3();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_4(v2);
  }

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t RunVoiceCommandCATs.__allocating_init(templateDir:options:globals:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RunVoiceCommandCATs.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t RunVoiceCommandCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of SpeakableString?( a1,  (uint64_t)v12,  (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  outlined destroy of URL?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t type metadata accessor for RunVoiceCommandCATs(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for RunVoiceCommandCATs;
  if (!type metadata singleton initialization cache for RunVoiceCommandCATs) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RunVoiceCommandCATs);
  }
  return result;
}

uint64_t type metadata completion function for RunVoiceCommandCATs(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for RunVoiceCommandCATs);
}

uint64_t ObjC metadata update function for RunVoiceCommandCATs()
{
  return type metadata accessor for RunVoiceCommandCATs(0LL);
}

uint64_t OUTLINED_FUNCTION_3_14(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_5_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_6_9()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_7_5(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_10_8(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_12_8()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_15_5@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  return outlined init with copy of SpeakableString?(a2, v2, a1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_20_10(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_22_7(uint64_t result)
{
  v2[6] = v1;
  void v2[9] = result;
  v2[10] = v3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_24_6()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 80);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 88) = v0;
  return swift_task_dealloc(v5);
}

void *OUTLINED_FUNCTION_25_10()
{
  *(void *)(v2 + 120) = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_27_8(uint64_t result)
{
  void v1[9] = result;
  v1[10] = 0x656D614E746F6C73LL;
  v1[11] = 0xE800000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_29_7(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_30_7(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_38_6()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

void OUTLINED_FUNCTION_40_6()
{
  *(void *)(v1 + 88) = (v0 - 32) | 0x8000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_41_5()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_44_3()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 56));
}

double OUTLINED_FUNCTION_45_2()
{
  double result = 0.0;
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  return result;
}

  ;
}

void OUTLINED_FUNCTION_47_7()
{
  *(void *)(v1 + 48) = v0;
}

uint64_t OUTLINED_FUNCTION_48_6(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_49_6(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_50_7(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_51_5(uint64_t result, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  __int128 v4[2] = result;
  void v4[3] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_53_4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 72));
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_56_4(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_57_3()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_58_4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_59_1()
{
  return swift_task_alloc(v0);
}

uint64_t OUTLINED_FUNCTION_60_2()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 40));
}

void WorkflowRunnerFlow.__allocating_init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, void *a26, uint64_t a27, uint64_t a28)
{
  uint64_t v67 = v30;
  uint64_t v68 = v31;
  uint64_t v65 = v32;
  uint64_t v66 = v33;
  id v34 = objc_allocWithZone(v28);
  uint64_t v35 = a25[3];
  uint64_t v36 = a25[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a25, v35);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v37);
  uint64_t v39 = OUTLINED_FUNCTION_82(v38, v61);
  OUTLINED_FUNCTION_158((uint64_t)v39, v40, v41);
  uint64_t v42 = a26[3];
  uint64_t v43 = a26[4];
  OUTLINED_FUNCTION_157();
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v44);
  uint64_t v47 = OUTLINED_FUNCTION_50_8(v45, v46, v62);
  OUTLINED_FUNCTION_36_7( v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v29,  a27,  a28,  (uint64_t)v34,  v42,  v35,  v43,  v36,  v60,  v63,  a27,  a24,  a23,  a21,  a22,  v64,  v65,  v66,  v67,  v68);
  __swift_destroy_boxed_opaque_existential_1Tm(a26);
  __swift_destroy_boxed_opaque_existential_1Tm(a25);
  OUTLINED_FUNCTION_24_0();
}

uint64_t (**SLFLocationAccessGuardProvider.makeGuardFlow.unsafeMutableAddressor())()
{
  return &static SLFLocationAccessGuardProvider.makeGuardFlow;
}

void WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, void *a26, uint64_t a27, uint64_t a28)
{
  uint64_t v63 = v28;
  uint64_t v64 = v30;
  uint64_t v68 = v31;
  uint64_t v69 = v32;
  uint64_t v66 = v33;
  uint64_t v67 = v34;
  uint64_t v65 = v35;
  uint64_t v36 = a25[3];
  uint64_t v37 = a25[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a25, v36);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v38);
  uint64_t v40 = OUTLINED_FUNCTION_82(v39, a24);
  v41(v40);
  uint64_t v42 = a26[3];
  uint64_t v43 = a26[4];
  OUTLINED_FUNCTION_157();
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v44);
  uint64_t v47 = OUTLINED_FUNCTION_50_8(v45, v46, v61);
  OUTLINED_FUNCTION_36_7( v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v29,  a27,  a28,  v63,  v42,  v36,  v43,  v37,  v60,  v62,  a23,  a21,  a22,  v63,  v64,  v65,  v66,  v67,  v68,  v69);
  __swift_destroy_boxed_opaque_existential_1Tm(a26);
  __swift_destroy_boxed_opaque_existential_1Tm(a25);
  OUTLINED_FUNCTION_24_0();
}

uint64_t WorkflowRunnerFlow.on(input:)()
{
  uint64_t v58 = v2;
  uint64_t v59 = v3;
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = OUTLINED_FUNCTION_151();
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Parse(0LL);
  uint64_t v53 = *(void *)(v11 - 8);
  uint64_t v54 = v11;
  OUTLINED_FUNCTION_91();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v49 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v48 - v15;
  uint64_t v17 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v51 = *(void *)(v17 - 8);
  uint64_t v52 = v17;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_83();
  uint64_t v50 = v19;
  uint64_t v20 = type metadata accessor for Input(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v24 = OUTLINED_FUNCTION_48();
  uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.voiceCommands);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v55 = v6;
  uint64_t v27 = v26(v23, v6, v20);
  uint64_t v48[4] = v25;
  Logger.logObject.getter(v27);
  os_log_type_t v28 = OUTLINED_FUNCTION_148();
  if (OUTLINED_FUNCTION_41_0(v1))
  {
    uint64_t v29 = OUTLINED_FUNCTION_38(12LL);
    v48[1] = v7;
    uint64_t v30 = (uint8_t *)v29;
    uint64_t v31 = OUTLINED_FUNCTION_38(32LL);
    v48[3] = v4;
    uint64_t v32 = v31;
    v57[0] = v31;
    v48[2] = v10;
    *(_DWORD *)uint64_t v30 = 136315138;
    v48[0] = v30 + 4;
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v20, v33);
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v48[0]);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_120();
    OUTLINED_FUNCTION_31_2(&dword_0, v1, v28, "WorkflowRunnerFlow received input: %s", v30);
    OUTLINED_FUNCTION_30_3(v32, v36, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v32);
    OUTLINED_FUNCTION_1_0((uint64_t)v30);
  }

  else
  {
    OUTLINED_FUNCTION_120();
  }

  Input.parse.getter();
  uint64_t v37 = v53;
  if ((*(unsigned int (**)(char *, uint64_t))(v53 + 88))(v16, v54) != enum case for Parse.directInvocation(_:))
  {
    uint64_t v44 = OUTLINED_FUNCTION_57_4((uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
    goto LABEL_12;
  }

  OUTLINED_FUNCTION_57_4((uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 96));
  char v38 = v50;
  uint64_t v39 = OUTLINED_FUNCTION_50_3();
  uint64_t v41 = v40(v39);
  uint64_t v42 = Parse.DirectInvocation.identifier.getter(v41);
  if (v42 != 0xD00000000000003FLL || v43 != 0x80000000001938D0LL)
  {
    OUTLINED_FUNCTION_167(v42, v43, 0xD00000000000003FLL, 0x80000000001938D0LL);
    OUTLINED_FUNCTION_58_2();
    uint64_t v44 = OUTLINED_FUNCTION_113();
    if ((v38 & 1) != 0) {
      return 1LL;
    }
LABEL_12:
    uint64_t v45 = (uint64_t)v49;
    ((void (*)(uint64_t))Input.parse.getter)(v44);
    char v46 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(v45);
    OUTLINED_FUNCTION_57_4(v45, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
    __asm { BR              X11 }
  }

  swift_bridgeObjectRelease(0x80000000001938D0LL);
  OUTLINED_FUNCTION_113();
  return 1LL;
}

uint64_t WorkflowRunnerFlow.execute()(uint64_t a1)
{
  v2[32] = a1;
  v2[33] = v1;
  uint64_t v3 = OUTLINED_FUNCTION_54_4();
  v2[34] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[35] = v4;
  v2[36] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  v2[37] = v5;
  v2[38] = OUTLINED_FUNCTION_4_0(*(void *)(v5 - 8));
  v2[39] = OUTLINED_FUNCTION_11_0();
  v2[40] = OUTLINED_FUNCTION_11_0();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
  v2[41] = OUTLINED_FUNCTION_4_0(*(void *)(v6 - 8));
  v2[42] = OUTLINED_FUNCTION_11_0();
  v2[43] = OUTLINED_FUNCTION_11_0();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  v2[44] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[45] = v8;
  v2[46] = OUTLINED_FUNCTION_4_0(v8);
  v2[47] = OUTLINED_FUNCTION_11_0();
  uint64_t v9 = OUTLINED_FUNCTION_151();
  v2[48] = v9;
  v2[49] = OUTLINED_FUNCTION_4_0(*(void *)(v9 - 8));
  v2[50] = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *boxed_opaque_existential_1;
  void *v7;
  uint64_t v2 = v1[35];
  uint64_t v3 = v1[34];
  static OutputPublisherFactory.makeOutputPublisherAsync()(v1 + 7, a1);
  uint64_t v4 = v1[10];
  uint64_t v5 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v4);
  v1[5] = v3;
  v1[6] = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v1 + 2);
  OUTLINED_FUNCTION_142( (uint64_t)boxed_opaque_existential_1,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v1[61] = v7;
  *uint64_t v7 = v1;
  v7[1] = WorkflowRunnerFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v1 + 2, v4, v5);
}

uint64_t WorkflowRunnerFlow.execute()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = *(void **)(v14 + 400);
  uint64_t v16 = *(void *)(v14 + 264);
  uint64_t v17 = OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  *(void *)(v14 + 408) = OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  uint64_t v18 = v16 + v17;
  swift_beginAccess(v16 + v17, v14 + 120, 0LL, 0LL);
  outlined init with copy of WorkflowRunnerFlow.State( v18,  (uint64_t)v15,  type metadata accessor for WorkflowRunnerFlow.State);
  switch(OUTLINED_FUNCTION_165())
  {
    case 0u:
      uint64_t v19 = *(void *)(v14 + 376);
      uint64_t v20 = *(void *)(v14 + 344);
      uint64_t v21 = *(void *)(v14 + 296);
      uint64_t v22 = *(void *)(v14 + 264);
      (*(void (**)(uint64_t, void, void))(*(void *)(v14 + 360) + 32LL))( v19,  *(void *)(v14 + 400),  *(void *)(v14 + 352));
      __swift_storeEnumTagSinglePayload(v20, 1LL, 1LL, v21);
      uint64_t v23 = swift_task_alloc(32LL);
      *(void *)(v14 + 416) = v23;
      *(void *)(v23 + 16) = v20;
      *(void *)(v23 + 24) = v19;
      uint64_t v24 = swift_task_alloc(32LL);
      *(void *)(v14 + 424) = v24;
      *(void *)(v24 + 16) = v22;
      *(void *)(v24 + 24) = v20;
      uint64_t v25 = (void *)swift_task_alloc(dword_219E7C);
      *(void *)(v14 + 43outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v25;
      *uint64_t v25 = v14;
      v25[1] = WorkflowRunnerFlow.execute();
      OUTLINED_FUNCTION_24_7();
      return static VoiceCmdsInstrumentations.emitWaitForRequest(type:logMessage:task:updateInfo:)( v26,  v27,  v28,  v29,  v30,  v31,  v32);
    case 8u:
      unint64_t v35 = *(char **)(v14 + 400);
      uint64_t v37 = *(void *)(v14 + 360);
      uint64_t v36 = *(void **)(v14 + 368);
      uint64_t v38 = *(void *)(v14 + 352);
      swift_errorRelease(*(void *)v35);
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
      (*(void (**)(void *, char *, uint64_t))(v37 + 32))(v36, &v35[*(int *)(v39 + 48)], v38);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v40 = OUTLINED_FUNCTION_48();
      *(void *)(v14 + 448) = __swift_project_value_buffer(v40, (uint64_t)static Logger.voiceCommands);
      OUTLINED_FUNCTION_9_5();
      os_log_type_t v41 = OUTLINED_FUNCTION_58();
      if (OUTLINED_FUNCTION_45_0(v41))
      {
        uint64_t v42 = (_WORD *)OUTLINED_FUNCTION_57_1();
        OUTLINED_FUNCTION_26_1(v42);
        OUTLINED_FUNCTION_27_0( &dword_0,  v43,  v44,  "#WorkflowRunnerFlow has handled error, waiting for the finish call from runner client...");
        OUTLINED_FUNCTION_1_0((uint64_t)v35);
      }

      uint64_t v45 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to AsyncStream.Iterator.next() + 1));
      *(void *)(v14 + 456) = v45;
      *uint64_t v45 = v14;
      v45[1] = WorkflowRunnerFlow.execute();
      OUTLINED_FUNCTION_24_7();
      return AsyncStream.Iterator.next()(v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, a12, a13, a14);
    case 9u:
      uint64_t v54 = **(void **)(v14 + 400);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v55 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v55, (uint64_t)static Logger.voiceCommands);
      OUTLINED_FUNCTION_46_0();
      uint64_t v56 = OUTLINED_FUNCTION_46_0();
      uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
      os_log_type_t v58 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_41_0(v57))
      {
        uint64_t v59 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
        uint64_t v78 = OUTLINED_FUNCTION_38(32LL);
        *(_DWORD *)uint64_t v59 = 136315138;
        swift_getErrorValue(v54, v14 + 248, v14 + 216);
        uint64_t v60 = OUTLINED_FUNCTION_145();
        *(void *)(v14 + 240) = OUTLINED_FUNCTION_140(v60, v61, v62, v63);
        OUTLINED_FUNCTION_144(v14 + 240, v14 + 248, (uint64_t)(v59 + 4));
        OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_4_8();
        OUTLINED_FUNCTION_4_8();
        OUTLINED_FUNCTION_31_2(&dword_0, v57, v58, "#WorkflowRunnerFlow in error state: %s, exiting flow", v59);
        OUTLINED_FUNCTION_30_3(v78, v64, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v78);
        OUTLINED_FUNCTION_1_0((uint64_t)v59);
      }

      else
      {
        OUTLINED_FUNCTION_4_8();
        OUTLINED_FUNCTION_4_8();
      }

      OUTLINED_FUNCTION_90();
      OUTLINED_FUNCTION_4_8();
      goto LABEL_25;
    case 0xAu:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v65 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v65, (uint64_t)static Logger.voiceCommands);
      OUTLINED_FUNCTION_9_5();
      os_log_type_t v66 = OUTLINED_FUNCTION_58();
      if (OUTLINED_FUNCTION_45_0(v66))
      {
        uint64_t v67 = (_WORD *)OUTLINED_FUNCTION_57_1();
        OUTLINED_FUNCTION_26_1(v67);
        OUTLINED_FUNCTION_27_0(&dword_0, v68, v69, "#WorkflowRunnerFlow completed execution, exiting flow");
        OUTLINED_FUNCTION_1_0(v18);
      }

      OUTLINED_FUNCTION_116();
      goto LABEL_25;
    case 0xBu:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v70 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v70, (uint64_t)static Logger.voiceCommands);
      OUTLINED_FUNCTION_9_5();
      os_log_type_t v71 = OUTLINED_FUNCTION_58();
      if (OUTLINED_FUNCTION_45_0(v71))
      {
        uint64_t v72 = (_WORD *)OUTLINED_FUNCTION_57_1();
        OUTLINED_FUNCTION_26_1(v72);
        OUTLINED_FUNCTION_27_0(&dword_0, v73, v74, "#WorkflowRunnerFlow cancelled execution, exiting flow");
        OUTLINED_FUNCTION_1_0(v18);
      }

      uint64_t v75 = (void *)swift_task_alloc(dword_215ED4);
      *(void *)(v14 + 47outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v75;
      *uint64_t v75 = v14;
      v75[1] = WorkflowRunnerFlow.execute();
      OUTLINED_FUNCTION_24_7();
      return WorkflowRunnerFlow.buildCancelledOutput()(v76);
    default:
      uint64_t v34 = *(void *)(v14 + 400);
      OUTLINED_FUNCTION_90();
      outlined destroy of AutoShortcutInvocation(v34, type metadata accessor for WorkflowRunnerFlow.State);
LABEL_25:
      uint64_t v77 = *(void *)(v14 + 288);
      swift_task_dealloc(*(void *)(v14 + 400));
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_15_0();
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_33_0();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_29_0();
      OUTLINED_FUNCTION_30_0();
      OUTLINED_FUNCTION_20_2();
      swift_task_dealloc(v77);
      return OUTLINED_FUNCTION_8_0(*(uint64_t (**)(void))(v14 + 8));
  }

uint64_t WorkflowRunnerFlow.execute()()
{
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v0 + 496) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

#error "3AB04: call analysis failed (funcsize=83)"
uint64_t WorkflowRunnerFlow.execute()()
{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 440));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "3AC08: call analysis failed (funcsize=31)"
uint64_t WorkflowRunnerFlow.execute()()
{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 456));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "3AEC0: call analysis failed (funcsize=150)"
uint64_t WorkflowRunnerFlow.execute()()
{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 464));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "3AF64: call analysis failed (funcsize=27)"
uint64_t WorkflowRunnerFlow.execute()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 480) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

#error "3B158: call analysis failed (funcsize=39)"
#error "3B1EC: call analysis failed (funcsize=37)"
#error "3B294: call analysis failed (funcsize=42)"
uint64_t closure #1 in WorkflowRunnerFlow.execute()( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14)
{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void v14[2] = a1;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
  uint64_t v16 = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v14[3] = v16;
  uint64_t v17 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next()[1]);
  v14[4] = v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  *uint64_t v17 = v14;
  v17[1] = closure #1 in WorkflowRunnerFlow.execute();
  return AsyncStream.Iterator.next()(v16, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14);
}

uint64_t closure #1 in WorkflowRunnerFlow.execute()()
{
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  outlined assign with take of SiriWorkflowRunnerEvent?(*(void *)(v0 + 24), *(void *)(v0 + 16));
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_27_2(v1);
}

void closure #2 in WorkflowRunnerFlow.execute()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput;
  uint64_t v10 = *(void *)(a2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8);
  if (*(_BYTE *)(v9 + 64) != 3)
  {
    NSString v11 = 0LL;
    if (*(_BYTE *)(v9 + 64)) {
      goto LABEL_7;
    }
    uint64_t v12 = v10;
    swift_bridgeObjectRetain(v10);
    goto LABEL_5;
  }

  uint64_t v12 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain(v12);
  if (v12)
  {
LABEL_5:
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    goto LABEL_7;
  }

  NSString v11 = 0LL;
LABEL_7:
  [a1 setShortcutName:v11];

  if (__swift_getEnumTagSinglePayload(a3, 1LL, v6))
  {
    NSString v13 = 0LL;
  }

  else
  {
    outlined init with copy of WorkflowRunnerFlow.State( a3,  (uint64_t)v8,  type metadata accessor for SiriWorkflowRunnerEvent);
    SiriWorkflowRunnerEvent.name.getter();
    uint64_t v15 = v14;
    outlined destroy of AutoShortcutInvocation((uint64_t)v8, type metadata accessor for SiriWorkflowRunnerEvent);
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
  }

  [a1 setWfRunnerEventName:v13];
}

uint64_t WorkflowRunnerFlow.responseFrom(event:iterator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  __int128 v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = type metadata accessor for URL(0LL);
  void v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SiriWorkflowRunnerEvent(0LL);
  void v4[9] = v7;
  v4[10] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(WorkflowRunnerFlow.responseFrom(event:iterator:), 0LL, 0LL);
}

uint64_t WorkflowRunnerFlow.responseFrom(event:iterator:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = OUTLINED_FUNCTION_165();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)sub_3B5F8 + 4 * byte_17FE60[v15]))( v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  a9,  a10,  a11,  a12,  a13,  a14);
}

uint64_t sub_3B5F8()
{
  uint64_t v1 = (void *)v0[10];
  v0[11] = *v1;
  v0[12] = v1[2];
  v0[13] = v1[5];
  uint64_t v2 = (void *)swift_task_alloc(dword_21609C);
  v0[14] = v2;
  *uint64_t v2 = v0;
  v2[1] = WorkflowRunnerFlow.responseFrom(event:iterator:);
  OUTLINED_FUNCTION_89_0();
  OUTLINED_FUNCTION_24_7();
  return WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)( v3,  v4,  v5,  v6,  v7,  v8,  v9,  v10);
}

uint64_t sub_3B66C()
{
  uint64_t v1 = v0[10];
  v0[15] = *(void *)(v1 + 8);
  v0[16] = *(void *)(v1 + 24);
  uint64_t v2 = (void *)swift_task_alloc(dword_216094);
  v0[17] = v2;
  *uint64_t v2 = v0;
  v2[1] = WorkflowRunnerFlow.responseFrom(event:iterator:);
  OUTLINED_FUNCTION_89_0();
  OUTLINED_FUNCTION_24_7();
  return WorkflowRunnerFlow.createSpeakTextWithUtterance(utterance:iterator:_:)(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_3B6CC()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
  uint64_t v6 = (uint64_t *)(v1 + *(int *)(v5 + 48));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (uint64_t *)(v1 + *(int *)(v5 + 64));
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  OUTLINED_FUNCTION_158(v2, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  WorkflowRunnerFlow.createOpenURLFlow(url:bundleId:iterator:_:)(v2, v7, v8, v13, v11, v10, v4);
  swift_release();
  swift_bridgeObjectRelease(v8);
  OUTLINED_FUNCTION_57_4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_37_6();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_8_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowRunnerFlow.responseFrom(event:iterator:)()
{
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 88);
  swift_release();

  OUTLINED_FUNCTION_37_6();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 136));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_37_6();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 160));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 144);
  swift_release();

  OUTLINED_FUNCTION_37_6();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 176));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_37_6();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 184));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_37_6();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowRunnerFlow.buildCancelledOutput()(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[28] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v2[29] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[30] = v5;
  v2[31] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(WorkflowRunnerFlow.buildCancelledOutput(), 0LL, 0LL);
}

uint64_t WorkflowRunnerFlow.buildCancelledOutput()()
{
  uint64_t v2 = *((void *)v1 + 28);
  static Device.current.getter((void *)v1 + 16, v3);
  type metadata accessor for AutoShortcutCATs(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v4 = OUTLINED_FUNCTION_97(v2);
  type metadata accessor for AutoShortcutCATsSimple(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v5 = OUTLINED_FUNCTION_96(v2);
  type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_59();
  uint64_t v6 = OUTLINED_FUNCTION_97(v2);
  uint64_t v7 = type metadata accessor for AutoShortcutDialogTemplating();
  uint64_t inited = (void *)swift_initStackObject(v7, v1 + 1);
  *((void *)v1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = inited;
  inited[12] = v0;
  inited[13] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  inited[9] = v6;
  outlined init with take of AceServiceInvokerAsync(v1 + 8, (uint64_t)(inited + 2));
  inited[7] = v4;
  inited[8] = v5;
  uint64_t v9 = (__int128 **)swift_task_alloc(dword_21B0BC);
  *((void *)v1 + 33) = v9;
  *uint64_t v9 = v1;
  v9[1] = (__int128 *)WorkflowRunnerFlow.buildCancelledOutput();
  return AutoShortcutDialogTemplating.makeUserDeniedDialog_rfv1()(*((void *)v1 + 31));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v0 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {
    swift_setDeallocating(*(void *)(v0 + 256));
    uint64_t v4 = AutoShortcutDialogTemplating.deinit();
    OUTLINED_FUNCTION_161(v4);
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t (*v5)(void);
  OUTLINED_FUNCTION_28_1();
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v4 = OUTLINED_FUNCTION_70_1(*(void *)(v0 + 216));
  *(_OWORD *)(v0 + 184) = 0u;
  *(void *)(v0 + 200) = 0LL;
  *(_OWORD *)(v0 + 168) = 0u;
  static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)( v2,  v1,  v4 & 1,  _swiftEmptyArrayStorage,  1LL,  v0 + 168);
  outlined destroy of Result<Output, Error>( v0 + 168,  (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_18_0();
  uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_39_5(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  swift_setDeallocating(*(void *)(v0 + 256));
  uint64_t v1 = AutoShortcutDialogTemplating.deinit();
  OUTLINED_FUNCTION_161(v1);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WorkflowRunnerFlow.execute(completion:)()
{
  uint64_t ObjectType = swift_getObjectType(v0);
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow,  type metadata accessor for WorkflowRunnerFlow,  (uint64_t)&protocol conformance descriptor for WorkflowRunnerFlow);
  uint64_t v2 = OUTLINED_FUNCTION_160();
  return Flow.deferToExecuteAsync(_:)(v2, v3, ObjectType, v4);
}

uint64_t WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 224) = a8;
  *(void *)(v9 + 23outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v8;
  *(void *)(v9 + 208) = a6;
  *(void *)(v9 + 216) = a7;
  *(_BYTE *)(v9 + 284) = a5;
  *(void *)(v9 + 19outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a3;
  *(void *)(v9 + 200) = a4;
  *(void *)(v9 + 176) = a1;
  *(void *)(v9 + 184) = a2;
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  *(void *)(v9 + 240) = v10;
  *(void *)(v9 + 248) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:),  0LL,  0LL);
}

uint64_t WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = *(void **)(v0 + 184);
  uint64_t v3 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  id v4 = v2;
  OUTLINED_FUNCTION_64_1();
  os_log_type_t v5 = OUTLINED_FUNCTION_58();
  BOOL v6 = OUTLINED_FUNCTION_41_0((os_log_s *)v2);
  uint64_t v7 = *(void **)(v0 + 184);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v9 = (void *)OUTLINED_FUNCTION_38(8LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t v1 = (os_log_s *)(v8 + 12);
    *(void *)(v0 + 168) = v7;
    id v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v8 + 4);
    *uint64_t v9 = v7;

    OUTLINED_FUNCTION_31_2(&dword_0, (os_log_s *)v2, v5, "#WorkflowRunnerFlow createExecuteLinkAction: %@", v8);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_30_3((uint64_t)v9, v12, v11);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  else
  {
  }

  char v13 = *(_BYTE *)(v0 + 284);
  uint64_t v15 = *(void *)(v0 + 192);
  uint64_t v14 = *(void *)(v0 + 200);
  uint64_t v16 = *(void **)(v0 + 184);
  outlined init with copy of AppShortcutInvoking( *(void *)(v0 + 232) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner,  v0 + 48);
  *(void *)(v0 + 16) = v15;
  *(void *)(v0 + 24) = v14;
  *(void *)(v0 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v16;
  *(_BYTE *)(v0 + 40) = v13;
  id v17 = v16;
  uint64_t v18 = swift_bridgeObjectRetain(v14);
  id v19 = OUTLINED_FUNCTION_26(v18, "outputType");

  if (!v19) {
    goto LABEL_12;
  }
  id v20 = [*(id *)(v0 + 184) systemProtocols];
  type metadata accessor for LNAutoShortcut( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t v21 = OUTLINED_FUNCTION_141((uint64_t)v20);

  id v22 = [(id)objc_opt_self(LNSystemProtocol) sessionStartingProtocol];
  char v23 = specialized Sequence<>.contains(_:)((uint64_t)v22, v21);

  swift_bridgeObjectRelease(v21);
  if ((v23 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v24 = (uint64_t)[*(id *)(v0 + 184) systemProtocols];
  uint64_t v25 = OUTLINED_FUNCTION_141(v24);

  Array<A>.isAudioStarting.getter(v25);
  OUTLINED_FUNCTION_58_2();
  if ((v24 & 1) != 0)
  {
    OUTLINED_FUNCTION_64_1();
    os_log_type_t v26 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v26))
    {
      uint64_t v27 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_43_5(v27);
      OUTLINED_FUNCTION_20_11( &dword_0,  (os_log_s *)v24,  (os_log_type_t)v25,  "#WorkflowRunnerFlow will handoff to shortcuts for intent with return value that also starts a live action");
      OUTLINED_FUNCTION_1_0(v21);
    }

    uint64_t v28 = *(void *)(v0 + 232);

    uint64_t v29 = v28 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState;
    uint64_t v30 = OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker;
    *(void *)(v0 + 256) = OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker;
    uint64_t v31 = v28 + v30;
    id v33 = OUTLINED_FUNCTION_26(v32, "systemProtocols");
    uint64_t v34 = OUTLINED_FUNCTION_141((uint64_t)v33);
    *(void *)(v0 + 264) = v34;

    unint64_t v35 = (void *)swift_task_alloc(dword_2157DC);
    *(void *)(v0 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v35;
    *unint64_t v35 = v0;
    v35[1] = WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:);
    return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v29, v31, v34);
  }

  else
  {
LABEL_12:
    id v38 = *(id *)(v0 + 184);
    OUTLINED_FUNCTION_64_1();
    os_log_type_t v39 = OUTLINED_FUNCTION_148();
    uint64_t v63 = v37;
    if (os_log_type_enabled(v1, v39))
    {
      uint64_t v40 = *(void **)(v0 + 184);
      os_log_type_t v41 = (_DWORD *)OUTLINED_FUNCTION_38(8LL);
      *os_log_type_t v41 = 67109120;
      *(_DWORD *)(v0 + 280) = [v40 openAppWhenRun];
      uint64_t v42 = OUTLINED_FUNCTION_129();
      OUTLINED_FUNCTION_144(v42, v43, v44);

      OUTLINED_FUNCTION_85_0(&dword_0, v1, v39, "#WorkflowRunnerFlow link action open app when run set to %{BOOL}d");
      OUTLINED_FUNCTION_1_0((uint64_t)v41);
      uint64_t v45 = *(os_log_s **)(v0 + 184);
    }

    else
    {

      uint64_t v45 = *(os_log_s **)(v0 + 184);
      uint64_t v1 = v45;
    }

    uint64_t v46 = *(void *)(v0 + 248);
    uint64_t v61 = *(void *)(v0 + 240);
    uint64_t v62 = *(void *)(v0 + 232);
    uint64_t v47 = *(void *)(v0 + 216);
    uint64_t v60 = *(void *)(v0 + 224);
    uint64_t v49 = *(void *)(v0 + 200);
    uint64_t v48 = *(void *)(v0 + 208);
    uint64_t v50 = *(void *)(v0 + 192);

    uint64_t v51 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
    uint64_t v52 = (void *)(v46 + v51[12]);
    uint64_t v53 = v51[16];
    uint64_t v54 = (void *)(v46 + v51[20]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    OUTLINED_FUNCTION_126();
    v55(v46, v48);
    *uint64_t v52 = v50;
    v52[1] = v49;
    *(void *)(v46 + v53) = v45;
    *uint64_t v54 = v47;
    v54[1] = v60;
    swift_storeEnumTagMultiPayload(v46, v61, 1LL);
    OUTLINED_FUNCTION_15_6(v62 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state, v0 + 112);
    uint64_t v56 = v45;
    swift_bridgeObjectRetain(v49);
    swift_retain(v60);
    OUTLINED_FUNCTION_107(v46);
    OUTLINED_FUNCTION_78();
    *(void *)(v0 + 160) = v63;
    uint64_t v57 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F4570, 24LL);
    swift_unknownObjectWeakInit(v57 + 16, v62);
    uint64_t v58 = type metadata accessor for LinkRCHFlow();
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type LinkRCHFlow and conformance LinkRCHFlow,  (uint64_t (*)(uint64_t))type metadata accessor for LinkRCHFlow,  (uint64_t)&protocol conformance descriptor for LinkRCHFlow);
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v0 + 160,  partial apply for closure #1 in WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:),  v57,  v58,  v59);
    swift_release();
    outlined destroy of LinkRCHFlowFactory.GetFlowConfig(v0 + 16);
    OUTLINED_FUNCTION_61();
    swift_task_dealloc(*(void *)(v0 + 248));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 272));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(void, id);
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  id v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v15 = *(void *)(v0 + 240);
  uint64_t v3 = *(void (**)(void, id))(v0 + 216);
  uint64_t v14 = *(void *)(v0 + 208);
  id v4 = (void *)(v2 + *(void *)(v0 + 256));
  os_log_type_t v5 = [(id)objc_opt_self(NSError) wfSiriExecutionRequiresShortcutsJrError];
  uint64_t v7 = v4[3];
  BOOL v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v7);
  uint64_t v8 = [objc_allocWithZone(SAUICloseAssistant) init];
  AceServiceInvokerAsync.submitAndForget(_:)(v8, v7, v6);

  uint64_t v9 = v5;
  v3(0LL, v5);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
  *uint64_t v1 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  id v10 = OUTLINED_FUNCTION_75_1();
  v11(v10, v14);
  OUTLINED_FUNCTION_143((uint64_t)v1, v15);
  OUTLINED_FUNCTION_15_6(v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state, v0 + 136);
  uint64_t v12 = v9;
  OUTLINED_FUNCTION_107((uint64_t)v1);
  OUTLINED_FUNCTION_131();
  OUTLINED_FUNCTION_110();

  outlined destroy of LinkRCHFlowFactory.GetFlowConfig(v0 + 16);
  swift_task_dealloc(*(void *)(v0 + 248));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WorkflowRunnerFlow.createSpeakTextWithUtterance(utterance:iterator:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[40] = a6;
  v7[41] = v6;
  v7[38] = a4;
  v7[39] = a5;
  v7[36] = a2;
  v7[37] = a3;
  v7[35] = a1;
  uint64_t v8 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  v7[42] = v8;
  v7[43] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v7[44] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AceOutput(0LL);
  v7[45] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[46] = v11;
  v7[47] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for TemplatingResult(0LL);
  v7[48] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v7[49] = v13;
  v7[50] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(WorkflowRunnerFlow.createSpeakTextWithUtterance(utterance:iterator:_:), 0LL, 0LL);
}

uint64_t WorkflowRunnerFlow.createSpeakTextWithUtterance(utterance:iterator:_:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  *(void *)(v2 + 408) = __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v4))
  {
    os_log_type_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_26_1(v5);
    OUTLINED_FUNCTION_27_0(&dword_0, v6, v7, "#WorkflowRunnerFlow createSpeakTextWithUtterance");
    OUTLINED_FUNCTION_1_0(v1);
  }

  uint64_t v8 = *(void *)(v2 + 400);
  uint64_t v9 = *(void *)(v2 + 360);
  uint64_t v25 = *(void *)(v2 + 368);
  uint64_t v10 = *(void *)(v2 + 352);
  uint64_t v11 = *(void *)(v2 + 328);
  uint64_t v12 = *(void *)(v2 + 288);
  uint64_t v13 = *(void *)(v2 + 296);

  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v14, v2 + 16);
  *(_OWORD *)(inited + 16) = xmmword_17E650;
  *(void *)(inited + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v12;
  *(void *)(inited + 40) = v13;
  uint64_t v16 = swift_initStackObject(v14, v2 + 64);
  *(_OWORD *)(v16 + 16) = xmmword_17E650;
  *(void *)(v16 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v12;
  *(void *)(v16 + 40) = v13;
  swift_bridgeObjectRetain_n(v13, 2LL);
  TemplatingResult.init(dialogId:print:speak:)(0xD000000000000019LL, 0x8000000000193B60LL, inited, v16, v8);
  uint64_t v17 = v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState;
  OUTLINED_FUNCTION_81_0();
  uint64_t v18 = OUTLINED_FUNCTION_111();
  __swift_storeEnumTagSinglePayload(v10, 1LL, 1LL, v18);
  *(void *)(v2 + 144) = 0LL;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v8,  v17,  v16 & 1,  _swiftEmptyArrayStorage,  0LL,  0LL,  v10,  _swiftEmptyArrayStorage,  v2 + 112);
  outlined destroy of Result<Output, Error>( v2 + 112,  (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Result<Output, Error>(v10, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_project_boxed_opaque_existential_1( (void *)(v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher),  *(void *)(v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher + 24));
  *(void *)(v2 + 176) = v9;
  *(void *)(v2 + 184) = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v2 + 152));
  OUTLINED_FUNCTION_142( (uint64_t)boxed_opaque_existential_1,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16));
  id v20 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v2 + 416) = v20;
  *id v20 = v2;
  v20[1] = WorkflowRunnerFlow.createSpeakTextWithUtterance(utterance:iterator:_:);
  OUTLINED_FUNCTION_29_1();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v21, v22, v23);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v0 + 424) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 152));
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 328);
  os_log_type_t v4 = *(void *)(v0 + 304);
  os_log_type_t v5 = *(void *)(v0 + 312);
  (*(void (**)(void))(**(void **)(v3
                                               + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogState)
                                 + 224LL))(0LL);
  ((void (*)(void))v5)(0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  OUTLINED_FUNCTION_126();
  v6(v1, v4);
  swift_storeEnumTagMultiPayload(v1, v2, 0LL);
  OUTLINED_FUNCTION_15_6(v3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state, v0 + 240);
  OUTLINED_FUNCTION_107(v1);
  OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_57_4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  os_log_s *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  OUTLINED_FUNCTION_51_0();
  uint64_t v1 = *(os_log_s **)(v0 + 424);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 152));
  OUTLINED_FUNCTION_46_0();
  uint64_t v2 = OUTLINED_FUNCTION_46_0();
  Logger.logObject.getter(v2);
  uint64_t v3 = OUTLINED_FUNCTION_164();
  if (OUTLINED_FUNCTION_41_0(v1))
  {
    os_log_type_t v4 = *(void *)(v0 + 424);
    os_log_type_t v5 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v21 = OUTLINED_FUNCTION_38(32LL);
    *(_DWORD *)os_log_type_t v5 = 136315138;
    swift_getErrorValue(v4, v0 + 264, v0 + 216);
    uint64_t v6 = OUTLINED_FUNCTION_145();
    *(void *)(v0 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = OUTLINED_FUNCTION_140(v6, v7, v8, v9);
    OUTLINED_FUNCTION_144(v0 + 272, v0 + 280, (uint64_t)(v5 + 4));
    OUTLINED_FUNCTION_20();
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    OUTLINED_FUNCTION_31_2(&dword_0, v1, v3, "#WorkflowRunnerFlow SpeakText ran into error: %s", v5);
    OUTLINED_FUNCTION_30_3(v21, v10, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v21);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  else
  {
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_39_0();
  }

  uint64_t v11 = *(void *)(v0 + 424);
  uint64_t v12 = *(void **)(v0 + 344);
  uint64_t v13 = *(void *)(v0 + 328);
  uint64_t v14 = *(void *)(v0 + 304);
  uint64_t v15 = *(void *)(v0 + 312);
  swift_errorRetain(v11);
  ((void (*)(uint64_t))v15)(v11);
  swift_errorRelease(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
  *uint64_t v12 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v16 = OUTLINED_FUNCTION_75_1();
  v17(v16, v14);
  uint64_t v18 = OUTLINED_FUNCTION_159();
  OUTLINED_FUNCTION_143(v18, v19);
  OUTLINED_FUNCTION_15_6(v13 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state, v0 + 192);
  OUTLINED_FUNCTION_107((uint64_t)v12);
  OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_57_4((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_8_0(*(uint64_t (**)(void))(v0 + 8));
}

void WorkflowRunnerFlow.createOpenURLFlow(url:bundleId:iterator:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v72 = a5;
  uint64_t v71 = a4;
  uint64_t v69 = a3;
  uint64_t v68 = a2;
  uint64_t v67 = a1;
  uint64_t v70 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  __chkstk_darwin(v70);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "#WorkflowRunnerFlow createOpenURLFlow", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  uint64_t v22 = (uint64_t *)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput];
  uint64_t v23 = *(void *)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
  if (v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64] == 3)
  {
    uint64_t v25 = v22[2];
    uint64_t v21 = swift_bridgeObjectRetain(v25);
    if (v25) {
      goto LABEL_9;
    }
  }

  else if (!v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64])
  {
    uint64_t v24 = *v22;
    uint64_t v25 = *(void *)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
    swift_bridgeObjectRetain(v25);
    uint64_t v23 = v24;
LABEL_9:
    type metadata accessor for LNAutoShortcut( 0LL,  &lazy cache variable for type metadata for NSUserActivity,  &OBJC_CLASS___NSUserActivity_ptr);
    uint64_t v65 = a6;
    id v26 = NSUserActivity.__allocating_init(activityType:)( 0xD000000000000017LL,  0x8000000000193B80LL,  (SEL *)&selRef_initWithActivityType_);
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, URL)>);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    uint64_t v66 = a7;
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)(v28 - 8);
    uint64_t v31 = *(void *)(v30 + 72);
    uint64_t v32 = *(unsigned __int8 *)(v30 + 80);
    uint64_t v33 = (v32 + 32) & ~v32;
    uint64_t v34 = swift_allocObject(v27, v33 + v31, v32 | 7);
    *(_OWORD *)(v34 + 16) = xmmword_17E650;
    unint64_t v35 = (void *)(v34 + v33);
    uint64_t v36 = v34 + v33 + *(int *)(v29 + 48);
    *unint64_t v35 = 0xD00000000000001DLL;
    v35[1] = 0x8000000000193BA0LL;
    uint64_t v37 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16LL))(v36, v67, v37);
    uint64_t v38 = Dictionary.init(dictionaryLiteral:)(v34, &type metadata for String, v37, &protocol witness table for String);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v38);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v38);
    outlined bridged method (mbnn) of @objc NSUserActivity.userInfo.setter(v40, v26);
    if (v69) {
      uint64_t v41 = v68;
    }
    else {
      uint64_t v41 = 0xD000000000000013LL;
    }
    if (v69) {
      uint64_t v42 = v69;
    }
    else {
      uint64_t v42 = 0x80000000001920C0LL;
    }
    swift_bridgeObjectRetain(v69);
    id v43 = v26;
    Class v44 = WorkflowRunnerFlow.getINInteractionFromNSUserActivity(shortcutName:userActivity:bundleId:)( v23,  v25,  (uint64_t)v26,  v41,  v42);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v25);

    outlined init with copy of AppShortcutInvoking( (uint64_t)&v8[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner],  (uint64_t)v76);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v8[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState],  (uint64_t)v75);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v8[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker],  (uint64_t)v74);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v8[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher],  (uint64_t)v73);
    type metadata accessor for RunVoiceCommandCATs(0LL);
    uint64_t v45 = v44;
    static CATOption.defaultMode.getter(v45);
    uint64_t v46 = CATWrapper.__allocating_init(options:globals:)(v15, 0LL);
    uint64_t v47 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
    static CATOption.defaultMode.getter(v47);
    uint64_t v48 = CATWrapperSimple.__allocating_init(options:globals:)(v15, 0LL);
    uint64_t v49 = type metadata accessor for WFOpenInteractionFlow();
    swift_allocObject(v49, 216LL, 7LL);
    uint64_t v50 = WFOpenInteractionFlow.init(interaction:runner:deviceState:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:aceServiceInvoker:outputPublisher:)( v45,  (uint64_t)v76,  v75,  v46,  v48,  v74,  (uint64_t)v73);
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16LL))(v12, v71, v52);
    uint64_t v53 = v65;
    *(void *)uint64_t v51 = v72;
    *((void *)v51 + 1) = v53;
    swift_storeEnumTagMultiPayload(v12, v70, 4LL);
    uint64_t v54 = (uint64_t)&v8[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
    swift_beginAccess(&v8[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], v76, 33LL, 0LL);
    swift_retain(v53);
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v54);
    swift_endAccess(v76);
    v76[0] = v50;
    uint64_t v55 = swift_allocObject(&unk_1F4598, 24LL, 7LL);
    *(void *)(v55 + 16) = v8;
    uint64_t v56 = swift_allocObject(&unk_1F45C0, 32LL, 7LL);
    *(void *)(v56 + 16) = partial apply for implicit closure #3 in implicit closure #2 in WorkflowRunnerFlow.createOpenURLFlow(url:bundleId:iterator:_:);
    *(void *)(v56 + 24) = v55;
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type WFOpenInteractionFlow and conformance WFOpenInteractionFlow,  (uint64_t (*)(uint64_t))type metadata accessor for WFOpenInteractionFlow,  (uint64_t)&protocol conformance descriptor for WFOpenInteractionFlow);
    uint64_t v58 = v57;
    uint64_t v59 = v8;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v76,  partial apply for thunk for @escaping @callee_guaranteed (@guaranteed WFOpenInteractionResponse) -> (),  v56,  v49,  v58);
    swift_release();
    swift_release();

    return;
  }

  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v61 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v62 = 0;
    _os_log_impl(&dword_0, v60, v61, "#WorkflowRunnerFlow does not have shortcutName for open url action", v62, 2u);
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  static ExecuteResponse.complete()(v63);
}

void WorkflowRunnerFlow.createHandleUserActivityFlow(userActivity:bundleId:iterator:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v49 = a6;
  uint64_t v48 = a5;
  uint64_t v47 = a4;
  uint64_t v46 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  __chkstk_darwin(v46);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v45 = __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    os_log_type_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v19 = 0;
    _os_log_impl(&dword_0, v17, v18, "#WorkflowRunnerFlow createHandleUserActivityFlow", v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  uint64_t v21 = (uint64_t *)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput];
  uint64_t v22 = *(void *)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
  if (v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64] == 3)
  {
    uint64_t v24 = v21[2];
    uint64_t v20 = swift_bridgeObjectRetain(v24);
    if (v24) {
      goto LABEL_9;
    }
  }

  else if (!v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64])
  {
    uint64_t v23 = *v21;
    uint64_t v24 = *(void *)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
    swift_bridgeObjectRetain(v24);
    uint64_t v22 = v23;
LABEL_9:
    Class v25 = WorkflowRunnerFlow.getINInteractionFromNSUserActivity(shortcutName:userActivity:bundleId:)( v22,  v24,  a1,  a2,  a3);
    swift_bridgeObjectRelease(v24);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner],  (uint64_t)v53);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState],  (uint64_t)v52);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker],  (uint64_t)v51);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher],  (uint64_t)v50);
    type metadata accessor for RunVoiceCommandCATs(0LL);
    id v26 = v25;
    static CATOption.defaultMode.getter(v26);
    uint64_t v27 = CATWrapper.__allocating_init(options:globals:)(v15, 0LL);
    uint64_t v28 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
    static CATOption.defaultMode.getter(v28);
    uint64_t v29 = CATWrapperSimple.__allocating_init(options:globals:)(v15, 0LL);
    uint64_t v30 = type metadata accessor for WFOpenInteractionFlow();
    swift_allocObject(v30, 216LL, 7LL);
    uint64_t v31 = WFOpenInteractionFlow.init(interaction:runner:deviceState:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:aceServiceInvoker:outputPublisher:)( v26,  (uint64_t)v53,  v52,  v27,  v29,  v51,  (uint64_t)v50);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16LL))(v12, v47, v33);
    uint64_t v34 = v49;
    *(void *)uint64_t v32 = v48;
    *((void *)v32 + 1) = v34;
    swift_storeEnumTagMultiPayload(v12, v46, 4LL);
    uint64_t v35 = (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
    swift_beginAccess(&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], v53, 33LL, 0LL);
    swift_retain(v34);
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v35);
    swift_endAccess(v53);
    v53[0] = v31;
    uint64_t v36 = swift_allocObject(&unk_1F45E8, 24LL, 7LL);
    *(void *)(v36 + 16) = v7;
    uint64_t v37 = swift_allocObject(&unk_1F4610, 32LL, 7LL);
    *(void *)(v37 + 16) = partial apply for implicit closure #3 in implicit closure #2 in WorkflowRunnerFlow.createOpenURLFlow(url:bundleId:iterator:_:);
    *(void *)(v37 + 24) = v36;
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type WFOpenInteractionFlow and conformance WFOpenInteractionFlow,  (uint64_t (*)(uint64_t))type metadata accessor for WFOpenInteractionFlow,  (uint64_t)&protocol conformance descriptor for WFOpenInteractionFlow);
    uint64_t v39 = v38;
    uint64_t v40 = v7;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v53,  thunk for @escaping @callee_guaranteed (@guaranteed WFOpenInteractionResponse) -> ()partial apply,  v37,  v30,  v39);
    swift_release();
    swift_release();

    return;
  }

  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    id v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v43 = 0;
    _os_log_impl( &dword_0,  v41,  v42,  "#WorkflowRunnerFlow does not have shortcutName for handle UserActivity action",  v43,  2u);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  static ExecuteResponse.complete()(v44);
}

uint64_t WorkflowRunnerFlow.createExecuteIntentFlow(intent:iterator:_:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v48 = a3;
  uint64_t v47 = a2;
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "#WorkflowRunnerFlow createExecuteIntentFlow", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  os_log_type_t v19 = (uint64_t *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput];
  uint64_t v20 = *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
  if (v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64] == 3)
  {
    uint64_t v22 = v19[2];
    uint64_t v18 = swift_bridgeObjectRetain(v22);
    if (v22) {
      goto LABEL_9;
    }
  }

  else if (!v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64])
  {
    uint64_t v21 = *v19;
    uint64_t v22 = *(void *)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
    swift_bridgeObjectRetain(v22);
    uint64_t v20 = v21;
LABEL_9:
    uint64_t v45 = a4;
    uint64_t v46 = a5;
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner],  (uint64_t)v52);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState],  (uint64_t)v51);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker],  (uint64_t)v50);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher],  (uint64_t)v49);
    id v23 = objc_allocWithZone(&OBJC_CLASS___AFPreferences);
    id v24 = a1;
    id v25 = [v23 init];
    if (one-time initialization token for instance != -1) {
      swift_once(&one-time initialization token for instance, one-time initialization function for instance);
    }
    uint64_t v26 = static VoiceCommandsAppPolicyHandler.instance;
    uint64_t v27 = type metadata accessor for WFExecuteCustomIntentFlow();
    uint64_t v28 = swift_allocObject(v27, 288LL, 7LL);
    swift_retain(v26);
    uint64_t v29 = specialized WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)( v24,  v20,  v22,  (uint64_t)v52,  (uint64_t)v51,  (uint64_t)v50,  (uint64_t)v49,  v25,  v26,  (uint64_t)closure #1 in default argument 8 of WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:),  0LL,  v28);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16LL))(v12, v47, v31);
    uint64_t v32 = v45;
    *(void *)uint64_t v30 = v48;
    *((void *)v30 + 1) = v32;
    swift_storeEnumTagMultiPayload(v12, v10, 2LL);
    uint64_t v33 = (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
    swift_beginAccess(&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], v52, 33LL, 0LL);
    swift_retain(v32);
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v33);
    swift_endAccess(v52);
    v52[0] = v29;
    uint64_t v34 = swift_allocObject(&unk_1F4638, 24LL, 7LL);
    *(void *)(v34 + 16) = v6;
    uint64_t v35 = swift_allocObject(&unk_1F4660, 32LL, 7LL);
    *(void *)(v35 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createExecuteIntentFlow(intent:iterator:_:);
    *(void *)(v35 + 24) = v34;
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type WFExecuteCustomIntentFlow and conformance WFExecuteCustomIntentFlow,  (uint64_t (*)(uint64_t))type metadata accessor for WFExecuteCustomIntentFlow,  (uint64_t)&protocol conformance descriptor for WFExecuteCustomIntentFlow);
    uint64_t v37 = v36;
    uint64_t v38 = v6;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v52,  partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ParityFlowExecutionResult) -> (),  v35,  v27,  v37);
    swift_release();
    return swift_release();
  }

  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    os_log_type_t v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v42 = 0;
    _os_log_impl(&dword_0, v40, v41, "#WorkflowRunnerFlow does not have shortcutName for ExecuteIntent action", v42, 2u);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  return static ExecuteResponse.complete()(v43);
}

uint64_t WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[30] = a5;
  v6[31] = v5;
  v6[28] = a3;
  v6[29] = a4;
  v6[26] = a1;
  v6[27] = a2;
  uint64_t v7 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  v6[32] = v7;
  v6[33] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:), 0LL, 0LL);
}

uint64_t WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v5 = OUTLINED_FUNCTION_164();
  if (os_log_type_enabled(v0, v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v6);
    OUTLINED_FUNCTION_20_11(&dword_0, v0, v5, "#WorkflowRunnerFlow createShowDialogFlow");
    OUTLINED_FUNCTION_1_0(v3);
  }

  uint64_t v7 = *(void *)(v2 + 248);

  if (*(_BYTE *)(v7 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64) == 3)
  {
    uint64_t v7 = *(void *)(v7 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 16);
    uint64_t v8 = swift_bridgeObjectRetain(v7);
    if (v7) {
      goto LABEL_9;
    }
  }

  else if (!*(_BYTE *)(v7 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64))
  {
    swift_bridgeObjectRetain(*(void *)(v7
                                       + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput
                                       + 8));
LABEL_9:
    uint64_t v9 = *(void *)(v2 + 264);
    uint64_t v37 = *(void *)(v2 + 256);
    uint64_t v10 = *(void **)(v2 + 248);
    uint64_t v35 = *(void *)(v2 + 232);
    uint64_t v36 = *(void *)(v2 + 240);
    uint64_t v33 = *(void **)(v2 + 216);
    uint64_t v34 = *(void *)(v2 + 224);
    outlined init with copy of AppShortcutInvoking( (uint64_t)v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState,  v2 + 16);
    outlined init with copy of AppShortcutInvoking( (uint64_t)v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher,  v2 + 56);
    outlined init with copy of AppShortcutInvoking( (uint64_t)v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationProvider,  v2 + 96);
    outlined init with copy of AppShortcutInvoking( (uint64_t)v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dateTimeResolver,  v2 + 136);
    uint64_t v38 = type metadata accessor for RouteDialogRequestResponseFlow();
    OUTLINED_FUNCTION_19(v38, 225LL);
    id v11 = v33;
    OUTLINED_FUNCTION_146();
    uint64_t v19 = RouteDialogRequestResponseFlow.init(shortcutName:dialogRequest:deviceState:outputPublisher:locationProvider:dateTimeResolver:)( v12,  v13,  v14,  v15,  v16,  v17,  v18);
    uint64_t v20 = (void *)(v9
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    OUTLINED_FUNCTION_126();
    v21(v9, v34);
    *uint64_t v20 = v35;
    v20[1] = v36;
    swift_storeEnumTagMultiPayload(v9, v37, 3LL);
    uint64_t v22 = (uint64_t)v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
    OUTLINED_FUNCTION_15_6((uint64_t)v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state, v2 + 176);
    swift_retain(v36);
    outlined assign with take of WorkflowRunnerFlow.State(v9, v22);
    OUTLINED_FUNCTION_131();
    *(void *)(v2 + 200) = v19;
    uint64_t v23 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F4688, 24LL);
    *(void *)(v23 + 16) = v10;
    uint64_t v24 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F46B0, 32LL);
    *(void *)(v24 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:);
    *(void *)(v24 + 24) = v23;
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type RouteDialogRequestResponseFlow and conformance RouteDialogRequestResponseFlow,  (uint64_t (*)(uint64_t))type metadata accessor for RouteDialogRequestResponseFlow,  (uint64_t)&protocol conformance descriptor for RouteDialogRequestResponseFlow);
    uint64_t v26 = v25;
    id v27 = v10;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v2 + 200,  partial apply for thunk for @escaping @callee_guaranteed (@guaranteed DialogResponse) -> (),  v24,  v38,  v26);
    OUTLINED_FUNCTION_61();
    swift_release();
    goto LABEL_13;
  }

  Logger.logObject.getter(v8);
  os_log_type_t v28 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_45_0(v28))
  {
    uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_26_1(v29);
    OUTLINED_FUNCTION_27_0(&dword_0, v30, v31, "#WorkflowRunnerFlow does not have shortcutName for show dialog action");
    OUTLINED_FUNCTION_1_0(v7);
  }

  OUTLINED_FUNCTION_116();
LABEL_13:
  swift_task_dealloc(*(void *)(v2 + 264));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t WorkflowRunnerFlow.createOpenInteractionInAppFlow(interaction:iterator:_:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v37 = a3;
  uint64_t v38 = a5;
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "#WorkflowRunnerFlow createOpenInteractionInAppFlow", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  outlined init with copy of AppShortcutInvoking( (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner],  (uint64_t)v42);
  outlined init with copy of AppShortcutInvoking( (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState],  (uint64_t)v41);
  outlined init with copy of AppShortcutInvoking( (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker],  (uint64_t)v40);
  outlined init with copy of AppShortcutInvoking( (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher],  (uint64_t)v39);
  type metadata accessor for RunVoiceCommandCATs(0LL);
  id v21 = a1;
  static CATOption.defaultMode.getter(v21);
  uint64_t v22 = CATWrapper.__allocating_init(options:globals:)(v15, 0LL);
  uint64_t v23 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  static CATOption.defaultMode.getter(v23);
  uint64_t v24 = CATWrapperSimple.__allocating_init(options:globals:)(v15, 0LL);
  uint64_t v25 = type metadata accessor for WFOpenInteractionFlow();
  swift_allocObject(v25, 216LL, 7LL);
  uint64_t v26 = WFOpenInteractionFlow.init(interaction:runner:deviceState:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:aceServiceInvoker:outputPublisher:)( v21,  (uint64_t)v42,  v41,  v22,  v24,  v40,  (uint64_t)v39);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16LL))(v12, a2, v28);
  *(void *)id v27 = v37;
  *((void *)v27 + 1) = a4;
  swift_storeEnumTagMultiPayload(v12, v10, 4LL);
  uint64_t v29 = (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
  swift_beginAccess(&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], v42, 33LL, 0LL);
  swift_retain(a4);
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v29);
  swift_endAccess(v42);
  v42[0] = v26;
  uint64_t v30 = swift_allocObject(&unk_1F46D8, 24LL, 7LL);
  *(void *)(v30 + 16) = v6;
  uint64_t v31 = swift_allocObject(&unk_1F4700, 32LL, 7LL);
  *(void *)(v31 + 16) = partial apply for implicit closure #3 in implicit closure #2 in WorkflowRunnerFlow.createOpenURLFlow(url:bundleId:iterator:_:);
  *(void *)(v31 + 24) = v30;
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type WFOpenInteractionFlow and conformance WFOpenInteractionFlow,  (uint64_t (*)(uint64_t))type metadata accessor for WFOpenInteractionFlow,  (uint64_t)&protocol conformance descriptor for WFOpenInteractionFlow);
  uint64_t v33 = v32;
  uint64_t v34 = v6;
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v42,  thunk for @escaping @callee_guaranteed (@guaranteed WFOpenInteractionResponse) -> ()partial apply,  v31,  v25,  v33);
  swift_release();
  return swift_release();
}

void WorkflowRunnerFlow.createOpenAppFlow(bundleId:iterator:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v49 = a5;
  uint64_t v48 = a4;
  uint64_t v47 = a3;
  uint64_t v50 = a6;
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "#WorkflowRunnerFlow createOpenAppFlow", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  uint64_t v22 = (uint64_t *)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput];
  uint64_t v23 = *(void *)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
  if (v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64] == 3)
  {
    uint64_t v25 = v22[2];
    uint64_t v21 = swift_bridgeObjectRetain(v25);
    if (v25) {
      goto LABEL_9;
    }
  }

  else if (!v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64])
  {
    uint64_t v24 = *v22;
    uint64_t v25 = *(void *)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
    swift_bridgeObjectRetain(v25);
    uint64_t v23 = v24;
LABEL_9:
    Class v26 = WorkflowRunnerFlow.getINInteractionFromNSUserActivity(shortcutName:userActivity:bundleId:)( v23,  v25,  0LL,  a1,  a2);
    swift_bridgeObjectRelease(v25);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner],  (uint64_t)v54);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState],  (uint64_t)v53);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker],  (uint64_t)v52);
    outlined init with copy of AppShortcutInvoking( (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher],  (uint64_t)v51);
    type metadata accessor for RunVoiceCommandCATs(0LL);
    id v27 = v26;
    static CATOption.defaultMode.getter(v27);
    uint64_t v28 = CATWrapper.__allocating_init(options:globals:)(v15, 0LL);
    uint64_t v29 = type metadata accessor for RunVoiceCommandCATsSimple(0LL);
    static CATOption.defaultMode.getter(v29);
    uint64_t v30 = CATWrapperSimple.__allocating_init(options:globals:)(v15, 0LL);
    uint64_t v31 = type metadata accessor for WFOpenInteractionFlow();
    swift_allocObject(v31, 216LL, 7LL);
    uint64_t v32 = WFOpenInteractionFlow.init(interaction:runner:deviceState:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:aceServiceInvoker:outputPublisher:)( v27,  (uint64_t)v54,  v53,  v28,  v30,  v52,  (uint64_t)v51);
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16LL))(v12, v47, v34);
    uint64_t v35 = v49;
    *(void *)uint64_t v33 = v48;
    *((void *)v33 + 1) = v35;
    swift_storeEnumTagMultiPayload(v12, v10, 4LL);
    uint64_t v36 = (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
    swift_beginAccess(&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], v54, 33LL, 0LL);
    swift_retain(v35);
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v36);
    swift_endAccess(v54);
    v54[0] = v32;
    uint64_t v37 = swift_allocObject(&unk_1F4728, 24LL, 7LL);
    *(void *)(v37 + 16) = v7;
    uint64_t v38 = swift_allocObject(&unk_1F4750, 32LL, 7LL);
    *(void *)(v38 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createOpenAppFlow(bundleId:iterator:_:);
    *(void *)(v38 + 24) = v37;
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type WFOpenInteractionFlow and conformance WFOpenInteractionFlow,  (uint64_t (*)(uint64_t))type metadata accessor for WFOpenInteractionFlow,  (uint64_t)&protocol conformance descriptor for WFOpenInteractionFlow);
    uint64_t v40 = v39;
    os_log_type_t v41 = v7;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v54,  thunk for @escaping @callee_guaranteed (@guaranteed WFOpenInteractionResponse) -> ()partial apply,  v38,  v31,  v40);
    swift_release();
    swift_release();

    return;
  }

  os_log_type_t v42 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl(&dword_0, v42, v43, "#WorkflowRunnerFlow does not have shortcutName for Open App action", v44, 2u);
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  static ExecuteResponse.complete()(v45);
}

uint64_t WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  os_log_type_t v5 = v4;
  uint64_t v46 = a2;
  uint64_t v47 = a4;
  uint64_t v8 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "#WorkflowRunnerFlow createPunchoutRequestedFlow", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  uint64_t v16 = &v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState];
  uint64_t v17 = *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState + 24];
  uint64_t v18 = *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState + 32];
  __swift_project_boxed_opaque_existential_1( &v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState],  v17);
  if ((dispatch thunk of DeviceState.isCarPlay.getter(v17, v18) & 1) != 0) {
    return WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)( a1,  (uint64_t)v46,  a3,  v47);
  }
  uint64_t v20 = *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 24];
  uint64_t v21 = *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 32];
  __swift_project_boxed_opaque_existential_1( &v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner],  v20);
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
  uint64_t v22 = *((void *)v16 + 3);
  uint64_t v23 = *((void *)v16 + 4);
  __swift_project_boxed_opaque_existential_1(v16, v22);
  if ((dispatch thunk of DeviceState.isLockedWithPasscode.getter(v22, v23) & 1) != 0)
  {
    uint64_t v24 = swift_allocObject(&unk_1F4778, 24LL, 7LL);
    *(void *)(v24 + 16) = v5;
    uint64_t v25 = v5;
    static OutputPublisherFactory.makeOutputPublisherAsync()(v49, v25);
    static AceService.currentAsync.getter(v48);
    uint64_t v26 = type metadata accessor for ShowOutputAndCloseFlow();
    swift_allocObject(v26, 113LL, 7LL);
    uint64_t v27 = ShowOutputAndCloseFlow.init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)( 0,  v49,  v48,  (uint64_t)&async function pointer to partial apply for closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:),  v24);
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL))(v10, a1, v29);
    *(void *)uint64_t v28 = v46;
    *((void *)v28 + 1) = a3;
    swift_storeEnumTagMultiPayload(v10, v8, 5LL);
    uint64_t v30 = (uint64_t)&v25[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
    swift_beginAccess(&v25[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], v49, 33LL, 0LL);
    swift_retain(a3);
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v10, v30);
    swift_endAccess(v49);
    *(void *)&v49[0] = v27;
    uint64_t v31 = swift_allocObject(&unk_1F47A0, 24LL, 7LL);
    *(void *)(v31 + 16) = v25;
    uint64_t v32 = swift_allocObject(&unk_1F47C8, 32LL, 7LL);
    *(void *)(v32 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:);
    *(void *)(v32 + 24) = v31;
    lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow,  (uint64_t (*)(uint64_t))type metadata accessor for ShowOutputAndCloseFlow,  (uint64_t)&protocol conformance descriptor for ShowOutputAndCloseFlow);
    uint64_t v34 = v33;
    uint64_t v35 = v25;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v49,  partial apply for thunk for @escaping @callee_guaranteed () -> (),  v32,  v26,  v34);
    swift_release();
    return swift_release();
  }

  else
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16LL))(v10, a1, v36);
    swift_storeEnumTagMultiPayload(v10, v8, 0LL);
    uint64_t v37 = (uint64_t)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
    swift_beginAccess(&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], v49, 33LL, 0LL);
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v10, v37);
    swift_endAccess(v49);
    uint64_t v38 = v46(1LL);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      os_log_type_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v41 = 0;
      _os_log_impl(&dword_0, v39, v40, "dismissing Siri after punchout request", v41, 2u);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    uint64_t v42 = *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker + 24];
    uint64_t v43 = *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker + 32];
    __swift_project_boxed_opaque_existential_1( &v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker],  v42);
    id v44 = [objc_allocWithZone(SAUICloseAssistant) init];
    AceServiceInvokerAsync.submitAndForget(_:)(v44, v42, v43);

    return static ExecuteResponse.complete()(v45);
  }

uint64_t WorkflowRunnerFlow.handleDidFinishWithError(error:)(uint64_t a1, uint64_t a2)
{
  v3[36] = a2;
  v3[37] = v2;
  v3[35] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[38] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TemplatingResult(0LL);
  v3[39] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[40] = v6;
  v3[41] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v3[42] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[43] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[44] = swift_task_alloc(v9);
  v3[45] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[46] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[47] = v11;
  v3[48] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v3[49] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[50] = v13;
  v3[51] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(WorkflowRunnerFlow.handleDidFinishWithError(error:), 0LL, 0LL);
}

void WorkflowRunnerFlow.handleDidFinishWithError(error:)()
{
  uint64_t v2 = v0 + 25;
  uint64_t v3 = v0 + 28;
  uint64_t v4 = v0 + 30;
  uint64_t v5 = v0 + 33;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v6 = v0[36];
  uint64_t v7 = OUTLINED_FUNCTION_48();
  v0[52] = __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain(v6);
  swift_errorRetain(v6);
  OUTLINED_FUNCTION_64_1();
  os_log_type_t v8 = OUTLINED_FUNCTION_148();
  BOOL v9 = os_log_type_enabled(v1, v8);
  uint64_t v10 = v0[36];
  if (v9)
  {
    uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v12 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v56 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = OUTLINED_FUNCTION_159();
    uint64_t v3 = v0 + 28;
    swift_getErrorValue(v13, v14, v0 + 22);
    uint64_t v15 = Error.localizedDescription.getter(v0[23], v0[24]);
    v0[34] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v56);
    uint64_t v5 = v0 + 33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 34, v0 + 35, v11 + 4);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_31_2(&dword_0, v1, v8, "#WorkflowRunnerFlow did finish with output has error: %s", v11);
    OUTLINED_FUNCTION_30_3(v12, v17, (uint64_t)&type metadata for Any + 8);
    uint64_t v18 = v12;
    uint64_t v4 = v0 + 30;
    OUTLINED_FUNCTION_1_0(v18);
    uint64_t v19 = (uint64_t)v11;
    uint64_t v2 = v0 + 25;
    OUTLINED_FUNCTION_1_0(v19);
  }

  else
  {
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_23_6();
  }

  swift_getErrorValue(v0[36], v5, v2);
  v0[30] = Error.localizedDescription.getter(v0[26], v0[27]);
  v0[31] = v20;
  v0[28] = 0xD000000000000020LL;
  v0[29] = 0x8000000000193BC0LL;
  unint64_t v21 = lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.contains<A>(_:)(v3, &type metadata for String, &type metadata for String, v21, v21);
  OUTLINED_FUNCTION_58_2();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_64_1();
    os_log_type_t v22 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v23);
      OUTLINED_FUNCTION_27_0( &dword_0,  v24,  v25,  "#WorkflowRunnerFlow skipping general error dialog for carplay punchout error");
      OUTLINED_FUNCTION_1_0(v10);
    }

    OUTLINED_FUNCTION_116();
  }

  else
  {
    uint64_t v26 = (void *)_convertErrorToNSError(_:)(v0[36]);
    v0[53] = v26;
    id v27 = [v26 domain];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v28 == v31 && v30 == (os_log_s *)v32)
    {
      swift_bridgeObjectRelease_n(v30, 2LL);
    }

    else
    {
      uint64_t v34 = v32;
      LOBYTE(v2__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = OUTLINED_FUNCTION_167(v28, (uint64_t)v30, v31, v32);
      swift_bridgeObjectRelease(v34);
      OUTLINED_FUNCTION_20();
      if ((v27 & 1) == 0)
      {
        uint64_t v36 = v0[50];
        uint64_t v35 = v0[51];
        uint64_t v37 = v0[49];
        uint64_t v38 = v0[37];
        NSError.filteredLocalizedDescription.getter();
        v0[54] = v39;
        (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))( v35,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v37);
        char v40 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
        uint64_t v41 = OUTLINED_FUNCTION_139();
        v42(v41);
        uint64_t v43 = **(void **)(v38 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogTemplating);
        if ((v40 & 1) != 0)
        {
          id v44 = (void *)OUTLINED_FUNCTION_108(*(void *)(v43 + 328));
          v0[55] = v44;
          *id v44 = v0;
          v44[1] = WorkflowRunnerFlow.handleDidFinishWithError(error:);
          OUTLINED_FUNCTION_160();
          OUTLINED_FUNCTION_29_1();
          __asm { BR              X2 }
        }

        uint64_t v54 = (void *)OUTLINED_FUNCTION_108(*(void *)(v43 + 336));
        v0[61] = v54;
        *uint64_t v54 = v0;
        v54[1] = WorkflowRunnerFlow.handleDidFinishWithError(error:);
        OUTLINED_FUNCTION_29_1();
        __asm { BR              X3 }
      }
    }

    OUTLINED_FUNCTION_64_1();
    os_log_type_t v46 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_45_0(v46))
    {
      uint64_t v47 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_43_5(v47);
      OUTLINED_FUNCTION_20_11( &dword_0,  v30,  (os_log_type_t)v27,  "#WorkflowRunnerFlow skipping general error dialog for WFSiriExecutionErrorDomain");
      OUTLINED_FUNCTION_1_0(v28);
    }

    uint64_t v48 = v0[37];

    uint64_t v49 = (void *)(v48 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker);
    uint64_t v50 = *(void *)(v48 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker + 24);
    uint64_t v51 = *(void *)(v48 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker + 32);
    __swift_project_boxed_opaque_existential_1(v49, v50);
    id v52 = [objc_allocWithZone(SAUICloseAssistant) init];
    AceServiceInvokerAsync.submitAndForget(_:)(v52, v50, v51);

    OUTLINED_FUNCTION_116();
  }

  OUTLINED_FUNCTION_27_9();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_29_1();
  __asm { BR              X0 }

uint64_t WorkflowRunnerFlow.handleDidFinishWithError(error:)(uint64_t a1)
{
  uint64_t v11 = (void *)*v2;
  uint64_t v4 = v11;
  OUTLINED_FUNCTION_10_0(&v11);
  v4[56] = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = v4[54];
  if (!v1) {
    v4[57] = a1;
  }
  swift_bridgeObjectRelease(v6);
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v7, v8, v9);
}

uint64_t WorkflowRunnerFlow.handleDidFinishWithError(error:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void), uint64_t a10, uint64_t a11)
{
  uint64_t v12 = (void *)v11[57];
  uint64_t v14 = v11[44];
  uint64_t v13 = v11[45];
  uint64_t v16 = v11[42];
  uint64_t v15 = v11[43];
  static DialogPhase.summary.getter();
  id v17 = [v12 catId];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v13, v16);
  OUTLINED_FUNCTION_68_1(v14, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OutputGenerationManifest.responseViewId.setter(v18);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v16);
  OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
  OutputGenerationManifest.canUseServerTTS.setter(1LL);
  uint64_t v19 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v19);
  v11[58] = OUTLINED_FUNCTION_57();
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = OUTLINED_FUNCTION_19(v20, 40LL);
  *(_OWORD *)(v21 + 16) = xmmword_17E150;
  *(void *)(v21 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v12;
  OUTLINED_FUNCTION_25_0(v21, v22, v23);
  v11[59] = a11;
  OUTLINED_FUNCTION_100();
  uint64_t v24 = (void *)swift_task_alloc(v14);
  v11[60] = v24;
  *uint64_t v24 = v11;
  v24[1] = WorkflowRunnerFlow.handleDidFinishWithError(error:);
  return OUTLINED_FUNCTION_11_6((uint64_t)(v11 + 7), a11, v11[48], a9);
}

uint64_t WorkflowRunnerFlow.handleDidFinishWithError(error:)()
{
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_104();
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v1 = *(void *)(v0 + 384);

  OUTLINED_FUNCTION_57_4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v3 = (__int128 *)OUTLINED_FUNCTION_50_3();
  outlined init with take of AceServiceInvokerAsync(v3, v4);
  __swift_project_boxed_opaque_existential_1( (void *)(*(void *)(v0 + 296) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher),  *(void *)(*(void *)(v0 + 296) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher + 24));
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 504) = v5;
  uint64_t v6 = OUTLINED_FUNCTION_123(v5, (uint64_t)WorkflowRunnerFlow.handleDidFinishWithError(error:));
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v2 = *(void *)(v1 + 432);
  OUTLINED_FUNCTION_51_3();
  *(void *)(v3 + 496) = v0;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  void *v0;
  uint64_t v1;
  OUTLINED_FUNCTION_104();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 136));
  OUTLINED_FUNCTION_61_3();

  OUTLINED_FUNCTION_27_9();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v1 + 8));
}

{
  os_log_s *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_153();
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_20_11(&dword_0, v0, v1, "#WorkflowRunnerFlow error submitting error dialog");
    OUTLINED_FUNCTION_1_0(v3);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_61_3();
  OUTLINED_FUNCTION_27_9();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v2 + 8));
}

{
  os_log_s *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_153();
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_20_11(&dword_0, v0, v1, "#WorkflowRunnerFlow error submitting error dialog");
    OUTLINED_FUNCTION_1_0(v3);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_61_3();
  OUTLINED_FUNCTION_27_9();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v2 + 8));
}

{
  os_log_s *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  OUTLINED_FUNCTION_104();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v2 + 136));
  OUTLINED_FUNCTION_153();
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_20_11(&dword_0, v0, v1, "#WorkflowRunnerFlow error submitting error dialog");
    OUTLINED_FUNCTION_1_0(v3);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_61_3();
  OUTLINED_FUNCTION_27_9();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v2 + 8));
}

#error "3F80C: call analysis failed (funcsize=81)"
uint64_t WorkflowRunnerFlow.handleDidFinishWithError(error:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 51outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:)(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 444) = a2;
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 216) = v2;
  unint64_t v4 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 224) = swift_task_alloc(v4);
  *(void *)(v3 + 23outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  *(void *)(v3 + 240) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 248) = v6;
  *(void *)(v3 + 256) = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  *(void *)(v3 + 264) = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  *(void *)(v3 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v3 + 280) = v9;
  *(void *)(v3 + 288) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  *(void *)(v3 + 296) = v10;
  *(void *)(v3 + 304) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:), 0LL, 0LL);
}

uint64_t WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  uint64_t v5 = (os_log_s *)__swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  *(void *)(v2 + 31outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v5;
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v6 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v6))
  {
    uint64_t v3 = v2 + 444;
    int v7 = *(unsigned __int8 *)(v2 + 444);
    uint64_t v8 = (_DWORD *)OUTLINED_FUNCTION_38(8LL);
    *uint64_t v8 = 67109120;
    *(_DWORD *)(v2 + 440) = v7;
    uint64_t v9 = OUTLINED_FUNCTION_139();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v10, v11);
    OUTLINED_FUNCTION_85_0(&dword_0, v0, v1, "#WorkflowRunnerFlow did finish with output; cancelled=%{BOOL}d");
    OUTLINED_FUNCTION_1_0((uint64_t)v8);
  }

  uint64_t v12 = *(void *)(*(void *)(v2 + 216) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogState);
  if (((*(uint64_t (**)(void))(*(void *)v12 + 272LL))() & 1) != 0)
  {
    uint64_t v13 = *(void *)(v2 + 304);
    uint64_t v14 = *(void *)(v2 + 216);
    swift_storeEnumTagMultiPayload(v13, *(void *)(v2 + 296), 10LL);
    uint64_t v15 = v14 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
    uint64_t v16 = OUTLINED_FUNCTION_160();
    OUTLINED_FUNCTION_15_6(v16, v17);
    uint64_t v18 = v13;
    uint64_t v19 = v15;
LABEL_20:
    outlined assign with take of WorkflowRunnerFlow.State(v18, v19);
    OUTLINED_FUNCTION_78();
    OUTLINED_FUNCTION_16_10();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

  int v20 = *(unsigned __int8 *)(v2 + 444);
  if (((*(uint64_t (**)(void))(*(void *)v12 + 240LL))() & 1) != 0 || v20)
  {
    uint64_t v33 = (*(uint64_t (**)(void))(*(void *)v12 + 256LL))();
    char v34 = v33;
    uint64_t v35 = v5;
    Logger.logObject.getter(v33);
    os_log_type_t v36 = OUTLINED_FUNCTION_58();
    BOOL v37 = os_log_type_enabled(v5, v36);
    if ((v34 & 1) != 0)
    {
      uint64_t v38 = v2 + 160;
      if (v37)
      {
        uint64_t v39 = (_WORD *)OUTLINED_FUNCTION_57_1();
        *uint64_t v39 = 0;
        OUTLINED_FUNCTION_20_11( &dword_0,  v35,  v36,  "#WorkflowRunnerFlow dismissing Siri since the user already pressed done button");
        OUTLINED_FUNCTION_1_0((uint64_t)v39);
      }

      uint64_t v40 = *(void *)(v2 + 304);
      uint64_t v41 = *(void *)(v2 + 216);

      OUTLINED_FUNCTION_149((void *)(v41 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker));
      id v42 = [objc_allocWithZone(SAUICloseAssistant) init];
      AceServiceInvokerAsync.submitAndForget(_:)(v42, v35, v3);

      OUTLINED_FUNCTION_69_1();
      uint64_t v43 = v41 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
    }

    else
    {
      uint64_t v38 = v2 + 136;
      if (v37)
      {
        uint64_t v45 = (_WORD *)OUTLINED_FUNCTION_57_1();
        *uint64_t v45 = 0;
        OUTLINED_FUNCTION_20_11( &dword_0,  v35,  v36,  "#WorkflowRunnerFlow not submitting addViews because we have previously shown dialog");
        OUTLINED_FUNCTION_1_0((uint64_t)v45);
      }

      uint64_t v40 = *(void *)(v2 + 304);
      uint64_t v46 = *(void *)(v2 + 216);

      OUTLINED_FUNCTION_69_1();
      uint64_t v43 = v46 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
    }

    OUTLINED_FUNCTION_15_6(v43, v38);
    uint64_t v18 = v40;
    uint64_t v19 = v43;
    goto LABEL_20;
  }

  uint64_t v22 = *(void *)(v2 + 256);
  uint64_t v21 = *(void *)(v2 + 264);
  uint64_t v23 = *(void *)(v2 + 240);
  uint64_t v24 = *(void *)(v2 + 248);
  static DialogPhase.completion.getter();
  OUTLINED_FUNCTION_68_1(v21, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))( v22,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v23);
  uint64_t v25 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_57_4(v22, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
  if ((v25 & 1) != 0)
  {
    uint64_t v26 = *(void *)(v2 + 216);
    uint64_t v27 = *(void *)(v2 + 224);
    uint64_t v28 = *(void **)(v26 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_runVoiceCommandsCatWrapperSimple);
    uint64_t v29 = *(void *)(v2 + 232);
    OUTLINED_FUNCTION_149((void *)(v26 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState));
    uint64_t v30 = DeviceState.asSiriKitDeviceState()(v25, v24);
    *(void *)(v2 + 320) = v30;
    type metadata accessor for SpeakableString(0LL);
    OUTLINED_FUNCTION_127(v29);
    OUTLINED_FUNCTION_127(v27);
    uint64_t v31 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple
                                                     + *v28
                                                     + 112));
    *(void *)(v2 + 328) = v31;
    *uint64_t v31 = v2;
    v31[1] = WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:);
    return ((uint64_t (*)(uint64_t, void, void))v47)(v30, *(void *)(v2 + 232), *(void *)(v2 + 224));
  }

  else
  {
    id v44 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(*(void *)(v2 + 216)
                                                                   + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogTemplating)
                                                     + 304LL));
    *(void *)(v2 + 376) = v44;
    *id v44 = v2;
    v44[1] = WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:);
    return OUTLINED_FUNCTION_39_5(v47);
  }

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  os_log_type_t v1 = (void *)v0[43];
  uint64_t v2 = [v1 catId];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter(v3);
  uint64_t v4 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v4);
  v0[44] = OUTLINED_FUNCTION_57();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  os_log_type_t v6 = OUTLINED_FUNCTION_19(v5, 40LL);
  *(_OWORD *)(v6 + 16) = xmmword_17E150;
  *(void *)(v6 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v1;
  uint64_t v13 = v6;
  specialized Array._endMutation()(v6, v7, v8);
  v0[45] = v13;
  OUTLINED_FUNCTION_100();
  uint64_t v9 = (void *)swift_task_alloc(v3);
  v0[46] = v9;
  *uint64_t v9 = v0;
  v9[1] = WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:);
  uint64_t v10 = OUTLINED_FUNCTION_130();
  return v12(v10);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 368));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  void *v1;

  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 96), v0 + 16);
  __swift_project_boxed_opaque_existential_1( (void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher),  *(void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher + 24));
  os_log_type_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 424) = v1;
  OUTLINED_FUNCTION_92(v1, (uint64_t)WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:));
  return OUTLINED_FUNCTION_67_2();
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, void, void);
  OUTLINED_FUNCTION_104();
  os_log_type_t v1 = [*(id *)(v0 + 384) patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v2 = OUTLINED_FUNCTION_139();
  OutputGenerationManifest.responseViewId.setter(v2);
  uint64_t v3 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v3);
  *(void *)(v0 + 400) = OUTLINED_FUNCTION_57();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(patternExecutionResult:outputGenerationManifest:));
  *(void *)(v0 + 408) = v4;
  *uint64_t v4 = v0;
  v4[1] = WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:);
  return v6(v0 + 56, *(void *)(v0 + 384), *(void *)(v0 + 288));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 416) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  void *v1;

  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 56), v0 + 16);
  __swift_project_boxed_opaque_existential_1( (void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher),  *(void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher + 24));
  os_log_type_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 424) = v1;
  OUTLINED_FUNCTION_92(v1, (uint64_t)WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:));
  return OUTLINED_FUNCTION_67_2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 43outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_41_2();
  os_log_type_t v1 = *(void *)(v0 + 280);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_16_10();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

{
  os_log_s *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_62_3();
  OUTLINED_FUNCTION_117();
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_20_11(&dword_0, v0, v1, "#WorkflowRunnerFlow error submitting final done");
    OUTLINED_FUNCTION_1_0(v3);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_16_10();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v2 + 8));
}

{
  os_log_s *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  OUTLINED_FUNCTION_41_2();
  OUTLINED_FUNCTION_62_3();
  OUTLINED_FUNCTION_117();
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_20_11(&dword_0, v0, v1, "#WorkflowRunnerFlow error submitting final done");
    OUTLINED_FUNCTION_1_0(v3);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_16_10();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v2 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  os_log_s *v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  OUTLINED_FUNCTION_41_2();
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v2 = *(os_log_s **)(v0 + 288);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_117();
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_20_11(&dword_0, v2, (os_log_type_t)v3, "#WorkflowRunnerFlow error submitting final done");
    OUTLINED_FUNCTION_1_0(v1);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_16_10();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  os_log_s *v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  OUTLINED_FUNCTION_41_2();
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v2 = *(os_log_s **)(v0 + 288);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_117();
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_20_11(&dword_0, v2, (os_log_type_t)v3, "#WorkflowRunnerFlow error submitting final done");
    OUTLINED_FUNCTION_1_0(v1);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_16_10();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:)(uint64_t a1)
{
  uint64_t v9 = (void *)*v2;
  uint64_t v4 = v9;
  OUTLINED_FUNCTION_10_0(&v9);
  v4[42] = v1;
  swift_task_dealloc(v5);
  OUTLINED_FUNCTION_34_0();
  uint64_t v6 = v4[28];
  uint64_t v7 = v4[29];
  if (!v1) {
    v4[43] = a1;
  }
  OUTLINED_FUNCTION_133(v6);
  OUTLINED_FUNCTION_133(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 376);
  *(void *)(v3 + 384) = a1;
  *(void *)(v3 + 39outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v1;
  swift_task_dealloc(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WorkflowRunnerFlow.createAppProtectionRequestFlow(bundleId:iterator:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v33 = a1;
  uint64_t v11 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v32 = a2;
    uint64_t v19 = v18;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "#WorkflowRunnerFlow createAppProtectionRequestFlow", v18, 2u);
    a2 = v32;
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  type metadata accessor for App(0LL);
  swift_bridgeObjectRetain(a2);
  uint64_t v20 = App.__allocating_init(appIdentifier:)(v33, a2);
  type metadata accessor for LNAutoShortcut( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INIntent,  &OBJC_CLASS___INIntent_ptr);
  uint64_t v22 = static AppFlowFactory.makeFixedAppResolutionFlow<A>(app:)(v20, v21);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16LL))(v13, a3, v24);
  *(void *)uint64_t v23 = a4;
  *((void *)v23 + 1) = a5;
  swift_storeEnumTagMultiPayload(v13, v11, 6LL);
  uint64_t v25 = (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
  swift_beginAccess(&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], v34, 33LL, 0LL);
  swift_retain(a5);
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v13, v25);
  swift_endAccess(v34);
  v34[0] = v22;
  uint64_t v26 = swift_allocObject(&unk_1F4868, 24LL, 7LL);
  *(void *)(v26 + 16) = v6;
  uint64_t v27 = v6;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyAppResolutionFlow<INIntent>);
  unint64_t v29 = lazy protocol witness table accessor for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v34,  partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createAppProtectionRequestFlow(bundleId:iterator:_:),  v26,  v28,  v29);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t WorkflowRunnerFlow.guardLocationAccess(needsPreciseLocation:iterator:_:)( uint64_t a1, uint64_t a2, void (*a3)(void, uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(__int128 *__return_ptr, uint64_t))&v4[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationGuardFlowProvider])( &v36,  a1);
  if (v37)
  {
    outlined init with take of AceServiceInvokerAsync(&v36, (uint64_t)v38);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "#WorkflowRunnerFlow guardLocationAccess", v17, 2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v12, a2, v19);
    *(void *)uint64_t v18 = a3;
    *((void *)v18 + 1) = a4;
    swift_storeEnumTagMultiPayload(v12, v10, 7LL);
    uint64_t v20 = (uint64_t)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
    swift_beginAccess(&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], &v36, 33LL, 0LL);
    swift_retain(a4);
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v20);
    swift_endAccess(&v36);
    uint64_t v21 = v39;
    uint64_t v22 = v40;
    uint64_t v23 = __swift_project_boxed_opaque_existential_1(v38, v39);
    outlined init with copy of AppShortcutInvoking((uint64_t)v38, (uint64_t)&v36);
    uint64_t v24 = swift_allocObject(&unk_1F4890, 64LL, 7LL);
    outlined init with take of AceServiceInvokerAsync(&v36, v24 + 16);
    *(void *)(v24 + 56) = v5;
    uint64_t v25 = *(void *)(v22 + 8);
    uint64_t v26 = v5;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)( v23,  partial apply for closure #1 in WorkflowRunnerFlow.guardLocationAccess(needsPreciseLocation:iterator:_:),  v24,  v21,  v25);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm(v38);
  }

  else
  {
    outlined destroy of Result<Output, Error>( (uint64_t)&v36,  &demangling cache variable for type metadata for SiriLocationAccessGuarding?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_0, v30, v31, "#WorkflowRunnerFlow guardLocationAccess - no guardFlow impl", v32, 2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    unint64_t v33 = lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v34 = swift_allocError(&type metadata for WorkflowRunnerError, v33, 0LL, 0LL);
    *uint64_t v35 = 0LL;
    v35[1] = 0LL;
    a3(0LL, v34);
    swift_errorRelease(v34);
    return static ExecuteResponse.ongoing(requireInput:)(0LL);
  }

BOOL WorkflowRunnerFlow.isActionable(actionID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v4, &v7);
  *(void *)(inited + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0xD000000000000022LL;
  *(void *)(inited + 40) = 0x8000000000193BF0LL;
  *(void *)(inited + 48) = 0xD00000000000001FLL;
  *(void *)(inited + 56) = 0x8000000000193C20LL;
  *(void *)(inited + 64) = 0xD000000000000020LL;
  *(void *)(inited + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0x8000000000193C40LL;
  *(_OWORD *)(inited + 16) = xmmword_180120;
  *(void *)(inited + 80) = 0xD00000000000001FLL;
  *(void *)(inited + 88) = 0x8000000000193C70LL;
  *(void *)(inited + 96) = 0xD00000000000001BLL;
  *(void *)(inited + 104) = 0x8000000000193C90LL;
  LOBYTE(aoutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = specialized Sequence<>.contains(_:)(a1, a2, (void *)inited);
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  return (a2 & 1) == 0;
}

uint64_t LinkRCHFlowFactory.GetFlowConfig.init(bundleId:action:showWhenRun:workflowRunner:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, __int128 *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 24) = a4;
  return outlined init with take of AceServiceInvokerAsync(a5, a6 + 32);
}

void closure #1 in WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)( uint64_t a1, uint64_t a2)
{
  id v2 = *(id *)a1;
  int v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    if ((v3 - 1) >= 2)
    {
      if (v3)
      {
        id v2 = 0LL;
        LOBYTE(v3) = 2;
      }

      else
      {
        id v2 = [v2 output];
      }
    }

    else
    {
      outlined copy of LinkRCHFlowResult(v2, v3);
      LOBYTE(v3) = 1;
    }

    WorkflowRunnerFlow.handleLinkExitValue(_:)(v2, v3);
    outlined consume of LinkExitValue(v2, v3);
  }

id LinkRCHFlowResult.linkExitValue.getter(void *a1, unsigned __int8 a2)
{
  id v2 = a1;
  if (a2 - 1 >= 2)
  {
    if (a2) {
      return 0LL;
    }
    else {
      return OUTLINED_FUNCTION_26((uint64_t)a1, "output");
    }
  }

  else
  {
    outlined copy of LinkRCHFlowResult(a1, a2);
  }

  return v2;
}

uint64_t WorkflowRunnerFlow.handleLinkExitValue(_:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v6);
  uint64_t v119 = (uint64_t)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  uint64_t v8 = __chkstk_darwin(v125);
  uint64_t v124 = (uint64_t *)((char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v109 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  outlined copy of LinkExitValue(a1, a2);
  id v18 = outlined copy of LinkExitValue(a1, a2);
  uint64_t v122 = v17;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  *(void *)&__int128 v123 = v3;
  uint64_t v120 = v13;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v121 = v12;
    uint64_t v24 = v23;
    uint64_t v127 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v118 = (void (*)(char *, char *, uint64_t))(v22 + 4);
    uint64_t v129 = (uint64_t)a1;
    v130[0] = a2;
    outlined copy of LinkExitValue(a1, a2);
    uint64_t v25 = String.init<A>(describing:)(&v129, &type metadata for LinkExitValue);
    uint64_t v26 = v15;
    unint64_t v28 = v27;
    uint64_t v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v130, v118);
    unint64_t v29 = v28;
    uint64_t v15 = v26;
    swift_bridgeObjectRelease(v29);
    outlined consume of LinkExitValue(a1, a2);
    outlined consume of LinkExitValue(a1, a2);
    _os_log_impl(&dword_0, v19, v20, "#WorkflowRunnerFlow handleLinkExitValue received: %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v30 = v24;
    uint64_t v12 = v121;
    swift_slowDealloc(v30, -1LL, -1LL);
    os_log_type_t v31 = v22;
    uint64_t v3 = v123;
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    outlined consume of LinkExitValue(a1, a2);
    outlined consume of LinkExitValue(a1, a2);
  }

  uint64_t v32 = v3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess(v3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state, &v129, 0LL, 0LL);
  outlined init with copy of WorkflowRunnerFlow.State( v32,  (uint64_t)v11,  type metadata accessor for WorkflowRunnerFlow.State);
  if (swift_getEnumCaseMultiPayload(v11, v125) != 1)
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)v11, type metadata accessor for WorkflowRunnerFlow.State);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl(&dword_0, v54, v55, "#WorkflowRunnerFlow handleLinkExitValue received unexpected state", v56, 2u);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    unint64_t v57 = lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v58 = swift_allocError(&type metadata for WorkflowRunnerError, v57, 0LL, 0LL);
    _OWORD *v59 = xmmword_180130;
    os_log_type_t v61 = v124;
    uint64_t v60 = v125;
    *uint64_t v124 = v58;
    uint64_t v62 = v61;
    uint64_t v63 = 9LL;
    goto LABEL_28;
  }

  unint64_t v33 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
  uint64_t v34 = (uint64_t *)&v11[v33[12]];
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];

  uint64_t v37 = &v11[v33[20]];
  uint64_t v38 = *(void (**)(id, void))v37;
  uint64_t v39 = *((void *)v37 + 1);
  uint64_t v118 = *(void (**)(char *, char *, uint64_t))(v120 + 32);
  v118(v15, v11, v12);
  if (!a2)
  {
    uint64_t v117 = v38;
    id v64 = a1;
    char v65 = WorkflowRunnerFlow.shouldSuppressOpensIntent(bundleId:)(v35);
    swift_bridgeObjectRelease(v36);
    if ((v65 & 1) != 0)
    {
      id v66 = [v64 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v66);

      id v116 = [v64 dialog];
      id v115 = [v64 viewSnippet];
      id v114 = [v64 value];
      id v113 = [v64 showOutputActionHint];
      unsigned int v112 = [v64 isDeferred];
      id v111 = [v64 nextAction];
      uint64_t v67 = outlined bridged method (pb) of @objc LNActionOutput.suggestedFollowUpActions.getter(v64);
      uint64_t v121 = v12;
      uint64_t v110 = v67;
      uint64_t v68 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter( v64,  (SEL *)&selRef_activityIdentifier);
      uint64_t v70 = v69;
      uint64_t v71 = a1;
      id v72 = [v64 confirmationActionName];
      uint64_t v73 = v15;
      unsigned __int8 v74 = [v64 shouldShowPrompt];
      id v75 = [v64 confirmationConditions];
      id v76 = [v64 undoContext];
      id v77 = objc_allocWithZone(&OBJC_CLASS___LNActionOutput);
      char v108 = v74;
      uint64_t v15 = v73;
      __int128 v107 = v72;
      a1 = v71;
      uint64_t v12 = v121;
      id v64 = @nonobjc LNActionOutput.init(identifier:dialog:viewSnippet:value:showOutputAction:showOutputActionHint:deferred:nextAction:suggestedFollowUp:activityIdentifier:confirmationActionName:showPrompt:confirmationConditions:undoContext:)( v119,  v116,  v115,  v114,  0LL,  (uint64_t)v113,  v112,  v111,  v110,  v68,  v70,  v107,  v108,  (uint64_t)v75,  v76);
      outlined consume of LinkExitValue(v71, 0);
    }

    id v78 = v64;
    v117(v64, 0LL);

    uint64_t v79 = *(void *)(v123 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 24);
    uint64_t v80 = *(void *)(v123 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 32);
    __swift_project_boxed_opaque_existential_1( (void *)(v123 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner),  v79);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v80 + 24))(v79, v80) & 1) != 0
      && !(BOOL v81 = LNActionOutput.hasCustomOutput()()))
    {
      uint64_t v100 = (os_log_s *)Logger.logObject.getter(v81);
      os_log_type_t v101 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v102 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v102 = 0;
        _os_log_impl( &dword_0,  v100,  v101,  "#WorkflowRunnerFlow.handleSuccessfulOutput dismissing Siri since this is the last step and there is no custom snippet.",  v102,  2u);
        swift_slowDealloc(v102, -1LL, -1LL);
      }

      uint64_t v103 = *(void *)(v123 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker + 24);
      uint64_t v104 = *(void *)(v123 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker + 32);
      __swift_project_boxed_opaque_existential_1( (void *)(v123 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker),  v103);
      id v105 = [objc_allocWithZone(SAUICloseAssistant) init];
      AceServiceInvokerAsync.submitAndForget(_:)(v105, v103, v104);

      swift_release();
      outlined consume of LinkExitValue(a1, 0);

      (*(void (**)(char *, uint64_t))(v120 + 8))(v15, v12);
      os_log_type_t v61 = v124;
      uint64_t v60 = v125;
      uint64_t v62 = v124;
      uint64_t v63 = 10LL;
    }

    else
    {

      swift_release();
      outlined consume of LinkExitValue(a1, 0);
      os_log_type_t v61 = v124;
      v118((char *)v124, v15, v12);
      uint64_t v62 = v61;
      uint64_t v60 = v125;
      uint64_t v63 = 0LL;
    }

    goto LABEL_28;
  }

  if (a2 == 1)
  {
    uint64_t v120 = v39;
    *(void *)&__int128 v123 = v15;
    swift_bridgeObjectRelease(v36);
    outlined copy of LinkExitValue(a1, 1);
    outlined copy of LinkExitValue(a1, 1);
    outlined copy of LinkExitValue(a1, 1);
    swift_errorRetain(a1);
    uint64_t v40 = swift_errorRetain(a1);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc(22LL, -1LL);
      uint64_t v44 = swift_slowAlloc(8LL, -1LL);
      uint64_t v121 = v12;
      uint64_t v45 = (void *)v44;
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      uint64_t v126 = v46;
      *(_DWORD *)uint64_t v43 = 138412546;
      uint64_t v117 = v38;
      swift_errorRetain(a1);
      uint64_t v47 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v127 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128, v43 + 4);
      *uint64_t v45 = v47;
      outlined consume of LinkExitValue(a1, 1);
      outlined consume of LinkExitValue(a1, 1);
      *(_WORD *)(v43 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
      uint64_t v127 = (uint64_t)a1;
      v128[0] = 1;
      swift_errorRetain(a1);
      uint64_t v48 = String.init<A>(describing:)(&v127, &type metadata for LinkExitValue);
      unint64_t v50 = v49;
      uint64_t v127 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v126);
      uint64_t v38 = v117;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128, v43 + 14);
      swift_bridgeObjectRelease(v50);
      outlined consume of LinkExitValue(a1, 1);
      outlined consume of LinkExitValue(a1, 1);
      _os_log_impl( &dword_0,  v41,  v42,  "#WorkflowRunnerFlow.handleSuccessfulOutput received error %@ for %s",  (uint8_t *)v43,  0x16u);
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v45, 1LL, v51);
      id v52 = v45;
      uint64_t v12 = v121;
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
      outlined consume of LinkExitValue(a1, 1);
      outlined consume of LinkExitValue(a1, 1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    v38(0LL, a1);
    outlined consume of LinkExitValue(a1, 1);
    swift_release();
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
    os_log_type_t v61 = v124;
    uint64_t v91 = (char *)v124 + *(int *)(v90 + 48);
    *uint64_t v124 = (uint64_t)a1;
    v118(v91, (char *)v123, v12);
    uint64_t v62 = v61;
    uint64_t v60 = v125;
    uint64_t v63 = 8LL;
LABEL_28:
    swift_storeEnumTagMultiPayload(v62, v60, v63);
    swift_beginAccess(v32, &v127, 33LL, 0LL);
    uint64_t v99 = (uint64_t)v61;
    goto LABEL_29;
  }

  uint64_t v117 = v38;
  uint64_t v121 = v12;
  swift_bridgeObjectRelease(v36);
  outlined copy of LinkExitValue(a1, 2);
  id v82 = outlined copy of LinkExitValue(a1, 2);
  uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
  os_log_type_t v84 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v83, v84))
  {
    *(void *)&__int128 v123 = v15;
    uint64_t v85 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v86 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v85 = 136315138;
    uint64_t v120 = v39;
    uint64_t v126 = v86;
    uint64_t v127 = (uint64_t)a1;
    v128[0] = 2;
    outlined copy of LinkExitValue(a1, 2);
    uint64_t v87 = String.init<A>(describing:)(&v127, &type metadata for LinkExitValue);
    unint64_t v89 = v88;
    uint64_t v127 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, &v126);
    uint64_t v15 = (char *)v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128, v85 + 4);
    swift_bridgeObjectRelease(v89);
    outlined consume of LinkExitValue(a1, 2);
    outlined consume of LinkExitValue(a1, 2);
    _os_log_impl(&dword_0, v83, v84, "#WorkflowRunnerFlow.handleSuccessfulOutput %s", v85, 0xCu);
    swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1LL, -1LL);
    swift_slowDealloc(v85, -1LL, -1LL);
  }

  else
  {
    outlined consume of LinkExitValue(a1, 2);
    outlined consume of LinkExitValue(a1, 2);
  }

  unint64_t v92 = lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
  uint64_t v93 = swift_allocError(&type metadata for WorkflowRunnerError, v92, 0LL, 0LL);
  __int128 v123 = xmmword_180140;
  *uint64_t v94 = xmmword_180140;
  v117(0LL, v93);
  swift_errorRelease(v93);
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
  uint64_t v96 = v124;
  uint64_t v97 = (char *)v124 + *(int *)(v95 + 48);
  *uint64_t v96 = swift_allocError(&type metadata for WorkflowRunnerError, v92, 0LL, 0LL);
  *uint64_t v98 = v123;
  swift_release();
  v118(v97, v15, v121);
  swift_storeEnumTagMultiPayload(v96, v125, 8LL);
  swift_beginAccess(v32, &v127, 33LL, 0LL);
  uint64_t v99 = (uint64_t)v96;
LABEL_29:
  outlined assign with take of WorkflowRunnerFlow.State(v99, v32);
  return swift_endAccess(&v127);
}

Class WorkflowRunnerFlow.getINInteractionFromNSUserActivity(shortcutName:userActivity:bundleId:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = NSUserActivity.__allocating_init(activityType:)(a1, a2, (SEL *)&selRef_initWithSpokenPhrase_);
  id v11 = [objc_allocWithZone(INRunWorkflowIntent) initWithWorkflow:v10];
  outlined bridged method (mbgnn) of @objc INIntent.launchId.setter(a4, a5, v11);
  uint64_t v12 = (objc_class *)[objc_allocWithZone(INRunWorkflowIntentResponse) initWithCode:2 userActivity:a3];
  type metadata accessor for LNAutoShortcut( 0LL,  &lazy cache variable for type metadata for INInteraction,  &OBJC_CLASS___INInteraction_ptr);
  id v13 = v11;
  uint64_t v14 = v12;
  v17.value.super.Class isa = v12;
  Class isa = INInteraction.__allocating_init(intent:response:)((INIntent)v13, v17).super.isa;

  return isa;
}

uint64_t WorkflowRunnerFlow.onOpenInteractionFinished(exitValue:)(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v48 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state, v59, 0LL, 0LL);
  outlined init with copy of WorkflowRunnerFlow.State( v13,  (uint64_t)v8,  type metadata accessor for WorkflowRunnerFlow.State);
  if (swift_getEnumCaseMultiPayload(v8, v3) == 4)
  {
    uint64_t v16 = *(void (**)(unint64_t, unint64_t))v14;
    uint64_t v15 = *((void *)v14 + 1);
    uint64_t v53 = v16;
    uint64_t v54 = v15;
    INIntentResponse_optional v17 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v17(v12, v8, v9);
    if (a1 >> 62)
    {
      if (a1 >> 62 == 1)
      {
        uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 24);
        uint64_t v19 = *(void *)(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 32);
        __swift_project_boxed_opaque_existential_1( (void *)(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner),  v18);
        (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
        v53(a1 & 1, 0LL);
        swift_release();
        v17(v6, v12, v9);
        os_log_type_t v20 = v6;
        uint64_t v21 = v3;
        uint64_t v22 = 0LL;
      }

      else
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v41 = type metadata accessor for Logger(0LL);
        uint64_t v42 = __swift_project_value_buffer(v41, (uint64_t)static Logger.voiceCommands);
        uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
        os_log_type_t v44 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v45 = 0;
          _os_log_impl( &dword_0,  v43,  v44,  "#WorkflowRunnerFlow onOpenInteractionFinished needs handoff, completing the flow...",  v45,  2u);
          swift_slowDealloc(v45, -1LL, -1LL);
        }

        swift_release();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        os_log_type_t v20 = v6;
        uint64_t v21 = v3;
        uint64_t v22 = 10LL;
      }
    }

    else
    {
      swift_errorRetain(a1);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v31 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v31, (uint64_t)static Logger.voiceCommands);
      swift_errorRetain(a1);
      uint64_t v32 = swift_errorRetain(a1);
      unint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        os_log_t v52 = v33;
        uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v51 = swift_slowAlloc(32LL, -1LL);
        v58[0] = v51;
        unint64_t v50 = v35;
        *(_DWORD *)uint64_t v35 = 136315138;
        unint64_t v49 = v35 + 4;
        swift_getErrorValue(a1, v57, v56);
        uint64_t v36 = Error.localizedDescription.getter(v56[1], v56[2]);
        unint64_t v38 = v37;
        uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v49);
        swift_bridgeObjectRelease(v38);
        outlined consume of WFOpenInteractionResponse(a1);
        outlined consume of WFOpenInteractionResponse(a1);
        unint64_t v33 = v52;
        uint64_t v39 = v50;
        _os_log_impl(&dword_0, v52, v34, "#WorkflowRunnerFlow onOpenInteractionFinished hitting error: %s", v50, 0xCu);
        uint64_t v40 = v51;
        swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      else
      {
        outlined consume of WFOpenInteractionResponse(a1);
        outlined consume of WFOpenInteractionResponse(a1);
      }

      swift_errorRetain(a1);
      v53(0LL, a1);
      outlined consume of WFOpenInteractionResponse(a1);
      swift_release();
      *(void *)uint64_t v6 = a1;
      v17(v46, v12, v9);
      os_log_type_t v20 = v6;
      uint64_t v21 = v3;
      uint64_t v22 = 8LL;
    }
  }

  else
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)v8, type metadata accessor for WorkflowRunnerFlow.State);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v27 = 0;
      _os_log_impl( &dword_0,  v25,  v26,  "#WorkflowRunnerFlow onOpenInteractionFinished received unexpected state",  v27,  2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    unint64_t v28 = lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v29 = swift_allocError(&type metadata for WorkflowRunnerError, v28, 0LL, 0LL);
    *uint64_t v30 = xmmword_180130;
    *(void *)uint64_t v6 = v29;
    os_log_type_t v20 = v6;
    uint64_t v21 = v3;
    uint64_t v22 = 9LL;
  }

  swift_storeEnumTagMultiPayload(v20, v21, v22);
  swift_beginAccess(v13, v58, 33LL, 0LL);
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v6, v13);
  return swift_endAccess(v58);
}

uint64_t WorkflowRunnerFlow.onExecuteCustomIntentFinished(exitValue:)( void *a1, uint64_t a2, unsigned __int8 a3)
{
  *(void *)&__int128 v88 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmIntentResponseError?);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v89 = (uint64_t *)((char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v84 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  INIntentResponse_optional v17 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = v3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess(v18, v94, 0LL, 0LL);
  uint64_t v90 = v18;
  outlined init with copy of WorkflowRunnerFlow.State( v18,  (uint64_t)v13,  type metadata accessor for WorkflowRunnerFlow.State);
  uint64_t v91 = v9;
  if (swift_getEnumCaseMultiPayload(v13, v9) == 2)
  {
    os_log_type_t v20 = *(void (**)(Class, void *))v19;
    uint64_t v86 = *((void *)v19 + 1);
    uint64_t v87 = v20;
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v21(v17, v13, v14);
    int v23 = a3;
    BOOL v22 = a3 == 0;
    uint64_t v24 = v17;
    if (v22)
    {
      swift_errorRetain(a1);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v47 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v47, (uint64_t)static Logger.voiceCommands);
      swift_errorRetain(a1);
      uint64_t v48 = swift_errorRetain(a1);
      unint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
      os_log_type_t v50 = static os_log_type_t.debug.getter();
      BOOL v51 = os_log_type_enabled(v49, v50);
      uint64_t v85 = v14;
      if (v51)
      {
        uint64_t v52 = swift_slowAlloc(12LL, -1LL);
        os_log_type_t v84 = v21;
        uint64_t v53 = (uint8_t *)v52;
        uint64_t v54 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v53 = 138412290;
        swift_errorRetain(a1);
        uint64_t v55 = _swift_stdlib_bridgeErrorToNSError(a1);
        uint64_t v92 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v53 + 4);
        *uint64_t v54 = v55;
        uint64_t v56 = (void *)v88;
        outlined consume of CustomIntentExecutionResult(a1, (void *)v88, 0);
        outlined consume of CustomIntentExecutionResult(a1, v56, 0);
        _os_log_impl( &dword_0,  v49,  v50,  "#WorkflowRunnerFlow onExecuteCustomIntentFinished received error: %@",  v53,  0xCu);
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v54, 1LL, v57);
        swift_slowDealloc(v54, -1LL, -1LL);
        uint64_t v58 = v53;
        uint64_t v21 = v84;
        swift_slowDealloc(v58, -1LL, -1LL);
      }

      else
      {
        unsigned __int8 v74 = (void *)v88;
        outlined consume of CustomIntentExecutionResult(a1, (void *)v88, 0);
        outlined consume of CustomIntentExecutionResult(a1, v74, 0);
      }

      uint64_t v92 = (uint64_t)a1;
      swift_errorRetain(a1);
      uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v76 = type metadata accessor for ConfirmIntentResponseError(0LL);
      if (swift_dynamicCast(v8, &v92, v75, v76, 6LL))
      {
        __swift_storeEnumTagSinglePayload((uint64_t)v8, 0LL, 1LL, v76);
        uint64_t v77 = *(void *)(v76 - 8);
        int v78 = (*(uint64_t (**)(char *, uint64_t))(v77 + 88))(v8, v76);
        int v79 = enum case for ConfirmIntentResponseError.continueInApp(_:);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v8, v76);
        BOOL v22 = v78 == v79;
        uint64_t v80 = v85;
        if (v22)
        {
          v87(0LL, 0LL);
          outlined consume of CustomIntentExecutionResult(a1, (void *)v88, 0);
          swift_release();
          uint64_t v32 = v89;
          unint64_t v33 = v89;
          os_log_type_t v34 = v24;
          uint64_t v35 = v80;
          goto LABEL_24;
        }
      }

      else
      {
        __swift_storeEnumTagSinglePayload((uint64_t)v8, 1LL, 1LL, v76);
        outlined destroy of Result<Output, Error>( (uint64_t)v8,  &demangling cache variable for type metadata for ConfirmIntentResponseError?);
        uint64_t v80 = v85;
      }

      swift_errorRetain(a1);
      v87(0LL, a1);
      outlined consume of CustomIntentExecutionResult(a1, (void *)v88, 0);
      swift_release();
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
      uint64_t v32 = v89;
      uint64_t v71 = (char *)v89 + *(int *)(v81 + 48);
      *unint64_t v89 = (uint64_t)a1;
      id v72 = v24;
      uint64_t v73 = v80;
    }

    else
    {
      if (v23 == 1)
      {
        type metadata accessor for LNAutoShortcut( 0LL,  &lazy cache variable for type metadata for INInteraction,  &OBJC_CLASS___INInteraction_ptr);
        uint64_t v25 = (objc_class *)v88;
        id v26 = (id)v88;
        id v27 = a1;
        id v28 = v26;
        id v29 = v27;
        v95.value.super.Class isa = v25;
        uint64_t v30 = v24;
        Class isa = INInteraction.__allocating_init(intent:response:)((INIntent)v29, v95).super.isa;
        v87(isa, 0LL);
        swift_release();

        uint64_t v32 = v89;
        unint64_t v33 = v89;
        os_log_type_t v34 = v30;
        uint64_t v35 = v14;
LABEL_24:
        v21((char *)v33, v34, v35);
        os_log_type_t v44 = v32;
        uint64_t v45 = v91;
        uint64_t v46 = 0LL;
        goto LABEL_28;
      }

      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v59 = v17;
      uint64_t v60 = type metadata accessor for Logger(0LL);
      uint64_t v61 = __swift_project_value_buffer(v60, (uint64_t)static Logger.voiceCommands);
      uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
      os_log_type_t v63 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v62, v63))
      {
        id v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v64 = 0;
        _os_log_impl(&dword_0, v62, v63, "#WorkflowRunnerFlow onExecuteCustomIntentFinished cancelled", v64, 2u);
        swift_slowDealloc(v64, -1LL, -1LL);
      }

      unint64_t v65 = lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
      uint64_t v66 = swift_allocError(&type metadata for WorkflowRunnerError, v65, 0LL, 0LL);
      __int128 v88 = xmmword_180140;
      *uint64_t v67 = xmmword_180140;
      v87(0LL, (void *)v66);
      swift_errorRelease(v66);
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
      uint64_t v32 = v89;
      uint64_t v69 = (char *)v89 + *(int *)(v68 + 48);
      *uint64_t v32 = swift_allocError(&type metadata for WorkflowRunnerError, v65, 0LL, 0LL);
      *uint64_t v70 = v88;
      swift_release();
      uint64_t v71 = v69;
      id v72 = v59;
      uint64_t v73 = v14;
    }

    v21(v71, v72, v73);
    os_log_type_t v44 = v32;
    uint64_t v45 = v91;
    uint64_t v46 = 8LL;
    goto LABEL_28;
  }

  outlined destroy of AutoShortcutInvocation((uint64_t)v13, type metadata accessor for WorkflowRunnerFlow.State);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  uint64_t v37 = __swift_project_value_buffer(v36, (uint64_t)static Logger.voiceCommands);
  unint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v40 = 0;
    _os_log_impl( &dword_0,  v38,  v39,  "#WorkflowRunnerFlow onExecuteCustomIntentFinished received unexpected state",  v40,  2u);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  unint64_t v41 = lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
  uint64_t v42 = swift_allocError(&type metadata for WorkflowRunnerError, v41, 0LL, 0LL);
  *uint64_t v43 = xmmword_180130;
  uint64_t v32 = v89;
  *unint64_t v89 = v42;
  os_log_type_t v44 = v32;
  uint64_t v45 = v91;
  uint64_t v46 = 9LL;
LABEL_28:
  swift_storeEnumTagMultiPayload(v44, v45, v46);
  uint64_t v82 = v90;
  swift_beginAccess(v90, &v92, 33LL, 0LL);
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v32, v82);
  return swift_endAccess(&v92);
}

uint64_t implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:)( void *a1, char a2)
{
  return WorkflowRunnerFlow.onExecuteDialogRequestFinished(exitValue:)(a1, a2 & 1);
}

uint64_t WorkflowRunnerFlow.onExecuteDialogRequestFinished(exitValue:)(void *a1, char a2)
{
  uint64_t v5 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v48 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v46 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess(v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state, v51, 0LL, 0LL);
  outlined init with copy of WorkflowRunnerFlow.State( v14,  (uint64_t)v9,  type metadata accessor for WorkflowRunnerFlow.State);
  uint64_t v49 = v5;
  if (swift_getEnumCaseMultiPayload(v9, v5) == 3)
  {
    INIntentResponse_optional v17 = *(void (**)(void))v15;
    uint64_t v16 = *((void *)v15 + 1);
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v18(v13, v9, v10);
    if ((a2 & 1) != 0)
    {
      uint64_t v46 = v16;
      uint64_t v47 = v17;
      id v33 = objc_allocWithZone(&OBJC_CLASS___WFDialogResponse);
      uint64_t v34 = (uint64_t)a1;
      swift_errorRetain(a1);
      id v35 = [v33 initWithResponseCode:1];
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v36 = v18;
      uint64_t v37 = type metadata accessor for Logger(0LL);
      uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        unint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v41 = 0;
        _os_log_impl(&dword_0, v39, v40, "#WorkflowRunnerFlow onExecuteDialogRequest received error", v41, 2u);
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      ((void (*)(id))v47)(v35);
      swift_release();

      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
      uint64_t v22 = (uint64_t)v48;
      uint64_t v43 = (char *)v48 + *(int *)(v42 + 48);
      *uint64_t v48 = v34;
      v36(v43, v13, v10);
      int v23 = (uint64_t *)v22;
      uint64_t v21 = v49;
      uint64_t v24 = 8LL;
    }

    else
    {
      id v19 = a1;
      v17();
      unsigned __int8 v20 = [v19 isCancelled];
      swift_release();
      outlined consume of DialogResponse(a1, 0);
      if ((v20 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        uint64_t v22 = (uint64_t)v48;
        uint64_t v21 = v49;
        int v23 = v48;
        uint64_t v24 = 11LL;
      }

      else
      {
        os_log_type_t v44 = (void (*)(uint64_t *, char *, uint64_t))v18;
        uint64_t v22 = (uint64_t)v48;
        v44(v48, v13, v10);
        int v23 = (uint64_t *)v22;
        uint64_t v21 = v49;
        uint64_t v24 = 0LL;
      }
    }
  }

  else
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)v9, type metadata accessor for WorkflowRunnerFlow.State);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
    id v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v29 = 0;
      _os_log_impl( &dword_0,  v27,  v28,  "#WorkflowRunnerFlow onExecuteDialogRequestFinished received unexpected state",  v29,  2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    unint64_t v30 = lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v31 = swift_allocError(&type metadata for WorkflowRunnerError, v30, 0LL, 0LL);
    *uint64_t v32 = xmmword_180130;
    uint64_t v22 = (uint64_t)v48;
    uint64_t v21 = v49;
    *uint64_t v48 = v31;
    int v23 = (uint64_t *)v22;
    uint64_t v24 = 9LL;
  }

  swift_storeEnumTagMultiPayload(v23, v21, v24);
  swift_beginAccess(v14, v50, 33LL, 0LL);
  outlined assign with take of WorkflowRunnerFlow.State(v22, v14);
  return swift_endAccess(v50);
}

uint64_t WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  v30[1] = a4;
  uint64_t v9 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.voiceCommands);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_0, v14, v15, "#WorkflowRunnerFlow createUnsupportedPunchOutOnCarPlayFlow", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  outlined init with copy of AppShortcutInvoking( (uint64_t)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher],  (uint64_t)v32);
  outlined init with copy of AppShortcutInvoking( (uint64_t)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker],  (uint64_t)v31);
  uint64_t v17 = swift_allocObject(&unk_1F47F0, 24LL, 7LL);
  *(void *)(v17 + 16) = v5;
  uint64_t v18 = type metadata accessor for ShowOutputAndCloseFlow();
  swift_allocObject(v18, 113LL, 7LL);
  uint64_t v19 = ShowOutputAndCloseFlow.init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)( 0,  v32,  v31,  (uint64_t)&async function pointer to partial apply for closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:),  v17);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))(v11, a1, v21);
  *(void *)unsigned __int8 v20 = a2;
  *((void *)v20 + 1) = a3;
  swift_storeEnumTagMultiPayload(v11, v9, 5LL);
  uint64_t v22 = (uint64_t)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
  swift_beginAccess(&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], v32, 33LL, 0LL);
  int v23 = v5;
  swift_retain(a3);
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v11, v22);
  swift_endAccess(v32);
  *(void *)&v32[0] = v19;
  uint64_t v24 = swift_allocObject(&unk_1F4818, 24LL, 7LL);
  *(void *)(v24 + 16) = v23;
  uint64_t v25 = swift_allocObject(&unk_1F4840, 32LL, 7LL);
  *(void *)(v25 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:);
  *(void *)(v25 + 24) = v24;
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( (unint64_t *)&lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow,  (uint64_t (*)(uint64_t))type metadata accessor for ShowOutputAndCloseFlow,  (uint64_t)&protocol conformance descriptor for ShowOutputAndCloseFlow);
  uint64_t v27 = v26;
  os_log_type_t v28 = v23;
  static ExecuteResponse.ongoing<A>(next:childCompletion:)( v32,  thunk for @escaping @callee_guaranteed () -> ()partial apply,  v25,  v18,  v27);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)( uint64_t a1, uint64_t a2)
{
  v2[7] = a1;
  _BYTE v2[8] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  void v2[9] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v2[13] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[14] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[15] = swift_task_alloc(v8);
  v2[16] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[17] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[18] = v10;
  v2[19] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v2[20] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[21] = v12;
  v2[22] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:),  0LL,  0LL);
}

uint64_t closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[8];
  (*(void (**)(void, void, void))(v1 + 104))( v0[22],  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v0[20]);
  char v3 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  uint64_t v4 = **(void **)(v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogTemplating);
  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v4 + 312));
    v0[23] = v5;
    *uint64_t v5 = v0;
    v5[1] = closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:);
    return OUTLINED_FUNCTION_18_2(v8);
  }

  else
  {
    uint64_t v7 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v4 + 320));
    v0[28] = v7;
    *uint64_t v7 = v0;
    v7[1] = closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:);
    return ((uint64_t (*)(void))v8)(v0[12]);
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  OUTLINED_FUNCTION_41_2();
  uint64_t v10 = v2;
  uint64_t v11 = v3;
  uint64_t v9 = v1;
  uint64_t v5 = v4;
  uint64_t v6 = *v1;
  uint64_t v9 = (uint64_t *)*v1;
  OUTLINED_FUNCTION_10_0(&v9);
  swift_task_dealloc(v7);
  if (v0)
  {
    swift_task_dealloc(*(void *)(v6 + 176));
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_31();
    return OUTLINED_FUNCTION_3_14((uint64_t (*)(void))v1[1]);
  }

  else
  {
    *(void *)(v6 + 19outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v5;
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 216));
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_0_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  OUTLINED_FUNCTION_104();
  uint64_t v1 = *(void *)(v0 + 144);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_84_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_18_2(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_51_3();
  *(void *)(v1 + 23outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  OUTLINED_FUNCTION_28_1();
  uint64_t v4 = *(void *)(v1 + 88);
  char v3 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = *(void **)(v1 + 56);
  OUTLINED_FUNCTION_70_1(*(void *)(v1 + 64));
  uint64_t v7 = OUTLINED_FUNCTION_111();
  __swift_storeEnumTagSinglePayload(v5, 1LL, 1LL, v7);
  unint64_t v8 = OUTLINED_FUNCTION_54_4();
  *(_OWORD *)(v1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
  *(void *)(v1 + 48) = 0LL;
  *(_OWORD *)(v1 + 16) = 0u;
  void v6[3] = v8;
  v6[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v3,  v2,  v0 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v5,  _swiftEmptyArrayStorage);
  outlined destroy of Result<Output, Error>( v1 + 16,  (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Result<Output, Error>(v5, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_30_1(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_84_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v9 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_39_5(v9);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_41_2();
  swift_task_dealloc(*(void *)(v0 + 176));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = (void *)v11[24];
  uint64_t v14 = v11[15];
  uint64_t v13 = v11[16];
  uint64_t v15 = v11[13];
  uint64_t v16 = v11[14];
  uint64_t v17 = static DialogPhase.clarification.getter();
  id v18 = OUTLINED_FUNCTION_26(v17, "catId");
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v13, v15);
  OUTLINED_FUNCTION_68_1(v14, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OutputGenerationManifest.responseViewId.setter(v19);
  uint64_t v20 = OUTLINED_FUNCTION_159();
  v21(v20);
  OutputGenerationManifest.listenAfterSpeaking.setter(0LL);
  uint64_t v22 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_51(v22);
  v11[25] = OUTLINED_FUNCTION_57();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = OUTLINED_FUNCTION_19(v23, 40LL);
  *(_OWORD *)(v24 + 16) = xmmword_17E150;
  *(void *)(v24 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v12;
  OUTLINED_FUNCTION_25_0(v24, v25, v26);
  v11[26] = a11;
  id v28 = v12;
  id v29 = (uint64_t **)swift_task_alloc(v27);
  v11[27] = (uint64_t)v29;
  *id v29 = v11;
  v29[1] = (uint64_t *)closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:);
  return OUTLINED_FUNCTION_11_6(v11[7], a11, v11[19], v31);
}

uint64_t WorkflowRunnerFlow.punchOutCompletion()()
{
  uint64_t v1 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v28 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state, v31, 0LL, 0LL);
  outlined init with copy of WorkflowRunnerFlow.State( v11,  (uint64_t)v6,  type metadata accessor for WorkflowRunnerFlow.State);
  if (swift_getEnumCaseMultiPayload(v6, v1) == 5)
  {
    uint64_t v28 = v1;
    id v29 = v4;
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v13(v10, v6, v7);
    uint64_t v14 = *(void *)(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState + 24);
    uint64_t v15 = *(void *)(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState + 32);
    __swift_project_boxed_opaque_existential_1( (void *)(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState),  v14);
    if ((dispatch thunk of DeviceState.isCarPlay.getter(v14, v15) & 1) != 0)
    {
      v12(0LL);
      swift_release();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      uint64_t v16 = v28;
      uint64_t v4 = v29;
      uint64_t v17 = v29;
      uint64_t v18 = 10LL;
    }

    else
    {
      v12(1LL);
      swift_release();
      uint64_t v4 = v29;
      v13((char *)v29, v10, v7);
      uint64_t v17 = v4;
      uint64_t v16 = v28;
      uint64_t v18 = 0LL;
    }
  }

  else
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)v6, type metadata accessor for WorkflowRunnerFlow.State);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_0, v21, v22, "#WorkflowRunnerFlow punchOutCompletion received unexpected state", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    unint64_t v24 = lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v25 = swift_allocError(&type metadata for WorkflowRunnerError, v24, 0LL, 0LL);
    _OWORD *v26 = xmmword_180130;
    *uint64_t v4 = v25;
    uint64_t v17 = v4;
    uint64_t v16 = v1;
    uint64_t v18 = 9LL;
  }

  swift_storeEnumTagMultiPayload(v17, v16, v18);
  swift_beginAccess(v11, v30, 33LL, 0LL);
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v4, v11);
  return swift_endAccess(v30);
}

uint64_t closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)(uint64_t a1, uint64_t a2)
{
  void v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:), 0LL, 0LL);
}

uint64_t closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)()
{
  uint64_t v1 = type metadata accessor for ShortcutsUnlockDeviceStrategy();
  static Device.current.getter(v20, v1);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = static WFDialogState.shared;
  type metadata accessor for RunCustomIntentCATs(0LL);
  uint64_t v5 = OUTLINED_FUNCTION_14_8();
  static CATOption.defaultMode.getter(v5);
  uint64_t v6 = OUTLINED_FUNCTION_97(v2);
  type metadata accessor for RunCustomIntentCATsSimple(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v7 = OUTLINED_FUNCTION_96(v2);
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v8 = OUTLINED_FUNCTION_97(v2);
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v9 = OUTLINED_FUNCTION_96(v2);
  uint64_t v10 = type metadata accessor for AppNameResolver();
  uint64_t v11 = OUTLINED_FUNCTION_19(v10, 16LL);
  uint64_t v12 = type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v13 = OUTLINED_FUNCTION_19(v12, 152LL);
  specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( v20,  v4,  0LL,  1,  v6,  v7,  v8,  v9,  v11,  v13);
  uint64_t v15 = v14;
  v0[5] = v14;
  uint64_t v16 = v3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState;
  uint64_t v17 = (void *)swift_task_alloc(dword_21707C);
  v0[6] = v17;
  *uint64_t v17 = v0;
  v17[1] = closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:);
  uint64_t v18 = OUTLINED_FUNCTION_89_0();
  return static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:)(v18, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_10_0(v2);
  *(void *)(v0 + 56) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_0_0();
  }

  else
  {
    swift_release();
    OUTLINED_FUNCTION_40_0();
    uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
    return OUTLINED_FUNCTION_3_14(v5);
  }

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WorkflowRunnerFlow.onAppResolutionFlowResult(exitValue:)( void (*a1)(void, void, void))
{
  uint64_t v103 = a1;
  uint64_t v2 = type metadata accessor for AppResolutionFlowResult(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  os_log_type_t v101 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v102 = (char *)&v92 - v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v92 - v8;
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  id v105 = (uint64_t *)((char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v92 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess(v19, v109, 0LL, 0LL);
  uint64_t v104 = v19;
  outlined init with copy of WorkflowRunnerFlow.State( v19,  (uint64_t)v14,  type metadata accessor for WorkflowRunnerFlow.State);
  if (swift_getEnumCaseMultiPayload(v14, v10) == 6)
  {
    os_log_type_t v22 = *(void (**)(uint64_t, uint64_t))v20;
    uint64_t v21 = *((void *)v20 + 1);
    uint64_t v99 = v22;
    uint64_t v100 = v21;
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v23(v18, v14, v15);
    unint64_t v24 = *(void (**)(char *, void, uint64_t))(v3 + 16);
    uint64_t v25 = v103;
    v24(v9, v103, v2);
    int v26 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v9, v2);
    if (v26 == enum case for AppResolutionFlowResult.resolved(_:))
    {
      uint64_t v103 = (void (*)(void, void, void))v23;
      (*(void (**)(char *, uint64_t))(v3 + 96))(v9, v2);
      uint64_t v27 = *(void *)v9;
    }

    else
    {
      if (v26 != enum case for AppResolutionFlowResult.resolvedWithIntent(_:))
      {
        if (v26 != enum case for AppResolutionFlowResult.error(_:))
        {
          if (v26 == enum case for AppResolutionFlowResult.cancelled(_:))
          {
            uint64_t v67 = v18;
            if (one-time initialization token for voiceCommands != -1) {
              swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
            }
            uint64_t v68 = type metadata accessor for Logger(0LL);
            uint64_t v69 = __swift_project_value_buffer(v68, (uint64_t)static Logger.voiceCommands);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v70, v71))
            {
              id v72 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)id v72 = 0;
              _os_log_impl(&dword_0, v70, v71, "#WorkflowRunnerFlow onAppResolutionFlowResult cancelled", v72, 2u);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            v99(0LL, 0LL);
            swift_release();
            uint64_t v18 = v67;
          }

          else
          {
            uint64_t v95 = v3;
            uint64_t v96 = v9;
            uint64_t v98 = v18;
            if (one-time initialization token for voiceCommands != -1) {
              swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
            }
            uint64_t v73 = type metadata accessor for Logger(0LL);
            __swift_project_value_buffer(v73, (uint64_t)static Logger.voiceCommands);
            unsigned __int8 v74 = v102;
            uint64_t v75 = v25;
            uint64_t v76 = v2;
            uint64_t v77 = ((uint64_t (*)(char *, void, uint64_t))v24)(v102, v75, v2);
            int v78 = (os_log_s *)Logger.logObject.getter(v77);
            os_log_type_t v79 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v78, v79))
            {
              uint64_t v80 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v94 = swift_slowAlloc(32LL, -1LL);
              uint64_t v107 = v94;
              uint64_t v81 = v74;
              uint64_t v97 = v15;
              uint64_t v103 = (void (*)(void, void, void))v10;
              uint64_t v93 = v80;
              *(_DWORD *)uint64_t v80 = 136315138;
              uint64_t v82 = v80 + 4;
              uint64_t v83 = v101;
              v24(v101, v74, v76);
              uint64_t v84 = String.init<A>(describing:)(v83, v76);
              unint64_t v86 = v85;
              uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v107);
              uint64_t v87 = v82;
              uint64_t v10 = (uint64_t)v103;
              uint64_t v15 = v97;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v87);
              swift_bridgeObjectRelease(v86);
              __int128 v88 = *(void (**)(char *, uint64_t))(v95 + 8);
              v88(v81, v76);
              os_log_type_t v89 = v79;
              uint64_t v90 = v93;
              _os_log_impl( &dword_0,  v78,  v89,  "#WorkflowRunnerFlow onAppResolutionFlowResult received unexpected exitValue: %s",  v93,  0xCu);
              uint64_t v91 = v94;
              swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v91, -1LL, -1LL);
              swift_slowDealloc(v90, -1LL, -1LL);
            }

            else
            {
              __int128 v88 = *(void (**)(char *, uint64_t))(v95 + 8);
              v88(v74, v2);
            }

            uint64_t v18 = v98;
            v99(0LL, 0LL);
            swift_release();
            v88(v96, v76);
          }

          uint64_t v40 = v15;
          goto LABEL_18;
        }

        uint64_t v103 = (void (*)(void, void, void))v23;
        uint64_t v98 = v18;
        (*(void (**)(char *, uint64_t))(v3 + 96))(v9, v2);
        uint64_t v56 = *(void *)v9;
        int v57 = v9[8];
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v58 = type metadata accessor for Logger(0LL);
        __swift_project_value_buffer(v58, (uint64_t)static Logger.voiceCommands);
        swift_errorRetain(v56);
        uint64_t v59 = swift_errorRetain(v56);
        uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
        os_log_type_t v61 = static os_log_type_t.error.getter();
        uint64_t v40 = v15;
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = swift_slowAlloc(18LL, -1LL);
          os_log_type_t v63 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v62 = 138412546;
          LODWORD(v10outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v57;
          swift_errorRetain(v56);
          uint64_t v64 = v10;
          uint64_t v65 = _swift_stdlib_bridgeErrorToNSError(v56);
          uint64_t v107 = v65;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v62 + 4);
          *os_log_type_t v63 = v65;
          uint64_t v10 = v64;
          swift_errorRelease(v56);
          swift_errorRelease(v56);
          *(_WORD *)(v62 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 1024;
          LODWORD(v10__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = (_DWORD)v102;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, (char *)&v107 + 4, v62 + 14);
          _os_log_impl( &dword_0,  v60,  v61,  "#WorkflowRunnerFlow onAppResolutionFlowResult w/ error: %@; \n\t handled=%{BOOL}d",
            (uint8_t *)v62,
            0x12u);
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy(v63, 1LL, v66);
          swift_slowDealloc(v63, -1LL, -1LL);
          swift_slowDealloc(v62, -1LL, -1LL);
        }

        else
        {
          swift_errorRelease(v56);
          swift_errorRelease(v56);
        }

        uint64_t v18 = v98;

        swift_errorRetain(v56);
        v99(0LL, v56);
        swift_errorRelease(v56);
        swift_release();
        swift_errorRelease(v56);
LABEL_17:
        uint64_t v23 = (void (*)(char *, char *, uint64_t))v103;
LABEL_18:
        uint64_t v36 = (uint64_t)v105;
        v23((char *)v105, v18, v40);
        uint64_t v37 = v36;
        uint64_t v38 = v10;
        uint64_t v39 = 0LL;
        goto LABEL_19;
      }

      uint64_t v103 = (void (*)(void, void, void))v23;
      (*(void (**)(char *, uint64_t))(v3 + 96))(v9, v2);
      uint64_t v27 = *(void *)v9;
    }

    uint64_t v40 = v15;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v41 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v41, (uint64_t)static Logger.voiceCommands);
    uint64_t v42 = swift_retain(v27);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      uint64_t v98 = v18;
      uint64_t v47 = v46;
      uint64_t v106 = v27;
      uint64_t v107 = v46;
      uint64_t v97 = v40;
      *(_DWORD *)uint64_t v45 = 136315138;
      uint64_t v48 = type metadata accessor for App(0LL);
      lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type App and conformance App,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
      unint64_t v52 = v51;
      uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v107);
      uint64_t v40 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v45 + 4);
      swift_release_n(v27, 2LL);
      swift_bridgeObjectRelease(v52);
      _os_log_impl(&dword_0, v43, v44, "#WorkflowRunnerFlow onAppResolutionFlowResult resolved app: %s", v45, 0xCu);
      swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v53 = v47;
      uint64_t v18 = v98;
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v27, 2LL);
    }

    v99(1LL, 0LL);
    swift_release();
    goto LABEL_17;
  }

  outlined destroy of AutoShortcutInvocation((uint64_t)v14, type metadata accessor for WorkflowRunnerFlow.State);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
  unint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl(&dword_0, v30, v31, "#WorkflowRunnerFlow onAppResolutionFlowResult received unexpected state", v32, 2u);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  unint64_t v33 = lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
  uint64_t v34 = swift_allocError(&type metadata for WorkflowRunnerError, v33, 0LL, 0LL);
  *id v35 = xmmword_180130;
  uint64_t v36 = (uint64_t)v105;
  *id v105 = v34;
  uint64_t v37 = v36;
  uint64_t v38 = v10;
  uint64_t v39 = 9LL;
LABEL_19:
  swift_storeEnumTagMultiPayload(v37, v38, v39);
  uint64_t v54 = v104;
  swift_beginAccess(v104, &v107, 33LL, 0LL);
  outlined assign with take of WorkflowRunnerFlow.State(v36, v54);
  return swift_endAccess(&v107);
}

void closure #1 in WorkflowRunnerFlow.guardLocationAccess(needsPreciseLocation:iterator:_:)( uint64_t a1, void *a2, char *a3)
{
  uint64_t v5 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v64 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v59 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  outlined init with copy of AppShortcutInvoking((uint64_t)a2, (uint64_t)v71);
  outlined init with copy of AppShortcutInvoking((uint64_t)a2, (uint64_t)v68);
  uint64_t v63 = v15;
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v65 = v13;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v21 = swift_slowAlloc(64LL, -1LL);
    uint64_t v59 = a3;
    uint64_t v22 = v21;
    uint64_t v67 = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v60 = v5;
    uint64_t v62 = v10;
    uint64_t v24 = v72;
    uint64_t v23 = v73;
    __swift_project_boxed_opaque_existential_1(v71, v72);
    uint64_t v25 = *(void *)(v23 + 8);
    uint64_t v61 = v11;
    dispatch thunk of Flow.exitValue.getter(&v66, v24, v25);
    uint64_t v26 = GuardFlowResult.description.getter(v66);
    unint64_t v28 = v27;
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v20 + 4);
    swift_bridgeObjectRelease(v28);
    __swift_destroy_boxed_opaque_existential_1Tm(v71);
    *(_WORD *)(v20 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
    uint64_t v30 = v69;
    uint64_t v29 = v70;
    __swift_project_boxed_opaque_existential_1(v68, v69);
    uint64_t v31 = v30;
    uint64_t v10 = v62;
    uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v31, v29);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    uint64_t v33 = String.init<A>(describing:)(&v66, v32);
    unint64_t v35 = v34;
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v67);
    uint64_t v5 = v60;
    uint64_t v11 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v20 + 14);
    swift_bridgeObjectRelease(v35);
    __swift_destroy_boxed_opaque_existential_1Tm(v68);
    _os_log_impl( &dword_0,  v17,  v18,  "#WorkflowRunnerFlow guardLocationAccess - received guardFlow response; exitValue=%s; failure: %s",
      (uint8_t *)v20,
      0x16u);
    swift_arrayDestroy(v22, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v36 = v22;
    a3 = v59;
    swift_slowDealloc(v36, -1LL, -1LL);
    uint64_t v37 = v20;
    uint64_t v13 = v65;
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v71);
    __swift_destroy_boxed_opaque_existential_1Tm(v68);
  }

  uint64_t v38 = (uint64_t)&a3[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
  swift_beginAccess(&a3[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], v71, 0LL, 0LL);
  outlined init with copy of WorkflowRunnerFlow.State( v38,  (uint64_t)v9,  type metadata accessor for WorkflowRunnerFlow.State);
  if (swift_getEnumCaseMultiPayload(v9, v5) == 7)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v40 = v11;
    uint64_t v41 = v64;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v64, v13, v10);
    swift_storeEnumTagMultiPayload(v41, v5, 0LL);
    swift_beginAccess(v38, v68, 33LL, 0LL);
    outlined assign with take of WorkflowRunnerFlow.State(v41, v38);
    swift_endAccess(v68);
    uint64_t v42 = a2[3];
    uint64_t v43 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v42);
    dispatch thunk of Flow.exitValue.getter(v68, v42, *(void *)(v43 + 8));
    int v44 = LOBYTE(v68[0]);
    uint64_t v45 = a2[3];
    uint64_t v46 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v45);
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 16))(v45, v46);
    if (v47)
    {
      uint64_t v48 = v47;
      swift_errorRetain(v47);
      swift_errorRetain(v48);
      v39(0, v48);
      swift_release();
      swift_errorRelease(v48);
      swift_errorRelease(v48);
      swift_errorRelease(v48);
    }

    else
    {
      v39(v44 == 0, 0LL);
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v65, v10);
  }

  else
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)v9, type metadata accessor for WorkflowRunnerFlow.State);
    uint64_t v49 = a3;
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      unint64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      v68[0] = v53;
      *(_DWORD *)unint64_t v52 = 136315138;
      uint64_t v54 = v38;
      uint64_t v55 = v64;
      outlined init with copy of WorkflowRunnerFlow.State(v54, v64, type metadata accessor for WorkflowRunnerFlow.State);
      uint64_t v56 = String.init<A>(describing:)(v55, v5);
      unint64_t v58 = v57;
      uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v52 + 4);

      swift_bridgeObjectRelease(v58);
      _os_log_impl(&dword_0, v50, v51, "#WorkflowRunnerFlow guardLocationAccess - unexpected state=%s", v52, 0xCu);
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t WorkflowRunnerFlow.shouldSuppressOpensIntent(bundleId:)(uint64_t a1)
{
  uint64_t v1 = v16;
  uint64_t v2 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  LOBYTE(v1) = DeviceState.isVox.getter(v1, v2);
  outlined init with copy of AppShortcutInvoking((uint64_t)v15, (uint64_t)v13);
  if ((v1 & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v13);
    outlined init with copy of AppShortcutInvoking((uint64_t)v15, (uint64_t)v10);
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1Tm(v10);
    goto LABEL_5;
  }

  uint64_t v3 = v14;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  LOBYTE(v3) = dispatch thunk of DeviceState.isHomePod.getter(v3);
  __swift_destroy_boxed_opaque_existential_1Tm(v13);
  outlined init with copy of AppShortcutInvoking((uint64_t)v15, (uint64_t)v10);
  if ((v3 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v6 = v11;
  uint64_t v7 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  LOBYTE(v6) = dispatch thunk of DeviceState.isLockedWithPasscode.getter(v6, v7);
  __swift_destroy_boxed_opaque_existential_1Tm(v10);
  if ((v6 & 1) == 0)
  {
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    dispatch thunk of DeviceState.isCarPlay.getter(v8, v9);
    uint64_t v4 = 0LL;
    goto LABEL_6;
  }

LABEL_5:
  uint64_t v4 = 1LL;
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1Tm(v15);
  return v4;
}

  uint64_t v20 = *v4;
  if ((v17 & 1) != 0)
  {
    *(_BYTE *)(*(void *)(v20 + 56) + v16) = a1 & 1;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    specialized _NativeDictionary._insert(at:key:value:)(v16, (uint64_t)v11, a1 & 1, v20);
  }

  OUTLINED_FUNCTION_24_0();
}

    return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v6 = dword_21FF74;
  uint64_t v7 = *(id *)(v0 + 24);
  uint64_t v8 = (void *)swift_task_alloc(v6);
  *(void *)(v0 + 40) = v8;
  *uint64_t v8 = v0;
  v8[1] = RouteDialogRequestResponseFlow.handleDialogRequest(dialogRequest:);
  return RouteDialogRequestResponseFlow.handleHandleInteraction(request:)(*(void *)(v0 + 16));
}

id NSUserActivity.__allocating_init(activityType:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v8 = objc_msgSend(v6, *a3, v7);

  return v8;
}

id AnonymousConnectionDelegate.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void WorkflowRunnerFlow.init()()
{
}

id AnonymousConnectionDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t protocol witness for Flow.on(input:) in conformance WorkflowRunnerFlow()
{
  return WorkflowRunnerFlow.on(input:)() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WorkflowRunnerFlow()
{
  return WorkflowRunnerFlow.execute(completion:)();
}

uint64_t protocol witness for Flow.execute() in conformance WorkflowRunnerFlow(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_215EBC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance WorkflowRunnerFlow;
  return WorkflowRunnerFlow.execute()(a1);
}

uint64_t protocol witness for Flow.execute() in conformance WorkflowRunnerFlow()
{
  return OUTLINED_FUNCTION_27_2(v0[1]);
}

void LinkRCHFlowFactory.GetFlowConfig.bundleId.getter()
{
}

void LinkRCHFlowFactory.GetFlowConfig.action.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  OUTLINED_FUNCTION_1();
}

uint64_t LinkRCHFlowFactory.GetFlowConfig.showWhenRun.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t LinkRCHFlowFactory.GetFlowConfig.showWhenRun.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 24) = result;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *LinkRCHFlowFactory.GetFlowConfig.showWhenRun.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void LinkRCHFlowFactory.GetFlowConfig.workflowRunner.getter(uint64_t a1@<X8>)
{
}

uint64_t LinkRCHFlowFactory.GetFlowConfig.workflowRunner.setter()
{
  uint64_t v1 = (__int128 *)OUTLINED_FUNCTION_45();
  return outlined init with take of AceServiceInvokerAsync(v1, v2);
}

void *closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LinkMetadataProvider();
  uint64_t inited = (void *)swift_initStackObject(v2, v33);
  id v4 = [objc_allocWithZone(LNMetadataProvider) init];
  inited[2] = v4;
  uint64_t v6 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  NSString v7 = *(void **)(a1 + 16);
  id v8 = [v7 identifier];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  unint64_t v11 = v10;

  uint64_t v12 = LinkMetadataProvider.actionMetadata(bundleId:actionId:)(v6, v5, v9, v11);
  if (v32)
  {

    swift_bridgeObjectRelease(v11);
  }

  else
  {
    uint64_t inited = v12;

    swift_bridgeObjectRelease(v11);
    id v13 = [(id)objc_opt_self(LNConnectionPolicy) policyWithActionMetadata:inited];
    v37[0] = 0LL;
    id v14 = [v13 connectionWithError:v37];
    id v15 = v37[0];
    if (v14)
    {
      uint64_t v16 = v14;
      int v31 = *(unsigned __int8 *)(a1 + 24);
      outlined init with copy of AppShortcutInvoking(a1 + 32, (uint64_t)v37);
      id v17 = v15;
      id v18 = v7;
      swift_bridgeObjectRetain(v5);
      id v19 = v16;
      uint64_t v20 = static AceService.currentAsync.getter(v36);
      uint64_t v21 = static Device.current.getter(v35, v20);
      static OutputPublisherFactory.makeOutputPublisherAsync()(v34, v21);
      uint64_t v22 = type metadata accessor for LinkRCHFlow();
      uint64_t v23 = swift_allocObject(v22, 288LL, 7LL);
      uint64_t inited = (void *)specialized LinkRCHFlow.init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)( v18,  inited,  v6,  v5,  v31,  v19,  (uint64_t)v37,  (uint64_t)v36,  (uint64_t)v35,  0LL,  v34,  v23);
    }

    else
    {
      id v25 = v37[0];
      _convertNSErrorToError(_:)(v15);

      swift_willThrow(v26, v27, v28, v29, v30);
    }
  }

  return inited;
}

uint64_t key path getter for LinkRCHFlowFactory.getFlow : LinkRCHFlowFactory@<X0>( uint64_t *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject(&unk_1F4548, 32LL, 7LL);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LinkRCHFlowFactory.GetFlowConfig) -> (@owned LinkRCHFlow, @error @owned Error);
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;
  return swift_retain(v3);
}

uint64_t key path setter for LinkRCHFlowFactory.getFlow : LinkRCHFlowFactory(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject(&unk_1F4520, 32LL, 7LL);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain(v3);
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LinkRCHFlowFactory.GetFlowConfig) -> (@out LinkRCHFlow, @error @owned Error);
  a2[1] = v5;
  return result;
}

void LinkRCHFlowFactory.getFlow.getter(uint64_t a1, uint64_t a2)
{
}

void LinkRCHFlowFactory.getFlow.setter(uint64_t a1, uint64_t a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_2();
}

void closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow( uint64_t a1@<X8>)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v5 = OUTLINED_FUNCTION_73();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v6 = 0;
      v6,
      2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  *(void *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0LL;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  OUTLINED_FUNCTION_2();
}

id @nonobjc LNActionOutput.init(identifier:dialog:viewSnippet:value:showOutputAction:showOutputActionHint:deferred:nextAction:suggestedFollowUp:activityIdentifier:confirmationActionName:showPrompt:confirmationConditions:undoContext:)( uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, char a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, char a13, uint64_t a14, void *a15)
{
  v29.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  if (a9)
  {
    type metadata accessor for LNAutoShortcut( 0LL,  &lazy cache variable for type metadata for LNAction,  &OBJC_CLASS___LNAction_ptr);
    v18.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a9);
  }

  else
  {
    v18.super.Class isa = 0LL;
  }

  if (a11)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a11);
  }

  else
  {
    NSString v19 = 0LL;
  }

  LOBYTE(v23) = a13 & 1;
  LOBYTE(v2outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a7 & 1;
  id v27 = [v25 initWithIdentifier:v29.super.isa dialog:a2 viewSnippet:a3 value:a4 showOutputAction:a5 showOutputActionHint:a6 deferred:v22 nextAction:a8 suggeste dFollowUpActions:v18.super.isa activityIdentifier:v19 confirmationActionName:a12 showPrompt:v23 confirmationConditions:a14 undoContext:a15];

  uint64_t v20 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8LL))(a1, v20);
  return v27;
}

uint64_t outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(void *a1)
{
  return outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(a1, (SEL *)&selRef_launchId);
}

void outlined bridged method (mbgnn) of @objc INIntent.launchId.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 _setLaunchId:v4];
}

void outlined bridged method (mbnn) of @objc NSUserActivity.userInfo.setter(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setUserInfo:isa];
}

uint64_t outlined bridged method (pb) of @objc LNActionOutput.suggestedFollowUpActions.getter(void *a1)
{
  id v1 = [a1 suggestedFollowUpActions];
  if (!v1) {
    return 0LL;
  }
  os_log_type_t v2 = v1;
  type metadata accessor for LNAutoShortcut( 0LL,  &lazy cache variable for type metadata for LNAction,  &OBJC_CLASS___LNAction_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }

  return OUTLINED_FUNCTION_45();
}

void specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  a19 = v33;
  a20 = v34;
  uint64_t v101 = v35;
  uint64_t v100 = v36;
  uint64_t v105 = v37;
  uint64_t v104 = v38;
  uint64_t v40 = v39;
  uint64_t v91 = v41;
  uint64_t v43 = v42;
  uint64_t v106 = v44;
  uint64_t v99 = a22;
  uint64_t v45 = a21;
  uint64_t v107 = a24;
  uint64_t v102 = a23;
  uint64_t v108 = a28;
  uint64_t v92 = a27;
  uint64_t v47 = a29;
  uint64_t v46 = a30;
  uint64_t v103 = a26;
  uint64_t v48 = a25;
  uint64_t v50 = a32;
  uint64_t v49 = a33;
  uint64_t v51 = a31;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a29);
  uint64_t v97 = OUTLINED_FUNCTION_151();
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v52);
  OUTLINED_FUNCTION_83();
  uint64_t v96 = v53;
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>);
  uint64_t v94 = *(void *)(v95 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v54);
  OUTLINED_FUNCTION_83();
  uint64_t v93 = v55;
  type metadata accessor for CATOption(0LL);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v56);
  unint64_t v58 = (char *)&v90 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v114[3] = v51;
  v114[4] = v49;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v114);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 32LL))( boxed_opaque_existential_1,  v48,  v51);
  v113[3] = v46;
  v113[4] = v50;
  uint64_t v60 = v104;
  uint64_t v61 = __swift_allocate_boxed_opaque_existential_1(v113);
  OUTLINED_FUNCTION_158( (uint64_t)v61,  v103,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 32LL));
  outlined init with take of SiriWorkflowRunnerInput( v106,  &v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput]);
  uint64_t v103 = v40;
  uint64_t v62 = v40;
  uint64_t v63 = v91;
  outlined init with copy of AppShortcutInvoking( v62,  (uint64_t)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker]);
  outlined init with copy of AppShortcutInvoking( v60,  (uint64_t)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState]);
  *(void *)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogState] = v63;
  outlined init with copy of AppShortcutInvoking( v105,  (uint64_t)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher]);
  outlined init with copy of AppShortcutInvoking( (uint64_t)v114,  (uint64_t)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationProvider]);
  outlined init with copy of AppShortcutInvoking( (uint64_t)v113,  (uint64_t)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dateTimeResolver]);
  uint64_t v64 = &v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_linkRCHFlowFactory];
  uint64_t v65 = v108;
  *(void *)uint64_t v64 = v92;
  *((void *)v64 + 1) = v65;
  *(void *)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_runVoiceCommandsCatWrapperSimple] = v45;
  uint64_t v66 = &v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationGuardFlowProvider];
  uint64_t v67 = v107;
  *(void *)uint64_t v66 = v102;
  *((void *)v66 + 1) = v67;
  uint64_t v102 = v43;
  outlined init with copy of SiriWorkflowRunnerEvent?( v43,  (uint64_t)&v110,  &demangling cache variable for type metadata for SiriWorkflowRunning?);
  if (v111)
  {
    outlined init with take of AceServiceInvokerAsync(&v110, (uint64_t)v112);
    outlined init with take of AceServiceInvokerAsync( v112,  (uint64_t)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner]);
    OUTLINED_FUNCTION_166( (uint64_t)v47,  (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    OUTLINED_FUNCTION_118();
    OUTLINED_FUNCTION_132((uint64_t)&a17);
    OUTLINED_FUNCTION_14_8();
    OUTLINED_FUNCTION_132((uint64_t)&a16);
  }

  else
  {
    uint64_t v68 = v47;
    uint64_t v69 = v106;
    outlined retain of SiriWorkflowRunnerInput( (uint64_t)v106,  (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    OUTLINED_FUNCTION_118();
    OUTLINED_FUNCTION_132((uint64_t)&a17);
    OUTLINED_FUNCTION_14_8();
    OUTLINED_FUNCTION_132((uint64_t)&a16);
    outlined destroy of Result<Output, Error>( (uint64_t)&v110,  &demangling cache variable for type metadata for SiriWorkflowRunning?);
    OUTLINED_FUNCTION_156();
    outlined init with copy of AppShortcutInvoking(v103, (uint64_t)&v110);
    uint64_t v70 = type metadata accessor for SiriWorkflowRunner();
    OUTLINED_FUNCTION_19(v70, 192LL);
    outlined retain of SiriWorkflowRunnerInput( (uint64_t)v69,  (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    os_log_type_t v71 = SiriWorkflowRunner.init(workflowRunnerInput:deviceState:aceServiceInvoker:)(v69, (uint64_t)v112, &v110);
    uint64_t v72 = &v68[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner];
    *((void *)v72 + 3) = v70;
    *((void *)v72 + 4) = &protocol witness table for SiriWorkflowRunner;
    *(void *)uint64_t v72 = v71;
  }

  OUTLINED_FUNCTION_156();
  type metadata accessor for WorkflowRunnerCATs(0LL);
  OUTLINED_FUNCTION_118();
  OUTLINED_FUNCTION_14_8();
  OUTLINED_FUNCTION_118();
  swift_retain(v101);
  uint64_t v73 = v45;
  uint64_t v74 = v99;
  OUTLINED_FUNCTION_14_8();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_97((uint64_t)v58);
  type metadata accessor for WorkflowRunnerCATsSimple(0LL);
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_96((uint64_t)v58);
  type metadata accessor for RunCustomIntentCATsSimple(0LL);
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_96((uint64_t)v58);
  uint64_t v75 = type metadata accessor for WorkflowDialogTemplating();
  OUTLINED_FUNCTION_19(v75, 120LL);
  OUTLINED_FUNCTION_146();
  WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( v76,  v77,  v78,  v79,  v80,  v81,  v82,  v73,  v74);
  *(void *)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogTemplating] = v83;
  uint64_t v84 = *(void *)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 24];
  uint64_t v85 = *(void *)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 32];
  __swift_project_boxed_opaque_existential_1( &v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner],  v84);
  uint64_t v86 = v93;
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v85);
  uint64_t v87 = v96;
  uint64_t v88 = v95;
  AsyncStream.makeAsyncIterator()(v95);
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v86, v88);
  swift_storeEnumTagMultiPayload(v87, v97, 0LL);
  outlined init with take of SiriWorkflowRunnerEvent( v87,  (uint64_t)&v47[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state],  type metadata accessor for WorkflowRunnerFlow.State);

  v109.receiver = v47;
  v109.super_class = ObjectType;
  objc_msgSendSuper2(&v109, "init");
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_61();
  swift_release();
  uint64_t v89 = swift_release();
  OUTLINED_FUNCTION_166( v89,  (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SiriWorkflowRunnerInput);
  __swift_destroy_boxed_opaque_existential_1Tm(v113);
  __swift_destroy_boxed_opaque_existential_1Tm(v114);
  OUTLINED_FUNCTION_162((uint64_t)&a14);
  OUTLINED_FUNCTION_162((uint64_t)&a13);
  OUTLINED_FUNCTION_162((uint64_t)&a12);
  outlined destroy of Result<Output, Error>(v102, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  OUTLINED_FUNCTION_24_0();
}

uint64_t type metadata accessor for WorkflowRunnerFlow.State(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerFlow.State,  (uint64_t)&nominal type descriptor for WorkflowRunnerFlow.State);
}

uint64_t outlined assign with take of WorkflowRunnerFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WorkflowRunnerFlow.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerError and conformance WorkflowRunnerError;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerError and conformance WorkflowRunnerError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WorkflowRunnerError,  &type metadata for WorkflowRunnerError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerError and conformance WorkflowRunnerError);
  }

  return result;
}

void outlined init with copy of WorkflowRunnerFlow.State( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = OUTLINED_FUNCTION_11_9(a1, a2, a3);
  OUTLINED_FUNCTION_76_1(v3);
  OUTLINED_FUNCTION_1();
}

uint64_t partial apply for closure #1 in WorkflowRunnerFlow.execute()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  id v15 = (void *)swift_task_alloc(dword_215EF4);
  *(void *)(v14 + 16) = v15;
  *id v15 = v14;
  v15[1] = partial apply for closure #1 in WorkflowRunnerFlow.execute();
  uint64_t v16 = OUTLINED_FUNCTION_45();
  return closure #1 in WorkflowRunnerFlow.execute()(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

void partial apply for closure #2 in WorkflowRunnerFlow.execute()(void *a1)
{
}

uint64_t type metadata accessor for WorkflowRunnerFlow(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple( a1,  (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerFlow,  (uint64_t)&nominal type descriptor for WorkflowRunnerFlow);
}

id outlined copy of LinkRCHFlowResult(id result, char a2)
{
  if (a2 == 2 || a2 == 1) {
    return (id)swift_errorRetain(result);
  }
  if (!a2) {
    return result;
  }
  return result;
}

void base witness table accessor for Flow in WorkflowRunnerFlow()
{
}

void base witness table accessor for SiriEnvironmentLocating in WorkflowRunnerFlow()
{
}

unint64_t destroy for WorkflowRunnerError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

void initializeBufferWithCopyOfBuffer for WorkflowRunnerError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  OUTLINED_FUNCTION_1();
}

void *assignWithCopy for WorkflowRunnerError(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  uint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

  uint64_t v17 = 0LL;
LABEL_8:
  if (a8)
  {
    uint64_t v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a8);
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  uint64_t v19 = [v9 initWithAirPlayRouteIDs:v15.super.isa executionContext:a2 originatingDeviceIDSIdentifier:v16 originatingDeviceRapportEffectiveIdent ifier:v17 originatingDeviceRapportMediaSystemIdentifier:v18 isOwnedByCurrentUser:a9 & 1];

  return v19;
}

        __swift_destroy_boxed_opaque_existential_1Tm(v32);
        OUTLINED_FUNCTION_57_11();
LABEL_8:
        __swift_destroy_boxed_opaque_existential_1Tm(v29);
        goto LABEL_9;
      }
    }

    __swift_destroy_boxed_opaque_existential_1Tm(v33);
    OUTLINED_FUNCTION_58_11();
    goto LABEL_7;
  }

        OUTLINED_FUNCTION_16_25();
        goto LABEL_8;
      }
    }

    OUTLINED_FUNCTION_17_25();
    goto LABEL_7;
  }

  uint64_t v17 = 0;
LABEL_10:
  __swift_destroy_boxed_opaque_existential_1Tm(v36);
  return v17 & 1;
}

  uint64_t v17 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v13, v14, a5);
  swift_bridgeObjectRelease(v12);
  return v17;
}

    unint64_t v11 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v11;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[3]);
    goto LABEL_7;
  }

  *a1 = *a2;
  uint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  a1[2] = a2[2];
  uint64_t v7 = a2[3];
  id v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for WorkflowRunnerError(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowRunnerError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFA && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for WorkflowRunnerError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)__n128 result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 4;
    }
  }

  return result;
}

uint64_t getEnumTag for WorkflowRunnerError(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for WorkflowRunnerError(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

void type metadata accessor for WorkflowRunnerError()
{
}

uint64_t initializeBufferWithCopyOfBuffer for LinkExitValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of LinkExitValue(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of LinkExitValue(id result, char a2)
{
  if (a2 == 1) {
    return (id)swift_errorRetain(result);
  }
  if (!a2) {
    return result;
  }
  return result;
}

void destroy for LinkExitValue(uint64_t a1)
{
}

void outlined consume of LinkExitValue(id a1, char a2)
{
  if (a2 == 1)
  {
    swift_errorRelease(a1);
  }

  else if (!a2)
  {
  }

uint64_t assignWithCopy for LinkExitValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of LinkExitValue(*(id *)a2, v4);
  unsigned int v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of LinkExitValue(v5, v6);
  return a1;
}

uint64_t assignWithTake for LinkExitValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of LinkExitValue(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkExitValue(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkExitValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for LinkExitValue(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for LinkExitValue(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    LOBYTE(aoutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

void type metadata accessor for LinkExitValue()
{
}

uint64_t type metadata completion function for WorkflowRunnerFlow(uint64_t a1)
{
  v4[0] = "A";
  v4[1] = L"(";
  __int128 v4[2] = L"(";
  void v4[3] = L"(";
  v4[4] = L"(";
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for WorkflowRunnerFlow.State(319LL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(void *)(result - 8) + 64LL;
    v4[8] = L"(";
    void v4[9] = L"(";
    v4[10] = (char *)&value witness table for () + 64;
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = (char *)&value witness table for () + 64;
    return swift_updateClassMetadata2(a1, 256LL, 13LL, v4, a1 + 80);
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for LinkRCHFlowFactory(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for LinkRCHFlowFactory(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 8));
}

void *assignWithCopy for LinkRCHFlowFactory(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for LinkRCHFlowFactory(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkRCHFlowFactory(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkRCHFlowFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for LinkRCHFlowFactory()
{
}

uint64_t destroy for LinkRCHFlowFactory.GetFlowConfig(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 32));
}

uint64_t initializeWithCopy for LinkRCHFlowFactory.GetFlowConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v5 = a2 + 32;
  __int128 v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v7 = v6;
  id v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain(v3);
  id v9 = v4;
  v8(a1 + 32, v5, v7);
  return a1;
}

uint64_t assignWithCopy for LinkRCHFlowFactory.GetFlowConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  __int128 v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  id v8 = v6;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  __swift_assign_boxed_opaque_existential_1((void *)(a1 + 32), (void *)(a2 + 32));
  return a1;
}

void *__swift_memcpy72_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for LinkRCHFlowFactory.GetFlowConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  __int128 v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 32));
  __int128 v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkRCHFlowFactory.GetFlowConfig(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 72))
    {
      LODWORD(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkRCHFlowFactory.GetFlowConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for LinkRCHFlowFactory.GetFlowConfig()
{
}

void type metadata accessor for SLFLocationAccessGuardProvider()
{
}

void *initializeBufferWithCopyOfBuffer for WorkflowRunnerFlow.State(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v12);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
        id v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 0LL;
        goto LABEL_15;
      case 1u:
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
        uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
        uint64_t v15 = v14[12];
        uint64_t v16 = (void *)((char *)a1 + v15);
        uint64_t v17 = (void *)((char *)a2 + v15);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        *uint64_t v16 = v19;
        v16[1] = v18;
        uint64_t v20 = v14[16];
        uint64_t v21 = *(void **)((char *)a2 + v20);
        *(void *)((char *)a1 + v20) = v21;
        uint64_t v22 = v14[20];
        uint64_t v23 = (void *)((char *)a1 + v22);
        uint64_t v24 = (void *)((char *)a2 + v22);
        uint64_t v25 = v24[1];
        *uint64_t v23 = *v24;
        v23[1] = v25;
        swift_bridgeObjectRetain(v18);
        id v26 = v21;
        swift_retain(v25);
        id v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 1LL;
        goto LABEL_15;
      case 2u:
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 16LL))(a1, a2, v27);
        NSUUID v29 = (void *)((char *)a1 + v28);
        uint64_t v30 = (void *)((char *)a2 + v28);
        uint64_t v31 = v30[1];
        *NSUUID v29 = *v30;
        v29[1] = v31;
        swift_retain(v31);
        id v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 2LL;
        goto LABEL_15;
      case 3u:
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16LL))(a1, a2, v32);
        uint64_t v34 = (void *)((char *)a1 + v33);
        uint64_t v35 = (void *)((char *)a2 + v33);
        uint64_t v36 = v35[1];
        *uint64_t v34 = *v35;
        v34[1] = v36;
        swift_retain(v36);
        id v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 3LL;
        goto LABEL_15;
      case 4u:
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 16LL))(a1, a2, v37);
        uint64_t v39 = (void *)((char *)a1 + v38);
        uint64_t v40 = (void *)((char *)a2 + v38);
        uint64_t v41 = v40[1];
        *uint64_t v39 = *v40;
        v39[1] = v41;
        swift_retain(v41);
        id v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 4LL;
        goto LABEL_15;
      case 5u:
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v42 - 8) + 16LL))(a1, a2, v42);
        int v44 = (void *)((char *)a1 + v43);
        uint64_t v45 = (void *)((char *)a2 + v43);
        uint64_t v46 = v45[1];
        *int v44 = *v45;
        v44[1] = v46;
        swift_retain(v46);
        id v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 5LL;
        goto LABEL_15;
      case 6u:
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v47 - 8) + 16LL))(a1, a2, v47);
        uint64_t v49 = (void *)((char *)a1 + v48);
        uint64_t v50 = (void *)((char *)a2 + v48);
        uint64_t v51 = v50[1];
        *uint64_t v49 = *v50;
        v49[1] = v51;
        swift_retain(v51);
        id v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 6LL;
        goto LABEL_15;
      case 7u:
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v52 - 8) + 16LL))(a1, a2, v52);
        uint64_t v54 = (void *)((char *)a1 + v53);
        uint64_t v55 = (void *)((char *)a2 + v53);
        uint64_t v56 = v55[1];
        *uint64_t v54 = *v55;
        v54[1] = v56;
        swift_retain(v56);
        id v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 7LL;
        goto LABEL_15;
      case 8u:
        uint64_t v57 = *a2;
        swift_errorRetain(*a2);
        *a1 = v57;
        uint64_t v59 = (char *)a1 + v58;
        uint64_t v60 = (char *)a2 + v58;
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16LL))(v59, v60, v61);
        id v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 8LL;
        goto LABEL_15;
      case 9u:
        uint64_t v62 = *a2;
        swift_errorRetain(v62);
        *a1 = v62;
        id v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 9LL;
LABEL_15:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t destroy for WorkflowRunnerFlow.State(void *a1, uint64_t a2)
{
  unint64_t v2 = a1;
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v2, v5);
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
      swift_bridgeObjectRelease(*(void *)((char *)v2 + *(int *)(v6 + 48) + 8));

      goto LABEL_3;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2, v4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
LABEL_3:
      uint64_t result = swift_release();
      break;
    case 8:
      swift_errorRelease(*v2);
      unint64_t v2 = (void *)((char *)v2
LABEL_7:
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v2, v7);
      break;
    case 9:
      uint64_t result = swift_errorRelease(*v2);
      break;
    default:
      return result;
  }

  return result;
}

void *initializeWithCopy for WorkflowRunnerFlow.State(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_13;
    case 1u:
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
      uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
      uint64_t v12 = v11[12];
      uint64_t v13 = (void *)((char *)a1 + v12);
      uint64_t v14 = (void *)((char *)a2 + v12);
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      void *v13 = v16;
      v13[1] = v15;
      uint64_t v17 = v11[16];
      uint64_t v18 = *(void **)((char *)a2 + v17);
      *(void *)((char *)a1 + v1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 7) = v18;
      uint64_t v19 = v11[20];
      uint64_t v20 = (void *)((char *)a1 + v19);
      uint64_t v21 = (void *)((char *)a2 + v19);
      uint64_t v22 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v22;
      swift_bridgeObjectRetain(v15);
      id v23 = v18;
      swift_retain(v22);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_13;
    case 2u:
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16LL))(a1, a2, v24);
      id v26 = (void *)((char *)a1 + v25);
      uint64_t v27 = (void *)((char *)a2 + v25);
      uint64_t v28 = v27[1];
      void *v26 = *v27;
      v26[1] = v28;
      swift_retain(v28);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_13;
    case 3u:
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 16LL))(a1, a2, v29);
      uint64_t v31 = (void *)((char *)a1 + v30);
      uint64_t v32 = (void *)((char *)a2 + v30);
      uint64_t v33 = v32[1];
      *uint64_t v31 = *v32;
      v31[1] = v33;
      swift_retain(v33);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
      goto LABEL_13;
    case 4u:
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16LL))(a1, a2, v34);
      uint64_t v36 = (void *)((char *)a1 + v35);
      uint64_t v37 = (void *)((char *)a2 + v35);
      uint64_t v38 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v38;
      swift_retain(v38);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 4LL;
      goto LABEL_13;
    case 5u:
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v39 - 8) + 16LL))(a1, a2, v39);
      uint64_t v41 = (void *)((char *)a1 + v40);
      uint64_t v42 = (void *)((char *)a2 + v40);
      uint64_t v43 = v42[1];
      *uint64_t v41 = *v42;
      v41[1] = v43;
      swift_retain(v43);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 5LL;
      goto LABEL_13;
    case 6u:
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v44 - 8) + 16LL))(a1, a2, v44);
      uint64_t v46 = (void *)((char *)a1 + v45);
      uint64_t v47 = (void *)((char *)a2 + v45);
      uint64_t v48 = v47[1];
      *uint64_t v46 = *v47;
      v46[1] = v48;
      swift_retain(v48);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 6LL;
      goto LABEL_13;
    case 7u:
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v49 - 8) + 16LL))(a1, a2, v49);
      uint64_t v51 = (void *)((char *)a1 + v50);
      uint64_t v52 = (void *)((char *)a2 + v50);
      uint64_t v53 = v52[1];
      *uint64_t v51 = *v52;
      v51[1] = v53;
      swift_retain(v53);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 7LL;
      goto LABEL_13;
    case 8u:
      uint64_t v55 = *a2;
      swift_errorRetain(*a2);
      *a1 = v55;
      uint64_t v57 = (char *)a1 + v56;
      uint64_t v58 = (char *)a2 + v56;
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16LL))(v57, v58, v59);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 8LL;
      goto LABEL_13;
    case 9u:
      uint64_t v54 = *a2;
      swift_errorRetain(v54);
      *a1 = v54;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 9LL;
LABEL_13:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithCopy for WorkflowRunnerFlow.State(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)a1, type metadata accessor for WorkflowRunnerFlow.State);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_14;
      case 1u:
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
        uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
        uint64_t v12 = v11[12];
        uint64_t v13 = (void *)((char *)a1 + v12);
        uint64_t v14 = (void *)((char *)a2 + v12);
        void *v13 = *v14;
        uint64_t v15 = v14[1];
        v13[1] = v15;
        uint64_t v16 = v11[16];
        uint64_t v17 = *(void **)((char *)a2 + v16);
        *(void *)((char *)a1 + v16) = v17;
        uint64_t v18 = v11[20];
        uint64_t v19 = (void *)((char *)a1 + v18);
        uint64_t v20 = (void *)((char *)a2 + v18);
        uint64_t v21 = v20[1];
        *uint64_t v19 = *v20;
        v19[1] = v21;
        swift_bridgeObjectRetain(v15);
        id v22 = v17;
        swift_retain(v21);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_14;
      case 2u:
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16LL))(a1, a2, v23);
        uint64_t v25 = (void *)((char *)a1 + v24);
        id v26 = (void *)((char *)a2 + v24);
        uint64_t v27 = v26[1];
        *uint64_t v25 = *v26;
        v25[1] = v27;
        swift_retain(v27);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_14;
      case 3u:
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 16LL))(a1, a2, v28);
        uint64_t v30 = (void *)((char *)a1 + v29);
        uint64_t v31 = (void *)((char *)a2 + v29);
        uint64_t v32 = v31[1];
        *uint64_t v30 = *v31;
        v30[1] = v32;
        swift_retain(v32);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 3LL;
        goto LABEL_14;
      case 4u:
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v33 - 8) + 16LL))(a1, a2, v33);
        uint64_t v35 = (void *)((char *)a1 + v34);
        uint64_t v36 = (void *)((char *)a2 + v34);
        uint64_t v37 = v36[1];
        *uint64_t v35 = *v36;
        v35[1] = v37;
        swift_retain(v37);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 4LL;
        goto LABEL_14;
      case 5u:
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v38 - 8) + 16LL))(a1, a2, v38);
        uint64_t v40 = (void *)((char *)a1 + v39);
        uint64_t v41 = (void *)((char *)a2 + v39);
        uint64_t v42 = v41[1];
        *uint64_t v40 = *v41;
        v40[1] = v42;
        swift_retain(v42);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 5LL;
        goto LABEL_14;
      case 6u:
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v43 - 8) + 16LL))(a1, a2, v43);
        uint64_t v45 = (void *)((char *)a1 + v44);
        uint64_t v46 = (void *)((char *)a2 + v44);
        uint64_t v47 = v46[1];
        *uint64_t v45 = *v46;
        v45[1] = v47;
        swift_retain(v47);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 6LL;
        goto LABEL_14;
      case 7u:
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v48 - 8) + 16LL))(a1, a2, v48);
        uint64_t v50 = (void *)((char *)a1 + v49);
        uint64_t v51 = (void *)((char *)a2 + v49);
        uint64_t v52 = v51[1];
        *uint64_t v50 = *v51;
        v50[1] = v52;
        swift_retain(v52);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 7LL;
        goto LABEL_14;
      case 8u:
        uint64_t v54 = *a2;
        swift_errorRetain(*a2);
        *a1 = v54;
        uint64_t v56 = (char *)a1 + v55;
        uint64_t v57 = (char *)a2 + v55;
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16LL))(v56, v57, v58);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 8LL;
        goto LABEL_14;
      case 9u:
        uint64_t v53 = *a2;
        swift_errorRetain(v53);
        *a1 = v53;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 9LL;
LABEL_14:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *initializeWithTake for WorkflowRunnerFlow.State(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_12;
    case 1u:
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, a2, v10);
      uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
      *(_OWORD *)((char *)a1 + v11[12]) = *(_OWORD *)((char *)a2 + v11[12]);
      *(void *)((char *)a1 + v11[16]) = *(void *)((char *)a2 + v11[16]);
      *(_OWORD *)((char *)a1 + v11[20]) = *(_OWORD *)((char *)a2 + v11[20]);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_12;
    case 2u:
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 32LL))(a1, a2, v12);
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
      *(_OWORD *)((char *)a1 + *(int *)(v13 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 48));
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_12;
    case 3u:
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
      *(_OWORD *)((char *)a1 + *(int *)(v15 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v15 + 48));
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
      goto LABEL_12;
    case 4u:
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 32LL))(a1, a2, v16);
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
      *(_OWORD *)((char *)a1 + *(int *)(v17 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v17 + 48));
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 4LL;
      goto LABEL_12;
    case 5u:
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(a1, a2, v18);
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
      *(_OWORD *)((char *)a1 + *(int *)(v19 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v19 + 48));
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 5LL;
      goto LABEL_12;
    case 6u:
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 32LL))(a1, a2, v20);
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
      *(_OWORD *)((char *)a1 + *(int *)(v21 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v21 + 48));
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 6LL;
      goto LABEL_12;
    case 7u:
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 32LL))(a1, a2, v22);
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
      *(_OWORD *)((char *)a1 + *(int *)(v23 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v23 + 48));
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 7LL;
      goto LABEL_12;
    case 8u:
      *a1 = *a2;
      uint64_t v25 = (char *)a1 + v24;
      id v26 = (char *)a2 + v24;
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v25, v26, v27);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 8LL;
LABEL_12:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithTake for WorkflowRunnerFlow.State(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AutoShortcutInvocation((uint64_t)a1, type metadata accessor for WorkflowRunnerFlow.State);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_13;
      case 1u:
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, a2, v10);
        uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
        *(_OWORD *)((char *)a1 + v11[12]) = *(_OWORD *)((char *)a2 + v11[12]);
        *(void *)((char *)a1 + v11[16]) = *(void *)((char *)a2 + v11[16]);
        *(_OWORD *)((char *)a1 + v11[20]) = *(_OWORD *)((char *)a2 + v11[20]);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_13;
      case 2u:
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 32LL))(a1, a2, v12);
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
        *(_OWORD *)((char *)a1 + *(int *)(v13 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 48));
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_13;
      case 3u:
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, a2, v14);
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
        *(_OWORD *)((char *)a1 + *(int *)(v15 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v15 + 48));
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 3LL;
        goto LABEL_13;
      case 4u:
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 32LL))(a1, a2, v16);
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
        *(_OWORD *)((char *)a1 + *(int *)(v17 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v17 + 48));
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 4LL;
        goto LABEL_13;
      case 5u:
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 32LL))(a1, a2, v18);
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
        *(_OWORD *)((char *)a1 + *(int *)(v19 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v19 + 48));
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 5LL;
        goto LABEL_13;
      case 6u:
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 32LL))(a1, a2, v20);
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
        *(_OWORD *)((char *)a1 + *(int *)(v21 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v21 + 48));
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 6LL;
        goto LABEL_13;
      case 7u:
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 32LL))(a1, a2, v22);
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
        *(_OWORD *)((char *)a1 + *(int *)(v23 + 4swift_bridgeObjectRetain(*(void *)(v0 + 8)) = *(_OWORD *)((char *)a2 + *(int *)(v23 + 48));
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 7LL;
        goto LABEL_13;
      case 8u:
        *a1 = *a2;
        uint64_t v25 = (char *)a1 + v24;
        id v26 = (char *)a2 + v24;
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v25, v26, v27);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 8LL;
LABEL_13:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t destructiveInjectEnumTag for WorkflowRunnerFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void type metadata completion function for WorkflowRunnerFlow.State(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    v14[0] = v4;
    v12[0] = v4;
    v12[1] = &unk_1800D8;
    v12[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v12[3] = (char *)&value witness table for () + 64;
    swift_getTupleTypeLayout(v13, 0LL, 4LL, v12);
    v14[1] = v13;
    swift_getTupleTypeLayout2(v11, v4, (char *)&value witness table for () + 64);
    void v14[2] = v11;
    swift_getTupleTypeLayout2(v10, v4, (char *)&value witness table for () + 64);
    v14[3] = v10;
    swift_getTupleTypeLayout2(v9, v4, (char *)&value witness table for () + 64);
    v14[4] = v9;
    swift_getTupleTypeLayout2(v8, v4, (char *)&value witness table for () + 64);
    v14[5] = v8;
    swift_getTupleTypeLayout2(v7, v4, (char *)&value witness table for () + 64);
    v14[6] = v7;
    swift_getTupleTypeLayout2(v6, v4, (char *)&value witness table for () + 64);
    v14[7] = v6;
    swift_getTupleTypeLayout2(v5, &unk_1800F0, v4);
    v14[8] = v5;
    v14[9] = &unk_1800F0;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 10LL, v14);
  }

void type metadata accessor for AsyncStream<SiriWorkflowRunnerEvent>.Iterator(uint64_t a1)
{
  if (!lazy cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator)
  {
    uint64_t v2 = type metadata accessor for SiriWorkflowRunnerEvent(255LL);
    unint64_t v3 = type metadata accessor for AsyncStream.Iterator(a1, v2);
    if (!v4) {
      atomic_store( v3,  (unint64_t *)&lazy cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    }
  }

uint64_t sub_47E6C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LinkRCHFlowFactory.GetFlowConfig) -> (@out LinkRCHFlow, @error @owned Error)()
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  if (!v1) {
    return (void *)v3;
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LinkRCHFlowFactory.GetFlowConfig) -> (@owned LinkRCHFlow, @error @owned Error)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t outlined assign with take of SiriWorkflowRunnerEvent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of LinkRCHFlowFactory.GetFlowConfig(uint64_t a1)
{
  return a1;
}

uint64_t sub_47F60()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void partial apply for closure #1 in WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)( uint64_t a1)
{
}

void partial apply for thunk for @escaping @callee_guaranteed (@guaranteed WFOpenInteractionResponse) -> ()( void *a1)
{
}

unint64_t outlined consume of WFOpenInteractionResponse(unint64_t result)
{
  if (!(result >> 62)) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t specialized WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v58[3] = type metadata accessor for VoiceCommandsAppPolicyHandler();
  v58[4] = &protocol witness table for VoiceCommandsAppPolicyHandler;
  v58[0] = a9;
  uint64_t v53 = (void *)a5;
  outlined init with copy of AppShortcutInvoking(a5, a12 + 104);
  uint64_t v55 = (void *)a6;
  outlined init with copy of AppShortcutInvoking(a6, a12 + 144);
  uint64_t v54 = (void *)a7;
  outlined init with copy of AppShortcutInvoking(a7, a12 + 184);
  *(void *)(a12 + 40) = a1;
  *(void *)(a12 + 48) = a2;
  *(void *)(a12 + 56) = a3;
  uint64_t v19 = (void *)a4;
  outlined init with copy of AppShortcutInvoking(a4, a12 + 64);
  *(void *)(a12 + 224) = a8;
  outlined init with copy of AppShortcutInvoking((uint64_t)v58, a12 + 232);
  *(void *)(a12 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a10;
  *(void *)(a12 + 280) = a11;
  uint64_t v20 = one-time initialization token for voiceCommands;
  id v21 = a1;
  id v22 = a8;
  swift_retain(a11);
  if (v20 != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
  id v24 = v21;
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    id v52 = v22;
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v27 = 138412290;
    id v57 = v24;
    id v29 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v27 + 4);
    *uint64_t v28 = v24;

    _os_log_impl(&dword_0, v25, v26, "#WFExecuteCustomIntentFlow intent: %@", v27, 0xCu);
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v28, 1LL, v30);
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v31 = v27;
    id v22 = v52;
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {

    uint64_t v25 = (os_log_s *)v24;
  }

  id v32 = [*(id *)(a12 + 40) _metadata];
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v32, (SEL *)&selRef_launchId);
    if (v35)
    {
      uint64_t v36 = v34;
      uint64_t v37 = v35;
      uint64_t v38 = v22;
      id v39 = [v24 typeName];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v41;

      static VoiceCommandsParity.isParityIntent(intentName:)(v40, v42);
      LOBYTE(v3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = v43;
      swift_bridgeObjectRelease(v42);
      [v24 _setMetadata:v33];
      type metadata accessor for App(0LL);
      uint64_t v44 = App.__allocating_init(appIdentifier:)(v36, v37);

      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm(v58);
      __swift_destroy_boxed_opaque_existential_1Tm(v54);
      __swift_destroy_boxed_opaque_existential_1Tm(v55);
      __swift_destroy_boxed_opaque_existential_1Tm(v53);
      __swift_destroy_boxed_opaque_existential_1Tm(v19);
      char v45 = 0;
      goto LABEL_15;
    }
  }

  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl( &dword_0,  v46,  v47,  "#WFExecuteCustomIntentFlow error state because metadata or bundleid is nil",  v48,  2u);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  unint64_t v49 = lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
  uint64_t v44 = swift_allocError(&type metadata for RunVoiceShortcutFlowErrors, v49, 0LL, 0LL);
  *uint64_t v50 = 0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v58);
  __swift_destroy_boxed_opaque_existential_1Tm(v54);
  __swift_destroy_boxed_opaque_existential_1Tm(v55);
  __swift_destroy_boxed_opaque_existential_1Tm(v53);
  __swift_destroy_boxed_opaque_existential_1Tm(v19);
  id v24 = 0LL;
  char v45 = 4;
LABEL_15:
  *(void *)(a12 + swift_unknownObjectWeakDestroy(v0 + 16) = v44;
  *(void *)(a12 + 24) = v24;
  *(_BYTE *)(a12 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v45;
  return a12;
}

void partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createExecuteIntentFlow(intent:iterator:_:)( void *a1, uint64_t a2, unsigned __int8 a3)
{
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:)( void *a1, char a2)
{
  return implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:)( a1,  a2 & 1);
}

void partial apply for thunk for @escaping @callee_guaranteed (@guaranteed DialogResponse) -> ()(uint64_t a1)
{
}

void outlined consume of DialogResponse(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

void partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createOpenAppFlow(bundleId:iterator:_:)( unint64_t a1)
{
}

uint64_t partial apply for closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_2160F4);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.execute() in conformance WorkflowRunnerFlow;
  uint64_t v2 = OUTLINED_FUNCTION_130();
  return closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)(v2, v3);
}

void partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)()
{
}

void partial apply for thunk for @escaping @callee_guaranteed () -> ()()
{
}

uint64_t partial apply for closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_21610C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in WorkflowRunnerFlow.execute();
  uint64_t v2 = OUTLINED_FUNCTION_130();
  return closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)(v2, v3);
}

uint64_t sub_48568()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createAppProtectionRequestFlow(bundleId:iterator:_:)( void (*a1)(void, void, void))
{
}

unint64_t lazy protocol witness table accessor for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyAppResolutionFlow<INIntent>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnyAppResolutionFlow<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>);
  }

  return result;
}

uint64_t sub_485EC()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

void partial apply for closure #1 in WorkflowRunnerFlow.guardLocationAccess(needsPreciseLocation:iterator:_:)( uint64_t a1)
{
}

void outlined init with copy of SiriWorkflowRunnerEvent?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_76_1(v3);
  OUTLINED_FUNCTION_1();
}

void outlined init with take of SiriWorkflowRunnerEvent( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = OUTLINED_FUNCTION_11_9(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(v3, v4, v5);
  OUTLINED_FUNCTION_1();
}

uint64_t outlined retain of SiriWorkflowRunnerInput( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  char v4 = *(_BYTE *)(a1 + 64);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  v4);
  return a1;
}

uint64_t specialized LinkRCHFlow.init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)( void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12)
{
  uint64_t v61 = (__int128 *)a8;
  HIDWORD(v56) = a5;
  uint64_t v58 = a4;
  uint64_t v57 = a3;
  uint64_t v16 = (void *)a9;
  uint64_t v17 = a10;
  uint64_t v18 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for LNAutoShortcut( 0LL,  &lazy cache variable for type metadata for LNConnection,  &OBJC_CLASS___LNConnection_ptr);
  v65[3] = v21;
  v65[4] = &protocol witness table for LNConnection;
  v65[0] = a6;
  *(void *)(a12 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(a12 + 24) = a2;
  id v59 = a1;
  id v22 = a2;
  id v23 = [a6 bundleIdentifier];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v26 = v25;

  *(void *)(a12 + 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v24;
  *(void *)(a12 + 120) = v26;
  uint64_t v27 = a7;
  outlined init with copy of SiriWorkflowRunnerEvent?( a7,  a12 + 168,  &demangling cache variable for type metadata for SiriWorkflowRunning?);
  outlined init with copy of AppShortcutInvoking(a9, a12 + 208);
  uint64_t v60 = a11;
  if (a10)
  {
    swift_retain(a10);
    swift_bridgeObjectRelease(v58);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
    id v29 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_0, v29, v30, "#LinkRCHFlow init - overriding strategy", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    uint64_t v32 = a10;
  }

  else
  {
    outlined init with copy of AppShortcutInvoking(a9, (uint64_t)v64);
    outlined init with copy of AppShortcutInvoking((uint64_t)a11, (uint64_t)v63);
    outlined init with copy of AppShortcutInvoking((uint64_t)v61, (uint64_t)v62);
    type metadata accessor for RunLinkActionCATs(0LL);
    id v33 = v22;
    static CATOption.defaultMode.getter();
    uint64_t v34 = a7;
    uint64_t v35 = CATWrapper.__allocating_init(options:globals:)(v20, 0LL);
    type metadata accessor for RunLinkActionCATsSimple(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v36 = CATWrapperSimple.__allocating_init(options:globals:)(v20, 0LL);
    type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
    static CATOption.defaultMode.getter();
    uint64_t v37 = CATWrapper.__allocating_init(options:globals:)(v20, 0LL);
    uint64_t v38 = type metadata accessor for ShortcutsLinkRCHFlowStrategy();
    uint64_t v39 = swift_allocObject(v38, 176LL, 7LL);
    uint64_t v40 = v35;
    uint64_t v27 = v34;
    uint64_t v16 = (void *)a9;
    uint64_t v17 = 0LL;
    specialized ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)( v57,  v58,  (uint64_t)v33,  BYTE4(v56) & 1,  (uint64_t)v64,  v40,  v36,  (uint64_t)v63,  (uint64_t)v62,  v37,  v39,  v54,  v55,  v56,  v57,  v58,  (uint64_t)v59,  (uint64_t)v60,  (uint64_t)v61,  v62[0],  (void *)v62[1],  v62[2],  v62[3]);
  }

  *(void *)(a12 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v32;
  id v41 = [v22 systemProtocols];
  type metadata accessor for LNAutoShortcut( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v42);

  id v44 = [(id)objc_opt_self(LNSystemProtocol) sessionStartingProtocol];
  char v45 = specialized Sequence<>.contains(_:)((uint64_t)v44, v43);
  swift_bridgeObjectRelease(v43);

  if ((v45 & 1) != 0)
  {
    id v46 = [v65[0] bundleIdentifier];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    uint64_t v49 = v48;

    swift_release(v17);
    __swift_destroy_boxed_opaque_existential_1Tm(v60);
    __swift_destroy_boxed_opaque_existential_1Tm(v16);
    outlined destroy of Result<Output, Error>( v27,  &demangling cache variable for type metadata for SiriWorkflowRunning?);
    uint64_t v50 = type metadata accessor for LinkActivityManager();
    uint64_t v51 = swift_allocObject(v50, 32LL, 7LL);
    *(void *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = v47;
    *(void *)(v51 + 24) = v49;
  }

  else
  {

    swift_release(v17);
    __swift_destroy_boxed_opaque_existential_1Tm(v60);
    __swift_destroy_boxed_opaque_existential_1Tm(v16);
    outlined destroy of Result<Output, Error>( v27,  &demangling cache variable for type metadata for SiriWorkflowRunning?);
    uint64_t v51 = 0LL;
  }

  id v52 = v61;
  *(void *)(a12 + 40) = v51;
  outlined init with take of AceServiceInvokerAsync(v52, a12 + 128);
  outlined init with copy of AppShortcutInvoking((uint64_t)v65, a12 + 248);
  *(_OWORD *)(a12 + 48) = 0u;
  *(_OWORD *)(a12 + 64) = 0u;
  *(_OWORD *)(a12 + 80) = 0u;
  *(void *)(a12 + 96) = 0LL;
  *(_BYTE *)(a12 + 104) = 12;
  __swift_destroy_boxed_opaque_existential_1Tm(v65);
  return a12;
}

uint64_t OUTLINED_FUNCTION_7_6()
{
  return swift_task_dealloc(*(void *)(v0 + 400));
}

uint64_t OUTLINED_FUNCTION_12_9(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_15_6(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_16_10()
{
  return static ExecuteResponse.complete()();
}

void OUTLINED_FUNCTION_20_11(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_27_9()
{
  return swift_task_dealloc(*(void *)(v0 + 408));
}

void OUTLINED_FUNCTION_36_7( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
}

uint64_t OUTLINED_FUNCTION_37_6()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

uint64_t OUTLINED_FUNCTION_39_5(uint64_t (*a1)(void))
{
  return a1();
}

_WORD *OUTLINED_FUNCTION_43_5(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_47_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WorkflowRunnerFlow.responseFrom(event:iterator:)(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_50_8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
}

uint64_t OUTLINED_FUNCTION_57_4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_61_3()
{
  return static ExecuteResponse.complete()();
}

uint64_t OUTLINED_FUNCTION_62_3()
{
  return (*(uint64_t (**)(void, void))(v0[35] + 8LL))(v0[36], v0[34]);
}

uint64_t OUTLINED_FUNCTION_63_2()
{
  return static ExecuteResponse.ongoing(requireInput:)(0LL);
}

uint64_t OUTLINED_FUNCTION_64_1()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_67_2()
{
  return ((uint64_t (*)(void))dispatch thunk of OutputPublisherAsync.publish(output:))();
}

uint64_t OUTLINED_FUNCTION_69_1()
{
  return swift_storeEnumTagMultiPayload(v0, v1, 10LL);
}

uint64_t OUTLINED_FUNCTION_70_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(a1 + v1 + 24);
  uint64_t v3 = *(void *)(a1 + v1 + 32);
  __swift_project_boxed_opaque_existential_1((void *)(a1 + v1), v2);
  return dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v2, v3);
}

uint64_t OUTLINED_FUNCTION_71( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

uint64_t OUTLINED_FUNCTION_73_1()
{
  return **(void **)(v0 + 80);
}

uint64_t OUTLINED_FUNCTION_74_1()
{
  return **(void **)(v0 + 80);
}

uint64_t OUTLINED_FUNCTION_75_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_76_1(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v1, v2, a1);
}

void OUTLINED_FUNCTION_77_1()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_78()
{
  return swift_endAccess(v0);
}

uint64_t OUTLINED_FUNCTION_80_0@<X0>(uint64_t a1@<X8>)
{
  return __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + a1));
}

uint64_t OUTLINED_FUNCTION_81_0()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v1, v2);
}

char *OUTLINED_FUNCTION_82@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_84_0()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

void OUTLINED_FUNCTION_85_0(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_89_0()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_90()
{
  return static ExecuteResponse.complete()();
}

  ;
}

uint64_t OUTLINED_FUNCTION_92@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_96(uint64_t a1)
{
  return CATWrapperSimple.__allocating_init(options:globals:)(a1, 0LL);
}

uint64_t OUTLINED_FUNCTION_97(uint64_t a1)
{
  return CATWrapper.__allocating_init(options:globals:)(a1, 0LL);
}

id OUTLINED_FUNCTION_100()
{
  return v0;
}

  ;
}

uint64_t OUTLINED_FUNCTION_107(uint64_t a1)
{
  return outlined assign with take of WorkflowRunnerFlow.State(a1, v1);
}

uint64_t OUTLINED_FUNCTION_108@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t OUTLINED_FUNCTION_110()
{
  return static ExecuteResponse.ongoing(requireInput:)(0LL);
}

uint64_t OUTLINED_FUNCTION_111()
{
  return type metadata accessor for NLContextUpdate(0LL);
}

uint64_t OUTLINED_FUNCTION_112(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 9LL);
}

uint64_t OUTLINED_FUNCTION_113()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 152) + 8LL))( *(void *)(v0 - 160),  *(void *)(v0 - 144));
}

void OUTLINED_FUNCTION_114(void *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = 0xD00000000000002BLL;
  a1[1] = (a2 - 32) | 0x8000000000000000LL;
}

uint64_t OUTLINED_FUNCTION_116()
{
  return static ExecuteResponse.complete()();
}

uint64_t OUTLINED_FUNCTION_117()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_118()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_120()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_123@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

  ;
}

uint64_t OUTLINED_FUNCTION_127(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 1LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_129()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_130()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_131()
{
  return swift_endAccess(v0);
}

uint64_t OUTLINED_FUNCTION_132@<X0>(uint64_t a1@<X8>)
{
  return swift_retain(*(void *)(a1 - 256));
}

void OUTLINED_FUNCTION_133(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_138()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_139()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_140(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_141(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_142@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_143(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 8LL);
}

uint64_t OUTLINED_FUNCTION_144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_145()
{
  return Error.localizedDescription.getter(*(void *)(v0 + 224), *(void *)(v0 + 232));
}

  ;
}

uint64_t OUTLINED_FUNCTION_148()
{
  return static os_log_type_t.debug.getter();
}

void *OUTLINED_FUNCTION_149(void *a1)
{
  return __swift_project_boxed_opaque_existential_1(a1, a1[3]);
}

uint64_t OUTLINED_FUNCTION_151()
{
  return type metadata accessor for WorkflowRunnerFlow.State(0LL);
}

uint64_t OUTLINED_FUNCTION_152@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

uint64_t OUTLINED_FUNCTION_153()
{
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_156()
{
}

uint64_t OUTLINED_FUNCTION_157()
{
  return __swift_mutable_project_boxed_opaque_existential_1(v1, v0);
}

uint64_t OUTLINED_FUNCTION_158@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_159()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_160()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_161(uint64_t a1)
{
  return swift_deallocClassInstance(a1, 112LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_162@<X0>(uint64_t a1@<X8>)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(*(void **)(a1 - 256));
}

uint64_t OUTLINED_FUNCTION_164()
{
  return static os_log_type_t.debug.getter();
}

uint64_t OUTLINED_FUNCTION_165()
{
  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t OUTLINED_FUNCTION_166( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  return outlined retain of SiriWorkflowRunnerInput(*(void *)(v2 - 288), a2);
}

uint64_t OUTLINED_FUNCTION_167(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return OUTLINED_FUNCTION_6_2((uint64_t)VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:));
}

uint64_t VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:)()
{
  id v1 = [(id)objc_opt_self(VCVoiceShortcutClient) standardClient];
  v0[19] = OUTLINED_FUNCTION_17_8((uint64_t)v1);
  v0[7] = v0 + 15;
  uint64_t v2 = OUTLINED_FUNCTION_7_7((uint64_t)VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:));
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  uint64_t v3 = OUTLINED_FUNCTION_37_7( v2,  (uint64_t)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut);
  OUTLINED_FUNCTION_27_10(v3, "getVoiceShortcutWithPhrase:completion:");
  return OUTLINED_FUNCTION_3_15();
}

{
  OUTLINED_FUNCTION_4_11();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  BOOL v3;
  uint64_t (*v4)(BOOL);
  id v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void **)(v0 + 152);

  uint64_t v3 = OUTLINED_FUNCTION_38_7();
  return v4(v3);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t (*v4)(BOOL);
  OUTLINED_FUNCTION_25_11();

  swift_errorRelease(v1);
  uint64_t v3 = OUTLINED_FUNCTION_38_7();
  return v4(v3);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut( uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, a3);
  }
  if (a2) {
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, a2);
  }
  __break(1u);
  return result;
}

uint64_t VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:));
}

uint64_t VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:)()
{
  id v1 = [(id)objc_opt_self(VCVoiceShortcutClient) standardClient];
  v0[19] = v1;
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  v0[20] = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  v0[21] = v5;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:);
  uint64_t v6 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
  v0[13] = &block_descriptor_1;
  v0[14] = v6;
  [v1 importTopLevelShortcutFromURL:v4 withName:v5 completion:v0 + 10];
  return OUTLINED_FUNCTION_20_12();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_18_8();
  *(void *)(v0 + 176) = v1;
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v1 = *(void **)(v0 + 160);
  uint64_t v2 = *(void **)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 152);

  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v1 = *(void **)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 152);
  uint64_t v2 = *(void **)(v0 + 160);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return OUTLINED_FUNCTION_6_2((uint64_t)VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:));
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)()
{
  if (!*(void *)(v0 + 136)) {
    return OUTLINED_FUNCTION_13_7(0LL, *(uint64_t (**)(void))(v0 + 8));
  }
  id v1 = [(id)objc_opt_self(VCVoiceShortcutClient) standardClient];
  *(void *)(v0 + 15outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = OUTLINED_FUNCTION_17_8((uint64_t)v1);
  *(void *)(v0 + 56) = v0 + 120;
  uint64_t v2 = OUTLINED_FUNCTION_7_7((uint64_t)VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:));
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000LL;
  uint64_t v3 = OUTLINED_FUNCTION_37_7( v2,  (uint64_t)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut);
  OUTLINED_FUNCTION_27_10(v3, "getVoiceShortcutWithPhrase:completion:");
  return OUTLINED_FUNCTION_3_15();
}

{
  OUTLINED_FUNCTION_4_11();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  OUTLINED_FUNCTION_25_11();
  swift_errorRelease(v1);

  return OUTLINED_FUNCTION_13_7(0LL, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  void v3[3] = a2;
  v3[4] = v4;
  v3[2] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:));
}

{
  uint64_t *v2;
  void *v5;
  uint64_t v7;
  NSString v5 = *(void **)(*v2 + 40);
  id v7 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 48));

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:)()
{
  id v1 = [(id)objc_opt_self(VCVoiceShortcutClient) standardClient];
  v0[5] = v1;
  uint64_t v2 = unk_216174;
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc(v2);
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:);
  return ((uint64_t (*)(void, void, void, id))v6)(v0[2], v0[3], v0[4], v3);
}

uint64_t specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a2;
  void v4[6] = a4;
  v4[4] = a1;
  uint64_t v8 = (void *)swift_task_alloc(dword_21624C);
  v4[7] = v8;
  *uint64_t v8 = v4;
  v8[1] = specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
  return implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)( a1,  a2,  a4);
}

uint64_t specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  uint64_t v4 = v2[7];
  *NSString v5 = *v3;
  _BYTE v2[8] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    void v2[9] = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v3 = *(void **)(v1 + 48);
  uint64_t v4 = [*(id *)(v1 + 72) shortcutName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_36_8();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = OUTLINED_FUNCTION_35_9();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_80();
  id v3 = OUTLINED_FUNCTION_28_7();
  uint64_t v4 = (void *)Logger.logObject.getter(v3);
  NSString v5 = static os_log_type_t.error.getter();
  uint64_t v6 = OUTLINED_FUNCTION_23_7(v5);
  id v7 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 40);
  uint64_t v8 = *(void **)(v0 + 48);
  if (v6)
  {
    OUTLINED_FUNCTION_31_6();
    id v21 = v10;
    id v22 = v11;
    uint64_t v24 = v8;
    uint64_t v12 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v13 = (void *)OUTLINED_FUNCTION_38(8LL);
    id v23 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v25 = v23;
    OUTLINED_FUNCTION_26_7(4.8151e-34);
    *(void *)(v1 - swift_unknownObjectWeakDestroy(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v9, &v25);
    OUTLINED_FUNCTION_32_5(v22);
    OUTLINED_FUNCTION_34_7();
    OUTLINED_FUNCTION_16_11();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v7);
    OUTLINED_FUNCTION_9_7(v14);
    void *v13 = v9;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_19_6(&dword_0, v15, v16, "voiceShortcut NOT found from identifier=%s; error: %@");
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_30_3((uint64_t)v13, v18, v17);
    OUTLINED_FUNCTION_1_0((uint64_t)v13);
    OUTLINED_FUNCTION_30_3(v23, v19, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v23);
    OUTLINED_FUNCTION_1_0(v12);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_33_7();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  return OUTLINED_FUNCTION_8_8(0LL, 0LL, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)( uint64_t a1, uint64_t a2, int *a3)
{
  v3[4] = a1;
  v3[5] = a2;
  id v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  v3[6] = v4;
  uint64_t v5 = OUTLINED_FUNCTION_29_8( v4,  (uint64_t)static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:));
  return v7(v5);
}

uint64_t static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  uint64_t v4 = v2[6];
  *uint64_t v5 = *v3;
  v2[7] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    _BYTE v2[8] = v0;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v3 = [*(id *)(v1 + 64) shortcutName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_36_8();

  return OUTLINED_FUNCTION_21_7(v0, v2, *(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = OUTLINED_FUNCTION_35_9();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_80();
  id v3 = OUTLINED_FUNCTION_28_7();
  uint64_t v4 = (void *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = OUTLINED_FUNCTION_23_7(v5);
  id v7 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 40);
  if (v6)
  {
    OUTLINED_FUNCTION_31_6();
    uint64_t v20 = v9;
    id v21 = v10;
    uint64_t v11 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v12 = (void *)OUTLINED_FUNCTION_38(8LL);
    id v22 = OUTLINED_FUNCTION_38(32LL);
    id v23 = v22;
    OUTLINED_FUNCTION_26_7(4.8151e-34);
    *(void *)(v1 - swift_unknownObjectWeakDestroy(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v8, &v23);
    OUTLINED_FUNCTION_32_5(v21);
    OUTLINED_FUNCTION_34_7();
    OUTLINED_FUNCTION_16_11();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v7);
    OUTLINED_FUNCTION_9_7(v13);
    *uint64_t v12 = v8;
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_19_6(&dword_0, v14, v15, "voiceShortcut NOT found from identifier=%s; error: %@");
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_30_3((uint64_t)v12, v17, v16);
    OUTLINED_FUNCTION_1_0((uint64_t)v12);
    OUTLINED_FUNCTION_30_3(v22, v18, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v22);
    OUTLINED_FUNCTION_1_0(v11);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_33_7();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  return OUTLINED_FUNCTION_8_8(0LL, 0LL, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:));
}

uint64_t implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  uint64_t v1 = (void *)v0[18];
  NSString v2 = String._bridgeToObjectiveC()();
  v0[19] = v2;
  v0[7] = v0 + 15;
  uint64_t v3 = OUTLINED_FUNCTION_7_7((uint64_t)implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:));
  v0[10] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  OUTLINED_FUNCTION_37_7( v3,  (uint64_t)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut);
  [v1 getVoiceShortcutWithIdentifier:v2 completion:v4];
  return OUTLINED_FUNCTION_20_12();
}

{
  OUTLINED_FUNCTION_4_11();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void VoiceShortcutClientWrapper.getSiriAutoShortcutsEnablement(forBundleIdentifier:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = [(id)objc_opt_self(VCVoiceShortcutClient) standardClient];
  NSString v7 = String._bridgeToObjectiveC()();
  v9[4] = a3;
  v9[5] = a4;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256LL;
  void v9[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  v9[3] = &block_descriptor_6;
  uint64_t v8 = _Block_copy(v9);
  swift_retain(a4);
  swift_release();
  [v6 getSiriAutoShortcutsEnablementForBundleIdentifier:v7 completion:v8];
  _Block_release(v8);
}

uint64_t VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:)( char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 120) = a2;
  *(void *)(v3 + 128) = a3;
  *(_BYTE *)(v3 + 160) = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:));
}

uint64_t VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:)()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 160);
  id v2 = [(id)objc_opt_self(VCVoiceShortcutClient) standardClient];
  *(void *)(v0 + 136) = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 144) = v3;
  uint64_t v4 = OUTLINED_FUNCTION_7_7((uint64_t)VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:));
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 80;
  *(void *)(v5 + 8) = 0x40000000LL;
  OUTLINED_FUNCTION_37_7( v4,  (uint64_t)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ());
  [v2 setSiriAutoShortcutsEnablement:v1 forBundleIdentifier:v3 completion:v5];
  return OUTLINED_FUNCTION_3_15();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_18_8();
  *(void *)(v0 + 15outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v1;
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 144);

  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = *(void **)(v5 + 144);
  NSString v7 = *(void **)(v5 + 136);
  swift_willThrow(a1, a2, a3, a4, a5);

  return OUTLINED_FUNCTION_22_2(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()( uint64_t a1, void *a2)
{
  if (a2) {
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(*(void *)(a1 + 32), a2);
  }
  else {
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(*(void *)(a1 + 32));
  }
}

uint64_t protocol witness for VoiceShortcutClientWrapping.isVoiceShortcutInstalled(voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_216154);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.onAsync(input:) in conformance WFExecuteCustomIntentFlow;
  return VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:)(a1, a2);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.installVoiceShortcut(url:voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper( uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v7 = (void *)swift_task_alloc(dword_21615C);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *NSString v7 = v3;
  v7[1] = protocol witness for VoiceShortcutClientWrapping.installVoiceShortcut(url:voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper;
  return VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:)(a1, a2, a3);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.getVoiceShortcut(voiceCommandName:) in conformance VoiceShortcutClientWrapper( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_216164);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.onAsync(input:) in conformance WFExecuteCustomIntentFlow;
  return VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(a1, a2);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.getVoiceShortcutName(voiceCommandId:) in conformance VoiceShortcutClientWrapper()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_21616C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_29_8( v1,  (uint64_t)protocol witness for VoiceShortcutClientWrapping.getVoiceShortcutName(voiceCommandId:) in conformance VoiceShortcutClientWrapper);
  return VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:)(v2, v3);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.getVoiceShortcutName(voiceCommandId:) in conformance VoiceShortcutClientWrapper( uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_21_7(a1, a2, *(uint64_t (**)(void))(v2 + 8));
}

void protocol witness for VoiceShortcutClientWrapping.getSiriAutoShortcutsEnablement(forBundleIdentifier:completion:) in conformance VoiceShortcutClientWrapper( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper( char a1, uint64_t a2, uint64_t a3)
{
  NSString v7 = (void *)swift_task_alloc(dword_216184);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *NSString v7 = v3;
  v7[1] = protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper;
  return VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:)(a1, a2, a3);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper()
{
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)( uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_1(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for VoiceShortcutClientWrapper()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin26VoiceShortcutClientWrapper);
}

uint64_t OUTLINED_FUNCTION_3_15()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

void OUTLINED_FUNCTION_4_11()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  *uint64_t v3 = *v0;
  *uint64_t v3 = *v0;
  *(void *)(v2 + 160) = *(void *)(v2 + 48);
}

uint64_t OUTLINED_FUNCTION_7_7@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v2 + 24) = a1;
  return swift_continuation_init(v1, 1LL);
}

uint64_t OUTLINED_FUNCTION_8_8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_9_7(uint64_t a1)
{
  *(void *)(v3 - 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_13_7(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_16_11()
{
  *(_WORD *)(v1 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2112;
  return swift_errorRetain(v0);
}

NSString OUTLINED_FUNCTION_17_8(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return String._bridgeToObjectiveC()();
}

void OUTLINED_FUNCTION_18_8()
{
  uint64_t v2 = (void *)(v1 - 8);
  *uint64_t v2 = *v0;
  *uint64_t v2 = *v0;
}

void OUTLINED_FUNCTION_19_6(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_20_12()
{
  return swift_continuation_await();
}

uint64_t OUTLINED_FUNCTION_21_7(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

BOOL OUTLINED_FUNCTION_23_7(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_25_11()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_26_7(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

id OUTLINED_FUNCTION_27_10(uint64_t a1, const char *a2)
{
  return objc_msgSend(v4, a2, v2, v3);
}

uint64_t OUTLINED_FUNCTION_28_7()
{
  return swift_errorRetain(v0);
}

uint64_t OUTLINED_FUNCTION_29_8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

  ;
}

uint64_t OUTLINED_FUNCTION_32_5(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_33_7()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_34_7()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t OUTLINED_FUNCTION_35_9()
{
  return type metadata accessor for Logger(0LL);
}

void OUTLINED_FUNCTION_36_8()
{
}

uint64_t OUTLINED_FUNCTION_37_7@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v3[2] = a2;
  void v3[3] = v2;
  v3[4] = result;
  return result;
}

BOOL OUTLINED_FUNCTION_38_7()
{
  return *(void *)(v0 + 160) == 0LL;
}

uint64_t LocationResolver.makeRecommendation(value:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationResolutionSpec(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LocationResolutionSpec.init()(v6);
  LocationResolver.makeRecommendation(value:context:spec:)(a1, a2, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t protocol witness for LocationResolving.makeRecommendation(value:context:) in conformance LocationResolver( uint64_t a1, uint64_t a2)
{
  return LocationResolver.makeRecommendation(value:context:)(a1, a2);
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.__allocating_init(runner:deviceState:)( __int128 *a1, void *a2)
{
  uint64_t v5 = OUTLINED_FUNCTION_19(v2, 104LL);
  CustomIntentContinueInAppWithDialogStrategy.init(runner:deviceState:)(a1, a2);
  return v5;
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.init(runner:deviceState:)(__int128 *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  __chkstk_darwin(v6);
  uint64_t v7 = v2 + 16;
  outlined init with copy of DeviceState((uint64_t)a2, v7);
  outlined init with copy of DeviceState(v7, (uint64_t)v20);
  if (one-time initialization token for shared != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v8 = static WFDialogState.shared;
  type metadata accessor for RunCustomIntentCATs(0LL);
  uint64_t v9 = swift_retain(v8);
  static CATOption.defaultMode.getter(v9);
  uint64_t v10 = OUTLINED_FUNCTION_19_7();
  type metadata accessor for RunCustomIntentCATsSimple(0LL);
  OUTLINED_FUNCTION_5_8();
  uint64_t v11 = OUTLINED_FUNCTION_20_13();
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_5_8();
  uint64_t v12 = OUTLINED_FUNCTION_19_7();
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_5_8();
  uint64_t v13 = OUTLINED_FUNCTION_20_13();
  uint64_t v14 = type metadata accessor for AppNameResolver();
  uint64_t v15 = OUTLINED_FUNCTION_19(v14, 16LL);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  uint64_t v16 = type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v17 = OUTLINED_FUNCTION_19(v16, 152LL);
  specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)( v20,  v8,  0LL,  1,  v10,  v11,  v12,  v13,  v15,  v17);
  *(void *)(v3 + 56) = v18;
  outlined init with take of AceServiceInvokerAsync(a1, v3 + 64);
  return v3;
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:)( uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[24] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  uint64_t v4 = type metadata accessor for TemplatingResult(0LL);
  v2[25] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[26] = v5;
  v2[27] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for DialogPhase(0LL);
  v2[28] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[29] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[30] = swift_task_alloc(v8);
  v2[31] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for OutputGenerationManifest(0LL);
  v2[32] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[33] = v10;
  v2[34] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v2[35] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[36] = v12;
  v2[37] = OUTLINED_FUNCTION_9_0(v12);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 304);
  *(void *)(*v2 + 31outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(void *)(v4 + 320) = a1;
  }
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v6, v7, v8);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 400LL);
  *(void *)(*(void *)v1 + 408LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:)()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[23];
  (*(void (**)(void, void, void))(v1 + 104))( v0[37],  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v0[35]);
  char v3 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  uint64_t v4 = **(void **)(v2 + 56);
  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v4 + 368));
    v0[38] = v5;
    OUTLINED_FUNCTION_17_9( v5,  (uint64_t)CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:));
    return v8();
  }

  else
  {
    uint64_t v7 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v4 + 376));
    v0[44] = v7;
    *uint64_t v7 = v0;
    v7[1] = CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:);
    return ((uint64_t (*)(void))v8)(v0[27]);
  }

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = *(void *)(v0 + 336);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 344));
  swift_bridgeObjectRelease(v1);
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v1 = *(void *)(v0 + 264);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to static NotificationTemplates.genericHandoffNotification()[1]);
  *(void *)(v0 + 368) = v2;
  char v3 = OUTLINED_FUNCTION_17_9( v2,  (uint64_t)CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:));
  return static NotificationTemplates.genericHandoffNotification()(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  char v3 = *(void *)(v2 + 352);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 360) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = v1[11];
  char v3 = v1[12];
  __swift_project_boxed_opaque_existential_1(v1 + 8, v2);
  uint64_t v4 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v3 + 32));
  *(void *)(v0 + 400) = v4;
  OUTLINED_FUNCTION_17_9( v4,  (uint64_t)CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:));
  return v6(v2, v3);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_2_13();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_2_13();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  OUTLINED_FUNCTION_2_13();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_12_9(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = (void *)v14[40];
  uint64_t v17 = v14[30];
  uint64_t v16 = v14[31];
  uint64_t v19 = v14[28];
  uint64_t v18 = v14[29];
  static DialogPhase.completion.getter();
  id v20 = [v15 catId];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v16, v19);
  OutputGenerationManifest.init(dialogPhase:_:)(v17, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v21);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v19);
  uint64_t v22 = type metadata accessor for ResponseFactory(0LL);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v14[41] = ResponseFactory.init()();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = OUTLINED_FUNCTION_19(v23, 40LL);
  *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E150;
  *(void *)(v24 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v15;
  uint64_t v40 = v24;
  specialized Array._endMutation()(v24, v25, v26);
  v14[42] = v40;
  id v28 = v15;
  id v29 = (void *)swift_task_alloc(v27);
  v14[43] = v29;
  *id v29 = v14;
  v29[1] = CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:);
  OUTLINED_FUNCTION_24_7();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, v39, v14 + 2, v40, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  OUTLINED_FUNCTION_51_0();
  uint64_t v15 = v14[51];
  uint64_t v17 = v14[48];
  uint64_t v16 = v14[49];
  uint64_t v18 = v14[34];
  uint64_t v19 = v14[31];
  id v29 = v14[30];
  uint64_t v30 = v14[27];
  uint64_t v31 = v14[24];
  outlined init with copy of DeviceState((uint64_t)(v14 + 2), (uint64_t)(v14 + 17));
  HandoffResponse.init(output:companionNotificationText:runSiriKitExecutorCommand:)(v14 + 17, v16, v17, v15);
  __swift_destroy_boxed_opaque_existential_1Tm(v14 + 2);
  OUTLINED_FUNCTION_31();
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  OUTLINED_FUNCTION_24_7();
  return v20(v20, v21, v22, v23, v24, v25, v26, v27, v29, v30, v31, a12, a13, a14);
}

#error "4ADDC: call analysis failed (funcsize=78)"
uint64_t CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:)( uint64_t a1,  uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 368);
  *(void *)(*v3 + 376) = v2;
  swift_task_dealloc(v7);
  if (!v2)
  {
    *(void *)(v6 + 384) = a2;
    *(void *)(v6 + 39outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a1;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.deinit()
{
  return v0;
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t protocol witness for ContinueInAppHandoffToCompanionFlowStrategyAsync.makeContinueInAppHandoffResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppWithDialogStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(**(void **)v2 + 112LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for ContinueInAppHandoffToCompanionFlowStrategyAsync.makeContinueInAppHandoffResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppWithDialogStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for ContinueInAppHandoffToCompanionFlowStrategyAsync.makeContinueInAppHandoffResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppWithDialogStrategy()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy;
  if (!lazy protocol witness table cache variable for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy)
  {
    uint64_t v1 = type metadata accessor for CustomIntentContinueInAppWithDialogStrategy();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomIntentContinueInAppWithDialogStrategy, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy);
  }

  return result;
}

uint64_t type metadata accessor for CustomIntentContinueInAppWithDialogStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin43CustomIntentContinueInAppWithDialogStrategy);
}

uint64_t OUTLINED_FUNCTION_2_13()
{
  return swift_task_dealloc(*(void *)(v0 + 296));
}

uint64_t OUTLINED_FUNCTION_5_8()
{
  return static CATOption.defaultMode.getter();
}

void *OUTLINED_FUNCTION_17_9@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_19_7()
{
  return CATWrapper.__allocating_init(options:globals:)(v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_20_13()
{
  return CATWrapperSimple.__allocating_init(options:globals:)(v0, 0LL);
}

void *SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation;
}

unint64_t static SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation.getter()
{
  return 0xD000000000000047LL;
}

void *SiriLinkSuggestionsConstants.IntentActionIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.IntentActionIdentifier;
}

unint64_t static SiriLinkSuggestionsConstants.IntentActionIdentifier.getter()
{
  return 0xD000000000000012LL;
}

void *SiriLinkSuggestionsConstants.PayloadKeys.BundleIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.PayloadKeys.BundleIdentifier;
}

unint64_t static SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_0_13();
}

const char *SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.unsafeMutableAddressor()
{
  return "archivedAction";
}

uint64_t static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.getter()
{
  return 0x6465766968637261LL;
}

const char *SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol.unsafeMutableAddressor()
{
  return "systemProtocol";
}

uint64_t static SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol.getter()
{
  return 0x72506D6574737973LL;
}

void *SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier;
}

void *SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier;
}

unint64_t static SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier.getter()
{
  return OUTLINED_FUNCTION_0_13();
}

void type metadata accessor for SiriLinkSuggestionsConstants()
{
}

void type metadata accessor for SiriLinkSuggestionsConstants.PayloadKeys()
{
}

void type metadata accessor for SiriLinkSuggestionsConstants.MappedParameterKeys()
{
}

unint64_t OUTLINED_FUNCTION_0_13()
{
  return 0xD000000000000010LL;
}

Swift::Bool __swiftcall INIntent.isBooleanParameter(parameterName:)(Swift::String parameterName)
{
  object = parameterName._object;
  OUTLINED_FUNCTION_0_14([v1 _codableDescription]);
  OUTLINED_FUNCTION_1_12();
  if (object)
  {
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___INCodableObjectAttribute);
    uint64_t v4 = (void *)OUTLINED_FUNCTION_2_14(v3);
    if (v4 && (uint64_t v5 = outlined bridged method (pb) of @objc INCodableObjectAttribute.typeName.getter(v4), v6))
    {
      if (v5 == 0x6E61656C6F6F42LL && v6 == 0xE700000000000000LL) {
        char v8 = 1;
      }
      else {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, 0x6E61656C6F6F42LL, 0xE700000000000000LL, 0LL);
      }
      swift_bridgeObjectRelease();
    }

    else
    {
      char v8 = 0;
    }
  }

  else
  {
    char v8 = 0;
  }

  return v8 & 1;
}

uint64_t INIntent.BOOLeanAttributeMetadata(parameterName:)(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = objc_opt_self(&OBJC_CLASS___INCodableObjectAttribute);
    uint64_t v5 = (void *)OUTLINED_FUNCTION_2_14(v4);
    if (v5)
    {
      id v6 = [v5 metadata];

      if (v6)
      {
        uint64_t v7 = objc_opt_self(&OBJC_CLASS___INCodableBooleanAttributeMetadata);
        uint64_t result = swift_dynamicCastObjCClass(v6, v7);
        if (result) {
          return result;
        }
      }
    }

    else
    {
    }
  }

  return 0LL;
}

void *outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byKeyPath:)( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 attributeByKeyPath:String._bridgeToObjectiveC()()];
  OUTLINED_FUNCTION_1_12();
  return a3;
}

uint64_t outlined bridged method (pb) of @objc INCodableObjectAttribute.typeName.getter(void *a1)
{
  id v1 = [a1 typeName];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void *OUTLINED_FUNCTION_0_14(void *a1)
{
  return outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byKeyPath:)(v2, v1, a1);
}

void OUTLINED_FUNCTION_1_12()
{
}

uint64_t OUTLINED_FUNCTION_2_14(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t SiriLinkViewModel.encoded()()
{
  if (one-time initialization token for encoder != -1) {
    swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
  }
  outlined init with take of SiriLinkViewModel(v0, __dst);
  unint64_t v1 = lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  return OUTLINED_FUNCTION_21_8(v1, &type metadata for SiriLinkViewModel, v1);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v2);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    return OUTLINED_FUNCTION_14();
  }

  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)();
    OUTLINED_FUNCTION_14();
    return outlined destroy of Any?((uint64_t)v2);
  }

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    specialized Dictionary._Variant.removeValue(forKey:)();
    OUTLINED_FUNCTION_14();
    return outlined consume of Data?(v5, v6);
  }

  else
  {
    specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, a4);
    return swift_bridgeObjectRelease();
  }

uint64_t one-time initialization function for encoder(uint64_t a1)
{
  return one-time initialization function for encoder( a1,  (uint64_t (*)(void))&type metadata accessor for PropertyListEncoder,  (uint64_t (*)(void))&PropertyListEncoder.init(),  &static SiriLinkViewModel.encoder);
}

uint64_t *SiriLinkViewModel.encoder.unsafeMutableAddressor()
{
  if (one-time initialization token for encoder != -1) {
    swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
  }
  return &static SiriLinkViewModel.encoder;
}

void *outlined init with take of SiriLinkViewModel(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x51uLL);
}

uint64_t static SiriLinkViewModel.encoder.getter()
{
  return static SiriLinkViewModel.encoder.getter( &one-time initialization token for encoder,  &static SiriLinkViewModel.encoder);
}

uint64_t one-time initialization function for decoder(uint64_t a1)
{
  return one-time initialization function for encoder( a1,  (uint64_t (*)(void))&type metadata accessor for PropertyListDecoder,  (uint64_t (*)(void))&PropertyListDecoder.init(),  &static SiriLinkViewModel.decoder);
}

uint64_t one-time initialization function for encoder( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = a2(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t result = a3();
  *a4 = result;
  return result;
}

uint64_t *SiriLinkViewModel.decoder.unsafeMutableAddressor()
{
  if (one-time initialization token for decoder != -1) {
    swift_once(&one-time initialization token for decoder, one-time initialization function for decoder);
  }
  return &static SiriLinkViewModel.decoder;
}

uint64_t static SiriLinkViewModel.decoder.getter()
{
  return static SiriLinkViewModel.encoder.getter( &one-time initialization token for decoder,  &static SiriLinkViewModel.decoder);
}

uint64_t static SiriLinkViewModel.encoder.getter(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_retain(*a2);
}

double static SiriLinkViewModel.decode(from:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (one-time initialization token for decoder != -1) {
    swift_once(&one-time initialization token for decoder, one-time initialization function for decoder);
  }
  unint64_t v7 = lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( v14,  &type metadata for SiriLinkViewModel,  a1,  a2,  &type metadata for SiriLinkViewModel,  v7);
  if (!v3)
  {
    char v9 = v15;
    double result = *(double *)v14;
    __int128 v10 = v14[1];
    __int128 v11 = v14[2];
    __int128 v12 = v14[3];
    __int128 v13 = v14[4];
    *(_OWORD *)a3 = v14[0];
    *(_OWORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
    *(_OWORD *)(a3 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v11;
    *(_OWORD *)(a3 + 48) = v12;
    *(_OWORD *)(a3 + 64) = v13;
    *(_BYTE *)(a3 + 80) = v9;
  }

  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SiriLinkViewModel.base64EncodedString()()
{
  if (one-time initialization token for encoder != -1) {
    swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
  }
  outlined init with take of SiriLinkViewModel(v0, __dst);
  unint64_t v4 = lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  uint64_t v5 = OUTLINED_FUNCTION_21_8(v4, &type metadata for SiriLinkViewModel, v4);
  if (!v1)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    Swift::String v9 = Data.base64EncodedString(options:)(0LL);
    uint64_t countAndFlagsBits = v9._countAndFlagsBits;
    object = v9._object;
    outlined consume of Data._Representation(v7, v8);
  }

  uint64_t v10 = countAndFlagsBits;
  __int128 v11 = object;
  result._object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

uint64_t SiriLinkViewModel.asPatternParams(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v15 = a1;
  uint64_t v4 = one-time initialization token for encoder;
  uint64_t v5 = swift_bridgeObjectRetain(a1);
  if (v4 != -1) {
    uint64_t v5 = swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
  }
  OUTLINED_FUNCTION_22_8(v5, v12);
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v12);
  if (v2) {
    return swift_bridgeObjectRelease(a1);
  }
  uint64_t v9 = v6;
  unint64_t v10 = v7;
  Swift::String v11 = Data.base64EncodedString(options:)(0LL);
  outlined consume of Data._Representation(v9, v10);
  uint64_t v14 = &type metadata for String;
  Swift::String v13 = v11;
  specialized Dictionary.subscript.setter((uint64_t)&v13);
  return v15;
}

uint64_t SiriLinkViewModel.ArchivedViewModelCodingKeys.stringValue.getter()
{
  return 12383LL;
}

uint64_t SiriLinkViewModel.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v4 = 0x8000000000193E70LL;
    if (a2 == 0x8000000000193E70LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000000193E70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x8000000000193E90LL)
  {
    unint64_t v6 = 0x8000000000193E90LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000000193E90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000019LL && a2 == 0x8000000000193EB0LL)
  {
    unint64_t v7 = 0x8000000000193EB0LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x8000000000193EB0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x8000000000193ED0LL)
  {
    unint64_t v8 = 0x8000000000193ED0LL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x8000000000193ED0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_23;
  }

  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000000193EF0LL)
  {
    unint64_t v9 = 0x8000000000193EF0LL;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000000193EF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_29;
  }

  if (a1 == 0x654874706D6F7270LL && a2 == 0xEC00000072656461LL)
  {
    swift_bridgeObjectRelease(0xEC00000072656461LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x654874706D6F7270LL, 0xEC00000072656461LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t SiriLinkViewModel.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_4BE84 + 4 * byte_180380[a1]))( 0xD000000000000011LL,  0x8000000000193E70LL);
}

uint64_t sub_4BE84(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_4BECC()
{
  return 0x654874706D6F7270LL;
}

uint64_t SiriLinkViewModel.ArchivedViewModelCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(0xE200000000000000LL);
    char v4 = 0;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL);
    OUTLINED_FUNCTION_14();
    char v4 = v3 ^ 1;
  }

  return v4 & 1;
}

void SiriLinkViewModel.ArchivedViewModelCodingKeys.hashValue.getter()
{
}

void protocol witness for Hashable.hashValue.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = SiriLinkViewModel.ArchivedViewModelCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  return OUTLINED_FUNCTION_47();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = default argument 3 of INIntentResolutionResult.getDisplayHints(intent:parameter:locale:shouldIncludeOrdinalReference:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys( uint64_t a1)
{
  unint64_t RunCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys();
  return CodingKey.description.getter(a1, RunCoding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys( uint64_t a1)
{
  unint64_t RunCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys();
  return CodingKey.debugDescription.getter(a1, RunCoding);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys( uint64_t a1)
{
  unint64_t RunWatchCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys();
  return CodingKey.description.getter(a1, RunWatchCoding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys( uint64_t a1)
{
  unint64_t RunWatchCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys();
  return CodingKey.debugDescription.getter(a1, RunWatchCoding);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriLinkViewModel.CodingKeys()
{
  return SiriLinkViewModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriLinkViewModel.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = SiriLinkViewModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriLinkViewModel.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = variable initialization expression of WFChooseFromListPromptFlowStrategy.WINDOWSIZE();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.PromptHeaderCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.PromptHeaderCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void SiriLinkViewModel.encode(to:)(void *a1)
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();
  uint64_t v12 = dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_1F4C20, &unk_1F4C20, v11, v9, v10);
  OUTLINED_FUNCTION_22_8(v12, v14);
  __asm { BR              X10 }

void sub_4C4CC()
{
  __int128 v3 = *(_OWORD *)(v0 + 360);
  *(_OWORD *)(v0 + 43outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(_OWORD *)(v0 + 344);
  *(_OWORD *)(v0 + 448) = v3;
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 376);
  *(_BYTE *)(v0 + 176) = 0;
  outlined copy of Data._Representation(*(void *)(v0 + 72), *(void *)(v0 + 64));
  lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys();
  swift_bridgeObjectRetain(*(void *)(v0 + 88));
  swift_bridgeObjectRetain(*(void *)(v0 + 104));
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&unk_1F4CB0, v0 + 176, *(void *)(v0 + 168), &unk_1F4CB0);
  __int128 v4 = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 432);
  *(_OWORD *)(v0 + 19outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v4;
  *(_OWORD *)(v0 + outlined init with copy of AppShortcutInvoking(v0, v1 - 208) = *(_OWORD *)(v0 + 464);
  lazy protocol witness table accessor for type ArchivedViewModel and conformance ArchivedViewModel();
  OUTLINED_FUNCTION_14_9();
  OUTLINED_FUNCTION_9_8(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v0 + 8LL));
  OUTLINED_FUNCTION_8_9(*(void *)(v0 + 152));
  outlined release of SiriLinkViewModel(v2);
  OUTLINED_FUNCTION_13_8();
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SiriLinkViewModel.CodingKeys, &unk_1F4C20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SiriLinkViewModel.CodingKeys, &unk_1F4C20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SiriLinkViewModel.CodingKeys, &unk_1F4C20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SiriLinkViewModel.CodingKeys, &unk_1F4C20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.PromptHeaderCodingKeys,  &unk_1F4F80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.PromptHeaderCodingKeys,  &unk_1F4F80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable("yJ\a", &unk_1F4F80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.PromptHeaderCodingKeys,  &unk_1F4F80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys,  &unk_1F4EF0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys,  &unk_1F4EF0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys,  &unk_1F4EF0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys,  &unk_1F4EF0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutAppPhrasesViewModel,  &type metadata for AutoShortcutAppPhrasesViewModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutAppPhrasesViewModel,  &type metadata for AutoShortcutAppPhrasesViewModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys,  &unk_1F4E60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys,  &unk_1F4E60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys,  &unk_1F4E60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys,  &unk_1F4E60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys,  &unk_1F4DD0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys,  &unk_1F4DD0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys,  &unk_1F4DD0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys,  &unk_1F4DD0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutFirstRunCodingKeys,  &unk_1F4D40);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutFirstRunCodingKeys,  &unk_1F4D40);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutFirstRunCodingKeys,  &unk_1F4D40);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.AutoShortcutFirstRunCodingKeys,  &unk_1F4D40);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.ArchivedViewModelCodingKeys,  &unk_1F4CB0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.ArchivedViewModelCodingKeys,  &unk_1F4CB0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.ArchivedViewModelCodingKeys,  &unk_1F4CB0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkViewModel.ArchivedViewModelCodingKeys,  &unk_1F4CB0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedViewModel and conformance ArchivedViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ArchivedViewModel,  &type metadata for ArchivedViewModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ArchivedViewModel,  &type metadata for ArchivedViewModel);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel);
  }

  return result;
}

uint64_t outlined release of SiriLinkViewModel(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of SiriLinkViewModel( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, char a11)
{
  switch(a11)
  {
    case 0:
      outlined consume of Data._Representation(result, a2);
      goto LABEL_4;
    case 1:
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRelease(result);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(a6);
      a4 = a8;
      a6 = a10;
LABEL_4:
      swift_bridgeObjectRelease(a4);
      a2 = a6;
      goto LABEL_5;
    case 5:
LABEL_5:
      unint64_t result = swift_bridgeObjectRelease(a2);
      break;
    default:
      return result;
  }

  return result;
}

void SiriLinkViewModel.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.PromptHeaderCodingKeys>);
  OUTLINED_FUNCTION_20_14(v3, (uint64_t)&v40);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_83();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys>);
  OUTLINED_FUNCTION_20_14(v5, (uint64_t)&v42);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_83();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys>);
  OUTLINED_FUNCTION_20_14(v7, (uint64_t)&v41);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_83();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys>);
  OUTLINED_FUNCTION_20_14(v9, (uint64_t)&v39);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_83();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutFirstRunCodingKeys>);
  OUTLINED_FUNCTION_20_14(v11, (uint64_t)&v38);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_83();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.ArchivedViewModelCodingKeys>);
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_35();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.CodingKeys>);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_18_9();
  uint64_t v17 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  unint64_t v18 = lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1F4C20, &unk_1F4C20, v18, v17, v16);
  if (!v36)
  {
    uint64_t v35 = v15;
    uint64_t v37 = v14;
    uint64_t v19 = KeyedDecodingContainer.allKeys.getter(v14);
    if (*(void *)(v19 + 16))
    {
      OUTLINED_FUNCTION_10_9();
      uint64_t v20 = *(unsigned __int8 *)(v19 + 32);
      specialized ArraySlice.subscript.getter(1LL, v21, v19, v19 + 32, 0LL, (2 * v21) | 1);
      uint64_t v23 = v22;
      unint64_t v25 = v24;
      swift_bridgeObjectRelease(v19);
      if (v23 == v25 >> 1) {
        __asm { BR              X9 }
      }
    }

    uint64_t v26 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v26, &protocol witness table for DecodingError, 0LL, 0LL);
    id v28 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *id v28 = &type metadata for SiriLinkViewModel;
    uint64_t v29 = KeyedDecodingContainer.codingPath.getter(v37);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v29,  0xD00000000000002BLL,  0x8000000000193E40LL,  0LL);
    uint64_t v30 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104LL))( v28,  enum case for DecodingError.typeMismatch(_:),  v26);
    swift_willThrow(v30, v31, v32, v33, v34);
    OUTLINED_FUNCTION_6_10();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v1, v37);
  }

  __swift_destroy_boxed_opaque_existential_1Tm(v38);
  OUTLINED_FUNCTION_13_8();
}

void protocol witness for Decodable.init(from:) in conformance SiriLinkViewModel( void *a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    outlined init with take of SiriLinkViewModel(__src, a2);
  }
}

void protocol witness for Encodable.encode(to:) in conformance SiriLinkViewModel(void *a1)
{
}

uint64_t outlined copy of SiriLinkViewModel( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t result = a10;
  switch(a11)
  {
    case 0:
      outlined copy of Data._Representation(a1, a2);
      goto LABEL_4;
    case 1:
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRetain(a10);
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain(a4);
      a4 = a8;
LABEL_4:
      swift_bridgeObjectRetain(a6);
      a2 = a4;
      goto LABEL_5;
    case 5:
LABEL_5:
      uint64_t result = swift_bridgeObjectRetain(a2);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t destroy for SiriLinkViewModel(uint64_t a1)
{
  return outlined consume of SiriLinkViewModel( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for SiriLinkViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  char v14 = *(_BYTE *)(a2 + 80);
  outlined copy of SiriLinkViewModel(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v13;
  *(_BYTE *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for SiriLinkViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  char v25 = *(_BYTE *)(a2 + 80);
  outlined copy of SiriLinkViewModel(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  unint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  unint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(_BYTE *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v24;
  *(_BYTE *)(a1 + 80) = v25;
  outlined consume of SiriLinkViewModel(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

void *__swift_memcpy81_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x51uLL);
}

uint64_t assignWithTake for SiriLinkViewModel(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 80);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(_BYTE *)(a1 + 80);
  __int128 v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  __int128 v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v3;
  outlined consume of SiriLinkViewModel(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriLinkViewModel(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFB && *(_BYTE *)(a1 + 81))
    {
      int v2 = *(_DWORD *)a1 + 250;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
      if (v3 <= 5) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriLinkViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(void *)uint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(_BYTE *)(result + 81) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFB) {
      *(_BYTE *)(result + 81) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 80) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for SiriLinkViewModel(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t destructiveInjectEnumTag for SiriLinkViewModel(uint64_t result, char a2)
{
  *(_BYTE *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SiriLinkViewModel()
{
  return &type metadata for SiriLinkViewModel;
}

uint64_t getEnumTagSinglePayload for SiriLinkViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for SiriLinkViewModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_4D7E4 + 4 * byte_1803A3[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_4D818 + 4 * byte_18039E[v4]))();
}

uint64_t sub_4D818(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4D820(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x4D828LL);
  }
  return result;
}

uint64_t sub_4D834(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x4D83CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_4D840(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4D848(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SiriLinkViewModel.CodingKeys()
{
  return &unk_1F4C20;
}

void *type metadata accessor for SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  return &unk_1F4CB0;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutFirstRunCodingKeys()
{
  return &unk_1F4D40;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys()
{
  return &unk_1F4DD0;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys()
{
  return &unk_1F4E60;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys()
{
  return &unk_1F4EF0;
}

uint64_t storeEnumTagSinglePayload for SiriLinkViewModel.ArchivedViewModelCodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_4D8FC + 4 * byte_1803A8[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_4D91C + 4 * byte_1803AD[v4]))();
  }
}

_BYTE *sub_4D8FC(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_4D91C(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_4D924(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_4D92C(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_4D934(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_4D93C(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void *type metadata accessor for SiriLinkViewModel.PromptHeaderCodingKeys()
{
  return &unk_1F4F80;
}

uint64_t specialized ArraySlice.subscript.getter( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((a2 & 0x8000000000000000LL) == 0) {
    return swift_unknownObjectRetain(a3);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t outlined consume of Data?(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(result, a2);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_13(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(void *)(v2 - 192), a1);
}

uint64_t OUTLINED_FUNCTION_2_15(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, *(void *)(v2 - 256), a1);
}

uint64_t OUTLINED_FUNCTION_4_12@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 256) + 8LL))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_5_9(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(void *)(v2 + 168), a1);
}

uint64_t OUTLINED_FUNCTION_6_10()
{
  return swift_unknownObjectRelease(v0);
}

void *OUTLINED_FUNCTION_7_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t OUTLINED_FUNCTION_8_9@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_9_8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void OUTLINED_FUNCTION_10_9()
{
  *(void *)(v1 - 360) = v0;
}

  ;
}

uint64_t OUTLINED_FUNCTION_12_10()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 280) + 8LL))(v0, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_14_9()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_15_7()
{
  *(void *)(v1 - 384) = v0;
}

uint64_t OUTLINED_FUNCTION_16_12()
{
  return v0;
}

  ;
}

uint64_t OUTLINED_FUNCTION_20_14@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_21_8(uint64_t a1, ...)
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)(va);
}

void *OUTLINED_FUNCTION_22_8(uint64_t a1, void *a2)
{
  return outlined init with take of SiriLinkViewModel(v2, a2);
}

  ;
}

void OUTLINED_FUNCTION_24_8()
{
}

uint64_t OUTLINED_FUNCTION_25_12()
{
  return v0;
}

Swift::String_optional __swiftcall SiriWorkflowRunnerInput.getShortcutName()()
{
  uint64_t v1 = OUTLINED_FUNCTION_20_15(v0, v12);
  uint64_t v2 = (void *)v12[0];
  uint64_t v3 = v12[2];
  uint64_t v4 = OUTLINED_FUNCTION_20_15((uint64_t)v1, v15);
  if (v16)
  {
    OUTLINED_FUNCTION_20_15((uint64_t)v4, v13);
    if (v14 == 3)
    {
      unsigned int v6 = (void *)v13[0];
      uint64_t v5 = v13[1];
      BOOL v7 = (void *)v13[2];
      swift_bridgeObjectRetain(v3);
      id v8 = v2;
    }

    else
    {
      uint64_t v5 = 0LL;
      BOOL v7 = 0LL;
    }
  }

  else
  {
    uint64_t v5 = v15[0];
    BOOL v7 = (void *)v15[1];
    OUTLINED_FUNCTION_9_9();
  }

  uint64_t v9 = v5;
  uint64_t v10 = v7;
  result.value._object = v10;
  result.value._uint64_t countAndFlagsBits = v9;
  return result;
}

id protocol witness for SiriRunnerClient.delegate.getter in conformance WFSiriWorkflowRunnerClient()
{
  return @nonobjc WFSiriWorkflowRunnerClient.delegate.getter();
}

id @nonobjc WFSiriWorkflowRunnerClient.delegate.getter()
{
  return [v0 delegate];
}

uint64_t protocol witness for SiriRunnerClient.delegate.setter in conformance WFSiriWorkflowRunnerClient( uint64_t a1)
{
  return @nonobjc WFSiriWorkflowRunnerClient.delegate.setter(a1);
}

uint64_t @nonobjc WFSiriWorkflowRunnerClient.delegate.setter(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t (*protocol witness for SiriRunnerClient.delegate.modify in conformance WFSiriWorkflowRunnerClient( void *a1))(uint64_t *a1)
{
  uint64_t v3 = *v1;
  a1[1] = *v1;
  *a1 = [v3 delegate];
  return protocol witness for SiriRunnerClient.delegate.modify in conformance WFSiriWorkflowRunnerClient;
}

uint64_t protocol witness for SiriRunnerClient.delegate.modify in conformance WFSiriWorkflowRunnerClient( uint64_t *a1)
{
  uint64_t v1 = *a1;
  [(id)a1[1] setDelegate:*a1];
  return swift_unknownObjectRelease(v1);
}

id protocol witness for SiriRunnerClient.siriExecutionMetrics.getter in conformance WFSiriWorkflowRunnerClient()
{
  return @nonobjc WFSiriWorkflowRunnerClient.siriExecutionMetrics.getter();
}

id @nonobjc WFSiriWorkflowRunnerClient.siriExecutionMetrics.getter()
{
  return [v0 siriExecutionMetrics];
}

void protocol witness for SiriRunnerClient.siriExecutionMetrics.setter in conformance WFSiriWorkflowRunnerClient( void *a1)
{
}

void @nonobjc WFSiriWorkflowRunnerClient.siriExecutionMetrics.setter(void *a1)
{
}

void (*protocol witness for SiriRunnerClient.siriExecutionMetrics.modify in conformance WFSiriWorkflowRunnerClient( void *a1))(id *a1)
{
  uint64_t v3 = *v1;
  a1[1] = *v1;
  *a1 = [v3 siriExecutionMetrics];
  return protocol witness for SiriRunnerClient.siriExecutionMetrics.modify in conformance WFSiriWorkflowRunnerClient;
}

void protocol witness for SiriRunnerClient.siriExecutionMetrics.modify in conformance WFSiriWorkflowRunnerClient( id *a1)
{
  id v1 = *a1;
  objc_msgSend(a1[1], "setSiriExecutionMetrics:");
}

id protocol witness for SiriRunnerClient.stop() in conformance WFSiriWorkflowRunnerClient()
{
  return @nonobjc WFWorkflowRunnerClient.stop()();
}

id @nonobjc WFWorkflowRunnerClient.stop()()
{
  return [v0 stop];
}

id protocol witness for SiriRunnerClient.start() in conformance WFSiriWorkflowRunnerClient()
{
  return @nonobjc WFWorkflowRunnerClient.start()();
}

id @nonobjc WFWorkflowRunnerClient.start()()
{
  return [v0 start];
}

id protocol witness for SiriRunnerClient.pauseRunningShortcut() in conformance WFSiriWorkflowRunnerClient()
{
  return @nonobjc WFSiriWorkflowRunnerClient.pauseRunningShortcut()();
}

id @nonobjc WFSiriWorkflowRunnerClient.pauseRunningShortcut()()
{
  return [v0 pauseRunningShortcut];
}

void SiriWorkflowRunnerInput.toWFSiriWorkflowRunnerClient(deviceState:aceServiceInvoker:dialogState:)()
{
  __asm { BR              X10 }

id sub_4E460()
{
  uint64_t v4 = v23;
  unint64_t v5 = v24;
  unsigned int v6 = *(void (**)(uint64_t, unint64_t))(*(void *)v0 + 216LL);
  OUTLINED_FUNCTION_11_11();
  v6(v23, v24);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v7 = OUTLINED_FUNCTION_48();
  id v8 = (os_log_s *)__swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
  uint64_t v9 = OUTLINED_FUNCTION_5_10(v2);
  Logger.logObject.getter(v9);
  os_log_type_t v10 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v8, v10))
  {
    uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v19 = v3;
    uint64_t v20 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v12 = v20;
    *(_DWORD *)uint64_t v11 = 136315138;
    OUTLINED_FUNCTION_11_11();
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v11 + 4);
    OUTLINED_FUNCTION_14_10();
    OUTLINED_FUNCTION_14_10();
    swift_bridgeObjectRelease(v2);
    OUTLINED_FUNCTION_31_2(&dword_0, v8, v10, "#SiriWorkflowRunner creating async stream for shortcut: %s", v11);
    OUTLINED_FUNCTION_30_3(v12, v13, (uint64_t)&type metadata for Any + 8);
    uint64_t v14 = v12;
    uint64_t v3 = v19;
    OUTLINED_FUNCTION_1_0(v14);
    OUTLINED_FUNCTION_1_0((uint64_t)v11);
  }

  else
  {
    OUTLINED_FUNCTION_14_10();
    OUTLINED_FUNCTION_14_10();
  }

  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  AceServiceInvokerAsync.toWFSiriWorkflowRunnerClientOption(deviceState:)(v3);
  OUTLINED_FUNCTION_2_16();
  uint64_t v16 = v15;
  id v17 = objc_allocWithZone(&OBJC_CLASS___WFSiriWorkflowRunnerClient);
  return @nonobjc WFSiriWorkflowRunnerClient.init(workflowName:runSource:options:)(v4, v5, v16, v1);
}

id AceServiceInvokerAsync.toWFSiriWorkflowRunnerClientOption(deviceState:)(void *a1)
{
  uint64_t v2 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  uint64_t v3 = dispatch thunk of DeviceState.isHomePod.getter(v2);
  if ((v3 & 1) == 0) {
    goto LABEL_10;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v6 = OUTLINED_FUNCTION_48();
  uint64_t v7 = (os_log_s *)__swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
  Logger.logObject.getter(v7);
  os_log_type_t v8 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_23_7(v8))
  {
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v7, (os_log_type_t)v2, "#SiriWorkflowRunner the request is happening on homepod", v9, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
  }

  OUTLINED_FUNCTION_8_10(v10, v11, v12);
  uint64_t v13 = v54;
  uint64_t v14 = v55;
  __swift_project_boxed_opaque_existential_1(v53, v54);
  uint64_t v15 = dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()(v13, v14);
  if (!v16)
  {
    uint64_t v3 = OUTLINED_FUNCTION_21_9(v15, 0LL, v17);
LABEL_10:
    char v25 = _swiftEmptyArrayStorage;
    goto LABEL_15;
  }

  unint64_t v18 = v16;
  uint64_t v51 = v15;
  OUTLINED_FUNCTION_21_9(v15, v16, v17);
  uint64_t v19 = OUTLINED_FUNCTION_5_10(v18);
  uint64_t v20 = v7;
  Logger.logObject.getter(v19);
  os_log_type_t v21 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_12_11(v21))
  {
    uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v23 = OUTLINED_FUNCTION_38(32LL);
    v53[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_bridgeObjectRetain(v18);
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v18, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v22 + 4);
    OUTLINED_FUNCTION_37_3(v18);
    OUTLINED_FUNCTION_31_2(&dword_0, v20, v1, "#SiriWorkflowRunner got airplayRouteId: %s", v22);
    OUTLINED_FUNCTION_30_3(v23, v24, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v23);
    OUTLINED_FUNCTION_1_0((uint64_t)v22);
  }

  else
  {

    OUTLINED_FUNCTION_19_1(v18);
  }

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  char v25 = (void *)v3;
  unint64_t v26 = *(void *)(v3 + 16);
  if (v26 >= *(void *)(v3 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    char v25 = (void *)v3;
  }

  v25[2] = v26 + 1;
  uint64_t v27 = &v25[2 * v26];
  v27[4] = v51;
  void v27[5] = v18;
LABEL_15:
  OUTLINED_FUNCTION_8_10(v3, v4, v5);
  uint64_t v28 = v54;
  uint64_t v29 = v55;
  __swift_project_boxed_opaque_existential_1(v53, v54);
  uint64_t v30 = dispatch thunk of PeerInfoProviding.getIdsIdentifier()(v28, v29);
  uint64_t v32 = v31;
  uint64_t v33 = v54;
  uint64_t v34 = v55;
  __swift_project_boxed_opaque_existential_1(v53, v54);
  uint64_t v35 = dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()(v33, v34);
  uint64_t v37 = v36;
  uint64_t v38 = v54;
  uint64_t v39 = v55;
  __swift_project_boxed_opaque_existential_1(v53, v54);
  uint64_t v40 = dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()(v38, v39);
  uint64_t v42 = v41;
  uint64_t v43 = v54;
  uint64_t v44 = v55;
  __swift_project_boxed_opaque_existential_1(v53, v54);
  char v45 = dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()(v43, v44);
  id v46 = objc_allocWithZone(&OBJC_CLASS___WFSiriWorkflowRunnerClientOptions);
  id v47 = @nonobjc WFSiriWorkflowRunnerClientOptions.init(airPlayRouteIDs:executionContext:originatingDeviceIDSIdentifier:originatingDeviceRapportEffectiveIdentifier:originatingDeviceRapportMediaSystemIdentifier:isOwnedByCurrentUser:)( (uint64_t)v25,  2LL,  v30,  v32,  v35,  v37,  v40,  v42,  v45 & 1);
  OUTLINED_FUNCTION_21_9((uint64_t)v47, v48, v49);
  return v47;
}

id WFSiriWorkflowRunnerClient.__allocating_init(pausedShortcutData:runSource:options:)( void *a1, uint64_t a2, void *a3)
{
  id v6 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)) initWithPausedShortcutData:a1 runSource:a2 options:a3];

  return v6;
}

Swift::Bool __swiftcall SiriRunnerClient.isLastStep()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(uint64_t (**)(void))(v1 + 32);
  uint64_t v5 = (void *)v4();
  id v6 = [v5 shortcutActionCount];

  uint64_t v7 = (void *)((uint64_t (*)(uint64_t, uint64_t))v4)(v3, v2);
  id v8 = [v7 currentShortcutStep];

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v9 = OUTLINED_FUNCTION_48();
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v36 = OUTLINED_FUNCTION_38(64LL);
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v17 = OUTLINED_FUNCTION_62(v14, v15, v16);
    OUTLINED_FUNCTION_7_9(v17, v18, v19, v13 + 12, v20, v21, v22, v23, (uint64_t)v6);
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v27 = OUTLINED_FUNCTION_62(v24, v25, v26);
    OUTLINED_FUNCTION_7_9(v27, v28, v29, v13 + 22, v30, v31, v32, v33, (uint64_t)v8);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_24_9( &dword_0,  v11,  v12,  "#SiriWorkflowRunner totalStepCount: %s, currentStepCount: %s",  (uint8_t *)v13);
    OUTLINED_FUNCTION_23_9(v36, v34, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v36);
    OUTLINED_FUNCTION_1_0(v13);
  }

  return v6 == v8;
}

unint64_t type metadata accessor for WFSiriWorkflowRunnerClient()
{
  unint64_t result = lazy cache variable for type metadata for WFSiriWorkflowRunnerClient;
  if (!lazy cache variable for type metadata for WFSiriWorkflowRunnerClient)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___WFSiriWorkflowRunnerClient);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for WFSiriWorkflowRunnerClient);
  }

  return result;
}

id @nonobjc WFSiriWorkflowRunnerClient.init(workflowName:runSource:options:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v9 = [v4 initWithWorkflowName:v8 runSource:a3 options:a4];

  return v9;
}

id @nonobjc LNFullyQualifiedActionIdentifier.init(actionIdentifier:bundleIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v9 = [v4 initWithActionIdentifier:v7 bundleIdentifier:v8];

  return v9;
}

id @nonobjc WFSiriWorkflowRunnerClient.init(autoShortcutIdentifier:phrase:runSource:action:metadata:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  NSString v7 = v6;
  if (a3)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }

  else
  {
    NSString v13 = 0LL;
  }

  id v14 = [v7 initWithAutoShortcutIdentifier:a1 phrase:v13 runSource:a4 action:a5 metadata:a6];

  return v14;
}

id @nonobjc WFSiriWorkflowRunnerClientOptions.init(airPlayRouteIDs:executionContext:originatingDeviceIDSIdentifier:originatingDeviceRapportEffectiveIdentifier:originatingDeviceRapportMediaSystemIdentifier:isOwnedByCurrentUser:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1)
  {
    v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v16 = 0LL;
    if (a6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  v15.super.Class isa = 0LL;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
LABEL_4:
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    goto LABEL_8;
  }

uint64_t outlined release of SiriWorkflowRunnerInput(uint64_t a1)
{
  return a1;
}

void *destroy for SiriWorkflowRunnerInput(uint64_t a1)
{
  return outlined consume of SiriWorkflowRunnerInput( *(void **)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void **)(a1 + 32),  *(void **)(a1 + 40),  *(void **)(a1 + 48),  *(void **)(a1 + 56),  *(_BYTE *)(a1 + 64));
}

uint64_t initializeWithCopy for SiriWorkflowRunnerInput(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  NSString v7 = *(void **)(a2 + 32);
  NSString v8 = *(void **)(a2 + 40);
  id v9 = *(void **)(a2 + 48);
  uint64_t v10 = *(void **)(a2 + 56);
  char v11 = *(_BYTE *)(a2 + 64);
  outlined copy of SiriWorkflowRunnerInput(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for SiriWorkflowRunnerInput(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  NSString v7 = *(void **)(a2 + 32);
  NSString v8 = *(void **)(a2 + 40);
  id v9 = *(void **)(a2 + 48);
  uint64_t v10 = *(void **)(a2 + 56);
  char v11 = *(_BYTE *)(a2 + 64);
  outlined copy of SiriWorkflowRunnerInput(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  os_log_type_t v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  NSString v16 = *(void **)(a1 + 32);
  NSString v17 = *(void **)(a1 + 40);
  NSString v18 = *(void **)(a1 + 48);
  id v19 = *(void **)(a1 + 56);
  char v20 = *(_BYTE *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  outlined consume of SiriWorkflowRunnerInput(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

void *__swift_memcpy65_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t assignWithTake for SiriWorkflowRunnerInput(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 64);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  NSString v8 = *(void **)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void **)(a1 + 48);
  char v11 = *(void **)(a1 + 56);
  char v12 = *(_BYTE *)(a1 + 64);
  __int128 v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  __int128 v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  outlined consume of SiriWorkflowRunnerInput(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriWorkflowRunnerInput(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 65))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriWorkflowRunnerInput( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 65) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 65) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 64) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for SiriWorkflowRunnerInput(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t destructiveInjectEnumTag for SiriWorkflowRunnerInput(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SiriWorkflowRunnerInput()
{
  return &type metadata for SiriWorkflowRunnerInput;
}

void OUTLINED_FUNCTION_2_16()
{
}

uint64_t OUTLINED_FUNCTION_5_10(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t OUTLINED_FUNCTION_7_9( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, v10 + 8, v9);
}

void *OUTLINED_FUNCTION_8_10(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return dispatch thunk of AceServiceInvokerAsync.peerInfo()((uint64_t *)va, v4, v3);
}

uint64_t OUTLINED_FUNCTION_9_9()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_11_11()
{
  return swift_bridgeObjectRetain(v0);
}

BOOL OUTLINED_FUNCTION_12_11(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_14_10()
{
  return outlined release of SiriWorkflowRunnerInput(v0);
}

uint64_t OUTLINED_FUNCTION_17_10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v10, v11);
}

id OUTLINED_FUNCTION_18_10()
{
  return [v1 *(SEL *)(v0 + 2696)];
}

void *OUTLINED_FUNCTION_20_15(uint64_t a1, void *a2)
{
  return outlined init with take of SiriWorkflowRunnerInput(v2, a2);
}

uint64_t OUTLINED_FUNCTION_21_9(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_22_9(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_23_9(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 2LL, a3);
}

void OUTLINED_FUNCTION_24_9(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, unint64_t a12, void *a13)
{
  uint64_t v17 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)((uint64_t)a13, 2);
  uint64_t v19 = v18;
  swift_release();
  outlined consume of Data?(a11, a12);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a13);
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
  *(void *)(a9 + 24) = v19;
  *(void *)(a9 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a3;
  *(void *)(a9 + 40) = a4;
  *(void *)(a9 + 48) = a5;
  *(void *)(a9 + 56) = a6;
  *(_BYTE *)(a9 + 64) = a7;
  *(void *)(a9 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a8;
  *(void *)(a9 + 80) = a10;
  *(void *)(a9 + 88) = a11;
  *(void *)(a9 + 96) = a12;
  return result;
}

uint64_t outlined copy of Data?(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(result, a2);
  }
  return result;
}

uint64_t ActionConfirmationVisual.response.getter(uint64_t a1)
{
  v2[94] = v1;
  v2[93] = a1;
  uint64_t v3 = type metadata accessor for BinaryButton(0LL);
  v2[95] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[96] = v4;
  v2[97] = OUTLINED_FUNCTION_9_0(v4);
  uint64_t v5 = type metadata accessor for Button.LabelStyle(0LL);
  v2[98] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[99] = v6;
  v2[100] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = type metadata accessor for _ProtoButton.FormAction(0LL);
  v2[101] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[102] = v8;
  v2[103] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = type metadata accessor for ButtonRole(0LL);
  v2[104] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[105] = v10;
  v2[106] = OUTLINED_FUNCTION_4_0(v10);
  v2[107] = OUTLINED_FUNCTION_11_0();
  uint64_t v11 = type metadata accessor for Button(0LL);
  v2[108] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[109] = v12;
  v2[110] = OUTLINED_FUNCTION_4_0(v12);
  v2[111] = OUTLINED_FUNCTION_11_0();
  v2[112] = OUTLINED_FUNCTION_11_0();
  v2[113] = OUTLINED_FUNCTION_11_0();
  uint64_t v13 = type metadata accessor for Command(0LL);
  v2[114] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[115] = v14;
  v2[116] = OUTLINED_FUNCTION_4_0(v14);
  v2[117] = OUTLINED_FUNCTION_11_0();
  uint64_t v15 = type metadata accessor for SeparatorStyle(0LL);
  v2[118] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[119] = v16;
  v2[120] = OUTLINED_FUNCTION_4_0(v16);
  v2[121] = OUTLINED_FUNCTION_11_0();
  uint64_t v17 = type metadata accessor for Separators(0LL);
  v2[122] = OUTLINED_FUNCTION_9_0(*(void *)(v17 - 8));
  uint64_t v18 = type metadata accessor for ComponentWrapper(0LL);
  v2[123] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v2[124] = v19;
  v2[125] = OUTLINED_FUNCTION_4_0(v19);
  v2[126] = OUTLINED_FUNCTION_11_0();
  v2[127] = OUTLINED_FUNCTION_11_0();
  v2[128] = OUTLINED_FUNCTION_11_0();
  uint64_t v20 = type metadata accessor for CustomCanvas(0LL);
  v2[129] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v2[130] = v21;
  v2[131] = OUTLINED_FUNCTION_4_0(v21);
  v2[132] = OUTLINED_FUNCTION_11_0();
  v2[133] = OUTLINED_FUNCTION_11_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ActionConfirmationVisual.response.getter()
{
  uint64_t v1 = *(void *)(v0 + 752);
  uint64_t v2 = *(void *)(v1 + 80);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 72);
    uint64_t v4 = one-time initialization token for encoder;
    swift_bridgeObjectRetain(*(void *)(v1 + 80));
    if (v4 != -1) {
      swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
    }
    *(void *)(v0 + 224) = v3;
    *(void *)(v0 + 23outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v2;
    *(_OWORD *)(v0 + 240) = 0u;
    *(_OWORD *)(v0 + 256) = 0u;
    *(_OWORD *)(v0 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
    *(_OWORD *)(v0 + 288) = 0u;
    *(_BYTE *)(v0 + 304) = 5;
    lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
    uint64_t v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 224);
    uint64_t v6 = *(void *)(v0 + 1064);
    uint64_t v7 = *(void *)(v0 + 1032);
    uint64_t v129 = *(void *)(v0 + 1040);
    uint64_t v132 = *(void *)(v0 + 1024);
    uint64_t v146 = (__int128 *)(v0 + 520);
    uint64_t v150 = *(void *)(v0 + 1016);
    uint64_t v137 = *(void *)(v0 + 992);
    uint64_t v142 = *(void *)(v0 + 984);
    uint64_t v8 = *(void *)(v0 + 976);
    uint64_t v9 = *(void *)(v0 + 968);
    uint64_t v10 = *(void *)(v0 + 960);
    uint64_t v11 = *(void *)(v0 + 952);
    uint64_t v12 = *(void *)(v0 + 944);
    OUTLINED_FUNCTION_5_11(v5, 0x8000000000192DE0LL, 0xD000000000000014LL, 0x8000000000192E00LL, v5, v13);
    *(void *)(v0 + 464) = v7;
    *(void *)(v0 + 47outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = &protocol witness table for CustomCanvas;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 440));
    (*(void (**)(void *, uint64_t, uint64_t))(v129 + 16))(boxed_opaque_existential_1, v6, v7);
    uint64_t v15 = *(void (**)(uint64_t, void, uint64_t))(v11 + 104);
    v15(v9, enum case for SeparatorStyle.edgeToEdge(_:), v12);
    v15(v10, enum case for SeparatorStyle.standard(_:), v12);
    Separators.init(top:bottom:)(v10, v9);
    ComponentWrapper.init(_:separators:)(v0 + 440, v8);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 16);
    v16(v150, v132, v142);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    unint64_t v18 = v17[2];
    uint64_t v149 = v17;
    if (v18 >= v17[3] >> 1)
    {
      OUTLINED_FUNCTION_7_10();
      uint64_t v149 = v82;
    }

    uint64_t v133 = *(void *)(v0 + 1040);
    uint64_t v138 = *(void *)(v0 + 1032);
    uint64_t v143 = *(void *)(v0 + 1064);
    uint64_t v19 = *(void *)(v0 + 1024);
    uint64_t v20 = *(void *)(v0 + 1016);
    uint64_t v21 = *(void *)(v0 + 984);
    *(void *)(v0 + 544) = v21;
    *(void *)(v0 + 55outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = &protocol witness table for ComponentWrapper;
    uint64_t v22 = __swift_allocate_boxed_opaque_existential_1(v146);
    v16((uint64_t)v22, v20, v21);
    v149[2] = v18 + 1;
    outlined init with take of AceServiceInvokerAsync(v146, (uint64_t)&v149[5 * v18 + 4]);
    OUTLINED_FUNCTION_8_11(v20);
    swift_bridgeObjectRelease(v2);
    OUTLINED_FUNCTION_8_11(v19);
    (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v143, v138);
    uint64_t v1 = *(void *)(v0 + 752);
  }

  else
  {
    uint64_t v149 = _swiftEmptyArrayStorage;
  }

  outlined init with take of Data?(v1 + 88, v0 + 680);
  outlined init with take of Data?(v0 + 680, v0 + 728);
  unint64_t v23 = *(void *)(v0 + 736);
  if (v23 >> 60 != 15)
  {
    uint64_t v24 = *(uint64_t **)(v0 + 752);
    uint64_t v25 = *(void *)(v0 + 728);
    uint64_t v27 = *v24;
    uint64_t v26 = v24[1];
    uint64_t v28 = v24[2];
    uint64_t v29 = v24[3];
    outlined retain of Data?(v0 + 680);
    outlined retain of Data?(v0 + 680);
    uint64_t v30 = one-time initialization token for encoder;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v29);
    if (v30 != -1) {
      swift_once(&one-time initialization token for encoder, one-time initialization function for encoder);
    }
    *(void *)(v0 + 31outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v25;
    *(void *)(v0 + 320) = v23;
    *(void *)(v0 + 328) = v27;
    *(void *)(v0 + 336) = v26;
    *(void *)(v0 + 344) = v28;
    *(void *)(v0 + 35outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v29;
    lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
    *(_OWORD *)(v0 + 360) = 0u;
    *(_OWORD *)(v0 + 376) = 0u;
    *(_BYTE *)(v0 + 39outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0;
    uint64_t v31 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 312);
    uint64_t v32 = *(void *)(v0 + 1056);
    uint64_t v33 = *(void *)(v0 + 1048);
    uint64_t v34 = *(void *)(v0 + 1040);
    uint64_t v35 = *(void *)(v0 + 1032);
    OUTLINED_FUNCTION_5_11(v31, 0x8000000000192DE0LL, 0xD000000000000014LL, 0x8000000000192E00LL, v31, v36);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
    v37(v33, v32, v35);
    if ((swift_isUniquelyReferenced_nonNull_native(v149) & 1) == 0)
    {
      OUTLINED_FUNCTION_3_16();
      uint64_t v149 = v83;
    }

    unint64_t v38 = v149[2];
    uint64_t v134 = v37;
    if (v38 >= v149[3] >> 1)
    {
      OUTLINED_FUNCTION_7_10();
      uint64_t v149 = v84;
    }

    uint64_t v139 = *(void *)(v0 + 1056);
    uint64_t v39 = *(void *)(v0 + 1048);
    uint64_t v40 = *(void *)(v0 + 1040);
    uint64_t v41 = *(void *)(v0 + 1032);
    *(void *)(v0 + 664) = v41;
    *(void *)(v0 + 67outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = &protocol witness table for CustomCanvas;
    uint64_t v42 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 640));
    v134((uint64_t)v42, v39, v41);
    v149[2] = v38 + 1;
    outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 640), (uint64_t)&v149[5 * v38 + 4]);
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v43(v39, v41);
    outlined consume of Data._Representation(v25, v23);
    OUTLINED_FUNCTION_28_4();
    swift_bridgeObjectRelease(v29);
    outlined release of Data?(v0 + 680);
    v43(v139, v41);
  }

  uint64_t v127 = *(void *)(v0 + 1008);
  uint64_t v140 = *(void *)(v0 + 1000);
  uint64_t v103 = (void *)(v0 + 480);
  __int128 v123 = (void *)(v0 + 560);
  uint64_t v130 = *(void *)(v0 + 992);
  uint64_t v135 = *(void *)(v0 + 984);
  uint64_t v125 = *(void *)(v0 + 976);
  uint64_t v44 = *(void *)(v0 + 936);
  uint64_t v102 = *(void *)(v0 + 928);
  uint64_t v45 = *(void *)(v0 + 920);
  uint64_t v46 = *(void *)(v0 + 912);
  uint64_t v147 = *(void *)(v0 + 904);
  uint64_t v115 = *(void *)(v0 + 888);
  uint64_t v117 = *(void *)(v0 + 880);
  uint64_t v107 = *(void *)(v0 + 896);
  uint64_t v109 = *(void *)(v0 + 872);
  uint64_t v113 = *(void *)(v0 + 864);
  uint64_t v105 = *(void *)(v0 + 848);
  uint64_t v47 = *(void *)(v0 + 832);
  uint64_t v92 = *(void *)(v0 + 840);
  uint64_t v91 = *(void *)(v0 + 824);
  uint64_t v87 = *(void *)(v0 + 856);
  uint64_t v88 = *(void *)(v0 + 816);
  uint64_t v144 = *(void *)(v0 + 808);
  uint64_t v96 = *(void *)(v0 + 800);
  uint64_t v111 = *(void *)(v0 + 776);
  uint64_t v119 = *(void *)(v0 + 760);
  uint64_t v121 = *(void *)(v0 + 768);
  uint64_t v48 = *(void *)(v0 + 752);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = (__n128 *)swift_initStackObject(v100, v0 + 16);
  OUTLINED_FUNCTION_6_11(inited, (__n128)xmmword_17E650);
  *(void *)(v0 + 71outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v50;
  *(void *)(v0 + 720) = 0xEC0000006E6F6974LL;
  AnyHashable.init<A>(_:)(v51, v0 + 712, &type metadata for String, &protocol witness table for String);
  inited[6].n128_u64[0] = (unint64_t)&type metadata for String;
  inited[4].n128_u64[1] = 7562617LL;
  inited[5].n128_u64[0] = 0xE300000000000000LL;
  uint64_t v52 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  static Command.directInvocation(identifier:payload:isNavigation:)( 0xD00000000000003DLL,  0x8000000000192920LL,  v52,  0LL);
  OUTLINED_FUNCTION_28_4();
  uint64_t v86 = v46;
  *(void *)(v0 + 424) = v46;
  *(void *)(v0 + 43outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = &protocol witness table for Command;
  uint64_t v53 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 400));
  uint64_t v90 = *(void (**)(void *, uint64_t, uint64_t))(v45 + 16);
  v90(v53, v44, v46);
  uint64_t v54 = *(void *)(v48 + 32);
  uint64_t v55 = *(void *)(v48 + 40);
  uint64_t v152 = &type metadata for String;
  uint64_t v153 = &protocol witness table for String;
  v56.n128_f64[0] = OUTLINED_FUNCTION_14_11(v54);
  uint64_t v57 = *(void (**)(uint64_t, void, uint64_t))(v92 + 104);
  uint64_t v93 = v57;
  if ((*(_BYTE *)(v48 + 64) & 1) != 0) {
    uint64_t v58 = (unsigned int *)&enum case for ButtonRole.preferredAndDestructive(_:);
  }
  else {
    uint64_t v58 = (unsigned int *)&enum case for ButtonRole.preferred(_:);
  }
  ((void (*)(uint64_t, void, uint64_t, __n128))v57)(v87, *v58, v47, v56);
  unsigned int v85 = enum case for _ProtoButton.FormAction.none(_:);
  uint64_t v89 = *(void (**)(uint64_t))(v88 + 104);
  v89(v91);
  OUTLINED_FUNCTION_9_10();
  swift_bridgeObjectRetain(v55);
  OUTLINED_FUNCTION_11_2(v0 + 400, (uint64_t)v151, (uint64_t)v154, v91, v96, v87);
  id v59 = (__n128 *)swift_initStackObject(v100, v0 + 120);
  OUTLINED_FUNCTION_6_11(v59, (__n128)xmmword_17E650);
  *(void *)(v0 + 696) = v60;
  *(void *)(v0 + 704) = 0xEC0000006E6F6974LL;
  AnyHashable.init<A>(_:)(v61, v0 + 696, &type metadata for String, &protocol witness table for String);
  v59[6].n128_u64[0] = (unint64_t)&type metadata for String;
  v59[4].n128_u64[1] = 28526LL;
  v59[5].n128_u64[0] = 0xE200000000000000LL;
  uint64_t v62 = Dictionary.init(dictionaryLiteral:)( v59,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  static Command.directInvocation(identifier:payload:isNavigation:)( 0xD00000000000003DLL,  0x8000000000192920LL,  v62,  0LL);
  swift_bridgeObjectRelease(v62);
  *(void *)(v0 + 504) = v86;
  *(void *)(v0 + 51outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = &protocol witness table for Command;
  uint64_t v63 = __swift_allocate_boxed_opaque_existential_1(v103);
  v90(v63, v102, v86);
  uint64_t v64 = *(void *)(v48 + 48);
  uint64_t v65 = *(void *)(v48 + 56);
  uint64_t v152 = &type metadata for String;
  uint64_t v153 = &protocol witness table for String;
  double v66 = OUTLINED_FUNCTION_14_11(v64);
  ((void (*)(uint64_t, void, uint64_t, double))v89)(v91, v85, v144, v66);
  OUTLINED_FUNCTION_9_10();
  v93(v105, enum case for ButtonRole.standard(_:), v47);
  swift_bridgeObjectRetain(v65);
  OUTLINED_FUNCTION_11_2((uint64_t)v103, (uint64_t)v151, (uint64_t)v154, v91, v96, v105);
  uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 16);
  v67(v115, v147, v113);
  v67(v117, v107, v113);
  BinaryButton.init(primaryButton:secondaryButton:componentName:linkIdentifier:)( v115,  v117,  0LL,  0xE000000000000000LL,  0LL,  0LL);
  *(void *)(v0 + outlined init with copy of AppShortcutInvoking(*(void *)(v0 + 944) + 96LL, v0 + 584) = v119;
  *(void *)(v0 + 59outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = &protocol witness table for BinaryButton;
  uint64_t v68 = __swift_allocate_boxed_opaque_existential_1(v123);
  uint64_t v69 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v121 + 16))(v68, v111, v119);
  static Separators.none.getter(v69);
  ComponentWrapper.init(_:separators:)(v123, v125);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 16);
  v70(v140, v127, v135);
  if ((swift_isUniquelyReferenced_nonNull_native(v149) & 1) == 0)
  {
    OUTLINED_FUNCTION_3_16();
    uint64_t v149 = v80;
  }

  unint64_t v71 = v149[2];
  __int128 v110 = v70;
  if (v71 >= v149[3] >> 1)
  {
    OUTLINED_FUNCTION_7_10();
    uint64_t v149 = v81;
  }

  uint64_t v112 = *(void *)(v0 + 1064);
  uint64_t v114 = *(void *)(v0 + 1056);
  uint64_t v116 = *(void *)(v0 + 1048);
  uint64_t v118 = *(void *)(v0 + 1024);
  uint64_t v99 = *(void *)(v0 + 1008);
  uint64_t v72 = *(void *)(v0 + 1000);
  uint64_t v73 = *(void *)(v0 + 992);
  uint64_t v74 = *(void *)(v0 + 984);
  uint64_t v120 = *(void *)(v0 + 1016);
  uint64_t v122 = *(void *)(v0 + 976);
  uint64_t v124 = *(void *)(v0 + 968);
  uint64_t v126 = *(void *)(v0 + 960);
  uint64_t v104 = *(void *)(v0 + 928);
  uint64_t v106 = *(void *)(v0 + 904);
  uint64_t v108 = *(void *)(v0 + 936);
  uint64_t v101 = *(void *)(v0 + 896);
  uint64_t v128 = *(void *)(v0 + 888);
  uint64_t v131 = *(void *)(v0 + 880);
  uint64_t v98 = *(void *)(v0 + 872);
  uint64_t v75 = *(void *)(v0 + 864);
  uint64_t v136 = *(void *)(v0 + 856);
  uint64_t v141 = *(void *)(v0 + 848);
  uint64_t v145 = *(void *)(v0 + 824);
  uint64_t v148 = *(void *)(v0 + 800);
  uint64_t v94 = *(void *)(v0 + 768);
  uint64_t v95 = *(void *)(v0 + 760);
  uint64_t v97 = *(void *)(v0 + 776);
  *(void *)(v0 + 63outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = &protocol witness table for ComponentWrapper;
  *(void *)(v0 + 624) = v74;
  uint64_t v76 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 600));
  v110((uint64_t)v76, v72, v74);
  v149[2] = v71 + 1;
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 600), (uint64_t)&v149[5 * v71 + 4]);
  uint64_t v77 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
  v77(v72, v74);
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)( v149,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  0LL);
  v77(v99, v74);
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v97, v95);
  uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
  v78(v101, v75);
  OUTLINED_FUNCTION_8_11(v104);
  v78(v106, v75);
  OUTLINED_FUNCTION_8_11(v108);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  swift_task_dealloc(v99);
  swift_task_dealloc(v72);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v126);
  swift_task_dealloc(v108);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  OUTLINED_FUNCTION_18_0();
  swift_task_dealloc(v128);
  swift_task_dealloc(v131);
  swift_task_dealloc(v136);
  swift_task_dealloc(v141);
  swift_task_dealloc(v145);
  swift_task_dealloc(v148);
  swift_task_dealloc(v97);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ActionConfirmationVisual.data.getter()
{
  uint64_t v1 = type metadata accessor for Response(0LL);
  v0[2] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[3] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_9_0(v2);
  v0[4] = v3;
  uint64_t v4 = (void *)swift_task_alloc(dword_2164A4);
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = DisambiguationVisual.data.getter;
  return ActionConfirmationVisual.response.getter(v3);
}

uint64_t specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(uint64_t a1, char a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v11[3] = &type metadata for AppInfoResolver;
  v11[4] = &protocol witness table for AppInfoResolver;
  App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(a1, v11, a2, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for AppDisplayInfo(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1LL, v7) == 1)
  {
    outlined destroy of AppDisplayInfo?((uint64_t)v6);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = AppDisplayInfo.displayName.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  }

  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  return v8;
}

uint64_t outlined init with take of Data?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Data?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Data?(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ActionConfirmationVisual(void *a1)
{
  uint64_t result = swift_bridgeObjectRelease(a1[10]);
  unint64_t v3 = a1[12];
  if (v3 >> 60 != 15) {
    return outlined consume of Data._Representation(a1[11], v3);
  }
  return result;
}

uint64_t initializeWithCopy for ActionConfirmationVisual(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = (uint64_t *)(a2 + 88);
  unint64_t v9 = *(void *)(a2 + 96);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v10 = *v8;
    outlined copy of Data._Representation(*v8, v9);
    *(void *)(a1 + 88) = v10;
    *(void *)(a1 + 96) = v9;
  }

  return a1;
}

uint64_t assignWithCopy for ActionConfirmationVisual(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = (uint64_t *)(a2 + 88);
  unint64_t v15 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >> 60 != 15LL)
  {
    if (v15 >> 60 != 15)
    {
      uint64_t v17 = *v14;
      outlined copy of Data._Representation(*v14, v15);
      uint64_t v18 = *(void *)(a1 + 88);
      unint64_t v19 = *(void *)(a1 + 96);
      *(void *)(a1 + 88) = v17;
      *(void *)(a1 + 96) = v15;
      outlined consume of Data._Representation(v18, v19);
      return a1;
    }

    outlined destroy of Data(a1 + 88);
    goto LABEL_6;
  }

  if (v15 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v14;
    return a1;
  }

  uint64_t v16 = *v14;
  outlined copy of Data._Representation(*v14, v15);
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v15;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy104_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t assignWithTake for ActionConfirmationVisual(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = (void *)(a2 + 88);
  unint64_t v15 = *(void *)(a1 + 96);
  if (v15 >> 60 != 15)
  {
    unint64_t v16 = *(void *)(a2 + 96);
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = *v14;
      *(void *)(a1 + 96) = v16;
      outlined consume of Data._Representation(v17, v15);
      return a1;
    }

    outlined destroy of Data(a1 + 88);
  }

  *(_OWORD *)(a1 + 88) = *(_OWORD *)v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionConfirmationVisual(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 104))
    {
      LODWORD(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionConfirmationVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ActionConfirmationVisual()
{
  return &type metadata for ActionConfirmationVisual;
}

uint64_t outlined destroy of AppDisplayInfo?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void OUTLINED_FUNCTION_3_16()
{
}

uint64_t OUTLINED_FUNCTION_5_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)( 0xD000000000000010LL,  a2,  a3,  a4,  a5,  a6,  0LL,  0xE000000000000000LL);
}

__n128 *OUTLINED_FUNCTION_6_11(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

void OUTLINED_FUNCTION_7_10()
{
}

uint64_t OUTLINED_FUNCTION_8_11(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_9_10()
{
  return v1(v3, v2, v0);
}

double OUTLINED_FUNCTION_14_11@<D0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 168) = a1;
  *(void *)(v2 - 160) = v1;
  *(void *)(v2 - 96) = 0LL;
  double result = 0.0;
  *(_OWORD *)(v2 - 128) = 0u;
  *(_OWORD *)(v2 - 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
  return result;
}

uint64_t WFChooseFromListFlow.exitValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 88);
  int v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 == 1)
  {
    swift_errorRetain(*(void *)(v0 + 88));
  }

  else if (v2 == 2)
  {
    id v3 = v1;
  }

  else
  {
    unint64_t v4 = lazy protocol witness table accessor for type WFShowAlertFlowError and conformance WFShowAlertFlowError();
    return OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for WFShowAlertFlowError, v4);
  }

  return (uint64_t)v1;
}

unint64_t lazy protocol witness table accessor for type WFShowAlertFlowError and conformance WFShowAlertFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError;
  if (!lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WFShowAlertFlowError,  &type metadata for WFShowAlertFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError;
  if (!lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WFShowAlertFlowError,  &type metadata for WFShowAlertFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError);
  }

  return result;
}

void WFChooseFromListFlow.__allocating_init(shortcutName:request:deviceState:)( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
}

void WFChooseFromListFlow.init(shortcutName:request:deviceState:)( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_18_11();
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a3;
  outlined init with copy of DeviceState((uint64_t)a4, v4 + 40);
  *(_BYTE *)(v4 + 96) = 3;
  *(void *)(v4 + 80) = _swiftEmptyArrayStorage;
  *(void *)(v4 + 88) = 0LL;
  uint64_t v11 = OUTLINED_FUNCTION_64_2();
  OUTLINED_FUNCTION_50_1(v5, v12, v13, v11);
  uint64_t v14 = (void *)OUTLINED_FUNCTION_19((uint64_t)&unk_1F51C8, 48LL);
  void v14[2] = 0LL;
  v14[3] = 0LL;
  v14[4] = v4;
  _OWORD v14[5] = a3;
  id v15 = a3;
  swift_retain(v4);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v5,  (uint64_t)&async function pointer to partial apply for closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:),  (uint64_t)v14);
  swift_release();

  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  OUTLINED_FUNCTION_38_0();
}

uint64_t closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:), 0LL, 0LL);
}

uint64_t closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:)()
{
  uint64_t v1 = (void *)v0[3];
  id v2 = [v1 items];
  uint64_t v3 = OUTLINED_FUNCTION_72( (uint64_t)v2,  &lazy cache variable for type metadata for WFDialogListItem,  &OBJC_CLASS___WFDialogListItem_ptr);
  v0[4] = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  v0[5] = [v1 dataStore];
  uint64_t v4 = (void *)swift_task_alloc(dword_216564);
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:);
  uint64_t v5 = OUTLINED_FUNCTION_160();
  return WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)(v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  id v2 = v1[5];
  uint64_t v3 = v1[4];
  OUTLINED_FUNCTION_3_0(v1[6]);
  swift_unknownObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_51420()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t partial apply for closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc(dword_2164D4);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_39_6(v2);
  uint64_t v4 = OUTLINED_FUNCTION_38_8(v3);
  return closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:)(v4, v5, v6, v7, v1);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_64_2();
  if (__swift_getEnumTagSinglePayload(a1, 1LL, v6) == 1)
  {
    outlined destroy of URL?(a1, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    swift_unknownObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F53C0, 32LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    unint64_t v16 = v18;
    v18[2] = v12;
    v18[3] = v14;
  }

  else
  {
    unint64_t v16 = 0LL;
  }

  return swift_task_create( v7,  v16,  (char *)&type metadata for () + 8,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATu,  v15);
}

uint64_t WFChooseFromListFlow.on(input:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Input(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_18_11();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v5 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, a1, v3);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v10 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v15 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v11 = Input.description.getter();
    uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    OUTLINED_FUNCTION_22_9((uint64_t)&v14, (uint64_t)&v15);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_51_6();
    _os_log_impl(&dword_0, v7, v8, "#WFChooseFromListFlow received input: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
  }

  else
  {
    OUTLINED_FUNCTION_51_6();
  }

  return 0LL;
}

uint64_t WFChooseFromListFlow.execute()(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  v2[20] = *v1;
  uint64_t v3 = type metadata accessor for CATOption(0LL);
  v2[21] = OUTLINED_FUNCTION_9_0(*(void *)(v3 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFChooseFromListFlow.execute()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  uint64_t v4 = (os_log_s *)OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v6);
    OUTLINED_FUNCTION_20_11(&dword_0, v4, v5, "#WFChooseFromListFlow execute");
    OUTLINED_FUNCTION_1_0(v2);
  }

  uint64_t v7 = *(void *)(v1 + 152);

  id v8 = [*(id *)(v7 + 32) allowsMultipleSelection];
  if (!(_DWORD)v8) {
    __asm { BR              X11 }
  }

  Logger.logObject.getter(v8);
  os_log_type_t v9 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v9))
  {
    uint64_t v10 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_26_1(v10);
    OUTLINED_FUNCTION_47_1( &dword_0,  v0,  (os_log_type_t)v4,  "#WFChooseFromListFlow allowsMultipleSelection, exiting",  (uint8_t *)v7);
    OUTLINED_FUNCTION_1_0(v7);
  }

  uint64_t v11 = *(void *)(v1 + 152);

  uint64_t v12 = *(void *)(v11 + 64);
  __swift_project_boxed_opaque_existential_1((void *)(v11 + 40), v12);
  if ((dispatch thunk of DeviceState.isHomePod.getter(v12) & 1) != 0)
  {
    default argument 0 of static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:)();
    *(void *)(v1 + 176) = v13;
    uint64_t v14 = static OutputPublisherFactory.makeOutputPublisherAsync()((void *)(v1 + 56), v13);
    static Device.current.getter((void *)(v1 + 96), v14);
    uint64_t v15 = (void *)swift_task_alloc(dword_21650C);
    *(void *)(v1 + 184) = v15;
    *uint64_t v15 = v1;
    v15[1] = WFChooseFromListFlow.execute();
    uint64_t v16 = OUTLINED_FUNCTION_160();
    return static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:)( v16,  v17,  v1 + 96);
  }

  else
  {
    unint64_t v19 = *(void **)(v1 + 152);
    OUTLINED_FUNCTION_27_11([objc_allocWithZone(WFDialogResponse) initWithResponseCode:4]);
    OUTLINED_FUNCTION_50_9();

    swift_task_dealloc(*(void *)(v1 + 168));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

{
  void *v0;
  void *v1;
  void *v2;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = v0 + 7;
  uint64_t v2 = v0 + 12;
  OUTLINED_FUNCTION_3_0(v0[23]);
  OUTLINED_FUNCTION_61();
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 152);
  OUTLINED_FUNCTION_27_11([objc_allocWithZone(WFDialogResponse) initWithResponseCode:4]);
  OUTLINED_FUNCTION_50_9();

  swift_task_dealloc(*(void *)(v0 + 168));
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[23] = a2;
  v3[24] = a3;
  v3[22] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[25] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for TemplatingResult(0LL);
  v3[26] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[27] = v6;
  v3[28] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = type metadata accessor for DialogPhase(0LL);
  v3[29] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[30] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[31] = swift_task_alloc(v9);
  v3[32] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[33] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[34] = v11;
  v3[35] = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v3[36] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[37] = v13;
  v3[38] = OUTLINED_FUNCTION_9_0(v13);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:)()
{
  uint64_t v2 = v0[37];
  uint64_t v1 = v0[38];
  uint64_t v3 = v0[36];
  uint64_t v4 = (uint64_t *)v0[22];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v3);
  char v5 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = *v4;
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v6 + 272));
    v0[39] = v7;
    *uint64_t v7 = v0;
    v7[1] = static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:);
    return v10();
  }

  else
  {
    unint64_t v9 = (void *)OUTLINED_FUNCTION_5_0(*(void *)(v6 + 280));
    v0[45] = v9;
    *unint64_t v9 = v0;
    v9[1] = static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:);
    return ((uint64_t (*)(void))v10)(v0[28]);
  }

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  char *v17;
  uint64_t v18;
  uint64_t v1 = (void *)v0[41];
  uint64_t v3 = v0[31];
  uint64_t v2 = v0[32];
  char v5 = v0[29];
  uint64_t v4 = v0[30];
  static DialogPhase.completion.getter();
  uint64_t v6 = [v1 catId];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  uint64_t v8 = type metadata accessor for ResponseFactory(0LL);
  OUTLINED_FUNCTION_51(v8);
  v0[42] = ResponseFactory.init()();
  unint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = OUTLINED_FUNCTION_19(v9, 40LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E150;
  *(void *)(v10 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v1;
  uint64_t v18 = v10;
  specialized Array._endMutation()(v10, v11, v12);
  v0[43] = v18;
  uint64_t v14 = v1;
  uint64_t v15 = (void *)swift_task_alloc(v13);
  v0[44] = v15;
  *uint64_t v15 = v0;
  v15[1] = static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:);
  return ((uint64_t (*)(void *, uint64_t, void))v17)(v0 + 17, v18, v0[35]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 352));
  OUTLINED_FUNCTION_20();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  OUTLINED_FUNCTION_104();
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined init with take of AceServiceInvokerAsync((__int128 *)(v0 + 136), v0 + 16);
  uint64_t v4 = *(void **)(v0 + 184);
  char v5 = v4[3];
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 376) = v7;
  *uint64_t v7 = v0;
  v7[1] = static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 360);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 368) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 200);
  unint64_t v19 = *(void *)(v0 + 208);
  uint64_t v4 = *(void **)(v0 + 192);
  char v5 = v4[3];
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v7 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v5, v6);
  uint64_t v8 = type metadata accessor for NLContextUpdate(0LL);
  OUTLINED_FUNCTION_50_1(v3, v9, v10, v8);
  uint64_t v11 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
  *(void *)(v0 + 128) = 0LL;
  *(_OWORD *)(v0 + 96) = 0u;
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 56));
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v1,  v4,  v7 & 1,  _swiftEmptyArrayStorage,  0LL,  1LL,  v3,  _swiftEmptyArrayStorage,  v0 + 96);
  outlined destroy of URL?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v19);
  uint64_t v12 = (__int128 *)OUTLINED_FUNCTION_160();
  outlined init with take of AceServiceInvokerAsync(v12, v13);
  uint64_t v14 = *(void **)(v0 + 184);
  uint64_t v15 = v14[3];
  uint64_t v16 = v14[4];
  __swift_project_boxed_opaque_existential_1(v14, v15);
  uint64_t v17 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 376) = v17;
  *uint64_t v17 = v0;
  v17[1] = static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v15, v16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 376);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 384) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_104();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  OUTLINED_FUNCTION_7_11();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_104();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    char v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_33_2(&dword_0, v6, v7, "#WFChooseFromListFlow failure to submit Handoff dialog");
    OUTLINED_FUNCTION_1_0(v2);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_7_11();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v1 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_104();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    char v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_33_2(&dword_0, v6, v7, "#WFChooseFromListFlow failure to submit Handoff dialog");
    OUTLINED_FUNCTION_1_0(v2);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_7_11();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v1 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_104();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    char v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v5);
    OUTLINED_FUNCTION_33_2(&dword_0, v6, v7, "#WFChooseFromListFlow failure to submit Handoff dialog");
    OUTLINED_FUNCTION_1_0(v2);
  }

  OUTLINED_FUNCTION_4_8();

  OUTLINED_FUNCTION_7_11();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:)( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 312);
  *(void *)(*v2 + 320) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(void *)(v4 + 328) = a1;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t WFChooseFromListFlow.execute(completion:)()
{
  uint64_t v0 = type metadata accessor for WFChooseFromListFlow();
  lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type WFChooseFromListFlow and conformance WFChooseFromListFlow,  v1,  (uint64_t (*)(uint64_t))type metadata accessor for WFChooseFromListFlow,  (uint64_t)&protocol conformance descriptor for WFChooseFromListFlow);
  uint64_t v2 = OUTLINED_FUNCTION_160();
  return Flow.deferToExecuteAsync(_:)(v2, v3, v0, v4);
}

void WFChooseFromListFlow.onPromptForDisambiguationFinished(exitValue:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<[WFChooseFromListDisambiguationItem]>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_18_11();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v7 = OUTLINED_FUNCTION_48();
  uint64_t v8 = (os_log_s *)OUTLINED_FUNCTION_84(v7, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_57_1();
    *(_WORD *)uint64_t v10 = 0;
    OUTLINED_FUNCTION_47_1(&dword_0, v8, v9, "#WFChooseFromListFlow onPromptForDisambiguationFinished", v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v10);
  }

  (*(void (**)(void *, uint64_t, uint64_t))(v6 + 16))(v2, a1, v5);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t))(v6 + 88))(v2, v5);
  if ((_DWORD)v11 == enum case for PromptResult.answered<A>(_:))
  {
    uint64_t v12 = OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 96));
    id v13 = (id)*v2;
    uint64_t v14 = *(void *)(*v2 + 16LL);
    if (v14 != 1)
    {
      if (v14)
      {
        Logger.logObject.getter(v12);
        os_log_type_t v34 = OUTLINED_FUNCTION_58();
        if (OUTLINED_FUNCTION_20_9(v34))
        {
          uint64_t v35 = (_WORD *)OUTLINED_FUNCTION_57_1();
          OUTLINED_FUNCTION_43_5(v35);
          OUTLINED_FUNCTION_20_11( &dword_0,  (os_log_s *)v1,  (os_log_type_t)v2,  "#WFChooseFromListFlow received more than one items from disambiguation, reprompting");
          OUTLINED_FUNCTION_1_0(a1);
        }

        uint64_t v18 = *(void **)(v1 + 88);
        *(void *)(v1 + 88) = v13;
        char v19 = *(_BYTE *)(v1 + 96);
        *(_BYTE *)(v1 + 96) = 0;
      }

      else
      {
        uint64_t v15 = OUTLINED_FUNCTION_37();
        Logger.logObject.getter(v15);
        os_log_type_t v16 = OUTLINED_FUNCTION_58();
        if (OUTLINED_FUNCTION_31_0(v16))
        {
          uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_57_1();
          *(_WORD *)uint64_t v17 = 0;
          OUTLINED_FUNCTION_47_1( &dword_0,  (os_log_s *)v1,  (os_log_type_t)v13,  "#WFChooseFromListFlow received no item from disambiguation, reprompting",  v17);
          OUTLINED_FUNCTION_1_0((uint64_t)v17);
        }

        OUTLINED_FUNCTION_21_10(v1 + 80, (uint64_t)v41);
        OUTLINED_FUNCTION_42_3();
        uint64_t v18 = (void *)v1;
        char v19 = (char)v13;
      }

      goto LABEL_26;
    }

    Logger.logObject.getter(v12);
    os_log_type_t v21 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_20_9(v21))
    {
      uint64_t v22 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_43_5(v22);
      OUTLINED_FUNCTION_20_11( &dword_0,  (os_log_s *)v1,  (os_log_type_t)v2,  "#WFChooseFromListFlow received one item from disambiguation, finishing");
      OUTLINED_FUNCTION_1_0(a1);
    }

    if (*((void *)v13 + 2))
    {
      uint64_t v23 = *((void *)v13 + 5);
      uint64_t v24 = *((void *)v13 + 7);
      uint64_t v26 = *((void *)v13 + 9);
      uint64_t v25 = (void *)*((void *)v13 + 10);
      id v27 = *((id *)v13 + 8);
      swift_bridgeObjectRetain(v26);
      id v28 = v25;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      OUTLINED_FUNCTION_37();
      OUTLINED_FUNCTION_2_6();

      swift_bridgeObjectRelease(v24);
      uint64_t v29 = OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_72( v29,  &lazy cache variable for type metadata for WFChooseFromListDialogResponse,  &OBJC_CLASS___WFChooseFromListDialogResponse_ptr);
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v31 = OUTLINED_FUNCTION_19(v30, 40LL);
      *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E150;
      *(void *)(v31 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v28;
      v41[0] = v31;
      specialized Array._endMutation()(v31, v32, v33);
      id v13 = v28;
      uint64_t v2 = WFChooseFromListDialogResponse.__allocating_init(items:cancelled:)(v41[0], 0);
      if (one-time initialization token for shared == -1)
      {
LABEL_19:
        (*(void (**)(void))(*(void *)static WFDialogState.shared + 232LL))();

        uint64_t v18 = *(void **)(v3 + 88);
        *(void *)(v3 + 88) = v2;
        char v19 = *(_BYTE *)(v3 + 96);
        *(_BYTE *)(v3 + 96) = 2;
LABEL_26:
        outlined consume of WFChooseFromListFlow.State(v18, v19);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
    goto LABEL_19;
  }

  if ((_DWORD)v11 == enum case for PromptResult.error<A>(_:))
  {
    OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 96));
    swift_errorRelease(*v2);
    goto LABEL_24;
  }

  if ((_DWORD)v11 == enum case for PromptResult.cancelled<A>(_:))
  {
    OUTLINED_FUNCTION_72( v11,  &lazy cache variable for type metadata for WFChooseFromListDialogResponse,  &OBJC_CLASS___WFChooseFromListDialogResponse_ptr);
    id v20 = WFChooseFromListDialogResponse.__allocating_init(items:cancelled:)((uint64_t)_swiftEmptyArrayStorage, 1);
LABEL_25:
    uint64_t v36 = *(void **)(v1 + 88);
    *(void *)(v1 + 88) = v20;
    char v19 = *(_BYTE *)(v1 + 96);
    *(_BYTE *)(v1 + 96) = 2;
    uint64_t v18 = v36;
    goto LABEL_26;
  }

  if ((_DWORD)v11 == enum case for PromptResult.unanswered<A>(_:))
  {
LABEL_24:
    id v20 = [objc_allocWithZone(WFDialogResponse) initWithResponseCode:1];
    goto LABEL_25;
  }

  unint64_t v37 = lazy protocol witness table accessor for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError();
  uint64_t v38 = OUTLINED_FUNCTION_28_0((uint64_t)&type metadata for WFChooseFromListFlowError, v37);
  *uint64_t v39 = 0;
  uint64_t v40 = *(void **)(v1 + 88);
  *(void *)(v1 + 88) = v38;
  LOBYTE(v3__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = *(_BYTE *)(v1 + 96);
  *(_BYTE *)(v1 + 96) = 1;
  outlined consume of WFChooseFromListFlow.State(v40, (char)v39);
  OUTLINED_FUNCTION_17_7(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
}

id WFChooseFromListDialogResponse.__allocating_init(items:cancelled:)(uint64_t a1, char a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for NSError( 0LL,  &lazy cache variable for type metadata for WFDialogListItem,  &OBJC_CLASS___WFDialogListItem_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v6 = [v4 initWithItems:isa cancelled:a2 & 1];

  return v6;
}

uint64_t WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:));
}

uint64_t WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  v2[19] = v4;
  uint64_t v5 = (os_log_s *)v4;
  Logger.logObject.getter(v4);
  os_log_type_t v6 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v6))
  {
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_26_1(v7);
    OUTLINED_FUNCTION_47_1(&dword_0, v5, v0, "#WFChooseFromListFlow starts initializing dialog items", v1);
    OUTLINED_FUNCTION_1_0((uint64_t)v1);
  }

  uint64_t v9 = v2[17];
  uint64_t v8 = v2[18];
  uint64_t v10 = v2[16];

  v2[14] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for Int,  &type metadata for WFChooseFromListDisambiguationItem,  &protocol witness table for Int);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, WFChooseFromListDisambiguationItem));
  uint64_t v11 = (void *)swift_task_alloc(48LL);
  v2[20] = v11;
  v11[2] = v10;
  v11[3] = v8;
  v11[4] = v9;
  void v11[5] = v2 + 14;
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v2[21] = v12;
  *uint64_t v12 = v2;
  v12[1] = WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 168));
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_s *v26;
  uint64_t v27;
  os_log_type_t v28;
  BOOL v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v4 = *(void *)(v2 + 112);
  unint64_t v37 = v2 + 112;
  uint64_t v41 = *(void *)(v4 + 16);
  if (!v41)
  {
LABEL_14:
    uint64_t v26 = *(os_log_s **)(v2 + 152);
    id v27 = swift_retain(*(void *)(v2 + 144));
    Logger.logObject.getter(v27);
    id v28 = OUTLINED_FUNCTION_58();
    uint64_t v29 = os_log_type_enabled(v26, v28);
    uint64_t v30 = *(void *)(v2 + 144);
    if (v29)
    {
      uint64_t v31 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      *(_DWORD *)uint64_t v31 = 134217984;
      OUTLINED_FUNCTION_21_10(v30 + 80, v37 - 24);
      *(void *)(v2 + 120) = *(void *)(*(void *)(v30 + 80) + 16LL);
      OUTLINED_FUNCTION_22_9(v37 + 8, v2 + 128);
      OUTLINED_FUNCTION_61();
      _os_log_impl(&dword_0, v26, v28, "#WFChooseFromListFlow initialized dialog items, count: %ld", v31, 0xCu);
      OUTLINED_FUNCTION_1_0((uint64_t)v31);
    }

    else
    {
      OUTLINED_FUNCTION_61();
    }

    uint64_t v32 = *(void *)(v2 + 144);
    OUTLINED_FUNCTION_21_10(v32 + 80, v37 - 48);
    uint64_t v33 = *(void *)(v32 + 80);
    os_log_type_t v34 = *(void **)(v32 + 88);
    *(void *)(v32 + 88) = v33;
    uint64_t v35 = *(_BYTE *)(v32 + 96);
    *(_BYTE *)(v32 + 96) = 0;
    swift_bridgeObjectRetain(v33);
    outlined consume of WFChooseFromListFlow.State(v34, v35);
    uint64_t v4 = *(void *)(v2 + 112);
    goto LABEL_18;
  }

  uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(0LL);
  if ((v6 & 1) != 0)
  {
    uint64_t v3 = v2 + 40;
    uint64_t v39 = v2;
    uint64_t v40 = (uint64_t *)(*(void *)(v2 + 144) + 80LL);
    uint64_t v7 = 1LL;
    uint64_t v38 = v4;
    while (1)
    {
      uint64_t v8 = *(void *)(v4 + 56) + 56 * v5;
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v10 = *(void *)(v8 + 24);
      uint64_t v43 = *(void *)(v8 + 16);
      uint64_t v44 = *(void *)v8;
      os_log_type_t v0 = *(void **)(v8 + 32);
      uint64_t v45 = *(_OWORD *)(v8 + 40);
      swift_beginAccess(v40, v3, 33LL, 0LL);
      uint64_t v11 = *v40;
      uint64_t v12 = v0;
      OUTLINED_FUNCTION_5_10(v45);
      id v13 = *((id *)&v45 + 1);
      OUTLINED_FUNCTION_5_10(v9);
      OUTLINED_FUNCTION_5_10(v10);
      uint64_t v42 = v12;
      uint64_t v14 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
      *uint64_t v40 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        OUTLINED_FUNCTION_55_5();
        uint64_t v11 = v19;
        *uint64_t v40 = v19;
      }

      os_log_type_t v16 = *(void *)(v11 + 16);
      uint64_t v1 = 56;
      if (v16 >= *(void *)(v11 + 24) >> 1)
      {
        OUTLINED_FUNCTION_55_5();
        uint64_t v11 = v20;
        *uint64_t v40 = v20;
      }

      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v16 + 1;
      uint64_t v17 = v11 + 56 * v16;
      *(void *)(v17 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v44;
      *(void *)(v17 + 40) = v9;
      *(void *)(v17 + 48) = v43;
      *(void *)(v17 + 56) = v10;
      *(void *)(v17 + 64) = v0;
      *(_OWORD *)(v17 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v45;
      uint64_t v3 = v37 - 72;
      swift_endAccess(v37 - 72);
      swift_bridgeObjectRelease(v9);
      OUTLINED_FUNCTION_2_6();

      swift_bridgeObjectRelease(v45);
      uint64_t v4 = v38;
      uint64_t v2 = v39;
      if (v41 == v7) {
        goto LABEL_14;
      }
      if (*(void *)(v38 + 16))
      {
        os_log_type_t v0 = (void *)(v7 + 1);
        uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v7++);
        if ((v18 & 1) != 0) {
          continue;
        }
      }

      break;
    }
  }

  os_log_type_t v21 = *(void **)(v2 + 152);
  Logger.logObject.getter(v5);
  uint64_t v22 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v22))
  {
    uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_43_5(v23);
    OUTLINED_FUNCTION_33_2(&dword_0, v24, v25, "Disambiguation list is missing elements");
    OUTLINED_FUNCTION_1_0(v3);
  }

  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_21_10((uint64_t)v0 + 80, v37 - 96);
  OUTLINED_FUNCTION_42_3();
  outlined consume of WFChooseFromListFlow.State(v21, v1);
LABEL_18:
  swift_bridgeObjectRelease(v4);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[21] = a5;
  v6[22] = a6;
  v6[19] = a3;
  v6[20] = a4;
  v6[18] = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<(Int, WFChooseFromListDisambiguationItem)>.Iterator);
  v6[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[24] = v8;
  v6[25] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v9 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[26] = swift_task_alloc(v9);
  v6[27] = swift_task_alloc(v9);
  return swift_task_switch(closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:), 0LL, 0LL);
}

uint64_t closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)()
{
  uint64_t v1 = *(void *)(v0 + 152);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v30 = *(void *)(v0 + 152);
    }
    else {
      uint64_t v30 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 152));
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v30);
    uint64_t result = OUTLINED_FUNCTION_20();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
  }

  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v2)
  {
    uint64_t v33 = *(void *)(v0 + 168);
    uint64_t v31 = v2;
    uint64_t v32 = OUTLINED_FUNCTION_64_2();
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v5 = *(void *)(v0 + 208);
      uint64_t v4 = *(void *)(v0 + 216);
      uint64_t v7 = *(void *)(v0 + 160);
      uint64_t v6 = *(void *)(v0 + 168);
      uint64_t v8 = *(void *)(v0 + 152);
      __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, v32);
      unint64_t v9 = (void *)OUTLINED_FUNCTION_19((uint64_t)&unk_1F5370, 64LL);
      void v9[2] = 0LL;
      uint64_t v10 = v9 + 2;
      v9[3] = 0LL;
      v9[4] = v3;
      v9[5] = v7;
      void v9[6] = v8;
      v9[7] = v6;
      outlined init with copy of TaskPriority?(v4, v5);
      LODWORD(v5) = __swift_getEnumTagSinglePayload(v5, 1LL, v32);
      swift_bridgeObjectRetain(v8);
      swift_retain(v7);
      uint64_t v11 = swift_unknownObjectRetain(v33);
      uint64_t v12 = *(void *)(v0 + 208);
      if ((_DWORD)v5 == 1)
      {
        outlined destroy of URL?(*(void *)(v0 + 208), &demangling cache variable for type metadata for TaskPriority?);
        uint64_t v13 = 0LL;
      }

      else
      {
        unsigned __int8 v14 = TaskPriority.rawValue.getter(v11);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8LL))(v12, v32);
        uint64_t v13 = v14;
      }

      uint64_t v15 = *v10;
      if (*v10)
      {
        uint64_t v16 = v9[3];
        uint64_t ObjectType = swift_getObjectType(*v10);
        swift_unknownObjectRetain(v15);
        uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
        uint64_t v20 = v19;
        swift_unknownObjectRelease(v15);
      }

      else
      {
        uint64_t v18 = 0LL;
        uint64_t v20 = 0LL;
      }

      uint64_t v21 = **(void **)(v0 + 144);
      uint64_t v22 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F5398, 32LL);
      *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:);
      *(void *)(v22 + 24) = v9;
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, WFChooseFromListDisambiguationItem));
      uint64_t v24 = v20 | v18;
      if (v20 | v18)
      {
        uint64_t v24 = v0 + 80;
        *(void *)(v0 + 80) = 0LL;
        *(void *)(v0 + 88) = 0LL;
        *(void *)(v0 + 96) = v18;
        *(void *)(v0 + 104) = v20;
      }

      ++v3;
      uint64_t v25 = *(void *)(v0 + 216);
      *(void *)(v0 + 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 1LL;
      *(void *)(v0 + 120) = v24;
      *(void *)(v0 + 128) = v21;
      swift_task_create( v13 | 0x3100,  v0 + 112,  v23,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVt_Tg5TATu,  v22);
      swift_release();
      outlined destroy of URL?(v25, &demangling cache variable for type metadata for TaskPriority?);
    }

    while (v31 != v3);
  }

  uint64_t v26 = **(void **)(v0 + 144);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, WFChooseFromListDisambiguationItem));
  TaskGroup.makeAsyncIterator()(v26, v27);
  id v28 = (void *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 224) = v28;
  *id v28 = v0;
  v28[1] = closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_17_11();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 224));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  if (!v2)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 192) + 8LL))(*(void *)(v0 + 200), *(void *)(v0 + 184));
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  id v28 = *(void *)(v0 + 24);
  uint64_t v29 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v30 = *(void *)(v0 + 48);
  uint64_t v31 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void **)(v0 + 176);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  uint64_t v7 = *v5;
  *(void *)(v0 + 136) = *v5;
  *uint64_t v5 = 0x8000000000000000LL;
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v1);
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v11 = (v9 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    uint64_t v13 = result;
    unsigned __int8 v14 = v9;
    uint64_t v27 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, WFChooseFromListDisambiguationItem>);
    uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    if ((result & 1) != 0)
    {
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v1);
      if ((v14 & 1) != (v15 & 1)) {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
      }
      uint64_t v13 = result;
    }

    uint64_t v16 = *(void **)(v0 + 136);
    if ((v14 & 1) != 0)
    {
      uint64_t v17 = (void *)(v16[7] + 56 * v13);
      uint64_t v18 = (void *)v17[4];
      uint64_t v19 = (void *)v17[6];
      swift_bridgeObjectRelease(v17[1]);
      OUTLINED_FUNCTION_37();

      OUTLINED_FUNCTION_20();
      *uint64_t v17 = v28;
      v17[1] = v2;
      v17[2] = v29;
      v17[3] = v30;
      v17[4] = v31;
      v17[5] = v27;
      v17[6] = v4;
LABEL_12:
      uint64_t v24 = *(uint64_t **)(v0 + 176);
      uint64_t v25 = *v24;
      *uint64_t v24 = (uint64_t)v16;
      swift_bridgeObjectRelease(v25);
      uint64_t v26 = (void *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
      *(void *)(v0 + 224) = v26;
      char *v26 = v0;
      v26[1] = closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:);
      OUTLINED_FUNCTION_12_0();
      return OUTLINED_FUNCTION_17_11();
    }

    v16[(v13 >> 6) + 8] |= 1LL << v13;
    *(void *)(v16[6] + 8 * v13) = v1;
    uint64_t v20 = (void *)(v16[7] + 56 * v13);
    *uint64_t v20 = v28;
    v20[1] = v2;
    __int128 v20[2] = v29;
    v20[3] = v30;
    v20[4] = v31;
    v20[5] = v27;
    v20[6] = v4;
    uint64_t v21 = v16[2];
    uint64_t v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      goto LABEL_12;
    }
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  v7[9] = a1;
  return swift_task_switch( closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:),  0LL,  0LL);
}

uint64_t closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 80);
  **(void **)(v0 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v2;
  unint64_t v3 = v1 & 0xC000000000000001LL;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v2, (v1 & 0xC000000000000001LL) == 0);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 80);
  if (v3) {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v4);
  }
  else {
    id v6 = *(id *)(v4 + 8 * v5 + 32);
  }
  uint64_t v7 = (uint64_t)v6;
  *(void *)(v0 + 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v6;
  uint64_t v8 = (void *)swift_task_alloc(dword_21656C);
  *(void *)(v0 + 120) = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:);
  return WFChooseFromListFlow.loadDialogListItem(item:dataStore:)(v0 + 16, v7, *(void *)(v0 + 104));
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = *(void **)(v0 + 112);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 120));

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v1 = *(_OWORD *)(v0 + 16);
  uint64_t v2 = *(_OWORD *)(v0 + 32);
  unint64_t v3 = *(_OWORD *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 72);
  *(void *)(v4 + 56) = *(void *)(v0 + 64);
  *(_OWORD *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 24) = v2;
  *(_OWORD *)(v4 + 8) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WFChooseFromListFlow.loadDialogListItem(item:dataStore:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[42] = a2;
  v3[43] = a3;
  v3[41] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)WFChooseFromListFlow.loadDialogListItem(item:dataStore:));
}

uint64_t WFChooseFromListFlow.loadDialogListItem(item:dataStore:)()
{
  id v1 = [*(id *)(v0 + 336) identifier];
  NSString v2 = v1;
  NSString v3 = v1;
  NSString v4 = v1;
  NSString v5 = v1;
  if (!v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v5 = String._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_62_4();
    uint64_t v7 = v6;
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    OUTLINED_FUNCTION_62_4();
    NSString v3 = String._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_62_4();
    NSString v2 = String._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_2_6();
  }

  *(void *)(v0 + 368) = v4;
  *(void *)(v0 + 376) = v5;
  *(void *)(v0 + 35outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v2;
  *(void *)(v0 + 360) = v3;
  uint64_t v8 = *(void *)(v0 + 344);
  if (v8)
  {
    *(void *)(v0 + 120) = v0 + 312;
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 88) = WFChooseFromListFlow.loadDialogListItem(item:dataStore:);
    *(void *)(v0 + 304) = OUTLINED_FUNCTION_37_8(v0 + 80);
    *(void *)(v0 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = _NSConcreteStackBlock;
    *(void *)(v0 + 280) = 0x40000000LL;
    *(void *)(v0 + 288) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool;
    *(void *)(v0 + 296) = &block_descriptor_2;
    id v9 = v1;
    [(id)swift_unknownObjectRetain(v8) hasSubtitleForIdentifier:v5 completion:v0 + 272];
    return OUTLINED_FUNCTION_33_8();
  }

  else
  {
    uint64_t v11 = *(void **)(v0 + 336);
    id v12 = v1;

    id v13 = [v11 title];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    uint64_t v18 = *(uint64_t **)(v0 + 328);
    uint64_t v17 = *(void **)(v0 + 336);
    *uint64_t v18 = v14;
    v18[1] = v16;
    v18[2] = 0LL;
    v18[3] = 0LL;
    OUTLINED_FUNCTION_40_7(v17);
    return v19();
  }

{
  OUTLINED_FUNCTION_11_12();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  OUTLINED_FUNCTION_104();
  id v1 = v0 + 312;
  NSString v2 = *(unsigned __int8 *)(v0 + 312);

  NSString v3 = *(void **)(v0 + 368);
  if (v2 == 1)
  {
    NSString v4 = *(void **)(v0 + 344);
    *(void *)(v0 + 248) = v1;
    *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0, v1 - 208) = v0;
    *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = WFChooseFromListFlow.loadDialogListItem(item:dataStore:);
    *(void *)(v0 + 304) = OUTLINED_FUNCTION_37_8(v0 + 208);
    *(void *)(v0 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = _NSConcreteStackBlock;
    *(void *)(v0 + 280) = 0x40000000LL;
    *(void *)(v0 + 288) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?) -> () with result type String?;
    *(void *)(v0 + 296) = &block_descriptor_10;
    [v4 loadSubtitleWithIdentifier:v3 completion:v0 + 272];
  }

  else
  {

    *(void *)(v0 + 384) = 0LL;
    *(void *)(v0 + 39outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0LL;
    NSString v5 = *(void *)(v0 + 360);
    uint64_t v6 = *(void **)(v0 + 344);
    *(void *)(v0 + 56) = v1;
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = WFChooseFromListFlow.loadDialogListItem(item:dataStore:);
    *(void *)(v0 + 304) = OUTLINED_FUNCTION_37_8(v0 + 16);
    *(void *)(v0 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = _NSConcreteStackBlock;
    *(void *)(v0 + 280) = 0x40000000LL;
    *(void *)(v0 + 288) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool;
    *(void *)(v0 + 296) = &block_descriptor_8;
    [v6 hasImageForIdentifier:v5 completion:v0 + 272];
  }

  return OUTLINED_FUNCTION_32_6();
}

{
  OUTLINED_FUNCTION_11_12();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  __int128 v4;
  NSString v4 = *(_OWORD *)(v0 + 312);

  *(_OWORD *)(v0 + 384) = v4;
  id v1 = *(void *)(v0 + 360);
  NSString v2 = *(void **)(v0 + 344);
  *(void *)(v0 + 56) = v0 + 312;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  *(void *)(v0 + 24) = WFChooseFromListFlow.loadDialogListItem(item:dataStore:);
  *(void *)(v0 + 304) = OUTLINED_FUNCTION_37_8(v0 + 16);
  *(void *)(v0 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = _NSConcreteStackBlock;
  *(void *)(v0 + 280) = 0x40000000LL;
  *(void *)(v0 + 288) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool;
  *(void *)(v0 + 296) = &block_descriptor_8;
  [v2 hasImageForIdentifier:v1 completion:v0 + 272];
  return OUTLINED_FUNCTION_33_8();
}

{
  OUTLINED_FUNCTION_11_12();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t (*v13)(void);
  id v1 = *(unsigned __int8 *)(v0 + 312);

  if (v1 == 1)
  {
    NSString v3 = *(void **)(v0 + 344);
    NSString v2 = *(void *)(v0 + 352);
    *(void *)(v0 + 184) = v0 + 312;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 15outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = WFChooseFromListFlow.loadDialogListItem(item:dataStore:);
    *(void *)(v0 + 304) = OUTLINED_FUNCTION_37_8(v0 + 144);
    *(void *)(v0 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = _NSConcreteStackBlock;
    *(void *)(v0 + 280) = 0x40000000LL;
    *(void *)(v0 + 288) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned WFImage?, @unowned NSDictionary?) -> () with result type (WFImage?, [WFContentItemListThumbnailOption : Any]?);
    *(void *)(v0 + 296) = &block_descriptor_9;
    objc_msgSend(v3, "loadImageWithIdentifier:size:completion:", v2, v0 + 272, 31.0, 31.0);
    return OUTLINED_FUNCTION_32_6();
  }

  else
  {

    NSString v5 = *(void *)(v0 + 344);
    uint64_t v6 = [*(id *)(v0 + 336) title];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = v8;

    swift_unknownObjectRelease(v5);
    uint64_t v11 = *(void *)(v0 + 328);
    uint64_t v10 = *(void **)(v0 + 336);
    id v12 = *(_OWORD *)(v0 + 384);
    *(void *)uint64_t v11 = v7;
    *(void *)(v11 + 8) = v9;
    *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
    OUTLINED_FUNCTION_40_7(v10);
    return v13();
  }

{
  OUTLINED_FUNCTION_11_12();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  id v12;
  uint64_t (*v14)(void);
  OUTLINED_FUNCTION_104();
  id v1 = *(void **)(v0 + 312);

  OUTLINED_FUNCTION_20();
  if (v1)
  {
    NSString v2 = v1;
    NSString v3 = (unint64_t)WFImage.convertToINImage()();
  }

  else
  {
    NSString v3 = 0LL;
  }

  NSString v4 = *(void *)(v0 + 344);
  NSString v5 = [*(id *)(v0 + 336) title];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  swift_unknownObjectRelease(v4);
  uint64_t v10 = *(void *)(v0 + 328);
  id v9 = *(void **)(v0 + 336);
  uint64_t v11 = *(_OWORD *)(v0 + 384);
  *(void *)uint64_t v10 = v6;
  *(void *)(v10 + 8) = v8;
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(void *)(v10 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v3;
  *(void *)(v10 + 40) = _swiftEmptyArrayStorage;
  *(void *)(v10 + 48) = v9;
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  id v12 = v9;
  return OUTLINED_FUNCTION_18_2(v14);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool( uint64_t a1, char a2)
{
  return specialized _resumeUnsafeContinuation<A>(_:_:)(*(void *)(a1 + 32), a2);
}

uint64_t specialized _resumeUnsafeContinuation<A>(_:_:)(uint64_t a1, char a2)
{
  **(_BYTE **)(*(void *)(a1 + 64) + 4Hasher.init(_seed:)(v0, 0LL) = a2;
  return swift_continuation_resume();
}

uint64_t specialized _resumeUnsafeContinuation<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  outlined init with take of String?((uint64_t)v5, *(void *)(*(void *)(a1 + 64) + 40LL));
  return swift_continuation_resume(a1);
}

{
  void *v3;
  NSString v3 = *(void **)(*(void *)(a1 + 64) + 40LL);
  *NSString v3 = a2;
  v3[1] = a3;
  return swift_continuation_resume();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?) -> () with result type String?( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v5 = 0LL;
  }

  return specialized _resumeUnsafeContinuation<A>(_:_:)(v2, v3, v5);
}

uint64_t WFChooseFromListFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  outlined consume of WFChooseFromListFlow.State(*(void **)(v0 + 88), *(_BYTE *)(v0 + 96));
  return v0;
}

uint64_t WFChooseFromListFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 97LL, 7LL);
}

uint64_t protocol witness for Flow.on(input:) in conformance WFChooseFromListFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184LL))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFChooseFromListFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200LL))();
}

uint64_t protocol witness for Flow.execute() in conformance WFChooseFromListFlow(uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 192LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v7(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WFChooseFromListFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 168LL))();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  char v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *char v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5( uint64_t a1, int *a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = swift_task_alloc(a2[1]);
  uint64_t v5 = (void *)OUTLINED_FUNCTION_39_6(v4);
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5TQ0_;
  return v7(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5TQ0_()
{
  return OUTLINED_FUNCTION_27_2(v0[1]);
}

uint64_t type metadata accessor for WFChooseFromListFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin20WFChooseFromListFlow);
}

unint64_t lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]> and conformance PromptForDisambiguationFlowAsync<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]> and conformance PromptForDisambiguationFlowAsync<A, B>;
  if (!lazy protocol witness table cache variable for type PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]> and conformance PromptForDisambiguationFlowAsync<A, B>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PromptForDisambiguationFlowAsync<A, B>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]> and conformance PromptForDisambiguationFlowAsync<A, B>);
  }

  return result;
}

void outlined consume of WFChooseFromListFlow.State(void *a1, char a2)
{
  switch(a2)
  {
    case 2:

      break;
    case 1:
      swift_errorRelease(a1);
      break;
    case 0:
      swift_bridgeObjectRelease(a1);
      break;
  }

unint64_t lazy protocol witness table accessor for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError;
  if (!lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WFChooseFromListFlowError,  &type metadata for WFChooseFromListFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError;
  if (!lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WFChooseFromListFlowError,  &type metadata for WFChooseFromListFlowError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError);
  }

  return result;
}

uint64_t base witness table accessor for Flow in WFChooseFromListFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type WFChooseFromListFlow and conformance WFChooseFromListFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for WFChooseFromListFlow,  (uint64_t)&protocol conformance descriptor for WFChooseFromListFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in WFChooseFromListFlow( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( &lazy protocol witness table cache variable for type WFChooseFromListFlow and conformance WFChooseFromListFlow,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for WFChooseFromListFlow,  (uint64_t)&protocol conformance descriptor for WFChooseFromListFlow);
}

uint64_t storeEnumTagSinglePayload for WFChooseFromListFlowError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_54340 + 4 * byte_180D69[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_54374 + 4 * byte_180D64[v4]))();
}

uint64_t sub_54374(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5437C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x54384LL);
  }
  return result;
}

uint64_t sub_54390(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x54398LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_5439C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_543A4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WFChooseFromListFlowError()
{
  return &type metadata for WFChooseFromListFlowError;
}

uint64_t initializeBufferWithCopyOfBuffer for WFChooseFromListFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of WFChooseFromListFlow.State(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of WFChooseFromListFlow.State(id result, char a2)
{
  switch(a2)
  {
    case 2:
      return result;
    case 1:
      return (id)swift_errorRetain(result);
    case 0:
      return (id)swift_bridgeObjectRetain(result);
  }

  return result;
}

void destroy for WFChooseFromListFlow.State(uint64_t a1)
{
}

uint64_t assignWithCopy for WFChooseFromListFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of WFChooseFromListFlow.State(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of WFChooseFromListFlow.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for WFChooseFromListFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of WFChooseFromListFlow.State(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for WFChooseFromListFlow.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WFChooseFromListFlow.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for WFChooseFromListFlow.State(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for WFChooseFromListFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(aoutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 3;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

void *type metadata accessor for WFChooseFromListFlow.State()
{
  return &unk_1F52F0;
}

uint64_t lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t partial apply for closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = swift_task_alloc(dword_21668C);
  uint64_t v11 = (void *)OUTLINED_FUNCTION_39_6(v10);
  *uint64_t v11 = v3;
  v11[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_54648()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = swift_task_alloc(dword_2166A4);
  char v5 = (void *)OUTLINED_FUNCTION_39_6(v4);
  uint64_t v6 = OUTLINED_FUNCTION_38_8(v5);
  return closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)( v6,  v7,  v8,  v9,  v1,  v3,  v2);
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_54740()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVt_Tg5TA()
{
  uint64_t v0 = swift_task_alloc(dword_2166AC);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_39_6(v0);
  uint64_t v2 = OUTLINED_FUNCTION_31_7(v1);
  return OUTLINED_FUNCTION_23_10(v2, v3, v4, v5);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA()
{
  uint64_t v0 = swift_task_alloc(dword_216754);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_39_6(v0);
  uint64_t v2 = OUTLINED_FUNCTION_31_7(v1);
  return OUTLINED_FUNCTION_23_10(v2, v3, v4, v5);
}

uint64_t OUTLINED_FUNCTION_7_11()
{
  return swift_task_dealloc(*(void *)(v0 + 304));
}

void OUTLINED_FUNCTION_11_12()
{
  *(void *)(v1 - 8) = *v0;
  *(void *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_17_11()
{
  return ((uint64_t (*)(void))TaskGroup.Iterator.next(isolation:))();
}

  ;
}

uint64_t OUTLINED_FUNCTION_21_10(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_23_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

id OUTLINED_FUNCTION_27_11(id a1)
{
  *(void *)(v1 + 88) = a1;
  *(_BYTE *)(v1 + 96) = 2;
  return a1;
}

uint64_t OUTLINED_FUNCTION_31_7(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_32_6()
{
  return swift_continuation_await();
}

uint64_t OUTLINED_FUNCTION_33_8()
{
  return swift_continuation_await();
}

uint64_t OUTLINED_FUNCTION_37_8(uint64_t a1)
{
  return swift_continuation_init(a1, 0LL);
}

uint64_t OUTLINED_FUNCTION_38_8(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_39_6(uint64_t result)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

id OUTLINED_FUNCTION_40_7@<X0>(void *a1@<X8>)
{
  v1[4] = 0LL;
  v1[5] = v2;
  v1[6] = a1;
  return a1;
}

uint64_t OUTLINED_FUNCTION_42_3()
{
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 88) = v1;
  *(_BYTE *)(v0 + 96) = 0;
  return swift_bridgeObjectRetain(v1);
}

uint64_t OUTLINED_FUNCTION_50_9()
{
  return static ExecuteResponse.complete()(v2);
}

uint64_t OUTLINED_FUNCTION_51_6()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void OUTLINED_FUNCTION_55_5()
{
}

void OUTLINED_FUNCTION_56_5()
{
}

uint64_t OUTLINED_FUNCTION_62_4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
}

uint64_t OUTLINED_FUNCTION_64_2()
{
  return type metadata accessor for TaskPriority(0LL);
}

SiriLinkFlowPlugin::ListShortcutsCATsSimple::Properties_optional __swiftcall ListShortcutsCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of ListShortcutsCATsSimple.Properties.init(rawValue:),  v3);
  OUTLINED_FUNCTION_58_2();
  if (v1 == 1) {
    v4.value = SiriLinkFlowPlugin_ListShortcutsCATsSimple_Properties_viewShortcutsInApp;
  }
  else {
    v4.value = SiriLinkFlowPlugin_ListShortcutsCATsSimple_Properties_unknownDefault;
  }
  if (v1) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t ListShortcutsCATsSimple.Properties.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000020LL;
  }
  else {
    return 0xD000000000000017LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ListShortcutsCATsSimple.Properties( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ListShortcutsCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ListShortcutsCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ListShortcutsCATsSimple.Properties( uint64_t a1)
{
}

SiriLinkFlowPlugin::ListShortcutsCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ListShortcutsCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::ListShortcutsCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = ListShortcutsCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ListShortcutsCATsSimple.Properties@<X0>( unint64_t *a1@<X8>)
{
  unint64_t result = ListShortcutsCATsSimple.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ListShortcutsCATsSimple.launchApp(device:)(uint64_t a1)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)ListShortcutsCATsSimple.launchApp(device:));
}

uint64_t ListShortcutsCATsSimple.launchApp(device:)()
{
  unint64_t v2 = v1[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v4 = (__n128 *)OUTLINED_FUNCTION_7_0(v3);
  v1[4] = v4;
  uint64_t v5 = OUTLINED_FUNCTION_4_3(v4, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SirikitDeviceState(v5);
  }

  else
  {
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  v4[3].n128_u64[0] = v2;
  v4[4].n128_u64[1] = v5;
  OUTLINED_FUNCTION_5_2();
  uint64_t v6 = (void *)swift_task_alloc(v0);
  v1[5] = v6;
  *uint64_t v6 = v1;
  v6[1] = ListShortcutsCATsSimple.launchApp(device:);
  OUTLINED_FUNCTION_45_1();
  return v8(0xD000000000000017LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_0_15();
  if (v1) {
    return OUTLINED_FUNCTION_14_0();
  }
  swift_bridgeObjectRelease(*(void *)(v2 + 32));
  return OUTLINED_FUNCTION_23_1(v0, *(uint64_t (**)(void))(v3 + 8));
}

BOOL ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:);
  return ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunVoiceCommandCATsSimple.OpenAppDialogIds.rawValue.getter()
{
  return 1852141679LL;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance ListShortcutsCATsSimple.LaunchAppDialogIds@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ListShortcutsCATsSimple.LaunchAppDialogIds( void *a1@<X8>)
{
}

uint64_t ListShortcutsCATsSimple.launchAppAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)ListShortcutsCATsSimple.launchAppAsLabels(device:));
}

uint64_t ListShortcutsCATsSimple.launchAppAsLabels(device:)()
{
  unint64_t v2 = v1[2];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v4 = (__n128 *)OUTLINED_FUNCTION_7_0(v3);
  v1[4] = v4;
  uint64_t v5 = OUTLINED_FUNCTION_4_3(v4, (__n128)xmmword_17E650);
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SirikitDeviceState(v5);
  }

  else
  {
    v4[3].n128_u64[1] = 0LL;
    v4[4].n128_u64[0] = 0LL;
  }

  v4[3].n128_u64[0] = v2;
  v4[4].n128_u64[1] = v5;
  OUTLINED_FUNCTION_5_2();
  uint64_t v6 = (void *)swift_task_alloc(v0);
  v1[5] = v6;
  lazy protocol witness table accessor for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds();
  *uint64_t v6 = v1;
  v6[1] = ListShortcutsCATsSimple.launchAppAsLabels(device:);
  OUTLINED_FUNCTION_45_1();
  return v8(0xD000000000000017LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_0_15();
  if (v1) {
    return OUTLINED_FUNCTION_14_0();
  }
  swift_bridgeObjectRelease(*(void *)(v2 + 32));
  return OUTLINED_FUNCTION_23_1(v0, *(uint64_t (**)(void))(v3 + 8));
}

{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds;
  if (!lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ListShortcutsCATsSimple.LaunchAppDialogIds,  &type metadata for ListShortcutsCATsSimple.LaunchAppDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds;
  if (!lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ListShortcutsCATsSimple.LaunchAppDialogIds,  &type metadata for ListShortcutsCATsSimple.LaunchAppDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds);
  }

  return result;
}

uint64_t ListShortcutsCATsSimple.viewShortcutsInApp()()
{
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  OUTLINED_FUNCTION_45_1();
  return v3(0xD000000000000020LL);
}

BOOL ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds.init(rawValue:);
  return ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(a1, v1);
}

BOOL ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)( Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  _findStringSwitchCase(cases:string:)(cases, v4);
  OUTLINED_FUNCTION_58_2();
  return v2 != 0;
}

uint64_t ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds.rawValue.getter()
{
  return 2003134838LL;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds@<W0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds( void *a1@<X8>)
{
}

uint64_t ListShortcutsCATsSimple.viewShortcutsInAppAsLabels()()
{
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  lazy protocol witness table accessor for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds();
  *Swift::OpaquePointer v1 = v0;
  v1[1] = ListShortcutsCATsSimple.viewShortcutsInAppAsLabels();
  OUTLINED_FUNCTION_45_1();
  return v3(0xD000000000000020LL);
}

uint64_t ListShortcutsCATsSimple.viewShortcutsInAppAsLabels()(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

unint64_t lazy protocol witness table accessor for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds;
  if (!lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds,  &type metadata for ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds;
  if (!lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds,  &type metadata for ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds);
  }

  return result;
}

uint64_t InstallShortcutCATsSimple.__allocating_init(templateDir:options:globals:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return InstallShortcutCATsSimple.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t InstallShortcutCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10);
  id v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of URL?(a1, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)(v12, v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  outlined destroy of URL?(a1);
  return v13;
}

unint64_t lazy protocol witness table accessor for type ListShortcutsCATsSimple.Properties and conformance ListShortcutsCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type ListShortcutsCATsSimple.Properties and conformance ListShortcutsCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type ListShortcutsCATsSimple.Properties and conformance ListShortcutsCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ListShortcutsCATsSimple.Properties,  &type metadata for ListShortcutsCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsCATsSimple.Properties and conformance ListShortcutsCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for ListShortcutsCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for ListShortcutsCATsSimple;
  if (!type metadata singleton initialization cache for ListShortcutsCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListShortcutsCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for ListShortcutsCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for ListShortcutsCATsSimple);
}

uint64_t ObjC metadata update function for ListShortcutsCATsSimple()
{
  return type metadata accessor for ListShortcutsCATsSimple(0LL);
}

uint64_t storeEnumTagSinglePayload for ListShortcutsCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_552D0 + 4 * byte_180F85[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_55304 + 4 * byte_180F80[v4]))();
}

uint64_t sub_55304(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5530C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x55314LL);
  }
  return result;
}

uint64_t sub_55320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x55328LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_5532C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_55334(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ListShortcutsCATsSimple.Properties()
{
}

void type metadata accessor for ListShortcutsCATsSimple.LaunchAppDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for ListShortcutsCATsSimple.LaunchAppDialogIds(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_5539C + 4 * byte_180F8A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_553BC + 4 * byte_180F8F[v4]))();
  }
}

_BYTE *sub_5539C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_553BC(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_553C4(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_553CC(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_553D4(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_553DC(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_0_15()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 40);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 48) = v0;
  return swift_task_dealloc(v5);
}

void OUTLINED_FUNCTION_12_12(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = 0xE400000000000000LL;
}

Swift::Bool __swiftcall LNActionOutput.hasCustomOutput()()
{
  id v1 = [v0 dialog];

  if (v1) {
    goto LABEL_4;
  }
  id v2 = [v0 viewSnippet];
  if (v2)
  {

LABEL_4:
    LOBYTE(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 1;
  }

  return (char)v2;
}

Swift::Bool __swiftcall LNSuccessResult.hasCustomOutput()()
{
  id v1 = [v0 output];
  Swift::Bool v2 = LNActionOutput.hasCustomOutput()();

  return v2;
}

uint64_t String.convertedToURL()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v39[0] = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v39 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v39 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v39 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v39 - v18;
  URL.init(string:)(a1, a2);
  outlined init with copy of URL?((uint64_t)v19, (uint64_t)v17);
  uint64_t v20 = type metadata accessor for URL(0LL);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1LL, v20);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?((uint64_t)v17);
LABEL_6:
    OUTLINED_FUNCTION_1_14();
    goto LABEL_7;
  }

  URL.scheme.getter(EnumTagSinglePayload);
  uint64_t v23 = v22;
  uint64_t v24 = *(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8LL);
  v24(v17, v20);
  if (!v23) {
    goto LABEL_6;
  }
  swift_bridgeObjectRelease(v23);
  OUTLINED_FUNCTION_1_14();
  outlined init with copy of URL?((uint64_t)v14, (uint64_t)v11);
  uint64_t v25 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1LL, v20);
  if ((_DWORD)v25 == 1)
  {
    OUTLINED_FUNCTION_0_16();
LABEL_7:
    OUTLINED_FUNCTION_0_16();
    goto LABEL_8;
  }

  URL.host.getter(v25);
  uint64_t v37 = v36;
  OUTLINED_FUNCTION_0_16();
  v24(v11, v20);
  if (v37)
  {
    swift_bridgeObjectRelease(v37);
    uint64_t v38 = (uint64_t)v19;
    return outlined init with take of URL?(v38, v39[0]);
  }

LABEL_8:
  id v26 = objc_allocWithZone(&OBJC_CLASS___NSDataDetector);
  id v27 = @nonobjc NSDataDetector.init(types:)(-1LL);
  uint64_t v29 = v27;
  if (v27)
  {
    NSString v30 = String._bridgeToObjectiveC()();
    id v31 = objc_msgSend(v29, "firstMatchInString:options:range:", v30, 0, 0, OUTLINED_FUNCTION_5_12(), v39[0]);

    if (!v31)
    {
      OUTLINED_FUNCTION_2_17();

      return OUTLINED_FUNCTION_4_13(v39[0], 1LL);
    }

    if (!OUTLINED_FUNCTION_3_17())
    {
      OUTLINED_FUNCTION_3_17();
      if (v32 == OUTLINED_FUNCTION_5_12())
      {
        id v33 = [v31 URL];
        if (v33)
        {
          os_log_type_t v34 = v33;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v35 = 0LL;
        }

        else
        {
          uint64_t v35 = 1LL;
        }

        OUTLINED_FUNCTION_2_17();
        OUTLINED_FUNCTION_4_13((uint64_t)v8, v35);
        uint64_t v38 = (uint64_t)v8;
        return outlined init with take of URL?(v38, v39[0]);
      }
    }
  }

  OUTLINED_FUNCTION_2_17();
  return OUTLINED_FUNCTION_4_13(v39[0], 1LL);
}

        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v16 = type metadata accessor for Logger(0LL);
        uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
        uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
        uint64_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v20 = 0;
          _os_log_impl( &dword_0,  v18,  v19,  "SiriLinkFlow does not yet support converting this parameter type from NLv4 parses.",  v20,  2u);
          OUTLINED_FUNCTION_1_0((uint64_t)v20);
        }

LABEL_22:
        uint64_t v37 = Siri_Nlu_External_UserDialogAct.stringValue.getter();
        uint64_t v8 = *(void *)(v4 + 16);
        if (v38)
        {
          *(void *)(v8 + 24) = &type metadata for String;
          *(void *)uint64_t v8 = v37;
          *(void *)(v8 + 8) = v38;
          goto LABEL_42;
        }
      }

          uint64_t v17 = 1;
LABEL_9:
          __swift_destroy_boxed_opaque_existential_1Tm(v30);
          goto LABEL_10;
        }

id @nonobjc NSDataDetector.init(types:)(uint64_t a1)
{
  id v7 = 0LL;
  id v2 = [v1 initWithTypes:a1 error:&v7];
  id v3 = v7;
  if (v2)
  {
    id v4 = v7;
  }

  else
  {
    id v5 = v7;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow();
  }

  return v2;
}

uint64_t OUTLINED_FUNCTION_0_16()
{
  return outlined destroy of URL?(v0);
}

uint64_t OUTLINED_FUNCTION_1_14()
{
  return outlined init with copy of URL?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_2_17()
{
  return outlined destroy of URL?(v0);
}

id OUTLINED_FUNCTION_3_17()
{
  return [v1 *(SEL *)(v0 + 584)];
}

uint64_t OUTLINED_FUNCTION_4_13(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1LL, v2);
}

uint64_t OUTLINED_FUNCTION_5_12()
{
  return String.count.getter(v1, v0);
}

uint64_t ShowOutputAndCloseFlow.__allocating_init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)( char a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_allocObject(v5, 113LL, 7LL);
  ShowOutputAndCloseFlow.init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)(a1, a2, a3, a4, a5);
  return v11;
}

uint64_t ShowOutputAndCloseFlow.init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)( char a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  *(_BYTE *)(v5 + 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a1;
  outlined init with take of AceServiceInvokerAsync(a2, v5 + 16);
  outlined init with take of AceServiceInvokerAsync(a3, v5 + 56);
  *(void *)(v5 + 96) = a4;
  *(void *)(v5 + 104) = a5;
  return v5;
}

uint64_t ShowOutputAndCloseFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  unint64_t v6 = lazy protocol witness table accessor for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow();
  return Flow.deferToExecuteAsync(_:)(a1, a2, v5, v6);
}

unint64_t lazy protocol witness table accessor for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow;
  if (!lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow)
  {
    uint64_t v1 = type metadata accessor for ShowOutputAndCloseFlow();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ShowOutputAndCloseFlow, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow);
  }

  return result;
}

uint64_t type metadata accessor for ShowOutputAndCloseFlow()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin22ShowOutputAndCloseFlow);
}

uint64_t ShowOutputAndCloseFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  return swift_task_switch(ShowOutputAndCloseFlow.execute(), 0LL, 0LL);
}

{
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  if (*(_BYTE *)(*(void *)(v1 + 104) + 112LL) == 1)
  {
    uint64_t v2 = (void *)Logger.logObject.getter(a1);
    id v3 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_45_0(v3))
    {
      id v4 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *id v4 = 0;
      OUTLINED_FUNCTION_27_0(&dword_0, v5, v6, "Dismissing Siri");
      OUTLINED_FUNCTION_1_0((uint64_t)v4);
    }

    id v7 = *(void **)(v1 + 104);

    uint64_t v8 = v7 + 7;
    uint64_t v10 = v7[10];
    uint64_t v9 = v7[11];
    __swift_project_boxed_opaque_existential_1(v8, v10);
    uint64_t v11 = [objc_allocWithZone(SAUICloseAssistant) init];
    AceServiceInvokerAsync.submitAndForget(_:)(v11, v10, v9);
  }

  OUTLINED_FUNCTION_16_13();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t ShowOutputAndCloseFlow.execute()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  v0[14] = v2;
  id v3 = (void *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_45_0(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    *uint64_t v5 = 0;
    OUTLINED_FUNCTION_27_0(&dword_0, v6, v7, "Submitting output");
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  uint64_t v8 = v0[13];

  uint64_t v9 = *(int **)(v8 + 96);
  uint64_t v12 = (uint64_t (*)(void *))((char *)v9 + *v9);
  uint64_t v10 = (void *)swift_task_alloc(v9[1]);
  v0[15] = v10;
  *uint64_t v10 = v0;
  v10[1] = ShowOutputAndCloseFlow.execute();
  return v12(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = v1[5];
  id v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  os_log_type_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  *(void *)(v0 + 136) = v4;
  *os_log_type_t v4 = v0;
  v4[1] = ShowOutputAndCloseFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  OUTLINED_FUNCTION_46_0();
  uint64_t v1 = OUTLINED_FUNCTION_46_0();
  uint64_t v2 = (void *)Logger.logObject.getter(v1);
  id v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_13_9(v3))
  {
    os_log_type_t v4 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v5 = OUTLINED_FUNCTION_38(32LL);
    OUTLINED_FUNCTION_4_14(4.8149e-34);
    uint64_t v6 = OUTLINED_FUNCTION_15_8();
    uint64_t v14 = OUTLINED_FUNCTION_14_12(v6, v7, v8, v9, v10, v11, v12, v13, v5);
    OUTLINED_FUNCTION_5_13(v14);
    swift_bridgeObjectRelease(v0 + 80);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_8_12(&dword_0, v15, v16, "Hit an error publishing output %s");
    OUTLINED_FUNCTION_11_13((uint64_t)&type metadata for Any);
    OUTLINED_FUNCTION_1_0(v5);
    OUTLINED_FUNCTION_1_0(v4);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_16_13();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  OUTLINED_FUNCTION_46_0();
  uint64_t v1 = OUTLINED_FUNCTION_46_0();
  uint64_t v2 = (void *)Logger.logObject.getter(v1);
  id v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_13_9(v3))
  {
    os_log_type_t v4 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v5 = OUTLINED_FUNCTION_38(32LL);
    OUTLINED_FUNCTION_4_14(4.8149e-34);
    uint64_t v6 = OUTLINED_FUNCTION_15_8();
    uint64_t v14 = OUTLINED_FUNCTION_14_12(v6, v7, v8, v9, v10, v11, v12, v13, v5);
    OUTLINED_FUNCTION_5_13(v14);
    swift_bridgeObjectRelease(v0 + 80);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_8_12(&dword_0, v15, v16, "Hit an error publishing output %s");
    OUTLINED_FUNCTION_11_13((uint64_t)&type metadata for Any);
    OUTLINED_FUNCTION_1_0(v5);
    OUTLINED_FUNCTION_1_0(v4);

    OUTLINED_FUNCTION_4_8();
  }

  else
  {
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_4_8();
  }

  OUTLINED_FUNCTION_16_13();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ShowOutputAndCloseFlow.deinit()
{
  return v0;
}

uint64_t ShowOutputAndCloseFlow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 113LL, 7LL);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ShowOutputAndCloseFlow( uint64_t a1, uint64_t a2)
{
  return ShowOutputAndCloseFlow.execute(completion:)(a1, a2);
}

uint64_t protocol witness for Flow.execute() in conformance ShowOutputAndCloseFlow(uint64_t a1)
{
  id v3 = (void *)swift_task_alloc(dword_2167FC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *id v3 = v1;
  v3[1] = protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy;
  return ShowOutputAndCloseFlow.execute()(a1);
}

uint64_t OUTLINED_FUNCTION_4_14(float a1)
{
  *id v3 = a1;
  return swift_getErrorValue(v1, v2, v4);
}

uint64_t OUTLINED_FUNCTION_5_13(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v2);
}

void OUTLINED_FUNCTION_8_12(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_11_13@<X0>(uint64_t a1@<X8>)
{
  return swift_arrayDestroy(v1, 1LL, a1 + 8);
}

BOOL OUTLINED_FUNCTION_13_9(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_14_12( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &a9);
}

uint64_t OUTLINED_FUNCTION_15_8()
{
  return Error.localizedDescription.getter(*(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t OUTLINED_FUNCTION_16_13()
{
  return static ExecuteResponse.complete()();
}

INImage_optional __swiftcall WFImage.convertToINImage()()
{
  uint64_t v1 = outlined bridged method (pb) of @objc WFImage.pngRepresentation.getter(v0);
  if (v2 >> 60 == 15)
  {
    id v3 = 0LL;
  }

  else
  {
    uint64_t v4 = v1;
    unint64_t v5 = v2;
    type metadata accessor for INImage();
    outlined copy of Data._Representation(v4, v5);
    id v3 = (objc_class *)@nonobjc INImage.__allocating_init(imageData:)(v4, v5);
    OUTLINED_FUNCTION_0_17();
    double v7 = v6;
    OUTLINED_FUNCTION_0_17();
    -[objc_class _setImageSize:](v3, "_setImageSize:", v7);
    -[objc_class _setRenderingMode:](v3, "_setRenderingMode:", WFImage.getRenderingMode()());
    outlined consume of Data?(v4, v5);
  }

  uint64_t v8 = v3;
  result.is_nil = v2;
  result.value.super.Class isa = v8;
  return result;
}

id @nonobjc INImage.__allocating_init(imageData:)(uint64_t a1, unint64_t a2)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v5 = [(id)swift_getObjCClassFromMetadata() imageWithImageData:isa];
  outlined consume of Data._Representation(a1, a2);

  return v5;
}

id WFImage.getRenderingMode()()
{
  id result = [v0 renderingMode];
  return result;
}

uint64_t outlined bridged method (pb) of @objc WFImage.pngRepresentation.getter(void *a1)
{
  id v1 = [a1 PNGRepresentation];
  if (!v1) {
    return 0LL;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for INImage()
{
  unint64_t result = lazy cache variable for type metadata for INImage;
  if (!lazy cache variable for type metadata for INImage)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___INImage);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INImage);
  }

  return result;
}

id OUTLINED_FUNCTION_0_17()
{
  return [v1 *(SEL *)(v0 + 608)];
}

uint64_t RunLinkActionCATsSimple.Properties.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_562C4
                                                                     + 4 * asc_1812D0[a1]))( 0xD000000000000020LL,  0x8000000000190830LL);
}

void sub_562C4()
{
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::Properties_optional __swiftcall RunLinkActionCATsSimple.Properties.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of RunLinkActionCATsSimple.Properties.init(rawValue:),  v2);
  OUTLINED_FUNCTION_58_2();
  OUTLINED_FUNCTION_1();
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.Properties( unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.Properties()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.Properties( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.Properties( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.Properties@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.Properties()
{
  unsigned __int8 v1 = OUTLINED_FUNCTION_52_3();
  uint64_t *v0 = RunLinkActionCATsSimple.Properties.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunLinkActionCATsSimple.actionConfirmation(customDialog:verb:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_20_10(v3);
  *(void *)(v2 + 48) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.actionConfirmation(customDialog:verb:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = OUTLINED_FUNCTION_57_5(v4);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v5);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_15_9(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
    uint64_t v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  uint64_t v11 = OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_20_16();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  uint64_t v15 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 64) = v15;
  OUTLINED_FUNCTION_74_2(v15, (uint64_t)RunLinkActionCATsSimple.actionConfirmation(customDialog:verb:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v16 = OUTLINED_FUNCTION_25_13(32LL);
  return OUTLINED_FUNCTION_8_13(v16, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_12_13();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_34_8();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_71_0();
  OUTLINED_FUNCTION_40_0();
  swift_task_dealloc(v0);
  return OUTLINED_FUNCTION_3_4(*(uint64_t (**)(void))(v1 + 8));
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ActionConfirmationDialogIds_optional __swiftcall RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t RunLinkActionCATsSimple.ActionConfirmationDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6D7269666E6F63LL;
  }
  if (a1 == 1) {
    return 0x6D6F74737563LL;
  }
  return 0x62726556736168LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ActionConfirmationDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::ActionConfirmationDialogIds_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  uint64_t *v0 = RunLinkActionCATsSimple.ActionConfirmationDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunLinkActionCATsSimple.actionConfirmationAsLabels(customDialog:verb:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_20_10(v3);
  *(void *)(v2 + 48) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.actionConfirmationAsLabels(customDialog:verb:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = OUTLINED_FUNCTION_57_5(v4);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v5);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_15_9(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
    uint64_t v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  uint64_t v11 = OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_20_16();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  *(void *)(v1 + 64) = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationAsLabels(customDialog:verb:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v15 = OUTLINED_FUNCTION_24_10(32LL);
  return OUTLINED_FUNCTION_7_12(v15, v16, v17, v18, v19, v20);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_12_13();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_34_8();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_15_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ActionConfirmationDialogIds,  &type metadata for RunLinkActionCATsSimple.ActionConfirmationDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ActionConfirmationDialogIds,  &type metadata for RunLinkActionCATsSimple.ActionConfirmationDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds);
  }

  return result;
}

uint64_t RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:)(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 80LL);
  uint64_t v4 = OUTLINED_FUNCTION_41_6(v3);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_0_18(v4);
  OUTLINED_FUNCTION_12_4(v0, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t v7 = OUTLINED_FUNCTION_6_12(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_11_4(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    char v9 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v9);
  }

  uint64_t v10 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 48) = v10;
  OUTLINED_FUNCTION_68_2(v10, (uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v11 = OUTLINED_FUNCTION_25_13(38LL);
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_4_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_37_9();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

void RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.rawValue.getter()
{
  return 0x6D6F74737563LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds( void *a1@<X8>)
{
}

uint64_t RunLinkActionCATsSimple.actionConfirmationHeaderAsLabels(customDialog:)(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.actionConfirmationHeaderAsLabels(customDialog:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_41_6(v2);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_0_18(v3);
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_6_12(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_61_4(v9);
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v10 = OUTLINED_FUNCTION_24_10(38LL);
  return OUTLINED_FUNCTION_7_12(v10, v11, v12, v13, v14, v15);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds,  &type metadata for RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds,  &type metadata for RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds);
  }

  return result;
}

uint64_t RunLinkActionCATsSimple.actionPerformed(customDialog:)(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.actionPerformed(customDialog:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 80LL);
  uint64_t v4 = OUTLINED_FUNCTION_41_6(v3);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_0_18(v4);
  OUTLINED_FUNCTION_12_4(v0, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t v7 = OUTLINED_FUNCTION_6_12(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_11_4(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v9);
  }

  unint64_t v10 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 48) = v10;
  OUTLINED_FUNCTION_68_2(v10, (uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v11 = OUTLINED_FUNCTION_25_13(29LL);
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14);
}

void RunLinkActionCATsSimple.ActionPerformedDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ActionPerformedDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunCustomIntentCATsSimple.DoneButtonDialogIds.rawValue.getter()
{
  return 1701736292LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ActionPerformedDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ActionPerformedDialogIds( void *a1@<X8>)
{
}

uint64_t RunLinkActionCATsSimple.actionPerformedAsLabels(customDialog:)(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.actionPerformedAsLabels(customDialog:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_41_6(v2);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_0_18(v3);
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_6_12(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_61_4(v9);
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v10 = OUTLINED_FUNCTION_24_10(29LL);
  return OUTLINED_FUNCTION_7_12(v10, v11, v12, v13, v14, v15);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ActionPerformedDialogIds,  &type metadata for RunLinkActionCATsSimple.ActionPerformedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ActionPerformedDialogIds,  &type metadata for RunLinkActionCATsSimple.ActionPerformedDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds);
  }

  return result;
}

uint64_t RunLinkActionCATsSimple.confirmationButtonLabel(confirmationVerb:)(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.confirmationButtonLabel(confirmationVerb:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 80LL);
  uint64_t v5 = OUTLINED_FUNCTION_41_6(v4);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E650;
  *(void *)(v5 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0xD000000000000010LL;
  *(void *)(v5 + 40) = 0x8000000000194060LL;
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_6_12(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    unint64_t v10 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v10);
  }

  uint64_t v11 = (void *)OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 48) = v11;
  OUTLINED_FUNCTION_68_2(v11, (uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  return v13(0xD000000000000025LL, 0x80000000001908B0LL, v2);
}

void RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds.rawValue.getter()
{
  return 0x6D7269666E6F63LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds( void *a1@<X8>)
{
}

uint64_t RunLinkActionCATsSimple.confirmationButtonLabelAsLabels(confirmationVerb:)(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.confirmationButtonLabelAsLabels(confirmationVerb:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_41_6(v2);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E650;
  *(void *)(v3 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0xD000000000000010LL;
  *(void *)(v3 + 40) = 0x8000000000194060LL;
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_6_12(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_20_4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_61_4(v9);
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_45_1();
  return v11();
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds,  &type metadata for RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds,  &type metadata for RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds);
  }

  return result;
}

uint64_t RunLinkActionCATsSimple.continueInApp(customDialog:)(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.continueInApp(customDialog:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 80LL);
  uint64_t v4 = OUTLINED_FUNCTION_41_6(v3);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_0_18(v4);
  OUTLINED_FUNCTION_12_4(v0, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_61_1();
  uint64_t v7 = OUTLINED_FUNCTION_6_12(v6);
  if (v8)
  {
    OUTLINED_FUNCTION_11_4(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v9);
  }

  unint64_t v10 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 48) = v10;
  OUTLINED_FUNCTION_68_2(v10, (uint64_t)RunLinkActionCATsSimple.continueInApp(customDialog:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v11 = OUTLINED_FUNCTION_25_13(27LL);
  return OUTLINED_FUNCTION_8_13(v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);
  OUTLINED_FUNCTION_4_15();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    OUTLINED_FUNCTION_37_9();
    OUTLINED_FUNCTION_40_0();
    uint64_t v2 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v2, v3);
  }

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ContinueInAppDialogIds_optional __swiftcall RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t RunLinkActionCATsSimple.ContinueInAppDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6D6F74737563LL;
  }
  else {
    return 0x65756E69746E6F63LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ContinueInAppDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::ContinueInAppDialogIds_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  uint64_t *v0 = RunLinkActionCATsSimple.ContinueInAppDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunLinkActionCATsSimple.continueInAppAsLabels(customDialog:)(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.continueInAppAsLabels(customDialog:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_19(v1, 80LL);
  uint64_t v3 = OUTLINED_FUNCTION_41_6(v2);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E650;
  OUTLINED_FUNCTION_0_18(v3);
  OUTLINED_FUNCTION_12_4(v0, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_6_12(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    char v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  uint64_t v9 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_61_4(v9);
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v10 = OUTLINED_FUNCTION_24_10(27LL);
  return OUTLINED_FUNCTION_7_12(v10, v11, v12, v13, v14, v15);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ContinueInAppDialogIds,  &type metadata for RunLinkActionCATsSimple.ContinueInAppDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ContinueInAppDialogIds,  &type metadata for RunLinkActionCATsSimple.ContinueInAppDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds);
  }

  return result;
}

uint64_t RunLinkActionCATsSimple.errorDialog(customDialog:nonOptionalParameterIsNil:)(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 64) = a2;
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.errorDialog(customDialog:nonOptionalParameterIsNil:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = OUTLINED_FUNCTION_41_6(v4);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v5);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_6_12(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    unint64_t v10 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v10);
  }

  char v11 = *(_BYTE *)(v1 + 64);
  *(void *)(v2 + 80) = 0xD000000000000019LL;
  *(void *)(v2 + 88) = 0x8000000000194080LL;
  *(void *)(v2 + 120) = &type metadata for Bool;
  *(_BYTE *)(v2 + 96) = v11;
  uint64_t v12 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 48) = v12;
  OUTLINED_FUNCTION_68_2(v12, (uint64_t)RunLinkActionCATsSimple.continueInApp(customDialog:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v13 = OUTLINED_FUNCTION_25_13(25LL);
  return OUTLINED_FUNCTION_8_13(v13, v14, v15, v16);
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ErrorDialogDialogIds_optional __swiftcall RunLinkActionCATsSimple.ErrorDialogDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ErrorDialogDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

uint64_t RunLinkActionCATsSimple.ErrorDialogDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_55_6();
  }
  if (a1 == 1) {
    return 0x726F727265LL;
  }
  return 0x6D617261506C696ELL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ErrorDialogDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::ErrorDialogDialogIds_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.ErrorDialogDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  uint64_t *v0 = RunLinkActionCATsSimple.ErrorDialogDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunLinkActionCATsSimple.errorDialogAsLabels(customDialog:nonOptionalParameterIsNil:)( uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 64) = a2;
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = OUTLINED_FUNCTION_10_8(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.errorDialogAsLabels(customDialog:nonOptionalParameterIsNil:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = OUTLINED_FUNCTION_41_6(v4);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v5);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_6_12(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    unint64_t v10 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v10);
  }

  char v11 = *(_BYTE *)(v1 + 64);
  *(void *)(v2 + 80) = 0xD000000000000019LL;
  *(void *)(v2 + 88) = 0x8000000000194080LL;
  *(void *)(v2 + 120) = &type metadata for Bool;
  *(_BYTE *)(v2 + 96) = v11;
  uint64_t v12 = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  OUTLINED_FUNCTION_61_4(v12);
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds();
  OUTLINED_FUNCTION_69_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v13 = OUTLINED_FUNCTION_24_10(25LL);
  return OUTLINED_FUNCTION_7_12(v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ErrorDialogDialogIds,  &type metadata for RunLinkActionCATsSimple.ErrorDialogDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ErrorDialogDialogIds,  &type metadata for RunLinkActionCATsSimple.ErrorDialogDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds);
  }

  return result;
}

uint64_t RunLinkActionCATsSimple.needsDisambiguation(customDialog:items:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.needsDisambiguation(customDialog:items:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 128LL);
  v0[6] = v3;
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v3);
  OUTLINED_FUNCTION_12_4(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_66_2(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  OUTLINED_FUNCTION_53_5();
  *(void *)(v3 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v3 + 96) = v3 + 48;
  OUTLINED_FUNCTION_47_9();
  char v9 = (void *)swift_task_alloc(v1);
  v0[7] = v9;
  OUTLINED_FUNCTION_74_2(v9, (uint64_t)RunLinkActionCATsSimple.needsDisambiguation(customDialog:items:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v10 = OUTLINED_FUNCTION_25_13(33LL);
  return OUTLINED_FUNCTION_8_13(v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_39_7();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 48));
    OUTLINED_FUNCTION_40_0();
    uint64_t v3 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v3, v4);
  }

void RunLinkActionCATsSimple.NeedsDisambiguationDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.NeedsDisambiguationDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)( Swift::String a1, Swift::OpaquePointer a2)
{
}

uint64_t RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.rawValue.getter()
{
  return 0x6769626D61736964LL;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds( Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds( void *a1@<X8>)
{
}

uint64_t RunLinkActionCATsSimple.needsDisambiguationAsLabels(customDialog:items:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_10_8(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.needsDisambiguationAsLabels(customDialog:items:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 128LL);
  v0[6] = v3;
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v3);
  OUTLINED_FUNCTION_12_4(v1, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_61_1();
  uint64_t v6 = OUTLINED_FUNCTION_66_2(v5);
  if (v7)
  {
    OUTLINED_FUNCTION_11_4(v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_45_2();
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_34_2((uint64_t)v8);
  }

  OUTLINED_FUNCTION_53_5();
  *(void *)(v3 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v3 + 96) = v3 + 48;
  OUTLINED_FUNCTION_47_9();
  v0[7] = swift_task_alloc(v1);
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunLinkActionCATsSimple.needsDisambiguationAsLabels(customDialog:items:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v9 = OUTLINED_FUNCTION_24_10(33LL);
  return OUTLINED_FUNCTION_7_12(v9, v10, v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void);
  OUTLINED_FUNCTION_39_7();
  if (v0)
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_14_0();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 48));
    OUTLINED_FUNCTION_40_0();
    uint64_t v3 = OUTLINED_FUNCTION_29_3();
    return OUTLINED_FUNCTION_23_1(v3, v4);
  }

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.NeedsDisambiguationDialogIds,  &type metadata for RunLinkActionCATsSimple.NeedsDisambiguationDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.NeedsDisambiguationDialogIds,  &type metadata for RunLinkActionCATsSimple.NeedsDisambiguationDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds);
  }

  return result;
}

uint64_t RunLinkActionCATsSimple.needsValue(customDialog:parameterName:isSearchAction:isDeleteAction:)( uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 48) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.needsValue(customDialog:parameterName:isSearchAction:isDeleteAction:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 224LL);
  uint64_t v5 = OUTLINED_FUNCTION_57_5(v4);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_181AE0;
  OUTLINED_FUNCTION_0_18(v5);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_15_9(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
    uint64_t v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  uint64_t v11 = OUTLINED_FUNCTION_31_8();
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_20_16();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  OUTLINED_FUNCTION_36_9();
  OUTLINED_FUNCTION_43_6(v15);
  uint64_t v16 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 64) = v16;
  OUTLINED_FUNCTION_74_2(v16, (uint64_t)RunLinkActionCATsSimple.actionConfirmation(customDialog:verb:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v17 = OUTLINED_FUNCTION_25_13(24LL);
  return OUTLINED_FUNCTION_8_13(v17, v18, v19, v20);
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::NeedsValueDialogIds_optional __swiftcall RunLinkActionCATsSimple.NeedsValueDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.NeedsValueDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

void RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)( Swift::String a1, Swift::OpaquePointer a2)
{
}

uint64_t RunLinkActionCATsSimple.NeedsValueDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_55_6();
  }
  if (a1 == 1) {
    return 0x74706D6F7270LL;
  }
  return 0x6341686372616573LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.NeedsValueDialogIds()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.NeedsValueDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.NeedsValueDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.NeedsValueDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::NeedsValueDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.NeedsValueDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::NeedsValueDialogIds_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.NeedsValueDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.NeedsValueDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  uint64_t *v0 = RunLinkActionCATsSimple.NeedsValueDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunLinkActionCATsSimple.needsValueAsLabels(customDialog:parameterName:isSearchAction:isDeleteAction:)( uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 40) = OUTLINED_FUNCTION_20_10(v5);
  *(void *)(v4 + 48) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.needsValueAsLabels(customDialog:parameterName:isSearchAction:isDeleteAction:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 224LL);
  uint64_t v5 = OUTLINED_FUNCTION_57_5(v4);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_181AE0;
  OUTLINED_FUNCTION_0_18(v5);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_15_9(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
    uint64_t v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  uint64_t v11 = OUTLINED_FUNCTION_31_8();
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_20_16();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  OUTLINED_FUNCTION_36_9();
  OUTLINED_FUNCTION_43_6(v15);
  *(void *)(v1 + 64) = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationAsLabels(customDialog:verb:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v16 = OUTLINED_FUNCTION_24_10(24LL);
  return OUTLINED_FUNCTION_7_12(v16, v17, v18, v19, v20, v21);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.NeedsValueDialogIds,  &type metadata for RunLinkActionCATsSimple.NeedsValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.NeedsValueDialogIds,  &type metadata for RunLinkActionCATsSimple.NeedsValueDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds);
  }

  return result;
}

uint64_t RunLinkActionCATsSimple.parameterConfirmation(customDialog:parameterValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_20_10(v3);
  *(void *)(v2 + 48) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.parameterConfirmation(customDialog:parameterValue:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = OUTLINED_FUNCTION_57_5(v4);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v5);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_15_9(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
    uint64_t v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  uint64_t v11 = OUTLINED_FUNCTION_30_8();
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_20_16();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  char v15 = (void *)OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v1 + 64) = v15;
  OUTLINED_FUNCTION_74_2(v15, (uint64_t)RunLinkActionCATsSimple.actionConfirmationAsLabels(customDialog:verb:));
  OUTLINED_FUNCTION_26_8();
  unint64_t v16 = OUTLINED_FUNCTION_25_13(35LL);
  return OUTLINED_FUNCTION_8_13(v16, v17, v18, v19);
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ParameterConfirmationDialogIds_optional __swiftcall RunLinkActionCATsSimple.ParameterConfirmationDialogIds.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ParameterConfirmationDialogIds.init(rawValue:);
  RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
  return result;
}

void RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)( Swift::String a1, Swift::OpaquePointer a2)
{
}

uint64_t RunLinkActionCATsSimple.ParameterConfirmationDialogIds.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6D6F74737563LL;
  }
  else {
    return 0x6D7269666E6F63LL;
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds( char *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds( uint64_t a1)
{
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ParameterConfirmationDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds@<W0>( Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::ParameterConfirmationDialogIds_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.ParameterConfirmationDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds()
{
  char v1 = OUTLINED_FUNCTION_52_3();
  uint64_t *v0 = RunLinkActionCATsSimple.ParameterConfirmationDialogIds.rawValue.getter(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t RunLinkActionCATsSimple.parameterConfirmationAsLabels(customDialog:parameterValue:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v2 + 40) = OUTLINED_FUNCTION_20_10(v3);
  *(void *)(v2 + 48) = OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t RunLinkActionCATsSimple.parameterConfirmationAsLabels(customDialog:parameterValue:)()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_19(v3, 128LL);
  uint64_t v5 = OUTLINED_FUNCTION_57_5(v4);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E660;
  OUTLINED_FUNCTION_0_18(v5);
  OUTLINED_FUNCTION_12_4(v0, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_61_1();
  uint64_t v8 = OUTLINED_FUNCTION_15_9(v7);
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v8, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
    uint64_t v10 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v10);
  }

  uint64_t v11 = OUTLINED_FUNCTION_30_8();
  OUTLINED_FUNCTION_12_4(v11, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_20_16();
  if (v9)
  {
    OUTLINED_FUNCTION_11_4(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_14_4();
  }

  else
  {
    *(void *)(v2 + 120) = v0;
    uint64_t v14 = OUTLINED_FUNCTION_10_2();
    OUTLINED_FUNCTION_0_7((uint64_t)v14);
  }

  *(void *)(v1 + 64) = OUTLINED_FUNCTION_5_0((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds();
  OUTLINED_FUNCTION_75_2((uint64_t)RunLinkActionCATsSimple.actionConfirmationAsLabels(customDialog:verb:));
  OUTLINED_FUNCTION_45_1();
  unint64_t v15 = OUTLINED_FUNCTION_24_10(35LL);
  return OUTLINED_FUNCTION_7_12(v15, v16, v17, v18, v19, v20);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ParameterConfirmationDialogIds,  &type metadata for RunLinkActionCATsSimple.ParameterConfirmationDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.ParameterConfirmationDialogIds,  &type metadata for RunLinkActionCATsSimple.ParameterConfirmationDialogIds);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.Properties and conformance RunLinkActionCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.Properties and conformance RunLinkActionCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.Properties and conformance RunLinkActionCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RunLinkActionCATsSimple.Properties,  &type metadata for RunLinkActionCATsSimple.Properties);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.Properties and conformance RunLinkActionCATsSimple.Properties);
  }

  return result;
}

uint64_t type metadata accessor for RunLinkActionCATsSimple(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for RunLinkActionCATsSimple;
  if (!type metadata singleton initialization cache for RunLinkActionCATsSimple) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RunLinkActionCATsSimple);
  }
  return result;
}

uint64_t type metadata completion function for RunLinkActionCATsSimple(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + class metadata base offset for RunLinkActionCATsSimple);
}

uint64_t ObjC metadata update function for RunLinkActionCATsSimple()
{
  return type metadata accessor for RunLinkActionCATsSimple(0LL);
}

uint64_t getEnumTagSinglePayload for RunLinkActionCATsSimple.Properties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for RunLinkActionCATsSimple.Properties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_58724 + 4 * byte_1812DE[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_58758 + 4 * byte_1812D9[v4]))();
}

uint64_t sub_58758(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_58760(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x58768LL);
  }
  return result;
}

uint64_t sub_58774(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x5877CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 8;
  return result;
}

uint64_t sub_58780(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_58788(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for RunLinkActionCATsSimple.Properties()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ActionConfirmationDialogIds()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ActionPerformedDialogIds()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ContinueInAppDialogIds()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ErrorDialogDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_58838 + 4 * byte_1812E3[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_58858 + 4 * byte_1812E8[v4]))();
  }
}

_BYTE *sub_58838(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_58858(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_58860(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_58868(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_58870(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_58878(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for RunLinkActionCATsSimple.NeedsDisambiguationDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for RunLinkActionCATsSimple.ActionConfirmationDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_588DC + 4 * byte_1812F2[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_58910 + 4 * byte_1812ED[v4]))();
}

uint64_t sub_58910(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_58918(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x58920LL);
  }
  return result;
}

uint64_t sub_5892C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x58934LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_58938(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_58940(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for RunLinkActionCATsSimple.NeedsValueDialogIds()
{
}

uint64_t storeEnumTagSinglePayload for RunLinkActionCATsSimple.ContinueInAppDialogIds( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_589A4 + 4 * byte_1812FC[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_589D8 + 4 * byte_1812F7[v4]))();
}

uint64_t sub_589D8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_589E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x589E8LL);
  }
  return result;
}

uint64_t sub_589F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x589FCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_58A00(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_58A08(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for RunLinkActionCATsSimple.ParameterConfirmationDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_0_18(uint64_t result)
{
  *(_BYTE *)(result + 45) = 0;
  *(_WORD *)(result + 46) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_4_15()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 48);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 56) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_6_12(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_7_12( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_8_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_12_13()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 64);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
  return swift_task_dealloc(v5);
}

uint64_t OUTLINED_FUNCTION_15_9(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_20_16()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

void *OUTLINED_FUNCTION_21_11()
{
  *(void *)(v2 + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

unint64_t OUTLINED_FUNCTION_24_10(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

unint64_t OUTLINED_FUNCTION_25_13(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

  ;
}

uint64_t OUTLINED_FUNCTION_30_8()
{
  uint64_t result = *(void *)(v0 + 24);
  strcpy((char *)(v1 + 80), "parameterValue");
  *(_BYTE *)(v1 + 95) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_31_8()
{
  uint64_t result = *(void *)(v0 + 24);
  strcpy((char *)(v1 + 80), "parameterName");
  *(_WORD *)(v1 + 94) = -4864;
  return result;
}

uint64_t OUTLINED_FUNCTION_34_8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 56));
}

void OUTLINED_FUNCTION_36_9()
{
  *(_BYTE *)(v0 + 143) = -18;
}

uint64_t OUTLINED_FUNCTION_37_9()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 40));
}

uint64_t OUTLINED_FUNCTION_39_7()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 56);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 64) = v0;
  return swift_task_dealloc(v5);
}

Swift::Int OUTLINED_FUNCTION_40_8(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  return _findStringSwitchCase(cases:string:)(cases, v3);
}

uint64_t OUTLINED_FUNCTION_41_6(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

  ;
}

void OUTLINED_FUNCTION_43_6(char a1@<W8>)
{
  *(_BYTE *)(v4 + 144) = v1;
  *(void *)(v4 + 168) = v2;
  *(void *)(v4 + 176) = 0x6574656C65447369LL;
  *(void *)(v4 + 184) = v3;
  *(void *)(v4 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(_BYTE *)(v4 + 19outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a1;
}

uint64_t OUTLINED_FUNCTION_45_3()
{
  uint64_t result = *(void *)(v0 + 24);
  *(void *)(v1 + 80) = 1651664246LL;
  *(void *)(v1 + 88) = 0xE400000000000000LL;
  return result;
}

uint64_t OUTLINED_FUNCTION_47_9()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_51_7(uint64_t result, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_52_3()
{
  return *v0;
}

void OUTLINED_FUNCTION_53_5()
{
  *(void *)(v0 + 80) = 0x736D657469LL;
  *(void *)(v0 + 88) = 0xE500000000000000LL;
}

uint64_t OUTLINED_FUNCTION_55_6()
{
  return 0x6D6F74737563LL;
}

uint64_t OUTLINED_FUNCTION_57_5(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_61_4(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

void OUTLINED_FUNCTION_63_3(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = v2;
}

uint64_t OUTLINED_FUNCTION_66_2(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, a1);
}

void *OUTLINED_FUNCTION_68_2@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

void OUTLINED_FUNCTION_69_2(uint64_t a1@<X8>)
{
  *uint64_t v1 = v2;
  v1[1] = a1;
}

uint64_t OUTLINED_FUNCTION_70_2(uint64_t result, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v4;
  *(_BYTE *)(v5 + 81) = a4;
  *(_BYTE *)(v5 + 80) = a3;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_71_0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 56));
}

void *OUTLINED_FUNCTION_74_2@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

void OUTLINED_FUNCTION_75_2(uint64_t a1@<X8>)
{
  *uint64_t v1 = v2;
  v1[1] = a1;
}

uint64_t one-time initialization function for usoTaskTransformer(uint64_t a1)
{
  return one-time initialization function for usoTaskTransformer( a1,  &demangling cache variable for type metadata for Transformer<UsoTask, String>,  static Transformer<>.usoTaskTransformer,  (uint64_t (*)(void))&type metadata accessor for UsoTask,  (uint64_t)closure #1 in closure #1 in variable initialization expression of static Transformer<>.usoTaskTransformer);
}

uint64_t closure #1 in closure #1 in variable initialization expression of static Transformer<>.usoTaskTransformer@<X0>( void *a1@<X8>)
{
  void (*v6)(void *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void v17[4];
  uint64_t v18;
  static UsoTask_CodegenConverter.convert(task:)(v17);
  if (!v17[3])
  {
    outlined destroy of Any?((uint64_t)v17);
    goto LABEL_8;
  }

  uint64_t v3 = type metadata accessor for UsoTask_run_common_VoiceCommand(0LL);
  if ((swift_dynamicCast(&v18, v17, (char *)&type metadata for Any + 8, v3, 6LL) & 1) == 0)
  {
LABEL_8:
    uint64_t v8 = type metadata accessor for TransformationError(0LL);
    char v9 = lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError(v8, v9, 0LL, 0LL);
    *uint64_t v10 = 0xD000000000000034LL;
    v10[1] = 0x80000000001940E0LL;
    uint64_t v11 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  enum case for TransformationError.cannotTransform(_:),  v8);
    return swift_willThrow(v11, v12, v13, v14, v15);
  }

  uint64_t v4 = v18;
  if (one-time initialization token for workflowNameTransformer != -1) {
    swift_once( &one-time initialization token for workflowNameTransformer,  one-time initialization function for workflowNameTransformer);
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_run_common_VoiceCommand, String>);
  __swift_project_value_buffer(v5, (uint64_t)static Transformer<>.workflowNameTransformer);
  unsigned int v6 = (void (*)(void *__return_ptr, uint64_t *))Transformer.transform.getter(v5);
  uint64_t v18 = v4;
  v6(v17, &v18);
  swift_release();
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v16 = v17[1];
    *a1 = v17[0];
    a1[1] = v16;
  }

  return result;
}

uint64_t Transformer<>.workflowNameTransformer.unsafeMutableAddressor()
{
  return Transformer<>.workflowNameTransformer.unsafeMutableAddressor( &one-time initialization token for workflowNameTransformer,  &demangling cache variable for type metadata for Transformer<UsoTask_run_common_VoiceCommand, String>,  (uint64_t)static Transformer<>.workflowNameTransformer,  (uint64_t)one-time initialization function for workflowNameTransformer);
}

uint64_t Transformer<>.usoTaskTransformer.unsafeMutableAddressor()
{
  return Transformer<>.workflowNameTransformer.unsafeMutableAddressor( &one-time initialization token for usoTaskTransformer,  &demangling cache variable for type metadata for Transformer<UsoTask, String>,  (uint64_t)static Transformer<>.usoTaskTransformer,  (uint64_t)one-time initialization function for usoTaskTransformer);
}

uint64_t Transformer<>.workflowNameTransformer.unsafeMutableAddressor( void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  return __swift_project_value_buffer(v6, a3);
}

uint64_t static Transformer<>.usoTaskTransformer.getter@<X0>(uint64_t a1@<X8>)
{
  return static Transformer<>.usoTaskTransformer.getter( &one-time initialization token for usoTaskTransformer,  &demangling cache variable for type metadata for Transformer<UsoTask, String>,  (uint64_t)static Transformer<>.usoTaskTransformer,  (uint64_t)one-time initialization function for usoTaskTransformer,  a1);
}

uint64_t one-time initialization function for workflowNameTransformer(uint64_t a1)
{
  return one-time initialization function for usoTaskTransformer( a1,  &demangling cache variable for type metadata for Transformer<UsoTask_run_common_VoiceCommand, String>,  static Transformer<>.workflowNameTransformer,  (uint64_t (*)(void))&type metadata accessor for UsoTask_run_common_VoiceCommand,  (uint64_t)closure #1 in closure #1 in variable initialization expression of static Transformer<>.workflowNameTransformer);
}

uint64_t one-time initialization function for usoTaskTransformer( uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  __swift_allocate_value_buffer(v8, a3);
  __swift_project_value_buffer(v8, (uint64_t)a3);
  uint64_t v9 = a4(0LL);
  return Transformer.init(transform:)(a5, 0LL, v9);
}

uint64_t closure #1 in closure #1 in variable initialization expression of static Transformer<>.workflowNameTransformer@<X0>( uint64_t *a1@<X8>)
{
  if (v20
    && (uint64_t v2 = swift_retain(v20),
        uint64_t v3 = dispatch thunk of UsoEntity_common_VoiceCommand.name.getter(v2),
        uint64_t v5 = v4,
        swift_release(),
        v5))
  {
    uint64_t result = swift_release();
    *a1 = v3;
    a1[1] = v5;
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_0, v9, v10, "Shortcut name could not be retrieved from USOGraph", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    uint64_t v12 = type metadata accessor for TransformationError(0LL);
    unint64_t v13 = lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError(v12, v13, 0LL, 0LL);
    *uint64_t v14 = 0xD000000000000020LL;
    v14[1] = 0x8000000000194120LL;
    uint64_t v15 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  enum case for TransformationError.cannotTransform(_:),  v12);
    swift_willThrow(v15, v16, v17, v18, v19);
    return swift_release();
  }

  return result;
}

uint64_t static Transformer<>.workflowNameTransformer.getter@<X0>(uint64_t a1@<X8>)
{
  return static Transformer<>.usoTaskTransformer.getter( &one-time initialization token for workflowNameTransformer,  &demangling cache variable for type metadata for Transformer<UsoTask_run_common_VoiceCommand, String>,  (uint64_t)static Transformer<>.workflowNameTransformer,  (uint64_t)one-time initialization function for workflowNameTransformer,  a1);
}

uint64_t static Transformer<>.usoTaskTransformer.getter@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = __swift_project_value_buffer(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(a5, v9, v8);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

unint64_t lazy protocol witness table accessor for type TransformationError and conformance TransformationError()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationError and conformance TransformationError;
  if (!lazy protocol witness table cache variable for type TransformationError and conformance TransformationError)
  {
    uint64_t v1 = type metadata accessor for TransformationError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TransformationError, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type TransformationError and conformance TransformationError);
  }

  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg50112_s18SiriLinkFlowPlugin18CATSpeakableStringC034getPropertiesWithWrapperInTemplateF008templateF0SaySSGSS_tFZSSSo20deF6CXEfU_So8NSStringCTf1cn_nTm( uint64_t a1, void *a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v5)
  {
    while (1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v5 < 0) {
        break;
      }
      uint64_t v17 = v3;
      uint64_t v6 = 0LL;
      while (v5 != v6)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
        }
        else {
          id v7 = *(id *)(a1 + 8 * v6 + 32);
        }
        uint64_t v8 = v7;
        id v9 = objc_msgSend(v7, "range", v17);
        id v11 = objc_msgSend(a2, "substringWithRange:", v9, v10);
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        unint64_t v3 = _swiftEmptyArrayStorage[2];
        if (v3 >= _swiftEmptyArrayStorage[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v6;
        _swiftEmptyArrayStorage[2] = v3 + 1;
        uint64_t v15 = &_swiftEmptyArrayStorage[2 * v3];
        v15[4] = v12;
        v15[5] = v14;
        if (v5 == v6) {
          goto LABEL_12;
        }
      }

      __break(1u);
LABEL_14:
      if (a1 < 0) {
        uint64_t v16 = a1;
      }
      else {
        uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease(a1);
      if (!v5) {
        goto LABEL_12;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_12:
  }

Swift::String_optional __swiftcall DialogExecutionResult.firstDialogFullPrint()()
{
  id v2 = [v0 dialog];
  type metadata accessor for LNAutoShortcut( 0LL,  (unint64_t *)&lazy cache variable for type metadata for DialogElement,  &OBJC_CLASS___DialogElement_ptr);
  unint64_t v4 = OUTLINED_FUNCTION_12_14(v3);

  if (v4 >> 62)
  {
    OUTLINED_FUNCTION_80();
    uint64_t v10 = OUTLINED_FUNCTION_23_11();
    uint64_t v5 = OUTLINED_FUNCTION_14();
    if (v10) {
      goto LABEL_3;
    }
LABEL_8:
    OUTLINED_FUNCTION_14();
    goto LABEL_9;
  }

LABEL_3:
  if ((v4 & 0xC000000000000001LL) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v4);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      goto LABEL_12;
    }

    id v7 = *(id *)(v4 + 32);
  }

  uint64_t v8 = v7;
  OUTLINED_FUNCTION_14();
  id v9 = [v8 fullPrint];
  OUTLINED_FUNCTION_35_10();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_9:
  uint64_t v5 = OUTLINED_FUNCTION_45();
LABEL_12:
  result.value._object = v6;
  result.value._uint64_t countAndFlagsBits = v5;
  return result;
}

  OUTLINED_FUNCTION_25_17();
  return &dword_4;
}

  id v2 = 0;
LABEL_9:
  uint64_t v8 = v0[33];
  id v9 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v0[34] + 56LL) + 328LL));
  v0[55] = v9;
  *id v9 = v0;
  v9[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:);
  return v11(v0[44], v0[31], v0[32], v8, v2 & 1);
}

  OUTLINED_FUNCTION_128_2(v5, (v4 & 0xC000000000000001LL) == 0);
  if ((v4 & 0xC000000000000001LL) != 0) {
    uint64_t v6 = OUTLINED_FUNCTION_83_3();
  }
  else {
    uint64_t v6 = (uint64_t)OUTLINED_FUNCTION_193_0();
  }
  id v7 = (void *)v6;
  uint64_t v8 = OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_72( v8,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  Class isa = OUTLINED_FUNCTION_106_5().super.super.isa;
  [v7 setSpokenOnly:isa];
  outlined release of ActionConfirmationVisual((void *)(v0 + 16));

LABEL_11:
  uint64_t v12 = (uint64_t (*)(void))OUTLINED_FUNCTION_72_11(*(void *)(v0 + 240), *(__n128 *)(v0 + 216));
  return OUTLINED_FUNCTION_22_2(v12);
}

  id v2 = 0;
LABEL_9:
  id v7 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v0[8] + 104LL) + 184LL));
  v0[21] = v7;
  *id v7 = v0;
  v7[1] = WFConfirmInteractionFlow.buildOutput_prerfv2();
  return v9(v0[15], v0[16], v2 & 1);
}

uint64_t static CATSpeakableString.getPropertiesWithWrapperInTemplateString(templateString:)()
{
  uint64_t v3 = v1 - v2;
  uint64_t v5 = __chkstk_darwin(v4);
  id v7 = (char *)&v68 - v6;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_60_3();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v68 - v9;
  uint64_t v11 = OUTLINED_FUNCTION_48();
  uint64_t v71 = *(void *)(v11 - 8);
  uint64_t v72 = v11;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_31_9();
  uint64_t v15 = v13 - v14;
  __chkstk_darwin(v16);
  uint64_t v68 = (char *)&v68 - v17;
  NSString v18 = OUTLINED_FUNCTION_17_12();
  id v19 = objc_allocWithZone(&OBJC_CLASS___NSRegularExpression);
  id v20 = @nonobjc NSRegularExpression.init(pattern:options:)(0xD00000000000001DLL, 0x8000000000194150LL, 0LL);
  uint64_t v69 = v10;
  if (v20)
  {
    NSString v21 = OUTLINED_FUNCTION_17_12();
    [v18 length];
    id v22 = OUTLINED_FUNCTION_53_6(v20, "matchesInString:options:range:", (uint64_t)v21);

    type metadata accessor for LNAutoShortcut( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSTextCheckingResult,  &OBJC_CLASS___NSTextCheckingResult_ptr);
    uint64_t v24 = v23;
    uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

    id v26 = v18;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg50112_s18SiriLinkFlowPlugin18CATSpeakableStringC034getPropertiesWithWrapperInTemplateF008templateF0SaySSGSS_tFZSSSo20deF6CXEfU_So8NSStringCTf1cn_nTm( v25,  v26);
    uint64_t v28 = v27;
    OUTLINED_FUNCTION_1_2();
    id v29 = objc_allocWithZone(&OBJC_CLASS___NSRegularExpression);
    id v30 = @nonobjc NSRegularExpression.init(pattern:options:)(0xD00000000000001CLL, 0x80000000001941D0LL, 0LL);
    if (v30)
    {
      NSString v31 = OUTLINED_FUNCTION_17_12();
      [v26 length];
      id v32 = OUTLINED_FUNCTION_53_6(v30, "matchesInString:options:range:", (uint64_t)v31);

      uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v24);
      id v34 = v26;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg50112_s18SiriLinkFlowPlugin18CATSpeakableStringC034getPropertiesWithWrapperInTemplateF008templateF0SaySSGSS_tFZSSSo20deF6CXEfU_So8NSStringCTf1cn_nTm( v33,  v34);
      swift_bridgeObjectRelease(v33);
      v74[0] = v28;
      OUTLINED_FUNCTION_80();
      specialized Array.append<A>(contentsOf:)();

      OUTLINED_FUNCTION_14();
      return v74[0];
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v40 = v72;
    uint64_t v41 = __swift_project_value_buffer(v72, (uint64_t)static Logger.voiceCommands);
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
    uint64_t v43 = v68;
    v42(v68, v41, v40);
    uint64_t v44 = (uint64_t)v69;
    v42(v69, (uint64_t)v43, v40);
    __swift_storeEnumTagSinglePayload(v44, 0LL, 1LL, v40);
    uint64_t v45 = v70;
    outlined init with copy of Logger?(v44, v70);
    uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v45, 1LL, v40);
    if ((_DWORD)EnumTagSinglePayload == 1)
    {
      outlined destroy of URL?(v70, &demangling cache variable for type metadata for Logger?);
    }

    else
    {
      uint64_t v58 = (void *)Logger.logObject.getter(EnumTagSinglePayload);
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_31_0(v59))
      {
        uint64_t v60 = OUTLINED_FUNCTION_38(32LL);
        uint64_t v61 = OUTLINED_FUNCTION_38(64LL);
        v74[0] = v61;
        *(_DWORD *)uint64_t v60 = 136315650;
        uint64_t v62 = OUTLINED_FUNCTION_61_5((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/CATS"
                                              "peakableString.swift");
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v74);
        OUTLINED_FUNCTION_29_9();
        OUTLINED_FUNCTION_2_6();
        OUTLINED_FUNCTION_59_2();
        uint64_t v73 = 122LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v64);
        *(_WORD *)(v60 + 2outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
        uint64_t v73 = OUTLINED_FUNCTION_6_13();
        OUTLINED_FUNCTION_29_9();
        OUTLINED_FUNCTION_18_12(&dword_0, v65, v66, "FatalError at %s:%lu - %s");
        OUTLINED_FUNCTION_23_9(v61, v67, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v61);
        OUTLINED_FUNCTION_1_0(v60);
      }

      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
    }
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v36 = v72;
    uint64_t v37 = __swift_project_value_buffer(v72, (uint64_t)static Logger.voiceCommands);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16);
    v38(v15, v37, v36);
    v38((uint64_t)v7, v15, v36);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0LL, 1LL, v36);
    outlined init with copy of Logger?((uint64_t)v7, v3);
    uint64_t v39 = __swift_getEnumTagSinglePayload(v3, 1LL, v36);
    if ((_DWORD)v39 == 1)
    {
      outlined destroy of URL?(v3, &demangling cache variable for type metadata for Logger?);
    }

    else
    {
      uint64_t v47 = (void *)Logger.logObject.getter(v39);
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_31_0(v48))
      {
        uint64_t v49 = OUTLINED_FUNCTION_38(32LL);
        uint64_t v50 = OUTLINED_FUNCTION_38(64LL);
        v74[0] = v50;
        *(_DWORD *)uint64_t v49 = 136315650;
        uint64_t v51 = OUTLINED_FUNCTION_61_5((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/CATS"
                                              "peakableString.swift");
        unint64_t v53 = v52;
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v74);
        OUTLINED_FUNCTION_30_9();
        swift_bridgeObjectRelease(v53);
        OUTLINED_FUNCTION_59_2();
        uint64_t v73 = 115LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v54);
        *(_WORD *)(v49 + 2outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
        uint64_t v73 = OUTLINED_FUNCTION_6_13();
        OUTLINED_FUNCTION_30_9();
        OUTLINED_FUNCTION_18_12(&dword_0, v55, v56, "FatalError at %s:%lu - %s");
        OUTLINED_FUNCTION_23_9(v50, v57, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v50);
        OUTLINED_FUNCTION_1_0(v49);
      }

      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v3, v72);
    }
  }

  OUTLINED_FUNCTION_9_11();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x7265206C61746166LL,  0xEB00000000726F72LL,  "/Library/Caches/com.apple.xbs/Sources/SiriLinkFlow/SiriLinkFlowPlugin/CATSpeakableString.swift",  94LL,  2LL);
  __break(1u);
  return result;
}

uint64_t static CATSpeakableString.applyPronunciationHints(template:variablesWithWrapper:intent:intentResponse:tokens:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a3 + 16);
  if (!v8)
  {
    OUTLINED_FUNCTION_5_14();
    return a1;
  }

  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_80();
  for (unint64_t i = (uint64_t *)(a3 + 40); ; i += 2)
  {
    uint64_t v11 = (void *)*(i - 1);
    uint64_t v12 = *i;
    swift_bridgeObjectRetain(*i);
    uint64_t v13 = static CATSpeakableString.unwrapProperty(propertyName:)((uint64_t)v11, v12);
    static CATSpeakableString.resolveVariable(variable:intent:intentResponse:tokens:)(v13, v14, a4, a5, a6, &v53);
    OUTLINED_FUNCTION_22();
    if (!v54)
    {
      OUTLINED_FUNCTION_37();
      OUTLINED_FUNCTION_56_1();
      outlined destroy of URL?((uint64_t)&v53, &demangling cache variable for type metadata for Any?);
      uint64_t v43 = a3;
      goto LABEL_17;
    }

    type metadata accessor for LNAutoShortcut( 0LL,  (unint64_t *)&lazy cache variable for type metadata for INObject,  &OBJC_CLASS___INObject_ptr);
    uint64_t v16 = v51;
    uint64_t v17 = outlined bridged method (pb) of @objc INObject.pronunciationHint.getter(v51);
    if (!v18) {
      goto LABEL_11;
    }
    uint64_t v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000LL) == 0) {
      uint64_t v19 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (!v19)
    {
      OUTLINED_FUNCTION_2_6();
LABEL_11:
      *(void *)&__int128 v53 = a1;
      *((void *)&v53 + 1) = a2;
      uint64_t v51 = v11;
      uint64_t v52 = v12;
      id v31 = [v16 displayString];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      unint64_t v34 = lazy protocol witness table accessor for type String and conformance String();
      a1 = OUTLINED_FUNCTION_4_16(v34, v35, v36, v37, v38, v39, v40, v41, v45, v46, v47);
      uint64_t v29 = v42;
      OUTLINED_FUNCTION_56_1();
      OUTLINED_FUNCTION_37();
      uint64_t v30 = v33;
      goto LABEL_12;
    }

    *(void *)&__int128 v53 = a1;
    *((void *)&v53 + 1) = a2;
    uint64_t v51 = v11;
    uint64_t v52 = v12;
    unint64_t v20 = lazy protocol witness table accessor for type String and conformance String();
    a1 = OUTLINED_FUNCTION_4_16(v20, v21, v22, v23, v24, v25, v26, v27, v45, v46, v47);
    uint64_t v29 = v28;
    OUTLINED_FUNCTION_56_1();
    OUTLINED_FUNCTION_2_6();
    uint64_t v30 = a2;
LABEL_12:
    swift_bridgeObjectRelease(v30);

    a2 = v29;
    if (!--v8)
    {
      swift_bridgeObjectRelease(a3);
      return a1;
    }
  }

  swift_bridgeObjectRelease(a3);
  OUTLINED_FUNCTION_37();
  uint64_t v43 = v12;
LABEL_17:
  swift_bridgeObjectRelease(v43);
  return 0LL;
}

uint64_t CATSpeakableString.__allocating_init(_:speak:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, 48LL, 7LL);
  CATSpeakableString.init(_:speak:)(a1, a2, a3, a4);
  return v9;
}

void *static CATSpeakableString.getPropertiesInTemplateString(templateString:)()
{
  uint64_t v0 = static CATSpeakableString.getPropertiesWithWrapperInTemplateString(templateString:)();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = (uint64_t *)(v0 + 40);
    do
    {
      uint64_t v3 = *(v2 - 1);
      uint64_t v4 = *v2;
      OUTLINED_FUNCTION_54_7();
      uint64_t v5 = static CATSpeakableString.unwrapProperty(propertyName:)(v3, v4);
      uint64_t v7 = v6;
      OUTLINED_FUNCTION_2_6();
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      if (v8 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v2 += 2;
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v5;
      v9[5] = v7;
      --v1;
    }

    while (v1);
  }

  OUTLINED_FUNCTION_14();
  return _swiftEmptyArrayStorage;
}

uint64_t static CATSpeakableString.unwrapProperty(propertyName:)(uint64_t a1, uint64_t a2)
{
  void v5[2] = a1;
  v5[3] = a2;
  v5[0] = 0x5C245C7C40232528LL;
  v5[1] = 0xEF297D5C7C407C7BLL;
  v4[0] = 0LL;
  v4[1] = 0xE000000000000000LL;
  unint64_t v3 = lazy protocol witness table accessor for type String and conformance String();
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v5,  v4,  1024LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v3);
}

void specialized Array.append<A>(contentsOf:)()
{
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!OUTLINED_FUNCTION_56_6() || v4 > *(void *)(v2 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v6;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  if ((*(void *)(v2 + 24) >> 1) - *(void *)(v2 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  specialized UnsafeMutablePointer.initialize(from:count:)();
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_14();
    *uint64_t v1 = v2;
    OUTLINED_FUNCTION_38_0();
    return;
  }

  uint64_t v7 = *(void *)(v2 + 16);
  BOOL v5 = __OFADD__(v7, v3);
  uint64_t v8 = v7 + v3;
  if (!v5)
  {
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
    goto LABEL_11;
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  OUTLINED_FUNCTION_40_9();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v7 = OUTLINED_FUNCTION_56_6();
  if (!(_DWORD)v7 || v5 > *(void *)(v2 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v8, 1LL, v2);
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

  uint64_t v9 = *(void *)(v2 + 16);
  uint64_t v10 = (*(void *)(v2 + 24) >> 1) - v9;
  uint64_t v11 = type metadata accessor for DisplayHint(0LL);
  if (v10 < v3)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  specialized UnsafeMutablePointer.initialize(from:count:)(v0 + v13, v3, v2 + v13 + *(void *)(v12 + 72) * v9);
  if (!v3)
  {
LABEL_14:
    OUTLINED_FUNCTION_14();
    *uint64_t v1 = v2;
    OUTLINED_FUNCTION_38_0();
    return;
  }

  uint64_t v14 = *(void *)(v2 + 16);
  uint64_t v6 = __OFADD__(v14, v3);
  uint64_t v15 = v14 + v3;
  if (!v6)
  {
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
    goto LABEL_14;
  }

void specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *v1;
  uint64_t v8 = *(void *)(*v1 + 16LL);
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || (uint64_t v11 = *(void *)(v7 + 24) >> 1, v11 < v9))
  {
    OUTLINED_FUNCTION_51_8();
    uint64_t v7 = v12;
    uint64_t v11 = *(void *)(v12 + 24) >> 1;
  }

  uint64_t v13 = *(void *)(v7 + 16);
  uint64_t v14 = v11 - v13;
  specialized Sequence._copySequenceContents(initializing:)(v41, (void *)(v7 + 16 * v13 + 32), v11 - v13, a1);
  if (v15 < v6) {
    goto LABEL_13;
  }
  if (v15)
  {
    uint64_t v17 = *(void *)(v7 + 16);
    BOOL v18 = __OFADD__(v17, v15);
    uint64_t v19 = v17 + v15;
    if (v18)
    {
      __break(1u);
      goto LABEL_48;
    }

    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
  }

  if (v15 != v14)
  {
    uint64_t v20 = v41[0];
LABEL_11:
    outlined consume of [String : DMFPolicy].Iterator._Variant(v20);
    *uint64_t v1 = v7;
    return;
  }

{
  specialized Array.append<A>(contentsOf:)( a1,  (unint64_t *)specialized UnsafeMutablePointer.initialize(from:count:),  &lazy protocol witness table cache variable for type [SABaseCommand] and conformance [A],  &demangling cache variable for type metadata for [SABaseCommand],  (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v20 = a1;
    }
    else {
      uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_80();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v20);
    OUTLINED_FUNCTION_14();
  }

  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0) {
      uint64_t v21 = *v1;
    }
    else {
      uint64_t v21 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_9_9();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v21);
    OUTLINED_FUNCTION_22();
  }

  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    OUTLINED_FUNCTION_9_9();
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_16:
    uint64_t v10 = OUTLINED_FUNCTION_34_9(v8);
    uint64_t v12 = specialized Array._copyContents(initializing:)(v10, v11, a1);
    if (v13 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v22 = v4;
    }
    else {
      uint64_t v22 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_9_9();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v22);
    OUTLINED_FUNCTION_22();
  }

  if (v13 < 1) {
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_62_5();
  if (!v16)
  {
    *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
LABEL_20:
    uint64_t v17 = swift_bridgeObjectRelease(v12);
    specialized Array._endMutation()(v17, v18, v19);
    return;
  }

  __break(1u);
}

{
  specialized Array.append<A>(contentsOf:)( a1,  (unint64_t *)specialized UnsafeMutablePointer.initialize(from:count:),  &lazy protocol witness table cache variable for type [SFCardSection] and conformance [A],  &demangling cache variable for type metadata for [SFCardSection],  (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

LABEL_14:
  uint64_t v3 = *(void *)(v7 + 16);
  uint64_t v6 = v41[0];
  uint64_t v40 = v41[1];
  uint64_t v16 = v42;
  uint64_t v9 = v43;
  if (v44)
  {
    uint64_t v5 = (v44 - 1) & v44;
    int64_t v39 = (unint64_t)(v42 + 64) >> 6;
    goto LABEL_16;
  }

  OUTLINED_FUNCTION_50_3();
  OUTLINED_FUNCTION_24_0();
}

  uint64_t v9 = (uint64_t)OUTLINED_FUNCTION_51_12();
  if (!v9) {
    goto LABEL_61;
  }
  outlined bridged method (ob) of @objc INPreferences._cachedSiriLanguageCode.getter( (void *)v9,  (SEL *)&selRef_bundleId);
  if (v13)
  {
    if (v12 == 0xD000000000000026LL && v13 == 0x80000000001947C0LL)
    {
      OUTLINED_FUNCTION_14();
      goto LABEL_27;
    }

    uint64_t v14 = OUTLINED_FUNCTION_167(v12, v13, 0xD000000000000026LL, 0x80000000001947C0LL);
    OUTLINED_FUNCTION_14();
    if ((v14 & 1) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v9 = (uint64_t)OUTLINED_FUNCTION_51_12();
  if (!v9) {
    goto LABEL_62;
  }
  outlined bridged method (ob) of @objc INPreferences._cachedSiriLanguageCode.getter( (void *)v9,  (SEL *)&selRef_bundleId);
  if (!v10)
  {
LABEL_63:
    __break(1u);
    goto _$sSo9SAAppInfoC18SiriLinkFlowPluginE14getAppLanguageSSSgyF;
  }

  uint64_t v15 = v9;
  uint64_t v16 = (uint64_t)v10;
  OUTLINED_FUNCTION_72(v9, &lazy cache variable for type metadata for NSBundle, &OBJC_CLASS___NSBundle_ptr);
  uint64_t v17 = @nonobjc NSBundle.__allocating_init(identifier:)(v15, v16);
  if (v17)
  {
    BOOL v18 = v17;
    if ([v17 developmentLocalization])
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_61_8();
    }
  }

          *(void *)(v19 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v20;
          break;
        default:
          return result;
      }
    }

    else
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v12 = OUTLINED_FUNCTION_23_4(v11);
      *(void *)&uint64_t result = 1LL;
      *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E650;
      *(void *)(v12 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v7;
    }
  }

  return result;
}

LABEL_48:
  int64_t v33 = v9 + 1;
  if (__OFADD__(v9, 1LL)) {
    goto LABEL_70;
  }
  int64_t v39 = (unint64_t)(v16 + 64) >> 6;
  if (v33 >= v39)
  {
    uint64_t v20 = v6;
    goto LABEL_11;
  }

  if (*(void *)(v40 + 8 * v33)) {
    goto LABEL_51;
  }
  OUTLINED_FUNCTION_25_8();
  if (v25 == v18)
  {
LABEL_46:
    uint64_t v20 = v6;
    goto LABEL_11;
  }

  OUTLINED_FUNCTION_24_4();
  if (!v34)
  {
    OUTLINED_FUNCTION_25_8();
    if (v25 == v18) {
      goto LABEL_46;
    }
    OUTLINED_FUNCTION_24_4();
    if (!v35)
    {
      OUTLINED_FUNCTION_25_8();
      if (v25 == v18) {
        goto LABEL_46;
      }
      OUTLINED_FUNCTION_24_4();
      if (!v36)
      {
        OUTLINED_FUNCTION_45_4();
        if (v25 == v18) {
          goto LABEL_46;
        }
        if (!*(void *)(v40 + 8 * v37))
        {
          do
          {
            OUTLINED_FUNCTION_45_4();
            if (v25 == v18) {
              goto LABEL_46;
            }
          }

          while (!*(void *)(v40 + 8 * v38));
        }
      }
    }
  }

LABEL_51:
  OUTLINED_FUNCTION_14_13();
LABEL_16:
  uint64_t v21 = OUTLINED_FUNCTION_55_7();
  swift_bridgeObjectRetain(v21);
  while (1)
  {
    uint64_t v22 = *(void *)(v7 + 24) >> 1;
    if (v22 < v3 + 1)
    {
      OUTLINED_FUNCTION_51_8();
      uint64_t v7 = v32;
      uint64_t v22 = *(void *)(v32 + 24) >> 1;
    }

    if (v3 < v22) {
      break;
    }
LABEL_44:
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  }

  while (1)
  {
    uint64_t v23 = (void *)(v7 + 32 + 16 * v3);
    *uint64_t v23 = v4;
    v23[1] = v2;
    ++v3;
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_41;
    }

    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    if (v24 >= v39) {
      goto LABEL_45;
    }
    if (!*(void *)(v40 + 8 * v24))
    {
      OUTLINED_FUNCTION_25_8();
      if (v25 == v18) {
        goto LABEL_45;
      }
      OUTLINED_FUNCTION_24_4();
      if (!v26)
      {
        OUTLINED_FUNCTION_25_8();
        if (v25 == v18) {
          goto LABEL_45;
        }
        OUTLINED_FUNCTION_24_4();
        if (!v27)
        {
          OUTLINED_FUNCTION_25_8();
          if (v25 == v18) {
            goto LABEL_45;
          }
          OUTLINED_FUNCTION_24_4();
          if (!v28)
          {
            OUTLINED_FUNCTION_45_4();
            if (v25 == v18) {
              goto LABEL_45;
            }
            if (!*(void *)(v40 + 8 * v29))
            {
              while (1)
              {
                OUTLINED_FUNCTION_45_4();
                if (v25 == v18) {
                  break;
                }
                if (*(void *)(v40 + 8 * v30)) {
                  goto LABEL_40;
                }
              }

void specialized Array.append<A>(contentsOf:)( uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v28 = a1;
    }
    else {
      uint64_t v28 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_54_7();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v28);
    OUTLINED_FUNCTION_2_6();
  }

  else
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v12 = *v5;
  if ((unint64_t)*v5 >> 62)
  {
    if (v12 < 0) {
      uint64_t v29 = *v5;
    }
    else {
      uint64_t v29 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_28_8();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v29);
    OUTLINED_FUNCTION_28_4();
  }

  else
  {
    uint64_t v13 = *(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v14 = v13 + v11;
  if (__OFADD__(v13, v11))
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v12 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *uint64_t v5 = v12;
  uint64_t v13 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000LL) == 0
    && (v12 & 0x4000000000000000LL) == 0)
  {
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v13 = 1LL;
  }

  uint64_t v31 = v11;
  uint64_t v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  uint64_t v17 = *(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    if (v17 <= v14) {
      uint64_t v17 = v14;
    }
    OUTLINED_FUNCTION_28_8();
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v13,  v17,  1LL,  v12);
    swift_bridgeObjectRelease(*v5);
    *uint64_t v5 = v12;
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8LL;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    uint64_t v11 = v31;
LABEL_16:
    uint64_t v18 = OUTLINED_FUNCTION_34_9(v16);
    uint64_t v20 = specialized Array._copyContents(initializing:)( v18,  v19,  a1,  (void (*)(uint64_t, void, uint64_t))a2,  a3,  a4,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))a5);
    if (v21 >= v11) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v12 < 0) {
      uint64_t v30 = v12;
    }
    else {
      uint64_t v30 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_28_8();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v30);
    OUTLINED_FUNCTION_28_4();
  }

  if (v21 < 1) {
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_62_5();
  if (!v24)
  {
    *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v23;
LABEL_20:
    uint64_t v25 = swift_bridgeObjectRelease(v20);
    specialized Array._endMutation()(v25, v26, v27);
    return;
  }

  __break(1u);
}

uint64_t TemplatingResult.init(dialogId:print:speak:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingText?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_35();
  uint64_t v57 = v10 - v9;
  uint64_t v11 = type metadata accessor for TemplatingSection(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v63 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v62 = (char *)&v46 - v15;
  uint64_t v16 = type metadata accessor for TemplatingText(0LL);
  uint64_t v60 = *(void *)(v16 - 8);
  uint64_t v61 = v16;
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_60_3();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t v21 = OUTLINED_FUNCTION_41_7();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_31_9();
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v46 - v24;
  uint64_t v55 = *(void *)(a3 + 16);
  uint64_t v50 = v26;
  if (v55)
  {
    uint64_t v46 = (char *)&v46 - v24;
    uint64_t v47 = v22;
    uint64_t v48 = v21;
    uint64_t v49 = a5;
    type metadata accessor for CATSpeakableString();
    uint64_t v27 = 0LL;
    unint64_t v28 = 0LL;
    uint64_t v51 = a4;
    unint64_t v54 = *(void *)(a4 + 16);
    uint64_t v29 = _swiftEmptyArrayStorage;
    uint64_t v52 = a3;
    uint64_t v53 = v11;
    while (1)
    {
      OUTLINED_FUNCTION_54_7();
      uint64_t v30 = static CATSpeakableString.stripTTSHint(print:)();
      uint64_t v32 = v31;
      uint64_t result = OUTLINED_FUNCTION_2_6();
      if (v28 >= v54)
      {
        uint64_t v34 = 0LL;
        uint64_t v36 = 0LL;
      }

      else
      {
        if (v28 >= *(void *)(v51 + 16))
        {
          __break(1u);
          return result;
        }

        OUTLINED_FUNCTION_5_14();
        uint64_t v34 = static CATSpeakableString.applyTTSHint(speak:)();
        uint64_t v36 = v35;
        OUTLINED_FUNCTION_37();
      }

      TemplatingText.init(text:speakableTextOverride:)(v30, v32, v34, v36);
      uint64_t v37 = v61;
      uint64_t v38 = v56;
      (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v56, v20, v61);
      uint64_t v39 = v57;
      __swift_storeEnumTagSinglePayload(v57, 1LL, 1LL, v37);
      uint64_t v40 = v59;
      OUTLINED_FUNCTION_80();
      uint64_t v41 = v62;
      TemplatingSection.init(id:content:caption:spokenOnly:)(v58, v40, v38, v39, 0LL);
      uint64_t v42 = v53;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v63, v41, v53);
      if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0) {
        uint64_t v29 = (void *)OUTLINED_FUNCTION_52_4(0LL, v29[2] + 1LL);
      }
      unint64_t v44 = v29[2];
      unint64_t v43 = v29[3];
      if (v44 >= v43 >> 1) {
        uint64_t v29 = (void *)OUTLINED_FUNCTION_52_4(v43 > 1, v44 + 1);
      }
      ++v28;
      v29[2] = v44 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))( (unint64_t)v29 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + *(void *)(v12 + 72) * v44,
        v63,
        v42);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v62, v42);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v20, v61);
      v27 += 16LL;
      if (v55 == v28)
      {
        OUTLINED_FUNCTION_1_2();
        swift_bridgeObjectRelease(v51);
        uint64_t v21 = v48;
        uint64_t v25 = v46;
        uint64_t v22 = v47;
        goto LABEL_14;
      }
    }
  }

  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_37();
  uint64_t v29 = _swiftEmptyArrayStorage;
LABEL_14:
  uint64_t v45 = v50;
  (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))( v50,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v21);
  static TemplatingResult.getBehaviorAfterSpeaking(behavior:)((uint64_t)v25);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v45, v21);
  return TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)(v58, v59, v29, v25);
}

void *CATSpeakableString.init(_:speak:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v9 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v10 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  uint64_t v13 = &unk_17E000;
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t type = v12;
    uint64_t v14 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v38 = OUTLINED_FUNCTION_38(64LL);
    uint64_t v42 = v38;
    *(_DWORD *)uint64_t v14 = 136315394;
    OUTLINED_FUNCTION_5_14();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v14 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v14 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
    if (a4) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = 0x7974706D65LL;
    }
    if (a4) {
      unint64_t v16 = a4;
    }
    else {
      unint64_t v16 = 0xE500000000000000LL;
    }
    swift_bridgeObjectRetain(a4);
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v42);
    uint64_t v13 = (void *)&unk_17E000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v14 + 14);
    OUTLINED_FUNCTION_19_1(a4);
    swift_bridgeObjectRelease(v16);
    _os_log_impl(&dword_0, v11, type, "CATSpeakableString print: %s, speak: %s", (uint8_t *)v14, 0x16u);
    OUTLINED_FUNCTION_23_9(v38, v17, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v38);
    OUTLINED_FUNCTION_1_0(v14);
  }

  else
  {

    OUTLINED_FUNCTION_19_1(a4);
    OUTLINED_FUNCTION_19_1(a2);
  }

  type metadata accessor for CATSpeakableString();
  void v4[2] = static CATSpeakableString.stripTTSHint(print:)();
  void v4[3] = v18;
  if (a4) {
    OUTLINED_FUNCTION_37();
  }
  uint64_t v19 = static CATSpeakableString.applyTTSHint(speak:)();
  uint64_t v21 = v20;
  OUTLINED_FUNCTION_37();
  v4[4] = v19;
  v4[5] = v21;
  uint64_t v22 = swift_retain_n(v4, 2LL);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = OUTLINED_FUNCTION_38(22LL);
    uint64_t v26 = OUTLINED_FUNCTION_38(64LL);
    uint64_t v42 = v26;
    *(_DWORD *)uint64_t v25 = v13[261];
    uint64_t v27 = v5[2];
    unint64_t v28 = v5[3];
    OUTLINED_FUNCTION_28_8();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v42);
    OUTLINED_FUNCTION_37_10();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v30, v25 + 4);
    OUTLINED_FUNCTION_28_4();
    *(_WORD *)(v25 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
    uint64_t v31 = v5[5];
    if (v31)
    {
      uint64_t v32 = v5[4];
      unint64_t v33 = v5[5];
    }

    else
    {
      uint64_t v32 = 0x7974706D65LL;
      unint64_t v33 = 0xE500000000000000LL;
    }

    swift_bridgeObjectRetain(v31);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v42);
    OUTLINED_FUNCTION_37_10();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v35, v25 + 14);
    OUTLINED_FUNCTION_36_10();
    OUTLINED_FUNCTION_2_6();
    _os_log_impl(&dword_0, v23, v24, "CATSpeakableString new print: %s, new speak: %s", (uint8_t *)v25, 0x16u);
    OUTLINED_FUNCTION_23_9(v26, v36, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v26);
    OUTLINED_FUNCTION_1_0(v25);
  }

  else
  {

    OUTLINED_FUNCTION_36_10();
  }

  return v5;
}

uint64_t static CATSpeakableString.stripTTSHint(print:)()
{
  NSString v1 = OUTLINED_FUNCTION_19_8();
  id v2 = OUTLINED_FUNCTION_48_7((uint64_t)v1, "parseAnnotatedString:");

  id v3 = [v2 components];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WFTTSStringComponent);
  OUTLINED_FUNCTION_12_14(v4);
  OUTLINED_FUNCTION_35_10();
  if (v0 >> 62)
  {
    OUTLINED_FUNCTION_3_18();
    uint64_t v21 = _bridgeCocoaArray<A>(_:)(v3, (char *)&type metadata for Swift.AnyObject + 8);
    uint64_t result = OUTLINED_FUNCTION_19_1(v0);
    unint64_t v0 = v21;
  }

  else
  {
    uint64_t v5 = v0 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v6 = OUTLINED_FUNCTION_5_14();
    uint64_t v7 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v6);
    if (swift_dynamicCastMetatype(v7, (char *)&type metadata for Swift.AnyObject + 8)
      || (uint64_t v19 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8LL))) == 0)
    {
LABEL_3:
      uint64_t result = OUTLINED_FUNCTION_37();
    }

    else
    {
      uint64_t v20 = (void *)(v5 + 32);
      while (*v20)
      {
        ++v20;
        if (!--v19) {
          goto LABEL_3;
        }
      }

      uint64_t result = OUTLINED_FUNCTION_37();
      unint64_t v0 = v5 | 1;
    }
  }

  uint64_t v25 = 0LL;
  unint64_t v26 = 0xE000000000000000LL;
  if (!(v0 >> 62))
  {
    uint64_t v9 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFF8LL));
    if (v9) {
      goto LABEL_6;
    }
LABEL_26:

    OUTLINED_FUNCTION_37();
    return 0LL;
  }

  OUTLINED_FUNCTION_3_18();
  uint64_t v9 = OUTLINED_FUNCTION_23_11();
  uint64_t result = OUTLINED_FUNCTION_37();
  if (!v9) {
    goto LABEL_26;
  }
LABEL_6:
  if (v9 < 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v22 = v2;
    for (uint64_t i = 0LL; i != v9; ++i)
    {
      if ((v0 & 0xC000000000000001LL) != 0)
      {
        uint64_t v11 = OUTLINED_FUNCTION_50_10();
      }

      else
      {
        uint64_t v11 = *(void *)(v0 + 8 * i + 32);
        OUTLINED_FUNCTION_58_6();
      }

      uint64_t v24 = v11;
      OUTLINED_FUNCTION_58_6();
      if (OUTLINED_FUNCTION_35_6( (uint64_t)&v23,  (uint64_t)&v24,  (uint64_t)&type metadata for Swift.AnyObject + 8,  (uint64_t)&type metadata for String))
      {
        String.append(_:)(v23);
        OUTLINED_FUNCTION_56_1();
      }

      else
      {
        OUTLINED_FUNCTION_58_6();
        uint64_t v12 = objc_opt_self(&OBJC_CLASS___WFTTSSpokenVariant);
        uint64_t v13 = (void *)swift_dynamicCastObjCClass(v11, v12);
        if (v13)
        {
          id v14 = objc_msgSend(v13, "displayString", v22);
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v17 = v16;

          v18._uint64_t countAndFlagsBits = v15;
          v18._object = v17;
          String.append(_:)(v18);
          swift_bridgeObjectRelease(v17);
        }

        swift_unknownObjectRelease(v11);
      }

      swift_unknownObjectRelease(v11);
    }

    OUTLINED_FUNCTION_37();
    return v25;
  }

  return result;
}

uint64_t static CATSpeakableString.applyTTSHint(speak:)()
{
  NSString v1 = OUTLINED_FUNCTION_19_8();
  id v2 = OUTLINED_FUNCTION_48_7((uint64_t)v1, "parseAnnotatedString:");

  v59[0] = 0LL;
  v59[1] = 0xE000000000000000LL;
  uint64_t v3 = (uint64_t)[v2 components];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WFTTSStringComponent);
  OUTLINED_FUNCTION_12_14(v4);
  OUTLINED_FUNCTION_35_10();
  uint64_t v5 = (char *)&type metadata for Swift.AnyObject;
  if (v0 >> 62) {
    goto LABEL_33;
  }
  uint64_t v3 = v0 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v6 = OUTLINED_FUNCTION_5_14();
  uint64_t v7 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v6);
  if (swift_dynamicCastMetatype(v7, (char *)&type metadata for Swift.AnyObject + 8)
    || (uint64_t v51 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8LL))) == 0)
  {
LABEL_3:
    uint64_t result = OUTLINED_FUNCTION_37();
    goto LABEL_4;
  }

  uint64_t v52 = (void *)(v3 + 32);
  while (*v52)
  {
    ++v52;
    if (!--v51) {
      goto LABEL_3;
    }
  }

  uint64_t result = OUTLINED_FUNCTION_37();
  unint64_t v0 = v3 | 1;
LABEL_4:
  while (2)
  {
    if (v0 >> 62)
    {
      OUTLINED_FUNCTION_3_18();
      uint64_t v9 = OUTLINED_FUNCTION_23_11();
      uint64_t result = OUTLINED_FUNCTION_37();
      if (!v9)
      {
LABEL_35:

        OUTLINED_FUNCTION_37();
        return 0LL;
      }
    }

    else
    {
      uint64_t v9 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFF8LL));
      if (!v9) {
        goto LABEL_35;
      }
    }

    if (v9 >= 1)
    {
      unint64_t v54 = v2;
      id v2 = 0LL;
      unint64_t v10 = v0 & 0xC000000000000001LL;
      uint64_t v11 = &type metadata for String;
      uint64_t v12 = (uint64_t)(v5 + 8);
      uint64_t v13 = &_sSo8NSObjectC10ObjectiveCE2eeoiySbAB_ABtFZ_ptr;
      uint64_t v55 = v9;
      while (1)
      {
        if (v10)
        {
          uint64_t v14 = OUTLINED_FUNCTION_50_10();
        }

        else
        {
          uint64_t v14 = *(void *)(v0 + 8LL * (void)v2 + 32);
          OUTLINED_FUNCTION_44_4();
        }

        uint64_t v58 = v14;
        OUTLINED_FUNCTION_44_4();
        uint64_t v15 = OUTLINED_FUNCTION_35_6((uint64_t)&v56, (uint64_t)&v58, v12, (uint64_t)v11);
        if (!(_DWORD)v15) {
          break;
        }
        OUTLINED_FUNCTION_21_12(v15, v16, v17, v18, v19, v20, v21, v22, v53, (uint64_t)v54, v55, v56, v57);
        OUTLINED_FUNCTION_14();
LABEL_22:
        id v2 = (char *)v2 + 1;
        swift_unknownObjectRelease(v14);
        if ((id)v9 == v2)
        {

          OUTLINED_FUNCTION_37();
          return v59[0];
        }
      }

      OUTLINED_FUNCTION_44_4();
      uint64_t v23 = objc_opt_self(v13[405]);
      uint64_t v24 = (void *)OUTLINED_FUNCTION_39_8(v23);
      if (v24)
      {
        uint64_t v5 = (char *)[v24 seconds];
        [v5 doubleValue];
        double v26 = v25;

        double v27 = round(v26 * 1000.0);
        if ((~*(void *)&v27 & 0x7FF0000000000000LL) == 0)
        {
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          OUTLINED_FUNCTION_3_18();
          uint64_t v3 = _bridgeCocoaArray<A>(_:)(v3, v5 + 8);
          uint64_t result = OUTLINED_FUNCTION_19_1(v0);
          unint64_t v0 = v3;
          continue;
        }

        if (v27 <= -9.22337204e18) {
          goto LABEL_31;
        }
        if (v27 >= 9.22337204e18) {
          goto LABEL_32;
        }
        uint64_t v56 = 0x3D65737561705C1BLL;
        uint64_t v57 = (void *)0xE800000000000000LL;
        uint64_t v58 = (uint64_t)v27;
        v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
        object = v28._object;
        String.append(_:)(v28);
        OUTLINED_FUNCTION_14();
        uint64_t v3 = (uint64_t)&v56;
        v30._uint64_t countAndFlagsBits = 92LL;
        v30._object = (void *)0xE100000000000000LL;
        String.append(_:)(v30);
        OUTLINED_FUNCTION_21_12(v31, v32, v33, v34, v35, v36, v37, v38, v53, (uint64_t)v54, v55, v56, v57);
        uint64_t v39 = object;
      }

      else
      {
        uint64_t v40 = objc_opt_self(&OBJC_CLASS___WFTTSSpokenVariant);
        uint64_t v41 = (void *)OUTLINED_FUNCTION_39_8(v40);
        if (!v41)
        {
LABEL_21:
          swift_unknownObjectRelease(v14);
          goto LABEL_22;
        }

        id v42 = [v41 spokenString];
        uint64_t v43 = v12;
        unint64_t v44 = v10;
        unint64_t v45 = v0;
        uint64_t v46 = v11;
        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v49 = v48;

        uint64_t v3 = (uint64_t)v59;
        v50._uint64_t countAndFlagsBits = v47;
        uint64_t v11 = v46;
        unint64_t v0 = v45;
        unint64_t v10 = v44;
        uint64_t v12 = v43;
        uint64_t v9 = v55;
        v50._object = v49;
        String.append(_:)(v50);
        uint64_t v39 = v49;
        uint64_t v13 = &_sSo8NSObjectC10ObjectiveCE2eeoiySbAB_ABtFZ_ptr;
      }

      swift_bridgeObjectRelease(v39);
      goto LABEL_21;
    }

    break;
  }

  __break(1u);
  return result;
}

Swift::String __swiftcall CATSpeakableString.toString()()
{
  NSString v1 = (void *)v0[5];
  if (!v1)
  {
    uint64_t v4 = v0[2];
    id v2 = (void *)v0[3];
LABEL_9:
    OUTLINED_FUNCTION_5_14();
    goto LABEL_10;
  }

  id v2 = (void *)v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  BOOL v5 = v4 == v3 && v1 == v2;
  if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)(v0[2], v0[3], v0[4], v0[5], 0LL) & 1) != 0) {
    goto LABEL_9;
  }
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v2;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0x3A7374742FLL;
  v7._object = (void *)0xE500000000000000LL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = v3;
  v8._object = v1;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 93LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  uint64_t v4 = 5985107LL;
  id v2 = (void *)0xE300000000000000LL;
LABEL_10:
  uint64_t v10 = v4;
  uint64_t v11 = v2;
  result._object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

uint64_t CATSpeakableString.asSpeakableString.getter()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_9_9();
  return SpeakableString.init(print:speak:)(v1, v2, v4, v3);
}

double static CATSpeakableString.resolveVariable(variable:intent:intentResponse:tokens:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  if (a5)
  {
    swift_bridgeObjectRetain(a2);
    specialized Dictionary.subscript.getter(a1, a2, a5, &v21);
    swift_bridgeObjectRelease(a2);
    if (v22)
    {
LABEL_12:
      outlined init with take of Any(&v21, v20);
      uint64_t v14 = v20;
      goto LABEL_13;
    }

    outlined destroy of URL?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
  }

  if (a4)
  {
    uint64_t v12 = outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(a4);
    if (v12)
    {
      uint64_t v13 = v12;
      *(void *)&__int128 v18 = a1;
      *((void *)&v18 + 1) = a2;
      swift_bridgeObjectRetain(a2);
      AnyHashable.init<A>(_:)(v20, &v18, &type metadata for String, &protocol witness table for String);
      specialized Dictionary.subscript.getter((uint64_t)v20, v13, &v18);
      swift_bridgeObjectRelease(v13);
      outlined destroy of AnyHashable((uint64_t)v20);
      if (v19)
      {
        outlined init with take of Any(&v18, &v21);
        uint64_t v14 = &v21;
LABEL_13:
        outlined init with take of Any(v14, a6);
        return result;
      }

      outlined destroy of URL?((uint64_t)&v18, &demangling cache variable for type metadata for Any?);
    }
  }

  if (a3)
  {
    outlined bridged method (pb) of @objc INIntent.parametersByName.getter(a3);
    if (v15)
    {
      uint64_t v16 = v15;
      swift_bridgeObjectRetain(a2);
      specialized Dictionary.subscript.getter(a1, a2, v16, &v21);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v16);
      if (v22) {
        goto LABEL_12;
      }
      outlined destroy of URL?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
    }
  }

  double result = 0.0;
  *a6 = 0u;
  a6[1] = 0u;
  return result;
}

uint64_t CATSpeakableString.deinit()
{
  return v0;
}

uint64_t CATSpeakableString.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t static TemplatingResult.getBehaviorAfterSpeaking(behavior:)@<X0>(uint64_t a1@<X8>)
{
  if ((static TemplatingResult.getListenAfterSpeakingDisabled()() & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v3 = OUTLINED_FUNCTION_48();
    uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
    BOOL v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_31_0(v6))
    {
      Swift::String v7 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)Swift::String v7 = 0;
      _os_log_impl(&dword_0, v5, v1, "ListenAfterSpeakingDisabled is set to true", v7, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v7);
    }

    uint64_t v8 = enum case for BehaviorAfterSpeaking.continueWithoutListening(_:);
    uint64_t v9 = OUTLINED_FUNCTION_41_7();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104LL))(a1, v8, v9);
  }

  else
  {
    OUTLINED_FUNCTION_41_7();
    uint64_t v11 = OUTLINED_FUNCTION_45();
    return v12(v11);
  }

id static TemplatingResult.getListenAfterSpeakingDisabled()()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  id v1 = @nonobjc NSUserDefaults.init(suiteName:)(0xD00000000000001BLL, 0x80000000001941F0LL);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  NSString v3 = OUTLINED_FUNCTION_24_11();
  id v4 = [v2 objectForKey:v3];

  if (!v4)
  {
    memset(v8, 0, sizeof(v8));

    outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for Any?);
    return 0LL;
  }

  _bridgeAnyObjectToAny(_:)(v8);
  swift_unknownObjectRelease(v4);
  outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for Any?);
  NSString v5 = OUTLINED_FUNCTION_24_11();
  id v6 = [v2 BOOLForKey:v5];

  return v6;
}

Swift::String_optional __swiftcall TemplatingResult.firstSectionContentText()()
{
  uint64_t v0 = type metadata accessor for TemplatingText(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_35();
  uint64_t v4 = v3 - v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_35();
  uint64_t v8 = v7 - v6;
  uint64_t v10 = TemplatingResult.sections.getter(v9);
  specialized Collection.first.getter(v10, v8);
  swift_bridgeObjectRelease();
  uint64_t v11 = type metadata accessor for TemplatingSection(0LL);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v8, 1LL, v11);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?(v8, &demangling cache variable for type metadata for TemplatingSection?);
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
  }

  else
  {
    TemplatingSection.content.getter(EnumTagSinglePayload);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v8, v11);
    uint64_t v13 = TemplatingText.text.getter(v15);
    uint64_t v14 = v16;
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  }

  uint64_t v17 = v13;
  __int128 v18 = v14;
  result.value._object = v18;
  result.value._uint64_t countAndFlagsBits = v17;
  return result;
}

id @nonobjc NSRegularExpression.init(pattern:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 = [v3 initWithPattern:v6 options:a3 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)( unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL)) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for CATSpeakableString()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin18CATSpeakableString);
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._copyContents(initializing:)( a1,  a2,  a3,  (void (*)(uint64_t, void, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:),  &lazy protocol witness table cache variable for type [INIntentSlotDescription] and conformance [A],  &demangling cache variable for type metadata for [INIntentSlotDescription],  (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array._copyContents(initializing:)( uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void, uint64_t), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = result;
  unint64_t v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    OUTLINED_FUNCTION_80();
    uint64_t v15 = OUTLINED_FUNCTION_23_11();
    Swift::String_optional result = OUTLINED_FUNCTION_14();
    if (!v15) {
      return OUTLINED_FUNCTION_45();
    }
  }

  else
  {
    uint64_t v15 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
    if (!v15) {
      return OUTLINED_FUNCTION_45();
    }
  }

  if (v13)
  {
    if (v14)
    {
      if (a3 < 0) {
        uint64_t v16 = a3;
      }
      else {
        uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      OUTLINED_FUNCTION_80();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v16);
      Swift::String_optional result = OUTLINED_FUNCTION_14();
      if (v17 <= a2)
      {
        if (v15 >= 1)
        {
          uint64_t v18 = lazy protocol witness table accessor for type [SFCardSection] and conformance [A](a5, a6);
          OUTLINED_FUNCTION_80();
          for (uint64_t i = 0LL; i != v15; ++i)
          {
            uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(a6);
            __int128 v21 = (void (*)(_BYTE *, void))a7(v24, i, a3, v20, v18);
            id v23 = *v22;
            v21(v24, 0LL);
            *(void *)(v13 + 8 * i) = v23;
          }

          OUTLINED_FUNCTION_14();
          return OUTLINED_FUNCTION_45();
        }

        goto LABEL_19;
      }
    }

    else
    {
      if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL)) <= a2)
      {
        a4((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL)), v13);
        return OUTLINED_FUNCTION_45();
      }

      __break(1u);
    }

    __break(1u);
LABEL_19:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    Swift::String_optional result = swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a3);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      Swift::String_optional result = swift_bridgeObjectRelease(a3);
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type [SFCardSection] and conformance [A]( &lazy protocol witness table cache variable for type [UsoEntityBuilder_common_VoiceCommandPayload] and conformance [A],  &demangling cache variable for type metadata for [UsoEntityBuilder_common_VoiceCommandPayload]);
          swift_bridgeObjectRetain(a3);
          for (uint64_t i = 0LL; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoEntityBuilder_common_VoiceCommandPayload]);
            specialized protocol witness for Collection.subscript.read in conformance [A]();
            id v12 = v11;
            uint64_t v14 = *v13;
            swift_retain(*v13);
            v12(&v16, 0LL);
            *(void *)(v5 + 8 * i) = v14;
          }

          swift_bridgeObjectRelease(a3);
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL)) <= a2)
      {
        specialized UnsafeMutablePointer.initialize(from:count:)( (a3 & 0xFFFFFFFFFFFFFF8LL) + 32,  *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL)));
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type [SFCardSection] and conformance [A]( unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_3_18()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_4_16( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( va1,  (uint64_t *)va,  0LL,  0LL,  0LL,  1LL,  v11,  v11,  v11,  a1);
}

uint64_t OUTLINED_FUNCTION_5_14()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_6_13()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0x7265206C61746166LL,  0xEB00000000726F72LL,  (uint64_t *)(v0 - 96));
}

uint64_t OUTLINED_FUNCTION_9_11()
{
  return static SiriKitLifecycle._logCrashToEventBus(_:)(0x7265206C61746166LL, 0xEB00000000726F72LL);
}

uint64_t OUTLINED_FUNCTION_12_14(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

  ;
}

NSString OUTLINED_FUNCTION_17_12()
{
  return String._bridgeToObjectiveC()();
}

void OUTLINED_FUNCTION_18_12(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

NSString OUTLINED_FUNCTION_19_8()
{
  return String._bridgeToObjectiveC()();
}

void OUTLINED_FUNCTION_21_12( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  v13._uint64_t countAndFlagsBits = a12;
  v13._object = a13;
  String.append(_:)(v13);
}

uint64_t OUTLINED_FUNCTION_23_11()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

NSString OUTLINED_FUNCTION_24_11()
{
  return String._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_28_8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_29_9()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v1, v0);
}

uint64_t OUTLINED_FUNCTION_30_9()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v1, v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_34_9@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8LL * *(void *)(a1 + 16) + 32;
}

void OUTLINED_FUNCTION_35_10()
{
}

uint64_t OUTLINED_FUNCTION_36_10()
{
  return swift_release_n(v0, 2LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_39_8(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_41_7()
{
  return type metadata accessor for BehaviorAfterSpeaking(0LL);
}

uint64_t OUTLINED_FUNCTION_44_4()
{
  return swift_unknownObjectRetain(v0);
}

  ;
}

id OUTLINED_FUNCTION_48_7(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_50_10()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

void OUTLINED_FUNCTION_51_8()
{
}

uint64_t OUTLINED_FUNCTION_52_4(uint64_t a1, uint64_t a2)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1LL, v2);
}

id OUTLINED_FUNCTION_53_6(id a1, SEL a2, uint64_t a3)
{
  return objc_msgSend(a1, a2, a3, 0, 0);
}

uint64_t OUTLINED_FUNCTION_54_7()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_55_7()
{
  return *(void *)(*(void *)(v1 + 48) + 16 * v0 + 8);
}

uint64_t OUTLINED_FUNCTION_56_6()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t OUTLINED_FUNCTION_58_6()
{
  return swift_unknownObjectRetain(v0);
}

void OUTLINED_FUNCTION_59_2()
{
  *(_WORD *)(v0 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2048;
}

void OUTLINED_FUNCTION_60_3()
{
  *(void *)(v2 - 144) = v0 - v1;
}

uint64_t OUTLINED_FUNCTION_61_5(uint64_t a1)
{
  return StaticString.description.getter(a1, 94LL, 2LL);
}

  ;
}

BOOL static CustomIntentSnippetProvider.isDoneButtonEligible(deviceState:intent:siriEnvironment:)( void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ResponseMode(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v65 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v65 - v13;
  uint64_t v15 = SiriEnvironment.currentRequest.getter(v12);
  CurrentRequest.responseMode.getter(v15);
  uint64_t v16 = swift_release();
  static ResponseMode.voiceOnly.getter(v16);
  char v17 = static ResponseMode.== infix(_:_:)(v14, v11);
  uint64_t v69 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v18 = v69(v11, v4);
  OUTLINED_FUNCTION_8_14(v18, (uint64_t)v77);
  if ((v17 & 1) != 0)
  {
    LODWORD(v1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = 1;
  }

  else
  {
    uint64_t v20 = OUTLINED_FUNCTION_1_15(v77);
    LODWORD(v1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = dispatch thunk of DeviceState.isHomePod.getter(v20);
  }

  __swift_destroy_boxed_opaque_existential_1Tm(v77);
  uint64_t v21 = OUTLINED_FUNCTION_1_15(a1);
  uint64_t v23 = dispatch thunk of DeviceState.isPhone.getter(v21, v22);
  char v24 = v23;
  OUTLINED_FUNCTION_8_14(v23, (uint64_t)v76);
  if ((v24 & 1) != 0)
  {
    uint64_t v25 = __swift_destroy_boxed_opaque_existential_1Tm(v76);
    OUTLINED_FUNCTION_8_14(v25, (uint64_t)v75);
LABEL_7:
    uint64_t v29 = __swift_destroy_boxed_opaque_existential_1Tm(v75);
    OUTLINED_FUNCTION_8_14(v29, (uint64_t)v72);
LABEL_8:
    char v30 = 1;
    goto LABEL_9;
  }

  uint64_t v26 = OUTLINED_FUNCTION_1_15(v76);
  char v27 = dispatch thunk of DeviceState.isPad.getter(v26);
  uint64_t v28 = __swift_destroy_boxed_opaque_existential_1Tm(v76);
  OUTLINED_FUNCTION_8_14(v28, (uint64_t)v75);
  if ((v27 & 1) != 0) {
    goto LABEL_7;
  }
  uint64_t v60 = OUTLINED_FUNCTION_1_15(v75);
  char v61 = dispatch thunk of DeviceState.isPod.getter(v60);
  uint64_t v62 = __swift_destroy_boxed_opaque_existential_1Tm(v75);
  OUTLINED_FUNCTION_8_14(v62, (uint64_t)v72);
  if ((v61 & 1) != 0) {
    goto LABEL_8;
  }
  uint64_t v63 = v73;
  uint64_t v64 = v74;
  __swift_project_boxed_opaque_existential_1(v72, v73);
  char v30 = dispatch thunk of DeviceState.isXRDevice.getter(v63, v64);
LABEL_9:
  __swift_destroy_boxed_opaque_existential_1Tm(v72);
  id v31 = [a2 _metadata];
  if (v31)
  {
    uint64_t v32 = v31;
    unsigned int v33 = [v31 showsWhenRun];
  }

  else
  {
    unsigned int v33 = 0;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  uint64_t v35 = __swift_project_value_buffer(v34, (uint64_t)static Logger.voiceCommands);
  uint64_t v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 16))(v8, v14, v4);
  uint64_t v68 = v35;
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = OUTLINED_FUNCTION_38(30LL);
    int v67 = v19;
    uint64_t v19 = v39;
    uint64_t v66 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v71 = v66;
    *(_DWORD *)uint64_t v19 = 136315906;
    a2 = (void *)(v19 + 4);
    unint64_t v40 = lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode();
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v4, v40);
    uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v19 + 4);
    OUTLINED_FUNCTION_20();
    uint64_t v43 = OUTLINED_FUNCTION_10_10();
    *(_WORD *)(v19 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 1024;
    LODWORD(v70) = v67 & 1;
    uint64_t v45 = OUTLINED_FUNCTION_11_14(v43, v44, v19 + 14);
    *(_WORD *)(v19 + 18) = 1024;
    LODWORD(v70) = v33;
    uint64_t v47 = OUTLINED_FUNCTION_11_14(v45, v46, v19 + 20);
    *(_WORD *)(v19 + 24) = 1024;
    LODWORD(v70) = v30 & 1;
    OUTLINED_FUNCTION_11_14(v47, v48, v19 + 26);
    _os_log_impl( &dword_0,  v37,  v38,  "#CustomIntentSnippetProvider responseMode: %s, isVox: %{BOOL}d, showsWhenRun: %{BOOL}d, userCanInteractWithButton: %{BOOL}d",  (uint8_t *)v19,  0x1Eu);
    uint64_t v49 = v66;
    swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v49);
    uint64_t v50 = v19;
    LOBYTE(v1__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = v67;
    OUTLINED_FUNCTION_1_0(v50);
  }

  else
  {
    OUTLINED_FUNCTION_10_10();
  }

  char v51 = v19 | v33 ^ 1 | v30 ^ 1;
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  BOOL v55 = os_log_type_enabled(v53, v54);
  if ((v51 & 1) != 0)
  {
    if (v55)
    {
      uint64_t v56 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v56 = 0;
      os_log_type_t v57 = v54;
      uint64_t v58 = "#CustomIntentSnippetProvider isDoneButtonEligible - NOT eligible";
LABEL_22:
      _os_log_impl(&dword_0, v53, v57, v58, v56, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v56);
    }
  }

  else if (v55)
  {
    uint64_t v56 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v56 = 0;
    os_log_type_t v57 = v54;
    uint64_t v58 = "#CustomIntentSnippetProvider isDoneButtonEligible returning true";
    goto LABEL_22;
  }

  ((void (*)(char *, uint64_t))a2)(v14, v4);
  return (v51 & 1) == 0;
}

uint64_t ShortcutsUnlockDeviceStrategy.dialogingTemplates.getter()
{
  return swift_retain(*(void *)(v0 + 16));
}

uint64_t CustomIntentSnippetProvider.voiceCommandName.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t CustomIntentSnippetProvider.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 40, a1);
}

uint64_t CustomIntentSnippetProvider.siriEnvironment.getter()
{
  return swift_retain(*(void *)(v0 + 80));
}

void *CustomIntentSnippetProvider.__allocating_init(voiceCommandName:templatingService:deviceState:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t v11 = (void *)OUTLINED_FUNCTION_19(v5, 88LL);
  v11[3] = a1;
  v11[4] = a2;
  v11[2] = a3;
  outlined init with take of AceServiceInvokerAsync(a4, (uint64_t)(v11 + 5));
  v11[10] = a5;
  return v11;
}

void *CustomIntentSnippetProvider.init(voiceCommandName:templatingService:deviceState:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  v5[3] = a1;
  void v5[4] = a2;
  void v5[2] = a3;
  outlined init with take of AceServiceInvokerAsync(a4, (uint64_t)(v5 + 5));
  v5[10] = a5;
  return v5;
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[98] = v8;
  v9[97] = v11;
  v9[96] = a8;
  v9[95] = a7;
  v9[94] = a6;
  v9[93] = a5;
  v9[92] = a4;
  v9[91] = a3;
  v9[90] = a2;
  v9[89] = a1;
  return swift_task_switch( CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:),  0LL,  0LL);
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)()
{
  uint64_t v1 = v0[98];
  uint64_t v2 = type metadata accessor for VoiceShortcutClientWrapper();
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 16LL);
  v0[99] = v3;
  uint64_t v4 = swift_task_alloc(32LL);
  v0[100] = v4;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for VCVoiceShortcut?);
  swift_asyncLet_begin( v0 + 2,  0LL,  v5,  &async function pointer to partial apply for implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:),  v4,  v0 + 87);
  v0[88] = _swiftEmptyArrayStorage;
  return swift_asyncLet_get( v0 + 2,  v0 + 87,  CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:),  v0 + 82);
}

{
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:));
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v1 = v0 + 87;
  uint64_t v2 = (void *)v0[91];
  uint64_t v3 = (void *)v0[90];
  uint64_t v4 = v0[89];
  uint64_t v5 = (void *)v0[87];
  uint64_t v6 = (void *)(v0[98] + 40LL);
  uint64_t v7 = v5;
  static CustomIntentPlatformSpecificSnippets.buildIntentsSnippet(app:intent:intentResponse:isForConfirmation:vcShortcut:device:)( v4,  v3,  v2,  1,  (uint64_t)v5,  v6);
  uint64_t v9 = (uint64_t)v8;

  if (!((unint64_t)v9 >> 62))
  {
LABEL_11:
    uint64_t v23 = (void *)v0[97];
    char v17 = (void *)v0[96];
    char v24 = v0[95];
    uint64_t v25 = v0[94];
    uint64_t v26 = v0[93];
    char v27 = v0[92];
    OUTLINED_FUNCTION_1_2();
    uint64_t v9 = (uint64_t)[objc_allocWithZone(SAUISnippet) init];
    static CustomIntentPlatformSpecificSnippets.attachConfirmationButtons(snippet:yes:no:device:)( (void *)v9,  v27,  v26,  v25,  v24,  (uint64_t)v17,  v23,  v6);
    uint64_t v28 = (id *)(id)v9;
    OUTLINED_FUNCTION_15_10();
    OUTLINED_FUNCTION_13_10();
    if (!v20) {
      goto LABEL_12;
    }
LABEL_15:
    unsigned int v33 = OUTLINED_FUNCTION_19_9(v19);
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33, v34, v35);
    goto LABEL_12;
  }

  if (v9 < 0) {
    uint64_t v21 = v9;
  }
  else {
    uint64_t v21 = v9 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v9);
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v21);
  OUTLINED_FUNCTION_1_2();
  if (!v22) {
    goto LABEL_11;
  }
LABEL_3:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v9 & 0xC000000000000001LL) == 0);
  if ((v9 & 0xC000000000000001LL) != 0) {
    uint64_t v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
  }
  else {
    uint64_t v10 = *(id *)(v9 + 32);
  }
  uint64_t v11 = v10;
  uint64_t v12 = (void *)v0[97];
  uint64_t v13 = v0[96];
  uint64_t v14 = v0[95];
  uint64_t v15 = v0[94];
  uint64_t v16 = v0[93];
  char v17 = (void *)v0[92];
  OUTLINED_FUNCTION_1_2();
  static CustomIntentPlatformSpecificSnippets.attachConfirmationButtons(snippet:yes:no:device:)( v11,  (uint64_t)v17,  v16,  v15,  v14,  v13,  v12,  v6);
  uint64_t v18 = v11;
  OUTLINED_FUNCTION_15_10();
  OUTLINED_FUNCTION_13_10();
  if (v20)
  {
    uint64_t v1 = v0 + 87;
    goto LABEL_15;
  }

  uint64_t v1 = v0 + 87;
LABEL_12:
  uint64_t v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v17);
  specialized Array._endMutation()(v29, v30, v31);

  v0[101] = v0[88];
  return swift_asyncLet_finish( v0 + 2,  v1,  CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:),  v0 + 82);
}

{
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 800);
  swift_release();
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_8_4(*(void *)(v0 + 808), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch( implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:),  0LL,  0LL);
}

uint64_t implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v4 = (void *)swift_task_alloc(dword_216164);
  *(void *)(v0 + 40) = v4;
  *uint64_t v4 = v0;
  v4[1] = implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:);
  return OUTLINED_FUNCTION_4_17(v3, v2);
}

{
  uint64_t v0;
  **(void **)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40LL);
  *(void *)(*(void *)v1 + 48LL) = a1;
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  void v4[6] = a2;
  void v4[9] = *v3;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:));
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:)()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = type metadata accessor for VoiceShortcutClientWrapper();
  v0[10] = swift_initStackObject(v2, v0 + 2);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_216164);
  v0[11] = v5;
  *uint64_t v5 = v0;
  v5[1] = CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:);
  return OUTLINED_FUNCTION_4_17(v3, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_s *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  int *v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v1 = (void *)(*(void *)(v0 + 64) + 40LL);
  static CustomIntentPlatformSpecificSnippets.buildIntentsSnippet(app:intent:intentResponse:isForConfirmation:vcShortcut:device:)( *(void *)(v0 + 40),  *(void **)(v0 + 48),  *(void **)(v0 + 56),  0,  *(void *)(v0 + 96),  v1);
  uint64_t v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v18 = v2;
    }
    else {
      uint64_t v18 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v19 = OUTLINED_FUNCTION_72( v2,  (unint64_t *)&lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
    uint64_t v6 = _bridgeCocoaArray<A>(_:)(v18, v19);
  }

  else
  {
    uint64_t v4 = swift_bridgeObjectRetain(v2);
    uint64_t v5 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v4);
    OUTLINED_FUNCTION_72( v5,  (unint64_t *)&lazy cache variable for type metadata for SAAceView,  &OBJC_CLASS___SAAceView_ptr);
    uint64_t v6 = v3;
  }

  uint64_t v7 = *(void **)(v0 + 48);
  swift_bridgeObjectRelease(v3);
  *(void *)(v0 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v6;
  if (static CustomIntentSnippetProvider.isDoneButtonEligible(deviceState:intent:siriEnvironment:)(v1, v7)
    && (uint64_t v8 = (*(uint64_t (**)(void, void, void))(**(void **)(v0 + 64) + 144LL))( *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 40)),  (*(void *)(v0 + 104) = v8) != 0LL))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    uint64_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_0, v11, v12, "Creating done button in the handle view", v13, 2u);
      OUTLINED_FUNCTION_1_0((uint64_t)v13);
    }

    uint64_t v14 = *(void *)(v0 + 64);

    uint64_t v15 = *(int **)(**(void **)(v14 + 16) + 400LL);
    uint64_t v20 = (uint64_t (*)(void))((char *)v15 + *v15);
    uint64_t v16 = (void *)swift_task_alloc(v15[1]);
    *(void *)(v0 + 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v16;
    *uint64_t v16 = v0;
    v16[1] = CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:);
    return v20();
  }

  else
  {

    return OUTLINED_FUNCTION_0_3(v6, *(uint64_t (**)(void))(v0 + 8));
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 104);
  uint64_t v4 = [objc_allocWithZone(SAUIButton) init];
  outlined bridged method (mbnn) of @objc SAUIButton.text.setter(v1, v2, v4, (SEL *)&selRef_setText_);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = OUTLINED_FUNCTION_19(v5, 40LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E150;
  *(void *)(v6 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v3;
  OUTLINED_FUNCTION_17_13(v6, v7, v8);
  uint64_t v9 = v3;
  outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(v24, v4);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc SAUIButton.text.setter(v10, v11, v4, (SEL *)&selRef_setItemType_);
  uint64_t v12 = v4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_13_10();
  if (v14)
  {
    uint64_t v21 = OUTLINED_FUNCTION_19_9(v13);
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21, v22, v23);
  }

  uint64_t v15 = *(void **)(v0 + 104);
  uint64_t v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, v12);
  specialized Array._endMutation()(v16, v17, v18);

  uint64_t v19 = *(void *)(v0 + 32);
  return OUTLINED_FUNCTION_0_3(v19, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void **)(v0 + 104);
  swift_release(*(void *)(v0 + 80));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = a1;
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_21_0();
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:)( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 112LL);
  *(void *)(*(void *)v3 + 12Hasher.init(_seed:)(v0, 0LL) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    swift_bridgeObjectRelease(v6[4]);
    uint64_t v8 = CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:);
  }

  else
  {
    v6[16] = a2;
    v6[17] = a1;
    uint64_t v8 = CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:);
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForResolveNeedsConfirmation_preRFv2(app:yesButton:noButton:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  void v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  _OWORD v8[2] = a1;
  v8[3] = a2;
  return OUTLINED_FUNCTION_6_2((uint64_t)CustomIntentSnippetProvider.makeAceViewsForResolveNeedsConfirmation_preRFv2(app:yesButton:noButton:));
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForResolveNeedsConfirmation_preRFv2(app:yesButton:noButton:)()
{
  id v1 = static CustomIntentPlatformSpecificSnippets.buildConfirmationSnippet(app:yes:no:device:)( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void **)(v0 + 64),  (void *)(*(void *)(v0 + 72) + 40LL));
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = OUTLINED_FUNCTION_19(v2, 40LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E150;
  *(void *)(v3 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v1;
  OUTLINED_FUNCTION_17_13(v3, v4, v5);
  return OUTLINED_FUNCTION_8_4(v7, *(uint64_t (**)(void))(v0 + 8));
}

id CustomIntentSnippetProvider.makeDirectInvocation(customIntent:intentResponse:app:)( void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = v4[4];
  v28[0] = v4[3];
  v28[1] = v8;
  __int128 v28[2] = (uint64_t)a1;
  v28[3] = (uint64_t)a2;
  v28[4] = a3;
  swift_bridgeObjectRetain(v8);
  id v9 = a1;
  id v10 = a2;
  swift_retain(a3);
  uint64_t v11 = static ShortcutDoneButtonConverter.toUserData(shortcutDoneButton:)(v28);
  if (v11)
  {
    uint64_t v12 = v11;
    OUTLINED_FUNCTION_72( (uint64_t)v11,  (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload,  &OBJC_CLASS___SKIDirectInvocationPayload_ptr);
    id v27 = v10;
    id v13 = SKIDirectInvocationPayload.__allocating_init(identifier:)(0xD00000000000003BLL, 0x80000000001937F0LL);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v12);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v12);
    outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v15, v13);
    uint64_t v16 = v4 + 5;
    uint64_t v17 = v4[8];
    uint64_t v18 = v4[9];
    __swift_project_boxed_opaque_existential_1(v16, v17);
    uint64_t v19 = (void *)DeviceState.asInvocationContext.getter(v17, v18);
    [v19 setInputOrigin:SAInputOriginDialogButtonTapValue];
    uint64_t v20 = (void *)objc_opt_self(&OBJC_CLASS___SKIDirectInvocation);
    id v21 = [v20 runSiriKitExecutorCommandWithContext:v19 payload:v13];
    id v22 = [objc_allocWithZone(SAIntentGroupSiriKitAppSelectionState) init];
    id v23 = [objc_allocWithZone(SASyncAppIdentifyingInfo) init];
    NSString v24 = String._bridgeToObjectiveC()();
    [v23 setBundleId:v24];

    [v22 setRequestedApp:v23];
    [v21 setAppSelectionState:v22];

    id v25 = [v20 wrapCommandInStartLocalRequest:v21];
    swift_bridgeObjectRelease(v8);

    id v10 = v27;
  }

  else
  {

    swift_bridgeObjectRelease(v8);
    id v25 = 0LL;
  }

  swift_release();

  return v25;
}

id SKIDirectInvocationPayload.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithIdentifier:v5];

  return v6;
}

uint64_t CustomIntentSnippetProvider.deinit()
{
  return v0;
}

uint64_t CustomIntentSnippetProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

unint64_t lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode;
  if (!lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode)
  {
    uint64_t v1 = type metadata accessor for ResponseMode(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ResponseMode, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode);
  }

  return result;
}

{
  unint64_t result;
  uint64_t v1;
  unint64_t result = lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode;
  if (!lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode)
  {
    uint64_t v1 = type metadata accessor for ResponseMode(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ResponseMode, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode);
  }

  return result;
}

uint64_t partial apply for implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)( uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  id v6 = (void *)swift_task_alloc(dword_216BC4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *id v6 = v2;
  v6[1] = partial apply for implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:);
  return implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)( a1,  v5,  v4);
}

uint64_t partial apply for implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter( uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_20_17(a2, "setUserData:", v3, v4, v5, v6, v7, v8, v9, (uint64_t)isa);
  OUTLINED_FUNCTION_5_15(v11);
}

void outlined bridged method (mbnn) of @objc SAUIButton.text.setter(uint64_t a1, uint64_t a2, void *a3)
{
}

void outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_20_17(a2, "setCommands:", v3, v4, v5, v6, v7, v8, v9, (uint64_t)isa);
  OUTLINED_FUNCTION_5_15(v11);
}

void outlined bridged method (mbnn) of @objc SAUIButton.text.setter( uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  OUTLINED_FUNCTION_20_17(a3, *a4, v7, v8, v9, v10, v11, v12, v13, (uint64_t)v14);
}

uint64_t type metadata accessor for CustomIntentSnippetProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin27CustomIntentSnippetProvider);
}

uint64_t OUTLINED_FUNCTION_1_15(void *a1)
{
  return v1;
}

uint64_t OUTLINED_FUNCTION_4_17(uint64_t a1, uint64_t a2)
{
  return VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(a1, a2);
}

void OUTLINED_FUNCTION_5_15(id a1)
{
}

uint64_t OUTLINED_FUNCTION_8_14(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of DeviceState(v2, a2);
}

uint64_t OUTLINED_FUNCTION_10_10()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 272))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_11_14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 264, v3, a3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_15_10()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_17_13(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array._endMutation()(a1, a2, a3);
}

BOOL OUTLINED_FUNCTION_19_9@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

id OUTLINED_FUNCTION_20_17( id a1, SEL a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return objc_msgSend(a1, a2, a10);
}

id ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionMetadata.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.appBundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  OUTLINED_FUNCTION_17_1();
  return v1;
}

uint64_t CustomIntentResponseGenerator.dialogTemplating.getter()
{
  return swift_retain(*(void *)(v0 + 56));
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.linkActionPatterns.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 64, a1);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.runLinkActionCatWrapper.getter()
{
  return swift_retain(*(void *)(v0 + 104));
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.enableTCCLabelsProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 112, a1);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.responseFactory.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 152, a1);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 192, a1);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.serviceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 232, a1);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 272, a1);
}

void ShortcutsLinkPromptForConfirmationFlowStrategy.__allocating_init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v13 = a7[3];
  uint64_t v41 = a7[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a7, v13);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_12_15(v15, v16, v38);
  uint64_t v17 = a9[3];
  uint64_t v39 = a9[4];
  OUTLINED_FUNCTION_56_7();
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_13_11(v19, v20, v39);
  uint64_t v22 = a10[3];
  uint64_t v21 = a10[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a10, v22);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_35();
  uint64_t v26 = v25 - v24;
  (*(void (**)(uint64_t))(v27 + 16))(v25 - v24);
  OUTLINED_FUNCTION_40_10();
  OUTLINED_FUNCTION_38_9( a1,  a2,  v28,  v29,  v30,  v31,  v32,  v33,  v11,  v26,  v34,  v35,  v36,  v37,  v17,  v22,  v13,  v40,  v21,  v41);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  OUTLINED_FUNCTION_24_0();
}

void ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v12 = a7[3];
  uint64_t v40 = a7[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a7, v12);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_12_15(v14, v15, v37);
  uint64_t v16 = a9[3];
  uint64_t v39 = a9[4];
  OUTLINED_FUNCTION_56_7();
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_13_11(v18, v19, v38);
  uint64_t v21 = a10[3];
  uint64_t v20 = a10[4];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a10, v21);
  OUTLINED_FUNCTION_66_0();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_35();
  uint64_t v25 = v24 - v23;
  (*(void (**)(uint64_t))(v26 + 16))(v24 - v23);
  OUTLINED_FUNCTION_40_10();
  OUTLINED_FUNCTION_38_9( a1,  a2,  v27,  v28,  v29,  v30,  v31,  v32,  v10,  v25,  v33,  v34,  v35,  v36,  v16,  v21,  v12,  v39,  v20,  v40);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  OUTLINED_FUNCTION_24_0();
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:)()
{
  uint64_t v1 = type metadata accessor for Parse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_35();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1LL, 1LL, v9);
  uint64_t v10 = (void *)OUTLINED_FUNCTION_19((uint64_t)&unk_1F5D60, 40LL);
  v10[2] = 0LL;
  void v10[3] = 0LL;
  v10[4] = v0;
  swift_retain(v0);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v8,  (uint64_t)&async function pointer to partial apply for closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:),  (uint64_t)v10);
  uint64_t v11 = swift_release();
  Input.parse.getter(v11);
  int v12 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(v5);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  if (v12 == 3) {
    return static ActionForInput.ignore()(v13);
  }
  else {
    return static ActionForInput.handle()(v13);
  }
}

uint64_t closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a4;
  return swift_task_switch(closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:), 0LL, 0LL);
}

uint64_t closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  v2[13] = __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v4 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v5 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v0,  v1,  "#ShortcutsLinkPromptForConfirmationFlowStrategy submitting empty output to clear screen and prevent double-taps",  v5);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  uint64_t v6 = v2[12];

  OUTLINED_FUNCTION_51_9(v6 + 272);
  uint64_t v7 = v2[5];
  uint64_t v8 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v7);
  static OutputUtils.makeTemporaryOutput()(v2 + 7);
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to dispatch thunk of OutputPublisherAsync.publish(output:)[1]);
  v2[14] = v9;
  *uint64_t v9 = v2;
  v9[1] = closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v2 + 7, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = v2 + 7;
  os_log_type_t v4 = v2[14];
  *uint64_t v5 = *v1;
  v2[15] = v0;
  swift_task_dealloc(v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(os_log_s **)(v1 + 104);
  os_log_type_t v4 = __swift_destroy_boxed_opaque_existential_1Tm((void *)(v1 + 16));
  Logger.logObject.getter(v4);
  uint64_t v5 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_31_0(v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v6 = 0;
    OUTLINED_FUNCTION_47_1( &dword_0,  v3,  v0,  "#ShortcutsLinkPromptForConfirmationFlowStrategy failed to submit empty output to clear screen",  v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
  }

  swift_errorRelease(v2);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.parseConfirmationResponse(input:)( uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  v3[8] = OUTLINED_FUNCTION_11_0();
  void v3[9] = OUTLINED_FUNCTION_11_0();
  uint64_t v4 = OUTLINED_FUNCTION_48();
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  v3[12] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v3[13] = OUTLINED_FUNCTION_9_0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for Parse(0LL);
  v3[14] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[15] = v8;
  v3[16] = OUTLINED_FUNCTION_9_0(v8);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

void ShortcutsLinkPromptForConfirmationFlowStrategy.parseConfirmationResponse(input:)(uint64_t a1)
{
  uint64_t v3 = v1[15];
  uint64_t v2 = v1[16];
  uint64_t v4 = v1[14];
  Input.parse.getter(a1);
  char v5 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  __asm { BR              X10 }

uint64_t sub_5E150()
{
  id v1 = [*(id *)(v0[7] + 32) systemProtocols];
  unint64_t v2 = type metadata accessor for LNSystemProtocol();
  v0[17] = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  uint64_t v3 = (void *)swift_task_alloc(dword_2157DC);
  v0[18] = v3;
  *uint64_t v3 = v0;
  v3[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.parseConfirmationResponse(input:);
  OUTLINED_FUNCTION_24_7();
  return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v4, v5, v6);
}

uint64_t sub_5E1DC()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  __swift_project_value_buffer(*(void *)(v2 + 80), (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v3 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_7_2(v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v4 = 0;
    OUTLINED_FUNCTION_1_0((uint64_t)v4);
  }

  OUTLINED_FUNCTION_30_10();
  uint64_t v5 = type metadata accessor for ConfirmationResponse(0LL);
  OUTLINED_FUNCTION_18_13(v5);
  OUTLINED_FUNCTION_23_12();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_24_7();
  return v6();
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.parseConfirmationResponse(input:)()
{
  uint64_t v1 = *(void *)(v0 + 136);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 144));
  swift_bridgeObjectRelease(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  os_log_type_t v0;
  os_log_s *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  __swift_project_value_buffer(*(void *)(v2 + 80), (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v3 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_45_0(v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v4 = 0;
    OUTLINED_FUNCTION_1_0((uint64_t)v4);
  }

  OUTLINED_FUNCTION_30_10();
  uint64_t v5 = type metadata accessor for ConfirmationResponse(0LL);
  OUTLINED_FUNCTION_18_13(v5);
  OUTLINED_FUNCTION_23_12();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  uint64_t v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v6);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)( uint64_t a1, uint64_t a2)
{
  v3[32] = a2;
  v3[33] = v2;
  v3[31] = a1;
  uint64_t v4 = type metadata accessor for ImageElement.ImageStyle(0LL);
  v3[34] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[35] = v5;
  v3[36] = OUTLINED_FUNCTION_9_0(v5);
  uint64_t v6 = type metadata accessor for ImageElement(0LL);
  v3[37] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[38] = v7;
  v3[39] = OUTLINED_FUNCTION_9_0(v7);
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v3[40] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[41] = v9;
  v3[42] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[43] = OUTLINED_FUNCTION_9_0(*(void *)(v10 - 8));
  uint64_t v11 = type metadata accessor for DialogPhase(0LL);
  v3[44] = OUTLINED_FUNCTION_9_0(*(void *)(v11 - 8));
  uint64_t v12 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[45] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[46] = v13;
  v3[47] = OUTLINED_FUNCTION_9_0(v13);
  uint64_t v14 = type metadata accessor for NLContextUpdate(0LL);
  v3[48] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[49] = v15;
  v3[50] = OUTLINED_FUNCTION_9_0(v15);
  uint64_t v16 = type metadata accessor for CATOption(0LL);
  v3[51] = OUTLINED_FUNCTION_9_0(*(void *)(v16 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

void ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void **)(v0 + 264);
  uint64_t v3 = type metadata accessor for WorkflowNLContextProvider();
  *(void *)(v0 + 4swift_unknownObjectWeakDestroy(v0 + 16) = swift_initStackObject(v3, v0 + 224);
  OUTLINED_FUNCTION_51_9((uint64_t)(v2 + 24));
  uint64_t v4 = v2[7];
  uint64_t v5 = type metadata accessor for RunLinkActionCATs(0LL);
  uint64_t v6 = swift_retain(v4);
  static CATOption.defaultMode.getter(v6);
  uint64_t v7 = OUTLINED_FUNCTION_51_2();
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v8 = OUTLINED_FUNCTION_51_2();
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_29_2();
  uint64_t v9 = CATWrapperSimple.__allocating_init(options:globals:)(v1, 0LL);
  type metadata accessor for RunLinkActionCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_29_2();
  OUTLINED_FUNCTION_51_2();
  uint64_t v10 = OUTLINED_FUNCTION_70_3();
  uint64_t inited = (void *)swift_initStackObject(v10, v0 + 16);
  *(void *)(v0 + 424) = inited;
  *(void *)(v0 + 43outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( (__int128 *)(v0 + 144),  v7,  v4,  v8,  v9,  v5,  inited);
  OUTLINED_FUNCTION_12_0();
  VoiceCommandNLContextProvider.makeContextForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
  uint64_t v12 = (void *)v2[3];
  *(void *)(v0 + 440) = v12;
  *(void *)(v0 + 448) = [v12 dialog];
  uint64_t v13 = v2[18];
  __swift_project_boxed_opaque_existential_1(v2 + 14, v2[17]);
  uint64_t v14 = (void *)swift_task_alloc(*(unsigned int *)(*(void *)(v13 + 8) + 4LL));
  *(void *)(v0 + 456) = v14;
  *uint64_t v14 = v0;
  v14[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  OUTLINED_FUNCTION_24_7();
  __asm { BR              X2 }

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void *)(*(void *)v5 + 456LL);
  v6[58] = a1;
  v6[59] = a2;
  v6[60] = a3;
  v6[61] = a4;
  v6[62] = v4;
  OUTLINED_FUNCTION_54_0(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  id v1 = [*(id *)(v0 + 440) viewSnippet];
  uint64_t v4 = v1;
  if (v1)
  {
    id v5 = [v1 viewData];

    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unint64_t v7 = v6;
  }

  else
  {
    unint64_t v7 = 0xF000000000000000LL;
  }

  uint64_t v46 = v7;
  *(void *)(v0 + 504) = v4;
  *(void *)(v0 + 51outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v7;
  uint64_t v8 = *(void *)(v0 + 392);
  uint64_t v9 = *(void *)(v0 + 400);
  uint64_t v10 = *(void *)(v0 + 384);
  uint64_t v12 = *(void *)(v0 + 344);
  uint64_t v11 = *(void *)(v0 + 352);
  uint64_t v13 = *(void *)(v0 + 328);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v15 = *(void *)(v0 + 320);
  static DialogPhase.confirmation.getter(v1, v2, v3);
  OutputGenerationManifest.init(dialogPhase:_:)(v11, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v9, v10);
  __swift_storeEnumTagSinglePayload(v12, 0LL, 1LL, v10);
  OutputGenerationManifest.nlContextUpdate.setter(v12);
  unsigned __int8 v16 = static TemplatingResult.getListenAfterSpeakingDisabled()();
  OutputGenerationManifest.listenAfterSpeaking.setter((v16 & 1) == 0);
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))( v14,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v15);
  char v17 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  if ((v17 & 1) != 0)
  {
    uint64_t v18 = *(void *)(v0 + 264);
    uint64_t v19 = v18 + 192;
    type metadata accessor for App(0LL);
    uint64_t v20 = *(void *)(v18 + 40);
    *(void *)(v0 + 520) = v20;
    unint64_t v21 = *(void *)(v18 + 48);
    *(void *)(v0 + 528) = v21;
    OUTLINED_FUNCTION_80();
    App.__allocating_init(appIdentifier:)(v20, v21);
    uint64_t v22 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(v19, 2);
    unint64_t v24 = v23;
    OUTLINED_FUNCTION_12_5();
    *(void *)(v0 + 536) = v24;
    *(void *)(v0 + 544) = v22;
    uint64_t v25 = v22 & 0xFFFFFFFFFFFFLL;
    unint64_t v26 = 0xE000000000000000LL;
    if (v24) {
      unint64_t v26 = v24;
    }
    else {
      uint64_t v25 = 0LL;
    }
    if ((v26 & 0x2000000000000000LL) != 0) {
      uint64_t v25 = HIBYTE(v26) & 0xF;
    }
    if (!v25)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v27 = *(void *)(v0 + 264);
      uint64_t v28 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
      uint64_t v29 = swift_retain(v27);
      uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
        uint64_t v33 = OUTLINED_FUNCTION_38(32LL);
        v47[0] = v33;
        *(_DWORD *)uint64_t v32 = 136315138;
        OUTLINED_FUNCTION_80();
        *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v32 + 4);
        OUTLINED_FUNCTION_14();
        swift_release();
        _os_log_impl( &dword_0,  v30,  v31,  "#ShortcutsLinkPromptForConfirmationFlowStrategy: failed to get app's displayName; bundleId='%s'",
          v32,
          0xCu);
        swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v33);
        OUTLINED_FUNCTION_1_0((uint64_t)v32);
      }

      else
      {
        swift_release();
      }
    }

    uint64_t v44 = *(void *)(v0 + 448);
    uint64_t v45 = (void *)swift_task_alloc(dword_217A04);
    *(void *)(v0 + 55outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v45;
    *uint64_t v45 = v0;
    v45[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    return LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:)( v44,  *(void *)(v0 + 256));
  }

  else
  {
    uint64_t v34 = (void *)swift_task_alloc(dword_216D04);
    *(void *)(v0 + 600) = v34;
    *uint64_t v34 = v0;
    v34[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    v47[13] = *(void *)(v0 + 376);
    v47[12] = v46;
    OUTLINED_FUNCTION_24_7();
    return ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:)( v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42);
  }

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *object;
  Swift::String_optional v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *boxed_opaque_existential_1;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t countAndFlagsBits;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v1 = *(void *)(v0 + 448);
  uint64_t v2 = [*(id *)(v0 + 560) catId];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter(v3);
  if (v1)
  {
    id v5 = DialogExecutionResult.firstDialogFullPrint()();
    object = v5.value._object;
    uint64_t countAndFlagsBits = v5.value._countAndFlagsBits;
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
  }

  uint64_t v43 = object;
  uint64_t v44 = (void *)(v0 + 184);
  *(void *)(v0 + 576) = object;
  uint64_t v42 = *(void **)(v0 + 560);
  unint64_t v6 = *(void *)(v0 + 544);
  unint64_t v7 = *(void *)(v0 + 536);
  uint64_t v30 = *(void *)(v0 + 528);
  uint64_t v8 = *(void *)(v0 + 520);
  uint64_t v37 = *(void *)(v0 + 504);
  uint64_t v38 = *(void *)(v0 + 512);
  uint64_t v35 = *(void *)(v0 + 480);
  uint64_t v36 = *(void *)(v0 + 488);
  uint64_t v33 = *(void *)(v0 + 464);
  uint64_t v34 = *(void *)(v0 + 472);
  uint64_t v10 = *(void *)(v0 + 280);
  uint64_t v9 = *(void *)(v0 + 288);
  uint64_t v11 = *(void **)(v0 + 264);
  uint64_t v12 = *(void *)(v0 + 272);
  if (!v7)
  {
    unint64_t v7 = 0xE000000000000000LL;
    unint64_t v6 = 0LL;
  }

  os_log_type_t v31 = v6;
  uint64_t v32 = v7;
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))( v9,  enum case for ImageElement.ImageStyle.default(_:),  v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  uint64_t v14 = type metadata accessor for _ProtoIdiom(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  unsigned __int8 v16 = *(unsigned __int8 *)(v15 + 80);
  char v17 = (v16 + 32) & ~v16;
  uint64_t v18 = swift_allocObject(v13, v17 + *(void *)(v15 + 72), v16 | 7);
  *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E650;
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v18 + v17, enum case for _ProtoIdiom.default(_:), v14);
  uint64_t v19 = specialized Set.init(_nonEmptyArrayLiteral:)(v18);
  static ImageElement.appIcon(_:imageStyle:idioms:)(v8, v30, v9, v19);
  swift_bridgeObjectRelease(v19);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
  uint64_t v39 = v11[22];
  uint64_t v40 = v11[23];
  __swift_project_boxed_opaque_existential_1(v11 + 19, v39);
  uint64_t v20 = type metadata accessor for WorkflowDataModels(0LL);
  *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0, v1 - 208) = v20;
  *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v44);
  void *boxed_opaque_existential_1 = v8;
  boxed_opaque_existential_1[1] = v30;
  boxed_opaque_existential_1[2] = v31;
  boxed_opaque_existential_1[3] = v32;
  boxed_opaque_existential_1[4] = v33;
  boxed_opaque_existential_1[5] = v34;
  boxed_opaque_existential_1[6] = v35;
  boxed_opaque_existential_1[7] = v36;
  boxed_opaque_existential_1[8] = v37;
  boxed_opaque_existential_1[9] = v38;
  *((_BYTE *)boxed_opaque_existential_1 + 80) = 0;
  boxed_opaque_existential_1[11] = countAndFlagsBits;
  boxed_opaque_existential_1[12] = v43;
  swift_storeEnumTagMultiPayload(boxed_opaque_existential_1, v20, 5LL);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v23 = OUTLINED_FUNCTION_19(v22, 40LL);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_17E150;
  *(void *)(v23 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v42;
  uint64_t v45 = v23;
  specialized Array._endMutation()(v23, v24, v25);
  *(void *)(v0 + outlined init with copy of AppShortcutInvoking(*(void *)(v0 + 944) + 96LL, v0 + 584) = v45;
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_71_1();
  OUTLINED_FUNCTION_52_5();
  swift_bridgeObjectRetain(v32);
  OUTLINED_FUNCTION_80();
  swift_bridgeObjectRetain(v36);
  OUTLINED_FUNCTION_71_1();
  unint64_t v26 = async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)[1];
  swift_bridgeObjectRetain(v43);
  uint64_t v27 = v42;
  uint64_t v28 = (void *)swift_task_alloc(v26);
  *(void *)(v0 + 59outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v28;
  *uint64_t v28 = v0;
  v28[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)( *(void *)(v0 + 248),  v44,  v45,  *(void *)(v0 + 376),  v39,  v40);
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_50_0();
  id v1 = (void *)(v0 + 184);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 592));
  OUTLINED_FUNCTION_14();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v1 = v0[72];
  uint64_t v2 = v0[67];
  uint64_t v3 = v0[61];
  uint64_t v4 = v0[59];
  id v5 = (void *)v0[56];
  uint64_t v15 = v0[47];
  unsigned __int8 v16 = v0[49];
  uint64_t v12 = (void *)v0[70];
  uint64_t v13 = v0[46];
  uint64_t v14 = v0[45];
  uint64_t v9 = v0[38];
  uint64_t v10 = v0[37];
  uint64_t v11 = v0[39];
  swift_bridgeObjectRelease(v0[66]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  if (v2) {
    unint64_t v6 = v2;
  }
  else {
    unint64_t v6 = 0xE000000000000000LL;
  }
  swift_bridgeObjectRelease(v6);
  OUTLINED_FUNCTION_58_7();
  swift_bridgeObjectRelease(v1);

  swift_release();
  swift_release();

  OUTLINED_FUNCTION_58_7();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  OUTLINED_FUNCTION_59_3();
  OUTLINED_FUNCTION_14_3(v16);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  unint64_t v7 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v7();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = v2[75];
  uint64_t v4 = v2[59];
  *id v5 = *v1;
  v2[76] = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  OUTLINED_FUNCTION_20_18();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_53_7();
  OUTLINED_FUNCTION_8_15();
  OUTLINED_FUNCTION_59_3();
  OUTLINED_FUNCTION_14_3(v0);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  id v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_28_1();
  id v1 = *(void *)(v0 + 392);

  OUTLINED_FUNCTION_12_5();
  swift_release();
  OUTLINED_FUNCTION_39_9();
  OUTLINED_FUNCTION_55_8(*(uint64_t (**)(uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_20_18();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_53_7();
  OUTLINED_FUNCTION_8_15();
  id v1 = *(void *)(v0 + 288);
  OUTLINED_FUNCTION_55_8(*(uint64_t (**)(uint64_t))(*(void *)(v0 + 392) + 8LL));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  OUTLINED_FUNCTION_28_1();
  uint64_t v3 = *(void *)(v0 + 392);

  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_53_7();
  OUTLINED_FUNCTION_8_15();
  OUTLINED_FUNCTION_39_9();
  id v1 = *(void *)(v0 + 288);
  OUTLINED_FUNCTION_55_8(*(uint64_t (**)(uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  swift_task_dealloc(v1);
  return OUTLINED_FUNCTION_16_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 552LL);
  v3[70] = a1;
  v3[71] = v1;
  OUTLINED_FUNCTION_54_0(v4);
  if (v1)
  {
    unint64_t v5 = v3[67];
    uint64_t v6 = v3[61];
    swift_bridgeObjectRelease(v3[59]);
    swift_bridgeObjectRelease(v6);
    if (v5) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = 0xE000000000000000LL;
    }
    swift_bridgeObjectRelease(v7);
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[55] = v15;
  v9[56] = v8;
  v9[53] = a8;
  v9[54] = v14;
  v9[51] = a6;
  v9[52] = a7;
  v9[49] = a4;
  v9[50] = a5;
  v9[47] = a2;
  v9[48] = a3;
  v9[46] = a1;
  uint64_t v10 = type metadata accessor for OutputGenerationManifest(0LL);
  v9[57] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[58] = v11;
  v9[59] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CATOption(0LL);
  v9[60] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch( ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:),  0LL,  0LL);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:)()
{
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v2 = *(void *)(v0 + 448);
  outlined init with copy of DeviceState(v2 + 192, v0 + 248);
  uint64_t v3 = *(void *)(v2 + 104);
  outlined init with copy of DeviceState(v2 + 64, v0 + 288);
  uint64_t v4 = type metadata accessor for RunLinkActionCATsSimple(0LL);
  uint64_t v5 = swift_retain(v3);
  static CATOption.defaultMode.getter(v5);
  uint64_t v16 = OUTLINED_FUNCTION_35_7();
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)(v1, 0LL);
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_18_7();
  OUTLINED_FUNCTION_35_7();
  uint64_t v6 = OUTLINED_FUNCTION_70_3();
  uint64_t inited = (void *)swift_initStackObject(v6, v0 + 16);
  *(void *)(v0 + 488) = inited;
  uint64_t v9 = *(void *)(v0 + 312);
  uint64_t v8 = *(void *)(v0 + 320);
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 288, v9);
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v10, v9);
  *(void *)(v0 + 496) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)( (__int128 *)(v0 + 248),  v3,  v16,  v15,  v4,  v12,  inited,  v9,  v8);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 288));
  OUTLINED_FUNCTION_31();
  uint64_t v13 = (void *)swift_task_alloc(dword_217A0C);
  *(void *)(v0 + 504) = v13;
  void *v13 = v0;
  v13[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:);
  return LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)( *(void *)(v0 + 384),  *(void *)(v0 + 376));
}

{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v1 = (void *)v0[48];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (void *)OUTLINED_FUNCTION_11_0();
    v0[66] = v3;
    *uint64_t v3 = v0;
    v3[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:);
    return LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:)(v0[48]);
  }

  else
  {
    char v17 = v0[58];
    uint64_t v18 = v0[59];
    uint64_t v19 = v0[57];
    uint64_t v20 = (id)v0[64];
    uint64_t v5 = v0[56];
    uint64_t v16 = v0[55];
    unint64_t v7 = v0[53];
    uint64_t v6 = v0[54];
    uint64_t v8 = v0[51];
    uint64_t v9 = v0[52];
    uint64_t v11 = v0[49];
    uint64_t v10 = v0[50];
    uint64_t v13 = *(void *)(v5 + 40);
    uint64_t v12 = *(void *)(v5 + 48);
    OUTLINED_FUNCTION_51_9(v5 + 192);
    OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_52_5();
    outlined copy of Data?(v7, v6);
    ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)( v13,  v12,  v11,  v10,  v8,  v9,  0,  0LL,  (uint64_t)(v0 + 18),  0LL,  v7,  v6,  v0 + 41);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v18, v16, v19);
    uint64_t v14 = [v20 patternId];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_64_3();
    OUTLINED_FUNCTION_49_7();
    uint64_t v15 = (void *)swift_task_alloc(dword_2164B4);
    v0[70] = v15;
    *uint64_t v15 = v0;
    v15[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:);
    return ActionConfirmationVisual.data.getter();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  OUTLINED_FUNCTION_10_1();
  uint64_t v5 = *(void *)(v4 + 528);
  *uint64_t v6 = *v3;
  *(void *)(v4 + 536) = v1;
  swift_task_dealloc(v5);
  if (!v1)
  {

    *(void *)(v4 + 544) = v0;
    *(void *)(v4 + 55outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v2;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  uint64_t v16 = *(void *)(v0 + 552);
  uint64_t v13 = *(void *)(v0 + 544);
  uint64_t v19 = *(void **)(v0 + 512);
  char v17 = *(void *)(v0 + 472);
  uint64_t v18 = *(void *)(v0 + 456);
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v14 = *(void *)(v0 + 440);
  uint64_t v15 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 408);
  uint64_t v4 = *(void *)(v0 + 416);
  uint64_t v6 = *(void *)(v0 + 392);
  unint64_t v7 = *(void *)(v0 + 400);
  uint64_t v9 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  OUTLINED_FUNCTION_51_9(v1 + 192);
  OUTLINED_FUNCTION_17_1();
  swift_bridgeObjectRetain(v7);
  OUTLINED_FUNCTION_80();
  outlined copy of Data?(v3, v2);
  ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)( v9,  v8,  v6,  v7,  v5,  v4,  0,  v16,  v0 + 144,  v13,  v3,  v2,  (void *)(v0 + 328));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v17, v14, v18);
  uint64_t v10 = [v19 patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_64_3();
  OUTLINED_FUNCTION_49_7();
  uint64_t v11 = (void *)swift_task_alloc(dword_2164B4);
  *(void *)(v0 + 560) = v11;
  *uint64_t v11 = v0;
  v11[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:);
  return ActionConfirmationVisual.data.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  OUTLINED_FUNCTION_10_1();
  uint64_t v5 = v4[70];
  *uint64_t v6 = *v3;
  v4[71] = v1;
  swift_task_dealloc(v5);
  if (!v1)
  {
    v4[72] = v0;
    v4[73] = v2;
  }

  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v1 = *(void **)(v0 + 448);
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter( *(void *)(v0 + 584),  *(void *)(v0 + 576),  *(void **)(v0 + 512));
  uint64_t v2 = v1[22];
  uint64_t v3 = v1[23];
  __swift_project_boxed_opaque_existential_1(v1 + 19, v2);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)[1]);
  *(void *)(v0 + 59outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v4;
  *uint64_t v4 = v0;
  v4[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)( *(void *)(v0 + 368),  *(void *)(v0 + 512),  *(void *)(v0 + 472),  v2,  v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 592);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 600) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v1 = (void *)v0[64];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[57];
  uint64_t v4 = v0[58];
  outlined release of ActionConfirmationVisual(v0 + 18);

  OUTLINED_FUNCTION_12_5();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return OUTLINED_FUNCTION_3_14(v5);
}

{
  uint64_t v0;
  swift_release();
  OUTLINED_FUNCTION_46_9();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 384);

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_46_9();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_3_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_24_12();

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_41_8();
  OUTLINED_FUNCTION_46_9();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_24_12();

  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_41_8();
  OUTLINED_FUNCTION_46_9();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_18_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:)( uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 504);
  *(void *)(v3 + 51outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a1;
  *(void *)(v3 + 520) = v1;
  OUTLINED_FUNCTION_54_0(v4);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 64));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 112));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 152));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 192));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 232));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 272));
  return v0;
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 312LL, 7LL);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance ShortcutsLinkPromptForConfirmationFlowStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_216CEC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ShortcutsLinkPromptForConfirmationFlowStrategy.parseConfirmationResponse(input:)(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance ShortcutsLinkPromptForConfirmationFlowStrategy( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)swift_task_alloc(dword_216CFC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)(a1, v4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance ShortcutsLinkPromptForConfirmationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)[1]);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance ShortcutsLinkPromptForConfirmationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)[1]);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance ShortcutsLinkPromptForConfirmationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse()[1]);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkPromptForConfirmationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse()[1]);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance ShortcutsLinkPromptForConfirmationFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)[1]);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, v9, a4);
}

void *specialized ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 *a11, __int128 *a12, __int128 *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a14[11] = a17;
  a14[12] = a20;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a14 + 8);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a17 - 8) + 32LL))( boxed_opaque_existential_1,  a7,  a17);
  a14[17] = a15;
  a14[18] = a18;
  unint64_t v23 = __swift_allocate_boxed_opaque_existential_1(a14 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a15 - 8) + 32LL))(v23, a9, a15);
  a14[22] = a16;
  a14[23] = a19;
  unint64_t v24 = __swift_allocate_boxed_opaque_existential_1(a14 + 19);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a16 - 8) + 32LL))(v24, a10, a16);
  a14[2] = a1;
  a14[3] = a2;
  a14[4] = a3;
  a14[5] = a4;
  a14[6] = a5;
  a14[7] = a6;
  a14[13] = a8;
  outlined init with take of AceServiceInvokerAsync(a11, (uint64_t)(a14 + 24));
  outlined init with take of AceServiceInvokerAsync(a12, (uint64_t)(a14 + 29));
  outlined init with take of AceServiceInvokerAsync(a13, (uint64_t)(a14 + 34));
  return a14;
}

uint64_t sub_60244()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_216CDC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for Flow.execute() in conformance WorkflowRunnerFlow;
  return closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:)(a1, v4, v5, v6);
}

uint64_t outlined destroy of Logger?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *associated type witness table accessor for PromptForConfirmationFlowStrategyAsync.AnswerType : ConfirmationResponseProviding in ShortcutsLinkPromptForConfirmationFlowStrategy()
{
  return &protocol witness table for SimpleConfirmationResponseProvider;
}

uint64_t type metadata accessor for ShortcutsLinkPromptForConfirmationFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin46ShortcutsLinkPromptForConfirmationFlowStrategy);
}

void *outlined release of ActionConfirmationVisual(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  unint64_t v7 = a1[12];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  outlined consume of Data?(v6, v7);
  return a1;
}

uint64_t OUTLINED_FUNCTION_8_15()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_12_15@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
}

uint64_t OUTLINED_FUNCTION_13_11@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))( (char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
}

uint64_t OUTLINED_FUNCTION_18_13(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v2, v1, a1);
}

void OUTLINED_FUNCTION_20_18()
{
}

uint64_t OUTLINED_FUNCTION_23_12()
{
  return SimpleConfirmationResponseProvider.init(_:)(v0);
}

void *OUTLINED_FUNCTION_24_12()
{
  return outlined release of ActionConfirmationVisual((void *)(v0 + 144));
}

void OUTLINED_FUNCTION_30_10()
{
}

void *OUTLINED_FUNCTION_38_9( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 *a11, __int128 *a12, __int128 *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return specialized ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)( a1,  a2,  *(void *)(v21 - 120),  *(void *)(v21 - 112),  *(void *)(v21 - 104),  *(void *)(v21 - 96),  v20,  *(void *)(v21 - 88),  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20);
}

  ;
}

__n128 OUTLINED_FUNCTION_40_10()
{
  return *(__n128 *)(v0 - 160);
}

uint64_t OUTLINED_FUNCTION_41_8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_46_9()
{
  return swift_task_dealloc(*(void *)(v0 + 480));
}

uint64_t OUTLINED_FUNCTION_49_7()
{
  return OutputGenerationManifest.responseViewId.setter(v0);
}

uint64_t OUTLINED_FUNCTION_51_9(uint64_t a1)
{
  return outlined init with copy of DeviceState(a1, v1);
}

uint64_t OUTLINED_FUNCTION_52_5()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_53_7()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_55_8@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  return a1(v1);
}

uint64_t OUTLINED_FUNCTION_56_7()
{
  return __swift_mutable_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_58_7()
{
  return outlined consume of Data?(v1, v0);
}

  ;
}

void OUTLINED_FUNCTION_64_3()
{
}

uint64_t OUTLINED_FUNCTION_70_3()
{
  return type metadata accessor for LinkActionDialogTemplating();
}

uint64_t OUTLINED_FUNCTION_71_1()
{
  return outlined copy of Data?(v1, v0);
}

uint64_t *VoiceCommandsAppPolicyHandler.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return &static VoiceCommandsAppPolicyHandler.instance;
}

void *one-time initialization function for instance()
{
  uint64_t v0 = type metadata accessor for VoiceCommandsAppPolicyHandler();
  OUTLINED_FUNCTION_19(v0, 40LL);
  unint64_t result = VoiceCommandsAppPolicyHandler.().init()();
  static VoiceCommandsAppPolicyHandler.instance = (uint64_t)result;
  return result;
}

uint64_t static VoiceCommandsAppPolicyHandler.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once(&one-time initialization token for instance, one-time initialization function for instance);
  }
  return swift_retain(static VoiceCommandsAppPolicyHandler.instance);
}

void *VoiceCommandsAppPolicyHandler.().init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[2] = 0LL;
  type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v12 = static DispatchQoS.userInitiated.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter(v12);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000027LL,  0x8000000000192120LL,  v11,  v8,  v5,  0LL);
  v1[4] = &_swiftEmptyDictionarySingleton;
  id v13 = objc_allocWithZone(&OBJC_CLASS___DMFApplicationPolicyMonitor);
  swift_retain(v1);
  id v14 = @nonobjc DMFApplicationPolicyMonitor.init(policyChangeHandler:)( (uint64_t)partial apply for closure #1 in VoiceCommandsAppPolicyHandler.().init(),  (uint64_t)v1);
  uint64_t v15 = (void *)v1[2];
  v1[2] = v14;

  return v1;
}

#error "608A0: call analysis failed (funcsize=203)"
unint64_t DMFPolicy.debugDescription.getter(uint64_t a1)
{
  unint64_t result;
  unint64_t result = 0x63696C6F50464D44LL;
  switch(a1)
  {
    case 0LL:
    case 1LL:
    case 2LL:
      return result;
    case 3LL:
      unint64_t result = 0xD000000000000014LL;
      break;
    default:
      unint64_t result = 0xD000000000000011LL;
      break;
  }

  return result;
}

uint64_t VoiceCommandsAppPolicyHandler.executeWithApps(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  static DispatchWorkItemFlags.barrier.getter(v7);
  uint64_t v10 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F5E98, 24LL);
  swift_weakInit(v10 + 16, v2);
  uint64_t v13 = v10;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  OS_dispatch_queue.sync<A>(flags:execute:)( v9,  partial apply for closure #1 in VoiceCommandsAppPolicyHandler.executeWithApps(_:),  v12,  (char *)&type metadata for () + 8);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  return swift_release();
}

uint64_t closure #1 in VoiceCommandsAppPolicyHandler.executeWithApps(_:)( uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 32;
    swift_beginAccess(result + 32, v7, 33LL, 0LL);
    a2(v6);
    swift_endAccess(v7);
    return swift_release(v5);
  }

  return result;
}

#error "60E04: call analysis failed (funcsize=94)"
void closure #1 in VoiceCommandsAppPolicyHandler.register(bundleIdentifier:)( void *a1,  uint64_t a2,  unint64_t a3)
{
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v5 = *a1;
  if (*(void *)(*a1 + 16LL))
  {
    swift_bridgeObjectRetain(*a1);
    specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    uint64_t v7 = v6;
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v7 = 0;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  uint64_t v9 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v10 = (void *)Logger.logObject.getter(v9);
  uint64_t v11 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled((os_log_t)v10, v11))
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
    if ((v7 & 1) != 0) {
      return;
    }
    goto LABEL_16;
  }

  uint64_t v12 = swift_slowAlloc(22LL, -1LL);
  uint64_t v15 = swift_slowAlloc(64LL, -1LL);
  uint64_t v17 = v15;
  *(_DWORD *)uint64_t v12 = 136315394;
  if ((v7 & 1) != 0) {
    uint64_t v13 = 1702195828LL;
  }
  else {
    uint64_t v13 = 0x65736C6166LL;
  }
  if ((v7 & 1) != 0) {
    uint64_t v14 = 0xE400000000000000LL;
  }
  else {
    uint64_t v14 = 0xE500000000000000LL;
  }
  uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v12 + 4);
  swift_bridgeObjectRelease(v14);
  *(_WORD *)(v12 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
  swift_bridgeObjectRetain(a3);
  uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v17);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v12 + 14);
  swift_bridgeObjectRelease_n(a3, 3LL);
  _os_log_impl(&dword_0, (os_log_t)v10, v11, "VoiceCommandsAppPolicyHandler isRegistered, %s %s", (uint8_t *)v12, 0x16u);
  swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v15, -1LL, -1LL);
  swift_slowDealloc(v12, -1LL, -1LL);

  if ((v7 & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRetain(a3);
    specialized Dictionary._Variant.setValue(_:forKey:)(0LL, a2, a3);
    swift_bridgeObjectRelease(a3);
  }

uint64_t VoiceCommandsAppPolicyHandler.getDMFPolicy(bundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v5 = OUTLINED_FUNCTION_48();
  uint64_t v6 = (os_log_s *)__swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  uint64_t v7 = OUTLINED_FUNCTION_5_10(a2);
  Logger.logObject.getter(v7);
  os_log_type_t v8 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_21_6(v8))
  {
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v10 = OUTLINED_FUNCTION_38(32LL);
    v26[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v11 = OUTLINED_FUNCTION_5_14();
    uint64_t v12 = OUTLINED_FUNCTION_18_14(v11);
    OUTLINED_FUNCTION_3_19(v12, v13, v14, v15, v16, v17, v18, v19, v25, v26[0]);
    OUTLINED_FUNCTION_37_3(a2);
    OUTLINED_FUNCTION_31_2(&dword_0, v6, v2, "VoiceCommandsAppPolicyHandler getDMFPolicy, %s", v9);
    OUTLINED_FUNCTION_30_3(v10, v20, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v10);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
  }

  else
  {

    OUTLINED_FUNCTION_19_1(a2);
  }

  uint64_t v21 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F5EC0, 32LL);
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(_BYTE *)(v21 + 24) = 1;
  uint64_t v22 = (void *)OUTLINED_FUNCTION_19((uint64_t)&unk_1F5EE8, 40LL);
  v22[2] = v21;
  v22[3] = a1;
  void v22[4] = a2;
  OUTLINED_FUNCTION_5_14();
  VoiceCommandsAppPolicyHandler.executeWithApps(_:)( (uint64_t)partial apply for closure #1 in VoiceCommandsAppPolicyHandler.getDMFPolicy(bundleIdentifier:),  (uint64_t)v22);
  swift_retain(v21);
  swift_release();
  OUTLINED_FUNCTION_21_10(v21 + 16, (uint64_t)v26);
  uint64_t v23 = *(void *)(v21 + 16);
  OUTLINED_FUNCTION_53_7();
  return v23;
}

void closure #1 in VoiceCommandsAppPolicyHandler.getDMFPolicy(bundleIdentifier:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 + 16;
  uint64_t v8 = *a1;
  swift_bridgeObjectRetain(a4);
  uint64_t v9 = specialized Dictionary.subscript.getter(a3, a4, v8);
  LOBYTE(v8) = v10;
  swift_bridgeObjectRelease(a4);
  swift_beginAccess(v7, v30, 1LL, 0LL);
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(_BYTE *)(a2 + 24) = v8 & 1;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
  uint64_t v12 = swift_retain_n(a2, 2LL);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_beginAccess(v7, &v26, 0LL, 0LL);
    char v17 = *(_BYTE *)(a2 + 24);
    uint64_t v28 = *(void *)(a2 + 16);
    v29[0] = v17;
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DMFPolicy?);
    uint64_t v19 = String.init<A>(describing:)(&v28, v18);
    unint64_t v21 = v20;
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v15 + 4);
    swift_release_n(a2, 2LL);
    swift_bridgeObjectRelease(v21);
    _os_log_impl(&dword_0, v13, v14, "VoiceCommandsAppPolicyHandler getDMFPolicy, %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a2, 2LL);
  }

  uint64_t v22 = swift_beginAccess(v7, &v28, 0LL, 0LL);
  if (*(_BYTE *)(a2 + 24) == 1)
  {
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "VoiceCommandsAppPolicyHandler checkPolicy, app policy undefined", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }
  }

uint64_t VoiceCommandsAppPolicyHandler.refreshAllAppsAsync()()
{
  uint64_t v0 = OUTLINED_FUNCTION_19((uint64_t)&unk_1F5E48, 24LL);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v1 = v0 + 16;
  VoiceCommandsAppPolicyHandler.executeWithApps(_:)( (uint64_t)partial apply for closure #1 in VoiceCommandsAppPolicyHandler.refreshAllAppsAsync(),  v0);
  OUTLINED_FUNCTION_21_10(v1, (uint64_t)v4);
  uint64_t v2 = OUTLINED_FUNCTION_5_14();
  VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)(v2);
  swift_release();
  return OUTLINED_FUNCTION_37();
}

uint64_t closure #1 in VoiceCommandsAppPolicyHandler.refreshAllAppsAsync()(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain(*a1);
  specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease(v4);
  swift_beginAccess(v3, v10, 1LL, 0LL);
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  return swift_bridgeObjectRelease(v8);
}

void VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = OUTLINED_FUNCTION_48();
  Class isa = (os_log_s *)__swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  uint64_t v6 = OUTLINED_FUNCTION_5_14();
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    *(_DWORD *)uint64_t v9 = 134217984;
    uint64_t v15 = OUTLINED_FUNCTION_17_14( (uint64_t)v9,  v10,  (uint64_t)(v9 + 4),  (uint64_t)(v9 + 12),  v11,  v12,  v13,  v14,  *(void *)(a1 + 16));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, v16, v17);
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_31_2(&dword_0, v7, v8, "VoiceCommandsAppPolicyHandler refreshApps : %ld", v9);
    OUTLINED_FUNCTION_1_0((uint64_t)v9);
  }

  else
  {

    uint64_t v18 = OUTLINED_FUNCTION_37();
  }

  if (!*(void *)(a1 + 16))
  {
    Logger.logObject.getter(v18);
    os_log_type_t v22 = OUTLINED_FUNCTION_58();
    if (!OUTLINED_FUNCTION_45_0(v22)) {
      goto LABEL_14;
    }
    uint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v23 = 0;
    os_log_type_t v24 = "VoiceCommandsAppPolicyHandler refreshApps, no apps registered";
LABEL_13:
    _os_log_impl(&dword_0, isa, (os_log_type_t)v2, v24, v23, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v23);
    goto LABEL_14;
  }

  uint64_t v19 = *(void **)(v2 + 16);
  if (!v19)
  {
    Class isa = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_45_0(v25)) {
      goto LABEL_14;
    }
    uint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v23 = 0;
    os_log_type_t v24 = "VoiceCommandsAppPolicyHandler appPolicyMonitor not initialized";
    goto LABEL_13;
  }

  id v20 = v19;
  Class isa = (os_log_s *)Array._bridgeToObjectiveC()().super.isa;
  v26[4] = partial apply for closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:);
  void v26[5] = v2;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 1107296256LL;
  __int128 v26[2] = thunk for @escaping @callee_guaranteed (@guaranteed [String : NSNumber]?, @guaranteed Error?) -> ();
  uint64_t v26[3] = &block_descriptor_3;
  unint64_t v21 = _Block_copy(v26);
  swift_retain(v2);
  OUTLINED_FUNCTION_53_7();
  [v20 requestPoliciesForBundleIdentifiers:isa completionHandler:v21];
  _Block_release(v21);

LABEL_14:
}

void closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "VoiceCommandsAppPolicyHandler requestPolicies completion returned", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  if (!a2)
  {
    if (a1)
    {
      uint64_t v17 = swift_allocObject(&unk_1F5E20, 24LL, 7LL);
      *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
      swift_bridgeObjectRetain(a1);
      VoiceCommandsAppPolicyHandler.executeWithApps(_:)( (uint64_t)partial apply for closure #1 in closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:),  v17);
      uint64_t v18 = swift_release();
      oslog = (os_log_s *)Logger.logObject.getter(v18);
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(oslog, v19)) {
        goto LABEL_15;
      }
      id v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v20 = 0;
      unint64_t v21 = "VoiceCommandsAppPolicyHandler refreshApps complete";
    }

    else
    {
      oslog = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(oslog, v19)) {
        goto LABEL_15;
      }
      id v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v20 = 0;
      unint64_t v21 = "VoiceCommandsAppPolicyHandler refreshApps policies not set";
    }

    _os_log_impl(&dword_0, oslog, v19, v21, v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
    goto LABEL_15;
  }

  swift_errorRetain(a2);
  swift_errorRetain(a2);
  uint64_t v10 = swift_errorRetain(a2);
  oslog = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_getErrorValue(a2, v25, v24);
    uint64_t v14 = Error.localizedDescription.getter(v24[1], v24[2]);
    unint64_t v16 = v15;
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v12 + 4);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl( &dword_0,  oslog,  v11,  "VoiceCommandsAppPolicyHandler refreshApps appPolicyMonitor requestPolicies has an error : %s",  v12,  0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    swift_errorRelease(a2);
    return;
  }

  swift_errorRelease(a2);
  swift_errorRelease(a2);
  swift_errorRelease(a2);
LABEL_15:
}

uint64_t closure #1 in closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)( void *a1, uint64_t a2)
{
  uint64_t v60 = a2 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a2 + 64);
  int64_t v61 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v62 = a2;
  __n128 v6 = swift_bridgeObjectRetain(a2);
  uint64_t v7 = 0LL;
  v6.n128_u64[0] = 136315394LL;
  __n128 v59 = v6;
  os_log_type_t v57 = "rovider";
  uint64_t v58 = (char *)&type metadata for Any + 8;
  BOOL v55 = "DMFPolicy.UNKNOWN";
  unint64_t v56 = (unint64_t)"DMFPolicy.blocked";
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  uint64_t v63 = v7;
  for (unint64_t i = v8 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v62 + 48) + 16 * i);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    uint64_t v17 = *(void **)(*(void *)(v62 + 56) + 8 * i);
    swift_bridgeObjectRetain_n(v16, 2LL);
    id v18 = v17;
    static DMFPolicy.from(number:)( (uint64_t)v18,  v19,  v20,  v21,  v22,  v23,  v24,  v25,  (uint64_t)v55,  (id)v56,  (uint64_t)v57,  (uint64_t)v58,  v59.n128_i64[0],  v59.n128_i64[1],  v60,  v61,  v62,  v63,  (uint64_t)v18,  v66[0],  v66[1],  v66[2]);
    uint64_t v27 = v26;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
    uint64_t v29 = swift_bridgeObjectRetain_n(v16, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t v33 = swift_slowAlloc(64LL, -1LL);
      v66[0] = v33;
      *(_DWORD *)uint64_t v32 = v59.n128_u32[0];
      swift_bridgeObjectRetain(v16);
      *(void *)(v32 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v66);
      swift_bridgeObjectRelease_n(v16, 3LL);
      *(_WORD *)(v32 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
      unint64_t v34 = 0xEC0000004B4F2E79LL;
      uint64_t v35 = 0x63696C6F50464D44LL;
      switch(v27)
      {
        case 0LL:
          break;
        case 1LL:
          unint64_t v34 = 0xEE006E7261772E79LL;
          break;
        case 2LL:
          unint64_t v34 = 0xED00006B73612E79LL;
          break;
        case 3LL:
          uint64_t v35 = 0xD000000000000014LL;
          unint64_t v34 = v56 | 0x8000000000000000LL;
          break;
        case 4LL:
          unint64_t v36 = (unint64_t)v55;
          goto LABEL_29;
        default:
          unint64_t v36 = (unint64_t)v57;
LABEL_29:
          unint64_t v34 = v36 | 0x8000000000000000LL;
          uint64_t v35 = 0xD000000000000011LL;
          break;
      }

      *(void *)(v32 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, v66);
      swift_bridgeObjectRelease(v34);
      _os_log_impl(&dword_0, v30, v31, "VoiceCommandsAppPolicyHandler refreshApps, %s to %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v33, 2LL, v58);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v16, 2LL);
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v66[0] = *a1;
    uint64_t v38 = v66[0];
    *a1 = 0x8000000000000000LL;
    unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    uint64_t v41 = *(void *)(v38 + 16);
    BOOL v42 = (v40 & 1) == 0;
    Swift::Int v43 = v41 + v42;
    if (__OFADD__(v41, v42))
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }

    unint64_t v44 = v39;
    char v45 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, DMFPolicy>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v43))
    {
      unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
      if ((v45 & 1) != (v47 & 1)) {
        goto LABEL_46;
      }
      unint64_t v44 = v46;
    }

    uint64_t v48 = (void *)v66[0];
    if ((v45 & 1) != 0)
    {
      *(void *)(*(void *)(v66[0] + 56) + 8 * v44) = v27;
    }

    else
    {
      *(void *)(v66[0] + 8 * (v44 >> 6) + 64) |= 1LL << v44;
      uint64_t v49 = (uint64_t *)(v48[6] + 16 * v44);
      *uint64_t v49 = v15;
      v49[1] = v16;
      *(void *)(v48[7] + 8 * v44) = v27;
      uint64_t v50 = v48[2];
      BOOL v51 = __OFADD__(v50, 1LL);
      uint64_t v52 = v50 + 1;
      if (v51) {
        goto LABEL_43;
      }
      __int128 v48[2] = v52;
      swift_bridgeObjectRetain(v16);
    }

    uint64_t v53 = *a1;
    *a1 = v48;

    swift_bridgeObjectRelease_n(v16, 2LL);
    swift_bridgeObjectRelease(v53);
    uint64_t v7 = v64;
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_44;
    }
    if (v10 >= v61) {
      break;
    }
    unint64_t v11 = *(void *)(v60 + 8 * v10);
    int64_t v12 = v7 + 1;
    if (!v11)
    {
      int64_t v12 = v7 + 2;
      if (v7 + 2 >= v61) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v60 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v7 + 3;
        if (v7 + 3 >= v61) {
          return swift_release();
        }
        unint64_t v11 = *(void *)(v60 + 8 * v12);
        if (!v11)
        {
          uint64_t v13 = v7 + 4;
          if (v7 + 4 >= v61) {
            return swift_release();
          }
          unint64_t v11 = *(void *)(v60 + 8 * v13);
          if (v11)
          {
            int64_t v12 = v7 + 4;
            goto LABEL_18;
          }

          while (1)
          {
            int64_t v12 = v13 + 1;
            if (__OFADD__(v13, 1LL)) {
              break;
            }
            if (v12 >= v61) {
              return swift_release();
            }
            unint64_t v11 = *(void *)(v60 + 8 * v12);
            ++v13;
            if (v11) {
              goto LABEL_18;
            }
          }

void static DMFPolicy.from(number:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v22;
  a22 = v23;
  uint64_t v25 = v24;
  if ((unint64_t)[v24 integerValue] >= 5)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v26 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
    id v27 = v25;
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      os_log_type_t v31 = (void *)OUTLINED_FUNCTION_38(8LL);
      *(_DWORD *)uint64_t v30 = 138412290;
      a10 = v27;
      id v32 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v30 + 4);
      *os_log_type_t v31 = v27;

      OUTLINED_FUNCTION_31_2(&dword_0, v28, v29, "DMFPolicy parse unknown number %@, default to OK", v30);
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_30_3((uint64_t)v31, v34, v33);
      OUTLINED_FUNCTION_1_0((uint64_t)v31);
      OUTLINED_FUNCTION_1_0((uint64_t)v30);
    }

    else
    {
    }
  }

  OUTLINED_FUNCTION_13_4();
}

uint64_t VoiceCommandsAppPolicyHandler.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return v0;
}

uint64_t VoiceCommandsAppPolicyHandler.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t protocol witness for VoiceCommandsAppPolicyHandling.isAllowedByScreenTime(bundleIdentifier:) in conformance VoiceCommandsAppPolicyHandler()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160LL))() & 1;
}

id @nonobjc DMFApplicationPolicyMonitor.init(policyChangeHandler:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v6[4] = a1;
    uint64_t v7 = a2;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 1107296256LL;
    _OWORD v6[2] = thunk for @escaping @callee_guaranteed () -> ();
    void v6[3] = &block_descriptor_18;
    uint64_t v3 = _Block_copy(v6);
    swift_release(v7);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  id v4 = [v2 initWithPolicyChangeHandler:v3];
  _Block_release(v3);
  return v4;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t type metadata accessor for VoiceCommandsAppPolicyHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin29VoiceCommandsAppPolicyHandler);
}

void partial apply for closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)( uint64_t a1, uint64_t a2)
{
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_2(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_6252C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)( void *a1)
{
  return closure #1 in closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)( a1,  *(void *)(v1 + 16));
}

void specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (v7) {
    __break(1u);
  }
  else {
    OUTLINED_FUNCTION_25_14(v5, v6);
  }
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t partial apply for closure #1 in VoiceCommandsAppPolicyHandler.refreshAllAppsAsync()(void *a1)
{
  return closure #1 in VoiceCommandsAppPolicyHandler.refreshAllAppsAsync()(a1, v1);
}

uint64_t sub_625E0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void partial apply for closure #1 in VoiceCommandsAppPolicyHandler.register(bundleIdentifier:)(void *a1)
{
}

uint64_t sub_6260C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for closure #1 in VoiceCommandsAppPolicyHandler.executeWithApps(_:)()
{
  return closure #1 in VoiceCommandsAppPolicyHandler.executeWithApps(_:)( *(void *)(v0 + 16),  *(void (**)(uint64_t))(v0 + 24));
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = OUTLINED_FUNCTION_13_12(a1, a6 + 8 * (a1 >> 6));
  uint64_t v8 = (void *)(v7[6] + 16 * result);
  *uint64_t v8 = v9;
  v8[1] = v10;
  unint64_t v11 = (void *)(v7[7] + 16 * result);
  *unint64_t v11 = v12;
  v11[1] = v13;
  uint64_t v14 = v7[2];
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    uint64_t v7[2] = v16;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  a2,  v10);
  *(_BYTE *)(*(void *)(a4 + 56) + a1) = a3;
  uint64_t v12 = *(void *)(a4 + 16);
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = v14;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = OUTLINED_FUNCTION_13_12(a1, a4 + 8 * (a1 >> 6));
  *(_BYTE *)(v5[6] + result) = v6;
  *(_BYTE *)(v5[7] + result) = v7;
  uint64_t v8 = v5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    void v5[2] = v10;
  }
  return result;
}

uint64_t sub_62754()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_62764()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void partial apply for closure #1 in VoiceCommandsAppPolicyHandler.getDMFPolicy(bundleIdentifier:)( uint64_t *a1)
{
}

unint64_t OUTLINED_FUNCTION_1_16( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1LL << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_19( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v10);
}

uint64_t OUTLINED_FUNCTION_6_14(uint64_t a1, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v1, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_13_12@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) |= 1LL << result;
  return result;
}

  ;
}

uint64_t *OUTLINED_FUNCTION_17_14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t OUTLINED_FUNCTION_18_14(uint64_t a1, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v1, (uint64_t *)va);
}

void OUTLINED_FUNCTION_25_14(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2;
}

void Siri_Nlu_External_UserDialogAct.extractAutoShortcutInvocation(groupIndex:)()
{
  uint64_t v78 = v2;
  uint64_t v79 = v3;
  uint64_t v5 = v4;
  char v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_35();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = OUTLINED_FUNCTION_35_11();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_35();
  uint64_t v16 = v15 - v14;
  if (!OUTLINED_FUNCTION_39_10())
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v43 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v43, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v44 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v44))
    {
      char v45 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_46_10(v45);
      OUTLINED_FUNCTION_3_20(&dword_0, v46, v47, "can't extract UsoTask for AutoShortcutInvocation");
      OUTLINED_FUNCTION_1_0(v1);
    }

    OUTLINED_FUNCTION_13_3();
    OUTLINED_FUNCTION_37_11();
    __swift_storeEnumTagSinglePayload(v48, v49, v50, v51);
    return;
  }

  static UsoTask_CodegenConverter.convert(task:)(v77);
  if (!v77[3])
  {
    OUTLINED_FUNCTION_61();
    outlined destroy of URL?((uint64_t)v77, &demangling cache variable for type metadata for Any?);
LABEL_53:
    OUTLINED_FUNCTION_13_3();
    OUTLINED_FUNCTION_37_11();
    goto LABEL_54;
  }

  uint64_t v17 = OUTLINED_FUNCTION_60_4();
  if ((OUTLINED_FUNCTION_35_6((uint64_t)&v76, (uint64_t)v77, (uint64_t)&type metadata for Any + 8, v17) & 1) == 0)
  {
LABEL_52:
    OUTLINED_FUNCTION_61();
    goto LABEL_53;
  }

  uint64_t v18 = swift_retain(v76);
  ((void (*)(void *__return_ptr, uint64_t))dispatch thunk of Uso_VerbTemplate_Reference.reference.getter)( v77,  v18);
  OUTLINED_FUNCTION_21_13();
  if (!v77[0])
  {
LABEL_46:
    swift_release();
    goto LABEL_52;
  }

  OUTLINED_FUNCTION_24_2();
  uint64_t v19 = OUTLINED_FUNCTION_14_15();
  OUTLINED_FUNCTION_12_5();
  if (!v19)
  {
    OUTLINED_FUNCTION_21_13();
    goto LABEL_46;
  }

  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 + 16);
  if (!v21)
  {
    swift_release();
LABEL_48:
    swift_release();
LABEL_51:
    OUTLINED_FUNCTION_20();
    goto LABEL_52;
  }

  uint64_t v65 = v11;
  int v67 = v7;
  uint64_t v69 = 0LL;
  uint64_t countAndFlagsBits = 0LL;
  uint64_t v72 = 0LL;
  object = 0LL;
  uint64_t v68 = 0LL;
  uint64_t v71 = 0LL;
  uint64_t v74 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v66 = v20;
  unint64_t v23 = v20 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v24 = *(void *)(v13 + 72);
  uint64_t v25 = *(uint64_t (**)(void, void, void))(v13 + 16);
  uint64_t v75 = v25;
  do
  {
    uint64_t v26 = v25(v16, v23, v12);
    uint64_t v27 = ((uint64_t (*)(uint64_t))UsoIdentifier.groupIndex.getter)(v26);
    if ((v27 & 0x100000000LL) == 0 && (_DWORD)v27 == (_DWORD)v5)
    {
      uint64_t v28 = v5;
      uint64_t v30 = UsoIdentifier.namespace.getter(v27);
      uint64_t v31 = v29;
      if (v29)
      {
        if (v30 == 0xD000000000000018LL && v29 == 0x80000000001945D0LL
          || (OUTLINED_FUNCTION_11_15(0xD000000000000018LL, 0x80000000001945D0LL, v30) & 1) != 0)
        {
          OUTLINED_FUNCTION_20();
          OUTLINED_FUNCTION_1_2();
          uint64_t v74 = OUTLINED_FUNCTION_56_8();
          uint64_t v22 = v32;
LABEL_15:
          uint64_t v5 = v28;
LABEL_31:
          uint64_t v25 = v75;
          goto LABEL_32;
        }

        if (v30 == 0xD000000000000014LL && v31 == 0x80000000001945B0LL
          || (OUTLINED_FUNCTION_11_15(0xD000000000000014LL, 0x80000000001945B0LL, v30) & 1) != 0)
        {
          OUTLINED_FUNCTION_20();
          swift_bridgeObjectRelease(v71);
          uint64_t v68 = OUTLINED_FUNCTION_56_8();
          uint64_t v71 = v33;
          goto LABEL_15;
        }
      }

      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v31)
      {
        if (v34 == v30 && v31 == v35)
        {
          OUTLINED_FUNCTION_1_2();
          OUTLINED_FUNCTION_20();
        }

        else
        {
          char v37 = OUTLINED_FUNCTION_11_15(v34, v35, v30);
          OUTLINED_FUNCTION_1_2();
          OUTLINED_FUNCTION_20();
          if ((v37 & 1) == 0) {
            goto LABEL_30;
          }
        }

        swift_bridgeObjectRelease(v72);
        OUTLINED_FUNCTION_43_7();
        OUTLINED_FUNCTION_56_8();
        Swift::String_optional v38 = String.extractActionIdentifier()();
        uint64_t countAndFlagsBits = v38.value._countAndFlagsBits;
        object = v38.value._object;
        uint64_t v39 = OUTLINED_FUNCTION_20();
        uint64_t v69 = ((uint64_t (*)(uint64_t))UsoIdentifier.appBundleId.getter)(v39);
        uint64_t v72 = v40;
      }

      else
      {
        OUTLINED_FUNCTION_1_2();
      }

LABEL_32:
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
    v23 += v24;
    --v21;
  }

  while (v21);
  swift_bridgeObjectRelease(v66);
  if (!v22)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease(v72);
    OUTLINED_FUNCTION_43_7();
    swift_bridgeObjectRelease(v71);
    goto LABEL_52;
  }

  if (!object)
  {
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_45_5();
    swift_release();
    swift_bridgeObjectRelease(v72);
    goto LABEL_51;
  }

  if (!v72)
  {
    swift_bridgeObjectRelease(object);
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_45_5();
    goto LABEL_48;
  }

  uint64_t v41 = v22;
  if (v71)
  {
    uint64_t v42 = v65;
    UUID.init(uuidString:)(v68, v71);
    OUTLINED_FUNCTION_20();
  }

  else
  {
    type metadata accessor for UUID(0LL);
    uint64_t v42 = v65;
    OUTLINED_FUNCTION_37_11();
    __swift_storeEnumTagSinglePayload(v56, v57, v58, v59);
  }

  uint64_t v60 = type metadata accessor for AutoShortcutProvider();
  uint64_t v61 = swift_allocObject(v60, 24LL, 7LL);
  *(void *)(v61 + swift_weakDestroy(v0 + 16) = [objc_allocWithZone(LNAutoShortcutsProvider) init];
  uint64_t v62 = (int *)OUTLINED_FUNCTION_13_3();
  uint64_t v63 = (uint64_t *)((char *)v67 + v62[8]);
  v63[3] = v60;
  v63[4] = (uint64_t)&protocol witness table for AutoShortcutProvider;
  *uint64_t v63 = v61;
  id v64 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  swift_release();
  OUTLINED_FUNCTION_45_5();
  OUTLINED_FUNCTION_61();
  *int v67 = v69;
  v67[1] = v72;
  v67[2] = countAndFlagsBits;
  v67[3] = (uint64_t)object;
  v67[4] = v74;
  v67[5] = v41;
  outlined init with take of String?(v42, (uint64_t)v67 + v62[7], &demangling cache variable for type metadata for UUID?);
  *(uint64_t *)((char *)v67 + v62[9]) = (uint64_t)v64;
  uint64_t v52 = (uint64_t)v67;
  uint64_t v53 = 0LL;
  uint64_t v54 = 1LL;
  uint64_t v55 = (uint64_t)v62;
LABEL_54:
  __swift_storeEnumTagSinglePayload(v52, v53, v54, v55);
  OUTLINED_FUNCTION_24_0();
}

    swift_bridgeObjectRelease();
    uint64_t v101 = v99;
    swift_bridgeObjectRetain(v99);
    specialized Array.append<A>(contentsOf:)();
    NLContextUpdate.displayHints.setter(v101);
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v60 = OUTLINED_FUNCTION_23_4(v59);
    *(_OWORD *)(v60 + swift_weakDestroy(v0 + 16) = xmmword_17E150;
    uint64_t v61 = v93;
    uint64_t v62 = OUTLINED_FUNCTION_15_12();
    id v64 = v63;
    uint64_t v65 = specialized _arrayForceCast<A, B>(_:)(v95);
    OUTLINED_FUNCTION_20();
    uint64_t v66 = PaginatedItemContainer.pageSize.getter(v97);
    int v67 = PaginatedItemContainer.getCurrentPageIndex()();
    uint64_t v101 = v61;
    uint64_t v102 = 0;
    uint64_t v103 = v62;
    uint64_t v104 = v64;
    uint64_t v105 = v94;
    uint64_t v106 = v88;
    uint64_t v107 = v65;
    uint64_t v108 = 0LL;
    uint64_t v109 = v66;
    __int128 v110 = 0;
    uint64_t v111 = v67;
    uint64_t v112 = 0;
    swift_bridgeObjectRetain(v88);
    uint64_t v68 = CustomIntentStateAttachment.asDictionary()();
    uint64_t v69 = objc_allocWithZone(&OBJC_CLASS___SABaseAceObject);
    swift_bridgeObjectRetain(v68);
    @nonobjc SABaseAceObject.init(dictionary:)(v70);
    if (!v71) {
      goto LABEL_45;
    }
    uint64_t v72 = v71;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v73 = swift_bridgeObjectRelease();
    *(void *)(v60 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v72;
    uint64_t v100 = v60;
    specialized Array._endMutation()(v73, v74, v75);
    NLContextUpdate.conversationStateAttachments.setter(v100);
    uint64_t v22 = v89;
    uint64_t v76 = INCodableAttribute.disambiguationPromptTargets()();
    NLContextUpdate.weightedPromptResponseTargets.setter(v76);
    NLContextUpdate.weightedPromptStrict.setter(1LL);
    a7 = v92;
    uint64_t v14 = v91;
    uint64_t v15 = v90;
    goto LABEL_34;
  }

    if (v8 < v112)
    {
      if (__OFSUB__(v8, v11)) {
        goto LABEL_143;
      }
      if (v8 - v11 < v110)
      {
        if (__OFADD__(v11, v110)) {
          goto LABEL_146;
        }
        if (v11 + v110 >= v112) {
          char v37 = v112;
        }
        else {
          char v37 = v11 + v110;
        }
        if (v37 < v11) {
          goto LABEL_147;
        }
        if (v8 != v37)
        {
          Swift::String_optional v38 = (void *)(v107 + 24 * v8);
          do
          {
            uint64_t v39 = (uint64_t *)(v9 + 24 * v8);
            uint64_t v40 = *v39;
            uint64_t v41 = v39[1];
            uint64_t v42 = v11;
            uint64_t v43 = v38;
            do
            {
              os_log_type_t v44 = v43[1];
              char v45 = v40 == *v43 && v41 == v44;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, *v43, v44, 1LL) & 1) == 0) {
                break;
              }
              if (!v9) {
                goto LABEL_150;
              }
              uint64_t v40 = v43[3];
              uint64_t v41 = v43[4];
              uint64_t v46 = v43[5];
              uint64_t v47 = v43[2];
              *(_OWORD *)(v43 + 3) = *(_OWORD *)v43;
              v43[5] = v47;
              *uint64_t v43 = v40;
              v43[1] = v41;
              v43[2] = v46;
              v43 -= 3;
              ++v42;
            }

            while (v8 != v42);
            ++v8;
            v38 += 3;
          }

          while (v8 != v37);
          uint64_t v8 = v37;
        }
      }
    }

    if (v8 < v11) {
      goto LABEL_142;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v10 + 2) + 1LL,  1,  v10);
    }
    uint64_t v49 = *((void *)v10 + 2);
    uint64_t v48 = *((void *)v10 + 3);
    uint64_t v50 = v49 + 1;
    if (v49 >= v48 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v48 > 1),  v49 + 1,  1,  v10);
    }
    *((void *)v10 + outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v50;
    uint64_t v51 = v10 + 32;
    uint64_t v52 = &v10[16 * v49 + 32];
    *(void *)uint64_t v52 = v11;
    *((void *)v52 + 1) = v8;
    if (v49) {
      break;
    }
    uint64_t v50 = 1LL;
    uint64_t v9 = v113;
LABEL_101:
    uint64_t v3 = v112;
    if (v8 >= v112) {
      goto LABEL_110;
    }
  }

  uint64_t v9 = v113;
  while (1)
  {
    uint64_t v53 = v50 - 1;
    if (v50 >= 4)
    {
      uint64_t v58 = &v51[16 * v50];
      uint64_t v59 = *((void *)v58 - 8);
      uint64_t v60 = *((void *)v58 - 7);
      id v64 = __OFSUB__(v60, v59);
      uint64_t v61 = v60 - v59;
      if (v64) {
        goto LABEL_127;
      }
      uint64_t v63 = *((void *)v58 - 6);
      uint64_t v62 = *((void *)v58 - 5);
      id v64 = __OFSUB__(v62, v63);
      uint64_t v56 = v62 - v63;
      uint64_t v57 = v64;
      if (v64) {
        goto LABEL_128;
      }
      uint64_t v65 = v50 - 2;
      uint64_t v66 = &v51[16 * v50 - 32];
      uint64_t v68 = *(void *)v66;
      int v67 = *((void *)v66 + 1);
      id v64 = __OFSUB__(v67, v68);
      uint64_t v69 = v67 - v68;
      if (v64) {
        goto LABEL_129;
      }
      id v64 = __OFADD__(v56, v69);
      uint64_t v70 = v56 + v69;
      if (v64) {
        goto LABEL_131;
      }
      if (v70 >= v61)
      {
        uint64_t v88 = &v51[16 * v53];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        id v64 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v64) {
          goto LABEL_137;
        }
        uint64_t v81 = v56 < v91;
        goto LABEL_90;
      }
    }

    else
    {
      if (v50 != 3)
      {
        uint64_t v82 = *((void *)v10 + 4);
        uint64_t v83 = *((void *)v10 + 5);
        id v64 = __OFSUB__(v83, v82);
        uint64_t v75 = v83 - v82;
        uint64_t v76 = v64;
        goto LABEL_84;
      }

      uint64_t v55 = *((void *)v10 + 4);
      uint64_t v54 = *((void *)v10 + 5);
      id v64 = __OFSUB__(v54, v55);
      uint64_t v56 = v54 - v55;
      uint64_t v57 = v64;
    }

    if ((v57 & 1) != 0) {
      goto LABEL_130;
    }
    uint64_t v65 = v50 - 2;
    uint64_t v71 = &v51[16 * v50 - 32];
    uint64_t v73 = *(void *)v71;
    uint64_t v72 = *((void *)v71 + 1);
    uint64_t v74 = __OFSUB__(v72, v73);
    uint64_t v75 = v72 - v73;
    uint64_t v76 = v74;
    if (v74) {
      goto LABEL_132;
    }
    uint64_t v77 = &v51[16 * v53];
    uint64_t v79 = *(void *)v77;
    uint64_t v78 = *((void *)v77 + 1);
    id v64 = __OFSUB__(v78, v79);
    uint64_t v80 = v78 - v79;
    if (v64) {
      goto LABEL_134;
    }
    if (__OFADD__(v75, v80)) {
      goto LABEL_136;
    }
    if (v75 + v80 >= v56)
    {
      uint64_t v81 = v56 < v80;
LABEL_90:
      if (v81) {
        uint64_t v53 = v65;
      }
      goto LABEL_92;
    }

void *Siri_Nlu_External_UserDialogAct.convertToStarterShortcut()()
{
  uint64_t v72 = v1;
  uint64_t v73 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL??);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_52_6();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_31_9();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v57 - v10;
  uint64_t v12 = OUTLINED_FUNCTION_35_11();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_35();
  uint64_t v16 = v15 - v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_35();
  uint64_t v20 = v19 - v18;
  if (!OUTLINED_FUNCTION_39_10())
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v38 = OUTLINED_FUNCTION_48();
    uint64_t v39 = (void *)OUTLINED_FUNCTION_84(v38, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_40(v40))
    {
      uint64_t v41 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v41);
      OUTLINED_FUNCTION_27(&dword_0, v42, v43, "can't extract UsoTask for starterShortcut");
      OUTLINED_FUNCTION_1_0(v13);
    }

    return 0LL;
  }

  static UsoTask_CodegenConverter.convert(task:)(v71);
  if (!v71[3])
  {
    OUTLINED_FUNCTION_21_13();
    os_log_type_t v44 = &demangling cache variable for type metadata for Any?;
    char v45 = v71;
LABEL_21:
    outlined destroy of URL?((uint64_t)v45, v44);
    return 0LL;
  }

  uint64_t v21 = OUTLINED_FUNCTION_60_4();
  if ((OUTLINED_FUNCTION_35_6((uint64_t)&v70, (uint64_t)v71, (uint64_t)&type metadata for Any + 8, v21) & 1) == 0)
  {
LABEL_24:
    OUTLINED_FUNCTION_21_13();
    return 0LL;
  }

  uint64_t v22 = v70;
  uint64_t v23 = OUTLINED_FUNCTION_24_2();
  ((void (*)(void *__return_ptr, uint64_t))dispatch thunk of Uso_VerbTemplate_Reference.reference.getter)( v71,  v23);
  OUTLINED_FUNCTION_12_5();
  if (!v71[0])
  {
LABEL_23:
    OUTLINED_FUNCTION_12_5();
    goto LABEL_24;
  }

  uint64_t v65 = v4;
  uint64_t v67 = v22;
  uint64_t v24 = v71[0];
  uint64_t v25 = swift_retain(v71[0]);
  uint64_t v63 = ((uint64_t (*)(uint64_t))dispatch thunk of UsoEntity_common_VoiceCommand.name.getter)(v25);
  uint64_t v27 = v26;
  OUTLINED_FUNCTION_12_5();
  if (!v27)
  {
    OUTLINED_FUNCTION_62_6();
    goto LABEL_23;
  }

  uint64_t v64 = v27;
  OUTLINED_FUNCTION_24_2();
  uint64_t v28 = OUTLINED_FUNCTION_14_15();
  OUTLINED_FUNCTION_12_5();
  if (!v28)
  {
    OUTLINED_FUNCTION_62_6();
    OUTLINED_FUNCTION_12_5();
    OUTLINED_FUNCTION_43_7();
    goto LABEL_24;
  }

  uint64_t v60 = v0;
  uint64_t v61 = v24;
  uint64_t v59 = v11;
  uint64_t v29 = *(void *)(v28 + 16);
  uint64_t v62 = v28;
  if (!v29)
  {
    uint64_t v37 = 1LL;
    goto LABEL_31;
  }

  uint64_t v58 = v8;
  OUTLINED_FUNCTION_49_8();
  uint64_t v31 = v28 + v30;
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  uint64_t v68 = *(void *)(v13 + 72);
  uint64_t v69 = v32;
  swift_bridgeObjectRetain(v28);
  unint64_t v66 = 0x8000000000192990LL;
  while (1)
  {
    uint64_t v33 = v69(v16, v31, v12);
    uint64_t v34 = UsoIdentifier.namespace.getter(v33);
    if (!v35) {
      goto LABEL_13;
    }
    if (v34 == 0xD000000000000010LL && v35 == v66) {
      break;
    }
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, 0xD000000000000010LL, 0x8000000000192990LL, 0LL);
    OUTLINED_FUNCTION_20();
    if ((v36 & 1) != 0) {
      goto LABEL_29;
    }
LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
    v31 += v68;
    if (!--v29)
    {
      OUTLINED_FUNCTION_63_4();
      uint64_t v37 = 1LL;
      goto LABEL_30;
    }
  }

  OUTLINED_FUNCTION_63_4();
LABEL_29:
  OUTLINED_FUNCTION_20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v20, v16, v12);
  uint64_t v37 = 0LL;
LABEL_30:
  uint64_t v8 = v58;
LABEL_31:
  uint64_t v47 = v60;
  uint64_t v48 = v65;
  __swift_storeEnumTagSinglePayload(v20, v37, 1LL, v12);
  OUTLINED_FUNCTION_63_4();
  uint64_t v49 = OUTLINED_FUNCTION_41_9(v20, 1LL, v12);
  if (v50)
  {
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_43_7();
    OUTLINED_FUNCTION_21_13();
    os_log_type_t v44 = &demangling cache variable for type metadata for UsoIdentifier?;
    char v45 = (void *)v20;
    goto LABEL_21;
  }

  uint64_t v51 = UsoIdentifier.value.getter(v49);
  uint64_t v53 = v52;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v20, v12);
  if (one-time initialization token for semanticToURL != -1) {
    swift_once(&one-time initialization token for semanticToURL, one-time initialization function for semanticToURL);
  }
  uint64_t v54 = static TopLevelStarterShortcuts.semanticToURL;
  OUTLINED_FUNCTION_17_1();
  specialized Dictionary.subscript.getter(v51, v53, v54, v47);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_62_6();
  swift_release();
  OUTLINED_FUNCTION_21_13();
  OUTLINED_FUNCTION_41_9(v47, 1LL, v48);
  if (v50)
  {
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_43_7();
    os_log_type_t v44 = &demangling cache variable for type metadata for URL??;
    char v45 = (void *)v47;
    goto LABEL_21;
  }

  uint64_t v55 = (uint64_t)v59;
  outlined init with take of String?( v47,  (uint64_t)v59,  (uint64_t *)&demangling cache variable for type metadata for URL?);
  outlined init with take of String?(v55, v8, (uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v56 = type metadata accessor for InstallVoiceShortcutInvocationData(0LL);
  swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
  return InstallVoiceShortcutInvocationData.init(semantic:url:utterance:)(v51, v53, v8, v63, v64);
}

void Siri_Nlu_External_UserDialogAct.convertToVoiceCommandTask()()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShortcutIdentification?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_31_9();
  uint64_t v7 = (void *)(v5 - v6);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v56 - v9);
  uint64_t v11 = OUTLINED_FUNCTION_42_5();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_31_9();
  uint64_t v15 = v13 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v56 - v17;
  if (!specialized static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)( 0,  v1)) {
    goto LABEL_8;
  }
  static UsoTask_CodegenConverter.convert(task:)(&v58);
  if (!v59)
  {
    OUTLINED_FUNCTION_61();
    outlined destroy of URL?((uint64_t)&v58, &demangling cache variable for type metadata for Any?);
LABEL_8:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v22 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v22, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v23 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v23))
    {
      uint64_t v24 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_46_10(v24);
      OUTLINED_FUNCTION_3_20(&dword_0, v25, v26, "can't extract UsoTask for voiceCommand-task");
      OUTLINED_FUNCTION_1_0(v11);
    }

    goto LABEL_13;
  }

  outlined init with take of Any(&v58, &v60);
  OUTLINED_FUNCTION_17_15();
  uint64_t v19 = OUTLINED_FUNCTION_60_4();
  if (OUTLINED_FUNCTION_35_6((uint64_t)&v57, (uint64_t)&v58, (uint64_t)&type metadata for Any + 8, v19))
  {
    ShortcutIdentification.init(runTask:)(v57, v10);
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_53_8();
    OUTLINED_FUNCTION_41_9((uint64_t)v10, 1LL, v11);
    if (!v20)
    {
      outlined init with take of ShortcutIdentification((uint64_t)v10, (uint64_t)v18);
      uint64_t v32 = (uint64_t)v18;
LABEL_23:
      outlined init with take of ShortcutIdentification(v32, v3);
      uint64_t v37 = OUTLINED_FUNCTION_51_10();
      OUTLINED_FUNCTION_48_8(v37);
      uint64_t v27 = OUTLINED_FUNCTION_34_10();
      goto LABEL_14;
    }

    uint64_t v21 = (uint64_t)v10;
  }

  else
  {
    OUTLINED_FUNCTION_17_15();
    uint64_t v31 = type metadata accessor for UsoTask_execute_common_VoiceCommand(0LL);
    if (!OUTLINED_FUNCTION_35_6((uint64_t)&v57, (uint64_t)&v58, (uint64_t)&type metadata for Any + 8, v31))
    {
      OUTLINED_FUNCTION_17_15();
      uint64_t v33 = type metadata accessor for UsoTask_enable_common_Setting(0LL);
      if (OUTLINED_FUNCTION_35_6((uint64_t)&v57, (uint64_t)&v58, (uint64_t)&type metadata for Any + 8, v33))
      {
        OUTLINED_FUNCTION_24_2();
        OUTLINED_FUNCTION_66_3();
        OUTLINED_FUNCTION_12_5();
        uint64_t v34 = v58;
        uint64_t v35 = v3;
        char v36 = 0;
      }

      else
      {
        OUTLINED_FUNCTION_17_15();
        uint64_t v38 = type metadata accessor for UsoTask_disable_common_Setting(0LL);
        if (OUTLINED_FUNCTION_35_6( (uint64_t)&v57,  (uint64_t)&v58,  (uint64_t)&type metadata for Any + 8,  v38))
        {
          OUTLINED_FUNCTION_24_2();
          OUTLINED_FUNCTION_66_3();
          OUTLINED_FUNCTION_12_5();
          uint64_t v34 = v58;
          uint64_t v35 = v3;
          char v36 = 1;
        }

        else
        {
          OUTLINED_FUNCTION_17_15();
          uint64_t v39 = type metadata accessor for UsoTask_toggle_common_Setting(0LL);
          if (!OUTLINED_FUNCTION_35_6( (uint64_t)&v57,  (uint64_t)&v58,  (uint64_t)&type metadata for Any + 8,  v39))
          {
            if (one-time initialization token for voiceCommands != -1) {
              swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
            }
            uint64_t v40 = OUTLINED_FUNCTION_48();
            uint64_t v41 = (void *)__swift_project_value_buffer(v40, (uint64_t)static Logger.voiceCommands);
            uint64_t v42 = OUTLINED_FUNCTION_17_15();
            Logger.logObject.getter(v42);
            os_log_type_t v43 = OUTLINED_FUNCTION_73();
            if (OUTLINED_FUNCTION_23_7(v43))
            {
              os_log_type_t v44 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
              unint64_t v45 = OUTLINED_FUNCTION_38(32LL);
              unint64_t v57 = v45;
              *os_log_type_t v44 = 136315138;
              uint64_t v46 = v59;
              uint64_t v47 = __swift_project_boxed_opaque_existential_1(&v58, v59);
              uint64_t DynamicType = swift_getDynamicType(v47, v46, 1LL);
              uint64_t v49 = _typeName(_:qualified:)(DynamicType, 0LL);
              unint64_t v51 = v50;
              uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, (uint64_t *)&v57);
              OUTLINED_FUNCTION_68_3((uint64_t)&v56, (uint64_t)&v57);
              swift_bridgeObjectRelease(v51);
              __swift_destroy_boxed_opaque_existential_1Tm(&v58);
              OUTLINED_FUNCTION_22_10(&dword_0, v52, v53, "unknown task type: %s");
              OUTLINED_FUNCTION_38_10(v54, v55, (uint64_t)&type metadata for Any + 8);
              OUTLINED_FUNCTION_1_0(v45);
              OUTLINED_FUNCTION_1_0((uint64_t)v44);
            }

            else
            {

              __swift_destroy_boxed_opaque_existential_1Tm(&v58);
            }

            OUTLINED_FUNCTION_61();
            OUTLINED_FUNCTION_53_8();
            goto LABEL_13;
          }

          OUTLINED_FUNCTION_24_2();
          OUTLINED_FUNCTION_66_3();
          OUTLINED_FUNCTION_12_5();
          uint64_t v34 = v58;
          uint64_t v35 = v3;
          char v36 = 2;
        }
      }

      VoiceCommandTask.init(mode:reference:)(v36, v34, v35);
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_61();
      OUTLINED_FUNCTION_53_8();
      goto LABEL_15;
    }

    ShortcutIdentification.init(exeTask:)();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_53_8();
    OUTLINED_FUNCTION_41_9((uint64_t)v7, 1LL, v11);
    if (!v20)
    {
      outlined init with take of ShortcutIdentification((uint64_t)v7, v15);
      uint64_t v32 = v15;
      goto LABEL_23;
    }

    uint64_t v21 = (uint64_t)v7;
  }

  outlined destroy of URL?(v21, &demangling cache variable for type metadata for ShortcutIdentification?);
LABEL_13:
  OUTLINED_FUNCTION_51_10();
  uint64_t v27 = OUTLINED_FUNCTION_23();
LABEL_14:
  __swift_storeEnumTagSinglePayload(v27, v28, v29, v30);
LABEL_15:
  OUTLINED_FUNCTION_24_0();
}

void Siri_Nlu_External_UserDialogAct.extractGeneralizedAppShortcutInvocation(groupIndex:provider:)()
{
  uint64_t v115 = v1;
  uint64_t v120 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = OUTLINED_FUNCTION_35_11();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_61_6();
  uint64_t v116 = v7;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v8);
  uint64_t v119 = (char *)&v106 - v9;
  OUTLINED_FUNCTION_65_2();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v106 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v106 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v106 - v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_61_6();
  uint64_t v114 = v20;
  OUTLINED_FUNCTION_65_2();
  __chkstk_darwin(v21);
  uint64_t v117 = (char *)&v106 - v22;
  OUTLINED_FUNCTION_65_2();
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v106 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v106 - v27;
  uint64_t v29 = OUTLINED_FUNCTION_39_10();
  if (!v29)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v49 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v49, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v50 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v50))
    {
      unint64_t v51 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_46_10(v51);
      OUTLINED_FUNCTION_3_20(&dword_0, v52, v53, "can't extract UsoTask for AutoShortcutInvocation");
      OUTLINED_FUNCTION_1_0((uint64_t)v18);
    }

    goto LABEL_43;
  }

  uint64_t v30 = v29;
  static UsoTask_CodegenConverter.convert(task:)(&v121);
  if (!v122)
  {
    outlined destroy of URL?((uint64_t)&v121, &demangling cache variable for type metadata for Any?);
    goto LABEL_38;
  }

  uint64_t v31 = type metadata accessor for UsoTask_execute_common_VoiceCommand(0LL);
  if ((OUTLINED_FUNCTION_35_6((uint64_t)&v123, (uint64_t)&v121, (uint64_t)&type metadata for Any + 8, v31) & 1) == 0)
  {
LABEL_38:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v54 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v54, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v55 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_31_0(v55))
    {
      uint64_t v56 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_46_10(v56);
      OUTLINED_FUNCTION_3_20(&dword_0, v57, v58, "Could not cast to VoiceCommand task to create AppShortcut invocation");
      OUTLINED_FUNCTION_1_0((uint64_t)v18);
    }

    OUTLINED_FUNCTION_21_13();
LABEL_43:
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = 0u;
    goto LABEL_44;
  }

  uint64_t v32 = v123;
  uint64_t v33 = OUTLINED_FUNCTION_24_2();
  dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.reference.getter(&v121, v33);
  uint64_t v111 = v32;
  OUTLINED_FUNCTION_12_5();
  uint64_t v34 = v121;
  uint64_t v118 = v6;
  if (!(void)v121 || (uint64_t v34 = OUTLINED_FUNCTION_14_15(), swift_release(), !v34))
  {
    OUTLINED_FUNCTION_19_10((uint64_t)v28);
    goto LABEL_46;
  }

  uint64_t v109 = v30;
  uint64_t v35 = *(void *)(v34 + 16);
  if (!v35)
  {
LABEL_31:
    OUTLINED_FUNCTION_19_10((uint64_t)v28);
    OUTLINED_FUNCTION_20();
    uint64_t v30 = v109;
    goto LABEL_46;
  }

  uint64_t v107 = v13;
  uint64_t v108 = v4;
  __int128 v110 = v28;
  OUTLINED_FUNCTION_49_8();
  uint64_t v37 = v34 + v36;
  uint64_t v112 = *(void *)(v6 + 72);
  uint64_t v113 = IdentifierNamespaceItemId;
  uint64_t v106 = v34;
  OUTLINED_FUNCTION_17_1();
  while (1)
  {
    uint64_t v38 = OUTLINED_FUNCTION_26_9((uint64_t)v18, v37);
    uint64_t v39 = UsoIdentifier.namespace.getter(v38);
    uint64_t v41 = v40;
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v43;
    if ((v120 & 0x100000000LL) != 0) {
      break;
    }
    if (!v41)
    {
      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_26_9((uint64_t)v16, (uint64_t)v18);
LABEL_24:
      uint64_t v6 = v118;
      OUTLINED_FUNCTION_57_4((uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t))(v118 + 8));
      goto LABEL_29;
    }

    BOOL v44 = v39 == v42 && v41 == v43;
    if (v44)
    {
      OUTLINED_FUNCTION_37();
      OUTLINED_FUNCTION_20();
      uint64_t v46 = OUTLINED_FUNCTION_26_9((uint64_t)v16, (uint64_t)v18);
    }

    else
    {
      char v45 = OUTLINED_FUNCTION_11_15(v39, v41, v42);
      OUTLINED_FUNCTION_37();
      OUTLINED_FUNCTION_20();
      uint64_t v46 = OUTLINED_FUNCTION_26_9((uint64_t)v16, (uint64_t)v18);
      if ((v45 & 1) == 0) {
        goto LABEL_24;
      }
    }

    uint64_t v34 = UsoIdentifier.groupIndex.getter(v46);
    uint64_t v6 = v118;
    OUTLINED_FUNCTION_57_4((uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t))(v118 + 8));
    if ((v34 & 0x100000000LL) == 0 && (_DWORD)v34 == (_DWORD)v120)
    {
LABEL_87:
      OUTLINED_FUNCTION_14();
      goto LABEL_89;
    }

LABEL_29:
    OUTLINED_FUNCTION_57_4((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    v37 += v112;
    if (!--v35)
    {
      uint64_t v34 = v106;
      OUTLINED_FUNCTION_20();
      uint64_t v13 = v107;
      uint64_t v4 = v108;
      uint64_t v28 = v110;
      goto LABEL_31;
    }
  }

  if (!v41)
  {
    OUTLINED_FUNCTION_20();
    uint64_t v6 = v118;
    goto LABEL_29;
  }

  if (v39 != v42 || v41 != v43)
  {
    char v48 = OUTLINED_FUNCTION_11_15(v39, v41, v42);
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_20();
    uint64_t v6 = v118;
    if ((v48 & 1) != 0) {
      goto LABEL_87;
    }
    goto LABEL_29;
  }

  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_20();
  uint64_t v6 = v118;
LABEL_89:
  uint64_t v28 = v110;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v110, v18, v5);
  __swift_storeEnumTagSinglePayload((uint64_t)v28, 0LL, 1LL, v5);
  OUTLINED_FUNCTION_14();
  uint64_t v4 = v108;
  uint64_t v30 = v109;
  uint64_t v13 = v107;
LABEL_46:
  outlined init with copy of UsoIdentifier?((uint64_t)v28, (uint64_t)v26);
  OUTLINED_FUNCTION_41_9((uint64_t)v26, 1LL, v5);
  if (v44)
  {
    outlined destroy of URL?((uint64_t)v26, &demangling cache variable for type metadata for UsoIdentifier?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v59 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v59, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v60 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_31_0(v60))
    {
      uint64_t v61 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_46_10(v61);
      OUTLINED_FUNCTION_3_20( &dword_0,  v62,  v63,  "Could not extract App Shortcut action identifier from USO parse when creating AppShortcut invocation");
      OUTLINED_FUNCTION_1_0((uint64_t)v18);
    }

    swift_release();

    OUTLINED_FUNCTION_21_13();
    outlined destroy of URL?((uint64_t)v28, &demangling cache variable for type metadata for UsoIdentifier?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(v4 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    goto LABEL_44;
  }

  __int128 v110 = v28;
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v64(v13, v26, v5);
  uint64_t v65 = OUTLINED_FUNCTION_24_2();
  uint64_t v66 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter(v65);
  uint64_t v67 = OUTLINED_FUNCTION_12_5();
  if (!v66
    || (uint64_t v68 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.appEntity.getter(v67), OUTLINED_FUNCTION_61(), !v68)
    || (uint64_t v69 = OUTLINED_FUNCTION_14_15(), OUTLINED_FUNCTION_12_5(), !v69))
  {
    uint64_t v90 = (uint64_t)v117;
    uint64_t v91 = OUTLINED_FUNCTION_19_10((uint64_t)v117);
    uint64_t v71 = v118;
    goto LABEL_83;
  }

  uint64_t v70 = *(void *)(v69 + 16);
  uint64_t v71 = v118;
  if (!v70)
  {
LABEL_81:
    uint64_t v90 = (uint64_t)v117;
    OUTLINED_FUNCTION_19_10((uint64_t)v117);
    uint64_t v91 = swift_bridgeObjectRelease(v69);
    goto LABEL_83;
  }

  uint64_t v107 = v13;
  uint64_t v108 = v4;
  uint64_t v109 = v30;
  OUTLINED_FUNCTION_49_8();
  uint64_t v73 = v69 + v72;
  uint64_t v74 = *(void *)(v71 + 72);
  uint64_t v113 = v69;
  swift_bridgeObjectRetain(v69);
  uint64_t v75 = (uint64_t)v119;
  while (2)
  {
    uint64_t v76 = OUTLINED_FUNCTION_26_9(v75, v73);
    uint64_t v77 = UsoIdentifier.namespace.getter(v76);
    uint64_t v79 = v78;
    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v82 = v81;
    if ((v120 & 0x100000000LL) == 0)
    {
      if (v79)
      {
        if (v77 == v80 && v79 == v81)
        {
          OUTLINED_FUNCTION_37();
          OUTLINED_FUNCTION_20();
          uint64_t v85 = OUTLINED_FUNCTION_23_13();
          goto LABEL_77;
        }

        char v84 = OUTLINED_FUNCTION_11_15(v77, v79, v80);
        OUTLINED_FUNCTION_37();
        OUTLINED_FUNCTION_20();
        uint64_t v85 = OUTLINED_FUNCTION_23_13();
        if ((v84 & 1) != 0)
        {
LABEL_77:
          uint64_t v88 = v82;
          uint64_t v89 = UsoIdentifier.groupIndex.getter(v85);
          uint64_t v71 = v118;
          OUTLINED_FUNCTION_57_4(v88, *(uint64_t (**)(uint64_t, uint64_t))(v118 + 8));
          if ((v89 & 0x100000000LL) == 0 && (_DWORD)v89 == (_DWORD)v120)
          {
LABEL_90:
            OUTLINED_FUNCTION_14();
            goto LABEL_92;
          }

          goto LABEL_79;
        }
      }

      else
      {
        OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_23_13();
      }

      uint64_t v71 = v118;
      OUTLINED_FUNCTION_57_4(v82, *(uint64_t (**)(uint64_t, uint64_t))(v118 + 8));
LABEL_79:
      uint64_t v75 = (uint64_t)v119;
      OUTLINED_FUNCTION_57_4((uint64_t)v119, *(uint64_t (**)(uint64_t, uint64_t))(v71 + 8));
      v73 += v74;
      if (!--v70)
      {
        uint64_t v69 = v113;
        swift_bridgeObjectRelease(v113);
        uint64_t v4 = v108;
        uint64_t v13 = v107;
        goto LABEL_81;
      }

      continue;
    }

    break;
  }

  if (!v79)
  {
    OUTLINED_FUNCTION_20();
    uint64_t v71 = v118;
    goto LABEL_79;
  }

  if (v77 != v80 || v79 != v81)
  {
    char v87 = OUTLINED_FUNCTION_11_15(v77, v79, v80);
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_20();
    uint64_t v71 = v118;
    if ((v87 & 1) != 0) {
      goto LABEL_90;
    }
    goto LABEL_79;
  }

  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_20();
  uint64_t v71 = v118;
LABEL_92:
  uint64_t v90 = (uint64_t)v117;
  v64(v117, v119, v5);
  __swift_storeEnumTagSinglePayload(v90, 0LL, 1LL, v5);
  uint64_t v91 = OUTLINED_FUNCTION_14();
  uint64_t v4 = v108;
  uint64_t v13 = v107;
LABEL_83:
  uint64_t v92 = UsoIdentifier.appBundleId.getter(v91);
  uint64_t v119 = (char *)v93;
  uint64_t v120 = v92;
  uint64_t v94 = (uint64_t)v13;
  uint64_t v118 = UsoIdentifier.value.getter(v92);
  uint64_t v96 = v95;
  uint64_t v97 = v90;
  uint64_t v98 = v114;
  outlined init with copy of UsoIdentifier?(v97, v114);
  uint64_t v99 = OUTLINED_FUNCTION_41_9(v98, 1LL, v5);
  if (v44)
  {
    outlined destroy of URL?(v98, &demangling cache variable for type metadata for UsoIdentifier?);
    uint64_t v100 = 0LL;
    uint64_t v102 = 0LL;
  }

  else
  {
    uint64_t v100 = UsoIdentifier.value.getter(v99);
    uint64_t v102 = v101;
    OUTLINED_FUNCTION_57_4(v98, *(uint64_t (**)(uint64_t, uint64_t))(v71 + 8));
  }

  uint64_t v103 = v71;
  outlined init with copy of DeviceState(v115, (uint64_t)&v121);
  id v104 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  swift_release();
  OUTLINED_FUNCTION_21_13();
  outlined destroy of URL?((uint64_t)v117, &demangling cache variable for type metadata for UsoIdentifier?);
  OUTLINED_FUNCTION_57_4(v94, *(uint64_t (**)(uint64_t, uint64_t))(v103 + 8));
  outlined destroy of URL?((uint64_t)v110, &demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v105 = (uint64_t)v119;
  *(void *)(v4 + 40) = v120;
  *(void *)(v4 + 48) = v105;
  *(void *)(v4 + 24) = v100;
  *(void *)(v4 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v102;
  *(void *)(v4 + 8) = v118;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v96;
  *(void *)uint64_t v4 = v104;
  outlined init with take of AceServiceInvokerAsync(&v121, v4 + 56);
LABEL_44:
  OUTLINED_FUNCTION_24_0();
}

    goto LABEL_30;
  }

  OUTLINED_FUNCTION_117_0();
  uint64_t v42 = objc_allocWithZone(&OBJC_CLASS___LNValue);
  uint64_t v43 = OUTLINED_FUNCTION_112_0();
  @nonobjc LNValue.init(_:valueType:)(v132, v43);
LABEL_30:
  OUTLINED_FUNCTION_32_8(v44, v45, v46, v47, v48, v49, v50, v51, v112, v119, v122, (uint64_t)log, type, v130);
  swift_task_dealloc(v10);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  uint64_t v109 = OUTLINED_FUNCTION_52_7();
  return OUTLINED_FUNCTION_27_14(v109, v110);
}

    goto LABEL_30;
  }

  OUTLINED_FUNCTION_117_0();
  uint64_t v42 = objc_allocWithZone(&OBJC_CLASS___LNValue);
  uint64_t v43 = OUTLINED_FUNCTION_112_0();
  @nonobjc LNValue.init(_:valueType:)(v132, v43);
LABEL_30:
  OUTLINED_FUNCTION_32_8(v44, v45, v46, v47, v48, v49, v50, v51, v112, v119, v122, (uint64_t)log, type, v130);
  swift_task_dealloc(v10);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  uint64_t v109 = OUTLINED_FUNCTION_52_7();
  return OUTLINED_FUNCTION_27_14(v109, v110);
}

uint64_t ShortcutIdentification.init(runTask:)@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = dispatch thunk of Uso_VerbTemplate_Reference.reference.getter(&v17);
  if (v17)
  {
    uint64_t v5 = dispatch thunk of UsoEntity_common_VoiceCommand.name.getter(v4);
    a1 = (unint64_t)v6;
    swift_release();
    if (a1)
    {
      uint64_t v7 = HIBYTE(a1) & 0xF;
      if ((a1 & 0x2000000000000000LL) == 0) {
        uint64_t v7 = v5 & 0xFFFFFFFFFFFFLL;
      }
      if (v7)
      {
        OUTLINED_FUNCTION_61();
        *a2 = v5;
        a2[1] = a1;
        uint64_t v8 = OUTLINED_FUNCTION_42_5();
        OUTLINED_FUNCTION_48_8(v8);
        uint64_t v9 = OUTLINED_FUNCTION_34_10();
        return __swift_storeEnumTagSinglePayload(v9, v10, v11, v12);
      }

      OUTLINED_FUNCTION_20();
    }
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v13 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v13, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v14 = OUTLINED_FUNCTION_73();
  if (os_log_type_enabled((os_log_t)a1, v14))
  {
    uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_57_1();
    *uint64_t v15 = 0;
    OUTLINED_FUNCTION_20_11(&dword_0, (os_log_s *)a1, v14, "reference-name NOT found in run VoiceCommand task");
    OUTLINED_FUNCTION_1_0((uint64_t)v15);
  }

  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_42_5();
  uint64_t v9 = OUTLINED_FUNCTION_23();
  return __swift_storeEnumTagSinglePayload(v9, v10, v11, v12);
}

void ShortcutIdentification.init(exeTask:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_35();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v62 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_35();
  uint64_t v63 = v11 - v10;
  uint64_t v67 = OUTLINED_FUNCTION_35_11();
  uint64_t v12 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  OUTLINED_FUNCTION_31_9();
  uint64_t v15 = (char *)(v13 - v14);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v58 - v18;
  dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.reference.getter(&v68, v17);
  if (!v68 || (uint64_t v20 = OUTLINED_FUNCTION_14_15(), OUTLINED_FUNCTION_12_5(), !v20))
  {
LABEL_24:
    uint64_t v0 = static ShortcutIdentification.extractShortcutId(identifiers:)();
    uint64_t v20 = v36;
    OUTLINED_FUNCTION_20();
    if (v20)
    {
      OUTLINED_FUNCTION_80();
      UUID.init(uuidString:)(v0, v20);
      OUTLINED_FUNCTION_14();
      OUTLINED_FUNCTION_41_9(v8, 1LL, v9);
      if (!v29)
      {
        OUTLINED_FUNCTION_14();
        OUTLINED_FUNCTION_45_5();
        uint64_t v51 = v63;
        uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32);
        v52(v63, v8, v9);
        v52(v4, v51, v9);
        uint64_t v53 = OUTLINED_FUNCTION_42_5();
        swift_storeEnumTagMultiPayload(v4, v53, 1LL);
        uint64_t v54 = v4;
        uint64_t v55 = 0LL;
        uint64_t v56 = 1LL;
        uint64_t v57 = v53;
        goto LABEL_36;
      }

      outlined destroy of URL?(v8, &demangling cache variable for type metadata for UUID?);
    }

    if (one-time initialization token for voiceCommands != -1) {
      goto LABEL_38;
    }
    goto LABEL_29;
  }

  uint64_t v21 = v20;
  uint64_t v68 = _swiftEmptyArrayStorage;
  uint64_t v66 = *(void *)(v20 + 16);
  if (!v66)
  {
LABEL_23:
    swift_bridgeObjectRelease(v21);
    goto LABEL_24;
  }

  uint64_t v58 = v9;
  uint64_t v59 = v8;
  uint64_t v60 = v4;
  uint64_t v61 = v2;
  unint64_t v22 = 0LL;
  uint64_t v64 = v15;
  uint64_t v65 = IdentifierNamespaceSemanticValue;
  while (v22 < *(void *)(v21 + 16))
  {
    uint64_t v20 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v2 = *(void *)(v12 + 72);
    uint64_t v0 = v21;
    uint64_t v23 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v12 + 16))(v19, v21 + v20 + v2 * v22, v67);
    uint64_t v24 = UsoIdentifier.namespace.getter(v23);
    uint64_t v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v26)
    {
      BOOL v29 = v24 == v27 && v26 == v28;
      if (v29)
      {
        OUTLINED_FUNCTION_37();
        OUTLINED_FUNCTION_20();
LABEL_16:
        uint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
        v31((uint64_t)v15, v19, v67);
        uint64_t v32 = v68;
        if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v32[2] + 1LL,  1LL);
          uint64_t v32 = v68;
        }

        unint64_t v34 = v32[2];
        unint64_t v33 = v32[3];
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v33 > 1,  v34 + 1,  1LL);
          uint64_t v32 = v68;
        }

        __int128 v32[2] = v34 + 1;
        uint64_t v35 = (char *)v32 + v20 + v34 * v2;
        uint64_t v15 = v64;
        v31((uint64_t)v35, v64, v67);
        uint64_t v68 = v32;
        goto LABEL_21;
      }

      char v30 = OUTLINED_FUNCTION_11_15(v24, v26, v27);
      OUTLINED_FUNCTION_37();
      OUTLINED_FUNCTION_20();
      if ((v30 & 1) != 0) {
        goto LABEL_16;
      }
    }

    else
    {
      OUTLINED_FUNCTION_20();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v67);
LABEL_21:
    ++v22;
    uint64_t v21 = v0;
    if (v66 == v22)
    {
      uint64_t v4 = v60;
      uint64_t v2 = v61;
      uint64_t v9 = v58;
      uint64_t v8 = v59;
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_38:
  swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
LABEL_29:
  uint64_t v37 = OUTLINED_FUNCTION_48();
  uint64_t v38 = (void *)__swift_project_value_buffer(v37, (uint64_t)static Logger.voiceCommands);
  uint64_t v39 = OUTLINED_FUNCTION_80();
  Logger.logObject.getter(v39);
  os_log_type_t v40 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_23_7(v40))
  {
    uint64_t v61 = v2;
    uint64_t v41 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v42 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v68 = (void *)v42;
    *uint64_t v41 = 136315138;
    if (v20)
    {
      unint64_t v43 = v20;
    }

    else
    {
      uint64_t v0 = 63LL;
      unint64_t v43 = 0xE100000000000000LL;
    }

    OUTLINED_FUNCTION_80();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v43, (uint64_t *)&v68);
    uint64_t v45 = OUTLINED_FUNCTION_64_4(v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, v46, v41 + 1);
    OUTLINED_FUNCTION_19_1(v20);
    swift_bridgeObjectRelease(v43);
    OUTLINED_FUNCTION_22_10(&dword_0, v47, v48, "UUID NOT found in execute VoiceCommand task; idString=%s");
    OUTLINED_FUNCTION_38_10(v49, v50, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v42);
    OUTLINED_FUNCTION_1_0((uint64_t)v41);

    swift_release();
  }

  else
  {

    OUTLINED_FUNCTION_45_5();
    OUTLINED_FUNCTION_19_1(v20);
  }

  OUTLINED_FUNCTION_42_5();
  OUTLINED_FUNCTION_37_11();
LABEL_36:
  __swift_storeEnumTagSinglePayload(v54, v55, v56, v57);
  OUTLINED_FUNCTION_24_0();
}

uint64_t VoiceCommandTask.init(mode:reference:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = static VoiceCommandTask.extractAssociatedAppId(reference:)(a2);
  uint64_t v7 = v6;
  swift_release();
  if (v7)
  {
    *(_BYTE *)a3 = a1;
    *(void *)(a3 + 8) = v5;
    *(void *)(a3 + swift_weakDestroy(v0 + 16) = v7;
    uint64_t v8 = OUTLINED_FUNCTION_51_10();
    swift_storeEnumTagMultiPayload(a3, v8, 1LL);
    uint64_t v9 = OUTLINED_FUNCTION_34_10();
  }

  else
  {
    OUTLINED_FUNCTION_51_10();
    uint64_t v9 = OUTLINED_FUNCTION_23();
  }

  return __swift_storeEnumTagSinglePayload(v9, v10, v11, v12);
}

Swift::String_optional __swiftcall String.extractActionIdentifier()()
{
  uint64_t v16 = v0;
  uint64_t v17 = v1;
  uint64_t v14 = 94LL;
  unint64_t v15 = 0xE100000000000000LL;
  v2._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v2);
  OUTLINED_FUNCTION_14();
  v13[0] = 0LL;
  v13[1] = 0xE000000000000000LL;
  unint64_t v12 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v14,  v13,  1024LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v12);
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_14();
  uint64_t v16 = v3;
  uint64_t v17 = v5;
  uint64_t v14 = 35LL;
  unint64_t v15 = 0xE100000000000000LL;
  uint64_t v6 = (void *)StringProtocol.components<A>(separatedBy:)( &v14,  &type metadata for String,  &type metadata for String,  v12,  v12);
  OUTLINED_FUNCTION_1_2();
  if (v6[2])
  {
    uint64_t v7 = v6[4];
    uint64_t v8 = (void *)v6[5];
    OUTLINED_FUNCTION_5_14();
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
  }

  OUTLINED_FUNCTION_14();
  uint64_t v9 = v7;
  uint64_t v10 = v8;
  result.value._object = v10;
  result.value._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t Siri_Nlu_External_UserDialogAct.getFirstTask()()
{
  uint64_t v2 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(v0);
  uint64_t v10 = v2;
  uint64_t v11 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v20 = v2;
    }
    else {
      uint64_t v20 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_17_1();
    unint64_t v12 = (void *)_CocoaArrayWrapper.endIndex.getter(v20);
    if (v12)
    {
LABEL_10:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v10 & 0xC000000000000001LL) == 0);
      if ((v10 & 0xC000000000000001LL) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v10);
      }

      else
      {
        uint64_t v8 = *(void *)(v10 + 32);
        swift_retain(v8);
      }

      OUTLINED_FUNCTION_20();
      if (v11)
      {
        if (v10 < 0) {
          uint64_t v14 = v10;
        }
        else {
          uint64_t v14 = v10 & 0xFFFFFFFFFFFFFF8LL;
        }
        OUTLINED_FUNCTION_17_1();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v14);
        OUTLINED_FUNCTION_20();
      }

      else
      {
        uint64_t v13 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8LL));
      }

      OUTLINED_FUNCTION_20();
      if (v13 >= 2)
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v15 = OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_84(v15, (uint64_t)static Logger.voiceCommands);
        os_log_type_t v16 = OUTLINED_FUNCTION_73();
        if (OUTLINED_FUNCTION_31_0(v16))
        {
          uint64_t v17 = (_WORD *)OUTLINED_FUNCTION_57_1();
          OUTLINED_FUNCTION_46_10(v17);
          OUTLINED_FUNCTION_3_20(&dword_0, v18, v19, "#LINK More than one task found in UDA");
          OUTLINED_FUNCTION_1_0(v1);
        }
      }

      return v8;
    }
  }

  else
  {
    unint64_t v12 = *(void **)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    OUTLINED_FUNCTION_17_1();
    if (v12) {
      goto LABEL_10;
    }
  }

  OUTLINED_FUNCTION_19_1(v10);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v3 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_84(v3, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = OUTLINED_FUNCTION_54_8();
  if (OUTLINED_FUNCTION_40(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_26_1(v5);
    OUTLINED_FUNCTION_27(&dword_0, v6, v7, "No tasks found in UDA");
    OUTLINED_FUNCTION_1_0(v11);
  }

  return 0LL;
}

uint64_t specialized static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)( char a1, uint64_t a2)
{
  uint64_t v3 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)(a2);
  uint64_t v4 = v3;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0) {
      uint64_t v13 = v3;
    }
    else {
      uint64_t v13 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(v4);
    if (v14)
    {
      swift_bridgeObjectRetain(v4);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v13);
      swift_bridgeObjectRelease(v4);
      goto LABEL_3;
    }

LABEL_21:
    swift_bridgeObjectRelease(v4);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_0, v17, v18, "dialogAct has no task", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v5 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8LL));
  if (!v5) {
    goto LABEL_21;
  }
LABEL_3:
  if (v5 >= 2)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_0, v8, v9, "dialogAct has more than 1 task", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    if ((a1 & 1) != 0)
    {
      swift_bridgeObjectRelease(v4);
      return 0LL;
    }
  }

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v4 & 0xC000000000000001LL) == 0);
  if ((v4 & 0xC000000000000001LL) != 0)
  {
    uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v4);
  }

  else
  {
    uint64_t v11 = *(void *)(v4 + 32);
    swift_retain(v11);
  }

  swift_bridgeObjectRelease(v4);
  return v11;
}

    OUTLINED_FUNCTION_14();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v14 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v14, (uint64_t)static Logger.voiceCommands);
    uint64_t v15 = OUTLINED_FUNCTION_54_8();
    if (OUTLINED_FUNCTION_40(v15))
    {
      uint64_t v16 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v16);
      OUTLINED_FUNCTION_27(&dword_0, v17, v18, "dialogAct has no task");
      OUTLINED_FUNCTION_1_0(v4);
    }

    return 0LL;
  }

  uint64_t v7 = *(os_log_s **)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8LL));
  if (!v7) {
    goto LABEL_21;
  }
LABEL_3:
  if ((uint64_t)v7 >= 2)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v8 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v8, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v9 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_31_0(v9))
    {
      uint64_t v10 = (_WORD *)OUTLINED_FUNCTION_57_1();
      *uint64_t v10 = 0;
      OUTLINED_FUNCTION_20_11(&dword_0, v7, (os_log_type_t)v4, "dialogAct has more than 1 task");
      OUTLINED_FUNCTION_1_0((uint64_t)v10);
    }

    if ((a1 & 1) != 0)
    {
      OUTLINED_FUNCTION_14();
      return 0LL;
    }
  }

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0LL, (v6 & 0xC000000000000001LL) == 0);
  if ((v6 & 0xC000000000000001LL) != 0)
  {
    uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v6);
  }

  else
  {
    uint64_t v11 = *(void *)(v6 + 32);
    OUTLINED_FUNCTION_24_2();
  }

  OUTLINED_FUNCTION_14();
  return v11;
}

    uint64_t v55 = Siri_Nlu_External_UserDialogAct.stringValue.getter();
    goto LABEL_22;
  }

  uint64_t v50 = Siri_Nlu_External_UserDialogAct.intValue.getter();
  if ((v51 & 1) != 0)
  {
    uint64_t v58 = Siri_Nlu_External_UserDialogAct.doubleValue.getter();
    if ((v59 & 1) != 0)
    {
      OUTLINED_FUNCTION_26_17();
      return 0LL;
    }

    uint64_t v61 = *(double *)&v58;
    OUTLINED_FUNCTION_62_11();
    uint64_t v62 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v62))
    {
      uint64_t v63 = (float *)OUTLINED_FUNCTION_38(12LL);
      OUTLINED_FUNCTION_22_14(v63, 3.852e-34);
      OUTLINED_FUNCTION_46_17(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "#WFInputTextFlow received double number: %f");
      OUTLINED_FUNCTION_1_0((uint64_t)v63);
    }

    uint64_t v55 = Double.description.getter(v61);
  }

  else
  {
    uint64_t v52 = v50;
    OUTLINED_FUNCTION_62_11();
    uint64_t v53 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_31_0(v53))
    {
      uint64_t v54 = (float *)OUTLINED_FUNCTION_38(12LL);
      OUTLINED_FUNCTION_22_14(v54, 3.852e-34);
      OUTLINED_FUNCTION_46_17(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "#WFInputTextFlow received int number: %lld");
      OUTLINED_FUNCTION_1_0((uint64_t)v54);
    }

    uint64_t v70 = v52;
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  }

      uint64_t v11 = (v18 - 1) & v18;
    }
  }

  Swift::String_optional result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

  uint64_t v6 = v7;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 24, v6);
  return 1LL;
}

uint64_t static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)( char a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = 0LL;
  uint64_t v5 = a3(a2);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v13 = v5;
    }
    else {
      uint64_t v13 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_80();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    OUTLINED_FUNCTION_14();
    if (v4)
    {
      OUTLINED_FUNCTION_80();
      uint64_t v7 = (os_log_s *)_CocoaArrayWrapper.endIndex.getter(v13);
      OUTLINED_FUNCTION_14();
      goto LABEL_3;
    }

uint64_t implicit closure #1 in default argument 2 of static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)()
{
  return static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
}

uint64_t static ShortcutIdentification.extractShortcutId(identifiers:)()
{
  uint64_t v36 = v1;
  uint64_t v37 = v2;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_52_6();
  if (!v4)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v25 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_84(v25, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v26 = OUTLINED_FUNCTION_54_8();
    if (OUTLINED_FUNCTION_40(v26))
    {
      uint64_t v27 = (_WORD *)OUTLINED_FUNCTION_57_1();
      OUTLINED_FUNCTION_26_1(v27);
      OUTLINED_FUNCTION_1_0(0LL);
    }

    return 0LL;
  }

  if (*(void *)(v4 + 16) < 2uLL)
  {
    OUTLINED_FUNCTION_5_14();
  }

  else
  {
    uint64_t v6 = one-time initialization token for voiceCommands;
    OUTLINED_FUNCTION_5_14();
    if (v6 != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v7 = OUTLINED_FUNCTION_48();
    uint64_t v8 = (void *)__swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
    uint64_t v9 = swift_bridgeObjectRetain_n(v4, 2LL);
    Logger.logObject.getter(v9);
    os_log_type_t v10 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_23_7(v10))
    {
      uint64_t v11 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v12 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v35 = v12;
      *uint64_t v11 = 136315138;
      uint64_t v13 = OUTLINED_FUNCTION_35_11();
      uint64_t v14 = OUTLINED_FUNCTION_5_14();
      uint64_t v15 = ((uint64_t (*)(uint64_t, uint64_t))Array.description.getter)(v14, v13);
      unint64_t v17 = v16;
      OUTLINED_FUNCTION_37();
      uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v35);
      uint64_t v19 = OUTLINED_FUNCTION_64_4(v18);
      OUTLINED_FUNCTION_68_3(v19, v20);
      OUTLINED_FUNCTION_19_1(v4);
      swift_bridgeObjectRelease(v17);
      OUTLINED_FUNCTION_38_10(v23, v24, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v12);
      OUTLINED_FUNCTION_1_0((uint64_t)v11);
    }

    else
    {

      OUTLINED_FUNCTION_19_1(v4);
    }
  }

  specialized Collection.first.getter(v4, (uint64_t)v0);
  OUTLINED_FUNCTION_37();
  uint64_t v30 = OUTLINED_FUNCTION_35_11();
  uint64_t v31 = OUTLINED_FUNCTION_41_9((uint64_t)v0, 1LL, v30);
  if (v32)
  {
    outlined destroy of URL?((uint64_t)v0, &demangling cache variable for type metadata for UsoIdentifier?);
    return 0LL;
  }

  uint64_t v33 = UsoIdentifier.value.getter(v31);
  (*(void (**)(void *, uint64_t))(*(void *)(v30 - 8) + 8LL))(v0, v30);
  return v33;
}

const char *VoiceCommandTask.enablementSettingValue.unsafeMutableAddressor()
{
  return "shortcuts";
}

uint64_t static VoiceCommandTask.enablementSettingValue.getter()
{
  return 0x74756374726F6873LL;
}

uint64_t static VoiceCommandTask.extractAssociatedAppId(reference:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v84 - v6;
  uint64_t v8 = type metadata accessor for UsoIdentifier(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v89 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v88 = (char *)&v84 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v93 = (char *)&v84 - v15;
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v84 - v16;
  if (!a1)
  {
LABEL_26:
    uint64_t v19 = 0LL;
    goto LABEL_27;
  }

  uint64_t v86 = v5;
  uint64_t v87 = a1;
  uint64_t v18 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(1701667182LL, 0xE400000000000000LL);
  uint64_t v19 = v18;
  if (!v18)
  {
LABEL_27:
    uint64_t v20 = 0LL;
    goto LABEL_28;
  }

  uint64_t v20 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v95 = (char *)_swiftEmptyArrayStorage;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v18 + 16);
  uint64_t v90 = v8;
  uint64_t v92 = v21;
  if (!v21) {
    goto LABEL_23;
  }
  uint64_t v85 = v7;
  unint64_t v22 = 0LL;
  uint64_t v91 = IdentifierNamespaceShortcutSetting;
  do
  {
    if (v22 >= *(void *)(v19 + 16))
    {
      __break(1u);
LABEL_80:
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
LABEL_29:
      uint64_t v39 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v39, (uint64_t)static Logger.voiceCommands);
      uint64_t v40 = swift_bridgeObjectRetain(v20);
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        unint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v44 = (char *)swift_slowAlloc(32LL, -1LL);
        uint64_t v95 = v44;
        *(_DWORD *)unint64_t v43 = 136315138;
        if (v20)
        {
          unint64_t v45 = v20;
        }

        else
        {
          uint64_t v19 = 63LL;
          unint64_t v45 = 0xE100000000000000LL;
        }

        swift_bridgeObjectRetain(v20);
        uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v45, (uint64_t *)&v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v43 + 4);
        swift_bridgeObjectRelease_n(v20, 2LL);
        swift_bridgeObjectRelease(v45);
        _os_log_impl(&dword_0, v41, v42, "ignoring non-enablement common_Setting; parse identifier value=%s", v43, 0xCu);
        swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v20, 2LL);
      }

      return 0LL;
    }

    unint64_t v23 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v20 = *(void *)(v9 + 72);
    uint64_t v24 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v9 + 16))(v17, v19 + v23 + v20 * v22, v8);
    uint64_t v25 = UsoIdentifier.namespace.getter(v24);
    uint64_t v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;
    if (!v27)
    {
      swift_bridgeObjectRelease(v29);
LABEL_14:
      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
      goto LABEL_21;
    }

    if (v25 == v28 && v27 == v29)
    {
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v30);
    }

    else
    {
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v28, v29, 0LL);
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v30);
      if ((v32 & 1) == 0) {
        goto LABEL_14;
      }
    }

    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v33(v93, v17, v8);
    unint64_t v34 = v95;
    if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v34 + 2) + 1LL,  1LL);
      unint64_t v34 = v95;
    }

    unint64_t v36 = *((void *)v34 + 2);
    unint64_t v35 = *((void *)v34 + 3);
    if (v36 >= v35 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1LL);
      unint64_t v34 = v95;
    }

    *((void *)v34 + outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v36 + 1;
    uint64_t v37 = &v34[v23 + v36 * v20];
    uint64_t v8 = v90;
    v33(v37, v93, v90);
    uint64_t v95 = v34;
LABEL_21:
    ++v22;
  }

  while (v92 != (void (*)(char *, uint64_t))v22);
  uint64_t v20 = (uint64_t)v95;
  uint64_t v7 = v85;
LABEL_23:
  swift_bridgeObjectRelease(v19);
  if (!v20)
  {
    uint64_t v19 = 0LL;
    goto LABEL_28;
  }

  specialized Collection.first.getter(v20, (uint64_t)v7);
  swift_bridgeObjectRelease(v20);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1LL, v8);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?((uint64_t)v7, &demangling cache variable for type metadata for UsoIdentifier?);
    goto LABEL_26;
  }

  uint64_t v19 = UsoIdentifier.value.getter(EnumTagSinglePayload);
  uint64_t v20 = v48;
  uint64_t v92 = *(void (**)(char *, uint64_t))(v9 + 8);
  v92(v7, v8);
  if (v19 == 0x74756374726F6873LL && v20 == 0xE900000000000073LL)
  {
    unint64_t v50 = 0xE900000000000073LL;
    goto LABEL_45;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0x74756374726F6873LL, 0xE900000000000073LL, 0LL) & 1) == 0)
  {
LABEL_28:
    if (one-time initialization token for voiceCommands == -1) {
      goto LABEL_29;
    }
    goto LABEL_80;
  }

  unint64_t v50 = v20;
LABEL_45:
  uint64_t v51 = swift_bridgeObjectRelease(v50);
  uint64_t v52 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter(v51);
  uint64_t v53 = v88;
  if (!v52
    || (uint64_t v54 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)( 1701667182LL,  0xE400000000000000LL),  swift_release(),  !v54))
  {
LABEL_75:
    if (one-time initialization token for voiceCommands != -1) {
      goto LABEL_82;
    }
    goto LABEL_76;
  }

  uint64_t v95 = (char *)_swiftEmptyArrayStorage;
  uint64_t v55 = *(void *)(v54 + 16);
  if (!v55)
  {
    uint64_t v72 = (char *)_swiftEmptyArrayStorage;
LABEL_68:
    swift_bridgeObjectRelease(v54);
    uint64_t v73 = v90;
    if (v72)
    {
      uint64_t v74 = (uint64_t)v86;
      specialized Collection.first.getter((uint64_t)v72, (uint64_t)v86);
      swift_bridgeObjectRelease(v72);
      uint64_t v75 = __swift_getEnumTagSinglePayload(v74, 1LL, v73);
      if ((_DWORD)v75 == 1)
      {
        outlined destroy of URL?(v74, &demangling cache variable for type metadata for UsoIdentifier?);
      }

      else
      {
        uint64_t v46 = UsoIdentifier.value.getter(v75);
        unint64_t v77 = v76;
        v92((char *)v74, v73);
        uint64_t v78 = HIBYTE(v77) & 0xF;
        if ((v77 & 0x2000000000000000LL) == 0) {
          uint64_t v78 = v46 & 0xFFFFFFFFFFFFLL;
        }
        if (v78) {
          return v46;
        }
        swift_bridgeObjectRelease(v77);
      }
    }

    goto LABEL_75;
  }

  unint64_t v56 = 0LL;
  uint64_t v93 = (char *)IdentifierNamespaceItemId;
  while (v56 < *(void *)(v54 + 16))
  {
    unint64_t v57 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v58 = *(void *)(v9 + 72);
    uint64_t v59 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v9 + 16))(v53, v54 + v57 + v58 * v56, v90);
    uint64_t v60 = UsoIdentifier.namespace.getter(v59);
    uint64_t v62 = v61;
    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v65 = v64;
    if (v62)
    {
      if (v60 == v63 && v62 == v64)
      {
        swift_bridgeObjectRelease(v62);
        swift_bridgeObjectRelease(v65);
LABEL_60:
        uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v68(v89, v53, v90);
        uint64_t v69 = v95;
        if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v69 + 2) + 1LL,  1LL);
          uint64_t v69 = v95;
        }

        unint64_t v71 = *((void *)v69 + 2);
        unint64_t v70 = *((void *)v69 + 3);
        if (v71 >= v70 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v70 > 1,  v71 + 1,  1LL);
          uint64_t v69 = v95;
        }

        *((void *)v69 + outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v71 + 1;
        v68(&v69[v57 + v71 * v58], v89, v90);
        uint64_t v95 = v69;
        uint64_t v53 = v88;
        goto LABEL_65;
      }

      char v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v63, v64, 0LL);
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v65);
      if ((v67 & 1) != 0) {
        goto LABEL_60;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v64);
    }

    v92(v53, v90);
LABEL_65:
    if (v55 == ++v56)
    {
      uint64_t v72 = v95;
      goto LABEL_68;
    }
  }

  __break(1u);
LABEL_82:
  swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
LABEL_76:
  uint64_t v79 = type metadata accessor for Logger(0LL);
  uint64_t v80 = __swift_project_value_buffer(v79, (uint64_t)static Logger.voiceCommands);
  uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
  os_log_type_t v82 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v81, v82))
  {
    uint64_t v83 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v83 = 0;
    _os_log_impl(&dword_0, v81, v82, "associatedApp-ID NOT found", v83, 2u);
    swift_slowDealloc(v83, -1LL, -1LL);
  }

  return 0LL;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return _typeName(_:qualified:)(v1, 0LL);
}

uint64_t outlined init with take of ShortcutIdentification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShortcutIdentification(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UsoIdentifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_3_20(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_11_15(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

uint64_t OUTLINED_FUNCTION_14_15()
{
  return dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(1701667182LL, 0xE400000000000000LL);
}

uint64_t OUTLINED_FUNCTION_17_15()
{
  return outlined init with copy of Any(v0 - 112, v0 - 144);
}

uint64_t OUTLINED_FUNCTION_19_10(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 1LL, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_21_13()
{
  return swift_release(v0);
}

void OUTLINED_FUNCTION_22_10(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_23_13()
{
  return v0(*(void *)(v2 - 176), *(void *)(v2 - 152), v1);
}

uint64_t OUTLINED_FUNCTION_26_9(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_34_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_35_11()
{
  return type metadata accessor for UsoIdentifier(0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_38_10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(v3, 1LL, a3);
}

uint64_t OUTLINED_FUNCTION_39_10()
{
  return specialized static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)( 0,  v0);
}

uint64_t OUTLINED_FUNCTION_41_9(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_42_5()
{
  return type metadata accessor for ShortcutIdentification(0LL);
}

uint64_t OUTLINED_FUNCTION_43_7()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 168));
}

uint64_t OUTLINED_FUNCTION_45_5()
{
  return swift_release(v0);
}

_WORD *OUTLINED_FUNCTION_46_10(_WORD *result)
{
  *Swift::String_optional result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_48_8(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(v1, a1, 0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_51_10()
{
  return type metadata accessor for VoiceCommandTask(0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_53_8()
{
  return __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 - 112));
}

uint64_t OUTLINED_FUNCTION_54_8()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_56_8()
{
  return UsoIdentifier.value.getter();
}

uint64_t OUTLINED_FUNCTION_60_4()
{
  return type metadata accessor for UsoTask_run_common_VoiceCommand(0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_62_6()
{
  return swift_release(*(void *)(v0 - 144));
}

uint64_t OUTLINED_FUNCTION_63_4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 184));
}

uint64_t OUTLINED_FUNCTION_64_4(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

  ;
}

uint64_t OUTLINED_FUNCTION_66_3()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter();
}

uint64_t OUTLINED_FUNCTION_68_3(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t AutoShortcutProvider.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = [objc_allocWithZone(LNAutoShortcutsProvider) init];
  return v1;
}

uint64_t AutoShortcutProvider.init()()
{
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = [objc_allocWithZone(LNAutoShortcutsProvider) init];
  return v0;
}

uint64_t AutoShortcutProvider.autoShortcuts(forBundleIdentifier:localeIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutProvider.autoShortcuts(forBundleIdentifier:localeIdentifier:));
}

uint64_t AutoShortcutProvider.autoShortcuts(forBundleIdentifier:localeIdentifier:)()
{
  uint64_t v1 = *(void **)(v0[20] + 16LL);
  NSString v2 = String._bridgeToObjectiveC()();
  v0[21] = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[22] = v3;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = AutoShortcutProvider.autoShortcuts(forBundleIdentifier:localeIdentifier:);
  uint64_t v4 = OUTLINED_FUNCTION_7_13((uint64_t)(v0 + 2));
  v0[10] = _NSConcreteStackBlock;
  os_log_type_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  OUTLINED_FUNCTION_37_7( v4,  (uint64_t)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [LNAutoShortcut]);
  [v1 autoShortcutsForBundleIdentifier:v2 localeIdentifier:v3 completion:v5];
  return OUTLINED_FUNCTION_3_21();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_18_8();
  *(void *)(v0 + 184) = v1;
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v1 = *(void **)(v0 + 168);
  NSString v2 = *(void *)(v0 + 120);

  return OUTLINED_FUNCTION_5_16(v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t AutoShortcutProvider.autoShortcuts(forBundleIdentifier:localeIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v6 = *(void **)(v5 + 176);
  uint64_t v7 = *(void **)(v5 + 168);
  swift_willThrow(a1, a2, a3, a4, a5);

  return OUTLINED_FUNCTION_4_18(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [LNAutoShortcut]( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, a3);
  }
  unint64_t v6 = type metadata accessor for LNAutoShortcut();
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v6);
  return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, v7);
}

uint64_t AutoShortcutProvider.retrieveAction(for:)(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutProvider.retrieveAction(for:));
}

uint64_t AutoShortcutProvider.retrieveAction(for:)()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[16];
  uint64_t v3 = *(void **)(v0[17] + 16LL);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = AutoShortcutProvider.retrieveAction(for:);
  uint64_t v4 = OUTLINED_FUNCTION_7_13((uint64_t)(v0 + 2));
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  OUTLINED_FUNCTION_37_7( v4,  (uint64_t)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut);
  [v3 retrieveActionForLocalizedPhrase:v2 completion:v5];
  return swift_continuation_await(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_18_8();
  *(void *)(v0 + 144) = v1;
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 120));
}

uint64_t AutoShortcutProvider.retrieveAction(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OUTLINED_FUNCTION_4_18(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t AutoShortcutProvider.retrieveAction(bundleIdentifier:basePhraseTemplate:actionIdentifier:parameterIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[22] = a7;
  v8[23] = v7;
  v8[20] = a5;
  v8[21] = a6;
  v8[18] = a3;
  v8[19] = a4;
  v8[16] = a1;
  v8[17] = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  _BYTE v8[24] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t AutoShortcutProvider.retrieveAction(bundleIdentifier:basePhraseTemplate:actionIdentifier:parameterIdentifier:)()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[22];
  uint64_t v3 = *(void **)(v0[23] + 16LL);
  NSString v4 = String._bridgeToObjectiveC()();
  v0[25] = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  v0[26] = v5;
  NSString v6 = String._bridgeToObjectiveC()();
  v0[27] = v6;
  outlined init with copy of UUID?(v2, v1);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1LL, v7);
  Class isa = 0LL;
  if (EnumTagSinglePayload != 1)
  {
    uint64_t v10 = v0[24];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v10, v7);
  }

  uint64_t v11 = v0 + 2;
  v0[28] = isa;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = AutoShortcutProvider.retrieveAction(bundleIdentifier:basePhraseTemplate:actionIdentifier:parameterIdentifier:);
  uint64_t v12 = OUTLINED_FUNCTION_7_13((uint64_t)(v0 + 2));
  v0[10] = _NSConcreteStackBlock;
  uint64_t v13 = v0 + 10;
  v13[1] = 0x40000000LL;
  OUTLINED_FUNCTION_37_7( v12,  (uint64_t)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut);
  [v3 retrieveActionForBundleIdentifier:v4 basePhraseTemplate:v5 actionIdentifier:v6 parameterIdentifier:isa completion:v13];
  return swift_continuation_await(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_18_8();
  *(void *)(v0 + 23outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v1;
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v3 = *(void **)(v0 + 200);
  uint64_t v2 = *(void **)(v0 + 208);
  NSString v4 = *(void *)(v0 + 192);
  NSString v5 = *(void *)(v0 + 120);

  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v1 = *(void **)(v0 + 224);
  uint64_t v3 = *(void **)(v0 + 208);
  uint64_t v2 = *(void **)(v0 + 216);
  NSString v4 = *(void *)(v0 + 192);
  NSString v5 = *(void **)(v0 + 200);
  swift_willThrow();

  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AutoShortcutProvider.retrieveAction(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[21] = a6;
  v7[22] = v6;
  v7[19] = a4;
  v7[20] = a5;
  v7[17] = a2;
  v7[18] = a3;
  v7[16] = a1;
  return OUTLINED_FUNCTION_6_2((uint64_t)AutoShortcutProvider.retrieveAction(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:));
}

uint64_t AutoShortcutProvider.retrieveAction(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:)()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = *(void **)(v0[22] + 16LL);
  NSString v3 = String._bridgeToObjectiveC()();
  v0[23] = v3;
  NSString v4 = String._bridgeToObjectiveC()();
  v0[24] = v4;
  if (v1) {
    NSString v5 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v5 = 0LL;
  }
  v0[25] = v5;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = AutoShortcutProvider.retrieveAction(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:);
  uint64_t v6 = OUTLINED_FUNCTION_7_13((uint64_t)(v0 + 2));
  v0[10] = _NSConcreteStackBlock;
  uint64_t v7 = v0 + 10;
  v7[1] = 0x40000000LL;
  OUTLINED_FUNCTION_37_7( v6,  (uint64_t)@objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut);
  [v2 retrieveActionForBundleIdentifier:v3 appShortcutIdentifier:v4 parameterIdentifier:v5 completion:v7];
  return OUTLINED_FUNCTION_3_21();
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_18_8();
  *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0, v1 - 208) = v1;
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void **)(v0 + 184);
  NSString v3 = *(void *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v1 = *(void **)(v0 + 200);
  NSString v3 = *(void **)(v0 + 184);
  uint64_t v2 = *(void **)(v0 + 192);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AutoShortcutProvider.deinit()
{
  return v0;
}

uint64_t AutoShortcutProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t protocol witness for AutoShortcutsProviding.autoShortcuts(forBundleIdentifier:localeIdentifier:) in conformance AutoShortcutProvider( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(**(void **)v4 + 96LL);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for AutoShortcutsProviding.autoShortcuts(forBundleIdentifier:localeIdentifier:) in conformance AutoShortcutProvider;
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for AutoShortcutsProviding.autoShortcuts(forBundleIdentifier:localeIdentifier:) in conformance AutoShortcutProvider( uint64_t a1)
{
  uint64_t v6 = *v2;
  uint64_t v4 = swift_task_dealloc(*(void *)(*v2 + 16));
  if (!v1) {
    uint64_t v4 = a1;
  }
  return OUTLINED_FUNCTION_5_16(v4, *(uint64_t (**)(void))(v6 + 8));
}

uint64_t protocol witness for AutoShortcutsProviding.retrieveAction(for:) in conformance AutoShortcutProvider( uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 104LL);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AutoShortcutsProviding.retrieveAction(for:) in conformance AutoShortcutProvider;
  return v7(a1);
}

uint64_t protocol witness for AutoShortcutsProviding.retrieveAction(bundleIdentifier:basePhraseTemplate:actionIdentifier:parameterIdentifier:) in conformance AutoShortcutProvider( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = *(int **)(**(void **)v7 + 112LL);
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
  unint64_t v17 = (void *)swift_task_alloc(v16[1]);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v17;
  *unint64_t v17 = v8;
  v17[1] = protocol witness for AutoShortcutsProviding.retrieveAction(for:) in conformance AutoShortcutProvider;
  return v19(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for AutoShortcutsProviding.retrieveAction(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:) in conformance AutoShortcutProvider( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = *(int **)(**(void **)v6 + 120LL);
  unint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v14 + *v14);
  uint64_t v15 = (void *)swift_task_alloc(v14[1]);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = protocol witness for AutoShortcutsProviding.retrieveAction(for:) in conformance AutoShortcutProvider;
  return v17(a1, a2, a3, a4, a5, a6);
}

uint64_t type metadata accessor for AutoShortcutProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin20AutoShortcutProvider);
}

unint64_t type metadata accessor for LNAutoShortcut()
{
  unint64_t result = lazy cache variable for type metadata for LNAutoShortcut;
  if (!lazy cache variable for type metadata for LNAutoShortcut)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNAutoShortcut);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_3_21()
{
  return swift_continuation_await();
}

uint64_t OUTLINED_FUNCTION_4_18(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_5_16(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_7_13(uint64_t a1)
{
  return swift_continuation_init(a1, 1LL);
}

uint64_t String.asSpeakableString.getter(uint64_t a1, uint64_t a2)
{
  return SpeakableString.init(print:speak:)(a1, a2, 0LL, 0LL);
}

uint64_t ShortcutsUnlockDeviceStrategy.__allocating_init(dialogingTemplates:deviceState:)( uint64_t a1, __int128 *a2)
{
  uint64_t v5 = swift_allocObject(v2, 64LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  outlined init with take of AceServiceInvokerAsync(a2, v5 + 24);
  return v5;
}

uint64_t static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  void v4[9] = a2;
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v4[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[13] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[14] = swift_task_alloc(v7);
  v4[15] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for OutputGenerationManifest(0LL);
  v4[16] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[17] = v9;
  v4[18] = OUTLINED_FUNCTION_9_0(v9);
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v4[19] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[20] = v11;
  v4[21] = OUTLINED_FUNCTION_9_0(v11);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:)()
{
  uint64_t v1 = v0[20];
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))( v0[21],  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v0[19]);
  char v2 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  if ((v2 & 1) != 0)
  {
    uint64_t v3 = (uint64_t *)v0[9];
    char v4 = OUTLINED_FUNCTION_18_15((void *)v0[10]);
    uint64_t v5 = *v3;
    if ((v4 & 1) != 0)
    {
      uint64_t v6 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v5 + 368));
      v0[22] = (uint64_t)v6;
      unint64_t v7 = static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:);
    }

    else
    {
      uint64_t v6 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v5 + 216));
      v0[23] = (uint64_t)v6;
      unint64_t v7 = static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:);
    }

    *uint64_t v6 = v0;
    v6[1] = v7;
    return v10();
  }

  else
  {
    uint64_t v8 = (uint64_t **)swift_task_alloc(dword_217084);
    v0[28] = (uint64_t)v8;
    *uint64_t v8 = v0;
    v8[1] = (uint64_t *)static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:);
    return static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:)( v0[8],  v0[9],  v0[10]);
  }

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_30_2();
  _OWORD v2[2] = v1;
  v2[3] = v3;
  v2[4] = v0;
  char v4 = *v1;
  OUTLINED_FUNCTION_12_16(v2[22], v5);
  if (v0)
  {
    OUTLINED_FUNCTION_11_16();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  OUTLINED_FUNCTION_30_2();
  void v2[5] = v1;
  v2[6] = v3;
  v2[7] = v0;
  char v4 = *v1;
  OUTLINED_FUNCTION_12_16(v2[23], v5);
  if (v0)
  {
    OUTLINED_FUNCTION_11_16();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_18_0();
    return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    OUTLINED_FUNCTION_12_0();
    return OUTLINED_FUNCTION_25_1();
  }

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = *(void *)(v0 + 208);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 216));
  swift_bridgeObjectRelease(v1);
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_25_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 136);

  OUTLINED_FUNCTION_52(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  char v2 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  OUTLINED_FUNCTION_30_2();
  char v2 = *v0;
  OUTLINED_FUNCTION_12_16(*(void *)(v1 + 224), v3);
  OUTLINED_FUNCTION_11_16();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = (void *)v11[3];
  OUTLINED_FUNCTION_14_16();
  [v13 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_38_11();
  uint64_t v14 = OUTLINED_FUNCTION_20_19();
  OUTLINED_FUNCTION_27_12(v14, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OUTLINED_FUNCTION_36_11();
  OUTLINED_FUNCTION_26_10();
  uint64_t v15 = type metadata accessor for ResponseFactory(0LL);
  OUTLINED_FUNCTION_51(v15);
  v11[25] = ResponseFactory.init()();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v17 = (__n128 *)OUTLINED_FUNCTION_23_4(v16);
  OUTLINED_FUNCTION_17_16(v17, v18, v19, (__n128)xmmword_17E150);
  v11[26] = a11;
  OUTLINED_FUNCTION_22_11();
  uint64_t v20 = (void *)swift_task_alloc(v12);
  v11[27] = v20;
  uint64_t v21 = OUTLINED_FUNCTION_16_14(v20);
  return OUTLINED_FUNCTION_11_6(v21, v22, v23, v24);
}

{
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  OUTLINED_FUNCTION_51_0();
  uint64_t v13 = (void *)v11[6];
  OUTLINED_FUNCTION_14_16();
  [v13 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_38_11();
  uint64_t v14 = OUTLINED_FUNCTION_20_19();
  OUTLINED_FUNCTION_27_12(v14, (uint64_t)CustomIntentDisambiguationItemContainer.init(items:));
  OUTLINED_FUNCTION_36_11();
  OUTLINED_FUNCTION_26_10();
  uint64_t v15 = type metadata accessor for ResponseFactory(0LL);
  OUTLINED_FUNCTION_51(v15);
  v11[25] = ResponseFactory.init()();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v17 = (__n128 *)OUTLINED_FUNCTION_23_4(v16);
  OUTLINED_FUNCTION_17_16(v17, v18, v19, (__n128)xmmword_17E150);
  v11[26] = a11;
  OUTLINED_FUNCTION_22_11();
  uint64_t v20 = (void *)swift_task_alloc(v12);
  v11[27] = v20;
  uint64_t v21 = OUTLINED_FUNCTION_16_14(v20);
  return OUTLINED_FUNCTION_11_6(v21, v22, v23, v24);
}

uint64_t ShortcutsUnlockDeviceStrategy.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 24, a1);
}

uint64_t ShortcutsUnlockDeviceStrategy.init(dialogingTemplates:deviceState:)(uint64_t a1, __int128 *a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  outlined init with take of AceServiceInvokerAsync(a2, v2 + 24);
  return v2;
}

uint64_t ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock()(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v3, v4, v5);
}

uint64_t ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = v1 + 24;
  uint64_t v4 = (uint64_t **)swift_task_alloc(dword_21707C);
  v0[5] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = (uint64_t *)ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock();
  return static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:)(v0[2], v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v1 + 40));
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  void v3[9] = a3;
  v3[7] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[10] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TemplatingResult(0LL);
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[12] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[13] = swift_task_alloc(v7);
  v3[14] = swift_task_alloc(v7);
  v3[15] = swift_task_alloc(v7);
  return swift_task_switch( static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:),  0LL,  0LL);
}

uint64_t static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:)()
{
  uint64_t v1 = *(uint64_t **)(v0 + 64);
  char v2 = OUTLINED_FUNCTION_18_15(*(void **)(v0 + 72));
  uint64_t v3 = *v1;
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v3 + 376));
    *(void *)(v0 + 128) = v4;
    *uint64_t v4 = v0;
    v4[1] = static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:);
    uint64_t v5 = *(void *)(v0 + 112);
  }

  else
  {
    uint64_t v6 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(v3 + 224));
    *(void *)(v0 + 144) = v6;
    *uint64_t v6 = v0;
    v6[1] = static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:);
    uint64_t v5 = *(void *)(v0 + 104);
  }

  return v8(v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 128);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 136) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 144);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 15outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_25_15();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_25_15();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  return OUTLINED_FUNCTION_0_10(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = *(void *)(v12 + 120);
  uint64_t v15 = *(void *)(v12 + 96);
  OUTLINED_FUNCTION_32_7();
  OUTLINED_FUNCTION_29_10(v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
  uint64_t v18 = v13[3];
  uint64_t v17 = v13[4];
  unsigned __int8 v19 = __swift_project_boxed_opaque_existential_1(v13, v18);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v18, v17);
  uint64_t v20 = OUTLINED_FUNCTION_111();
  uint64_t v21 = OUTLINED_FUNCTION_19_11(v20);
  *(_OWORD *)(v12 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
  *(void *)(v12 + 48) = 0LL;
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = 0u;
  uint64_t v22 = OUTLINED_FUNCTION_33_9(v21, (uint64_t)&protocol witness table for AceOutput);
  OUTLINED_FUNCTION_6_15((uint64_t)v22, v23, v19 & 1, (uint64_t)_swiftEmptyArrayStorage);
  outlined destroy of URL?(v12 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v11, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_30_11(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  swift_task_dealloc(v14);
  swift_task_dealloc(a10);
  swift_task_dealloc(a11);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0(*(uint64_t (**)(void))(v12 + 8));
}

{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  OUTLINED_FUNCTION_51_0();
  uint64_t v14 = *(void *)(v12 + 120);
  uint64_t v15 = *(void *)(v12 + 96);
  OUTLINED_FUNCTION_32_7();
  OUTLINED_FUNCTION_29_10(v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
  uint64_t v18 = v13[3];
  uint64_t v17 = v13[4];
  unsigned __int8 v19 = __swift_project_boxed_opaque_existential_1(v13, v18);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v18, v17);
  uint64_t v20 = OUTLINED_FUNCTION_111();
  uint64_t v21 = OUTLINED_FUNCTION_19_11(v20);
  *(_OWORD *)(v12 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
  *(void *)(v12 + 48) = 0LL;
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = 0u;
  uint64_t v22 = OUTLINED_FUNCTION_33_9(v21, (uint64_t)&protocol witness table for AceOutput);
  OUTLINED_FUNCTION_6_15((uint64_t)v22, v23, v19 & 1, (uint64_t)_swiftEmptyArrayStorage);
  outlined destroy of URL?(v12 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v11, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_30_11(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  swift_task_dealloc(v14);
  swift_task_dealloc(a11);
  swift_task_dealloc(a10);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0(*(uint64_t (**)(void))(v12 + 8));
}

uint64_t ShortcutsUnlockDeviceStrategy.makeShortcutsUnlockDeviceFlow()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
  uint64_t v2 = *(void *)(type metadata accessor for CommonFlowGuard(0LL) - 8);
  uint64_t v3 = swift_allocObject( v1,  ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
       + *(void *)(v2 + 72),
         *(unsigned __int8 *)(v2 + 80) | 7LL);
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = xmmword_17E650;
  void v6[3] = type metadata accessor for ShortcutsUnlockDeviceStrategy();
  v6[4] = lazy protocol witness table accessor for type ShortcutsUnlockDeviceStrategy and conformance ShortcutsUnlockDeviceStrategy();
  v6[0] = v0;
  swift_retain(v0);
  static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)(v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v6);
  uint64_t v4 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)(v3);
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t ShortcutsUnlockDeviceStrategy.deinit()
{
  return v0;
}

uint64_t ShortcutsUnlockDeviceStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.authenticationPolicy.getter in conformance ShortcutsUnlockDeviceStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))();
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock() in conformance ShortcutsUnlockDeviceStrategy( uint64_t a1)
{
  uint64_t v4 = *(int **)(**(void **)v1 + 112LL);
  unint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return v7(a1);
}

uint64_t type metadata accessor for ShortcutsUnlockDeviceStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin29ShortcutsUnlockDeviceStrategy);
}

unint64_t lazy protocol witness table accessor for type ShortcutsUnlockDeviceStrategy and conformance ShortcutsUnlockDeviceStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type ShortcutsUnlockDeviceStrategy and conformance ShortcutsUnlockDeviceStrategy;
  if (!lazy protocol witness table cache variable for type ShortcutsUnlockDeviceStrategy and conformance ShortcutsUnlockDeviceStrategy)
  {
    uint64_t v1 = type metadata accessor for ShortcutsUnlockDeviceStrategy();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ShortcutsUnlockDeviceStrategy, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsUnlockDeviceStrategy and conformance ShortcutsUnlockDeviceStrategy);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_6_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v5,  v6,  a3,  a4,  0LL,  1LL,  v4,  a4);
}

uint64_t OUTLINED_FUNCTION_11_16()
{
  return swift_task_dealloc(*(void *)(v0 + 168));
}

uint64_t OUTLINED_FUNCTION_12_16@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_14_16()
{
  *(void *)(v1 + 19outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
  return static DialogPhase.completion.getter();
}

uint64_t OUTLINED_FUNCTION_16_14(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 64);
}

uint64_t OUTLINED_FUNCTION_17_16(__n128 *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  a1[1] = a4;
  a1[2].n128_u64[0] = v4;
  return specialized Array._endMutation()(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_18_15(void *a1)
{
  uint64_t v1 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return dispatch thunk of DeviceState.isHomePod.getter(v1);
}

uint64_t OUTLINED_FUNCTION_19_11(uint64_t a1)
{
  return type metadata accessor for AceOutput(0LL);
}

uint64_t OUTLINED_FUNCTION_20_19()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

id OUTLINED_FUNCTION_22_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_15()
{
  return swift_task_dealloc(*(void *)(v0 + 120));
}

uint64_t OUTLINED_FUNCTION_26_10()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_27_12(uint64_t a1, uint64_t a2)
{
  return OutputGenerationManifest.init(dialogPhase:_:)(v2, a2, 0LL);
}

uint64_t OUTLINED_FUNCTION_29_10@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v2, a1, v3);
}

uint64_t OUTLINED_FUNCTION_30_11@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

void *OUTLINED_FUNCTION_33_9@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_36_11()
{
  return OutputGenerationManifest.responseViewId.setter(v0);
}

void OUTLINED_FUNCTION_38_11()
{
}

uint64_t WFChooseFromListPromptFlowStrategy.__allocating_init(request:shortcutName:appBundleId:siriEnvironment:deviceState:runCustomCatWrapper:runCustomCatWrapperSimple:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = OUTLINED_FUNCTION_19(v9, 136LL);
  WFChooseFromListPromptFlowStrategy.init(request:shortcutName:appBundleId:siriEnvironment:deviceState:runCustomCatWrapper:runCustomCatWrapperSimple:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
  return v18;
}

__n128 WFChooseFromListDisambiguationItem.init(component:item:)@<Q0>( __n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  unint64_t v4 = a1[2].n128_u64[0];
  unint64_t v5 = a1[2].n128_u64[1];
  a3->n128_u64[0] = a1->n128_u64[0];
  a3->n128_u64[1] = v3;
  __n128 result = a1[1];
  a3[1] = result;
  a3[2].n128_u64[0] = v4;
  a3[2].n128_u64[1] = v5;
  a3[3].n128_u64[0] = a2;
  return result;
}

uint64_t WFChooseFromListDisambiguationItem.component.getter@<X0>(void *a1@<X8>)
{
  id v3 = v2;
  return OUTLINED_FUNCTION_20_20(v1);
}

__n128 WFChooseFromListDisambiguationItem.component.setter(uint64_t a1)
{
  swift_bridgeObjectRelease(*(void *)(v1 + 40));
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = result;
  return result;
}

uint64_t WFChooseFromListDisambiguationItem.toDisambiguationItemModel()()
{
  *(void *)(v1 + 144) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  *(void *)(v1 + 15outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = OUTLINED_FUNCTION_9_0(*(void *)(v2 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 *inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v1 = *(_OWORD **)(v0 + 144);
  __int128 v3 = v1[1];
  uint64_t v2 = v1[2];
  *(_OWORD *)(v0 + 80) = *v1;
  *(_OWORD *)(v0 + 96) = v3;
  *(_OWORD *)(v0 + 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v2;
  unint64_t v4 = *(void *)(v0 + 88);
  *(void *)(v0 + 160) = *(void *)(v0 + 80);
  *(void *)(v0 + 168) = v4;
  unint64_t v5 = *(void *)(v0 + 104);
  *(void *)(v0 + 176) = *(void *)(v0 + 96);
  *(void *)(v0 + 184) = v5;
  outlined init with take of INImage?(v0 + 112, v0 + 136);
  outlined init with take of INImage?(v0 + 136, v0 + 128);
  if (*(void *)(v0 + 128))
  {
    uint64_t v6 = dword_21D15C;
    swift_bridgeObjectRetain(v4);
    OUTLINED_FUNCTION_80();
    unint64_t v7 = (void *)swift_task_alloc(v6);
    *(void *)(v0 + 19outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v7;
    *unint64_t v7 = v0;
    v7[1] = WFChooseFromListDisambiguationItem.toDisambiguationItemModel();
    return INImage.convertToVisualProperty()(*(void *)(v0 + 152));
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v10 = OUTLINED_FUNCTION_61_7();
    OUTLINED_FUNCTION_40_11(v9, 1LL, v11, v10);
    OUTLINED_FUNCTION_80();
    swift_bridgeObjectRetain(v4);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    uint64_t inited = (__n128 *)swift_initStackObject(v12, v0 + 16);
    uint64_t v14 = OUTLINED_FUNCTION_9_12(inited, (__n128)xmmword_17E650);
    OUTLINED_FUNCTION_56_9(v14, (uint64_t)&type metadata for String, v15, (uint64_t)&protocol witness table for String);
    uint64_t v16 = OUTLINED_FUNCTION_41_10();
    uint64_t v17 = OUTLINED_FUNCTION_51(v16);
    OUTLINED_FUNCTION_4_19(v17, v18, v19, v20, v21, v22, v23, v24, 1);
    OUTLINED_FUNCTION_20_0();
    uint64_t v25 = OUTLINED_FUNCTION_52_7();
    return OUTLINED_FUNCTION_25_3(v25, v26);
  }

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 192));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = (__n128 *)swift_initStackObject(v1, v0 + 16);
  __int128 v3 = OUTLINED_FUNCTION_9_12(inited, (__n128)xmmword_17E650);
  OUTLINED_FUNCTION_56_9(v3, (uint64_t)&type metadata for String, v4, (uint64_t)&protocol witness table for String);
  unint64_t v5 = OUTLINED_FUNCTION_41_10();
  uint64_t v6 = OUTLINED_FUNCTION_51(v5);
  OUTLINED_FUNCTION_4_19(v6, v7, v8, v9, v10, v11, v12, v13, 1);
  OUTLINED_FUNCTION_20_0();
  uint64_t v14 = OUTLINED_FUNCTION_52_7();
  return OUTLINED_FUNCTION_25_3(v14, v15);
}

uint64_t Array<A>.toDisambiguationItemModels()(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  *(void *)(v1 + 96) = OUTLINED_FUNCTION_9_0(*(void *)(v2 - 8));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v1;
  uint64_t v2;
  *(void *)(v1 + 96) = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  *(void *)(v1 + 104) = OUTLINED_FUNCTION_10_8(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t Array<A>.toDisambiguationItemModels()()
{
  v1[10] = _swiftEmptyArrayStorage;
  __int128 v3 = v1 + 10;
  uint64_t v4 = v1[11];
  uint64_t v5 = *(void *)(v4 + 16);
  v1[13] = v5;
  if (v5)
  {
    swift_bridgeObjectRetain(v4);
    uint64_t v7 = 0LL;
    while (1)
    {
      v1[14] = v7;
      OUTLINED_FUNCTION_8_16((void *)(v6 + 56 * v7));
      uint64_t v9 = *(void *)(v8 + 72);
      v1[20] = v9;
      uint64_t v10 = *(void **)(v8 + 80);
      v1[21] = v10;
      OUTLINED_FUNCTION_16_15();
      OUTLINED_FUNCTION_17_1();
      id v11 = v0;
      swift_bridgeObjectRetain(v9);
      id v12 = v10;
      if (v0)
      {
        OUTLINED_FUNCTION_16_15();
        OUTLINED_FUNCTION_17_1();
        uint64_t v40 = (void *)OUTLINED_FUNCTION_54_9();
        v1[22] = v40;
        uint64_t v41 = OUTLINED_FUNCTION_64_5(v40);
        return INImage.convertToVisualProperty()(v41);
      }

      uint64_t v13 = v1[12];
      uint64_t v14 = OUTLINED_FUNCTION_61_7();
      __swift_storeEnumTagSinglePayload(v13, 1LL, 1LL, v14);
      OUTLINED_FUNCTION_16_15();
      OUTLINED_FUNCTION_17_1();
      unint64_t v16 = v1[15];
      unint64_t v15 = v1[16];
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      uint64_t inited = (__n128 *)swift_initStackObject(v17, v1 + 2);
      unsigned __int8 v19 = OUTLINED_FUNCTION_29_11(inited, (__n128)xmmword_17E650);
      v19[2].n128_u64[1] = v20;
      v19[3].n128_u64[0] = v16;
      v19[3].n128_u64[1] = v15;
      OUTLINED_FUNCTION_16_15();
      uint64_t v21 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      uint64_t v22 = OUTLINED_FUNCTION_41_10();
      OUTLINED_FUNCTION_51(v22);
      OUTLINED_FUNCTION_55_9();
      WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)( v23,  v24,  v25,  v26,  v27,  v28,  0x8000000000192D90LL,  v21,  1);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_62_7();
      if (v30)
      {
        BOOL v37 = OUTLINED_FUNCTION_58_8(v29);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37, v38, v39);
      }

      uint64_t v0 = (void *)v1[20];
      unint64_t v45 = (void *)v1[21];
      uint64_t v31 = (void *)v1[19];
      char v32 = v3;
      uint64_t v33 = v1[13];
      uint64_t v34 = OUTLINED_FUNCTION_39_11();
      specialized Array._endMutation()(v34, v35, v36);
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_1_2();

      swift_bridgeObjectRelease(v0);
      if (v2 == v33) {
        break;
      }
      uint64_t v7 = v1[14] + 1LL;
      uint64_t v6 = v1[11];
      __int128 v3 = v32;
    }

    swift_bridgeObjectRelease(v1[11]);
  }

  swift_task_dealloc(v1[12]);
  uint64_t v43 = OUTLINED_FUNCTION_52_7();
  return v44(v43);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 176));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __n128 *inited;
  __n128 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v34;
  uint64_t v35;
  void *v37;
  while (1)
  {
    uint64_t v2 = v0[15];
    __int128 v3 = v0[16];
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    uint64_t inited = (__n128 *)swift_initStackObject(v4, v0 + 2);
    uint64_t v6 = OUTLINED_FUNCTION_29_11(inited, (__n128)xmmword_17E650);
    v6[2].n128_u64[1] = v7;
    v6[3].n128_u64[0] = v2;
    v6[3].n128_u64[1] = v3;
    swift_bridgeObjectRetain(v3);
    uint64_t v8 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    uint64_t v9 = OUTLINED_FUNCTION_41_10();
    OUTLINED_FUNCTION_51(v9);
    OUTLINED_FUNCTION_55_9();
    WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)( v10,  v11,  v12,  v13,  v14,  v15,  0x8000000000192D90LL,  v8,  1);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    OUTLINED_FUNCTION_62_7();
    if (v17)
    {
      char v30 = OUTLINED_FUNCTION_58_8(v16);
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30, v31, v32);
    }

    BOOL v37 = (void *)v0[21];
    uint64_t v18 = (void *)v0[19];
    unsigned __int8 v19 = (void *)v0[13];
    unint64_t v20 = OUTLINED_FUNCTION_39_11();
    specialized Array._endMutation()(v20, v21, v22);
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_1_2();

    OUTLINED_FUNCTION_14();
    if (v1 == v19)
    {
      swift_bridgeObjectRelease(v0[11]);
      swift_task_dealloc(v0[12]);
      OUTLINED_FUNCTION_52_7();
      OUTLINED_FUNCTION_35_12();
      __asm { BR              X1 }
    }

    uint64_t v23 = v0[14] + 1LL;
    v0[14] = v23;
    OUTLINED_FUNCTION_8_16((void *)(v0[11] + 56 * v23));
    v0[20] = *(void *)(v24 + 72);
    uint64_t v25 = *(void **)(v24 + 80);
    v0[21] = v25;
    OUTLINED_FUNCTION_16_15();
    OUTLINED_FUNCTION_17_1();
    uint64_t v26 = v19;
    OUTLINED_FUNCTION_80();
    uint64_t v27 = v25;
    if (v19) {
      break;
    }
    uint64_t v28 = v0[12];
    unint64_t v29 = OUTLINED_FUNCTION_61_7();
    __swift_storeEnumTagSinglePayload(v28, 1LL, 1LL, v29);
    OUTLINED_FUNCTION_16_15();
    OUTLINED_FUNCTION_17_1();
  }

  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_17_1();
  uint64_t v34 = (void *)OUTLINED_FUNCTION_54_9();
  v0[22] = v34;
  OUTLINED_FUNCTION_64_5(v34);
  OUTLINED_FUNCTION_35_12();
  return INImage.convertToVisualProperty()(v35);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  os_log_s *v38;
  os_log_type_t v39;
  uint64_t v40;
  os_log_s *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  void *v67;
  id v68;
  uint64_t v2 = _swiftEmptyArrayStorage;
  *(void *)(v0 + 80) = _swiftEmptyArrayStorage;
  __int128 v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v0 + 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v4;
  if (!v4)
  {
LABEL_20:
    swift_task_dealloc();
    return (*(uint64_t (**)(void *))(v0 + 8))(v2);
  }

  swift_bridgeObjectRetain(v3);
  uint64_t v5 = objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  uint64_t v6 = 0LL;
  *(void *)(v0 + 120) = v5;
  while (1)
  {
    *(void *)(v0 + 128) = v6;
    uint64_t v7 = *(void **)(v0 + 120);
    uint64_t v8 = (void *)(*(void *)(v0 + 96) + 56 * v6);
    uint64_t v9 = v8[5];
    *(void *)(v0 + 136) = v9;
    uint64_t v10 = v8[6];
    id v11 = v8[7];
    *(void *)(v0 + 144) = v11;
    id v12 = (void *)v8[8];
    *(void *)(v0 + 15outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v12;
    uint64_t v13 = v8[9];
    *(void *)(v0 + 160) = v13;
    uint64_t v14 = (void *)v8[10];
    *(void *)(v0 + 168) = v14;
    OUTLINED_FUNCTION_52_5();
    OUTLINED_FUNCTION_16_15();
    uint64_t v68 = v12;
    swift_bridgeObjectRetain(v13);
    unint64_t v15 = v14;
    *(void *)(v0 + 88) = 0LL;
    unint64_t v16 = [v7 archivedDataWithRootObject:v15 requiringSecureCoding:1 error:v0 + 88];
    uint64_t v17 = OUTLINED_FUNCTION_43_22();
    if (!v1)
    {
      uint64_t v26 = v17;
      uint64_t v27 = _convertNSErrorToError(_:)(v17);

      swift_willThrow(v28, v29, v30, v31, v32);
      swift_errorRelease(v27);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v33 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.voiceCommands);
      OUTLINED_FUNCTION_5_10(v9);
      OUTLINED_FUNCTION_5_10(v11);
      uint64_t v34 = v68;
      OUTLINED_FUNCTION_5_10(v13);
      uint64_t v35 = v15;
      uint64_t v36 = v34;
      BOOL v37 = v35;
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      uint64_t v39 = static os_log_type_t.error.getter();
      uint64_t v1 = (void *)v39;
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = OUTLINED_FUNCTION_38(12LL);
        uint64_t v41 = v38;
        os_log_type_t v42 = (void *)OUTLINED_FUNCTION_38(8LL);
        *(_DWORD *)uint64_t v40 = 138412290;
        *(void *)(v40 + 4) = v37;
        *os_log_type_t v42 = v37;
        OUTLINED_FUNCTION_19_1(v9);
        OUTLINED_FUNCTION_19_1(v11);

        OUTLINED_FUNCTION_19_1(v13);
        OUTLINED_FUNCTION_31_2( &dword_0,  v41,  (os_log_type_t)v1,  "Could not archive disambiguation data for value: %@",  (uint8_t *)v40);
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_30_3((uint64_t)v42, v44, v43);
        unint64_t v45 = (uint64_t)v42;
        uint64_t v38 = v41;
        OUTLINED_FUNCTION_1_0(v45);
        OUTLINED_FUNCTION_1_0(v40);
      }

      else
      {
        OUTLINED_FUNCTION_19_1(v9);
        OUTLINED_FUNCTION_19_1(v11);

        OUTLINED_FUNCTION_19_1(v13);
      }

      goto LABEL_17;
    }

    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
    unint64_t v20 = v19;

    *(void *)(v0 + 176) = v18;
    *(void *)(v0 + 184) = v20;
    OUTLINED_FUNCTION_6_4();
    OUTLINED_FUNCTION_52_5();
    uint64_t v21 = static CATSpeakableString.stripTTSHint(print:)();
    uint64_t v23 = v22;
    OUTLINED_FUNCTION_64_0();
    *(void *)(v0 + 19outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v21;
    *(void *)(v0 + 200) = v23;
    if (v11)
    {
      OUTLINED_FUNCTION_16_15();
      uint64_t v10 = static CATSpeakableString.stripTTSHint(print:)();
      uint64_t v25 = v24;
      OUTLINED_FUNCTION_56_1();
    }

    else
    {
      uint64_t v25 = 0LL;
    }

    *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0, v1 - 208) = v10;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v25;
    if (v12) {
      break;
    }
    uint64_t v46 = OUTLINED_FUNCTION_61_7();
    OUTLINED_FUNCTION_16_20(v46);
    uint64_t v47 = *(void *)(v0 + 208);
    uint64_t v48 = *(void *)(v0 + 216);
    unint64_t v50 = *(void *)(v0 + 192);
    uint64_t v49 = *(void *)(v0 + 200);
    uint64_t v52 = *(void *)(v0 + 176);
    uint64_t v51 = *(void *)(v0 + 184);
    uint64_t v53 = *(void *)(v0 + 104);
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
    *(_OWORD *)(swift_initStackObject(v54, v0 + 16) + swift_weakDestroy(v0 + 16) = xmmword_17E650;
    OUTLINED_FUNCTION_34_25();
    v55[4] = v56;
    v55[5] = 0xE500000000000000LL;
    v55[6] = v52;
    v55[7] = v51;
    Dictionary.init(dictionaryLiteral:)( v55,  &type metadata for String,  &type metadata for Data,  &protocol witness table for String);
    unint64_t v57 = OUTLINED_FUNCTION_11_32();
    OUTLINED_FUNCTION_51(v57);
    uint64_t v1 = OUTLINED_FUNCTION_8_42(v50, v49, v47, v48, v53, 0xD000000000000043LL, 0x8000000000192D90LL, v58, 0);
    uint64_t v59 = swift_retain(v1);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v59);
    uint64_t v61 = *(void *)((char *)&dword_10 + (*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8LL));
    uint64_t v60 = *(void *)((char *)&dword_18 + (*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8LL));
    if (v61 >= v60 >> 1) {
      OUTLINED_FUNCTION_118_4(v61 + 1, v60);
    }
    BOOL v37 = *(id *)(v0 + 168);
    uint64_t v36 = *(id *)(v0 + 152);
    uint64_t v62 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v61, v1);
    specialized Array._endMutation()(v62, v63, v64);
    swift_release();
LABEL_17:
    OUTLINED_FUNCTION_64_0();
    OUTLINED_FUNCTION_56_1();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_37_23();
    if (v65)
    {
      swift_bridgeObjectRelease();
      uint64_t v2 = *(void **)(v0 + 80);
      goto LABEL_20;
    }
  }

  char v67 = (void *)swift_task_alloc(dword_21D15C);
  *(void *)(v0 + 224) = v67;
  *char v67 = v0;
  v67[1] = Array<A>.toDisambiguationItemModels();
  return INImage.convertToVisualProperty()(*(void *)(v0 + 104));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_3_0(*(void *)(*(void *)v0 + 224LL));
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  id v41;
  id v42;
  id v43;
  id v44;
  os_log_s *v45;
  os_log_type_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v1 = v0 + 16;
  uint64_t v68 = v0 + 88;
  uint64_t v63 = v0 + 16;
  while (2)
  {
    uint64_t v69 = *(void *)(v0 + 216);
    uint64_t v2 = *(void *)(v0 + 192);
    uint64_t v65 = *(void *)(v0 + 200);
    uint64_t v66 = *(void *)(v0 + 208);
    uint64_t v4 = *(void *)(v0 + 176);
    __int128 v3 = *(void *)(v0 + 184);
    uint64_t v64 = *(void *)(v0 + 104);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
    *(_OWORD *)(swift_initStackObject(v5, v1) + swift_weakDestroy(v0 + 16) = xmmword_17E650;
    OUTLINED_FUNCTION_34_25();
    v6[4] = v7;
    void v6[5] = 0xE500000000000000LL;
    v6[6] = v4;
    v6[7] = v3;
    Dictionary.init(dictionaryLiteral:)( v6,  &type metadata for String,  &type metadata for Data,  &protocol witness table for String);
    uint64_t v8 = OUTLINED_FUNCTION_11_32();
    OUTLINED_FUNCTION_51(v8);
    uint64_t v10 = OUTLINED_FUNCTION_8_42(v2, v65, v66, v69, v64, 0xD000000000000043LL, 0x8000000000192D90LL, v9, 0);
    id v11 = swift_retain(v10);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
    uint64_t v13 = *(void *)((char *)&dword_10 + (*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8LL));
    id v12 = *(void *)((char *)&dword_18 + (*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8LL));
    if (v13 >= v12 >> 1) {
      OUTLINED_FUNCTION_118_4(v13 + 1, v12);
    }
    uint64_t v14 = *(void **)(v0 + 168);
    unint64_t v15 = *(void **)(v0 + 152);
    unint64_t v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
    specialized Array._endMutation()(v16, v17, v18);
    swift_release();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_2_6();

    swift_bridgeObjectRelease();
    while (1)
    {
      OUTLINED_FUNCTION_37_23();
      if (v20)
      {
        swift_bridgeObjectRelease();
        uint64_t v60 = *(void *)(v0 + 80);
        swift_task_dealloc();
        return (*(uint64_t (**)(uint64_t))(v0 + 8))(v60);
      }

      *(void *)(v0 + 128) = v19;
      uint64_t v21 = *(void **)(v0 + 120);
      uint64_t v22 = (void *)(*(void *)(v0 + 96) + 56 * v19);
      uint64_t v23 = v22[5];
      *(void *)(v0 + 136) = v23;
      uint64_t v24 = v22[6];
      uint64_t v25 = v22[7];
      *(void *)(v0 + 144) = v25;
      uint64_t v26 = (void *)v22[8];
      *(void *)(v0 + 15outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v26;
      uint64_t v27 = v22[9];
      *(void *)(v0 + 160) = v27;
      uint64_t v28 = (void *)v22[10];
      *(void *)(v0 + 168) = v28;
      swift_bridgeObjectRetain(v23);
      OUTLINED_FUNCTION_11_11();
      unint64_t v70 = v26;
      OUTLINED_FUNCTION_16_15();
      unint64_t v29 = v28;
      *(void *)(v0 + 88) = 0LL;
      char v30 = [v21 archivedDataWithRootObject:v29 requiringSecureCoding:1 error:v68];
      uint64_t v31 = OUTLINED_FUNCTION_43_22();
      if (v21) {
        break;
      }
      char v32 = v31;
      uint64_t v33 = _convertNSErrorToError(_:)(v31);

      swift_willThrow(v34, v35, v36, v37, v38);
      swift_errorRelease(v33);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v39 = OUTLINED_FUNCTION_48();
      uint64_t v40 = __swift_project_value_buffer(v39, (uint64_t)static Logger.voiceCommands);
      OUTLINED_FUNCTION_5_10(v23);
      OUTLINED_FUNCTION_5_10(v25);
      uint64_t v41 = v70;
      OUTLINED_FUNCTION_5_10(v27);
      os_log_type_t v42 = v29;
      uint64_t v43 = v41;
      uint64_t v44 = v42;
      unint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      uint64_t v46 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_21_6(v46))
      {
        uint64_t v47 = OUTLINED_FUNCTION_38(12LL);
        uint64_t v48 = (void *)OUTLINED_FUNCTION_38(8LL);
        *(_DWORD *)uint64_t v47 = 138412290;
        *(void *)(v47 + 4) = v44;
        *uint64_t v48 = v44;
        OUTLINED_FUNCTION_19_1(v23);
        OUTLINED_FUNCTION_19_1(v25);

        OUTLINED_FUNCTION_19_1(v27);
        OUTLINED_FUNCTION_31_2( &dword_0,  v45,  v40,  "Could not archive disambiguation data for value: %@",  (uint8_t *)v47);
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_30_3((uint64_t)v48, v50, v49);
        OUTLINED_FUNCTION_1_0((uint64_t)v48);
        OUTLINED_FUNCTION_1_0(v47);
      }

      else
      {
        OUTLINED_FUNCTION_19_1(v23);
        OUTLINED_FUNCTION_19_1(v25);

        OUTLINED_FUNCTION_19_1(v27);
      }

      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_69();

      OUTLINED_FUNCTION_56_1();
      uint64_t v0 = v67;
    }

    uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v53 = v52;

    *(void *)(v0 + 176) = v51;
    *(void *)(v0 + 184) = v53;
    OUTLINED_FUNCTION_6_4();
    swift_bridgeObjectRetain(v23);
    uint64_t v54 = static CATSpeakableString.stripTTSHint(print:)();
    unint64_t v56 = v55;
    OUTLINED_FUNCTION_1_2();
    *(void *)(v0 + 19outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v54;
    *(void *)(v0 + 200) = v56;
    if (v25)
    {
      OUTLINED_FUNCTION_11_11();
      uint64_t v24 = static CATSpeakableString.stripTTSHint(print:)();
      uint64_t v58 = v57;
      OUTLINED_FUNCTION_69();
    }

    else
    {
      uint64_t v58 = 0LL;
    }

    uint64_t v1 = v63;
    *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0, v1 - 208) = v24;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v58;
    if (!v26)
    {
      uint64_t v59 = OUTLINED_FUNCTION_61_7();
      OUTLINED_FUNCTION_16_20(v59);
      continue;
    }

    break;
  }

  uint64_t v62 = (void *)swift_task_alloc(dword_21D15C);
  *(void *)(v0 + 224) = v62;
  *uint64_t v62 = v0;
  v62[1] = Array<A>.toDisambiguationItemModels();
  return INImage.convertToVisualProperty()(*(void *)(v0 + 104));
}

void *WFChooseFromListPromptFlowStrategy.init(request:shortcutName:appBundleId:siriEnvironment:deviceState:runCustomCatWrapper:runCustomCatWrapperSimple:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  type metadata accessor for CATOption(0LL);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_35();
  v10[2] = 6LL;
  void v10[3] = a1;
  v10[4] = a2;
  v10[5] = a3;
  v10[6] = a4;
  v10[7] = a5;
  v10[16] = a6;
  outlined init with copy of DeviceState(a7, (uint64_t)(v10 + 8));
  uint64_t v33 = (void *)a7;
  outlined init with copy of DeviceState(a7, (uint64_t)v35);
  uint64_t v19 = one-time initialization token for shared;
  id v32 = a1;
  swift_retain(a6);
  swift_retain(a8);
  swift_retain(a9);
  if (v19 != -1) {
    swift_once(&one-time initialization token for shared, one-time initialization function for shared);
  }
  uint64_t v20 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs(0LL);
  uint64_t v21 = swift_retain(v20);
  static CATOption.defaultMode.getter(v21);
  uint64_t v22 = OUTLINED_FUNCTION_36_6();
  type metadata accessor for WorkflowRunnerCATsSimple(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v23 = OUTLINED_FUNCTION_35_7();
  type metadata accessor for RunVoiceCommandCATs(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v24 = OUTLINED_FUNCTION_36_6();
  type metadata accessor for RunVoiceCommandCATsSimple(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v25 = OUTLINED_FUNCTION_35_7();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0LL);
  OUTLINED_FUNCTION_18_7();
  uint64_t v26 = OUTLINED_FUNCTION_36_6();
  uint64_t v27 = type metadata accessor for WorkflowDialogTemplating();
  OUTLINED_FUNCTION_19(v27, 120LL);
  WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)( (uint64_t)v35,  v20,  v22,  v23,  a8,  a9,  v24,  v25,  v26);
  v10[13] = v28;
  type metadata accessor for WorkflowSnippetProvider();
  uint64_t v29 = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(v33);

  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v33);
  v10[14] = v29;
  uint64_t v30 = type metadata accessor for WorkflowNLContextProvider();
  v10[15] = OUTLINED_FUNCTION_19(v30, 16LL);
  return v10;
}

uint64_t outlined init with take of INImage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INImage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t WFChooseFromListPromptFlowStrategy.paginationStyle()()
{
  uint64_t v1 = v0 + 8;
  uint64_t v3 = v0[11];
  uint64_t v2 = v0[12];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  if ((DeviceState.isVox.getter(v3, v2) & 1) != 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v4 = OUTLINED_FUNCTION_48();
    uint64_t v5 = (void *)OUTLINED_FUNCTION_84(v4, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_31_0(v6))
    {
      uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v7 = 0;
      OUTLINED_FUNCTION_3_20( &dword_0,  v8,  v9,  "#WFChooseFromListPromptFlowStrategy paginationStyle() return pagination with size = 6");
      OUTLINED_FUNCTION_1_0((uint64_t)v7);
    }

    return static PaginationStyle.pageSize(_:)(6LL);
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v11 = OUTLINED_FUNCTION_48();
    id v12 = (void *)OUTLINED_FUNCTION_84(v11, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_31_0(v13))
    {
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v14 = 0;
      OUTLINED_FUNCTION_3_20( &dword_0,  v15,  v16,  "#WFChooseFromListPromptFlowStrategy paginationStyle() return no pagniation");
      OUTLINED_FUNCTION_1_0((uint64_t)v14);
    }

    return static PaginationStyle.noPagination()();
  }

void WFChooseFromListPromptFlowStrategy.actionForInput(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Parse.DirectInvocation(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_35();
  uint64_t v37 = v7 - v6;
  uint64_t v8 = OUTLINED_FUNCTION_60_5();
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  OUTLINED_FUNCTION_91();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v39 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v32 - v12;
  uint64_t v14 = type metadata accessor for Input(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_35();
  uint64_t v18 = v17 - v16;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v19 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v18, a1, v14);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = OUTLINED_FUNCTION_38(12LL);
    uint64_t v35 = v4;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v25 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v36 = a2;
    uint64_t v26 = v25;
    uint64_t v43 = v25;
    uint64_t v34 = a1;
    *(_DWORD *)uint64_t v24 = 136315138;
    uint64_t v33 = v24 + 4;
    uint64_t v27 = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input,  (uint64_t (*)(uint64_t))&type metadata accessor for Input,  (uint64_t)&protocol conformance descriptor for Input);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v14, v27);
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v33);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_38_12();
    _os_log_impl(&dword_0, v21, v22, "#WFChooseFromListPromptFlowStrategy actionForInput: %s", v24, 0xCu);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v26);
    OUTLINED_FUNCTION_1_0((uint64_t)v24);
  }

  else
  {
    OUTLINED_FUNCTION_38_12();
  }

  Input.parse.getter(v30);
  char v31 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v41);
  __asm { BR              X10 }

uint64_t WFChooseFromListPromptFlowStrategy.parseDisambiguationResponse(input:paginatedItems:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = OUTLINED_FUNCTION_60_5();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[9] = v6;
  v4[10] = OUTLINED_FUNCTION_9_0(v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>?);
  v4[11] = OUTLINED_FUNCTION_4_0(*(void *)(v7 - 8));
  v4[12] = swift_task_alloc(v3);
  uint64_t v8 = type metadata accessor for Input(0LL);
  void v4[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[14] = v9;
  v4[15] = OUTLINED_FUNCTION_9_0(v9);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFChooseFromListPromptFlowStrategy.parseDisambiguationResponse(input:paginatedItems:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[5];
  uint64_t v5 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = v0[14];
  uint64_t v10 = v0[15];
  if (v9)
  {
    uint64_t v38 = v0[13];
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v13 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v39 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v14 = Input.description.getter();
    unint64_t v16 = v15;
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 4);
    swift_bridgeObjectRelease(v16);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v38);
    _os_log_impl( &dword_0,  v7,  v8,  "#WFChooseFromListPromptFlowStrategy parseDisambiguationResponse with input: %s",  v12,  0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v13);
    OUTLINED_FUNCTION_1_0((uint64_t)v12);
  }

  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[15], v0[13]);
  }

  uint64_t v17 = v0[12];
  uint64_t v19 = v0[9];
  uint64_t v18 = v0[10];
  uint64_t v20 = v0[8];
  Input.parse.getter(v21);
  WFChooseFromListPromptFlowStrategy.getVoiceCommandPagination(parse:)(v18, v17);
  os_log_type_t v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v22(v18, v20);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>);
  int v24 = OUTLINED_FUNCTION_43_8();
  uint64_t v25 = v0[12];
  if (v24 != 1) {
    goto LABEL_9;
  }
  uint64_t v26 = v0[10];
  uint64_t v27 = v0[8];
  uint64_t v28 = outlined destroy of URL?( v0[12],  &demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>?);
  Input.parse.getter(v28);
  WFChooseFromListPromptFlowStrategy.getConfirmationForPagination(parse:)(v26);
  v22(v26, v27);
  int v29 = OUTLINED_FUNCTION_43_8();
  uint64_t v25 = v0[11];
  if (v29 == 1)
  {
    uint64_t v30 = v0[5];
    outlined destroy of URL?( v0[11],  &demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>?);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<WFChooseFromListDisambiguationItem>);
    uint64_t v32 = PaginatedItemContainer.items.getter(v31);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputToDisambiguationItemsConverter<WFChooseFromListDisambiguationItem>);
    OUTLINED_FUNCTION_19(v33, 40LL);
    uint64_t v34 = specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)( v32,  0LL,  (uint64_t)&outlined read-only object #0 of specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:));
    v0[2] = (*(uint64_t (**)(uint64_t))(*v34 + 128LL))(v30);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WFChooseFromListDisambiguationItem]);
    static DisambiguationResult.chosenItem(_:)(v0 + 2, v35);
    swift_release();
    OUTLINED_FUNCTION_1_2();
  }

  else
  {
LABEL_9:
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL))(v0[4], v25, v23);
  }

  swift_task_dealloc(v0[15]);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  uint64_t v36 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v36();
}

uint64_t WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:)( uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  void v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[10] = OUTLINED_FUNCTION_9_0(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for DialogPhase(0LL);
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[12] = v6;
  v3[13] = OUTLINED_FUNCTION_4_0(v6);
  v3[14] = swift_task_alloc(v2);
  uint64_t v7 = type metadata accessor for OutputGenerationManifest(0LL);
  v3[15] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[16] = v8;
  v3[17] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = type metadata accessor for RFFeatureFlags.ResponseFramework(0LL);
  v3[18] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[19] = v10;
  v3[20] = OUTLINED_FUNCTION_9_0(v10);
  uint64_t v11 = type metadata accessor for NLContextUpdate(0LL);
  v3[21] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[22] = v12;
  v3[23] = OUTLINED_FUNCTION_9_0(v12);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  uint64_t v2 = (os_log_s *)OUTLINED_FUNCTION_84(v1, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_38(2LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#WFChooseFromListPromptFlowStrategy make prompt for disambiguation item", v4, 2u);
    OUTLINED_FUNCTION_1_0((uint64_t)v4);
  }

  uint64_t v6 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v7 = v0[18];
  uint64_t v8 = v0[9];

  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<WFChooseFromListDisambiguationItem>);
  uint64_t v10 = PaginatedItemContainer.items.getter(v9);
  v0[24] = v10;
  (*(void (**)(void))(**(void **)(v8 + 120) + 216LL))();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))( v5,  enum case for RFFeatureFlags.ResponseFramework._SMART(_:),  v7);
  char v11 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = v0[9];
    uint64_t v13 = *(void *)(v12 + 24);
    uint64_t v14 = *(void *)(v12 + 128);
    unint64_t v15 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(**(void **)(v12 + 104) + 224LL));
    v0[25] = (uint64_t)v15;
    *unint64_t v15 = v0;
    v15[1] = WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:);
    return v18(v13, v10, v14);
  }

  else
  {
    uint64_t v17 = (uint64_t **)swift_task_alloc(dword_2171BC);
    v0[35] = (uint64_t)v17;
    *uint64_t v17 = v0;
    v17[1] = (uint64_t *)WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:);
    return WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation_preRFv2(items:nlContextUpdate:)( v0[7],  v10,  v0[23]);
  }

{
  Swift::String_optional *v0;
  Swift::String_optional **v1;
  v0[14] = DialogExecutionResult.firstDialogFullPrint()();
  uint64_t v1 = (Swift::String_optional **)swift_task_alloc(dword_21717C);
  v0[15].value._uint64_t countAndFlagsBits = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (Swift::String_optional *)WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:);
  return Array<A>.toDisambiguationItemModels()(v0[12].value._countAndFlagsBits);
}

{
  uint64_t v0;
  void *v1;
  OUTLINED_FUNCTION_50_0();
  uint64_t v1 = (void *)(v0 + 16);
  OUTLINED_FUNCTION_3_0(*(void *)(v0 + 272));
  swift_release();
  OUTLINED_FUNCTION_14();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 184);
  os_log_type_t v3 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 120);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  OUTLINED_FUNCTION_24_13();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v7 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v7();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_50_0();
  os_log_type_t v3 = *(void *)(v2 + 280);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 288) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_12_0();
  return swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t (*v1)(void);
  (*(void (**)(void, void))(v0[22] + 8LL))(v0[23], v0[21]);
  OUTLINED_FUNCTION_24_13();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  uint64_t v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_12_17();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_12_17();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return OUTLINED_FUNCTION_2_1(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 200);
  *(void *)(*v2 + outlined init with copy of AppShortcutInvoking(v0, v1 - 208) = v1;
  swift_task_dealloc(v5);
  if (v1) {
    swift_bridgeObjectRelease(*(void *)(v4 + 192));
  }
  else {
    *(void *)(v4 + 2swift_weakDestroy(v0 + 16) = a1;
  }
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_14_0();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 240LL);
  *(void *)(*(void *)v1 + 248LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

void WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:)()
{
  __int128 v22 = *(_OWORD *)(v0 + 224);
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v23 = *(void *)(v0 + 248);
  int v24 = v1;
  uint64_t v21 = *(void *)(v0 + 184);
  uint64_t v19 = *(void *)(v0 + 176);
  uint64_t v20 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 80);
  static DialogPhase.clarification.getter();
  id v7 = [v1 catId];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  OutputGenerationManifest.init(dialogPhase:_:)(v3, CustomIntentDisambiguationItemContainer.init(items:), 0LL);
  OutputGenerationManifest.responseViewId.setter(v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  OutputGenerationManifest.canUseServerTTS.setter(1LL);
  OutputGenerationManifest.listenAfterSpeaking.setter(1LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v6, v21, v20);
  __swift_storeEnumTagSinglePayload(v6, 0LL, 1LL, v20);
  OutputGenerationManifest.nlContextUpdate.setter(v6);
  uint64_t v9 = type metadata accessor for ResponseFactory(0LL);
  OUTLINED_FUNCTION_51(v9);
  *(void *)(v0 + 256) = ResponseFactory.init()();
  uint64_t v10 = type metadata accessor for WorkflowDataModels(0LL);
  *(void *)(v0 + 40) = v10;
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels,  type metadata accessor for WorkflowDataModels,  (uint64_t)&protocol conformance descriptor for WorkflowDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 16));
  *(_OWORD *)boxed_opaque_existential_1 = v22;
  boxed_opaque_existential_1[2] = v23;
  swift_storeEnumTagMultiPayload(boxed_opaque_existential_1, v10, 7LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = OUTLINED_FUNCTION_19(v12, 40LL);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_17E150;
  *(void *)(v13 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v24;
  uint64_t v25 = v13;
  specialized Array._endMutation()(v13, v14, v15);
  *(void *)(v0 + 264) = v25;
  id v16 = v24;
  uint64_t v17 = (void *)OUTLINED_FUNCTION_54_9();
  *(void *)(v0 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v17;
  *uint64_t v17 = v0;
  v17[1] = WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:);
  OUTLINED_FUNCTION_35_12();
  __asm { BR              X4 }

uint64_t WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation_preRFv2(items:nlContextUpdate:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[11] = OUTLINED_FUNCTION_9_0(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for TemplatingResult(0LL);
  v4[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v4[13] = v7;
  v4[14] = OUTLINED_FUNCTION_9_0(v7);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation_preRFv2(items:nlContextUpdate:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 128);
  uint64_t v4 = *(int **)(**(void **)(v1 + 104) + 232LL);
  uint64_t v7 = (int *)((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[15] = v5;
  *uint64_t v5 = v0;
  v5[1] = WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation_preRFv2(items:nlContextUpdate:);
  return ((uint64_t (*)(void, uint64_t, void, uint64_t))v7)(v0[14], v2, v0[8], v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  OUTLINED_FUNCTION_50_0();
  uint64_t v3 = *(void *)(v2 + 120);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 128) = v0;
  swift_task_dealloc(v3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  Swift::Bool v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t);
  uint64_t v1 = v0[14];
  uint64_t v2 = (void *)v0[10];
  uint64_t v3 = v2[11];
  uint64_t v4 = v2[12];
  __swift_project_boxed_opaque_existential_1(v2 + 8, v3);
  uint64_t v5 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v3, v4);
  uint64_t v6 = type metadata accessor for ViewFactory(0LL);
  OUTLINED_FUNCTION_51(v6);
  v0[17] = ViewFactory.init(ttsEnabled:)(v5 & 1);
  uint64_t v7 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  uint64_t v8 = dispatch thunk of ViewFactory.makeUtteranceViews(template:listenAfterSpeaking:canUseServerTTS:)(v1, v7, 0LL);
  v0[18] = v8;
  uint64_t v9 = v2[14];
  uint64_t v10 = v2[4];
  char v11 = v2[5];
  uint64_t v12 = v2[6];
  uint64_t v13 = v2[7];
  uint64_t v14 = (void *)OUTLINED_FUNCTION_20_4(*(void *)(*(void *)v9 + 112LL));
  v0[19] = v14;
  *uint64_t v14 = v0;
  v14[1] = WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation_preRFv2(items:nlContextUpdate:);
  return v16(v10, v11, v12, v13, v0[8], v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Bool v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);
  id v16 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void **)(v0 + 80);
  uint64_t v6 = *(void **)(v0 + 56);
  uint64_t v7 = v4 + 8;
  uint64_t v8 = v4[11];
  uint64_t v9 = v4[12];
  __swift_project_boxed_opaque_existential_1(v4 + 8, v8);
  LOBYTE(v8) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter(v8, v9);
  uint64_t v10 = TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  char v11 = type metadata accessor for NLContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v3, v5, v11);
  __swift_storeEnumTagSinglePayload(v3, 0LL, 1LL, v11);
  uint64_t v12 = type metadata accessor for AceOutput(0LL);
  *(_OWORD *)(v0 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
  *(void *)(v0 + 48) = 0LL;
  *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = 0u;
  void v6[3] = v12;
  v6[4] = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)( v2,  v7,  v8 & 1,  v1,  v10,  1LL,  v3,  _swiftEmptyArrayStorage,  v0 + 16);
  OUTLINED_FUNCTION_69();
  swift_release();
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v2, v16);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_20_0();
  uint64_t v13 = (uint64_t (*)(void))OUTLINED_FUNCTION_54();
  return v13();
}

{
  uint64_t v0;
  swift_task_dealloc(*(void *)(v0 + 112));
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_27_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation_preRFv2(items:nlContextUpdate:)( uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 16Hasher.init(_seed:)(v0, 0LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

void WFChooseFromListPromptFlowStrategy.getVoiceCommandPagination(parse:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = type metadata accessor for NLIntent(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_46_11();
  uint64_t v8 = OUTLINED_FUNCTION_60_5();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_18_11();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v3, a1, v8);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v3, v8);
  if (v10 == enum case for Parse.NLv3IntentOnly(_:))
  {
    OUTLINED_FUNCTION_45_6();
  }

  else
  {
    if (v10 != enum case for Parse.NLv3IntentPlusServerConversion(_:))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>);
      OUTLINED_FUNCTION_40_11(a2, 1LL, v12, v11);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v8);
      goto LABEL_7;
    }

    OUTLINED_FUNCTION_45_6();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v3, v6);
  WFChooseFromListPromptFlowStrategy.getPaginationFromNLIntent(intent:)(v2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
LABEL_7:
  OUTLINED_FUNCTION_8_2();
}

void WFChooseFromListPromptFlowStrategy.getPaginationFromNLIntent(intent:)(uint64_t a1)
{
  uint64_t v4 = OUTLINED_FUNCTION_51_11();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_18_11();
  uint64_t v6 = type metadata accessor for VoiceCommandsNLIntent(0LL);
  OUTLINED_FUNCTION_91();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_35();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for NLIntent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v10, a1, v11);
  if (one-time initialization token for voiceCommandPaginationNode != -1) {
    swift_once( &one-time initialization token for voiceCommandPaginationNode,  one-time initialization function for voiceCommandPaginationNode);
  }
  uint64_t v12 = static VoiceCommandsNLIntent.voiceCommandPaginationNode;
  uint64_t v13 = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels( (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent,  type metadata accessor for VoiceCommandsNLIntent,  (uint64_t)&protocol conformance descriptor for VoiceCommandsNLIntent);
  uint64_t v14 = IntentNodeTraversable.value<A>(forNode:)(v12, v6, v13);
  if (v19 - 2 >= 2)
  {
    if (v19) {
      static PaginationRequest.previousPage()(v14);
    }
    else {
      static PaginationRequest.nextPage()(v14);
    }
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WFChooseFromListDisambiguationItem]);
    static DisambiguationResult.paginate(_:)(v2, v16);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v15 = 1LL;
  }

  outlined destroy of VoiceCommandsNLIntent(v10);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>);
  OUTLINED_FUNCTION_40_11(v1, v15, v18, v17);
  OUTLINED_FUNCTION_8_2();
}

void WFChooseFromListPromptFlowStrategy.getConfirmationForPagination(parse:)(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_51_11();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_46_11();
  uint64_t v3 = (char *)sub_69BBC
     + 4 * byte_181EB4[static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)(a1)];
  __asm { BR              X10 }

uint64_t sub_69BBC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>);
  return __swift_storeEnumTagSinglePayload(v0, 1LL, 1LL, v1);
}

uint64_t sub_69BF0(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WFChooseFromListDisambiguationItem]);
  static DisambiguationResult.paginate(_:)(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>);
  return OUTLINED_FUNCTION_40_11(v1, 0LL, v7, v6);
}

uint64_t WFChooseFromListPromptFlowStrategy.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 64));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t WFChooseFromListPromptFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 136LL, 7LL);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.paginationStyle() in conformance WFChooseFromListPromptFlowStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.actionForInput(_:) in conformance WFChooseFromListPromptFlowStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.parseDisambiguationResponse(input:paginatedItems:) in conformance WFChooseFromListPromptFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(*(void *)v3 + 176LL);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return v11(a1, a2, a3);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:) in conformance WFChooseFromListPromptFlowStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(*(void *)v2 + 184LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return v9(a1, a2);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:) in conformance WFChooseFromListPromptFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v8;
  uint64_t v9 = type metadata accessor for WFChooseFromListPromptFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:) in conformance WFChooseFromListPromptFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v8;
  uint64_t v9 = type metadata accessor for WFChooseFromListPromptFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse() in conformance WFChooseFromListPromptFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse()[1]);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:) in conformance WFChooseFromListPromptFlowStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:)[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, a3, a4);
}

void *specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)( uint64_t a1, uint64_t a2)
{
  return specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)( a1,  a2,  (uint64_t)&outlined read-only object #0 of specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:));
}

{
  return specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)( a1,  a2,  (uint64_t)&outlined read-only object #0 of specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:));
}

void *specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a3;
  v3[2] = a1;
  if (a2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = swift_bridgeObjectRetain(a1);
  }
  void v3[3] = v4;
  return v3;
}

void destroy for WFChooseFromListDisambiguationItem(uint64_t a1)
{
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
}

void *initializeWithCopy for WFChooseFromListDisambiguationItem(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v6 = (void *)a2[4];
  uint64_t v5 = a2[5];
  a1[4] = v6;
  a1[5] = v5;
  uint64_t v7 = (void *)a2[6];
  a1[6] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  id v8 = v6;
  swift_bridgeObjectRetain(v5);
  id v9 = v7;
  return a1;
}

void *assignWithCopy for WFChooseFromListDisambiguationItem(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  id v8 = (void *)a1[4];
  id v9 = (void *)a2[4];
  a1[4] = v9;
  id v10 = v9;

  uint64_t v11 = a2[5];
  uint64_t v12 = a1[5];
  a1[5] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = (void *)a2[6];
  uint64_t v14 = (void *)a1[6];
  a1[6] = v13;
  id v15 = v13;

  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for WFChooseFromListDisambiguationItem(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  swift_bridgeObjectRelease(a1[5]);
  uint64_t v7 = (void *)a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for WFChooseFromListDisambiguationItem(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(voutlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WFChooseFromListDisambiguationItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for WFChooseFromListDisambiguationItem()
{
  return &type metadata for WFChooseFromListDisambiguationItem;
}

uint64_t type metadata accessor for WFChooseFromListPromptFlowStrategy()
{
  return objc_opt_self(&OBJC_CLASS____TtC18SiriLinkFlowPlugin34WFChooseFromListPromptFlowStrategy);
}

void *OUTLINED_FUNCTION_4_19( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)( v14,  v13,  v12,  v11,  v10,  0xD000000000000043LL,  v9 | 0x8000000000000000LL,  v15,  a9);
}

void OUTLINED_FUNCTION_8_16(void *a1@<X8>)
{
  v1[15] = a1[4];
  v1[16] = a1[5];
  v1[17] = a1[6];
  v1[18] = a1[7];
  v1[19] = a1[8];
}

uint64_t OUTLINED_FUNCTION_9_12(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x656C746974LL;
  a1[2].n128_u64[1] = 0xE500000000000000LL;
  a1[3].n128_u64[0] = v3;
  a1[3].n128_u64[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t OUTLINED_FUNCTION_12_17()
{
  return (*(uint64_t (**)(void, void))(v0[22] + 8LL))(v0[23], v0[21]);
}

uint64_t OUTLINED_FUNCTION_14_17@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v7;
  a1[5] = v6;
  return swift_bridgeObjectRetain(v2);
}

uint64_t OUTLINED_FUNCTION_16_15()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_20_20(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t OUTLINED_FUNCTION_24_13()
{
  return swift_task_dealloc(*(void *)(v0 + 184));
}

__n128 *OUTLINED_FUNCTION_29_11(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x656C746974LL;
  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_38_12()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_39_11()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_40_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1LL, a4);
}

uint64_t OUTLINED_FUNCTION_41_10()
{
  return type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0LL);
}

uint64_t OUTLINED_FUNCTION_43_8()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_45_6()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v0, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_50_11()
{
  return static ActionForInput.ignore()();
}

uint64_t OUTLINED_FUNCTION_51_11()
{
  return type metadata accessor for PaginationRequest(0LL);
}

uint64_t OUTLINED_FUNCTION_52_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_54_9()
{
  return swift_task_alloc(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_56_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Dictionary.init(dictionaryLiteral:)(v4, a2, a2, a4);
}

BOOL OUTLINED_FUNCTION_58_8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_60_5()
{
  return type metadata accessor for Parse(0LL);
}

uint64_t OUTLINED_FUNCTION_61_7()
{
  return type metadata accessor for VisualProperty(0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_64_5(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 96);
}

uint64_t Array<A>.isAudioStarting.getter(uint64_t a1)
{
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___LNSystemProtocol);
  id v3 = [v2 audioStartingProtocol];
  char v4 = specialized Sequence<>.contains(_:)((uint64_t)v3, a1);

  if ((v4 & 1) != 0) {
    return 1LL;
  }
  id v6 = [v2 audioRecordingProtocol];
  char v7 = specialized Sequence<>.contains(_:)((uint64_t)v6, a1);

  return v7 & 1;
}

uint64_t LNActionPresentationStyle.asSiriLinkFlowProvisionalActionPresentationStyle()(unint64_t a1)
{
  if (a1 < 3) {
    return (a1 + 1);
  }
  else {
    return 0LL;
  }
}

void __swiftcall LNAction.asSiriLinkFlowProvisionalLinkAction()( SiriLinkFlowProvisionalLinkAction_optional *__return_ptr retstr)
{
  id v1 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalLinkAction) init];
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = OUTLINED_FUNCTION_4((uint64_t)v1, "identifier");
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    outlined bridged method (mbnn) of @objc SiriLinkFlowProvisionalLinkAction.identifier.setter( v4,  v6,  v2,  (SEL *)&selRef_setIdentifier_);
    id v8 = OUTLINED_FUNCTION_4(v7, "presentationStyle");
    else {
      uint64_t v9 = 0LL;
    }
    id v10 = OUTLINED_FUNCTION_4((uint64_t)[v2 setPresentationStyle:v9], "parameters");
    uint64_t v11 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNProperty,  &OBJC_CLASS___LNProperty_ptr);
    uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

    if ((unint64_t)v12 >> 62)
    {
      if (v12 < 0) {
        uint64_t v23 = v12;
      }
      else {
        uint64_t v23 = v12 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v12);
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v23);
      OUTLINED_FUNCTION_20();
      if (v13) {
        goto LABEL_7;
      }
    }

    else
    {
      uint64_t v13 = *(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8LL));
      if (v13)
      {
LABEL_7:
        if (v13 < 1)
        {
          __break(1u);
          return;
        }

        for (uint64_t i = 0LL; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001LL) != 0) {
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v12);
          }
          else {
            id v15 = *(id *)(v12 + 8 * i + 32);
          }
          uint64_t v16 = v15;
          id v17 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalLinkActionParameter) init];
          if (v17)
          {
            uint64_t v18 = v17;
            id v19 = [v16 identifier];
            uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v22 = v21;

            outlined bridged method (mbnn) of @objc SiriLinkFlowProvisionalLinkAction.identifier.setter( v20,  v22,  v18,  (SEL *)&selRef_setName_);
            [v2 addParameters:v18];
          }
        }
      }
    }

    OUTLINED_FUNCTION_20();
  }

void specialized static ProvisionalInstrumentationUtils.emitLinkFlowProvisionalInstrumentation<A>(event:siriEnvironment:)( uint64_t a1, uint64_t a2)
{
}

void specialized static ProvisionalInstrumentationUtils.emitLinkFlowProvisionalInstrumentation<A>(event:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t *a3, SEL *a4)
{
  unint64_t v70 = a4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_9_13();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v66 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v13 = __chkstk_darwin(v12);
  id v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v17 = (char *)&v66 - v16;
  id v18 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalSiriLinkFlowClientEvent) init];
  if (v18)
  {
    id v71 = v18;
    id v69 = [objc_allocWithZone(FLOWSchemaFLOWEventMetadata) init];
    if (!v69)
    {

      return;
    }

    uint64_t v68 = v17;
    uint64_t ObjectType = swift_getObjectType(a1);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v66 = String.init<A>(describing:)(&ObjectType, v19);
    unint64_t v67 = v20;
    uint64_t v21 = SiriEnvironment.flowTask.getter();
    uint64_t v22 = dispatch thunk of FlowTaskProvider.id.getter(v21);
    unint64_t v24 = v23;
    swift_release();
    if (v24)
    {
      uint64_t v25 = (uint64_t)v68;
      UUID.init(uuidString:)(v22, v24);
      outlined init with copy of UUID?(v25, (uint64_t)v15);
      if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1LL, v7) == 1)
      {
        outlined destroy of UUID?((uint64_t)v15);
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v26 = OUTLINED_FUNCTION_48();
        uint64_t v27 = (os_log_s *)__swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
        unint64_t v28 = v67;
        swift_bridgeObjectRetain(v67);
        swift_bridgeObjectRetain(v24);
        Logger.logObject.getter(v29);
        os_log_type_t v30 = OUTLINED_FUNCTION_73();
        if (os_log_type_enabled(v27, v30))
        {
          uint64_t v31 = OUTLINED_FUNCTION_38(22LL);
          uint64_t v32 = OUTLINED_FUNCTION_38(64LL);
          uint64_t ObjectType = v32;
          *(_DWORD *)uint64_t v31 = 136315394;
          swift_bridgeObjectRetain(v24);
          uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &ObjectType);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &ObjectType, v31 + 4);
          OUTLINED_FUNCTION_37_3(v24);
          *(_WORD *)(v31 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
          swift_bridgeObjectRetain(v28);
          uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v28, &ObjectType);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &ObjectType, v31 + 14);
          OUTLINED_FUNCTION_37_3(v28);
          _os_log_impl( &dword_0,  v27,  v30,  "#LINK SELF Log, current taskId: %s, is not a valid UUID String, cannot emit %s",  (uint8_t *)v31,  0x16u);
          swift_arrayDestroy(v32, 2LL, (char *)&type metadata for Any + 8);
          OUTLINED_FUNCTION_1_0(v32);
          OUTLINED_FUNCTION_1_0(v31);
        }

        else
        {
          OUTLINED_FUNCTION_19_1(v24);
          OUTLINED_FUNCTION_19_1(v28);
        }

        OUTLINED_FUNCTION_18_16();
        OUTLINED_FUNCTION_14_18();
      }

      else
      {
        swift_bridgeObjectRelease(v24);
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v15, v7);
        type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID,  &OBJC_CLASS___SISchemaUUID_ptr);
        (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v4, v11, v7);
        id v44 = SISchemaUUID.__allocating_init(nsuuid:)();
        unint64_t v45 = v69;
        OUTLINED_FUNCTION_10_11((uint64_t)v44, "setTaskId:");

        id v46 = static ProvisionalInstrumentationUtils.createFlowId(siriEnvironment:)();
        OUTLINED_FUNCTION_10_11((uint64_t)v46, "setFlowId:");

        uint64_t v48 = SiriEnvironment.currentRequest.getter(v47);
        CurrentRequest.resultCandidateId.getter(v48);
        uint64_t v50 = v49;
        uint64_t v51 = swift_release();
        if (v50)
        {
          NSString v52 = String._bridgeToObjectiveC()();
          uint64_t v51 = OUTLINED_FUNCTION_20();
        }

        else
        {
          NSString v52 = 0LL;
        }

        unint64_t v53 = v67;
        OUTLINED_FUNCTION_10_11(v51, "setResultCandidateId:");

        [v71 setEventMetadata:v45];
        objc_msgSend(v71, *v70, a1);
        if (one-time initialization token for voiceCommands != -1) {
          swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
        }
        uint64_t v54 = OUTLINED_FUNCTION_48();
        __swift_project_value_buffer(v54, (uint64_t)static Logger.voiceCommands);
        swift_bridgeObjectRetain(v53);
        unint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
        os_log_type_t v57 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
          uint64_t v59 = OUTLINED_FUNCTION_38(32LL);
          uint64_t ObjectType = v59;
          *(_DWORD *)uint64_t v58 = 136315138;
          swift_bridgeObjectRetain(v53);
          uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v53, &ObjectType);
          uint64_t v61 = OUTLINED_FUNCTION_64_4(v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v61, v62, v58 + 4);
          OUTLINED_FUNCTION_37_3(v53);
          OUTLINED_FUNCTION_31_2(&dword_0, v56, v57, "#LINK Provisional SELF emitting %s", v58);
          OUTLINED_FUNCTION_30_3(v59, v63, (uint64_t)&type metadata for Any + 8);
          uint64_t v64 = v59;
          unint64_t v45 = v69;
          OUTLINED_FUNCTION_1_0(v64);
          OUTLINED_FUNCTION_1_0((uint64_t)v58);
        }

        else
        {

          OUTLINED_FUNCTION_19_1(v53);
        }

        id v65 = [(id)objc_opt_self(AssistantSiriAnalytics) sharedStream];
        [v65 emitMessage:v71];

        OUTLINED_FUNCTION_14_18();
        swift_unknownObjectRelease(v65);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      }

      outlined destroy of UUID?((uint64_t)v68);
    }

    else
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v33 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.voiceCommands);
      unint64_t v34 = v67;
      swift_bridgeObjectRetain(v67);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
        uint64_t v39 = OUTLINED_FUNCTION_38(32LL);
        uint64_t ObjectType = v39;
        *(_DWORD *)uint64_t v38 = 136315138;
        swift_bridgeObjectRetain(v34);
        uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v34, &ObjectType);
        uint64_t v41 = OUTLINED_FUNCTION_64_4(v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, v42, v38 + 4);
        OUTLINED_FUNCTION_37_3(v34);
        OUTLINED_FUNCTION_31_2(&dword_0, v36, v37, "#LINK SELF Log, current taskId is nil, cannot emit %s", v38);
        OUTLINED_FUNCTION_30_3(v39, v43, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v39);
        OUTLINED_FUNCTION_1_0((uint64_t)v38);
        OUTLINED_FUNCTION_18_16();
        OUTLINED_FUNCTION_14_18();
      }

      else
      {

        OUTLINED_FUNCTION_19_1(v34);
        OUTLINED_FUNCTION_18_16();
        OUTLINED_FUNCTION_14_18();
      }
    }
  }

  OUTLINED_FUNCTION_24_0();
}

id static ProvisionalInstrumentationUtils.createFlowId(siriEnvironment:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v34 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v34 - v11;
  static ProvisionalInstrumentationUtils.createFlowUUID(siriEnvironment:)((uint64_t)v2);
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1LL, v3) == 1)
  {
    outlined destroy of UUID?((uint64_t)v2);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    id v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v17 = 0;
      _os_log_impl( &dword_0,  v15,  v16,  "#LINK SELF Log, invalid executionRequestId string, cannot derive flowId form it",  v17,  2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    return 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v2, v3);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
    unint64_t v20 = *(uint64_t (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v21 = v20(v10, v12, v3);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc(12LL, -1LL);
      os_log_type_t v37 = v20;
      uint64_t v25 = (uint8_t *)v24;
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = v26;
      uint64_t v39 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v35 = v25 + 4;
      uint64_t v27 = UUID.uuidString.getter(v26);
      unint64_t v29 = v28;
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v35);
      swift_bridgeObjectRelease(v29);
      os_log_type_t v30 = *(void (**)(char *, uint64_t))(v4 + 8);
      v30(v10, v3);
      _os_log_impl(&dword_0, v22, v23, "#LINK SELF Log, created flowId: %s", v25, 0xCu);
      uint64_t v31 = v36;
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      uint64_t v32 = v25;
      unint64_t v20 = v37;
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
      os_log_type_t v30 = *(void (**)(char *, uint64_t))(v4 + 8);
      v30(v10, v3);
    }

    type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID,  &OBJC_CLASS___SISchemaUUID_ptr);
    v20(v7, v12, v3);
    id v18 = SISchemaUUID.__allocating_init(nsuuid:)();
    v30(v12, v3);
  }

  return v18;
}

void static ProvisionalInstrumentationUtils.createFlowUUID(siriEnvironment:)(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_9_13();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v57 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v57 - v13;
  uint64_t v15 = SiriEnvironment.currentRequest.getter(v12);
  uint64_t v16 = CurrentRequest.executionRequestId.getter(v15);
  uint64_t v18 = v17;
  swift_release();
  if (v18)
  {
    UUID.init(uuidString:)(v16, v18);
    OUTLINED_FUNCTION_20();
    if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v6) == 1)
    {
      outlined destroy of UUID?((uint64_t)v5);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v19 = OUTLINED_FUNCTION_48();
      unint64_t v20 = (void *)__swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
      Logger.logObject.getter(v20);
      os_log_type_t v21 = OUTLINED_FUNCTION_73();
      if (OUTLINED_FUNCTION_20_9(v21))
      {
        uint64_t v22 = a1;
        os_log_type_t v23 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
        *os_log_type_t v23 = 0;
        OUTLINED_FUNCTION_7_14( &dword_0,  v24,  v25,  "#LINK SELF Log, invalid executionRequestId string, cannot derive flowId form it");
        uint64_t v26 = (uint64_t)v23;
        a1 = v22;
        OUTLINED_FUNCTION_1_0(v26);
      }

      uint64_t v27 = a1;
      uint64_t v28 = 1LL;
    }

    else
    {
      os_log_type_t v37 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v37(v14, v5, v6);
      uint64_t v38 = (void *)objc_opt_self(&OBJC_CLASS___AssistantSiriAnalytics);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v40 = [v38 derivedIdentifierForComponent:3 fromSourceIdentifier:isa];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v60 = a1;
      uint64_t v41 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.voiceCommands);
      uint64_t v42 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 16))(v1, v11, v6);
      uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
      os_log_type_t v44 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v43, v44))
      {
        unint64_t v45 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
        uint64_t v46 = OUTLINED_FUNCTION_38(32LL);
        uint64_t v58 = v46;
        uint64_t v61 = v46;
        uint64_t v59 = v37;
        *(_DWORD *)unint64_t v45 = 136315138;
        os_log_type_t v57 = v45 + 4;
        uint64_t v47 = UUID.uuidString.getter(v46);
        uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v61);
        uint64_t v50 = OUTLINED_FUNCTION_64_4(v49);
        os_log_type_t v37 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, v51, v57);
        OUTLINED_FUNCTION_20();
        NSString v52 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v52(v1, v6);
        OUTLINED_FUNCTION_31_2(&dword_0, v43, v44, "#LINK SELF Log, created flowId: %s", v45);
        uint64_t v53 = v58;
        OUTLINED_FUNCTION_30_3(v58, v54, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v53);
        OUTLINED_FUNCTION_1_0((uint64_t)v45);

        v52((uint64_t)v14, v6);
      }

      else
      {

        uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v55(v1, v6);
        v55((uint64_t)v14, v6);
      }

      uint64_t v56 = v60;
      v37((char *)v60, v11, v6);
      uint64_t v27 = v56;
      uint64_t v28 = 0LL;
    }

    __swift_storeEnumTagSinglePayload(v27, v28, 1LL, v6);
    OUTLINED_FUNCTION_24_0();
  }

  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v29 = OUTLINED_FUNCTION_48();
    os_log_type_t v30 = (void *)__swift_project_value_buffer(v29, (uint64_t)static Logger.voiceCommands);
    Logger.logObject.getter(v30);
    os_log_type_t v31 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_20_9(v31))
    {
      uint64_t v32 = a1;
      uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      *uint64_t v33 = 0;
      OUTLINED_FUNCTION_7_14( &dword_0,  v34,  v35,  "#LINK SELF Log, invalid executionRequestId, cannot derive flowId form it");
      uint64_t v36 = (uint64_t)v33;
      a1 = v32;
      OUTLINED_FUNCTION_1_0(v36);
    }

    __swift_storeEnumTagSinglePayload(a1, 1LL, 1LL, v6);
  }

void static ProvisionalInstrumentationUtils.emitActionCompleteSuccessProvisionalInstrumentation(targetBundle:action:siriEnvironment:)( uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalLinkActionCompletion) init];
  if (v4)
  {
    id v22 = v4;
    LNAction.asSiriLinkFlowProvisionalLinkAction()(v5);
    uint64_t v7 = v6;
    OUTLINED_FUNCTION_16_16((int)v6, "setAction:", v8, v9, v10, v11, v12, v13, v20, v22);

    outlined bridged method (mbgnn) of @objc SiriLinkFlowProvisionalLinkActionCompletion.targetBundle.setter( a1,  a2,  v23);
    id v14 = [v23 setIsSuccess:1];
    OUTLINED_FUNCTION_8_17( (uint64_t)v14,  v15,  &demangling cache variable for type metadata for SiriLinkFlowProvisionalLinkActionCompletion.Type,  (SEL *)&selRef_setLinkActionCompletion_,  v16,  v17,  v18,  v19,  v21,  (uint64_t)v23);
    OUTLINED_FUNCTION_25_2(v24);
  }

void static ProvisionalInstrumentationUtils.emitActionCompleteErrorInstrumentation(targetBundle:action:errorDescription:siriEnvironment:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalLinkActionCompletion) init];
  if (v9)
  {
    id v27 = v9;
    LNAction.asSiriLinkFlowProvisionalLinkAction()(v10);
    int v12 = v11;
    OUTLINED_FUNCTION_16_16((int)v11, "setAction:", v13, v14, v15, v16, v17, v18, v25, v27);

    outlined bridged method (mbgnn) of @objc SiriLinkFlowProvisionalLinkActionCompletion.targetBundle.setter( a1,  a2,  v28);
    [v28 setIsSuccess:0];
    outlined bridged method (mbgnn) of @objc SiriLinkFlowProvisionalLinkActionCompletion.errorDescription.setter( a4,  a5,  v28);
    OUTLINED_FUNCTION_8_17( v19,  v20,  &demangling cache variable for type metadata for SiriLinkFlowProvisionalLinkActionCompletion.Type,  (SEL *)&selRef_setLinkActionCompletion_,  v21,  v22,  v23,  v24,  v26,  (uint64_t)v28);
  }

void static ProvisionalInstrumentationUtils.emitActionConversionInstrumentation(isSuccess:siriEnvironment:)( char a1)
{
  id v2 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalLinkActionConversion) init];
  if (v2)
  {
    id v10 = v2;
    id v3 = [v2 setIsSuccess:a1 & 1];
    OUTLINED_FUNCTION_8_17( (uint64_t)v3,  v4,  &demangling cache variable for type metadata for SiriLinkFlowProvisionalLinkActionConversion.Type,  (SEL *)&selRef_setLinkActionConversion_,  v5,  v6,  v7,  v8,  v9,  (uint64_t)v10);
  }

void outlined bridged method (mbnn) of @objc SiriLinkFlowProvisionalLinkAction.identifier.setter( uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, *a4, v7);
  OUTLINED_FUNCTION_25_2(v7);
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void outlined bridged method (mbgnn) of @objc SiriLinkFlowProvisionalLinkActionCompletion.targetBundle.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setTargetBundle:v4];
}

void outlined bridged method (mbgnn) of @objc SiriLinkFlowProvisionalLinkActionCompletion.errorDescription.setter( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setErrorDescription:v4];
}

ValueMetadata *type metadata accessor for ProvisionalInstrumentationUtils()
{
  return &type metadata for ProvisionalInstrumentationUtils;
}

void OUTLINED_FUNCTION_7_14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void OUTLINED_FUNCTION_8_17( uint64_t a1, uint64_t a2, uint64_t *a3, SEL *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

  ;
}

id OUTLINED_FUNCTION_10_11(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

void OUTLINED_FUNCTION_14_18()
{
}

id OUTLINED_FUNCTION_16_16( int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  return objc_msgSend(a10, a2, v10);
}

void OUTLINED_FUNCTION_18_16()
{
}

Swift::Bool __swiftcall INIntent.requiresDeviceToBeUnlocked()()
{
  uint64_t v2 = (uint64_t)[v0 _isUserConfirmationRequired];
  if ((v2 & 1) != 0)
  {
    id v3 = OUTLINED_FUNCTION_4(v2, "typeName");
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_9_14();
    static VoiceCommandsParity.isParityIntent(intentName:)((uint64_t)v0, v1);
    char v5 = v4;
    OUTLINED_FUNCTION_37();
    char v6 = v5 ^ 1;
    return v6 & 1;
  }

  Swift::String v7 = INIntent.category()();
  if (v7._countAndFlagsBits == 0x59524F4745544143LL && v7._object == (void *)0xEE00524544524F5FLL)
  {
    object = (void *)0xEE00524544524F5FLL;
    goto LABEL_10;
  }

  if ((OUTLINED_FUNCTION_2_18(0x59524F4745544143LL, 0xEE00524544524F5FLL) & 1) != 0)
  {
    object = v7._object;
LABEL_10:
    swift_bridgeObjectRelease(object);
LABEL_11:
    char v6 = 1;
    return v6 & 1;
  }

  if (v7._countAndFlagsBits == 0xD000000000000011LL)
  {
    object = (void *)0x8000000000194740LL;
  }

  OUTLINED_FUNCTION_45_1();
  char v12 = OUTLINED_FUNCTION_2_18(0xD000000000000011LL, v11);
  OUTLINED_FUNCTION_14();
  if ((v12 & 1) != 0) {
    goto LABEL_11;
  }
  return INIntent.isRestricted()();
}

Swift::String __swiftcall INIntent.category()()
{
  id v1 = [v0 _metadata];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [v1 intentCategory];

    switch((int)v3)
    {
      case 1:
        char v4 = @"CATEGORY_INFORMATION";
        goto LABEL_25;
      case 2:
        char v4 = @"CATEGORY_PLAY_AUDIO";
        goto LABEL_25;
      case 3:
        char v4 = @"CATEGORY_PLAY_VIDEO";
        goto LABEL_25;
      case 4:
        char v4 = @"CATEGORY_ORDER";
        goto LABEL_25;
      case 5:
        char v4 = @"CATEGORY_NAVIGATION";
        goto LABEL_25;
      case 6:
        char v4 = @"CATEGORY_START";
        goto LABEL_25;
      case 7:
        char v4 = @"CATEGORY_SHARE";
        goto LABEL_25;
      case 8:
        char v4 = @"CATEGORY_CREATE";
        goto LABEL_25;
      case 9:
        char v4 = @"CATEGORY_SEARCH";
        goto LABEL_25;
      case 11:
        char v4 = @"CATEGORY_TOGGLE";
        goto LABEL_25;
      case 12:
        char v4 = @"CATEGORY_DOWNLOAD";
        goto LABEL_25;
      case 13:
        char v4 = @"CATEGORY_LOG";
        goto LABEL_25;
      case 14:
        char v4 = @"CATEGORY_CHECK_IN";
        goto LABEL_25;
      case 15:
        char v4 = @"CATEGORY_WORKFLOW";
        goto LABEL_25;
      case 16:
        char v4 = @"CATEGORY_REQUEST";
        goto LABEL_25;
      case 17:
        char v4 = @"CATEGORY_SET";
        goto LABEL_25;
      case 18:
        char v4 = @"CATEGORY_CALL_AUDIO";
        goto LABEL_25;
      case 19:
        char v4 = @"CATEGORY_CALL_VIDEO";
        goto LABEL_25;
      case 20:
        char v4 = @"CATEGORY_PLAY_SOUND";
        goto LABEL_25;
      case 21:
        char v4 = @"CATEGORY_USER_ACTIVITY";
LABEL_25:
        Swift::String v7 = v4;
        break;
      default:
        char v4 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v3));
        break;
    }

    uint64_t v8 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v9;
  }

  else
  {
    unint64_t v5 = 0x8000000000194760LL;
    uint64_t v6 = 0xD000000000000014LL;
  }

  uint64_t v10 = v6;
  uint64_t v11 = (void *)v5;
  result._object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

Swift::Bool __swiftcall INIntent.isRestricted()()
{
  uint64_t v2 = v1;
  id v3 = OUTLINED_FUNCTION_4(v0, "_codableDescription");
  id v4 = [v3 schema];

  if (!v4
    || (id v5 = [v4 dictionaryRepresentationForIntent:v2],
        v4,
        !v5)
    || (uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v5,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String),  v5,  !v6))
  {
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    goto LABEL_24;
  }

  specialized Dictionary.subscript.getter(0x746E65746E494E49LL, 0xE900000000000073LL, v6, &v36);
  OUTLINED_FUNCTION_20();
  if (!*((void *)&v37 + 1)) {
    goto LABEL_24;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
  uint64_t v11 = v35[0];
  uint64_t v12 = *(void *)(v35[0] + 16LL);
  if (!v12)
  {
    OUTLINED_FUNCTION_37();
    return 0;
  }

  swift_bridgeObjectRetain(v35[0]);
  uint64_t v13 = 0LL;
  uint64_t v34 = (char *)&type metadata for Any + 8;
  while (1)
  {
    uint64_t v14 = *(void *)(v11 + 8 * v13 + 32);
    uint64_t v15 = *(void *)(v14 + 16);
    swift_bridgeObjectRetain(v14);
    if (v15
      && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011LL, 0x8000000000194780LL),
          (v17 & 1) != 0)
      && (outlined init with copy of Any(*(void *)(v14 + 56) + 32 * v16, (uint64_t)&v36),
          swift_dynamicCast(v35, &v36, v34, &type metadata for String, 6LL)))
    {
      uint64_t v19 = v35[0];
      uint64_t v18 = v35[1];
    }

    else
    {
      uint64_t v19 = 0LL;
      uint64_t v18 = 0LL;
    }

    id v20 = objc_msgSend(v2, "_className", v34);
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v23 = v22;

    if (!v18)
    {
      OUTLINED_FUNCTION_20();
      uint64_t v26 = v23;
      goto LABEL_21;
    }

    if (v19 == v21 && v18 == v23)
    {
      OUTLINED_FUNCTION_46();
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v23);
      goto LABEL_30;
    }

    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v18, v21, v23, 0LL);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v23);
    if ((v25 & 1) != 0) {
      break;
    }
    uint64_t v26 = v14;
LABEL_21:
    swift_bridgeObjectRelease(v26);
    if (v12 == ++v13)
    {
      OUTLINED_FUNCTION_46();
      return 0;
    }
  }

  OUTLINED_FUNCTION_46();
LABEL_30:
  OUTLINED_FUNCTION_45_1();
  specialized Dictionary.subscript.getter(v28, v29, v14, &v36);
  uint64_t v30 = OUTLINED_FUNCTION_20();
  if (!*((void *)&v37 + 1))
  {
LABEL_24:
    outlined destroy of Any?((uint64_t)&v36);
    return 0;
  }

  return 0;
}

Swift::String __swiftcall INIntent.verb()()
{
  uint64_t v0 = INIntent.verb()((SEL *)&selRef_categoryVerb);
  result._object = v1;
  result._uint64_t countAndFlagsBits = (uint64_t)v0;
  return result;
}

Swift::Bool __swiftcall INIntent.shouldSupressIntentResponseDialog()()
{
  id v1 = OUTLINED_FUNCTION_4(v0, "typeName");
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  String.lowercased()();
  swift_bridgeObjectRelease(v3);
  if ((INIntent.showsWhenRun.getter() & 1) != 0
    && (OUTLINED_FUNCTION_45_1(),
        Swift::String v4 = String.lowercased()(),
        unint64_t v5 = lazy protocol witness table accessor for type String and conformance String(),
        char v12 = OUTLINED_FUNCTION_0_19( v5,  (uint64_t)&type metadata for String,  v6,  v7,  v8,  v9,  v10,  v11,  v4._countAndFlagsBits),  swift_bridgeObjectRelease(v4._object),  (v12 & 1) == 0))
  {
    OUTLINED_FUNCTION_45_1();
    uint64_t countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
    char v13 = OUTLINED_FUNCTION_0_19( countAndFlagsBits,  (uint64_t)&type metadata for String,  v15,  v16,  v17,  v18,  v19,  v20,  countAndFlagsBits);
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_37();
  }

  else
  {
    OUTLINED_FUNCTION_14();
    char v13 = 1;
  }

  return v13 & 1;
}

uint64_t INIntent.showsWhenRun.getter()
{
  id v1 = [v0 _metadata];
  if (!v1) {
    return 1LL;
  }
  uint64_t v2 = v1;
  id v3 = [v1 showsWhenRun];

  return (uint64_t)v3;
}

void *INIntent.bundleId.getter()
{
  return INIntent.verb()((SEL *)&selRef_launchId);
}

void *INIntent.verb()(SEL *a1)
{
  id v3 = [v1 _metadata];
  if (!v3 || (Swift::String result = outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(v3, a1), !v5))
  {
    swift_bridgeObjectRelease(0LL);
    return 0LL;
  }

  return result;
}

void *outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(void *a1)
{
  return outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(a1, (SEL *)&selRef_launchId);
}

void *outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(void *a1, SEL *a2)
{
  uint64_t v2 = a1;
  id v3 = [a1 *a2];

  if (!v3) {
    return 0LL;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_9_14();
  return v2;
}

uint64_t OUTLINED_FUNCTION_0_19( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return StringProtocol.contains<A>(_:)(&a9, a2, a2, v9, v9);
}

uint64_t OUTLINED_FUNCTION_2_18(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t OUTLINED_FUNCTION_3_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, a3, a4, 6LL);
}

void OUTLINED_FUNCTION_9_14()
{
}

void static LocaleUtils.siriLanguageCode()()
{
  id v0 = [(id)objc_opt_self(INPreferences) sharedPreferences];
  if (!v0
    || (outlined bridged method (ob) of @objc INPreferences._cachedSiriLanguageCode.getter( v0,  (SEL *)&selRef__cachedSiriLanguageCode),  !v1))
  {
    OUTLINED_FUNCTION_34_11();
  }

uint64_t static LocaleUtils.getPreferredLocationFromIntent(intentName:preferredLanguageCode:)( uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for intentBundleCache != -1) {
    swift_once( &one-time initialization token for intentBundleCache,  one-time initialization function for intentBundleCache);
  }
  uint64_t v4 = OUTLINED_FUNCTION_30_12((uint64_t)&static LocaleUtils.intentBundleCache, (uint64_t)v26, 32LL);
  uint64_t v5 = static LocaleUtils.intentBundleCache;
  if (*(void *)(static LocaleUtils.intentBundleCache + 16))
  {
    OUTLINED_FUNCTION_5_14();
    uint64_t v6 = OUTLINED_FUNCTION_57_6();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void **)(*(void *)(v5 + 56) + 8 * v8);
      OUTLINED_FUNCTION_56_10(v8);
      id v11 = v10;
      goto LABEL_9;
    }

    uint64_t v4 = OUTLINED_FUNCTION_37();
  }

  uint64_t v12 = OUTLINED_FUNCTION_56_10(v4);
  OUTLINED_FUNCTION_72(v12, &lazy cache variable for type metadata for NSBundle, &OBJC_CLASS___NSBundle_ptr);
  uint64_t v13 = OUTLINED_FUNCTION_57_6();
  uint64_t v15 = static LocaleUtils.getBundleId(intentName:)(v13, v14);
  id v17 = @nonobjc NSBundle.__allocating_init(identifier:)(v15, v16);
  if (!v17) {
    return 0LL;
  }
  uint64_t v18 = v17;
  OUTLINED_FUNCTION_30_12((uint64_t)&static LocaleUtils.intentBundleCache, (uint64_t)v26, 33LL);
  OUTLINED_FUNCTION_5_14();
  id v11 = v18;
  uint64_t v19 = specialized Dictionary._Variant.setValue(_:forKey:)( (uint64_t)v11,  a1,  a2,  (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
  OUTLINED_FUNCTION_56_10(v19);
LABEL_9:
  OUTLINED_FUNCTION_37();
  Class isa = (Class)[v11 localizations];
  if (!isa)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)(0LL, &type metadata for String);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_37();
  }

  uint64_t v21 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  Class v22 = Array._bridgeToObjectiveC()().super.isa;
  id v23 = [v21 preferredLocalizationsFromArray:isa forPreferences:v22];

  uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, &type metadata for String);
  return v24;
}

void static LocaleUtils.getLocale(preferredLocalizations:)(void *a1)
{
  id v2 = [(id)objc_opt_self(INPreferences) sharedPreferences];
  if (v2
    && (outlined bridged method (ob) of @objc INPreferences._cachedSiriLanguageCode.getter( v2,  (SEL *)&selRef__cachedSiriLanguageCode),  v4))
  {
    uint64_t v5 = v3;
    unint64_t v6 = v4;
    if (!a1) {
      goto LABEL_14;
    }
  }

  else
  {
    OUTLINED_FUNCTION_34_11();
    unint64_t v6 = 0xE200000000000000LL;
    uint64_t v5 = 28261LL;
    if (!a1) {
      goto LABEL_14;
    }
  }

  if (a1[2])
  {
    uint64_t v8 = a1[4];
    unint64_t v7 = a1[5];
    OUTLINED_FUNCTION_5_10(v7);
    specialized Collection.prefix(_:)(2LL, v8, v7);
    Swift::String v9 = Substring.lowercased()();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_80();
    specialized Collection.prefix(_:)(2LL, v5, v6);
    uint64_t v11 = v10;
    Swift::String v12 = Substring.lowercased()();
    swift_bridgeObjectRelease(v11);
    if (v9._countAndFlagsBits == v12._countAndFlagsBits && v9._object == v12._object)
    {
      OUTLINED_FUNCTION_14();
      OUTLINED_FUNCTION_1_2();
    }

    else
    {
      OUTLINED_FUNCTION_167(v9._countAndFlagsBits, (uint64_t)v9._object, v12._countAndFlagsBits, (uint64_t)v12._object);
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_69();
    }

    OUTLINED_FUNCTION_1_2();
  }

void specialized Collection.prefix(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v3 = a2;
    }
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    uint64_t v5 = v4 | (v3 << 16);
    uint64_t v6 = String.index(_:offsetBy:limitedBy:)(15LL, a1, v5, a2, a3);
    if ((v7 & 1) != 0) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v6;
    }
    OUTLINED_FUNCTION_35_13(15LL, v8);
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_59_4();
    OUTLINED_FUNCTION_38_0();
  }

void specialized Collection.prefix(_:)(uint64_t a1, unint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = a1;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8LL));
      goto LABEL_4;
    }
  }

  OUTLINED_FUNCTION_8_18();
  uint64_t v5 = OUTLINED_FUNCTION_58_9();
  OUTLINED_FUNCTION_14();
LABEL_4:
  uint64_t v6 = specialized Array.index(_:offsetBy:limitedBy:)(0LL, v3, v5);
  if ((v7 & 1) != 0) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v6;
  }
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v4)
  {
    OUTLINED_FUNCTION_8_18();
    uint64_t v10 = OUTLINED_FUNCTION_58_9();
    OUTLINED_FUNCTION_14();
    if (v10 < 0)
    {
LABEL_24:
      __break(1u);
      return;
    }

    OUTLINED_FUNCTION_80();
    uint64_t v9 = OUTLINED_FUNCTION_58_9();
    uint64_t v6 = OUTLINED_FUNCTION_14();
  }

  else
  {
    uint64_t v9 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v9 < v8)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if ((v2 & 0xC000000000000001LL) != 0 && v8)
  {
    uint64_t v9 = OUTLINED_FUNCTION_72( v6,  &lazy cache variable for type metadata for LNStaticDeferredLocalizedString,  &OBJC_CLASS___LNStaticDeferredLocalizedString_ptr);
    Swift::Int v11 = 0LL;
    do
    {
      Swift::Int v12 = v11 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v11);
      Swift::Int v11 = v12;
    }

    while (v8 != v12);
  }

  if (v4)
  {
    OUTLINED_FUNCTION_8_18();
    _CocoaArrayWrapper.subscript.getter(0LL, v8, v9);
    OUTLINED_FUNCTION_19_1(v2);
  }

  OUTLINED_FUNCTION_38_0();
}

void one-time initialization function for TypesRequiringDictationMode()
{
  static INCodableAttribute.TypesRequiringDictationMode = (uint64_t)&outlined read-only object #0 of one-time initialization function for TypesRequiringDictationMode;
}

uint64_t one-time initialization function for TargetNodesForType()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  uint64_t inited = swift_initStackObject(v0, &v4);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_182060;
  *(void *)(inited + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0xD000000000000010LL;
  *(void *)(inited + 40) = 0x8000000000190A20LL;
  *(void *)(inited + 48) = &outlined read-only object #0 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 56) = 0xD000000000000011LL;
  *(void *)(inited + 64) = 0x8000000000194A40LL;
  *(void *)(inited + 7outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = &outlined read-only object #1 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 80) = 0xD000000000000010LL;
  *(void *)(inited + 88) = 0x8000000000194A60LL;
  *(void *)(inited + 96) = &outlined read-only object #2 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 104) = 0xD000000000000011LL;
  *(void *)(inited + 11outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0x8000000000194A80LL;
  *(void *)(inited + 120) = &outlined read-only object #3 of one-time initialization function for TargetNodesForType;
  strcpy((char *)(inited + 128), "foundation.URL");
  *(_BYTE *)(inited + 143) = -18;
  *(void *)(inited + 144) = &outlined read-only object #4 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 15outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0xD000000000000019LL;
  *(void *)(inited + 160) = 0x8000000000194AA0LL;
  *(void *)(inited + 168) = &outlined read-only object #5 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 176) = 0xD000000000000017LL;
  *(void *)(inited + 184) = 0x8000000000194AC0LL;
  *(void *)(inited + 19outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = &outlined read-only object #6 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 200) = 0xD000000000000019LL;
  *(void *)(inited + outlined init with copy of AppShortcutInvoking(v0, v1 - 208) = 0x8000000000194AE0LL;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &outlined read-only object #7 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 224) = 0xD000000000000013LL;
  *(void *)(inited + 23outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0x8000000000194B00LL;
  *(void *)(inited + 240) = &outlined read-only object #8 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 248) = 0xD000000000000016LL;
  *(void *)(inited + 256) = 0x8000000000194B20LL;
  *(void *)(inited + 264) = &outlined read-only object #9 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0xD000000000000011LL;
  *(void *)(inited + 280) = 0x8000000000194B40LL;
  *(void *)(inited + 288) = &outlined read-only object #10 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 296) = 0x697461646E756F66LL;
  *(void *)(inited + 304) = 0xEF7373614D2E6E6FLL;
  *(void *)(inited + 31outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = &outlined read-only object #11 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 320) = 0xD000000000000011LL;
  *(void *)(inited + 328) = 0x8000000000194B60LL;
  *(void *)(inited + 336) = &outlined read-only object #12 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 344) = 0xD000000000000010LL;
  *(void *)(inited + 35outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0x8000000000194B80LL;
  *(void *)(inited + 360) = &outlined read-only object #13 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 368) = 0xD000000000000011LL;
  *(void *)(inited + 376) = 0x8000000000194BA0LL;
  *(void *)(inited + 384) = &outlined read-only object #14 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 39outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0xD000000000000018LL;
  *(void *)(inited + 400) = 0x8000000000194BC0LL;
  *(void *)(inited + 408) = &outlined read-only object #15 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 4swift_weakDestroy(v0 + 16) = 0xD000000000000014LL;
  *(void *)(inited + 424) = 0x8000000000194BE0LL;
  *(void *)(inited + 43outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = &outlined read-only object #16 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 440) = 0xD000000000000011LL;
  *(void *)(inited + 448) = 0x8000000000194C00LL;
  *(void *)(inited + 456) = &outlined read-only object #17 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 464) = 0x697461646E756F66LL;
  *(void *)(inited + 47outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0xEF656C69462E6E6FLL;
  *(void *)(inited + 480) = _swiftEmptyArrayStorage;
  *(void *)(inited + 488) = 0xD000000000000011LL;
  *(void *)(inited + 496) = 0x8000000000190A40LL;
  *(void *)(inited + 504) = &outlined read-only object #18 of one-time initialization function for TargetNodesForType;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t result = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  v2,  &protocol witness table for String);
  static INCodableAttribute.TargetNodesForType = result;
  return result;
}

uint64_t INCodableAttribute.localizedPrompt(promptDialogType:intent:appInfo:tokens:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v9 = OUTLINED_FUNCTION_4(a1, "promptDialogWithType:");
  if (v9)
  {
    uint64_t v10 = v9;
    static LocaleUtils.siriLanguageCode()();
    uint64_t v51 = v11;
    unint64_t v13 = v12;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v14 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
    uint64_t v15 = OUTLINED_FUNCTION_5_10(v13);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    uint64_t v49 = a4;
    uint64_t v50 = a2;
    if (OUTLINED_FUNCTION_23_7(v17))
    {
      uint64_t v18 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v5 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v53 = v5;
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain(v13);
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v13, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v18 + 4);
      swift_bridgeObjectRelease_n(v13, 3LL);
      OUTLINED_FUNCTION_31_2( &dword_0,  v16,  (os_log_type_t)v4,  "INCodableAttribute localized prompt, siri locale: %s",  v18);
      OUTLINED_FUNCTION_30_3(v5, v19, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v5);
      OUTLINED_FUNCTION_1_0((uint64_t)v18);
    }

    else
    {

      OUTLINED_FUNCTION_19_1(v13);
    }

    Swift::String_optional v20 = INCodableAttributePromptDialog.getLanguageCode()();
    id v21 = [v10 formatString];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_61_8();
    static LocaleUtils.getContentLocale(dialogLocale:appInfo:formatString:)( v20.value._countAndFlagsBits,  (uint64_t)v20.value._object,  a3,  v4,  v5);
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    OUTLINED_FUNCTION_2_6();
    swift_bridgeObjectRetain(v20.value._object);
    uint64_t v26 = OUTLINED_FUNCTION_5_10(v25);
    id v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_23_7(v28))
    {
      uint64_t v29 = OUTLINED_FUNCTION_38(22LL);
      uint64_t v30 = OUTLINED_FUNCTION_38(64LL);
      uint64_t v53 = v30;
      *(_DWORD *)uint64_t v29 = 136315394;
      uint64_t v47 = v23;
      unint64_t v48 = v13;
      if (v25) {
        uint64_t v31 = v23;
      }
      else {
        uint64_t v31 = 7104878LL;
      }
      if (v25) {
        unint64_t v32 = v25;
      }
      else {
        unint64_t v32 = 0xE300000000000000LL;
      }
      swift_bridgeObjectRetain(v25);
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v29 + 4);
      OUTLINED_FUNCTION_19_1(v25);
      OUTLINED_FUNCTION_14();
      *(_WORD *)(v29 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
      if (v20.value._object) {
        uint64_t countAndFlagsBits = v20.value._countAndFlagsBits;
      }
      else {
        uint64_t countAndFlagsBits = 7104878LL;
      }
      if (v20.value._object) {
        object = v20.value._object;
      }
      else {
        object = (void *)0xE300000000000000LL;
      }
      swift_bridgeObjectRetain(v20.value._object);
      uint64_t v35 = countAndFlagsBits;
      uint64_t v23 = v47;
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, (unint64_t)object, &v53);
      unint64_t v13 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v29 + 14);
      OUTLINED_FUNCTION_19_1((uint64_t)v20.value._object);
      OUTLINED_FUNCTION_37();
      _os_log_impl( &dword_0,  v27,  (os_log_type_t)v4,  "INCodableAttribute localized prompt, content locale: %s, dialog language code: %s",  (uint8_t *)v29,  0x16u);
      swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v30);
      OUTLINED_FUNCTION_1_0(v29);
    }

    else
    {

      OUTLINED_FUNCTION_19_1((uint64_t)v20.value._object);
      OUTLINED_FUNCTION_19_1(v25);
    }

    a2 = static LocaleUtils.compatibleLocale(siriLocale:contentLocale:)(v51, v13, v23, v25);
    OUTLINED_FUNCTION_69();
    if ((a2 & 1) != 0)
    {
      if (v49) {
        v36.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      }
      else {
        v36.super.Class isa = 0LL;
      }
      NSString v43 = String._bridgeToObjectiveC()();
      OUTLINED_FUNCTION_28_4();
      os_log_type_t v44 = v10;
      id v45 = [v10 localizedDialogWithIntent:v50 tokens:v36.super.isa forLanguage:v43];

      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      return v42;
    }

    OUTLINED_FUNCTION_28_4();
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v37 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_9_5();
  os_log_type_t v38 = OUTLINED_FUNCTION_164();
  if (OUTLINED_FUNCTION_40(v38))
  {
    uint64_t v39 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    *uint64_t v39 = 0;
    OUTLINED_FUNCTION_27(&dword_0, v40, v41, "INCodableAttribute localized prompt dialog is nil");
    OUTLINED_FUNCTION_1_0((uint64_t)v39);
  }

  return 0LL;
}

Swift::String_optional __swiftcall INCodableAttributePromptDialog.getLanguageCode()()
{
  uint64_t v2 = outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter( v1,  (SEL *)&selRef_dictionaryRepresentation,  (uint64_t)&type metadata for Any + 8);
  if (!v2)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v13 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    os_log_type_t v14 = OUTLINED_FUNCTION_164();
    if (!OUTLINED_FUNCTION_40(v14)) {
      goto LABEL_15;
    }
    os_log_type_t v17 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    *os_log_type_t v17 = 0;
    uint64_t v18 = "INCodableAttributePromptDialog dictionary is nil";
    goto LABEL_14;
  }

  uint64_t v0 = (void *)v2;
  OUTLINED_FUNCTION_26_11();
  OUTLINED_FUNCTION_65_3(53LL, v3, v4);
  uint64_t v5 = OUTLINED_FUNCTION_14();
  if (!v27)
  {
    OUTLINED_FUNCTION_25_16(v5, v6);
    goto LABEL_10;
  }

  if ((OUTLINED_FUNCTION_6_16( v5,  v6,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String,  v7,  v8,  v9,  v10,  v22,  v24,  v26) & 1) == 0)
  {
LABEL_10:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v19 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
    OUTLINED_FUNCTION_9_5();
    os_log_type_t v20 = OUTLINED_FUNCTION_164();
    if (!OUTLINED_FUNCTION_40(v20)) {
      goto LABEL_15;
    }
    os_log_type_t v17 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
    *os_log_type_t v17 = 0;
    uint64_t v18 = "INCodableAttributePromptDialog language code is nil";
LABEL_14:
    OUTLINED_FUNCTION_27(&dword_0, v15, v16, v18);
    OUTLINED_FUNCTION_1_0((uint64_t)v17);
LABEL_15:

    uint64_t v11 = 0LL;
    unint64_t v12 = 0LL;
    goto LABEL_16;
  }

  uint64_t v11 = v23;
  unint64_t v12 = v25;
LABEL_16:
  result.value._object = v12;
  result.value._uint64_t countAndFlagsBits = v11;
  return result;
}

void static LocaleUtils.getContentLocale(dialogLocale:appInfo:formatString:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (!a5)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v19 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
    id v20 = a3;
    id v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_40_12(v22))
    {
      uint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v24 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v55 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      if (!a3 || (uint64_t v25 = OUTLINED_FUNCTION_42_6(), !v26)) {
        uint64_t v25 = OUTLINED_FUNCTION_34_11();
      }
      uint64_t v44 = OUTLINED_FUNCTION_27_13(v25);
      OUTLINED_FUNCTION_13_13(v44, v45, v46, v47, v48, v49, v50, v51, v54, v55);

      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_31_2( &dword_0,  v21,  v5,  "LocationUtils.getContentLocale(), format String is nil, appInfo language: %s",  v23);
      OUTLINED_FUNCTION_30_3(v24, v52, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v24);
      OUTLINED_FUNCTION_1_0((uint64_t)v23);

      if (!a3) {
        goto LABEL_38;
      }
    }

    else
    {

      if (!a3) {
        goto LABEL_38;
      }
    }

    OUTLINED_FUNCTION_42_6();
    if (v53) {
      goto LABEL_37;
    }
LABEL_38:
    OUTLINED_FUNCTION_34_11();
    goto LABEL_39;
  }

  type metadata accessor for CATSpeakableString();
  uint64_t v9 = static CATSpeakableString.getPropertiesInTemplateString(templateString:)();
  uint64_t v10 = v9[2];
  swift_bridgeObjectRelease(v9);
  if (v10)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v11 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
    id v12 = a3;
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_40_12(v14))
    {
      uint64_t v15 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v16 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v55 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      if (!a3 || (uint64_t v17 = OUTLINED_FUNCTION_42_6(), !v18)) {
        uint64_t v17 = OUTLINED_FUNCTION_34_11();
      }
      uint64_t v35 = OUTLINED_FUNCTION_27_13(v17);
      OUTLINED_FUNCTION_13_13(v35, v36, v37, v38, v39, v40, v41, v42, v54, v55);

      OUTLINED_FUNCTION_20();
      OUTLINED_FUNCTION_31_2(&dword_0, v13, v5, "LocationUtils.getContentLocale(), appInfo language: %s", v15);
      OUTLINED_FUNCTION_30_3(v16, v43, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v16);
      OUTLINED_FUNCTION_1_0((uint64_t)v15);

      if (!a3) {
        goto LABEL_39;
      }
    }

    else
    {

      if (!a3) {
        goto LABEL_39;
      }
    }

    OUTLINED_FUNCTION_42_6();
LABEL_37:
    OUTLINED_FUNCTION_54_10();
    goto LABEL_39;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v27 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.voiceCommands);
  uint64_t v28 = OUTLINED_FUNCTION_5_10(a2);
  Logger.logObject.getter(v28);
  os_log_type_t v29 = OUTLINED_FUNCTION_164();
  if (os_log_type_enabled((os_log_t)a3, v29))
  {
    uint64_t v30 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v31 = OUTLINED_FUNCTION_38(32LL);
    uint64_t v55 = v31;
    *(_DWORD *)uint64_t v30 = 136315138;
    if (a2) {
      uint64_t v32 = a1;
    }
    else {
      uint64_t v32 = 7104878LL;
    }
    if (a2) {
      unint64_t v33 = a2;
    }
    else {
      unint64_t v33 = 0xE300000000000000LL;
    }
    OUTLINED_FUNCTION_5_14();
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v30 + 4);
    OUTLINED_FUNCTION_19_1(a2);
    swift_bridgeObjectRelease(v33);
    OUTLINED_FUNCTION_31_2( &dword_0,  (os_log_s *)a3,  v29,  "LocationUtils.getContentLocale(), no properties in template, dialogLocale: %s",  v30);
    OUTLINED_FUNCTION_30_3(v31, v34, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v31);
    OUTLINED_FUNCTION_1_0((uint64_t)v30);
  }

  else
  {

    OUTLINED_FUNCTION_19_1(a2);
  }

  OUTLINED_FUNCTION_5_14();
LABEL_39:
  OUTLINED_FUNCTION_67_3();
  OUTLINED_FUNCTION_13_4();
}

uint64_t static LocaleUtils.compatibleLocale(siriLocale:contentLocale:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 1LL;
  }
  unint64_t v6 = OUTLINED_FUNCTION_5_17(95LL);
  if ((v7 & 1) != 0 && (unint64_t v6 = OUTLINED_FUNCTION_5_17(45LL), (v8 & 1) != 0))
  {
    OUTLINED_FUNCTION_50_3();
    Swift::String v15 = String.lowercased()();
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
    object = v15._object;
  }

  else
  {
    uint64_t v9 = v6;
    OUTLINED_FUNCTION_80();
    uint64_t v10 = OUTLINED_FUNCTION_35_13(15LL, v9);
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_41_11(v10);
    OUTLINED_FUNCTION_69();
    Swift::String v11 = String.lowercased()();
    uint64_t countAndFlagsBits = v11._countAndFlagsBits;
    object = v11._object;
    OUTLINED_FUNCTION_1_2();
  }

  unint64_t v16 = OUTLINED_FUNCTION_47_10(95LL);
  if ((v17 & 1) != 0 && (unint64_t v16 = OUTLINED_FUNCTION_47_10(45LL), (v18 & 1) != 0))
  {
    OUTLINED_FUNCTION_67_3();
    String.lowercased()();
    OUTLINED_FUNCTION_54_10();
  }

  else
  {
    unint64_t v19 = v16;
    OUTLINED_FUNCTION_5_14();
    uint64_t v20 = String.subscript.getter(15LL, v19, a3, a4);
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_41_11(v20);
    OUTLINED_FUNCTION_69();
    String.lowercased()();
    OUTLINED_FUNCTION_54_10();
    OUTLINED_FUNCTION_1_2();
  }

  if (countAndFlagsBits == 26746 && object == (void *)0xE200000000000000LL)
  {
    unint64_t v24 = 0xE200000000000000LL;
  }

  else
  {
    uint64_t v22 = OUTLINED_FUNCTION_50_3();
    if ((OUTLINED_FUNCTION_167(v22, v23, 26746LL, 0xE200000000000000LL) & 1) == 0)
    {
      if (countAndFlagsBits == 6649209 && object == (void *)0xE300000000000000LL)
      {
        unint64_t v24 = 0xE300000000000000LL;
        goto LABEL_18;
      }

      uint64_t v30 = OUTLINED_FUNCTION_50_3();
      if ((OUTLINED_FUNCTION_167(v30, v31, 6649209LL, 0xE300000000000000LL) & 1) == 0)
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v25 = (_UNKNOWN **)swift_allocObject(v32, 48LL, 7LL);
        *((_OWORD *)v25 + 1) = xmmword_17E650;
        v25[4] = (_UNKNOWN *)countAndFlagsBits;
        void v25[5] = object;
        goto LABEL_19;
      }
    }

    unint64_t v24 = (unint64_t)object;
  }

void INCodableAttribute.localizedUnsupportedDialog(unsupportedReasonCode:intent:appInfo:tokens:)( uint64_t a1, uint64_t a2, void *a3, Class isa)
{
  id v7 = OUTLINED_FUNCTION_4(a1, "unsupportedReasonWithIndex:");
  if (v7)
  {
    char v8 = v7;
    uint64_t v22 = a2;
    static LocaleUtils.siriLanguageCode()();
    Swift::String_optional v9 = INCodableAttributeUnsupportedReason.getLanguageCode()();
    id v10 = [v8 formatString];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    static LocaleUtils.getContentLocale(dialogLocale:appInfo:formatString:)( v9.value._countAndFlagsBits,  (uint64_t)v9.value._object,  a3,  v11,  v13);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_28_4();
    uint64_t v18 = OUTLINED_FUNCTION_57_6();
    LOBYTE(v13) = static LocaleUtils.compatibleLocale(siriLocale:contentLocale:)(v18, v19, v15, v17);
    OUTLINED_FUNCTION_69();
    if ((v13 & 1) != 0)
    {
      if (isa) {
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      }
      OUTLINED_FUNCTION_57_6();
      NSString v20 = String._bridgeToObjectiveC()();
      OUTLINED_FUNCTION_37();
      id v21 = [v8 localizedDialogWithIntent:v22 tokens:isa forLanguage:v20];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }

    else
    {

      OUTLINED_FUNCTION_37();
    }
  }

  OUTLINED_FUNCTION_13_4();
}

Swift::String_optional __swiftcall INCodableAttributeUnsupportedReason.getLanguageCode()()
{
  uint64_t v1 = outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter( v0,  (SEL *)&selRef_dictionaryRepresentation,  (uint64_t)&type metadata for Any + 8);
  if (!v1) {
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_26_11();
  OUTLINED_FUNCTION_65_3(58LL, v2, v3);
  uint64_t v4 = OUTLINED_FUNCTION_14();
  if (!v17)
  {
    OUTLINED_FUNCTION_25_16(v4, v5);
    goto LABEL_6;
  }

  if ((OUTLINED_FUNCTION_6_16( v4,  v5,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String,  v6,  v7,  v8,  v9,  v12,  v14,  v16) & 1) == 0)
  {
LABEL_6:
    uint64_t v1 = 0LL;
LABEL_7:
    id v10 = 0LL;
    goto LABEL_8;
  }

  uint64_t v1 = v13;
  id v10 = v15;
LABEL_8:
  result.value._object = v10;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

void INCodableAttribute.localizedPromptTemplate(promptDialogType:appInfo:)(uint64_t a1, char a2)
{
  id v3 = OUTLINED_FUNCTION_4(a1, "promptDialogWithType:");
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 dictionaryRepresentation];
    if (v5)
    {
      uint64_t v6 = v5;
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v5,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

      static LocaleUtils.siriLanguageCode()();
      OUTLINED_FUNCTION_37_12( 0xD000000000000035LL,  (uint64_t)"INIntentParameterPromptDialogFormatStringLanguageCode",  v23,  v25,  v27);
      if (v29) {
        OUTLINED_FUNCTION_33_10(v7, v8, v9, (uint64_t)&type metadata for String, v10, v11, v12, v13, v24, v26, v28);
      }
      else {
        OUTLINED_FUNCTION_25_16(v7, v8);
      }
      id v14 = [v4 formatString];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_63_5();
      OUTLINED_FUNCTION_21_14();
      OUTLINED_FUNCTION_49_9();
      OUTLINED_FUNCTION_2_6();
      OUTLINED_FUNCTION_28_9();
      OUTLINED_FUNCTION_60_6();
      OUTLINED_FUNCTION_69();
      if ((a2 & 1) != 0)
      {
        OUTLINED_FUNCTION_26_11();
        OUTLINED_FUNCTION_66_4(41LL, v15, v16);

        uint64_t v17 = OUTLINED_FUNCTION_20();
        if (v29) {
          OUTLINED_FUNCTION_6_16( v17,  v18,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String,  v19,  v20,  v21,  v22,  v24,  v26,  v28);
        }
        else {
          OUTLINED_FUNCTION_25_16(v17, v18);
        }
      }

      else
      {

        OUTLINED_FUNCTION_20();
      }
    }

    else
    {
    }
  }

  OUTLINED_FUNCTION_11_7();
}

void INCodableAttribute.localizedUnsupportedDialogTemplate(unsupportedReasonCode:appInfo:)( uint64_t a1, char a2)
{
  id v3 = OUTLINED_FUNCTION_4(a1, "unsupportedReasonWithIndex:");
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 dictionaryRepresentation];
    if (v5)
    {
      uint64_t v6 = v5;
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v5,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

      static LocaleUtils.siriLanguageCode()();
      OUTLINED_FUNCTION_37_12( 0xD00000000000003ALL,  (uint64_t)"INIntentParameterUnsupportedReasonFormatStringLanguageCode",  v23,  v25,  v27);
      if (v29) {
        OUTLINED_FUNCTION_33_10(v7, v8, v9, (uint64_t)&type metadata for String, v10, v11, v12, v13, v24, v26, v28);
      }
      else {
        OUTLINED_FUNCTION_25_16(v7, v8);
      }
      id v14 = [v4 formatString];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_63_5();
      OUTLINED_FUNCTION_21_14();
      OUTLINED_FUNCTION_49_9();
      OUTLINED_FUNCTION_2_6();
      OUTLINED_FUNCTION_28_9();
      OUTLINED_FUNCTION_60_6();
      OUTLINED_FUNCTION_69();
      if ((a2 & 1) != 0)
      {
        OUTLINED_FUNCTION_26_11();
        OUTLINED_FUNCTION_66_4(46LL, v15, v16);

        uint64_t v17 = OUTLINED_FUNCTION_20();
        if (v29) {
          OUTLINED_FUNCTION_6_16( v17,  v18,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String,  v19,  v20,  v21,  v22,  v24,  v26,  v28);
        }
        else {
          OUTLINED_FUNCTION_25_16(v17, v18);
        }
      }

      else
      {

        OUTLINED_FUNCTION_20();
      }
    }

    else
    {
    }
  }

  OUTLINED_FUNCTION_11_7();
}

Swift::Bool __swiftcall INCodableAttribute.requiresDictationPrompt()()
{
  if (one-time initialization token for TypesRequiringDictationMode != -1) {
    swift_once( &one-time initialization token for TypesRequiringDictationMode,  one-time initialization function for TypesRequiringDictationMode);
  }
  uint64_t v0 = (void *)static INCodableAttribute.TypesRequiringDictationMode;
  OUTLINED_FUNCTION_80();
  uint64_t v1 = INCodableAttribute.typeString()();
  char v3 = specialized Sequence<>.contains(_:)(v1, v2, v0);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_20();
  return v3 & 1;
}

uint64_t INCodableAttribute.typeString()()
{
  if ([v0 valueType]
    || (uint64_t v9 = outlined bridged method (pb) of @objc INCodableDescription.dictionaryRepresentation()(v0)) == 0)
  {
    static CustomTypeReference.fromSlotValueType(valueType:)((uint64_t)[v0 valueType]);
    uint64_t v2 = v1;
    uint64_t v4 = v3;
    uint64_t v21 = v5;
    uint64_t v22 = v6;
    swift_bridgeObjectRetain(v6);
    v7._uint64_t countAndFlagsBits = 46LL;
    v7._object = (void *)0xE100000000000000LL;
    String.append(_:)(v7);
    swift_bridgeObjectRetain(v22);
    v8._uint64_t countAndFlagsBits = v2;
    v8._object = v4;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    static CustomTypeReference.buildFromAttributeHash(attributeHash:)(v9);
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v21 = v11;
    swift_bridgeObjectRetain(v13);
    v18._uint64_t countAndFlagsBits = 46LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    swift_bridgeObjectRetain(v13);
    v19._uint64_t countAndFlagsBits = v15;
    v19._object = v17;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  return v21;
}

void *INCodableAttribute.promptTargets()()
{
  if (one-time initialization token for TargetNodesForType != -1) {
    swift_once( &one-time initialization token for TargetNodesForType,  one-time initialization function for TargetNodesForType);
  }
  uint64_t v0 = static INCodableAttribute.TargetNodesForType;
  uint64_t v1 = INCodableAttribute.typeString()();
  specialized Dictionary.subscript.getter(v1, v2, v0);
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_20();
  if (v4) {
    return (void *)v4;
  }
  else {
    return _swiftEmptyArrayStorage;
  }
}

void *INCodableAttribute.disambiguationPromptTargets()()
{
  uint64_t v0 = INCodableAttribute.promptTargets()();
  unint64_t v1 = v0[2];
  unint64_t v2 = v1 + 2;
  if (__OFADD__(v1, 2LL))
  {
    __break(1u);
LABEL_10:
    OUTLINED_FUNCTION_51_8();
    uint64_t v3 = v10;
    int64_t v4 = v10[3] >> 1;
    goto LABEL_6;
  }

  uint64_t v3 = v0;
  if (!swift_isUniquelyReferenced_nonNull_native(v0) || (int64_t v4 = v3[3] >> 1, v4 < (uint64_t)v2))
  {
    OUTLINED_FUNCTION_51_8();
    uint64_t v3 = v5;
    int64_t v4 = v5[3] >> 1;
  }

  unint64_t v2 = v3[2];
  unint64_t v1 = v2 + 1;
  if (v4 <= v2) {
    goto LABEL_10;
  }
LABEL_6:
  v3[2] = v1;
  uint64_t v6 = &v3[2 * v2];
  v6[4] = 0xD000000000000024LL;
  void v6[5] = 0x8000000000194A10LL;
  uint64_t v7 = v2 + 2;
  if (v4 < v7)
  {
    OUTLINED_FUNCTION_51_8();
    uint64_t v3 = v11;
  }

  v3[2] = v7;
  Swift::String v8 = &v3[2 * v1];
  v8[4] = 0xD000000000000027LL;
  v8[5] = 0x80000000001909F0LL;
  return v3;
}

void one-time initialization function for intentBundleCache()
{
  static LocaleUtils.intentBundleCache = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t *LocaleUtils.intentBundleCache.unsafeMutableAddressor()
{
  if (one-time initialization token for intentBundleCache != -1) {
    swift_once( &one-time initialization token for intentBundleCache,  one-time initialization function for intentBundleCache);
  }
  return &static LocaleUtils.intentBundleCache;
}

double static LocaleUtils.intentBundleCache.getter()
{
  if (one-time initialization token for intentBundleCache != -1) {
    swift_once( &one-time initialization token for intentBundleCache,  one-time initialization function for intentBundleCache);
  }
  OUTLINED_FUNCTION_30_12((uint64_t)&static LocaleUtils.intentBundleCache, (uint64_t)v1, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(static LocaleUtils.intentBundleCache).n128_u64[0];
  return result;
}

uint64_t static LocaleUtils.intentBundleCache.setter(uint64_t a1)
{
  if (one-time initialization token for intentBundleCache != -1) {
    swift_once( &one-time initialization token for intentBundleCache,  one-time initialization function for intentBundleCache);
  }
  OUTLINED_FUNCTION_30_12((uint64_t)&static LocaleUtils.intentBundleCache, (uint64_t)v4, 1LL);
  uint64_t v2 = static LocaleUtils.intentBundleCache;
  static LocaleUtils.intentBundleCache = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static LocaleUtils.intentBundleCache.modify())()
{
  if (one-time initialization token for intentBundleCache != -1) {
    swift_once( &one-time initialization token for intentBundleCache,  one-time initialization function for intentBundleCache);
  }
  uint64_t v0 = OUTLINED_FUNCTION_50_3();
  OUTLINED_FUNCTION_30_12(v0, v1, 33LL);
  return static LocaleUtils.intentBundleCache.modify;
}

Swift::String_optional __swiftcall SAAppInfo.getAppLanguage()()
{
  if ((SAAppInfo.isShortcutsApp()() & 1) != 0)
  {
    outlined bridged method (pb) of @objc SAAppInfo.displayAppName.getter(v0);
    if (v3)
    {
      OUTLINED_FUNCTION_54_10();
      uint64_t v4 = outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter( v0,  (SEL *)&selRef_appNameMap,  (uint64_t)&type metadata for String);
      if (v4)
      {
        uint64_t v5 = v4;
        if (*(void *)(v4 + 16))
        {
          if (v2 != 0x74756374726F6853LL || v1 != 0xE900000000000073LL)
          {
            uint64_t v7 = OUTLINED_FUNCTION_67_3();
            uint64_t v9 = OUTLINED_FUNCTION_167(v7, v8, 0x74756374726F6853LL, 0xE900000000000073LL);
            if ((v9 & 1) == 0)
            {
              int64_t v19 = 0LL;
              uint64_t v20 = v5 + 64;
              uint64_t v21 = 1LL << *(_BYTE *)(v5 + 32);
              uint64_t v22 = -1LL;
              if (v21 < 64) {
                uint64_t v22 = ~(-1LL << v21);
              }
              unint64_t v23 = v22 & *(void *)(v5 + 64);
              int64_t v24 = (unint64_t)(v21 + 63) >> 6;
              while (1)
              {
                if (v23)
                {
                  unint64_t v25 = __clz(__rbit64(v23));
                  v23 &= v23 - 1;
                  unint64_t v26 = v25 | (v19 << 6);
                }

                else
                {
                  int64_t v27 = v19 + 1;
                  if (__OFADD__(v19, 1LL))
                  {
                    __break(1u);
                    goto LABEL_60;
                  }

                  if (v27 >= v24) {
                    goto LABEL_58;
                  }
                  unint64_t v28 = *(void *)(v20 + 8 * v27);
                  ++v19;
                  if (!v28)
                  {
                    int64_t v19 = v27 + 1;
                    if (v27 + 1 >= v24) {
                      goto LABEL_58;
                    }
                    unint64_t v28 = *(void *)(v20 + 8 * v19);
                    if (!v28)
                    {
                      int64_t v19 = v27 + 2;
                      if (v27 + 2 >= v24) {
                        goto LABEL_58;
                      }
                      unint64_t v28 = *(void *)(v20 + 8 * v19);
                      if (!v28)
                      {
                        int64_t v29 = v27 + 3;
                        if (v29 >= v24)
                        {
LABEL_58:
                          OUTLINED_FUNCTION_37();
                          swift_release();
                          goto LABEL_14;
                        }

                        unint64_t v28 = *(void *)(v20 + 8 * v29);
                        if (!v28)
                        {
                          while (1)
                          {
                            int64_t v19 = v29 + 1;
                            if (__OFADD__(v29, 1LL)) {
                              break;
                            }
                            if (v19 >= v24) {
                              goto LABEL_58;
                            }
                            unint64_t v28 = *(void *)(v20 + 8 * v19);
                            ++v29;
                            if (v28) {
                              goto LABEL_46;
                            }
                          }

LABEL_60:
                          __break(1u);
LABEL_61:
                          __break(1u);
LABEL_62:
                          __break(1u);
                          goto LABEL_63;
                        }

                        int64_t v19 = v29;
                      }
                    }
                  }

LABEL_27:
  OUTLINED_FUNCTION_24_0();
_$sSo9SAAppInfoC18SiriLinkFlowPluginE14getAppLanguageSSSgyF:
  result.value._object = v10;
  result.value._uint64_t countAndFlagsBits = v9;
  return result;
}

  OUTLINED_FUNCTION_8_2();
}

  swift_release();
  uint64_t v30 = TfIdfComputer.tf(item:)(a1, a2);
  uint64_t v31 = 0LL;
  uint64_t v102 = v30 + 8;
  uint64_t v107 = v30;
  OUTLINED_FUNCTION_8_52();
  uint64_t v2 = v33 & v32;
  id v104 = (unint64_t)(v34 + 63) >> 6;
  p_ivar_lyt = (uint64_t)&VoiceCommandsNLIntent.VoiceCommandContactIntentNode.ivar_lyt;
  uint64_t v99 = (char *)&type metadata for Any + 8;
  while (2)
  {
    uint64_t v101 = v12;
LABEL_29:
    if (v2)
    {
      uint64_t v35 = __clz(__rbit64(v2));
      v2 &= v2 - 1;
      uint64_t v36 = v35 | (v31 << 6);
      goto LABEL_45;
    }

    uint64_t v37 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      goto LABEL_76;
    }
    if (v37 >= v104)
    {
LABEL_68:
      swift_release();
      OUTLINED_FUNCTION_5_10((uint64_t)v12);
      specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v12);
      uint64_t v68 = v67;
      OUTLINED_FUNCTION_2_6();
      __int128 v110 = (void *)v68;
      specialized MutableCollection<>.sort(by:)(&v110);
      OUTLINED_FUNCTION_2_6();
      uint64_t v2 = (uint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS3key_Sd5valuetG_Sds5NeverOTg50130_s18SiriLinkFlowPlugin13TfIdfComputerC9vectorize5inputSaySdGSS_tFSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAG_q3AHtQ10Tf3nnnpk_nTf1cn_n((uint64_t)v110);
      swift_release();
      id v69 = *(void *)(p_ivar_lyt + 312);
      p_ivar_lyt = a2;
      if (v69 != -1) {
        goto LABEL_79;
      }
      goto LABEL_69;
    }

    uint64_t v38 = v102[v37];
    ++v31;
    if (v38) {
      goto LABEL_44;
    }
    if (v37 + 1 >= v104) {
      goto LABEL_68;
    }
    uint64_t v31 = v37 + 1;
    uint64_t v38 = v102[v37 + 1];
    if (v38) {
      goto LABEL_44;
    }
    if (v37 + 2 >= v104) {
      goto LABEL_68;
    }
    uint64_t v31 = v37 + 2;
    uint64_t v38 = v102[v37 + 2];
    if (v38)
    {
LABEL_44:
      uint64_t v2 = (v38 - 1) & v38;
      uint64_t v36 = __clz(__rbit64(v38)) + (v31 << 6);
LABEL_45:
      uint64_t v40 = (uint64_t *)(v107[6] + 16 * v36);
      uint64_t v41 = *v40;
      uint64_t v11 = v40[1];
      if (v12[2])
      {
        uint64_t v42 = *(double *)(v107[7] + 8 * v36);
        OUTLINED_FUNCTION_5_10(v11);
        OUTLINED_FUNCTION_17_39(v41, v11);
        uint64_t v44 = v43;
        OUTLINED_FUNCTION_22();
        if ((v44 & 1) != 0)
        {
          uint64_t v95 = v41;
          if (*(void *)(v105 + 16))
          {
            OUTLINED_FUNCTION_9_9();
            uint64_t v53 = OUTLINED_FUNCTION_6_44();
            uint64_t v54 = 0.0;
            if ((v55 & 1) != 0) {
              uint64_t v54 = *(double *)(*(void *)(v105 + 56) + 8 * v53);
            }
            OUTLINED_FUNCTION_22();
          }

          else
          {
            uint64_t v54 = 0.0;
          }

          uint64_t v56 = swift_isUniquelyReferenced_nonNull_native(v12);
          __int128 v110 = v12;
          OUTLINED_FUNCTION_17_39(v41, v11);
          OUTLINED_FUNCTION_16_42();
          if (v23)
          {
            __break(1u);
          }

          else
          {
            uint64_t v59 = v57;
            uint64_t v60 = v58;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
            if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v56, v41))
            {
              uint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v11);
              if ((v60 & 1) != (v62 & 1)) {
                goto LABEL_82;
              }
              uint64_t v59 = v61;
            }

            uint64_t v12 = v110;
            if ((v60 & 1) != 0)
            {
              *(double *)(v110[7] + 8 * v5__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = v42 * v54;
LABEL_67:
              OUTLINED_FUNCTION_22();
              OUTLINED_FUNCTION_15_25();
              p_ivar_lyt = 2179072LL;
              continue;
            }

            OUTLINED_FUNCTION_1_38();
            *uint64_t v63 = v41;
            v63[1] = v11;
            *(void *)(v12[7] + 8 * v5__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = v64;
            id v65 = v12[2];
            unint64_t v23 = __OFADD__(v65, 1LL);
            uint64_t v66 = v65 + 1;
            if (!v23)
            {
              v12[2] = v66;
              OUTLINED_FUNCTION_9_9();
              goto LABEL_67;
            }
          }

          __break(1u);
LABEL_82:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          __break(1u);
          Swift::String_optional result = swift_release();
          __break(1u);
          return result;
        }
      }

      else
      {
        OUTLINED_FUNCTION_9_9();
      }

      if (*(void *)(p_ivar_lyt + 312) != -1LL) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v45 = OUTLINED_FUNCTION_48();
      uint64_t v46 = (os_log_s *)__swift_project_value_buffer(v45, (uint64_t)static Logger.voiceCommands);
      uint64_t v47 = OUTLINED_FUNCTION_9_9();
      Logger.logObject.getter(v47);
      uint64_t v48 = OUTLINED_FUNCTION_58();
      if (os_log_type_enabled(v46, v48))
      {
        uint64_t v49 = OUTLINED_FUNCTION_38(12LL);
        uint64_t v50 = p_ivar_lyt;
        uint64_t v51 = OUTLINED_FUNCTION_38(32LL);
        __int128 v110 = (void *)v51;
        *(_DWORD *)uint64_t v49 = 136315138;
        OUTLINED_FUNCTION_9_9();
        *(void *)(v49 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v11, (uint64_t *)&v110);
        swift_bridgeObjectRelease_n(v11, 3LL);
        _os_log_impl(&dword_0, v46, v48, "[TfIdf] skipping token not in training data %s", (uint8_t *)v49, 0xCu);
        swift_arrayDestroy(v51, 1LL, v99);
        uint64_t v52 = v51;
        p_ivar_lyt = v50;
        uint64_t v12 = v101;
        OUTLINED_FUNCTION_1_0(v52);
        OUTLINED_FUNCTION_1_0(v49);
      }

      else
      {

        OUTLINED_FUNCTION_19_1(v11);
      }

      goto LABEL_29;
    }

    break;
  }

  uint64_t v39 = v37 + 3;
  if (v39 >= v104) {
    goto LABEL_68;
  }
  uint64_t v38 = v102[v39];
  if (v38)
  {
    uint64_t v31 = v39;
    goto LABEL_44;
  }

  while (1)
  {
    uint64_t v31 = v39 + 1;
    if (__OFADD__(v39, 1LL)) {
      break;
    }
    if (v31 >= v104) {
      goto LABEL_68;
    }
    uint64_t v38 = v102[v31];
    ++v39;
    if (v38) {
      goto LABEL_44;
    }
  }

uint64_t static LocaleUtils.extractLanguageCode(locale:)()
{
  unint64_t v0 = OUTLINED_FUNCTION_5_17(95LL);
  if ((v1 & 1) != 0 && (unint64_t v0 = OUTLINED_FUNCTION_5_17(45LL), (v2 & 1) != 0))
  {
    OUTLINED_FUNCTION_50_3();
    return String.lowercased()()._countAndFlagsBits;
  }

  else
  {
    uint64_t v3 = v0;
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_35_13(15LL, v3);
    OUTLINED_FUNCTION_14();
    uint64_t v4 = OUTLINED_FUNCTION_59_4();
    static String._fromSubstring(_:)(v4, v5, v6, v7);
    OUTLINED_FUNCTION_1_2();
    uint64_t countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
    OUTLINED_FUNCTION_20();
    return countAndFlagsBits;
  }

unint64_t specialized Collection<>.firstIndex(of:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0LL;
  }
  uint64_t v9 = 4 * v4;
  unint64_t v10 = 15LL;
  while (1)
  {
    uint64_t v11 = String.subscript.getter(v10, a3, a4);
    if (v11 == a1 && v12 == a2) {
      break;
    }
    uint64_t v14 = v12;
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a1, a2, 0LL);
    swift_bridgeObjectRelease(v14);
    if ((v15 & 1) != 0) {
      return v10;
    }
    unint64_t v10 = String.index(after:)(v10, a3, a4);
    if (v9 == v10 >> 14) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(a2);
  return v10;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  BOOL v9 = v7 == a1 && v8 == a2;
  if (v9 || (OUTLINED_FUNCTION_167(v7, v8, a1, a2) & 1) != 0) {
    return 0LL;
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = a3 + 7;
  uint64_t v13 = 1LL;
  while (1)
  {
    if (v3 == v13) {
      return 0LL;
    }
    ++v11;
    uint64_t v14 = *(v12 - 1);
    uint64_t v15 = *v12;
    if (v14 == a1 && v15 == a2) {
      break;
    }
    char v17 = OUTLINED_FUNCTION_167(v14, v15, a1, a2);
    uint64_t result = v13++;
    v12 += 2;
    if ((v17 & 1) != 0) {
      return result;
    }
  }

  return v11;
}

unint64_t specialized Collection.subscript.getter( unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 < result >> 14)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    return String.subscript.getter(result, v4 | (v3 << 16), a2, a3);
  }

  return result;
}

uint64_t static LocaleUtils.getBundleId(intentName:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = String.count.getter(a1, a2);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  uint64_t v8 = String.count.getter(v5, v6);
  swift_bridgeObjectRelease(v7);
  if (v8 >= v4) {
    return 0LL;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  uint64_t v12 = String.count.getter(v9, v10);
  swift_bridgeObjectRelease(v11);
  unint64_t v30 = a1;
  unint64_t v31 = a2;
  unint64_t v13 = lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain(a2);
  unint64_t v14 = String.Index.init<A>(utf16Offset:in:)(v12, &v30, &type metadata for String, v13);
  swift_bridgeObjectRetain(a2);
  unint64_t v15 = specialized Collection.subscript.getter(v14, a1, a2);
  unint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(a2);
  unint64_t v30 = v15;
  unint64_t v31 = v17;
  uint64_t v32 = v19;
  uint64_t v33 = v21;
  v29[0] = 46LL;
  v29[1] = 0xE100000000000000LL;
  unint64_t v22 = lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v23 = StringProtocol.components<A>(separatedBy:)( v29,  &type metadata for Substring,  &type metadata for String,  v22,  v13);
  swift_bridgeObjectRelease(v21);
  unint64_t v24 = *(void *)(v23 + 16);
  if (v24 <= 1)
  {
    swift_bridgeObjectRelease(v23);
    return 0LL;
  }

  unint64_t v30 = v23;
  unint64_t v31 = v23 + 32;
  uint64_t v32 = 0LL;
  uint64_t v33 = 2 * v24 - 1;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<String>);
  unint64_t v26 = lazy protocol witness table accessor for type ArraySlice<String> and conformance ArraySlice<A>();
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)(46LL, 0xE100000000000000LL, v25, v26);
  swift_bridgeObjectRelease(v23);
  return v27;
}

id @nonobjc NSBundle.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v5 = [(id)swift_getObjCClassFromMetadata(v2) bundleWithIdentifier:v4];

  return v5;
}

id SAAppInfo.isShortcutsApp()()
{
  id result = [v0 appIdentifyingInfo];
  if (result)
  {
    outlined bridged method (ob) of @objc INPreferences._cachedSiriLanguageCode.getter(result, (SEL *)&selRef_bundleId);
    if (v3)
    {
      uint64_t v4 = v3;
      if (v2 == 0xD000000000000013LL && v3 == 0x80000000001920C0LL) {
        goto LABEL_11;
      }
      char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 0xD000000000000013LL, 0x80000000001920C0LL, 0LL);
      swift_bridgeObjectRelease(v4);
      if ((v5 & 1) != 0)
      {
        char v6 = 1;
        return (id)(v6 & 1);
      }
    }

    id result = [v0 appIdentifyingInfo];
    if (result)
    {
      outlined bridged method (ob) of @objc INPreferences._cachedSiriLanguageCode.getter( result,  (SEL *)&selRef_bundleId);
      if (!v8)
      {
        char v6 = 0;
        return (id)(v6 & 1);
      }

      uint64_t v4 = v8;
      if (v7 != 0xD000000000000026LL || v8 != 0x80000000001947C0LL)
      {
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, 0xD000000000000026LL, 0x80000000001947C0LL, 0LL);
        goto LABEL_14;
      }

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)()
{
  uint64_t v12 = *v0;
  uint64_t *v0 = 0x8000000000000000LL;
  char v1 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  uint64_t v9 = OUTLINED_FUNCTION_23_14((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v11, v12);
  return OUTLINED_FUNCTION_1_17(v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  OUTLINED_FUNCTION_31_10();
  OUTLINED_FUNCTION_22_12();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  uint64_t v8 = OUTLINED_FUNCTION_23_14(v0, v1, v2, v3, v4, v5, v6, v7, v10, v11);
  return OUTLINED_FUNCTION_17_17(v8);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary._Variant.setValue(_:forKey:)( a1,  a2,  a3,  (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = OUTLINED_FUNCTION_18_17();
  a4(v6);
  uint64_t v7 = *v4;
  *uint64_t v4 = v9;
  return OUTLINED_FUNCTION_1_17(v7);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = OUTLINED_FUNCTION_18_17();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, v6, v7, a4, v8);
  uint64_t v17 = OUTLINED_FUNCTION_23_14(v9, v10, v11, v12, v13, v14, v15, v16, v19, v20);
  return OUTLINED_FUNCTION_1_17(v17);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  char v3 = OUTLINED_FUNCTION_22_12();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, a2, v4);
  uint64_t v13 = OUTLINED_FUNCTION_23_14(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  return OUTLINED_FUNCTION_17_17(v13);
}

void outlined bridged method (pb) of @objc SAAppInfo.displayAppName.getter(void *a1)
{
  id v1 = [a1 displayAppName];
  if (v1)
  {
    uint64_t v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  }

  OUTLINED_FUNCTION_2();
}

void outlined bridged method (ob) of @objc INPreferences._cachedSiriLanguageCode.getter(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }

  OUTLINED_FUNCTION_2();
}

uint64_t outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter( a1,  (SEL *)&selRef_appNameMap,  (uint64_t)&type metadata for String);
}

uint64_t outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter(void *a1, SEL *a2, uint64_t a3)
{
  id v4 = [a1 *a2];
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for String,  a3,  &protocol witness table for String);

  return v6;
}

ValueMetadata *type metadata accessor for LocaleUtils()
{
  return &type metadata for LocaleUtils;
}

uint64_t specialized Array.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0LL;
    }
  }

  else if ((v3 & 0x8000000000000000LL) == 0 && v3 < (unint64_t)a2)
  {
    return 0LL;
  }

  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<String> and conformance ArraySlice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<String>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_1_17(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

unint64_t OUTLINED_FUNCTION_5_17(uint64_t a1)
{
  return specialized Collection<>.firstIndex(of:)(a1, 0xE100000000000000LL, v2, v1);
}

uint64_t OUTLINED_FUNCTION_6_16( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return swift_dynamicCast(&a9, &a11, a3, a4, 6LL);
}

uint64_t OUTLINED_FUNCTION_8_18()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_13_13( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v10);
}

uint64_t OUTLINED_FUNCTION_17_17(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t OUTLINED_FUNCTION_18_17()
{
  void *v0 = 0x8000000000000000LL;
  return v1;
}

void OUTLINED_FUNCTION_21_14()
{
}

uint64_t OUTLINED_FUNCTION_22_12()
{
  void *v0 = 0x8000000000000000LL;
  return v1;
}

uint64_t OUTLINED_FUNCTION_23_14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

uint64_t OUTLINED_FUNCTION_25_16(uint64_t a1, uint64_t a2, ...)
{
  return outlined destroy of Any?((uint64_t)va);
}

  ;
}

uint64_t OUTLINED_FUNCTION_27_13(uint64_t a1, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v1, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_28_9()
{
  return static LocaleUtils.compatibleLocale(siriLocale:contentLocale:)(v2, v1, v0, v3);
}

uint64_t OUTLINED_FUNCTION_30_12(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

uint64_t OUTLINED_FUNCTION_31_10()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t OUTLINED_FUNCTION_33_10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return swift_dynamicCast(&a9, &a11, v11, a4, 6LL);
}

uint64_t OUTLINED_FUNCTION_34_11()
{
  return swift_bridgeObjectRelease(0LL);
}

uint64_t OUTLINED_FUNCTION_35_13(uint64_t a1, uint64_t a2)
{
  return String.subscript.getter(a1, a2, v3, v2);
}

void OUTLINED_FUNCTION_37_12(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, __int128 a5)
{
}

BOOL OUTLINED_FUNCTION_40_12(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_41_11(uint64_t a1)
{
  return static String._fromSubstring(_:)(a1, v1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_42_6()
{
  return SAAppInfo.getAppLanguage()().value._countAndFlagsBits;
}

unint64_t OUTLINED_FUNCTION_47_10(uint64_t a1)
{
  return specialized Collection<>.firstIndex(of:)(a1, 0xE100000000000000LL, v2, v1);
}

uint64_t OUTLINED_FUNCTION_49_9()
{
  return swift_bridgeObjectRelease(v0);
}

id OUTLINED_FUNCTION_51_12()
{
  return [v0 *(SEL *)(v1 + 1064)];
}

  ;
}

uint64_t OUTLINED_FUNCTION_56_10(uint64_t a1, ...)
{
  return swift_endAccess(va);
}

uint64_t OUTLINED_FUNCTION_57_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_58_9()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t OUTLINED_FUNCTION_59_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_60_6()
{
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_61_8()
{
}

void OUTLINED_FUNCTION_63_5()
{
}

void OUTLINED_FUNCTION_65_3(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

void OUTLINED_FUNCTION_66_4(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_67_3()
{
  return v0;
}

id static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(void *a1)
{
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___LNPrimitiveValueType);
  uint64_t v3 = OUTLINED_FUNCTION_10_12(v2);
  if (!v3)
  {
    uint64_t v9 = objc_opt_self(&OBJC_CLASS___LNMeasurementValueType);
    uint64_t v10 = (void *)OUTLINED_FUNCTION_10_12(v9);
    if (v10) {
      return [v10 unitType];
    }
    uint64_t v15 = objc_opt_self(&OBJC_CLASS___LNIntentsValueType);
    uint64_t v16 = OUTLINED_FUNCTION_10_12(v15);
    if (!v16)
    {
      uint64_t v23 = objc_opt_self(&OBJC_CLASS___LNEntityValueType);
      if (OUTLINED_FUNCTION_10_12(v23))
      {
        OUTLINED_FUNCTION_25_17();
        return &dword_4 + 3;
      }

      uint64_t v37 = objc_opt_self(&OBJC_CLASS___LNLinkEnumerationValueType);
      uint64_t v38 = OUTLINED_FUNCTION_10_12(v37);
      if (v38)
      {
        uint64_t v39 = (void *)v38;
        id v40 = a1;
        id v41 = [v39 enumerationIdentifier];
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        return (id)v8;
      }

      uint64_t v52 = objc_opt_self(&OBJC_CLASS___LNArrayValueType);
      if (OUTLINED_FUNCTION_10_12(v52)) {
        return 0LL;
      }
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v53 = OUTLINED_FUNCTION_48();
      __swift_project_value_buffer(v53, (uint64_t)static Logger.voiceCommands);
      id v54 = a1;
      uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v8 = 12LL;
        os_log_type_t v57 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
        uint64_t v58 = (void *)OUTLINED_FUNCTION_38(8LL);
        *(_DWORD *)os_log_type_t v57 = 138412290;
        id v75 = v54;
        id v59 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v57 + 4);
        *uint64_t v58 = v54;

        OUTLINED_FUNCTION_31_2(&dword_0, v55, v56, "#LNValueTypeMap: cannot map unsupported %@", v57);
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_30_3((uint64_t)v58, v61, v60);
        OUTLINED_FUNCTION_1_0((uint64_t)v58);
        OUTLINED_FUNCTION_1_0((uint64_t)v57);

        return (id)v8;
      }

LABEL_43:
      OUTLINED_FUNCTION_25_17();
      return &dword_C;
    }

    uint64_t v17 = v16;
    objc_opt_self(&OBJC_CLASS___LNIntentsValueType);
    id v5 = OUTLINED_FUNCTION_123_0();
    uint64_t v6 = (uint64_t)OUTLINED_FUNCTION_14_19((uint64_t)v5, "timerValueType");
    OUTLINED_FUNCTION_121(v6, &lazy cache variable for type metadata for LNIntentsValueType);
    uint64_t v18 = OUTLINED_FUNCTION_13_14(v6);

    if ((v18 & 1) != 0) {
      goto LABEL_3;
    }
    id v19 = v5;
    id v20 = OUTLINED_FUNCTION_14_19((uint64_t)v19, "personValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v20);
    OUTLINED_FUNCTION_21_15();

    if ((v6 & 1) != 0)
    {

      OUTLINED_FUNCTION_25_17();
      return &dword_8 + 1;
    }

    id v34 = v19;
    id v35 = OUTLINED_FUNCTION_14_19((uint64_t)v34, "currencyAmountValueType");
    char v36 = OUTLINED_FUNCTION_13_14((uint64_t)v35);

    if ((v36 & 1) != 0)
    {

      OUTLINED_FUNCTION_25_17();
      return &dword_0 + 3;
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v42 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.voiceCommands);
    id v43 = OUTLINED_FUNCTION_112_0();
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_13_9(v45))
    {
      uint64_t v8 = 12LL;
      uint64_t v46 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v47 = (void *)OUTLINED_FUNCTION_38(8LL);
      id v48 = OUTLINED_FUNCTION_53_9(5.7779e-34);
      OUTLINED_FUNCTION_67_4((uint64_t)v48);
      *uint64_t v47 = v17;

      uint64_t v49 = "#LNValueTypeMap: cannot map unsupported LNIntentsValueType %@";
LABEL_26:
      OUTLINED_FUNCTION_31_2(&dword_0, v44, (os_log_type_t)v6, v49, v46);
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_30_3((uint64_t)v47, v51, v50);
      OUTLINED_FUNCTION_1_0((uint64_t)v47);
      OUTLINED_FUNCTION_1_0((uint64_t)v46);

      return (id)v8;
    }

LABEL_42:
    goto LABEL_43;
  }

  uint64_t v4 = v3;
  objc_opt_self(&OBJC_CLASS___LNPrimitiveValueType);
  id v5 = OUTLINED_FUNCTION_123_0();
  uint64_t v6 = (uint64_t)OUTLINED_FUNCTION_14_19((uint64_t)v5, "dateValueType");
  OUTLINED_FUNCTION_121(v6, &lazy cache variable for type metadata for LNPrimitiveValueType);
  uint64_t v7 = OUTLINED_FUNCTION_13_14(v6);

  if ((v7 & 1) == 0)
  {
    id v11 = v5;
    id v12 = OUTLINED_FUNCTION_14_19((uint64_t)v11, "dateComponentsValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v12);
    OUTLINED_FUNCTION_21_15();

    if ((v6 & 1) != 0)
    {

      OUTLINED_FUNCTION_25_17();
      return &dword_4 + 1;
    }

    id v13 = v11;
    id v14 = OUTLINED_FUNCTION_14_19((uint64_t)v13, "BOOLValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v14);
    OUTLINED_FUNCTION_21_15();

    id v21 = v13;
    id v22 = OUTLINED_FUNCTION_14_19((uint64_t)v21, "doubleValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v22);
    OUTLINED_FUNCTION_21_15();

    if ((v6 & 1) != 0)
    {

      OUTLINED_FUNCTION_25_17();
      return &dword_4 + 2;
    }

    id v24 = v21;
    id v25 = OUTLINED_FUNCTION_14_19((uint64_t)v24, "intValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v25);
    OUTLINED_FUNCTION_21_15();

    id v26 = v24;
    id v27 = OUTLINED_FUNCTION_14_19((uint64_t)v26, "int8ValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v27);
    OUTLINED_FUNCTION_21_15();

    id v28 = v26;
    id v29 = OUTLINED_FUNCTION_14_19((uint64_t)v28, "int16ValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v29);
    OUTLINED_FUNCTION_21_15();

    id v30 = v28;
    id v31 = OUTLINED_FUNCTION_14_19((uint64_t)v30, "int32ValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v31);
    OUTLINED_FUNCTION_21_15();

    id v32 = v30;
    id v33 = OUTLINED_FUNCTION_14_19((uint64_t)v32, "int64ValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v33);
    OUTLINED_FUNCTION_21_15();

    id v62 = v32;
    id v63 = OUTLINED_FUNCTION_14_19((uint64_t)v62, "placemarkValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v63);
    OUTLINED_FUNCTION_21_15();

    id v64 = v62;
    id v65 = OUTLINED_FUNCTION_14_19((uint64_t)v64, "URLValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v65);
    OUTLINED_FUNCTION_21_15();

    if ((v6 & 1) != 0)
    {

      OUTLINED_FUNCTION_25_17();
      return &dword_C + 1;
    }

    id v66 = v64;
    id v67 = OUTLINED_FUNCTION_14_19((uint64_t)v66, "stringValueType");
    OUTLINED_FUNCTION_6_17((uint64_t)v67);
    OUTLINED_FUNCTION_21_15();

    id v68 = v66;
    id v69 = OUTLINED_FUNCTION_14_19((uint64_t)v68, "attributedStringValueType");
    char v70 = OUTLINED_FUNCTION_13_14((uint64_t)v69);

    if ((v70 & 1) != 0)
    {

      OUTLINED_FUNCTION_25_17();
      return &dword_0 + 1;
    }

    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v71 = OUTLINED_FUNCTION_48();
    __swift_project_value_buffer(v71, (uint64_t)static Logger.voiceCommands);
    id v43 = OUTLINED_FUNCTION_112_0();
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_13_9(v72))
    {
      uint64_t v8 = 12LL;
      uint64_t v46 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v47 = (void *)OUTLINED_FUNCTION_38(8LL);
      id v73 = OUTLINED_FUNCTION_53_9(5.7779e-34);
      OUTLINED_FUNCTION_67_4((uint64_t)v73);
      *uint64_t v47 = v4;

      uint64_t v49 = "#LNValueTypeMap: cannot map unsupported LNPrimitiveValueType %@";
      goto LABEL_26;
    }

    goto LABEL_42;
  }

          OUTLINED_FUNCTION_1_18();
          OUTLINED_FUNCTION_40_0();
          OUTLINED_FUNCTION_20_0();
          OUTLINED_FUNCTION_15_0();
          OUTLINED_FUNCTION_18_0();
          OUTLINED_FUNCTION_33_0();
          OUTLINED_FUNCTION_13_15();
          __asm { BR              X0 }
        }

      OUTLINED_FUNCTION_8_21();
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_15_0();
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_33_0();
      OUTLINED_FUNCTION_31();
      return (*(uint64_t (**)(void))(v0 + 8))();
    case 4:
      __int128 v121 = v0 + 120;
      id v26 = *(void *)(v0 + 352);
      id v27 = *(os_log_s **)(v0 + 288);
      id v28 = *(void *)(v0 + 264);
      id v29 = *(void *)(v0 + 272);
      id v31 = *(void **)v26;
      id v30 = *(void **)(v26 + 8);
      id v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (intent: INIntent, intentResponse: INIntentResponse, exitValue: RCHFlowResult<INIntent, INIntentResponse>));
      (*(void (**)(os_log_s *, uint64_t, uint64_t))(v29 + 32))(v27, v26 + *(int *)(v32 + 64), v28);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      id v33 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_84(v33, (uint64_t)static Logger.voiceCommands);
      id v34 = OUTLINED_FUNCTION_58();
      if (OUTLINED_FUNCTION_31_0(v34))
      {
        id v35 = (uint8_t *)OUTLINED_FUNCTION_57_1();
        *(_WORD *)id v35 = 0;
        OUTLINED_FUNCTION_47_1( &dword_0,  v27,  (os_log_type_t)v28,  "Pushing Reading Flow to handle customIntents handle dialog",  v35);
        OUTLINED_FUNCTION_1_0((uint64_t)v35);
      }

      char v36 = *(void *)(v0 + 344);
      uint64_t v116 = *(void *)(v0 + 328);
      uint64_t v117 = *(void *)(v0 + 336);
      uint64_t v37 = *(void *)(v0 + 272);
      uint64_t v114 = *(void *)(v0 + 264);
      uint64_t v115 = *(void *)(v0 + 288);
      uint64_t v38 = *(void *)(v0 + 256);

      uint64_t v118 = v30;
      uint64_t v39 = CustomIntentExecutionFlow.getReadItems(intent:intentResponse:)(v31, v30);

      uint64_t v127 = 0LL;
      memset(v126, 0, sizeof(v126));
      outlined init with copy of AppShortcutInvoking(v38 + 24, v0 + 56);
      static OutputPublisherFactory.makeOutputPublisher()(&v128);
      id v40 = type metadata accessor for RunCustomIntentReadingDelegate();
      uint64_t v113 = v31;
      OUTLINED_FUNCTION_19(v40, 192LL);
      uint64_t v112 = RunCustomIntentReadingDelegate.init(templater:deviceState:outputPublisher:)( (uint64_t)v126,  (void *)(v0 + 56),  &v128);
      id v41 = type metadata accessor for PaginatedConversationFlowSource(0LL);
      OUTLINED_FUNCTION_51(v41);
      lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey( &lazy protocol witness table cache variable for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate,  (uint64_t (*)(uint64_t))type metadata accessor for RunCustomIntentReadingDelegate,  (uint64_t)&protocol conformance descriptor for RunCustomIntentReadingDelegate);
      id v43 = v42;
      swift_retain(v112);
      uint64_t v44 = PaginatedConversationFlowSource.init<A>(items:delegate:)(v39, v112, v40, v43);
      os_log_type_t v45 = type metadata accessor for ReadingFlow(0LL);
      OUTLINED_FUNCTION_51(v45);
      uint64_t v46 = swift_retain(v44);
      uint64_t v47 = ReadingFlow.init(source:)(v46, &protocol witness table for PaginatedConversationFlowSource);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v36, v115, v114);
      OUTLINED_FUNCTION_48_11(v36, v116);
      outlined init with take of CustomIntentExecutionFlow.State(v36, v117);
      OUTLINED_FUNCTION_15_6(v3, v121);
      OUTLINED_FUNCTION_33_12(v117);
      swift_endAccess(v121);
      *(void *)(v0 + 23outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v47;
      static ExecuteResponse.complete<A>(next:)(v0 + 232, v45, &protocol witness table for ReadingFlow);

      swift_release();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v115, v114);
LABEL_18:
      swift_release();
      goto LABEL_42;
    case 5:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      id v48 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_84(v48, (uint64_t)static Logger.voiceCommands);
      uint64_t v49 = OUTLINED_FUNCTION_58();
      if (os_log_type_enabled(v1, v49))
      {
        uint64_t v50 = (uint8_t *)OUTLINED_FUNCTION_57_1();
        *(_WORD *)uint64_t v50 = 0;
        OUTLINED_FUNCTION_47_1(&dword_0, v1, v49, "CustomIntentExecutionFlow waiting for done.", v50);
        OUTLINED_FUNCTION_1_0((uint64_t)v50);
      }

      static ExecuteResponse.ongoing(requireInput:)(1LL);
      uint64_t v51 = OUTLINED_FUNCTION_129();
      goto LABEL_41;
    case 6:
      (*(void (**)(void, void, void))(*(void *)(v0 + 272) + 32LL))( *(void *)(v0 + 280),  *(void *)(v0 + 352),  *(void *)(v0 + 264));
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      id v54 = OUTLINED_FUNCTION_48();
      uint64_t v55 = __swift_project_value_buffer(v54, (uint64_t)static Logger.voiceCommands);
      *(void *)(v0 + 360) = v55;
      os_log_type_t v56 = (os_log_s *)v55;
      Logger.logObject.getter(v55);
      os_log_type_t v57 = OUTLINED_FUNCTION_58();
      if (OUTLINED_FUNCTION_31_0(v57))
      {
        uint64_t v58 = (uint8_t *)OUTLINED_FUNCTION_57_1();
        *(_WORD *)uint64_t v58 = 0;
        OUTLINED_FUNCTION_47_1( &dword_0,  v56,  (os_log_type_t)v2,  "CustomIntentExecutionFlow user pressed done, showing empty snippet",  v58);
        OUTLINED_FUNCTION_1_0((uint64_t)v58);
      }

      id v59 = *(void *)(v0 + 336);
      uint64_t v60 = *(void *)(v0 + 344);
      uint64_t v61 = *(void *)(v0 + 272);
      uint64_t v122 = *(void *)(v0 + 280);
      uint64_t v124 = *(void *)(v0 + 328);
      id v62 = *(void **)(v0 + 256);
      uint64_t v119 = *(void *)(v0 + 264);

      id v63 = [objc_allocWithZone(SAUIAssistantUtteranceView) init];
      id v64 = [objc_allocWithZone(SAUIAddViews) init];
      *(void *)(v0 + 368) = v64;
      id v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      id v66 = OUTLINED_FUNCTION_19(v65, 40LL);
      *(_OWORD *)(v66 + swift_weakDestroy(v0 + 16) = xmmword_17E150;
      *(void *)(v66 + 3outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v63;
      *(void *)&v126[0] = v66;
      specialized Array._endMutation()(v66, v67, v68);
      id v69 = v63;
      outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(*(uint64_t *)&v126[0], v64);
      char v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      outlined bridged method (mbnn) of @objc SAUIAddViews.dialogPhase.setter(v70, v71, v64);

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v60, v122, v119);
      OUTLINED_FUNCTION_48_11(v60, v124);
      outlined init with take of CustomIntentExecutionFlow.State(v60, v59);
      OUTLINED_FUNCTION_15_6(v3, v0 + 96);
      OUTLINED_FUNCTION_33_12(v59);
      swift_endAccess(v0 + 96);
      id v73 = v62[11];
      os_log_type_t v72 = v62[12];
      __swift_project_boxed_opaque_existential_1(v62 + 8, v73);
      uint64_t v74 = (void *)swift_task_alloc(async function pointer to AceServiceInvokerAsync.submit<A>(_:)[1]);
      *(void *)(v0 + 376) = v74;
      id v75 = type metadata accessor for NSError( 0LL,  (unint64_t *)&lazy cache variable for type metadata for SABaseCommand,  &OBJC_CLASS___SABaseCommand_ptr);
      *uint64_t v74 = v0;
      v74[1] = CustomIntentExecutionFlow.execute();
      return AceServiceInvokerAsync.submit<A>(_:)(v64, v73, v75, v72);
    default:
      id v25 = *(void *)(v0 + 352);
      static ExecuteResponse.complete()(EnumCaseMultiPayload);
      outlined destroy of CustomIntentExecutionFlow.State(v25);
      goto LABEL_42;
  }

uint64_t LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = a3[3];
  uint64_t v10 = a3[4];
  id v11 = __swift_project_boxed_opaque_existential_1(a3, v9);
  id v12 = (void *)swift_task_alloc(unk_217394);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v12;
  *id v12 = v5;
  v12[1] = LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:);
  return v14(a1, a2, (uint64_t)v11, a4, v4, v9, v10);
}

uint64_t LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_52_7();
  return v2(v1);
}

uint64_t static VoiceCommandIntentValueType.__derived_enum_equals(_:_:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 == 1)
    {
      if (a6 == 1) {
        return a1 == a4;
      }
      return 0LL;
    }

    return ((uint64_t (*)(void))((char *)&loc_6FA78 + 4 * byte_182090[a1]))();
  }

  else
  {
    if (a6) {
      return 0LL;
    }
    if (a1 == a4 && a2 == a5) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0LL);
    }
  }

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoiceCommandIntentValueType( uint64_t a1, uint64_t a2)
{
  return static VoiceCommandIntentValueType.__derived_enum_equals(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(_BYTE *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_BYTE *)(a2 + 16));
}

_UNKNOWN **LNValueType.toPromptTargetType()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v1 = OUTLINED_FUNCTION_48();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  id v2 = OUTLINED_FUNCTION_123_0();
  uint64_t v3 = v0;
  Logger.logObject.getter(v2);
  os_log_type_t v4 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v0, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_38(8LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    id v14 = v2;
    id v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4);
    *uint64_t v6 = v2;

    OUTLINED_FUNCTION_31_2(&dword_0, v3, v4, "#LNValueType has type %@", v5);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_30_3((uint64_t)v6, v9, v8);
    OUTLINED_FUNCTION_1_0((uint64_t)v6);
    OUTLINED_FUNCTION_1_0((uint64_t)v5);
  }

  else
  {
  }

  uint64_t v10 = (uint64_t)static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(v2);
  if (v12)
  {
    if (v12 == 1) {
      return &outlined read-only object #2 of LNValueType.toPromptTargetType();
    }
    else {
      return off_1F61D8[v10];
    }
  }

  else
  {
    outlined consume of VoiceCommandIntentValueType(v10, v11, 0);
    return &outlined read-only object #4 of LNValueType.toPromptTargetType();
  }

Swift::Bool __swiftcall LNValueType.requiresStrictDictationPrompt()()
{
  uint64_t v1 = (uint64_t)static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(v0);
  if (v3 == 2 && __PAIR128__(v2, v1) < 0xE && ((0x2881u >> v1) & 1) != 0) {
    return 1;
  }
  outlined consume of VoiceCommandIntentValueType(v1, v2, v3);
  return 0;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  id v7 = (void *)v6;
  uint64_t v8 = *a1;
  uint64_t v9 = *a1 + 8;
  if (v6) {
    uint64_t v11 = v6;
  }
  else {
    uint64_t v11 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8);
  *a1 = v9;
  uint64_t v10 = *a2;
  if (*a2)
  {
    *uint64_t v10 = v7;
    *a2 = v10 + 1;
  }

  else
  {
  }

uint64_t specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[78] = a5;
  v5[77] = a4;
  v5[76] = a2;
  v5[75] = a1;
  uint64_t v7 = type metadata accessor for Locale(0LL);
  v5[79] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[80] = v8;
  v5[81] = OUTLINED_FUNCTION_9_0(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v5[82] = OUTLINED_FUNCTION_9_0(*(void *)(v9 - 8));
  uint64_t v10 = type metadata accessor for URL(0LL);
  v5[83] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[84] = v11;
  v5[85] = OUTLINED_FUNCTION_9_0(v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v5[86] = OUTLINED_FUNCTION_9_0(*(void *)(v12 - 8));
  uint64_t v13 = type metadata accessor for DateComponents(0LL);
  v5[87] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[88] = v14;
  v5[89] = OUTLINED_FUNCTION_9_0(v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  v5[90] = OUTLINED_FUNCTION_9_0(*(void *)(v15 - 8));
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5[91] = OUTLINED_FUNCTION_9_0(*(void *)(v16 - 8));
  uint64_t v17 = type metadata accessor for Date(0LL);
  v5[92] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v5[93] = v18;
  v5[94] = OUTLINED_FUNCTION_9_0(v18);
  uint64_t v19 = type metadata accessor for ContactResolver(0LL);
  v5[95] = v19;
  v5[5] = v19;
  v5[6] = &protocol witness table for ContactResolver;
  void v5[2] = a3;
  swift_retain(a3);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

uint64_t specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)()
{
  uint64_t v3 = (uint64_t)OUTLINED_FUNCTION_93();
  uint64_t v5 = v4;
  char v7 = v6;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v130 = (void *)((char *)v0 + 16);
  uint64_t v8 = OUTLINED_FUNCTION_48();
  uint64_t v9 = (void *)__swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  *((void *)v0 + 96) = v9;
  id v10 = (id)OUTLINED_FUNCTION_56_11();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  uint64_t v131 = v0;
  if (OUTLINED_FUNCTION_91_0(v11))
  {
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v123 = OUTLINED_FUNCTION_38(32LL);
    OUTLINED_FUNCTION_23_15(4.8149e-34);
    uint64_t v13 = String.init<A>(describing:)((char *)v0 + 520, &type metadata for VoiceCommandIntentValueType);
    uint64_t v3 = v14;
    uint64_t v21 = OUTLINED_FUNCTION_48_9(v13, v14, v15, v16, v17, v18, v19, v20, v112);
    uint64_t v29 = OUTLINED_FUNCTION_129_0(v21, v22, v23, v24, v25, v26, v27, v28, v113, v119, v123, (uint64_t)v10, type);
    uint64_t v1 = &type metadata for Any;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v30, v31);
    OUTLINED_FUNCTION_118_0();
    OUTLINED_FUNCTION_66_5();
    uint64_t v0 = log;
    OUTLINED_FUNCTION_31_2(&dword_0, log, v2, "#LNValueType getting value of %s", v12);
    id v10 = (id)v122;
    OUTLINED_FUNCTION_30_3(v122, v32, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v122);
    OUTLINED_FUNCTION_1_0((uint64_t)v12);
  }

  else
  {
    OUTLINED_FUNCTION_55_10();
  }

  if (v7)
  {
    if (v7 != 1) {
      __asm { BR              X9 }
    }

    uint64_t v33 = OUTLINED_FUNCTION_125();
    if (v34 != -1)
    {
      if ((v34 & 1) != 0)
      {
        if (v0 == (os_log_s *)OUTLINED_FUNCTION_102())
        {
          id v10 = (id)*((void *)v131 + 78);
          *((void *)v131 + 45) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
          OUTLINED_FUNCTION_106();
          id v57 = OUTLINED_FUNCTION_84_1();
          uint64_t v58 = OUTLINED_FUNCTION_72( (uint64_t)v57,  &lazy cache variable for type metadata for NSUnit,  &OBJC_CLASS___NSUnit_ptr);
          OUTLINED_FUNCTION_86(v58);
          id v59 = objc_allocWithZone(&OBJC_CLASS___LNValue);
          OUTLINED_FUNCTION_110_0(v10);
          OUTLINED_FUNCTION_8_19();
          goto LABEL_19;
        }

        OUTLINED_FUNCTION_57_7();
        os_log_type_t v60 = OUTLINED_FUNCTION_58();
        if (OUTLINED_FUNCTION_45_0(v60))
        {
          os_log_type_t typea = v10;
          uint64_t v61 = OUTLINED_FUNCTION_38(22LL);
          v132[0] = OUTLINED_FUNCTION_38(64LL);
          uint64_t v62 = OUTLINED_FUNCTION_77_2(4.8151e-34);
          OUTLINED_FUNCTION_116_0(v62);
          uint64_t v64 = OUTLINED_FUNCTION_76_2(v63);
          id v10 = (id)v65;
          uint64_t v72 = OUTLINED_FUNCTION_48_9(v64, v65, v66, v67, v68, v69, v70, v71, v112);
          OUTLINED_FUNCTION_62_8(v72, v73, v74, v75, v76, v77, v78, v79, v114);
          OUTLINED_FUNCTION_14();
          uint64_t v80 = OUTLINED_FUNCTION_16_17();
          uint64_t v82 = v81;
          uint64_t v89 = OUTLINED_FUNCTION_48_9(v80, v81, v83, v84, v85, v86, v87, v88, v115);
          OUTLINED_FUNCTION_52_8(v89, v90, v91, v92, v93, v94, v95, v96, v116, v119, (void *)v131 + 71);
          OUTLINED_FUNCTION_20();
          OUTLINED_FUNCTION_60_7( &dword_0,  v97,  v98,  "Measurement unit type %s does not match requested %s.",  v99,  v100,  v101,  v102,  v117,  v120,  v124,  v132[0],  typea);
          OUTLINED_FUNCTION_71_2((uint64_t)&type metadata for Any, v118, v121, v125, (uint64_t)loga);
          OUTLINED_FUNCTION_1_0(v82);
          OUTLINED_FUNCTION_1_0(v61);

          OUTLINED_FUNCTION_8_19();
          goto LABEL_19;
        }

        OUTLINED_FUNCTION_39_12();
      }

      else
      {
        uint64_t v35 = OUTLINED_FUNCTION_122();
        if (v36)
        {
          NSString v37 = OUTLINED_FUNCTION_65_4();
          id v38 = (id)OUTLINED_FUNCTION_94((uint64_t)v37);
          OUTLINED_FUNCTION_14();

          *((void *)v131 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
          OUTLINED_FUNCTION_106();
          OUTLINED_FUNCTION_72(v39, &lazy cache variable for type metadata for NSUnit, &OBJC_CLASS___NSUnit_ptr);
          OUTLINED_FUNCTION_85_1((uint64_t)v38);
          id v10 = objc_allocWithZone(&OBJC_CLASS___LNValue);
          OUTLINED_FUNCTION_82_0(v131);

LABEL_19:
          OUTLINED_FUNCTION_8_19();
          goto LABEL_30;
        }

        uint64_t v9 = v1;
        Logger.logObject.getter(v35);
        os_log_type_t v103 = OUTLINED_FUNCTION_73();
        if (OUTLINED_FUNCTION_45_0(v103))
        {
          id v104 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
          OUTLINED_FUNCTION_46_10(v104);
          OUTLINED_FUNCTION_19_12( &dword_0,  v105,  v106,  "Could not create valid measurement due to missing unit symbol.");
          OUTLINED_FUNCTION_1_0((uint64_t)v0);
        }
      }

      goto LABEL_19;
    }

    Logger.logObject.getter(v33);
    os_log_type_t v52 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v52))
    {
      uint64_t v53 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_46_10(v53);
      os_log_type_t v56 = "Unable to parse measurement from nl intent.";
LABEL_28:
      OUTLINED_FUNCTION_19_12(&dword_0, v54, v55, v56);
      OUTLINED_FUNCTION_1_0((uint64_t)v0);
      goto LABEL_29;
    }

    goto LABEL_29;
  }

  outlined consume of VoiceCommandIntentValueType(v3, v5, 0);
  uint64_t v40 = OUTLINED_FUNCTION_109();
  if (!v41)
  {
    uint64_t v9 = (void *)*((void *)v131 + 96);
    Logger.logObject.getter(v40);
    os_log_type_t v107 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v107))
    {
      uint64_t v108 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_46_10(v108);
      os_log_type_t v56 = "#LNValueType: getLNValue returning nil";
      goto LABEL_28;
    }

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_81_1();
  OUTLINED_FUNCTION_3_0(*(void *)(v3 + 776));
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  outlined destroy of Any?(v2, &demangling cache variable for type metadata for LocationProviding?);
  OUTLINED_FUNCTION_100_0(v4, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  OUTLINED_FUNCTION_28_1();
  os_log_type_t v2 = v1[92];
  uint64_t v3 = (void *)v1[91];
  uint64_t v4 = OUTLINED_FUNCTION_42_7();
  if (v5)
  {
    OUTLINED_FUNCTION_108_0(v4, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_101();
    char v6 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v6))
    {
      char v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v7);
      OUTLINED_FUNCTION_27_0(&dword_0, v8, v9, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_1_0(v0);
    }
  }

  else
  {
    id v10 = v1[94];
    os_log_type_t v11 = v1[93];
    OUTLINED_FUNCTION_12_18();
    v1[53] = v2;
    OUTLINED_FUNCTION_69_3();
    OUTLINED_FUNCTION_75(v12, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
    uint64_t v13 = objc_allocWithZone(&OBJC_CLASS___LNValue);
    unint64_t v14 = OUTLINED_FUNCTION_113_0();
    OUTLINED_FUNCTION_31_11(v14);
    OUTLINED_FUNCTION_18_18();
  }

  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  uint64_t v15 = OUTLINED_FUNCTION_52_7();
  return OUTLINED_FUNCTION_3_23(v15, v16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_80_1();
  OUTLINED_FUNCTION_3_0(*(void *)(v2 + 784));
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_104_0();
  outlined destroy of Any?(v0, &demangling cache variable for type metadata for LocationProviding?);
  OUTLINED_FUNCTION_100_0(v3, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  OUTLINED_FUNCTION_28_1();
  os_log_type_t v2 = v1[87];
  uint64_t v3 = (void *)v1[86];
  uint64_t v4 = OUTLINED_FUNCTION_42_7();
  if (v5)
  {
    OUTLINED_FUNCTION_108_0(v4, &demangling cache variable for type metadata for DateComponents?);
    OUTLINED_FUNCTION_101();
    char v6 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v6))
    {
      char v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v7);
      OUTLINED_FUNCTION_27_0(&dword_0, v8, v9, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_1_0(v0);
    }
  }

  else
  {
    id v10 = v1[89];
    os_log_type_t v11 = v1[88];
    OUTLINED_FUNCTION_12_18();
    v1[49] = v2;
    OUTLINED_FUNCTION_69_3();
    OUTLINED_FUNCTION_75(v12, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
    uint64_t v13 = objc_allocWithZone(&OBJC_CLASS___LNValue);
    unint64_t v14 = OUTLINED_FUNCTION_113_0();
    OUTLINED_FUNCTION_31_11(v14);
    OUTLINED_FUNCTION_18_18();
  }

  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  uint64_t v15 = OUTLINED_FUNCTION_52_7();
  return OUTLINED_FUNCTION_3_23(v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 800) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_40_1();
  uint64_t v1 = *(void **)(v0 + 816);
  OUTLINED_FUNCTION_42_1();
  *(void *)(v3 + 840) = v2;
  OUTLINED_FUNCTION_54_0(v4);

  OUTLINED_FUNCTION_41_8();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_45_7(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  OUTLINED_FUNCTION_28_1();
  if (*(void *)(v2 + 840))
  {
    uint64_t v3 = [*(id *)(v2 + 808) memberValueType];
    uint64_t v4 = objc_opt_self(&OBJC_CLASS___LNEntityValueType);
    if (OUTLINED_FUNCTION_10_12(v4))
    {
      uint64_t v5 = *(id *)(v2 + 624);
    }

    else
    {
      id v10 = *(void **)(v2 + 840);
      os_log_type_t v11 = *(void **)(v2 + 624);

      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v13 = (__n128 *)OUTLINED_FUNCTION_23_4(v12);
      OUTLINED_FUNCTION_90_0(v13, v14, v15, (__n128)xmmword_17E150);
      uint64_t v5 = v10;
      [v5 valueType];
      uint64_t v16 = objc_allocWithZone(&OBJC_CLASS___LNValue);
      OUTLINED_FUNCTION_74_3();
    }
  }

  else
  {

    OUTLINED_FUNCTION_101();
    char v6 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v6))
    {
      char v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v7);
      OUTLINED_FUNCTION_27_0(&dword_0, v8, v9, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_1_0(v1);
    }
  }

  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  uint64_t v17 = OUTLINED_FUNCTION_52_7();
  return OUTLINED_FUNCTION_3_23(v17, v18);
}

{
  os_log_s *v0;
  void *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  void *v9;
  id v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  id v57;
  uint64_t v58;
  id v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  os_log_type_t v103;
  _WORD *v104;
  uint64_t v105;
  uint64_t v106;
  os_log_type_t v107;
  _WORD *v108;
  uint64_t v109;
  uint64_t (*v110)(void);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  os_log_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  os_log_s *log;
  os_log_t loga;
  uint64_t type;
  os_log_type_t typea;
  void *v130;
  os_log_s *v131;
  uint64_t v132[3];
  uint64_t v3 = (uint64_t)OUTLINED_FUNCTION_93();
  uint64_t v5 = v4;
  char v7 = v6;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v130 = (void *)((char *)v0 + 16);
  uint64_t v8 = OUTLINED_FUNCTION_48();
  uint64_t v9 = (void *)__swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  *((void *)v0 + 95) = v9;
  id v10 = (id)OUTLINED_FUNCTION_56_11();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  uint64_t v131 = v0;
  if (OUTLINED_FUNCTION_91_0(v11))
  {
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
    uint64_t v123 = OUTLINED_FUNCTION_38(32LL);
    OUTLINED_FUNCTION_23_15(4.8149e-34);
    uint64_t v13 = String.init<A>(describing:)((char *)v0 + 520, &type metadata for VoiceCommandIntentValueType);
    uint64_t v3 = v14;
    uint64_t v21 = OUTLINED_FUNCTION_48_9(v13, v14, v15, v16, v17, v18, v19, v20, v112);
    uint64_t v29 = OUTLINED_FUNCTION_129_0(v21, v22, v23, v24, v25, v26, v27, v28, v113, v119, v123, (uint64_t)v10, type);
    uint64_t v1 = &type metadata for Any;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v30, v31);
    OUTLINED_FUNCTION_118_0();
    OUTLINED_FUNCTION_66_5();
    uint64_t v0 = log;
    OUTLINED_FUNCTION_31_2(&dword_0, log, v2, "#LNValueType getting value of %s", v12);
    id v10 = (id)v122;
    OUTLINED_FUNCTION_30_3(v122, v32, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_1_0(v122);
    OUTLINED_FUNCTION_1_0((uint64_t)v12);
  }

  else
  {
    OUTLINED_FUNCTION_55_10();
  }

  if (v7)
  {
    if (v7 != 1) {
      __asm { BR              X9 }
    }

    uint64_t v33 = OUTLINED_FUNCTION_125();
    if (v34 != -1)
    {
      if ((v34 & 1) != 0)
      {
        if (v0 == (os_log_s *)OUTLINED_FUNCTION_102())
        {
          id v10 = (id)*((void *)v131 + 78);
          *((void *)v131 + 45) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
          OUTLINED_FUNCTION_106();
          id v57 = OUTLINED_FUNCTION_84_1();
          uint64_t v58 = OUTLINED_FUNCTION_72( (uint64_t)v57,  &lazy cache variable for type metadata for NSUnit,  &OBJC_CLASS___NSUnit_ptr);
          OUTLINED_FUNCTION_86(v58);
          id v59 = objc_allocWithZone(&OBJC_CLASS___LNValue);
          OUTLINED_FUNCTION_110_0(v10);
          OUTLINED_FUNCTION_8_19();
          goto LABEL_19;
        }

        OUTLINED_FUNCTION_57_7();
        os_log_type_t v60 = OUTLINED_FUNCTION_58();
        if (OUTLINED_FUNCTION_45_0(v60))
        {
          os_log_type_t typea = v10;
          uint64_t v61 = OUTLINED_FUNCTION_38(22LL);
          v132[0] = OUTLINED_FUNCTION_38(64LL);
          uint64_t v62 = OUTLINED_FUNCTION_77_2(4.8151e-34);
          OUTLINED_FUNCTION_116_0(v62);
          uint64_t v64 = OUTLINED_FUNCTION_76_2(v63);
          id v10 = (id)v65;
          uint64_t v72 = OUTLINED_FUNCTION_48_9(v64, v65, v66, v67, v68, v69, v70, v71, v112);
          OUTLINED_FUNCTION_62_8(v72, v73, v74, v75, v76, v77, v78, v79, v114);
          OUTLINED_FUNCTION_14();
          uint64_t v80 = OUTLINED_FUNCTION_16_17();
          uint64_t v82 = v81;
          uint64_t v89 = OUTLINED_FUNCTION_48_9(v80, v81, v83, v84, v85, v86, v87, v88, v115);
          OUTLINED_FUNCTION_52_8(v89, v90, v91, v92, v93, v94, v95, v96, v116, v119, (void *)v131 + 71);
          OUTLINED_FUNCTION_20();
          OUTLINED_FUNCTION_60_7( &dword_0,  v97,  v98,  "Measurement unit type %s does not match requested %s.",  v99,  v100,  v101,  v102,  v117,  v120,  v124,  v132[0],  typea);
          OUTLINED_FUNCTION_71_2((uint64_t)&type metadata for Any, v118, v121, v125, (uint64_t)loga);
          OUTLINED_FUNCTION_1_0(v82);
          OUTLINED_FUNCTION_1_0(v61);

          OUTLINED_FUNCTION_8_19();
          goto LABEL_19;
        }

        OUTLINED_FUNCTION_39_12();
      }

      else
      {
        uint64_t v35 = OUTLINED_FUNCTION_122();
        if (v36)
        {
          NSString v37 = OUTLINED_FUNCTION_65_4();
          id v38 = (id)OUTLINED_FUNCTION_94((uint64_t)v37);

          OUTLINED_FUNCTION_14();
          *((void *)v131 + 12__swift_destroy_boxed_opaque_existential_1Tm(v0 + 9) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
          OUTLINED_FUNCTION_106();
          OUTLINED_FUNCTION_72(v39, &lazy cache variable for type metadata for NSUnit, &OBJC_CLASS___NSUnit_ptr);
          OUTLINED_FUNCTION_85_1((uint64_t)v38);
          id v10 = objc_allocWithZone(&OBJC_CLASS___LNValue);
          OUTLINED_FUNCTION_82_0(v131);

LABEL_19:
          OUTLINED_FUNCTION_8_19();
          goto LABEL_30;
        }

        uint64_t v9 = v1;
        Logger.logObject.getter(v35);
        os_log_type_t v103 = OUTLINED_FUNCTION_73();
        if (OUTLINED_FUNCTION_45_0(v103))
        {
          id v104 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
          OUTLINED_FUNCTION_46_10(v104);
          OUTLINED_FUNCTION_19_12( &dword_0,  v105,  v106,  "Could not create valid measurement due to missing unit symbol.");
          OUTLINED_FUNCTION_1_0((uint64_t)v0);
        }
      }

      goto LABEL_19;
    }

    Logger.logObject.getter(v33);
    os_log_type_t v52 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v52))
    {
      uint64_t v53 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_46_10(v53);
      os_log_type_t v56 = "Unable to parse measurement from nl intent.";
LABEL_28:
      OUTLINED_FUNCTION_19_12(&dword_0, v54, v55, v56);
      OUTLINED_FUNCTION_1_0((uint64_t)v0);
      goto LABEL_29;
    }

    goto LABEL_29;
  }

  outlined consume of VoiceCommandIntentValueType(v3, v5, 0);
  uint64_t v40 = OUTLINED_FUNCTION_109();
  if (!v41)
  {
    uint64_t v9 = (void *)*((void *)v131 + 95);
    Logger.logObject.getter(v40);
    os_log_type_t v107 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v107))
    {
      uint64_t v108 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_46_10(v108);
      os_log_type_t v56 = "#LNValueType: getLNValue returning nil";
      goto LABEL_28;
    }

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_81_1();
  OUTLINED_FUNCTION_3_0(*(void *)(v3 + 768));
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  outlined destroy of Any?(v2, &demangling cache variable for type metadata for LocationProviding?);
  OUTLINED_FUNCTION_100_0(v4, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  OUTLINED_FUNCTION_28_1();
  os_log_type_t v2 = v1[92];
  uint64_t v3 = (void *)v1[91];
  uint64_t v4 = OUTLINED_FUNCTION_42_7();
  if (v5)
  {
    OUTLINED_FUNCTION_108_0(v4, &demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_111_0();
    char v6 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v6))
    {
      char v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v7);
      OUTLINED_FUNCTION_27_0(&dword_0, v8, v9, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_1_0(v0);
    }
  }

  else
  {
    id v10 = v1[94];
    os_log_type_t v11 = v1[93];
    OUTLINED_FUNCTION_12_18();
    v1[53] = v2;
    OUTLINED_FUNCTION_69_3();
    OUTLINED_FUNCTION_75(v12, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
    uint64_t v13 = objc_allocWithZone(&OBJC_CLASS___LNValue);
    unint64_t v14 = OUTLINED_FUNCTION_113_0();
    OUTLINED_FUNCTION_31_11(v14);
    OUTLINED_FUNCTION_18_18();
  }

  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  uint64_t v15 = OUTLINED_FUNCTION_52_7();
  return OUTLINED_FUNCTION_3_23(v15, v16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_80_1();
  OUTLINED_FUNCTION_3_0(*(void *)(v2 + 776));
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  OUTLINED_FUNCTION_104_0();
  outlined destroy of Any?(v0, &demangling cache variable for type metadata for LocationProviding?);
  OUTLINED_FUNCTION_100_0(v3, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  OUTLINED_FUNCTION_28_1();
  os_log_type_t v2 = v1[87];
  uint64_t v3 = (void *)v1[86];
  uint64_t v4 = OUTLINED_FUNCTION_42_7();
  if (v5)
  {
    OUTLINED_FUNCTION_108_0(v4, &demangling cache variable for type metadata for DateComponents?);
    OUTLINED_FUNCTION_111_0();
    char v6 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v6))
    {
      char v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v7);
      OUTLINED_FUNCTION_27_0(&dword_0, v8, v9, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_1_0(v0);
    }
  }

  else
  {
    id v10 = v1[89];
    os_log_type_t v11 = v1[88];
    OUTLINED_FUNCTION_12_18();
    v1[49] = v2;
    OUTLINED_FUNCTION_69_3();
    OUTLINED_FUNCTION_75(v12, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
    uint64_t v13 = objc_allocWithZone(&OBJC_CLASS___LNValue);
    unint64_t v14 = OUTLINED_FUNCTION_113_0();
    OUTLINED_FUNCTION_31_11(v14);
    OUTLINED_FUNCTION_18_18();
  }

  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  uint64_t v15 = OUTLINED_FUNCTION_52_7();
  return OUTLINED_FUNCTION_3_23(v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_42_1();
  *(void *)(v1 + 79outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v0;
  OUTLINED_FUNCTION_54_0(v2);
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_21_0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OUTLINED_FUNCTION_40_1();
  uint64_t v1 = *(void **)(v0 + 808);
  OUTLINED_FUNCTION_42_1();
  *(void *)(v3 + 83outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = v2;
  OUTLINED_FUNCTION_54_0(v4);

  OUTLINED_FUNCTION_41_8();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_45_7(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  OUTLINED_FUNCTION_28_1();
  if (*(void *)(v2 + 832))
  {
    uint64_t v3 = [*(id *)(v2 + 800) memberValueType];
    uint64_t v4 = objc_opt_self(&OBJC_CLASS___LNEntityValueType);
    if (OUTLINED_FUNCTION_10_12(v4))
    {
      uint64_t v5 = *(id *)(v2 + 624);
    }

    else
    {
      id v10 = *(void **)(v2 + 832);
      os_log_type_t v11 = *(void **)(v2 + 624);

      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v13 = (__n128 *)OUTLINED_FUNCTION_23_4(v12);
      OUTLINED_FUNCTION_90_0(v13, v14, v15, (__n128)xmmword_17E150);
      uint64_t v5 = v10;
      [v5 valueType];
      uint64_t v16 = objc_allocWithZone(&OBJC_CLASS___LNValue);
      OUTLINED_FUNCTION_74_3();
    }
  }

  else
  {

    OUTLINED_FUNCTION_111_0();
    char v6 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v6))
    {
      char v7 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v7);
      OUTLINED_FUNCTION_27_0(&dword_0, v8, v9, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_1_0(v1);
    }
  }

  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  uint64_t v17 = OUTLINED_FUNCTION_52_7();
  return OUTLINED_FUNCTION_3_23(v17, v18);
}

uint64_t specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)(uint64_t a1)
{
  if (*(void *)(v2 + 800))
  {
    uint64_t v3 = *(void **)(v2 + 624);
    OUTLINED_FUNCTION_72(a1, &lazy cache variable for type metadata for CLPlacemark, &OBJC_CLASS___CLPlacemark_ptr);
    id v4 = objc_allocWithZone(&OBJC_CLASS___LNValue);
    id v5 = v3;
    OUTLINED_FUNCTION_124(v5, v6);
  }

  else
  {
    OUTLINED_FUNCTION_101();
    os_log_type_t v7 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v7))
    {
      uint64_t v8 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v8);
      OUTLINED_FUNCTION_27_0(&dword_0, v9, v10, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_1_0(v1);
    }
  }

  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  uint64_t v11 = OUTLINED_FUNCTION_52_7();
  return OUTLINED_FUNCTION_35_14(v11, v12);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  if (*(void *)(v2 + 792))
  {
    uint64_t v3 = *(void **)(v2 + 624);
    OUTLINED_FUNCTION_72(a1, &lazy cache variable for type metadata for CLPlacemark, &OBJC_CLASS___CLPlacemark_ptr);
    id v4 = objc_allocWithZone(&OBJC_CLASS___LNValue);
    id v5 = v3;
    OUTLINED_FUNCTION_124(v5, v6);
  }

  else
  {
    OUTLINED_FUNCTION_111_0();
    os_log_type_t v7 = OUTLINED_FUNCTION_73();
    if (OUTLINED_FUNCTION_45_0(v7))
    {
      uint64_t v8 = (_WORD *)OUTLINED_FUNCTION_38(2LL);
      OUTLINED_FUNCTION_26_1(v8);
      OUTLINED_FUNCTION_27_0(&dword_0, v9, v10, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_1_0(v1);
    }
  }

  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_2();
  uint64_t v11 = OUTLINED_FUNCTION_52_7();
  return OUTLINED_FUNCTION_35_14(v11, v12);
}

uint64_t specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[78] = a5;
  v7[77] = a4;
  v7[76] = a2;
  v7[75] = a1;
  uint64_t v10 = type metadata accessor for Locale(0LL);
  v7[79] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[80] = v11;
  v7[81] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v7[82] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  v7[83] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v7[84] = v14;
  v7[85] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v7[86] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DateComponents(0LL);
  v7[87] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v7[88] = v17;
  v7[89] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  v7[90] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v7[91] = swift_task_alloc((*(void *)(*(void *)(v19 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for Date(0LL);
  v7[92] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v7[93] = v21;
  v7[94] = swift_task_alloc((*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v7[5] = a6;
  v7[6] = a7;
  __swift_allocate_boxed_opaque_existential_1Tm(v7 + 2);
  (*(void (**)(void))(*(void *)(a6 - 8) + 16LL))();
  return swift_task_switch( specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:),  0LL,  0LL);
}

uint64_t outlined copy of VoiceCommandIntentValueType(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for VoiceCommandIntentValueType(uint64_t a1)
{
  return outlined consume of VoiceCommandIntentValueType(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for VoiceCommandIntentValueType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of VoiceCommandIntentValueType(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for VoiceCommandIntentValueType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of VoiceCommandIntentValueType(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  outlined consume of VoiceCommandIntentValueType(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for VoiceCommandIntentValueType(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  outlined consume of VoiceCommandIntentValueType(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for VoiceCommandIntentValueType()
{
  return &type metadata for VoiceCommandIntentValueType;
}

ValueMetadata *type metadata accessor for LNValueTypeMap()
{
  return &type metadata for LNValueTypeMap;
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent)
  {
    uint64_t v1 = type metadata accessor for VoiceCommandsNLIntent(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for VoiceCommandsNLIntent, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent);
  }

  return result;
}

void outlined consume of ParsedMeasurement?(uint64_t a1, void *a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    outlined consume of ParsedMeasurement(a1, a2, a3 & 1);
  }
}

void outlined consume of ParsedMeasurement(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0) {
}
  }

id outlined copy of ParsedMeasurement(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0) {
    return a2;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_20()
{
  uint64_t v1 = *(void *)(v0 + 752);
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  return swift_task_dealloc(v1);
}

uint64_t OUTLINED_FUNCTION_3_23(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_6_17(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

void OUTLINED_FUNCTION_8_19()
{
}

uint64_t OUTLINED_FUNCTION_10_12(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t OUTLINED_FUNCTION_12_18()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_13_14(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

id OUTLINED_FUNCTION_14_19(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t OUTLINED_FUNCTION_16_17()
{
  *(_WORD *)(v5 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
  *char v6 = v2;
  return String.init<A>(describing:)(v6, v0);
}

uint64_t OUTLINED_FUNCTION_18_18()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void OUTLINED_FUNCTION_19_12(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void OUTLINED_FUNCTION_21_15()
{
}

uint64_t OUTLINED_FUNCTION_23_15(float a1)
{
  *uint64_t v5 = a1;
  *(void *)(v3 + 520) = v1;
  *(void *)(v3 + 528) = v2;
  *(_BYTE *)(v3 + 536) = v4;
  return outlined copy of VoiceCommandIntentValueType(v1, v2, v4);
}

  ;
}

uint64_t OUTLINED_FUNCTION_26_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static InputUtils.getDate(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)(a1, a2, a3, a4, a5);
}

uint64_t OUTLINED_FUNCTION_27_14(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_28_10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_29_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static InputUtils.getDateComponents(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)( a1,  a2,  a3,  a4,  a5);
}

uint64_t OUTLINED_FUNCTION_30_13(uint64_t a1)
{
  return static InputUtils.getPlacemark(from:)(a1);
}

void OUTLINED_FUNCTION_31_11(void *a1)
{
}

uint64_t OUTLINED_FUNCTION_32_8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v15 = *(void *)(v14 + 752);
  __swift_destroy_boxed_opaque_existential_1Tm(a14);
  return swift_task_dealloc(v15);
}

uint64_t OUTLINED_FUNCTION_35_14(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void OUTLINED_FUNCTION_39_12()
{
}

uint64_t OUTLINED_FUNCTION_42_7()
{
  return __swift_getEnumTagSinglePayload(v1, 1LL, v0);
}

uint64_t OUTLINED_FUNCTION_45_7(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_46_12(float a1)
{
  *uint64_t v3 = a1;
  return swift_getErrorValue(v1, v4, v2);
}

uint64_t OUTLINED_FUNCTION_48_9( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

void OUTLINED_FUNCTION_49_10( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_log_t log)
{
}

uint64_t OUTLINED_FUNCTION_52_8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, v12, v11);
}

id OUTLINED_FUNCTION_53_9(float a1)
{
  *uint64_t v1 = a1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_54_11()
{
  *(void *)(v0 + outlined init with copy of AppShortcutInvoking(v0, v1 - 208) = 0LL;
  *(_OWORD *)(v0 + 19outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  return static Device.current.getter();
}

void OUTLINED_FUNCTION_55_10()
{
}

uint64_t OUTLINED_FUNCTION_56_11()
{
  uint64_t v3 = outlined copy of VoiceCommandIntentValueType(v1, v0, v2);
  return Logger.logObject.getter(v3);
}

uint64_t OUTLINED_FUNCTION_57_7()
{
  id v2 = outlined copy of ParsedMeasurement(v1, v0, 1);
  return Logger.logObject.getter(v2);
}

void OUTLINED_FUNCTION_60_7( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log, uint64_t a11, uint64_t a12, os_log_type_t type)
{
}

uint64_t OUTLINED_FUNCTION_61_9( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 + outlined init with copy of AppShortcutInvoking(*(void *)(v0 + 944) + 96LL, v0 + 584) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, a13, a11);
}

uint64_t OUTLINED_FUNCTION_62_8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *uint64_t v9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v10, a9);
}

NSString OUTLINED_FUNCTION_65_4()
{
  return String._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_66_5()
{
  return outlined consume of VoiceCommandIntentValueType(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_67_4(uint64_t a1, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v2, v1);
}

void OUTLINED_FUNCTION_69_3()
{
}

uint64_t OUTLINED_FUNCTION_70_4()
{
  return *(void *)(v0 + 600);
}

uint64_t OUTLINED_FUNCTION_71_2@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_arrayDestroy(a5, 2LL, a1 + 8);
}

uint64_t OUTLINED_FUNCTION_72_0(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_73_2(uint64_t a1)
{
  return IntentNodeTraversable.value<A>(forNode:)(v1, v2, a1);
}

void OUTLINED_FUNCTION_74_3()
{
}

uint64_t OUTLINED_FUNCTION_75_3()
{
  return static InputUtils.getURL(from:)(*(void *)(v0 + 656));
}

uint64_t OUTLINED_FUNCTION_76_2(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

uint64_t OUTLINED_FUNCTION_77_2(float a1)
{
  *uint64_t v2 = a1;
  return LNMeasurementUnitTypeOfUnit(v1);
}

uint64_t OUTLINED_FUNCTION_78_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  return static InputUtils.getPerson(from:contactResolver:locale:)(*(void *)(v14 + 600), a14, *(void *)(v14 + 616));
}

uint64_t OUTLINED_FUNCTION_79_0()
{
  *(void *)(v0 + 288) = 0LL;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 27outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 0u;
  return static Device.current.getter();
}

void OUTLINED_FUNCTION_80_1()
{
  *(void *)(v1 - 8) = *v0;
}

void OUTLINED_FUNCTION_81_1()
{
  *(void *)(v1 - 8) = *v0;
}

void OUTLINED_FUNCTION_82_0(void *a1)
{
}

id OUTLINED_FUNCTION_84_1()
{
  return outlined copy of ParsedMeasurement(v1, v0, 1);
}

uint64_t OUTLINED_FUNCTION_85_1(uint64_t a1)
{
  return Measurement.init(value:unit:)(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_86(uint64_t a1)
{
  return Measurement.init(value:unit:)(v1, a1, v2);
}

uint64_t OUTLINED_FUNCTION_87_0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_88_0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 688);
}

uint64_t OUTLINED_FUNCTION_89_1@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 728);
}

uint64_t OUTLINED_FUNCTION_90_0(__n128 *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  a1[1] = a4;
  a1[2].n128_u64[0] = v4;
  return specialized Array._endMutation()(a1, a2, a3);
}

BOOL OUTLINED_FUNCTION_91_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

id OUTLINED_FUNCTION_93()
{
  return static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(*(void **)(v0 + 624));
}

uint64_t OUTLINED_FUNCTION_94(uint64_t a1)
{
  return LNMeasurementUnitTypeToUnit(v1, a1);
}

  ;
}

void OUTLINED_FUNCTION_100_0(uint64_t a1, uint64_t *a2)
{
}

uint64_t OUTLINED_FUNCTION_101()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_102()
{
  return LNMeasurementUnitTypeOfUnit(v0);
}

uint64_t OUTLINED_FUNCTION_103()
{
  return type metadata accessor for VoiceCommandsNLIntent(0LL);
}

uint64_t OUTLINED_FUNCTION_104_0()
{
  return __swift_destroy_boxed_opaque_existential_1Tm(v0);
}

void OUTLINED_FUNCTION_106()
{
}

void OUTLINED_FUNCTION_108_0(uint64_t a1, uint64_t *a2)
{
}

uint64_t OUTLINED_FUNCTION_109()
{
  return static InputUtils.getText(from:)();
}

void OUTLINED_FUNCTION_110_0(void *a1)
{
}

uint64_t OUTLINED_FUNCTION_111_0()
{
  return Logger.logObject.getter();
}

id OUTLINED_FUNCTION_112_0()
{
  return v0;
}

id OUTLINED_FUNCTION_113_0()
{
  return v0;
}

  ;
}

uint64_t OUTLINED_FUNCTION_115()
{
  return Error.localizedDescription.getter(*(void *)(v0 + 504), *(void *)(v0 + 512));
}

void OUTLINED_FUNCTION_116_0(uint64_t a1)
{
  *uint64_t v1 = a1;
  type metadata accessor for LNMeasurementUnitType(0LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_118_0()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

id OUTLINED_FUNCTION_120_0()
{
  return static InputUtils.getCurrency(from:locale:)(*(void *)(v0 + 600), *(uint8_t **)(v0 + 616));
}

uint64_t OUTLINED_FUNCTION_121(uint64_t a1, unint64_t *a2)
{
  return type metadata accessor for NSError(0LL, a2, v2);
}

uint64_t OUTLINED_FUNCTION_122()
{
  return LNActionParameterMetadata.measurementDefaultUnitSymbol.getter();
}

id OUTLINED_FUNCTION_123_0()
{
  return v0;
}

void OUTLINED_FUNCTION_124(void *a1, uint64_t a2, ...)
{
}

uint64_t OUTLINED_FUNCTION_125()
{
  return static InputUtils.getMeasurement(from:)(*(void *)(v0 + 600));
}

  ;
}

uint64_t OUTLINED_FUNCTION_129_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 + 59outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = a1;
  return a13;
}

void static InstrumentationUtils.emitAutoShortcutUsedInstrumentation(autoShortcutTemplate:)()
{
  id v3 = [objc_allocWithZone(FLOWLINKSchemaFLOWLINKAutoShortcutTemplateUsed) init];
  if (v3)
  {
    unint64_t v4 = v3;
    outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKAutoShortcutTemplateUsed.autoshortcutTemplate.setter( v1,  (uint64_t)v0,  v3);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v5 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_65_5(v5, (uint64_t)static Logger.voiceCommands);
    id v6 = v4;
    Logger.logObject.getter(v6);
    os_log_type_t v7 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_20_9(v7))
    {
      char v8 = (uint8_t *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v9 = OUTLINED_FUNCTION_38(32LL);
      uint64_t v15 = v9;
      *(_DWORD *)char v8 = 136315138;
      uint64_t ObjectType = swift_getObjectType(v6);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLINKAutoShortcutTemplateUsed.Type);
      uint64_t v11 = String.init<A>(describing:)(&ObjectType, v10);
      uint64_t ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v15, v8 + 4);

      OUTLINED_FUNCTION_28_4();
      _os_log_impl(&dword_0, v0, v2, "#SLF SELF emitting event: %s", v8, 0xCu);
      OUTLINED_FUNCTION_30_3(v9, v13, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v9);
      OUTLINED_FUNCTION_1_0((uint64_t)v8);
    }

    else
    {
    }

    OUTLINED_FUNCTION_29_13();
  }

void static InstrumentationUtils.emitAppShorcutGeneralizedInvocationInstrumentation(appShortcutIdentifier:)( uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone(FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsed) init];
  if (v4)
  {
    uint64_t v5 = v4;
    outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsed.appShortcutId.setter( a1,  a2,  v4);
    OUTLINED_FUNCTION_37_13();
    OUTLINED_FUNCTION_5_15(v5);
  }

  else
  {
    OUTLINED_FUNCTION_73_3();
  }

#error "72AC4: call analysis failed (funcsize=100)"
void specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)()
{
  specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)();
}

void specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)()
{
  uint64_t v96 = v4;
  uint64_t v97 = v3;
  id v6 = v5;
  int v95 = v7;
  uint64_t v8 = OUTLINED_FUNCTION_66_6();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_53_10();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v85 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v85 - v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_52_9();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_77_3();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v85 - v19;
  id v21 = OUTLINED_FUNCTION_47_2(objc_allocWithZone(&OBJC_CLASS___FLOWLINKSchemaFLOWLINKClientEvent));
  if (!v21) {
    goto LABEL_33;
  }
  id v98 = v21;
  id v22 = OUTLINED_FUNCTION_47_2(objc_allocWithZone(&OBJC_CLASS___FLOWSchemaFLOWEventMetadata));
  if (!v22)
  {
    OUTLINED_FUNCTION_26_13(v98);
    return;
  }

  uint64_t v91 = v8;
  uint64_t v92 = v20;
  uint64_t v23 = v9;
  id v94 = v22;
  uint64_t ObjectType = swift_getObjectType(v97);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(v6);
  uint64_t v90 = String.init<A>(describing:)(&ObjectType, v24);
  unint64_t v93 = v25;
  os_log_type_t v26 = type metadata accessor for SiriEnvironment(0LL);
  ((void (*)(void))static SiriEnvironment.default.getter)();
  SiriEnvironment.flowTask.getter();
  uint64_t v27 = OUTLINED_FUNCTION_74_4();
  uint64_t v28 = (void *)dispatch thunk of FlowTaskProvider.id.getter(v27);
  uint64_t v30 = v29;
  swift_release(v20);
  if (!v30)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v42 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_65_5(v42, (uint64_t)static Logger.voiceCommands);
    unint64_t v43 = v93;
    uint64_t v44 = swift_bridgeObjectRetain(v93);
    Logger.logObject.getter(v44);
    os_log_type_t v45 = OUTLINED_FUNCTION_54_8();
    BOOL v46 = OUTLINED_FUNCTION_43_9(v45);
    id v47 = v94;
    if (v46)
    {
      uint64_t v48 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
      uint64_t v49 = OUTLINED_FUNCTION_38(32LL);
      uint64_t ObjectType = v49;
      *uint64_t v48 = 136315138;
      swift_bridgeObjectRetain(v43);
      uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v43, &ObjectType);
      uint64_t v51 = OUTLINED_FUNCTION_64_4(v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v52, v48 + 1);
      OUTLINED_FUNCTION_37_3(v43);
      OUTLINED_FUNCTION_49_11(&dword_0, v53, v54, "#SLF SELF Log, current taskId is nil, cannot emit %s");
      OUTLINED_FUNCTION_30_3(v49, v55, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v49);
      OUTLINED_FUNCTION_1_0((uint64_t)v48);

      OUTLINED_FUNCTION_14_18();
    }

    else
    {

      OUTLINED_FUNCTION_19_1(v43);
      OUTLINED_FUNCTION_14_18();
    }

    goto LABEL_33;
  }

  uint64_t v31 = (uint64_t)v92;
  id v89 = v28;
  UUID.init(uuidString:)(v28, v30);
  outlined init with copy of UUID?(v31, v2);
  uint64_t v32 = v91;
  if (__swift_getEnumTagSinglePayload(v2, 1LL, v91) == 1)
  {
    uint64_t v33 = (os_log_s *)v30;
    outlined destroy of UUID?(v2);
    id v34 = v94;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v35 = OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_65_5(v35, (uint64_t)static Logger.voiceCommands);
    unint64_t v36 = v93;
    swift_bridgeObjectRetain(v93);
    uint64_t v37 = swift_bridgeObjectRetain(v30);
    Logger.logObject.getter(v37);
    os_log_type_t v38 = OUTLINED_FUNCTION_54_8();
    if (OUTLINED_FUNCTION_43_9(v38))
    {
      uint64_t v39 = OUTLINED_FUNCTION_38(22LL);
      uint64_t v40 = OUTLINED_FUNCTION_38(64LL);
      uint64_t ObjectType = v40;
      *(_DWORD *)uint64_t v39 = 136315394;
      swift_bridgeObjectRetain(v33);
      uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v89, (unint64_t)v33, &ObjectType);
      OUTLINED_FUNCTION_69_4();
      OUTLINED_FUNCTION_37_3((uint64_t)v33);
      *(_WORD *)(v39 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
      swift_bridgeObjectRetain(v36);
      uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v36, &ObjectType);
      OUTLINED_FUNCTION_69_4();
      OUTLINED_FUNCTION_37_3(v36);
      OUTLINED_FUNCTION_24_9( &dword_0,  v33,  v26,  "#SLF SELF Log, current taskId: %s, is not a valid UUID String, cannot emit %s",  (uint8_t *)v39);
      OUTLINED_FUNCTION_23_9(v40, v41, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_1_0(v40);
      OUTLINED_FUNCTION_1_0(v39);
    }

    else
    {
      OUTLINED_FUNCTION_19_1(v30);
      OUTLINED_FUNCTION_19_1(v36);
    }

    OUTLINED_FUNCTION_14_18();
  }

  else
  {
    uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 32);
    v85(v15, v2, v32);
    id v56 = static InstrumentationUtils.createFlowId()();
    id v57 = v94;
    if (!v56)
    {
      OUTLINED_FUNCTION_20();
      if (one-time initialization token for voiceCommands != -1) {
        swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
      }
      uint64_t v67 = OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_65_5(v67, (uint64_t)static Logger.voiceCommands);
      unint64_t v68 = v93;
      uint64_t v69 = swift_bridgeObjectRetain(v93);
      Logger.logObject.getter(v69);
      os_log_type_t v70 = OUTLINED_FUNCTION_54_8();
      if (OUTLINED_FUNCTION_43_9(v70))
      {
        uint64_t v71 = (_DWORD *)OUTLINED_FUNCTION_38(12LL);
        uint64_t v72 = OUTLINED_FUNCTION_38(32LL);
        uint64_t ObjectType = v72;
        _DWORD *v71 = 136315138;
        swift_bridgeObjectRetain(v68);
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v68, &ObjectType);
        uint64_t v74 = OUTLINED_FUNCTION_64_4(v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v74, v75, v71 + 1);
        OUTLINED_FUNCTION_37_3(v68);
        OUTLINED_FUNCTION_49_11( &dword_0,  v76,  v77,  "#SLF SELF Log, current flowId is not a valid UUID String, cannot emit %s");
        OUTLINED_FUNCTION_30_3(v72, v78, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_1_0(v72);
        OUTLINED_FUNCTION_1_0((uint64_t)v71);
      }

      else
      {
        OUTLINED_FUNCTION_19_1(v68);
      }

      OUTLINED_FUNCTION_14_18();
      OUTLINED_FUNCTION_58_10();
      uint64_t v84 = (uint64_t)v92;
      goto LABEL_32;
    }

    uint64_t v58 = v56;
    uint64_t v90 = v30;
    OUTLINED_FUNCTION_80_2();
    uint64_t v86 = v23;
    uint64_t v87 = v15;
    id v59 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
    v59(v13, v15, v32);
    id v60 = OUTLINED_FUNCTION_78_1();
    OUTLINED_FUNCTION_60_8(v57, "setTaskId:");

    uint64_t v88 = v58;
    static SiriEnvironment.default.getter([v57 setFlowId:v58]);
    SiriEnvironment.currentRequest.getter();
    uint64_t v61 = OUTLINED_FUNCTION_74_4();
    uint64_t v62 = CurrentRequest.resultCandidateId.getter(v61);
    uint64_t v64 = v63;
    swift_release(v57);
    if (v64)
    {
      swift_bridgeObjectRetain(v64);
      UUID.init(uuidString:)(v62, v64);
      OUTLINED_FUNCTION_37();
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1LL, v32);
      uint64_t v31 = (uint64_t)v92;
      if (EnumTagSinglePayload == 1)
      {
        outlined destroy of UUID?(v1);
        id v66 = v94;
      }

      else
      {
        v85(v0, v1, v32);
        v59(v13, v0, v32);
        id v81 = OUTLINED_FUNCTION_78_1();
        id v66 = v94;
        OUTLINED_FUNCTION_23_16(v94, "setTrpId:");

        (*(void (**)(char *, uint64_t))(v86 + 8))(v0, v32);
      }

      char v80 = v95;
      NSString v79 = String._bridgeToObjectiveC()();
      OUTLINED_FUNCTION_37();
    }

    else
    {
      NSString v79 = 0LL;
      id v66 = v94;
      uint64_t v31 = (uint64_t)v92;
      char v80 = v95;
    }

    OUTLINED_FUNCTION_23_16(v66, "setResultCandidateId:");

    OUTLINED_FUNCTION_60_8(v98, "setEventMetadata:");
    swift_bridgeObjectRelease(v93);
    objc_msgSend(v98, *v96, v97);
    id v82 = [(id)objc_opt_self(AssistantSiriAnalytics) sharedStream];
    [v82 emitMessage:v98];
    swift_unknownObjectRelease(v82);
    uint64_t v83 = v88;
    if ((v80 & 1) != 0) {
      static InstrumentationUtils.emitLinkFlowRequestLink(taskId:flowId:)(v89, v90, v88);
    }

    OUTLINED_FUNCTION_14_18();
    swift_bridgeObjectRelease(v90);
    OUTLINED_FUNCTION_58_10();
  }

  uint64_t v84 = v31;
LABEL_32:
  outlined destroy of UUID?(v84);
LABEL_33:
  OUTLINED_FUNCTION_24_0();
}

id static InstrumentationUtils.createFlowId()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  int v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v34 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v34 - v11;
  static InstrumentationUtils.createFlowUUID()();
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1LL, v3) == 1)
  {
    outlined destroy of UUID?((uint64_t)v2);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl( &dword_0,  v15,  v16,  "#SLF SELF Log, invalid executionRequestId string, cannot derive flowId form it",  v17,  2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    return 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v2, v3);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
    uint64_t v20 = *(uint64_t (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v21 = v20(v10, v12, v3);
    id v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc(12LL, -1LL);
      uint64_t v37 = v20;
      unint64_t v25 = (uint8_t *)v24;
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = v26;
      uint64_t v39 = v26;
      *(_DWORD *)unint64_t v25 = 136315138;
      uint64_t v35 = v25 + 4;
      uint64_t v27 = UUID.uuidString.getter(v26);
      unint64_t v29 = v28;
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v35);
      swift_bridgeObjectRelease(v29);
      uint64_t v30 = *(void (**)(char *, uint64_t))(v4 + 8);
      v30(v10, v3);
      _os_log_impl(&dword_0, v22, v23, "#SLF SELF Log, created flowId: %s", v25, 0xCu);
      uint64_t v31 = v36;
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      uint64_t v32 = v25;
      uint64_t v20 = v37;
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
      uint64_t v30 = *(void (**)(char *, uint64_t))(v4 + 8);
      v30(v10, v3);
    }

    type metadata accessor for SISchemaUUID();
    v20(v7, v12, v3);
    id v18 = SISchemaUUID.__allocating_init(nsuuid:)();
    v30(v12, v3);
  }

  return v18;
}

void static InstrumentationUtils.emitLinkFlowRequestLink(taskId:flowId:)( id a1, unint64_t a2, void *a3)
{
  id v78 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v69 - v9;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)&v69 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v69 - v19;
  id v21 = [objc_allocWithZone(SISchemaRequestLink) init];
  if (v21)
  {
    uint64_t v75 = v8;
    uint64_t v76 = v20;
    id v77 = a1;
    id v22 = v21;
    id v23 = [objc_allocWithZone(SISchemaRequestLinkInfo) init];
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v74 = v15;
      uint64_t v25 = v12;
      id v26 = [objc_allocWithZone(SISchemaRequestLinkInfo) init];
      if (v26)
      {
        uint64_t v27 = v26;
        unint64_t v28 = v24;
        [v24 setComponent:3];
        [v24 setUuid:v78];
        static InstrumentationUtils.getOrchestrationRequestId()((uint64_t)v10);
        uint64_t v29 = v11;
        if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v11) == 1)
        {
          outlined destroy of UUID?((uint64_t)v10);
          if (one-time initialization token for voiceCommands != -1) {
            swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
          }
          uint64_t v30 = type metadata accessor for Logger(0LL);
          uint64_t v31 = __swift_project_value_buffer(v30, (uint64_t)static Logger.voiceCommands);
          uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
          os_log_type_t v33 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v32, v33))
          {
            uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v34 = 0;
            _os_log_impl( &dword_0,  v32,  v33,  "#SLF SELF Log - current executionRequestId is not a valid UUID String, cannot emit request link info",  v34,  2u);
            swift_slowDealloc(v34, -1LL, -1LL);
          }

          else
          {
          }
        }

        else
        {
          uint64_t v41 = v25;
          uint64_t v42 = v76;
          (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v76, v10, v29);
          unint64_t v43 = v27;
          [v27 setComponent:1];
          type metadata accessor for SISchemaUUID();
          uint64_t v73 = v41;
          uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
          v44(v18, v42, v29);
          id v45 = SISchemaUUID.__allocating_init(nsuuid:)();
          [v43 setUuid:v45];

          [v22 setSource:v28];
          [v22 setTarget:v43];
          uint64_t v46 = v29;
          if (one-time initialization token for voiceCommands != -1) {
            swift_once( &one-time initialization token for voiceCommands,  one-time initialization function for voiceCommands);
          }
          uint64_t v47 = type metadata accessor for Logger(0LL);
          __swift_project_value_buffer(v47, (uint64_t)static Logger.voiceCommands);
          uint64_t v48 = v74;
          v44(v74, v42, v46);
          swift_bridgeObjectRetain_n(a2, 2LL);
          id v49 = v78;
          uint64_t v50 = (void *)Logger.logObject.getter(v49);
          int v51 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled((os_log_t)v50, (os_log_type_t)v51))
          {
            os_log_type_t v70 = v43;
            int v72 = v51;
            id v78 = v50;
            uint64_t v52 = swift_slowAlloc(32LL, -1LL);
            uint64_t v71 = swift_slowAlloc(96LL, -1LL);
            uint64_t v80 = v71;
            *(_DWORD *)uint64_t v52 = 136315650;
            swift_bridgeObjectRetain(a2);
            uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v77, a2, &v80);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v52 + 4);
            uint64_t v53 = swift_bridgeObjectRelease_n(a2, 3LL);
            *(_WORD *)(v52 + 1outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
            uint64_t v54 = (uint64_t)v75;
            id v77 = v49;
            SISchemaUUID.asUUID()(v53);
            uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v54, 1LL, v46);
            if ((_DWORD)EnumTagSinglePayload == 1)
            {
              outlined destroy of UUID?(v54);
              uint64_t v56 = 0LL;
              unint64_t v57 = 0xE000000000000000LL;
              uint64_t v58 = v73;
            }

            else
            {
              uint64_t v56 = UUID.uuidString.getter(EnumTagSinglePayload);
              unint64_t v57 = v60;
              uint64_t v58 = v73;
              (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v54, v46);
            }

            uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v80);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v52 + 14);
            id v61 = v77;

            swift_bridgeObjectRelease(v57);
            *(_WORD *)(v52 + 2outlined consume of WFExecuteCustomIntentFlow.State(v0, v1, 2) = 2080;
            unint64_t v62 = lazy protocol witness table accessor for type UUID and conformance UUID();
            uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v46, v62);
            unint64_t v65 = v64;
            uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v80);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v52 + 24);
            swift_bridgeObjectRelease(v65);
            id v59 = *(void (**)(char *, uint64_t))(v58 + 8);
            v59(v48, v46);
            id v66 = v78;
            _os_log_impl( &dword_0,  (os_log_t)v78,  (os_log_type_t)v72,  "#SLF SELF Log - emitting RequestLink for taskId: %s, flowId:%s, executionRequestId: %s",  (uint8_t *)v52,  0x20u);
            uint64_t v67 = v71;
            swift_arrayDestroy(v71, 3LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v67, -1LL, -1LL);
            swift_slowDealloc(v52, -1LL, -1LL);

            uint64_t v42 = v76;
            unint64_t v43 = v70;
          }

          else
          {

            swift_bridgeObjectRelease_n(a2, 2LL);
            id v59 = *(void (**)(char *, uint64_t))(v73 + 8);
            v59(v48, v46);
          }

          id v68 = [(id)objc_opt_self(AssistantSiriAnalytics) sharedStream];
          [v68 emitMessage:v22];

          swift_unknownObjectRelease(v68);
          v59(v42, v46);
        }

        return;
      }

      id v22 = v24;
    }

    a1 = v77;
  }

  if (one-time initialization token for voiceCommands != -1) {
    swift_once(&one-time initialization token for voiceCommands, one-time initialization function for voiceCommands);
  }
  uint64_t v35 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v35, (uint64_t)static Logger.voiceCommands);
  uint64_t v36 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    uint64_t v80 = v40;
    *(_DWORD *)uint64_t v39 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)a1, a2, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v39 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( &dword_0,  v37,  v38,  "#SLF SELF Log - unable to create request link info for SELF for taskId: %s",  v39,  0xCu);
    swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }